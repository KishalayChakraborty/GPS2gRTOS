
RTOS_GPSv_GSM_Relay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf14  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800bfd8  0800bfd8  0001bfd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5b8  0800c5b8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5b8  0800c5b8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5b8  0800c5b8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5b8  0800c5b8  0001c5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002054  200001d8  0800c798  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000222c  0800c798  0002222c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ed0f  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000511e  00000000  00000000  0004ef52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001646c  00000000  00000000  00054070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be8  00000000  00000000  0006a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001904  00000000  00000000  0006c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005ec5  00000000  00000000  0006d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f2f4  00000000  00000000  00073891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000aae02  00000000  00000000  000a2b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000062c8  00000000  00000000  0014d988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00153c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bfbc 	.word	0x0800bfbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800bfbc 	.word	0x0800bfbc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff99 	bl	8001374 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fee9 	bl	8001224 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff8b 	bl	8001374 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff81 	bl	8001374 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff11 	bl	80012a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff07 	bl	80012a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fe1f 	bl	8002100 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa78 	bl	80019c0 <__aeabi_dsub>
 80004d0:	f001 fe16 	bl	8002100 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff87 	bl	800143c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe4a 	bl	80021cc <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff7e 	bl	800143c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fa3a 	bl	80019c0 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fe03 	bl	800216c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff67 	bl	800143c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fe2a 	bl	80021cc <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0004      	movs	r4, r0
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	001f      	movs	r7, r3
 8000596:	030b      	lsls	r3, r1, #12
 8000598:	0010      	movs	r0, r2
 800059a:	004e      	lsls	r6, r1, #1
 800059c:	0a5b      	lsrs	r3, r3, #9
 800059e:	0fcd      	lsrs	r5, r1, #31
 80005a0:	0f61      	lsrs	r1, r4, #29
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	4319      	orrs	r1, r3
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	0fff      	lsrs	r7, r7, #31
 80005ac:	46bc      	mov	ip, r7
 80005ae:	0a64      	lsrs	r4, r4, #9
 80005b0:	0f47      	lsrs	r7, r0, #29
 80005b2:	4327      	orrs	r7, r4
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d52      	lsrs	r2, r2, #21
 80005b8:	00c0      	lsls	r0, r0, #3
 80005ba:	46b9      	mov	r9, r7
 80005bc:	4680      	mov	r8, r0
 80005be:	1ab7      	subs	r7, r6, r2
 80005c0:	4565      	cmp	r5, ip
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e09b      	b.n	80006fe <__aeabi_dadd+0x176>
 80005c6:	2f00      	cmp	r7, #0
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_dadd+0x44>
 80005ca:	e084      	b.n	80006d6 <__aeabi_dadd+0x14e>
 80005cc:	2a00      	cmp	r2, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e0be      	b.n	8000750 <__aeabi_dadd+0x1c8>
 80005d2:	4ac8      	ldr	r2, [pc, #800]	; (80008f4 <__aeabi_dadd+0x36c>)
 80005d4:	4296      	cmp	r6, r2
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e124      	b.n	8000824 <__aeabi_dadd+0x29c>
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	464c      	mov	r4, r9
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	4314      	orrs	r4, r2
 80005e2:	46a1      	mov	r9, r4
 80005e4:	2f38      	cmp	r7, #56	; 0x38
 80005e6:	dd00      	ble.n	80005ea <__aeabi_dadd+0x62>
 80005e8:	e167      	b.n	80008ba <__aeabi_dadd+0x332>
 80005ea:	2f1f      	cmp	r7, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x68>
 80005ee:	e1d6      	b.n	800099e <__aeabi_dadd+0x416>
 80005f0:	2220      	movs	r2, #32
 80005f2:	464c      	mov	r4, r9
 80005f4:	1bd2      	subs	r2, r2, r7
 80005f6:	4094      	lsls	r4, r2
 80005f8:	46a2      	mov	sl, r4
 80005fa:	4644      	mov	r4, r8
 80005fc:	40fc      	lsrs	r4, r7
 80005fe:	0020      	movs	r0, r4
 8000600:	4654      	mov	r4, sl
 8000602:	4304      	orrs	r4, r0
 8000604:	4640      	mov	r0, r8
 8000606:	4090      	lsls	r0, r2
 8000608:	1e42      	subs	r2, r0, #1
 800060a:	4190      	sbcs	r0, r2
 800060c:	464a      	mov	r2, r9
 800060e:	40fa      	lsrs	r2, r7
 8000610:	4304      	orrs	r4, r0
 8000612:	1a89      	subs	r1, r1, r2
 8000614:	1b1c      	subs	r4, r3, r4
 8000616:	42a3      	cmp	r3, r4
 8000618:	4192      	sbcs	r2, r2
 800061a:	4252      	negs	r2, r2
 800061c:	1a8b      	subs	r3, r1, r2
 800061e:	469a      	mov	sl, r3
 8000620:	4653      	mov	r3, sl
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	d400      	bmi.n	8000628 <__aeabi_dadd+0xa0>
 8000626:	e0d4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000628:	4653      	mov	r3, sl
 800062a:	025a      	lsls	r2, r3, #9
 800062c:	0a53      	lsrs	r3, r2, #9
 800062e:	469a      	mov	sl, r3
 8000630:	4653      	mov	r3, sl
 8000632:	2b00      	cmp	r3, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0xb0>
 8000636:	e104      	b.n	8000842 <__aeabi_dadd+0x2ba>
 8000638:	4650      	mov	r0, sl
 800063a:	f001 fe73 	bl	8002324 <__clzsi2>
 800063e:	0003      	movs	r3, r0
 8000640:	3b08      	subs	r3, #8
 8000642:	2220      	movs	r2, #32
 8000644:	0020      	movs	r0, r4
 8000646:	1ad2      	subs	r2, r2, r3
 8000648:	4651      	mov	r1, sl
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4099      	lsls	r1, r3
 800064e:	0002      	movs	r2, r0
 8000650:	409c      	lsls	r4, r3
 8000652:	430a      	orrs	r2, r1
 8000654:	42b3      	cmp	r3, r6
 8000656:	da00      	bge.n	800065a <__aeabi_dadd+0xd2>
 8000658:	e102      	b.n	8000860 <__aeabi_dadd+0x2d8>
 800065a:	1b9b      	subs	r3, r3, r6
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	291f      	cmp	r1, #31
 8000660:	dd00      	ble.n	8000664 <__aeabi_dadd+0xdc>
 8000662:	e0a7      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000664:	2320      	movs	r3, #32
 8000666:	0010      	movs	r0, r2
 8000668:	0026      	movs	r6, r4
 800066a:	1a5b      	subs	r3, r3, r1
 800066c:	409c      	lsls	r4, r3
 800066e:	4098      	lsls	r0, r3
 8000670:	40ce      	lsrs	r6, r1
 8000672:	40ca      	lsrs	r2, r1
 8000674:	1e63      	subs	r3, r4, #1
 8000676:	419c      	sbcs	r4, r3
 8000678:	4330      	orrs	r0, r6
 800067a:	4692      	mov	sl, r2
 800067c:	2600      	movs	r6, #0
 800067e:	4304      	orrs	r4, r0
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d009      	beq.n	8000698 <__aeabi_dadd+0x110>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d005      	beq.n	8000698 <__aeabi_dadd+0x110>
 800068c:	1d23      	adds	r3, r4, #4
 800068e:	42a3      	cmp	r3, r4
 8000690:	41a4      	sbcs	r4, r4
 8000692:	4264      	negs	r4, r4
 8000694:	44a2      	add	sl, r4
 8000696:	001c      	movs	r4, r3
 8000698:	4653      	mov	r3, sl
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	d400      	bmi.n	80006a0 <__aeabi_dadd+0x118>
 800069e:	e09b      	b.n	80007d8 <__aeabi_dadd+0x250>
 80006a0:	4b94      	ldr	r3, [pc, #592]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a2:	3601      	adds	r6, #1
 80006a4:	429e      	cmp	r6, r3
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x122>
 80006a8:	e0b8      	b.n	800081c <__aeabi_dadd+0x294>
 80006aa:	4653      	mov	r3, sl
 80006ac:	4992      	ldr	r1, [pc, #584]	; (80008f8 <__aeabi_dadd+0x370>)
 80006ae:	08e4      	lsrs	r4, r4, #3
 80006b0:	400b      	ands	r3, r1
 80006b2:	0019      	movs	r1, r3
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	4323      	orrs	r3, r4
 80006b8:	0572      	lsls	r2, r6, #21
 80006ba:	024c      	lsls	r4, r1, #9
 80006bc:	0b24      	lsrs	r4, r4, #12
 80006be:	0d52      	lsrs	r2, r2, #21
 80006c0:	0512      	lsls	r2, r2, #20
 80006c2:	07ed      	lsls	r5, r5, #31
 80006c4:	4322      	orrs	r2, r4
 80006c6:	432a      	orrs	r2, r5
 80006c8:	0018      	movs	r0, r3
 80006ca:	0011      	movs	r1, r2
 80006cc:	bce0      	pop	{r5, r6, r7}
 80006ce:	46ba      	mov	sl, r7
 80006d0:	46b1      	mov	r9, r6
 80006d2:	46a8      	mov	r8, r5
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d048      	beq.n	800076c <__aeabi_dadd+0x1e4>
 80006da:	1b97      	subs	r7, r2, r6
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x15a>
 80006e0:	e10e      	b.n	8000900 <__aeabi_dadd+0x378>
 80006e2:	000c      	movs	r4, r1
 80006e4:	431c      	orrs	r4, r3
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x162>
 80006e8:	e1b7      	b.n	8000a5a <__aeabi_dadd+0x4d2>
 80006ea:	1e7c      	subs	r4, r7, #1
 80006ec:	2f01      	cmp	r7, #1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x16a>
 80006f0:	e226      	b.n	8000b40 <__aeabi_dadd+0x5b8>
 80006f2:	4d80      	ldr	r5, [pc, #512]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006f4:	42af      	cmp	r7, r5
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x172>
 80006f8:	e1d5      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 80006fa:	0027      	movs	r7, r4
 80006fc:	e107      	b.n	800090e <__aeabi_dadd+0x386>
 80006fe:	2f00      	cmp	r7, #0
 8000700:	dc00      	bgt.n	8000704 <__aeabi_dadd+0x17c>
 8000702:	e0b2      	b.n	800086a <__aeabi_dadd+0x2e2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d047      	beq.n	8000798 <__aeabi_dadd+0x210>
 8000708:	4a7a      	ldr	r2, [pc, #488]	; (80008f4 <__aeabi_dadd+0x36c>)
 800070a:	4296      	cmp	r6, r2
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x188>
 800070e:	e089      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	464c      	mov	r4, r9
 8000714:	0412      	lsls	r2, r2, #16
 8000716:	4314      	orrs	r4, r2
 8000718:	46a1      	mov	r9, r4
 800071a:	2f38      	cmp	r7, #56	; 0x38
 800071c:	dc6b      	bgt.n	80007f6 <__aeabi_dadd+0x26e>
 800071e:	2f1f      	cmp	r7, #31
 8000720:	dc00      	bgt.n	8000724 <__aeabi_dadd+0x19c>
 8000722:	e16e      	b.n	8000a02 <__aeabi_dadd+0x47a>
 8000724:	003a      	movs	r2, r7
 8000726:	4648      	mov	r0, r9
 8000728:	3a20      	subs	r2, #32
 800072a:	40d0      	lsrs	r0, r2
 800072c:	4684      	mov	ip, r0
 800072e:	2f20      	cmp	r7, #32
 8000730:	d007      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000732:	2240      	movs	r2, #64	; 0x40
 8000734:	4648      	mov	r0, r9
 8000736:	1bd2      	subs	r2, r2, r7
 8000738:	4090      	lsls	r0, r2
 800073a:	0002      	movs	r2, r0
 800073c:	4640      	mov	r0, r8
 800073e:	4310      	orrs	r0, r2
 8000740:	4680      	mov	r8, r0
 8000742:	4640      	mov	r0, r8
 8000744:	1e42      	subs	r2, r0, #1
 8000746:	4190      	sbcs	r0, r2
 8000748:	4662      	mov	r2, ip
 800074a:	0004      	movs	r4, r0
 800074c:	4314      	orrs	r4, r2
 800074e:	e057      	b.n	8000800 <__aeabi_dadd+0x278>
 8000750:	464a      	mov	r2, r9
 8000752:	4302      	orrs	r2, r0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x1d0>
 8000756:	e103      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000758:	1e7a      	subs	r2, r7, #1
 800075a:	2f01      	cmp	r7, #1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x1d8>
 800075e:	e193      	b.n	8000a88 <__aeabi_dadd+0x500>
 8000760:	4c64      	ldr	r4, [pc, #400]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000762:	42a7      	cmp	r7, r4
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e18a      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 8000768:	0017      	movs	r7, r2
 800076a:	e73b      	b.n	80005e4 <__aeabi_dadd+0x5c>
 800076c:	4c63      	ldr	r4, [pc, #396]	; (80008fc <__aeabi_dadd+0x374>)
 800076e:	1c72      	adds	r2, r6, #1
 8000770:	4222      	tst	r2, r4
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e0e0      	b.n	8000938 <__aeabi_dadd+0x3b0>
 8000776:	000a      	movs	r2, r1
 8000778:	431a      	orrs	r2, r3
 800077a:	2e00      	cmp	r6, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x1f8>
 800077e:	e174      	b.n	8000a6a <__aeabi_dadd+0x4e2>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x1fe>
 8000784:	e1d0      	b.n	8000b28 <__aeabi_dadd+0x5a0>
 8000786:	464a      	mov	r2, r9
 8000788:	4302      	orrs	r2, r0
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x206>
 800078c:	e1e3      	b.n	8000b56 <__aeabi_dadd+0x5ce>
 800078e:	074a      	lsls	r2, r1, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	08c9      	lsrs	r1, r1, #3
 8000796:	e029      	b.n	80007ec <__aeabi_dadd+0x264>
 8000798:	464a      	mov	r2, r9
 800079a:	4302      	orrs	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e17d      	b.n	8000a9c <__aeabi_dadd+0x514>
 80007a0:	1e7a      	subs	r2, r7, #1
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c52      	ldr	r4, [pc, #328]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007aa:	42a7      	cmp	r7, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e166      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 80007b0:	0017      	movs	r7, r2
 80007b2:	e7b2      	b.n	800071a <__aeabi_dadd+0x192>
 80007b4:	0010      	movs	r0, r2
 80007b6:	3b1f      	subs	r3, #31
 80007b8:	40d8      	lsrs	r0, r3
 80007ba:	2920      	cmp	r1, #32
 80007bc:	d003      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	1a5b      	subs	r3, r3, r1
 80007c2:	409a      	lsls	r2, r3
 80007c4:	4314      	orrs	r4, r2
 80007c6:	1e63      	subs	r3, r4, #1
 80007c8:	419c      	sbcs	r4, r3
 80007ca:	2300      	movs	r3, #0
 80007cc:	2600      	movs	r6, #0
 80007ce:	469a      	mov	sl, r3
 80007d0:	4304      	orrs	r4, r0
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e755      	b.n	8000684 <__aeabi_dadd+0xfc>
 80007d8:	4652      	mov	r2, sl
 80007da:	08e3      	lsrs	r3, r4, #3
 80007dc:	0752      	lsls	r2, r2, #29
 80007de:	4313      	orrs	r3, r2
 80007e0:	4652      	mov	r2, sl
 80007e2:	0037      	movs	r7, r6
 80007e4:	08d1      	lsrs	r1, r2, #3
 80007e6:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007e8:	4297      	cmp	r7, r2
 80007ea:	d01f      	beq.n	800082c <__aeabi_dadd+0x2a4>
 80007ec:	0309      	lsls	r1, r1, #12
 80007ee:	057a      	lsls	r2, r7, #21
 80007f0:	0b0c      	lsrs	r4, r1, #12
 80007f2:	0d52      	lsrs	r2, r2, #21
 80007f4:	e764      	b.n	80006c0 <__aeabi_dadd+0x138>
 80007f6:	4642      	mov	r2, r8
 80007f8:	464c      	mov	r4, r9
 80007fa:	4314      	orrs	r4, r2
 80007fc:	1e62      	subs	r2, r4, #1
 80007fe:	4194      	sbcs	r4, r2
 8000800:	18e4      	adds	r4, r4, r3
 8000802:	429c      	cmp	r4, r3
 8000804:	4192      	sbcs	r2, r2
 8000806:	4252      	negs	r2, r2
 8000808:	4692      	mov	sl, r2
 800080a:	448a      	add	sl, r1
 800080c:	4653      	mov	r3, sl
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	d5df      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000814:	3601      	adds	r6, #1
 8000816:	429e      	cmp	r6, r3
 8000818:	d000      	beq.n	800081c <__aeabi_dadd+0x294>
 800081a:	e0b3      	b.n	8000984 <__aeabi_dadd+0x3fc>
 800081c:	0032      	movs	r2, r6
 800081e:	2400      	movs	r4, #0
 8000820:	2300      	movs	r3, #0
 8000822:	e74d      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000824:	074a      	lsls	r2, r1, #29
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	4313      	orrs	r3, r2
 800082a:	08c9      	lsrs	r1, r1, #3
 800082c:	001a      	movs	r2, r3
 800082e:	430a      	orrs	r2, r1
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x2ac>
 8000832:	e200      	b.n	8000c36 <__aeabi_dadd+0x6ae>
 8000834:	2480      	movs	r4, #128	; 0x80
 8000836:	0324      	lsls	r4, r4, #12
 8000838:	430c      	orrs	r4, r1
 800083a:	0324      	lsls	r4, r4, #12
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <__aeabi_dadd+0x36c>)
 800083e:	0b24      	lsrs	r4, r4, #12
 8000840:	e73e      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000842:	0020      	movs	r0, r4
 8000844:	f001 fd6e 	bl	8002324 <__clzsi2>
 8000848:	0003      	movs	r3, r0
 800084a:	3318      	adds	r3, #24
 800084c:	2b1f      	cmp	r3, #31
 800084e:	dc00      	bgt.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e6f7      	b.n	8000642 <__aeabi_dadd+0xba>
 8000852:	0022      	movs	r2, r4
 8000854:	3808      	subs	r0, #8
 8000856:	4082      	lsls	r2, r0
 8000858:	2400      	movs	r4, #0
 800085a:	42b3      	cmp	r3, r6
 800085c:	db00      	blt.n	8000860 <__aeabi_dadd+0x2d8>
 800085e:	e6fc      	b.n	800065a <__aeabi_dadd+0xd2>
 8000860:	1af6      	subs	r6, r6, r3
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <__aeabi_dadd+0x370>)
 8000864:	401a      	ands	r2, r3
 8000866:	4692      	mov	sl, r2
 8000868:	e70a      	b.n	8000680 <__aeabi_dadd+0xf8>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d02b      	beq.n	80008c6 <__aeabi_dadd+0x33e>
 800086e:	1b97      	subs	r7, r2, r6
 8000870:	2e00      	cmp	r6, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x2ee>
 8000874:	e0b8      	b.n	80009e8 <__aeabi_dadd+0x460>
 8000876:	4c1f      	ldr	r4, [pc, #124]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000878:	42a2      	cmp	r2, r4
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x2f6>
 800087c:	e11c      	b.n	8000ab8 <__aeabi_dadd+0x530>
 800087e:	2480      	movs	r4, #128	; 0x80
 8000880:	0424      	lsls	r4, r4, #16
 8000882:	4321      	orrs	r1, r4
 8000884:	2f38      	cmp	r7, #56	; 0x38
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0x302>
 8000888:	e11e      	b.n	8000ac8 <__aeabi_dadd+0x540>
 800088a:	2f1f      	cmp	r7, #31
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x308>
 800088e:	e19e      	b.n	8000bce <__aeabi_dadd+0x646>
 8000890:	2620      	movs	r6, #32
 8000892:	000c      	movs	r4, r1
 8000894:	1bf6      	subs	r6, r6, r7
 8000896:	0018      	movs	r0, r3
 8000898:	40b3      	lsls	r3, r6
 800089a:	40b4      	lsls	r4, r6
 800089c:	40f8      	lsrs	r0, r7
 800089e:	1e5e      	subs	r6, r3, #1
 80008a0:	41b3      	sbcs	r3, r6
 80008a2:	40f9      	lsrs	r1, r7
 80008a4:	4304      	orrs	r4, r0
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4489      	add	r9, r1
 80008aa:	4444      	add	r4, r8
 80008ac:	4544      	cmp	r4, r8
 80008ae:	419b      	sbcs	r3, r3
 80008b0:	425b      	negs	r3, r3
 80008b2:	444b      	add	r3, r9
 80008b4:	469a      	mov	sl, r3
 80008b6:	0016      	movs	r6, r2
 80008b8:	e7a8      	b.n	800080c <__aeabi_dadd+0x284>
 80008ba:	4642      	mov	r2, r8
 80008bc:	464c      	mov	r4, r9
 80008be:	4314      	orrs	r4, r2
 80008c0:	1e62      	subs	r2, r4, #1
 80008c2:	4194      	sbcs	r4, r2
 80008c4:	e6a6      	b.n	8000614 <__aeabi_dadd+0x8c>
 80008c6:	4c0d      	ldr	r4, [pc, #52]	; (80008fc <__aeabi_dadd+0x374>)
 80008c8:	1c72      	adds	r2, r6, #1
 80008ca:	4222      	tst	r2, r4
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x348>
 80008ce:	e0a8      	b.n	8000a22 <__aeabi_dadd+0x49a>
 80008d0:	000a      	movs	r2, r1
 80008d2:	431a      	orrs	r2, r3
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x352>
 80008d8:	e10a      	b.n	8000af0 <__aeabi_dadd+0x568>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x358>
 80008de:	e15e      	b.n	8000b9e <__aeabi_dadd+0x616>
 80008e0:	464a      	mov	r2, r9
 80008e2:	4302      	orrs	r2, r0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dadd+0x360>
 80008e6:	e161      	b.n	8000bac <__aeabi_dadd+0x624>
 80008e8:	074a      	lsls	r2, r1, #29
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	08c9      	lsrs	r1, r1, #3
 80008f0:	e77c      	b.n	80007ec <__aeabi_dadd+0x264>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	000007ff 	.word	0x000007ff
 80008f8:	ff7fffff 	.word	0xff7fffff
 80008fc:	000007fe 	.word	0x000007fe
 8000900:	4ccf      	ldr	r4, [pc, #828]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000902:	42a2      	cmp	r2, r4
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x380>
 8000906:	e0ce      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000908:	2480      	movs	r4, #128	; 0x80
 800090a:	0424      	lsls	r4, r4, #16
 800090c:	4321      	orrs	r1, r4
 800090e:	2f38      	cmp	r7, #56	; 0x38
 8000910:	dc5b      	bgt.n	80009ca <__aeabi_dadd+0x442>
 8000912:	2f1f      	cmp	r7, #31
 8000914:	dd00      	ble.n	8000918 <__aeabi_dadd+0x390>
 8000916:	e0dc      	b.n	8000ad2 <__aeabi_dadd+0x54a>
 8000918:	2520      	movs	r5, #32
 800091a:	000c      	movs	r4, r1
 800091c:	1bed      	subs	r5, r5, r7
 800091e:	001e      	movs	r6, r3
 8000920:	40ab      	lsls	r3, r5
 8000922:	40ac      	lsls	r4, r5
 8000924:	40fe      	lsrs	r6, r7
 8000926:	1e5d      	subs	r5, r3, #1
 8000928:	41ab      	sbcs	r3, r5
 800092a:	4334      	orrs	r4, r6
 800092c:	40f9      	lsrs	r1, r7
 800092e:	431c      	orrs	r4, r3
 8000930:	464b      	mov	r3, r9
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	4699      	mov	r9, r3
 8000936:	e04c      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000938:	464a      	mov	r2, r9
 800093a:	1a1c      	subs	r4, r3, r0
 800093c:	1a88      	subs	r0, r1, r2
 800093e:	42a3      	cmp	r3, r4
 8000940:	4192      	sbcs	r2, r2
 8000942:	4252      	negs	r2, r2
 8000944:	4692      	mov	sl, r2
 8000946:	0002      	movs	r2, r0
 8000948:	4650      	mov	r0, sl
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	4692      	mov	sl, r2
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	d478      	bmi.n	8000a44 <__aeabi_dadd+0x4bc>
 8000952:	4653      	mov	r3, sl
 8000954:	4323      	orrs	r3, r4
 8000956:	d000      	beq.n	800095a <__aeabi_dadd+0x3d2>
 8000958:	e66a      	b.n	8000630 <__aeabi_dadd+0xa8>
 800095a:	2100      	movs	r1, #0
 800095c:	2500      	movs	r5, #0
 800095e:	e745      	b.n	80007ec <__aeabi_dadd+0x264>
 8000960:	074a      	lsls	r2, r1, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c9      	lsrs	r1, r1, #3
 8000968:	e73d      	b.n	80007e6 <__aeabi_dadd+0x25e>
 800096a:	181c      	adds	r4, r3, r0
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4449      	add	r1, r9
 8000972:	468a      	mov	sl, r1
 8000974:	425b      	negs	r3, r3
 8000976:	449a      	add	sl, r3
 8000978:	4653      	mov	r3, sl
 800097a:	2601      	movs	r6, #1
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	d400      	bmi.n	8000982 <__aeabi_dadd+0x3fa>
 8000980:	e727      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000982:	2602      	movs	r6, #2
 8000984:	4652      	mov	r2, sl
 8000986:	4baf      	ldr	r3, [pc, #700]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000988:	2101      	movs	r1, #1
 800098a:	401a      	ands	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	4021      	ands	r1, r4
 8000990:	0862      	lsrs	r2, r4, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	07dc      	lsls	r4, r3, #31
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	469a      	mov	sl, r3
 800099a:	4314      	orrs	r4, r2
 800099c:	e670      	b.n	8000680 <__aeabi_dadd+0xf8>
 800099e:	003a      	movs	r2, r7
 80009a0:	464c      	mov	r4, r9
 80009a2:	3a20      	subs	r2, #32
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	46a4      	mov	ip, r4
 80009a8:	2f20      	cmp	r7, #32
 80009aa:	d007      	beq.n	80009bc <__aeabi_dadd+0x434>
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	4648      	mov	r0, r9
 80009b0:	1bd2      	subs	r2, r2, r7
 80009b2:	4090      	lsls	r0, r2
 80009b4:	0002      	movs	r2, r0
 80009b6:	4640      	mov	r0, r8
 80009b8:	4310      	orrs	r0, r2
 80009ba:	4680      	mov	r8, r0
 80009bc:	4640      	mov	r0, r8
 80009be:	1e42      	subs	r2, r0, #1
 80009c0:	4190      	sbcs	r0, r2
 80009c2:	4662      	mov	r2, ip
 80009c4:	0004      	movs	r4, r0
 80009c6:	4314      	orrs	r4, r2
 80009c8:	e624      	b.n	8000614 <__aeabi_dadd+0x8c>
 80009ca:	4319      	orrs	r1, r3
 80009cc:	000c      	movs	r4, r1
 80009ce:	1e63      	subs	r3, r4, #1
 80009d0:	419c      	sbcs	r4, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	1b1c      	subs	r4, r3, r4
 80009d6:	45a0      	cmp	r8, r4
 80009d8:	419b      	sbcs	r3, r3
 80009da:	4649      	mov	r1, r9
 80009dc:	425b      	negs	r3, r3
 80009de:	1acb      	subs	r3, r1, r3
 80009e0:	469a      	mov	sl, r3
 80009e2:	4665      	mov	r5, ip
 80009e4:	0016      	movs	r6, r2
 80009e6:	e61b      	b.n	8000620 <__aeabi_dadd+0x98>
 80009e8:	000c      	movs	r4, r1
 80009ea:	431c      	orrs	r4, r3
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x468>
 80009ee:	e0c7      	b.n	8000b80 <__aeabi_dadd+0x5f8>
 80009f0:	1e7c      	subs	r4, r7, #1
 80009f2:	2f01      	cmp	r7, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x470>
 80009f6:	e0f9      	b.n	8000bec <__aeabi_dadd+0x664>
 80009f8:	4e91      	ldr	r6, [pc, #580]	; (8000c40 <__aeabi_dadd+0x6b8>)
 80009fa:	42b7      	cmp	r7, r6
 80009fc:	d05c      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 80009fe:	0027      	movs	r7, r4
 8000a00:	e740      	b.n	8000884 <__aeabi_dadd+0x2fc>
 8000a02:	2220      	movs	r2, #32
 8000a04:	464c      	mov	r4, r9
 8000a06:	4640      	mov	r0, r8
 8000a08:	1bd2      	subs	r2, r2, r7
 8000a0a:	4094      	lsls	r4, r2
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4304      	orrs	r4, r0
 8000a10:	4640      	mov	r0, r8
 8000a12:	4090      	lsls	r0, r2
 8000a14:	1e42      	subs	r2, r0, #1
 8000a16:	4190      	sbcs	r0, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	40fa      	lsrs	r2, r7
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	1889      	adds	r1, r1, r2
 8000a20:	e6ee      	b.n	8000800 <__aeabi_dadd+0x278>
 8000a22:	4c87      	ldr	r4, [pc, #540]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x4a2>
 8000a28:	e6f9      	b.n	800081e <__aeabi_dadd+0x296>
 8000a2a:	1818      	adds	r0, r3, r0
 8000a2c:	4298      	cmp	r0, r3
 8000a2e:	419b      	sbcs	r3, r3
 8000a30:	4449      	add	r1, r9
 8000a32:	425b      	negs	r3, r3
 8000a34:	18cb      	adds	r3, r1, r3
 8000a36:	07dc      	lsls	r4, r3, #31
 8000a38:	0840      	lsrs	r0, r0, #1
 8000a3a:	085b      	lsrs	r3, r3, #1
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	0016      	movs	r6, r2
 8000a40:	4304      	orrs	r4, r0
 8000a42:	e6c6      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a44:	4642      	mov	r2, r8
 8000a46:	1ad4      	subs	r4, r2, r3
 8000a48:	45a0      	cmp	r8, r4
 8000a4a:	4180      	sbcs	r0, r0
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	4240      	negs	r0, r0
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	1a0b      	subs	r3, r1, r0
 8000a54:	469a      	mov	sl, r3
 8000a56:	4665      	mov	r5, ip
 8000a58:	e5ea      	b.n	8000630 <__aeabi_dadd+0xa8>
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	08c0      	lsrs	r0, r0, #3
 8000a60:	075b      	lsls	r3, r3, #29
 8000a62:	4665      	mov	r5, ip
 8000a64:	4303      	orrs	r3, r0
 8000a66:	08d1      	lsrs	r1, r2, #3
 8000a68:	e6bd      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dadd+0x4e8>
 8000a6e:	e08e      	b.n	8000b8e <__aeabi_dadd+0x606>
 8000a70:	464b      	mov	r3, r9
 8000a72:	4303      	orrs	r3, r0
 8000a74:	d117      	bne.n	8000aa6 <__aeabi_dadd+0x51e>
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	2500      	movs	r5, #0
 8000a7a:	0309      	lsls	r1, r1, #12
 8000a7c:	e6da      	b.n	8000834 <__aeabi_dadd+0x2ac>
 8000a7e:	074a      	lsls	r2, r1, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c9      	lsrs	r1, r1, #3
 8000a86:	e6d1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a88:	1a1c      	subs	r4, r3, r0
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	419b      	sbcs	r3, r3
 8000a90:	1a89      	subs	r1, r1, r2
 8000a92:	425b      	negs	r3, r3
 8000a94:	1acb      	subs	r3, r1, r3
 8000a96:	469a      	mov	sl, r3
 8000a98:	2601      	movs	r6, #1
 8000a9a:	e5c1      	b.n	8000620 <__aeabi_dadd+0x98>
 8000a9c:	074a      	lsls	r2, r1, #29
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	08c9      	lsrs	r1, r1, #3
 8000aa4:	e69f      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	08d8      	lsrs	r0, r3, #3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	464a      	mov	r2, r9
 8000aae:	075b      	lsls	r3, r3, #29
 8000ab0:	4665      	mov	r5, ip
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	08d1      	lsrs	r1, r2, #3
 8000ab6:	e6b9      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ab8:	4643      	mov	r3, r8
 8000aba:	08d8      	lsrs	r0, r3, #3
 8000abc:	464b      	mov	r3, r9
 8000abe:	464a      	mov	r2, r9
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	08d1      	lsrs	r1, r2, #3
 8000ac6:	e6b1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	000c      	movs	r4, r1
 8000acc:	1e63      	subs	r3, r4, #1
 8000ace:	419c      	sbcs	r4, r3
 8000ad0:	e6eb      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ad2:	003c      	movs	r4, r7
 8000ad4:	000d      	movs	r5, r1
 8000ad6:	3c20      	subs	r4, #32
 8000ad8:	40e5      	lsrs	r5, r4
 8000ada:	2f20      	cmp	r7, #32
 8000adc:	d003      	beq.n	8000ae6 <__aeabi_dadd+0x55e>
 8000ade:	2440      	movs	r4, #64	; 0x40
 8000ae0:	1be4      	subs	r4, r4, r7
 8000ae2:	40a1      	lsls	r1, r4
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	1e63      	subs	r3, r4, #1
 8000aea:	419c      	sbcs	r4, r3
 8000aec:	432c      	orrs	r4, r5
 8000aee:	e770      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d0e1      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4302      	orrs	r2, r0
 8000af8:	d0c1      	beq.n	8000a7e <__aeabi_dadd+0x4f6>
 8000afa:	074a      	lsls	r2, r1, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	0312      	lsls	r2, r2, #12
 8000b06:	4211      	tst	r1, r2
 8000b08:	d008      	beq.n	8000b1c <__aeabi_dadd+0x594>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	08c4      	lsrs	r4, r0, #3
 8000b0e:	4214      	tst	r4, r2
 8000b10:	d104      	bne.n	8000b1c <__aeabi_dadd+0x594>
 8000b12:	4643      	mov	r3, r8
 8000b14:	0021      	movs	r1, r4
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	0742      	lsls	r2, r0, #29
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	0f5a      	lsrs	r2, r3, #29
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	0752      	lsls	r2, r2, #29
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	e681      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x5a8>
 8000b2e:	e714      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000b30:	464b      	mov	r3, r9
 8000b32:	464a      	mov	r2, r9
 8000b34:	08c0      	lsrs	r0, r0, #3
 8000b36:	075b      	lsls	r3, r3, #29
 8000b38:	4665      	mov	r5, ip
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	08d1      	lsrs	r1, r2, #3
 8000b3e:	e655      	b.n	80007ec <__aeabi_dadd+0x264>
 8000b40:	1ac4      	subs	r4, r0, r3
 8000b42:	45a0      	cmp	r8, r4
 8000b44:	4180      	sbcs	r0, r0
 8000b46:	464b      	mov	r3, r9
 8000b48:	4240      	negs	r0, r0
 8000b4a:	1a59      	subs	r1, r3, r1
 8000b4c:	1a0b      	subs	r3, r1, r0
 8000b4e:	469a      	mov	sl, r3
 8000b50:	4665      	mov	r5, ip
 8000b52:	2601      	movs	r6, #1
 8000b54:	e564      	b.n	8000620 <__aeabi_dadd+0x98>
 8000b56:	1a1c      	subs	r4, r3, r0
 8000b58:	464a      	mov	r2, r9
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	1a8a      	subs	r2, r1, r2
 8000b60:	4240      	negs	r0, r0
 8000b62:	1a12      	subs	r2, r2, r0
 8000b64:	4692      	mov	sl, r2
 8000b66:	0212      	lsls	r2, r2, #8
 8000b68:	d549      	bpl.n	8000bfe <__aeabi_dadd+0x676>
 8000b6a:	4642      	mov	r2, r8
 8000b6c:	1ad4      	subs	r4, r2, r3
 8000b6e:	45a0      	cmp	r8, r4
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	464b      	mov	r3, r9
 8000b74:	4240      	negs	r0, r0
 8000b76:	1a59      	subs	r1, r3, r1
 8000b78:	1a0b      	subs	r3, r1, r0
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	e57f      	b.n	8000680 <__aeabi_dadd+0xf8>
 8000b80:	464b      	mov	r3, r9
 8000b82:	464a      	mov	r2, r9
 8000b84:	08c0      	lsrs	r0, r0, #3
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	08d1      	lsrs	r1, r2, #3
 8000b8c:	e62b      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	4302      	orrs	r2, r0
 8000b94:	d138      	bne.n	8000c08 <__aeabi_dadd+0x680>
 8000b96:	074a      	lsls	r2, r1, #29
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e646      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	08c0      	lsrs	r0, r0, #3
 8000ba4:	075b      	lsls	r3, r3, #29
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e61f      	b.n	80007ec <__aeabi_dadd+0x264>
 8000bac:	181c      	adds	r4, r3, r0
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	419b      	sbcs	r3, r3
 8000bb2:	4449      	add	r1, r9
 8000bb4:	468a      	mov	sl, r1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	449a      	add	sl, r3
 8000bba:	4653      	mov	r3, sl
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	d400      	bmi.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e607      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000bc6:	2601      	movs	r6, #1
 8000bc8:	401a      	ands	r2, r3
 8000bca:	4692      	mov	sl, r2
 8000bcc:	e601      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bce:	003c      	movs	r4, r7
 8000bd0:	000e      	movs	r6, r1
 8000bd2:	3c20      	subs	r4, #32
 8000bd4:	40e6      	lsrs	r6, r4
 8000bd6:	2f20      	cmp	r7, #32
 8000bd8:	d003      	beq.n	8000be2 <__aeabi_dadd+0x65a>
 8000bda:	2440      	movs	r4, #64	; 0x40
 8000bdc:	1be4      	subs	r4, r4, r7
 8000bde:	40a1      	lsls	r1, r4
 8000be0:	430b      	orrs	r3, r1
 8000be2:	001c      	movs	r4, r3
 8000be4:	1e63      	subs	r3, r4, #1
 8000be6:	419c      	sbcs	r4, r3
 8000be8:	4334      	orrs	r4, r6
 8000bea:	e65e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bec:	4443      	add	r3, r8
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	4180      	sbcs	r0, r0
 8000bf2:	4449      	add	r1, r9
 8000bf4:	468a      	mov	sl, r1
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	001c      	movs	r4, r3
 8000bfa:	4482      	add	sl, r0
 8000bfc:	e6bc      	b.n	8000978 <__aeabi_dadd+0x3f0>
 8000bfe:	4653      	mov	r3, sl
 8000c00:	4323      	orrs	r3, r4
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x67e>
 8000c04:	e6a9      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000c06:	e5e4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000c08:	074a      	lsls	r2, r1, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	08c9      	lsrs	r1, r1, #3
 8000c10:	0312      	lsls	r2, r2, #12
 8000c12:	4211      	tst	r1, r2
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c16:	4648      	mov	r0, r9
 8000c18:	08c4      	lsrs	r4, r0, #3
 8000c1a:	4214      	tst	r4, r2
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	4665      	mov	r5, ip
 8000c22:	0021      	movs	r1, r4
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	0742      	lsls	r2, r0, #29
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	0f5a      	lsrs	r2, r3, #29
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	0752      	lsls	r2, r2, #29
 8000c32:	4313      	orrs	r3, r2
 8000c34:	e5fa      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000c36:	2300      	movs	r3, #0
 8000c38:	4a01      	ldr	r2, [pc, #4]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	e540      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	000007ff 	.word	0x000007ff
 8000c44:	ff7fffff 	.word	0xff7fffff

08000c48 <__aeabi_ddiv>:
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	4657      	mov	r7, sl
 8000c4c:	464e      	mov	r6, r9
 8000c4e:	4645      	mov	r5, r8
 8000c50:	46de      	mov	lr, fp
 8000c52:	b5e0      	push	{r5, r6, r7, lr}
 8000c54:	030c      	lsls	r4, r1, #12
 8000c56:	001f      	movs	r7, r3
 8000c58:	004b      	lsls	r3, r1, #1
 8000c5a:	4681      	mov	r9, r0
 8000c5c:	4692      	mov	sl, r2
 8000c5e:	0005      	movs	r5, r0
 8000c60:	b085      	sub	sp, #20
 8000c62:	0b24      	lsrs	r4, r4, #12
 8000c64:	0d5b      	lsrs	r3, r3, #21
 8000c66:	0fce      	lsrs	r6, r1, #31
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_ddiv+0x26>
 8000c6c:	e152      	b.n	8000f14 <__aeabi_ddiv+0x2cc>
 8000c6e:	4ad2      	ldr	r2, [pc, #840]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d100      	bne.n	8000c76 <__aeabi_ddiv+0x2e>
 8000c74:	e16e      	b.n	8000f54 <__aeabi_ddiv+0x30c>
 8000c76:	0f42      	lsrs	r2, r0, #29
 8000c78:	00e4      	lsls	r4, r4, #3
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4322      	orrs	r2, r4
 8000c82:	4690      	mov	r8, r2
 8000c84:	4acd      	ldr	r2, [pc, #820]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000c86:	00c5      	lsls	r5, r0, #3
 8000c88:	4693      	mov	fp, r2
 8000c8a:	449b      	add	fp, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	033c      	lsls	r4, r7, #12
 8000c94:	007b      	lsls	r3, r7, #1
 8000c96:	4650      	mov	r0, sl
 8000c98:	0b24      	lsrs	r4, r4, #12
 8000c9a:	0d5b      	lsrs	r3, r3, #21
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x5c>
 8000ca2:	e11a      	b.n	8000eda <__aeabi_ddiv+0x292>
 8000ca4:	4ac4      	ldr	r2, [pc, #784]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x64>
 8000caa:	e15e      	b.n	8000f6a <__aeabi_ddiv+0x322>
 8000cac:	0f42      	lsrs	r2, r0, #29
 8000cae:	00e4      	lsls	r4, r4, #3
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	2480      	movs	r4, #128	; 0x80
 8000cb4:	0424      	lsls	r4, r4, #16
 8000cb6:	4314      	orrs	r4, r2
 8000cb8:	4ac0      	ldr	r2, [pc, #768]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000cba:	00c1      	lsls	r1, r0, #3
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	465a      	mov	r2, fp
 8000cc0:	4463      	add	r3, ip
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	0033      	movs	r3, r6
 8000cca:	407b      	eors	r3, r7
 8000ccc:	469a      	mov	sl, r3
 8000cce:	464b      	mov	r3, r9
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d827      	bhi.n	8000d24 <__aeabi_ddiv+0xdc>
 8000cd4:	4aba      	ldr	r2, [pc, #744]	; (8000fc0 <__aeabi_ddiv+0x378>)
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	469f      	mov	pc, r3
 8000cdc:	46b2      	mov	sl, r6
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d016      	beq.n	8000d12 <__aeabi_ddiv+0xca>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0xa2>
 8000ce8:	e287      	b.n	80011fa <__aeabi_ddiv+0x5b2>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_ddiv+0xa8>
 8000cee:	e0d5      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	051b      	lsls	r3, r3, #20
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	4652      	mov	r2, sl
 8000cfc:	07d2      	lsls	r2, r2, #31
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	0028      	movs	r0, r5
 8000d02:	0019      	movs	r1, r3
 8000d04:	b005      	add	sp, #20
 8000d06:	bcf0      	pop	{r4, r5, r6, r7}
 8000d08:	46bb      	mov	fp, r7
 8000d0a:	46b2      	mov	sl, r6
 8000d0c:	46a9      	mov	r9, r5
 8000d0e:	46a0      	mov	r8, r4
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d12:	2200      	movs	r2, #0
 8000d14:	2500      	movs	r5, #0
 8000d16:	4ba8      	ldr	r3, [pc, #672]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000d18:	e7ed      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000d1a:	46ba      	mov	sl, r7
 8000d1c:	46a0      	mov	r8, r4
 8000d1e:	000d      	movs	r5, r1
 8000d20:	9000      	str	r0, [sp, #0]
 8000d22:	e7dc      	b.n	8000cde <__aeabi_ddiv+0x96>
 8000d24:	4544      	cmp	r4, r8
 8000d26:	d200      	bcs.n	8000d2a <__aeabi_ddiv+0xe2>
 8000d28:	e1c4      	b.n	80010b4 <__aeabi_ddiv+0x46c>
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0xe6>
 8000d2c:	e1bf      	b.n	80010ae <__aeabi_ddiv+0x466>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	469c      	mov	ip, r3
 8000d34:	002e      	movs	r6, r5
 8000d36:	4640      	mov	r0, r8
 8000d38:	2500      	movs	r5, #0
 8000d3a:	44e3      	add	fp, ip
 8000d3c:	0223      	lsls	r3, r4, #8
 8000d3e:	0e0c      	lsrs	r4, r1, #24
 8000d40:	431c      	orrs	r4, r3
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	4699      	mov	r9, r3
 8000d46:	0423      	lsls	r3, r4, #16
 8000d48:	020a      	lsls	r2, r1, #8
 8000d4a:	0c1f      	lsrs	r7, r3, #16
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	9701      	str	r7, [sp, #4]
 8000d52:	f7ff fa7b 	bl	800024c <__aeabi_uidivmod>
 8000d56:	0002      	movs	r2, r0
 8000d58:	437a      	muls	r2, r7
 8000d5a:	040b      	lsls	r3, r1, #16
 8000d5c:	0c31      	lsrs	r1, r6, #16
 8000d5e:	4680      	mov	r8, r0
 8000d60:	4319      	orrs	r1, r3
 8000d62:	428a      	cmp	r2, r1
 8000d64:	d907      	bls.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d66:	2301      	movs	r3, #1
 8000d68:	425b      	negs	r3, r3
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	1909      	adds	r1, r1, r4
 8000d6e:	44e0      	add	r8, ip
 8000d70:	428c      	cmp	r4, r1
 8000d72:	d800      	bhi.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d74:	e201      	b.n	800117a <__aeabi_ddiv+0x532>
 8000d76:	1a88      	subs	r0, r1, r2
 8000d78:	4649      	mov	r1, r9
 8000d7a:	f7ff fa67 	bl	800024c <__aeabi_uidivmod>
 8000d7e:	9a01      	ldr	r2, [sp, #4]
 8000d80:	0436      	lsls	r6, r6, #16
 8000d82:	4342      	muls	r2, r0
 8000d84:	0409      	lsls	r1, r1, #16
 8000d86:	0c36      	lsrs	r6, r6, #16
 8000d88:	0003      	movs	r3, r0
 8000d8a:	430e      	orrs	r6, r1
 8000d8c:	42b2      	cmp	r2, r6
 8000d8e:	d904      	bls.n	8000d9a <__aeabi_ddiv+0x152>
 8000d90:	1936      	adds	r6, r6, r4
 8000d92:	3b01      	subs	r3, #1
 8000d94:	42b4      	cmp	r4, r6
 8000d96:	d800      	bhi.n	8000d9a <__aeabi_ddiv+0x152>
 8000d98:	e1e9      	b.n	800116e <__aeabi_ddiv+0x526>
 8000d9a:	1ab0      	subs	r0, r6, r2
 8000d9c:	4642      	mov	r2, r8
 8000d9e:	9e00      	ldr	r6, [sp, #0]
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	431a      	orrs	r2, r3
 8000da4:	0c33      	lsrs	r3, r6, #16
 8000da6:	001f      	movs	r7, r3
 8000da8:	0c11      	lsrs	r1, r2, #16
 8000daa:	4690      	mov	r8, r2
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	0413      	lsls	r3, r2, #16
 8000db0:	0432      	lsls	r2, r6, #16
 8000db2:	0c16      	lsrs	r6, r2, #16
 8000db4:	0032      	movs	r2, r6
 8000db6:	0c1b      	lsrs	r3, r3, #16
 8000db8:	435a      	muls	r2, r3
 8000dba:	9603      	str	r6, [sp, #12]
 8000dbc:	437b      	muls	r3, r7
 8000dbe:	434e      	muls	r6, r1
 8000dc0:	4379      	muls	r1, r7
 8000dc2:	0c17      	lsrs	r7, r2, #16
 8000dc4:	46bc      	mov	ip, r7
 8000dc6:	199b      	adds	r3, r3, r6
 8000dc8:	4463      	add	r3, ip
 8000dca:	429e      	cmp	r6, r3
 8000dcc:	d903      	bls.n	8000dd6 <__aeabi_ddiv+0x18e>
 8000dce:	2680      	movs	r6, #128	; 0x80
 8000dd0:	0276      	lsls	r6, r6, #9
 8000dd2:	46b4      	mov	ip, r6
 8000dd4:	4461      	add	r1, ip
 8000dd6:	0c1e      	lsrs	r6, r3, #16
 8000dd8:	1871      	adds	r1, r6, r1
 8000dda:	0416      	lsls	r6, r2, #16
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c36      	lsrs	r6, r6, #16
 8000de0:	199e      	adds	r6, r3, r6
 8000de2:	4288      	cmp	r0, r1
 8000de4:	d302      	bcc.n	8000dec <__aeabi_ddiv+0x1a4>
 8000de6:	d112      	bne.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000de8:	42b5      	cmp	r5, r6
 8000dea:	d210      	bcs.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000dec:	4643      	mov	r3, r8
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	469c      	mov	ip, r3
 8000df4:	4465      	add	r5, ip
 8000df6:	001f      	movs	r7, r3
 8000df8:	429d      	cmp	r5, r3
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	191b      	adds	r3, r3, r4
 8000e00:	18c0      	adds	r0, r0, r3
 8000e02:	4284      	cmp	r4, r0
 8000e04:	d200      	bcs.n	8000e08 <__aeabi_ddiv+0x1c0>
 8000e06:	e19e      	b.n	8001146 <__aeabi_ddiv+0x4fe>
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x1c4>
 8000e0a:	e199      	b.n	8001140 <__aeabi_ddiv+0x4f8>
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	1bae      	subs	r6, r5, r6
 8000e10:	42b5      	cmp	r5, r6
 8000e12:	41ad      	sbcs	r5, r5
 8000e14:	1a40      	subs	r0, r0, r1
 8000e16:	426d      	negs	r5, r5
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	4284      	cmp	r4, r0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x1d8>
 8000e1e:	e1d2      	b.n	80011c6 <__aeabi_ddiv+0x57e>
 8000e20:	4649      	mov	r1, r9
 8000e22:	f7ff fa13 	bl	800024c <__aeabi_uidivmod>
 8000e26:	9a01      	ldr	r2, [sp, #4]
 8000e28:	040b      	lsls	r3, r1, #16
 8000e2a:	4342      	muls	r2, r0
 8000e2c:	0c31      	lsrs	r1, r6, #16
 8000e2e:	0005      	movs	r5, r0
 8000e30:	4319      	orrs	r1, r3
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d900      	bls.n	8000e38 <__aeabi_ddiv+0x1f0>
 8000e36:	e16c      	b.n	8001112 <__aeabi_ddiv+0x4ca>
 8000e38:	1a88      	subs	r0, r1, r2
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	f7ff fa06 	bl	800024c <__aeabi_uidivmod>
 8000e40:	9a01      	ldr	r2, [sp, #4]
 8000e42:	0436      	lsls	r6, r6, #16
 8000e44:	4342      	muls	r2, r0
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	0c36      	lsrs	r6, r6, #16
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	430e      	orrs	r6, r1
 8000e4e:	42b2      	cmp	r2, r6
 8000e50:	d900      	bls.n	8000e54 <__aeabi_ddiv+0x20c>
 8000e52:	e153      	b.n	80010fc <__aeabi_ddiv+0x4b4>
 8000e54:	9803      	ldr	r0, [sp, #12]
 8000e56:	1ab6      	subs	r6, r6, r2
 8000e58:	0002      	movs	r2, r0
 8000e5a:	042d      	lsls	r5, r5, #16
 8000e5c:	431d      	orrs	r5, r3
 8000e5e:	9f02      	ldr	r7, [sp, #8]
 8000e60:	042b      	lsls	r3, r5, #16
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	435a      	muls	r2, r3
 8000e66:	437b      	muls	r3, r7
 8000e68:	469c      	mov	ip, r3
 8000e6a:	0c29      	lsrs	r1, r5, #16
 8000e6c:	4348      	muls	r0, r1
 8000e6e:	0c13      	lsrs	r3, r2, #16
 8000e70:	4484      	add	ip, r0
 8000e72:	4463      	add	r3, ip
 8000e74:	4379      	muls	r1, r7
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d903      	bls.n	8000e82 <__aeabi_ddiv+0x23a>
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0240      	lsls	r0, r0, #9
 8000e7e:	4684      	mov	ip, r0
 8000e80:	4461      	add	r1, ip
 8000e82:	0c18      	lsrs	r0, r3, #16
 8000e84:	0412      	lsls	r2, r2, #16
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	0c12      	lsrs	r2, r2, #16
 8000e8a:	1840      	adds	r0, r0, r1
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	4286      	cmp	r6, r0
 8000e90:	d200      	bcs.n	8000e94 <__aeabi_ddiv+0x24c>
 8000e92:	e100      	b.n	8001096 <__aeabi_ddiv+0x44e>
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x250>
 8000e96:	e0fb      	b.n	8001090 <__aeabi_ddiv+0x448>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	431d      	orrs	r5, r3
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <__aeabi_ddiv+0x37c>)
 8000e9e:	445b      	add	r3, fp
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dc00      	bgt.n	8000ea6 <__aeabi_ddiv+0x25e>
 8000ea4:	e0aa      	b.n	8000ffc <__aeabi_ddiv+0x3b4>
 8000ea6:	076a      	lsls	r2, r5, #29
 8000ea8:	d000      	beq.n	8000eac <__aeabi_ddiv+0x264>
 8000eaa:	e13d      	b.n	8001128 <__aeabi_ddiv+0x4e0>
 8000eac:	08e9      	lsrs	r1, r5, #3
 8000eae:	4642      	mov	r2, r8
 8000eb0:	01d2      	lsls	r2, r2, #7
 8000eb2:	d506      	bpl.n	8000ec2 <__aeabi_ddiv+0x27a>
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <__aeabi_ddiv+0x380>)
 8000eb8:	401a      	ands	r2, r3
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	445b      	add	r3, fp
 8000ec2:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <__aeabi_ddiv+0x384>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	dd00      	ble.n	8000eca <__aeabi_ddiv+0x282>
 8000ec8:	e723      	b.n	8000d12 <__aeabi_ddiv+0xca>
 8000eca:	4642      	mov	r2, r8
 8000ecc:	055b      	lsls	r3, r3, #21
 8000ece:	0755      	lsls	r5, r2, #29
 8000ed0:	0252      	lsls	r2, r2, #9
 8000ed2:	430d      	orrs	r5, r1
 8000ed4:	0b12      	lsrs	r2, r2, #12
 8000ed6:	0d5b      	lsrs	r3, r3, #21
 8000ed8:	e70d      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000eda:	4651      	mov	r1, sl
 8000edc:	4321      	orrs	r1, r4
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x29a>
 8000ee0:	e07c      	b.n	8000fdc <__aeabi_ddiv+0x394>
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_ddiv+0x2a0>
 8000ee6:	e0fb      	b.n	80010e0 <__aeabi_ddiv+0x498>
 8000ee8:	0020      	movs	r0, r4
 8000eea:	f001 fa1b 	bl	8002324 <__clzsi2>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	3a0b      	subs	r2, #11
 8000ef2:	231d      	movs	r3, #29
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	0001      	movs	r1, r0
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	4653      	mov	r3, sl
 8000efe:	3908      	subs	r1, #8
 8000f00:	408b      	lsls	r3, r1
 8000f02:	408c      	lsls	r4, r1
 8000f04:	0019      	movs	r1, r3
 8000f06:	4314      	orrs	r4, r2
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <__aeabi_ddiv+0x388>)
 8000f0a:	4458      	add	r0, fp
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	4483      	add	fp, r0
 8000f10:	2000      	movs	r0, #0
 8000f12:	e6d9      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f14:	0003      	movs	r3, r0
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d044      	beq.n	8000fa6 <__aeabi_ddiv+0x35e>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0x2da>
 8000f20:	e0cf      	b.n	80010c2 <__aeabi_ddiv+0x47a>
 8000f22:	0020      	movs	r0, r4
 8000f24:	f001 f9fe 	bl	8002324 <__clzsi2>
 8000f28:	0001      	movs	r1, r0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	390b      	subs	r1, #11
 8000f2e:	231d      	movs	r3, #29
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	4649      	mov	r1, r9
 8000f34:	0010      	movs	r0, r2
 8000f36:	40d9      	lsrs	r1, r3
 8000f38:	3808      	subs	r0, #8
 8000f3a:	4084      	lsls	r4, r0
 8000f3c:	000b      	movs	r3, r1
 8000f3e:	464d      	mov	r5, r9
 8000f40:	4323      	orrs	r3, r4
 8000f42:	4698      	mov	r8, r3
 8000f44:	4085      	lsls	r5, r0
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <__aeabi_ddiv+0x38c>)
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	469b      	mov	fp, r3
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4699      	mov	r9, r3
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	e69e      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f54:	0002      	movs	r2, r0
 8000f56:	4322      	orrs	r2, r4
 8000f58:	4690      	mov	r8, r2
 8000f5a:	d11d      	bne.n	8000f98 <__aeabi_ddiv+0x350>
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	469b      	mov	fp, r3
 8000f60:	2302      	movs	r3, #2
 8000f62:	2500      	movs	r5, #0
 8000f64:	4691      	mov	r9, r2
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	e693      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f6a:	4651      	mov	r1, sl
 8000f6c:	4321      	orrs	r1, r4
 8000f6e:	d109      	bne.n	8000f84 <__aeabi_ddiv+0x33c>
 8000f70:	2302      	movs	r3, #2
 8000f72:	464a      	mov	r2, r9
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f78:	4691      	mov	r9, r2
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2002      	movs	r0, #2
 8000f80:	44e3      	add	fp, ip
 8000f82:	e6a1      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f84:	2303      	movs	r3, #3
 8000f86:	464a      	mov	r2, r9
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f8c:	4691      	mov	r9, r2
 8000f8e:	469c      	mov	ip, r3
 8000f90:	4651      	mov	r1, sl
 8000f92:	2003      	movs	r0, #3
 8000f94:	44e3      	add	fp, ip
 8000f96:	e697      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f98:	220c      	movs	r2, #12
 8000f9a:	469b      	mov	fp, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	46a0      	mov	r8, r4
 8000fa0:	4691      	mov	r9, r2
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	e675      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	4699      	mov	r9, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	469b      	mov	fp, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	e66d      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	fffffc01 	.word	0xfffffc01
 8000fc0:	0800bfd8 	.word	0x0800bfd8
 8000fc4:	000003ff 	.word	0x000003ff
 8000fc8:	feffffff 	.word	0xfeffffff
 8000fcc:	000007fe 	.word	0x000007fe
 8000fd0:	000003f3 	.word	0x000003f3
 8000fd4:	fffffc0d 	.word	0xfffffc0d
 8000fd8:	fffff801 	.word	0xfffff801
 8000fdc:	464a      	mov	r2, r9
 8000fde:	2301      	movs	r3, #1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e66e      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000fea:	2300      	movs	r3, #0
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	469a      	mov	sl, r3
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	4b88      	ldr	r3, [pc, #544]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8000ff4:	0312      	lsls	r2, r2, #12
 8000ff6:	e67e      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000ff8:	2501      	movs	r5, #1
 8000ffa:	426d      	negs	r5, r5
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	2a38      	cmp	r2, #56	; 0x38
 8001002:	dd00      	ble.n	8001006 <__aeabi_ddiv+0x3be>
 8001004:	e674      	b.n	8000cf0 <__aeabi_ddiv+0xa8>
 8001006:	2a1f      	cmp	r2, #31
 8001008:	dc00      	bgt.n	800100c <__aeabi_ddiv+0x3c4>
 800100a:	e0bd      	b.n	8001188 <__aeabi_ddiv+0x540>
 800100c:	211f      	movs	r1, #31
 800100e:	4249      	negs	r1, r1
 8001010:	1acb      	subs	r3, r1, r3
 8001012:	4641      	mov	r1, r8
 8001014:	40d9      	lsrs	r1, r3
 8001016:	000b      	movs	r3, r1
 8001018:	2a20      	cmp	r2, #32
 800101a:	d004      	beq.n	8001026 <__aeabi_ddiv+0x3de>
 800101c:	4641      	mov	r1, r8
 800101e:	4a7e      	ldr	r2, [pc, #504]	; (8001218 <__aeabi_ddiv+0x5d0>)
 8001020:	445a      	add	r2, fp
 8001022:	4091      	lsls	r1, r2
 8001024:	430d      	orrs	r5, r1
 8001026:	0029      	movs	r1, r5
 8001028:	1e4a      	subs	r2, r1, #1
 800102a:	4191      	sbcs	r1, r2
 800102c:	4319      	orrs	r1, r3
 800102e:	2307      	movs	r3, #7
 8001030:	001d      	movs	r5, r3
 8001032:	2200      	movs	r2, #0
 8001034:	400d      	ands	r5, r1
 8001036:	420b      	tst	r3, r1
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x3f4>
 800103a:	e0d0      	b.n	80011de <__aeabi_ddiv+0x596>
 800103c:	220f      	movs	r2, #15
 800103e:	2300      	movs	r3, #0
 8001040:	400a      	ands	r2, r1
 8001042:	2a04      	cmp	r2, #4
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x400>
 8001046:	e0c7      	b.n	80011d8 <__aeabi_ddiv+0x590>
 8001048:	1d0a      	adds	r2, r1, #4
 800104a:	428a      	cmp	r2, r1
 800104c:	4189      	sbcs	r1, r1
 800104e:	4249      	negs	r1, r1
 8001050:	185b      	adds	r3, r3, r1
 8001052:	0011      	movs	r1, r2
 8001054:	021a      	lsls	r2, r3, #8
 8001056:	d400      	bmi.n	800105a <__aeabi_ddiv+0x412>
 8001058:	e0be      	b.n	80011d8 <__aeabi_ddiv+0x590>
 800105a:	2301      	movs	r3, #1
 800105c:	2200      	movs	r2, #0
 800105e:	2500      	movs	r5, #0
 8001060:	e649      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	4643      	mov	r3, r8
 8001066:	0312      	lsls	r2, r2, #12
 8001068:	4213      	tst	r3, r2
 800106a:	d008      	beq.n	800107e <__aeabi_ddiv+0x436>
 800106c:	4214      	tst	r4, r2
 800106e:	d106      	bne.n	800107e <__aeabi_ddiv+0x436>
 8001070:	4322      	orrs	r2, r4
 8001072:	0312      	lsls	r2, r2, #12
 8001074:	46ba      	mov	sl, r7
 8001076:	000d      	movs	r5, r1
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800107a:	0b12      	lsrs	r2, r2, #12
 800107c:	e63b      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	4643      	mov	r3, r8
 8001082:	0312      	lsls	r2, r2, #12
 8001084:	431a      	orrs	r2, r3
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	46b2      	mov	sl, r6
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800108c:	0b12      	lsrs	r2, r2, #12
 800108e:	e632      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x44e>
 8001094:	e702      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8001096:	19a6      	adds	r6, r4, r6
 8001098:	1e6a      	subs	r2, r5, #1
 800109a:	42a6      	cmp	r6, r4
 800109c:	d200      	bcs.n	80010a0 <__aeabi_ddiv+0x458>
 800109e:	e089      	b.n	80011b4 <__aeabi_ddiv+0x56c>
 80010a0:	4286      	cmp	r6, r0
 80010a2:	d200      	bcs.n	80010a6 <__aeabi_ddiv+0x45e>
 80010a4:	e09f      	b.n	80011e6 <__aeabi_ddiv+0x59e>
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x462>
 80010a8:	e0af      	b.n	800120a <__aeabi_ddiv+0x5c2>
 80010aa:	0015      	movs	r5, r2
 80010ac:	e6f4      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80010ae:	42a9      	cmp	r1, r5
 80010b0:	d900      	bls.n	80010b4 <__aeabi_ddiv+0x46c>
 80010b2:	e63c      	b.n	8000d2e <__aeabi_ddiv+0xe6>
 80010b4:	4643      	mov	r3, r8
 80010b6:	07de      	lsls	r6, r3, #31
 80010b8:	0858      	lsrs	r0, r3, #1
 80010ba:	086b      	lsrs	r3, r5, #1
 80010bc:	431e      	orrs	r6, r3
 80010be:	07ed      	lsls	r5, r5, #31
 80010c0:	e63c      	b.n	8000d3c <__aeabi_ddiv+0xf4>
 80010c2:	f001 f92f 	bl	8002324 <__clzsi2>
 80010c6:	0001      	movs	r1, r0
 80010c8:	0002      	movs	r2, r0
 80010ca:	3115      	adds	r1, #21
 80010cc:	3220      	adds	r2, #32
 80010ce:	291c      	cmp	r1, #28
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_ddiv+0x48c>
 80010d2:	e72c      	b.n	8000f2e <__aeabi_ddiv+0x2e6>
 80010d4:	464b      	mov	r3, r9
 80010d6:	3808      	subs	r0, #8
 80010d8:	4083      	lsls	r3, r0
 80010da:	2500      	movs	r5, #0
 80010dc:	4698      	mov	r8, r3
 80010de:	e732      	b.n	8000f46 <__aeabi_ddiv+0x2fe>
 80010e0:	f001 f920 	bl	8002324 <__clzsi2>
 80010e4:	0003      	movs	r3, r0
 80010e6:	001a      	movs	r2, r3
 80010e8:	3215      	adds	r2, #21
 80010ea:	3020      	adds	r0, #32
 80010ec:	2a1c      	cmp	r2, #28
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_ddiv+0x4aa>
 80010f0:	e6ff      	b.n	8000ef2 <__aeabi_ddiv+0x2aa>
 80010f2:	4654      	mov	r4, sl
 80010f4:	3b08      	subs	r3, #8
 80010f6:	2100      	movs	r1, #0
 80010f8:	409c      	lsls	r4, r3
 80010fa:	e705      	b.n	8000f08 <__aeabi_ddiv+0x2c0>
 80010fc:	1936      	adds	r6, r6, r4
 80010fe:	3b01      	subs	r3, #1
 8001100:	42b4      	cmp	r4, r6
 8001102:	d900      	bls.n	8001106 <__aeabi_ddiv+0x4be>
 8001104:	e6a6      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001106:	42b2      	cmp	r2, r6
 8001108:	d800      	bhi.n	800110c <__aeabi_ddiv+0x4c4>
 800110a:	e6a3      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 800110c:	1e83      	subs	r3, r0, #2
 800110e:	1936      	adds	r6, r6, r4
 8001110:	e6a0      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001112:	1909      	adds	r1, r1, r4
 8001114:	3d01      	subs	r5, #1
 8001116:	428c      	cmp	r4, r1
 8001118:	d900      	bls.n	800111c <__aeabi_ddiv+0x4d4>
 800111a:	e68d      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 800111c:	428a      	cmp	r2, r1
 800111e:	d800      	bhi.n	8001122 <__aeabi_ddiv+0x4da>
 8001120:	e68a      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001122:	1e85      	subs	r5, r0, #2
 8001124:	1909      	adds	r1, r1, r4
 8001126:	e687      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001128:	220f      	movs	r2, #15
 800112a:	402a      	ands	r2, r5
 800112c:	2a04      	cmp	r2, #4
 800112e:	d100      	bne.n	8001132 <__aeabi_ddiv+0x4ea>
 8001130:	e6bc      	b.n	8000eac <__aeabi_ddiv+0x264>
 8001132:	1d29      	adds	r1, r5, #4
 8001134:	42a9      	cmp	r1, r5
 8001136:	41ad      	sbcs	r5, r5
 8001138:	426d      	negs	r5, r5
 800113a:	08c9      	lsrs	r1, r1, #3
 800113c:	44a8      	add	r8, r5
 800113e:	e6b6      	b.n	8000eae <__aeabi_ddiv+0x266>
 8001140:	42af      	cmp	r7, r5
 8001142:	d900      	bls.n	8001146 <__aeabi_ddiv+0x4fe>
 8001144:	e662      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001146:	4281      	cmp	r1, r0
 8001148:	d804      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 800114a:	d000      	beq.n	800114e <__aeabi_ddiv+0x506>
 800114c:	e65e      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 800114e:	42ae      	cmp	r6, r5
 8001150:	d800      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 8001152:	e65b      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001154:	2302      	movs	r3, #2
 8001156:	425b      	negs	r3, r3
 8001158:	469c      	mov	ip, r3
 800115a:	9b00      	ldr	r3, [sp, #0]
 800115c:	44e0      	add	r8, ip
 800115e:	469c      	mov	ip, r3
 8001160:	4465      	add	r5, ip
 8001162:	429d      	cmp	r5, r3
 8001164:	419b      	sbcs	r3, r3
 8001166:	425b      	negs	r3, r3
 8001168:	191b      	adds	r3, r3, r4
 800116a:	18c0      	adds	r0, r0, r3
 800116c:	e64f      	b.n	8000e0e <__aeabi_ddiv+0x1c6>
 800116e:	42b2      	cmp	r2, r6
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x52c>
 8001172:	e612      	b.n	8000d9a <__aeabi_ddiv+0x152>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	1936      	adds	r6, r6, r4
 8001178:	e60f      	b.n	8000d9a <__aeabi_ddiv+0x152>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x538>
 800117e:	e5fa      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001180:	1e83      	subs	r3, r0, #2
 8001182:	4698      	mov	r8, r3
 8001184:	1909      	adds	r1, r1, r4
 8001186:	e5f6      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <__aeabi_ddiv+0x5d4>)
 800118a:	0028      	movs	r0, r5
 800118c:	445b      	add	r3, fp
 800118e:	4641      	mov	r1, r8
 8001190:	409d      	lsls	r5, r3
 8001192:	4099      	lsls	r1, r3
 8001194:	40d0      	lsrs	r0, r2
 8001196:	1e6b      	subs	r3, r5, #1
 8001198:	419d      	sbcs	r5, r3
 800119a:	4643      	mov	r3, r8
 800119c:	4301      	orrs	r1, r0
 800119e:	4329      	orrs	r1, r5
 80011a0:	40d3      	lsrs	r3, r2
 80011a2:	074a      	lsls	r2, r1, #29
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x560>
 80011a6:	e755      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011a8:	220f      	movs	r2, #15
 80011aa:	400a      	ands	r2, r1
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d000      	beq.n	80011b2 <__aeabi_ddiv+0x56a>
 80011b0:	e74a      	b.n	8001048 <__aeabi_ddiv+0x400>
 80011b2:	e74f      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011b4:	0015      	movs	r5, r2
 80011b6:	4286      	cmp	r6, r0
 80011b8:	d000      	beq.n	80011bc <__aeabi_ddiv+0x574>
 80011ba:	e66d      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011bc:	9a00      	ldr	r2, [sp, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0x57c>
 80011c2:	e669      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011c4:	e66a      	b.n	8000e9c <__aeabi_ddiv+0x254>
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <__aeabi_ddiv+0x5d8>)
 80011c8:	445b      	add	r3, fp
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc00      	bgt.n	80011d0 <__aeabi_ddiv+0x588>
 80011ce:	e713      	b.n	8000ff8 <__aeabi_ddiv+0x3b0>
 80011d0:	2501      	movs	r5, #1
 80011d2:	2100      	movs	r1, #0
 80011d4:	44a8      	add	r8, r5
 80011d6:	e66a      	b.n	8000eae <__aeabi_ddiv+0x266>
 80011d8:	075d      	lsls	r5, r3, #29
 80011da:	025b      	lsls	r3, r3, #9
 80011dc:	0b1a      	lsrs	r2, r3, #12
 80011de:	08c9      	lsrs	r1, r1, #3
 80011e0:	2300      	movs	r3, #0
 80011e2:	430d      	orrs	r5, r1
 80011e4:	e587      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 80011e6:	9900      	ldr	r1, [sp, #0]
 80011e8:	3d02      	subs	r5, #2
 80011ea:	004a      	lsls	r2, r1, #1
 80011ec:	428a      	cmp	r2, r1
 80011ee:	41bf      	sbcs	r7, r7
 80011f0:	427f      	negs	r7, r7
 80011f2:	193f      	adds	r7, r7, r4
 80011f4:	19f6      	adds	r6, r6, r7
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	e7dd      	b.n	80011b6 <__aeabi_ddiv+0x56e>
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	4643      	mov	r3, r8
 80011fe:	0312      	lsls	r2, r2, #12
 8001200:	431a      	orrs	r2, r3
 8001202:	0312      	lsls	r2, r2, #12
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8001206:	0b12      	lsrs	r2, r2, #12
 8001208:	e575      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800120a:	9900      	ldr	r1, [sp, #0]
 800120c:	4299      	cmp	r1, r3
 800120e:	d3ea      	bcc.n	80011e6 <__aeabi_ddiv+0x59e>
 8001210:	0015      	movs	r5, r2
 8001212:	e7d3      	b.n	80011bc <__aeabi_ddiv+0x574>
 8001214:	000007ff 	.word	0x000007ff
 8001218:	0000043e 	.word	0x0000043e
 800121c:	0000041e 	.word	0x0000041e
 8001220:	000003ff 	.word	0x000003ff

08001224 <__eqdf2>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	464e      	mov	r6, r9
 8001228:	4645      	mov	r5, r8
 800122a:	46de      	mov	lr, fp
 800122c:	4657      	mov	r7, sl
 800122e:	4690      	mov	r8, r2
 8001230:	b5e0      	push	{r5, r6, r7, lr}
 8001232:	0017      	movs	r7, r2
 8001234:	031a      	lsls	r2, r3, #12
 8001236:	0b12      	lsrs	r2, r2, #12
 8001238:	0005      	movs	r5, r0
 800123a:	4684      	mov	ip, r0
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <__eqdf2+0x80>)
 800123e:	030e      	lsls	r6, r1, #12
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	4691      	mov	r9, r2
 8001244:	005a      	lsls	r2, r3, #1
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	469b      	mov	fp, r3
 800124a:	0b36      	lsrs	r6, r6, #12
 800124c:	0d64      	lsrs	r4, r4, #21
 800124e:	0fc9      	lsrs	r1, r1, #31
 8001250:	0d52      	lsrs	r2, r2, #21
 8001252:	4284      	cmp	r4, r0
 8001254:	d019      	beq.n	800128a <__eqdf2+0x66>
 8001256:	4282      	cmp	r2, r0
 8001258:	d010      	beq.n	800127c <__eqdf2+0x58>
 800125a:	2001      	movs	r0, #1
 800125c:	4294      	cmp	r4, r2
 800125e:	d10e      	bne.n	800127e <__eqdf2+0x5a>
 8001260:	454e      	cmp	r6, r9
 8001262:	d10c      	bne.n	800127e <__eqdf2+0x5a>
 8001264:	2001      	movs	r0, #1
 8001266:	45c4      	cmp	ip, r8
 8001268:	d109      	bne.n	800127e <__eqdf2+0x5a>
 800126a:	4559      	cmp	r1, fp
 800126c:	d017      	beq.n	800129e <__eqdf2+0x7a>
 800126e:	2c00      	cmp	r4, #0
 8001270:	d105      	bne.n	800127e <__eqdf2+0x5a>
 8001272:	0030      	movs	r0, r6
 8001274:	4328      	orrs	r0, r5
 8001276:	1e43      	subs	r3, r0, #1
 8001278:	4198      	sbcs	r0, r3
 800127a:	e000      	b.n	800127e <__eqdf2+0x5a>
 800127c:	2001      	movs	r0, #1
 800127e:	bcf0      	pop	{r4, r5, r6, r7}
 8001280:	46bb      	mov	fp, r7
 8001282:	46b2      	mov	sl, r6
 8001284:	46a9      	mov	r9, r5
 8001286:	46a0      	mov	r8, r4
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128a:	0033      	movs	r3, r6
 800128c:	2001      	movs	r0, #1
 800128e:	432b      	orrs	r3, r5
 8001290:	d1f5      	bne.n	800127e <__eqdf2+0x5a>
 8001292:	42a2      	cmp	r2, r4
 8001294:	d1f3      	bne.n	800127e <__eqdf2+0x5a>
 8001296:	464b      	mov	r3, r9
 8001298:	433b      	orrs	r3, r7
 800129a:	d1f0      	bne.n	800127e <__eqdf2+0x5a>
 800129c:	e7e2      	b.n	8001264 <__eqdf2+0x40>
 800129e:	2000      	movs	r0, #0
 80012a0:	e7ed      	b.n	800127e <__eqdf2+0x5a>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__gedf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	4647      	mov	r7, r8
 80012ac:	46ce      	mov	lr, r9
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	0016      	movs	r6, r2
 80012b4:	031b      	lsls	r3, r3, #12
 80012b6:	0b1b      	lsrs	r3, r3, #12
 80012b8:	4d2d      	ldr	r5, [pc, #180]	; (8001370 <__gedf2+0xc8>)
 80012ba:	004a      	lsls	r2, r1, #1
 80012bc:	4699      	mov	r9, r3
 80012be:	b580      	push	{r7, lr}
 80012c0:	0043      	lsls	r3, r0, #1
 80012c2:	030f      	lsls	r7, r1, #12
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d021      	beq.n	800131a <__gedf2+0x72>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d013      	beq.n	8001302 <__gedf2+0x5a>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d122      	bne.n	8001324 <__gedf2+0x7c>
 80012de:	433c      	orrs	r4, r7
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <__gedf2+0x42>
 80012e4:	464d      	mov	r5, r9
 80012e6:	432e      	orrs	r6, r5
 80012e8:	d022      	beq.n	8001330 <__gedf2+0x88>
 80012ea:	2c00      	cmp	r4, #0
 80012ec:	d010      	beq.n	8001310 <__gedf2+0x68>
 80012ee:	4281      	cmp	r1, r0
 80012f0:	d022      	beq.n	8001338 <__gedf2+0x90>
 80012f2:	2002      	movs	r0, #2
 80012f4:	3901      	subs	r1, #1
 80012f6:	4008      	ands	r0, r1
 80012f8:	3801      	subs	r0, #1
 80012fa:	bcc0      	pop	{r6, r7}
 80012fc:	46b9      	mov	r9, r7
 80012fe:	46b0      	mov	r8, r6
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001302:	464d      	mov	r5, r9
 8001304:	432e      	orrs	r6, r5
 8001306:	d129      	bne.n	800135c <__gedf2+0xb4>
 8001308:	2a00      	cmp	r2, #0
 800130a:	d1f0      	bne.n	80012ee <__gedf2+0x46>
 800130c:	433c      	orrs	r4, r7
 800130e:	d1ee      	bne.n	80012ee <__gedf2+0x46>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f2      	bne.n	80012fa <__gedf2+0x52>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7ef      	b.n	80012fa <__gedf2+0x52>
 800131a:	003d      	movs	r5, r7
 800131c:	4325      	orrs	r5, r4
 800131e:	d11d      	bne.n	800135c <__gedf2+0xb4>
 8001320:	4293      	cmp	r3, r2
 8001322:	d0ee      	beq.n	8001302 <__gedf2+0x5a>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e2      	bne.n	80012ee <__gedf2+0x46>
 8001328:	464c      	mov	r4, r9
 800132a:	4326      	orrs	r6, r4
 800132c:	d1df      	bne.n	80012ee <__gedf2+0x46>
 800132e:	e7e0      	b.n	80012f2 <__gedf2+0x4a>
 8001330:	2000      	movs	r0, #0
 8001332:	2c00      	cmp	r4, #0
 8001334:	d0e1      	beq.n	80012fa <__gedf2+0x52>
 8001336:	e7dc      	b.n	80012f2 <__gedf2+0x4a>
 8001338:	429a      	cmp	r2, r3
 800133a:	dc0a      	bgt.n	8001352 <__gedf2+0xaa>
 800133c:	dbe8      	blt.n	8001310 <__gedf2+0x68>
 800133e:	454f      	cmp	r7, r9
 8001340:	d8d7      	bhi.n	80012f2 <__gedf2+0x4a>
 8001342:	d00e      	beq.n	8001362 <__gedf2+0xba>
 8001344:	2000      	movs	r0, #0
 8001346:	454f      	cmp	r7, r9
 8001348:	d2d7      	bcs.n	80012fa <__gedf2+0x52>
 800134a:	2900      	cmp	r1, #0
 800134c:	d0e2      	beq.n	8001314 <__gedf2+0x6c>
 800134e:	0008      	movs	r0, r1
 8001350:	e7d3      	b.n	80012fa <__gedf2+0x52>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	0040      	lsls	r0, r0, #1
 8001358:	3801      	subs	r0, #1
 800135a:	e7ce      	b.n	80012fa <__gedf2+0x52>
 800135c:	2002      	movs	r0, #2
 800135e:	4240      	negs	r0, r0
 8001360:	e7cb      	b.n	80012fa <__gedf2+0x52>
 8001362:	45c4      	cmp	ip, r8
 8001364:	d8c5      	bhi.n	80012f2 <__gedf2+0x4a>
 8001366:	2000      	movs	r0, #0
 8001368:	45c4      	cmp	ip, r8
 800136a:	d2c6      	bcs.n	80012fa <__gedf2+0x52>
 800136c:	e7ed      	b.n	800134a <__gedf2+0xa2>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	000007ff 	.word	0x000007ff

08001374 <__ledf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	4647      	mov	r7, r8
 8001378:	46ce      	mov	lr, r9
 800137a:	0004      	movs	r4, r0
 800137c:	0018      	movs	r0, r3
 800137e:	0016      	movs	r6, r2
 8001380:	031b      	lsls	r3, r3, #12
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	4d2c      	ldr	r5, [pc, #176]	; (8001438 <__ledf2+0xc4>)
 8001386:	004a      	lsls	r2, r1, #1
 8001388:	4699      	mov	r9, r3
 800138a:	b580      	push	{r7, lr}
 800138c:	0043      	lsls	r3, r0, #1
 800138e:	030f      	lsls	r7, r1, #12
 8001390:	46a4      	mov	ip, r4
 8001392:	46b0      	mov	r8, r6
 8001394:	0b3f      	lsrs	r7, r7, #12
 8001396:	0d52      	lsrs	r2, r2, #21
 8001398:	0fc9      	lsrs	r1, r1, #31
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	0fc0      	lsrs	r0, r0, #31
 800139e:	42aa      	cmp	r2, r5
 80013a0:	d00d      	beq.n	80013be <__ledf2+0x4a>
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	d010      	beq.n	80013c8 <__ledf2+0x54>
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d127      	bne.n	80013fa <__ledf2+0x86>
 80013aa:	433c      	orrs	r4, r7
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <__ledf2+0x60>
 80013b0:	464d      	mov	r5, r9
 80013b2:	432e      	orrs	r6, r5
 80013b4:	d10e      	bne.n	80013d4 <__ledf2+0x60>
 80013b6:	2000      	movs	r0, #0
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d015      	beq.n	80013e8 <__ledf2+0x74>
 80013bc:	e00e      	b.n	80013dc <__ledf2+0x68>
 80013be:	003d      	movs	r5, r7
 80013c0:	4325      	orrs	r5, r4
 80013c2:	d110      	bne.n	80013e6 <__ledf2+0x72>
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d118      	bne.n	80013fa <__ledf2+0x86>
 80013c8:	464d      	mov	r5, r9
 80013ca:	432e      	orrs	r6, r5
 80013cc:	d10b      	bne.n	80013e6 <__ledf2+0x72>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d102      	bne.n	80013d8 <__ledf2+0x64>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d00b      	beq.n	80013f0 <__ledf2+0x7c>
 80013d8:	4281      	cmp	r1, r0
 80013da:	d014      	beq.n	8001406 <__ledf2+0x92>
 80013dc:	2002      	movs	r0, #2
 80013de:	3901      	subs	r1, #1
 80013e0:	4008      	ands	r0, r1
 80013e2:	3801      	subs	r0, #1
 80013e4:	e000      	b.n	80013e8 <__ledf2+0x74>
 80013e6:	2002      	movs	r0, #2
 80013e8:	bcc0      	pop	{r6, r7}
 80013ea:	46b9      	mov	r9, r7
 80013ec:	46b0      	mov	r8, r6
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1f9      	bne.n	80013e8 <__ledf2+0x74>
 80013f4:	2001      	movs	r0, #1
 80013f6:	4240      	negs	r0, r0
 80013f8:	e7f6      	b.n	80013e8 <__ledf2+0x74>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ec      	bne.n	80013d8 <__ledf2+0x64>
 80013fe:	464c      	mov	r4, r9
 8001400:	4326      	orrs	r6, r4
 8001402:	d1e9      	bne.n	80013d8 <__ledf2+0x64>
 8001404:	e7ea      	b.n	80013dc <__ledf2+0x68>
 8001406:	429a      	cmp	r2, r3
 8001408:	dd04      	ble.n	8001414 <__ledf2+0xa0>
 800140a:	4243      	negs	r3, r0
 800140c:	4158      	adcs	r0, r3
 800140e:	0040      	lsls	r0, r0, #1
 8001410:	3801      	subs	r0, #1
 8001412:	e7e9      	b.n	80013e8 <__ledf2+0x74>
 8001414:	429a      	cmp	r2, r3
 8001416:	dbeb      	blt.n	80013f0 <__ledf2+0x7c>
 8001418:	454f      	cmp	r7, r9
 800141a:	d8df      	bhi.n	80013dc <__ledf2+0x68>
 800141c:	d006      	beq.n	800142c <__ledf2+0xb8>
 800141e:	2000      	movs	r0, #0
 8001420:	454f      	cmp	r7, r9
 8001422:	d2e1      	bcs.n	80013e8 <__ledf2+0x74>
 8001424:	2900      	cmp	r1, #0
 8001426:	d0e5      	beq.n	80013f4 <__ledf2+0x80>
 8001428:	0008      	movs	r0, r1
 800142a:	e7dd      	b.n	80013e8 <__ledf2+0x74>
 800142c:	45c4      	cmp	ip, r8
 800142e:	d8d5      	bhi.n	80013dc <__ledf2+0x68>
 8001430:	2000      	movs	r0, #0
 8001432:	45c4      	cmp	ip, r8
 8001434:	d2d8      	bcs.n	80013e8 <__ledf2+0x74>
 8001436:	e7f5      	b.n	8001424 <__ledf2+0xb0>
 8001438:	000007ff 	.word	0x000007ff

0800143c <__aeabi_dmul>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4645      	mov	r5, r8
 8001440:	46de      	mov	lr, fp
 8001442:	4657      	mov	r7, sl
 8001444:	464e      	mov	r6, r9
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	001f      	movs	r7, r3
 800144a:	030b      	lsls	r3, r1, #12
 800144c:	0b1b      	lsrs	r3, r3, #12
 800144e:	469b      	mov	fp, r3
 8001450:	004d      	lsls	r5, r1, #1
 8001452:	0fcb      	lsrs	r3, r1, #31
 8001454:	0004      	movs	r4, r0
 8001456:	4691      	mov	r9, r2
 8001458:	4698      	mov	r8, r3
 800145a:	b087      	sub	sp, #28
 800145c:	0d6d      	lsrs	r5, r5, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x26>
 8001460:	e1cd      	b.n	80017fe <__aeabi_dmul+0x3c2>
 8001462:	4bce      	ldr	r3, [pc, #824]	; (800179c <__aeabi_dmul+0x360>)
 8001464:	429d      	cmp	r5, r3
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x2e>
 8001468:	e1e9      	b.n	800183e <__aeabi_dmul+0x402>
 800146a:	465a      	mov	r2, fp
 800146c:	0f43      	lsrs	r3, r0, #29
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	4313      	orrs	r3, r2
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	00c3      	lsls	r3, r0, #3
 800147a:	469a      	mov	sl, r3
 800147c:	4bc8      	ldr	r3, [pc, #800]	; (80017a0 <__aeabi_dmul+0x364>)
 800147e:	4693      	mov	fp, r2
 8001480:	469c      	mov	ip, r3
 8001482:	2300      	movs	r3, #0
 8001484:	2600      	movs	r6, #0
 8001486:	4465      	add	r5, ip
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	033c      	lsls	r4, r7, #12
 800148c:	007b      	lsls	r3, r7, #1
 800148e:	4648      	mov	r0, r9
 8001490:	0b24      	lsrs	r4, r4, #12
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fff      	lsrs	r7, r7, #31
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <__aeabi_dmul+0x60>
 800149a:	e189      	b.n	80017b0 <__aeabi_dmul+0x374>
 800149c:	4abf      	ldr	r2, [pc, #764]	; (800179c <__aeabi_dmul+0x360>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <__aeabi_dmul+0x9a>
 80014a2:	0f42      	lsrs	r2, r0, #29
 80014a4:	00e4      	lsls	r4, r4, #3
 80014a6:	4322      	orrs	r2, r4
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	0424      	lsls	r4, r4, #16
 80014ac:	4314      	orrs	r4, r2
 80014ae:	4abc      	ldr	r2, [pc, #752]	; (80017a0 <__aeabi_dmul+0x364>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4694      	mov	ip, r2
 80014b4:	4642      	mov	r2, r8
 80014b6:	4463      	add	r3, ip
 80014b8:	195b      	adds	r3, r3, r5
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]
 80014be:	407a      	eors	r2, r7
 80014c0:	3301      	adds	r3, #1
 80014c2:	00c0      	lsls	r0, r0, #3
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2e0a      	cmp	r6, #10
 80014ca:	dd1c      	ble.n	8001506 <__aeabi_dmul+0xca>
 80014cc:	003a      	movs	r2, r7
 80014ce:	2e0b      	cmp	r6, #11
 80014d0:	d05e      	beq.n	8001590 <__aeabi_dmul+0x154>
 80014d2:	4647      	mov	r7, r8
 80014d4:	e056      	b.n	8001584 <__aeabi_dmul+0x148>
 80014d6:	4649      	mov	r1, r9
 80014d8:	4bb0      	ldr	r3, [pc, #704]	; (800179c <__aeabi_dmul+0x360>)
 80014da:	4321      	orrs	r1, r4
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d12a      	bne.n	800153a <__aeabi_dmul+0xfe>
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	2202      	movs	r2, #2
 80014e8:	0100      	lsls	r0, r0, #4
 80014ea:	002b      	movs	r3, r5
 80014ec:	4684      	mov	ip, r0
 80014ee:	4316      	orrs	r6, r2
 80014f0:	4642      	mov	r2, r8
 80014f2:	4463      	add	r3, ip
 80014f4:	407a      	eors	r2, r7
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2e0a      	cmp	r6, #10
 80014fc:	dd00      	ble.n	8001500 <__aeabi_dmul+0xc4>
 80014fe:	e231      	b.n	8001964 <__aeabi_dmul+0x528>
 8001500:	2000      	movs	r0, #0
 8001502:	2400      	movs	r4, #0
 8001504:	2102      	movs	r1, #2
 8001506:	2e02      	cmp	r6, #2
 8001508:	dc26      	bgt.n	8001558 <__aeabi_dmul+0x11c>
 800150a:	3e01      	subs	r6, #1
 800150c:	2e01      	cmp	r6, #1
 800150e:	d852      	bhi.n	80015b6 <__aeabi_dmul+0x17a>
 8001510:	2902      	cmp	r1, #2
 8001512:	d04c      	beq.n	80015ae <__aeabi_dmul+0x172>
 8001514:	2901      	cmp	r1, #1
 8001516:	d000      	beq.n	800151a <__aeabi_dmul+0xde>
 8001518:	e118      	b.n	800174c <__aeabi_dmul+0x310>
 800151a:	2300      	movs	r3, #0
 800151c:	2400      	movs	r4, #0
 800151e:	2500      	movs	r5, #0
 8001520:	051b      	lsls	r3, r3, #20
 8001522:	4323      	orrs	r3, r4
 8001524:	07d2      	lsls	r2, r2, #31
 8001526:	4313      	orrs	r3, r2
 8001528:	0028      	movs	r0, r5
 800152a:	0019      	movs	r1, r3
 800152c:	b007      	add	sp, #28
 800152e:	bcf0      	pop	{r4, r5, r6, r7}
 8001530:	46bb      	mov	fp, r7
 8001532:	46b2      	mov	sl, r6
 8001534:	46a9      	mov	r9, r5
 8001536:	46a0      	mov	r8, r4
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	2203      	movs	r2, #3
 800153e:	0109      	lsls	r1, r1, #4
 8001540:	002b      	movs	r3, r5
 8001542:	468c      	mov	ip, r1
 8001544:	4316      	orrs	r6, r2
 8001546:	4642      	mov	r2, r8
 8001548:	4463      	add	r3, ip
 800154a:	407a      	eors	r2, r7
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2e0a      	cmp	r6, #10
 8001552:	dd00      	ble.n	8001556 <__aeabi_dmul+0x11a>
 8001554:	e228      	b.n	80019a8 <__aeabi_dmul+0x56c>
 8001556:	2103      	movs	r1, #3
 8001558:	2501      	movs	r5, #1
 800155a:	40b5      	lsls	r5, r6
 800155c:	46ac      	mov	ip, r5
 800155e:	26a6      	movs	r6, #166	; 0xa6
 8001560:	4663      	mov	r3, ip
 8001562:	00f6      	lsls	r6, r6, #3
 8001564:	4035      	ands	r5, r6
 8001566:	4233      	tst	r3, r6
 8001568:	d10b      	bne.n	8001582 <__aeabi_dmul+0x146>
 800156a:	2690      	movs	r6, #144	; 0x90
 800156c:	00b6      	lsls	r6, r6, #2
 800156e:	4233      	tst	r3, r6
 8001570:	d118      	bne.n	80015a4 <__aeabi_dmul+0x168>
 8001572:	3eb9      	subs	r6, #185	; 0xb9
 8001574:	3eff      	subs	r6, #255	; 0xff
 8001576:	421e      	tst	r6, r3
 8001578:	d01d      	beq.n	80015b6 <__aeabi_dmul+0x17a>
 800157a:	46a3      	mov	fp, r4
 800157c:	4682      	mov	sl, r0
 800157e:	9100      	str	r1, [sp, #0]
 8001580:	e000      	b.n	8001584 <__aeabi_dmul+0x148>
 8001582:	0017      	movs	r7, r2
 8001584:	9900      	ldr	r1, [sp, #0]
 8001586:	003a      	movs	r2, r7
 8001588:	2902      	cmp	r1, #2
 800158a:	d010      	beq.n	80015ae <__aeabi_dmul+0x172>
 800158c:	465c      	mov	r4, fp
 800158e:	4650      	mov	r0, sl
 8001590:	2903      	cmp	r1, #3
 8001592:	d1bf      	bne.n	8001514 <__aeabi_dmul+0xd8>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	431c      	orrs	r4, r3
 800159a:	0324      	lsls	r4, r4, #12
 800159c:	0005      	movs	r5, r0
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <__aeabi_dmul+0x360>)
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	e7bd      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015a4:	2480      	movs	r4, #128	; 0x80
 80015a6:	2200      	movs	r2, #0
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <__aeabi_dmul+0x360>)
 80015aa:	0324      	lsls	r4, r4, #12
 80015ac:	e7b8      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015ae:	2400      	movs	r4, #0
 80015b0:	2500      	movs	r5, #0
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <__aeabi_dmul+0x360>)
 80015b4:	e7b4      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015b6:	4653      	mov	r3, sl
 80015b8:	041e      	lsls	r6, r3, #16
 80015ba:	0c36      	lsrs	r6, r6, #16
 80015bc:	0c1f      	lsrs	r7, r3, #16
 80015be:	0033      	movs	r3, r6
 80015c0:	0c01      	lsrs	r1, r0, #16
 80015c2:	0400      	lsls	r0, r0, #16
 80015c4:	0c00      	lsrs	r0, r0, #16
 80015c6:	4343      	muls	r3, r0
 80015c8:	4698      	mov	r8, r3
 80015ca:	0003      	movs	r3, r0
 80015cc:	437b      	muls	r3, r7
 80015ce:	4699      	mov	r9, r3
 80015d0:	0033      	movs	r3, r6
 80015d2:	434b      	muls	r3, r1
 80015d4:	469c      	mov	ip, r3
 80015d6:	4643      	mov	r3, r8
 80015d8:	000d      	movs	r5, r1
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	469a      	mov	sl, r3
 80015de:	437d      	muls	r5, r7
 80015e0:	44cc      	add	ip, r9
 80015e2:	44d4      	add	ip, sl
 80015e4:	9500      	str	r5, [sp, #0]
 80015e6:	45e1      	cmp	r9, ip
 80015e8:	d904      	bls.n	80015f4 <__aeabi_dmul+0x1b8>
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	4699      	mov	r9, r3
 80015f0:	444d      	add	r5, r9
 80015f2:	9500      	str	r5, [sp, #0]
 80015f4:	4663      	mov	r3, ip
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	001d      	movs	r5, r3
 80015fa:	4663      	mov	r3, ip
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	469c      	mov	ip, r3
 8001600:	4643      	mov	r3, r8
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	4698      	mov	r8, r3
 8001608:	4663      	mov	r3, ip
 800160a:	4443      	add	r3, r8
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	0c23      	lsrs	r3, r4, #16
 8001610:	4698      	mov	r8, r3
 8001612:	0033      	movs	r3, r6
 8001614:	0424      	lsls	r4, r4, #16
 8001616:	0c24      	lsrs	r4, r4, #16
 8001618:	4363      	muls	r3, r4
 800161a:	469c      	mov	ip, r3
 800161c:	0023      	movs	r3, r4
 800161e:	437b      	muls	r3, r7
 8001620:	4699      	mov	r9, r3
 8001622:	4643      	mov	r3, r8
 8001624:	435e      	muls	r6, r3
 8001626:	435f      	muls	r7, r3
 8001628:	444e      	add	r6, r9
 800162a:	4663      	mov	r3, ip
 800162c:	46b2      	mov	sl, r6
 800162e:	0c1e      	lsrs	r6, r3, #16
 8001630:	4456      	add	r6, sl
 8001632:	45b1      	cmp	r9, r6
 8001634:	d903      	bls.n	800163e <__aeabi_dmul+0x202>
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	4699      	mov	r9, r3
 800163c:	444f      	add	r7, r9
 800163e:	0c33      	lsrs	r3, r6, #16
 8001640:	4699      	mov	r9, r3
 8001642:	003b      	movs	r3, r7
 8001644:	444b      	add	r3, r9
 8001646:	9305      	str	r3, [sp, #20]
 8001648:	4663      	mov	r3, ip
 800164a:	46ac      	mov	ip, r5
 800164c:	041f      	lsls	r7, r3, #16
 800164e:	0c3f      	lsrs	r7, r7, #16
 8001650:	0436      	lsls	r6, r6, #16
 8001652:	19f6      	adds	r6, r6, r7
 8001654:	44b4      	add	ip, r6
 8001656:	4663      	mov	r3, ip
 8001658:	9304      	str	r3, [sp, #16]
 800165a:	465b      	mov	r3, fp
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	469c      	mov	ip, r3
 8001660:	465b      	mov	r3, fp
 8001662:	041f      	lsls	r7, r3, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	003b      	movs	r3, r7
 8001668:	4343      	muls	r3, r0
 800166a:	4699      	mov	r9, r3
 800166c:	4663      	mov	r3, ip
 800166e:	4343      	muls	r3, r0
 8001670:	469a      	mov	sl, r3
 8001672:	464b      	mov	r3, r9
 8001674:	4660      	mov	r0, ip
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	469b      	mov	fp, r3
 800167a:	4348      	muls	r0, r1
 800167c:	4379      	muls	r1, r7
 800167e:	4451      	add	r1, sl
 8001680:	4459      	add	r1, fp
 8001682:	458a      	cmp	sl, r1
 8001684:	d903      	bls.n	800168e <__aeabi_dmul+0x252>
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	469a      	mov	sl, r3
 800168c:	4450      	add	r0, sl
 800168e:	0c0b      	lsrs	r3, r1, #16
 8001690:	469a      	mov	sl, r3
 8001692:	464b      	mov	r3, r9
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	4699      	mov	r9, r3
 800169a:	003b      	movs	r3, r7
 800169c:	4363      	muls	r3, r4
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	4645      	mov	r5, r8
 80016a2:	4449      	add	r1, r9
 80016a4:	4699      	mov	r9, r3
 80016a6:	4663      	mov	r3, ip
 80016a8:	435c      	muls	r4, r3
 80016aa:	436b      	muls	r3, r5
 80016ac:	469c      	mov	ip, r3
 80016ae:	464b      	mov	r3, r9
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	4698      	mov	r8, r3
 80016b4:	436f      	muls	r7, r5
 80016b6:	193f      	adds	r7, r7, r4
 80016b8:	4447      	add	r7, r8
 80016ba:	4450      	add	r0, sl
 80016bc:	42bc      	cmp	r4, r7
 80016be:	d903      	bls.n	80016c8 <__aeabi_dmul+0x28c>
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	4698      	mov	r8, r3
 80016c6:	44c4      	add	ip, r8
 80016c8:	9b04      	ldr	r3, [sp, #16]
 80016ca:	9d00      	ldr	r5, [sp, #0]
 80016cc:	4698      	mov	r8, r3
 80016ce:	4445      	add	r5, r8
 80016d0:	42b5      	cmp	r5, r6
 80016d2:	41b6      	sbcs	r6, r6
 80016d4:	4273      	negs	r3, r6
 80016d6:	4698      	mov	r8, r3
 80016d8:	464b      	mov	r3, r9
 80016da:	041e      	lsls	r6, r3, #16
 80016dc:	9b05      	ldr	r3, [sp, #20]
 80016de:	043c      	lsls	r4, r7, #16
 80016e0:	4699      	mov	r9, r3
 80016e2:	0c36      	lsrs	r6, r6, #16
 80016e4:	19a4      	adds	r4, r4, r6
 80016e6:	444c      	add	r4, r9
 80016e8:	46a1      	mov	r9, r4
 80016ea:	4683      	mov	fp, r0
 80016ec:	186e      	adds	r6, r5, r1
 80016ee:	44c1      	add	r9, r8
 80016f0:	428e      	cmp	r6, r1
 80016f2:	4189      	sbcs	r1, r1
 80016f4:	44cb      	add	fp, r9
 80016f6:	465d      	mov	r5, fp
 80016f8:	4249      	negs	r1, r1
 80016fa:	186d      	adds	r5, r5, r1
 80016fc:	429c      	cmp	r4, r3
 80016fe:	41a4      	sbcs	r4, r4
 8001700:	45c1      	cmp	r9, r8
 8001702:	419b      	sbcs	r3, r3
 8001704:	4583      	cmp	fp, r0
 8001706:	4180      	sbcs	r0, r0
 8001708:	428d      	cmp	r5, r1
 800170a:	4189      	sbcs	r1, r1
 800170c:	425b      	negs	r3, r3
 800170e:	4264      	negs	r4, r4
 8001710:	431c      	orrs	r4, r3
 8001712:	4240      	negs	r0, r0
 8001714:	9b03      	ldr	r3, [sp, #12]
 8001716:	4249      	negs	r1, r1
 8001718:	4301      	orrs	r1, r0
 800171a:	0270      	lsls	r0, r6, #9
 800171c:	0c3f      	lsrs	r7, r7, #16
 800171e:	4318      	orrs	r0, r3
 8001720:	19e4      	adds	r4, r4, r7
 8001722:	1e47      	subs	r7, r0, #1
 8001724:	41b8      	sbcs	r0, r7
 8001726:	1864      	adds	r4, r4, r1
 8001728:	4464      	add	r4, ip
 800172a:	0df6      	lsrs	r6, r6, #23
 800172c:	0261      	lsls	r1, r4, #9
 800172e:	4330      	orrs	r0, r6
 8001730:	0dec      	lsrs	r4, r5, #23
 8001732:	026e      	lsls	r6, r5, #9
 8001734:	430c      	orrs	r4, r1
 8001736:	4330      	orrs	r0, r6
 8001738:	01c9      	lsls	r1, r1, #7
 800173a:	d400      	bmi.n	800173e <__aeabi_dmul+0x302>
 800173c:	e0f1      	b.n	8001922 <__aeabi_dmul+0x4e6>
 800173e:	2101      	movs	r1, #1
 8001740:	0843      	lsrs	r3, r0, #1
 8001742:	4001      	ands	r1, r0
 8001744:	430b      	orrs	r3, r1
 8001746:	07e0      	lsls	r0, r4, #31
 8001748:	4318      	orrs	r0, r3
 800174a:	0864      	lsrs	r4, r4, #1
 800174c:	4915      	ldr	r1, [pc, #84]	; (80017a4 <__aeabi_dmul+0x368>)
 800174e:	9b02      	ldr	r3, [sp, #8]
 8001750:	468c      	mov	ip, r1
 8001752:	4463      	add	r3, ip
 8001754:	2b00      	cmp	r3, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x31e>
 8001758:	e097      	b.n	800188a <__aeabi_dmul+0x44e>
 800175a:	0741      	lsls	r1, r0, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x336>
 800175e:	210f      	movs	r1, #15
 8001760:	4001      	ands	r1, r0
 8001762:	2904      	cmp	r1, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x336>
 8001766:	1d01      	adds	r1, r0, #4
 8001768:	4281      	cmp	r1, r0
 800176a:	4180      	sbcs	r0, r0
 800176c:	4240      	negs	r0, r0
 800176e:	1824      	adds	r4, r4, r0
 8001770:	0008      	movs	r0, r1
 8001772:	01e1      	lsls	r1, r4, #7
 8001774:	d506      	bpl.n	8001784 <__aeabi_dmul+0x348>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	00c9      	lsls	r1, r1, #3
 800177a:	468c      	mov	ip, r1
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <__aeabi_dmul+0x36c>)
 800177e:	401c      	ands	r4, r3
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4463      	add	r3, ip
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <__aeabi_dmul+0x370>)
 8001786:	428b      	cmp	r3, r1
 8001788:	dd00      	ble.n	800178c <__aeabi_dmul+0x350>
 800178a:	e710      	b.n	80015ae <__aeabi_dmul+0x172>
 800178c:	0761      	lsls	r1, r4, #29
 800178e:	08c5      	lsrs	r5, r0, #3
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	430d      	orrs	r5, r1
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	e6c1      	b.n	8001520 <__aeabi_dmul+0xe4>
 800179c:	000007ff 	.word	0x000007ff
 80017a0:	fffffc01 	.word	0xfffffc01
 80017a4:	000003ff 	.word	0x000003ff
 80017a8:	feffffff 	.word	0xfeffffff
 80017ac:	000007fe 	.word	0x000007fe
 80017b0:	464b      	mov	r3, r9
 80017b2:	4323      	orrs	r3, r4
 80017b4:	d059      	beq.n	800186a <__aeabi_dmul+0x42e>
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dmul+0x380>
 80017ba:	e0a3      	b.n	8001904 <__aeabi_dmul+0x4c8>
 80017bc:	0020      	movs	r0, r4
 80017be:	f000 fdb1 	bl	8002324 <__clzsi2>
 80017c2:	0001      	movs	r1, r0
 80017c4:	0003      	movs	r3, r0
 80017c6:	390b      	subs	r1, #11
 80017c8:	221d      	movs	r2, #29
 80017ca:	1a52      	subs	r2, r2, r1
 80017cc:	4649      	mov	r1, r9
 80017ce:	0018      	movs	r0, r3
 80017d0:	40d1      	lsrs	r1, r2
 80017d2:	464a      	mov	r2, r9
 80017d4:	3808      	subs	r0, #8
 80017d6:	4082      	lsls	r2, r0
 80017d8:	4084      	lsls	r4, r0
 80017da:	0010      	movs	r0, r2
 80017dc:	430c      	orrs	r4, r1
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <__aeabi_dmul+0x574>)
 80017e0:	1aeb      	subs	r3, r5, r3
 80017e2:	4694      	mov	ip, r2
 80017e4:	4642      	mov	r2, r8
 80017e6:	4463      	add	r3, ip
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	407a      	eors	r2, r7
 80017ee:	3301      	adds	r3, #1
 80017f0:	2100      	movs	r1, #0
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	2e0a      	cmp	r6, #10
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dmul+0x3c0>
 80017fa:	e667      	b.n	80014cc <__aeabi_dmul+0x90>
 80017fc:	e683      	b.n	8001506 <__aeabi_dmul+0xca>
 80017fe:	465b      	mov	r3, fp
 8001800:	4303      	orrs	r3, r0
 8001802:	469a      	mov	sl, r3
 8001804:	d02a      	beq.n	800185c <__aeabi_dmul+0x420>
 8001806:	465b      	mov	r3, fp
 8001808:	2b00      	cmp	r3, #0
 800180a:	d06d      	beq.n	80018e8 <__aeabi_dmul+0x4ac>
 800180c:	4658      	mov	r0, fp
 800180e:	f000 fd89 	bl	8002324 <__clzsi2>
 8001812:	0001      	movs	r1, r0
 8001814:	0003      	movs	r3, r0
 8001816:	390b      	subs	r1, #11
 8001818:	221d      	movs	r2, #29
 800181a:	1a52      	subs	r2, r2, r1
 800181c:	0021      	movs	r1, r4
 800181e:	0018      	movs	r0, r3
 8001820:	465d      	mov	r5, fp
 8001822:	40d1      	lsrs	r1, r2
 8001824:	3808      	subs	r0, #8
 8001826:	4085      	lsls	r5, r0
 8001828:	000a      	movs	r2, r1
 800182a:	4084      	lsls	r4, r0
 800182c:	432a      	orrs	r2, r5
 800182e:	4693      	mov	fp, r2
 8001830:	46a2      	mov	sl, r4
 8001832:	4d5f      	ldr	r5, [pc, #380]	; (80019b0 <__aeabi_dmul+0x574>)
 8001834:	2600      	movs	r6, #0
 8001836:	1aed      	subs	r5, r5, r3
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	e625      	b.n	800148a <__aeabi_dmul+0x4e>
 800183e:	465b      	mov	r3, fp
 8001840:	4303      	orrs	r3, r0
 8001842:	469a      	mov	sl, r3
 8001844:	d105      	bne.n	8001852 <__aeabi_dmul+0x416>
 8001846:	2300      	movs	r3, #0
 8001848:	469b      	mov	fp, r3
 800184a:	3302      	adds	r3, #2
 800184c:	2608      	movs	r6, #8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	e61b      	b.n	800148a <__aeabi_dmul+0x4e>
 8001852:	2303      	movs	r3, #3
 8001854:	4682      	mov	sl, r0
 8001856:	260c      	movs	r6, #12
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	e616      	b.n	800148a <__aeabi_dmul+0x4e>
 800185c:	2300      	movs	r3, #0
 800185e:	469b      	mov	fp, r3
 8001860:	3301      	adds	r3, #1
 8001862:	2604      	movs	r6, #4
 8001864:	2500      	movs	r5, #0
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	e60f      	b.n	800148a <__aeabi_dmul+0x4e>
 800186a:	4642      	mov	r2, r8
 800186c:	3301      	adds	r3, #1
 800186e:	9501      	str	r5, [sp, #4]
 8001870:	431e      	orrs	r6, r3
 8001872:	9b01      	ldr	r3, [sp, #4]
 8001874:	407a      	eors	r2, r7
 8001876:	3301      	adds	r3, #1
 8001878:	2400      	movs	r4, #0
 800187a:	2000      	movs	r0, #0
 800187c:	2101      	movs	r1, #1
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2e0a      	cmp	r6, #10
 8001884:	dd00      	ble.n	8001888 <__aeabi_dmul+0x44c>
 8001886:	e621      	b.n	80014cc <__aeabi_dmul+0x90>
 8001888:	e63d      	b.n	8001506 <__aeabi_dmul+0xca>
 800188a:	2101      	movs	r1, #1
 800188c:	1ac9      	subs	r1, r1, r3
 800188e:	2938      	cmp	r1, #56	; 0x38
 8001890:	dd00      	ble.n	8001894 <__aeabi_dmul+0x458>
 8001892:	e642      	b.n	800151a <__aeabi_dmul+0xde>
 8001894:	291f      	cmp	r1, #31
 8001896:	dd47      	ble.n	8001928 <__aeabi_dmul+0x4ec>
 8001898:	261f      	movs	r6, #31
 800189a:	0025      	movs	r5, r4
 800189c:	4276      	negs	r6, r6
 800189e:	1af3      	subs	r3, r6, r3
 80018a0:	40dd      	lsrs	r5, r3
 80018a2:	002b      	movs	r3, r5
 80018a4:	2920      	cmp	r1, #32
 80018a6:	d005      	beq.n	80018b4 <__aeabi_dmul+0x478>
 80018a8:	4942      	ldr	r1, [pc, #264]	; (80019b4 <__aeabi_dmul+0x578>)
 80018aa:	9d02      	ldr	r5, [sp, #8]
 80018ac:	468c      	mov	ip, r1
 80018ae:	4465      	add	r5, ip
 80018b0:	40ac      	lsls	r4, r5
 80018b2:	4320      	orrs	r0, r4
 80018b4:	1e41      	subs	r1, r0, #1
 80018b6:	4188      	sbcs	r0, r1
 80018b8:	4318      	orrs	r0, r3
 80018ba:	2307      	movs	r3, #7
 80018bc:	001d      	movs	r5, r3
 80018be:	2400      	movs	r4, #0
 80018c0:	4005      	ands	r5, r0
 80018c2:	4203      	tst	r3, r0
 80018c4:	d04a      	beq.n	800195c <__aeabi_dmul+0x520>
 80018c6:	230f      	movs	r3, #15
 80018c8:	2400      	movs	r4, #0
 80018ca:	4003      	ands	r3, r0
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d042      	beq.n	8001956 <__aeabi_dmul+0x51a>
 80018d0:	1d03      	adds	r3, r0, #4
 80018d2:	4283      	cmp	r3, r0
 80018d4:	4180      	sbcs	r0, r0
 80018d6:	4240      	negs	r0, r0
 80018d8:	1824      	adds	r4, r4, r0
 80018da:	0018      	movs	r0, r3
 80018dc:	0223      	lsls	r3, r4, #8
 80018de:	d53a      	bpl.n	8001956 <__aeabi_dmul+0x51a>
 80018e0:	2301      	movs	r3, #1
 80018e2:	2400      	movs	r4, #0
 80018e4:	2500      	movs	r5, #0
 80018e6:	e61b      	b.n	8001520 <__aeabi_dmul+0xe4>
 80018e8:	f000 fd1c 	bl	8002324 <__clzsi2>
 80018ec:	0001      	movs	r1, r0
 80018ee:	0003      	movs	r3, r0
 80018f0:	3115      	adds	r1, #21
 80018f2:	3320      	adds	r3, #32
 80018f4:	291c      	cmp	r1, #28
 80018f6:	dd8f      	ble.n	8001818 <__aeabi_dmul+0x3dc>
 80018f8:	3808      	subs	r0, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	4084      	lsls	r4, r0
 80018fe:	4692      	mov	sl, r2
 8001900:	46a3      	mov	fp, r4
 8001902:	e796      	b.n	8001832 <__aeabi_dmul+0x3f6>
 8001904:	f000 fd0e 	bl	8002324 <__clzsi2>
 8001908:	0001      	movs	r1, r0
 800190a:	0003      	movs	r3, r0
 800190c:	3115      	adds	r1, #21
 800190e:	3320      	adds	r3, #32
 8001910:	291c      	cmp	r1, #28
 8001912:	dc00      	bgt.n	8001916 <__aeabi_dmul+0x4da>
 8001914:	e758      	b.n	80017c8 <__aeabi_dmul+0x38c>
 8001916:	0002      	movs	r2, r0
 8001918:	464c      	mov	r4, r9
 800191a:	3a08      	subs	r2, #8
 800191c:	2000      	movs	r0, #0
 800191e:	4094      	lsls	r4, r2
 8001920:	e75d      	b.n	80017de <__aeabi_dmul+0x3a2>
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	e711      	b.n	800174c <__aeabi_dmul+0x310>
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <__aeabi_dmul+0x57c>)
 800192a:	0026      	movs	r6, r4
 800192c:	469c      	mov	ip, r3
 800192e:	0003      	movs	r3, r0
 8001930:	9d02      	ldr	r5, [sp, #8]
 8001932:	40cb      	lsrs	r3, r1
 8001934:	4465      	add	r5, ip
 8001936:	40ae      	lsls	r6, r5
 8001938:	431e      	orrs	r6, r3
 800193a:	0003      	movs	r3, r0
 800193c:	40ab      	lsls	r3, r5
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	4183      	sbcs	r3, r0
 8001942:	0030      	movs	r0, r6
 8001944:	4318      	orrs	r0, r3
 8001946:	40cc      	lsrs	r4, r1
 8001948:	0743      	lsls	r3, r0, #29
 800194a:	d0c7      	beq.n	80018dc <__aeabi_dmul+0x4a0>
 800194c:	230f      	movs	r3, #15
 800194e:	4003      	ands	r3, r0
 8001950:	2b04      	cmp	r3, #4
 8001952:	d1bd      	bne.n	80018d0 <__aeabi_dmul+0x494>
 8001954:	e7c2      	b.n	80018dc <__aeabi_dmul+0x4a0>
 8001956:	0765      	lsls	r5, r4, #29
 8001958:	0264      	lsls	r4, r4, #9
 800195a:	0b24      	lsrs	r4, r4, #12
 800195c:	08c0      	lsrs	r0, r0, #3
 800195e:	2300      	movs	r3, #0
 8001960:	4305      	orrs	r5, r0
 8001962:	e5dd      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001964:	2500      	movs	r5, #0
 8001966:	2302      	movs	r3, #2
 8001968:	2e0f      	cmp	r6, #15
 800196a:	d10c      	bne.n	8001986 <__aeabi_dmul+0x54a>
 800196c:	2480      	movs	r4, #128	; 0x80
 800196e:	465b      	mov	r3, fp
 8001970:	0324      	lsls	r4, r4, #12
 8001972:	4223      	tst	r3, r4
 8001974:	d00e      	beq.n	8001994 <__aeabi_dmul+0x558>
 8001976:	4221      	tst	r1, r4
 8001978:	d10c      	bne.n	8001994 <__aeabi_dmul+0x558>
 800197a:	430c      	orrs	r4, r1
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	003a      	movs	r2, r7
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <__aeabi_dmul+0x580>)
 8001982:	0b24      	lsrs	r4, r4, #12
 8001984:	e5cc      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001986:	2e0b      	cmp	r6, #11
 8001988:	d000      	beq.n	800198c <__aeabi_dmul+0x550>
 800198a:	e5a2      	b.n	80014d2 <__aeabi_dmul+0x96>
 800198c:	468b      	mov	fp, r1
 800198e:	46aa      	mov	sl, r5
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	e5f7      	b.n	8001584 <__aeabi_dmul+0x148>
 8001994:	2480      	movs	r4, #128	; 0x80
 8001996:	465b      	mov	r3, fp
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	431c      	orrs	r4, r3
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4642      	mov	r2, r8
 80019a0:	4655      	mov	r5, sl
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <__aeabi_dmul+0x580>)
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	e5bb      	b.n	8001520 <__aeabi_dmul+0xe4>
 80019a8:	464d      	mov	r5, r9
 80019aa:	0021      	movs	r1, r4
 80019ac:	2303      	movs	r3, #3
 80019ae:	e7db      	b.n	8001968 <__aeabi_dmul+0x52c>
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	0000043e 	.word	0x0000043e
 80019b8:	0000041e 	.word	0x0000041e
 80019bc:	000007ff 	.word	0x000007ff

080019c0 <__aeabi_dsub>:
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	4657      	mov	r7, sl
 80019c4:	464e      	mov	r6, r9
 80019c6:	4645      	mov	r5, r8
 80019c8:	46de      	mov	lr, fp
 80019ca:	b5e0      	push	{r5, r6, r7, lr}
 80019cc:	000d      	movs	r5, r1
 80019ce:	0004      	movs	r4, r0
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	032b      	lsls	r3, r5, #12
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	0f62      	lsrs	r2, r4, #29
 80019da:	431a      	orrs	r2, r3
 80019dc:	00e3      	lsls	r3, r4, #3
 80019de:	030c      	lsls	r4, r1, #12
 80019e0:	0a64      	lsrs	r4, r4, #9
 80019e2:	0f47      	lsrs	r7, r0, #29
 80019e4:	4327      	orrs	r7, r4
 80019e6:	4cd0      	ldr	r4, [pc, #832]	; (8001d28 <__aeabi_dsub+0x368>)
 80019e8:	006e      	lsls	r6, r5, #1
 80019ea:	4691      	mov	r9, r2
 80019ec:	b083      	sub	sp, #12
 80019ee:	004a      	lsls	r2, r1, #1
 80019f0:	00c0      	lsls	r0, r0, #3
 80019f2:	4698      	mov	r8, r3
 80019f4:	46a2      	mov	sl, r4
 80019f6:	0d76      	lsrs	r6, r6, #21
 80019f8:	0fed      	lsrs	r5, r5, #31
 80019fa:	0d52      	lsrs	r2, r2, #21
 80019fc:	0fc9      	lsrs	r1, r1, #31
 80019fe:	9001      	str	r0, [sp, #4]
 8001a00:	42a2      	cmp	r2, r4
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x46>
 8001a04:	e0b9      	b.n	8001b7a <__aeabi_dsub+0x1ba>
 8001a06:	2401      	movs	r4, #1
 8001a08:	4061      	eors	r1, r4
 8001a0a:	468b      	mov	fp, r1
 8001a0c:	428d      	cmp	r5, r1
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x52>
 8001a10:	e08d      	b.n	8001b2e <__aeabi_dsub+0x16e>
 8001a12:	1ab4      	subs	r4, r6, r2
 8001a14:	46a4      	mov	ip, r4
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	dc00      	bgt.n	8001a1c <__aeabi_dsub+0x5c>
 8001a1a:	e0b7      	b.n	8001b8c <__aeabi_dsub+0x1cc>
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x62>
 8001a20:	e0cb      	b.n	8001bba <__aeabi_dsub+0x1fa>
 8001a22:	4ac1      	ldr	r2, [pc, #772]	; (8001d28 <__aeabi_dsub+0x368>)
 8001a24:	4296      	cmp	r6, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x6a>
 8001a28:	e186      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0412      	lsls	r2, r2, #16
 8001a2e:	4317      	orrs	r7, r2
 8001a30:	4662      	mov	r2, ip
 8001a32:	2a38      	cmp	r2, #56	; 0x38
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x78>
 8001a36:	e1a4      	b.n	8001d82 <__aeabi_dsub+0x3c2>
 8001a38:	2a1f      	cmp	r2, #31
 8001a3a:	dd00      	ble.n	8001a3e <__aeabi_dsub+0x7e>
 8001a3c:	e21d      	b.n	8001e7a <__aeabi_dsub+0x4ba>
 8001a3e:	4661      	mov	r1, ip
 8001a40:	2220      	movs	r2, #32
 8001a42:	003c      	movs	r4, r7
 8001a44:	1a52      	subs	r2, r2, r1
 8001a46:	0001      	movs	r1, r0
 8001a48:	4090      	lsls	r0, r2
 8001a4a:	4094      	lsls	r4, r2
 8001a4c:	1e42      	subs	r2, r0, #1
 8001a4e:	4190      	sbcs	r0, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	46a0      	mov	r8, r4
 8001a54:	4664      	mov	r4, ip
 8001a56:	40d7      	lsrs	r7, r2
 8001a58:	464a      	mov	r2, r9
 8001a5a:	40e1      	lsrs	r1, r4
 8001a5c:	4644      	mov	r4, r8
 8001a5e:	1bd2      	subs	r2, r2, r7
 8001a60:	4691      	mov	r9, r2
 8001a62:	430c      	orrs	r4, r1
 8001a64:	4304      	orrs	r4, r0
 8001a66:	1b1c      	subs	r4, r3, r4
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	4192      	sbcs	r2, r2
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	4252      	negs	r2, r2
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	469a      	mov	sl, r3
 8001a74:	4653      	mov	r3, sl
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	d400      	bmi.n	8001a7c <__aeabi_dsub+0xbc>
 8001a7a:	e12b      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001a7c:	4653      	mov	r3, sl
 8001a7e:	025a      	lsls	r2, r3, #9
 8001a80:	0a53      	lsrs	r3, r2, #9
 8001a82:	469a      	mov	sl, r3
 8001a84:	4653      	mov	r3, sl
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0xcc>
 8001a8a:	e166      	b.n	8001d5a <__aeabi_dsub+0x39a>
 8001a8c:	4650      	mov	r0, sl
 8001a8e:	f000 fc49 	bl	8002324 <__clzsi2>
 8001a92:	0003      	movs	r3, r0
 8001a94:	3b08      	subs	r3, #8
 8001a96:	2220      	movs	r2, #32
 8001a98:	0020      	movs	r0, r4
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	40d0      	lsrs	r0, r2
 8001aa0:	4099      	lsls	r1, r3
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	409c      	lsls	r4, r3
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	429e      	cmp	r6, r3
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_dsub+0xee>
 8001aac:	e164      	b.n	8001d78 <__aeabi_dsub+0x3b8>
 8001aae:	1b9b      	subs	r3, r3, r6
 8001ab0:	1c59      	adds	r1, r3, #1
 8001ab2:	291f      	cmp	r1, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0xf8>
 8001ab6:	e0fe      	b.n	8001cb6 <__aeabi_dsub+0x2f6>
 8001ab8:	2320      	movs	r3, #32
 8001aba:	0010      	movs	r0, r2
 8001abc:	0026      	movs	r6, r4
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	409c      	lsls	r4, r3
 8001ac2:	4098      	lsls	r0, r3
 8001ac4:	40ce      	lsrs	r6, r1
 8001ac6:	40ca      	lsrs	r2, r1
 8001ac8:	1e63      	subs	r3, r4, #1
 8001aca:	419c      	sbcs	r4, r3
 8001acc:	4330      	orrs	r0, r6
 8001ace:	4692      	mov	sl, r2
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	4304      	orrs	r4, r0
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a2      	add	sl, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	4653      	mov	r3, sl
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x134>
 8001af2:	e0f2      	b.n	8001cda <__aeabi_dsub+0x31a>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x368>)
 8001af6:	3601      	adds	r6, #1
 8001af8:	429e      	cmp	r6, r3
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x13e>
 8001afc:	e10f      	b.n	8001d1e <__aeabi_dsub+0x35e>
 8001afe:	4653      	mov	r3, sl
 8001b00:	498a      	ldr	r1, [pc, #552]	; (8001d2c <__aeabi_dsub+0x36c>)
 8001b02:	08e4      	lsrs	r4, r4, #3
 8001b04:	400b      	ands	r3, r1
 8001b06:	0019      	movs	r1, r3
 8001b08:	075b      	lsls	r3, r3, #29
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	0572      	lsls	r2, r6, #21
 8001b0e:	024c      	lsls	r4, r1, #9
 8001b10:	0b24      	lsrs	r4, r4, #12
 8001b12:	0d52      	lsrs	r2, r2, #21
 8001b14:	0512      	lsls	r2, r2, #20
 8001b16:	4322      	orrs	r2, r4
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	432a      	orrs	r2, r5
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	0011      	movs	r1, r2
 8001b20:	b003      	add	sp, #12
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	1ab4      	subs	r4, r6, r2
 8001b30:	46a4      	mov	ip, r4
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	dd59      	ble.n	8001bea <__aeabi_dsub+0x22a>
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x17c>
 8001b3a:	e0b0      	b.n	8001c9e <__aeabi_dsub+0x2de>
 8001b3c:	4556      	cmp	r6, sl
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x182>
 8001b40:	e0fa      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0412      	lsls	r2, r2, #16
 8001b46:	4317      	orrs	r7, r2
 8001b48:	4662      	mov	r2, ip
 8001b4a:	2a38      	cmp	r2, #56	; 0x38
 8001b4c:	dd00      	ble.n	8001b50 <__aeabi_dsub+0x190>
 8001b4e:	e0d4      	b.n	8001cfa <__aeabi_dsub+0x33a>
 8001b50:	2a1f      	cmp	r2, #31
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_dsub+0x196>
 8001b54:	e1c0      	b.n	8001ed8 <__aeabi_dsub+0x518>
 8001b56:	0039      	movs	r1, r7
 8001b58:	3a20      	subs	r2, #32
 8001b5a:	40d1      	lsrs	r1, r2
 8001b5c:	4662      	mov	r2, ip
 8001b5e:	2a20      	cmp	r2, #32
 8001b60:	d006      	beq.n	8001b70 <__aeabi_dsub+0x1b0>
 8001b62:	4664      	mov	r4, ip
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	1b12      	subs	r2, r2, r4
 8001b68:	003c      	movs	r4, r7
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4304      	orrs	r4, r0
 8001b6e:	9401      	str	r4, [sp, #4]
 8001b70:	9c01      	ldr	r4, [sp, #4]
 8001b72:	1e62      	subs	r2, r4, #1
 8001b74:	4194      	sbcs	r4, r2
 8001b76:	430c      	orrs	r4, r1
 8001b78:	e0c3      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001b7a:	003c      	movs	r4, r7
 8001b7c:	4304      	orrs	r4, r0
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x218>
 8001b80:	468b      	mov	fp, r1
 8001b82:	428d      	cmp	r5, r1
 8001b84:	d02e      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001b86:	4c6a      	ldr	r4, [pc, #424]	; (8001d30 <__aeabi_dsub+0x370>)
 8001b88:	46a4      	mov	ip, r4
 8001b8a:	44b4      	add	ip, r6
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d05f      	beq.n	8001c52 <__aeabi_dsub+0x292>
 8001b92:	1b94      	subs	r4, r2, r6
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2e00      	cmp	r6, #0
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dsub+0x1dc>
 8001b9a:	e120      	b.n	8001dde <__aeabi_dsub+0x41e>
 8001b9c:	464c      	mov	r4, r9
 8001b9e:	431c      	orrs	r4, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1e4>
 8001ba2:	e1c7      	b.n	8001f34 <__aeabi_dsub+0x574>
 8001ba4:	4661      	mov	r1, ip
 8001ba6:	1e4c      	subs	r4, r1, #1
 8001ba8:	2901      	cmp	r1, #1
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x1ee>
 8001bac:	e223      	b.n	8001ff6 <__aeabi_dsub+0x636>
 8001bae:	4d5e      	ldr	r5, [pc, #376]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bb0:	45ac      	cmp	ip, r5
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x1f6>
 8001bb4:	e1d8      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001bb6:	46a4      	mov	ip, r4
 8001bb8:	e11a      	b.n	8001df0 <__aeabi_dsub+0x430>
 8001bba:	003a      	movs	r2, r7
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x202>
 8001bc0:	e0e4      	b.n	8001d8c <__aeabi_dsub+0x3cc>
 8001bc2:	0022      	movs	r2, r4
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	2c01      	cmp	r4, #1
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x20c>
 8001bca:	e1c3      	b.n	8001f54 <__aeabi_dsub+0x594>
 8001bcc:	4956      	ldr	r1, [pc, #344]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bce:	428c      	cmp	r4, r1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x214>
 8001bd2:	e0b1      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001bd4:	4694      	mov	ip, r2
 8001bd6:	e72b      	b.n	8001a30 <__aeabi_dsub+0x70>
 8001bd8:	2401      	movs	r4, #1
 8001bda:	4061      	eors	r1, r4
 8001bdc:	468b      	mov	fp, r1
 8001bde:	428d      	cmp	r5, r1
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001be2:	e716      	b.n	8001a12 <__aeabi_dsub+0x52>
 8001be4:	4952      	ldr	r1, [pc, #328]	; (8001d30 <__aeabi_dsub+0x370>)
 8001be6:	468c      	mov	ip, r1
 8001be8:	44b4      	add	ip, r6
 8001bea:	4664      	mov	r4, ip
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x232>
 8001bf0:	e0d3      	b.n	8001d9a <__aeabi_dsub+0x3da>
 8001bf2:	1b91      	subs	r1, r2, r6
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x23c>
 8001bfa:	e15e      	b.n	8001eba <__aeabi_dsub+0x4fa>
 8001bfc:	494a      	ldr	r1, [pc, #296]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bfe:	428a      	cmp	r2, r1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x244>
 8001c02:	e1be      	b.n	8001f82 <__aeabi_dsub+0x5c2>
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	464c      	mov	r4, r9
 8001c08:	0409      	lsls	r1, r1, #16
 8001c0a:	430c      	orrs	r4, r1
 8001c0c:	46a1      	mov	r9, r4
 8001c0e:	4661      	mov	r1, ip
 8001c10:	2938      	cmp	r1, #56	; 0x38
 8001c12:	dd00      	ble.n	8001c16 <__aeabi_dsub+0x256>
 8001c14:	e1ba      	b.n	8001f8c <__aeabi_dsub+0x5cc>
 8001c16:	291f      	cmp	r1, #31
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dsub+0x25c>
 8001c1a:	e227      	b.n	800206c <__aeabi_dsub+0x6ac>
 8001c1c:	2420      	movs	r4, #32
 8001c1e:	1a64      	subs	r4, r4, r1
 8001c20:	4649      	mov	r1, r9
 8001c22:	40a1      	lsls	r1, r4
 8001c24:	001e      	movs	r6, r3
 8001c26:	4688      	mov	r8, r1
 8001c28:	4661      	mov	r1, ip
 8001c2a:	40a3      	lsls	r3, r4
 8001c2c:	40ce      	lsrs	r6, r1
 8001c2e:	4641      	mov	r1, r8
 8001c30:	1e5c      	subs	r4, r3, #1
 8001c32:	41a3      	sbcs	r3, r4
 8001c34:	4331      	orrs	r1, r6
 8001c36:	4319      	orrs	r1, r3
 8001c38:	000c      	movs	r4, r1
 8001c3a:	4663      	mov	r3, ip
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	40d9      	lsrs	r1, r3
 8001c40:	187f      	adds	r7, r7, r1
 8001c42:	1824      	adds	r4, r4, r0
 8001c44:	4284      	cmp	r4, r0
 8001c46:	419b      	sbcs	r3, r3
 8001c48:	425b      	negs	r3, r3
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	0016      	movs	r6, r2
 8001c4e:	44ba      	add	sl, r7
 8001c50:	e05d      	b.n	8001d0e <__aeabi_dsub+0x34e>
 8001c52:	4c38      	ldr	r4, [pc, #224]	; (8001d34 <__aeabi_dsub+0x374>)
 8001c54:	1c72      	adds	r2, r6, #1
 8001c56:	4222      	tst	r2, r4
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dsub+0x29c>
 8001c5a:	e0df      	b.n	8001e1c <__aeabi_dsub+0x45c>
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	2e00      	cmp	r6, #0
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x2a6>
 8001c64:	e15c      	b.n	8001f20 <__aeabi_dsub+0x560>
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x2ac>
 8001c6a:	e1cf      	b.n	800200c <__aeabi_dsub+0x64c>
 8001c6c:	003a      	movs	r2, r7
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x2b4>
 8001c72:	e17f      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001c74:	1a1c      	subs	r4, r3, r0
 8001c76:	464a      	mov	r2, r9
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	4189      	sbcs	r1, r1
 8001c7c:	1bd2      	subs	r2, r2, r7
 8001c7e:	4249      	negs	r1, r1
 8001c80:	1a52      	subs	r2, r2, r1
 8001c82:	4692      	mov	sl, r2
 8001c84:	0212      	lsls	r2, r2, #8
 8001c86:	d400      	bmi.n	8001c8a <__aeabi_dsub+0x2ca>
 8001c88:	e20a      	b.n	80020a0 <__aeabi_dsub+0x6e0>
 8001c8a:	1ac4      	subs	r4, r0, r3
 8001c8c:	42a0      	cmp	r0, r4
 8001c8e:	4180      	sbcs	r0, r0
 8001c90:	464b      	mov	r3, r9
 8001c92:	4240      	negs	r0, r0
 8001c94:	1aff      	subs	r7, r7, r3
 8001c96:	1a3b      	subs	r3, r7, r0
 8001c98:	469a      	mov	sl, r3
 8001c9a:	465d      	mov	r5, fp
 8001c9c:	e71a      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001c9e:	003a      	movs	r2, r7
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d073      	beq.n	8001d8c <__aeabi_dsub+0x3cc>
 8001ca4:	0022      	movs	r2, r4
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	2c01      	cmp	r4, #1
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x2ee>
 8001cac:	e0cb      	b.n	8001e46 <__aeabi_dsub+0x486>
 8001cae:	4554      	cmp	r4, sl
 8001cb0:	d042      	beq.n	8001d38 <__aeabi_dsub+0x378>
 8001cb2:	4694      	mov	ip, r2
 8001cb4:	e748      	b.n	8001b48 <__aeabi_dsub+0x188>
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	3b1f      	subs	r3, #31
 8001cba:	40d8      	lsrs	r0, r3
 8001cbc:	2920      	cmp	r1, #32
 8001cbe:	d003      	beq.n	8001cc8 <__aeabi_dsub+0x308>
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	4314      	orrs	r4, r2
 8001cc8:	1e63      	subs	r3, r4, #1
 8001cca:	419c      	sbcs	r4, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2600      	movs	r6, #0
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	4304      	orrs	r4, r0
 8001cd4:	0763      	lsls	r3, r4, #29
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x31a>
 8001cd8:	e6fe      	b.n	8001ad8 <__aeabi_dsub+0x118>
 8001cda:	4652      	mov	r2, sl
 8001cdc:	08e3      	lsrs	r3, r4, #3
 8001cde:	0752      	lsls	r2, r2, #29
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	4652      	mov	r2, sl
 8001ce4:	46b4      	mov	ip, r6
 8001ce6:	08d2      	lsrs	r2, r2, #3
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <__aeabi_dsub+0x368>)
 8001cea:	458c      	cmp	ip, r1
 8001cec:	d02a      	beq.n	8001d44 <__aeabi_dsub+0x384>
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	0b14      	lsrs	r4, r2, #12
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	0552      	lsls	r2, r2, #21
 8001cf6:	0d52      	lsrs	r2, r2, #21
 8001cf8:	e70c      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001cfa:	003c      	movs	r4, r7
 8001cfc:	4304      	orrs	r4, r0
 8001cfe:	1e62      	subs	r2, r4, #1
 8001d00:	4194      	sbcs	r4, r2
 8001d02:	18e4      	adds	r4, r4, r3
 8001d04:	429c      	cmp	r4, r3
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	444a      	add	r2, r9
 8001d0c:	4692      	mov	sl, r2
 8001d0e:	4653      	mov	r3, sl
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	d5df      	bpl.n	8001cd4 <__aeabi_dsub+0x314>
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__aeabi_dsub+0x368>)
 8001d16:	3601      	adds	r6, #1
 8001d18:	429e      	cmp	r6, r3
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x35e>
 8001d1c:	e0a0      	b.n	8001e60 <__aeabi_dsub+0x4a0>
 8001d1e:	0032      	movs	r2, r6
 8001d20:	2400      	movs	r4, #0
 8001d22:	2300      	movs	r3, #0
 8001d24:	e6f6      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	464a      	mov	r2, r9
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	0019      	movs	r1, r3
 8001d46:	4311      	orrs	r1, r2
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x38c>
 8001d4a:	e1b5      	b.n	80020b8 <__aeabi_dsub+0x6f8>
 8001d4c:	2480      	movs	r4, #128	; 0x80
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4ad5      	ldr	r2, [pc, #852]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e6dc      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 fae2 	bl	8002324 <__clzsi2>
 8001d60:	0003      	movs	r3, r0
 8001d62:	3318      	adds	r3, #24
 8001d64:	2b1f      	cmp	r3, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x3aa>
 8001d68:	e695      	b.n	8001a96 <__aeabi_dsub+0xd6>
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	3808      	subs	r0, #8
 8001d6e:	4082      	lsls	r2, r0
 8001d70:	2400      	movs	r4, #0
 8001d72:	429e      	cmp	r6, r3
 8001d74:	dc00      	bgt.n	8001d78 <__aeabi_dsub+0x3b8>
 8001d76:	e69a      	b.n	8001aae <__aeabi_dsub+0xee>
 8001d78:	1af6      	subs	r6, r6, r3
 8001d7a:	4bcd      	ldr	r3, [pc, #820]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	4692      	mov	sl, r2
 8001d80:	e6a8      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001d82:	003c      	movs	r4, r7
 8001d84:	4304      	orrs	r4, r0
 8001d86:	1e62      	subs	r2, r4, #1
 8001d88:	4194      	sbcs	r4, r2
 8001d8a:	e66c      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0752      	lsls	r2, r2, #29
 8001d92:	4313      	orrs	r3, r2
 8001d94:	464a      	mov	r2, r9
 8001d96:	08d2      	lsrs	r2, r2, #3
 8001d98:	e7a6      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001d9a:	4cc6      	ldr	r4, [pc, #792]	; (80020b4 <__aeabi_dsub+0x6f4>)
 8001d9c:	1c72      	adds	r2, r6, #1
 8001d9e:	4222      	tst	r2, r4
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dsub+0x3e4>
 8001da2:	e0ac      	b.n	8001efe <__aeabi_dsub+0x53e>
 8001da4:	464a      	mov	r2, r9
 8001da6:	431a      	orrs	r2, r3
 8001da8:	2e00      	cmp	r6, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x3ee>
 8001dac:	e105      	b.n	8001fba <__aeabi_dsub+0x5fa>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x3f4>
 8001db2:	e156      	b.n	8002062 <__aeabi_dsub+0x6a2>
 8001db4:	003a      	movs	r2, r7
 8001db6:	4302      	orrs	r2, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x3fc>
 8001dba:	e0db      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001dbc:	181c      	adds	r4, r3, r0
 8001dbe:	429c      	cmp	r4, r3
 8001dc0:	419b      	sbcs	r3, r3
 8001dc2:	444f      	add	r7, r9
 8001dc4:	46ba      	mov	sl, r7
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	449a      	add	sl, r3
 8001dca:	4653      	mov	r3, sl
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	d400      	bmi.n	8001dd2 <__aeabi_dsub+0x412>
 8001dd0:	e780      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	4bb6      	ldr	r3, [pc, #728]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001dd6:	2601      	movs	r6, #1
 8001dd8:	401a      	ands	r2, r3
 8001dda:	4692      	mov	sl, r2
 8001ddc:	e77a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dde:	4cb3      	ldr	r4, [pc, #716]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001de0:	42a2      	cmp	r2, r4
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x426>
 8001de4:	e0c0      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001de6:	2480      	movs	r4, #128	; 0x80
 8001de8:	464d      	mov	r5, r9
 8001dea:	0424      	lsls	r4, r4, #16
 8001dec:	4325      	orrs	r5, r4
 8001dee:	46a9      	mov	r9, r5
 8001df0:	4664      	mov	r4, ip
 8001df2:	2c38      	cmp	r4, #56	; 0x38
 8001df4:	dc53      	bgt.n	8001e9e <__aeabi_dsub+0x4de>
 8001df6:	4661      	mov	r1, ip
 8001df8:	2c1f      	cmp	r4, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0x43e>
 8001dfc:	e0cd      	b.n	8001f9a <__aeabi_dsub+0x5da>
 8001dfe:	2520      	movs	r5, #32
 8001e00:	001e      	movs	r6, r3
 8001e02:	1b2d      	subs	r5, r5, r4
 8001e04:	464c      	mov	r4, r9
 8001e06:	40ab      	lsls	r3, r5
 8001e08:	40ac      	lsls	r4, r5
 8001e0a:	40ce      	lsrs	r6, r1
 8001e0c:	1e5d      	subs	r5, r3, #1
 8001e0e:	41ab      	sbcs	r3, r5
 8001e10:	4334      	orrs	r4, r6
 8001e12:	4323      	orrs	r3, r4
 8001e14:	464c      	mov	r4, r9
 8001e16:	40cc      	lsrs	r4, r1
 8001e18:	1b3f      	subs	r7, r7, r4
 8001e1a:	e045      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001e1c:	464a      	mov	r2, r9
 8001e1e:	1a1c      	subs	r4, r3, r0
 8001e20:	1bd1      	subs	r1, r2, r7
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	4192      	sbcs	r2, r2
 8001e26:	4252      	negs	r2, r2
 8001e28:	4692      	mov	sl, r2
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	1a52      	subs	r2, r2, r1
 8001e30:	4692      	mov	sl, r2
 8001e32:	0212      	lsls	r2, r2, #8
 8001e34:	d500      	bpl.n	8001e38 <__aeabi_dsub+0x478>
 8001e36:	e083      	b.n	8001f40 <__aeabi_dsub+0x580>
 8001e38:	4653      	mov	r3, sl
 8001e3a:	4323      	orrs	r3, r4
 8001e3c:	d000      	beq.n	8001e40 <__aeabi_dsub+0x480>
 8001e3e:	e621      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001e40:	2200      	movs	r2, #0
 8001e42:	2500      	movs	r5, #0
 8001e44:	e753      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001e46:	181c      	adds	r4, r3, r0
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	419b      	sbcs	r3, r3
 8001e4c:	444f      	add	r7, r9
 8001e4e:	46ba      	mov	sl, r7
 8001e50:	425b      	negs	r3, r3
 8001e52:	449a      	add	sl, r3
 8001e54:	4653      	mov	r3, sl
 8001e56:	2601      	movs	r6, #1
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x49e>
 8001e5c:	e73a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001e5e:	2602      	movs	r6, #2
 8001e60:	4652      	mov	r2, sl
 8001e62:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	401a      	ands	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	4021      	ands	r1, r4
 8001e6c:	0862      	lsrs	r2, r4, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	07dc      	lsls	r4, r3, #31
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	469a      	mov	sl, r3
 8001e76:	4314      	orrs	r4, r2
 8001e78:	e62c      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001e7a:	0039      	movs	r1, r7
 8001e7c:	3a20      	subs	r2, #32
 8001e7e:	40d1      	lsrs	r1, r2
 8001e80:	4662      	mov	r2, ip
 8001e82:	2a20      	cmp	r2, #32
 8001e84:	d006      	beq.n	8001e94 <__aeabi_dsub+0x4d4>
 8001e86:	4664      	mov	r4, ip
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	1b12      	subs	r2, r2, r4
 8001e8c:	003c      	movs	r4, r7
 8001e8e:	4094      	lsls	r4, r2
 8001e90:	4304      	orrs	r4, r0
 8001e92:	9401      	str	r4, [sp, #4]
 8001e94:	9c01      	ldr	r4, [sp, #4]
 8001e96:	1e62      	subs	r2, r4, #1
 8001e98:	4194      	sbcs	r4, r2
 8001e9a:	430c      	orrs	r4, r1
 8001e9c:	e5e3      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	4319      	orrs	r1, r3
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	1e5c      	subs	r4, r3, #1
 8001ea6:	41a3      	sbcs	r3, r4
 8001ea8:	1ac4      	subs	r4, r0, r3
 8001eaa:	42a0      	cmp	r0, r4
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	425b      	negs	r3, r3
 8001eb0:	1afb      	subs	r3, r7, r3
 8001eb2:	469a      	mov	sl, r3
 8001eb4:	465d      	mov	r5, fp
 8001eb6:	0016      	movs	r6, r2
 8001eb8:	e5dc      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001eba:	4649      	mov	r1, r9
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x502>
 8001ec0:	e0ae      	b.n	8002020 <__aeabi_dsub+0x660>
 8001ec2:	4661      	mov	r1, ip
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	3901      	subs	r1, #1
 8001ec8:	2c01      	cmp	r4, #1
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x50e>
 8001ecc:	e0e0      	b.n	8002090 <__aeabi_dsub+0x6d0>
 8001ece:	4c77      	ldr	r4, [pc, #476]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001ed0:	45a4      	cmp	ip, r4
 8001ed2:	d056      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001ed4:	468c      	mov	ip, r1
 8001ed6:	e69a      	b.n	8001c0e <__aeabi_dsub+0x24e>
 8001ed8:	4661      	mov	r1, ip
 8001eda:	2220      	movs	r2, #32
 8001edc:	003c      	movs	r4, r7
 8001ede:	1a52      	subs	r2, r2, r1
 8001ee0:	4094      	lsls	r4, r2
 8001ee2:	0001      	movs	r1, r0
 8001ee4:	4090      	lsls	r0, r2
 8001ee6:	46a0      	mov	r8, r4
 8001ee8:	4664      	mov	r4, ip
 8001eea:	1e42      	subs	r2, r0, #1
 8001eec:	4190      	sbcs	r0, r2
 8001eee:	4662      	mov	r2, ip
 8001ef0:	40e1      	lsrs	r1, r4
 8001ef2:	4644      	mov	r4, r8
 8001ef4:	40d7      	lsrs	r7, r2
 8001ef6:	430c      	orrs	r4, r1
 8001ef8:	4304      	orrs	r4, r0
 8001efa:	44b9      	add	r9, r7
 8001efc:	e701      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001efe:	496b      	ldr	r1, [pc, #428]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x546>
 8001f04:	e70c      	b.n	8001d20 <__aeabi_dsub+0x360>
 8001f06:	1818      	adds	r0, r3, r0
 8001f08:	4298      	cmp	r0, r3
 8001f0a:	419b      	sbcs	r3, r3
 8001f0c:	444f      	add	r7, r9
 8001f0e:	425b      	negs	r3, r3
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	07dc      	lsls	r4, r3, #31
 8001f14:	0840      	lsrs	r0, r0, #1
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	469a      	mov	sl, r3
 8001f1a:	0016      	movs	r6, r2
 8001f1c:	4304      	orrs	r4, r0
 8001f1e:	e6d9      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x566>
 8001f24:	e081      	b.n	800202a <__aeabi_dsub+0x66a>
 8001f26:	003b      	movs	r3, r7
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	d11d      	bne.n	8001f68 <__aeabi_dsub+0x5a8>
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	2500      	movs	r5, #0
 8001f30:	0312      	lsls	r2, r2, #12
 8001f32:	e70b      	b.n	8001d4c <__aeabi_dsub+0x38c>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e6d3      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001f40:	1ac4      	subs	r4, r0, r3
 8001f42:	42a0      	cmp	r0, r4
 8001f44:	4180      	sbcs	r0, r0
 8001f46:	464b      	mov	r3, r9
 8001f48:	4240      	negs	r0, r0
 8001f4a:	1aff      	subs	r7, r7, r3
 8001f4c:	1a3b      	subs	r3, r7, r0
 8001f4e:	469a      	mov	sl, r3
 8001f50:	465d      	mov	r5, fp
 8001f52:	e597      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001f54:	1a1c      	subs	r4, r3, r0
 8001f56:	464a      	mov	r2, r9
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	419b      	sbcs	r3, r3
 8001f5c:	1bd7      	subs	r7, r2, r7
 8001f5e:	425b      	negs	r3, r3
 8001f60:	1afb      	subs	r3, r7, r3
 8001f62:	469a      	mov	sl, r3
 8001f64:	2601      	movs	r6, #1
 8001f66:	e585      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001f68:	08c0      	lsrs	r0, r0, #3
 8001f6a:	077b      	lsls	r3, r7, #29
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	08fa      	lsrs	r2, r7, #3
 8001f72:	e6e7      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f74:	464a      	mov	r2, r9
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	464a      	mov	r2, r9
 8001f7e:	08d2      	lsrs	r2, r2, #3
 8001f80:	e6b5      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e6db      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	4319      	orrs	r1, r3
 8001f90:	000b      	movs	r3, r1
 8001f92:	1e59      	subs	r1, r3, #1
 8001f94:	418b      	sbcs	r3, r1
 8001f96:	001c      	movs	r4, r3
 8001f98:	e653      	b.n	8001c42 <__aeabi_dsub+0x282>
 8001f9a:	464d      	mov	r5, r9
 8001f9c:	3c20      	subs	r4, #32
 8001f9e:	40e5      	lsrs	r5, r4
 8001fa0:	2920      	cmp	r1, #32
 8001fa2:	d005      	beq.n	8001fb0 <__aeabi_dsub+0x5f0>
 8001fa4:	2440      	movs	r4, #64	; 0x40
 8001fa6:	1a64      	subs	r4, r4, r1
 8001fa8:	4649      	mov	r1, r9
 8001faa:	40a1      	lsls	r1, r4
 8001fac:	430b      	orrs	r3, r1
 8001fae:	4698      	mov	r8, r3
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	1e5c      	subs	r4, r3, #1
 8001fb4:	41a3      	sbcs	r3, r4
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	e776      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d0e1      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	4302      	orrs	r2, r0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x608>
 8001fc6:	e6b8      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	0752      	lsls	r2, r2, #29
 8001fcc:	2480      	movs	r4, #128	; 0x80
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0324      	lsls	r4, r4, #12
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	4222      	tst	r2, r4
 8001fd8:	d007      	beq.n	8001fea <__aeabi_dsub+0x62a>
 8001fda:	08fe      	lsrs	r6, r7, #3
 8001fdc:	4226      	tst	r6, r4
 8001fde:	d104      	bne.n	8001fea <__aeabi_dsub+0x62a>
 8001fe0:	465d      	mov	r5, fp
 8001fe2:	0032      	movs	r2, r6
 8001fe4:	08c3      	lsrs	r3, r0, #3
 8001fe6:	077f      	lsls	r7, r7, #29
 8001fe8:	433b      	orrs	r3, r7
 8001fea:	0f59      	lsrs	r1, r3, #29
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	0749      	lsls	r1, r1, #29
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	e6a6      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001ff6:	1ac4      	subs	r4, r0, r3
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	4180      	sbcs	r0, r0
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	4240      	negs	r0, r0
 8002000:	1aff      	subs	r7, r7, r3
 8002002:	1a3b      	subs	r3, r7, r0
 8002004:	469a      	mov	sl, r3
 8002006:	465d      	mov	r5, fp
 8002008:	2601      	movs	r6, #1
 800200a:	e533      	b.n	8001a74 <__aeabi_dsub+0xb4>
 800200c:	003b      	movs	r3, r7
 800200e:	4303      	orrs	r3, r0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x654>
 8002012:	e715      	b.n	8001e40 <__aeabi_dsub+0x480>
 8002014:	08c0      	lsrs	r0, r0, #3
 8002016:	077b      	lsls	r3, r7, #29
 8002018:	465d      	mov	r5, fp
 800201a:	4303      	orrs	r3, r0
 800201c:	08fa      	lsrs	r2, r7, #3
 800201e:	e666      	b.n	8001cee <__aeabi_dsub+0x32e>
 8002020:	08c0      	lsrs	r0, r0, #3
 8002022:	077b      	lsls	r3, r7, #29
 8002024:	4303      	orrs	r3, r0
 8002026:	08fa      	lsrs	r2, r7, #3
 8002028:	e65e      	b.n	8001ce8 <__aeabi_dsub+0x328>
 800202a:	003a      	movs	r2, r7
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	4302      	orrs	r2, r0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x674>
 8002032:	e682      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8002034:	464a      	mov	r2, r9
 8002036:	0752      	lsls	r2, r2, #29
 8002038:	2480      	movs	r4, #128	; 0x80
 800203a:	4313      	orrs	r3, r2
 800203c:	464a      	mov	r2, r9
 800203e:	0324      	lsls	r4, r4, #12
 8002040:	08d2      	lsrs	r2, r2, #3
 8002042:	4222      	tst	r2, r4
 8002044:	d007      	beq.n	8002056 <__aeabi_dsub+0x696>
 8002046:	08fe      	lsrs	r6, r7, #3
 8002048:	4226      	tst	r6, r4
 800204a:	d104      	bne.n	8002056 <__aeabi_dsub+0x696>
 800204c:	465d      	mov	r5, fp
 800204e:	0032      	movs	r2, r6
 8002050:	08c3      	lsrs	r3, r0, #3
 8002052:	077f      	lsls	r7, r7, #29
 8002054:	433b      	orrs	r3, r7
 8002056:	0f59      	lsrs	r1, r3, #29
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	430b      	orrs	r3, r1
 8002060:	e670      	b.n	8001d44 <__aeabi_dsub+0x384>
 8002062:	08c0      	lsrs	r0, r0, #3
 8002064:	077b      	lsls	r3, r7, #29
 8002066:	4303      	orrs	r3, r0
 8002068:	08fa      	lsrs	r2, r7, #3
 800206a:	e640      	b.n	8001cee <__aeabi_dsub+0x32e>
 800206c:	464c      	mov	r4, r9
 800206e:	3920      	subs	r1, #32
 8002070:	40cc      	lsrs	r4, r1
 8002072:	4661      	mov	r1, ip
 8002074:	2920      	cmp	r1, #32
 8002076:	d006      	beq.n	8002086 <__aeabi_dsub+0x6c6>
 8002078:	4666      	mov	r6, ip
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	1b89      	subs	r1, r1, r6
 800207e:	464e      	mov	r6, r9
 8002080:	408e      	lsls	r6, r1
 8002082:	4333      	orrs	r3, r6
 8002084:	4698      	mov	r8, r3
 8002086:	4643      	mov	r3, r8
 8002088:	1e59      	subs	r1, r3, #1
 800208a:	418b      	sbcs	r3, r1
 800208c:	431c      	orrs	r4, r3
 800208e:	e5d8      	b.n	8001c42 <__aeabi_dsub+0x282>
 8002090:	181c      	adds	r4, r3, r0
 8002092:	4284      	cmp	r4, r0
 8002094:	4180      	sbcs	r0, r0
 8002096:	444f      	add	r7, r9
 8002098:	46ba      	mov	sl, r7
 800209a:	4240      	negs	r0, r0
 800209c:	4482      	add	sl, r0
 800209e:	e6d9      	b.n	8001e54 <__aeabi_dsub+0x494>
 80020a0:	4653      	mov	r3, sl
 80020a2:	4323      	orrs	r3, r4
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x6e8>
 80020a6:	e6cb      	b.n	8001e40 <__aeabi_dsub+0x480>
 80020a8:	e614      	b.n	8001cd4 <__aeabi_dsub+0x314>
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	ff7fffff 	.word	0xff7fffff
 80020b4:	000007fe 	.word	0x000007fe
 80020b8:	2300      	movs	r3, #0
 80020ba:	4a01      	ldr	r2, [pc, #4]	; (80020c0 <__aeabi_dsub+0x700>)
 80020bc:	001c      	movs	r4, r3
 80020be:	e529      	b.n	8001b14 <__aeabi_dsub+0x154>
 80020c0:	000007ff 	.word	0x000007ff

080020c4 <__aeabi_dcmpun>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	0005      	movs	r5, r0
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020ca:	031c      	lsls	r4, r3, #12
 80020cc:	0016      	movs	r6, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	030a      	lsls	r2, r1, #12
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	0b12      	lsrs	r2, r2, #12
 80020d6:	0d49      	lsrs	r1, r1, #21
 80020d8:	0b24      	lsrs	r4, r4, #12
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	4281      	cmp	r1, r0
 80020de:	d008      	beq.n	80020f2 <__aeabi_dcmpun+0x2e>
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020e2:	2000      	movs	r0, #0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d103      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020e8:	0020      	movs	r0, r4
 80020ea:	4330      	orrs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	2001      	movs	r0, #1
 80020f4:	432a      	orrs	r2, r5
 80020f6:	d1fb      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020f8:	e7f2      	b.n	80020e0 <__aeabi_dcmpun+0x1c>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_d2iz>:
 8002100:	000a      	movs	r2, r1
 8002102:	b530      	push	{r4, r5, lr}
 8002104:	4c13      	ldr	r4, [pc, #76]	; (8002154 <__aeabi_d2iz+0x54>)
 8002106:	0053      	lsls	r3, r2, #1
 8002108:	0309      	lsls	r1, r1, #12
 800210a:	0005      	movs	r5, r0
 800210c:	0b09      	lsrs	r1, r1, #12
 800210e:	2000      	movs	r0, #0
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	0fd2      	lsrs	r2, r2, #31
 8002114:	42a3      	cmp	r3, r4
 8002116:	dd04      	ble.n	8002122 <__aeabi_d2iz+0x22>
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <__aeabi_d2iz+0x58>)
 800211a:	4283      	cmp	r3, r0
 800211c:	dd02      	ble.n	8002124 <__aeabi_d2iz+0x24>
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <__aeabi_d2iz+0x5c>)
 8002120:	18d0      	adds	r0, r2, r3
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	0340      	lsls	r0, r0, #13
 8002128:	4301      	orrs	r1, r0
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <__aeabi_d2iz+0x60>)
 800212c:	1ac0      	subs	r0, r0, r3
 800212e:	281f      	cmp	r0, #31
 8002130:	dd08      	ble.n	8002144 <__aeabi_d2iz+0x44>
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <__aeabi_d2iz+0x64>)
 8002134:	1ac3      	subs	r3, r0, r3
 8002136:	40d9      	lsrs	r1, r3
 8002138:	000b      	movs	r3, r1
 800213a:	4258      	negs	r0, r3
 800213c:	2a00      	cmp	r2, #0
 800213e:	d1f0      	bne.n	8002122 <__aeabi_d2iz+0x22>
 8002140:	0018      	movs	r0, r3
 8002142:	e7ee      	b.n	8002122 <__aeabi_d2iz+0x22>
 8002144:	4c08      	ldr	r4, [pc, #32]	; (8002168 <__aeabi_d2iz+0x68>)
 8002146:	40c5      	lsrs	r5, r0
 8002148:	46a4      	mov	ip, r4
 800214a:	4463      	add	r3, ip
 800214c:	4099      	lsls	r1, r3
 800214e:	000b      	movs	r3, r1
 8002150:	432b      	orrs	r3, r5
 8002152:	e7f2      	b.n	800213a <__aeabi_d2iz+0x3a>
 8002154:	000003fe 	.word	0x000003fe
 8002158:	0000041d 	.word	0x0000041d
 800215c:	7fffffff 	.word	0x7fffffff
 8002160:	00000433 	.word	0x00000433
 8002164:	00000413 	.word	0x00000413
 8002168:	fffffbed 	.word	0xfffffbed

0800216c <__aeabi_i2d>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2800      	cmp	r0, #0
 8002170:	d016      	beq.n	80021a0 <__aeabi_i2d+0x34>
 8002172:	17c3      	asrs	r3, r0, #31
 8002174:	18c5      	adds	r5, r0, r3
 8002176:	405d      	eors	r5, r3
 8002178:	0fc4      	lsrs	r4, r0, #31
 800217a:	0028      	movs	r0, r5
 800217c:	f000 f8d2 	bl	8002324 <__clzsi2>
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <__aeabi_i2d+0x5c>)
 8002182:	1a1b      	subs	r3, r3, r0
 8002184:	280a      	cmp	r0, #10
 8002186:	dc16      	bgt.n	80021b6 <__aeabi_i2d+0x4a>
 8002188:	0002      	movs	r2, r0
 800218a:	002e      	movs	r6, r5
 800218c:	3215      	adds	r2, #21
 800218e:	4096      	lsls	r6, r2
 8002190:	220b      	movs	r2, #11
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	40d5      	lsrs	r5, r2
 8002196:	055b      	lsls	r3, r3, #21
 8002198:	032d      	lsls	r5, r5, #12
 800219a:	0b2d      	lsrs	r5, r5, #12
 800219c:	0d5b      	lsrs	r3, r3, #21
 800219e:	e003      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021a0:	2400      	movs	r4, #0
 80021a2:	2300      	movs	r3, #0
 80021a4:	2500      	movs	r5, #0
 80021a6:	2600      	movs	r6, #0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	432b      	orrs	r3, r5
 80021ac:	07e4      	lsls	r4, r4, #31
 80021ae:	4323      	orrs	r3, r4
 80021b0:	0030      	movs	r0, r6
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
 80021b6:	380b      	subs	r0, #11
 80021b8:	4085      	lsls	r5, r0
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	032d      	lsls	r5, r5, #12
 80021be:	2600      	movs	r6, #0
 80021c0:	0b2d      	lsrs	r5, r5, #12
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	e7f0      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_ui2d>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	1e04      	subs	r4, r0, #0
 80021d0:	d010      	beq.n	80021f4 <__aeabi_ui2d+0x28>
 80021d2:	f000 f8a7 	bl	8002324 <__clzsi2>
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <__aeabi_ui2d+0x48>)
 80021d8:	1a1b      	subs	r3, r3, r0
 80021da:	280a      	cmp	r0, #10
 80021dc:	dc11      	bgt.n	8002202 <__aeabi_ui2d+0x36>
 80021de:	220b      	movs	r2, #11
 80021e0:	0021      	movs	r1, r4
 80021e2:	1a12      	subs	r2, r2, r0
 80021e4:	40d1      	lsrs	r1, r2
 80021e6:	3015      	adds	r0, #21
 80021e8:	030a      	lsls	r2, r1, #12
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4084      	lsls	r4, r0
 80021ee:	0b12      	lsrs	r2, r2, #12
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	e001      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	4313      	orrs	r3, r2
 80021fc:	0020      	movs	r0, r4
 80021fe:	0019      	movs	r1, r3
 8002200:	bd10      	pop	{r4, pc}
 8002202:	0022      	movs	r2, r4
 8002204:	380b      	subs	r0, #11
 8002206:	4082      	lsls	r2, r0
 8002208:	055b      	lsls	r3, r3, #21
 800220a:	0312      	lsls	r2, r2, #12
 800220c:	2400      	movs	r4, #0
 800220e:	0b12      	lsrs	r2, r2, #12
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	e7f1      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 8002214:	0000041e 	.word	0x0000041e

08002218 <__aeabi_d2f>:
 8002218:	0002      	movs	r2, r0
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	004b      	lsls	r3, r1, #1
 800221e:	030d      	lsls	r5, r1, #12
 8002220:	0f40      	lsrs	r0, r0, #29
 8002222:	0d5b      	lsrs	r3, r3, #21
 8002224:	0fcc      	lsrs	r4, r1, #31
 8002226:	0a6d      	lsrs	r5, r5, #9
 8002228:	493a      	ldr	r1, [pc, #232]	; (8002314 <__aeabi_d2f+0xfc>)
 800222a:	4305      	orrs	r5, r0
 800222c:	1c58      	adds	r0, r3, #1
 800222e:	00d7      	lsls	r7, r2, #3
 8002230:	4208      	tst	r0, r1
 8002232:	d00a      	beq.n	800224a <__aeabi_d2f+0x32>
 8002234:	4938      	ldr	r1, [pc, #224]	; (8002318 <__aeabi_d2f+0x100>)
 8002236:	1859      	adds	r1, r3, r1
 8002238:	29fe      	cmp	r1, #254	; 0xfe
 800223a:	dd16      	ble.n	800226a <__aeabi_d2f+0x52>
 800223c:	20ff      	movs	r0, #255	; 0xff
 800223e:	2200      	movs	r2, #0
 8002240:	05c0      	lsls	r0, r0, #23
 8002242:	4310      	orrs	r0, r2
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4320      	orrs	r0, r4
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <__aeabi_d2f+0x44>
 800224e:	433d      	orrs	r5, r7
 8002250:	d026      	beq.n	80022a0 <__aeabi_d2f+0x88>
 8002252:	2205      	movs	r2, #5
 8002254:	0192      	lsls	r2, r2, #6
 8002256:	0a52      	lsrs	r2, r2, #9
 8002258:	b2d8      	uxtb	r0, r3
 800225a:	e7f1      	b.n	8002240 <__aeabi_d2f+0x28>
 800225c:	432f      	orrs	r7, r5
 800225e:	d0ed      	beq.n	800223c <__aeabi_d2f+0x24>
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	03d2      	lsls	r2, r2, #15
 8002264:	20ff      	movs	r0, #255	; 0xff
 8002266:	432a      	orrs	r2, r5
 8002268:	e7ea      	b.n	8002240 <__aeabi_d2f+0x28>
 800226a:	2900      	cmp	r1, #0
 800226c:	dd1b      	ble.n	80022a6 <__aeabi_d2f+0x8e>
 800226e:	0192      	lsls	r2, r2, #6
 8002270:	1e50      	subs	r0, r2, #1
 8002272:	4182      	sbcs	r2, r0
 8002274:	00ed      	lsls	r5, r5, #3
 8002276:	0f7f      	lsrs	r7, r7, #29
 8002278:	432a      	orrs	r2, r5
 800227a:	433a      	orrs	r2, r7
 800227c:	0753      	lsls	r3, r2, #29
 800227e:	d047      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002280:	230f      	movs	r3, #15
 8002282:	4013      	ands	r3, r2
 8002284:	2b04      	cmp	r3, #4
 8002286:	d000      	beq.n	800228a <__aeabi_d2f+0x72>
 8002288:	3204      	adds	r2, #4
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	04db      	lsls	r3, r3, #19
 800228e:	4013      	ands	r3, r2
 8002290:	d03e      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002292:	1c48      	adds	r0, r1, #1
 8002294:	29fe      	cmp	r1, #254	; 0xfe
 8002296:	d0d1      	beq.n	800223c <__aeabi_d2f+0x24>
 8002298:	0192      	lsls	r2, r2, #6
 800229a:	0a52      	lsrs	r2, r2, #9
 800229c:	b2c0      	uxtb	r0, r0
 800229e:	e7cf      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a0:	2000      	movs	r0, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	e7cc      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a6:	000a      	movs	r2, r1
 80022a8:	3217      	adds	r2, #23
 80022aa:	db2f      	blt.n	800230c <__aeabi_d2f+0xf4>
 80022ac:	2680      	movs	r6, #128	; 0x80
 80022ae:	0436      	lsls	r6, r6, #16
 80022b0:	432e      	orrs	r6, r5
 80022b2:	251e      	movs	r5, #30
 80022b4:	1a6d      	subs	r5, r5, r1
 80022b6:	2d1f      	cmp	r5, #31
 80022b8:	dd11      	ble.n	80022de <__aeabi_d2f+0xc6>
 80022ba:	2202      	movs	r2, #2
 80022bc:	4252      	negs	r2, r2
 80022be:	1a52      	subs	r2, r2, r1
 80022c0:	0031      	movs	r1, r6
 80022c2:	40d1      	lsrs	r1, r2
 80022c4:	2d20      	cmp	r5, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_d2f+0xba>
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <__aeabi_d2f+0x104>)
 80022ca:	4694      	mov	ip, r2
 80022cc:	4463      	add	r3, ip
 80022ce:	409e      	lsls	r6, r3
 80022d0:	4337      	orrs	r7, r6
 80022d2:	003a      	movs	r2, r7
 80022d4:	1e53      	subs	r3, r2, #1
 80022d6:	419a      	sbcs	r2, r3
 80022d8:	430a      	orrs	r2, r1
 80022da:	2100      	movs	r1, #0
 80022dc:	e7ce      	b.n	800227c <__aeabi_d2f+0x64>
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <__aeabi_d2f+0x108>)
 80022e0:	0038      	movs	r0, r7
 80022e2:	4694      	mov	ip, r2
 80022e4:	4463      	add	r3, ip
 80022e6:	4098      	lsls	r0, r3
 80022e8:	003a      	movs	r2, r7
 80022ea:	1e41      	subs	r1, r0, #1
 80022ec:	4188      	sbcs	r0, r1
 80022ee:	409e      	lsls	r6, r3
 80022f0:	40ea      	lsrs	r2, r5
 80022f2:	4330      	orrs	r0, r6
 80022f4:	4302      	orrs	r2, r0
 80022f6:	2100      	movs	r1, #0
 80022f8:	0753      	lsls	r3, r2, #29
 80022fa:	d1c1      	bne.n	8002280 <__aeabi_d2f+0x68>
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0013      	movs	r3, r2
 8002300:	04c9      	lsls	r1, r1, #19
 8002302:	2001      	movs	r0, #1
 8002304:	400b      	ands	r3, r1
 8002306:	420a      	tst	r2, r1
 8002308:	d1c6      	bne.n	8002298 <__aeabi_d2f+0x80>
 800230a:	e7a3      	b.n	8002254 <__aeabi_d2f+0x3c>
 800230c:	2300      	movs	r3, #0
 800230e:	e7a0      	b.n	8002252 <__aeabi_d2f+0x3a>
 8002310:	000b      	movs	r3, r1
 8002312:	e79f      	b.n	8002254 <__aeabi_d2f+0x3c>
 8002314:	000007fe 	.word	0x000007fe
 8002318:	fffffc80 	.word	0xfffffc80
 800231c:	fffffca2 	.word	0xfffffca2
 8002320:	fffffc82 	.word	0xfffffc82

08002324 <__clzsi2>:
 8002324:	211c      	movs	r1, #28
 8002326:	2301      	movs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	4298      	cmp	r0, r3
 800232c:	d301      	bcc.n	8002332 <__clzsi2+0xe>
 800232e:	0c00      	lsrs	r0, r0, #16
 8002330:	3910      	subs	r1, #16
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	4298      	cmp	r0, r3
 8002336:	d301      	bcc.n	800233c <__clzsi2+0x18>
 8002338:	0a00      	lsrs	r0, r0, #8
 800233a:	3908      	subs	r1, #8
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	4298      	cmp	r0, r3
 8002340:	d301      	bcc.n	8002346 <__clzsi2+0x22>
 8002342:	0900      	lsrs	r0, r0, #4
 8002344:	3904      	subs	r1, #4
 8002346:	a202      	add	r2, pc, #8	; (adr r2, 8002350 <__clzsi2+0x2c>)
 8002348:	5c10      	ldrb	r0, [r2, r0]
 800234a:	1840      	adds	r0, r0, r1
 800234c:	4770      	bx	lr
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	02020304 	.word	0x02020304
 8002354:	01010101 	.word	0x01010101
	...

08002360 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002360:	b510      	push	{r4, lr}
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

while(1){osDelay(1);
 8002362:	2001      	movs	r0, #1
 8002364:	f003 fd5a 	bl	8005e1c <osDelay>
 8002368:	e7fb      	b.n	8002362 <StartTask02+0x2>

0800236a <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800236a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800236c:	2001      	movs	r0, #1
 800236e:	f003 fd55 	bl	8005e1c <osDelay>
  for(;;)
 8002372:	e7fb      	b.n	800236c <StartTask03+0x2>

08002374 <StartDefaultTask>:
{
 8002374:	b570      	push	{r4, r5, r6, lr}
	}
}

static void SET_GPS_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8002376:	2680      	movs	r6, #128	; 0x80
 8002378:	0236      	lsls	r6, r6, #8
 800237a:	25a0      	movs	r5, #160	; 0xa0
 800237c:	05ed      	lsls	r5, r5, #23
 800237e:	2201      	movs	r2, #1
 8002380:	0031      	movs	r1, r6
 8002382:	0028      	movs	r0, r5
 8002384:	f001 fd32 	bl	8003dec <HAL_GPIO_WritePin>
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8002388:	4c1d      	ldr	r4, [pc, #116]	; (8002400 <StartDefaultTask+0x8c>)
 800238a:	2201      	movs	r2, #1
 800238c:	2140      	movs	r1, #64	; 0x40
 800238e:	0020      	movs	r0, r4
 8002390:	f001 fd2c 	bl	8003dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 8002394:	2201      	movs	r2, #1
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	0020      	movs	r0, r4
 800239a:	f001 fd27 	bl	8003dec <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 800239e:	4919      	ldr	r1, [pc, #100]	; (8002404 <StartDefaultTask+0x90>)
 80023a0:	4819      	ldr	r0, [pc, #100]	; (8002408 <StartDefaultTask+0x94>)
 80023a2:	2204      	movs	r2, #4
 80023a4:	f001 f990 	bl	80036c8 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2120      	movs	r1, #32
 80023ac:	4817      	ldr	r0, [pc, #92]	; (800240c <StartDefaultTask+0x98>)
 80023ae:	f001 fd1d 	bl	8003dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	0031      	movs	r1, r6
 80023b6:	0028      	movs	r0, r5
 80023b8:	f001 fd18 	bl	8003dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	0020      	movs	r0, r4
 80023c2:	f001 fd13 	bl	8003dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	0020      	movs	r0, r4
 80023cc:	f001 fd0e 	bl	8003dec <HAL_GPIO_WritePin>
GSMBuf[0]=0;
 80023d0:	490f      	ldr	r1, [pc, #60]	; (8002410 <StartDefaultTask+0x9c>)
 80023d2:	2300      	movs	r3, #0
 80023d4:	700b      	strb	r3, [r1, #0]
DBuff[0]=0;
 80023d6:	4c0f      	ldr	r4, [pc, #60]	; (8002414 <StartDefaultTask+0xa0>)
 80023d8:	7023      	strb	r3, [r4, #0]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80023da:	480f      	ldr	r0, [pc, #60]	; (8002418 <StartDefaultTask+0xa4>)
 80023dc:	6803      	ldr	r3, [r0, #0]
 80023de:	250c      	movs	r5, #12
 80023e0:	621d      	str	r5, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuf, 1);
 80023e2:	2201      	movs	r2, #1
 80023e4:	f003 fbbe 	bl	8005b64 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <StartDefaultTask+0xa8>)
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	621d      	str	r5, [r3, #32]
HAL_UART_Receive_DMA(&huart3,DBuff, 1);
 80023ee:	2201      	movs	r2, #1
 80023f0:	0021      	movs	r1, r4
 80023f2:	f003 fbb7 	bl	8005b64 <HAL_UART_Receive_DMA>
	HAL_Delay(10000);
 80023f6:	4c0a      	ldr	r4, [pc, #40]	; (8002420 <StartDefaultTask+0xac>)
 80023f8:	0020      	movs	r0, r4
 80023fa:	f000 fe2d 	bl	8003058 <HAL_Delay>
while (1)
 80023fe:	e7fb      	b.n	80023f8 <StartDefaultTask+0x84>
 8002400:	50000800 	.word	0x50000800
 8002404:	200001f4 	.word	0x200001f4
 8002408:	20000218 	.word	0x20000218
 800240c:	50000400 	.word	0x50000400
 8002410:	2000020c 	.word	0x2000020c
 8002414:	20000204 	.word	0x20000204
 8002418:	200004f0 	.word	0x200004f0
 800241c:	20000618 	.word	0x20000618
 8002420:	00002710 	.word	0x00002710

08002424 <SystemClock_Config>:
{
 8002424:	b500      	push	{lr}
 8002426:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002428:	2234      	movs	r2, #52	; 0x34
 800242a:	2100      	movs	r1, #0
 800242c:	a805      	add	r0, sp, #20
 800242e:	f006 f88b 	bl	8008548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002432:	2210      	movs	r2, #16
 8002434:	2100      	movs	r1, #0
 8002436:	a801      	add	r0, sp, #4
 8002438:	f006 f886 	bl	8008548 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800243c:	2080      	movs	r0, #128	; 0x80
 800243e:	0080      	lsls	r0, r0, #2
 8002440:	f001 fd96 	bl	8003f70 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002444:	2302      	movs	r3, #2
 8002446:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002448:	33fe      	adds	r3, #254	; 0xfe
 800244a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002454:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002456:	a805      	add	r0, sp, #20
 8002458:	f001 fdbc 	bl	8003fd4 <HAL_RCC_OscConfig>
 800245c:	2800      	cmp	r0, #0
 800245e:	d10f      	bne.n	8002480 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002460:	2307      	movs	r3, #7
 8002462:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002464:	2300      	movs	r3, #0
 8002466:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002468:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800246a:	23a0      	movs	r3, #160	; 0xa0
 800246c:	01db      	lsls	r3, r3, #7
 800246e:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002470:	2100      	movs	r1, #0
 8002472:	a801      	add	r0, sp, #4
 8002474:	f002 f88e 	bl	8004594 <HAL_RCC_ClockConfig>
 8002478:	2800      	cmp	r0, #0
 800247a:	d103      	bne.n	8002484 <SystemClock_Config+0x60>
}
 800247c:	b013      	add	sp, #76	; 0x4c
 800247e:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002482:	e7fe      	b.n	8002482 <SystemClock_Config+0x5e>
 8002484:	b672      	cpsid	i
 8002486:	e7fe      	b.n	8002486 <SystemClock_Config+0x62>

08002488 <main>:
{
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	46de      	mov	lr, fp
 800248c:	4657      	mov	r7, sl
 800248e:	464e      	mov	r6, r9
 8002490:	4645      	mov	r5, r8
 8002492:	b5e0      	push	{r5, r6, r7, lr}
 8002494:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8002496:	f000 fdb9 	bl	800300c <HAL_Init>
  SystemClock_Config();
 800249a:	f7ff ffc3 	bl	8002424 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	2214      	movs	r2, #20
 80024a0:	2100      	movs	r1, #0
 80024a2:	a807      	add	r0, sp, #28
 80024a4:	f006 f850 	bl	8008548 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a8:	4df1      	ldr	r5, [pc, #964]	; (8002870 <main+0x3e8>)
 80024aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024ac:	2704      	movs	r7, #4
 80024ae:	433b      	orrs	r3, r7
 80024b0:	636b      	str	r3, [r5, #52]	; 0x34
 80024b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024b4:	403b      	ands	r3, r7
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024bc:	2220      	movs	r2, #32
 80024be:	4692      	mov	sl, r2
 80024c0:	4313      	orrs	r3, r2
 80024c2:	636b      	str	r3, [r5, #52]	; 0x34
 80024c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024c6:	4013      	ands	r3, r2
 80024c8:	9303      	str	r3, [sp, #12]
 80024ca:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024ce:	2601      	movs	r6, #1
 80024d0:	4333      	orrs	r3, r6
 80024d2:	636b      	str	r3, [r5, #52]	; 0x34
 80024d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024d6:	4033      	ands	r3, r6
 80024d8:	9304      	str	r3, [sp, #16]
 80024da:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024de:	2302      	movs	r3, #2
 80024e0:	431a      	orrs	r2, r3
 80024e2:	636a      	str	r2, [r5, #52]	; 0x34
 80024e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024e6:	4013      	ands	r3, r2
 80024e8:	9305      	str	r3, [sp, #20]
 80024ea:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024ee:	2308      	movs	r3, #8
 80024f0:	431a      	orrs	r2, r3
 80024f2:	636a      	str	r2, [r5, #52]	; 0x34
 80024f4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024f6:	4013      	ands	r3, r2
 80024f8:	9306      	str	r3, [sp, #24]
 80024fa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80024fc:	4cdd      	ldr	r4, [pc, #884]	; (8002874 <main+0x3ec>)
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	4699      	mov	r9, r3
 8002504:	2200      	movs	r2, #0
 8002506:	0021      	movs	r1, r4
 8002508:	0018      	movs	r0, r3
 800250a:	f001 fc6f 	bl	8003dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800250e:	4bda      	ldr	r3, [pc, #872]	; (8002878 <main+0x3f0>)
 8002510:	469b      	mov	fp, r3
 8002512:	2200      	movs	r2, #0
 8002514:	21c0      	movs	r1, #192	; 0xc0
 8002516:	0018      	movs	r0, r3
 8002518:	f001 fc68 	bl	8003dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	2107      	movs	r1, #7
 8002520:	48d6      	ldr	r0, [pc, #856]	; (800287c <main+0x3f4>)
 8002522:	f001 fc63 	bl	8003dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8002526:	4bd6      	ldr	r3, [pc, #856]	; (8002880 <main+0x3f8>)
 8002528:	4698      	mov	r8, r3
 800252a:	2200      	movs	r2, #0
 800252c:	218e      	movs	r1, #142	; 0x8e
 800252e:	0089      	lsls	r1, r1, #2
 8002530:	0018      	movs	r0, r3
 8002532:	f001 fc5b 	bl	8003dec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 8002536:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002538:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2400      	movs	r4, #0
 800253c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	a907      	add	r1, sp, #28
 8002542:	4648      	mov	r0, r9
 8002544:	f001 fb66 	bl	8003c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8002548:	23f2      	movs	r3, #242	; 0xf2
 800254a:	01db      	lsls	r3, r3, #7
 800254c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	a907      	add	r1, sp, #28
 8002554:	4640      	mov	r0, r8
 8002556:	f001 fb5d 	bl	8003c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8002562:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	a907      	add	r1, sp, #28
 8002566:	4640      	mov	r0, r8
 8002568:	f001 fb54 	bl	8003c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002572:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8002574:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	a907      	add	r1, sp, #28
 8002578:	4648      	mov	r0, r9
 800257a:	f001 fb4b 	bl	8003c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	a907      	add	r1, sp, #28
 800258a:	4648      	mov	r0, r9
 800258c:	f001 fb42 	bl	8003c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8002590:	23c0      	movs	r3, #192	; 0xc0
 8002592:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259a:	a907      	add	r1, sp, #28
 800259c:	4658      	mov	r0, fp
 800259e:	f001 fb39 	bl	8003c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80025a2:	2307      	movs	r3, #7
 80025a4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ac:	a907      	add	r1, sp, #28
 80025ae:	48b3      	ldr	r0, [pc, #716]	; (800287c <main+0x3f4>)
 80025b0:	f001 fb30 	bl	8003c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 80025b4:	238e      	movs	r3, #142	; 0x8e
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	a907      	add	r1, sp, #28
 80025c2:	4640      	mov	r0, r8
 80025c4:	f001 fb26 	bl	8003c14 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80025ca:	4333      	orrs	r3, r6
 80025cc:	63ab      	str	r3, [r5, #56]	; 0x38
 80025ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80025d0:	401e      	ands	r6, r3
 80025d2:	9601      	str	r6, [sp, #4]
 80025d4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2103      	movs	r1, #3
 80025da:	2009      	movs	r0, #9
 80025dc:	f001 f8d2 	bl	8003784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025e0:	2009      	movs	r0, #9
 80025e2:	f001 f901 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2103      	movs	r1, #3
 80025ea:	200a      	movs	r0, #10
 80025ec:	f001 f8ca 	bl	8003784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80025f0:	200a      	movs	r0, #10
 80025f2:	f001 f8f9 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2103      	movs	r1, #3
 80025fa:	200b      	movs	r0, #11
 80025fc:	f001 f8c2 	bl	8003784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002600:	200b      	movs	r0, #11
 8002602:	f001 f8f1 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002606:	220c      	movs	r2, #12
 8002608:	2100      	movs	r1, #0
 800260a:	a807      	add	r0, sp, #28
 800260c:	f005 ff9c 	bl	8008548 <memset>
  hadc1.Instance = ADC1;
 8002610:	489c      	ldr	r0, [pc, #624]	; (8002884 <main+0x3fc>)
 8002612:	4b9d      	ldr	r3, [pc, #628]	; (8002888 <main+0x400>)
 8002614:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800261c:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800261e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	039b      	lsls	r3, r3, #14
 8002624:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002626:	6147      	str	r7, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002628:	7604      	strb	r4, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800262a:	7644      	strb	r4, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800262c:	7684      	strb	r4, [r0, #26]
  hadc1.Init.NbrOfConversion = 4;
 800262e:	61c7      	str	r7, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002630:	4653      	mov	r3, sl
 8002632:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002634:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002636:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002638:	330c      	adds	r3, #12
 800263a:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800263c:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800263e:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002640:	6384      	str	r4, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002642:	3310      	adds	r3, #16
 8002644:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002646:	64c4      	str	r4, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002648:	f000 fd24 	bl	8003094 <HAL_ADC_Init>
 800264c:	2800      	cmp	r0, #0
 800264e:	d000      	beq.n	8002652 <main+0x1ca>
 8002650:	e10c      	b.n	800286c <main+0x3e4>
  sConfig.Channel = ADC_CHANNEL_1;
 8002652:	4b8e      	ldr	r3, [pc, #568]	; (800288c <main+0x404>)
 8002654:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002656:	2304      	movs	r3, #4
 8002658:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800265a:	2300      	movs	r3, #0
 800265c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800265e:	4889      	ldr	r0, [pc, #548]	; (8002884 <main+0x3fc>)
 8002660:	a907      	add	r1, sp, #28
 8002662:	f000 fe87 	bl	8003374 <HAL_ADC_ConfigChannel>
 8002666:	2800      	cmp	r0, #0
 8002668:	d000      	beq.n	800266c <main+0x1e4>
 800266a:	e147      	b.n	80028fc <main+0x474>
  sConfig.Channel = ADC_CHANNEL_9;
 800266c:	4b88      	ldr	r3, [pc, #544]	; (8002890 <main+0x408>)
 800266e:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002670:	2308      	movs	r3, #8
 8002672:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002674:	4883      	ldr	r0, [pc, #524]	; (8002884 <main+0x3fc>)
 8002676:	a907      	add	r1, sp, #28
 8002678:	f000 fe7c 	bl	8003374 <HAL_ADC_ConfigChannel>
 800267c:	2800      	cmp	r0, #0
 800267e:	d000      	beq.n	8002682 <main+0x1fa>
 8002680:	e13e      	b.n	8002900 <main+0x478>
  sConfig.Channel = ADC_CHANNEL_11;
 8002682:	4b84      	ldr	r3, [pc, #528]	; (8002894 <main+0x40c>)
 8002684:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002686:	230c      	movs	r3, #12
 8002688:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800268a:	487e      	ldr	r0, [pc, #504]	; (8002884 <main+0x3fc>)
 800268c:	a907      	add	r1, sp, #28
 800268e:	f000 fe71 	bl	8003374 <HAL_ADC_ConfigChannel>
 8002692:	2800      	cmp	r0, #0
 8002694:	d000      	beq.n	8002698 <main+0x210>
 8002696:	e135      	b.n	8002904 <main+0x47c>
  hi2c1.Instance = I2C1;
 8002698:	487f      	ldr	r0, [pc, #508]	; (8002898 <main+0x410>)
 800269a:	4b80      	ldr	r3, [pc, #512]	; (800289c <main+0x414>)
 800269c:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800269e:	4b80      	ldr	r3, [pc, #512]	; (80028a0 <main+0x418>)
 80026a0:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026a6:	2201      	movs	r2, #1
 80026a8:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026aa:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026ac:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026ae:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026b0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026b2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026b4:	f001 fba0 	bl	8003df8 <HAL_I2C_Init>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d000      	beq.n	80026be <main+0x236>
 80026bc:	e124      	b.n	8002908 <main+0x480>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026be:	4876      	ldr	r0, [pc, #472]	; (8002898 <main+0x410>)
 80026c0:	2100      	movs	r1, #0
 80026c2:	f001 fbff 	bl	8003ec4 <HAL_I2CEx_ConfigAnalogFilter>
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d000      	beq.n	80026cc <main+0x244>
 80026ca:	e11f      	b.n	800290c <main+0x484>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026cc:	4872      	ldr	r0, [pc, #456]	; (8002898 <main+0x410>)
 80026ce:	2100      	movs	r1, #0
 80026d0:	f001 fc24 	bl	8003f1c <HAL_I2CEx_ConfigDigitalFilter>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d000      	beq.n	80026da <main+0x252>
 80026d8:	e11a      	b.n	8002910 <main+0x488>
  hspi1.Instance = SPI1;
 80026da:	4872      	ldr	r0, [pc, #456]	; (80028a4 <main+0x41c>)
 80026dc:	4b72      	ldr	r3, [pc, #456]	; (80028a8 <main+0x420>)
 80026de:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026e0:	2382      	movs	r3, #130	; 0x82
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026e6:	2300      	movs	r3, #0
 80026e8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026ea:	22e0      	movs	r2, #224	; 0xe0
 80026ec:	00d2      	lsls	r2, r2, #3
 80026ee:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026f0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026f2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026f4:	2280      	movs	r2, #128	; 0x80
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026fa:	3af9      	subs	r2, #249	; 0xf9
 80026fc:	3aff      	subs	r2, #255	; 0xff
 80026fe:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002700:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002702:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002704:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002706:	2107      	movs	r1, #7
 8002708:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800270a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800270c:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800270e:	f002 f917 	bl	8004940 <HAL_SPI_Init>
 8002712:	2800      	cmp	r0, #0
 8002714:	d000      	beq.n	8002718 <main+0x290>
 8002716:	e0fd      	b.n	8002914 <main+0x48c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	220c      	movs	r2, #12
 800271a:	2100      	movs	r1, #0
 800271c:	a807      	add	r0, sp, #28
 800271e:	f005 ff13 	bl	8008548 <memset>
  htim6.Instance = TIM6;
 8002722:	4862      	ldr	r0, [pc, #392]	; (80028ac <main+0x424>)
 8002724:	4b62      	ldr	r3, [pc, #392]	; (80028b0 <main+0x428>)
 8002726:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 8000-1;
 8002728:	4b62      	ldr	r3, [pc, #392]	; (80028b4 <main+0x42c>)
 800272a:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	2300      	movs	r3, #0
 800272e:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 500-1;
 8002730:	22f4      	movs	r2, #244	; 0xf4
 8002732:	32ff      	adds	r2, #255	; 0xff
 8002734:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002736:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002738:	f002 faf4 	bl	8004d24 <HAL_TIM_Base_Init>
 800273c:	2800      	cmp	r0, #0
 800273e:	d000      	beq.n	8002742 <main+0x2ba>
 8002740:	e0ea      	b.n	8002918 <main+0x490>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002746:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002748:	4858      	ldr	r0, [pc, #352]	; (80028ac <main+0x424>)
 800274a:	a907      	add	r1, sp, #28
 800274c:	f002 fb1a 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8002750:	2800      	cmp	r0, #0
 8002752:	d000      	beq.n	8002756 <main+0x2ce>
 8002754:	e0e2      	b.n	800291c <main+0x494>
  huart1.Instance = USART1;
 8002756:	4858      	ldr	r0, [pc, #352]	; (80028b8 <main+0x430>)
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <main+0x434>)
 800275a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800275c:	2396      	movs	r3, #150	; 0x96
 800275e:	019b      	lsls	r3, r3, #6
 8002760:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	2300      	movs	r3, #0
 8002764:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002766:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002768:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800276a:	220c      	movs	r2, #12
 800276c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800276e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002770:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002772:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002774:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002776:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002778:	f003 f962 	bl	8005a40 <HAL_UART_Init>
 800277c:	2800      	cmp	r0, #0
 800277e:	d000      	beq.n	8002782 <main+0x2fa>
 8002780:	e0ce      	b.n	8002920 <main+0x498>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002782:	484d      	ldr	r0, [pc, #308]	; (80028b8 <main+0x430>)
 8002784:	2100      	movs	r1, #0
 8002786:	f003 fa69 	bl	8005c5c <HAL_UARTEx_SetTxFifoThreshold>
 800278a:	2800      	cmp	r0, #0
 800278c:	d000      	beq.n	8002790 <main+0x308>
 800278e:	e0c9      	b.n	8002924 <main+0x49c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002790:	4849      	ldr	r0, [pc, #292]	; (80028b8 <main+0x430>)
 8002792:	2100      	movs	r1, #0
 8002794:	f003 fa88 	bl	8005ca8 <HAL_UARTEx_SetRxFifoThreshold>
 8002798:	2800      	cmp	r0, #0
 800279a:	d000      	beq.n	800279e <main+0x316>
 800279c:	e0c4      	b.n	8002928 <main+0x4a0>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800279e:	4846      	ldr	r0, [pc, #280]	; (80028b8 <main+0x430>)
 80027a0:	f003 fa3c 	bl	8005c1c <HAL_UARTEx_DisableFifoMode>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d000      	beq.n	80027aa <main+0x322>
 80027a8:	e0c0      	b.n	800292c <main+0x4a4>
  huart2.Instance = USART2;
 80027aa:	4845      	ldr	r0, [pc, #276]	; (80028c0 <main+0x438>)
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <main+0x43c>)
 80027ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80027b0:	2396      	movs	r3, #150	; 0x96
 80027b2:	019b      	lsls	r3, r3, #6
 80027b4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	2300      	movs	r3, #0
 80027b8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027ba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027bc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027be:	220c      	movs	r2, #12
 80027c0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027c8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027cc:	f003 f938 	bl	8005a40 <HAL_UART_Init>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d000      	beq.n	80027d6 <main+0x34e>
 80027d4:	e0ac      	b.n	8002930 <main+0x4a8>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d6:	483a      	ldr	r0, [pc, #232]	; (80028c0 <main+0x438>)
 80027d8:	2100      	movs	r1, #0
 80027da:	f003 fa3f 	bl	8005c5c <HAL_UARTEx_SetTxFifoThreshold>
 80027de:	2800      	cmp	r0, #0
 80027e0:	d000      	beq.n	80027e4 <main+0x35c>
 80027e2:	e0a7      	b.n	8002934 <main+0x4ac>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e4:	4836      	ldr	r0, [pc, #216]	; (80028c0 <main+0x438>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	f003 fa5e 	bl	8005ca8 <HAL_UARTEx_SetRxFifoThreshold>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d000      	beq.n	80027f2 <main+0x36a>
 80027f0:	e0a2      	b.n	8002938 <main+0x4b0>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027f2:	4833      	ldr	r0, [pc, #204]	; (80028c0 <main+0x438>)
 80027f4:	f003 fa12 	bl	8005c1c <HAL_UARTEx_DisableFifoMode>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d000      	beq.n	80027fe <main+0x376>
 80027fc:	e09e      	b.n	800293c <main+0x4b4>
  huart3.Instance = USART3;
 80027fe:	4832      	ldr	r0, [pc, #200]	; (80028c8 <main+0x440>)
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <main+0x444>)
 8002802:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8002804:	2396      	movs	r3, #150	; 0x96
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	2300      	movs	r3, #0
 800280c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800280e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002810:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002812:	220c      	movs	r2, #12
 8002814:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002818:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281a:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800281c:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800281e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002820:	f003 f90e 	bl	8005a40 <HAL_UART_Init>
 8002824:	2800      	cmp	r0, #0
 8002826:	d000      	beq.n	800282a <main+0x3a2>
 8002828:	e08a      	b.n	8002940 <main+0x4b8>
  osKernelInitialize();
 800282a:	f003 fa73 	bl	8005d14 <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 800282e:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <main+0x448>)
 8002830:	2102      	movs	r1, #2
 8002832:	2010      	movs	r0, #16
 8002834:	f003 fb04 	bl	8005e40 <osMessageQueueNew>
 8002838:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <main+0x44c>)
 800283a:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800283c:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <main+0x450>)
 800283e:	4827      	ldr	r0, [pc, #156]	; (80028dc <main+0x454>)
 8002840:	2100      	movs	r1, #0
 8002842:	f003 fa9b 	bl	8005d7c <osThreadNew>
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <main+0x458>)
 8002848:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <main+0x45c>)
 800284c:	4826      	ldr	r0, [pc, #152]	; (80028e8 <main+0x460>)
 800284e:	2100      	movs	r1, #0
 8002850:	f003 fa94 	bl	8005d7c <osThreadNew>
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <main+0x464>)
 8002856:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8002858:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <main+0x468>)
 800285a:	4826      	ldr	r0, [pc, #152]	; (80028f4 <main+0x46c>)
 800285c:	2100      	movs	r1, #0
 800285e:	f003 fa8d 	bl	8005d7c <osThreadNew>
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <main+0x470>)
 8002864:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002866:	f003 fa69 	bl	8005d3c <osKernelStart>
  while (1)
 800286a:	e7fe      	b.n	800286a <main+0x3e2>
 800286c:	b672      	cpsid	i
  while (1)
 800286e:	e7fe      	b.n	800286e <main+0x3e6>
 8002870:	40021000 	.word	0x40021000
 8002874:	00008010 	.word	0x00008010
 8002878:	50000800 	.word	0x50000800
 800287c:	50000c00 	.word	0x50000c00
 8002880:	50000400 	.word	0x50000400
 8002884:	20000218 	.word	0x20000218
 8002888:	40012400 	.word	0x40012400
 800288c:	04000002 	.word	0x04000002
 8002890:	24000200 	.word	0x24000200
 8002894:	2c000800 	.word	0x2c000800
 8002898:	200003ec 	.word	0x200003ec
 800289c:	40005400 	.word	0x40005400
 80028a0:	00000e14 	.word	0x00000e14
 80028a4:	20000440 	.word	0x20000440
 80028a8:	40013000 	.word	0x40013000
 80028ac:	200004a4 	.word	0x200004a4
 80028b0:	40001000 	.word	0x40001000
 80028b4:	00001f3f 	.word	0x00001f3f
 80028b8:	200004f0 	.word	0x200004f0
 80028bc:	40013800 	.word	0x40013800
 80028c0:	20000584 	.word	0x20000584
 80028c4:	40004400 	.word	0x40004400
 80028c8:	20000618 	.word	0x20000618
 80028cc:	40004800 	.word	0x40004800
 80028d0:	0800c0b0 	.word	0x0800c0b0
 80028d4:	200006ac 	.word	0x200006ac
 80028d8:	0800c08c 	.word	0x0800c08c
 80028dc:	08002375 	.word	0x08002375
 80028e0:	20000214 	.word	0x20000214
 80028e4:	0800c044 	.word	0x0800c044
 80028e8:	08002361 	.word	0x08002361
 80028ec:	20000208 	.word	0x20000208
 80028f0:	0800c068 	.word	0x0800c068
 80028f4:	0800236b 	.word	0x0800236b
 80028f8:	20000210 	.word	0x20000210
 80028fc:	b672      	cpsid	i
 80028fe:	e7fe      	b.n	80028fe <main+0x476>
 8002900:	b672      	cpsid	i
 8002902:	e7fe      	b.n	8002902 <main+0x47a>
 8002904:	b672      	cpsid	i
 8002906:	e7fe      	b.n	8002906 <main+0x47e>
 8002908:	b672      	cpsid	i
 800290a:	e7fe      	b.n	800290a <main+0x482>
 800290c:	b672      	cpsid	i
 800290e:	e7fe      	b.n	800290e <main+0x486>
 8002910:	b672      	cpsid	i
 8002912:	e7fe      	b.n	8002912 <main+0x48a>
 8002914:	b672      	cpsid	i
 8002916:	e7fe      	b.n	8002916 <main+0x48e>
 8002918:	b672      	cpsid	i
 800291a:	e7fe      	b.n	800291a <main+0x492>
 800291c:	b672      	cpsid	i
 800291e:	e7fe      	b.n	800291e <main+0x496>
 8002920:	b672      	cpsid	i
 8002922:	e7fe      	b.n	8002922 <main+0x49a>
 8002924:	b672      	cpsid	i
 8002926:	e7fe      	b.n	8002926 <main+0x49e>
 8002928:	b672      	cpsid	i
 800292a:	e7fe      	b.n	800292a <main+0x4a2>
 800292c:	b672      	cpsid	i
 800292e:	e7fe      	b.n	800292e <main+0x4a6>
 8002930:	b672      	cpsid	i
 8002932:	e7fe      	b.n	8002932 <main+0x4aa>
 8002934:	b672      	cpsid	i
 8002936:	e7fe      	b.n	8002936 <main+0x4ae>
 8002938:	b672      	cpsid	i
 800293a:	e7fe      	b.n	800293a <main+0x4b2>
 800293c:	b672      	cpsid	i
 800293e:	e7fe      	b.n	800293e <main+0x4b6>
 8002940:	b672      	cpsid	i
 8002942:	e7fe      	b.n	8002942 <main+0x4ba>

08002944 <HAL_UART_TxCpltCallback>:
}
 8002944:	4770      	bx	lr
	...

08002948 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002948:	b510      	push	{r4, lr}
	if(huart==&huart1){
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_UART_RxCpltCallback+0x28>)
 800294c:	4298      	cmp	r0, r3
 800294e:	d003      	beq.n	8002958 <HAL_UART_RxCpltCallback+0x10>
	if(huart==&huart3){
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_UART_RxCpltCallback+0x2c>)
 8002952:	4298      	cmp	r0, r3
 8002954:	d006      	beq.n	8002964 <HAL_UART_RxCpltCallback+0x1c>
}
 8002956:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit_IT(&huart3, (char*)GSMBuf, 1);
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <HAL_UART_RxCpltCallback+0x30>)
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <HAL_UART_RxCpltCallback+0x2c>)
 800295c:	2201      	movs	r2, #1
 800295e:	f002 fb81 	bl	8005064 <HAL_UART_Transmit_IT>
	if(huart==&huart3){
 8002962:	e7f8      	b.n	8002956 <HAL_UART_RxCpltCallback+0xe>
		HAL_UART_Transmit_IT(&huart1, (char*)DBuff, 1);
 8002964:	4905      	ldr	r1, [pc, #20]	; (800297c <HAL_UART_RxCpltCallback+0x34>)
 8002966:	4802      	ldr	r0, [pc, #8]	; (8002970 <HAL_UART_RxCpltCallback+0x28>)
 8002968:	2201      	movs	r2, #1
 800296a:	f002 fb7b 	bl	8005064 <HAL_UART_Transmit_IT>
}
 800296e:	e7f2      	b.n	8002956 <HAL_UART_RxCpltCallback+0xe>
 8002970:	200004f0 	.word	0x200004f0
 8002974:	20000618 	.word	0x20000618
 8002978:	2000020c 	.word	0x2000020c
 800297c:	20000204 	.word	0x20000204

08002980 <HAL_UART_ErrorCallback>:
}
 8002980:	4770      	bx	lr
	...

08002984 <HAL_TIM_PeriodElapsedCallback>:
{
 8002984:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002988:	6802      	ldr	r2, [r0, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d000      	beq.n	8002990 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800298e:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8002990:	f000 fb50 	bl	8003034 <HAL_IncTick>
}
 8002994:	e7fb      	b.n	800298e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	40012c00 	.word	0x40012c00

0800299c <Error_Handler>:
 800299c:	b672      	cpsid	i
  while (1)
 800299e:	e7fe      	b.n	800299e <Error_Handler+0x2>

080029a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b500      	push	{lr}
 80029a2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_MspInit+0x40>)
 80029a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029a8:	2201      	movs	r2, #1
 80029aa:	4311      	orrs	r1, r2
 80029ac:	6419      	str	r1, [r3, #64]	; 0x40
 80029ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029b0:	400a      	ands	r2, r1
 80029b2:	9200      	str	r2, [sp, #0]
 80029b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0549      	lsls	r1, r1, #21
 80029bc:	430a      	orrs	r2, r1
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	400b      	ands	r3, r1
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80029c8:	2002      	movs	r0, #2
 80029ca:	2200      	movs	r2, #0
 80029cc:	2103      	movs	r1, #3
 80029ce:	4240      	negs	r0, r0
 80029d0:	f000 fed8 	bl	8003784 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80029d4:	20c0      	movs	r0, #192	; 0xc0
 80029d6:	00c0      	lsls	r0, r0, #3
 80029d8:	f000 fb50 	bl	800307c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029dc:	b003      	add	sp, #12
 80029de:	bd00      	pop	{pc}
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e4:	b530      	push	{r4, r5, lr}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	2214      	movs	r2, #20
 80029ec:	2100      	movs	r1, #0
 80029ee:	a803      	add	r0, sp, #12
 80029f0:	f005 fdaa 	bl	8008548 <memset>
  if(hadc->Instance==ADC1)
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_ADC_MspInit+0xac>)
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029fc:	b009      	add	sp, #36	; 0x24
 80029fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_ADC_MspInit+0xb0>)
 8002a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0349      	lsls	r1, r1, #13
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0e:	400a      	ands	r2, r1
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a16:	2201      	movs	r2, #1
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	6359      	str	r1, [r3, #52]	; 0x34
 8002a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a1e:	400a      	ands	r2, r1
 8002a20:	9201      	str	r2, [sp, #4]
 8002a22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a26:	2202      	movs	r2, #2
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	6359      	str	r1, [r3, #52]	; 0x34
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	401a      	ands	r2, r3
 8002a30:	9202      	str	r2, [sp, #8]
 8002a32:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 8002a34:	2503      	movs	r5, #3
 8002a36:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a38:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3a:	20a0      	movs	r0, #160	; 0xa0
 8002a3c:	a903      	add	r1, sp, #12
 8002a3e:	05c0      	lsls	r0, r0, #23
 8002a40:	f001 f8e8 	bl	8003c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_ADC_MspInit+0xb4>)
 8002a46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a48:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2500      	movs	r5, #0
 8002a4c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4e:	a903      	add	r1, sp, #12
 8002a50:	4812      	ldr	r0, [pc, #72]	; (8002a9c <HAL_ADC_MspInit+0xb8>)
 8002a52:	f001 f8df 	bl	8003c14 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002a56:	4812      	ldr	r0, [pc, #72]	; (8002aa0 <HAL_ADC_MspInit+0xbc>)
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_ADC_MspInit+0xc0>)
 8002a5a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a5c:	2305      	movs	r3, #5
 8002a5e:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a60:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a62:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a64:	337b      	adds	r3, #123	; 0x7b
 8002a66:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a68:	3381      	adds	r3, #129	; 0x81
 8002a6a:	33ff      	adds	r3, #255	; 0xff
 8002a6c:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a74:	2320      	movs	r3, #32
 8002a76:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a78:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a7a:	f000 feff 	bl	800387c <HAL_DMA_Init>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d103      	bne.n	8002a8a <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_ADC_MspInit+0xbc>)
 8002a84:	6523      	str	r3, [r4, #80]	; 0x50
 8002a86:	629c      	str	r4, [r3, #40]	; 0x28
}
 8002a88:	e7b8      	b.n	80029fc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002a8a:	f7ff ff87 	bl	800299c <Error_Handler>
 8002a8e:	e7f8      	b.n	8002a82 <HAL_ADC_MspInit+0x9e>
 8002a90:	40012400 	.word	0x40012400
 8002a94:	40021000 	.word	0x40021000
 8002a98:	00000402 	.word	0x00000402
 8002a9c:	50000400 	.word	0x50000400
 8002aa0:	2000027c 	.word	0x2000027c
 8002aa4:	40020008 	.word	0x40020008

08002aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	b08e      	sub	sp, #56	; 0x38
 8002aac:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aae:	2214      	movs	r2, #20
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	a809      	add	r0, sp, #36	; 0x24
 8002ab4:	f005 fd48 	bl	8008548 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab8:	221c      	movs	r2, #28
 8002aba:	2100      	movs	r1, #0
 8002abc:	a802      	add	r0, sp, #8
 8002abe:	f005 fd43 	bl	8008548 <memset>
  if(hi2c->Instance==I2C1)
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_I2C_MspInit+0x7c>)
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002aca:	b00e      	add	sp, #56	; 0x38
 8002acc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad2:	a802      	add	r0, sp, #8
 8002ad4:	f001 fe60 	bl	8004798 <HAL_RCCEx_PeriphCLKConfig>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d120      	bne.n	8002b1e <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002adc:	4c12      	ldr	r4, [pc, #72]	; (8002b28 <HAL_I2C_MspInit+0x80>)
 8002ade:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	6362      	str	r2, [r4, #52]	; 0x34
 8002ae6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002ae8:	4013      	ands	r3, r2
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af2:	3bae      	subs	r3, #174	; 0xae
 8002af4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af6:	3b11      	subs	r3, #17
 8002af8:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002afe:	3306      	adds	r3, #6
 8002b00:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	a909      	add	r1, sp, #36	; 0x24
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_I2C_MspInit+0x84>)
 8002b06:	f001 f885 	bl	8003c14 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0392      	lsls	r2, r2, #14
 8002b10:	4313      	orrs	r3, r2
 8002b12:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b16:	4013      	ands	r3, r2
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	9b01      	ldr	r3, [sp, #4]
}
 8002b1c:	e7d5      	b.n	8002aca <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002b1e:	f7ff ff3d 	bl	800299c <Error_Handler>
 8002b22:	e7db      	b.n	8002adc <HAL_I2C_MspInit+0x34>
 8002b24:	40005400 	.word	0x40005400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	50000400 	.word	0x50000400

08002b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b30:	b510      	push	{r4, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b36:	2214      	movs	r2, #20
 8002b38:	2100      	movs	r1, #0
 8002b3a:	a803      	add	r0, sp, #12
 8002b3c:	f005 fd04 	bl	8008548 <memset>
  if(hspi->Instance==SPI1)
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_SPI_MspInit+0x54>)
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b48:	b008      	add	sp, #32
 8002b4a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_SPI_MspInit+0x58>)
 8002b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	0149      	lsls	r1, r1, #5
 8002b54:	430a      	orrs	r2, r1
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
 8002b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	9201      	str	r2, [sp, #4]
 8002b5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b62:	2201      	movs	r2, #1
 8002b64:	4311      	orrs	r1, r2
 8002b66:	6359      	str	r1, [r3, #52]	; 0x34
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	9202      	str	r2, [sp, #8]
 8002b6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002b70:	23e0      	movs	r3, #224	; 0xe0
 8002b72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	3bde      	subs	r3, #222	; 0xde
 8002b76:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b78:	20a0      	movs	r0, #160	; 0xa0
 8002b7a:	a903      	add	r1, sp, #12
 8002b7c:	05c0      	lsls	r0, r0, #23
 8002b7e:	f001 f849 	bl	8003c14 <HAL_GPIO_Init>
}
 8002b82:	e7e1      	b.n	8002b48 <HAL_SPI_MspInit+0x18>
 8002b84:	40013000 	.word	0x40013000
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b8c:	b500      	push	{lr}
 8002b8e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_TIM_Base_MspInit+0x34>)
 8002b92:	6802      	ldr	r2, [r0, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b98:	b003      	add	sp, #12
 8002b9a:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_TIM_Base_MspInit+0x38>)
 8002b9e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	4319      	orrs	r1, r3
 8002ba4:	63d1      	str	r1, [r2, #60]	; 0x3c
 8002ba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ba8:	4013      	ands	r3, r2
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	2011      	movs	r0, #17
 8002bb4:	f000 fde6 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002bb8:	2011      	movs	r0, #17
 8002bba:	f000 fe15 	bl	80037e8 <HAL_NVIC_EnableIRQ>
}
 8002bbe:	e7eb      	b.n	8002b98 <HAL_TIM_Base_MspInit+0xc>
 8002bc0:	40001000 	.word	0x40001000
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b530      	push	{r4, r5, lr}
 8002bca:	b093      	sub	sp, #76	; 0x4c
 8002bcc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bce:	2214      	movs	r2, #20
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	a80d      	add	r0, sp, #52	; 0x34
 8002bd4:	f005 fcb8 	bl	8008548 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bd8:	221c      	movs	r2, #28
 8002bda:	2100      	movs	r1, #0
 8002bdc:	a806      	add	r0, sp, #24
 8002bde:	f005 fcb3 	bl	8008548 <memset>
  if(huart->Instance==USART1)
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_UART_MspInit+0x1d8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d008      	beq.n	8002bfc <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002bea:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_UART_MspInit+0x1dc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d050      	beq.n	8002c92 <HAL_UART_MspInit+0xca>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002bf0:	4a6d      	ldr	r2, [pc, #436]	; (8002da8 <HAL_UART_MspInit+0x1e0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <HAL_UART_MspInit+0x30>
 8002bf6:	e096      	b.n	8002d26 <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bf8:	b013      	add	sp, #76	; 0x4c
 8002bfa:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c00:	a806      	add	r0, sp, #24
 8002c02:	f001 fdc9 	bl	8004798 <HAL_RCCEx_PeriphCLKConfig>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d13d      	bne.n	8002c86 <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c0a:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_UART_MspInit+0x1e4>)
 8002c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	01c9      	lsls	r1, r1, #7
 8002c12:	430a      	orrs	r2, r1
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c18:	400a      	ands	r2, r1
 8002c1a:	9200      	str	r2, [sp, #0]
 8002c1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c20:	2201      	movs	r2, #1
 8002c22:	4311      	orrs	r1, r2
 8002c24:	6359      	str	r1, [r3, #52]	; 0x34
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	4013      	ands	r3, r2
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8002c2e:	23c0      	movs	r3, #192	; 0xc0
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2500      	movs	r5, #0
 8002c3a:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002c3e:	9211      	str	r2, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	20a0      	movs	r0, #160	; 0xa0
 8002c42:	a90d      	add	r1, sp, #52	; 0x34
 8002c44:	05c0      	lsls	r0, r0, #23
 8002c46:	f000 ffe5 	bl	8003c14 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002c4a:	4859      	ldr	r0, [pc, #356]	; (8002db0 <HAL_UART_MspInit+0x1e8>)
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_UART_MspInit+0x1ec>)
 8002c4e:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c50:	2332      	movs	r3, #50	; 0x32
 8002c52:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c54:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c56:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c58:	334e      	adds	r3, #78	; 0x4e
 8002c5a:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5c:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c5e:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c60:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c62:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c64:	f000 fe0a 	bl	800387c <HAL_DMA_Init>
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d10f      	bne.n	8002c8c <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c6c:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_UART_MspInit+0x1e8>)
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	50a3      	str	r3, [r4, r2]
 8002c72:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2103      	movs	r1, #3
 8002c78:	201b      	movs	r0, #27
 8002c7a:	f000 fd83 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c7e:	201b      	movs	r0, #27
 8002c80:	f000 fdb2 	bl	80037e8 <HAL_NVIC_EnableIRQ>
 8002c84:	e7b8      	b.n	8002bf8 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8002c86:	f7ff fe89 	bl	800299c <Error_Handler>
 8002c8a:	e7be      	b.n	8002c0a <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002c8c:	f7ff fe86 	bl	800299c <Error_Handler>
 8002c90:	e7ec      	b.n	8002c6c <HAL_UART_MspInit+0xa4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c92:	2302      	movs	r3, #2
 8002c94:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c96:	a806      	add	r0, sp, #24
 8002c98:	f001 fd7e 	bl	8004798 <HAL_RCCEx_PeriphCLKConfig>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d13c      	bne.n	8002d1a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca0:	4b42      	ldr	r3, [pc, #264]	; (8002dac <HAL_UART_MspInit+0x1e4>)
 8002ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	0289      	lsls	r1, r1, #10
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cae:	400a      	ands	r2, r1
 8002cb0:	9202      	str	r2, [sp, #8]
 8002cb2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	6359      	str	r1, [r3, #52]	; 0x34
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	9303      	str	r3, [sp, #12]
 8002cc2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	3b0a      	subs	r3, #10
 8002cca:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2500      	movs	r5, #0
 8002cce:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002cd2:	9211      	str	r2, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	20a0      	movs	r0, #160	; 0xa0
 8002cd6:	a90d      	add	r1, sp, #52	; 0x34
 8002cd8:	05c0      	lsls	r0, r0, #23
 8002cda:	f000 ff9b 	bl	8003c14 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002cde:	4836      	ldr	r0, [pc, #216]	; (8002db8 <HAL_UART_MspInit+0x1f0>)
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_UART_MspInit+0x1f4>)
 8002ce2:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002ce4:	2334      	movs	r3, #52	; 0x34
 8002ce6:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ce8:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cea:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cec:	334c      	adds	r3, #76	; 0x4c
 8002cee:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf0:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf2:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002cf4:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf6:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cf8:	f000 fdc0 	bl	800387c <HAL_DMA_Init>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d10f      	bne.n	8002d20 <HAL_UART_MspInit+0x158>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d00:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_UART_MspInit+0x1f0>)
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	50a3      	str	r3, [r4, r2]
 8002d06:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	201c      	movs	r0, #28
 8002d0e:	f000 fd39 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d12:	201c      	movs	r0, #28
 8002d14:	f000 fd68 	bl	80037e8 <HAL_NVIC_EnableIRQ>
 8002d18:	e76e      	b.n	8002bf8 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8002d1a:	f7ff fe3f 	bl	800299c <Error_Handler>
 8002d1e:	e7bf      	b.n	8002ca0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002d20:	f7ff fe3c 	bl	800299c <Error_Handler>
 8002d24:	e7ec      	b.n	8002d00 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d26:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_UART_MspInit+0x1e4>)
 8002d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	02c9      	lsls	r1, r1, #11
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d34:	400a      	ands	r2, r1
 8002d36:	9204      	str	r2, [sp, #16]
 8002d38:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	6359      	str	r1, [r3, #52]	; 0x34
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	4013      	ands	r3, r2
 8002d46:	9305      	str	r3, [sp, #20]
 8002d48:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	920e      	str	r2, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d50:	3b01      	subs	r3, #1
 8002d52:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	a90d      	add	r1, sp, #52	; 0x34
 8002d56:	481a      	ldr	r0, [pc, #104]	; (8002dc0 <HAL_UART_MspInit+0x1f8>)
 8002d58:	f000 ff5c 	bl	8003c14 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002d5c:	4819      	ldr	r0, [pc, #100]	; (8002dc4 <HAL_UART_MspInit+0x1fc>)
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_UART_MspInit+0x200>)
 8002d60:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002d62:	2337      	movs	r3, #55	; 0x37
 8002d64:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d66:	3b27      	subs	r3, #39	; 0x27
 8002d68:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d72:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d74:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d76:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d78:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d7a:	f000 fd7f 	bl	800387c <HAL_DMA_Init>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d10b      	bne.n	8002d9a <HAL_UART_MspInit+0x1d2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_UART_MspInit+0x1fc>)
 8002d84:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002d86:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2103      	movs	r1, #3
 8002d8c:	201d      	movs	r0, #29
 8002d8e:	f000 fcf9 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002d92:	201d      	movs	r0, #29
 8002d94:	f000 fd28 	bl	80037e8 <HAL_NVIC_EnableIRQ>
}
 8002d98:	e72e      	b.n	8002bf8 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8002d9a:	f7ff fdff 	bl	800299c <Error_Handler>
 8002d9e:	e7f0      	b.n	8002d82 <HAL_UART_MspInit+0x1ba>
 8002da0:	40013800 	.word	0x40013800
 8002da4:	40004400 	.word	0x40004400
 8002da8:	40004800 	.word	0x40004800
 8002dac:	40021000 	.word	0x40021000
 8002db0:	200002d8 	.word	0x200002d8
 8002db4:	4002001c 	.word	0x4002001c
 8002db8:	20000334 	.word	0x20000334
 8002dbc:	40020030 	.word	0x40020030
 8002dc0:	50000400 	.word	0x50000400
 8002dc4:	20000390 	.word	0x20000390
 8002dc8:	40020044 	.word	0x40020044

08002dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b530      	push	{r4, r5, lr}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	0005      	movs	r5, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_InitTick+0x88>)
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	0109      	lsls	r1, r1, #4
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	400b      	ands	r3, r1
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002de6:	a901      	add	r1, sp, #4
 8002de8:	a802      	add	r0, sp, #8
 8002dea:	f001 fcbb 	bl	8004764 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002dee:	9b05      	ldr	r3, [sp, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d117      	bne.n	8002e24 <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002df4:	f001 fca2 	bl	800473c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002df8:	4c17      	ldr	r4, [pc, #92]	; (8002e58 <HAL_InitTick+0x8c>)
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_InitTick+0x90>)
 8002dfc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_InitTick+0x94>)
 8002e00:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e02:	4918      	ldr	r1, [pc, #96]	; (8002e64 <HAL_InitTick+0x98>)
 8002e04:	f7fd f99c 	bl	8000140 <__udivsi3>
 8002e08:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e0a:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e10:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e12:	61a3      	str	r3, [r4, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002e14:	0020      	movs	r0, r4
 8002e16:	f001 ff85 	bl	8004d24 <HAL_TIM_Base_Init>
 8002e1a:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 8002e1c:	d006      	beq.n	8002e2c <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 8002e1e:	0020      	movs	r0, r4
 8002e20:	b007      	add	sp, #28
 8002e22:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e24:	f001 fc8a 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8002e28:	0040      	lsls	r0, r0, #1
 8002e2a:	e7e5      	b.n	8002df8 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002e2c:	480a      	ldr	r0, [pc, #40]	; (8002e58 <HAL_InitTick+0x8c>)
 8002e2e:	f001 fe03 	bl	8004a38 <HAL_TIM_Base_Start_IT>
 8002e32:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8002e34:	d1f3      	bne.n	8002e1e <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002e36:	200d      	movs	r0, #13
 8002e38:	f000 fcd6 	bl	80037e8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3c:	2d03      	cmp	r5, #3
 8002e3e:	d901      	bls.n	8002e44 <HAL_InitTick+0x78>
        status = HAL_ERROR;
 8002e40:	2401      	movs	r4, #1
 8002e42:	e7ec      	b.n	8002e1e <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8002e44:	2200      	movs	r2, #0
 8002e46:	0029      	movs	r1, r5
 8002e48:	200d      	movs	r0, #13
 8002e4a:	f000 fc9b 	bl	8003784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_InitTick+0x9c>)
 8002e50:	601d      	str	r5, [r3, #0]
 8002e52:	e7e4      	b.n	8002e1e <HAL_InitTick+0x52>
 8002e54:	40021000 	.word	0x40021000
 8002e58:	200006b0 	.word	0x200006b0
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	000003e7 	.word	0x000003e7
 8002e64:	000f4240 	.word	0x000f4240
 8002e68:	20000008 	.word	0x20000008

08002e6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <NMI_Handler>

08002e6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <HardFault_Handler>

08002e70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e72:	4802      	ldr	r0, [pc, #8]	; (8002e7c <DMA1_Channel1_IRQHandler+0xc>)
 8002e74:	f000 fe34 	bl	8003ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e78:	bd10      	pop	{r4, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	2000027c 	.word	0x2000027c

08002e80 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002e80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e82:	4803      	ldr	r0, [pc, #12]	; (8002e90 <DMA1_Channel2_3_IRQHandler+0x10>)
 8002e84:	f000 fe2c 	bl	8003ae0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002e8a:	f000 fe29 	bl	8003ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002e8e:	bd10      	pop	{r4, pc}
 8002e90:	200002d8 	.word	0x200002d8
 8002e94:	20000334 	.word	0x20000334

08002e98 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002e98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8002e9c:	f000 fe20 	bl	8003ae0 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002ea2:	f000 fe83 	bl	8003bac <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002ea6:	bd10      	pop	{r4, pc}
 8002ea8:	20000390 	.word	0x20000390
 8002eac:	2000027c 	.word	0x2000027c

08002eb0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002eb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002eb2:	4802      	ldr	r0, [pc, #8]	; (8002ebc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8002eb4:	f001 fdfc 	bl	8004ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	200006b0 	.word	0x200006b0

08002ec0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002ec0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ec2:	4802      	ldr	r0, [pc, #8]	; (8002ecc <TIM6_IRQHandler+0xc>)
 8002ec4:	f001 fdf4 	bl	8004ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002ec8:	bd10      	pop	{r4, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	200004a4 	.word	0x200004a4

08002ed0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ed0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ed2:	4802      	ldr	r0, [pc, #8]	; (8002edc <USART1_IRQHandler+0xc>)
 8002ed4:	f002 f978 	bl	80051c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	200004f0 	.word	0x200004f0

08002ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ee0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <USART2_IRQHandler+0xc>)
 8002ee4:	f002 f970 	bl	80051c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ee8:	bd10      	pop	{r4, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000584 	.word	0x20000584

08002ef0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002ef0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ef2:	4802      	ldr	r0, [pc, #8]	; (8002efc <USART3_4_IRQHandler+0xc>)
 8002ef4:	f002 f968 	bl	80051c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002ef8:	bd10      	pop	{r4, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	20000618 	.word	0x20000618

08002f00 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002f00:	2001      	movs	r0, #1
 8002f02:	4770      	bx	lr

08002f04 <_kill>:

int _kill(int pid, int sig)
{
 8002f04:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f06:	f005 fbd7 	bl	80086b8 <__errno>
 8002f0a:	2316      	movs	r3, #22
 8002f0c:	6003      	str	r3, [r0, #0]
  return -1;
 8002f0e:	2001      	movs	r0, #1
}
 8002f10:	4240      	negs	r0, r0
 8002f12:	bd10      	pop	{r4, pc}

08002f14 <_exit>:

void _exit (int status)
{
 8002f14:	b510      	push	{r4, lr}
  errno = EINVAL;
 8002f16:	f005 fbcf 	bl	80086b8 <__errno>
 8002f1a:	2316      	movs	r3, #22
 8002f1c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002f1e:	e7fe      	b.n	8002f1e <_exit+0xa>

08002f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f24:	dd07      	ble.n	8002f36 <_read+0x16>
 8002f26:	000c      	movs	r4, r1
 8002f28:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8002f2a:	e000      	b.n	8002f2e <_read+0xe>
 8002f2c:	bf00      	nop
 8002f2e:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f30:	3401      	adds	r4, #1
 8002f32:	42ac      	cmp	r4, r5
 8002f34:	d1f9      	bne.n	8002f2a <_read+0xa>
  }

  return len;
}
 8002f36:	0030      	movs	r0, r6
 8002f38:	bd70      	pop	{r4, r5, r6, pc}

08002f3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f3a:	b570      	push	{r4, r5, r6, lr}
 8002f3c:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	dd07      	ble.n	8002f50 <_write+0x16>
 8002f40:	000c      	movs	r4, r1
 8002f42:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8002f44:	7820      	ldrb	r0, [r4, #0]
 8002f46:	e000      	b.n	8002f4a <_write+0x10>
 8002f48:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4a:	3401      	adds	r4, #1
 8002f4c:	42ac      	cmp	r4, r5
 8002f4e:	d1f9      	bne.n	8002f44 <_write+0xa>
  }
  return len;
}
 8002f50:	0030      	movs	r0, r6
 8002f52:	bd70      	pop	{r4, r5, r6, pc}

08002f54 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002f54:	2001      	movs	r0, #1
}
 8002f56:	4240      	negs	r0, r0
 8002f58:	4770      	bx	lr

08002f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002f60:	2000      	movs	r0, #0
 8002f62:	4770      	bx	lr

08002f64 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002f64:	2001      	movs	r0, #1
 8002f66:	4770      	bx	lr

08002f68 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002f68:	2000      	movs	r0, #0
 8002f6a:	4770      	bx	lr

08002f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f70:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <_sbrk+0x38>)
 8002f72:	490d      	ldr	r1, [pc, #52]	; (8002fa8 <_sbrk+0x3c>)
 8002f74:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f76:	490d      	ldr	r1, [pc, #52]	; (8002fac <_sbrk+0x40>)
 8002f78:	6809      	ldr	r1, [r1, #0]
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d007      	beq.n	8002f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7e:	490b      	ldr	r1, [pc, #44]	; (8002fac <_sbrk+0x40>)
 8002f80:	6808      	ldr	r0, [r1, #0]
 8002f82:	18c3      	adds	r3, r0, r3
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d806      	bhi.n	8002f96 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002f88:	4a08      	ldr	r2, [pc, #32]	; (8002fac <_sbrk+0x40>)
 8002f8a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002f8c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002f8e:	4907      	ldr	r1, [pc, #28]	; (8002fac <_sbrk+0x40>)
 8002f90:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <_sbrk+0x44>)
 8002f92:	6008      	str	r0, [r1, #0]
 8002f94:	e7f3      	b.n	8002f7e <_sbrk+0x12>
    errno = ENOMEM;
 8002f96:	f005 fb8f 	bl	80086b8 <__errno>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	4240      	negs	r0, r0
 8002fa2:	e7f3      	b.n	8002f8c <_sbrk+0x20>
 8002fa4:	20009000 	.word	0x20009000
 8002fa8:	00000400 	.word	0x00000400
 8002fac:	200006fc 	.word	0x200006fc
 8002fb0:	20002230 	.word	0x20002230

08002fb4 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fbc:	f7ff fffa 	bl	8002fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc0:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fc2:	490d      	ldr	r1, [pc, #52]	; (8002ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <LoopForever+0xe>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc8:	e002      	b.n	8002fd0 <LoopCopyDataInit>

08002fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fce:	3304      	adds	r3, #4

08002fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd4:	d3f9      	bcc.n	8002fca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	; (8003004 <LoopForever+0x16>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fdc:	e001      	b.n	8002fe2 <LoopFillZerobss>

08002fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe0:	3204      	adds	r2, #4

08002fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe4:	d3fb      	bcc.n	8002fde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fe6:	f005 fb6d 	bl	80086c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002fea:	f7ff fa4d 	bl	8002488 <main>

08002fee <LoopForever>:

LoopForever:
  b LoopForever
 8002fee:	e7fe      	b.n	8002fee <LoopForever>
  ldr   r0, =_estack
 8002ff0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002ffc:	0800c5c0 	.word	0x0800c5c0
  ldr r2, =_sbss
 8003000:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003004:	2000222c 	.word	0x2000222c

08003008 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC1_IRQHandler>
	...

0800300c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800300c:	b510      	push	{r4, lr}
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <HAL_Init+0x24>)
 8003010:	6811      	ldr	r1, [r2, #0]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	430b      	orrs	r3, r1
 8003018:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800301a:	2003      	movs	r0, #3
 800301c:	f7ff fed6 	bl	8002dcc <HAL_InitTick>
 8003020:	1e04      	subs	r4, r0, #0
 8003022:	d002      	beq.n	800302a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003024:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003026:	0020      	movs	r0, r4
 8003028:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800302a:	f7ff fcb9 	bl	80029a0 <HAL_MspInit>
 800302e:	e7fa      	b.n	8003026 <HAL_Init+0x1a>
 8003030:	40022000 	.word	0x40022000

08003034 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003034:	4a03      	ldr	r2, [pc, #12]	; (8003044 <HAL_IncTick+0x10>)
 8003036:	6811      	ldr	r1, [r2, #0]
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_IncTick+0x14>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	185b      	adds	r3, r3, r1
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	4770      	bx	lr
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	20000700 	.word	0x20000700
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800304c:	4b01      	ldr	r3, [pc, #4]	; (8003054 <HAL_GetTick+0x8>)
 800304e:	6818      	ldr	r0, [r3, #0]
}
 8003050:	4770      	bx	lr
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000700 	.word	0x20000700

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff fff6 	bl	800304c <HAL_GetTick>
 8003060:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	1c63      	adds	r3, r4, #1
 8003064:	d002      	beq.n	800306c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <HAL_Delay+0x20>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	1b40      	subs	r0, r0, r5
 8003072:	42a0      	cmp	r0, r4
 8003074:	d3fa      	bcc.n	800306c <HAL_Delay+0x14>
  {
  }
}
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8003082:	400b      	ands	r3, r1
 8003084:	4303      	orrs	r3, r0
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	4770      	bx	lr
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	40010000 	.word	0x40010000
 8003090:	fffff9ff 	.word	0xfffff9ff

08003094 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003096:	b083      	sub	sp, #12
 8003098:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800309a:	2300      	movs	r3, #0
 800309c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800309e:	2800      	cmp	r0, #0
 80030a0:	d100      	bne.n	80030a4 <HAL_ADC_Init+0x10>
 80030a2:	e0ff      	b.n	80032a4 <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d100      	bne.n	80030ac <HAL_ADC_Init+0x18>
 80030aa:	e0b6      	b.n	800321a <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ac:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	00d2      	lsls	r2, r2, #3
 80030b2:	d417      	bmi.n	80030e4 <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 80030b4:	6899      	ldr	r1, [r3, #8]
 80030b6:	4a7c      	ldr	r2, [pc, #496]	; (80032a8 <HAL_ADC_Init+0x214>)
 80030b8:	4011      	ands	r1, r2
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	0552      	lsls	r2, r2, #21
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c2:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <HAL_ADC_Init+0x218>)
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	497a      	ldr	r1, [pc, #488]	; (80032b0 <HAL_ADC_Init+0x21c>)
 80030c8:	f7fd f83a 	bl	8000140 <__udivsi3>
 80030cc:	3001      	adds	r0, #1
 80030ce:	0040      	lsls	r0, r0, #1
 80030d0:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80030d2:	9b01      	ldr	r3, [sp, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 80030d8:	9b01      	ldr	r3, [sp, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80030de:	9b01      	ldr	r3, [sp, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f9      	bne.n	80030d8 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030e4:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e6:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e8:	2000      	movs	r0, #0
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	d408      	bmi.n	8003100 <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030f0:	2210      	movs	r2, #16
 80030f2:	4313      	orrs	r3, r2
 80030f4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030f8:	3a0f      	subs	r2, #15
 80030fa:	4313      	orrs	r3, r2
 80030fc:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030fe:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003100:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003102:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003104:	2310      	movs	r3, #16
 8003106:	4013      	ands	r3, r2
 8003108:	2204      	movs	r2, #4
 800310a:	402a      	ands	r2, r5
 800310c:	4313      	orrs	r3, r2
 800310e:	d000      	beq.n	8003112 <HAL_ADC_Init+0x7e>
 8003110:	e0c1      	b.n	8003296 <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003114:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <HAL_ADC_Init+0x220>)
 8003116:	4013      	ands	r3, r2
 8003118:	3206      	adds	r2, #6
 800311a:	32ff      	adds	r2, #255	; 0xff
 800311c:	4313      	orrs	r3, r2
 800311e:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003120:	688b      	ldr	r3, [r1, #8]
 8003122:	07db      	lsls	r3, r3, #31
 8003124:	d44f      	bmi.n	80031c6 <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003126:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003128:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800312a:	1e73      	subs	r3, r6, #1
 800312c:	419e      	sbcs	r6, r3
 800312e:	0336      	lsls	r6, r6, #12
 8003130:	68a2      	ldr	r2, [r4, #8]
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003136:	7e23      	ldrb	r3, [r4, #24]
 8003138:	039b      	lsls	r3, r3, #14
 800313a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800313c:	7e63      	ldrb	r3, [r4, #25]
 800313e:	03db      	lsls	r3, r3, #15
 8003140:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003142:	036b      	lsls	r3, r5, #13
 8003144:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003146:	6923      	ldr	r3, [r4, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db6d      	blt.n	8003228 <HAL_ADC_Init+0x194>
 800314c:	2780      	movs	r7, #128	; 0x80
 800314e:	03bf      	lsls	r7, r7, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003150:	232c      	movs	r3, #44	; 0x2c
 8003152:	5ce3      	ldrb	r3, [r4, r3]
 8003154:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003156:	4313      	orrs	r3, r2
 8003158:	4333      	orrs	r3, r6
 800315a:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800315c:	2220      	movs	r2, #32
 800315e:	5ca2      	ldrb	r2, [r4, r2]
 8003160:	2a01      	cmp	r2, #1
 8003162:	d064      	beq.n	800322e <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003164:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003166:	2a00      	cmp	r2, #0
 8003168:	d005      	beq.n	8003176 <HAL_ADC_Init+0xe2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800316a:	25e0      	movs	r5, #224	; 0xe0
 800316c:	006d      	lsls	r5, r5, #1
 800316e:	402a      	ands	r2, r5
 8003170:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003172:	432a      	orrs	r2, r5
 8003174:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003176:	68ca      	ldr	r2, [r1, #12]
 8003178:	4d4f      	ldr	r5, [pc, #316]	; (80032b8 <HAL_ADC_Init+0x224>)
 800317a:	402a      	ands	r2, r5
 800317c:	4313      	orrs	r3, r2
 800317e:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003180:	6863      	ldr	r3, [r4, #4]
 8003182:	0f9b      	lsrs	r3, r3, #30
 8003184:	079b      	lsls	r3, r3, #30
 8003186:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003188:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800318a:	213c      	movs	r1, #60	; 0x3c
 800318c:	5c61      	ldrb	r1, [r4, r1]
 800318e:	2901      	cmp	r1, #1
 8003190:	d05c      	beq.n	800324c <HAL_ADC_Init+0x1b8>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003192:	6821      	ldr	r1, [r4, #0]
 8003194:	690b      	ldr	r3, [r1, #16]
 8003196:	4d49      	ldr	r5, [pc, #292]	; (80032bc <HAL_ADC_Init+0x228>)
 8003198:	402b      	ands	r3, r5
 800319a:	4313      	orrs	r3, r2
 800319c:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800319e:	6862      	ldr	r2, [r4, #4]
 80031a0:	0053      	lsls	r3, r2, #1
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	05c9      	lsls	r1, r1, #23
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d00c      	beq.n	80031c6 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d008      	beq.n	80031c6 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80031b4:	4942      	ldr	r1, [pc, #264]	; (80032c0 <HAL_ADC_Init+0x22c>)
 80031b6:	680b      	ldr	r3, [r1, #0]
 80031b8:	4d42      	ldr	r5, [pc, #264]	; (80032c4 <HAL_ADC_Init+0x230>)
 80031ba:	402b      	ands	r3, r5
 80031bc:	25f0      	movs	r5, #240	; 0xf0
 80031be:	03ad      	lsls	r5, r5, #14
 80031c0:	402a      	ands	r2, r5
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80031c6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80031c8:	6953      	ldr	r3, [r2, #20]
 80031ca:	2107      	movs	r1, #7
 80031cc:	438b      	bics	r3, r1
 80031ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80031d4:	6821      	ldr	r1, [r4, #0]
 80031d6:	694a      	ldr	r2, [r1, #20]
 80031d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	2570      	movs	r5, #112	; 0x70
 80031de:	43aa      	bics	r2, r5
 80031e0:	4313      	orrs	r3, r2
 80031e2:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d13a      	bne.n	8003260 <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031ee:	3b10      	subs	r3, #16
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031f4:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	2307      	movs	r3, #7
 80031fa:	4013      	ands	r3, r2
 80031fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80031fe:	429a      	cmp	r2, r3
 8003200:	d040      	beq.n	8003284 <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003204:	2212      	movs	r2, #18
 8003206:	4393      	bics	r3, r2
 8003208:	3a02      	subs	r2, #2
 800320a:	4313      	orrs	r3, r2
 800320c:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003210:	3a0f      	subs	r2, #15
 8003212:	4313      	orrs	r3, r2
 8003214:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003216:	2001      	movs	r0, #1
 8003218:	e042      	b.n	80032a0 <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 800321a:	f7ff fbe3 	bl	80029e4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800321e:	2300      	movs	r3, #0
 8003220:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003222:	2254      	movs	r2, #84	; 0x54
 8003224:	54a3      	strb	r3, [r4, r2]
 8003226:	e741      	b.n	80030ac <HAL_ADC_Init+0x18>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	085f      	lsrs	r7, r3, #1
 800322c:	e790      	b.n	8003150 <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800322e:	2d00      	cmp	r5, #0
 8003230:	d103      	bne.n	800323a <HAL_ADC_Init+0x1a6>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	0252      	lsls	r2, r2, #9
 8003236:	4313      	orrs	r3, r2
 8003238:	e794      	b.n	8003164 <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800323c:	2520      	movs	r5, #32
 800323e:	432a      	orrs	r2, r5
 8003240:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003244:	3d1f      	subs	r5, #31
 8003246:	432a      	orrs	r2, r5
 8003248:	65e2      	str	r2, [r4, #92]	; 0x5c
 800324a:	e78b      	b.n	8003164 <HAL_ADC_Init+0xd0>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800324c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800324e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003250:	4329      	orrs	r1, r5
 8003252:	430a      	orrs	r2, r1
 8003254:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003256:	430a      	orrs	r2, r1
 8003258:	4313      	orrs	r3, r2
 800325a:	2201      	movs	r2, #1
 800325c:	431a      	orrs	r2, r3
 800325e:	e798      	b.n	8003192 <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	0392      	lsls	r2, r2, #14
 8003264:	4293      	cmp	r3, r2
 8003266:	d1c5      	bne.n	80031f4 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003268:	6821      	ldr	r1, [r4, #0]
 800326a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800326c:	69e3      	ldr	r3, [r4, #28]
 800326e:	3b01      	subs	r3, #1
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	221c      	movs	r2, #28
 8003274:	401a      	ands	r2, r3
 8003276:	2310      	movs	r3, #16
 8003278:	425b      	negs	r3, r3
 800327a:	4093      	lsls	r3, r2
 800327c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800327e:	4313      	orrs	r3, r2
 8003280:	628b      	str	r3, [r1, #40]	; 0x28
 8003282:	e7b7      	b.n	80031f4 <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 8003284:	2300      	movs	r3, #0
 8003286:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003288:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800328a:	2203      	movs	r2, #3
 800328c:	4393      	bics	r3, r2
 800328e:	3a02      	subs	r2, #2
 8003290:	4313      	orrs	r3, r2
 8003292:	65a3      	str	r3, [r4, #88]	; 0x58
 8003294:	e004      	b.n	80032a0 <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003298:	2210      	movs	r2, #16
 800329a:	4313      	orrs	r3, r2
 800329c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800329e:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80032a0:	b003      	add	sp, #12
 80032a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
 80032a6:	e7fb      	b.n	80032a0 <HAL_ADC_Init+0x20c>
 80032a8:	6fffffe8 	.word	0x6fffffe8
 80032ac:	20000000 	.word	0x20000000
 80032b0:	00030d40 	.word	0x00030d40
 80032b4:	fffffefd 	.word	0xfffffefd
 80032b8:	fffe0201 	.word	0xfffe0201
 80032bc:	1ffffc02 	.word	0x1ffffc02
 80032c0:	40012708 	.word	0x40012708
 80032c4:	ffc3ffff 	.word	0xffc3ffff

080032c8 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032c8:	4770      	bx	lr

080032ca <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032ca:	4770      	bx	lr

080032cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032cc:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80032d0:	f7ff fffb 	bl	80032ca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <HAL_ADC_ErrorCallback>:
}
 80032d6:	4770      	bx	lr

080032d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032d8:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032da:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032dc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	4313      	orrs	r3, r2
 80032e2:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80032e6:	3a3c      	subs	r2, #60	; 0x3c
 80032e8:	4313      	orrs	r3, r2
 80032ea:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032ec:	f7ff fff3 	bl	80032d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f0:	bd10      	pop	{r4, pc}
	...

080032f4 <ADC_DMAConvCplt>:
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032fa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80032fc:	2150      	movs	r1, #80	; 0x50
 80032fe:	4211      	tst	r1, r2
 8003300:	d12a      	bne.n	8003358 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003302:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4313      	orrs	r3, r2
 800330a:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800330c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800330e:	68d9      	ldr	r1, [r3, #12]
 8003310:	22c0      	movs	r2, #192	; 0xc0
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	4211      	tst	r1, r2
 8003316:	d113      	bne.n	8003340 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003318:	7e82      	ldrb	r2, [r0, #26]
 800331a:	2a00      	cmp	r2, #0
 800331c:	d110      	bne.n	8003340 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	0712      	lsls	r2, r2, #28
 8003322:	d50d      	bpl.n	8003340 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	0752      	lsls	r2, r2, #29
 8003328:	d40d      	bmi.n	8003346 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	210c      	movs	r1, #12
 800332e:	438a      	bics	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003332:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <ADC_DMAConvCplt+0x7c>)
 8003336:	4013      	ands	r3, r2
 8003338:	3204      	adds	r2, #4
 800333a:	32ff      	adds	r2, #255	; 0xff
 800333c:	4313      	orrs	r3, r2
 800333e:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003340:	f7ff ffc2 	bl	80032c8 <HAL_ADC_ConvCpltCallback>
}
 8003344:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003346:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003348:	2220      	movs	r2, #32
 800334a:	4313      	orrs	r3, r2
 800334c:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003350:	3a1f      	subs	r2, #31
 8003352:	4313      	orrs	r3, r2
 8003354:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003356:	e7f3      	b.n	8003340 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003358:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800335a:	06d2      	lsls	r2, r2, #27
 800335c:	d404      	bmi.n	8003368 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800335e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003360:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003362:	0018      	movs	r0, r3
 8003364:	4790      	blx	r2
}
 8003366:	e7ed      	b.n	8003344 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8003368:	f7ff ffb5 	bl	80032d6 <HAL_ADC_ErrorCallback>
 800336c:	e7ea      	b.n	8003344 <ADC_DMAConvCplt+0x50>
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	fffffefe 	.word	0xfffffefe

08003374 <HAL_ADC_ConfigChannel>:
{
 8003374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003376:	b083      	sub	sp, #12
 8003378:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800337a:	2300      	movs	r3, #0
 800337c:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800337e:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8003380:	3354      	adds	r3, #84	; 0x54
 8003382:	5cc3      	ldrb	r3, [r0, r3]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d100      	bne.n	800338a <HAL_ADC_ConfigChannel+0x16>
 8003388:	e11e      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x254>
 800338a:	2354      	movs	r3, #84	; 0x54
 800338c:	2201      	movs	r2, #1
 800338e:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003390:	6800      	ldr	r0, [r0, #0]
 8003392:	6883      	ldr	r3, [r0, #8]
 8003394:	3203      	adds	r2, #3
 8003396:	0017      	movs	r7, r2
 8003398:	401f      	ands	r7, r3
 800339a:	421a      	tst	r2, r3
 800339c:	d009      	beq.n	80033b2 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033a0:	321c      	adds	r2, #28
 80033a2:	4313      	orrs	r3, r2
 80033a4:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80033a6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80033a8:	2354      	movs	r3, #84	; 0x54
 80033aa:	2200      	movs	r2, #0
 80033ac:	54e2      	strb	r2, [r4, r3]
}
 80033ae:	b003      	add	sp, #12
 80033b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80033b2:	684a      	ldr	r2, [r1, #4]
 80033b4:	2a02      	cmp	r2, #2
 80033b6:	d100      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x46>
 80033b8:	e0c4      	b.n	8003544 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033ba:	2304      	movs	r3, #4
 80033bc:	439d      	bics	r5, r3
 80033be:	2680      	movs	r6, #128	; 0x80
 80033c0:	0636      	lsls	r6, r6, #24
 80033c2:	42b5      	cmp	r5, r6
 80033c4:	d021      	beq.n	800340a <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80033c6:	231f      	movs	r3, #31
 80033c8:	401a      	ands	r2, r3
 80033ca:	3b10      	subs	r3, #16
 80033cc:	4093      	lsls	r3, r2
 80033ce:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80033d0:	439e      	bics	r6, r3
 80033d2:	680b      	ldr	r3, [r1, #0]
 80033d4:	035d      	lsls	r5, r3, #13
 80033d6:	d148      	bne.n	800346a <HAL_ADC_ConfigChannel+0xf6>
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	0edf      	lsrs	r7, r3, #27
 80033dc:	003b      	movs	r3, r7
 80033de:	4093      	lsls	r3, r2
 80033e0:	4333      	orrs	r3, r6
 80033e2:	6623      	str	r3, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80033e4:	684a      	ldr	r2, [r1, #4]
 80033e6:	0893      	lsrs	r3, r2, #2
 80033e8:	3301      	adds	r3, #1
 80033ea:	69e5      	ldr	r5, [r4, #28]
 80033ec:	42ab      	cmp	r3, r5
 80033ee:	d812      	bhi.n	8003416 <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 80033f0:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80033f2:	251f      	movs	r5, #31
 80033f4:	4015      	ands	r5, r2
 80033f6:	680b      	ldr	r3, [r1, #0]
 80033f8:	0e9b      	lsrs	r3, r3, #26
 80033fa:	220f      	movs	r2, #15
 80033fc:	4013      	ands	r3, r2
 80033fe:	40ab      	lsls	r3, r5
 8003400:	40aa      	lsls	r2, r5
 8003402:	4396      	bics	r6, r2
 8003404:	4333      	orrs	r3, r6
 8003406:	6283      	str	r3, [r0, #40]	; 0x28
}
 8003408:	e005      	b.n	8003416 <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800340a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800340c:	680b      	ldr	r3, [r1, #0]
 800340e:	035b      	lsls	r3, r3, #13
 8003410:	0b5b      	lsrs	r3, r3, #13
 8003412:	4313      	orrs	r3, r2
 8003414:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003416:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8003418:	6968      	ldr	r0, [r5, #20]
 800341a:	680a      	ldr	r2, [r1, #0]
 800341c:	0212      	lsls	r2, r2, #8
 800341e:	688b      	ldr	r3, [r1, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	4e6a      	ldr	r6, [pc, #424]	; (80035cc <HAL_ADC_ConfigChannel+0x258>)
 8003424:	4033      	ands	r3, r6
 8003426:	4390      	bics	r0, r2
 8003428:	4303      	orrs	r3, r0
 800342a:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800342c:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342e:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003430:	2b00      	cmp	r3, #0
 8003432:	dab9      	bge.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003434:	4a66      	ldr	r2, [pc, #408]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	25e0      	movs	r5, #224	; 0xe0
 800343a:	046d      	lsls	r5, r5, #17
 800343c:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800343e:	4965      	ldr	r1, [pc, #404]	; (80035d4 <HAL_ADC_ConfigChannel+0x260>)
 8003440:	428b      	cmp	r3, r1
 8003442:	d050      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003444:	4864      	ldr	r0, [pc, #400]	; (80035d8 <HAL_ADC_ConfigChannel+0x264>)
 8003446:	4283      	cmp	r3, r0
 8003448:	d06e      	beq.n	8003528 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800344a:	4964      	ldr	r1, [pc, #400]	; (80035dc <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344c:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800344e:	428b      	cmp	r3, r1
 8003450:	d1aa      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
 8003452:	0252      	lsls	r2, r2, #9
 8003454:	d4a8      	bmi.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003456:	495e      	ldr	r1, [pc, #376]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 8003458:	680b      	ldr	r3, [r1, #0]
 800345a:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_ADC_ConfigChannel+0x26c>)
 800345c:	4013      	ands	r3, r2
 800345e:	432b      	orrs	r3, r5
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	03d2      	lsls	r2, r2, #15
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
}
 8003468:	e79e      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800346a:	07dd      	lsls	r5, r3, #31
 800346c:	d4b6      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 800346e:	2701      	movs	r7, #1
 8003470:	079d      	lsls	r5, r3, #30
 8003472:	d4b3      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 8003474:	3701      	adds	r7, #1
 8003476:	075d      	lsls	r5, r3, #29
 8003478:	d4b0      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 800347a:	3701      	adds	r7, #1
 800347c:	071d      	lsls	r5, r3, #28
 800347e:	d4ad      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 8003480:	3701      	adds	r7, #1
 8003482:	06dd      	lsls	r5, r3, #27
 8003484:	d4aa      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 8003486:	3701      	adds	r7, #1
 8003488:	069d      	lsls	r5, r3, #26
 800348a:	d4a7      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 800348c:	3701      	adds	r7, #1
 800348e:	065d      	lsls	r5, r3, #25
 8003490:	d4a4      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 8003492:	3701      	adds	r7, #1
 8003494:	061d      	lsls	r5, r3, #24
 8003496:	d4a1      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 8003498:	3701      	adds	r7, #1
 800349a:	05dd      	lsls	r5, r3, #23
 800349c:	d49e      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 800349e:	3701      	adds	r7, #1
 80034a0:	059d      	lsls	r5, r3, #22
 80034a2:	d49b      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034a4:	3701      	adds	r7, #1
 80034a6:	055d      	lsls	r5, r3, #21
 80034a8:	d498      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034aa:	3701      	adds	r7, #1
 80034ac:	051d      	lsls	r5, r3, #20
 80034ae:	d495      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034b0:	3701      	adds	r7, #1
 80034b2:	04dd      	lsls	r5, r3, #19
 80034b4:	d492      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034b6:	3701      	adds	r7, #1
 80034b8:	049d      	lsls	r5, r3, #18
 80034ba:	d48f      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034bc:	3701      	adds	r7, #1
 80034be:	045d      	lsls	r5, r3, #17
 80034c0:	d48c      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034c2:	3701      	adds	r7, #1
 80034c4:	041d      	lsls	r5, r3, #16
 80034c6:	d489      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034c8:	3701      	adds	r7, #1
 80034ca:	03dd      	lsls	r5, r3, #15
 80034cc:	d486      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034ce:	3701      	adds	r7, #1
 80034d0:	039d      	lsls	r5, r3, #14
 80034d2:	d483      	bmi.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034d4:	2580      	movs	r5, #128	; 0x80
 80034d6:	02ed      	lsls	r5, r5, #11
 80034d8:	001f      	movs	r7, r3
 80034da:	402f      	ands	r7, r5
 80034dc:	422b      	tst	r3, r5
 80034de:	d100      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x16e>
 80034e0:	e77c      	b.n	80033dc <HAL_ADC_ConfigChannel+0x68>
 80034e2:	2712      	movs	r7, #18
 80034e4:	e77a      	b.n	80033dc <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034e6:	0212      	lsls	r2, r2, #8
 80034e8:	d500      	bpl.n	80034ec <HAL_ADC_ConfigChannel+0x178>
 80034ea:	e75d      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034ec:	4938      	ldr	r1, [pc, #224]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <HAL_ADC_ConfigChannel+0x26c>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	432b      	orrs	r3, r5
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	0412      	lsls	r2, r2, #16
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <HAL_ADC_ConfigChannel+0x270>)
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	4939      	ldr	r1, [pc, #228]	; (80035e8 <HAL_ADC_ConfigChannel+0x274>)
 8003504:	f7fc fe1c 	bl	8000140 <__udivsi3>
 8003508:	3001      	adds	r0, #1
 800350a:	0043      	lsls	r3, r0, #1
 800350c:	181b      	adds	r3, r3, r0
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8003512:	9b01      	ldr	r3, [sp, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d055      	beq.n	80035c4 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8003518:	9b01      	ldr	r3, [sp, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800351e:	9b01      	ldr	r3, [sp, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f9      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003524:	2000      	movs	r0, #0
 8003526:	e73f      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
 8003528:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800352a:	01d2      	lsls	r2, r2, #7
 800352c:	d500      	bpl.n	8003530 <HAL_ADC_ConfigChannel+0x1bc>
 800352e:	e73b      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
 8003530:	4927      	ldr	r1, [pc, #156]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 8003532:	680b      	ldr	r3, [r1, #0]
 8003534:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <HAL_ADC_ConfigChannel+0x26c>)
 8003536:	4013      	ands	r3, r2
 8003538:	432b      	orrs	r3, r5
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	0452      	lsls	r2, r2, #17
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
}
 8003542:	e731      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003544:	2304      	movs	r3, #4
 8003546:	439d      	bics	r5, r3
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	429d      	cmp	r5, r3
 800354e:	d01c      	beq.n	800358a <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003550:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003552:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003554:	2b00      	cmp	r3, #0
 8003556:	db00      	blt.n	800355a <HAL_ADC_ConfigChannel+0x1e6>
 8003558:	e726      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800355a:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 800355c:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355e:	491d      	ldr	r1, [pc, #116]	; (80035d4 <HAL_ADC_ConfigChannel+0x260>)
 8003560:	428b      	cmp	r3, r1
 8003562:	d019      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003564:	491c      	ldr	r1, [pc, #112]	; (80035d8 <HAL_ADC_ConfigChannel+0x264>)
 8003566:	428b      	cmp	r3, r1
 8003568:	d021      	beq.n	80035ae <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800356a:	491c      	ldr	r1, [pc, #112]	; (80035dc <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356c:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800356e:	428b      	cmp	r3, r1
 8003570:	d000      	beq.n	8003574 <HAL_ADC_ConfigChannel+0x200>
 8003572:	e719      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003574:	4816      	ldr	r0, [pc, #88]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 8003576:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003578:	23c0      	movs	r3, #192	; 0xc0
 800357a:	045b      	lsls	r3, r3, #17
 800357c:	4013      	ands	r3, r2
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <HAL_ADC_ConfigChannel+0x26c>)
 8003580:	400a      	ands	r2, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003586:	2000      	movs	r0, #0
}
 8003588:	e70e      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800358a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800358c:	680b      	ldr	r3, [r1, #0]
 800358e:	035b      	lsls	r3, r3, #13
 8003590:	0b5b      	lsrs	r3, r3, #13
 8003592:	439a      	bics	r2, r3
 8003594:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003596:	e7db      	b.n	8003550 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003598:	480d      	ldr	r0, [pc, #52]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 800359a:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800359c:	23a0      	movs	r3, #160	; 0xa0
 800359e:	045b      	lsls	r3, r3, #17
 80035a0:	4013      	ands	r3, r2
 80035a2:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <HAL_ADC_ConfigChannel+0x26c>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035aa:	2000      	movs	r0, #0
}
 80035ac:	e6fc      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035ae:	4808      	ldr	r0, [pc, #32]	; (80035d0 <HAL_ADC_ConfigChannel+0x25c>)
 80035b0:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b2:	23c0      	movs	r3, #192	; 0xc0
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	4013      	ands	r3, r2
 80035b8:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_ADC_ConfigChannel+0x26c>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	4313      	orrs	r3, r2
 80035be:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c0:	2000      	movs	r0, #0
}
 80035c2:	e6f1      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
 80035c4:	2000      	movs	r0, #0
 80035c6:	e6ef      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80035c8:	2002      	movs	r0, #2
 80035ca:	e6f0      	b.n	80033ae <HAL_ADC_ConfigChannel+0x3a>
 80035cc:	07ffff00 	.word	0x07ffff00
 80035d0:	40012708 	.word	0x40012708
 80035d4:	b0001000 	.word	0xb0001000
 80035d8:	b8004000 	.word	0xb8004000
 80035dc:	b4002000 	.word	0xb4002000
 80035e0:	fe3fffff 	.word	0xfe3fffff
 80035e4:	20000000 	.word	0x20000000
 80035e8:	00030d40 	.word	0x00030d40

080035ec <ADC_Enable>:
{
 80035ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ee:	b083      	sub	sp, #12
 80035f0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f8:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80035fa:	2000      	movs	r0, #0
 80035fc:	07d2      	lsls	r2, r2, #31
 80035fe:	d434      	bmi.n	800366a <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	4a2c      	ldr	r2, [pc, #176]	; (80036b4 <ADC_Enable+0xc8>)
 8003604:	4211      	tst	r1, r2
 8003606:	d127      	bne.n	8003658 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	492b      	ldr	r1, [pc, #172]	; (80036b8 <ADC_Enable+0xcc>)
 800360c:	400a      	ands	r2, r1
 800360e:	2101      	movs	r1, #1
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <ADC_Enable+0xd0>)
 8003616:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	d50f      	bpl.n	800363c <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <ADC_Enable+0xd4>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	4928      	ldr	r1, [pc, #160]	; (80036c4 <ADC_Enable+0xd8>)
 8003622:	f7fc fd8d 	bl	8000140 <__udivsi3>
 8003626:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003628:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800362a:	9b01      	ldr	r3, [sp, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <ADC_Enable+0x50>
        wait_loop_index--;
 8003630:	9b01      	ldr	r3, [sp, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f9      	bne.n	8003630 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800363c:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 800363e:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003640:	2b01      	cmp	r3, #1
 8003642:	d012      	beq.n	800366a <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 8003644:	f7ff fd02 	bl	800304c <HAL_GetTick>
 8003648:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	07d2      	lsls	r2, r2, #31
 8003650:	d42d      	bmi.n	80036ae <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003652:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8003654:	4f18      	ldr	r7, [pc, #96]	; (80036b8 <ADC_Enable+0xcc>)
 8003656:	e00e      	b.n	8003676 <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800365a:	2210      	movs	r2, #16
 800365c:	4313      	orrs	r3, r2
 800365e:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003660:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003662:	3a0f      	subs	r2, #15
 8003664:	4313      	orrs	r3, r2
 8003666:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8003668:	3001      	adds	r0, #1
}
 800366a:	b003      	add	sp, #12
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4215      	tst	r5, r2
 8003674:	d119      	bne.n	80036aa <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	4215      	tst	r5, r2
 800367a:	d103      	bne.n	8003684 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	403a      	ands	r2, r7
 8003680:	432a      	orrs	r2, r5
 8003682:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003684:	f7ff fce2 	bl	800304c <HAL_GetTick>
 8003688:	1b80      	subs	r0, r0, r6
 800368a:	2802      	cmp	r0, #2
 800368c:	d9ef      	bls.n	800366e <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	421d      	tst	r5, r3
 8003694:	d1eb      	bne.n	800366e <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003698:	2210      	movs	r2, #16
 800369a:	4313      	orrs	r3, r2
 800369c:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036a0:	3a0f      	subs	r2, #15
 80036a2:	4313      	orrs	r3, r2
 80036a4:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80036a6:	2001      	movs	r0, #1
 80036a8:	e7df      	b.n	800366a <ADC_Enable+0x7e>
  return HAL_OK;
 80036aa:	2000      	movs	r0, #0
 80036ac:	e7dd      	b.n	800366a <ADC_Enable+0x7e>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e7db      	b.n	800366a <ADC_Enable+0x7e>
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	80000017 	.word	0x80000017
 80036b8:	7fffffe8 	.word	0x7fffffe8
 80036bc:	40012708 	.word	0x40012708
 80036c0:	20000000 	.word	0x20000000
 80036c4:	00030d40 	.word	0x00030d40

080036c8 <HAL_ADC_Start_DMA>:
{
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	0004      	movs	r4, r0
 80036cc:	000d      	movs	r5, r1
 80036ce:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036d0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036d2:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 80036d4:	2002      	movs	r0, #2
 80036d6:	075b      	lsls	r3, r3, #29
 80036d8:	d41c      	bmi.n	8003714 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 80036da:	2354      	movs	r3, #84	; 0x54
 80036dc:	5ce3      	ldrb	r3, [r4, r3]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d044      	beq.n	800376c <HAL_ADC_Start_DMA+0xa4>
 80036e2:	2301      	movs	r3, #1
 80036e4:	2154      	movs	r1, #84	; 0x54
 80036e6:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80036e8:	68d1      	ldr	r1, [r2, #12]
 80036ea:	420b      	tst	r3, r1
 80036ec:	d10d      	bne.n	800370a <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036ee:	6893      	ldr	r3, [r2, #8]
 80036f0:	07db      	lsls	r3, r3, #31
 80036f2:	d505      	bpl.n	8003700 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 80036f4:	6893      	ldr	r3, [r2, #8]
 80036f6:	491e      	ldr	r1, [pc, #120]	; (8003770 <HAL_ADC_Start_DMA+0xa8>)
 80036f8:	400b      	ands	r3, r1
 80036fa:	2102      	movs	r1, #2
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	68d3      	ldr	r3, [r2, #12]
 8003704:	2101      	movs	r1, #1
 8003706:	430b      	orrs	r3, r1
 8003708:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800370a:	0020      	movs	r0, r4
 800370c:	f7ff ff6e 	bl	80035ec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003710:	2800      	cmp	r0, #0
 8003712:	d000      	beq.n	8003716 <HAL_ADC_Start_DMA+0x4e>
}
 8003714:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003716:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <HAL_ADC_Start_DMA+0xac>)
 800371a:	401a      	ands	r2, r3
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4313      	orrs	r3, r2
 8003722:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003724:	2300      	movs	r3, #0
 8003726:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003728:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800372a:	4913      	ldr	r1, [pc, #76]	; (8003778 <HAL_ADC_Start_DMA+0xb0>)
 800372c:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800372e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003730:	4912      	ldr	r1, [pc, #72]	; (800377c <HAL_ADC_Start_DMA+0xb4>)
 8003732:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003734:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003736:	4912      	ldr	r1, [pc, #72]	; (8003780 <HAL_ADC_Start_DMA+0xb8>)
 8003738:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800373a:	6822      	ldr	r2, [r4, #0]
 800373c:	211c      	movs	r1, #28
 800373e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003740:	2254      	movs	r2, #84	; 0x54
 8003742:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003744:	6822      	ldr	r2, [r4, #0]
 8003746:	6853      	ldr	r3, [r2, #4]
 8003748:	390c      	subs	r1, #12
 800374a:	430b      	orrs	r3, r1
 800374c:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	3140      	adds	r1, #64	; 0x40
 8003752:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003754:	0033      	movs	r3, r6
 8003756:	002a      	movs	r2, r5
 8003758:	f000 f8f4 	bl	8003944 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800375c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800375e:	6893      	ldr	r3, [r2, #8]
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_ADC_Start_DMA+0xa8>)
 8003762:	400b      	ands	r3, r1
 8003764:	2104      	movs	r1, #4
 8003766:	430b      	orrs	r3, r1
 8003768:	6093      	str	r3, [r2, #8]
}
 800376a:	e7d3      	b.n	8003714 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 800376c:	2002      	movs	r0, #2
 800376e:	e7d1      	b.n	8003714 <HAL_ADC_Start_DMA+0x4c>
 8003770:	7fffffe8 	.word	0x7fffffe8
 8003774:	fffff0fe 	.word	0xfffff0fe
 8003778:	080032f5 	.word	0x080032f5
 800377c:	080032cd 	.word	0x080032cd
 8003780:	080032d9 	.word	0x080032d9

08003784 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003784:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003786:	2800      	cmp	r0, #0
 8003788:	db14      	blt.n	80037b4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800378a:	0884      	lsrs	r4, r0, #2
 800378c:	00a4      	lsls	r4, r4, #2
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_NVIC_SetPriority+0x5c>)
 8003790:	469c      	mov	ip, r3
 8003792:	4464      	add	r4, ip
 8003794:	26c0      	movs	r6, #192	; 0xc0
 8003796:	00b6      	lsls	r6, r6, #2
 8003798:	59a5      	ldr	r5, [r4, r6]
 800379a:	2203      	movs	r2, #3
 800379c:	4002      	ands	r2, r0
 800379e:	00d2      	lsls	r2, r2, #3
 80037a0:	23ff      	movs	r3, #255	; 0xff
 80037a2:	0018      	movs	r0, r3
 80037a4:	4090      	lsls	r0, r2
 80037a6:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037a8:	0189      	lsls	r1, r1, #6
 80037aa:	400b      	ands	r3, r1
 80037ac:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ae:	432b      	orrs	r3, r5
 80037b0:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b4:	230f      	movs	r3, #15
 80037b6:	4003      	ands	r3, r0
 80037b8:	3b08      	subs	r3, #8
 80037ba:	089b      	lsrs	r3, r3, #2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <HAL_NVIC_SetPriority+0x60>)
 80037c0:	4694      	mov	ip, r2
 80037c2:	4463      	add	r3, ip
 80037c4:	69dc      	ldr	r4, [r3, #28]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4010      	ands	r0, r2
 80037ca:	00c0      	lsls	r0, r0, #3
 80037cc:	32fc      	adds	r2, #252	; 0xfc
 80037ce:	0015      	movs	r5, r2
 80037d0:	4085      	lsls	r5, r0
 80037d2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037d4:	0189      	lsls	r1, r1, #6
 80037d6:	400a      	ands	r2, r1
 80037d8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037da:	4322      	orrs	r2, r4
 80037dc:	61da      	str	r2, [r3, #28]
 80037de:	e7e8      	b.n	80037b2 <HAL_NVIC_SetPriority+0x2e>
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037e8:	2800      	cmp	r0, #0
 80037ea:	db05      	blt.n	80037f8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ec:	221f      	movs	r2, #31
 80037ee:	4002      	ands	r2, r0
 80037f0:	2301      	movs	r3, #1
 80037f2:	4093      	lsls	r3, r2
 80037f4:	4a01      	ldr	r2, [pc, #4]	; (80037fc <HAL_NVIC_EnableIRQ+0x14>)
 80037f6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037f8:	4770      	bx	lr
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	e000e100 	.word	0xe000e100

08003800 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003802:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003804:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8003806:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003808:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800380a:	2c00      	cmp	r4, #0
 800380c:	d002      	beq.n	8003814 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800380e:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003810:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003812:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003814:	4e0b      	ldr	r6, [pc, #44]	; (8003844 <DMA_SetConfig+0x44>)
 8003816:	6877      	ldr	r7, [r6, #4]
 8003818:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800381a:	241c      	movs	r4, #28
 800381c:	4025      	ands	r5, r4
 800381e:	3c1b      	subs	r4, #27
 8003820:	40ac      	lsls	r4, r5
 8003822:	433c      	orrs	r4, r7
 8003824:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003826:	6804      	ldr	r4, [r0, #0]
 8003828:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382a:	6883      	ldr	r3, [r0, #8]
 800382c:	2b10      	cmp	r3, #16
 800382e:	d004      	beq.n	800383a <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003830:	6803      	ldr	r3, [r0, #0]
 8003832:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003834:	6803      	ldr	r3, [r0, #0]
 8003836:	60da      	str	r2, [r3, #12]
  }
}
 8003838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 800383a:	6803      	ldr	r3, [r0, #0]
 800383c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800383e:	6803      	ldr	r3, [r0, #0]
 8003840:	60d9      	str	r1, [r3, #12]
 8003842:	e7f9      	b.n	8003838 <DMA_SetConfig+0x38>
 8003844:	40020000 	.word	0x40020000

08003848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003848:	b510      	push	{r4, lr}
 800384a:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800384c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	4a08      	ldr	r2, [pc, #32]	; (8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8003852:	4694      	mov	ip, r2
 8003854:	4463      	add	r3, ip
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800385a:	7800      	ldrb	r0, [r0, #0]
 800385c:	3808      	subs	r0, #8
 800385e:	2114      	movs	r1, #20
 8003860:	f7fc fc6e 	bl	8000140 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8003866:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003868:	231f      	movs	r3, #31
 800386a:	4018      	ands	r0, r3
 800386c:	3b1e      	subs	r3, #30
 800386e:	4083      	lsls	r3, r0
 8003870:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8003872:	bd10      	pop	{r4, pc}
 8003874:	10008200 	.word	0x10008200
 8003878:	40020880 	.word	0x40020880

0800387c <HAL_DMA_Init>:
{
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8003880:	d055      	beq.n	800392e <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003882:	6805      	ldr	r5, [r0, #0]
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_DMA_Init+0xb8>)
 8003886:	18e8      	adds	r0, r5, r3
 8003888:	2114      	movs	r1, #20
 800388a:	f7fc fc59 	bl	8000140 <__udivsi3>
 800388e:	0080      	lsls	r0, r0, #2
 8003890:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003892:	2325      	movs	r3, #37	; 0x25
 8003894:	2202      	movs	r2, #2
 8003896:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	4a27      	ldr	r2, [pc, #156]	; (8003938 <HAL_DMA_Init+0xbc>)
 800389c:	4013      	ands	r3, r2
 800389e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	6811      	ldr	r1, [r2, #0]
 80038a4:	68a3      	ldr	r3, [r4, #8]
 80038a6:	68e0      	ldr	r0, [r4, #12]
 80038a8:	4303      	orrs	r3, r0
 80038aa:	6920      	ldr	r0, [r4, #16]
 80038ac:	4303      	orrs	r3, r0
 80038ae:	6960      	ldr	r0, [r4, #20]
 80038b0:	4303      	orrs	r3, r0
 80038b2:	69a0      	ldr	r0, [r4, #24]
 80038b4:	4303      	orrs	r3, r0
 80038b6:	69e0      	ldr	r0, [r4, #28]
 80038b8:	4303      	orrs	r3, r0
 80038ba:	6a20      	ldr	r0, [r4, #32]
 80038bc:	4303      	orrs	r3, r0
 80038be:	430b      	orrs	r3, r1
 80038c0:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038c2:	0020      	movs	r0, r4
 80038c4:	f7ff ffc0 	bl	8003848 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	01db      	lsls	r3, r3, #7
 80038cc:	68a2      	ldr	r2, [r4, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d018      	beq.n	8003904 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	213f      	movs	r1, #63	; 0x3f
 80038d8:	400b      	ands	r3, r1
 80038da:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80038de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80038e0:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038e2:	6863      	ldr	r3, [r4, #4]
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	2a03      	cmp	r2, #3
 80038e8:	d90f      	bls.n	800390a <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80038ee:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038f0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80038f6:	2225      	movs	r2, #37	; 0x25
 80038f8:	2101      	movs	r1, #1
 80038fa:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80038fc:	3a01      	subs	r2, #1
 80038fe:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003900:	2000      	movs	r0, #0
}
 8003902:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003904:	2300      	movs	r3, #0
 8003906:	6063      	str	r3, [r4, #4]
 8003908:	e7e3      	b.n	80038d2 <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800390a:	223f      	movs	r2, #63	; 0x3f
 800390c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800390e:	4a0b      	ldr	r2, [pc, #44]	; (800393c <HAL_DMA_Init+0xc0>)
 8003910:	189a      	adds	r2, r3, r2
 8003912:	0092      	lsls	r2, r2, #2
 8003914:	6522      	str	r2, [r4, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003916:	490a      	ldr	r1, [pc, #40]	; (8003940 <HAL_DMA_Init+0xc4>)
 8003918:	6561      	str	r1, [r4, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800391a:	3b01      	subs	r3, #1
 800391c:	2101      	movs	r1, #1
 800391e:	4099      	lsls	r1, r3
 8003920:	65a1      	str	r1, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003926:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003928:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	e7e1      	b.n	80038f2 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
 8003930:	e7e7      	b.n	8003902 <HAL_DMA_Init+0x86>
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	bffdfff8 	.word	0xbffdfff8
 8003938:	ffff800f 	.word	0xffff800f
 800393c:	1000823f 	.word	0x1000823f
 8003940:	40020940 	.word	0x40020940

08003944 <HAL_DMA_Start_IT>:
{
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003948:	2024      	movs	r0, #36	; 0x24
 800394a:	5c20      	ldrb	r0, [r4, r0]
 800394c:	2801      	cmp	r0, #1
 800394e:	d045      	beq.n	80039dc <HAL_DMA_Start_IT+0x98>
 8003950:	2024      	movs	r0, #36	; 0x24
 8003952:	2501      	movs	r5, #1
 8003954:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8003956:	3001      	adds	r0, #1
 8003958:	5c20      	ldrb	r0, [r4, r0]
 800395a:	2801      	cmp	r0, #1
 800395c:	d006      	beq.n	800396c <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003962:	3b5c      	subs	r3, #92	; 0x5c
 8003964:	2200      	movs	r2, #0
 8003966:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8003968:	2001      	movs	r0, #1
}
 800396a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800396c:	3024      	adds	r0, #36	; 0x24
 800396e:	3501      	adds	r5, #1
 8003970:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003972:	2000      	movs	r0, #0
 8003974:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003976:	6825      	ldr	r5, [r4, #0]
 8003978:	6828      	ldr	r0, [r5, #0]
 800397a:	2601      	movs	r6, #1
 800397c:	43b0      	bics	r0, r6
 800397e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003980:	0020      	movs	r0, r4
 8003982:	f7ff ff3d 	bl	8003800 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01c      	beq.n	80039c6 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	210e      	movs	r1, #14
 8003992:	430b      	orrs	r3, r1
 8003994:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003996:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	03db      	lsls	r3, r3, #15
 800399c:	d504      	bpl.n	80039a8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800399e:	6811      	ldr	r1, [r2, #0]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80039a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	0052      	lsls	r2, r2, #1
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80039b8:	6822      	ldr	r2, [r4, #0]
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	430b      	orrs	r3, r1
 80039c0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2000      	movs	r0, #0
 80039c4:	e7d1      	b.n	800396a <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	6813      	ldr	r3, [r2, #0]
 80039ca:	2104      	movs	r1, #4
 80039cc:	438b      	bics	r3, r1
 80039ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039d0:	6822      	ldr	r2, [r4, #0]
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	3106      	adds	r1, #6
 80039d6:	430b      	orrs	r3, r1
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e7dc      	b.n	8003996 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80039dc:	2002      	movs	r0, #2
 80039de:	e7c4      	b.n	800396a <HAL_DMA_Start_IT+0x26>

080039e0 <HAL_DMA_Abort>:
{
 80039e0:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d036      	beq.n	8003a54 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039e6:	2325      	movs	r3, #37	; 0x25
 80039e8:	5cc3      	ldrb	r3, [r0, r3]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d006      	beq.n	80039fc <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ee:	2304      	movs	r3, #4
 80039f0:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80039f2:	3320      	adds	r3, #32
 80039f4:	2200      	movs	r2, #0
 80039f6:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80039f8:	2001      	movs	r0, #1
}
 80039fa:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fc:	6802      	ldr	r2, [r0, #0]
 80039fe:	6813      	ldr	r3, [r2, #0]
 8003a00:	210e      	movs	r1, #14
 8003a02:	438b      	bics	r3, r1
 8003a04:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a08:	6813      	ldr	r3, [r2, #0]
 8003a0a:	4913      	ldr	r1, [pc, #76]	; (8003a58 <HAL_DMA_Abort+0x78>)
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a10:	6801      	ldr	r1, [r0, #0]
 8003a12:	680a      	ldr	r2, [r1, #0]
 8003a14:	2301      	movs	r3, #1
 8003a16:	439a      	bics	r2, r3
 8003a18:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003a1a:	4910      	ldr	r1, [pc, #64]	; (8003a5c <HAL_DMA_Abort+0x7c>)
 8003a1c:	684c      	ldr	r4, [r1, #4]
 8003a1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003a20:	251c      	movs	r5, #28
 8003a22:	402a      	ands	r2, r5
 8003a24:	4093      	lsls	r3, r2
 8003a26:	4323      	orrs	r3, r4
 8003a28:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a2a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003a2c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003a2e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003a30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4907      	ldr	r1, [pc, #28]	; (8003a58 <HAL_DMA_Abort+0x78>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a40:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003a42:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a44:	2325      	movs	r3, #37	; 0x25
 8003a46:	2201      	movs	r2, #1
 8003a48:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003a50:	2000      	movs	r0, #0
 8003a52:	e7d2      	b.n	80039fa <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8003a54:	2001      	movs	r0, #1
 8003a56:	e7d0      	b.n	80039fa <HAL_DMA_Abort+0x1a>
 8003a58:	fffffeff 	.word	0xfffffeff
 8003a5c:	40020000 	.word	0x40020000

08003a60 <HAL_DMA_Abort_IT>:
{
 8003a60:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a62:	2325      	movs	r3, #37	; 0x25
 8003a64:	5cc3      	ldrb	r3, [r0, r3]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d003      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
}
 8003a70:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a72:	6802      	ldr	r2, [r0, #0]
 8003a74:	6813      	ldr	r3, [r2, #0]
 8003a76:	210e      	movs	r1, #14
 8003a78:	438b      	bics	r3, r1
 8003a7a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a7c:	6801      	ldr	r1, [r0, #0]
 8003a7e:	680a      	ldr	r2, [r1, #0]
 8003a80:	2301      	movs	r3, #1
 8003a82:	439a      	bics	r2, r3
 8003a84:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a86:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003a88:	680a      	ldr	r2, [r1, #0]
 8003a8a:	4c13      	ldr	r4, [pc, #76]	; (8003ad8 <HAL_DMA_Abort_IT+0x78>)
 8003a8c:	4022      	ands	r2, r4
 8003a8e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003a90:	4912      	ldr	r1, [pc, #72]	; (8003adc <HAL_DMA_Abort_IT+0x7c>)
 8003a92:	684c      	ldr	r4, [r1, #4]
 8003a94:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003a96:	251c      	movs	r5, #28
 8003a98:	402a      	ands	r2, r5
 8003a9a:	4093      	lsls	r3, r2
 8003a9c:	4323      	orrs	r3, r4
 8003a9e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003aa2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003aa4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003aa6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_DMA_Abort_IT+0x78>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ab4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003ab6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003ab8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003aba:	2325      	movs	r3, #37	; 0x25
 8003abc:	2201      	movs	r2, #1
 8003abe:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8003ac6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8003acc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e7ce      	b.n	8003a70 <HAL_DMA_Abort_IT+0x10>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	e7cc      	b.n	8003a70 <HAL_DMA_Abort_IT+0x10>
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	fffffeff 	.word	0xfffffeff
 8003adc:	40020000 	.word	0x40020000

08003ae0 <HAL_DMA_IRQHandler>:
{
 8003ae0:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_DMA_IRQHandler+0xc8>)
 8003ae4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003ae6:	6804      	ldr	r4, [r0, #0]
 8003ae8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003aea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003aec:	221c      	movs	r2, #28
 8003aee:	4013      	ands	r3, r2
 8003af0:	3a18      	subs	r2, #24
 8003af2:	409a      	lsls	r2, r3
 8003af4:	4211      	tst	r1, r2
 8003af6:	d016      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x46>
 8003af8:	076a      	lsls	r2, r5, #29
 8003afa:	d514      	bpl.n	8003b26 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	069b      	lsls	r3, r3, #26
 8003b00:	d403      	bmi.n	8003b0a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	2204      	movs	r2, #4
 8003b06:	4393      	bics	r3, r2
 8003b08:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003b0a:	4927      	ldr	r1, [pc, #156]	; (8003ba8 <HAL_DMA_IRQHandler+0xc8>)
 8003b0c:	684c      	ldr	r4, [r1, #4]
 8003b0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003b10:	231c      	movs	r3, #28
 8003b12:	401a      	ands	r2, r3
 8003b14:	3b18      	subs	r3, #24
 8003b16:	4093      	lsls	r3, r2
 8003b18:	4323      	orrs	r3, r4
 8003b1a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003b1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d000      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8003b22:	4798      	blx	r3
}
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b26:	2202      	movs	r2, #2
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	4211      	tst	r1, r2
 8003b2c:	d01c      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x88>
 8003b2e:	07aa      	lsls	r2, r5, #30
 8003b30:	d51a      	bpl.n	8003b68 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	069b      	lsls	r3, r3, #26
 8003b36:	d406      	bmi.n	8003b46 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	220a      	movs	r2, #10
 8003b3c:	4393      	bics	r3, r2
 8003b3e:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003b40:	2325      	movs	r3, #37	; 0x25
 8003b42:	3a09      	subs	r2, #9
 8003b44:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b46:	4918      	ldr	r1, [pc, #96]	; (8003ba8 <HAL_DMA_IRQHandler+0xc8>)
 8003b48:	684c      	ldr	r4, [r1, #4]
 8003b4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003b4c:	231c      	movs	r3, #28
 8003b4e:	401a      	ands	r2, r3
 8003b50:	3b1a      	subs	r3, #26
 8003b52:	4093      	lsls	r3, r2
 8003b54:	4323      	orrs	r3, r4
 8003b56:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8003b58:	2324      	movs	r3, #36	; 0x24
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8003b5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0df      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8003b64:	4798      	blx	r3
 8003b66:	e7dd      	b.n	8003b24 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b68:	2208      	movs	r2, #8
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	4211      	tst	r1, r2
 8003b6e:	d0d9      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x44>
 8003b70:	072d      	lsls	r5, r5, #28
 8003b72:	d5d7      	bpl.n	8003b24 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	220e      	movs	r2, #14
 8003b78:	4393      	bics	r3, r2
 8003b7a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b7c:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_DMA_IRQHandler+0xc8>)
 8003b7e:	684c      	ldr	r4, [r1, #4]
 8003b80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003b82:	231c      	movs	r3, #28
 8003b84:	401a      	ands	r2, r3
 8003b86:	3b1b      	subs	r3, #27
 8003b88:	001d      	movs	r5, r3
 8003b8a:	4095      	lsls	r5, r2
 8003b8c:	002a      	movs	r2, r5
 8003b8e:	4322      	orrs	r2, r4
 8003b90:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b92:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003b94:	2225      	movs	r2, #37	; 0x25
 8003b96:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8003b98:	3323      	adds	r3, #35	; 0x23
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003b9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0bf      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8003ba4:	4798      	blx	r3
  return;
 8003ba6:	e7bd      	b.n	8003b24 <HAL_DMA_IRQHandler+0x44>
 8003ba8:	40020000 	.word	0x40020000

08003bac <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bac:	b510      	push	{r4, lr}
 8003bae:	0004      	movs	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003bb0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003bb6:	421a      	tst	r2, r3
 8003bb8:	d010      	beq.n	8003bdc <HAL_DMAEx_MUX_IRQHandler+0x30>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	4914      	ldr	r1, [pc, #80]	; (8003c10 <HAL_DMAEx_MUX_IRQHandler+0x64>)
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003bc6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003bc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003bca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	63c3      	str	r3, [r0, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d000      	beq.n	8003bdc <HAL_DMAEx_MUX_IRQHandler+0x30>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bda:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003bdc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d015      	beq.n	8003c0e <HAL_DMAEx_MUX_IRQHandler+0x62>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003be2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003be8:	4211      	tst	r1, r2
 8003bea:	d010      	beq.n	8003c0e <HAL_DMAEx_MUX_IRQHandler+0x62>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4908      	ldr	r1, [pc, #32]	; (8003c10 <HAL_DMAEx_MUX_IRQHandler+0x64>)
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003bf6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003bfa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4313      	orrs	r3, r2
 8003c02:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_DMAEx_MUX_IRQHandler+0x62>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c0a:	0020      	movs	r0, r4
 8003c0c:	4798      	blx	r3
      }
    }
  }
}
 8003c0e:	bd10      	pop	{r4, pc}
 8003c10:	fffffeff 	.word	0xfffffeff

08003c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c16:	46de      	mov	lr, fp
 8003c18:	4657      	mov	r7, sl
 8003c1a:	464e      	mov	r6, r9
 8003c1c:	4645      	mov	r5, r8
 8003c1e:	b5e0      	push	{r5, r6, r7, lr}
 8003c20:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c22:	680e      	ldr	r6, [r1, #0]
 8003c24:	2e00      	cmp	r6, #0
 8003c26:	d100      	bne.n	8003c2a <HAL_GPIO_Init+0x16>
 8003c28:	e0d1      	b.n	8003dce <HAL_GPIO_Init+0x1ba>
 8003c2a:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003c2c:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c2e:	2401      	movs	r4, #1
 8003c30:	46a4      	mov	ip, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c32:	3402      	adds	r4, #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c34:	25c0      	movs	r5, #192	; 0xc0
 8003c36:	02ad      	lsls	r5, r5, #10
 8003c38:	46a9      	mov	r9, r5
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c3a:	250f      	movs	r5, #15
 8003c3c:	46aa      	mov	sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c3e:	4d67      	ldr	r5, [pc, #412]	; (8003ddc <HAL_GPIO_Init+0x1c8>)
 8003c40:	1945      	adds	r5, r0, r5
 8003c42:	426f      	negs	r7, r5
 8003c44:	417d      	adcs	r5, r7
 8003c46:	426d      	negs	r5, r5
 8003c48:	9503      	str	r5, [sp, #12]
 8003c4a:	e04e      	b.n	8003cea <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8003c4c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c4e:	0027      	movs	r7, r4
 8003c50:	4097      	lsls	r7, r2
 8003c52:	43be      	bics	r6, r7
 8003c54:	46b0      	mov	r8, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c56:	68ce      	ldr	r6, [r1, #12]
 8003c58:	4096      	lsls	r6, r2
 8003c5a:	4647      	mov	r7, r8
 8003c5c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8003c5e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003c60:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c62:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c64:	684d      	ldr	r5, [r1, #4]
 8003c66:	092d      	lsrs	r5, r5, #4
 8003c68:	4667      	mov	r7, ip
 8003c6a:	403d      	ands	r5, r7
 8003c6c:	409d      	lsls	r5, r3
 8003c6e:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8003c70:	6045      	str	r5, [r0, #4]
 8003c72:	e046      	b.n	8003d02 <HAL_GPIO_Init+0xee>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c74:	2600      	movs	r6, #0
 8003c76:	465f      	mov	r7, fp
 8003c78:	40be      	lsls	r6, r7
 8003c7a:	4647      	mov	r7, r8
 8003c7c:	433e      	orrs	r6, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8003c7e:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c80:	4d57      	ldr	r5, [pc, #348]	; (8003de0 <HAL_GPIO_Init+0x1cc>)
 8003c82:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003c84:	9e01      	ldr	r6, [sp, #4]
 8003c86:	43f6      	mvns	r6, r6
 8003c88:	9602      	str	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c8a:	684f      	ldr	r7, [r1, #4]
 8003c8c:	02fe      	lsls	r6, r7, #11
 8003c8e:	d500      	bpl.n	8003c92 <HAL_GPIO_Init+0x7e>
 8003c90:	e091      	b.n	8003db6 <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 8003c92:	9e02      	ldr	r6, [sp, #8]
 8003c94:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003c96:	4f52      	ldr	r7, [pc, #328]	; (8003de0 <HAL_GPIO_Init+0x1cc>)
 8003c98:	603d      	str	r5, [r7, #0]

        temp = EXTI->FTSR1;
 8003c9a:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c9c:	684f      	ldr	r7, [r1, #4]
 8003c9e:	02be      	lsls	r6, r7, #10
 8003ca0:	d500      	bpl.n	8003ca4 <HAL_GPIO_Init+0x90>
 8003ca2:	e08b      	b.n	8003dbc <HAL_GPIO_Init+0x1a8>
        temp &= ~(iocurrent);
 8003ca4:	9e02      	ldr	r6, [sp, #8]
 8003ca6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003ca8:	4f4d      	ldr	r7, [pc, #308]	; (8003de0 <HAL_GPIO_Init+0x1cc>)
 8003caa:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cac:	2584      	movs	r5, #132	; 0x84
 8003cae:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cb0:	684f      	ldr	r7, [r1, #4]
 8003cb2:	03be      	lsls	r6, r7, #14
 8003cb4:	d500      	bpl.n	8003cb8 <HAL_GPIO_Init+0xa4>
 8003cb6:	e084      	b.n	8003dc2 <HAL_GPIO_Init+0x1ae>
        temp &= ~(iocurrent);
 8003cb8:	9e02      	ldr	r6, [sp, #8]
 8003cba:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003cbc:	4f48      	ldr	r7, [pc, #288]	; (8003de0 <HAL_GPIO_Init+0x1cc>)
 8003cbe:	46b8      	mov	r8, r7
 8003cc0:	2784      	movs	r7, #132	; 0x84
 8003cc2:	46bb      	mov	fp, r7
 8003cc4:	4647      	mov	r7, r8
 8003cc6:	465e      	mov	r6, fp
 8003cc8:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 8003cca:	2580      	movs	r5, #128	; 0x80
 8003ccc:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cce:	684e      	ldr	r6, [r1, #4]
 8003cd0:	03f6      	lsls	r6, r6, #15
 8003cd2:	d479      	bmi.n	8003dc8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(iocurrent);
 8003cd4:	9e02      	ldr	r6, [sp, #8]
 8003cd6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003cd8:	4f41      	ldr	r7, [pc, #260]	; (8003de0 <HAL_GPIO_Init+0x1cc>)
 8003cda:	2680      	movs	r6, #128	; 0x80
 8003cdc:	51bd      	str	r5, [r7, r6]
      }
    }

    position++;
 8003cde:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ce0:	680e      	ldr	r6, [r1, #0]
 8003ce2:	3202      	adds	r2, #2
 8003ce4:	0035      	movs	r5, r6
 8003ce6:	40dd      	lsrs	r5, r3
 8003ce8:	d071      	beq.n	8003dce <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cea:	4665      	mov	r5, ip
 8003cec:	409d      	lsls	r5, r3
 8003cee:	0037      	movs	r7, r6
 8003cf0:	402f      	ands	r7, r5
 8003cf2:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0x00u)
 8003cf4:	422e      	tst	r6, r5
 8003cf6:	d0f2      	beq.n	8003cde <HAL_GPIO_Init+0xca>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cf8:	684e      	ldr	r6, [r1, #4]
 8003cfa:	4026      	ands	r6, r4
 8003cfc:	3e01      	subs	r6, #1
 8003cfe:	2e01      	cmp	r6, #1
 8003d00:	d9a4      	bls.n	8003c4c <HAL_GPIO_Init+0x38>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d02:	684d      	ldr	r5, [r1, #4]
 8003d04:	4025      	ands	r5, r4
 8003d06:	2d03      	cmp	r5, #3
 8003d08:	d023      	beq.n	8003d52 <HAL_GPIO_Init+0x13e>
        temp = GPIOx->PUPDR;
 8003d0a:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d0c:	0025      	movs	r5, r4
 8003d0e:	4095      	lsls	r5, r2
 8003d10:	43ae      	bics	r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d12:	688d      	ldr	r5, [r1, #8]
 8003d14:	4095      	lsls	r5, r2
 8003d16:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8003d18:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1a:	684d      	ldr	r5, [r1, #4]
 8003d1c:	4025      	ands	r5, r4
 8003d1e:	2d02      	cmp	r5, #2
 8003d20:	d117      	bne.n	8003d52 <HAL_GPIO_Init+0x13e>
        temp = GPIOx->AFR[position >> 3u];
 8003d22:	08dd      	lsrs	r5, r3, #3
 8003d24:	00ad      	lsls	r5, r5, #2
 8003d26:	1945      	adds	r5, r0, r5
 8003d28:	9502      	str	r5, [sp, #8]
 8003d2a:	6a2e      	ldr	r6, [r5, #32]
 8003d2c:	46b0      	mov	r8, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d2e:	2607      	movs	r6, #7
 8003d30:	401e      	ands	r6, r3
 8003d32:	00b6      	lsls	r6, r6, #2
 8003d34:	4657      	mov	r7, sl
 8003d36:	40b7      	lsls	r7, r6
 8003d38:	46bb      	mov	fp, r7
 8003d3a:	4647      	mov	r7, r8
 8003d3c:	465d      	mov	r5, fp
 8003d3e:	43af      	bics	r7, r5
 8003d40:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d42:	690d      	ldr	r5, [r1, #16]
 8003d44:	002f      	movs	r7, r5
 8003d46:	40b7      	lsls	r7, r6
 8003d48:	003e      	movs	r6, r7
 8003d4a:	4645      	mov	r5, r8
 8003d4c:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003d4e:	9d02      	ldr	r5, [sp, #8]
 8003d50:	622e      	str	r6, [r5, #32]
      temp = GPIOx->MODER;
 8003d52:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d54:	0025      	movs	r5, r4
 8003d56:	4095      	lsls	r5, r2
 8003d58:	43ae      	bics	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d5a:	684d      	ldr	r5, [r1, #4]
 8003d5c:	4025      	ands	r5, r4
 8003d5e:	4095      	lsls	r5, r2
 8003d60:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8003d62:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d64:	684d      	ldr	r5, [r1, #4]
 8003d66:	464e      	mov	r6, r9
 8003d68:	4235      	tst	r5, r6
 8003d6a:	d0b8      	beq.n	8003cde <HAL_GPIO_Init+0xca>
        temp = EXTI->EXTICR[position >> 2u];
 8003d6c:	089d      	lsrs	r5, r3, #2
 8003d6e:	00ad      	lsls	r5, r5, #2
 8003d70:	4e1b      	ldr	r6, [pc, #108]	; (8003de0 <HAL_GPIO_Init+0x1cc>)
 8003d72:	46b0      	mov	r8, r6
 8003d74:	4445      	add	r5, r8
 8003d76:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8003d78:	9602      	str	r6, [sp, #8]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d7a:	0027      	movs	r7, r4
 8003d7c:	401f      	ands	r7, r3
 8003d7e:	00ff      	lsls	r7, r7, #3
 8003d80:	46bb      	mov	fp, r7
 8003d82:	4657      	mov	r7, sl
 8003d84:	465e      	mov	r6, fp
 8003d86:	40b7      	lsls	r7, r6
 8003d88:	9e02      	ldr	r6, [sp, #8]
 8003d8a:	43be      	bics	r6, r7
 8003d8c:	46b0      	mov	r8, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d8e:	26a0      	movs	r6, #160	; 0xa0
 8003d90:	05f6      	lsls	r6, r6, #23
 8003d92:	42b0      	cmp	r0, r6
 8003d94:	d100      	bne.n	8003d98 <HAL_GPIO_Init+0x184>
 8003d96:	e76d      	b.n	8003c74 <HAL_GPIO_Init+0x60>
 8003d98:	4e12      	ldr	r6, [pc, #72]	; (8003de4 <HAL_GPIO_Init+0x1d0>)
 8003d9a:	42b0      	cmp	r0, r6
 8003d9c:	d007      	beq.n	8003dae <HAL_GPIO_Init+0x19a>
 8003d9e:	4e12      	ldr	r6, [pc, #72]	; (8003de8 <HAL_GPIO_Init+0x1d4>)
 8003da0:	42b0      	cmp	r0, r6
 8003da2:	d006      	beq.n	8003db2 <HAL_GPIO_Init+0x19e>
 8003da4:	9e03      	ldr	r6, [sp, #12]
 8003da6:	4667      	mov	r7, ip
 8003da8:	43be      	bics	r6, r7
 8003daa:	3605      	adds	r6, #5
 8003dac:	e763      	b.n	8003c76 <HAL_GPIO_Init+0x62>
 8003dae:	2601      	movs	r6, #1
 8003db0:	e761      	b.n	8003c76 <HAL_GPIO_Init+0x62>
 8003db2:	2602      	movs	r6, #2
 8003db4:	e75f      	b.n	8003c76 <HAL_GPIO_Init+0x62>
          temp |= iocurrent;
 8003db6:	9e01      	ldr	r6, [sp, #4]
 8003db8:	4335      	orrs	r5, r6
 8003dba:	e76c      	b.n	8003c96 <HAL_GPIO_Init+0x82>
          temp |= iocurrent;
 8003dbc:	9e01      	ldr	r6, [sp, #4]
 8003dbe:	4335      	orrs	r5, r6
 8003dc0:	e772      	b.n	8003ca8 <HAL_GPIO_Init+0x94>
          temp |= iocurrent;
 8003dc2:	9e01      	ldr	r6, [sp, #4]
 8003dc4:	4335      	orrs	r5, r6
 8003dc6:	e779      	b.n	8003cbc <HAL_GPIO_Init+0xa8>
          temp |= iocurrent;
 8003dc8:	9e01      	ldr	r6, [sp, #4]
 8003dca:	4335      	orrs	r5, r6
 8003dcc:	e784      	b.n	8003cd8 <HAL_GPIO_Init+0xc4>
  }
}
 8003dce:	b005      	add	sp, #20
 8003dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8003dd2:	46bb      	mov	fp, r7
 8003dd4:	46b2      	mov	sl, r6
 8003dd6:	46a9      	mov	r9, r5
 8003dd8:	46a0      	mov	r8, r4
 8003dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ddc:	affff400 	.word	0xaffff400
 8003de0:	40021800 	.word	0x40021800
 8003de4:	50000400 	.word	0x50000400
 8003de8:	50000800 	.word	0x50000800

08003dec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003df0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003df2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003df4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003df6:	e7fc      	b.n	8003df2 <HAL_GPIO_WritePin+0x6>

08003df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dfc:	d059      	beq.n	8003eb2 <HAL_I2C_Init+0xba>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfe:	2341      	movs	r3, #65	; 0x41
 8003e00:	5cc3      	ldrb	r3, [r0, r3]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d043      	beq.n	8003e8e <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	2341      	movs	r3, #65	; 0x41
 8003e08:	2224      	movs	r2, #36	; 0x24
 8003e0a:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	438b      	bics	r3, r1
 8003e14:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	6863      	ldr	r3, [r4, #4]
 8003e1a:	4927      	ldr	r1, [pc, #156]	; (8003eb8 <HAL_I2C_Init+0xc0>)
 8003e1c:	400b      	ands	r3, r1
 8003e1e:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e20:	6822      	ldr	r2, [r4, #0]
 8003e22:	6893      	ldr	r3, [r2, #8]
 8003e24:	4925      	ldr	r1, [pc, #148]	; (8003ebc <HAL_I2C_Init+0xc4>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e2a:	68e3      	ldr	r3, [r4, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d034      	beq.n	8003e9a <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	68a1      	ldr	r1, [r4, #8]
 8003e34:	2384      	movs	r3, #132	; 0x84
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e3c:	68e3      	ldr	r3, [r4, #12]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d032      	beq.n	8003ea8 <HAL_I2C_Init+0xb0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e42:	6822      	ldr	r2, [r4, #0]
 8003e44:	6851      	ldr	r1, [r2, #4]
 8003e46:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <HAL_I2C_Init+0xc8>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	68d3      	ldr	r3, [r2, #12]
 8003e50:	491a      	ldr	r1, [pc, #104]	; (8003ebc <HAL_I2C_Init+0xc4>)
 8003e52:	400b      	ands	r3, r1
 8003e54:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e56:	6821      	ldr	r1, [r4, #0]
 8003e58:	6923      	ldr	r3, [r4, #16]
 8003e5a:	6962      	ldr	r2, [r4, #20]
 8003e5c:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e5e:	69a2      	ldr	r2, [r4, #24]
 8003e60:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	69e3      	ldr	r3, [r4, #28]
 8003e6a:	6a21      	ldr	r1, [r4, #32]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e70:	6822      	ldr	r2, [r4, #0]
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	2241      	movs	r2, #65	; 0x41
 8003e80:	311f      	adds	r1, #31
 8003e82:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e84:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e86:	3201      	adds	r2, #1
 8003e88:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 8003e8a:	2000      	movs	r0, #0
}
 8003e8c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003e8e:	3340      	adds	r3, #64	; 0x40
 8003e90:	2200      	movs	r2, #0
 8003e92:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003e94:	f7fe fe08 	bl	8002aa8 <HAL_I2C_MspInit>
 8003e98:	e7b5      	b.n	8003e06 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e9a:	6822      	ldr	r2, [r4, #0]
 8003e9c:	68a1      	ldr	r1, [r4, #8]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6093      	str	r3, [r2, #8]
 8003ea6:	e7c9      	b.n	8003e3c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	e7c7      	b.n	8003e42 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	e7ea      	b.n	8003e8c <HAL_I2C_Init+0x94>
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	f0ffffff 	.word	0xf0ffffff
 8003ebc:	ffff7fff 	.word	0xffff7fff
 8003ec0:	02008000 	.word	0x02008000

08003ec4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec6:	2341      	movs	r3, #65	; 0x41
 8003ec8:	5cc3      	ldrb	r3, [r0, r3]
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d120      	bne.n	8003f10 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ece:	3320      	adds	r3, #32
 8003ed0:	5cc3      	ldrb	r3, [r0, r3]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d01e      	beq.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003ed6:	2440      	movs	r4, #64	; 0x40
 8003ed8:	2201      	movs	r2, #1
 8003eda:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003edc:	2541      	movs	r5, #65	; 0x41
 8003ede:	2324      	movs	r3, #36	; 0x24
 8003ee0:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee2:	6806      	ldr	r6, [r0, #0]
 8003ee4:	6833      	ldr	r3, [r6, #0]
 8003ee6:	4393      	bics	r3, r2
 8003ee8:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eea:	6806      	ldr	r6, [r0, #0]
 8003eec:	6833      	ldr	r3, [r6, #0]
 8003eee:	4f0a      	ldr	r7, [pc, #40]	; (8003f18 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8003ef0:	403b      	ands	r3, r7
 8003ef2:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ef4:	6806      	ldr	r6, [r0, #0]
 8003ef6:	6833      	ldr	r3, [r6, #0]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003efc:	6801      	ldr	r1, [r0, #0]
 8003efe:	680b      	ldr	r3, [r1, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	2320      	movs	r3, #32
 8003f06:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003f0c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003f10:	2002      	movs	r0, #2
 8003f12:	e7fc      	b.n	8003f0e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8003f14:	2002      	movs	r0, #2
 8003f16:	e7fa      	b.n	8003f0e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8003f18:	ffffefff 	.word	0xffffefff

08003f1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f1c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1e:	2341      	movs	r3, #65	; 0x41
 8003f20:	5cc3      	ldrb	r3, [r0, r3]
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d11e      	bne.n	8003f64 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f26:	3320      	adds	r3, #32
 8003f28:	5cc3      	ldrb	r3, [r0, r3]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d01c      	beq.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8003f2e:	2440      	movs	r4, #64	; 0x40
 8003f30:	2201      	movs	r2, #1
 8003f32:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f34:	2541      	movs	r5, #65	; 0x41
 8003f36:	2324      	movs	r3, #36	; 0x24
 8003f38:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f3a:	6806      	ldr	r6, [r0, #0]
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	4393      	bics	r3, r2
 8003f40:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f42:	6806      	ldr	r6, [r0, #0]
 8003f44:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f46:	4f09      	ldr	r7, [pc, #36]	; (8003f6c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8003f48:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f4a:	0209      	lsls	r1, r1, #8
 8003f4c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f4e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f50:	6801      	ldr	r1, [r0, #0]
 8003f52:	680b      	ldr	r3, [r1, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	2320      	movs	r3, #32
 8003f5a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003f60:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003f64:	2002      	movs	r0, #2
 8003f66:	e7fc      	b.n	8003f62 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8003f68:	2002      	movs	r0, #2
 8003f6a:	e7fa      	b.n	8003f62 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8003f6c:	fffff0ff 	.word	0xfffff0ff

08003f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f70:	b510      	push	{r4, lr}
 8003f72:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f74:	4913      	ldr	r1, [pc, #76]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003f76:	680b      	ldr	r3, [r1, #0]
 8003f78:	4813      	ldr	r0, [pc, #76]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8003f7a:	4003      	ands	r3, r0
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003f84:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d000      	beq.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8003f8a:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0058      	lsls	r0, r3, #1
 8003f92:	18c0      	adds	r0, r0, r3
 8003f94:	0040      	lsls	r0, r0, #1
 8003f96:	490e      	ldr	r1, [pc, #56]	; (8003fd0 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8003f98:	f7fc f8d2 	bl	8000140 <__udivsi3>
 8003f9c:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	055b      	lsls	r3, r3, #21
 8003fa4:	d50a      	bpl.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x4c>
 8003fa6:	4907      	ldr	r1, [pc, #28]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8003fac:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fae:	694b      	ldr	r3, [r1, #20]
 8003fb0:	4213      	tst	r3, r2
 8003fb2:	d005      	beq.n	8003fc0 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d1f9      	bne.n	8003fac <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8003fb8:	2003      	movs	r0, #3
 8003fba:	e7e6      	b.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e7e4      	b.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x1a>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	e7e2      	b.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x1a>
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	fffff9ff 	.word	0xfffff9ff
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	000f4240 	.word	0x000f4240

08003fd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd6:	46ce      	mov	lr, r9
 8003fd8:	4647      	mov	r7, r8
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe0:	d100      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x10>
 8003fe2:	e23e      	b.n	8004462 <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe4:	6803      	ldr	r3, [r0, #0]
 8003fe6:	07db      	lsls	r3, r3, #31
 8003fe8:	d538      	bpl.n	800405c <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fea:	4ac7      	ldr	r2, [pc, #796]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8003fec:	6891      	ldr	r1, [r2, #8]
 8003fee:	2338      	movs	r3, #56	; 0x38
 8003ff0:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff2:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d026      	beq.n	8004046 <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d027      	beq.n	800404c <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	0252      	lsls	r2, r2, #9
 8004002:	4293      	cmp	r3, r2
 8004004:	d07a      	beq.n	80040fc <HAL_RCC_OscConfig+0x128>
 8004006:	22a0      	movs	r2, #160	; 0xa0
 8004008:	02d2      	lsls	r2, r2, #11
 800400a:	4293      	cmp	r3, r2
 800400c:	d07d      	beq.n	800410a <HAL_RCC_OscConfig+0x136>
 800400e:	4bbe      	ldr	r3, [pc, #760]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	49be      	ldr	r1, [pc, #760]	; (800430c <HAL_RCC_OscConfig+0x338>)
 8004014:	400a      	ands	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	49bd      	ldr	r1, [pc, #756]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800401c:	400a      	ands	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d07d      	beq.n	8004122 <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7ff f811 	bl	800304c <HAL_GetTick>
 800402a:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402c:	4fb6      	ldr	r7, [pc, #728]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 800402e:	2680      	movs	r6, #128	; 0x80
 8004030:	02b6      	lsls	r6, r6, #10
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	4233      	tst	r3, r6
 8004036:	d111      	bne.n	800405c <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7ff f808 	bl	800304c <HAL_GetTick>
 800403c:	1b40      	subs	r0, r0, r5
 800403e:	2864      	cmp	r0, #100	; 0x64
 8004040:	d9f7      	bls.n	8004032 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8004042:	2003      	movs	r0, #3
 8004044:	e20e      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004046:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004048:	0792      	lsls	r2, r2, #30
 800404a:	d1d7      	bne.n	8003ffc <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	4bae      	ldr	r3, [pc, #696]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	039b      	lsls	r3, r3, #14
 8004052:	d503      	bpl.n	800405c <HAL_RCC_OscConfig+0x88>
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d100      	bne.n	800405c <HAL_RCC_OscConfig+0x88>
 800405a:	e208      	b.n	800446e <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	079b      	lsls	r3, r3, #30
 8004060:	d52a      	bpl.n	80040b8 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004062:	4aa9      	ldr	r2, [pc, #676]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004064:	6891      	ldr	r1, [r2, #8]
 8004066:	2338      	movs	r3, #56	; 0x38
 8004068:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406a:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800406c:	2b10      	cmp	r3, #16
 800406e:	d068      	beq.n	8004142 <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004070:	2b00      	cmp	r3, #0
 8004072:	d16b      	bne.n	800414c <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004074:	4ba4      	ldr	r3, [pc, #656]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	055b      	lsls	r3, r3, #21
 800407a:	d500      	bpl.n	800407e <HAL_RCC_OscConfig+0xaa>
 800407c:	e21a      	b.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407e:	49a2      	ldr	r1, [pc, #648]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004080:	684a      	ldr	r2, [r1, #4]
 8004082:	6963      	ldr	r3, [r4, #20]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	48a3      	ldr	r0, [pc, #652]	; (8004314 <HAL_RCC_OscConfig+0x340>)
 8004088:	4002      	ands	r2, r0
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800408e:	4a9e      	ldr	r2, [pc, #632]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004090:	6813      	ldr	r3, [r2, #0]
 8004092:	49a1      	ldr	r1, [pc, #644]	; (8004318 <HAL_RCC_OscConfig+0x344>)
 8004094:	400b      	ands	r3, r1
 8004096:	6921      	ldr	r1, [r4, #16]
 8004098:	430b      	orrs	r3, r1
 800409a:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800409c:	6813      	ldr	r3, [r2, #0]
 800409e:	499f      	ldr	r1, [pc, #636]	; (800431c <HAL_RCC_OscConfig+0x348>)
 80040a0:	049b      	lsls	r3, r3, #18
 80040a2:	0f5b      	lsrs	r3, r3, #29
 80040a4:	4a9e      	ldr	r2, [pc, #632]	; (8004320 <HAL_RCC_OscConfig+0x34c>)
 80040a6:	40da      	lsrs	r2, r3
 80040a8:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040aa:	4b9e      	ldr	r3, [pc, #632]	; (8004324 <HAL_RCC_OscConfig+0x350>)
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	f7fe fe8d 	bl	8002dcc <HAL_InitTick>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d000      	beq.n	80040b8 <HAL_RCC_OscConfig+0xe4>
 80040b6:	e1dc      	b.n	8004472 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	071b      	lsls	r3, r3, #28
 80040bc:	d400      	bmi.n	80040c0 <HAL_RCC_OscConfig+0xec>
 80040be:	e08b      	b.n	80041d8 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040c0:	4b91      	ldr	r3, [pc, #580]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	2338      	movs	r3, #56	; 0x38
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b18      	cmp	r3, #24
 80040ca:	d07d      	beq.n	80041c8 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040cc:	69a3      	ldr	r3, [r4, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d100      	bne.n	80040d4 <HAL_RCC_OscConfig+0x100>
 80040d2:	e0c4      	b.n	800425e <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040d4:	4a8c      	ldr	r2, [pc, #560]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80040d6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80040d8:	2101      	movs	r1, #1
 80040da:	430b      	orrs	r3, r1
 80040dc:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fe ffb5 	bl	800304c <HAL_GetTick>
 80040e2:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e4:	4f88      	ldr	r7, [pc, #544]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80040e6:	2602      	movs	r6, #2
 80040e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ea:	421e      	tst	r6, r3
 80040ec:	d174      	bne.n	80041d8 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fe ffad 	bl	800304c <HAL_GetTick>
 80040f2:	1b40      	subs	r0, r0, r5
 80040f4:	2802      	cmp	r0, #2
 80040f6:	d9f7      	bls.n	80040e8 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 80040f8:	2003      	movs	r0, #3
 80040fa:	e1b3      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	4a82      	ldr	r2, [pc, #520]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80040fe:	6811      	ldr	r1, [r2, #0]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	025b      	lsls	r3, r3, #9
 8004104:	430b      	orrs	r3, r1
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	e78a      	b.n	8004020 <HAL_RCC_OscConfig+0x4c>
 800410a:	4b7f      	ldr	r3, [pc, #508]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	2280      	movs	r2, #128	; 0x80
 8004110:	02d2      	lsls	r2, r2, #11
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	6819      	ldr	r1, [r3, #0]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	0252      	lsls	r2, r2, #9
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e77e      	b.n	8004020 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004122:	f7fe ff93 	bl	800304c <HAL_GetTick>
 8004126:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004128:	4f77      	ldr	r7, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 800412a:	2680      	movs	r6, #128	; 0x80
 800412c:	02b6      	lsls	r6, r6, #10
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	4233      	tst	r3, r6
 8004132:	d093      	beq.n	800405c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fe ff8a 	bl	800304c <HAL_GetTick>
 8004138:	1b40      	subs	r0, r0, r5
 800413a:	2864      	cmp	r0, #100	; 0x64
 800413c:	d9f7      	bls.n	800412e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 800413e:	2003      	movs	r0, #3
 8004140:	e190      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004142:	3b0d      	subs	r3, #13
 8004144:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004146:	2b02      	cmp	r3, #2
 8004148:	d100      	bne.n	800414c <HAL_RCC_OscConfig+0x178>
 800414a:	e1a3      	b.n	8004494 <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800414c:	68e3      	ldr	r3, [r4, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d024      	beq.n	800419c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004152:	4a6d      	ldr	r2, [pc, #436]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	4970      	ldr	r1, [pc, #448]	; (8004318 <HAL_RCC_OscConfig+0x344>)
 8004158:	400b      	ands	r3, r1
 800415a:	6921      	ldr	r1, [r4, #16]
 800415c:	430b      	orrs	r3, r1
 800415e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	430b      	orrs	r3, r1
 8004168:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800416a:	f7fe ff6f 	bl	800304c <HAL_GetTick>
 800416e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004170:	4f65      	ldr	r7, [pc, #404]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004172:	2680      	movs	r6, #128	; 0x80
 8004174:	00f6      	lsls	r6, r6, #3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	4233      	tst	r3, r6
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe ff66 	bl	800304c <HAL_GetTick>
 8004180:	1b40      	subs	r0, r0, r5
 8004182:	2802      	cmp	r0, #2
 8004184:	d9f7      	bls.n	8004176 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 8004186:	2003      	movs	r0, #3
 8004188:	e16c      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	495f      	ldr	r1, [pc, #380]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 800418c:	684a      	ldr	r2, [r1, #4]
 800418e:	6963      	ldr	r3, [r4, #20]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	4860      	ldr	r0, [pc, #384]	; (8004314 <HAL_RCC_OscConfig+0x340>)
 8004194:	4002      	ands	r2, r0
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
 800419a:	e78d      	b.n	80040b8 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 800419c:	4a5a      	ldr	r2, [pc, #360]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	4961      	ldr	r1, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x354>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041a6:	f7fe ff51 	bl	800304c <HAL_GetTick>
 80041aa:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ac:	4f56      	ldr	r7, [pc, #344]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80041ae:	2680      	movs	r6, #128	; 0x80
 80041b0:	00f6      	lsls	r6, r6, #3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	4233      	tst	r3, r6
 80041b6:	d100      	bne.n	80041ba <HAL_RCC_OscConfig+0x1e6>
 80041b8:	e77e      	b.n	80040b8 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ba:	f7fe ff47 	bl	800304c <HAL_GetTick>
 80041be:	1b40      	subs	r0, r0, r5
 80041c0:	2802      	cmp	r0, #2
 80041c2:	d9f6      	bls.n	80041b2 <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 80041c4:	2003      	movs	r0, #3
 80041c6:	e14d      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041c8:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	079b      	lsls	r3, r3, #30
 80041ce:	d503      	bpl.n	80041d8 <HAL_RCC_OscConfig+0x204>
 80041d0:	69a3      	ldr	r3, [r4, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d100      	bne.n	80041d8 <HAL_RCC_OscConfig+0x204>
 80041d6:	e14e      	b.n	8004476 <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	075b      	lsls	r3, r3, #29
 80041dc:	d400      	bmi.n	80041e0 <HAL_RCC_OscConfig+0x20c>
 80041de:	e0ac      	b.n	800433a <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041e0:	4b49      	ldr	r3, [pc, #292]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	2338      	movs	r3, #56	; 0x38
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d04c      	beq.n	8004286 <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80041f0:	2200      	movs	r2, #0
 80041f2:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	d40b      	bmi.n	8004210 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b43      	ldr	r3, [pc, #268]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80041fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	0549      	lsls	r1, r1, #21
 8004200:	430a      	orrs	r2, r1
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	400b      	ands	r3, r1
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800420c:	2301      	movs	r3, #1
 800420e:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	4b46      	ldr	r3, [pc, #280]	; (800432c <HAL_RCC_OscConfig+0x358>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	05db      	lsls	r3, r3, #23
 8004216:	d53f      	bpl.n	8004298 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d052      	beq.n	80042c4 <HAL_RCC_OscConfig+0x2f0>
 800421e:	2b05      	cmp	r3, #5
 8004220:	d056      	beq.n	80042d0 <HAL_RCC_OscConfig+0x2fc>
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004226:	2101      	movs	r1, #1
 8004228:	438a      	bics	r2, r1
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c
 800422c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800422e:	3103      	adds	r1, #3
 8004230:	438a      	bics	r2, r1
 8004232:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d054      	beq.n	80042e4 <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7fe ff07 	bl	800304c <HAL_GetTick>
 800423e:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004242:	4698      	mov	r8, r3
 8004244:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	4d3a      	ldr	r5, [pc, #232]	; (8004330 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004248:	4643      	mov	r3, r8
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	421f      	tst	r7, r3
 800424e:	d171      	bne.n	8004334 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fe fefc 	bl	800304c <HAL_GetTick>
 8004254:	1b80      	subs	r0, r0, r6
 8004256:	42a8      	cmp	r0, r5
 8004258:	d9f6      	bls.n	8004248 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 800425a:	2003      	movs	r0, #3
 800425c:	e102      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 800425e:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004260:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004262:	2101      	movs	r1, #1
 8004264:	438b      	bics	r3, r1
 8004266:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004268:	f7fe fef0 	bl	800304c <HAL_GetTick>
 800426c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426e:	4f26      	ldr	r7, [pc, #152]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004270:	2602      	movs	r6, #2
 8004272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004274:	421e      	tst	r6, r3
 8004276:	d0af      	beq.n	80041d8 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004278:	f7fe fee8 	bl	800304c <HAL_GetTick>
 800427c:	1b40      	subs	r0, r0, r5
 800427e:	2802      	cmp	r0, #2
 8004280:	d9f7      	bls.n	8004272 <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 8004282:	2003      	movs	r0, #3
 8004284:	e0ee      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	079b      	lsls	r3, r3, #30
 800428c:	d555      	bpl.n	800433a <HAL_RCC_OscConfig+0x366>
 800428e:	68a3      	ldr	r3, [r4, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d152      	bne.n	800433a <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 8004294:	2001      	movs	r0, #1
 8004296:	e0e5      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004298:	4a24      	ldr	r2, [pc, #144]	; (800432c <HAL_RCC_OscConfig+0x358>)
 800429a:	6811      	ldr	r1, [r2, #0]
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042a4:	f7fe fed2 	bl	800304c <HAL_GetTick>
 80042a8:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042aa:	4d20      	ldr	r5, [pc, #128]	; (800432c <HAL_RCC_OscConfig+0x358>)
 80042ac:	2780      	movs	r7, #128	; 0x80
 80042ae:	007f      	lsls	r7, r7, #1
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	423b      	tst	r3, r7
 80042b4:	d1b0      	bne.n	8004218 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fe fec9 	bl	800304c <HAL_GetTick>
 80042ba:	1b80      	subs	r0, r0, r6
 80042bc:	2802      	cmp	r0, #2
 80042be:	d9f7      	bls.n	80042b0 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 80042c0:	2003      	movs	r0, #3
 80042c2:	e0cf      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c4:	4a10      	ldr	r2, [pc, #64]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80042c6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80042c8:	2101      	movs	r1, #1
 80042ca:	430b      	orrs	r3, r1
 80042cc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80042ce:	e7b1      	b.n	8004234 <HAL_RCC_OscConfig+0x260>
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80042d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042d4:	2104      	movs	r1, #4
 80042d6:	430a      	orrs	r2, r1
 80042d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80042da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042dc:	3903      	subs	r1, #3
 80042de:	430a      	orrs	r2, r1
 80042e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80042e2:	e7a7      	b.n	8004234 <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe feb2 	bl	800304c <HAL_GetTick>
 80042e8:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCC_OscConfig+0x334>)
 80042ec:	4698      	mov	r8, r3
 80042ee:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	4d0f      	ldr	r5, [pc, #60]	; (8004330 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f2:	4643      	mov	r3, r8
 80042f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f6:	421f      	tst	r7, r3
 80042f8:	d01c      	beq.n	8004334 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fe fea7 	bl	800304c <HAL_GetTick>
 80042fe:	1b80      	subs	r0, r0, r6
 8004300:	42a8      	cmp	r0, r5
 8004302:	d9f6      	bls.n	80042f2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004304:	2003      	movs	r0, #3
 8004306:	e0ad      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
 8004308:	40021000 	.word	0x40021000
 800430c:	fffeffff 	.word	0xfffeffff
 8004310:	fffbffff 	.word	0xfffbffff
 8004314:	ffff80ff 	.word	0xffff80ff
 8004318:	ffffc7ff 	.word	0xffffc7ff
 800431c:	20000000 	.word	0x20000000
 8004320:	00f42400 	.word	0x00f42400
 8004324:	20000008 	.word	0x20000008
 8004328:	fffffeff 	.word	0xfffffeff
 800432c:	40007000 	.word	0x40007000
 8004330:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004334:	464b      	mov	r3, r9
 8004336:	2b01      	cmp	r3, #1
 8004338:	d021      	beq.n	800437e <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800433a:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800433c:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800433e:	2b00      	cmp	r3, #0
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x370>
 8004342:	e08f      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004344:	4a62      	ldr	r2, [pc, #392]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 8004346:	6891      	ldr	r1, [r2, #8]
 8004348:	2238      	movs	r2, #56	; 0x38
 800434a:	400a      	ands	r2, r1
 800434c:	2a10      	cmp	r2, #16
 800434e:	d064      	beq.n	800441a <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004350:	2b02      	cmp	r3, #2
 8004352:	d01a      	beq.n	800438a <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8004354:	4a5e      	ldr	r2, [pc, #376]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	495e      	ldr	r1, [pc, #376]	; (80044d4 <HAL_RCC_OscConfig+0x500>)
 800435a:	400b      	ands	r3, r1
 800435c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800435e:	f7fe fe75 	bl	800304c <HAL_GetTick>
 8004362:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004364:	4e5a      	ldr	r6, [pc, #360]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 8004366:	2580      	movs	r5, #128	; 0x80
 8004368:	04ad      	lsls	r5, r5, #18
 800436a:	6833      	ldr	r3, [r6, #0]
 800436c:	422b      	tst	r3, r5
 800436e:	d04d      	beq.n	800440c <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe fe6c 	bl	800304c <HAL_GetTick>
 8004374:	1b00      	subs	r0, r0, r4
 8004376:	2802      	cmp	r0, #2
 8004378:	d9f7      	bls.n	800436a <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 800437a:	2003      	movs	r0, #3
 800437c:	e072      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 800437e:	4a54      	ldr	r2, [pc, #336]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 8004380:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004382:	4955      	ldr	r1, [pc, #340]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004384:	400b      	ands	r3, r1
 8004386:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004388:	e7d7      	b.n	800433a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 800438a:	4a51      	ldr	r2, [pc, #324]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 800438c:	6813      	ldr	r3, [r2, #0]
 800438e:	4951      	ldr	r1, [pc, #324]	; (80044d4 <HAL_RCC_OscConfig+0x500>)
 8004390:	400b      	ands	r3, r1
 8004392:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004394:	f7fe fe5a 	bl	800304c <HAL_GetTick>
 8004398:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439a:	4f4d      	ldr	r7, [pc, #308]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 800439c:	2680      	movs	r6, #128	; 0x80
 800439e:	04b6      	lsls	r6, r6, #18
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4233      	tst	r3, r6
 80043a4:	d006      	beq.n	80043b4 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fe fe51 	bl	800304c <HAL_GetTick>
 80043aa:	1b40      	subs	r0, r0, r5
 80043ac:	2802      	cmp	r0, #2
 80043ae:	d9f7      	bls.n	80043a0 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 80043b0:	2003      	movs	r0, #3
 80043b2:	e057      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b4:	4a46      	ldr	r2, [pc, #280]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 80043b6:	68d1      	ldr	r1, [r2, #12]
 80043b8:	6a23      	ldr	r3, [r4, #32]
 80043ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043bc:	4303      	orrs	r3, r0
 80043be:	4847      	ldr	r0, [pc, #284]	; (80044dc <HAL_RCC_OscConfig+0x508>)
 80043c0:	4001      	ands	r1, r0
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80043c6:	430b      	orrs	r3, r1
 80043c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043ce:	0209      	lsls	r1, r1, #8
 80043d0:	430b      	orrs	r3, r1
 80043d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	045b      	lsls	r3, r3, #17
 80043da:	430b      	orrs	r3, r1
 80043dc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043de:	68d1      	ldr	r1, [r2, #12]
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	055b      	lsls	r3, r3, #21
 80043e4:	430b      	orrs	r3, r1
 80043e6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80043e8:	f7fe fe30 	bl	800304c <HAL_GetTick>
 80043ec:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	4e38      	ldr	r6, [pc, #224]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 80043f0:	2580      	movs	r5, #128	; 0x80
 80043f2:	04ad      	lsls	r5, r5, #18
 80043f4:	6833      	ldr	r3, [r6, #0]
 80043f6:	422b      	tst	r3, r5
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fe fe27 	bl	800304c <HAL_GetTick>
 80043fe:	1b00      	subs	r0, r0, r4
 8004400:	2802      	cmp	r0, #2
 8004402:	d9f7      	bls.n	80043f4 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8004404:	2003      	movs	r0, #3
 8004406:	e02d      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8004408:	2000      	movs	r0, #0
 800440a:	e02b      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800440c:	4a30      	ldr	r2, [pc, #192]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 800440e:	68d3      	ldr	r3, [r2, #12]
 8004410:	4933      	ldr	r1, [pc, #204]	; (80044e0 <HAL_RCC_OscConfig+0x50c>)
 8004412:	400b      	ands	r3, r1
 8004414:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004416:	2000      	movs	r0, #0
 8004418:	e024      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441a:	2b01      	cmp	r3, #1
 800441c:	d02d      	beq.n	800447a <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 800441e:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 8004420:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	2303      	movs	r3, #3
 8004424:	4013      	ands	r3, r2
 8004426:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8004428:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	428b      	cmp	r3, r1
 800442c:	d11a      	bne.n	8004464 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800442e:	2370      	movs	r3, #112	; 0x70
 8004430:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004434:	428b      	cmp	r3, r1
 8004436:	d115      	bne.n	8004464 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004438:	21fe      	movs	r1, #254	; 0xfe
 800443a:	01c9      	lsls	r1, r1, #7
 800443c:	4011      	ands	r1, r2
 800443e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004440:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004442:	4299      	cmp	r1, r3
 8004444:	d10e      	bne.n	8004464 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004446:	23f8      	movs	r3, #248	; 0xf8
 8004448:	039b      	lsls	r3, r3, #14
 800444a:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800444c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800444e:	428b      	cmp	r3, r1
 8004450:	d108      	bne.n	8004464 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004452:	0f53      	lsrs	r3, r2, #29
 8004454:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004456:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	1e5a      	subs	r2, r3, #1
 800445c:	4193      	sbcs	r3, r2
    return HAL_ERROR;
 800445e:	b2d8      	uxtb	r0, r3
 8004460:	e000      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
 8004462:	2001      	movs	r0, #1
}
 8004464:	b003      	add	sp, #12
 8004466:	bcc0      	pop	{r6, r7}
 8004468:	46b9      	mov	r9, r7
 800446a:	46b0      	mov	r8, r6
 800446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800446e:	2001      	movs	r0, #1
 8004470:	e7f8      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 8004472:	2001      	movs	r0, #1
 8004474:	e7f6      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8004476:	2001      	movs	r0, #1
 8004478:	e7f4      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 800447a:	2001      	movs	r0, #1
 800447c:	e7f2      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 800447e:	2001      	movs	r0, #1
 8004480:	e7f0      	b.n	8004464 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4913      	ldr	r1, [pc, #76]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 8004484:	684a      	ldr	r2, [r1, #4]
 8004486:	6963      	ldr	r3, [r4, #20]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	4816      	ldr	r0, [pc, #88]	; (80044e4 <HAL_RCC_OscConfig+0x510>)
 800448c:	4002      	ands	r2, r0
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004492:	e60a      	b.n	80040aa <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	055b      	lsls	r3, r3, #21
 800449a:	d5f2      	bpl.n	8004482 <HAL_RCC_OscConfig+0x4ae>
 800449c:	68e3      	ldr	r3, [r4, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ed      	beq.n	800447e <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a2:	490b      	ldr	r1, [pc, #44]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 80044a4:	684a      	ldr	r2, [r1, #4]
 80044a6:	6963      	ldr	r3, [r4, #20]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	480e      	ldr	r0, [pc, #56]	; (80044e4 <HAL_RCC_OscConfig+0x510>)
 80044ac:	4002      	ands	r2, r0
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b2:	e5fa      	b.n	80040aa <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b4:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 80044b6:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0d3      	beq.n	8004464 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCC_OscConfig+0x4fc>)
 80044be:	684a      	ldr	r2, [r1, #4]
 80044c0:	6963      	ldr	r3, [r4, #20]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	4807      	ldr	r0, [pc, #28]	; (80044e4 <HAL_RCC_OscConfig+0x510>)
 80044c6:	4002      	ands	r2, r0
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044cc:	e5df      	b.n	800408e <HAL_RCC_OscConfig+0xba>
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	40021000 	.word	0x40021000
 80044d4:	feffffff 	.word	0xfeffffff
 80044d8:	efffffff 	.word	0xefffffff
 80044dc:	1fc1808c 	.word	0x1fc1808c
 80044e0:	effefffc 	.word	0xeffefffc
 80044e4:	ffff80ff 	.word	0xffff80ff

080044e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e8:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2238      	movs	r2, #56	; 0x38
 80044f0:	421a      	tst	r2, r3
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80044f4:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	049b      	lsls	r3, r3, #18
 80044fa:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80044fc:	4823      	ldr	r0, [pc, #140]	; (800458c <HAL_RCC_GetSysClockFreq+0xa4>)
 80044fe:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004500:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004502:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	2338      	movs	r3, #56	; 0x38
 8004508:	4013      	ands	r3, r2
 800450a:	2b08      	cmp	r3, #8
 800450c:	d037      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x96>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	2338      	movs	r3, #56	; 0x38
 8004514:	4013      	ands	r3, r2
 8004516:	2b10      	cmp	r3, #16
 8004518:	d011      	beq.n	800453e <HAL_RCC_GetSysClockFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	2338      	movs	r3, #56	; 0x38
 8004520:	4013      	ands	r3, r2
 8004522:	2b20      	cmp	r3, #32
 8004524:	d02d      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0x9a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2038      	movs	r0, #56	; 0x38
 800452c:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 800452e:	3818      	subs	r0, #24
 8004530:	4243      	negs	r3, r0
 8004532:	4158      	adcs	r0, r3
 8004534:	4240      	negs	r0, r0
 8004536:	23fa      	movs	r3, #250	; 0xfa
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	4018      	ands	r0, r3
 800453c:	e7e0      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004540:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004542:	68d1      	ldr	r1, [r2, #12]
 8004544:	0649      	lsls	r1, r1, #25
 8004546:	0f49      	lsrs	r1, r1, #29
 8004548:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800454a:	43db      	mvns	r3, r3
    switch (pllsource)
 800454c:	079b      	lsls	r3, r3, #30
 800454e:	d00e      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004552:	68dc      	ldr	r4, [r3, #12]
 8004554:	0464      	lsls	r4, r4, #17
 8004556:	0e64      	lsrs	r4, r4, #25
 8004558:	480c      	ldr	r0, [pc, #48]	; (800458c <HAL_RCC_GetSysClockFreq+0xa4>)
 800455a:	f7fb fdf1 	bl	8000140 <__udivsi3>
 800455e:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004562:	68d9      	ldr	r1, [r3, #12]
 8004564:	0f49      	lsrs	r1, r1, #29
 8004566:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8004568:	f7fb fdea 	bl	8000140 <__udivsi3>
 800456c:	e7c8      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800456e:	68d4      	ldr	r4, [r2, #12]
 8004570:	0464      	lsls	r4, r4, #17
 8004572:	0e64      	lsrs	r4, r4, #25
 8004574:	4806      	ldr	r0, [pc, #24]	; (8004590 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004576:	f7fb fde3 	bl	8000140 <__udivsi3>
 800457a:	4360      	muls	r0, r4
        break;
 800457c:	e7f0      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSE_VALUE;
 800457e:	4804      	ldr	r0, [pc, #16]	; (8004590 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004580:	e7be      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8004582:	2080      	movs	r0, #128	; 0x80
 8004584:	0200      	lsls	r0, r0, #8
 8004586:	e7bb      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x18>
 8004588:	40021000 	.word	0x40021000
 800458c:	00f42400 	.word	0x00f42400
 8004590:	007a1200 	.word	0x007a1200

08004594 <HAL_RCC_ClockConfig>:
{
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	46ce      	mov	lr, r9
 8004598:	4647      	mov	r7, r8
 800459a:	b580      	push	{r7, lr}
 800459c:	0004      	movs	r4, r0
 800459e:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d100      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x12>
 80045a4:	e0b6      	b.n	8004714 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <HAL_RCC_ClockConfig+0x188>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	2307      	movs	r3, #7
 80045ac:	4013      	ands	r3, r2
 80045ae:	428b      	cmp	r3, r1
 80045b0:	d321      	bcc.n	80045f6 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	079a      	lsls	r2, r3, #30
 80045b6:	d50e      	bpl.n	80045d6 <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	075b      	lsls	r3, r3, #29
 80045ba:	d505      	bpl.n	80045c8 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045bc:	4a58      	ldr	r2, [pc, #352]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 80045be:	6891      	ldr	r1, [r2, #8]
 80045c0:	23e0      	movs	r3, #224	; 0xe0
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c8:	4a55      	ldr	r2, [pc, #340]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 80045ca:	6893      	ldr	r3, [r2, #8]
 80045cc:	4955      	ldr	r1, [pc, #340]	; (8004724 <HAL_RCC_ClockConfig+0x190>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	68a1      	ldr	r1, [r4, #8]
 80045d2:	430b      	orrs	r3, r1
 80045d4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	07db      	lsls	r3, r3, #31
 80045da:	d55b      	bpl.n	8004694 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045dc:	6863      	ldr	r3, [r4, #4]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d023      	beq.n	800462a <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d042      	beq.n	800466c <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d146      	bne.n	8004678 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ea:	4a4d      	ldr	r2, [pc, #308]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	0552      	lsls	r2, r2, #21
 80045f0:	d420      	bmi.n	8004634 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80045f2:	2001      	movs	r0, #1
 80045f4:	e070      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4a49      	ldr	r2, [pc, #292]	; (800471c <HAL_RCC_ClockConfig+0x188>)
 80045f8:	6813      	ldr	r3, [r2, #0]
 80045fa:	2107      	movs	r1, #7
 80045fc:	438b      	bics	r3, r1
 80045fe:	432b      	orrs	r3, r5
 8004600:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004602:	f7fe fd23 	bl	800304c <HAL_GetTick>
 8004606:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004608:	4b44      	ldr	r3, [pc, #272]	; (800471c <HAL_RCC_ClockConfig+0x188>)
 800460a:	4698      	mov	r8, r3
 800460c:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460e:	4b46      	ldr	r3, [pc, #280]	; (8004728 <HAL_RCC_ClockConfig+0x194>)
 8004610:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004612:	4643      	mov	r3, r8
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	403b      	ands	r3, r7
 8004618:	42ab      	cmp	r3, r5
 800461a:	d0ca      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fe fd16 	bl	800304c <HAL_GetTick>
 8004620:	1b80      	subs	r0, r0, r6
 8004622:	4548      	cmp	r0, r9
 8004624:	d9f5      	bls.n	8004612 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004626:	2003      	movs	r0, #3
 8004628:	e056      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462a:	4a3d      	ldr	r2, [pc, #244]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	0392      	lsls	r2, r2, #14
 8004630:	d400      	bmi.n	8004634 <HAL_RCC_ClockConfig+0xa0>
 8004632:	e071      	b.n	8004718 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004634:	493a      	ldr	r1, [pc, #232]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 8004636:	688a      	ldr	r2, [r1, #8]
 8004638:	2007      	movs	r0, #7
 800463a:	4382      	bics	r2, r0
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004640:	f7fe fd04 	bl	800304c <HAL_GetTick>
 8004644:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 8004648:	4698      	mov	r8, r3
 800464a:	2738      	movs	r7, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_RCC_ClockConfig+0x194>)
 800464e:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004650:	4643      	mov	r3, r8
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	403a      	ands	r2, r7
 8004656:	6863      	ldr	r3, [r4, #4]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	429a      	cmp	r2, r3
 800465c:	d01a      	beq.n	8004694 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465e:	f7fe fcf5 	bl	800304c <HAL_GetTick>
 8004662:	1b80      	subs	r0, r0, r6
 8004664:	4548      	cmp	r0, r9
 8004666:	d9f3      	bls.n	8004650 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8004668:	2003      	movs	r0, #3
 800466a:	e035      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466c:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	0192      	lsls	r2, r2, #6
 8004672:	d4df      	bmi.n	8004634 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
 8004676:	e02f      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004678:	2b03      	cmp	r3, #3
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467c:	4a28      	ldr	r2, [pc, #160]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 800467e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004680:	0792      	lsls	r2, r2, #30
 8004682:	d4d7      	bmi.n	8004634 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8004684:	2001      	movs	r0, #1
 8004686:	e027      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004688:	4a25      	ldr	r2, [pc, #148]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 800468a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800468c:	0792      	lsls	r2, r2, #30
 800468e:	d4d1      	bmi.n	8004634 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8004690:	2001      	movs	r0, #1
 8004692:	e021      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b21      	ldr	r3, [pc, #132]	; (800471c <HAL_RCC_ClockConfig+0x188>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2307      	movs	r3, #7
 800469a:	4013      	ands	r3, r2
 800469c:	42ab      	cmp	r3, r5
 800469e:	d81f      	bhi.n	80046e0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	075b      	lsls	r3, r3, #29
 80046a4:	d506      	bpl.n	80046b4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046a6:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 80046a8:	6893      	ldr	r3, [r2, #8]
 80046aa:	4920      	ldr	r1, [pc, #128]	; (800472c <HAL_RCC_ClockConfig+0x198>)
 80046ac:	400b      	ands	r3, r1
 80046ae:	68e1      	ldr	r1, [r4, #12]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80046b4:	f7ff ff18 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_RCC_ClockConfig+0x18c>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	491c      	ldr	r1, [pc, #112]	; (8004730 <HAL_RCC_ClockConfig+0x19c>)
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_RCC_ClockConfig+0x1a0>)
 80046c0:	051b      	lsls	r3, r3, #20
 80046c2:	0f1b      	lsrs	r3, r3, #28
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	589b      	ldr	r3, [r3, r2]
 80046c8:	221f      	movs	r2, #31
 80046ca:	4013      	ands	r3, r2
 80046cc:	40d8      	lsrs	r0, r3
 80046ce:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_RCC_ClockConfig+0x1a4>)
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	f7fe fb7a 	bl	8002dcc <HAL_InitTick>
}
 80046d8:	bcc0      	pop	{r6, r7}
 80046da:	46b9      	mov	r9, r7
 80046dc:	46b0      	mov	r8, r6
 80046de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <HAL_RCC_ClockConfig+0x188>)
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	2107      	movs	r1, #7
 80046e6:	438b      	bics	r3, r1
 80046e8:	432b      	orrs	r3, r5
 80046ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80046ec:	f7fe fcae 	bl	800304c <HAL_GetTick>
 80046f0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HAL_RCC_ClockConfig+0x188>)
 80046f4:	4698      	mov	r8, r3
 80046f6:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_ClockConfig+0x194>)
 80046fa:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046fc:	4643      	mov	r3, r8
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	403b      	ands	r3, r7
 8004702:	42ab      	cmp	r3, r5
 8004704:	d0cc      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004706:	f7fe fca1 	bl	800304c <HAL_GetTick>
 800470a:	1b80      	subs	r0, r0, r6
 800470c:	4548      	cmp	r0, r9
 800470e:	d9f5      	bls.n	80046fc <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8004710:	2003      	movs	r0, #3
 8004712:	e7e1      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004714:	2001      	movs	r0, #1
 8004716:	e7df      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004718:	2001      	movs	r0, #1
 800471a:	e7dd      	b.n	80046d8 <HAL_RCC_ClockConfig+0x144>
 800471c:	40022000 	.word	0x40022000
 8004720:	40021000 	.word	0x40021000
 8004724:	fffff0ff 	.word	0xfffff0ff
 8004728:	00001388 	.word	0x00001388
 800472c:	ffff8fff 	.word	0xffff8fff
 8004730:	20000000 	.word	0x20000000
 8004734:	0800c0c8 	.word	0x0800c0c8
 8004738:	20000008 	.word	0x20000008

0800473c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800473e:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004740:	4a06      	ldr	r2, [pc, #24]	; (800475c <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004742:	4907      	ldr	r1, [pc, #28]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004744:	045b      	lsls	r3, r3, #17
 8004746:	0f5b      	lsrs	r3, r3, #29
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	585b      	ldr	r3, [r3, r1]
 800474c:	211f      	movs	r1, #31
 800474e:	400b      	ands	r3, r1
 8004750:	6810      	ldr	r0, [r2, #0]
 8004752:	40d8      	lsrs	r0, r3
}
 8004754:	4770      	bx	lr
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40021000 	.word	0x40021000
 800475c:	20000000 	.word	0x20000000
 8004760:	0800c108 	.word	0x0800c108

08004764 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004764:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004766:	2307      	movs	r3, #7
 8004768:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_GetClockConfig+0x2c>)
 800476c:	6894      	ldr	r4, [r2, #8]
 800476e:	401c      	ands	r4, r3
 8004770:	6044      	str	r4, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004772:	6894      	ldr	r4, [r2, #8]
 8004774:	25f0      	movs	r5, #240	; 0xf0
 8004776:	012d      	lsls	r5, r5, #4
 8004778:	402c      	ands	r4, r5
 800477a:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800477c:	6892      	ldr	r2, [r2, #8]
 800477e:	24e0      	movs	r4, #224	; 0xe0
 8004780:	01e4      	lsls	r4, r4, #7
 8004782:	4022      	ands	r2, r4
 8004784:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004786:	4a03      	ldr	r2, [pc, #12]	; (8004794 <HAL_RCC_GetClockConfig+0x30>)
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	4013      	ands	r3, r2
 800478c:	600b      	str	r3, [r1, #0]
}
 800478e:	bd30      	pop	{r4, r5, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	40022000 	.word	0x40022000

08004798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479a:	46d6      	mov	lr, sl
 800479c:	464f      	mov	r7, r9
 800479e:	4646      	mov	r6, r8
 80047a0:	b5c0      	push	{r6, r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047a6:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047a8:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047aa:	039b      	lsls	r3, r3, #14
 80047ac:	d52a      	bpl.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b5c      	ldr	r3, [pc, #368]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80047b2:	2200      	movs	r2, #0
 80047b4:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	d40b      	bmi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b59      	ldr	r3, [pc, #356]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80047bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047be:	2180      	movs	r1, #128	; 0x80
 80047c0:	0549      	lsls	r1, r1, #21
 80047c2:	430a      	orrs	r2, r1
 80047c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	400b      	ands	r3, r1
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d2:	4a54      	ldr	r2, [pc, #336]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80047d4:	6811      	ldr	r1, [r2, #0]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	430b      	orrs	r3, r1
 80047dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047de:	f7fe fc35 	bl	800304c <HAL_GetTick>
 80047e2:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e4:	4f4f      	ldr	r7, [pc, #316]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80047e6:	2680      	movs	r6, #128	; 0x80
 80047e8:	0076      	lsls	r6, r6, #1
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	4233      	tst	r3, r6
 80047ee:	d000      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80047f0:	e084      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f2:	f7fe fc2b 	bl	800304c <HAL_GetTick>
 80047f6:	1b40      	subs	r0, r0, r5
 80047f8:	2802      	cmp	r0, #2
 80047fa:	d9f6      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 80047fc:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047fe:	4653      	mov	r3, sl
 8004800:	2b01      	cmp	r3, #1
 8004802:	d067      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	07db      	lsls	r3, r3, #31
 8004808:	d506      	bpl.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800480a:	4a45      	ldr	r2, [pc, #276]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800480c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800480e:	2103      	movs	r1, #3
 8004810:	438b      	bics	r3, r1
 8004812:	6861      	ldr	r1, [r4, #4]
 8004814:	430b      	orrs	r3, r1
 8004816:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	079b      	lsls	r3, r3, #30
 800481c:	d506      	bpl.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800481e:	4a40      	ldr	r2, [pc, #256]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004820:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004822:	210c      	movs	r1, #12
 8004824:	438b      	bics	r3, r1
 8004826:	68a1      	ldr	r1, [r4, #8]
 8004828:	430b      	orrs	r3, r1
 800482a:	6553      	str	r3, [r2, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	069b      	lsls	r3, r3, #26
 8004830:	d506      	bpl.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004832:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004834:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004836:	493c      	ldr	r1, [pc, #240]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004838:	400b      	ands	r3, r1
 800483a:	68e1      	ldr	r1, [r4, #12]
 800483c:	430b      	orrs	r3, r1
 800483e:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	045b      	lsls	r3, r3, #17
 8004844:	d50b      	bpl.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004846:	4a36      	ldr	r2, [pc, #216]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004848:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	6961      	ldr	r1, [r4, #20]
 8004850:	430b      	orrs	r3, r1
 8004852:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	05db      	lsls	r3, r3, #23
 8004858:	6962      	ldr	r2, [r4, #20]
 800485a:	429a      	cmp	r2, r3
 800485c:	d040      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	051b      	lsls	r3, r3, #20
 8004862:	d50b      	bpl.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004864:	4a2e      	ldr	r2, [pc, #184]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004866:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004868:	4930      	ldr	r1, [pc, #192]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800486a:	400b      	ands	r3, r1
 800486c:	6921      	ldr	r1, [r4, #16]
 800486e:	430b      	orrs	r3, r1
 8004870:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	01db      	lsls	r3, r3, #7
 8004876:	6922      	ldr	r2, [r4, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d038      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800487c:	b002      	add	sp, #8
 800487e:	bce0      	pop	{r5, r6, r7}
 8004880:	46ba      	mov	sl, r7
 8004882:	46b1      	mov	r9, r6
 8004884:	46a8      	mov	r8, r5
 8004886:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004888:	69a2      	ldr	r2, [r4, #24]
 800488a:	429a      	cmp	r2, r3
 800488c:	d00d      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x112>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800488e:	4a24      	ldr	r2, [pc, #144]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004890:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004892:	4927      	ldr	r1, [pc, #156]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004894:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_FORCE();
 8004896:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	0249      	lsls	r1, r1, #9
 800489c:	4301      	orrs	r1, r0
 800489e:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048a0:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80048a2:	4824      	ldr	r0, [pc, #144]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80048a4:	4001      	ands	r1, r0
 80048a6:	65d1      	str	r1, [r2, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 80048a8:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048aa:	07db      	lsls	r3, r3, #31
 80048ac:	d52e      	bpl.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x174>
        tickstart = HAL_GetTick();
 80048ae:	f7fe fbcd 	bl	800304c <HAL_GetTick>
 80048b2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048b6:	4698      	mov	r8, r3
 80048b8:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80048bc:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048be:	4643      	mov	r3, r8
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	421e      	tst	r6, r3
 80048c4:	d122      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x174>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fe fbc1 	bl	800304c <HAL_GetTick>
 80048ca:	1b40      	subs	r0, r0, r5
 80048cc:	4548      	cmp	r0, r9
 80048ce:	d9f6      	bls.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x126>
            ret = HAL_TIMEOUT;
 80048d0:	2003      	movs	r0, #3
 80048d2:	e794      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048d6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80048d8:	4918      	ldr	r1, [pc, #96]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048da:	400b      	ands	r3, r1
 80048dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80048de:	e791      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048e0:	4a0f      	ldr	r2, [pc, #60]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048e2:	68d1      	ldr	r1, [r2, #12]
 80048e4:	2380      	movs	r3, #128	; 0x80
 80048e6:	025b      	lsls	r3, r3, #9
 80048e8:	430b      	orrs	r3, r1
 80048ea:	60d3      	str	r3, [r2, #12]
 80048ec:	e7b7      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048ee:	4a0c      	ldr	r2, [pc, #48]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048f0:	68d1      	ldr	r1, [r2, #12]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	025b      	lsls	r3, r3, #9
 80048f6:	430b      	orrs	r3, r1
 80048f8:	60d3      	str	r3, [r2, #12]
  return status;
 80048fa:	e7bf      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004900:	22c0      	movs	r2, #192	; 0xc0
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	000b      	movs	r3, r1
 8004906:	4013      	ands	r3, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004908:	4211      	tst	r1, r2
 800490a:	d1bd      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800490e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004910:	4907      	ldr	r1, [pc, #28]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004912:	400b      	ands	r3, r1
 8004914:	69a1      	ldr	r1, [r4, #24]
 8004916:	430b      	orrs	r3, r1
 8004918:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800491a:	2000      	movs	r0, #0
 800491c:	e76f      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x66>
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	40021000 	.word	0x40021000
 8004924:	40007000 	.word	0x40007000
 8004928:	ffffcfff 	.word	0xffffcfff
 800492c:	ffff3fff 	.word	0xffff3fff
 8004930:	fffffcff 	.word	0xfffffcff
 8004934:	fffeffff 	.word	0xfffeffff
 8004938:	00001388 	.word	0x00001388
 800493c:	efffffff 	.word	0xefffffff

08004940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	1e04      	subs	r4, r0, #0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004944:	d100      	bne.n	8004948 <HAL_SPI_Init+0x8>
 8004946:	e073      	b.n	8004a30 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004948:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <HAL_SPI_Init+0x1e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800494e:	3305      	adds	r3, #5
 8004950:	33ff      	adds	r3, #255	; 0xff
 8004952:	6842      	ldr	r2, [r0, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d005      	beq.n	8004964 <HAL_SPI_Init+0x24>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004958:	2300      	movs	r3, #0
 800495a:	61c3      	str	r3, [r0, #28]
 800495c:	e002      	b.n	8004964 <HAL_SPI_Init+0x24>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800495e:	2300      	movs	r3, #0
 8004960:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004962:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004964:	2300      	movs	r3, #0
 8004966:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004968:	335d      	adds	r3, #93	; 0x5d
 800496a:	5ce3      	ldrb	r3, [r4, r3]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d058      	beq.n	8004a22 <HAL_SPI_Init+0xe2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004970:	235d      	movs	r3, #93	; 0x5d
 8004972:	2202      	movs	r2, #2
 8004974:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	6813      	ldr	r3, [r2, #0]
 800497a:	2140      	movs	r1, #64	; 0x40
 800497c:	438b      	bics	r3, r1
 800497e:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004980:	68e3      	ldr	r3, [r4, #12]
 8004982:	21e0      	movs	r1, #224	; 0xe0
 8004984:	00c9      	lsls	r1, r1, #3
 8004986:	2200      	movs	r2, #0
 8004988:	4299      	cmp	r1, r3
 800498a:	4152      	adcs	r2, r2
 800498c:	0312      	lsls	r2, r2, #12
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800498e:	4829      	ldr	r0, [pc, #164]	; (8004a34 <HAL_SPI_Init+0xf4>)
 8004990:	4003      	ands	r3, r0
 8004992:	428b      	cmp	r3, r1
 8004994:	d001      	beq.n	800499a <HAL_SPI_Init+0x5a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	6863      	ldr	r3, [r4, #4]
 800499e:	2182      	movs	r1, #130	; 0x82
 80049a0:	0049      	lsls	r1, r1, #1
 80049a2:	400b      	ands	r3, r1
 80049a4:	68a1      	ldr	r1, [r4, #8]
 80049a6:	2584      	movs	r5, #132	; 0x84
 80049a8:	022d      	lsls	r5, r5, #8
 80049aa:	4029      	ands	r1, r5
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6921      	ldr	r1, [r4, #16]
 80049b0:	2502      	movs	r5, #2
 80049b2:	4029      	ands	r1, r5
 80049b4:	430b      	orrs	r3, r1
 80049b6:	2101      	movs	r1, #1
 80049b8:	6965      	ldr	r5, [r4, #20]
 80049ba:	400d      	ands	r5, r1
 80049bc:	432b      	orrs	r3, r5
 80049be:	69a5      	ldr	r5, [r4, #24]
 80049c0:	2680      	movs	r6, #128	; 0x80
 80049c2:	00b6      	lsls	r6, r6, #2
 80049c4:	4035      	ands	r5, r6
 80049c6:	432b      	orrs	r3, r5
 80049c8:	69e5      	ldr	r5, [r4, #28]
 80049ca:	3ec9      	subs	r6, #201	; 0xc9
 80049cc:	3eff      	subs	r6, #255	; 0xff
 80049ce:	4035      	ands	r5, r6
 80049d0:	432b      	orrs	r3, r5
 80049d2:	6a25      	ldr	r5, [r4, #32]
 80049d4:	3648      	adds	r6, #72	; 0x48
 80049d6:	4035      	ands	r5, r6
 80049d8:	432b      	orrs	r3, r5
 80049da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80049dc:	2680      	movs	r6, #128	; 0x80
 80049de:	01b6      	lsls	r6, r6, #6
 80049e0:	4035      	ands	r5, r6
 80049e2:	432b      	orrs	r3, r5
 80049e4:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049e6:	6825      	ldr	r5, [r4, #0]
 80049e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049ea:	2010      	movs	r0, #16
 80049ec:	4003      	ands	r3, r0
 80049ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80049f0:	2608      	movs	r6, #8
 80049f2:	4030      	ands	r0, r6
 80049f4:	4303      	orrs	r3, r0
 80049f6:	68e0      	ldr	r0, [r4, #12]
 80049f8:	26f0      	movs	r6, #240	; 0xf0
 80049fa:	0136      	lsls	r6, r6, #4
 80049fc:	4030      	ands	r0, r6
 80049fe:	4303      	orrs	r3, r0
 8004a00:	8b66      	ldrh	r6, [r4, #26]
 8004a02:	2004      	movs	r0, #4
 8004a04:	4030      	ands	r0, r6
 8004a06:	4303      	orrs	r3, r0
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	606b      	str	r3, [r5, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	69d3      	ldr	r3, [r2, #28]
 8004a10:	4808      	ldr	r0, [pc, #32]	; (8004a34 <HAL_SPI_Init+0xf4>)
 8004a12:	4003      	ands	r3, r0
 8004a14:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a1a:	335d      	adds	r3, #93	; 0x5d
 8004a1c:	54e1      	strb	r1, [r4, r3]

  return HAL_OK;
 8004a1e:	2000      	movs	r0, #0
}
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004a22:	335c      	adds	r3, #92	; 0x5c
 8004a24:	2200      	movs	r2, #0
 8004a26:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8004a28:	0020      	movs	r0, r4
 8004a2a:	f7fe f881 	bl	8002b30 <HAL_SPI_MspInit>
 8004a2e:	e79f      	b.n	8004970 <HAL_SPI_Init+0x30>
    return HAL_ERROR;
 8004a30:	2001      	movs	r0, #1
 8004a32:	e7f5      	b.n	8004a20 <HAL_SPI_Init+0xe0>
 8004a34:	fffff7ff 	.word	0xfffff7ff

08004a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a38:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a3a:	223d      	movs	r2, #61	; 0x3d
 8004a3c:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 8004a3e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004a40:	2a01      	cmp	r2, #1
 8004a42:	d115      	bne.n	8004a70 <HAL_TIM_Base_Start_IT+0x38>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	323c      	adds	r2, #60	; 0x3c
 8004a46:	2102      	movs	r1, #2
 8004a48:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	68ca      	ldr	r2, [r1, #12]
 8004a4e:	4302      	orrs	r2, r0
 8004a50:	60ca      	str	r2, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <HAL_TIM_Base_Start_IT+0x60>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x3a>
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <HAL_TIM_Base_Start_IT+0x64>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d008      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x3a>
 8004a60:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <HAL_TIM_Base_Start_IT+0x68>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d005      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a6e:	2000      	movs	r0, #0
}
 8004a70:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	490b      	ldr	r1, [pc, #44]	; (8004aa4 <HAL_TIM_Base_Start_IT+0x6c>)
 8004a76:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	2a06      	cmp	r2, #6
 8004a7a:	d008      	beq.n	8004a8e <HAL_TIM_Base_Start_IT+0x56>
 8004a7c:	3907      	subs	r1, #7
 8004a7e:	428a      	cmp	r2, r1
 8004a80:	d007      	beq.n	8004a92 <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e7f0      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0x38>
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e7ee      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0x38>
 8004a92:	2000      	movs	r0, #0
 8004a94:	e7ec      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0x38>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	00010007 	.word	0x00010007

08004aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_IRQHandler>:
{
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ab4:	6802      	ldr	r2, [r0, #0]
 8004ab6:	6913      	ldr	r3, [r2, #16]
 8004ab8:	079b      	lsls	r3, r3, #30
 8004aba:	d50f      	bpl.n	8004adc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004abc:	68d3      	ldr	r3, [r2, #12]
 8004abe:	079b      	lsls	r3, r3, #30
 8004ac0:	d50c      	bpl.n	8004adc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac8:	3304      	adds	r3, #4
 8004aca:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004acc:	6803      	ldr	r3, [r0, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	079b      	lsls	r3, r3, #30
 8004ad2:	d06a      	beq.n	8004baa <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 8004ad4:	f7ff ffe9 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	6913      	ldr	r3, [r2, #16]
 8004ae0:	075b      	lsls	r3, r3, #29
 8004ae2:	d512      	bpl.n	8004b0a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae4:	68d3      	ldr	r3, [r2, #12]
 8004ae6:	075b      	lsls	r3, r3, #29
 8004ae8:	d50f      	bpl.n	8004b0a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aea:	2305      	movs	r3, #5
 8004aec:	425b      	negs	r3, r3
 8004aee:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af0:	3307      	adds	r3, #7
 8004af2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	23c0      	movs	r3, #192	; 0xc0
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	421a      	tst	r2, r3
 8004afe:	d05a      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b00:	0020      	movs	r0, r4
 8004b02:	f7ff ffd2 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	2300      	movs	r3, #0
 8004b08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	6913      	ldr	r3, [r2, #16]
 8004b0e:	071b      	lsls	r3, r3, #28
 8004b10:	d510      	bpl.n	8004b34 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b12:	68d3      	ldr	r3, [r2, #12]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	d50d      	bpl.n	8004b34 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b18:	2309      	movs	r3, #9
 8004b1a:	425b      	negs	r3, r3
 8004b1c:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1e:	330d      	adds	r3, #13
 8004b20:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	079b      	lsls	r3, r3, #30
 8004b28:	d04c      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	0020      	movs	r0, r4
 8004b2c:	f7ff ffbd 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b30:	2300      	movs	r3, #0
 8004b32:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	6913      	ldr	r3, [r2, #16]
 8004b38:	06db      	lsls	r3, r3, #27
 8004b3a:	d512      	bpl.n	8004b62 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3c:	68d3      	ldr	r3, [r2, #12]
 8004b3e:	06db      	lsls	r3, r3, #27
 8004b40:	d50f      	bpl.n	8004b62 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b42:	2311      	movs	r3, #17
 8004b44:	425b      	negs	r3, r3
 8004b46:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b48:	3319      	adds	r3, #25
 8004b4a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	23c0      	movs	r3, #192	; 0xc0
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	421a      	tst	r2, r3
 8004b56:	d03c      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b58:	0020      	movs	r0, r4
 8004b5a:	f7ff ffa6 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	6913      	ldr	r3, [r2, #16]
 8004b66:	07db      	lsls	r3, r3, #31
 8004b68:	d502      	bpl.n	8004b70 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b6a:	68d3      	ldr	r3, [r2, #12]
 8004b6c:	07db      	lsls	r3, r3, #31
 8004b6e:	d437      	bmi.n	8004be0 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	6913      	ldr	r3, [r2, #16]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	d502      	bpl.n	8004b7e <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b78:	68d3      	ldr	r3, [r2, #12]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	d437      	bmi.n	8004bee <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	6913      	ldr	r3, [r2, #16]
 8004b82:	05db      	lsls	r3, r3, #23
 8004b84:	d502      	bpl.n	8004b8c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b86:	68d3      	ldr	r3, [r2, #12]
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	d437      	bmi.n	8004bfc <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b8c:	6822      	ldr	r2, [r4, #0]
 8004b8e:	6913      	ldr	r3, [r2, #16]
 8004b90:	065b      	lsls	r3, r3, #25
 8004b92:	d502      	bpl.n	8004b9a <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b94:	68d3      	ldr	r3, [r2, #12]
 8004b96:	065b      	lsls	r3, r3, #25
 8004b98:	d436      	bmi.n	8004c08 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9a:	6822      	ldr	r2, [r4, #0]
 8004b9c:	6913      	ldr	r3, [r2, #16]
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	d502      	bpl.n	8004ba8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba2:	68d3      	ldr	r3, [r2, #12]
 8004ba4:	069b      	lsls	r3, r3, #26
 8004ba6:	d436      	bmi.n	8004c16 <HAL_TIM_IRQHandler+0x166>
}
 8004ba8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	f7ff ff7d 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f7ff ff7c 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8004bb4:	e790      	b.n	8004ad8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	0020      	movs	r0, r4
 8004bb8:	f7ff ff76 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	0020      	movs	r0, r4
 8004bbe:	f7ff ff75 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8004bc2:	e7a0      	b.n	8004b06 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc4:	0020      	movs	r0, r4
 8004bc6:	f7ff ff6f 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f7ff ff6e 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8004bd0:	e7ae      	b.n	8004b30 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	0020      	movs	r0, r4
 8004bd4:	f7ff ff68 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	0020      	movs	r0, r4
 8004bda:	f7ff ff67 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8004bde:	e7be      	b.n	8004b5e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be0:	2302      	movs	r3, #2
 8004be2:	425b      	negs	r3, r3
 8004be4:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004be6:	0020      	movs	r0, r4
 8004be8:	f7fd fecc 	bl	8002984 <HAL_TIM_PeriodElapsedCallback>
 8004bec:	e7c0      	b.n	8004b70 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bee:	2381      	movs	r3, #129	; 0x81
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004bf4:	0020      	movs	r0, r4
 8004bf6:	f000 f902 	bl	8004dfe <HAL_TIMEx_BreakCallback>
 8004bfa:	e7c0      	b.n	8004b7e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_TIM_IRQHandler+0x174>)
 8004bfe:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004c00:	0020      	movs	r0, r4
 8004c02:	f000 f8fd 	bl	8004e00 <HAL_TIMEx_Break2Callback>
 8004c06:	e7c1      	b.n	8004b8c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c08:	2341      	movs	r3, #65	; 0x41
 8004c0a:	425b      	negs	r3, r3
 8004c0c:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c0e:	0020      	movs	r0, r4
 8004c10:	f7ff ff4d 	bl	8004aae <HAL_TIM_TriggerCallback>
 8004c14:	e7c1      	b.n	8004b9a <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c16:	2321      	movs	r3, #33	; 0x21
 8004c18:	425b      	negs	r3, r3
 8004c1a:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004c1c:	0020      	movs	r0, r4
 8004c1e:	f000 f8ed 	bl	8004dfc <HAL_TIMEx_CommutCallback>
}
 8004c22:	e7c1      	b.n	8004ba8 <HAL_TIM_IRQHandler+0xf8>
 8004c24:	fffffeff 	.word	0xfffffeff

08004c28 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c28:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2a:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <TIM_Base_SetConfig+0xe0>)
 8004c2c:	4290      	cmp	r0, r2
 8004c2e:	d042      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8e>
 8004c30:	4a36      	ldr	r2, [pc, #216]	; (8004d0c <TIM_Base_SetConfig+0xe4>)
 8004c32:	4290      	cmp	r0, r2
 8004c34:	d055      	beq.n	8004ce2 <TIM_Base_SetConfig+0xba>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c36:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <TIM_Base_SetConfig+0xe8>)
 8004c38:	4290      	cmp	r0, r2
 8004c3a:	d056      	beq.n	8004cea <TIM_Base_SetConfig+0xc2>
 8004c3c:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <TIM_Base_SetConfig+0xec>)
 8004c3e:	4290      	cmp	r0, r2
 8004c40:	d01d      	beq.n	8004c7e <TIM_Base_SetConfig+0x56>
 8004c42:	4a35      	ldr	r2, [pc, #212]	; (8004d18 <TIM_Base_SetConfig+0xf0>)
 8004c44:	4290      	cmp	r0, r2
 8004c46:	d00c      	beq.n	8004c62 <TIM_Base_SetConfig+0x3a>
 8004c48:	4a34      	ldr	r2, [pc, #208]	; (8004d1c <TIM_Base_SetConfig+0xf4>)
 8004c4a:	4290      	cmp	r0, r2
 8004c4c:	d025      	beq.n	8004c9a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c4e:	2280      	movs	r2, #128	; 0x80
 8004c50:	4393      	bics	r3, r2
 8004c52:	694a      	ldr	r2, [r1, #20]
 8004c54:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004c56:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	688b      	ldr	r3, [r1, #8]
 8004c5a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c5c:	680b      	ldr	r3, [r1, #0]
 8004c5e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c60:	e03c      	b.n	8004cdc <TIM_Base_SetConfig+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <TIM_Base_SetConfig+0xf8>)
 8004c64:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c66:	68ca      	ldr	r2, [r1, #12]
 8004c68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	4393      	bics	r3, r2
 8004c6e:	694a      	ldr	r2, [r1, #20]
 8004c70:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c72:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c74:	688b      	ldr	r3, [r1, #8]
 8004c76:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c78:	680b      	ldr	r3, [r1, #0]
 8004c7a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c7c:	e02c      	b.n	8004cd8 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7e:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <TIM_Base_SetConfig+0xf8>)
 8004c80:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c82:	68ca      	ldr	r2, [r1, #12]
 8004c84:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c86:	2280      	movs	r2, #128	; 0x80
 8004c88:	4393      	bics	r3, r2
 8004c8a:	694a      	ldr	r2, [r1, #20]
 8004c8c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c8e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c90:	688b      	ldr	r3, [r1, #8]
 8004c92:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c94:	680b      	ldr	r3, [r1, #0]
 8004c96:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	e01e      	b.n	8004cd8 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9a:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <TIM_Base_SetConfig+0xf8>)
 8004c9c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c9e:	68ca      	ldr	r2, [r1, #12]
 8004ca0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	694a      	ldr	r2, [r1, #20]
 8004ca8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004caa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	688b      	ldr	r3, [r1, #8]
 8004cae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cb0:	680b      	ldr	r3, [r1, #0]
 8004cb2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb4:	e010      	b.n	8004cd8 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb6:	2270      	movs	r2, #112	; 0x70
 8004cb8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004cba:	684a      	ldr	r2, [r1, #4]
 8004cbc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <TIM_Base_SetConfig+0xf8>)
 8004cc0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	68ca      	ldr	r2, [r1, #12]
 8004cc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc6:	2280      	movs	r2, #128	; 0x80
 8004cc8:	4393      	bics	r3, r2
 8004cca:	694a      	ldr	r2, [r1, #20]
 8004ccc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004cce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd0:	688b      	ldr	r3, [r1, #8]
 8004cd2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cd4:	680b      	ldr	r3, [r1, #0]
 8004cd6:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd8:	690b      	ldr	r3, [r1, #16]
 8004cda:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	6143      	str	r3, [r0, #20]
}
 8004ce0:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce2:	2270      	movs	r2, #112	; 0x70
 8004ce4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004ce6:	684a      	ldr	r2, [r1, #4]
 8004ce8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <TIM_Base_SetConfig+0xf8>)
 8004cec:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cee:	68ca      	ldr	r2, [r1, #12]
 8004cf0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf2:	2280      	movs	r2, #128	; 0x80
 8004cf4:	4393      	bics	r3, r2
 8004cf6:	694a      	ldr	r2, [r1, #20]
 8004cf8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004cfa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfc:	688b      	ldr	r3, [r1, #8]
 8004cfe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d00:	680b      	ldr	r3, [r1, #0]
 8004d02:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	e7ea      	b.n	8004cdc <TIM_Base_SetConfig+0xb4>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40002000 	.word	0x40002000
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	fffffcff 	.word	0xfffffcff

08004d24 <HAL_TIM_Base_Init>:
{
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004d28:	d02a      	beq.n	8004d80 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2a:	233d      	movs	r3, #61	; 0x3d
 8004d2c:	5cc3      	ldrb	r3, [r0, r3]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d32:	253d      	movs	r5, #61	; 0x3d
 8004d34:	2302      	movs	r3, #2
 8004d36:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d38:	0021      	movs	r1, r4
 8004d3a:	c901      	ldmia	r1!, {r0}
 8004d3c:	f7ff ff74 	bl	8004c28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	2301      	movs	r3, #1
 8004d42:	2248      	movs	r2, #72	; 0x48
 8004d44:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d46:	3a0a      	subs	r2, #10
 8004d48:	54a3      	strb	r3, [r4, r2]
 8004d4a:	3201      	adds	r2, #1
 8004d4c:	54a3      	strb	r3, [r4, r2]
 8004d4e:	3201      	adds	r2, #1
 8004d50:	54a3      	strb	r3, [r4, r2]
 8004d52:	3201      	adds	r2, #1
 8004d54:	54a3      	strb	r3, [r4, r2]
 8004d56:	3201      	adds	r2, #1
 8004d58:	54a3      	strb	r3, [r4, r2]
 8004d5a:	3201      	adds	r2, #1
 8004d5c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	3201      	adds	r2, #1
 8004d60:	54a3      	strb	r3, [r4, r2]
 8004d62:	3201      	adds	r2, #1
 8004d64:	54a3      	strb	r3, [r4, r2]
 8004d66:	3201      	adds	r2, #1
 8004d68:	54a3      	strb	r3, [r4, r2]
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004d6e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004d70:	2000      	movs	r0, #0
}
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d74:	333c      	adds	r3, #60	; 0x3c
 8004d76:	2200      	movs	r2, #0
 8004d78:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004d7a:	f7fd ff07 	bl	8002b8c <HAL_TIM_Base_MspInit>
 8004d7e:	e7d8      	b.n	8004d32 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8004d80:	2001      	movs	r0, #1
 8004d82:	e7f6      	b.n	8004d72 <HAL_TIM_Base_Init+0x4e>

08004d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d84:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d86:	233c      	movs	r3, #60	; 0x3c
 8004d88:	5cc3      	ldrb	r3, [r0, r3]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d02c      	beq.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004d8e:	233c      	movs	r3, #60	; 0x3c
 8004d90:	2201      	movs	r2, #1
 8004d92:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	3301      	adds	r3, #1
 8004d96:	3201      	adds	r2, #1
 8004d98:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d9a:	6802      	ldr	r2, [r0, #0]
 8004d9c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004da0:	4d12      	ldr	r5, [pc, #72]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004da2:	42aa      	cmp	r2, r5
 8004da4:	d01b      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0x5a>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da6:	2570      	movs	r5, #112	; 0x70
 8004da8:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004daa:	680d      	ldr	r5, [r1, #0]
 8004dac:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dae:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	6803      	ldr	r3, [r0, #0]
 8004db2:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d005      	beq.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d002      	beq.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004dbe:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d104      	bne.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc4:	2280      	movs	r2, #128	; 0x80
 8004dc6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc8:	688a      	ldr	r2, [r1, #8]
 8004dca:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dcc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dce:	233d      	movs	r3, #61	; 0x3d
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004dda:	2000      	movs	r0, #0
}
 8004ddc:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dde:	4d06      	ldr	r5, [pc, #24]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8004de0:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004de2:	684d      	ldr	r5, [r1, #4]
 8004de4:	432b      	orrs	r3, r5
 8004de6:	e7de      	b.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004de8:	2002      	movs	r0, #2
 8004dea:	e7f7      	b.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	ff0fffff 	.word	0xff0fffff

08004dfc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dfc:	4770      	bx	lr

08004dfe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e00:	4770      	bx	lr
	...

08004e04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e04:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e06:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004e10:	6801      	ldr	r1, [r0, #0]
 8004e12:	680b      	ldr	r3, [r1, #0]
 8004e14:	25c0      	movs	r5, #192	; 0xc0
 8004e16:	43ab      	bics	r3, r5
 8004e18:	600b      	str	r3, [r1, #0]
 8004e1a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e22:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004e26:	6802      	ldr	r2, [r0, #0]
 8004e28:	6893      	ldr	r3, [r2, #8]
 8004e2a:	4c04      	ldr	r4, [pc, #16]	; (8004e3c <UART_EndTxTransfer+0x38>)
 8004e2c:	4023      	ands	r3, r4
 8004e2e:	6093      	str	r3, [r2, #8]
 8004e30:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e34:	2388      	movs	r3, #136	; 0x88
 8004e36:	2220      	movs	r2, #32
 8004e38:	50c2      	str	r2, [r0, r3]
}
 8004e3a:	bd30      	pop	{r4, r5, pc}
 8004e3c:	ff7fffff 	.word	0xff7fffff

08004e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e40:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e42:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e46:	2201      	movs	r2, #1
 8004e48:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e4c:	6801      	ldr	r1, [r0, #0]
 8004e4e:	680b      	ldr	r3, [r1, #0]
 8004e50:	4d12      	ldr	r5, [pc, #72]	; (8004e9c <UART_EndRxTransfer+0x5c>)
 8004e52:	402b      	ands	r3, r5
 8004e54:	600b      	str	r3, [r1, #0]
 8004e56:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e62:	6802      	ldr	r2, [r0, #0]
 8004e64:	6893      	ldr	r3, [r2, #8]
 8004e66:	4c0e      	ldr	r4, [pc, #56]	; (8004ea0 <UART_EndRxTransfer+0x60>)
 8004e68:	4023      	ands	r3, r4
 8004e6a:	6093      	str	r3, [r2, #8]
 8004e6c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d006      	beq.n	8004e84 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e76:	238c      	movs	r3, #140	; 0x8c
 8004e78:	2220      	movs	r2, #32
 8004e7a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e80:	6743      	str	r3, [r0, #116]	; 0x74
}
 8004e82:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	6802      	ldr	r2, [r0, #0]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	2410      	movs	r4, #16
 8004e92:	43a3      	bics	r3, r4
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	f381 8810 	msr	PRIMASK, r1
}
 8004e9a:	e7ec      	b.n	8004e76 <UART_EndRxTransfer+0x36>
 8004e9c:	fffffedf 	.word	0xfffffedf
 8004ea0:	effffffe 	.word	0xeffffffe

08004ea4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ea4:	b510      	push	{r4, lr}
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ea6:	2388      	movs	r3, #136	; 0x88
 8004ea8:	58c3      	ldr	r3, [r0, r3]
 8004eaa:	2b21      	cmp	r3, #33	; 0x21
 8004eac:	d000      	beq.n	8004eb0 <UART_TxISR_8BIT+0xc>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004eae:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8004eb0:	3335      	adds	r3, #53	; 0x35
 8004eb2:	5ac3      	ldrh	r3, [r0, r3]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d117      	bne.n	8004eea <UART_TxISR_8BIT+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eba:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004ec4:	6801      	ldr	r1, [r0, #0]
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	2480      	movs	r4, #128	; 0x80
 8004eca:	43a3      	bics	r3, r4
 8004ecc:	600b      	str	r3, [r1, #0]
 8004ece:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eda:	6802      	ldr	r2, [r0, #0]
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	2040      	movs	r0, #64	; 0x40
 8004ee0:	4303      	orrs	r3, r0
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	f381 8810 	msr	PRIMASK, r1
}
 8004ee8:	e7e1      	b.n	8004eae <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004eea:	6803      	ldr	r3, [r0, #0]
 8004eec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004eee:	7812      	ldrb	r2, [r2, #0]
 8004ef0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004ef2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004ef8:	2256      	movs	r2, #86	; 0x56
 8004efa:	5a83      	ldrh	r3, [r0, r2]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	5283      	strh	r3, [r0, r2]
}
 8004f02:	e7d4      	b.n	8004eae <UART_TxISR_8BIT+0xa>

08004f04 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f04:	b510      	push	{r4, lr}
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f06:	2388      	movs	r3, #136	; 0x88
 8004f08:	58c3      	ldr	r3, [r0, r3]
 8004f0a:	2b21      	cmp	r3, #33	; 0x21
 8004f0c:	d000      	beq.n	8004f10 <UART_TxISR_16BIT+0xc>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004f0e:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8004f10:	3335      	adds	r3, #53	; 0x35
 8004f12:	5ac3      	ldrh	r3, [r0, r3]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d117      	bne.n	8004f4a <UART_TxISR_16BIT+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f24:	6801      	ldr	r1, [r0, #0]
 8004f26:	680b      	ldr	r3, [r1, #0]
 8004f28:	2480      	movs	r4, #128	; 0x80
 8004f2a:	43a3      	bics	r3, r4
 8004f2c:	600b      	str	r3, [r1, #0]
 8004f2e:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f32:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f3a:	6802      	ldr	r2, [r0, #0]
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	2040      	movs	r0, #64	; 0x40
 8004f40:	4303      	orrs	r3, r0
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	f381 8810 	msr	PRIMASK, r1
}
 8004f48:	e7e1      	b.n	8004f0e <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004f4a:	6802      	ldr	r2, [r0, #0]
 8004f4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	05db      	lsls	r3, r3, #23
 8004f52:	0ddb      	lsrs	r3, r3, #23
 8004f54:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004f56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004f58:	3302      	adds	r3, #2
 8004f5a:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004f5c:	2256      	movs	r2, #86	; 0x56
 8004f5e:	5a83      	ldrh	r3, [r0, r2]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	5283      	strh	r3, [r0, r2]
}
 8004f66:	e7d2      	b.n	8004f0e <UART_TxISR_16BIT+0xa>

08004f68 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f68:	b530      	push	{r4, r5, lr}
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f6a:	2388      	movs	r3, #136	; 0x88
 8004f6c:	58c3      	ldr	r3, [r0, r3]
 8004f6e:	2b21      	cmp	r3, #33	; 0x21
 8004f70:	d000      	beq.n	8004f74 <UART_TxISR_8BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004f72:	bd30      	pop	{r4, r5, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f74:	3349      	adds	r3, #73	; 0x49
 8004f76:	5ac3      	ldrh	r3, [r0, r3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0fa      	beq.n	8004f72 <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8004f7c:	2156      	movs	r1, #86	; 0x56
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004f7e:	2580      	movs	r5, #128	; 0x80
 8004f80:	e01b      	b.n	8004fba <UART_TxISR_8BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f82:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	3201      	adds	r2, #1
 8004f88:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f8c:	6801      	ldr	r1, [r0, #0]
 8004f8e:	688b      	ldr	r3, [r1, #8]
 8004f90:	4d13      	ldr	r5, [pc, #76]	; (8004fe0 <UART_TxISR_8BIT_FIFOEN+0x78>)
 8004f92:	402b      	ands	r3, r5
 8004f94:	608b      	str	r3, [r1, #8]
 8004f96:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fa2:	6802      	ldr	r2, [r0, #0]
 8004fa4:	6813      	ldr	r3, [r2, #0]
 8004fa6:	2040      	movs	r0, #64	; 0x40
 8004fa8:	4303      	orrs	r3, r0
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	f381 8810 	msr	PRIMASK, r1
}
 8004fb0:	e7df      	b.n	8004f72 <UART_TxISR_8BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0db      	beq.n	8004f72 <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8004fba:	5a42      	ldrh	r2, [r0, r1]
 8004fbc:	b292      	uxth	r2, r2
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d0df      	beq.n	8004f82 <UART_TxISR_8BIT_FIFOEN+0x1a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004fc2:	6802      	ldr	r2, [r0, #0]
 8004fc4:	69d4      	ldr	r4, [r2, #28]
 8004fc6:	4225      	tst	r5, r4
 8004fc8:	d0f3      	beq.n	8004fb2 <UART_TxISR_8BIT_FIFOEN+0x4a>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004fca:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004fcc:	7824      	ldrb	r4, [r4, #0]
 8004fce:	6294      	str	r4, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004fd0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004fd2:	3201      	adds	r2, #1
 8004fd4:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004fd6:	5a42      	ldrh	r2, [r0, r1]
 8004fd8:	3a01      	subs	r2, #1
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	5242      	strh	r2, [r0, r1]
 8004fde:	e7e8      	b.n	8004fb2 <UART_TxISR_8BIT_FIFOEN+0x4a>
 8004fe0:	ff7fffff 	.word	0xff7fffff

08004fe4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004fe4:	b530      	push	{r4, r5, lr}
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe6:	2388      	movs	r3, #136	; 0x88
 8004fe8:	58c3      	ldr	r3, [r0, r3]
 8004fea:	2b21      	cmp	r3, #33	; 0x21
 8004fec:	d000      	beq.n	8004ff0 <UART_TxISR_16BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004fee:	bd30      	pop	{r4, r5, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ff0:	3349      	adds	r3, #73	; 0x49
 8004ff2:	5ac3      	ldrh	r3, [r0, r3]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0fa      	beq.n	8004fee <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8004ff8:	2456      	movs	r4, #86	; 0x56
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004ffa:	2580      	movs	r5, #128	; 0x80
 8004ffc:	e01b      	b.n	8005036 <UART_TxISR_16BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	3201      	adds	r2, #1
 8005004:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005008:	6801      	ldr	r1, [r0, #0]
 800500a:	688b      	ldr	r3, [r1, #8]
 800500c:	4d14      	ldr	r5, [pc, #80]	; (8005060 <UART_TxISR_16BIT_FIFOEN+0x7c>)
 800500e:	402b      	ands	r3, r5
 8005010:	608b      	str	r3, [r1, #8]
 8005012:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005016:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800501e:	6802      	ldr	r2, [r0, #0]
 8005020:	6813      	ldr	r3, [r2, #0]
 8005022:	2040      	movs	r0, #64	; 0x40
 8005024:	4303      	orrs	r3, r0
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	f381 8810 	msr	PRIMASK, r1
}
 800502c:	e7df      	b.n	8004fee <UART_TxISR_16BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800502e:	3b01      	subs	r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0db      	beq.n	8004fee <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8005036:	5b02      	ldrh	r2, [r0, r4]
 8005038:	b292      	uxth	r2, r2
 800503a:	2a00      	cmp	r2, #0
 800503c:	d0df      	beq.n	8004ffe <UART_TxISR_16BIT_FIFOEN+0x1a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800503e:	6801      	ldr	r1, [r0, #0]
 8005040:	69ca      	ldr	r2, [r1, #28]
 8005042:	4215      	tst	r5, r2
 8005044:	d0f3      	beq.n	800502e <UART_TxISR_16BIT_FIFOEN+0x4a>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005046:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005048:	8812      	ldrh	r2, [r2, #0]
 800504a:	05d2      	lsls	r2, r2, #23
 800504c:	0dd2      	lsrs	r2, r2, #23
 800504e:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005050:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005052:	3202      	adds	r2, #2
 8005054:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8005056:	5b02      	ldrh	r2, [r0, r4]
 8005058:	3a01      	subs	r2, #1
 800505a:	b292      	uxth	r2, r2
 800505c:	5302      	strh	r2, [r0, r4]
 800505e:	e7e6      	b.n	800502e <UART_TxISR_16BIT_FIFOEN+0x4a>
 8005060:	ff7fffff 	.word	0xff7fffff

08005064 <HAL_UART_Transmit_IT>:
{
 8005064:	b530      	push	{r4, r5, lr}
 8005066:	0003      	movs	r3, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005068:	2088      	movs	r0, #136	; 0x88
 800506a:	5818      	ldr	r0, [r3, r0]
 800506c:	2820      	cmp	r0, #32
 800506e:	d133      	bne.n	80050d8 <HAL_UART_Transmit_IT+0x74>
    if ((pData == NULL) || (Size == 0U))
 8005070:	2900      	cmp	r1, #0
 8005072:	d033      	beq.n	80050dc <HAL_UART_Transmit_IT+0x78>
 8005074:	2a00      	cmp	r2, #0
 8005076:	d033      	beq.n	80050e0 <HAL_UART_Transmit_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005078:	2080      	movs	r0, #128	; 0x80
 800507a:	0140      	lsls	r0, r0, #5
 800507c:	689c      	ldr	r4, [r3, #8]
 800507e:	4284      	cmp	r4, r0
 8005080:	d130      	bne.n	80050e4 <HAL_UART_Transmit_IT+0x80>
 8005082:	691c      	ldr	r4, [r3, #16]
 8005084:	2c00      	cmp	r4, #0
 8005086:	d14d      	bne.n	8005124 <HAL_UART_Transmit_IT+0xc0>
        return  HAL_ERROR;
 8005088:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800508a:	07cd      	lsls	r5, r1, #31
 800508c:	d425      	bmi.n	80050da <HAL_UART_Transmit_IT+0x76>
    huart->pTxBuffPtr  = pData;
 800508e:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005090:	2154      	movs	r1, #84	; 0x54
 8005092:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005094:	3102      	adds	r1, #2
 8005096:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	2290      	movs	r2, #144	; 0x90
 800509a:	2100      	movs	r1, #0
 800509c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800509e:	3a08      	subs	r2, #8
 80050a0:	3121      	adds	r1, #33	; 0x21
 80050a2:	5099      	str	r1, [r3, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	0592      	lsls	r2, r2, #22
 80050a8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80050aa:	4291      	cmp	r1, r2
 80050ac:	d14a      	bne.n	8005144 <HAL_UART_Transmit_IT+0xe0>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80050ae:	4a27      	ldr	r2, [pc, #156]	; (800514c <HAL_UART_Transmit_IT+0xe8>)
 80050b0:	e000      	b.n	80050b4 <HAL_UART_Transmit_IT+0x50>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80050b2:	4a27      	ldr	r2, [pc, #156]	; (8005150 <HAL_UART_Transmit_IT+0xec>)
 80050b4:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	2201      	movs	r2, #1
 80050bc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	6890      	ldr	r0, [r2, #8]
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	041b      	lsls	r3, r3, #16
 80050c8:	4303      	orrs	r3, r0
 80050ca:	6093      	str	r3, [r2, #8]
 80050cc:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80050d0:	2000      	movs	r0, #0
}
 80050d2:	e002      	b.n	80050da <HAL_UART_Transmit_IT+0x76>
        huart->TxISR = UART_TxISR_8BIT;
 80050d4:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <HAL_UART_Transmit_IT+0xf0>)
 80050d6:	e016      	b.n	8005106 <HAL_UART_Transmit_IT+0xa2>
    return HAL_BUSY;
 80050d8:	2002      	movs	r0, #2
}
 80050da:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80050dc:	2001      	movs	r0, #1
 80050de:	e7fc      	b.n	80050da <HAL_UART_Transmit_IT+0x76>
 80050e0:	2001      	movs	r0, #1
 80050e2:	e7fa      	b.n	80050da <HAL_UART_Transmit_IT+0x76>
    huart->pTxBuffPtr  = pData;
 80050e4:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80050e6:	2154      	movs	r1, #84	; 0x54
 80050e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80050ea:	3102      	adds	r1, #2
 80050ec:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ee:	2290      	movs	r2, #144	; 0x90
 80050f0:	2100      	movs	r1, #0
 80050f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f4:	3a08      	subs	r2, #8
 80050f6:	3121      	adds	r1, #33	; 0x21
 80050f8:	5099      	str	r1, [r3, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	0592      	lsls	r2, r2, #22
 80050fe:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005100:	4291      	cmp	r1, r2
 8005102:	d0d6      	beq.n	80050b2 <HAL_UART_Transmit_IT+0x4e>
        huart->TxISR = UART_TxISR_8BIT;
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <HAL_UART_Transmit_IT+0xf0>)
 8005106:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005108:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510c:	2201      	movs	r2, #1
 800510e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	2080      	movs	r0, #128	; 0x80
 8005118:	4303      	orrs	r3, r0
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8005120:	2000      	movs	r0, #0
}
 8005122:	e7da      	b.n	80050da <HAL_UART_Transmit_IT+0x76>
    huart->pTxBuffPtr  = pData;
 8005124:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005126:	2154      	movs	r1, #84	; 0x54
 8005128:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800512a:	3102      	adds	r1, #2
 800512c:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512e:	2290      	movs	r2, #144	; 0x90
 8005130:	2100      	movs	r1, #0
 8005132:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005134:	3a08      	subs	r2, #8
 8005136:	3121      	adds	r1, #33	; 0x21
 8005138:	5099      	str	r1, [r3, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	0592      	lsls	r2, r2, #22
 800513e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005140:	4291      	cmp	r1, r2
 8005142:	d0b6      	beq.n	80050b2 <HAL_UART_Transmit_IT+0x4e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005144:	2c00      	cmp	r4, #0
 8005146:	d1c5      	bne.n	80050d4 <HAL_UART_Transmit_IT+0x70>
        huart->TxISR = UART_TxISR_16BIT;
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <HAL_UART_Transmit_IT+0xf4>)
 800514a:	e7dc      	b.n	8005106 <HAL_UART_Transmit_IT+0xa2>
 800514c:	08004fe5 	.word	0x08004fe5
 8005150:	08004f69 	.word	0x08004f69
 8005154:	08004ea5 	.word	0x08004ea5
 8005158:	08004f05 	.word	0x08004f05

0800515c <HAL_UART_RxHalfCpltCallback>:
}
 800515c:	4770      	bx	lr

0800515e <UART_DMAError>:
{
 800515e:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005160:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005162:	2388      	movs	r3, #136	; 0x88
 8005164:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005166:	3304      	adds	r3, #4
 8005168:	58e5      	ldr	r5, [r4, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	d501      	bpl.n	8005176 <UART_DMAError+0x18>
 8005172:	2a21      	cmp	r2, #33	; 0x21
 8005174:	d00e      	beq.n	8005194 <UART_DMAError+0x36>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	065b      	lsls	r3, r3, #25
 800517c:	d501      	bpl.n	8005182 <UART_DMAError+0x24>
 800517e:	2d22      	cmp	r5, #34	; 0x22
 8005180:	d00f      	beq.n	80051a2 <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005182:	2290      	movs	r2, #144	; 0x90
 8005184:	58a3      	ldr	r3, [r4, r2]
 8005186:	2110      	movs	r1, #16
 8005188:	430b      	orrs	r3, r1
 800518a:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 800518c:	0020      	movs	r0, r4
 800518e:	f7fd fbf7 	bl	8002980 <HAL_UART_ErrorCallback>
}
 8005192:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8005194:	2356      	movs	r3, #86	; 0x56
 8005196:	2200      	movs	r2, #0
 8005198:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 800519a:	0020      	movs	r0, r4
 800519c:	f7ff fe32 	bl	8004e04 <UART_EndTxTransfer>
 80051a0:	e7e9      	b.n	8005176 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80051a2:	235e      	movs	r3, #94	; 0x5e
 80051a4:	2200      	movs	r2, #0
 80051a6:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80051a8:	0020      	movs	r0, r4
 80051aa:	f7ff fe49 	bl	8004e40 <UART_EndRxTransfer>
 80051ae:	e7e8      	b.n	8005182 <UART_DMAError+0x24>

080051b0 <UART_DMAAbortOnError>:
{
 80051b0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	225e      	movs	r2, #94	; 0x5e
 80051b8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80051ba:	3a08      	subs	r2, #8
 80051bc:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 80051be:	f7fd fbdf 	bl	8002980 <HAL_UART_ErrorCallback>
}
 80051c2:	bd10      	pop	{r4, pc}

080051c4 <HAL_UARTEx_RxEventCallback>:
}
 80051c4:	4770      	bx	lr
	...

080051c8 <HAL_UART_IRQHandler>:
{
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051cc:	6802      	ldr	r2, [r0, #0]
 80051ce:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051d0:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051d2:	6891      	ldr	r1, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051d4:	4dbb      	ldr	r5, [pc, #748]	; (80054c4 <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 80051d6:	422b      	tst	r3, r5
 80051d8:	d10e      	bne.n	80051f8 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051da:	069d      	lsls	r5, r3, #26
 80051dc:	d512      	bpl.n	8005204 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051de:	2520      	movs	r5, #32
 80051e0:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051e2:	2680      	movs	r6, #128	; 0x80
 80051e4:	0576      	lsls	r6, r6, #21
 80051e6:	400e      	ands	r6, r1
 80051e8:	4335      	orrs	r5, r6
 80051ea:	d00b      	beq.n	8005204 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 80051ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02a      	beq.n	8005248 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 80051f2:	0020      	movs	r0, r4
 80051f4:	4798      	blx	r3
 80051f6:	e027      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051f8:	4eb3      	ldr	r6, [pc, #716]	; (80054c8 <HAL_UART_IRQHandler+0x300>)
 80051fa:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051fc:	4db3      	ldr	r5, [pc, #716]	; (80054cc <HAL_UART_IRQHandler+0x304>)
 80051fe:	4005      	ands	r5, r0
 8005200:	4335      	orrs	r5, r6
 8005202:	d122      	bne.n	800524a <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8005206:	2d01      	cmp	r5, #1
 8005208:	d100      	bne.n	800520c <HAL_UART_IRQHandler+0x44>
 800520a:	e0ad      	b.n	8005368 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800520c:	02dd      	lsls	r5, r3, #11
 800520e:	d502      	bpl.n	8005216 <HAL_UART_IRQHandler+0x4e>
 8005210:	024d      	lsls	r5, r1, #9
 8005212:	d500      	bpl.n	8005216 <HAL_UART_IRQHandler+0x4e>
 8005214:	e147      	b.n	80054a6 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005216:	061a      	lsls	r2, r3, #24
 8005218:	d507      	bpl.n	800522a <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800521e:	2580      	movs	r5, #128	; 0x80
 8005220:	042d      	lsls	r5, r5, #16
 8005222:	4029      	ands	r1, r5
 8005224:	430a      	orrs	r2, r1
 8005226:	d000      	beq.n	800522a <HAL_UART_IRQHandler+0x62>
 8005228:	e144      	b.n	80054b4 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800522a:	065a      	lsls	r2, r3, #25
 800522c:	d502      	bpl.n	8005234 <HAL_UART_IRQHandler+0x6c>
 800522e:	0642      	lsls	r2, r0, #25
 8005230:	d500      	bpl.n	8005234 <HAL_UART_IRQHandler+0x6c>
 8005232:	e155      	b.n	80054e0 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	d502      	bpl.n	800523e <HAL_UART_IRQHandler+0x76>
 8005238:	0042      	lsls	r2, r0, #1
 800523a:	d500      	bpl.n	800523e <HAL_UART_IRQHandler+0x76>
 800523c:	e165      	b.n	800550a <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800523e:	01db      	lsls	r3, r3, #7
 8005240:	d502      	bpl.n	8005248 <HAL_UART_IRQHandler+0x80>
 8005242:	2800      	cmp	r0, #0
 8005244:	da00      	bge.n	8005248 <HAL_UART_IRQHandler+0x80>
 8005246:	e164      	b.n	8005512 <HAL_UART_IRQHandler+0x34a>
}
 8005248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800524a:	07dd      	lsls	r5, r3, #31
 800524c:	d507      	bpl.n	800525e <HAL_UART_IRQHandler+0x96>
 800524e:	05c5      	lsls	r5, r0, #23
 8005250:	d505      	bpl.n	800525e <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005252:	2701      	movs	r7, #1
 8005254:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005256:	2590      	movs	r5, #144	; 0x90
 8005258:	5962      	ldr	r2, [r4, r5]
 800525a:	433a      	orrs	r2, r7
 800525c:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800525e:	079a      	lsls	r2, r3, #30
 8005260:	d50c      	bpl.n	800527c <HAL_UART_IRQHandler+0xb4>
 8005262:	07ca      	lsls	r2, r1, #31
 8005264:	d516      	bpl.n	8005294 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005266:	6822      	ldr	r2, [r4, #0]
 8005268:	2502      	movs	r5, #2
 800526a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800526c:	2790      	movs	r7, #144	; 0x90
 800526e:	59e2      	ldr	r2, [r4, r7]
 8005270:	3502      	adds	r5, #2
 8005272:	432a      	orrs	r2, r5
 8005274:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005276:	421d      	tst	r5, r3
 8005278:	d104      	bne.n	8005284 <HAL_UART_IRQHandler+0xbc>
 800527a:	e00b      	b.n	8005294 <HAL_UART_IRQHandler+0xcc>
 800527c:	075a      	lsls	r2, r3, #29
 800527e:	d509      	bpl.n	8005294 <HAL_UART_IRQHandler+0xcc>
 8005280:	07ca      	lsls	r2, r1, #31
 8005282:	d507      	bpl.n	8005294 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	2504      	movs	r5, #4
 8005288:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800528a:	358c      	adds	r5, #140	; 0x8c
 800528c:	5962      	ldr	r2, [r4, r5]
 800528e:	2702      	movs	r7, #2
 8005290:	433a      	orrs	r2, r7
 8005292:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005294:	071a      	lsls	r2, r3, #28
 8005296:	d50a      	bpl.n	80052ae <HAL_UART_IRQHandler+0xe6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005298:	2220      	movs	r2, #32
 800529a:	4002      	ands	r2, r0
 800529c:	4332      	orrs	r2, r6
 800529e:	d006      	beq.n	80052ae <HAL_UART_IRQHandler+0xe6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	2608      	movs	r6, #8
 80052a4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052a6:	2590      	movs	r5, #144	; 0x90
 80052a8:	5962      	ldr	r2, [r4, r5]
 80052aa:	4332      	orrs	r2, r6
 80052ac:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052ae:	051a      	lsls	r2, r3, #20
 80052b0:	d50a      	bpl.n	80052c8 <HAL_UART_IRQHandler+0x100>
 80052b2:	0142      	lsls	r2, r0, #5
 80052b4:	d508      	bpl.n	80052c8 <HAL_UART_IRQHandler+0x100>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	2580      	movs	r5, #128	; 0x80
 80052ba:	012d      	lsls	r5, r5, #4
 80052bc:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052be:	2590      	movs	r5, #144	; 0x90
 80052c0:	5962      	ldr	r2, [r4, r5]
 80052c2:	2620      	movs	r6, #32
 80052c4:	4332      	orrs	r2, r6
 80052c6:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052c8:	2290      	movs	r2, #144	; 0x90
 80052ca:	58a2      	ldr	r2, [r4, r2]
 80052cc:	2a00      	cmp	r2, #0
 80052ce:	d0bb      	beq.n	8005248 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052d0:	069b      	lsls	r3, r3, #26
 80052d2:	d50b      	bpl.n	80052ec <HAL_UART_IRQHandler+0x124>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052d4:	2320      	movs	r3, #32
 80052d6:	4003      	ands	r3, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052d8:	2280      	movs	r2, #128	; 0x80
 80052da:	0552      	lsls	r2, r2, #21
 80052dc:	400a      	ands	r2, r1
 80052de:	4313      	orrs	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_UART_IRQHandler+0x124>
        if (huart->RxISR != NULL)
 80052e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_UART_IRQHandler+0x124>
          huart->RxISR(huart);
 80052e8:	0020      	movs	r0, r4
 80052ea:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80052ec:	2390      	movs	r3, #144	; 0x90
 80052ee:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052f8:	2228      	movs	r2, #40	; 0x28
 80052fa:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052fc:	4313      	orrs	r3, r2
 80052fe:	d02c      	beq.n	800535a <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 8005300:	0020      	movs	r0, r4
 8005302:	f7ff fd9d 	bl	8004e40 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	065b      	lsls	r3, r3, #25
 800530c:	d521      	bpl.n	8005352 <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	2301      	movs	r3, #1
 8005314:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	6893      	ldr	r3, [r2, #8]
 800531c:	2040      	movs	r0, #64	; 0x40
 800531e:	4383      	bics	r3, r0
 8005320:	6093      	str	r3, [r2, #8]
 8005322:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	58e3      	ldr	r3, [r4, r3]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800532e:	4a68      	ldr	r2, [pc, #416]	; (80054d0 <HAL_UART_IRQHandler+0x308>)
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	58e0      	ldr	r0, [r4, r3]
 8005336:	f7fe fb93 	bl	8003a60 <HAL_DMA_Abort_IT>
 800533a:	2800      	cmp	r0, #0
 800533c:	d100      	bne.n	8005340 <HAL_UART_IRQHandler+0x178>
 800533e:	e783      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	58e0      	ldr	r0, [r4, r3]
 8005344:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005346:	4798      	blx	r3
 8005348:	e77e      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
            HAL_UART_ErrorCallback(huart);
 800534a:	0020      	movs	r0, r4
 800534c:	f7fd fb18 	bl	8002980 <HAL_UART_ErrorCallback>
 8005350:	e77a      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 8005352:	0020      	movs	r0, r4
 8005354:	f7fd fb14 	bl	8002980 <HAL_UART_ErrorCallback>
 8005358:	e776      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 800535a:	0020      	movs	r0, r4
 800535c:	f7fd fb10 	bl	8002980 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	2390      	movs	r3, #144	; 0x90
 8005362:	2200      	movs	r2, #0
 8005364:	50e2      	str	r2, [r4, r3]
 8005366:	e76f      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005368:	06dd      	lsls	r5, r3, #27
 800536a:	d400      	bmi.n	800536e <HAL_UART_IRQHandler+0x1a6>
 800536c:	e74e      	b.n	800520c <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800536e:	06c5      	lsls	r5, r0, #27
 8005370:	d400      	bmi.n	8005374 <HAL_UART_IRQHandler+0x1ac>
 8005372:	e74b      	b.n	800520c <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005374:	2310      	movs	r3, #16
 8005376:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	065b      	lsls	r3, r3, #25
 800537e:	d555      	bpl.n	800542c <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	58e2      	ldr	r2, [r4, r3]
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800538a:	2b00      	cmp	r3, #0
 800538c:	d100      	bne.n	8005390 <HAL_UART_IRQHandler+0x1c8>
 800538e:	e75b      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005390:	215c      	movs	r1, #92	; 0x5c
 8005392:	5a61      	ldrh	r1, [r4, r1]
 8005394:	4299      	cmp	r1, r3
 8005396:	d800      	bhi.n	800539a <HAL_UART_IRQHandler+0x1d2>
 8005398:	e756      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 800539a:	215e      	movs	r1, #94	; 0x5e
 800539c:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	069b      	lsls	r3, r3, #26
 80053a4:	d50b      	bpl.n	80053be <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a6:	2302      	movs	r3, #2
 80053a8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053aa:	335c      	adds	r3, #92	; 0x5c
 80053ac:	5ae3      	ldrh	r3, [r4, r3]
 80053ae:	225c      	movs	r2, #92	; 0x5c
 80053b0:	5aa1      	ldrh	r1, [r4, r2]
 80053b2:	1ac9      	subs	r1, r1, r3
 80053b4:	b289      	uxth	r1, r1
 80053b6:	0020      	movs	r0, r4
 80053b8:	f7ff ff04 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
 80053bc:	e744      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053be:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c2:	2301      	movs	r3, #1
 80053c4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	680a      	ldr	r2, [r1, #0]
 80053cc:	4d41      	ldr	r5, [pc, #260]	; (80054d4 <HAL_UART_IRQHandler+0x30c>)
 80053ce:	402a      	ands	r2, r5
 80053d0:	600a      	str	r2, [r1, #0]
 80053d2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053da:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053de:	6821      	ldr	r1, [r4, #0]
 80053e0:	688a      	ldr	r2, [r1, #8]
 80053e2:	439a      	bics	r2, r3
 80053e4:	608a      	str	r2, [r1, #8]
 80053e6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ee:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	688a      	ldr	r2, [r1, #8]
 80053f6:	3542      	adds	r5, #66	; 0x42
 80053f8:	35ff      	adds	r5, #255	; 0xff
 80053fa:	43aa      	bics	r2, r5
 80053fc:	608a      	str	r2, [r1, #8]
 80053fe:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8005402:	228c      	movs	r2, #140	; 0x8c
 8005404:	2120      	movs	r1, #32
 8005406:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	2200      	movs	r2, #0
 800540a:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005410:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005414:	6822      	ldr	r2, [r4, #0]
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	2010      	movs	r0, #16
 800541a:	4383      	bics	r3, r0
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	58e0      	ldr	r0, [r4, r3]
 8005426:	f7fe fadb 	bl	80039e0 <HAL_DMA_Abort>
 800542a:	e7bc      	b.n	80053a6 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800542c:	215e      	movs	r1, #94	; 0x5e
 800542e:	5a62      	ldrh	r2, [r4, r1]
 8005430:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8005432:	5a63      	ldrh	r3, [r4, r1]
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d100      	bne.n	800543c <HAL_UART_IRQHandler+0x274>
 800543a:	e705      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800543c:	235c      	movs	r3, #92	; 0x5c
 800543e:	5ae1      	ldrh	r1, [r4, r3]
 8005440:	1a89      	subs	r1, r1, r2
 8005442:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005444:	2900      	cmp	r1, #0
 8005446:	d100      	bne.n	800544a <HAL_UART_IRQHandler+0x282>
 8005448:	e6fe      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544e:	3b5b      	subs	r3, #91	; 0x5b
 8005450:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	6802      	ldr	r2, [r0, #0]
 8005458:	4e1f      	ldr	r6, [pc, #124]	; (80054d8 <HAL_UART_IRQHandler+0x310>)
 800545a:	4032      	ands	r2, r6
 800545c:	6002      	str	r2, [r0, #0]
 800545e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005462:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005466:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	6882      	ldr	r2, [r0, #8]
 800546e:	4e1b      	ldr	r6, [pc, #108]	; (80054dc <HAL_UART_IRQHandler+0x314>)
 8005470:	4032      	ands	r2, r6
 8005472:	6082      	str	r2, [r0, #8]
 8005474:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8005478:	228c      	movs	r2, #140	; 0x8c
 800547a:	2020      	movs	r0, #32
 800547c:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	2200      	movs	r2, #0
 8005480:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005482:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005484:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	2510      	movs	r5, #16
 8005492:	43ab      	bics	r3, r5
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800549a:	2302      	movs	r3, #2
 800549c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800549e:	0020      	movs	r0, r4
 80054a0:	f7ff fe90 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
 80054a4:	e6d0      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	035b      	lsls	r3, r3, #13
 80054aa:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80054ac:	0020      	movs	r0, r4
 80054ae:	f000 fbb1 	bl	8005c14 <HAL_UARTEx_WakeupCallback>
    return;
 80054b2:	e6c9      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 80054b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d100      	bne.n	80054bc <HAL_UART_IRQHandler+0x2f4>
 80054ba:	e6c5      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 80054bc:	0020      	movs	r0, r4
 80054be:	4798      	blx	r3
 80054c0:	e6c2      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	0000080f 	.word	0x0000080f
 80054c8:	10000001 	.word	0x10000001
 80054cc:	04000120 	.word	0x04000120
 80054d0:	080051b1 	.word	0x080051b1
 80054d4:	fffffeff 	.word	0xfffffeff
 80054d8:	fffffedf 	.word	0xfffffedf
 80054dc:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e4:	2301      	movs	r3, #1
 80054e6:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	6813      	ldr	r3, [r2, #0]
 80054ee:	2040      	movs	r0, #64	; 0x40
 80054f0:	4383      	bics	r3, r0
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054f8:	2388      	movs	r3, #136	; 0x88
 80054fa:	2220      	movs	r2, #32
 80054fc:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005502:	0020      	movs	r0, r4
 8005504:	f7fd fa1e 	bl	8002944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005508:	e69e      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800550a:	0020      	movs	r0, r4
 800550c:	f000 fb84 	bl	8005c18 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005510:	e69a      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005512:	0020      	movs	r0, r4
 8005514:	f000 fb7f 	bl	8005c16 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005518:	e696      	b.n	8005248 <HAL_UART_IRQHandler+0x80>
 800551a:	46c0      	nop			; (mov r8, r8)

0800551c <UART_DMARxHalfCplt>:
{
 800551c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800551e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005520:	2301      	movs	r3, #1
 8005522:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d002      	beq.n	8005530 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800552a:	f7ff fe17 	bl	800515c <HAL_UART_RxHalfCpltCallback>
}
 800552e:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005530:	335b      	adds	r3, #91	; 0x5b
 8005532:	5ac1      	ldrh	r1, [r0, r3]
 8005534:	0849      	lsrs	r1, r1, #1
 8005536:	f7ff fe45 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
 800553a:	e7f8      	b.n	800552e <UART_DMARxHalfCplt+0x12>

0800553c <UART_DMAReceiveCplt>:
{
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005540:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	069b      	lsls	r3, r3, #26
 8005548:	d429      	bmi.n	800559e <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800554a:	235e      	movs	r3, #94	; 0x5e
 800554c:	2200      	movs	r2, #0
 800554e:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005550:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005554:	3b5d      	subs	r3, #93	; 0x5d
 8005556:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800555a:	6801      	ldr	r1, [r0, #0]
 800555c:	680a      	ldr	r2, [r1, #0]
 800555e:	4d1c      	ldr	r5, [pc, #112]	; (80055d0 <UART_DMAReceiveCplt+0x94>)
 8005560:	402a      	ands	r2, r5
 8005562:	600a      	str	r2, [r1, #0]
 8005564:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005568:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005570:	6801      	ldr	r1, [r0, #0]
 8005572:	688a      	ldr	r2, [r1, #8]
 8005574:	439a      	bics	r2, r3
 8005576:	608a      	str	r2, [r1, #8]
 8005578:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800557c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005584:	6802      	ldr	r2, [r0, #0]
 8005586:	6893      	ldr	r3, [r2, #8]
 8005588:	2440      	movs	r4, #64	; 0x40
 800558a:	43a3      	bics	r3, r4
 800558c:	6093      	str	r3, [r2, #8]
 800558e:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8005592:	238c      	movs	r3, #140	; 0x8c
 8005594:	2220      	movs	r2, #32
 8005596:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005598:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d007      	beq.n	80055ae <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800559e:	2300      	movs	r3, #0
 80055a0:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d00e      	beq.n	80055c6 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 80055a8:	f7fd f9ce 	bl	8002948 <HAL_UART_RxCpltCallback>
}
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b6:	6802      	ldr	r2, [r0, #0]
 80055b8:	6813      	ldr	r3, [r2, #0]
 80055ba:	3c30      	subs	r4, #48	; 0x30
 80055bc:	43a3      	bics	r3, r4
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	f381 8810 	msr	PRIMASK, r1
}
 80055c4:	e7eb      	b.n	800559e <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055c6:	335b      	adds	r3, #91	; 0x5b
 80055c8:	5ac1      	ldrh	r1, [r0, r3]
 80055ca:	f7ff fdfb 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
 80055ce:	e7ed      	b.n	80055ac <UART_DMAReceiveCplt+0x70>
 80055d0:	fffffeff 	.word	0xfffffeff

080055d4 <UART_SetConfig>:
{
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d8:	6801      	ldr	r1, [r0, #0]
 80055da:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055dc:	6883      	ldr	r3, [r0, #8]
 80055de:	6900      	ldr	r0, [r0, #16]
 80055e0:	4303      	orrs	r3, r0
 80055e2:	6960      	ldr	r0, [r4, #20]
 80055e4:	4303      	orrs	r3, r0
 80055e6:	69e0      	ldr	r0, [r4, #28]
 80055e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ea:	4873      	ldr	r0, [pc, #460]	; (80057b8 <UART_SetConfig+0x1e4>)
 80055ec:	4002      	ands	r2, r0
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	6853      	ldr	r3, [r2, #4]
 80055f6:	4971      	ldr	r1, [pc, #452]	; (80057bc <UART_SetConfig+0x1e8>)
 80055f8:	400b      	ands	r3, r1
 80055fa:	68e1      	ldr	r1, [r4, #12]
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005600:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005602:	6821      	ldr	r1, [r4, #0]
 8005604:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005606:	6a20      	ldr	r0, [r4, #32]
 8005608:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800560a:	486d      	ldr	r0, [pc, #436]	; (80057c0 <UART_SetConfig+0x1ec>)
 800560c:	4002      	ands	r2, r0
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005616:	210f      	movs	r1, #15
 8005618:	438b      	bics	r3, r1
 800561a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800561c:	430b      	orrs	r3, r1
 800561e:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	4a68      	ldr	r2, [pc, #416]	; (80057c4 <UART_SetConfig+0x1f0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d01e      	beq.n	8005666 <UART_SetConfig+0x92>
 8005628:	4a67      	ldr	r2, [pc, #412]	; (80057c8 <UART_SetConfig+0x1f4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d030      	beq.n	8005690 <UART_SetConfig+0xbc>
 800562e:	4a67      	ldr	r2, [pc, #412]	; (80057cc <UART_SetConfig+0x1f8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d100      	bne.n	8005636 <UART_SetConfig+0x62>
 8005634:	e08c      	b.n	8005750 <UART_SetConfig+0x17c>
 8005636:	4a66      	ldr	r2, [pc, #408]	; (80057d0 <UART_SetConfig+0x1fc>)
 8005638:	4694      	mov	ip, r2
 800563a:	4463      	add	r3, ip
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	4193      	sbcs	r3, r2
 8005640:	011b      	lsls	r3, r3, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005642:	2280      	movs	r2, #128	; 0x80
 8005644:	0212      	lsls	r2, r2, #8
 8005646:	69e1      	ldr	r1, [r4, #28]
 8005648:	4291      	cmp	r1, r2
 800564a:	d100      	bne.n	800564e <UART_SetConfig+0x7a>
 800564c:	e0ab      	b.n	80057a6 <UART_SetConfig+0x1d2>
    switch (clocksource)
 800564e:	2001      	movs	r0, #1
 8005650:	2b02      	cmp	r3, #2
 8005652:	d944      	bls.n	80056de <UART_SetConfig+0x10a>
  huart->NbTxDataToProcess = 1;
 8005654:	2301      	movs	r3, #1
 8005656:	226a      	movs	r2, #106	; 0x6a
 8005658:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800565a:	3a02      	subs	r2, #2
 800565c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8005662:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8005664:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005666:	4b5b      	ldr	r3, [pc, #364]	; (80057d4 <UART_SetConfig+0x200>)
 8005668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800566a:	2303      	movs	r3, #3
 800566c:	4013      	ands	r3, r2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d067      	beq.n	8005742 <UART_SetConfig+0x16e>
 8005672:	d85f      	bhi.n	8005734 <UART_SetConfig+0x160>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d02a      	beq.n	80056ce <UART_SetConfig+0xfa>
        ret = HAL_ERROR;
 8005678:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800567a:	2b01      	cmp	r3, #1
 800567c:	d1ea      	bne.n	8005654 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	69e2      	ldr	r2, [r4, #28]
 8005684:	429a      	cmp	r2, r3
 8005686:	d014      	beq.n	80056b2 <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetSysClockFreq();
 8005688:	f7fe ff2e 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 800568c:	0003      	movs	r3, r0
        break;
 800568e:	e02b      	b.n	80056e8 <UART_SetConfig+0x114>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005690:	4b50      	ldr	r3, [pc, #320]	; (80057d4 <UART_SetConfig+0x200>)
 8005692:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005694:	230c      	movs	r3, #12
 8005696:	4013      	ands	r3, r2
 8005698:	2b08      	cmp	r3, #8
 800569a:	d044      	beq.n	8005726 <UART_SetConfig+0x152>
 800569c:	d80d      	bhi.n	80056ba <UART_SetConfig+0xe6>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <UART_SetConfig+0xfe>
        ret = HAL_ERROR;
 80056a2:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d1d5      	bne.n	8005654 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	69e2      	ldr	r2, [r4, #28]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d1ea      	bne.n	8005688 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 80056b2:	f7fe ff19 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80056b6:	0003      	movs	r3, r0
        break;
 80056b8:	e052      	b.n	8005760 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 80056ba:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056bc:	2b0c      	cmp	r3, #12
 80056be:	d1c9      	bne.n	8005654 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056c0:	69e3      	ldr	r3, [r4, #28]
 80056c2:	2280      	movs	r2, #128	; 0x80
 80056c4:	0212      	lsls	r2, r2, #8
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d04e      	beq.n	8005768 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	0013      	movs	r3, r2
 80056cc:	e00f      	b.n	80056ee <UART_SetConfig+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ce:	2300      	movs	r3, #0
 80056d0:	e7b7      	b.n	8005642 <UART_SetConfig+0x6e>
 80056d2:	2300      	movs	r3, #0
 80056d4:	e7b5      	b.n	8005642 <UART_SetConfig+0x6e>
        pclk = (uint32_t) HSI_VALUE;
 80056d6:	4b40      	ldr	r3, [pc, #256]	; (80057d8 <UART_SetConfig+0x204>)
 80056d8:	e046      	b.n	8005768 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056da:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <UART_SetConfig+0x204>)
 80056dc:	e044      	b.n	8005768 <UART_SetConfig+0x194>
    switch (clocksource)
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11f      	bne.n	8005722 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e2:	f7ff f82b 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 80056e6:	0003      	movs	r3, r0
    if (pclk != 0U)
 80056e8:	2000      	movs	r0, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0b2      	beq.n	8005654 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ee:	6865      	ldr	r5, [r4, #4]
 80056f0:	4a3a      	ldr	r2, [pc, #232]	; (80057dc <UART_SetConfig+0x208>)
 80056f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056f4:	0049      	lsls	r1, r1, #1
 80056f6:	5a89      	ldrh	r1, [r1, r2]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7fa fd21 	bl	8000140 <__udivsi3>
 80056fe:	086b      	lsrs	r3, r5, #1
 8005700:	18c0      	adds	r0, r0, r3
 8005702:	0029      	movs	r1, r5
 8005704:	f7fa fd1c 	bl	8000140 <__udivsi3>
 8005708:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800570a:	0001      	movs	r1, r0
 800570c:	3910      	subs	r1, #16
 800570e:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 8005710:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005712:	4291      	cmp	r1, r2
 8005714:	d89e      	bhi.n	8005654 <UART_SetConfig+0x80>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	0c1b      	lsrs	r3, r3, #16
 800571c:	60d3      	str	r3, [r2, #12]
 800571e:	2000      	movs	r0, #0
 8005720:	e798      	b.n	8005654 <UART_SetConfig+0x80>
    switch (clocksource)
 8005722:	2001      	movs	r0, #1
 8005724:	e796      	b.n	8005654 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	69e2      	ldr	r2, [r4, #28]
 800572c:	429a      	cmp	r2, r3
 800572e:	d0d2      	beq.n	80056d6 <UART_SetConfig+0x102>
 8005730:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <UART_SetConfig+0x204>)
 8005732:	e7dc      	b.n	80056ee <UART_SetConfig+0x11a>
 8005734:	69e3      	ldr	r3, [r4, #28]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	0212      	lsls	r2, r2, #8
 800573a:	4293      	cmp	r3, r2
 800573c:	d014      	beq.n	8005768 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 800573e:	0013      	movs	r3, r2
 8005740:	e7d5      	b.n	80056ee <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	69e2      	ldr	r2, [r4, #28]
 8005748:	429a      	cmp	r2, r3
 800574a:	d0c6      	beq.n	80056da <UART_SetConfig+0x106>
        pclk = (uint32_t) HSI_VALUE;
 800574c:	4b22      	ldr	r3, [pc, #136]	; (80057d8 <UART_SetConfig+0x204>)
 800574e:	e7ce      	b.n	80056ee <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	69e2      	ldr	r2, [r4, #28]
 8005756:	429a      	cmp	r2, r3
 8005758:	d1c3      	bne.n	80056e2 <UART_SetConfig+0x10e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800575a:	f7fe ffef 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 800575e:	0003      	movs	r3, r0
    if (pclk != 0U)
 8005760:	2000      	movs	r0, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d100      	bne.n	8005768 <UART_SetConfig+0x194>
 8005766:	e775      	b.n	8005654 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005768:	6865      	ldr	r5, [r4, #4]
 800576a:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <UART_SetConfig+0x208>)
 800576c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800576e:	0049      	lsls	r1, r1, #1
 8005770:	5a89      	ldrh	r1, [r1, r2]
 8005772:	0018      	movs	r0, r3
 8005774:	f7fa fce4 	bl	8000140 <__udivsi3>
 8005778:	0040      	lsls	r0, r0, #1
 800577a:	086b      	lsrs	r3, r5, #1
 800577c:	18c0      	adds	r0, r0, r3
 800577e:	0029      	movs	r1, r5
 8005780:	f7fa fcde 	bl	8000140 <__udivsi3>
 8005784:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005786:	0001      	movs	r1, r0
 8005788:	3910      	subs	r1, #16
 800578a:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 800578c:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800578e:	4291      	cmp	r1, r2
 8005790:	d900      	bls.n	8005794 <UART_SetConfig+0x1c0>
 8005792:	e75f      	b.n	8005654 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <UART_SetConfig+0x210>)
 8005796:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8005798:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800579a:	071b      	lsls	r3, r3, #28
 800579c:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800579e:	4313      	orrs	r3, r2
 80057a0:	60cb      	str	r3, [r1, #12]
 80057a2:	2000      	movs	r0, #0
 80057a4:	e756      	b.n	8005654 <UART_SetConfig+0x80>
    switch (clocksource)
 80057a6:	2001      	movs	r0, #1
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d900      	bls.n	80057ae <UART_SetConfig+0x1da>
 80057ac:	e752      	b.n	8005654 <UART_SetConfig+0x80>
 80057ae:	2001      	movs	r0, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d000      	beq.n	80057b6 <UART_SetConfig+0x1e2>
 80057b4:	e74e      	b.n	8005654 <UART_SetConfig+0x80>
 80057b6:	e7d0      	b.n	800575a <UART_SetConfig+0x186>
 80057b8:	cfff69f3 	.word	0xcfff69f3
 80057bc:	ffffcfff 	.word	0xffffcfff
 80057c0:	11fff4ff 	.word	0x11fff4ff
 80057c4:	40013800 	.word	0x40013800
 80057c8:	40004400 	.word	0x40004400
 80057cc:	40004800 	.word	0x40004800
 80057d0:	bfffb400 	.word	0xbfffb400
 80057d4:	40021000 	.word	0x40021000
 80057d8:	00f42400 	.word	0x00f42400
 80057dc:	0800c128 	.word	0x0800c128
 80057e0:	0000ffef 	.word	0x0000ffef
 80057e4:	0000fff0 	.word	0x0000fff0

080057e8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80057ea:	07db      	lsls	r3, r3, #31
 80057ec:	d506      	bpl.n	80057fc <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ee:	6802      	ldr	r2, [r0, #0]
 80057f0:	6853      	ldr	r3, [r2, #4]
 80057f2:	492c      	ldr	r1, [pc, #176]	; (80058a4 <UART_AdvFeatureConfig+0xbc>)
 80057f4:	400b      	ands	r3, r1
 80057f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80057fe:	079b      	lsls	r3, r3, #30
 8005800:	d506      	bpl.n	8005810 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005802:	6802      	ldr	r2, [r0, #0]
 8005804:	6853      	ldr	r3, [r2, #4]
 8005806:	4928      	ldr	r1, [pc, #160]	; (80058a8 <UART_AdvFeatureConfig+0xc0>)
 8005808:	400b      	ands	r3, r1
 800580a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800580c:	430b      	orrs	r3, r1
 800580e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005810:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005812:	075b      	lsls	r3, r3, #29
 8005814:	d506      	bpl.n	8005824 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005816:	6802      	ldr	r2, [r0, #0]
 8005818:	6853      	ldr	r3, [r2, #4]
 800581a:	4924      	ldr	r1, [pc, #144]	; (80058ac <UART_AdvFeatureConfig+0xc4>)
 800581c:	400b      	ands	r3, r1
 800581e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005820:	430b      	orrs	r3, r1
 8005822:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005824:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005826:	071b      	lsls	r3, r3, #28
 8005828:	d506      	bpl.n	8005838 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582a:	6802      	ldr	r2, [r0, #0]
 800582c:	6853      	ldr	r3, [r2, #4]
 800582e:	4920      	ldr	r1, [pc, #128]	; (80058b0 <UART_AdvFeatureConfig+0xc8>)
 8005830:	400b      	ands	r3, r1
 8005832:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005834:	430b      	orrs	r3, r1
 8005836:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005838:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800583a:	06db      	lsls	r3, r3, #27
 800583c:	d506      	bpl.n	800584c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800583e:	6802      	ldr	r2, [r0, #0]
 8005840:	6893      	ldr	r3, [r2, #8]
 8005842:	491c      	ldr	r1, [pc, #112]	; (80058b4 <UART_AdvFeatureConfig+0xcc>)
 8005844:	400b      	ands	r3, r1
 8005846:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005848:	430b      	orrs	r3, r1
 800584a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800584e:	069b      	lsls	r3, r3, #26
 8005850:	d506      	bpl.n	8005860 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005852:	6802      	ldr	r2, [r0, #0]
 8005854:	6893      	ldr	r3, [r2, #8]
 8005856:	4918      	ldr	r1, [pc, #96]	; (80058b8 <UART_AdvFeatureConfig+0xd0>)
 8005858:	400b      	ands	r3, r1
 800585a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800585c:	430b      	orrs	r3, r1
 800585e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005860:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005862:	065b      	lsls	r3, r3, #25
 8005864:	d50b      	bpl.n	800587e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005866:	6802      	ldr	r2, [r0, #0]
 8005868:	6853      	ldr	r3, [r2, #4]
 800586a:	4914      	ldr	r1, [pc, #80]	; (80058bc <UART_AdvFeatureConfig+0xd4>)
 800586c:	400b      	ands	r3, r1
 800586e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005870:	430b      	orrs	r3, r1
 8005872:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005874:	2380      	movs	r3, #128	; 0x80
 8005876:	035b      	lsls	r3, r3, #13
 8005878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800587a:	429a      	cmp	r2, r3
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800587e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005880:	061b      	lsls	r3, r3, #24
 8005882:	d506      	bpl.n	8005892 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005884:	6802      	ldr	r2, [r0, #0]
 8005886:	6853      	ldr	r3, [r2, #4]
 8005888:	490d      	ldr	r1, [pc, #52]	; (80058c0 <UART_AdvFeatureConfig+0xd8>)
 800588a:	400b      	ands	r3, r1
 800588c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800588e:	430b      	orrs	r3, r1
 8005890:	6053      	str	r3, [r2, #4]
}
 8005892:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005894:	6802      	ldr	r2, [r0, #0]
 8005896:	6853      	ldr	r3, [r2, #4]
 8005898:	490a      	ldr	r1, [pc, #40]	; (80058c4 <UART_AdvFeatureConfig+0xdc>)
 800589a:	400b      	ands	r3, r1
 800589c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800589e:	430b      	orrs	r3, r1
 80058a0:	6053      	str	r3, [r2, #4]
 80058a2:	e7ec      	b.n	800587e <UART_AdvFeatureConfig+0x96>
 80058a4:	fffdffff 	.word	0xfffdffff
 80058a8:	fffeffff 	.word	0xfffeffff
 80058ac:	fffbffff 	.word	0xfffbffff
 80058b0:	ffff7fff 	.word	0xffff7fff
 80058b4:	ffffefff 	.word	0xffffefff
 80058b8:	ffffdfff 	.word	0xffffdfff
 80058bc:	ffefffff 	.word	0xffefffff
 80058c0:	fff7ffff 	.word	0xfff7ffff
 80058c4:	ff9fffff 	.word	0xff9fffff

080058c8 <UART_WaitOnFlagUntilTimeout>:
{
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	46de      	mov	lr, fp
 80058cc:	4657      	mov	r7, sl
 80058ce:	464e      	mov	r6, r9
 80058d0:	4645      	mov	r5, r8
 80058d2:	b5e0      	push	{r5, r6, r7, lr}
 80058d4:	4680      	mov	r8, r0
 80058d6:	000d      	movs	r5, r1
 80058d8:	0016      	movs	r6, r2
 80058da:	4699      	mov	r9, r3
 80058dc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058de:	2304      	movs	r3, #4
 80058e0:	469a      	mov	sl, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	469b      	mov	fp, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e8:	4643      	mov	r3, r8
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69dc      	ldr	r4, [r3, #28]
 80058ee:	402c      	ands	r4, r5
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	4262      	negs	r2, r4
 80058f4:	4154      	adcs	r4, r2
 80058f6:	42b4      	cmp	r4, r6
 80058f8:	d15e      	bne.n	80059b8 <UART_WaitOnFlagUntilTimeout+0xf0>
    if (Timeout != HAL_MAX_DELAY)
 80058fa:	1c7a      	adds	r2, r7, #1
 80058fc:	d0f6      	beq.n	80058ec <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fe:	f7fd fba5 	bl	800304c <HAL_GetTick>
 8005902:	464b      	mov	r3, r9
 8005904:	1ac0      	subs	r0, r0, r3
 8005906:	42b8      	cmp	r0, r7
 8005908:	d833      	bhi.n	8005972 <UART_WaitOnFlagUntilTimeout+0xaa>
 800590a:	2f00      	cmp	r7, #0
 800590c:	d031      	beq.n	8005972 <UART_WaitOnFlagUntilTimeout+0xaa>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800590e:	4643      	mov	r3, r8
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4651      	mov	r1, sl
 8005916:	4211      	tst	r1, r2
 8005918:	d0e6      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	4659      	mov	r1, fp
 800591e:	420a      	tst	r2, r1
 8005920:	d0e2      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005928:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592c:	2201      	movs	r2, #1
 800592e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005932:	4643      	mov	r3, r8
 8005934:	6819      	ldr	r1, [r3, #0]
 8005936:	680b      	ldr	r3, [r1, #0]
 8005938:	4c23      	ldr	r4, [pc, #140]	; (80059c8 <UART_WaitOnFlagUntilTimeout+0x100>)
 800593a:	4023      	ands	r3, r4
 800593c:	600b      	str	r3, [r1, #0]
 800593e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005942:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	4643      	mov	r3, r8
 800594c:	6819      	ldr	r1, [r3, #0]
 800594e:	688b      	ldr	r3, [r1, #8]
 8005950:	4393      	bics	r3, r2
 8005952:	608b      	str	r3, [r1, #8]
 8005954:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8005958:	2320      	movs	r3, #32
 800595a:	3287      	adds	r2, #135	; 0x87
 800595c:	4641      	mov	r1, r8
 800595e:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005960:	3204      	adds	r2, #4
 8005962:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005964:	3204      	adds	r2, #4
 8005966:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 8005968:	3364      	adds	r3, #100	; 0x64
 800596a:	2200      	movs	r2, #0
 800596c:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800596e:	2003      	movs	r0, #3
 8005970:	e023      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0xf2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005972:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005976:	2201      	movs	r2, #1
 8005978:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800597c:	4643      	mov	r3, r8
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	4c11      	ldr	r4, [pc, #68]	; (80059c8 <UART_WaitOnFlagUntilTimeout+0x100>)
 8005984:	4023      	ands	r3, r4
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005990:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	4643      	mov	r3, r8
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	688b      	ldr	r3, [r1, #8]
 800599a:	4393      	bics	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
 800599e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80059a2:	2320      	movs	r3, #32
 80059a4:	3287      	adds	r2, #135	; 0x87
 80059a6:	4641      	mov	r1, r8
 80059a8:	508b      	str	r3, [r1, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80059aa:	3204      	adds	r2, #4
 80059ac:	508b      	str	r3, [r1, r2]
        __HAL_UNLOCK(huart);
 80059ae:	3364      	adds	r3, #100	; 0x64
 80059b0:	2200      	movs	r2, #0
 80059b2:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80059b4:	2003      	movs	r0, #3
 80059b6:	e000      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0xf2>
  return HAL_OK;
 80059b8:	2000      	movs	r0, #0
}
 80059ba:	bcf0      	pop	{r4, r5, r6, r7}
 80059bc:	46bb      	mov	fp, r7
 80059be:	46b2      	mov	sl, r6
 80059c0:	46a9      	mov	r9, r5
 80059c2:	46a0      	mov	r8, r4
 80059c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	fffffe5f 	.word	0xfffffe5f

080059cc <UART_CheckIdleState>:
{
 80059cc:	b530      	push	{r4, r5, lr}
 80059ce:	b083      	sub	sp, #12
 80059d0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d2:	2390      	movs	r3, #144	; 0x90
 80059d4:	2200      	movs	r2, #0
 80059d6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80059d8:	f7fd fb38 	bl	800304c <HAL_GetTick>
 80059dc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	071b      	lsls	r3, r3, #28
 80059e4:	d410      	bmi.n	8005a08 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	075b      	lsls	r3, r3, #29
 80059ec:	d419      	bmi.n	8005a22 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 80059ee:	2320      	movs	r3, #32
 80059f0:	2288      	movs	r2, #136	; 0x88
 80059f2:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	3204      	adds	r2, #4
 80059f6:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f8:	2300      	movs	r3, #0
 80059fa:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059fc:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80059fe:	3a08      	subs	r2, #8
 8005a00:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005a02:	2000      	movs	r0, #0
}
 8005a04:	b003      	add	sp, #12
 8005a06:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <UART_CheckIdleState+0x70>)
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	0003      	movs	r3, r0
 8005a10:	2200      	movs	r2, #0
 8005a12:	0389      	lsls	r1, r1, #14
 8005a14:	0020      	movs	r0, r4
 8005a16:	f7ff ff57 	bl	80058c8 <UART_WaitOnFlagUntilTimeout>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0e3      	beq.n	80059e6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005a1e:	2003      	movs	r0, #3
 8005a20:	e7f0      	b.n	8005a04 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a22:	2180      	movs	r1, #128	; 0x80
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <UART_CheckIdleState+0x70>)
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	002b      	movs	r3, r5
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	03c9      	lsls	r1, r1, #15
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f7ff ff4a 	bl	80058c8 <UART_WaitOnFlagUntilTimeout>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d0da      	beq.n	80059ee <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8005a38:	2003      	movs	r0, #3
 8005a3a:	e7e3      	b.n	8005a04 <UART_CheckIdleState+0x38>
 8005a3c:	01ffffff 	.word	0x01ffffff

08005a40 <HAL_UART_Init>:
{
 8005a40:	b510      	push	{r4, lr}
 8005a42:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005a44:	d030      	beq.n	8005aa8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a46:	2388      	movs	r3, #136	; 0x88
 8005a48:	58c3      	ldr	r3, [r0, r3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d022      	beq.n	8005a94 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a4e:	2388      	movs	r3, #136	; 0x88
 8005a50:	2224      	movs	r2, #36	; 0x24
 8005a52:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	6813      	ldr	r3, [r2, #0]
 8005a58:	2101      	movs	r1, #1
 8005a5a:	438b      	bics	r3, r1
 8005a5c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f7ff fdb8 	bl	80055d4 <UART_SetConfig>
 8005a64:	2801      	cmp	r0, #1
 8005a66:	d014      	beq.n	8005a92 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d118      	bne.n	8005aa0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	6853      	ldr	r3, [r2, #4]
 8005a72:	490e      	ldr	r1, [pc, #56]	; (8005aac <HAL_UART_Init+0x6c>)
 8005a74:	400b      	ands	r3, r1
 8005a76:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	6893      	ldr	r3, [r2, #8]
 8005a7c:	212a      	movs	r1, #42	; 0x2a
 8005a7e:	438b      	bics	r3, r1
 8005a80:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	6813      	ldr	r3, [r2, #0]
 8005a86:	3929      	subs	r1, #41	; 0x29
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005a8c:	0020      	movs	r0, r4
 8005a8e:	f7ff ff9d 	bl	80059cc <UART_CheckIdleState>
}
 8005a92:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005a94:	3384      	adds	r3, #132	; 0x84
 8005a96:	2200      	movs	r2, #0
 8005a98:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8005a9a:	f7fd f895 	bl	8002bc8 <HAL_UART_MspInit>
 8005a9e:	e7d6      	b.n	8005a4e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8005aa0:	0020      	movs	r0, r4
 8005aa2:	f7ff fea1 	bl	80057e8 <UART_AdvFeatureConfig>
 8005aa6:	e7e2      	b.n	8005a6e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	e7f2      	b.n	8005a92 <HAL_UART_Init+0x52>
 8005aac:	ffffb7ff 	.word	0xffffb7ff

08005ab0 <UART_Start_Receive_DMA>:
{
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	0004      	movs	r4, r0
 8005ab4:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8005ab6:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8005ab8:	225c      	movs	r2, #92	; 0x5c
 8005aba:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	3234      	adds	r2, #52	; 0x34
 8005abe:	2100      	movs	r1, #0
 8005ac0:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac2:	3a04      	subs	r2, #4
 8005ac4:	3122      	adds	r1, #34	; 0x22
 8005ac6:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8005ac8:	3a0c      	subs	r2, #12
 8005aca:	5882      	ldr	r2, [r0, r2]
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	d013      	beq.n	8005af8 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ad0:	4921      	ldr	r1, [pc, #132]	; (8005b58 <UART_Start_Receive_DMA+0xa8>)
 8005ad2:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ad4:	2080      	movs	r0, #128	; 0x80
 8005ad6:	5822      	ldr	r2, [r4, r0]
 8005ad8:	4920      	ldr	r1, [pc, #128]	; (8005b5c <UART_Start_Receive_DMA+0xac>)
 8005ada:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005adc:	5822      	ldr	r2, [r4, r0]
 8005ade:	4920      	ldr	r1, [pc, #128]	; (8005b60 <UART_Start_Receive_DMA+0xb0>)
 8005ae0:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8005ae2:	5822      	ldr	r2, [r4, r0]
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005ae8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005aea:	6821      	ldr	r1, [r4, #0]
 8005aec:	3124      	adds	r1, #36	; 0x24
 8005aee:	5820      	ldr	r0, [r4, r0]
 8005af0:	f7fd ff28 	bl	8003944 <HAL_DMA_Start_IT>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d126      	bne.n	8005b46 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	2301      	movs	r3, #1
 8005b04:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	6810      	ldr	r0, [r2, #0]
 8005b0c:	33ff      	adds	r3, #255	; 0xff
 8005b0e:	4303      	orrs	r3, r0
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b16:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b20:	6821      	ldr	r1, [r4, #0]
 8005b22:	688a      	ldr	r2, [r1, #8]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	608a      	str	r2, [r1, #8]
 8005b28:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b30:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	6893      	ldr	r3, [r2, #8]
 8005b38:	2040      	movs	r0, #64	; 0x40
 8005b3a:	4303      	orrs	r3, r0
 8005b3c:	6093      	str	r3, [r2, #8]
 8005b3e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8005b42:	2000      	movs	r0, #0
}
 8005b44:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b46:	2390      	movs	r3, #144	; 0x90
 8005b48:	2210      	movs	r2, #16
 8005b4a:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	3b04      	subs	r3, #4
 8005b4e:	3210      	adds	r2, #16
 8005b50:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8005b52:	2001      	movs	r0, #1
 8005b54:	e7f6      	b.n	8005b44 <UART_Start_Receive_DMA+0x94>
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	0800553d 	.word	0x0800553d
 8005b5c:	0800551d 	.word	0x0800551d
 8005b60:	0800515f 	.word	0x0800515f

08005b64 <HAL_UART_Receive_DMA>:
{
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b68:	208c      	movs	r0, #140	; 0x8c
 8005b6a:	5818      	ldr	r0, [r3, r0]
 8005b6c:	2820      	cmp	r0, #32
 8005b6e:	d125      	bne.n	8005bbc <HAL_UART_Receive_DMA+0x58>
    if ((pData == NULL) || (Size == 0U))
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d025      	beq.n	8005bc0 <HAL_UART_Receive_DMA+0x5c>
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	d025      	beq.n	8005bc4 <HAL_UART_Receive_DMA+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b78:	2080      	movs	r0, #128	; 0x80
 8005b7a:	0140      	lsls	r0, r0, #5
 8005b7c:	689c      	ldr	r4, [r3, #8]
 8005b7e:	4284      	cmp	r4, r0
 8005b80:	d105      	bne.n	8005b8e <HAL_UART_Receive_DMA+0x2a>
 8005b82:	6918      	ldr	r0, [r3, #16]
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d102      	bne.n	8005b8e <HAL_UART_Receive_DMA+0x2a>
        return  HAL_ERROR;
 8005b88:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b8a:	07cc      	lsls	r4, r1, #31
 8005b8c:	d417      	bmi.n	8005bbe <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	2000      	movs	r0, #0
 8005b90:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	6840      	ldr	r0, [r0, #4]
 8005b96:	0200      	lsls	r0, r0, #8
 8005b98:	d50c      	bpl.n	8005bb4 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ba4:	681c      	ldr	r4, [r3, #0]
 8005ba6:	6825      	ldr	r5, [r4, #0]
 8005ba8:	2080      	movs	r0, #128	; 0x80
 8005baa:	04c0      	lsls	r0, r0, #19
 8005bac:	4328      	orrs	r0, r5
 8005bae:	6020      	str	r0, [r4, #0]
 8005bb0:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f7ff ff7b 	bl	8005ab0 <UART_Start_Receive_DMA>
 8005bba:	e000      	b.n	8005bbe <HAL_UART_Receive_DMA+0x5a>
    return HAL_BUSY;
 8005bbc:	2002      	movs	r0, #2
}
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e7fc      	b.n	8005bbe <HAL_UART_Receive_DMA+0x5a>
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e7fa      	b.n	8005bbe <HAL_UART_Receive_DMA+0x5a>

08005bc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bcc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8005bd2:	336a      	adds	r3, #106	; 0x6a
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 8005bd8:	2001      	movs	r0, #1
 8005bda:	2368      	movs	r3, #104	; 0x68
 8005bdc:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005be0:	6803      	ldr	r3, [r0, #0]
 8005be2:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005be8:	4f08      	ldr	r7, [pc, #32]	; (8005c0c <UARTEx_SetNbDataToProcess+0x44>)
 8005bea:	5cf8      	ldrb	r0, [r7, r3]
 8005bec:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bee:	4e08      	ldr	r6, [pc, #32]	; (8005c10 <UARTEx_SetNbDataToProcess+0x48>)
 8005bf0:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bf2:	f7fa fb2f 	bl	8000254 <__divsi3>
 8005bf6:	236a      	movs	r3, #106	; 0x6a
 8005bf8:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bfa:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bfc:	0f5b      	lsrs	r3, r3, #29
 8005bfe:	5cf8      	ldrb	r0, [r7, r3]
 8005c00:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c02:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c04:	f7fa fb26 	bl	8000254 <__divsi3>
 8005c08:	b280      	uxth	r0, r0
 8005c0a:	e7e6      	b.n	8005bda <UARTEx_SetNbDataToProcess+0x12>
 8005c0c:	0800c148 	.word	0x0800c148
 8005c10:	0800c140 	.word	0x0800c140

08005c14 <HAL_UARTEx_WakeupCallback>:
}
 8005c14:	4770      	bx	lr

08005c16 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005c16:	4770      	bx	lr

08005c18 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_UARTEx_DisableFifoMode>:
{
 8005c1c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8005c1e:	2384      	movs	r3, #132	; 0x84
 8005c20:	5cc3      	ldrb	r3, [r0, r3]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d015      	beq.n	8005c52 <HAL_UARTEx_DisableFifoMode+0x36>
 8005c26:	2484      	movs	r4, #132	; 0x84
 8005c28:	2601      	movs	r6, #1
 8005c2a:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c2c:	2588      	movs	r5, #136	; 0x88
 8005c2e:	2324      	movs	r3, #36	; 0x24
 8005c30:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c32:	6802      	ldr	r2, [r0, #0]
 8005c34:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005c36:	6811      	ldr	r1, [r2, #0]
 8005c38:	43b1      	bics	r1, r6
 8005c3a:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c3c:	4a06      	ldr	r2, [pc, #24]	; (8005c58 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8005c3e:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c40:	2200      	movs	r2, #0
 8005c42:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c44:	6801      	ldr	r1, [r0, #0]
 8005c46:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005c48:	2320      	movs	r3, #32
 8005c4a:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8005c4c:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8005c4e:	2000      	movs	r0, #0
}
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8005c52:	2002      	movs	r0, #2
 8005c54:	e7fc      	b.n	8005c50 <HAL_UARTEx_DisableFifoMode+0x34>
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	dfffffff 	.word	0xdfffffff

08005c5c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	0004      	movs	r4, r0
 8005c60:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8005c62:	2384      	movs	r3, #132	; 0x84
 8005c64:	5cc3      	ldrb	r3, [r0, r3]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d01b      	beq.n	8005ca2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005c6a:	2584      	movs	r5, #132	; 0x84
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c70:	2688      	movs	r6, #136	; 0x88
 8005c72:	2324      	movs	r3, #36	; 0x24
 8005c74:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005c7a:	6819      	ldr	r1, [r3, #0]
 8005c7c:	4381      	bics	r1, r0
 8005c7e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	6883      	ldr	r3, [r0, #8]
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	08d9      	lsrs	r1, r3, #3
 8005c88:	4311      	orrs	r1, r2
 8005c8a:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005c8c:	0020      	movs	r0, r4
 8005c8e:	f7ff ff9b 	bl	8005bc8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005c96:	2320      	movs	r3, #32
 8005c98:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005c9e:	2000      	movs	r0, #0
}
 8005ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8005ca2:	2002      	movs	r0, #2
 8005ca4:	e7fc      	b.n	8005ca0 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08005ca8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	0004      	movs	r4, r0
 8005cac:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8005cae:	2284      	movs	r2, #132	; 0x84
 8005cb0:	5c82      	ldrb	r2, [r0, r2]
 8005cb2:	2a01      	cmp	r2, #1
 8005cb4:	d01b      	beq.n	8005cee <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005cb6:	2584      	movs	r5, #132	; 0x84
 8005cb8:	2001      	movs	r0, #1
 8005cba:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8005cbc:	2688      	movs	r6, #136	; 0x88
 8005cbe:	2224      	movs	r2, #36	; 0x24
 8005cc0:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005cc6:	6811      	ldr	r1, [r2, #0]
 8005cc8:	4381      	bics	r1, r0
 8005cca:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ccc:	6822      	ldr	r2, [r4, #0]
 8005cce:	6891      	ldr	r1, [r2, #8]
 8005cd0:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8005cd2:	4001      	ands	r1, r0
 8005cd4:	4319      	orrs	r1, r3
 8005cd6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f7ff ff75 	bl	8005bc8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005ce2:	2320      	movs	r3, #32
 8005ce4:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005cea:	2000      	movs	r0, #0
}
 8005cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8005cee:	2002      	movs	r0, #2
 8005cf0:	e7fc      	b.n	8005cec <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	f1ffffff 	.word	0xf1ffffff

08005cf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cf8:	b510      	push	{r4, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <SysTick_Handler+0x18>)
 8005cfc:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005cfe:	f001 f87b 	bl	8006df8 <xTaskGetSchedulerState>
 8005d02:	2801      	cmp	r0, #1
 8005d04:	d100      	bne.n	8005d08 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8005d06:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 8005d08:	f001 fb34 	bl	8007374 <xPortSysTickHandler>
}
 8005d0c:	e7fb      	b.n	8005d06 <SysTick_Handler+0xe>
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	e000e010 	.word	0xe000e010

08005d14 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d14:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <osKernelInitialize+0x24>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d105      	bne.n	8005d30 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 8005d28:	4770      	bx	lr
    stat = osErrorISR;
 8005d2a:	2006      	movs	r0, #6
 8005d2c:	4240      	negs	r0, r0
 8005d2e:	e7fb      	b.n	8005d28 <osKernelInitialize+0x14>
      stat = osError;
 8005d30:	2001      	movs	r0, #1
 8005d32:	4240      	negs	r0, r0
  return (stat);
 8005d34:	e7f8      	b.n	8005d28 <osKernelInitialize+0x14>
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	200009ac 	.word	0x200009ac

08005d3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d3c:	b510      	push	{r4, lr}
 8005d3e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <osKernelStart+0x2a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <osKernelStart+0x38>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10e      	bne.n	8005d6c <osKernelStart+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <osKernelStart+0x3c>)
 8005d50:	69d3      	ldr	r3, [r2, #28]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	61d3      	str	r3, [r2, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <osKernelStart+0x38>)
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d5e:	f000 fdcd 	bl	80068fc <vTaskStartScheduler>
      stat = osOK;
 8005d62:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005d64:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8005d66:	2006      	movs	r0, #6
 8005d68:	4240      	negs	r0, r0
 8005d6a:	e7fb      	b.n	8005d64 <osKernelStart+0x28>
      stat = osError;
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	4240      	negs	r0, r0
  return (stat);
 8005d70:	e7f8      	b.n	8005d64 <osKernelStart+0x28>
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	200009ac 	.word	0x200009ac
 8005d78:	e000ed00 	.word	0xe000ed00

08005d7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d82:	2200      	movs	r2, #0
 8005d84:	9205      	str	r2, [sp, #20]
 8005d86:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	d12a      	bne.n	8005de4 <osThreadNew+0x68>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d028      	beq.n	8005de4 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d031      	beq.n	8005dfa <osThreadNew+0x7e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005d96:	69a3      	ldr	r3, [r4, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <osThreadNew+0x2c>
        prio = (UBaseType_t)attr->priority;
 8005d9c:	001d      	movs	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	2b37      	cmp	r3, #55	; 0x37
 8005da2:	d902      	bls.n	8005daa <osThreadNew+0x2e>
        return (NULL);
 8005da4:	2000      	movs	r0, #0
 8005da6:	e01e      	b.n	8005de6 <osThreadNew+0x6a>
 8005da8:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	07db      	lsls	r3, r3, #31
 8005dae:	d433      	bmi.n	8005e18 <osThreadNew+0x9c>
      }

      if (attr->stack_size > 0U) {
 8005db0:	6963      	ldr	r3, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 8005db2:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d000      	beq.n	8005dba <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005db8:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8005dba:	6826      	ldr	r6, [r4, #0]
 8005dbc:	46b4      	mov	ip, r6
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dbe:	68a6      	ldr	r6, [r4, #8]
 8005dc0:	2e00      	cmp	r6, #0
 8005dc2:	d012      	beq.n	8005dea <osThreadNew+0x6e>
 8005dc4:	68e7      	ldr	r7, [r4, #12]
 8005dc6:	2fa7      	cmp	r7, #167	; 0xa7
 8005dc8:	d90c      	bls.n	8005de4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dca:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dcc:	2c00      	cmp	r4, #0
 8005dce:	d009      	beq.n	8005de4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <osThreadNew+0x68>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dd4:	9602      	str	r6, [sp, #8]
 8005dd6:	9401      	str	r4, [sp, #4]
 8005dd8:	9500      	str	r5, [sp, #0]
 8005dda:	000b      	movs	r3, r1
 8005ddc:	4661      	mov	r1, ip
 8005dde:	f000 fd33 	bl	8006848 <xTaskCreateStatic>
 8005de2:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005de4:	9805      	ldr	r0, [sp, #20]
}
 8005de6:	b007      	add	sp, #28
 8005de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005dea:	68e3      	ldr	r3, [r4, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f9      	bne.n	8005de4 <osThreadNew+0x68>
      if (mem == 0) {
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	4664      	mov	r4, ip
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f5      	bne.n	8005de4 <osThreadNew+0x68>
 8005df8:	e001      	b.n	8005dfe <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;
 8005dfa:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8005dfc:	2280      	movs	r2, #128	; 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	ab05      	add	r3, sp, #20
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	9500      	str	r5, [sp, #0]
 8005e06:	000b      	movs	r3, r1
 8005e08:	0021      	movs	r1, r4
 8005e0a:	f000 fd47 	bl	800689c <xTaskCreate>
 8005e0e:	2801      	cmp	r0, #1
 8005e10:	d0e8      	beq.n	8005de4 <osThreadNew+0x68>
            hTask = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	e7e5      	b.n	8005de4 <osThreadNew+0x68>
        return (NULL);
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e7e4      	b.n	8005de6 <osThreadNew+0x6a>

08005e1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	0003      	movs	r3, r0
 8005e20:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	d108      	bne.n	8005e3a <osDelay+0x1e>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 8005e28:	2000      	movs	r0, #0

    if (ticks != 0U) {
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d100      	bne.n	8005e30 <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005e2e:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 fec5 	bl	8006bc0 <vTaskDelay>
    stat = osOK;
 8005e36:	2000      	movs	r0, #0
 8005e38:	e7f9      	b.n	8005e2e <osDelay+0x12>
    stat = osErrorISR;
 8005e3a:	2006      	movs	r0, #6
 8005e3c:	4240      	negs	r0, r0
 8005e3e:	e7f6      	b.n	8005e2e <osDelay+0x12>

08005e40 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	0014      	movs	r4, r2
 8005e46:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d132      	bne.n	8005eb4 <osMessageQueueNew+0x74>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d034      	beq.n	8005ebc <osMessageQueueNew+0x7c>
 8005e52:	2900      	cmp	r1, #0
 8005e54:	d034      	beq.n	8005ec0 <osMessageQueueNew+0x80>
    mem = -1;

    if (attr != NULL) {
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	d038      	beq.n	8005ecc <osMessageQueueNew+0x8c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e5a:	6895      	ldr	r5, [r2, #8]
 8005e5c:	2d00      	cmp	r5, #0
 8005e5e:	d00c      	beq.n	8005e7a <osMessageQueueNew+0x3a>
 8005e60:	68d3      	ldr	r3, [r2, #12]
 8005e62:	2b4f      	cmp	r3, #79	; 0x4f
 8005e64:	d92e      	bls.n	8005ec4 <osMessageQueueNew+0x84>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e66:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	d02d      	beq.n	8005ec8 <osMessageQueueNew+0x88>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e6c:	6966      	ldr	r6, [r4, #20]
 8005e6e:	000b      	movs	r3, r1
 8005e70:	4343      	muls	r3, r0
 8005e72:	429e      	cmp	r6, r3
 8005e74:	d216      	bcs.n	8005ea4 <osMessageQueueNew+0x64>
  hQueue = NULL;
 8005e76:	2500      	movs	r5, #0
 8005e78:	e01d      	b.n	8005eb6 <osMessageQueueNew+0x76>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e7a:	68d3      	ldr	r3, [r2, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11a      	bne.n	8005eb6 <osMessageQueueNew+0x76>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e80:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	d117      	bne.n	8005eb6 <osMessageQueueNew+0x76>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8005e86:	6963      	ldr	r3, [r4, #20]
  hQueue = NULL;
 8005e88:	0015      	movs	r5, r2
      if (mem == 0) {
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d113      	bne.n	8005eb6 <osMessageQueueNew+0x76>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f000 f97c 	bl	800618c <xQueueGenericCreate>
 8005e94:	1e05      	subs	r5, r0, #0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e96:	d00e      	beq.n	8005eb6 <osMessageQueueNew+0x76>
      if (attr != NULL) {
        name = attr->name;
 8005e98:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8005e9a:	0021      	movs	r1, r4
 8005e9c:	0028      	movs	r0, r5
 8005e9e:	f000 fb1f 	bl	80064e0 <vQueueAddToRegistry>
 8005ea2:	e008      	b.n	8005eb6 <osMessageQueueNew+0x76>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	002b      	movs	r3, r5
 8005eaa:	f000 f939 	bl	8006120 <xQueueGenericCreateStatic>
 8005eae:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8005eb0:	d1f2      	bne.n	8005e98 <osMessageQueueNew+0x58>
 8005eb2:	e000      	b.n	8005eb6 <osMessageQueueNew+0x76>
  hQueue = NULL;
 8005eb4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8005eb6:	0028      	movs	r0, r5
 8005eb8:	b002      	add	sp, #8
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	e7fa      	b.n	8005eb6 <osMessageQueueNew+0x76>
 8005ec0:	2500      	movs	r5, #0
 8005ec2:	e7f8      	b.n	8005eb6 <osMessageQueueNew+0x76>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	e7f6      	b.n	8005eb6 <osMessageQueueNew+0x76>
 8005ec8:	0015      	movs	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8005eca:	e7f4      	b.n	8005eb6 <osMessageQueueNew+0x76>
          hQueue = xQueueCreate (msg_count, msg_size);
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f000 f95d 	bl	800618c <xQueueGenericCreate>
 8005ed2:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8005ed4:	d0ef      	beq.n	8005eb6 <osMessageQueueNew+0x76>
 8005ed6:	e7e0      	b.n	8005e9a <osMessageQueueNew+0x5a>

08005ed8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ed8:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <vApplicationGetIdleTaskMemory+0x10>)
 8005eda:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <vApplicationGetIdleTaskMemory+0x14>)
 8005ede:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	4770      	bx	lr
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	20000904 	.word	0x20000904
 8005eec:	20000704 	.word	0x20000704

08005ef0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <vApplicationGetTimerTaskMemory+0x10>)
 8005ef2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ef4:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <vApplicationGetTimerTaskMemory+0x14>)
 8005ef6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
}
 8005efe:	4770      	bx	lr
 8005f00:	20000db0 	.word	0x20000db0
 8005f04:	200009b0 	.word	0x200009b0

08005f08 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f08:	0003      	movs	r3, r0
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4252      	negs	r2, r2
 8005f12:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f14:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f16:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f1c:	4770      	bx	lr

08005f1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f22:	4770      	bx	lr

08005f24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f24:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f26:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f2c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f2e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005f32:	6803      	ldr	r3, [r0, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	6003      	str	r3, [r0, #0]
}
 8005f38:	4770      	bx	lr

08005f3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f3a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f3c:	680d      	ldr	r5, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f3e:	0003      	movs	r3, r0
 8005f40:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8005f42:	1c6a      	adds	r2, r5, #1
 8005f44:	d00e      	beq.n	8005f64 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f46:	001c      	movs	r4, r3
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	42aa      	cmp	r2, r5
 8005f4e:	d9fa      	bls.n	8005f46 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f54:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f56:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f58:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f5a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005f5c:	6803      	ldr	r3, [r0, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	6003      	str	r3, [r0, #0]
}
 8005f62:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f64:	6904      	ldr	r4, [r0, #16]
 8005f66:	e7f3      	b.n	8005f50 <vListInsert+0x16>

08005f68 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f68:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f6a:	6841      	ldr	r1, [r0, #4]
 8005f6c:	6882      	ldr	r2, [r0, #8]
 8005f6e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f70:	6841      	ldr	r1, [r0, #4]
 8005f72:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	4282      	cmp	r2, r0
 8005f78:	d006      	beq.n	8005f88 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	3a01      	subs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f84:	6818      	ldr	r0, [r3, #0]
}
 8005f86:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f88:	6882      	ldr	r2, [r0, #8]
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	e7f5      	b.n	8005f7a <uxListRemove+0x12>

08005f8e <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f92:	f001 f9a5 	bl	80072e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f96:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005f98:	f001 f9ae 	bl	80072f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f9c:	4260      	negs	r0, r4
 8005f9e:	4160      	adcs	r0, r4

	return xReturn;
}
 8005fa0:	bd10      	pop	{r4, pc}

08005fa2 <prvCopyDataToQueue>:
{
 8005fa2:	b570      	push	{r4, r5, r6, lr}
 8005fa4:	0004      	movs	r4, r0
 8005fa6:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fa8:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005faa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	d10c      	bne.n	8005fca <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fb0:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
 8005fb2:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <prvCopyDataToQueue+0x1c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fb8:	3501      	adds	r5, #1
 8005fba:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005fbc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fbe:	68a0      	ldr	r0, [r4, #8]
 8005fc0:	f000 ff2a 	bl	8006e18 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60a3      	str	r3, [r4, #8]
 8005fc8:	e7f6      	b.n	8005fb8 <prvCopyDataToQueue+0x16>
	else if( xPosition == queueSEND_TO_BACK )
 8005fca:	2e00      	cmp	r6, #0
 8005fcc:	d10d      	bne.n	8005fea <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fce:	6840      	ldr	r0, [r0, #4]
 8005fd0:	f002 fbaa 	bl	8008728 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fd8:	189b      	adds	r3, r3, r2
 8005fda:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fdc:	68a2      	ldr	r2, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005fde:	0030      	movs	r0, r6
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d3e9      	bcc.n	8005fb8 <prvCopyDataToQueue+0x16>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	e7e6      	b.n	8005fb8 <prvCopyDataToQueue+0x16>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fea:	68c0      	ldr	r0, [r0, #12]
 8005fec:	f002 fb9c 	bl	8008728 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ff0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ff2:	4251      	negs	r1, r2
 8005ff4:	68e3      	ldr	r3, [r4, #12]
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ffa:	6822      	ldr	r2, [r4, #0]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d202      	bcs.n	8006006 <prvCopyDataToQueue+0x64>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006000:	68a3      	ldr	r3, [r4, #8]
 8006002:	185b      	adds	r3, r3, r1
 8006004:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
 8006006:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 8006008:	2e02      	cmp	r6, #2
 800600a:	d1d5      	bne.n	8005fb8 <prvCopyDataToQueue+0x16>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800600c:	2d00      	cmp	r5, #0
 800600e:	d0d3      	beq.n	8005fb8 <prvCopyDataToQueue+0x16>
				--uxMessagesWaiting;
 8006010:	3d01      	subs	r5, #1
 8006012:	e7d1      	b.n	8005fb8 <prvCopyDataToQueue+0x16>

08006014 <prvCopyDataFromQueue>:
{
 8006014:	b510      	push	{r4, lr}
 8006016:	0003      	movs	r3, r0
 8006018:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800601a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800601c:	2a00      	cmp	r2, #0
 800601e:	d00a      	beq.n	8006036 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006020:	68dc      	ldr	r4, [r3, #12]
 8006022:	18a4      	adds	r4, r4, r2
 8006024:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006026:	6899      	ldr	r1, [r3, #8]
 8006028:	428c      	cmp	r4, r1
 800602a:	d301      	bcc.n	8006030 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006030:	68d9      	ldr	r1, [r3, #12]
 8006032:	f002 fb79 	bl	8008728 <memcpy>
}
 8006036:	bd10      	pop	{r4, pc}

08006038 <prvUnlockQueue>:
{
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 800603c:	f001 f950 	bl	80072e0 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006040:	2345      	movs	r3, #69	; 0x45
 8006042:	5cec      	ldrb	r4, [r5, r3]
 8006044:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006046:	2c00      	cmp	r4, #0
 8006048:	dd11      	ble.n	800606e <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800604a:	002e      	movs	r6, r5
 800604c:	3624      	adds	r6, #36	; 0x24
 800604e:	e003      	b.n	8006058 <prvUnlockQueue+0x20>
			--cTxLock;
 8006050:	3c01      	subs	r4, #1
 8006052:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006054:	2c00      	cmp	r4, #0
 8006056:	d00a      	beq.n	800606e <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006058:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800605e:	0030      	movs	r0, r6
 8006060:	f000 fe44 	bl	8006cec <xTaskRemoveFromEventList>
 8006064:	2800      	cmp	r0, #0
 8006066:	d0f3      	beq.n	8006050 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8006068:	f000 fec0 	bl	8006dec <vTaskMissedYield>
 800606c:	e7f0      	b.n	8006050 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 800606e:	2345      	movs	r3, #69	; 0x45
 8006070:	22ff      	movs	r2, #255	; 0xff
 8006072:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 8006074:	f001 f940 	bl	80072f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006078:	f001 f932 	bl	80072e0 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800607c:	2344      	movs	r3, #68	; 0x44
 800607e:	5cec      	ldrb	r4, [r5, r3]
 8006080:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006082:	2c00      	cmp	r4, #0
 8006084:	dd11      	ble.n	80060aa <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006086:	002e      	movs	r6, r5
 8006088:	3610      	adds	r6, #16
 800608a:	e003      	b.n	8006094 <prvUnlockQueue+0x5c>
				--cRxLock;
 800608c:	3c01      	subs	r4, #1
 800608e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006090:	2c00      	cmp	r4, #0
 8006092:	d00a      	beq.n	80060aa <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006094:	692b      	ldr	r3, [r5, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	0030      	movs	r0, r6
 800609c:	f000 fe26 	bl	8006cec <xTaskRemoveFromEventList>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d0f3      	beq.n	800608c <prvUnlockQueue+0x54>
					vTaskMissedYield();
 80060a4:	f000 fea2 	bl	8006dec <vTaskMissedYield>
 80060a8:	e7f0      	b.n	800608c <prvUnlockQueue+0x54>
		pxQueue->cRxLock = queueUNLOCKED;
 80060aa:	2344      	movs	r3, #68	; 0x44
 80060ac:	22ff      	movs	r2, #255	; 0xff
 80060ae:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 80060b0:	f001 f922 	bl	80072f8 <vPortExitCritical>
}
 80060b4:	bd70      	pop	{r4, r5, r6, pc}

080060b6 <xQueueGenericReset>:
{
 80060b6:	b570      	push	{r4, r5, r6, lr}
 80060b8:	0004      	movs	r4, r0
 80060ba:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 80060bc:	2800      	cmp	r0, #0
 80060be:	d01b      	beq.n	80060f8 <xQueueGenericReset+0x42>
	taskENTER_CRITICAL();
 80060c0:	f001 f90e 	bl	80072e0 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80060c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060ca:	434b      	muls	r3, r1
 80060cc:	18d0      	adds	r0, r2, r3
 80060ce:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060d0:	2000      	movs	r0, #0
 80060d2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060d4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060d6:	1a5b      	subs	r3, r3, r1
 80060d8:	18d2      	adds	r2, r2, r3
 80060da:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060dc:	23ff      	movs	r3, #255	; 0xff
 80060de:	2244      	movs	r2, #68	; 0x44
 80060e0:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80060e2:	3201      	adds	r2, #1
 80060e4:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	d111      	bne.n	800610e <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <xQueueGenericReset+0x46>
	taskEXIT_CRITICAL();
 80060f0:	f001 f902 	bl	80072f8 <vPortExitCritical>
}
 80060f4:	2001      	movs	r0, #1
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 80060f8:	b672      	cpsid	i
 80060fa:	e7fe      	b.n	80060fa <xQueueGenericReset+0x44>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fc:	0020      	movs	r0, r4
 80060fe:	3010      	adds	r0, #16
 8006100:	f000 fdf4 	bl	8006cec <xTaskRemoveFromEventList>
 8006104:	2800      	cmp	r0, #0
 8006106:	d0f3      	beq.n	80060f0 <xQueueGenericReset+0x3a>
					queueYIELD_IF_USING_PREEMPTION();
 8006108:	f001 f8de 	bl	80072c8 <vPortYield>
 800610c:	e7f0      	b.n	80060f0 <xQueueGenericReset+0x3a>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800610e:	0020      	movs	r0, r4
 8006110:	3010      	adds	r0, #16
 8006112:	f7ff fef9 	bl	8005f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006116:	0020      	movs	r0, r4
 8006118:	3024      	adds	r0, #36	; 0x24
 800611a:	f7ff fef5 	bl	8005f08 <vListInitialise>
 800611e:	e7e7      	b.n	80060f0 <xQueueGenericReset+0x3a>

08006120 <xQueueGenericCreateStatic>:
	{
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	001d      	movs	r5, r3
 8006126:	ac06      	add	r4, sp, #24
 8006128:	7824      	ldrb	r4, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800612a:	2800      	cmp	r0, #0
 800612c:	d101      	bne.n	8006132 <xQueueGenericCreateStatic+0x12>
 800612e:	b672      	cpsid	i
 8006130:	e7fe      	b.n	8006130 <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006136:	2a00      	cmp	r2, #0
 8006138:	d005      	beq.n	8006146 <xQueueGenericCreateStatic+0x26>
 800613a:	2900      	cmp	r1, #0
 800613c:	d107      	bne.n	800614e <xQueueGenericCreateStatic+0x2e>
 800613e:	b672      	cpsid	i
 8006140:	e7fe      	b.n	8006140 <xQueueGenericCreateStatic+0x20>
		configASSERT( pxStaticQueue != NULL );
 8006142:	b672      	cpsid	i
 8006144:	e7fe      	b.n	8006144 <xQueueGenericCreateStatic+0x24>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006146:	2900      	cmp	r1, #0
 8006148:	d018      	beq.n	800617c <xQueueGenericCreateStatic+0x5c>
 800614a:	b672      	cpsid	i
 800614c:	e7fe      	b.n	800614c <xQueueGenericCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800614e:	2350      	movs	r3, #80	; 0x50
 8006150:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	2b50      	cmp	r3, #80	; 0x50
 8006156:	d001      	beq.n	800615c <xQueueGenericCreateStatic+0x3c>
 8006158:	b672      	cpsid	i
 800615a:	e7fe      	b.n	800615a <xQueueGenericCreateStatic+0x3a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800615c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800615e:	2346      	movs	r3, #70	; 0x46
 8006160:	2601      	movs	r6, #1
 8006162:	54ee      	strb	r6, [r5, r3]
 8006164:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006166:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006168:	6429      	str	r1, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800616a:	2101      	movs	r1, #1
 800616c:	0028      	movs	r0, r5
 800616e:	f7ff ffa2 	bl	80060b6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006172:	234c      	movs	r3, #76	; 0x4c
 8006174:	54ec      	strb	r4, [r5, r3]
	}
 8006176:	0028      	movs	r0, r5
 8006178:	b002      	add	sp, #8
 800617a:	bd70      	pop	{r4, r5, r6, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 800617c:	2350      	movs	r3, #80	; 0x50
 800617e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	2b50      	cmp	r3, #80	; 0x50
 8006184:	d1e8      	bne.n	8006158 <xQueueGenericCreateStatic+0x38>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006186:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006188:	002a      	movs	r2, r5
 800618a:	e7e8      	b.n	800615e <xQueueGenericCreateStatic+0x3e>

0800618c <xQueueGenericCreate>:
	{
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	0004      	movs	r4, r0
 8006190:	000d      	movs	r5, r1
 8006192:	0016      	movs	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006194:	2800      	cmp	r0, #0
 8006196:	d101      	bne.n	800619c <xQueueGenericCreate+0x10>
 8006198:	b672      	cpsid	i
 800619a:	e7fe      	b.n	800619a <xQueueGenericCreate+0xe>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800619c:	0008      	movs	r0, r1
 800619e:	4360      	muls	r0, r4
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061a0:	3050      	adds	r0, #80	; 0x50
 80061a2:	f001 f95f 	bl	8007464 <pvPortMalloc>
 80061a6:	1e07      	subs	r7, r0, #0
		if( pxNewQueue != NULL )
 80061a8:	d00f      	beq.n	80061ca <xQueueGenericCreate+0x3e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061aa:	2346      	movs	r3, #70	; 0x46
 80061ac:	2200      	movs	r2, #0
 80061ae:	54c2      	strb	r2, [r0, r3]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061b0:	0003      	movs	r3, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	d000      	beq.n	80061b8 <xQueueGenericCreate+0x2c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061b6:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061b8:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80061ba:	63fc      	str	r4, [r7, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061bc:	643d      	str	r5, [r7, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061be:	2101      	movs	r1, #1
 80061c0:	0038      	movs	r0, r7
 80061c2:	f7ff ff78 	bl	80060b6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80061c6:	234c      	movs	r3, #76	; 0x4c
 80061c8:	54fe      	strb	r6, [r7, r3]
	}
 80061ca:	0038      	movs	r0, r7
 80061cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061ce <xQueueGenericSend>:
{
 80061ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d0:	46d6      	mov	lr, sl
 80061d2:	464f      	mov	r7, r9
 80061d4:	4646      	mov	r6, r8
 80061d6:	b5c0      	push	{r6, r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	0004      	movs	r4, r0
 80061dc:	4688      	mov	r8, r1
 80061de:	9201      	str	r2, [sp, #4]
 80061e0:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d008      	beq.n	80061f8 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061e6:	2900      	cmp	r1, #0
 80061e8:	d008      	beq.n	80061fc <xQueueGenericSend+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061ea:	2d02      	cmp	r5, #2
 80061ec:	d10b      	bne.n	8006206 <xQueueGenericSend+0x38>
 80061ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d008      	beq.n	8006206 <xQueueGenericSend+0x38>
 80061f4:	b672      	cpsid	i
 80061f6:	e7fe      	b.n	80061f6 <xQueueGenericSend+0x28>
	configASSERT( pxQueue );
 80061f8:	b672      	cpsid	i
 80061fa:	e7fe      	b.n	80061fa <xQueueGenericSend+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f3      	beq.n	80061ea <xQueueGenericSend+0x1c>
 8006202:	b672      	cpsid	i
 8006204:	e7fe      	b.n	8006204 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006206:	f000 fdf7 	bl	8006df8 <xTaskGetSchedulerState>
 800620a:	2800      	cmp	r0, #0
 800620c:	d104      	bne.n	8006218 <xQueueGenericSend+0x4a>
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d006      	beq.n	8006222 <xQueueGenericSend+0x54>
 8006214:	b672      	cpsid	i
 8006216:	e7fe      	b.n	8006216 <xQueueGenericSend+0x48>
 8006218:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800621a:	2744      	movs	r7, #68	; 0x44
 800621c:	2300      	movs	r3, #0
 800621e:	4699      	mov	r9, r3
 8006220:	e034      	b.n	800628c <xQueueGenericSend+0xbe>
 8006222:	2600      	movs	r6, #0
 8006224:	e7f9      	b.n	800621a <xQueueGenericSend+0x4c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006226:	002a      	movs	r2, r5
 8006228:	4641      	mov	r1, r8
 800622a:	0020      	movs	r0, r4
 800622c:	f7ff feb9 	bl	8005fa2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <xQueueGenericSend+0x7e>
					else if( xYieldRequired != pdFALSE )
 8006236:	2800      	cmp	r0, #0
 8006238:	d111      	bne.n	800625e <xQueueGenericSend+0x90>
				taskEXIT_CRITICAL();
 800623a:	f001 f85d 	bl	80072f8 <vPortExitCritical>
				return pdPASS;
 800623e:	2001      	movs	r0, #1
}
 8006240:	b004      	add	sp, #16
 8006242:	bce0      	pop	{r5, r6, r7}
 8006244:	46ba      	mov	sl, r7
 8006246:	46b1      	mov	r9, r6
 8006248:	46a8      	mov	r8, r5
 800624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800624c:	0020      	movs	r0, r4
 800624e:	3024      	adds	r0, #36	; 0x24
 8006250:	f000 fd4c 	bl	8006cec <xTaskRemoveFromEventList>
 8006254:	2800      	cmp	r0, #0
 8006256:	d0f0      	beq.n	800623a <xQueueGenericSend+0x6c>
							queueYIELD_IF_USING_PREEMPTION();
 8006258:	f001 f836 	bl	80072c8 <vPortYield>
 800625c:	e7ed      	b.n	800623a <xQueueGenericSend+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800625e:	f001 f833 	bl	80072c8 <vPortYield>
 8006262:	e7ea      	b.n	800623a <xQueueGenericSend+0x6c>
					taskEXIT_CRITICAL();
 8006264:	f001 f848 	bl	80072f8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006268:	2000      	movs	r0, #0
 800626a:	e7e9      	b.n	8006240 <xQueueGenericSend+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800626c:	a802      	add	r0, sp, #8
 800626e:	f000 fd7d 	bl	8006d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006272:	e018      	b.n	80062a6 <xQueueGenericSend+0xd8>
		prvLockQueue( pxQueue );
 8006274:	464b      	mov	r3, r9
 8006276:	55e3      	strb	r3, [r4, r7]
 8006278:	e01f      	b.n	80062ba <xQueueGenericSend+0xec>
 800627a:	464a      	mov	r2, r9
 800627c:	54e2      	strb	r2, [r4, r3]
 800627e:	e021      	b.n	80062c4 <xQueueGenericSend+0xf6>
				prvUnlockQueue( pxQueue );
 8006280:	0020      	movs	r0, r4
 8006282:	f7ff fed9 	bl	8006038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006286:	f000 fc23 	bl	8006ad0 <xTaskResumeAll>
 800628a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800628c:	f001 f828 	bl	80072e0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006290:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006292:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006294:	429a      	cmp	r2, r3
 8006296:	d3c6      	bcc.n	8006226 <xQueueGenericSend+0x58>
 8006298:	2d02      	cmp	r5, #2
 800629a:	d0c4      	beq.n	8006226 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0e0      	beq.n	8006264 <xQueueGenericSend+0x96>
				else if( xEntryTimeSet == pdFALSE )
 80062a2:	2e00      	cmp	r6, #0
 80062a4:	d0e2      	beq.n	800626c <xQueueGenericSend+0x9e>
		taskEXIT_CRITICAL();
 80062a6:	f001 f827 	bl	80072f8 <vPortExitCritical>
		vTaskSuspendAll();
 80062aa:	f000 fb69 	bl	8006980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ae:	f001 f817 	bl	80072e0 <vPortEnterCritical>
 80062b2:	5de3      	ldrb	r3, [r4, r7]
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	3301      	adds	r3, #1
 80062b8:	d0dc      	beq.n	8006274 <xQueueGenericSend+0xa6>
 80062ba:	2345      	movs	r3, #69	; 0x45
 80062bc:	5ce2      	ldrb	r2, [r4, r3]
 80062be:	b252      	sxtb	r2, r2
 80062c0:	3201      	adds	r2, #1
 80062c2:	d0da      	beq.n	800627a <xQueueGenericSend+0xac>
 80062c4:	f001 f818 	bl	80072f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c8:	a901      	add	r1, sp, #4
 80062ca:	a802      	add	r0, sp, #8
 80062cc:	f000 fd5a 	bl	8006d84 <xTaskCheckForTimeOut>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d117      	bne.n	8006304 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062d4:	f001 f804 	bl	80072e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062da:	469a      	mov	sl, r3
 80062dc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80062de:	f001 f80b 	bl	80072f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062e2:	45b2      	cmp	sl, r6
 80062e4:	d1cc      	bne.n	8006280 <xQueueGenericSend+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062e6:	9901      	ldr	r1, [sp, #4]
 80062e8:	0020      	movs	r0, r4
 80062ea:	3010      	adds	r0, #16
 80062ec:	f000 fcd4 	bl	8006c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062f0:	0020      	movs	r0, r4
 80062f2:	f7ff fea1 	bl	8006038 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062f6:	f000 fbeb 	bl	8006ad0 <xTaskResumeAll>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d1c5      	bne.n	800628a <xQueueGenericSend+0xbc>
					portYIELD_WITHIN_API();
 80062fe:	f000 ffe3 	bl	80072c8 <vPortYield>
 8006302:	e7c2      	b.n	800628a <xQueueGenericSend+0xbc>
			prvUnlockQueue( pxQueue );
 8006304:	0020      	movs	r0, r4
 8006306:	f7ff fe97 	bl	8006038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800630a:	f000 fbe1 	bl	8006ad0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800630e:	2000      	movs	r0, #0
 8006310:	e796      	b.n	8006240 <xQueueGenericSend+0x72>

08006312 <xQueueGenericSendFromISR>:
{
 8006312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006314:	46c6      	mov	lr, r8
 8006316:	b500      	push	{lr}
 8006318:	b082      	sub	sp, #8
 800631a:	0004      	movs	r4, r0
 800631c:	000f      	movs	r7, r1
 800631e:	9201      	str	r2, [sp, #4]
 8006320:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8006322:	2800      	cmp	r0, #0
 8006324:	d008      	beq.n	8006338 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006326:	2900      	cmp	r1, #0
 8006328:	d008      	beq.n	800633c <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800632a:	2d02      	cmp	r5, #2
 800632c:	d135      	bne.n	800639a <xQueueGenericSendFromISR+0x88>
 800632e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d01a      	beq.n	800636a <xQueueGenericSendFromISR+0x58>
 8006334:	b672      	cpsid	i
 8006336:	e7fe      	b.n	8006336 <xQueueGenericSendFromISR+0x24>
	configASSERT( pxQueue );
 8006338:	b672      	cpsid	i
 800633a:	e7fe      	b.n	800633a <xQueueGenericSendFromISR+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800633c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f3      	beq.n	800632a <xQueueGenericSendFromISR+0x18>
 8006342:	b672      	cpsid	i
 8006344:	e7fe      	b.n	8006344 <xQueueGenericSendFromISR+0x32>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006346:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 8006348:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800634a:	2b00      	cmp	r3, #0
 800634c:	d02d      	beq.n	80063aa <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800634e:	0020      	movs	r0, r4
 8006350:	3024      	adds	r0, #36	; 0x24
 8006352:	f000 fccb 	bl	8006cec <xTaskRemoveFromEventList>
 8006356:	2800      	cmp	r0, #0
 8006358:	d027      	beq.n	80063aa <xQueueGenericSendFromISR+0x98>
							if( pxHigherPriorityTaskWoken != NULL )
 800635a:	9a01      	ldr	r2, [sp, #4]
 800635c:	2a00      	cmp	r2, #0
 800635e:	d002      	beq.n	8006366 <xQueueGenericSendFromISR+0x54>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006360:	2301      	movs	r3, #1
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e021      	b.n	80063aa <xQueueGenericSendFromISR+0x98>
			xReturn = pdPASS;
 8006366:	2501      	movs	r5, #1
 8006368:	e01f      	b.n	80063aa <xQueueGenericSendFromISR+0x98>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800636a:	f000 ffd5 	bl	8007318 <ulSetInterruptMaskFromISR>
 800636e:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8006372:	2345      	movs	r3, #69	; 0x45
 8006374:	5ce3      	ldrb	r3, [r4, r3]
 8006376:	b25b      	sxtb	r3, r3
 8006378:	4698      	mov	r8, r3
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800637a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800637c:	002a      	movs	r2, r5
 800637e:	0039      	movs	r1, r7
 8006380:	0020      	movs	r0, r4
 8006382:	f7ff fe0e 	bl	8005fa2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006386:	4643      	mov	r3, r8
 8006388:	3301      	adds	r3, #1
 800638a:	d0dc      	beq.n	8006346 <xQueueGenericSendFromISR+0x34>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800638c:	4643      	mov	r3, r8
 800638e:	3301      	adds	r3, #1
 8006390:	b25b      	sxtb	r3, r3
 8006392:	2245      	movs	r2, #69	; 0x45
 8006394:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
 8006396:	2501      	movs	r5, #1
 8006398:	e007      	b.n	80063aa <xQueueGenericSendFromISR+0x98>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800639a:	f000 ffbd 	bl	8007318 <ulSetInterruptMaskFromISR>
 800639e:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80063a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3e4      	bcc.n	8006372 <xQueueGenericSendFromISR+0x60>
			xReturn = errQUEUE_FULL;
 80063a8:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80063aa:	0030      	movs	r0, r6
 80063ac:	f000 ffb8 	bl	8007320 <vClearInterruptMaskFromISR>
}
 80063b0:	0028      	movs	r0, r5
 80063b2:	b002      	add	sp, #8
 80063b4:	bc80      	pop	{r7}
 80063b6:	46b8      	mov	r8, r7
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063ba <xQueueReceive>:
{
 80063ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063bc:	46ce      	mov	lr, r9
 80063be:	4647      	mov	r7, r8
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b085      	sub	sp, #20
 80063c4:	1e04      	subs	r4, r0, #0
 80063c6:	4688      	mov	r8, r1
 80063c8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80063ca:	d00a      	beq.n	80063e2 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d00a      	beq.n	80063e6 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063d0:	f000 fd12 	bl	8006df8 <xTaskGetSchedulerState>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d10b      	bne.n	80063f0 <xQueueReceive+0x36>
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <xQueueReceive+0x40>
 80063de:	b672      	cpsid	i
 80063e0:	e7fe      	b.n	80063e0 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
 80063e2:	b672      	cpsid	i
 80063e4:	e7fe      	b.n	80063e4 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f1      	beq.n	80063d0 <xQueueReceive+0x16>
 80063ec:	b672      	cpsid	i
 80063ee:	e7fe      	b.n	80063ee <xQueueReceive+0x34>
 80063f0:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 80063f2:	2544      	movs	r5, #68	; 0x44
 80063f4:	2300      	movs	r3, #0
 80063f6:	4699      	mov	r9, r3
 80063f8:	e03b      	b.n	8006472 <xQueueReceive+0xb8>
 80063fa:	2700      	movs	r7, #0
 80063fc:	e7f9      	b.n	80063f2 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063fe:	4641      	mov	r1, r8
 8006400:	0020      	movs	r0, r4
 8006402:	f7ff fe07 	bl	8006014 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006406:	1e73      	subs	r3, r6, #1
 8006408:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d107      	bne.n	8006420 <xQueueReceive+0x66>
				taskEXIT_CRITICAL();
 8006410:	f000 ff72 	bl	80072f8 <vPortExitCritical>
				return pdPASS;
 8006414:	2001      	movs	r0, #1
}
 8006416:	b005      	add	sp, #20
 8006418:	bcc0      	pop	{r6, r7}
 800641a:	46b9      	mov	r9, r7
 800641c:	46b0      	mov	r8, r6
 800641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006420:	0020      	movs	r0, r4
 8006422:	3010      	adds	r0, #16
 8006424:	f000 fc62 	bl	8006cec <xTaskRemoveFromEventList>
 8006428:	2800      	cmp	r0, #0
 800642a:	d0f1      	beq.n	8006410 <xQueueReceive+0x56>
						queueYIELD_IF_USING_PREEMPTION();
 800642c:	f000 ff4c 	bl	80072c8 <vPortYield>
 8006430:	e7ee      	b.n	8006410 <xQueueReceive+0x56>
					taskEXIT_CRITICAL();
 8006432:	f000 ff61 	bl	80072f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006436:	2000      	movs	r0, #0
 8006438:	e7ed      	b.n	8006416 <xQueueReceive+0x5c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800643a:	a802      	add	r0, sp, #8
 800643c:	f000 fc96 	bl	8006d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006440:	e021      	b.n	8006486 <xQueueReceive+0xcc>
		prvLockQueue( pxQueue );
 8006442:	464b      	mov	r3, r9
 8006444:	5563      	strb	r3, [r4, r5]
 8006446:	e028      	b.n	800649a <xQueueReceive+0xe0>
 8006448:	2345      	movs	r3, #69	; 0x45
 800644a:	464a      	mov	r2, r9
 800644c:	54e2      	strb	r2, [r4, r3]
 800644e:	e029      	b.n	80064a4 <xQueueReceive+0xea>
				prvUnlockQueue( pxQueue );
 8006450:	0020      	movs	r0, r4
 8006452:	f7ff fdf1 	bl	8006038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006456:	f000 fb3b 	bl	8006ad0 <xTaskResumeAll>
 800645a:	e009      	b.n	8006470 <xQueueReceive+0xb6>
			prvUnlockQueue( pxQueue );
 800645c:	0020      	movs	r0, r4
 800645e:	f7ff fdeb 	bl	8006038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006462:	f000 fb35 	bl	8006ad0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006466:	0020      	movs	r0, r4
 8006468:	f7ff fd91 	bl	8005f8e <prvIsQueueEmpty>
 800646c:	2800      	cmp	r0, #0
 800646e:	d135      	bne.n	80064dc <xQueueReceive+0x122>
 8006470:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8006472:	f000 ff35 	bl	80072e0 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006476:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006478:	2e00      	cmp	r6, #0
 800647a:	d1c0      	bne.n	80063fe <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
 800647c:	9b01      	ldr	r3, [sp, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0d7      	beq.n	8006432 <xQueueReceive+0x78>
				else if( xEntryTimeSet == pdFALSE )
 8006482:	2f00      	cmp	r7, #0
 8006484:	d0d9      	beq.n	800643a <xQueueReceive+0x80>
		taskEXIT_CRITICAL();
 8006486:	f000 ff37 	bl	80072f8 <vPortExitCritical>
		vTaskSuspendAll();
 800648a:	f000 fa79 	bl	8006980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800648e:	f000 ff27 	bl	80072e0 <vPortEnterCritical>
 8006492:	5d63      	ldrb	r3, [r4, r5]
 8006494:	b25b      	sxtb	r3, r3
 8006496:	3301      	adds	r3, #1
 8006498:	d0d3      	beq.n	8006442 <xQueueReceive+0x88>
 800649a:	2345      	movs	r3, #69	; 0x45
 800649c:	5ce3      	ldrb	r3, [r4, r3]
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	3301      	adds	r3, #1
 80064a2:	d0d1      	beq.n	8006448 <xQueueReceive+0x8e>
 80064a4:	f000 ff28 	bl	80072f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064a8:	a901      	add	r1, sp, #4
 80064aa:	a802      	add	r0, sp, #8
 80064ac:	f000 fc6a 	bl	8006d84 <xTaskCheckForTimeOut>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d1d3      	bne.n	800645c <xQueueReceive+0xa2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064b4:	0020      	movs	r0, r4
 80064b6:	f7ff fd6a 	bl	8005f8e <prvIsQueueEmpty>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d0c8      	beq.n	8006450 <xQueueReceive+0x96>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064be:	9901      	ldr	r1, [sp, #4]
 80064c0:	0020      	movs	r0, r4
 80064c2:	3024      	adds	r0, #36	; 0x24
 80064c4:	f000 fbe8 	bl	8006c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064c8:	0020      	movs	r0, r4
 80064ca:	f7ff fdb5 	bl	8006038 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064ce:	f000 faff 	bl	8006ad0 <xTaskResumeAll>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d1cc      	bne.n	8006470 <xQueueReceive+0xb6>
					portYIELD_WITHIN_API();
 80064d6:	f000 fef7 	bl	80072c8 <vPortYield>
 80064da:	e7c9      	b.n	8006470 <xQueueReceive+0xb6>
				return errQUEUE_EMPTY;
 80064dc:	2000      	movs	r0, #0
 80064de:	e79a      	b.n	8006416 <xQueueReceive+0x5c>

080064e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064e0:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064e2:	4a08      	ldr	r2, [pc, #32]	; (8006504 <vQueueAddToRegistry+0x24>)
 80064e4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064e6:	6814      	ldr	r4, [r2, #0]
 80064e8:	2c00      	cmp	r4, #0
 80064ea:	d004      	beq.n	80064f6 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ec:	3301      	adds	r3, #1
 80064ee:	3208      	adds	r2, #8
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d1f8      	bne.n	80064e6 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064f4:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064f6:	4a03      	ldr	r2, [pc, #12]	; (8006504 <vQueueAddToRegistry+0x24>)
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064fc:	18d2      	adds	r2, r2, r3
 80064fe:	6050      	str	r0, [r2, #4]
				break;
 8006500:	e7f8      	b.n	80064f4 <vQueueAddToRegistry+0x14>
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	20000e58 	.word	0x20000e58

08006508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	0004      	movs	r4, r0
 800650c:	000d      	movs	r5, r1
 800650e:	0016      	movs	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006510:	f000 fee6 	bl	80072e0 <vPortEnterCritical>
 8006514:	2344      	movs	r3, #68	; 0x44
 8006516:	5ce3      	ldrb	r3, [r4, r3]
 8006518:	b25b      	sxtb	r3, r3
 800651a:	3301      	adds	r3, #1
 800651c:	d00d      	beq.n	800653a <vQueueWaitForMessageRestricted+0x32>
 800651e:	2345      	movs	r3, #69	; 0x45
 8006520:	5ce3      	ldrb	r3, [r4, r3]
 8006522:	b25b      	sxtb	r3, r3
 8006524:	3301      	adds	r3, #1
 8006526:	d00c      	beq.n	8006542 <vQueueWaitForMessageRestricted+0x3a>
 8006528:	f000 fee6 	bl	80072f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800652c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00b      	beq.n	800654a <vQueueWaitForMessageRestricted+0x42>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006532:	0020      	movs	r0, r4
 8006534:	f7ff fd80 	bl	8006038 <prvUnlockQueue>
	}
 8006538:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800653a:	2344      	movs	r3, #68	; 0x44
 800653c:	2200      	movs	r2, #0
 800653e:	54e2      	strb	r2, [r4, r3]
 8006540:	e7ed      	b.n	800651e <vQueueWaitForMessageRestricted+0x16>
 8006542:	2345      	movs	r3, #69	; 0x45
 8006544:	2200      	movs	r2, #0
 8006546:	54e2      	strb	r2, [r4, r3]
 8006548:	e7ee      	b.n	8006528 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800654a:	0020      	movs	r0, r4
 800654c:	3024      	adds	r0, #36	; 0x24
 800654e:	0032      	movs	r2, r6
 8006550:	0029      	movs	r1, r5
 8006552:	f000 fbb3 	bl	8006cbc <vTaskPlaceOnEventListRestricted>
 8006556:	e7ec      	b.n	8006532 <vQueueWaitForMessageRestricted+0x2a>

08006558 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006558:	4b08      	ldr	r3, [pc, #32]	; (800657c <prvResetNextTaskUnblockTime+0x24>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <prvResetNextTaskUnblockTime+0x28>)
 8006564:	2201      	movs	r2, #1
 8006566:	4252      	negs	r2, r2
 8006568:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800656a:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656c:	4b03      	ldr	r3, [pc, #12]	; (800657c <prvResetNextTaskUnblockTime+0x24>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	4b02      	ldr	r3, [pc, #8]	; (8006580 <prvResetNextTaskUnblockTime+0x28>)
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	e7f6      	b.n	800656a <prvResetNextTaskUnblockTime+0x12>
 800657c:	20000e9c 	.word	0x20000e9c
 8006580:	20001340 	.word	0x20001340

08006584 <prvInitialiseNewTask>:
{
 8006584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006586:	46d6      	mov	lr, sl
 8006588:	464f      	mov	r7, r9
 800658a:	4646      	mov	r6, r8
 800658c:	b5c0      	push	{r6, r7, lr}
 800658e:	4681      	mov	r9, r0
 8006590:	000f      	movs	r7, r1
 8006592:	469a      	mov	sl, r3
 8006594:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006596:	0094      	lsls	r4, r2, #2
 8006598:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800659a:	0022      	movs	r2, r4
 800659c:	21a5      	movs	r1, #165	; 0xa5
 800659e:	f001 ffd3 	bl	8008548 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065a2:	3c04      	subs	r4, #4
 80065a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80065a6:	191b      	adds	r3, r3, r4
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065a8:	2207      	movs	r2, #7
 80065aa:	4393      	bics	r3, r2
 80065ac:	4698      	mov	r8, r3
	if( pcName != NULL )
 80065ae:	2f00      	cmp	r7, #0
 80065b0:	d040      	beq.n	8006634 <prvInitialiseNewTask+0xb0>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065b2:	2400      	movs	r4, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065b4:	002b      	movs	r3, r5
 80065b6:	3334      	adds	r3, #52	; 0x34
 80065b8:	5d3e      	ldrb	r6, [r7, r4]
 80065ba:	551e      	strb	r6, [r3, r4]
			if( pcName[ x ] == ( char ) 0x00 )
 80065bc:	2e00      	cmp	r6, #0
 80065be:	d002      	beq.n	80065c6 <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065c0:	3401      	adds	r4, #1
 80065c2:	2c10      	cmp	r4, #16
 80065c4:	d1f8      	bne.n	80065b8 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065c6:	2343      	movs	r3, #67	; 0x43
 80065c8:	2200      	movs	r2, #0
 80065ca:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065cc:	9c08      	ldr	r4, [sp, #32]
 80065ce:	2c37      	cmp	r4, #55	; 0x37
 80065d0:	d900      	bls.n	80065d4 <prvInitialiseNewTask+0x50>
 80065d2:	2437      	movs	r4, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80065d4:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80065d6:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065d8:	2600      	movs	r6, #0
 80065da:	652e      	str	r6, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065dc:	1d28      	adds	r0, r5, #4
 80065de:	f7ff fc9e 	bl	8005f1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065e2:	0028      	movs	r0, r5
 80065e4:	3018      	adds	r0, #24
 80065e6:	f7ff fc9a 	bl	8005f1e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065ea:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ec:	2338      	movs	r3, #56	; 0x38
 80065ee:	1b1b      	subs	r3, r3, r4
 80065f0:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065f2:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80065f4:	23a0      	movs	r3, #160	; 0xa0
 80065f6:	50ee      	str	r6, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065f8:	3304      	adds	r3, #4
 80065fa:	54ee      	strb	r6, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065fc:	0028      	movs	r0, r5
 80065fe:	3054      	adds	r0, #84	; 0x54
 8006600:	224c      	movs	r2, #76	; 0x4c
 8006602:	2100      	movs	r1, #0
 8006604:	f001 ffa0 	bl	8008548 <memset>
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <prvInitialiseNewTask+0xb8>)
 800660a:	65ab      	str	r3, [r5, #88]	; 0x58
 800660c:	001a      	movs	r2, r3
 800660e:	3268      	adds	r2, #104	; 0x68
 8006610:	65ea      	str	r2, [r5, #92]	; 0x5c
 8006612:	33d0      	adds	r3, #208	; 0xd0
 8006614:	662b      	str	r3, [r5, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006616:	4652      	mov	r2, sl
 8006618:	4649      	mov	r1, r9
 800661a:	4640      	mov	r0, r8
 800661c:	f000 fe42 	bl	80072a4 <pxPortInitialiseStack>
 8006620:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8006622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d000      	beq.n	800662a <prvInitialiseNewTask+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006628:	601d      	str	r5, [r3, #0]
}
 800662a:	bce0      	pop	{r5, r6, r7}
 800662c:	46ba      	mov	sl, r7
 800662e:	46b1      	mov	r9, r6
 8006630:	46a8      	mov	r8, r5
 8006632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006634:	2334      	movs	r3, #52	; 0x34
 8006636:	2200      	movs	r2, #0
 8006638:	54ea      	strb	r2, [r5, r3]
 800663a:	e7c7      	b.n	80065cc <prvInitialiseNewTask+0x48>
 800663c:	200020e0 	.word	0x200020e0

08006640 <prvAddNewTaskToReadyList>:
{
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 8006644:	f000 fe4c 	bl	80072e0 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006648:	4a2e      	ldr	r2, [pc, #184]	; (8006704 <prvAddNewTaskToReadyList+0xc4>)
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006650:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <prvAddNewTaskToReadyList+0xc8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00c      	beq.n	8006672 <prvAddNewTaskToReadyList+0x32>
			if( xSchedulerRunning == pdFALSE )
 8006658:	4b2c      	ldr	r3, [pc, #176]	; (800670c <prvAddNewTaskToReadyList+0xcc>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10d      	bne.n	800667c <prvAddNewTaskToReadyList+0x3c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006660:	4b29      	ldr	r3, [pc, #164]	; (8006708 <prvAddNewTaskToReadyList+0xc8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006668:	429a      	cmp	r2, r3
 800666a:	d807      	bhi.n	800667c <prvAddNewTaskToReadyList+0x3c>
					pxCurrentTCB = pxNewTCB;
 800666c:	4b26      	ldr	r3, [pc, #152]	; (8006708 <prvAddNewTaskToReadyList+0xc8>)
 800666e:	601d      	str	r5, [r3, #0]
 8006670:	e004      	b.n	800667c <prvAddNewTaskToReadyList+0x3c>
			pxCurrentTCB = pxNewTCB;
 8006672:	4b25      	ldr	r3, [pc, #148]	; (8006708 <prvAddNewTaskToReadyList+0xc8>)
 8006674:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006676:	6813      	ldr	r3, [r2, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d020      	beq.n	80066be <prvAddNewTaskToReadyList+0x7e>
		uxTaskNumber++;
 800667c:	4a24      	ldr	r2, [pc, #144]	; (8006710 <prvAddNewTaskToReadyList+0xd0>)
 800667e:	6813      	ldr	r3, [r2, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006684:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006686:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006688:	4a22      	ldr	r2, [pc, #136]	; (8006714 <prvAddNewTaskToReadyList+0xd4>)
 800668a:	6812      	ldr	r2, [r2, #0]
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <prvAddNewTaskToReadyList+0x54>
 8006690:	4a20      	ldr	r2, [pc, #128]	; (8006714 <prvAddNewTaskToReadyList+0xd4>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	1d29      	adds	r1, r5, #4
 8006696:	0098      	lsls	r0, r3, #2
 8006698:	18c0      	adds	r0, r0, r3
 800669a:	0080      	lsls	r0, r0, #2
 800669c:	4b1e      	ldr	r3, [pc, #120]	; (8006718 <prvAddNewTaskToReadyList+0xd8>)
 800669e:	18c0      	adds	r0, r0, r3
 80066a0:	f7ff fc40 	bl	8005f24 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80066a4:	f000 fe28 	bl	80072f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <prvAddNewTaskToReadyList+0xcc>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066b0:	4b15      	ldr	r3, [pc, #84]	; (8006708 <prvAddNewTaskToReadyList+0xc8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d320      	bcc.n	80066fe <prvAddNewTaskToReadyList+0xbe>
}
 80066bc:	bd70      	pop	{r4, r5, r6, pc}
 80066be:	4c16      	ldr	r4, [pc, #88]	; (8006718 <prvAddNewTaskToReadyList+0xd8>)
 80066c0:	238c      	movs	r3, #140	; 0x8c
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	18e6      	adds	r6, r4, r3
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066c6:	0020      	movs	r0, r4
 80066c8:	f7ff fc1e 	bl	8005f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066cc:	3414      	adds	r4, #20
 80066ce:	42b4      	cmp	r4, r6
 80066d0:	d1f9      	bne.n	80066c6 <prvAddNewTaskToReadyList+0x86>
	vListInitialise( &xDelayedTaskList1 );
 80066d2:	4e12      	ldr	r6, [pc, #72]	; (800671c <prvAddNewTaskToReadyList+0xdc>)
 80066d4:	0030      	movs	r0, r6
 80066d6:	f7ff fc17 	bl	8005f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066da:	4c11      	ldr	r4, [pc, #68]	; (8006720 <prvAddNewTaskToReadyList+0xe0>)
 80066dc:	0020      	movs	r0, r4
 80066de:	f7ff fc13 	bl	8005f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066e2:	4810      	ldr	r0, [pc, #64]	; (8006724 <prvAddNewTaskToReadyList+0xe4>)
 80066e4:	f7ff fc10 	bl	8005f08 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80066e8:	480f      	ldr	r0, [pc, #60]	; (8006728 <prvAddNewTaskToReadyList+0xe8>)
 80066ea:	f7ff fc0d 	bl	8005f08 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80066ee:	480f      	ldr	r0, [pc, #60]	; (800672c <prvAddNewTaskToReadyList+0xec>)
 80066f0:	f7ff fc0a 	bl	8005f08 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80066f4:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <prvAddNewTaskToReadyList+0xf0>)
 80066f6:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066f8:	4b0e      	ldr	r3, [pc, #56]	; (8006734 <prvAddNewTaskToReadyList+0xf4>)
 80066fa:	601c      	str	r4, [r3, #0]
}
 80066fc:	e7be      	b.n	800667c <prvAddNewTaskToReadyList+0x3c>
			taskYIELD_IF_USING_PREEMPTION();
 80066fe:	f000 fde3 	bl	80072c8 <vPortYield>
}
 8006702:	e7db      	b.n	80066bc <prvAddNewTaskToReadyList+0x7c>
 8006704:	20001304 	.word	0x20001304
 8006708:	20000e98 	.word	0x20000e98
 800670c:	20001360 	.word	0x20001360
 8006710:	20001310 	.word	0x20001310
 8006714:	20001314 	.word	0x20001314
 8006718:	20000ea4 	.word	0x20000ea4
 800671c:	20001318 	.word	0x20001318
 8006720:	2000132c 	.word	0x2000132c
 8006724:	2000134c 	.word	0x2000134c
 8006728:	20001378 	.word	0x20001378
 800672c:	20001364 	.word	0x20001364
 8006730:	20000e9c 	.word	0x20000e9c
 8006734:	20000ea0 	.word	0x20000ea0

08006738 <prvDeleteTCB>:
	{
 8006738:	b510      	push	{r4, lr}
 800673a:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800673c:	3054      	adds	r0, #84	; 0x54
 800673e:	f001 ff21 	bl	8008584 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006742:	23a5      	movs	r3, #165	; 0xa5
 8006744:	5ce3      	ldrb	r3, [r4, r3]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <prvDeleteTCB+0x1e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800674a:	2b01      	cmp	r3, #1
 800674c:	d00a      	beq.n	8006764 <prvDeleteTCB+0x2c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800674e:	2b02      	cmp	r3, #2
 8006750:	d007      	beq.n	8006762 <prvDeleteTCB+0x2a>
 8006752:	b672      	cpsid	i
 8006754:	e7fe      	b.n	8006754 <prvDeleteTCB+0x1c>
				vPortFree( pxTCB->pxStack );
 8006756:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006758:	f000 ff12 	bl	8007580 <vPortFree>
				vPortFree( pxTCB );
 800675c:	0020      	movs	r0, r4
 800675e:	f000 ff0f 	bl	8007580 <vPortFree>
	}
 8006762:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006764:	0020      	movs	r0, r4
 8006766:	f000 ff0b 	bl	8007580 <vPortFree>
 800676a:	e7fa      	b.n	8006762 <prvDeleteTCB+0x2a>

0800676c <prvIdleTask>:
{
 800676c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676e:	46c6      	mov	lr, r8
 8006770:	b500      	push	{lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <prvIdleTask+0x50>)
 8006774:	4698      	mov	r8, r3
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006776:	4f12      	ldr	r7, [pc, #72]	; (80067c0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006778:	4e12      	ldr	r6, [pc, #72]	; (80067c4 <prvIdleTask+0x58>)
				--uxDeletedTasksWaitingCleanUp;
 800677a:	001c      	movs	r4, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800677c:	4643      	mov	r3, r8
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d014      	beq.n	80067ae <prvIdleTask+0x42>
			taskENTER_CRITICAL();
 8006784:	f000 fdac 	bl	80072e0 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800678c:	1d28      	adds	r0, r5, #4
 800678e:	f7ff fbeb 	bl	8005f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006792:	6833      	ldr	r3, [r6, #0]
 8006794:	3b01      	subs	r3, #1
 8006796:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800679e:	f000 fdab 	bl	80072f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80067a2:	0028      	movs	r0, r5
 80067a4:	f7ff ffc8 	bl	8006738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1ea      	bne.n	8006784 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <prvIdleTask+0x5c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d9e2      	bls.n	800677c <prvIdleTask+0x10>
				taskYIELD();
 80067b6:	f000 fd87 	bl	80072c8 <vPortYield>
 80067ba:	e7df      	b.n	800677c <prvIdleTask+0x10>
 80067bc:	20001308 	.word	0x20001308
 80067c0:	20001378 	.word	0x20001378
 80067c4:	20001304 	.word	0x20001304
 80067c8:	20000ea4 	.word	0x20000ea4

080067cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	0004      	movs	r4, r0
 80067d0:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <prvAddCurrentTaskToDelayedList+0x64>)
 80067d4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <prvAddCurrentTaskToDelayedList+0x68>)
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	3004      	adds	r0, #4
 80067dc:	f7ff fbc4 	bl	8005f68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067e0:	1c63      	adds	r3, r4, #1
 80067e2:	d00d      	beq.n	8006800 <prvAddCurrentTaskToDelayedList+0x34>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067e4:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067e6:	4b13      	ldr	r3, [pc, #76]	; (8006834 <prvAddCurrentTaskToDelayedList+0x68>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80067ec:	42a6      	cmp	r6, r4
 80067ee:	d910      	bls.n	8006812 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f0:	4b11      	ldr	r3, [pc, #68]	; (8006838 <prvAddCurrentTaskToDelayedList+0x6c>)
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <prvAddCurrentTaskToDelayedList+0x68>)
 80067f6:	6819      	ldr	r1, [r3, #0]
 80067f8:	3104      	adds	r1, #4
 80067fa:	f7ff fb9e 	bl	8005f3a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006800:	2d00      	cmp	r5, #0
 8006802:	d0ef      	beq.n	80067e4 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <prvAddCurrentTaskToDelayedList+0x68>)
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	3104      	adds	r1, #4
 800680a:	480c      	ldr	r0, [pc, #48]	; (800683c <prvAddCurrentTaskToDelayedList+0x70>)
 800680c:	f7ff fb8a 	bl	8005f24 <vListInsertEnd>
 8006810:	e7f5      	b.n	80067fe <prvAddCurrentTaskToDelayedList+0x32>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <prvAddCurrentTaskToDelayedList+0x74>)
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	4b07      	ldr	r3, [pc, #28]	; (8006834 <prvAddCurrentTaskToDelayedList+0x68>)
 8006818:	6819      	ldr	r1, [r3, #0]
 800681a:	3104      	adds	r1, #4
 800681c:	f7ff fb8d 	bl	8005f3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <prvAddCurrentTaskToDelayedList+0x78>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	42a3      	cmp	r3, r4
 8006826:	d9ea      	bls.n	80067fe <prvAddCurrentTaskToDelayedList+0x32>
					xNextTaskUnblockTime = xTimeToWake;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <prvAddCurrentTaskToDelayedList+0x78>)
 800682a:	601c      	str	r4, [r3, #0]
}
 800682c:	e7e7      	b.n	80067fe <prvAddCurrentTaskToDelayedList+0x32>
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	2000138c 	.word	0x2000138c
 8006834:	20000e98 	.word	0x20000e98
 8006838:	20000ea0 	.word	0x20000ea0
 800683c:	20001364 	.word	0x20001364
 8006840:	20000e9c 	.word	0x20000e9c
 8006844:	20001340 	.word	0x20001340

08006848 <xTaskCreateStatic>:
	{
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800684c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800684e:	2c00      	cmp	r4, #0
 8006850:	d009      	beq.n	8006866 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8006852:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006854:	2c00      	cmp	r4, #0
 8006856:	d008      	beq.n	800686a <xTaskCreateStatic+0x22>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006858:	24a8      	movs	r4, #168	; 0xa8
 800685a:	9404      	str	r4, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800685c:	9c04      	ldr	r4, [sp, #16]
 800685e:	2ca8      	cmp	r4, #168	; 0xa8
 8006860:	d005      	beq.n	800686e <xTaskCreateStatic+0x26>
 8006862:	b672      	cpsid	i
 8006864:	e7fe      	b.n	8006864 <xTaskCreateStatic+0x1c>
		configASSERT( puxStackBuffer != NULL );
 8006866:	b672      	cpsid	i
 8006868:	e7fe      	b.n	8006868 <xTaskCreateStatic+0x20>
		configASSERT( pxTaskBuffer != NULL );
 800686a:	b672      	cpsid	i
 800686c:	e7fe      	b.n	800686c <xTaskCreateStatic+0x24>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800686e:	9c04      	ldr	r4, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006870:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006872:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006874:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006876:	24a5      	movs	r4, #165	; 0xa5
 8006878:	2502      	movs	r5, #2
 800687a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800687c:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800687e:	2400      	movs	r4, #0
 8006880:	9403      	str	r4, [sp, #12]
 8006882:	9602      	str	r6, [sp, #8]
 8006884:	ac05      	add	r4, sp, #20
 8006886:	9401      	str	r4, [sp, #4]
 8006888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800688a:	9400      	str	r4, [sp, #0]
 800688c:	f7ff fe7a 	bl	8006584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006890:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006892:	f7ff fed5 	bl	8006640 <prvAddNewTaskToReadyList>
		return xReturn;
 8006896:	9805      	ldr	r0, [sp, #20]
	}
 8006898:	b006      	add	sp, #24
 800689a:	bd70      	pop	{r4, r5, r6, pc}

0800689c <xTaskCreate>:
	{
 800689c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800689e:	b087      	sub	sp, #28
 80068a0:	9004      	str	r0, [sp, #16]
 80068a2:	9105      	str	r1, [sp, #20]
 80068a4:	0016      	movs	r6, r2
 80068a6:	001f      	movs	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068a8:	0090      	lsls	r0, r2, #2
 80068aa:	f000 fddb 	bl	8007464 <pvPortMalloc>
 80068ae:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 80068b0:	d01f      	beq.n	80068f2 <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068b2:	20a8      	movs	r0, #168	; 0xa8
 80068b4:	f000 fdd6 	bl	8007464 <pvPortMalloc>
 80068b8:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 80068ba:	d014      	beq.n	80068e6 <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
 80068bc:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068be:	2300      	movs	r3, #0
 80068c0:	22a5      	movs	r2, #165	; 0xa5
 80068c2:	5483      	strb	r3, [r0, r2]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	9002      	str	r0, [sp, #8]
 80068c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	003b      	movs	r3, r7
 80068d2:	0032      	movs	r2, r6
 80068d4:	9905      	ldr	r1, [sp, #20]
 80068d6:	9804      	ldr	r0, [sp, #16]
 80068d8:	f7ff fe54 	bl	8006584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068dc:	0028      	movs	r0, r5
 80068de:	f7ff feaf 	bl	8006640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068e2:	2001      	movs	r0, #1
 80068e4:	e007      	b.n	80068f6 <xTaskCreate+0x5a>
					vPortFree( pxStack );
 80068e6:	0020      	movs	r0, r4
 80068e8:	f000 fe4a 	bl	8007580 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068ec:	2001      	movs	r0, #1
 80068ee:	4240      	negs	r0, r0
 80068f0:	e001      	b.n	80068f6 <xTaskCreate+0x5a>
 80068f2:	2001      	movs	r0, #1
 80068f4:	4240      	negs	r0, r0
	}
 80068f6:	b007      	add	sp, #28
 80068f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080068fc <vTaskStartScheduler>:
{
 80068fc:	b510      	push	{r4, lr}
 80068fe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006900:	2400      	movs	r4, #0
 8006902:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006904:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006906:	aa07      	add	r2, sp, #28
 8006908:	a906      	add	r1, sp, #24
 800690a:	a805      	add	r0, sp, #20
 800690c:	f7ff fae4 	bl	8005ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006910:	9a07      	ldr	r2, [sp, #28]
 8006912:	4914      	ldr	r1, [pc, #80]	; (8006964 <vTaskStartScheduler+0x68>)
 8006914:	4814      	ldr	r0, [pc, #80]	; (8006968 <vTaskStartScheduler+0x6c>)
 8006916:	9b05      	ldr	r3, [sp, #20]
 8006918:	9302      	str	r3, [sp, #8]
 800691a:	9b06      	ldr	r3, [sp, #24]
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	9400      	str	r4, [sp, #0]
 8006920:	2300      	movs	r3, #0
 8006922:	f7ff ff91 	bl	8006848 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006926:	2800      	cmp	r0, #0
 8006928:	d019      	beq.n	800695e <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800692a:	f000 fb0b 	bl	8006f44 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800692e:	2801      	cmp	r0, #1
 8006930:	d003      	beq.n	800693a <vTaskStartScheduler+0x3e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006932:	3001      	adds	r0, #1
 8006934:	d113      	bne.n	800695e <vTaskStartScheduler+0x62>
 8006936:	b672      	cpsid	i
 8006938:	e7fe      	b.n	8006938 <vTaskStartScheduler+0x3c>
		portDISABLE_INTERRUPTS();
 800693a:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <vTaskStartScheduler+0x70>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <vTaskStartScheduler+0x74>)
 8006942:	3354      	adds	r3, #84	; 0x54
 8006944:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <vTaskStartScheduler+0x78>)
 8006948:	2201      	movs	r2, #1
 800694a:	4252      	negs	r2, r2
 800694c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800694e:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <vTaskStartScheduler+0x7c>)
 8006950:	3202      	adds	r2, #2
 8006952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006954:	4b09      	ldr	r3, [pc, #36]	; (800697c <vTaskStartScheduler+0x80>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800695a:	f000 fd37 	bl	80073cc <xPortStartScheduler>
}
 800695e:	b008      	add	sp, #32
 8006960:	bd10      	pop	{r4, pc}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	0800c150 	.word	0x0800c150
 8006968:	0800676d 	.word	0x0800676d
 800696c:	20000e98 	.word	0x20000e98
 8006970:	20000068 	.word	0x20000068
 8006974:	20001340 	.word	0x20001340
 8006978:	20001360 	.word	0x20001360
 800697c:	2000138c 	.word	0x2000138c

08006980 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006980:	4a02      	ldr	r2, [pc, #8]	; (800698c <vTaskSuspendAll+0xc>)
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	6013      	str	r3, [r2, #0]
}
 8006988:	4770      	bx	lr
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	2000130c 	.word	0x2000130c

08006990 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <xTaskGetTickCount+0x8>)
 8006992:	6818      	ldr	r0, [r3, #0]
}
 8006994:	4770      	bx	lr
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	2000138c 	.word	0x2000138c

0800699c <xTaskIncrementTick>:
{
 800699c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699e:	46d6      	mov	lr, sl
 80069a0:	464f      	mov	r7, r9
 80069a2:	4646      	mov	r6, r8
 80069a4:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a6:	4b3f      	ldr	r3, [pc, #252]	; (8006aa4 <xTaskIncrementTick+0x108>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d16f      	bne.n	8006a8e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069ae:	4b3e      	ldr	r3, [pc, #248]	; (8006aa8 <xTaskIncrementTick+0x10c>)
 80069b0:	681d      	ldr	r5, [r3, #0]
 80069b2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80069b4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	d112      	bne.n	80069e0 <xTaskIncrementTick+0x44>
			taskSWITCH_DELAYED_LISTS();
 80069ba:	4b3c      	ldr	r3, [pc, #240]	; (8006aac <xTaskIncrementTick+0x110>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <xTaskIncrementTick+0x2c>
 80069c4:	b672      	cpsid	i
 80069c6:	e7fe      	b.n	80069c6 <xTaskIncrementTick+0x2a>
 80069c8:	4a38      	ldr	r2, [pc, #224]	; (8006aac <xTaskIncrementTick+0x110>)
 80069ca:	6811      	ldr	r1, [r2, #0]
 80069cc:	4b38      	ldr	r3, [pc, #224]	; (8006ab0 <xTaskIncrementTick+0x114>)
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	6010      	str	r0, [r2, #0]
 80069d2:	6019      	str	r1, [r3, #0]
 80069d4:	4a37      	ldr	r2, [pc, #220]	; (8006ab4 <xTaskIncrementTick+0x118>)
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	f7ff fdbc 	bl	8006558 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069e0:	4b35      	ldr	r3, [pc, #212]	; (8006ab8 <xTaskIncrementTick+0x11c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80069e4:	2700      	movs	r7, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069e6:	42ab      	cmp	r3, r5
 80069e8:	d83d      	bhi.n	8006a66 <xTaskIncrementTick+0xca>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ea:	4b30      	ldr	r3, [pc, #192]	; (8006aac <xTaskIncrementTick+0x110>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d033      	beq.n	8006a5c <xTaskIncrementTick+0xc0>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f4:	4b2d      	ldr	r3, [pc, #180]	; (8006aac <xTaskIncrementTick+0x110>)
 80069f6:	4698      	mov	r8, r3
					prvAddTaskToReadyList( pxTCB );
 80069f8:	4b30      	ldr	r3, [pc, #192]	; (8006abc <xTaskIncrementTick+0x120>)
 80069fa:	4699      	mov	r9, r3
 80069fc:	469a      	mov	sl, r3
 80069fe:	e004      	b.n	8006a0a <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a00:	4b2a      	ldr	r3, [pc, #168]	; (8006aac <xTaskIncrementTick+0x110>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d029      	beq.n	8006a5e <xTaskIncrementTick+0xc2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a0a:	4643      	mov	r3, r8
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a12:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006a14:	429d      	cmp	r5, r3
 8006a16:	d337      	bcc.n	8006a88 <xTaskIncrementTick+0xec>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a18:	1d26      	adds	r6, r4, #4
 8006a1a:	0030      	movs	r0, r6
 8006a1c:	f7ff faa4 	bl	8005f68 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <xTaskIncrementTick+0x92>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a26:	0020      	movs	r0, r4
 8006a28:	3018      	adds	r0, #24
 8006a2a:	f7ff fa9d 	bl	8005f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a30:	464a      	mov	r2, r9
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d901      	bls.n	8006a3c <xTaskIncrementTick+0xa0>
 8006a38:	4652      	mov	r2, sl
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	0098      	lsls	r0, r3, #2
 8006a3e:	18c0      	adds	r0, r0, r3
 8006a40:	0080      	lsls	r0, r0, #2
 8006a42:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <xTaskIncrementTick+0x124>)
 8006a44:	18c0      	adds	r0, r0, r3
 8006a46:	0031      	movs	r1, r6
 8006a48:	f7ff fa6c 	bl	8005f24 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <xTaskIncrementTick+0x128>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3d3      	bcc.n	8006a00 <xTaskIncrementTick+0x64>
							xSwitchRequired = pdTRUE;
 8006a58:	2701      	movs	r7, #1
 8006a5a:	e7d1      	b.n	8006a00 <xTaskIncrementTick+0x64>
BaseType_t xSwitchRequired = pdFALSE;
 8006a5c:	2700      	movs	r7, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5e:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <xTaskIncrementTick+0x11c>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	4252      	negs	r2, r2
 8006a64:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a66:	4b17      	ldr	r3, [pc, #92]	; (8006ac4 <xTaskIncrementTick+0x128>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a6c:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <xTaskIncrementTick+0x124>)
 8006a6e:	008b      	lsls	r3, r1, #2
 8006a70:	185b      	adds	r3, r3, r1
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	589b      	ldr	r3, [r3, r2]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d900      	bls.n	8006a7c <xTaskIncrementTick+0xe0>
				xSwitchRequired = pdTRUE;
 8006a7a:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8006a7c:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <xTaskIncrementTick+0x12c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d009      	beq.n	8006a98 <xTaskIncrementTick+0xfc>
				xSwitchRequired = pdTRUE;
 8006a84:	2701      	movs	r7, #1
 8006a86:	e007      	b.n	8006a98 <xTaskIncrementTick+0xfc>
						xNextTaskUnblockTime = xItemValue;
 8006a88:	4a0b      	ldr	r2, [pc, #44]	; (8006ab8 <xTaskIncrementTick+0x11c>)
 8006a8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a8c:	e7eb      	b.n	8006a66 <xTaskIncrementTick+0xca>
		++xPendedTicks;
 8006a8e:	4a0f      	ldr	r2, [pc, #60]	; (8006acc <xTaskIncrementTick+0x130>)
 8006a90:	6813      	ldr	r3, [r2, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006a96:	2700      	movs	r7, #0
}
 8006a98:	0038      	movs	r0, r7
 8006a9a:	bce0      	pop	{r5, r6, r7}
 8006a9c:	46ba      	mov	sl, r7
 8006a9e:	46b1      	mov	r9, r6
 8006aa0:	46a8      	mov	r8, r5
 8006aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa4:	2000130c 	.word	0x2000130c
 8006aa8:	2000138c 	.word	0x2000138c
 8006aac:	20000e9c 	.word	0x20000e9c
 8006ab0:	20000ea0 	.word	0x20000ea0
 8006ab4:	20001344 	.word	0x20001344
 8006ab8:	20001340 	.word	0x20001340
 8006abc:	20001314 	.word	0x20001314
 8006ac0:	20000ea4 	.word	0x20000ea4
 8006ac4:	20000e98 	.word	0x20000e98
 8006ac8:	20001390 	.word	0x20001390
 8006acc:	20001348 	.word	0x20001348

08006ad0 <xTaskResumeAll>:
{
 8006ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad2:	46c6      	mov	lr, r8
 8006ad4:	b500      	push	{lr}
	configASSERT( uxSchedulerSuspended );
 8006ad6:	4b32      	ldr	r3, [pc, #200]	; (8006ba0 <xTaskResumeAll+0xd0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <xTaskResumeAll+0x12>
 8006ade:	b672      	cpsid	i
 8006ae0:	e7fe      	b.n	8006ae0 <xTaskResumeAll+0x10>
	taskENTER_CRITICAL();
 8006ae2:	f000 fbfd 	bl	80072e0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006ae6:	4b2e      	ldr	r3, [pc, #184]	; (8006ba0 <xTaskResumeAll+0xd0>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	3a01      	subs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aee:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 8006af0:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d141      	bne.n	8006b7a <xTaskResumeAll+0xaa>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006af6:	4b2b      	ldr	r3, [pc, #172]	; (8006ba4 <xTaskResumeAll+0xd4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d03d      	beq.n	8006b7a <xTaskResumeAll+0xaa>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006afe:	4b2a      	ldr	r3, [pc, #168]	; (8006ba8 <xTaskResumeAll+0xd8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d045      	beq.n	8006b92 <xTaskResumeAll+0xc2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b06:	4f28      	ldr	r7, [pc, #160]	; (8006ba8 <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 8006b08:	4e28      	ldr	r6, [pc, #160]	; (8006bac <xTaskResumeAll+0xdc>)
 8006b0a:	46b0      	mov	r8, r6
 8006b0c:	e003      	b.n	8006b16 <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b0e:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <xTaskResumeAll+0xd8>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d03b      	beq.n	8006b8e <xTaskResumeAll+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	3018      	adds	r0, #24
 8006b1e:	f7ff fa23 	bl	8005f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b22:	1d25      	adds	r5, r4, #4
 8006b24:	0028      	movs	r0, r5
 8006b26:	f7ff fa1f 	bl	8005f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b2c:	6832      	ldr	r2, [r6, #0]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <xTaskResumeAll+0x66>
 8006b32:	4642      	mov	r2, r8
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	0098      	lsls	r0, r3, #2
 8006b38:	18c0      	adds	r0, r0, r3
 8006b3a:	0080      	lsls	r0, r0, #2
 8006b3c:	4b1c      	ldr	r3, [pc, #112]	; (8006bb0 <xTaskResumeAll+0xe0>)
 8006b3e:	18c0      	adds	r0, r0, r3
 8006b40:	0029      	movs	r1, r5
 8006b42:	f7ff f9ef 	bl	8005f24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b46:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <xTaskResumeAll+0xe4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d3dd      	bcc.n	8006b0e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8006b52:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <xTaskResumeAll+0xe8>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e7d9      	b.n	8006b0e <xTaskResumeAll+0x3e>
							--xPendedCounts;
 8006b5a:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	d005      	beq.n	8006b6c <xTaskResumeAll+0x9c>
							if( xTaskIncrementTick() != pdFALSE )
 8006b60:	f7ff ff1c 	bl	800699c <xTaskIncrementTick>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d0f8      	beq.n	8006b5a <xTaskResumeAll+0x8a>
								xYieldPending = pdTRUE;
 8006b68:	6035      	str	r5, [r6, #0]
 8006b6a:	e7f6      	b.n	8006b5a <xTaskResumeAll+0x8a>
						xPendedTicks = 0;
 8006b6c:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <xTaskResumeAll+0xec>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006b72:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <xTaskResumeAll+0xe8>)
 8006b74:	681c      	ldr	r4, [r3, #0]
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	d105      	bne.n	8006b86 <xTaskResumeAll+0xb6>
	taskEXIT_CRITICAL();
 8006b7a:	f000 fbbd 	bl	80072f8 <vPortExitCritical>
}
 8006b7e:	0020      	movs	r0, r4
 8006b80:	bc80      	pop	{r7}
 8006b82:	46b8      	mov	r8, r7
 8006b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 8006b86:	f000 fb9f 	bl	80072c8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8006b8a:	2401      	movs	r4, #1
 8006b8c:	e7f5      	b.n	8006b7a <xTaskResumeAll+0xaa>
					prvResetNextTaskUnblockTime();
 8006b8e:	f7ff fce3 	bl	8006558 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b92:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <xTaskResumeAll+0xec>)
 8006b94:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	d0eb      	beq.n	8006b72 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8006b9a:	4e07      	ldr	r6, [pc, #28]	; (8006bb8 <xTaskResumeAll+0xe8>)
 8006b9c:	2501      	movs	r5, #1
 8006b9e:	e7df      	b.n	8006b60 <xTaskResumeAll+0x90>
 8006ba0:	2000130c 	.word	0x2000130c
 8006ba4:	20001304 	.word	0x20001304
 8006ba8:	2000134c 	.word	0x2000134c
 8006bac:	20001314 	.word	0x20001314
 8006bb0:	20000ea4 	.word	0x20000ea4
 8006bb4:	20000e98 	.word	0x20000e98
 8006bb8:	20001390 	.word	0x20001390
 8006bbc:	20001348 	.word	0x20001348

08006bc0 <vTaskDelay>:
	{
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bc4:	d00f      	beq.n	8006be6 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <vTaskDelay+0x2c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <vTaskDelay+0x12>
 8006bce:	b672      	cpsid	i
 8006bd0:	e7fe      	b.n	8006bd0 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8006bd2:	f7ff fed5 	bl	8006980 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	0020      	movs	r0, r4
 8006bda:	f7ff fdf7 	bl	80067cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006bde:	f7ff ff77 	bl	8006ad0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d101      	bne.n	8006bea <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 8006be6:	f000 fb6f 	bl	80072c8 <vPortYield>
	}
 8006bea:	bd10      	pop	{r4, pc}
 8006bec:	2000130c 	.word	0x2000130c

08006bf0 <vTaskSwitchContext>:
{
 8006bf0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bf2:	4b23      	ldr	r3, [pc, #140]	; (8006c80 <vTaskSwitchContext+0x90>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8006bfa:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <vTaskSwitchContext+0x94>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
}
 8006c00:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8006c02:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <vTaskSwitchContext+0x94>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c08:	4b1f      	ldr	r3, [pc, #124]	; (8006c88 <vTaskSwitchContext+0x98>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	491f      	ldr	r1, [pc, #124]	; (8006c8c <vTaskSwitchContext+0x9c>)
 8006c0e:	0093      	lsls	r3, r2, #2
 8006c10:	189b      	adds	r3, r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	585b      	ldr	r3, [r3, r1]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10c      	bne.n	8006c34 <vTaskSwitchContext+0x44>
 8006c1a:	2a00      	cmp	r2, #0
 8006c1c:	d008      	beq.n	8006c30 <vTaskSwitchContext+0x40>
 8006c1e:	3a01      	subs	r2, #1
 8006c20:	0093      	lsls	r3, r2, #2
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	585b      	ldr	r3, [r3, r1]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <vTaskSwitchContext+0x44>
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	d1f6      	bne.n	8006c1e <vTaskSwitchContext+0x2e>
 8006c30:	b672      	cpsid	i
 8006c32:	e7fe      	b.n	8006c32 <vTaskSwitchContext+0x42>
 8006c34:	4815      	ldr	r0, [pc, #84]	; (8006c8c <vTaskSwitchContext+0x9c>)
 8006c36:	0093      	lsls	r3, r2, #2
 8006c38:	1899      	adds	r1, r3, r2
 8006c3a:	0089      	lsls	r1, r1, #2
 8006c3c:	1841      	adds	r1, r0, r1
 8006c3e:	684c      	ldr	r4, [r1, #4]
 8006c40:	6864      	ldr	r4, [r4, #4]
 8006c42:	604c      	str	r4, [r1, #4]
 8006c44:	189b      	adds	r3, r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	3308      	adds	r3, #8
 8006c4a:	181b      	adds	r3, r3, r0
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	d00f      	beq.n	8006c70 <vTaskSwitchContext+0x80>
 8006c50:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <vTaskSwitchContext+0x9c>)
 8006c52:	0091      	lsls	r1, r2, #2
 8006c54:	1889      	adds	r1, r1, r2
 8006c56:	0089      	lsls	r1, r1, #2
 8006c58:	185b      	adds	r3, r3, r1
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	68d9      	ldr	r1, [r3, #12]
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <vTaskSwitchContext+0xa0>)
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	4909      	ldr	r1, [pc, #36]	; (8006c88 <vTaskSwitchContext+0x98>)
 8006c64:	600a      	str	r2, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a0a      	ldr	r2, [pc, #40]	; (8006c94 <vTaskSwitchContext+0xa4>)
 8006c6a:	3354      	adds	r3, #84	; 0x54
 8006c6c:	6013      	str	r3, [r2, #0]
}
 8006c6e:	e7c7      	b.n	8006c00 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c70:	6860      	ldr	r0, [r4, #4]
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <vTaskSwitchContext+0x9c>)
 8006c74:	0091      	lsls	r1, r2, #2
 8006c76:	1889      	adds	r1, r1, r2
 8006c78:	0089      	lsls	r1, r1, #2
 8006c7a:	185b      	adds	r3, r3, r1
 8006c7c:	6058      	str	r0, [r3, #4]
 8006c7e:	e7e7      	b.n	8006c50 <vTaskSwitchContext+0x60>
 8006c80:	2000130c 	.word	0x2000130c
 8006c84:	20001390 	.word	0x20001390
 8006c88:	20001314 	.word	0x20001314
 8006c8c:	20000ea4 	.word	0x20000ea4
 8006c90:	20000e98 	.word	0x20000e98
 8006c94:	20000068 	.word	0x20000068

08006c98 <vTaskPlaceOnEventList>:
{
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d009      	beq.n	8006cb4 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <vTaskPlaceOnEventList+0x20>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	3118      	adds	r1, #24
 8006ca6:	f7ff f948 	bl	8005f3a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006caa:	2101      	movs	r1, #1
 8006cac:	0020      	movs	r0, r4
 8006cae:	f7ff fd8d 	bl	80067cc <prvAddCurrentTaskToDelayedList>
}
 8006cb2:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 8006cb4:	b672      	cpsid	i
 8006cb6:	e7fe      	b.n	8006cb6 <vTaskPlaceOnEventList+0x1e>
 8006cb8:	20000e98 	.word	0x20000e98

08006cbc <vTaskPlaceOnEventListRestricted>:
	{
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	000d      	movs	r5, r1
 8006cc0:	0014      	movs	r4, r2
		configASSERT( pxEventList );
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d00d      	beq.n	8006ce2 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cc6:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <vTaskPlaceOnEventListRestricted+0x2c>)
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	3118      	adds	r1, #24
 8006ccc:	f7ff f92a 	bl	8005f24 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8006cd0:	2c00      	cmp	r4, #0
 8006cd2:	d001      	beq.n	8006cd8 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 8006cd4:	2501      	movs	r5, #1
 8006cd6:	426d      	negs	r5, r5
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cd8:	0021      	movs	r1, r4
 8006cda:	0028      	movs	r0, r5
 8006cdc:	f7ff fd76 	bl	80067cc <prvAddCurrentTaskToDelayedList>
	}
 8006ce0:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 8006ce2:	b672      	cpsid	i
 8006ce4:	e7fe      	b.n	8006ce4 <vTaskPlaceOnEventListRestricted+0x28>
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	20000e98 	.word	0x20000e98

08006cec <xTaskRemoveFromEventList>:
{
 8006cec:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cee:	68c3      	ldr	r3, [r0, #12]
 8006cf0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d027      	beq.n	8006d46 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cf6:	0025      	movs	r5, r4
 8006cf8:	3518      	adds	r5, #24
 8006cfa:	0028      	movs	r0, r5
 8006cfc:	f7ff f934 	bl	8005f68 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d00:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <xTaskRemoveFromEventList+0x68>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d120      	bne.n	8006d4a <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d08:	1d25      	adds	r5, r4, #4
 8006d0a:	0028      	movs	r0, r5
 8006d0c:	f7ff f92c 	bl	8005f68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d12:	4a11      	ldr	r2, [pc, #68]	; (8006d58 <xTaskRemoveFromEventList+0x6c>)
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <xTaskRemoveFromEventList+0x32>
 8006d1a:	4a0f      	ldr	r2, [pc, #60]	; (8006d58 <xTaskRemoveFromEventList+0x6c>)
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	0098      	lsls	r0, r3, #2
 8006d20:	18c0      	adds	r0, r0, r3
 8006d22:	0080      	lsls	r0, r0, #2
 8006d24:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <xTaskRemoveFromEventList+0x70>)
 8006d26:	18c0      	adds	r0, r0, r3
 8006d28:	0029      	movs	r1, r5
 8006d2a:	f7ff f8fb 	bl	8005f24 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <xTaskRemoveFromEventList+0x74>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 8006d36:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d903      	bls.n	8006d44 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <xTaskRemoveFromEventList+0x78>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 8006d42:	3001      	adds	r0, #1
}
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 8006d46:	b672      	cpsid	i
 8006d48:	e7fe      	b.n	8006d48 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d4a:	4807      	ldr	r0, [pc, #28]	; (8006d68 <xTaskRemoveFromEventList+0x7c>)
 8006d4c:	0029      	movs	r1, r5
 8006d4e:	f7ff f8e9 	bl	8005f24 <vListInsertEnd>
 8006d52:	e7ec      	b.n	8006d2e <xTaskRemoveFromEventList+0x42>
 8006d54:	2000130c 	.word	0x2000130c
 8006d58:	20001314 	.word	0x20001314
 8006d5c:	20000ea4 	.word	0x20000ea4
 8006d60:	20000e98 	.word	0x20000e98
 8006d64:	20001390 	.word	0x20001390
 8006d68:	2000134c 	.word	0x2000134c

08006d6c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d6c:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <vTaskInternalSetTimeOutState+0x10>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d72:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <vTaskInternalSetTimeOutState+0x14>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6043      	str	r3, [r0, #4]
}
 8006d78:	4770      	bx	lr
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	20001344 	.word	0x20001344
 8006d80:	2000138c 	.word	0x2000138c

08006d84 <xTaskCheckForTimeOut>:
{
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	0004      	movs	r4, r0
 8006d88:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d018      	beq.n	8006dc0 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTicksToWait );
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	d018      	beq.n	8006dc4 <xTaskCheckForTimeOut+0x40>
	taskENTER_CRITICAL();
 8006d92:	f000 faa5 	bl	80072e0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006d96:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <xTaskCheckForTimeOut+0x60>)
 8006d98:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	1c59      	adds	r1, r3, #1
 8006d9e:	d01b      	beq.n	8006dd8 <xTaskCheckForTimeOut+0x54>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006da0:	6861      	ldr	r1, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006da2:	4811      	ldr	r0, [pc, #68]	; (8006de8 <xTaskCheckForTimeOut+0x64>)
 8006da4:	6800      	ldr	r0, [r0, #0]
 8006da6:	6826      	ldr	r6, [r4, #0]
 8006da8:	4286      	cmp	r6, r0
 8006daa:	d002      	beq.n	8006db2 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 8006dac:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dae:	4291      	cmp	r1, r2
 8006db0:	d913      	bls.n	8006dda <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006db2:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006db4:	4283      	cmp	r3, r0
 8006db6:	d807      	bhi.n	8006dc8 <xTaskCheckForTimeOut+0x44>
			*pxTicksToWait = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006dbc:	2601      	movs	r6, #1
 8006dbe:	e00c      	b.n	8006dda <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTimeOut );
 8006dc0:	b672      	cpsid	i
 8006dc2:	e7fe      	b.n	8006dc2 <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
 8006dc4:	b672      	cpsid	i
 8006dc6:	e7fe      	b.n	8006dc6 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= xElapsedTime;
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	185b      	adds	r3, r3, r1
 8006dcc:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dce:	0020      	movs	r0, r4
 8006dd0:	f7ff ffcc 	bl	8006d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	e000      	b.n	8006dda <xTaskCheckForTimeOut+0x56>
				xReturn = pdFALSE;
 8006dd8:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8006dda:	f000 fa8d 	bl	80072f8 <vPortExitCritical>
}
 8006dde:	0030      	movs	r0, r6
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	2000138c 	.word	0x2000138c
 8006de8:	20001344 	.word	0x20001344

08006dec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <vTaskMissedYield+0x8>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	4770      	bx	lr
 8006df4:	20001390 	.word	0x20001390

08006df8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <xTaskGetSchedulerState+0x18>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dfc:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e02:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <xTaskGetSchedulerState+0x1c>)
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	4243      	negs	r3, r0
 8006e08:	4158      	adcs	r0, r3
 8006e0a:	0040      	lsls	r0, r0, #1
	}
 8006e0c:	4770      	bx	lr
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	20001360 	.word	0x20001360
 8006e14:	2000130c 	.word	0x2000130c

08006e18 <xTaskPriorityDisinherit>:
	{
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8006e1c:	d02c      	beq.n	8006e78 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 8006e1e:	4b18      	ldr	r3, [pc, #96]	; (8006e80 <xTaskPriorityDisinherit+0x68>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4283      	cmp	r3, r0
 8006e24:	d001      	beq.n	8006e2a <xTaskPriorityDisinherit+0x12>
 8006e26:	b672      	cpsid	i
 8006e28:	e7fe      	b.n	8006e28 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <xTaskPriorityDisinherit+0x1c>
 8006e30:	b672      	cpsid	i
 8006e32:	e7fe      	b.n	8006e32 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8006e34:	3b01      	subs	r3, #1
 8006e36:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e38:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006e3a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006e3c:	4291      	cmp	r1, r2
 8006e3e:	d01d      	beq.n	8006e7c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 8006e40:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d119      	bne.n	8006e7a <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e46:	1d25      	adds	r5, r4, #4
 8006e48:	0028      	movs	r0, r5
 8006e4a:	f7ff f88d 	bl	8005f68 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006e50:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e52:	2238      	movs	r2, #56	; 0x38
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e58:	4a0a      	ldr	r2, [pc, #40]	; (8006e84 <xTaskPriorityDisinherit+0x6c>)
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d901      	bls.n	8006e64 <xTaskPriorityDisinherit+0x4c>
 8006e60:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <xTaskPriorityDisinherit+0x6c>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	0098      	lsls	r0, r3, #2
 8006e66:	18c0      	adds	r0, r0, r3
 8006e68:	0080      	lsls	r0, r0, #2
 8006e6a:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <xTaskPriorityDisinherit+0x70>)
 8006e6c:	18c0      	adds	r0, r0, r3
 8006e6e:	0029      	movs	r1, r5
 8006e70:	f7ff f858 	bl	8005f24 <vListInsertEnd>
					xReturn = pdTRUE;
 8006e74:	2001      	movs	r0, #1
 8006e76:	e000      	b.n	8006e7a <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 8006e78:	2000      	movs	r0, #0
	}
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e7fc      	b.n	8006e7a <xTaskPriorityDisinherit+0x62>
 8006e80:	20000e98 	.word	0x20000e98
 8006e84:	20001314 	.word	0x20001314
 8006e88:	20000ea4 	.word	0x20000ea4

08006e8c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e90:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e92:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e94:	4291      	cmp	r1, r2
 8006e96:	d80c      	bhi.n	8006eb2 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e98:	1ad2      	subs	r2, r2, r3
 8006e9a:	6983      	ldr	r3, [r0, #24]
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e9c:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d300      	bcc.n	8006ea4 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006ea2:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ea4:	1d21      	adds	r1, r4, #4
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <prvInsertTimerInActiveList+0x40>)
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f7ff f846 	bl	8005f3a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e7f7      	b.n	8006ea2 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d202      	bcs.n	8006ebc <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 8006eb6:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	d2f2      	bcs.n	8006ea2 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ebc:	1d21      	adds	r1, r4, #4
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <prvInsertTimerInActiveList+0x44>)
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	f7ff f83a 	bl	8005f3a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e7eb      	b.n	8006ea2 <prvInsertTimerInActiveList+0x16>
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	20001398 	.word	0x20001398
 8006ed0:	20001394 	.word	0x20001394

08006ed4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ed4:	b530      	push	{r4, r5, lr}
 8006ed6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ed8:	f000 fa02 	bl	80072e0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <prvCheckForValidListAndQueue+0x50>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ee4:	f000 fa08 	bl	80072f8 <vPortExitCritical>
}
 8006ee8:	b003      	add	sp, #12
 8006eea:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006eec:	4d0e      	ldr	r5, [pc, #56]	; (8006f28 <prvCheckForValidListAndQueue+0x54>)
 8006eee:	0028      	movs	r0, r5
 8006ef0:	f7ff f80a 	bl	8005f08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ef4:	4c0d      	ldr	r4, [pc, #52]	; (8006f2c <prvCheckForValidListAndQueue+0x58>)
 8006ef6:	0020      	movs	r0, r4
 8006ef8:	f7ff f806 	bl	8005f08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006efc:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <prvCheckForValidListAndQueue+0x5c>)
 8006efe:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f00:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <prvCheckForValidListAndQueue+0x60>)
 8006f02:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f04:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <prvCheckForValidListAndQueue+0x64>)
 8006f06:	4a0d      	ldr	r2, [pc, #52]	; (8006f3c <prvCheckForValidListAndQueue+0x68>)
 8006f08:	2100      	movs	r1, #0
 8006f0a:	9100      	str	r1, [sp, #0]
 8006f0c:	3110      	adds	r1, #16
 8006f0e:	200a      	movs	r0, #10
 8006f10:	f7ff f906 	bl	8006120 <xQueueGenericCreateStatic>
 8006f14:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <prvCheckForValidListAndQueue+0x50>)
 8006f16:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d0e3      	beq.n	8006ee4 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f1c:	4908      	ldr	r1, [pc, #32]	; (8006f40 <prvCheckForValidListAndQueue+0x6c>)
 8006f1e:	f7ff fadf 	bl	80064e0 <vQueueAddToRegistry>
 8006f22:	e7df      	b.n	8006ee4 <prvCheckForValidListAndQueue+0x10>
 8006f24:	200014b8 	.word	0x200014b8
 8006f28:	2000143c 	.word	0x2000143c
 8006f2c:	20001450 	.word	0x20001450
 8006f30:	20001394 	.word	0x20001394
 8006f34:	20001398 	.word	0x20001398
 8006f38:	20001468 	.word	0x20001468
 8006f3c:	2000139c 	.word	0x2000139c
 8006f40:	0800c158 	.word	0x0800c158

08006f44 <xTimerCreateTimerTask>:
{
 8006f44:	b500      	push	{lr}
 8006f46:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8006f48:	f7ff ffc4 	bl	8006ed4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006f4c:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <xTimerCreateTimerTask+0x4c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01a      	beq.n	8006f8a <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f58:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f5a:	aa07      	add	r2, sp, #28
 8006f5c:	a906      	add	r1, sp, #24
 8006f5e:	a805      	add	r0, sp, #20
 8006f60:	f7fe ffc6 	bl	8005ef0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f64:	9a07      	ldr	r2, [sp, #28]
 8006f66:	490b      	ldr	r1, [pc, #44]	; (8006f94 <xTimerCreateTimerTask+0x50>)
 8006f68:	480b      	ldr	r0, [pc, #44]	; (8006f98 <xTimerCreateTimerTask+0x54>)
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	9302      	str	r3, [sp, #8]
 8006f6e:	9b06      	ldr	r3, [sp, #24]
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	2302      	movs	r3, #2
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	2300      	movs	r3, #0
 8006f78:	f7ff fc66 	bl	8006848 <xTaskCreateStatic>
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <xTimerCreateTimerTask+0x58>)
 8006f7e:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d002      	beq.n	8006f8a <xTimerCreateTimerTask+0x46>
}
 8006f84:	2001      	movs	r0, #1
 8006f86:	b009      	add	sp, #36	; 0x24
 8006f88:	bd00      	pop	{pc}
	configASSERT( xReturn );
 8006f8a:	b672      	cpsid	i
 8006f8c:	e7fe      	b.n	8006f8c <xTimerCreateTimerTask+0x48>
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	200014b8 	.word	0x200014b8
 8006f94:	0800c160 	.word	0x0800c160
 8006f98:	080070b1 	.word	0x080070b1
 8006f9c:	200014bc 	.word	0x200014bc

08006fa0 <xTimerGenericCommand>:
{
 8006fa0:	b530      	push	{r4, r5, lr}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	001c      	movs	r4, r3
	configASSERT( xTimer );
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d014      	beq.n	8006fd4 <xTimerGenericCommand+0x34>
	if( xTimerQueue != NULL )
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <xTimerGenericCommand+0x5c>)
 8006fac:	681d      	ldr	r5, [r3, #0]
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	d022      	beq.n	8006ff8 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
 8006fb2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fb4:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fb6:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fb8:	2905      	cmp	r1, #5
 8006fba:	dc15      	bgt.n	8006fe8 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fbc:	f7ff ff1c 	bl	8006df8 <xTaskGetSchedulerState>
 8006fc0:	2802      	cmp	r0, #2
 8006fc2:	d009      	beq.n	8006fd8 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <xTimerGenericCommand+0x5c>)
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4669      	mov	r1, sp
 8006fce:	f7ff f8fe 	bl	80061ce <xQueueGenericSend>
 8006fd2:	e00f      	b.n	8006ff4 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
 8006fd4:	b672      	cpsid	i
 8006fd6:	e7fe      	b.n	8006fd6 <xTimerGenericCommand+0x36>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fd8:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <xTimerGenericCommand+0x5c>)
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9a08      	ldr	r2, [sp, #32]
 8006fe0:	4669      	mov	r1, sp
 8006fe2:	f7ff f8f4 	bl	80061ce <xQueueGenericSend>
 8006fe6:	e005      	b.n	8006ff4 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fe8:	2300      	movs	r3, #0
 8006fea:	0022      	movs	r2, r4
 8006fec:	4669      	mov	r1, sp
 8006fee:	0028      	movs	r0, r5
 8006ff0:	f7ff f98f 	bl	8006312 <xQueueGenericSendFromISR>
}
 8006ff4:	b005      	add	sp, #20
 8006ff6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8006ff8:	2000      	movs	r0, #0
	return xReturn;
 8006ffa:	e7fb      	b.n	8006ff4 <xTimerGenericCommand+0x54>
 8006ffc:	200014b8 	.word	0x200014b8

08007000 <prvSampleTimeNow>:
{
 8007000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007002:	46de      	mov	lr, fp
 8007004:	4657      	mov	r7, sl
 8007006:	464e      	mov	r6, r9
 8007008:	4645      	mov	r5, r8
 800700a:	b5e0      	push	{r5, r6, r7, lr}
 800700c:	b083      	sub	sp, #12
 800700e:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
 8007010:	f7ff fcbe 	bl	8006990 <xTaskGetTickCount>
 8007014:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8007016:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <prvSampleTimeNow+0xa4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4283      	cmp	r3, r0
 800701c:	d80d      	bhi.n	800703a <prvSampleTimeNow+0x3a>
 800701e:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 8007020:	464a      	mov	r2, r9
 8007022:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 8007024:	4b1f      	ldr	r3, [pc, #124]	; (80070a4 <prvSampleTimeNow+0xa4>)
 8007026:	4642      	mov	r2, r8
 8007028:	601a      	str	r2, [r3, #0]
}
 800702a:	4640      	mov	r0, r8
 800702c:	b003      	add	sp, #12
 800702e:	bcf0      	pop	{r4, r5, r6, r7}
 8007030:	46bb      	mov	fp, r7
 8007032:	46b2      	mov	sl, r6
 8007034:	46a9      	mov	r9, r5
 8007036:	46a0      	mov	r8, r4
 8007038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800703a:	4d1b      	ldr	r5, [pc, #108]	; (80070a8 <prvSampleTimeNow+0xa8>)
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800703c:	2728      	movs	r7, #40	; 0x28
 800703e:	2604      	movs	r6, #4
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	2a00      	cmp	r2, #0
 8007046:	d025      	beq.n	8007094 <prvSampleTimeNow+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007050:	1d23      	adds	r3, r4, #4
 8007052:	469b      	mov	fp, r3
 8007054:	0018      	movs	r0, r3
 8007056:	f7fe ff87 	bl	8005f68 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800705a:	6a23      	ldr	r3, [r4, #32]
 800705c:	0020      	movs	r0, r4
 800705e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007060:	5de3      	ldrb	r3, [r4, r7]
 8007062:	421e      	tst	r6, r3
 8007064:	d0ec      	beq.n	8007040 <prvSampleTimeNow+0x40>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007066:	69a3      	ldr	r3, [r4, #24]
 8007068:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800706a:	459a      	cmp	sl, r3
 800706c:	d207      	bcs.n	800707e <prvSampleTimeNow+0x7e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800706e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007070:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <prvSampleTimeNow+0xa8>)
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	4659      	mov	r1, fp
 8007078:	f7fe ff5f 	bl	8005f3a <vListInsert>
 800707c:	e7df      	b.n	800703e <prvSampleTimeNow+0x3e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800707e:	2300      	movs	r3, #0
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	4652      	mov	r2, sl
 8007084:	2100      	movs	r1, #0
 8007086:	0020      	movs	r0, r4
 8007088:	f7ff ff8a 	bl	8006fa0 <xTimerGenericCommand>
				configASSERT( xResult );
 800708c:	2800      	cmp	r0, #0
 800708e:	d1d6      	bne.n	800703e <prvSampleTimeNow+0x3e>
 8007090:	b672      	cpsid	i
 8007092:	e7fe      	b.n	8007092 <prvSampleTimeNow+0x92>
	pxCurrentTimerList = pxOverflowTimerList;
 8007094:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <prvSampleTimeNow+0xa8>)
 8007096:	4905      	ldr	r1, [pc, #20]	; (80070ac <prvSampleTimeNow+0xac>)
 8007098:	6808      	ldr	r0, [r1, #0]
 800709a:	6010      	str	r0, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800709c:	600b      	str	r3, [r1, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800709e:	2301      	movs	r3, #1
 80070a0:	e7be      	b.n	8007020 <prvSampleTimeNow+0x20>
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	20001464 	.word	0x20001464
 80070a8:	20001394 	.word	0x20001394
 80070ac:	20001398 	.word	0x20001398

080070b0 <prvTimerTask>:
{
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070b4:	4b61      	ldr	r3, [pc, #388]	; (800723c <prvTimerTask+0x18c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070ba:	2c00      	cmp	r4, #0
 80070bc:	d021      	beq.n	8007102 <prvTimerTask+0x52>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 80070c2:	f7ff fc5d 	bl	8006980 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070c6:	a804      	add	r0, sp, #16
 80070c8:	f7ff ff9a 	bl	8007000 <prvSampleTimeNow>
 80070cc:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80070ce:	9a04      	ldr	r2, [sp, #16]
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	d146      	bne.n	8007162 <prvTimerTask+0xb2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070d4:	4284      	cmp	r4, r0
 80070d6:	d822      	bhi.n	800711e <prvTimerTask+0x6e>
				( void ) xTaskResumeAll();
 80070d8:	f7ff fcfa 	bl	8006ad0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070dc:	4b57      	ldr	r3, [pc, #348]	; (800723c <prvTimerTask+0x18c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070e4:	1d30      	adds	r0, r6, #4
 80070e6:	f7fe ff3f 	bl	8005f68 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ea:	2328      	movs	r3, #40	; 0x28
 80070ec:	5cf3      	ldrb	r3, [r6, r3]
 80070ee:	075a      	lsls	r2, r3, #29
 80070f0:	d420      	bmi.n	8007134 <prvTimerTask+0x84>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070f2:	2201      	movs	r2, #1
 80070f4:	4393      	bics	r3, r2
 80070f6:	3227      	adds	r2, #39	; 0x27
 80070f8:	54b3      	strb	r3, [r6, r2]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070fa:	6a33      	ldr	r3, [r6, #32]
 80070fc:	0030      	movs	r0, r6
 80070fe:	4798      	blx	r3
}
 8007100:	e016      	b.n	8007130 <prvTimerTask+0x80>
	vTaskSuspendAll();
 8007102:	f7ff fc3d 	bl	8006980 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007106:	a804      	add	r0, sp, #16
 8007108:	f7ff ff7a 	bl	8007000 <prvSampleTimeNow>
 800710c:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d126      	bne.n	8007162 <prvTimerTask+0xb2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007114:	4b4a      	ldr	r3, [pc, #296]	; (8007240 <prvTimerTask+0x190>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4253      	negs	r3, r2
 800711c:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800711e:	1b61      	subs	r1, r4, r5
 8007120:	4b48      	ldr	r3, [pc, #288]	; (8007244 <prvTimerTask+0x194>)
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	f7ff f9f0 	bl	8006508 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007128:	f7ff fcd2 	bl	8006ad0 <xTaskResumeAll>
 800712c:	2800      	cmp	r0, #0
 800712e:	d015      	beq.n	800715c <prvTimerTask+0xac>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007130:	4c44      	ldr	r4, [pc, #272]	; (8007244 <prvTimerTask+0x194>)
}
 8007132:	e020      	b.n	8007176 <prvTimerTask+0xc6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007134:	69b1      	ldr	r1, [r6, #24]
 8007136:	1861      	adds	r1, r4, r1
 8007138:	0023      	movs	r3, r4
 800713a:	002a      	movs	r2, r5
 800713c:	0030      	movs	r0, r6
 800713e:	f7ff fea5 	bl	8006e8c <prvInsertTimerInActiveList>
 8007142:	2800      	cmp	r0, #0
 8007144:	d0d9      	beq.n	80070fa <prvTimerTask+0x4a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007146:	2300      	movs	r3, #0
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	0022      	movs	r2, r4
 800714c:	2100      	movs	r1, #0
 800714e:	0030      	movs	r0, r6
 8007150:	f7ff ff26 	bl	8006fa0 <xTimerGenericCommand>
			configASSERT( xResult );
 8007154:	2800      	cmp	r0, #0
 8007156:	d1d0      	bne.n	80070fa <prvTimerTask+0x4a>
 8007158:	b672      	cpsid	i
 800715a:	e7fe      	b.n	800715a <prvTimerTask+0xaa>
					portYIELD_WITHIN_API();
 800715c:	f000 f8b4 	bl	80072c8 <vPortYield>
 8007160:	e7e6      	b.n	8007130 <prvTimerTask+0x80>
			( void ) xTaskResumeAll();
 8007162:	f7ff fcb5 	bl	8006ad0 <xTaskResumeAll>
 8007166:	e7e3      	b.n	8007130 <prvTimerTask+0x80>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007168:	9907      	ldr	r1, [sp, #28]
 800716a:	9806      	ldr	r0, [sp, #24]
 800716c:	9b05      	ldr	r3, [sp, #20]
 800716e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	da09      	bge.n	800718a <prvTimerTask+0xda>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	2200      	movs	r2, #0
 800717a:	a904      	add	r1, sp, #16
 800717c:	f7ff f91d 	bl	80063ba <xQueueReceive>
 8007180:	2800      	cmp	r0, #0
 8007182:	d097      	beq.n	80070b4 <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	dbee      	blt.n	8007168 <prvTimerTask+0xb8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800718a:	9d06      	ldr	r5, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800718c:	696b      	ldr	r3, [r5, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <prvTimerTask+0xe8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007192:	1d28      	adds	r0, r5, #4
 8007194:	f7fe fee8 	bl	8005f68 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007198:	a803      	add	r0, sp, #12
 800719a:	f7ff ff31 	bl	8007000 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800719e:	9904      	ldr	r1, [sp, #16]
 80071a0:	2909      	cmp	r1, #9
 80071a2:	d8e8      	bhi.n	8007176 <prvTimerTask+0xc6>
 80071a4:	0089      	lsls	r1, r1, #2
 80071a6:	4b28      	ldr	r3, [pc, #160]	; (8007248 <prvTimerTask+0x198>)
 80071a8:	5859      	ldr	r1, [r3, r1]
 80071aa:	468f      	mov	pc, r1
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071ac:	2228      	movs	r2, #40	; 0x28
 80071ae:	5cab      	ldrb	r3, [r5, r2]
 80071b0:	2101      	movs	r1, #1
 80071b2:	430b      	orrs	r3, r1
 80071b4:	54ab      	strb	r3, [r5, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	69a9      	ldr	r1, [r5, #24]
 80071ba:	1859      	adds	r1, r3, r1
 80071bc:	0002      	movs	r2, r0
 80071be:	0028      	movs	r0, r5
 80071c0:	f7ff fe64 	bl	8006e8c <prvInsertTimerInActiveList>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d0d6      	beq.n	8007176 <prvTimerTask+0xc6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071c8:	6a2b      	ldr	r3, [r5, #32]
 80071ca:	0028      	movs	r0, r5
 80071cc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ce:	2328      	movs	r3, #40	; 0x28
 80071d0:	5ceb      	ldrb	r3, [r5, r3]
 80071d2:	075b      	lsls	r3, r3, #29
 80071d4:	d5cf      	bpl.n	8007176 <prvTimerTask+0xc6>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071d6:	9a05      	ldr	r2, [sp, #20]
 80071d8:	69ab      	ldr	r3, [r5, #24]
 80071da:	18d2      	adds	r2, r2, r3
 80071dc:	2300      	movs	r3, #0
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2100      	movs	r1, #0
 80071e2:	0028      	movs	r0, r5
 80071e4:	f7ff fedc 	bl	8006fa0 <xTimerGenericCommand>
							configASSERT( xResult );
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d1c4      	bne.n	8007176 <prvTimerTask+0xc6>
 80071ec:	b672      	cpsid	i
 80071ee:	e7fe      	b.n	80071ee <prvTimerTask+0x13e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071f0:	2228      	movs	r2, #40	; 0x28
 80071f2:	5cab      	ldrb	r3, [r5, r2]
 80071f4:	2101      	movs	r1, #1
 80071f6:	438b      	bics	r3, r1
 80071f8:	54ab      	strb	r3, [r5, r2]
					break;
 80071fa:	e7bc      	b.n	8007176 <prvTimerTask+0xc6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071fc:	2228      	movs	r2, #40	; 0x28
 80071fe:	5cab      	ldrb	r3, [r5, r2]
 8007200:	2101      	movs	r1, #1
 8007202:	430b      	orrs	r3, r1
 8007204:	54ab      	strb	r3, [r5, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007206:	9905      	ldr	r1, [sp, #20]
 8007208:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800720a:	2900      	cmp	r1, #0
 800720c:	d006      	beq.n	800721c <prvTimerTask+0x16c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800720e:	1841      	adds	r1, r0, r1
 8007210:	0003      	movs	r3, r0
 8007212:	0002      	movs	r2, r0
 8007214:	0028      	movs	r0, r5
 8007216:	f7ff fe39 	bl	8006e8c <prvInsertTimerInActiveList>
					break;
 800721a:	e7ac      	b.n	8007176 <prvTimerTask+0xc6>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800721c:	b672      	cpsid	i
 800721e:	e7fe      	b.n	800721e <prvTimerTask+0x16e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007220:	2328      	movs	r3, #40	; 0x28
 8007222:	5ceb      	ldrb	r3, [r5, r3]
 8007224:	079a      	lsls	r2, r3, #30
 8007226:	d504      	bpl.n	8007232 <prvTimerTask+0x182>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007228:	2201      	movs	r2, #1
 800722a:	4393      	bics	r3, r2
 800722c:	3227      	adds	r2, #39	; 0x27
 800722e:	54ab      	strb	r3, [r5, r2]
 8007230:	e7a1      	b.n	8007176 <prvTimerTask+0xc6>
							vPortFree( pxTimer );
 8007232:	0028      	movs	r0, r5
 8007234:	f000 f9a4 	bl	8007580 <vPortFree>
 8007238:	e79d      	b.n	8007176 <prvTimerTask+0xc6>
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	20001394 	.word	0x20001394
 8007240:	20001398 	.word	0x20001398
 8007244:	200014b8 	.word	0x200014b8
 8007248:	0800c168 	.word	0x0800c168

0800724c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800724c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800724e:	2300      	movs	r3, #0
 8007250:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <prvTaskExitError+0x20>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3301      	adds	r3, #1
 8007258:	d001      	beq.n	800725e <prvTaskExitError+0x12>
 800725a:	b672      	cpsid	i
 800725c:	e7fe      	b.n	800725c <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800725e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0fc      	beq.n	8007260 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007266:	b002      	add	sp, #8
 8007268:	4770      	bx	lr
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	2000000c 	.word	0x2000000c

08007270 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007270:	4a0b      	ldr	r2, [pc, #44]	; (80072a0 <pxCurrentTCBConst2>)
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	3020      	adds	r0, #32
 8007278:	f380 8809 	msr	PSP, r0
 800727c:	2002      	movs	r0, #2
 800727e:	f380 8814 	msr	CONTROL, r0
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007288:	46ae      	mov	lr, r5
 800728a:	bc08      	pop	{r3}
 800728c:	bc04      	pop	{r2}
 800728e:	b662      	cpsie	i
 8007290:	4718      	bx	r3
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46c0      	nop			; (mov r8, r8)
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46c0      	nop			; (mov r8, r8)
 800729e:	46c0      	nop			; (mov r8, r8)

080072a0 <pxCurrentTCBConst2>:
 80072a0:	20000e98 	.word	0x20000e98

080072a4 <pxPortInitialiseStack>:
{
 80072a4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072a6:	1f03      	subs	r3, r0, #4
 80072a8:	2480      	movs	r4, #128	; 0x80
 80072aa:	0464      	lsls	r4, r4, #17
 80072ac:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80072ae:	3b04      	subs	r3, #4
 80072b0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072b2:	3b04      	subs	r3, #4
 80072b4:	4902      	ldr	r1, [pc, #8]	; (80072c0 <pxPortInitialiseStack+0x1c>)
 80072b6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072b8:	3b14      	subs	r3, #20
 80072ba:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80072bc:	3840      	subs	r0, #64	; 0x40
}
 80072be:	bd10      	pop	{r4, pc}
 80072c0:	0800724d 	.word	0x0800724d

080072c4 <SVC_Handler>:
}
 80072c4:	4770      	bx	lr
	...

080072c8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <vPortYield+0x14>)
 80072ca:	2280      	movs	r2, #128	; 0x80
 80072cc:	0552      	lsls	r2, r2, #21
 80072ce:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80072d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80072d4:	f3bf 8f6f 	isb	sy
}
 80072d8:	4770      	bx	lr
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	e000ed04 	.word	0xe000ed04

080072e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 80072e0:	b672      	cpsid	i
	uxCriticalNesting++;
 80072e2:	4a04      	ldr	r2, [pc, #16]	; (80072f4 <vPortEnterCritical+0x14>)
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	3301      	adds	r3, #1
 80072e8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 80072ea:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80072ee:	f3bf 8f6f 	isb	sy
}
 80072f2:	4770      	bx	lr
 80072f4:	2000000c 	.word	0x2000000c

080072f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <vPortExitCritical+0x1c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <vPortExitCritical+0xc>
 8007300:	b672      	cpsid	i
 8007302:	e7fe      	b.n	8007302 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 8007304:	3b01      	subs	r3, #1
 8007306:	4a03      	ldr	r2, [pc, #12]	; (8007314 <vPortExitCritical+0x1c>)
 8007308:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800730a:	2b00      	cmp	r3, #0
 800730c:	d100      	bne.n	8007310 <vPortExitCritical+0x18>
	{
		portENABLE_INTERRUPTS();
 800730e:	b662      	cpsie	i
	}
}
 8007310:	4770      	bx	lr
 8007312:	46c0      	nop			; (mov r8, r8)
 8007314:	2000000c 	.word	0x2000000c

08007318 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007318:	f3ef 8010 	mrs	r0, PRIMASK
 800731c:	b672      	cpsid	i
 800731e:	4770      	bx	lr

08007320 <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007320:	f380 8810 	msr	PRIMASK, r0
 8007324:	4770      	bx	lr
	...

08007330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007330:	f3ef 8009 	mrs	r0, PSP
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <pxCurrentTCBConst>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	3820      	subs	r0, #32
 800733a:	6010      	str	r0, [r2, #0]
 800733c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800733e:	4644      	mov	r4, r8
 8007340:	464d      	mov	r5, r9
 8007342:	4656      	mov	r6, sl
 8007344:	465f      	mov	r7, fp
 8007346:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007348:	b508      	push	{r3, lr}
 800734a:	b672      	cpsid	i
 800734c:	f7ff fc50 	bl	8006bf0 <vTaskSwitchContext>
 8007350:	b662      	cpsie	i
 8007352:	bc0c      	pop	{r2, r3}
 8007354:	6811      	ldr	r1, [r2, #0]
 8007356:	6808      	ldr	r0, [r1, #0]
 8007358:	3010      	adds	r0, #16
 800735a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800735c:	46a0      	mov	r8, r4
 800735e:	46a9      	mov	r9, r5
 8007360:	46b2      	mov	sl, r6
 8007362:	46bb      	mov	fp, r7
 8007364:	f380 8809 	msr	PSP, r0
 8007368:	3820      	subs	r0, #32
 800736a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800736c:	4718      	bx	r3
 800736e:	46c0      	nop			; (mov r8, r8)

08007370 <pxCurrentTCBConst>:
 8007370:	20000e98 	.word	0x20000e98

08007374 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007374:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007376:	f7ff ffcf 	bl	8007318 <ulSetInterruptMaskFromISR>
 800737a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800737c:	f7ff fb0e 	bl	800699c <xTaskIncrementTick>
 8007380:	2800      	cmp	r0, #0
 8007382:	d003      	beq.n	800738c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007384:	4b03      	ldr	r3, [pc, #12]	; (8007394 <xPortSysTickHandler+0x20>)
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	0552      	lsls	r2, r2, #21
 800738a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800738c:	0020      	movs	r0, r4
 800738e:	f7ff ffc7 	bl	8007320 <vClearInterruptMaskFromISR>
}
 8007392:	bd10      	pop	{r4, pc}
 8007394:	e000ed04 	.word	0xe000ed04

08007398 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007398:	b510      	push	{r4, lr}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800739a:	4c08      	ldr	r4, [pc, #32]	; (80073bc <vPortSetupTimerInterrupt+0x24>)
 800739c:	2300      	movs	r3, #0
 800739e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073a0:	4a07      	ldr	r2, [pc, #28]	; (80073c0 <vPortSetupTimerInterrupt+0x28>)
 80073a2:	6013      	str	r3, [r2, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <vPortSetupTimerInterrupt+0x2c>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	21fa      	movs	r1, #250	; 0xfa
 80073aa:	0089      	lsls	r1, r1, #2
 80073ac:	f7f8 fec8 	bl	8000140 <__udivsi3>
 80073b0:	3801      	subs	r0, #1
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <vPortSetupTimerInterrupt+0x30>)
 80073b4:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80073b6:	2307      	movs	r3, #7
 80073b8:	6023      	str	r3, [r4, #0]
}
 80073ba:	bd10      	pop	{r4, pc}
 80073bc:	e000e010 	.word	0xe000e010
 80073c0:	e000e018 	.word	0xe000e018
 80073c4:	20000000 	.word	0x20000000
 80073c8:	e000e014 	.word	0xe000e014

080073cc <xPortStartScheduler>:
{
 80073cc:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <xPortStartScheduler+0x34>)
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	22ff      	movs	r2, #255	; 0xff
 80073d4:	0412      	lsls	r2, r2, #16
 80073d6:	430a      	orrs	r2, r1
 80073d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073da:	6819      	ldr	r1, [r3, #0]
 80073dc:	22ff      	movs	r2, #255	; 0xff
 80073de:	0612      	lsls	r2, r2, #24
 80073e0:	430a      	orrs	r2, r1
 80073e2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80073e4:	f7ff ffd8 	bl	8007398 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <xPortStartScheduler+0x38>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 80073ee:	f7ff ff3f 	bl	8007270 <vPortStartFirstTask>
	vTaskSwitchContext();
 80073f2:	f7ff fbfd 	bl	8006bf0 <vTaskSwitchContext>
	prvTaskExitError();
 80073f6:	f7ff ff29 	bl	800724c <prvTaskExitError>
}
 80073fa:	2000      	movs	r0, #0
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	e000ed20 	.word	0xe000ed20
 8007404:	2000000c 	.word	0x2000000c

08007408 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007408:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800740a:	4b14      	ldr	r3, [pc, #80]	; (800745c <prvInsertBlockIntoFreeList+0x54>)
 800740c:	001a      	movs	r2, r3
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4283      	cmp	r3, r0
 8007412:	d3fb      	bcc.n	800740c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007414:	6854      	ldr	r4, [r2, #4]
 8007416:	1911      	adds	r1, r2, r4
 8007418:	4288      	cmp	r0, r1
 800741a:	d008      	beq.n	800742e <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800741c:	6844      	ldr	r4, [r0, #4]
 800741e:	1901      	adds	r1, r0, r4
 8007420:	428b      	cmp	r3, r1
 8007422:	d00e      	beq.n	8007442 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007424:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007426:	4282      	cmp	r2, r0
 8007428:	d000      	beq.n	800742c <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800742a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800742c:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800742e:	6841      	ldr	r1, [r0, #4]
 8007430:	1909      	adds	r1, r1, r4
 8007432:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007434:	000c      	movs	r4, r1
 8007436:	1851      	adds	r1, r2, r1
 8007438:	428b      	cmp	r3, r1
 800743a:	d001      	beq.n	8007440 <prvInsertBlockIntoFreeList+0x38>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800743c:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800743e:	e7f5      	b.n	800742c <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007440:	0010      	movs	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007442:	4907      	ldr	r1, [pc, #28]	; (8007460 <prvInsertBlockIntoFreeList+0x58>)
 8007444:	6809      	ldr	r1, [r1, #0]
 8007446:	428b      	cmp	r3, r1
 8007448:	d005      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x4e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	191b      	adds	r3, r3, r4
 800744e:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007450:	6813      	ldr	r3, [r2, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	e7e6      	b.n	8007424 <prvInsertBlockIntoFreeList+0x1c>
 8007456:	000b      	movs	r3, r1
 8007458:	e7e4      	b.n	8007424 <prvInsertBlockIntoFreeList+0x1c>
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	200020d8 	.word	0x200020d8
 8007460:	200014c0 	.word	0x200014c0

08007464 <pvPortMalloc>:
{
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8007468:	f7ff fa8a 	bl	8006980 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800746c:	4b3d      	ldr	r3, [pc, #244]	; (8007564 <pvPortMalloc+0x100>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d015      	beq.n	80074a0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007474:	4b3c      	ldr	r3, [pc, #240]	; (8007568 <pvPortMalloc+0x104>)
 8007476:	681d      	ldr	r5, [r3, #0]
 8007478:	422c      	tst	r4, r5
 800747a:	d16d      	bne.n	8007558 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 800747c:	2c00      	cmp	r4, #0
 800747e:	d06b      	beq.n	8007558 <pvPortMalloc+0xf4>
				xWantedSize += xHeapStructSize;
 8007480:	0022      	movs	r2, r4
 8007482:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007484:	0764      	lsls	r4, r4, #29
 8007486:	d002      	beq.n	800748e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007488:	2307      	movs	r3, #7
 800748a:	439a      	bics	r2, r3
 800748c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800748e:	2a00      	cmp	r2, #0
 8007490:	d062      	beq.n	8007558 <pvPortMalloc+0xf4>
 8007492:	4b36      	ldr	r3, [pc, #216]	; (800756c <pvPortMalloc+0x108>)
 8007494:	681f      	ldr	r7, [r3, #0]
 8007496:	4297      	cmp	r7, r2
 8007498:	d35e      	bcc.n	8007558 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 800749a:	4935      	ldr	r1, [pc, #212]	; (8007570 <pvPortMalloc+0x10c>)
 800749c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800749e:	e028      	b.n	80074f2 <pvPortMalloc+0x8e>
	uxAddress = ( size_t ) ucHeap;
 80074a0:	4a34      	ldr	r2, [pc, #208]	; (8007574 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074a2:	0753      	lsls	r3, r2, #29
 80074a4:	d009      	beq.n	80074ba <pvPortMalloc+0x56>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074a6:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074a8:	2307      	movs	r3, #7
 80074aa:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074ac:	23c0      	movs	r3, #192	; 0xc0
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	469c      	mov	ip, r3
 80074b2:	4462      	add	r2, ip
 80074b4:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074b6:	000a      	movs	r2, r1
 80074b8:	e001      	b.n	80074be <pvPortMalloc+0x5a>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074ba:	23c0      	movs	r3, #192	; 0xc0
 80074bc:	011b      	lsls	r3, r3, #4
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074be:	482c      	ldr	r0, [pc, #176]	; (8007570 <pvPortMalloc+0x10c>)
 80074c0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074c2:	2100      	movs	r1, #0
 80074c4:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074c6:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 80074c8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074ca:	2007      	movs	r0, #7
 80074cc:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 80074ce:	4825      	ldr	r0, [pc, #148]	; (8007564 <pvPortMalloc+0x100>)
 80074d0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80074d2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074d4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074d6:	1a99      	subs	r1, r3, r2
 80074d8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074da:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074dc:	4b26      	ldr	r3, [pc, #152]	; (8007578 <pvPortMalloc+0x114>)
 80074de:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e0:	4b22      	ldr	r3, [pc, #136]	; (800756c <pvPortMalloc+0x108>)
 80074e2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074e4:	4b20      	ldr	r3, [pc, #128]	; (8007568 <pvPortMalloc+0x104>)
 80074e6:	2280      	movs	r2, #128	; 0x80
 80074e8:	0612      	lsls	r2, r2, #24
 80074ea:	601a      	str	r2, [r3, #0]
}
 80074ec:	e7c2      	b.n	8007474 <pvPortMalloc+0x10>
 80074ee:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80074f0:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074f2:	6863      	ldr	r3, [r4, #4]
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d202      	bcs.n	80074fe <pvPortMalloc+0x9a>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f7      	bne.n	80074ee <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 80074fe:	4b19      	ldr	r3, [pc, #100]	; (8007564 <pvPortMalloc+0x100>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	42a3      	cmp	r3, r4
 8007504:	d028      	beq.n	8007558 <pvPortMalloc+0xf4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007506:	680e      	ldr	r6, [r1, #0]
 8007508:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	2b10      	cmp	r3, #16
 8007514:	d908      	bls.n	8007528 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007516:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007518:	0741      	lsls	r1, r0, #29
 800751a:	d001      	beq.n	8007520 <pvPortMalloc+0xbc>
 800751c:	b672      	cpsid	i
 800751e:	e7fe      	b.n	800751e <pvPortMalloc+0xba>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007520:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007522:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007524:	f7ff ff70 	bl	8007408 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007528:	6863      	ldr	r3, [r4, #4]
 800752a:	1aff      	subs	r7, r7, r3
 800752c:	4a0f      	ldr	r2, [pc, #60]	; (800756c <pvPortMalloc+0x108>)
 800752e:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007530:	4a11      	ldr	r2, [pc, #68]	; (8007578 <pvPortMalloc+0x114>)
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	4297      	cmp	r7, r2
 8007536:	d201      	bcs.n	800753c <pvPortMalloc+0xd8>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007538:	4a0f      	ldr	r2, [pc, #60]	; (8007578 <pvPortMalloc+0x114>)
 800753a:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753c:	431d      	orrs	r5, r3
 800753e:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007540:	2300      	movs	r3, #0
 8007542:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8007544:	4a0d      	ldr	r2, [pc, #52]	; (800757c <pvPortMalloc+0x118>)
 8007546:	6813      	ldr	r3, [r2, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800754c:	f7ff fac0 	bl	8006ad0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007550:	0773      	lsls	r3, r6, #29
 8007552:	d004      	beq.n	800755e <pvPortMalloc+0xfa>
 8007554:	b672      	cpsid	i
 8007556:	e7fe      	b.n	8007556 <pvPortMalloc+0xf2>
	( void ) xTaskResumeAll();
 8007558:	f7ff faba 	bl	8006ad0 <xTaskResumeAll>
 800755c:	2600      	movs	r6, #0
}
 800755e:	0030      	movs	r0, r6
 8007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	200014c0 	.word	0x200014c0
 8007568:	200020c4 	.word	0x200020c4
 800756c:	200020c8 	.word	0x200020c8
 8007570:	200020d8 	.word	0x200020d8
 8007574:	200014c4 	.word	0x200014c4
 8007578:	200020cc 	.word	0x200020cc
 800757c:	200020d0 	.word	0x200020d0

08007580 <vPortFree>:
{
 8007580:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007582:	2800      	cmp	r0, #0
 8007584:	d023      	beq.n	80075ce <vPortFree+0x4e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007586:	0003      	movs	r3, r0
 8007588:	3b08      	subs	r3, #8
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <vPortFree+0x50>)
 800758e:	6812      	ldr	r2, [r2, #0]
 8007590:	421a      	tst	r2, r3
 8007592:	d101      	bne.n	8007598 <vPortFree+0x18>
 8007594:	b672      	cpsid	i
 8007596:	e7fe      	b.n	8007596 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007598:	0001      	movs	r1, r0
 800759a:	3908      	subs	r1, #8
 800759c:	6809      	ldr	r1, [r1, #0]
 800759e:	2900      	cmp	r1, #0
 80075a0:	d001      	beq.n	80075a6 <vPortFree+0x26>
 80075a2:	b672      	cpsid	i
 80075a4:	e7fe      	b.n	80075a4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075a6:	3808      	subs	r0, #8
 80075a8:	0004      	movs	r4, r0
 80075aa:	4393      	bics	r3, r2
 80075ac:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80075ae:	f7ff f9e7 	bl	8006980 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075b2:	4a08      	ldr	r2, [pc, #32]	; (80075d4 <vPortFree+0x54>)
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	6811      	ldr	r1, [r2, #0]
 80075b8:	185b      	adds	r3, r3, r1
 80075ba:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075bc:	0020      	movs	r0, r4
 80075be:	f7ff ff23 	bl	8007408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075c2:	4a05      	ldr	r2, [pc, #20]	; (80075d8 <vPortFree+0x58>)
 80075c4:	6813      	ldr	r3, [r2, #0]
 80075c6:	3301      	adds	r3, #1
 80075c8:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80075ca:	f7ff fa81 	bl	8006ad0 <xTaskResumeAll>
}
 80075ce:	bd10      	pop	{r4, pc}
 80075d0:	200020c4 	.word	0x200020c4
 80075d4:	200020c8 	.word	0x200020c8
 80075d8:	200020d4 	.word	0x200020d4

080075dc <__cvt>:
 80075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075de:	001e      	movs	r6, r3
 80075e0:	2300      	movs	r3, #0
 80075e2:	0014      	movs	r4, r2
 80075e4:	b08b      	sub	sp, #44	; 0x2c
 80075e6:	429e      	cmp	r6, r3
 80075e8:	da04      	bge.n	80075f4 <__cvt+0x18>
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	0609      	lsls	r1, r1, #24
 80075ee:	1873      	adds	r3, r6, r1
 80075f0:	001e      	movs	r6, r3
 80075f2:	232d      	movs	r3, #45	; 0x2d
 80075f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075f6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80075f8:	7013      	strb	r3, [r2, #0]
 80075fa:	2320      	movs	r3, #32
 80075fc:	2203      	movs	r2, #3
 80075fe:	439f      	bics	r7, r3
 8007600:	2f46      	cmp	r7, #70	; 0x46
 8007602:	d007      	beq.n	8007614 <__cvt+0x38>
 8007604:	003b      	movs	r3, r7
 8007606:	3b45      	subs	r3, #69	; 0x45
 8007608:	4259      	negs	r1, r3
 800760a:	414b      	adcs	r3, r1
 800760c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800760e:	3a01      	subs	r2, #1
 8007610:	18cb      	adds	r3, r1, r3
 8007612:	9310      	str	r3, [sp, #64]	; 0x40
 8007614:	ab09      	add	r3, sp, #36	; 0x24
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	ab08      	add	r3, sp, #32
 800761a:	9303      	str	r3, [sp, #12]
 800761c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800761e:	9200      	str	r2, [sp, #0]
 8007620:	9302      	str	r3, [sp, #8]
 8007622:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007624:	0022      	movs	r2, r4
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	0033      	movs	r3, r6
 800762a:	f001 f91b 	bl	8008864 <_dtoa_r>
 800762e:	0005      	movs	r5, r0
 8007630:	2f47      	cmp	r7, #71	; 0x47
 8007632:	d102      	bne.n	800763a <__cvt+0x5e>
 8007634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007636:	07db      	lsls	r3, r3, #31
 8007638:	d528      	bpl.n	800768c <__cvt+0xb0>
 800763a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800763c:	18eb      	adds	r3, r5, r3
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	2f46      	cmp	r7, #70	; 0x46
 8007642:	d114      	bne.n	800766e <__cvt+0x92>
 8007644:	782b      	ldrb	r3, [r5, #0]
 8007646:	2b30      	cmp	r3, #48	; 0x30
 8007648:	d10c      	bne.n	8007664 <__cvt+0x88>
 800764a:	2200      	movs	r2, #0
 800764c:	2300      	movs	r3, #0
 800764e:	0020      	movs	r0, r4
 8007650:	0031      	movs	r1, r6
 8007652:	f7f8 fefb 	bl	800044c <__aeabi_dcmpeq>
 8007656:	2800      	cmp	r0, #0
 8007658:	d104      	bne.n	8007664 <__cvt+0x88>
 800765a:	2301      	movs	r3, #1
 800765c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007666:	9a07      	ldr	r2, [sp, #28]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	18d3      	adds	r3, r2, r3
 800766c:	9307      	str	r3, [sp, #28]
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	0020      	movs	r0, r4
 8007674:	0031      	movs	r1, r6
 8007676:	f7f8 fee9 	bl	800044c <__aeabi_dcmpeq>
 800767a:	2800      	cmp	r0, #0
 800767c:	d001      	beq.n	8007682 <__cvt+0xa6>
 800767e:	9b07      	ldr	r3, [sp, #28]
 8007680:	9309      	str	r3, [sp, #36]	; 0x24
 8007682:	2230      	movs	r2, #48	; 0x30
 8007684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007686:	9907      	ldr	r1, [sp, #28]
 8007688:	428b      	cmp	r3, r1
 800768a:	d306      	bcc.n	800769a <__cvt+0xbe>
 800768c:	0028      	movs	r0, r5
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007692:	1b5b      	subs	r3, r3, r5
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	b00b      	add	sp, #44	; 0x2c
 8007698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769a:	1c59      	adds	r1, r3, #1
 800769c:	9109      	str	r1, [sp, #36]	; 0x24
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	e7f0      	b.n	8007684 <__cvt+0xa8>

080076a2 <__exponent>:
 80076a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a4:	1c83      	adds	r3, r0, #2
 80076a6:	b087      	sub	sp, #28
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	0005      	movs	r5, r0
 80076ac:	000c      	movs	r4, r1
 80076ae:	232b      	movs	r3, #43	; 0x2b
 80076b0:	7002      	strb	r2, [r0, #0]
 80076b2:	2900      	cmp	r1, #0
 80076b4:	da01      	bge.n	80076ba <__exponent+0x18>
 80076b6:	424c      	negs	r4, r1
 80076b8:	3302      	adds	r3, #2
 80076ba:	706b      	strb	r3, [r5, #1]
 80076bc:	2c09      	cmp	r4, #9
 80076be:	dd2f      	ble.n	8007720 <__exponent+0x7e>
 80076c0:	270a      	movs	r7, #10
 80076c2:	ab04      	add	r3, sp, #16
 80076c4:	1dde      	adds	r6, r3, #7
 80076c6:	0020      	movs	r0, r4
 80076c8:	0039      	movs	r1, r7
 80076ca:	9601      	str	r6, [sp, #4]
 80076cc:	f7f8 fea8 	bl	8000420 <__aeabi_idivmod>
 80076d0:	3e01      	subs	r6, #1
 80076d2:	3130      	adds	r1, #48	; 0x30
 80076d4:	0020      	movs	r0, r4
 80076d6:	7031      	strb	r1, [r6, #0]
 80076d8:	0039      	movs	r1, r7
 80076da:	9402      	str	r4, [sp, #8]
 80076dc:	f7f8 fdba 	bl	8000254 <__divsi3>
 80076e0:	9b02      	ldr	r3, [sp, #8]
 80076e2:	0004      	movs	r4, r0
 80076e4:	2b63      	cmp	r3, #99	; 0x63
 80076e6:	dcee      	bgt.n	80076c6 <__exponent+0x24>
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	3430      	adds	r4, #48	; 0x30
 80076ec:	1e9a      	subs	r2, r3, #2
 80076ee:	0013      	movs	r3, r2
 80076f0:	9903      	ldr	r1, [sp, #12]
 80076f2:	7014      	strb	r4, [r2, #0]
 80076f4:	a804      	add	r0, sp, #16
 80076f6:	3007      	adds	r0, #7
 80076f8:	4298      	cmp	r0, r3
 80076fa:	d80c      	bhi.n	8007716 <__exponent+0x74>
 80076fc:	2300      	movs	r3, #0
 80076fe:	4282      	cmp	r2, r0
 8007700:	d804      	bhi.n	800770c <__exponent+0x6a>
 8007702:	aa04      	add	r2, sp, #16
 8007704:	3309      	adds	r3, #9
 8007706:	189b      	adds	r3, r3, r2
 8007708:	9a01      	ldr	r2, [sp, #4]
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	9a03      	ldr	r2, [sp, #12]
 800770e:	18d3      	adds	r3, r2, r3
 8007710:	1b58      	subs	r0, r3, r5
 8007712:	b007      	add	sp, #28
 8007714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007716:	7818      	ldrb	r0, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	7008      	strb	r0, [r1, #0]
 800771c:	3101      	adds	r1, #1
 800771e:	e7e9      	b.n	80076f4 <__exponent+0x52>
 8007720:	2330      	movs	r3, #48	; 0x30
 8007722:	3430      	adds	r4, #48	; 0x30
 8007724:	70ab      	strb	r3, [r5, #2]
 8007726:	70ec      	strb	r4, [r5, #3]
 8007728:	1d2b      	adds	r3, r5, #4
 800772a:	e7f1      	b.n	8007710 <__exponent+0x6e>

0800772c <_printf_float>:
 800772c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772e:	b095      	sub	sp, #84	; 0x54
 8007730:	000c      	movs	r4, r1
 8007732:	9208      	str	r2, [sp, #32]
 8007734:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007736:	9309      	str	r3, [sp, #36]	; 0x24
 8007738:	0007      	movs	r7, r0
 800773a:	f000 ff0d 	bl	8008558 <_localeconv_r>
 800773e:	6803      	ldr	r3, [r0, #0]
 8007740:	0018      	movs	r0, r3
 8007742:	930c      	str	r3, [sp, #48]	; 0x30
 8007744:	f7f8 fce0 	bl	8000108 <strlen>
 8007748:	2300      	movs	r3, #0
 800774a:	9312      	str	r3, [sp, #72]	; 0x48
 800774c:	7e23      	ldrb	r3, [r4, #24]
 800774e:	2207      	movs	r2, #7
 8007750:	930a      	str	r3, [sp, #40]	; 0x28
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	900d      	str	r0, [sp, #52]	; 0x34
 8007756:	930b      	str	r3, [sp, #44]	; 0x2c
 8007758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800775a:	682b      	ldr	r3, [r5, #0]
 800775c:	05c9      	lsls	r1, r1, #23
 800775e:	d547      	bpl.n	80077f0 <_printf_float+0xc4>
 8007760:	189b      	adds	r3, r3, r2
 8007762:	4393      	bics	r3, r2
 8007764:	001a      	movs	r2, r3
 8007766:	3208      	adds	r2, #8
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	681e      	ldr	r6, [r3, #0]
 800776c:	685d      	ldr	r5, [r3, #4]
 800776e:	0032      	movs	r2, r6
 8007770:	002b      	movs	r3, r5
 8007772:	64a2      	str	r2, [r4, #72]	; 0x48
 8007774:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007776:	2201      	movs	r2, #1
 8007778:	006b      	lsls	r3, r5, #1
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	930e      	str	r3, [sp, #56]	; 0x38
 800777e:	0030      	movs	r0, r6
 8007780:	4bab      	ldr	r3, [pc, #684]	; (8007a30 <_printf_float+0x304>)
 8007782:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007784:	4252      	negs	r2, r2
 8007786:	f7fa fc9d 	bl	80020c4 <__aeabi_dcmpun>
 800778a:	2800      	cmp	r0, #0
 800778c:	d132      	bne.n	80077f4 <_printf_float+0xc8>
 800778e:	2201      	movs	r2, #1
 8007790:	0030      	movs	r0, r6
 8007792:	4ba7      	ldr	r3, [pc, #668]	; (8007a30 <_printf_float+0x304>)
 8007794:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007796:	4252      	negs	r2, r2
 8007798:	f7f8 fe68 	bl	800046c <__aeabi_dcmple>
 800779c:	2800      	cmp	r0, #0
 800779e:	d129      	bne.n	80077f4 <_printf_float+0xc8>
 80077a0:	2200      	movs	r2, #0
 80077a2:	2300      	movs	r3, #0
 80077a4:	0030      	movs	r0, r6
 80077a6:	0029      	movs	r1, r5
 80077a8:	f7f8 fe56 	bl	8000458 <__aeabi_dcmplt>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d003      	beq.n	80077b8 <_printf_float+0x8c>
 80077b0:	0023      	movs	r3, r4
 80077b2:	222d      	movs	r2, #45	; 0x2d
 80077b4:	3343      	adds	r3, #67	; 0x43
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ba:	4d9e      	ldr	r5, [pc, #632]	; (8007a34 <_printf_float+0x308>)
 80077bc:	2b47      	cmp	r3, #71	; 0x47
 80077be:	d900      	bls.n	80077c2 <_printf_float+0x96>
 80077c0:	4d9d      	ldr	r5, [pc, #628]	; (8007a38 <_printf_float+0x30c>)
 80077c2:	2303      	movs	r3, #3
 80077c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077c6:	6123      	str	r3, [r4, #16]
 80077c8:	3301      	adds	r3, #1
 80077ca:	439a      	bics	r2, r3
 80077cc:	2300      	movs	r3, #0
 80077ce:	6022      	str	r2, [r4, #0]
 80077d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80077d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d4:	0021      	movs	r1, r4
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	0038      	movs	r0, r7
 80077da:	9b08      	ldr	r3, [sp, #32]
 80077dc:	aa13      	add	r2, sp, #76	; 0x4c
 80077de:	f000 f9fb 	bl	8007bd8 <_printf_common>
 80077e2:	3001      	adds	r0, #1
 80077e4:	d000      	beq.n	80077e8 <_printf_float+0xbc>
 80077e6:	e0a3      	b.n	8007930 <_printf_float+0x204>
 80077e8:	2001      	movs	r0, #1
 80077ea:	4240      	negs	r0, r0
 80077ec:	b015      	add	sp, #84	; 0x54
 80077ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f0:	3307      	adds	r3, #7
 80077f2:	e7b6      	b.n	8007762 <_printf_float+0x36>
 80077f4:	0032      	movs	r2, r6
 80077f6:	002b      	movs	r3, r5
 80077f8:	0030      	movs	r0, r6
 80077fa:	0029      	movs	r1, r5
 80077fc:	f7fa fc62 	bl	80020c4 <__aeabi_dcmpun>
 8007800:	2800      	cmp	r0, #0
 8007802:	d00b      	beq.n	800781c <_printf_float+0xf0>
 8007804:	2d00      	cmp	r5, #0
 8007806:	da03      	bge.n	8007810 <_printf_float+0xe4>
 8007808:	0023      	movs	r3, r4
 800780a:	222d      	movs	r2, #45	; 0x2d
 800780c:	3343      	adds	r3, #67	; 0x43
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007812:	4d8a      	ldr	r5, [pc, #552]	; (8007a3c <_printf_float+0x310>)
 8007814:	2b47      	cmp	r3, #71	; 0x47
 8007816:	d9d4      	bls.n	80077c2 <_printf_float+0x96>
 8007818:	4d89      	ldr	r5, [pc, #548]	; (8007a40 <_printf_float+0x314>)
 800781a:	e7d2      	b.n	80077c2 <_printf_float+0x96>
 800781c:	2220      	movs	r2, #32
 800781e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007820:	6863      	ldr	r3, [r4, #4]
 8007822:	4391      	bics	r1, r2
 8007824:	910e      	str	r1, [sp, #56]	; 0x38
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	d14a      	bne.n	80078c0 <_printf_float+0x194>
 800782a:	3307      	adds	r3, #7
 800782c:	6063      	str	r3, [r4, #4]
 800782e:	2380      	movs	r3, #128	; 0x80
 8007830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4313      	orrs	r3, r2
 8007836:	2200      	movs	r2, #0
 8007838:	9206      	str	r2, [sp, #24]
 800783a:	aa12      	add	r2, sp, #72	; 0x48
 800783c:	9205      	str	r2, [sp, #20]
 800783e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	9204      	str	r2, [sp, #16]
 8007844:	aa11      	add	r2, sp, #68	; 0x44
 8007846:	9203      	str	r2, [sp, #12]
 8007848:	2223      	movs	r2, #35	; 0x23
 800784a:	a908      	add	r1, sp, #32
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	6863      	ldr	r3, [r4, #4]
 8007850:	1852      	adds	r2, r2, r1
 8007852:	9202      	str	r2, [sp, #8]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	0032      	movs	r2, r6
 8007858:	002b      	movs	r3, r5
 800785a:	0038      	movs	r0, r7
 800785c:	f7ff febe 	bl	80075dc <__cvt>
 8007860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007862:	0005      	movs	r5, r0
 8007864:	2b47      	cmp	r3, #71	; 0x47
 8007866:	d109      	bne.n	800787c <_printf_float+0x150>
 8007868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800786a:	1cda      	adds	r2, r3, #3
 800786c:	db02      	blt.n	8007874 <_printf_float+0x148>
 800786e:	6862      	ldr	r2, [r4, #4]
 8007870:	4293      	cmp	r3, r2
 8007872:	dd49      	ble.n	8007908 <_printf_float+0x1dc>
 8007874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007876:	3b02      	subs	r3, #2
 8007878:	b2db      	uxtb	r3, r3
 800787a:	930a      	str	r3, [sp, #40]	; 0x28
 800787c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007880:	2b65      	cmp	r3, #101	; 0x65
 8007882:	d824      	bhi.n	80078ce <_printf_float+0x1a2>
 8007884:	0020      	movs	r0, r4
 8007886:	001a      	movs	r2, r3
 8007888:	3901      	subs	r1, #1
 800788a:	3050      	adds	r0, #80	; 0x50
 800788c:	9111      	str	r1, [sp, #68]	; 0x44
 800788e:	f7ff ff08 	bl	80076a2 <__exponent>
 8007892:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007894:	900b      	str	r0, [sp, #44]	; 0x2c
 8007896:	1813      	adds	r3, r2, r0
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	2a01      	cmp	r2, #1
 800789c:	dc02      	bgt.n	80078a4 <_printf_float+0x178>
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	07d2      	lsls	r2, r2, #31
 80078a2:	d501      	bpl.n	80078a8 <_printf_float+0x17c>
 80078a4:	3301      	adds	r3, #1
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	2323      	movs	r3, #35	; 0x23
 80078aa:	aa08      	add	r2, sp, #32
 80078ac:	189b      	adds	r3, r3, r2
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d100      	bne.n	80078b6 <_printf_float+0x18a>
 80078b4:	e78d      	b.n	80077d2 <_printf_float+0xa6>
 80078b6:	0023      	movs	r3, r4
 80078b8:	222d      	movs	r2, #45	; 0x2d
 80078ba:	3343      	adds	r3, #67	; 0x43
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e788      	b.n	80077d2 <_printf_float+0xa6>
 80078c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c2:	2a47      	cmp	r2, #71	; 0x47
 80078c4:	d1b3      	bne.n	800782e <_printf_float+0x102>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1b1      	bne.n	800782e <_printf_float+0x102>
 80078ca:	3301      	adds	r3, #1
 80078cc:	e7ae      	b.n	800782c <_printf_float+0x100>
 80078ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d0:	2b66      	cmp	r3, #102	; 0x66
 80078d2:	d11b      	bne.n	800790c <_printf_float+0x1e0>
 80078d4:	6863      	ldr	r3, [r4, #4]
 80078d6:	2900      	cmp	r1, #0
 80078d8:	dd09      	ble.n	80078ee <_printf_float+0x1c2>
 80078da:	6121      	str	r1, [r4, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d102      	bne.n	80078e6 <_printf_float+0x1ba>
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	07d2      	lsls	r2, r2, #31
 80078e4:	d50b      	bpl.n	80078fe <_printf_float+0x1d2>
 80078e6:	3301      	adds	r3, #1
 80078e8:	185b      	adds	r3, r3, r1
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	e007      	b.n	80078fe <_printf_float+0x1d2>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d103      	bne.n	80078fa <_printf_float+0x1ce>
 80078f2:	2201      	movs	r2, #1
 80078f4:	6821      	ldr	r1, [r4, #0]
 80078f6:	4211      	tst	r1, r2
 80078f8:	d000      	beq.n	80078fc <_printf_float+0x1d0>
 80078fa:	1c9a      	adds	r2, r3, #2
 80078fc:	6122      	str	r2, [r4, #16]
 80078fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007900:	65a3      	str	r3, [r4, #88]	; 0x58
 8007902:	2300      	movs	r3, #0
 8007904:	930b      	str	r3, [sp, #44]	; 0x2c
 8007906:	e7cf      	b.n	80078a8 <_printf_float+0x17c>
 8007908:	2367      	movs	r3, #103	; 0x67
 800790a:	930a      	str	r3, [sp, #40]	; 0x28
 800790c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800790e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007910:	4299      	cmp	r1, r3
 8007912:	db06      	blt.n	8007922 <_printf_float+0x1f6>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	6121      	str	r1, [r4, #16]
 8007918:	07db      	lsls	r3, r3, #31
 800791a:	d5f0      	bpl.n	80078fe <_printf_float+0x1d2>
 800791c:	3101      	adds	r1, #1
 800791e:	6121      	str	r1, [r4, #16]
 8007920:	e7ed      	b.n	80078fe <_printf_float+0x1d2>
 8007922:	2201      	movs	r2, #1
 8007924:	2900      	cmp	r1, #0
 8007926:	dc01      	bgt.n	800792c <_printf_float+0x200>
 8007928:	1892      	adds	r2, r2, r2
 800792a:	1a52      	subs	r2, r2, r1
 800792c:	189b      	adds	r3, r3, r2
 800792e:	e7dc      	b.n	80078ea <_printf_float+0x1be>
 8007930:	6822      	ldr	r2, [r4, #0]
 8007932:	0553      	lsls	r3, r2, #21
 8007934:	d408      	bmi.n	8007948 <_printf_float+0x21c>
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	002a      	movs	r2, r5
 800793a:	0038      	movs	r0, r7
 800793c:	9908      	ldr	r1, [sp, #32]
 800793e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007940:	47a8      	blx	r5
 8007942:	3001      	adds	r0, #1
 8007944:	d12a      	bne.n	800799c <_printf_float+0x270>
 8007946:	e74f      	b.n	80077e8 <_printf_float+0xbc>
 8007948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794a:	2b65      	cmp	r3, #101	; 0x65
 800794c:	d800      	bhi.n	8007950 <_printf_float+0x224>
 800794e:	e0ec      	b.n	8007b2a <_printf_float+0x3fe>
 8007950:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007952:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007954:	2200      	movs	r2, #0
 8007956:	2300      	movs	r3, #0
 8007958:	f7f8 fd78 	bl	800044c <__aeabi_dcmpeq>
 800795c:	2800      	cmp	r0, #0
 800795e:	d034      	beq.n	80079ca <_printf_float+0x29e>
 8007960:	2301      	movs	r3, #1
 8007962:	0038      	movs	r0, r7
 8007964:	4a37      	ldr	r2, [pc, #220]	; (8007a44 <_printf_float+0x318>)
 8007966:	9908      	ldr	r1, [sp, #32]
 8007968:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800796a:	47a8      	blx	r5
 800796c:	3001      	adds	r0, #1
 800796e:	d100      	bne.n	8007972 <_printf_float+0x246>
 8007970:	e73a      	b.n	80077e8 <_printf_float+0xbc>
 8007972:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007976:	429a      	cmp	r2, r3
 8007978:	db02      	blt.n	8007980 <_printf_float+0x254>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	07db      	lsls	r3, r3, #31
 800797e:	d50d      	bpl.n	800799c <_printf_float+0x270>
 8007980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007982:	0038      	movs	r0, r7
 8007984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007988:	9908      	ldr	r1, [sp, #32]
 800798a:	47a8      	blx	r5
 800798c:	2500      	movs	r5, #0
 800798e:	3001      	adds	r0, #1
 8007990:	d100      	bne.n	8007994 <_printf_float+0x268>
 8007992:	e729      	b.n	80077e8 <_printf_float+0xbc>
 8007994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007996:	3b01      	subs	r3, #1
 8007998:	42ab      	cmp	r3, r5
 800799a:	dc0a      	bgt.n	80079b2 <_printf_float+0x286>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d500      	bpl.n	80079a4 <_printf_float+0x278>
 80079a2:	e116      	b.n	8007bd2 <_printf_float+0x4a6>
 80079a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079a6:	68e0      	ldr	r0, [r4, #12]
 80079a8:	4298      	cmp	r0, r3
 80079aa:	db00      	blt.n	80079ae <_printf_float+0x282>
 80079ac:	e71e      	b.n	80077ec <_printf_float+0xc0>
 80079ae:	0018      	movs	r0, r3
 80079b0:	e71c      	b.n	80077ec <_printf_float+0xc0>
 80079b2:	0022      	movs	r2, r4
 80079b4:	2301      	movs	r3, #1
 80079b6:	0038      	movs	r0, r7
 80079b8:	9908      	ldr	r1, [sp, #32]
 80079ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079bc:	321a      	adds	r2, #26
 80079be:	47b0      	blx	r6
 80079c0:	3001      	adds	r0, #1
 80079c2:	d100      	bne.n	80079c6 <_printf_float+0x29a>
 80079c4:	e710      	b.n	80077e8 <_printf_float+0xbc>
 80079c6:	3501      	adds	r5, #1
 80079c8:	e7e4      	b.n	8007994 <_printf_float+0x268>
 80079ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dc3b      	bgt.n	8007a48 <_printf_float+0x31c>
 80079d0:	2301      	movs	r3, #1
 80079d2:	0038      	movs	r0, r7
 80079d4:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <_printf_float+0x318>)
 80079d6:	9908      	ldr	r1, [sp, #32]
 80079d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079da:	47b0      	blx	r6
 80079dc:	3001      	adds	r0, #1
 80079de:	d100      	bne.n	80079e2 <_printf_float+0x2b6>
 80079e0:	e702      	b.n	80077e8 <_printf_float+0xbc>
 80079e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079e6:	4313      	orrs	r3, r2
 80079e8:	d102      	bne.n	80079f0 <_printf_float+0x2c4>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	07db      	lsls	r3, r3, #31
 80079ee:	d5d5      	bpl.n	800799c <_printf_float+0x270>
 80079f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f2:	0038      	movs	r0, r7
 80079f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079f6:	9908      	ldr	r1, [sp, #32]
 80079f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079fa:	47b0      	blx	r6
 80079fc:	2300      	movs	r3, #0
 80079fe:	3001      	adds	r0, #1
 8007a00:	d100      	bne.n	8007a04 <_printf_float+0x2d8>
 8007a02:	e6f1      	b.n	80077e8 <_printf_float+0xbc>
 8007a04:	930a      	str	r3, [sp, #40]	; 0x28
 8007a06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0a:	425b      	negs	r3, r3
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	dc01      	bgt.n	8007a14 <_printf_float+0x2e8>
 8007a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a12:	e791      	b.n	8007938 <_printf_float+0x20c>
 8007a14:	0022      	movs	r2, r4
 8007a16:	2301      	movs	r3, #1
 8007a18:	0038      	movs	r0, r7
 8007a1a:	9908      	ldr	r1, [sp, #32]
 8007a1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007a1e:	321a      	adds	r2, #26
 8007a20:	47b0      	blx	r6
 8007a22:	3001      	adds	r0, #1
 8007a24:	d100      	bne.n	8007a28 <_printf_float+0x2fc>
 8007a26:	e6df      	b.n	80077e8 <_printf_float+0xbc>
 8007a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	e7ea      	b.n	8007a04 <_printf_float+0x2d8>
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	7fefffff 	.word	0x7fefffff
 8007a34:	0800c190 	.word	0x0800c190
 8007a38:	0800c194 	.word	0x0800c194
 8007a3c:	0800c198 	.word	0x0800c198
 8007a40:	0800c19c 	.word	0x0800c19c
 8007a44:	0800c1a0 	.word	0x0800c1a0
 8007a48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a4c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	dd00      	ble.n	8007a54 <_printf_float+0x328>
 8007a52:	930a      	str	r3, [sp, #40]	; 0x28
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dc3d      	bgt.n	8007ad6 <_printf_float+0x3aa>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a60:	43db      	mvns	r3, r3
 8007a62:	17db      	asrs	r3, r3, #31
 8007a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a6e:	4013      	ands	r3, r2
 8007a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a76:	4293      	cmp	r3, r2
 8007a78:	dc36      	bgt.n	8007ae8 <_printf_float+0x3bc>
 8007a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	db40      	blt.n	8007b04 <_printf_float+0x3d8>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	07db      	lsls	r3, r3, #31
 8007a86:	d43d      	bmi.n	8007b04 <_printf_float+0x3d8>
 8007a88:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007a8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8e:	1af3      	subs	r3, r6, r3
 8007a90:	1ab6      	subs	r6, r6, r2
 8007a92:	429e      	cmp	r6, r3
 8007a94:	dd00      	ble.n	8007a98 <_printf_float+0x36c>
 8007a96:	001e      	movs	r6, r3
 8007a98:	2e00      	cmp	r6, #0
 8007a9a:	dc3c      	bgt.n	8007b16 <_printf_float+0x3ea>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa0:	43f3      	mvns	r3, r6
 8007aa2:	17db      	asrs	r3, r3, #31
 8007aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aaa:	1a9b      	subs	r3, r3, r2
 8007aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aae:	4032      	ands	r2, r6
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	dc00      	bgt.n	8007aba <_printf_float+0x38e>
 8007ab8:	e770      	b.n	800799c <_printf_float+0x270>
 8007aba:	0022      	movs	r2, r4
 8007abc:	2301      	movs	r3, #1
 8007abe:	0038      	movs	r0, r7
 8007ac0:	9908      	ldr	r1, [sp, #32]
 8007ac2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ac4:	321a      	adds	r2, #26
 8007ac6:	47a8      	blx	r5
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d100      	bne.n	8007ace <_printf_float+0x3a2>
 8007acc:	e68c      	b.n	80077e8 <_printf_float+0xbc>
 8007ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad4:	e7e7      	b.n	8007aa6 <_printf_float+0x37a>
 8007ad6:	002a      	movs	r2, r5
 8007ad8:	0038      	movs	r0, r7
 8007ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007adc:	9908      	ldr	r1, [sp, #32]
 8007ade:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007ae0:	47b0      	blx	r6
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d1b9      	bne.n	8007a5a <_printf_float+0x32e>
 8007ae6:	e67f      	b.n	80077e8 <_printf_float+0xbc>
 8007ae8:	0022      	movs	r2, r4
 8007aea:	2301      	movs	r3, #1
 8007aec:	0038      	movs	r0, r7
 8007aee:	9908      	ldr	r1, [sp, #32]
 8007af0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007af2:	321a      	adds	r2, #26
 8007af4:	47b0      	blx	r6
 8007af6:	3001      	adds	r0, #1
 8007af8:	d100      	bne.n	8007afc <_printf_float+0x3d0>
 8007afa:	e675      	b.n	80077e8 <_printf_float+0xbc>
 8007afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007afe:	3301      	adds	r3, #1
 8007b00:	930e      	str	r3, [sp, #56]	; 0x38
 8007b02:	e7b0      	b.n	8007a66 <_printf_float+0x33a>
 8007b04:	0038      	movs	r0, r7
 8007b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b0a:	9908      	ldr	r1, [sp, #32]
 8007b0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b0e:	47b0      	blx	r6
 8007b10:	3001      	adds	r0, #1
 8007b12:	d1b9      	bne.n	8007a88 <_printf_float+0x35c>
 8007b14:	e668      	b.n	80077e8 <_printf_float+0xbc>
 8007b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b18:	0038      	movs	r0, r7
 8007b1a:	18ea      	adds	r2, r5, r3
 8007b1c:	9908      	ldr	r1, [sp, #32]
 8007b1e:	0033      	movs	r3, r6
 8007b20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b22:	47a8      	blx	r5
 8007b24:	3001      	adds	r0, #1
 8007b26:	d1b9      	bne.n	8007a9c <_printf_float+0x370>
 8007b28:	e65e      	b.n	80077e8 <_printf_float+0xbc>
 8007b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	dc02      	bgt.n	8007b36 <_printf_float+0x40a>
 8007b30:	2301      	movs	r3, #1
 8007b32:	421a      	tst	r2, r3
 8007b34:	d03a      	beq.n	8007bac <_printf_float+0x480>
 8007b36:	2301      	movs	r3, #1
 8007b38:	002a      	movs	r2, r5
 8007b3a:	0038      	movs	r0, r7
 8007b3c:	9908      	ldr	r1, [sp, #32]
 8007b3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b40:	47b0      	blx	r6
 8007b42:	3001      	adds	r0, #1
 8007b44:	d100      	bne.n	8007b48 <_printf_float+0x41c>
 8007b46:	e64f      	b.n	80077e8 <_printf_float+0xbc>
 8007b48:	0038      	movs	r0, r7
 8007b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4e:	9908      	ldr	r1, [sp, #32]
 8007b50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b52:	47b0      	blx	r6
 8007b54:	3001      	adds	r0, #1
 8007b56:	d100      	bne.n	8007b5a <_printf_float+0x42e>
 8007b58:	e646      	b.n	80077e8 <_printf_float+0xbc>
 8007b5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007b5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b60:	2200      	movs	r2, #0
 8007b62:	001e      	movs	r6, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	f7f8 fc71 	bl	800044c <__aeabi_dcmpeq>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d11c      	bne.n	8007ba8 <_printf_float+0x47c>
 8007b6e:	0033      	movs	r3, r6
 8007b70:	1c6a      	adds	r2, r5, #1
 8007b72:	3b01      	subs	r3, #1
 8007b74:	0038      	movs	r0, r7
 8007b76:	9908      	ldr	r1, [sp, #32]
 8007b78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b7a:	47a8      	blx	r5
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d10f      	bne.n	8007ba0 <_printf_float+0x474>
 8007b80:	e632      	b.n	80077e8 <_printf_float+0xbc>
 8007b82:	0022      	movs	r2, r4
 8007b84:	2301      	movs	r3, #1
 8007b86:	0038      	movs	r0, r7
 8007b88:	9908      	ldr	r1, [sp, #32]
 8007b8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b8c:	321a      	adds	r2, #26
 8007b8e:	47b0      	blx	r6
 8007b90:	3001      	adds	r0, #1
 8007b92:	d100      	bne.n	8007b96 <_printf_float+0x46a>
 8007b94:	e628      	b.n	80077e8 <_printf_float+0xbc>
 8007b96:	3501      	adds	r5, #1
 8007b98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dcf0      	bgt.n	8007b82 <_printf_float+0x456>
 8007ba0:	0022      	movs	r2, r4
 8007ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba4:	3250      	adds	r2, #80	; 0x50
 8007ba6:	e6c8      	b.n	800793a <_printf_float+0x20e>
 8007ba8:	2500      	movs	r5, #0
 8007baa:	e7f5      	b.n	8007b98 <_printf_float+0x46c>
 8007bac:	002a      	movs	r2, r5
 8007bae:	e7e1      	b.n	8007b74 <_printf_float+0x448>
 8007bb0:	0022      	movs	r2, r4
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	0038      	movs	r0, r7
 8007bb6:	9908      	ldr	r1, [sp, #32]
 8007bb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007bba:	3219      	adds	r2, #25
 8007bbc:	47b0      	blx	r6
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	d100      	bne.n	8007bc4 <_printf_float+0x498>
 8007bc2:	e611      	b.n	80077e8 <_printf_float+0xbc>
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	68e3      	ldr	r3, [r4, #12]
 8007bc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	42ab      	cmp	r3, r5
 8007bce:	dcef      	bgt.n	8007bb0 <_printf_float+0x484>
 8007bd0:	e6e8      	b.n	80079a4 <_printf_float+0x278>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	e7f7      	b.n	8007bc6 <_printf_float+0x49a>
 8007bd6:	46c0      	nop			; (mov r8, r8)

08007bd8 <_printf_common>:
 8007bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bda:	0016      	movs	r6, r2
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	688a      	ldr	r2, [r1, #8]
 8007be0:	690b      	ldr	r3, [r1, #16]
 8007be2:	000c      	movs	r4, r1
 8007be4:	9000      	str	r0, [sp, #0]
 8007be6:	4293      	cmp	r3, r2
 8007be8:	da00      	bge.n	8007bec <_printf_common+0x14>
 8007bea:	0013      	movs	r3, r2
 8007bec:	0022      	movs	r2, r4
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	3243      	adds	r2, #67	; 0x43
 8007bf2:	7812      	ldrb	r2, [r2, #0]
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	d001      	beq.n	8007bfc <_printf_common+0x24>
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	069b      	lsls	r3, r3, #26
 8007c00:	d502      	bpl.n	8007c08 <_printf_common+0x30>
 8007c02:	6833      	ldr	r3, [r6, #0]
 8007c04:	3302      	adds	r3, #2
 8007c06:	6033      	str	r3, [r6, #0]
 8007c08:	6822      	ldr	r2, [r4, #0]
 8007c0a:	2306      	movs	r3, #6
 8007c0c:	0015      	movs	r5, r2
 8007c0e:	401d      	ands	r5, r3
 8007c10:	421a      	tst	r2, r3
 8007c12:	d027      	beq.n	8007c64 <_printf_common+0x8c>
 8007c14:	0023      	movs	r3, r4
 8007c16:	3343      	adds	r3, #67	; 0x43
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	1e5a      	subs	r2, r3, #1
 8007c1c:	4193      	sbcs	r3, r2
 8007c1e:	6822      	ldr	r2, [r4, #0]
 8007c20:	0692      	lsls	r2, r2, #26
 8007c22:	d430      	bmi.n	8007c86 <_printf_common+0xae>
 8007c24:	0022      	movs	r2, r4
 8007c26:	9901      	ldr	r1, [sp, #4]
 8007c28:	9800      	ldr	r0, [sp, #0]
 8007c2a:	9d08      	ldr	r5, [sp, #32]
 8007c2c:	3243      	adds	r2, #67	; 0x43
 8007c2e:	47a8      	blx	r5
 8007c30:	3001      	adds	r0, #1
 8007c32:	d025      	beq.n	8007c80 <_printf_common+0xa8>
 8007c34:	2206      	movs	r2, #6
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	2500      	movs	r5, #0
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d105      	bne.n	8007c4c <_printf_common+0x74>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	68e5      	ldr	r5, [r4, #12]
 8007c44:	1aed      	subs	r5, r5, r3
 8007c46:	43eb      	mvns	r3, r5
 8007c48:	17db      	asrs	r3, r3, #31
 8007c4a:	401d      	ands	r5, r3
 8007c4c:	68a3      	ldr	r3, [r4, #8]
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	dd01      	ble.n	8007c58 <_printf_common+0x80>
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	18ed      	adds	r5, r5, r3
 8007c58:	2600      	movs	r6, #0
 8007c5a:	42b5      	cmp	r5, r6
 8007c5c:	d120      	bne.n	8007ca0 <_printf_common+0xc8>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e010      	b.n	8007c84 <_printf_common+0xac>
 8007c62:	3501      	adds	r5, #1
 8007c64:	68e3      	ldr	r3, [r4, #12]
 8007c66:	6832      	ldr	r2, [r6, #0]
 8007c68:	1a9b      	subs	r3, r3, r2
 8007c6a:	42ab      	cmp	r3, r5
 8007c6c:	ddd2      	ble.n	8007c14 <_printf_common+0x3c>
 8007c6e:	0022      	movs	r2, r4
 8007c70:	2301      	movs	r3, #1
 8007c72:	9901      	ldr	r1, [sp, #4]
 8007c74:	9800      	ldr	r0, [sp, #0]
 8007c76:	9f08      	ldr	r7, [sp, #32]
 8007c78:	3219      	adds	r2, #25
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d1f0      	bne.n	8007c62 <_printf_common+0x8a>
 8007c80:	2001      	movs	r0, #1
 8007c82:	4240      	negs	r0, r0
 8007c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c86:	2030      	movs	r0, #48	; 0x30
 8007c88:	18e1      	adds	r1, r4, r3
 8007c8a:	3143      	adds	r1, #67	; 0x43
 8007c8c:	7008      	strb	r0, [r1, #0]
 8007c8e:	0021      	movs	r1, r4
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	3145      	adds	r1, #69	; 0x45
 8007c94:	7809      	ldrb	r1, [r1, #0]
 8007c96:	18a2      	adds	r2, r4, r2
 8007c98:	3243      	adds	r2, #67	; 0x43
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	7011      	strb	r1, [r2, #0]
 8007c9e:	e7c1      	b.n	8007c24 <_printf_common+0x4c>
 8007ca0:	0022      	movs	r2, r4
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	9901      	ldr	r1, [sp, #4]
 8007ca6:	9800      	ldr	r0, [sp, #0]
 8007ca8:	9f08      	ldr	r7, [sp, #32]
 8007caa:	321a      	adds	r2, #26
 8007cac:	47b8      	blx	r7
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d0e6      	beq.n	8007c80 <_printf_common+0xa8>
 8007cb2:	3601      	adds	r6, #1
 8007cb4:	e7d1      	b.n	8007c5a <_printf_common+0x82>
	...

08007cb8 <_printf_i>:
 8007cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cba:	b08b      	sub	sp, #44	; 0x2c
 8007cbc:	9206      	str	r2, [sp, #24]
 8007cbe:	000a      	movs	r2, r1
 8007cc0:	3243      	adds	r2, #67	; 0x43
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	9005      	str	r0, [sp, #20]
 8007cc6:	9204      	str	r2, [sp, #16]
 8007cc8:	7e0a      	ldrb	r2, [r1, #24]
 8007cca:	000c      	movs	r4, r1
 8007ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cce:	2a78      	cmp	r2, #120	; 0x78
 8007cd0:	d809      	bhi.n	8007ce6 <_printf_i+0x2e>
 8007cd2:	2a62      	cmp	r2, #98	; 0x62
 8007cd4:	d80b      	bhi.n	8007cee <_printf_i+0x36>
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d100      	bne.n	8007cdc <_printf_i+0x24>
 8007cda:	e0be      	b.n	8007e5a <_printf_i+0x1a2>
 8007cdc:	497c      	ldr	r1, [pc, #496]	; (8007ed0 <_printf_i+0x218>)
 8007cde:	9103      	str	r1, [sp, #12]
 8007ce0:	2a58      	cmp	r2, #88	; 0x58
 8007ce2:	d100      	bne.n	8007ce6 <_printf_i+0x2e>
 8007ce4:	e093      	b.n	8007e0e <_printf_i+0x156>
 8007ce6:	0026      	movs	r6, r4
 8007ce8:	3642      	adds	r6, #66	; 0x42
 8007cea:	7032      	strb	r2, [r6, #0]
 8007cec:	e022      	b.n	8007d34 <_printf_i+0x7c>
 8007cee:	0010      	movs	r0, r2
 8007cf0:	3863      	subs	r0, #99	; 0x63
 8007cf2:	2815      	cmp	r0, #21
 8007cf4:	d8f7      	bhi.n	8007ce6 <_printf_i+0x2e>
 8007cf6:	f7f8 fa19 	bl	800012c <__gnu_thumb1_case_shi>
 8007cfa:	0016      	.short	0x0016
 8007cfc:	fff6001f 	.word	0xfff6001f
 8007d00:	fff6fff6 	.word	0xfff6fff6
 8007d04:	001ffff6 	.word	0x001ffff6
 8007d08:	fff6fff6 	.word	0xfff6fff6
 8007d0c:	fff6fff6 	.word	0xfff6fff6
 8007d10:	003600a3 	.word	0x003600a3
 8007d14:	fff60083 	.word	0xfff60083
 8007d18:	00b4fff6 	.word	0x00b4fff6
 8007d1c:	0036fff6 	.word	0x0036fff6
 8007d20:	fff6fff6 	.word	0xfff6fff6
 8007d24:	0087      	.short	0x0087
 8007d26:	0026      	movs	r6, r4
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	3642      	adds	r6, #66	; 0x42
 8007d2c:	1d11      	adds	r1, r2, #4
 8007d2e:	6019      	str	r1, [r3, #0]
 8007d30:	6813      	ldr	r3, [r2, #0]
 8007d32:	7033      	strb	r3, [r6, #0]
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0a2      	b.n	8007e7e <_printf_i+0x1c6>
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	6809      	ldr	r1, [r1, #0]
 8007d3c:	1d02      	adds	r2, r0, #4
 8007d3e:	060d      	lsls	r5, r1, #24
 8007d40:	d50b      	bpl.n	8007d5a <_printf_i+0xa2>
 8007d42:	6805      	ldr	r5, [r0, #0]
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	da03      	bge.n	8007d52 <_printf_i+0x9a>
 8007d4a:	232d      	movs	r3, #45	; 0x2d
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	426d      	negs	r5, r5
 8007d50:	7013      	strb	r3, [r2, #0]
 8007d52:	4b5f      	ldr	r3, [pc, #380]	; (8007ed0 <_printf_i+0x218>)
 8007d54:	270a      	movs	r7, #10
 8007d56:	9303      	str	r3, [sp, #12]
 8007d58:	e01b      	b.n	8007d92 <_printf_i+0xda>
 8007d5a:	6805      	ldr	r5, [r0, #0]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	0649      	lsls	r1, r1, #25
 8007d60:	d5f1      	bpl.n	8007d46 <_printf_i+0x8e>
 8007d62:	b22d      	sxth	r5, r5
 8007d64:	e7ef      	b.n	8007d46 <_printf_i+0x8e>
 8007d66:	680d      	ldr	r5, [r1, #0]
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	1d08      	adds	r0, r1, #4
 8007d6c:	6018      	str	r0, [r3, #0]
 8007d6e:	062e      	lsls	r6, r5, #24
 8007d70:	d501      	bpl.n	8007d76 <_printf_i+0xbe>
 8007d72:	680d      	ldr	r5, [r1, #0]
 8007d74:	e003      	b.n	8007d7e <_printf_i+0xc6>
 8007d76:	066d      	lsls	r5, r5, #25
 8007d78:	d5fb      	bpl.n	8007d72 <_printf_i+0xba>
 8007d7a:	680d      	ldr	r5, [r1, #0]
 8007d7c:	b2ad      	uxth	r5, r5
 8007d7e:	4b54      	ldr	r3, [pc, #336]	; (8007ed0 <_printf_i+0x218>)
 8007d80:	2708      	movs	r7, #8
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	2a6f      	cmp	r2, #111	; 0x6f
 8007d86:	d000      	beq.n	8007d8a <_printf_i+0xd2>
 8007d88:	3702      	adds	r7, #2
 8007d8a:	0023      	movs	r3, r4
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	3343      	adds	r3, #67	; 0x43
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	60a3      	str	r3, [r4, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	db03      	blt.n	8007da2 <_printf_i+0xea>
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	438a      	bics	r2, r1
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	d102      	bne.n	8007dac <_printf_i+0xf4>
 8007da6:	9e04      	ldr	r6, [sp, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00c      	beq.n	8007dc6 <_printf_i+0x10e>
 8007dac:	9e04      	ldr	r6, [sp, #16]
 8007dae:	0028      	movs	r0, r5
 8007db0:	0039      	movs	r1, r7
 8007db2:	f7f8 fa4b 	bl	800024c <__aeabi_uidivmod>
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	3e01      	subs	r6, #1
 8007dba:	5c5b      	ldrb	r3, [r3, r1]
 8007dbc:	7033      	strb	r3, [r6, #0]
 8007dbe:	002b      	movs	r3, r5
 8007dc0:	0005      	movs	r5, r0
 8007dc2:	429f      	cmp	r7, r3
 8007dc4:	d9f3      	bls.n	8007dae <_printf_i+0xf6>
 8007dc6:	2f08      	cmp	r7, #8
 8007dc8:	d109      	bne.n	8007dde <_printf_i+0x126>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	07db      	lsls	r3, r3, #31
 8007dce:	d506      	bpl.n	8007dde <_printf_i+0x126>
 8007dd0:	6862      	ldr	r2, [r4, #4]
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	dc02      	bgt.n	8007dde <_printf_i+0x126>
 8007dd8:	2330      	movs	r3, #48	; 0x30
 8007dda:	3e01      	subs	r6, #1
 8007ddc:	7033      	strb	r3, [r6, #0]
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	1b9b      	subs	r3, r3, r6
 8007de2:	6123      	str	r3, [r4, #16]
 8007de4:	9b07      	ldr	r3, [sp, #28]
 8007de6:	0021      	movs	r1, r4
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	9805      	ldr	r0, [sp, #20]
 8007dec:	9b06      	ldr	r3, [sp, #24]
 8007dee:	aa09      	add	r2, sp, #36	; 0x24
 8007df0:	f7ff fef2 	bl	8007bd8 <_printf_common>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d147      	bne.n	8007e88 <_printf_i+0x1d0>
 8007df8:	2001      	movs	r0, #1
 8007dfa:	4240      	negs	r0, r0
 8007dfc:	b00b      	add	sp, #44	; 0x2c
 8007dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e00:	2220      	movs	r2, #32
 8007e02:	6809      	ldr	r1, [r1, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	2278      	movs	r2, #120	; 0x78
 8007e0a:	4932      	ldr	r1, [pc, #200]	; (8007ed4 <_printf_i+0x21c>)
 8007e0c:	9103      	str	r1, [sp, #12]
 8007e0e:	0021      	movs	r1, r4
 8007e10:	3145      	adds	r1, #69	; 0x45
 8007e12:	700a      	strb	r2, [r1, #0]
 8007e14:	6819      	ldr	r1, [r3, #0]
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	c920      	ldmia	r1!, {r5}
 8007e1a:	0610      	lsls	r0, r2, #24
 8007e1c:	d402      	bmi.n	8007e24 <_printf_i+0x16c>
 8007e1e:	0650      	lsls	r0, r2, #25
 8007e20:	d500      	bpl.n	8007e24 <_printf_i+0x16c>
 8007e22:	b2ad      	uxth	r5, r5
 8007e24:	6019      	str	r1, [r3, #0]
 8007e26:	07d3      	lsls	r3, r2, #31
 8007e28:	d502      	bpl.n	8007e30 <_printf_i+0x178>
 8007e2a:	2320      	movs	r3, #32
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	6023      	str	r3, [r4, #0]
 8007e30:	2710      	movs	r7, #16
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	d1a9      	bne.n	8007d8a <_printf_i+0xd2>
 8007e36:	2220      	movs	r2, #32
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	4393      	bics	r3, r2
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	e7a4      	b.n	8007d8a <_printf_i+0xd2>
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	680d      	ldr	r5, [r1, #0]
 8007e44:	1d10      	adds	r0, r2, #4
 8007e46:	6949      	ldr	r1, [r1, #20]
 8007e48:	6018      	str	r0, [r3, #0]
 8007e4a:	6813      	ldr	r3, [r2, #0]
 8007e4c:	062e      	lsls	r6, r5, #24
 8007e4e:	d501      	bpl.n	8007e54 <_printf_i+0x19c>
 8007e50:	6019      	str	r1, [r3, #0]
 8007e52:	e002      	b.n	8007e5a <_printf_i+0x1a2>
 8007e54:	066d      	lsls	r5, r5, #25
 8007e56:	d5fb      	bpl.n	8007e50 <_printf_i+0x198>
 8007e58:	8019      	strh	r1, [r3, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9e04      	ldr	r6, [sp, #16]
 8007e5e:	6123      	str	r3, [r4, #16]
 8007e60:	e7c0      	b.n	8007de4 <_printf_i+0x12c>
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	1d11      	adds	r1, r2, #4
 8007e66:	6019      	str	r1, [r3, #0]
 8007e68:	6816      	ldr	r6, [r2, #0]
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	0030      	movs	r0, r6
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	f000 fc4f 	bl	8008712 <memchr>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d001      	beq.n	8007e7c <_printf_i+0x1c4>
 8007e78:	1b80      	subs	r0, r0, r6
 8007e7a:	6060      	str	r0, [r4, #4]
 8007e7c:	6863      	ldr	r3, [r4, #4]
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	2300      	movs	r3, #0
 8007e82:	9a04      	ldr	r2, [sp, #16]
 8007e84:	7013      	strb	r3, [r2, #0]
 8007e86:	e7ad      	b.n	8007de4 <_printf_i+0x12c>
 8007e88:	0032      	movs	r2, r6
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	9906      	ldr	r1, [sp, #24]
 8007e8e:	9805      	ldr	r0, [sp, #20]
 8007e90:	9d07      	ldr	r5, [sp, #28]
 8007e92:	47a8      	blx	r5
 8007e94:	3001      	adds	r0, #1
 8007e96:	d0af      	beq.n	8007df8 <_printf_i+0x140>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	079b      	lsls	r3, r3, #30
 8007e9c:	d415      	bmi.n	8007eca <_printf_i+0x212>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea0:	68e0      	ldr	r0, [r4, #12]
 8007ea2:	4298      	cmp	r0, r3
 8007ea4:	daaa      	bge.n	8007dfc <_printf_i+0x144>
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	e7a8      	b.n	8007dfc <_printf_i+0x144>
 8007eaa:	0022      	movs	r2, r4
 8007eac:	2301      	movs	r3, #1
 8007eae:	9906      	ldr	r1, [sp, #24]
 8007eb0:	9805      	ldr	r0, [sp, #20]
 8007eb2:	9e07      	ldr	r6, [sp, #28]
 8007eb4:	3219      	adds	r2, #25
 8007eb6:	47b0      	blx	r6
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d09d      	beq.n	8007df8 <_printf_i+0x140>
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	68e3      	ldr	r3, [r4, #12]
 8007ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec2:	1a9b      	subs	r3, r3, r2
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	dcf0      	bgt.n	8007eaa <_printf_i+0x1f2>
 8007ec8:	e7e9      	b.n	8007e9e <_printf_i+0x1e6>
 8007eca:	2500      	movs	r5, #0
 8007ecc:	e7f7      	b.n	8007ebe <_printf_i+0x206>
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	0800c1a2 	.word	0x0800c1a2
 8007ed4:	0800c1b3 	.word	0x0800c1b3

08007ed8 <_scanf_float>:
 8007ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eda:	b08b      	sub	sp, #44	; 0x2c
 8007edc:	0016      	movs	r6, r2
 8007ede:	9002      	str	r0, [sp, #8]
 8007ee0:	22ae      	movs	r2, #174	; 0xae
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	9307      	str	r3, [sp, #28]
 8007ee6:	688b      	ldr	r3, [r1, #8]
 8007ee8:	000f      	movs	r7, r1
 8007eea:	1e59      	subs	r1, r3, #1
 8007eec:	0052      	lsls	r2, r2, #1
 8007eee:	9006      	str	r0, [sp, #24]
 8007ef0:	4291      	cmp	r1, r2
 8007ef2:	d905      	bls.n	8007f00 <_scanf_float+0x28>
 8007ef4:	3b5e      	subs	r3, #94	; 0x5e
 8007ef6:	3bff      	subs	r3, #255	; 0xff
 8007ef8:	9306      	str	r3, [sp, #24]
 8007efa:	235e      	movs	r3, #94	; 0x5e
 8007efc:	33ff      	adds	r3, #255	; 0xff
 8007efe:	60bb      	str	r3, [r7, #8]
 8007f00:	23f0      	movs	r3, #240	; 0xf0
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	603b      	str	r3, [r7, #0]
 8007f0a:	003b      	movs	r3, r7
 8007f0c:	2400      	movs	r4, #0
 8007f0e:	331c      	adds	r3, #28
 8007f10:	001d      	movs	r5, r3
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	9403      	str	r4, [sp, #12]
 8007f16:	9409      	str	r4, [sp, #36]	; 0x24
 8007f18:	9408      	str	r4, [sp, #32]
 8007f1a:	9401      	str	r4, [sp, #4]
 8007f1c:	9405      	str	r4, [sp, #20]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	d00a      	beq.n	8007f3a <_scanf_float+0x62>
 8007f24:	6833      	ldr	r3, [r6, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b4e      	cmp	r3, #78	; 0x4e
 8007f2a:	d844      	bhi.n	8007fb6 <_scanf_float+0xde>
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d82c      	bhi.n	8007f8c <_scanf_float+0xb4>
 8007f32:	382b      	subs	r0, #43	; 0x2b
 8007f34:	b2c1      	uxtb	r1, r0
 8007f36:	290e      	cmp	r1, #14
 8007f38:	d92a      	bls.n	8007f90 <_scanf_float+0xb8>
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <_scanf_float+0x70>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	4aa3      	ldr	r2, [pc, #652]	; (80081d0 <_scanf_float+0x2f8>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d900      	bls.n	8007f52 <_scanf_float+0x7a>
 8007f50:	e0f9      	b.n	8008146 <_scanf_float+0x26e>
 8007f52:	24be      	movs	r4, #190	; 0xbe
 8007f54:	0064      	lsls	r4, r4, #1
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	429d      	cmp	r5, r3
 8007f5a:	d900      	bls.n	8007f5e <_scanf_float+0x86>
 8007f5c:	e0e9      	b.n	8008132 <_scanf_float+0x25a>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	9303      	str	r3, [sp, #12]
 8007f62:	e183      	b.n	800826c <_scanf_float+0x394>
 8007f64:	0018      	movs	r0, r3
 8007f66:	3861      	subs	r0, #97	; 0x61
 8007f68:	280d      	cmp	r0, #13
 8007f6a:	d8e6      	bhi.n	8007f3a <_scanf_float+0x62>
 8007f6c:	f7f8 f8de 	bl	800012c <__gnu_thumb1_case_shi>
 8007f70:	ffe50083 	.word	0xffe50083
 8007f74:	ffe5ffe5 	.word	0xffe5ffe5
 8007f78:	00a200b6 	.word	0x00a200b6
 8007f7c:	ffe5ffe5 	.word	0xffe5ffe5
 8007f80:	ffe50089 	.word	0xffe50089
 8007f84:	ffe5ffe5 	.word	0xffe5ffe5
 8007f88:	0065ffe5 	.word	0x0065ffe5
 8007f8c:	3841      	subs	r0, #65	; 0x41
 8007f8e:	e7eb      	b.n	8007f68 <_scanf_float+0x90>
 8007f90:	280e      	cmp	r0, #14
 8007f92:	d8d2      	bhi.n	8007f3a <_scanf_float+0x62>
 8007f94:	f7f8 f8ca 	bl	800012c <__gnu_thumb1_case_shi>
 8007f98:	ffd1004b 	.word	0xffd1004b
 8007f9c:	0098004b 	.word	0x0098004b
 8007fa0:	0020ffd1 	.word	0x0020ffd1
 8007fa4:	00400040 	.word	0x00400040
 8007fa8:	00400040 	.word	0x00400040
 8007fac:	00400040 	.word	0x00400040
 8007fb0:	00400040 	.word	0x00400040
 8007fb4:	0040      	.short	0x0040
 8007fb6:	2b6e      	cmp	r3, #110	; 0x6e
 8007fb8:	d809      	bhi.n	8007fce <_scanf_float+0xf6>
 8007fba:	2b60      	cmp	r3, #96	; 0x60
 8007fbc:	d8d2      	bhi.n	8007f64 <_scanf_float+0x8c>
 8007fbe:	2b54      	cmp	r3, #84	; 0x54
 8007fc0:	d07d      	beq.n	80080be <_scanf_float+0x1e6>
 8007fc2:	2b59      	cmp	r3, #89	; 0x59
 8007fc4:	d1b9      	bne.n	8007f3a <_scanf_float+0x62>
 8007fc6:	2c07      	cmp	r4, #7
 8007fc8:	d1b7      	bne.n	8007f3a <_scanf_float+0x62>
 8007fca:	2408      	movs	r4, #8
 8007fcc:	e02c      	b.n	8008028 <_scanf_float+0x150>
 8007fce:	2b74      	cmp	r3, #116	; 0x74
 8007fd0:	d075      	beq.n	80080be <_scanf_float+0x1e6>
 8007fd2:	2b79      	cmp	r3, #121	; 0x79
 8007fd4:	d0f7      	beq.n	8007fc6 <_scanf_float+0xee>
 8007fd6:	e7b0      	b.n	8007f3a <_scanf_float+0x62>
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	05c8      	lsls	r0, r1, #23
 8007fdc:	d51c      	bpl.n	8008018 <_scanf_float+0x140>
 8007fde:	2380      	movs	r3, #128	; 0x80
 8007fe0:	4399      	bics	r1, r3
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <_scanf_float+0x120>
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	3201      	adds	r2, #1
 8007ff4:	9306      	str	r3, [sp, #24]
 8007ff6:	60ba      	str	r2, [r7, #8]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3301      	adds	r3, #1
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	6873      	ldr	r3, [r6, #4]
 8008006:	3b01      	subs	r3, #1
 8008008:	6073      	str	r3, [r6, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dc00      	bgt.n	8008010 <_scanf_float+0x138>
 800800e:	e086      	b.n	800811e <_scanf_float+0x246>
 8008010:	6833      	ldr	r3, [r6, #0]
 8008012:	3301      	adds	r3, #1
 8008014:	6033      	str	r3, [r6, #0]
 8008016:	e782      	b.n	8007f1e <_scanf_float+0x46>
 8008018:	9a03      	ldr	r2, [sp, #12]
 800801a:	1912      	adds	r2, r2, r4
 800801c:	2a00      	cmp	r2, #0
 800801e:	d18c      	bne.n	8007f3a <_scanf_float+0x62>
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	496c      	ldr	r1, [pc, #432]	; (80081d4 <_scanf_float+0x2fc>)
 8008024:	400a      	ands	r2, r1
 8008026:	603a      	str	r2, [r7, #0]
 8008028:	702b      	strb	r3, [r5, #0]
 800802a:	3501      	adds	r5, #1
 800802c:	e7e4      	b.n	8007ff8 <_scanf_float+0x120>
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	420a      	tst	r2, r1
 8008034:	d081      	beq.n	8007f3a <_scanf_float+0x62>
 8008036:	438a      	bics	r2, r1
 8008038:	e7f5      	b.n	8008026 <_scanf_float+0x14e>
 800803a:	9a03      	ldr	r2, [sp, #12]
 800803c:	2a00      	cmp	r2, #0
 800803e:	d10f      	bne.n	8008060 <_scanf_float+0x188>
 8008040:	9a01      	ldr	r2, [sp, #4]
 8008042:	2a00      	cmp	r2, #0
 8008044:	d10f      	bne.n	8008066 <_scanf_float+0x18e>
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	21e0      	movs	r1, #224	; 0xe0
 800804a:	0010      	movs	r0, r2
 800804c:	00c9      	lsls	r1, r1, #3
 800804e:	4008      	ands	r0, r1
 8008050:	4288      	cmp	r0, r1
 8008052:	d108      	bne.n	8008066 <_scanf_float+0x18e>
 8008054:	4960      	ldr	r1, [pc, #384]	; (80081d8 <_scanf_float+0x300>)
 8008056:	400a      	ands	r2, r1
 8008058:	603a      	str	r2, [r7, #0]
 800805a:	2201      	movs	r2, #1
 800805c:	9203      	str	r2, [sp, #12]
 800805e:	e7e3      	b.n	8008028 <_scanf_float+0x150>
 8008060:	9a03      	ldr	r2, [sp, #12]
 8008062:	2a02      	cmp	r2, #2
 8008064:	d059      	beq.n	800811a <_scanf_float+0x242>
 8008066:	2c01      	cmp	r4, #1
 8008068:	d002      	beq.n	8008070 <_scanf_float+0x198>
 800806a:	2c04      	cmp	r4, #4
 800806c:	d000      	beq.n	8008070 <_scanf_float+0x198>
 800806e:	e764      	b.n	8007f3a <_scanf_float+0x62>
 8008070:	3401      	adds	r4, #1
 8008072:	b2e4      	uxtb	r4, r4
 8008074:	e7d8      	b.n	8008028 <_scanf_float+0x150>
 8008076:	9a03      	ldr	r2, [sp, #12]
 8008078:	2a01      	cmp	r2, #1
 800807a:	d000      	beq.n	800807e <_scanf_float+0x1a6>
 800807c:	e75d      	b.n	8007f3a <_scanf_float+0x62>
 800807e:	2202      	movs	r2, #2
 8008080:	e7ec      	b.n	800805c <_scanf_float+0x184>
 8008082:	2c00      	cmp	r4, #0
 8008084:	d110      	bne.n	80080a8 <_scanf_float+0x1d0>
 8008086:	9a01      	ldr	r2, [sp, #4]
 8008088:	2a00      	cmp	r2, #0
 800808a:	d000      	beq.n	800808e <_scanf_float+0x1b6>
 800808c:	e758      	b.n	8007f40 <_scanf_float+0x68>
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	21e0      	movs	r1, #224	; 0xe0
 8008092:	0010      	movs	r0, r2
 8008094:	00c9      	lsls	r1, r1, #3
 8008096:	4008      	ands	r0, r1
 8008098:	4288      	cmp	r0, r1
 800809a:	d000      	beq.n	800809e <_scanf_float+0x1c6>
 800809c:	e754      	b.n	8007f48 <_scanf_float+0x70>
 800809e:	494e      	ldr	r1, [pc, #312]	; (80081d8 <_scanf_float+0x300>)
 80080a0:	3401      	adds	r4, #1
 80080a2:	400a      	ands	r2, r1
 80080a4:	603a      	str	r2, [r7, #0]
 80080a6:	e7bf      	b.n	8008028 <_scanf_float+0x150>
 80080a8:	21fd      	movs	r1, #253	; 0xfd
 80080aa:	1ee2      	subs	r2, r4, #3
 80080ac:	420a      	tst	r2, r1
 80080ae:	d000      	beq.n	80080b2 <_scanf_float+0x1da>
 80080b0:	e743      	b.n	8007f3a <_scanf_float+0x62>
 80080b2:	e7dd      	b.n	8008070 <_scanf_float+0x198>
 80080b4:	2c02      	cmp	r4, #2
 80080b6:	d000      	beq.n	80080ba <_scanf_float+0x1e2>
 80080b8:	e73f      	b.n	8007f3a <_scanf_float+0x62>
 80080ba:	2403      	movs	r4, #3
 80080bc:	e7b4      	b.n	8008028 <_scanf_float+0x150>
 80080be:	2c06      	cmp	r4, #6
 80080c0:	d000      	beq.n	80080c4 <_scanf_float+0x1ec>
 80080c2:	e73a      	b.n	8007f3a <_scanf_float+0x62>
 80080c4:	2407      	movs	r4, #7
 80080c6:	e7af      	b.n	8008028 <_scanf_float+0x150>
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	0591      	lsls	r1, r2, #22
 80080cc:	d400      	bmi.n	80080d0 <_scanf_float+0x1f8>
 80080ce:	e734      	b.n	8007f3a <_scanf_float+0x62>
 80080d0:	4942      	ldr	r1, [pc, #264]	; (80081dc <_scanf_float+0x304>)
 80080d2:	400a      	ands	r2, r1
 80080d4:	603a      	str	r2, [r7, #0]
 80080d6:	9a01      	ldr	r2, [sp, #4]
 80080d8:	9205      	str	r2, [sp, #20]
 80080da:	e7a5      	b.n	8008028 <_scanf_float+0x150>
 80080dc:	21a0      	movs	r1, #160	; 0xa0
 80080de:	2080      	movs	r0, #128	; 0x80
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	00c9      	lsls	r1, r1, #3
 80080e4:	4011      	ands	r1, r2
 80080e6:	00c0      	lsls	r0, r0, #3
 80080e8:	4281      	cmp	r1, r0
 80080ea:	d006      	beq.n	80080fa <_scanf_float+0x222>
 80080ec:	4202      	tst	r2, r0
 80080ee:	d100      	bne.n	80080f2 <_scanf_float+0x21a>
 80080f0:	e723      	b.n	8007f3a <_scanf_float+0x62>
 80080f2:	9901      	ldr	r1, [sp, #4]
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d100      	bne.n	80080fa <_scanf_float+0x222>
 80080f8:	e726      	b.n	8007f48 <_scanf_float+0x70>
 80080fa:	0591      	lsls	r1, r2, #22
 80080fc:	d404      	bmi.n	8008108 <_scanf_float+0x230>
 80080fe:	9901      	ldr	r1, [sp, #4]
 8008100:	9805      	ldr	r0, [sp, #20]
 8008102:	9509      	str	r5, [sp, #36]	; 0x24
 8008104:	1a09      	subs	r1, r1, r0
 8008106:	9108      	str	r1, [sp, #32]
 8008108:	4933      	ldr	r1, [pc, #204]	; (80081d8 <_scanf_float+0x300>)
 800810a:	400a      	ands	r2, r1
 800810c:	21c0      	movs	r1, #192	; 0xc0
 800810e:	0049      	lsls	r1, r1, #1
 8008110:	430a      	orrs	r2, r1
 8008112:	603a      	str	r2, [r7, #0]
 8008114:	2200      	movs	r2, #0
 8008116:	9201      	str	r2, [sp, #4]
 8008118:	e786      	b.n	8008028 <_scanf_float+0x150>
 800811a:	2203      	movs	r2, #3
 800811c:	e79e      	b.n	800805c <_scanf_float+0x184>
 800811e:	23c0      	movs	r3, #192	; 0xc0
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	0031      	movs	r1, r6
 8008124:	58fb      	ldr	r3, [r7, r3]
 8008126:	9802      	ldr	r0, [sp, #8]
 8008128:	4798      	blx	r3
 800812a:	2800      	cmp	r0, #0
 800812c:	d100      	bne.n	8008130 <_scanf_float+0x258>
 800812e:	e6f6      	b.n	8007f1e <_scanf_float+0x46>
 8008130:	e703      	b.n	8007f3a <_scanf_float+0x62>
 8008132:	3d01      	subs	r5, #1
 8008134:	593b      	ldr	r3, [r7, r4]
 8008136:	0032      	movs	r2, r6
 8008138:	7829      	ldrb	r1, [r5, #0]
 800813a:	9802      	ldr	r0, [sp, #8]
 800813c:	4798      	blx	r3
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	3b01      	subs	r3, #1
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	e707      	b.n	8007f56 <_scanf_float+0x7e>
 8008146:	1e63      	subs	r3, r4, #1
 8008148:	2b06      	cmp	r3, #6
 800814a:	d80e      	bhi.n	800816a <_scanf_float+0x292>
 800814c:	9503      	str	r5, [sp, #12]
 800814e:	2c02      	cmp	r4, #2
 8008150:	d920      	bls.n	8008194 <_scanf_float+0x2bc>
 8008152:	1b63      	subs	r3, r4, r5
 8008154:	b2db      	uxtb	r3, r3
 8008156:	9306      	str	r3, [sp, #24]
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	9a06      	ldr	r2, [sp, #24]
 800815c:	189b      	adds	r3, r3, r2
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b03      	cmp	r3, #3
 8008162:	d827      	bhi.n	80081b4 <_scanf_float+0x2dc>
 8008164:	3c03      	subs	r4, #3
 8008166:	b2e4      	uxtb	r4, r4
 8008168:	1b2d      	subs	r5, r5, r4
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	05da      	lsls	r2, r3, #23
 800816e:	d552      	bpl.n	8008216 <_scanf_float+0x33e>
 8008170:	055b      	lsls	r3, r3, #21
 8008172:	d535      	bpl.n	80081e0 <_scanf_float+0x308>
 8008174:	24be      	movs	r4, #190	; 0xbe
 8008176:	0064      	lsls	r4, r4, #1
 8008178:	9b04      	ldr	r3, [sp, #16]
 800817a:	429d      	cmp	r5, r3
 800817c:	d800      	bhi.n	8008180 <_scanf_float+0x2a8>
 800817e:	e6ee      	b.n	8007f5e <_scanf_float+0x86>
 8008180:	3d01      	subs	r5, #1
 8008182:	593b      	ldr	r3, [r7, r4]
 8008184:	0032      	movs	r2, r6
 8008186:	7829      	ldrb	r1, [r5, #0]
 8008188:	9802      	ldr	r0, [sp, #8]
 800818a:	4798      	blx	r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3b01      	subs	r3, #1
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	e7f1      	b.n	8008178 <_scanf_float+0x2a0>
 8008194:	24be      	movs	r4, #190	; 0xbe
 8008196:	0064      	lsls	r4, r4, #1
 8008198:	9b04      	ldr	r3, [sp, #16]
 800819a:	429d      	cmp	r5, r3
 800819c:	d800      	bhi.n	80081a0 <_scanf_float+0x2c8>
 800819e:	e6de      	b.n	8007f5e <_scanf_float+0x86>
 80081a0:	3d01      	subs	r5, #1
 80081a2:	593b      	ldr	r3, [r7, r4]
 80081a4:	0032      	movs	r2, r6
 80081a6:	7829      	ldrb	r1, [r5, #0]
 80081a8:	9802      	ldr	r0, [sp, #8]
 80081aa:	4798      	blx	r3
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	613b      	str	r3, [r7, #16]
 80081b2:	e7f1      	b.n	8008198 <_scanf_float+0x2c0>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	0032      	movs	r2, r6
 80081b8:	3b01      	subs	r3, #1
 80081ba:	7819      	ldrb	r1, [r3, #0]
 80081bc:	9303      	str	r3, [sp, #12]
 80081be:	23be      	movs	r3, #190	; 0xbe
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	58fb      	ldr	r3, [r7, r3]
 80081c4:	9802      	ldr	r0, [sp, #8]
 80081c6:	4798      	blx	r3
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	613b      	str	r3, [r7, #16]
 80081ce:	e7c3      	b.n	8008158 <_scanf_float+0x280>
 80081d0:	fffffeff 	.word	0xfffffeff
 80081d4:	fffffe7f 	.word	0xfffffe7f
 80081d8:	fffff87f 	.word	0xfffff87f
 80081dc:	fffffd7f 	.word	0xfffffd7f
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1e6c      	subs	r4, r5, #1
 80081e4:	7821      	ldrb	r1, [r4, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	2965      	cmp	r1, #101	; 0x65
 80081ec:	d00c      	beq.n	8008208 <_scanf_float+0x330>
 80081ee:	2945      	cmp	r1, #69	; 0x45
 80081f0:	d00a      	beq.n	8008208 <_scanf_float+0x330>
 80081f2:	23be      	movs	r3, #190	; 0xbe
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	58fb      	ldr	r3, [r7, r3]
 80081f8:	0032      	movs	r2, r6
 80081fa:	9802      	ldr	r0, [sp, #8]
 80081fc:	4798      	blx	r3
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	1eac      	subs	r4, r5, #2
 8008202:	3b01      	subs	r3, #1
 8008204:	7821      	ldrb	r1, [r4, #0]
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	23be      	movs	r3, #190	; 0xbe
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	0032      	movs	r2, r6
 800820e:	58fb      	ldr	r3, [r7, r3]
 8008210:	9802      	ldr	r0, [sp, #8]
 8008212:	4798      	blx	r3
 8008214:	0025      	movs	r5, r4
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	2310      	movs	r3, #16
 800821a:	0011      	movs	r1, r2
 800821c:	4019      	ands	r1, r3
 800821e:	9103      	str	r1, [sp, #12]
 8008220:	421a      	tst	r2, r3
 8008222:	d15b      	bne.n	80082dc <_scanf_float+0x404>
 8008224:	22c0      	movs	r2, #192	; 0xc0
 8008226:	7029      	strb	r1, [r5, #0]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	00d2      	lsls	r2, r2, #3
 800822c:	4013      	ands	r3, r2
 800822e:	2280      	movs	r2, #128	; 0x80
 8008230:	00d2      	lsls	r2, r2, #3
 8008232:	4293      	cmp	r3, r2
 8008234:	d11d      	bne.n	8008272 <_scanf_float+0x39a>
 8008236:	9b05      	ldr	r3, [sp, #20]
 8008238:	9a01      	ldr	r2, [sp, #4]
 800823a:	9901      	ldr	r1, [sp, #4]
 800823c:	1a9a      	subs	r2, r3, r2
 800823e:	428b      	cmp	r3, r1
 8008240:	d124      	bne.n	800828c <_scanf_float+0x3b4>
 8008242:	2200      	movs	r2, #0
 8008244:	9904      	ldr	r1, [sp, #16]
 8008246:	9802      	ldr	r0, [sp, #8]
 8008248:	f002 fd00 	bl	800ac4c <_strtod_r>
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	0004      	movs	r4, r0
 8008252:	000d      	movs	r5, r1
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	0791      	lsls	r1, r2, #30
 8008258:	d525      	bpl.n	80082a6 <_scanf_float+0x3ce>
 800825a:	9907      	ldr	r1, [sp, #28]
 800825c:	1d1a      	adds	r2, r3, #4
 800825e:	600a      	str	r2, [r1, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	601c      	str	r4, [r3, #0]
 8008264:	605d      	str	r5, [r3, #4]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	9803      	ldr	r0, [sp, #12]
 800826e:	b00b      	add	sp, #44	; 0x2c
 8008270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0e4      	beq.n	8008242 <_scanf_float+0x36a>
 8008278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827a:	9a03      	ldr	r2, [sp, #12]
 800827c:	1c59      	adds	r1, r3, #1
 800827e:	9802      	ldr	r0, [sp, #8]
 8008280:	230a      	movs	r3, #10
 8008282:	f002 fd71 	bl	800ad68 <_strtol_r>
 8008286:	9b08      	ldr	r3, [sp, #32]
 8008288:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800828a:	1ac2      	subs	r2, r0, r3
 800828c:	003b      	movs	r3, r7
 800828e:	3370      	adds	r3, #112	; 0x70
 8008290:	33ff      	adds	r3, #255	; 0xff
 8008292:	429d      	cmp	r5, r3
 8008294:	d302      	bcc.n	800829c <_scanf_float+0x3c4>
 8008296:	003d      	movs	r5, r7
 8008298:	356f      	adds	r5, #111	; 0x6f
 800829a:	35ff      	adds	r5, #255	; 0xff
 800829c:	0028      	movs	r0, r5
 800829e:	4910      	ldr	r1, [pc, #64]	; (80082e0 <_scanf_float+0x408>)
 80082a0:	f000 f8e6 	bl	8008470 <siprintf>
 80082a4:	e7cd      	b.n	8008242 <_scanf_float+0x36a>
 80082a6:	1d19      	adds	r1, r3, #4
 80082a8:	0752      	lsls	r2, r2, #29
 80082aa:	d502      	bpl.n	80082b2 <_scanf_float+0x3da>
 80082ac:	9a07      	ldr	r2, [sp, #28]
 80082ae:	6011      	str	r1, [r2, #0]
 80082b0:	e7d6      	b.n	8008260 <_scanf_float+0x388>
 80082b2:	9a07      	ldr	r2, [sp, #28]
 80082b4:	0020      	movs	r0, r4
 80082b6:	6011      	str	r1, [r2, #0]
 80082b8:	681e      	ldr	r6, [r3, #0]
 80082ba:	0022      	movs	r2, r4
 80082bc:	002b      	movs	r3, r5
 80082be:	0029      	movs	r1, r5
 80082c0:	f7f9 ff00 	bl	80020c4 <__aeabi_dcmpun>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d004      	beq.n	80082d2 <_scanf_float+0x3fa>
 80082c8:	4806      	ldr	r0, [pc, #24]	; (80082e4 <_scanf_float+0x40c>)
 80082ca:	f000 fa37 	bl	800873c <nanf>
 80082ce:	6030      	str	r0, [r6, #0]
 80082d0:	e7c9      	b.n	8008266 <_scanf_float+0x38e>
 80082d2:	0020      	movs	r0, r4
 80082d4:	0029      	movs	r1, r5
 80082d6:	f7f9 ff9f 	bl	8002218 <__aeabi_d2f>
 80082da:	e7f8      	b.n	80082ce <_scanf_float+0x3f6>
 80082dc:	2300      	movs	r3, #0
 80082de:	e63f      	b.n	8007f60 <_scanf_float+0x88>
 80082e0:	0800c1c4 	.word	0x0800c1c4
 80082e4:	0800c555 	.word	0x0800c555

080082e8 <std>:
 80082e8:	2300      	movs	r3, #0
 80082ea:	b510      	push	{r4, lr}
 80082ec:	0004      	movs	r4, r0
 80082ee:	6003      	str	r3, [r0, #0]
 80082f0:	6043      	str	r3, [r0, #4]
 80082f2:	6083      	str	r3, [r0, #8]
 80082f4:	8181      	strh	r1, [r0, #12]
 80082f6:	6643      	str	r3, [r0, #100]	; 0x64
 80082f8:	81c2      	strh	r2, [r0, #14]
 80082fa:	6103      	str	r3, [r0, #16]
 80082fc:	6143      	str	r3, [r0, #20]
 80082fe:	6183      	str	r3, [r0, #24]
 8008300:	0019      	movs	r1, r3
 8008302:	2208      	movs	r2, #8
 8008304:	305c      	adds	r0, #92	; 0x5c
 8008306:	f000 f91f 	bl	8008548 <memset>
 800830a:	4b0b      	ldr	r3, [pc, #44]	; (8008338 <std+0x50>)
 800830c:	6224      	str	r4, [r4, #32]
 800830e:	6263      	str	r3, [r4, #36]	; 0x24
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <std+0x54>)
 8008312:	62a3      	str	r3, [r4, #40]	; 0x28
 8008314:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <std+0x58>)
 8008316:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008318:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <std+0x5c>)
 800831a:	6323      	str	r3, [r4, #48]	; 0x30
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <std+0x60>)
 800831e:	429c      	cmp	r4, r3
 8008320:	d005      	beq.n	800832e <std+0x46>
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <std+0x64>)
 8008324:	429c      	cmp	r4, r3
 8008326:	d002      	beq.n	800832e <std+0x46>
 8008328:	4b09      	ldr	r3, [pc, #36]	; (8008350 <std+0x68>)
 800832a:	429c      	cmp	r4, r3
 800832c:	d103      	bne.n	8008336 <std+0x4e>
 800832e:	0020      	movs	r0, r4
 8008330:	3058      	adds	r0, #88	; 0x58
 8008332:	f000 f9eb 	bl	800870c <__retarget_lock_init_recursive>
 8008336:	bd10      	pop	{r4, pc}
 8008338:	080084b1 	.word	0x080084b1
 800833c:	080084d9 	.word	0x080084d9
 8008340:	08008511 	.word	0x08008511
 8008344:	0800853d 	.word	0x0800853d
 8008348:	200020e0 	.word	0x200020e0
 800834c:	20002148 	.word	0x20002148
 8008350:	200021b0 	.word	0x200021b0

08008354 <stdio_exit_handler>:
 8008354:	b510      	push	{r4, lr}
 8008356:	4a03      	ldr	r2, [pc, #12]	; (8008364 <stdio_exit_handler+0x10>)
 8008358:	4903      	ldr	r1, [pc, #12]	; (8008368 <stdio_exit_handler+0x14>)
 800835a:	4804      	ldr	r0, [pc, #16]	; (800836c <stdio_exit_handler+0x18>)
 800835c:	f000 f86c 	bl	8008438 <_fwalk_sglue>
 8008360:	bd10      	pop	{r4, pc}
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	20000010 	.word	0x20000010
 8008368:	0800b149 	.word	0x0800b149
 800836c:	2000001c 	.word	0x2000001c

08008370 <cleanup_stdio>:
 8008370:	6841      	ldr	r1, [r0, #4]
 8008372:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <cleanup_stdio+0x30>)
 8008374:	b510      	push	{r4, lr}
 8008376:	0004      	movs	r4, r0
 8008378:	4299      	cmp	r1, r3
 800837a:	d001      	beq.n	8008380 <cleanup_stdio+0x10>
 800837c:	f002 fee4 	bl	800b148 <_fflush_r>
 8008380:	68a1      	ldr	r1, [r4, #8]
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <cleanup_stdio+0x34>)
 8008384:	4299      	cmp	r1, r3
 8008386:	d002      	beq.n	800838e <cleanup_stdio+0x1e>
 8008388:	0020      	movs	r0, r4
 800838a:	f002 fedd 	bl	800b148 <_fflush_r>
 800838e:	68e1      	ldr	r1, [r4, #12]
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <cleanup_stdio+0x38>)
 8008392:	4299      	cmp	r1, r3
 8008394:	d002      	beq.n	800839c <cleanup_stdio+0x2c>
 8008396:	0020      	movs	r0, r4
 8008398:	f002 fed6 	bl	800b148 <_fflush_r>
 800839c:	bd10      	pop	{r4, pc}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	200020e0 	.word	0x200020e0
 80083a4:	20002148 	.word	0x20002148
 80083a8:	200021b0 	.word	0x200021b0

080083ac <global_stdio_init.part.0>:
 80083ac:	b510      	push	{r4, lr}
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <global_stdio_init.part.0+0x28>)
 80083b0:	4a09      	ldr	r2, [pc, #36]	; (80083d8 <global_stdio_init.part.0+0x2c>)
 80083b2:	2104      	movs	r1, #4
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	4809      	ldr	r0, [pc, #36]	; (80083dc <global_stdio_init.part.0+0x30>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7ff ff95 	bl	80082e8 <std>
 80083be:	2201      	movs	r2, #1
 80083c0:	2109      	movs	r1, #9
 80083c2:	4807      	ldr	r0, [pc, #28]	; (80083e0 <global_stdio_init.part.0+0x34>)
 80083c4:	f7ff ff90 	bl	80082e8 <std>
 80083c8:	2202      	movs	r2, #2
 80083ca:	2112      	movs	r1, #18
 80083cc:	4805      	ldr	r0, [pc, #20]	; (80083e4 <global_stdio_init.part.0+0x38>)
 80083ce:	f7ff ff8b 	bl	80082e8 <std>
 80083d2:	bd10      	pop	{r4, pc}
 80083d4:	20002218 	.word	0x20002218
 80083d8:	08008355 	.word	0x08008355
 80083dc:	200020e0 	.word	0x200020e0
 80083e0:	20002148 	.word	0x20002148
 80083e4:	200021b0 	.word	0x200021b0

080083e8 <__sfp_lock_acquire>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	4802      	ldr	r0, [pc, #8]	; (80083f4 <__sfp_lock_acquire+0xc>)
 80083ec:	f000 f98f 	bl	800870e <__retarget_lock_acquire_recursive>
 80083f0:	bd10      	pop	{r4, pc}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	20002221 	.word	0x20002221

080083f8 <__sfp_lock_release>:
 80083f8:	b510      	push	{r4, lr}
 80083fa:	4802      	ldr	r0, [pc, #8]	; (8008404 <__sfp_lock_release+0xc>)
 80083fc:	f000 f988 	bl	8008710 <__retarget_lock_release_recursive>
 8008400:	bd10      	pop	{r4, pc}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	20002221 	.word	0x20002221

08008408 <__sinit>:
 8008408:	b510      	push	{r4, lr}
 800840a:	0004      	movs	r4, r0
 800840c:	f7ff ffec 	bl	80083e8 <__sfp_lock_acquire>
 8008410:	6a23      	ldr	r3, [r4, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <__sinit+0x14>
 8008416:	f7ff ffef 	bl	80083f8 <__sfp_lock_release>
 800841a:	bd10      	pop	{r4, pc}
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <__sinit+0x28>)
 800841e:	6223      	str	r3, [r4, #32]
 8008420:	4b04      	ldr	r3, [pc, #16]	; (8008434 <__sinit+0x2c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1f6      	bne.n	8008416 <__sinit+0xe>
 8008428:	f7ff ffc0 	bl	80083ac <global_stdio_init.part.0>
 800842c:	e7f3      	b.n	8008416 <__sinit+0xe>
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	08008371 	.word	0x08008371
 8008434:	20002218 	.word	0x20002218

08008438 <_fwalk_sglue>:
 8008438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800843a:	0014      	movs	r4, r2
 800843c:	2600      	movs	r6, #0
 800843e:	9000      	str	r0, [sp, #0]
 8008440:	9101      	str	r1, [sp, #4]
 8008442:	68a5      	ldr	r5, [r4, #8]
 8008444:	6867      	ldr	r7, [r4, #4]
 8008446:	3f01      	subs	r7, #1
 8008448:	d504      	bpl.n	8008454 <_fwalk_sglue+0x1c>
 800844a:	6824      	ldr	r4, [r4, #0]
 800844c:	2c00      	cmp	r4, #0
 800844e:	d1f8      	bne.n	8008442 <_fwalk_sglue+0xa>
 8008450:	0030      	movs	r0, r6
 8008452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008454:	89ab      	ldrh	r3, [r5, #12]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d908      	bls.n	800846c <_fwalk_sglue+0x34>
 800845a:	220e      	movs	r2, #14
 800845c:	5eab      	ldrsh	r3, [r5, r2]
 800845e:	3301      	adds	r3, #1
 8008460:	d004      	beq.n	800846c <_fwalk_sglue+0x34>
 8008462:	0029      	movs	r1, r5
 8008464:	9800      	ldr	r0, [sp, #0]
 8008466:	9b01      	ldr	r3, [sp, #4]
 8008468:	4798      	blx	r3
 800846a:	4306      	orrs	r6, r0
 800846c:	3568      	adds	r5, #104	; 0x68
 800846e:	e7ea      	b.n	8008446 <_fwalk_sglue+0xe>

08008470 <siprintf>:
 8008470:	b40e      	push	{r1, r2, r3}
 8008472:	b500      	push	{lr}
 8008474:	490b      	ldr	r1, [pc, #44]	; (80084a4 <siprintf+0x34>)
 8008476:	b09c      	sub	sp, #112	; 0x70
 8008478:	ab1d      	add	r3, sp, #116	; 0x74
 800847a:	9002      	str	r0, [sp, #8]
 800847c:	9006      	str	r0, [sp, #24]
 800847e:	9107      	str	r1, [sp, #28]
 8008480:	9104      	str	r1, [sp, #16]
 8008482:	4809      	ldr	r0, [pc, #36]	; (80084a8 <siprintf+0x38>)
 8008484:	4909      	ldr	r1, [pc, #36]	; (80084ac <siprintf+0x3c>)
 8008486:	cb04      	ldmia	r3!, {r2}
 8008488:	9105      	str	r1, [sp, #20]
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	a902      	add	r1, sp, #8
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	f002 fcd0 	bl	800ae34 <_svfiprintf_r>
 8008494:	2200      	movs	r2, #0
 8008496:	9b02      	ldr	r3, [sp, #8]
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	b01c      	add	sp, #112	; 0x70
 800849c:	bc08      	pop	{r3}
 800849e:	b003      	add	sp, #12
 80084a0:	4718      	bx	r3
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	7fffffff 	.word	0x7fffffff
 80084a8:	20000068 	.word	0x20000068
 80084ac:	ffff0208 	.word	0xffff0208

080084b0 <__sread>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	000c      	movs	r4, r1
 80084b4:	250e      	movs	r5, #14
 80084b6:	5f49      	ldrsh	r1, [r1, r5]
 80084b8:	f000 f8d6 	bl	8008668 <_read_r>
 80084bc:	2800      	cmp	r0, #0
 80084be:	db03      	blt.n	80084c8 <__sread+0x18>
 80084c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80084c2:	181b      	adds	r3, r3, r0
 80084c4:	6563      	str	r3, [r4, #84]	; 0x54
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	4a02      	ldr	r2, [pc, #8]	; (80084d4 <__sread+0x24>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	e7f9      	b.n	80084c6 <__sread+0x16>
 80084d2:	46c0      	nop			; (mov r8, r8)
 80084d4:	ffffefff 	.word	0xffffefff

080084d8 <__swrite>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	001f      	movs	r7, r3
 80084dc:	898b      	ldrh	r3, [r1, #12]
 80084de:	0005      	movs	r5, r0
 80084e0:	000c      	movs	r4, r1
 80084e2:	0016      	movs	r6, r2
 80084e4:	05db      	lsls	r3, r3, #23
 80084e6:	d505      	bpl.n	80084f4 <__swrite+0x1c>
 80084e8:	230e      	movs	r3, #14
 80084ea:	5ec9      	ldrsh	r1, [r1, r3]
 80084ec:	2200      	movs	r2, #0
 80084ee:	2302      	movs	r3, #2
 80084f0:	f000 f8a6 	bl	8008640 <_lseek_r>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	4a05      	ldr	r2, [pc, #20]	; (800850c <__swrite+0x34>)
 80084f8:	0028      	movs	r0, r5
 80084fa:	4013      	ands	r3, r2
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	0032      	movs	r2, r6
 8008500:	230e      	movs	r3, #14
 8008502:	5ee1      	ldrsh	r1, [r4, r3]
 8008504:	003b      	movs	r3, r7
 8008506:	f000 f8c3 	bl	8008690 <_write_r>
 800850a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800850c:	ffffefff 	.word	0xffffefff

08008510 <__sseek>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	000c      	movs	r4, r1
 8008514:	250e      	movs	r5, #14
 8008516:	5f49      	ldrsh	r1, [r1, r5]
 8008518:	f000 f892 	bl	8008640 <_lseek_r>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	1c42      	adds	r2, r0, #1
 8008520:	d103      	bne.n	800852a <__sseek+0x1a>
 8008522:	4a05      	ldr	r2, [pc, #20]	; (8008538 <__sseek+0x28>)
 8008524:	4013      	ands	r3, r2
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	bd70      	pop	{r4, r5, r6, pc}
 800852a:	2280      	movs	r2, #128	; 0x80
 800852c:	0152      	lsls	r2, r2, #5
 800852e:	4313      	orrs	r3, r2
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	6560      	str	r0, [r4, #84]	; 0x54
 8008534:	e7f8      	b.n	8008528 <__sseek+0x18>
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	ffffefff 	.word	0xffffefff

0800853c <__sclose>:
 800853c:	b510      	push	{r4, lr}
 800853e:	230e      	movs	r3, #14
 8008540:	5ec9      	ldrsh	r1, [r1, r3]
 8008542:	f000 f80d 	bl	8008560 <_close_r>
 8008546:	bd10      	pop	{r4, pc}

08008548 <memset>:
 8008548:	0003      	movs	r3, r0
 800854a:	1882      	adds	r2, r0, r2
 800854c:	4293      	cmp	r3, r2
 800854e:	d100      	bne.n	8008552 <memset+0xa>
 8008550:	4770      	bx	lr
 8008552:	7019      	strb	r1, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	e7f9      	b.n	800854c <memset+0x4>

08008558 <_localeconv_r>:
 8008558:	4800      	ldr	r0, [pc, #0]	; (800855c <_localeconv_r+0x4>)
 800855a:	4770      	bx	lr
 800855c:	2000015c 	.word	0x2000015c

08008560 <_close_r>:
 8008560:	2300      	movs	r3, #0
 8008562:	b570      	push	{r4, r5, r6, lr}
 8008564:	4d06      	ldr	r5, [pc, #24]	; (8008580 <_close_r+0x20>)
 8008566:	0004      	movs	r4, r0
 8008568:	0008      	movs	r0, r1
 800856a:	602b      	str	r3, [r5, #0]
 800856c:	f7fa fcf2 	bl	8002f54 <_close>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d103      	bne.n	800857c <_close_r+0x1c>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d000      	beq.n	800857c <_close_r+0x1c>
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	bd70      	pop	{r4, r5, r6, pc}
 800857e:	46c0      	nop			; (mov r8, r8)
 8008580:	2000221c 	.word	0x2000221c

08008584 <_reclaim_reent>:
 8008584:	4b2d      	ldr	r3, [pc, #180]	; (800863c <_reclaim_reent+0xb8>)
 8008586:	b570      	push	{r4, r5, r6, lr}
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	0004      	movs	r4, r0
 800858c:	4283      	cmp	r3, r0
 800858e:	d042      	beq.n	8008616 <_reclaim_reent+0x92>
 8008590:	69c3      	ldr	r3, [r0, #28]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <_reclaim_reent+0x28>
 8008596:	2500      	movs	r5, #0
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	42ab      	cmp	r3, r5
 800859c:	d140      	bne.n	8008620 <_reclaim_reent+0x9c>
 800859e:	69e3      	ldr	r3, [r4, #28]
 80085a0:	6819      	ldr	r1, [r3, #0]
 80085a2:	2900      	cmp	r1, #0
 80085a4:	d002      	beq.n	80085ac <_reclaim_reent+0x28>
 80085a6:	0020      	movs	r0, r4
 80085a8:	f000 ff6a 	bl	8009480 <_free_r>
 80085ac:	6961      	ldr	r1, [r4, #20]
 80085ae:	2900      	cmp	r1, #0
 80085b0:	d002      	beq.n	80085b8 <_reclaim_reent+0x34>
 80085b2:	0020      	movs	r0, r4
 80085b4:	f000 ff64 	bl	8009480 <_free_r>
 80085b8:	69e1      	ldr	r1, [r4, #28]
 80085ba:	2900      	cmp	r1, #0
 80085bc:	d002      	beq.n	80085c4 <_reclaim_reent+0x40>
 80085be:	0020      	movs	r0, r4
 80085c0:	f000 ff5e 	bl	8009480 <_free_r>
 80085c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80085c6:	2900      	cmp	r1, #0
 80085c8:	d002      	beq.n	80085d0 <_reclaim_reent+0x4c>
 80085ca:	0020      	movs	r0, r4
 80085cc:	f000 ff58 	bl	8009480 <_free_r>
 80085d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d002      	beq.n	80085dc <_reclaim_reent+0x58>
 80085d6:	0020      	movs	r0, r4
 80085d8:	f000 ff52 	bl	8009480 <_free_r>
 80085dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085de:	2900      	cmp	r1, #0
 80085e0:	d002      	beq.n	80085e8 <_reclaim_reent+0x64>
 80085e2:	0020      	movs	r0, r4
 80085e4:	f000 ff4c 	bl	8009480 <_free_r>
 80085e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d002      	beq.n	80085f4 <_reclaim_reent+0x70>
 80085ee:	0020      	movs	r0, r4
 80085f0:	f000 ff46 	bl	8009480 <_free_r>
 80085f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d002      	beq.n	8008600 <_reclaim_reent+0x7c>
 80085fa:	0020      	movs	r0, r4
 80085fc:	f000 ff40 	bl	8009480 <_free_r>
 8008600:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008602:	2900      	cmp	r1, #0
 8008604:	d002      	beq.n	800860c <_reclaim_reent+0x88>
 8008606:	0020      	movs	r0, r4
 8008608:	f000 ff3a 	bl	8009480 <_free_r>
 800860c:	6a23      	ldr	r3, [r4, #32]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <_reclaim_reent+0x92>
 8008612:	0020      	movs	r0, r4
 8008614:	4798      	blx	r3
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	5949      	ldr	r1, [r1, r5]
 800861a:	2900      	cmp	r1, #0
 800861c:	d108      	bne.n	8008630 <_reclaim_reent+0xac>
 800861e:	3504      	adds	r5, #4
 8008620:	69e3      	ldr	r3, [r4, #28]
 8008622:	68d9      	ldr	r1, [r3, #12]
 8008624:	2d80      	cmp	r5, #128	; 0x80
 8008626:	d1f7      	bne.n	8008618 <_reclaim_reent+0x94>
 8008628:	0020      	movs	r0, r4
 800862a:	f000 ff29 	bl	8009480 <_free_r>
 800862e:	e7b6      	b.n	800859e <_reclaim_reent+0x1a>
 8008630:	680e      	ldr	r6, [r1, #0]
 8008632:	0020      	movs	r0, r4
 8008634:	f000 ff24 	bl	8009480 <_free_r>
 8008638:	0031      	movs	r1, r6
 800863a:	e7ee      	b.n	800861a <_reclaim_reent+0x96>
 800863c:	20000068 	.word	0x20000068

08008640 <_lseek_r>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	0004      	movs	r4, r0
 8008644:	0008      	movs	r0, r1
 8008646:	0011      	movs	r1, r2
 8008648:	001a      	movs	r2, r3
 800864a:	2300      	movs	r3, #0
 800864c:	4d05      	ldr	r5, [pc, #20]	; (8008664 <_lseek_r+0x24>)
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7fa fc8a 	bl	8002f68 <_lseek>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d103      	bne.n	8008660 <_lseek_r+0x20>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d000      	beq.n	8008660 <_lseek_r+0x20>
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	2000221c 	.word	0x2000221c

08008668 <_read_r>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	0004      	movs	r4, r0
 800866c:	0008      	movs	r0, r1
 800866e:	0011      	movs	r1, r2
 8008670:	001a      	movs	r2, r3
 8008672:	2300      	movs	r3, #0
 8008674:	4d05      	ldr	r5, [pc, #20]	; (800868c <_read_r+0x24>)
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7fa fc52 	bl	8002f20 <_read>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d103      	bne.n	8008688 <_read_r+0x20>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d000      	beq.n	8008688 <_read_r+0x20>
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	bd70      	pop	{r4, r5, r6, pc}
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	2000221c 	.word	0x2000221c

08008690 <_write_r>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	0004      	movs	r4, r0
 8008694:	0008      	movs	r0, r1
 8008696:	0011      	movs	r1, r2
 8008698:	001a      	movs	r2, r3
 800869a:	2300      	movs	r3, #0
 800869c:	4d05      	ldr	r5, [pc, #20]	; (80086b4 <_write_r+0x24>)
 800869e:	602b      	str	r3, [r5, #0]
 80086a0:	f7fa fc4b 	bl	8002f3a <_write>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d103      	bne.n	80086b0 <_write_r+0x20>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d000      	beq.n	80086b0 <_write_r+0x20>
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	2000221c 	.word	0x2000221c

080086b8 <__errno>:
 80086b8:	4b01      	ldr	r3, [pc, #4]	; (80086c0 <__errno+0x8>)
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	4770      	bx	lr
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	20000068 	.word	0x20000068

080086c4 <__libc_init_array>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	2600      	movs	r6, #0
 80086c8:	4c0c      	ldr	r4, [pc, #48]	; (80086fc <__libc_init_array+0x38>)
 80086ca:	4d0d      	ldr	r5, [pc, #52]	; (8008700 <__libc_init_array+0x3c>)
 80086cc:	1b64      	subs	r4, r4, r5
 80086ce:	10a4      	asrs	r4, r4, #2
 80086d0:	42a6      	cmp	r6, r4
 80086d2:	d109      	bne.n	80086e8 <__libc_init_array+0x24>
 80086d4:	2600      	movs	r6, #0
 80086d6:	f003 fc71 	bl	800bfbc <_init>
 80086da:	4c0a      	ldr	r4, [pc, #40]	; (8008704 <__libc_init_array+0x40>)
 80086dc:	4d0a      	ldr	r5, [pc, #40]	; (8008708 <__libc_init_array+0x44>)
 80086de:	1b64      	subs	r4, r4, r5
 80086e0:	10a4      	asrs	r4, r4, #2
 80086e2:	42a6      	cmp	r6, r4
 80086e4:	d105      	bne.n	80086f2 <__libc_init_array+0x2e>
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	00b3      	lsls	r3, r6, #2
 80086ea:	58eb      	ldr	r3, [r5, r3]
 80086ec:	4798      	blx	r3
 80086ee:	3601      	adds	r6, #1
 80086f0:	e7ee      	b.n	80086d0 <__libc_init_array+0xc>
 80086f2:	00b3      	lsls	r3, r6, #2
 80086f4:	58eb      	ldr	r3, [r5, r3]
 80086f6:	4798      	blx	r3
 80086f8:	3601      	adds	r6, #1
 80086fa:	e7f2      	b.n	80086e2 <__libc_init_array+0x1e>
 80086fc:	0800c5b8 	.word	0x0800c5b8
 8008700:	0800c5b8 	.word	0x0800c5b8
 8008704:	0800c5bc 	.word	0x0800c5bc
 8008708:	0800c5b8 	.word	0x0800c5b8

0800870c <__retarget_lock_init_recursive>:
 800870c:	4770      	bx	lr

0800870e <__retarget_lock_acquire_recursive>:
 800870e:	4770      	bx	lr

08008710 <__retarget_lock_release_recursive>:
 8008710:	4770      	bx	lr

08008712 <memchr>:
 8008712:	b2c9      	uxtb	r1, r1
 8008714:	1882      	adds	r2, r0, r2
 8008716:	4290      	cmp	r0, r2
 8008718:	d101      	bne.n	800871e <memchr+0xc>
 800871a:	2000      	movs	r0, #0
 800871c:	4770      	bx	lr
 800871e:	7803      	ldrb	r3, [r0, #0]
 8008720:	428b      	cmp	r3, r1
 8008722:	d0fb      	beq.n	800871c <memchr+0xa>
 8008724:	3001      	adds	r0, #1
 8008726:	e7f6      	b.n	8008716 <memchr+0x4>

08008728 <memcpy>:
 8008728:	2300      	movs	r3, #0
 800872a:	b510      	push	{r4, lr}
 800872c:	429a      	cmp	r2, r3
 800872e:	d100      	bne.n	8008732 <memcpy+0xa>
 8008730:	bd10      	pop	{r4, pc}
 8008732:	5ccc      	ldrb	r4, [r1, r3]
 8008734:	54c4      	strb	r4, [r0, r3]
 8008736:	3301      	adds	r3, #1
 8008738:	e7f8      	b.n	800872c <memcpy+0x4>
	...

0800873c <nanf>:
 800873c:	4800      	ldr	r0, [pc, #0]	; (8008740 <nanf+0x4>)
 800873e:	4770      	bx	lr
 8008740:	7fc00000 	.word	0x7fc00000

08008744 <quorem>:
 8008744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008746:	6902      	ldr	r2, [r0, #16]
 8008748:	690b      	ldr	r3, [r1, #16]
 800874a:	b089      	sub	sp, #36	; 0x24
 800874c:	0007      	movs	r7, r0
 800874e:	9104      	str	r1, [sp, #16]
 8008750:	2000      	movs	r0, #0
 8008752:	429a      	cmp	r2, r3
 8008754:	db69      	blt.n	800882a <quorem+0xe6>
 8008756:	3b01      	subs	r3, #1
 8008758:	009c      	lsls	r4, r3, #2
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	000b      	movs	r3, r1
 800875e:	3314      	adds	r3, #20
 8008760:	9306      	str	r3, [sp, #24]
 8008762:	191b      	adds	r3, r3, r4
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	003b      	movs	r3, r7
 8008768:	3314      	adds	r3, #20
 800876a:	9303      	str	r3, [sp, #12]
 800876c:	191c      	adds	r4, r3, r4
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	6826      	ldr	r6, [r4, #0]
 8008772:	681d      	ldr	r5, [r3, #0]
 8008774:	0030      	movs	r0, r6
 8008776:	3501      	adds	r5, #1
 8008778:	0029      	movs	r1, r5
 800877a:	f7f7 fce1 	bl	8000140 <__udivsi3>
 800877e:	9002      	str	r0, [sp, #8]
 8008780:	42ae      	cmp	r6, r5
 8008782:	d329      	bcc.n	80087d8 <quorem+0x94>
 8008784:	9b06      	ldr	r3, [sp, #24]
 8008786:	2600      	movs	r6, #0
 8008788:	469c      	mov	ip, r3
 800878a:	9d03      	ldr	r5, [sp, #12]
 800878c:	9606      	str	r6, [sp, #24]
 800878e:	4662      	mov	r2, ip
 8008790:	ca08      	ldmia	r2!, {r3}
 8008792:	6828      	ldr	r0, [r5, #0]
 8008794:	4694      	mov	ip, r2
 8008796:	9a02      	ldr	r2, [sp, #8]
 8008798:	b299      	uxth	r1, r3
 800879a:	4351      	muls	r1, r2
 800879c:	0c1b      	lsrs	r3, r3, #16
 800879e:	4353      	muls	r3, r2
 80087a0:	1989      	adds	r1, r1, r6
 80087a2:	0c0a      	lsrs	r2, r1, #16
 80087a4:	189b      	adds	r3, r3, r2
 80087a6:	9307      	str	r3, [sp, #28]
 80087a8:	0c1e      	lsrs	r6, r3, #16
 80087aa:	9b06      	ldr	r3, [sp, #24]
 80087ac:	b282      	uxth	r2, r0
 80087ae:	18d2      	adds	r2, r2, r3
 80087b0:	466b      	mov	r3, sp
 80087b2:	b289      	uxth	r1, r1
 80087b4:	8b9b      	ldrh	r3, [r3, #28]
 80087b6:	1a52      	subs	r2, r2, r1
 80087b8:	0c01      	lsrs	r1, r0, #16
 80087ba:	1ac9      	subs	r1, r1, r3
 80087bc:	1413      	asrs	r3, r2, #16
 80087be:	18cb      	adds	r3, r1, r3
 80087c0:	1419      	asrs	r1, r3, #16
 80087c2:	b292      	uxth	r2, r2
 80087c4:	041b      	lsls	r3, r3, #16
 80087c6:	4313      	orrs	r3, r2
 80087c8:	c508      	stmia	r5!, {r3}
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	9106      	str	r1, [sp, #24]
 80087ce:	4563      	cmp	r3, ip
 80087d0:	d2dd      	bcs.n	800878e <quorem+0x4a>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d030      	beq.n	800883a <quorem+0xf6>
 80087d8:	0038      	movs	r0, r7
 80087da:	9904      	ldr	r1, [sp, #16]
 80087dc:	f001 fa2a 	bl	8009c34 <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	db21      	blt.n	8008828 <quorem+0xe4>
 80087e4:	0038      	movs	r0, r7
 80087e6:	2600      	movs	r6, #0
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	9c04      	ldr	r4, [sp, #16]
 80087ec:	3301      	adds	r3, #1
 80087ee:	9302      	str	r3, [sp, #8]
 80087f0:	3014      	adds	r0, #20
 80087f2:	3414      	adds	r4, #20
 80087f4:	6803      	ldr	r3, [r0, #0]
 80087f6:	cc02      	ldmia	r4!, {r1}
 80087f8:	b29d      	uxth	r5, r3
 80087fa:	19ad      	adds	r5, r5, r6
 80087fc:	b28a      	uxth	r2, r1
 80087fe:	1aaa      	subs	r2, r5, r2
 8008800:	0c09      	lsrs	r1, r1, #16
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	1a5b      	subs	r3, r3, r1
 8008806:	1411      	asrs	r1, r2, #16
 8008808:	185b      	adds	r3, r3, r1
 800880a:	141e      	asrs	r6, r3, #16
 800880c:	b292      	uxth	r2, r2
 800880e:	041b      	lsls	r3, r3, #16
 8008810:	4313      	orrs	r3, r2
 8008812:	c008      	stmia	r0!, {r3}
 8008814:	9b05      	ldr	r3, [sp, #20]
 8008816:	42a3      	cmp	r3, r4
 8008818:	d2ec      	bcs.n	80087f4 <quorem+0xb0>
 800881a:	9b01      	ldr	r3, [sp, #4]
 800881c:	9a03      	ldr	r2, [sp, #12]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	2a00      	cmp	r2, #0
 8008826:	d015      	beq.n	8008854 <quorem+0x110>
 8008828:	9802      	ldr	r0, [sp, #8]
 800882a:	b009      	add	sp, #36	; 0x24
 800882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <quorem+0xfe>
 8008834:	9b01      	ldr	r3, [sp, #4]
 8008836:	3b01      	subs	r3, #1
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	3c04      	subs	r4, #4
 800883e:	42a3      	cmp	r3, r4
 8008840:	d3f5      	bcc.n	800882e <quorem+0xea>
 8008842:	9b01      	ldr	r3, [sp, #4]
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	e7c7      	b.n	80087d8 <quorem+0x94>
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	2a00      	cmp	r2, #0
 800884c:	d106      	bne.n	800885c <quorem+0x118>
 800884e:	9a01      	ldr	r2, [sp, #4]
 8008850:	3a01      	subs	r2, #1
 8008852:	9201      	str	r2, [sp, #4]
 8008854:	9a03      	ldr	r2, [sp, #12]
 8008856:	3b04      	subs	r3, #4
 8008858:	429a      	cmp	r2, r3
 800885a:	d3f5      	bcc.n	8008848 <quorem+0x104>
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	613b      	str	r3, [r7, #16]
 8008860:	e7e2      	b.n	8008828 <quorem+0xe4>
	...

08008864 <_dtoa_r>:
 8008864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008866:	0014      	movs	r4, r2
 8008868:	001d      	movs	r5, r3
 800886a:	69c6      	ldr	r6, [r0, #28]
 800886c:	b09d      	sub	sp, #116	; 0x74
 800886e:	9408      	str	r4, [sp, #32]
 8008870:	9509      	str	r5, [sp, #36]	; 0x24
 8008872:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8008874:	9004      	str	r0, [sp, #16]
 8008876:	2e00      	cmp	r6, #0
 8008878:	d10f      	bne.n	800889a <_dtoa_r+0x36>
 800887a:	2010      	movs	r0, #16
 800887c:	f000 fe4a 	bl	8009514 <malloc>
 8008880:	9b04      	ldr	r3, [sp, #16]
 8008882:	1e02      	subs	r2, r0, #0
 8008884:	61d8      	str	r0, [r3, #28]
 8008886:	d104      	bne.n	8008892 <_dtoa_r+0x2e>
 8008888:	21ef      	movs	r1, #239	; 0xef
 800888a:	4bc6      	ldr	r3, [pc, #792]	; (8008ba4 <_dtoa_r+0x340>)
 800888c:	48c6      	ldr	r0, [pc, #792]	; (8008ba8 <_dtoa_r+0x344>)
 800888e:	f002 fcc3 	bl	800b218 <__assert_func>
 8008892:	6046      	str	r6, [r0, #4]
 8008894:	6086      	str	r6, [r0, #8]
 8008896:	6006      	str	r6, [r0, #0]
 8008898:	60c6      	str	r6, [r0, #12]
 800889a:	9b04      	ldr	r3, [sp, #16]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	2900      	cmp	r1, #0
 80088a2:	d00b      	beq.n	80088bc <_dtoa_r+0x58>
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	2301      	movs	r3, #1
 80088a8:	4093      	lsls	r3, r2
 80088aa:	604a      	str	r2, [r1, #4]
 80088ac:	608b      	str	r3, [r1, #8]
 80088ae:	9804      	ldr	r0, [sp, #16]
 80088b0:	f000 ff32 	bl	8009718 <_Bfree>
 80088b4:	2200      	movs	r2, #0
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	2d00      	cmp	r5, #0
 80088be:	da1e      	bge.n	80088fe <_dtoa_r+0x9a>
 80088c0:	2301      	movs	r3, #1
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	006b      	lsls	r3, r5, #1
 80088c6:	085b      	lsrs	r3, r3, #1
 80088c8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80088cc:	4bb7      	ldr	r3, [pc, #732]	; (8008bac <_dtoa_r+0x348>)
 80088ce:	4ab7      	ldr	r2, [pc, #732]	; (8008bac <_dtoa_r+0x348>)
 80088d0:	403b      	ands	r3, r7
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d116      	bne.n	8008904 <_dtoa_r+0xa0>
 80088d6:	4bb6      	ldr	r3, [pc, #728]	; (8008bb0 <_dtoa_r+0x34c>)
 80088d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	033b      	lsls	r3, r7, #12
 80088de:	0b1b      	lsrs	r3, r3, #12
 80088e0:	4323      	orrs	r3, r4
 80088e2:	d101      	bne.n	80088e8 <_dtoa_r+0x84>
 80088e4:	f000 fdb5 	bl	8009452 <_dtoa_r+0xbee>
 80088e8:	4bb2      	ldr	r3, [pc, #712]	; (8008bb4 <_dtoa_r+0x350>)
 80088ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088ec:	9306      	str	r3, [sp, #24]
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d002      	beq.n	80088f8 <_dtoa_r+0x94>
 80088f2:	4bb1      	ldr	r3, [pc, #708]	; (8008bb8 <_dtoa_r+0x354>)
 80088f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	9806      	ldr	r0, [sp, #24]
 80088fa:	b01d      	add	sp, #116	; 0x74
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088fe:	2300      	movs	r3, #0
 8008900:	603b      	str	r3, [r7, #0]
 8008902:	e7e2      	b.n	80088ca <_dtoa_r+0x66>
 8008904:	9a08      	ldr	r2, [sp, #32]
 8008906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008908:	9210      	str	r2, [sp, #64]	; 0x40
 800890a:	9311      	str	r3, [sp, #68]	; 0x44
 800890c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800890e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008910:	2200      	movs	r2, #0
 8008912:	2300      	movs	r3, #0
 8008914:	f7f7 fd9a 	bl	800044c <__aeabi_dcmpeq>
 8008918:	1e06      	subs	r6, r0, #0
 800891a:	d009      	beq.n	8008930 <_dtoa_r+0xcc>
 800891c:	2301      	movs	r3, #1
 800891e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	4ba6      	ldr	r3, [pc, #664]	; (8008bbc <_dtoa_r+0x358>)
 8008924:	9306      	str	r3, [sp, #24]
 8008926:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0e5      	beq.n	80088f8 <_dtoa_r+0x94>
 800892c:	4ba4      	ldr	r3, [pc, #656]	; (8008bc0 <_dtoa_r+0x35c>)
 800892e:	e7e1      	b.n	80088f4 <_dtoa_r+0x90>
 8008930:	ab1a      	add	r3, sp, #104	; 0x68
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	ab1b      	add	r3, sp, #108	; 0x6c
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	9804      	ldr	r0, [sp, #16]
 800893a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800893c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800893e:	f001 fa95 	bl	8009e6c <__d2b>
 8008942:	007a      	lsls	r2, r7, #1
 8008944:	9005      	str	r0, [sp, #20]
 8008946:	0d52      	lsrs	r2, r2, #21
 8008948:	d100      	bne.n	800894c <_dtoa_r+0xe8>
 800894a:	e07b      	b.n	8008a44 <_dtoa_r+0x1e0>
 800894c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800894e:	9617      	str	r6, [sp, #92]	; 0x5c
 8008950:	0319      	lsls	r1, r3, #12
 8008952:	4b9c      	ldr	r3, [pc, #624]	; (8008bc4 <_dtoa_r+0x360>)
 8008954:	0b09      	lsrs	r1, r1, #12
 8008956:	430b      	orrs	r3, r1
 8008958:	499b      	ldr	r1, [pc, #620]	; (8008bc8 <_dtoa_r+0x364>)
 800895a:	1857      	adds	r7, r2, r1
 800895c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800895e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008960:	0019      	movs	r1, r3
 8008962:	2200      	movs	r2, #0
 8008964:	4b99      	ldr	r3, [pc, #612]	; (8008bcc <_dtoa_r+0x368>)
 8008966:	f7f9 f82b 	bl	80019c0 <__aeabi_dsub>
 800896a:	4a99      	ldr	r2, [pc, #612]	; (8008bd0 <_dtoa_r+0x36c>)
 800896c:	4b99      	ldr	r3, [pc, #612]	; (8008bd4 <_dtoa_r+0x370>)
 800896e:	f7f8 fd65 	bl	800143c <__aeabi_dmul>
 8008972:	4a99      	ldr	r2, [pc, #612]	; (8008bd8 <_dtoa_r+0x374>)
 8008974:	4b99      	ldr	r3, [pc, #612]	; (8008bdc <_dtoa_r+0x378>)
 8008976:	f7f7 fe07 	bl	8000588 <__aeabi_dadd>
 800897a:	0004      	movs	r4, r0
 800897c:	0038      	movs	r0, r7
 800897e:	000d      	movs	r5, r1
 8008980:	f7f9 fbf4 	bl	800216c <__aeabi_i2d>
 8008984:	4a96      	ldr	r2, [pc, #600]	; (8008be0 <_dtoa_r+0x37c>)
 8008986:	4b97      	ldr	r3, [pc, #604]	; (8008be4 <_dtoa_r+0x380>)
 8008988:	f7f8 fd58 	bl	800143c <__aeabi_dmul>
 800898c:	0002      	movs	r2, r0
 800898e:	000b      	movs	r3, r1
 8008990:	0020      	movs	r0, r4
 8008992:	0029      	movs	r1, r5
 8008994:	f7f7 fdf8 	bl	8000588 <__aeabi_dadd>
 8008998:	0004      	movs	r4, r0
 800899a:	000d      	movs	r5, r1
 800899c:	f7f9 fbb0 	bl	8002100 <__aeabi_d2iz>
 80089a0:	2200      	movs	r2, #0
 80089a2:	9003      	str	r0, [sp, #12]
 80089a4:	2300      	movs	r3, #0
 80089a6:	0020      	movs	r0, r4
 80089a8:	0029      	movs	r1, r5
 80089aa:	f7f7 fd55 	bl	8000458 <__aeabi_dcmplt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d00b      	beq.n	80089ca <_dtoa_r+0x166>
 80089b2:	9803      	ldr	r0, [sp, #12]
 80089b4:	f7f9 fbda 	bl	800216c <__aeabi_i2d>
 80089b8:	002b      	movs	r3, r5
 80089ba:	0022      	movs	r2, r4
 80089bc:	f7f7 fd46 	bl	800044c <__aeabi_dcmpeq>
 80089c0:	4243      	negs	r3, r0
 80089c2:	4158      	adcs	r0, r3
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	1a1b      	subs	r3, r3, r0
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	2301      	movs	r3, #1
 80089cc:	9316      	str	r3, [sp, #88]	; 0x58
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	2b16      	cmp	r3, #22
 80089d2:	d810      	bhi.n	80089f6 <_dtoa_r+0x192>
 80089d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80089d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089d8:	9a03      	ldr	r2, [sp, #12]
 80089da:	4b83      	ldr	r3, [pc, #524]	; (8008be8 <_dtoa_r+0x384>)
 80089dc:	00d2      	lsls	r2, r2, #3
 80089de:	189b      	adds	r3, r3, r2
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f7f7 fd38 	bl	8000458 <__aeabi_dcmplt>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d047      	beq.n	8008a7c <_dtoa_r+0x218>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	9303      	str	r3, [sp, #12]
 80089f2:	2300      	movs	r3, #0
 80089f4:	9316      	str	r3, [sp, #88]	; 0x58
 80089f6:	2200      	movs	r2, #0
 80089f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80089fa:	920a      	str	r2, [sp, #40]	; 0x28
 80089fc:	1bdb      	subs	r3, r3, r7
 80089fe:	1e5a      	subs	r2, r3, #1
 8008a00:	d53e      	bpl.n	8008a80 <_dtoa_r+0x21c>
 8008a02:	2201      	movs	r2, #1
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	930a      	str	r3, [sp, #40]	; 0x28
 8008a08:	2300      	movs	r3, #0
 8008a0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	db38      	blt.n	8008a84 <_dtoa_r+0x220>
 8008a12:	9a03      	ldr	r2, [sp, #12]
 8008a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a16:	4694      	mov	ip, r2
 8008a18:	4463      	add	r3, ip
 8008a1a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a20:	930d      	str	r3, [sp, #52]	; 0x34
 8008a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a24:	2401      	movs	r4, #1
 8008a26:	2b09      	cmp	r3, #9
 8008a28:	d867      	bhi.n	8008afa <_dtoa_r+0x296>
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	dd02      	ble.n	8008a34 <_dtoa_r+0x1d0>
 8008a2e:	2400      	movs	r4, #0
 8008a30:	3b04      	subs	r3, #4
 8008a32:	9322      	str	r3, [sp, #136]	; 0x88
 8008a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a36:	1e98      	subs	r0, r3, #2
 8008a38:	2803      	cmp	r0, #3
 8008a3a:	d867      	bhi.n	8008b0c <_dtoa_r+0x2a8>
 8008a3c:	f7f7 fb6c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008a40:	5b383a2b 	.word	0x5b383a2b
 8008a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a46:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008a48:	18f6      	adds	r6, r6, r3
 8008a4a:	4b68      	ldr	r3, [pc, #416]	; (8008bec <_dtoa_r+0x388>)
 8008a4c:	18f2      	adds	r2, r6, r3
 8008a4e:	2a20      	cmp	r2, #32
 8008a50:	dd0f      	ble.n	8008a72 <_dtoa_r+0x20e>
 8008a52:	2340      	movs	r3, #64	; 0x40
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	409f      	lsls	r7, r3
 8008a58:	4b65      	ldr	r3, [pc, #404]	; (8008bf0 <_dtoa_r+0x38c>)
 8008a5a:	0038      	movs	r0, r7
 8008a5c:	18f3      	adds	r3, r6, r3
 8008a5e:	40dc      	lsrs	r4, r3
 8008a60:	4320      	orrs	r0, r4
 8008a62:	f7f9 fbb3 	bl	80021cc <__aeabi_ui2d>
 8008a66:	2201      	movs	r2, #1
 8008a68:	4b62      	ldr	r3, [pc, #392]	; (8008bf4 <_dtoa_r+0x390>)
 8008a6a:	1e77      	subs	r7, r6, #1
 8008a6c:	18cb      	adds	r3, r1, r3
 8008a6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a70:	e776      	b.n	8008960 <_dtoa_r+0xfc>
 8008a72:	2320      	movs	r3, #32
 8008a74:	0020      	movs	r0, r4
 8008a76:	1a9b      	subs	r3, r3, r2
 8008a78:	4098      	lsls	r0, r3
 8008a7a:	e7f2      	b.n	8008a62 <_dtoa_r+0x1fe>
 8008a7c:	9016      	str	r0, [sp, #88]	; 0x58
 8008a7e:	e7ba      	b.n	80089f6 <_dtoa_r+0x192>
 8008a80:	920c      	str	r2, [sp, #48]	; 0x30
 8008a82:	e7c3      	b.n	8008a0c <_dtoa_r+0x1a8>
 8008a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a86:	9a03      	ldr	r2, [sp, #12]
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a8c:	4253      	negs	r3, r2
 8008a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a90:	2300      	movs	r3, #0
 8008a92:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a94:	e7c5      	b.n	8008a22 <_dtoa_r+0x1be>
 8008a96:	2300      	movs	r3, #0
 8008a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a9e:	9307      	str	r3, [sp, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc13      	bgt.n	8008acc <_dtoa_r+0x268>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	001a      	movs	r2, r3
 8008aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aaa:	9307      	str	r3, [sp, #28]
 8008aac:	9223      	str	r2, [sp, #140]	; 0x8c
 8008aae:	e00d      	b.n	8008acc <_dtoa_r+0x268>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e7f1      	b.n	8008a98 <_dtoa_r+0x234>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aba:	4694      	mov	ip, r2
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	4463      	add	r3, ip
 8008ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	9307      	str	r3, [sp, #28]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	dc00      	bgt.n	8008acc <_dtoa_r+0x268>
 8008aca:	2301      	movs	r3, #1
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	2100      	movs	r1, #0
 8008ad0:	69d0      	ldr	r0, [r2, #28]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	0015      	movs	r5, r2
 8008ad6:	3514      	adds	r5, #20
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	d91b      	bls.n	8008b14 <_dtoa_r+0x2b0>
 8008adc:	6041      	str	r1, [r0, #4]
 8008ade:	9804      	ldr	r0, [sp, #16]
 8008ae0:	f000 fdd6 	bl	8009690 <_Balloc>
 8008ae4:	9006      	str	r0, [sp, #24]
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d117      	bne.n	8008b1a <_dtoa_r+0x2b6>
 8008aea:	21b0      	movs	r1, #176	; 0xb0
 8008aec:	4b42      	ldr	r3, [pc, #264]	; (8008bf8 <_dtoa_r+0x394>)
 8008aee:	482e      	ldr	r0, [pc, #184]	; (8008ba8 <_dtoa_r+0x344>)
 8008af0:	9a06      	ldr	r2, [sp, #24]
 8008af2:	31ff      	adds	r1, #255	; 0xff
 8008af4:	e6cb      	b.n	800888e <_dtoa_r+0x2a>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e7dd      	b.n	8008ab6 <_dtoa_r+0x252>
 8008afa:	2300      	movs	r3, #0
 8008afc:	940f      	str	r4, [sp, #60]	; 0x3c
 8008afe:	9322      	str	r3, [sp, #136]	; 0x88
 8008b00:	3b01      	subs	r3, #1
 8008b02:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b04:	9307      	str	r3, [sp, #28]
 8008b06:	2200      	movs	r2, #0
 8008b08:	3313      	adds	r3, #19
 8008b0a:	e7cf      	b.n	8008aac <_dtoa_r+0x248>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b10:	3b02      	subs	r3, #2
 8008b12:	e7f6      	b.n	8008b02 <_dtoa_r+0x29e>
 8008b14:	3101      	adds	r1, #1
 8008b16:	0052      	lsls	r2, r2, #1
 8008b18:	e7dc      	b.n	8008ad4 <_dtoa_r+0x270>
 8008b1a:	9b04      	ldr	r3, [sp, #16]
 8008b1c:	9a06      	ldr	r2, [sp, #24]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	2b0e      	cmp	r3, #14
 8008b26:	d900      	bls.n	8008b2a <_dtoa_r+0x2c6>
 8008b28:	e0e5      	b.n	8008cf6 <_dtoa_r+0x492>
 8008b2a:	2c00      	cmp	r4, #0
 8008b2c:	d100      	bne.n	8008b30 <_dtoa_r+0x2cc>
 8008b2e:	e0e2      	b.n	8008cf6 <_dtoa_r+0x492>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dd64      	ble.n	8008c00 <_dtoa_r+0x39c>
 8008b36:	210f      	movs	r1, #15
 8008b38:	9a03      	ldr	r2, [sp, #12]
 8008b3a:	4b2b      	ldr	r3, [pc, #172]	; (8008be8 <_dtoa_r+0x384>)
 8008b3c:	400a      	ands	r2, r1
 8008b3e:	00d2      	lsls	r2, r2, #3
 8008b40:	189b      	adds	r3, r3, r2
 8008b42:	681e      	ldr	r6, [r3, #0]
 8008b44:	685f      	ldr	r7, [r3, #4]
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	2402      	movs	r4, #2
 8008b4a:	111d      	asrs	r5, r3, #4
 8008b4c:	05db      	lsls	r3, r3, #23
 8008b4e:	d50a      	bpl.n	8008b66 <_dtoa_r+0x302>
 8008b50:	4b2a      	ldr	r3, [pc, #168]	; (8008bfc <_dtoa_r+0x398>)
 8008b52:	400d      	ands	r5, r1
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b5c:	f7f8 f874 	bl	8000c48 <__aeabi_ddiv>
 8008b60:	9008      	str	r0, [sp, #32]
 8008b62:	9109      	str	r1, [sp, #36]	; 0x24
 8008b64:	3401      	adds	r4, #1
 8008b66:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <_dtoa_r+0x398>)
 8008b68:	930e      	str	r3, [sp, #56]	; 0x38
 8008b6a:	2d00      	cmp	r5, #0
 8008b6c:	d108      	bne.n	8008b80 <_dtoa_r+0x31c>
 8008b6e:	9808      	ldr	r0, [sp, #32]
 8008b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b72:	0032      	movs	r2, r6
 8008b74:	003b      	movs	r3, r7
 8008b76:	f7f8 f867 	bl	8000c48 <__aeabi_ddiv>
 8008b7a:	9008      	str	r0, [sp, #32]
 8008b7c:	9109      	str	r1, [sp, #36]	; 0x24
 8008b7e:	e05a      	b.n	8008c36 <_dtoa_r+0x3d2>
 8008b80:	2301      	movs	r3, #1
 8008b82:	421d      	tst	r5, r3
 8008b84:	d009      	beq.n	8008b9a <_dtoa_r+0x336>
 8008b86:	18e4      	adds	r4, r4, r3
 8008b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b8a:	0030      	movs	r0, r6
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	0039      	movs	r1, r7
 8008b92:	f7f8 fc53 	bl	800143c <__aeabi_dmul>
 8008b96:	0006      	movs	r6, r0
 8008b98:	000f      	movs	r7, r1
 8008b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b9c:	106d      	asrs	r5, r5, #1
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	e7e2      	b.n	8008b68 <_dtoa_r+0x304>
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	0800c1d6 	.word	0x0800c1d6
 8008ba8:	0800c1ed 	.word	0x0800c1ed
 8008bac:	7ff00000 	.word	0x7ff00000
 8008bb0:	0000270f 	.word	0x0000270f
 8008bb4:	0800c1d2 	.word	0x0800c1d2
 8008bb8:	0800c1d5 	.word	0x0800c1d5
 8008bbc:	0800c1a0 	.word	0x0800c1a0
 8008bc0:	0800c1a1 	.word	0x0800c1a1
 8008bc4:	3ff00000 	.word	0x3ff00000
 8008bc8:	fffffc01 	.word	0xfffffc01
 8008bcc:	3ff80000 	.word	0x3ff80000
 8008bd0:	636f4361 	.word	0x636f4361
 8008bd4:	3fd287a7 	.word	0x3fd287a7
 8008bd8:	8b60c8b3 	.word	0x8b60c8b3
 8008bdc:	3fc68a28 	.word	0x3fc68a28
 8008be0:	509f79fb 	.word	0x509f79fb
 8008be4:	3fd34413 	.word	0x3fd34413
 8008be8:	0800c2d8 	.word	0x0800c2d8
 8008bec:	00000432 	.word	0x00000432
 8008bf0:	00000412 	.word	0x00000412
 8008bf4:	fe100000 	.word	0xfe100000
 8008bf8:	0800c245 	.word	0x0800c245
 8008bfc:	0800c2b0 	.word	0x0800c2b0
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	2402      	movs	r4, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d016      	beq.n	8008c36 <_dtoa_r+0x3d2>
 8008c08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c0c:	220f      	movs	r2, #15
 8008c0e:	425d      	negs	r5, r3
 8008c10:	402a      	ands	r2, r5
 8008c12:	4bdd      	ldr	r3, [pc, #884]	; (8008f88 <_dtoa_r+0x724>)
 8008c14:	00d2      	lsls	r2, r2, #3
 8008c16:	189b      	adds	r3, r3, r2
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f7f8 fc0e 	bl	800143c <__aeabi_dmul>
 8008c20:	2701      	movs	r7, #1
 8008c22:	2300      	movs	r3, #0
 8008c24:	9008      	str	r0, [sp, #32]
 8008c26:	9109      	str	r1, [sp, #36]	; 0x24
 8008c28:	4ed8      	ldr	r6, [pc, #864]	; (8008f8c <_dtoa_r+0x728>)
 8008c2a:	112d      	asrs	r5, r5, #4
 8008c2c:	2d00      	cmp	r5, #0
 8008c2e:	d000      	beq.n	8008c32 <_dtoa_r+0x3ce>
 8008c30:	e091      	b.n	8008d56 <_dtoa_r+0x4f2>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1a1      	bne.n	8008b7a <_dtoa_r+0x316>
 8008c36:	9e08      	ldr	r6, [sp, #32]
 8008c38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d100      	bne.n	8008c42 <_dtoa_r+0x3de>
 8008c40:	e094      	b.n	8008d6c <_dtoa_r+0x508>
 8008c42:	2200      	movs	r2, #0
 8008c44:	0030      	movs	r0, r6
 8008c46:	0039      	movs	r1, r7
 8008c48:	4bd1      	ldr	r3, [pc, #836]	; (8008f90 <_dtoa_r+0x72c>)
 8008c4a:	f7f7 fc05 	bl	8000458 <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d100      	bne.n	8008c54 <_dtoa_r+0x3f0>
 8008c52:	e08b      	b.n	8008d6c <_dtoa_r+0x508>
 8008c54:	9b07      	ldr	r3, [sp, #28]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d100      	bne.n	8008c5c <_dtoa_r+0x3f8>
 8008c5a:	e087      	b.n	8008d6c <_dtoa_r+0x508>
 8008c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	dd45      	ble.n	8008cee <_dtoa_r+0x48a>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	3b01      	subs	r3, #1
 8008c68:	930e      	str	r3, [sp, #56]	; 0x38
 8008c6a:	0030      	movs	r0, r6
 8008c6c:	4bc9      	ldr	r3, [pc, #804]	; (8008f94 <_dtoa_r+0x730>)
 8008c6e:	0039      	movs	r1, r7
 8008c70:	f7f8 fbe4 	bl	800143c <__aeabi_dmul>
 8008c74:	9008      	str	r0, [sp, #32]
 8008c76:	9109      	str	r1, [sp, #36]	; 0x24
 8008c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	0020      	movs	r0, r4
 8008c7e:	9e08      	ldr	r6, [sp, #32]
 8008c80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c82:	9312      	str	r3, [sp, #72]	; 0x48
 8008c84:	f7f9 fa72 	bl	800216c <__aeabi_i2d>
 8008c88:	0032      	movs	r2, r6
 8008c8a:	003b      	movs	r3, r7
 8008c8c:	f7f8 fbd6 	bl	800143c <__aeabi_dmul>
 8008c90:	2200      	movs	r2, #0
 8008c92:	4bc1      	ldr	r3, [pc, #772]	; (8008f98 <_dtoa_r+0x734>)
 8008c94:	f7f7 fc78 	bl	8000588 <__aeabi_dadd>
 8008c98:	4ac0      	ldr	r2, [pc, #768]	; (8008f9c <_dtoa_r+0x738>)
 8008c9a:	9014      	str	r0, [sp, #80]	; 0x50
 8008c9c:	9115      	str	r1, [sp, #84]	; 0x54
 8008c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ca0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008ca2:	4694      	mov	ip, r2
 8008ca4:	9308      	str	r3, [sp, #32]
 8008ca6:	9409      	str	r4, [sp, #36]	; 0x24
 8008ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008caa:	4463      	add	r3, ip
 8008cac:	9318      	str	r3, [sp, #96]	; 0x60
 8008cae:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d15e      	bne.n	8008d74 <_dtoa_r+0x510>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4bb9      	ldr	r3, [pc, #740]	; (8008fa0 <_dtoa_r+0x73c>)
 8008cba:	0030      	movs	r0, r6
 8008cbc:	0039      	movs	r1, r7
 8008cbe:	f7f8 fe7f 	bl	80019c0 <__aeabi_dsub>
 8008cc2:	9a08      	ldr	r2, [sp, #32]
 8008cc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008cc6:	0004      	movs	r4, r0
 8008cc8:	000d      	movs	r5, r1
 8008cca:	f7f7 fbd9 	bl	8000480 <__aeabi_dcmpgt>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d000      	beq.n	8008cd4 <_dtoa_r+0x470>
 8008cd2:	e2b3      	b.n	800923c <_dtoa_r+0x9d8>
 8008cd4:	48b3      	ldr	r0, [pc, #716]	; (8008fa4 <_dtoa_r+0x740>)
 8008cd6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008cd8:	4684      	mov	ip, r0
 8008cda:	4461      	add	r1, ip
 8008cdc:	000b      	movs	r3, r1
 8008cde:	0020      	movs	r0, r4
 8008ce0:	0029      	movs	r1, r5
 8008ce2:	9a08      	ldr	r2, [sp, #32]
 8008ce4:	f7f7 fbb8 	bl	8000458 <__aeabi_dcmplt>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d000      	beq.n	8008cee <_dtoa_r+0x48a>
 8008cec:	e2a3      	b.n	8009236 <_dtoa_r+0x9d2>
 8008cee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cf0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008cf2:	9308      	str	r3, [sp, #32]
 8008cf4:	9409      	str	r4, [sp, #36]	; 0x24
 8008cf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da00      	bge.n	8008cfe <_dtoa_r+0x49a>
 8008cfc:	e179      	b.n	8008ff2 <_dtoa_r+0x78e>
 8008cfe:	9a03      	ldr	r2, [sp, #12]
 8008d00:	2a0e      	cmp	r2, #14
 8008d02:	dd00      	ble.n	8008d06 <_dtoa_r+0x4a2>
 8008d04:	e175      	b.n	8008ff2 <_dtoa_r+0x78e>
 8008d06:	4ba0      	ldr	r3, [pc, #640]	; (8008f88 <_dtoa_r+0x724>)
 8008d08:	00d2      	lsls	r2, r2, #3
 8008d0a:	189b      	adds	r3, r3, r2
 8008d0c:	681e      	ldr	r6, [r3, #0]
 8008d0e:	685f      	ldr	r7, [r3, #4]
 8008d10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	db00      	blt.n	8008d18 <_dtoa_r+0x4b4>
 8008d16:	e0e5      	b.n	8008ee4 <_dtoa_r+0x680>
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dd00      	ble.n	8008d20 <_dtoa_r+0x4bc>
 8008d1e:	e0e1      	b.n	8008ee4 <_dtoa_r+0x680>
 8008d20:	d000      	beq.n	8008d24 <_dtoa_r+0x4c0>
 8008d22:	e288      	b.n	8009236 <_dtoa_r+0x9d2>
 8008d24:	2200      	movs	r2, #0
 8008d26:	0030      	movs	r0, r6
 8008d28:	0039      	movs	r1, r7
 8008d2a:	4b9d      	ldr	r3, [pc, #628]	; (8008fa0 <_dtoa_r+0x73c>)
 8008d2c:	f7f8 fb86 	bl	800143c <__aeabi_dmul>
 8008d30:	9a08      	ldr	r2, [sp, #32]
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	f7f7 fbae 	bl	8000494 <__aeabi_dcmpge>
 8008d38:	9e07      	ldr	r6, [sp, #28]
 8008d3a:	0037      	movs	r7, r6
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d000      	beq.n	8008d42 <_dtoa_r+0x4de>
 8008d40:	e25f      	b.n	8009202 <_dtoa_r+0x99e>
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	9a06      	ldr	r2, [sp, #24]
 8008d46:	3301      	adds	r3, #1
 8008d48:	9308      	str	r3, [sp, #32]
 8008d4a:	2331      	movs	r3, #49	; 0x31
 8008d4c:	7013      	strb	r3, [r2, #0]
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	3301      	adds	r3, #1
 8008d52:	9303      	str	r3, [sp, #12]
 8008d54:	e25a      	b.n	800920c <_dtoa_r+0x9a8>
 8008d56:	423d      	tst	r5, r7
 8008d58:	d005      	beq.n	8008d66 <_dtoa_r+0x502>
 8008d5a:	6832      	ldr	r2, [r6, #0]
 8008d5c:	6873      	ldr	r3, [r6, #4]
 8008d5e:	f7f8 fb6d 	bl	800143c <__aeabi_dmul>
 8008d62:	003b      	movs	r3, r7
 8008d64:	3401      	adds	r4, #1
 8008d66:	106d      	asrs	r5, r5, #1
 8008d68:	3608      	adds	r6, #8
 8008d6a:	e75f      	b.n	8008c2c <_dtoa_r+0x3c8>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d70:	9b07      	ldr	r3, [sp, #28]
 8008d72:	e783      	b.n	8008c7c <_dtoa_r+0x418>
 8008d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d76:	4b84      	ldr	r3, [pc, #528]	; (8008f88 <_dtoa_r+0x724>)
 8008d78:	3a01      	subs	r2, #1
 8008d7a:	00d2      	lsls	r2, r2, #3
 8008d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d7e:	189b      	adds	r3, r3, r2
 8008d80:	9c08      	ldr	r4, [sp, #32]
 8008d82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	d051      	beq.n	8008e30 <_dtoa_r+0x5cc>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	4986      	ldr	r1, [pc, #536]	; (8008fa8 <_dtoa_r+0x744>)
 8008d90:	f7f7 ff5a 	bl	8000c48 <__aeabi_ddiv>
 8008d94:	0022      	movs	r2, r4
 8008d96:	002b      	movs	r3, r5
 8008d98:	f7f8 fe12 	bl	80019c0 <__aeabi_dsub>
 8008d9c:	9a06      	ldr	r2, [sp, #24]
 8008d9e:	0004      	movs	r4, r0
 8008da0:	4694      	mov	ip, r2
 8008da2:	000d      	movs	r5, r1
 8008da4:	9b06      	ldr	r3, [sp, #24]
 8008da6:	9314      	str	r3, [sp, #80]	; 0x50
 8008da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008daa:	4463      	add	r3, ip
 8008dac:	9318      	str	r3, [sp, #96]	; 0x60
 8008dae:	0039      	movs	r1, r7
 8008db0:	0030      	movs	r0, r6
 8008db2:	f7f9 f9a5 	bl	8002100 <__aeabi_d2iz>
 8008db6:	9012      	str	r0, [sp, #72]	; 0x48
 8008db8:	f7f9 f9d8 	bl	800216c <__aeabi_i2d>
 8008dbc:	0002      	movs	r2, r0
 8008dbe:	000b      	movs	r3, r1
 8008dc0:	0030      	movs	r0, r6
 8008dc2:	0039      	movs	r1, r7
 8008dc4:	f7f8 fdfc 	bl	80019c0 <__aeabi_dsub>
 8008dc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dcc:	3301      	adds	r3, #1
 8008dce:	9308      	str	r3, [sp, #32]
 8008dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dd2:	0006      	movs	r6, r0
 8008dd4:	3330      	adds	r3, #48	; 0x30
 8008dd6:	7013      	strb	r3, [r2, #0]
 8008dd8:	0022      	movs	r2, r4
 8008dda:	002b      	movs	r3, r5
 8008ddc:	000f      	movs	r7, r1
 8008dde:	f7f7 fb3b 	bl	8000458 <__aeabi_dcmplt>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d174      	bne.n	8008ed0 <_dtoa_r+0x66c>
 8008de6:	0032      	movs	r2, r6
 8008de8:	003b      	movs	r3, r7
 8008dea:	2000      	movs	r0, #0
 8008dec:	4968      	ldr	r1, [pc, #416]	; (8008f90 <_dtoa_r+0x72c>)
 8008dee:	f7f8 fde7 	bl	80019c0 <__aeabi_dsub>
 8008df2:	0022      	movs	r2, r4
 8008df4:	002b      	movs	r3, r5
 8008df6:	f7f7 fb2f 	bl	8000458 <__aeabi_dcmplt>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d000      	beq.n	8008e00 <_dtoa_r+0x59c>
 8008dfe:	e0d7      	b.n	8008fb0 <_dtoa_r+0x74c>
 8008e00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008e02:	9a08      	ldr	r2, [sp, #32]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d100      	bne.n	8008e0a <_dtoa_r+0x5a6>
 8008e08:	e771      	b.n	8008cee <_dtoa_r+0x48a>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	0020      	movs	r0, r4
 8008e0e:	0029      	movs	r1, r5
 8008e10:	4b60      	ldr	r3, [pc, #384]	; (8008f94 <_dtoa_r+0x730>)
 8008e12:	f7f8 fb13 	bl	800143c <__aeabi_dmul>
 8008e16:	4b5f      	ldr	r3, [pc, #380]	; (8008f94 <_dtoa_r+0x730>)
 8008e18:	0004      	movs	r4, r0
 8008e1a:	000d      	movs	r5, r1
 8008e1c:	0030      	movs	r0, r6
 8008e1e:	0039      	movs	r1, r7
 8008e20:	2200      	movs	r2, #0
 8008e22:	f7f8 fb0b 	bl	800143c <__aeabi_dmul>
 8008e26:	9b08      	ldr	r3, [sp, #32]
 8008e28:	0006      	movs	r6, r0
 8008e2a:	000f      	movs	r7, r1
 8008e2c:	9314      	str	r3, [sp, #80]	; 0x50
 8008e2e:	e7be      	b.n	8008dae <_dtoa_r+0x54a>
 8008e30:	0020      	movs	r0, r4
 8008e32:	0029      	movs	r1, r5
 8008e34:	f7f8 fb02 	bl	800143c <__aeabi_dmul>
 8008e38:	9a06      	ldr	r2, [sp, #24]
 8008e3a:	9b06      	ldr	r3, [sp, #24]
 8008e3c:	4694      	mov	ip, r2
 8008e3e:	9308      	str	r3, [sp, #32]
 8008e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e42:	9014      	str	r0, [sp, #80]	; 0x50
 8008e44:	9115      	str	r1, [sp, #84]	; 0x54
 8008e46:	4463      	add	r3, ip
 8008e48:	9319      	str	r3, [sp, #100]	; 0x64
 8008e4a:	0030      	movs	r0, r6
 8008e4c:	0039      	movs	r1, r7
 8008e4e:	f7f9 f957 	bl	8002100 <__aeabi_d2iz>
 8008e52:	9018      	str	r0, [sp, #96]	; 0x60
 8008e54:	f7f9 f98a 	bl	800216c <__aeabi_i2d>
 8008e58:	0002      	movs	r2, r0
 8008e5a:	000b      	movs	r3, r1
 8008e5c:	0030      	movs	r0, r6
 8008e5e:	0039      	movs	r1, r7
 8008e60:	f7f8 fdae 	bl	80019c0 <__aeabi_dsub>
 8008e64:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008e66:	9b08      	ldr	r3, [sp, #32]
 8008e68:	3630      	adds	r6, #48	; 0x30
 8008e6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e6c:	701e      	strb	r6, [r3, #0]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	0004      	movs	r4, r0
 8008e72:	000d      	movs	r5, r1
 8008e74:	9308      	str	r3, [sp, #32]
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d12d      	bne.n	8008ed6 <_dtoa_r+0x672>
 8008e7a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008e7c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008e7e:	9a06      	ldr	r2, [sp, #24]
 8008e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e82:	4694      	mov	ip, r2
 8008e84:	4463      	add	r3, ip
 8008e86:	2200      	movs	r2, #0
 8008e88:	9308      	str	r3, [sp, #32]
 8008e8a:	4b47      	ldr	r3, [pc, #284]	; (8008fa8 <_dtoa_r+0x744>)
 8008e8c:	f7f7 fb7c 	bl	8000588 <__aeabi_dadd>
 8008e90:	0002      	movs	r2, r0
 8008e92:	000b      	movs	r3, r1
 8008e94:	0020      	movs	r0, r4
 8008e96:	0029      	movs	r1, r5
 8008e98:	f7f7 faf2 	bl	8000480 <__aeabi_dcmpgt>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d000      	beq.n	8008ea2 <_dtoa_r+0x63e>
 8008ea0:	e086      	b.n	8008fb0 <_dtoa_r+0x74c>
 8008ea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	493f      	ldr	r1, [pc, #252]	; (8008fa8 <_dtoa_r+0x744>)
 8008eaa:	f7f8 fd89 	bl	80019c0 <__aeabi_dsub>
 8008eae:	0002      	movs	r2, r0
 8008eb0:	000b      	movs	r3, r1
 8008eb2:	0020      	movs	r0, r4
 8008eb4:	0029      	movs	r1, r5
 8008eb6:	f7f7 facf 	bl	8000458 <__aeabi_dcmplt>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d100      	bne.n	8008ec0 <_dtoa_r+0x65c>
 8008ebe:	e716      	b.n	8008cee <_dtoa_r+0x48a>
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	001a      	movs	r2, r3
 8008ec4:	3a01      	subs	r2, #1
 8008ec6:	9208      	str	r2, [sp, #32]
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	2a30      	cmp	r2, #48	; 0x30
 8008ecc:	d0f8      	beq.n	8008ec0 <_dtoa_r+0x65c>
 8008ece:	9308      	str	r3, [sp, #32]
 8008ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	e046      	b.n	8008f64 <_dtoa_r+0x700>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4b2e      	ldr	r3, [pc, #184]	; (8008f94 <_dtoa_r+0x730>)
 8008eda:	f7f8 faaf 	bl	800143c <__aeabi_dmul>
 8008ede:	0006      	movs	r6, r0
 8008ee0:	000f      	movs	r7, r1
 8008ee2:	e7b2      	b.n	8008e4a <_dtoa_r+0x5e6>
 8008ee4:	9b06      	ldr	r3, [sp, #24]
 8008ee6:	9a06      	ldr	r2, [sp, #24]
 8008ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8008eea:	9b07      	ldr	r3, [sp, #28]
 8008eec:	9c08      	ldr	r4, [sp, #32]
 8008eee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	189b      	adds	r3, r3, r2
 8008ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ef6:	0032      	movs	r2, r6
 8008ef8:	003b      	movs	r3, r7
 8008efa:	0020      	movs	r0, r4
 8008efc:	0029      	movs	r1, r5
 8008efe:	f7f7 fea3 	bl	8000c48 <__aeabi_ddiv>
 8008f02:	f7f9 f8fd 	bl	8002100 <__aeabi_d2iz>
 8008f06:	9007      	str	r0, [sp, #28]
 8008f08:	f7f9 f930 	bl	800216c <__aeabi_i2d>
 8008f0c:	0032      	movs	r2, r6
 8008f0e:	003b      	movs	r3, r7
 8008f10:	f7f8 fa94 	bl	800143c <__aeabi_dmul>
 8008f14:	0002      	movs	r2, r0
 8008f16:	000b      	movs	r3, r1
 8008f18:	0020      	movs	r0, r4
 8008f1a:	0029      	movs	r1, r5
 8008f1c:	f7f8 fd50 	bl	80019c0 <__aeabi_dsub>
 8008f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f22:	001a      	movs	r2, r3
 8008f24:	3201      	adds	r2, #1
 8008f26:	920a      	str	r2, [sp, #40]	; 0x28
 8008f28:	9208      	str	r2, [sp, #32]
 8008f2a:	9a07      	ldr	r2, [sp, #28]
 8008f2c:	3230      	adds	r2, #48	; 0x30
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d14f      	bne.n	8008fd6 <_dtoa_r+0x772>
 8008f36:	0002      	movs	r2, r0
 8008f38:	000b      	movs	r3, r1
 8008f3a:	f7f7 fb25 	bl	8000588 <__aeabi_dadd>
 8008f3e:	0032      	movs	r2, r6
 8008f40:	003b      	movs	r3, r7
 8008f42:	0004      	movs	r4, r0
 8008f44:	000d      	movs	r5, r1
 8008f46:	f7f7 fa9b 	bl	8000480 <__aeabi_dcmpgt>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d12e      	bne.n	8008fac <_dtoa_r+0x748>
 8008f4e:	0032      	movs	r2, r6
 8008f50:	003b      	movs	r3, r7
 8008f52:	0020      	movs	r0, r4
 8008f54:	0029      	movs	r1, r5
 8008f56:	f7f7 fa79 	bl	800044c <__aeabi_dcmpeq>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d002      	beq.n	8008f64 <_dtoa_r+0x700>
 8008f5e:	9b07      	ldr	r3, [sp, #28]
 8008f60:	07de      	lsls	r6, r3, #31
 8008f62:	d423      	bmi.n	8008fac <_dtoa_r+0x748>
 8008f64:	9905      	ldr	r1, [sp, #20]
 8008f66:	9804      	ldr	r0, [sp, #16]
 8008f68:	f000 fbd6 	bl	8009718 <_Bfree>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9a08      	ldr	r2, [sp, #32]
 8008f70:	7013      	strb	r3, [r2, #0]
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f76:	3301      	adds	r3, #1
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d100      	bne.n	8008f82 <_dtoa_r+0x71e>
 8008f80:	e4ba      	b.n	80088f8 <_dtoa_r+0x94>
 8008f82:	9a08      	ldr	r2, [sp, #32]
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	e4b7      	b.n	80088f8 <_dtoa_r+0x94>
 8008f88:	0800c2d8 	.word	0x0800c2d8
 8008f8c:	0800c2b0 	.word	0x0800c2b0
 8008f90:	3ff00000 	.word	0x3ff00000
 8008f94:	40240000 	.word	0x40240000
 8008f98:	401c0000 	.word	0x401c0000
 8008f9c:	fcc00000 	.word	0xfcc00000
 8008fa0:	40140000 	.word	0x40140000
 8008fa4:	7cc00000 	.word	0x7cc00000
 8008fa8:	3fe00000 	.word	0x3fe00000
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	930e      	str	r3, [sp, #56]	; 0x38
 8008fb0:	9b08      	ldr	r3, [sp, #32]
 8008fb2:	9308      	str	r3, [sp, #32]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	2a39      	cmp	r2, #57	; 0x39
 8008fba:	d108      	bne.n	8008fce <_dtoa_r+0x76a>
 8008fbc:	9a06      	ldr	r2, [sp, #24]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d1f7      	bne.n	8008fb2 <_dtoa_r+0x74e>
 8008fc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fc4:	9906      	ldr	r1, [sp, #24]
 8008fc6:	3201      	adds	r2, #1
 8008fc8:	920e      	str	r2, [sp, #56]	; 0x38
 8008fca:	2230      	movs	r2, #48	; 0x30
 8008fcc:	700a      	strb	r2, [r1, #0]
 8008fce:	781a      	ldrb	r2, [r3, #0]
 8008fd0:	3201      	adds	r2, #1
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	e77c      	b.n	8008ed0 <_dtoa_r+0x66c>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4ba9      	ldr	r3, [pc, #676]	; (8009280 <_dtoa_r+0xa1c>)
 8008fda:	f7f8 fa2f 	bl	800143c <__aeabi_dmul>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	0004      	movs	r4, r0
 8008fe4:	000d      	movs	r5, r1
 8008fe6:	f7f7 fa31 	bl	800044c <__aeabi_dcmpeq>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d100      	bne.n	8008ff0 <_dtoa_r+0x78c>
 8008fee:	e782      	b.n	8008ef6 <_dtoa_r+0x692>
 8008ff0:	e7b8      	b.n	8008f64 <_dtoa_r+0x700>
 8008ff2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008ff4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008ff6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ff8:	2f00      	cmp	r7, #0
 8008ffa:	d012      	beq.n	8009022 <_dtoa_r+0x7be>
 8008ffc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ffe:	2a01      	cmp	r2, #1
 8009000:	dc6e      	bgt.n	80090e0 <_dtoa_r+0x87c>
 8009002:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009004:	2a00      	cmp	r2, #0
 8009006:	d065      	beq.n	80090d4 <_dtoa_r+0x870>
 8009008:	4a9e      	ldr	r2, [pc, #632]	; (8009284 <_dtoa_r+0xa20>)
 800900a:	189b      	adds	r3, r3, r2
 800900c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800900e:	2101      	movs	r1, #1
 8009010:	18d2      	adds	r2, r2, r3
 8009012:	920a      	str	r2, [sp, #40]	; 0x28
 8009014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009016:	9804      	ldr	r0, [sp, #16]
 8009018:	18d3      	adds	r3, r2, r3
 800901a:	930c      	str	r3, [sp, #48]	; 0x30
 800901c:	f000 fc78 	bl	8009910 <__i2b>
 8009020:	0007      	movs	r7, r0
 8009022:	2c00      	cmp	r4, #0
 8009024:	d00e      	beq.n	8009044 <_dtoa_r+0x7e0>
 8009026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009028:	2b00      	cmp	r3, #0
 800902a:	dd0b      	ble.n	8009044 <_dtoa_r+0x7e0>
 800902c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800902e:	0023      	movs	r3, r4
 8009030:	4294      	cmp	r4, r2
 8009032:	dd00      	ble.n	8009036 <_dtoa_r+0x7d2>
 8009034:	0013      	movs	r3, r2
 8009036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009038:	1ae4      	subs	r4, r4, r3
 800903a:	1ad2      	subs	r2, r2, r3
 800903c:	920a      	str	r2, [sp, #40]	; 0x28
 800903e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	930c      	str	r3, [sp, #48]	; 0x30
 8009044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01e      	beq.n	8009088 <_dtoa_r+0x824>
 800904a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d05c      	beq.n	800910a <_dtoa_r+0x8a6>
 8009050:	2d00      	cmp	r5, #0
 8009052:	dd10      	ble.n	8009076 <_dtoa_r+0x812>
 8009054:	0039      	movs	r1, r7
 8009056:	002a      	movs	r2, r5
 8009058:	9804      	ldr	r0, [sp, #16]
 800905a:	f000 fd21 	bl	8009aa0 <__pow5mult>
 800905e:	9a05      	ldr	r2, [sp, #20]
 8009060:	0001      	movs	r1, r0
 8009062:	0007      	movs	r7, r0
 8009064:	9804      	ldr	r0, [sp, #16]
 8009066:	f000 fc6b 	bl	8009940 <__multiply>
 800906a:	0006      	movs	r6, r0
 800906c:	9905      	ldr	r1, [sp, #20]
 800906e:	9804      	ldr	r0, [sp, #16]
 8009070:	f000 fb52 	bl	8009718 <_Bfree>
 8009074:	9605      	str	r6, [sp, #20]
 8009076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009078:	1b5a      	subs	r2, r3, r5
 800907a:	42ab      	cmp	r3, r5
 800907c:	d004      	beq.n	8009088 <_dtoa_r+0x824>
 800907e:	9905      	ldr	r1, [sp, #20]
 8009080:	9804      	ldr	r0, [sp, #16]
 8009082:	f000 fd0d 	bl	8009aa0 <__pow5mult>
 8009086:	9005      	str	r0, [sp, #20]
 8009088:	2101      	movs	r1, #1
 800908a:	9804      	ldr	r0, [sp, #16]
 800908c:	f000 fc40 	bl	8009910 <__i2b>
 8009090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009092:	0006      	movs	r6, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	dd3a      	ble.n	800910e <_dtoa_r+0x8aa>
 8009098:	001a      	movs	r2, r3
 800909a:	0001      	movs	r1, r0
 800909c:	9804      	ldr	r0, [sp, #16]
 800909e:	f000 fcff 	bl	8009aa0 <__pow5mult>
 80090a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090a4:	0006      	movs	r6, r0
 80090a6:	2500      	movs	r5, #0
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	dc38      	bgt.n	800911e <_dtoa_r+0x8ba>
 80090ac:	2500      	movs	r5, #0
 80090ae:	9b08      	ldr	r3, [sp, #32]
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	d130      	bne.n	8009116 <_dtoa_r+0x8b2>
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	031b      	lsls	r3, r3, #12
 80090b8:	42ab      	cmp	r3, r5
 80090ba:	d12c      	bne.n	8009116 <_dtoa_r+0x8b2>
 80090bc:	4b72      	ldr	r3, [pc, #456]	; (8009288 <_dtoa_r+0xa24>)
 80090be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c0:	4213      	tst	r3, r2
 80090c2:	d028      	beq.n	8009116 <_dtoa_r+0x8b2>
 80090c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c6:	3501      	adds	r5, #1
 80090c8:	3301      	adds	r3, #1
 80090ca:	930a      	str	r3, [sp, #40]	; 0x28
 80090cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ce:	3301      	adds	r3, #1
 80090d0:	930c      	str	r3, [sp, #48]	; 0x30
 80090d2:	e020      	b.n	8009116 <_dtoa_r+0x8b2>
 80090d4:	2336      	movs	r3, #54	; 0x36
 80090d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80090da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	e795      	b.n	800900c <_dtoa_r+0x7a8>
 80090e0:	9b07      	ldr	r3, [sp, #28]
 80090e2:	1e5d      	subs	r5, r3, #1
 80090e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090e6:	42ab      	cmp	r3, r5
 80090e8:	db07      	blt.n	80090fa <_dtoa_r+0x896>
 80090ea:	1b5d      	subs	r5, r3, r5
 80090ec:	9b07      	ldr	r3, [sp, #28]
 80090ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	da8b      	bge.n	800900c <_dtoa_r+0x7a8>
 80090f4:	1ae4      	subs	r4, r4, r3
 80090f6:	2300      	movs	r3, #0
 80090f8:	e788      	b.n	800900c <_dtoa_r+0x7a8>
 80090fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090fe:	1aeb      	subs	r3, r5, r3
 8009100:	18d3      	adds	r3, r2, r3
 8009102:	950d      	str	r5, [sp, #52]	; 0x34
 8009104:	9313      	str	r3, [sp, #76]	; 0x4c
 8009106:	2500      	movs	r5, #0
 8009108:	e7f0      	b.n	80090ec <_dtoa_r+0x888>
 800910a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800910c:	e7b7      	b.n	800907e <_dtoa_r+0x81a>
 800910e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009110:	2500      	movs	r5, #0
 8009112:	2b01      	cmp	r3, #1
 8009114:	ddca      	ble.n	80090ac <_dtoa_r+0x848>
 8009116:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009118:	2001      	movs	r0, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d008      	beq.n	8009130 <_dtoa_r+0x8cc>
 800911e:	6933      	ldr	r3, [r6, #16]
 8009120:	3303      	adds	r3, #3
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	18f3      	adds	r3, r6, r3
 8009126:	6858      	ldr	r0, [r3, #4]
 8009128:	f000 fbaa 	bl	8009880 <__hi0bits>
 800912c:	2320      	movs	r3, #32
 800912e:	1a18      	subs	r0, r3, r0
 8009130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009132:	1818      	adds	r0, r3, r0
 8009134:	0002      	movs	r2, r0
 8009136:	231f      	movs	r3, #31
 8009138:	401a      	ands	r2, r3
 800913a:	4218      	tst	r0, r3
 800913c:	d047      	beq.n	80091ce <_dtoa_r+0x96a>
 800913e:	3301      	adds	r3, #1
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	2b04      	cmp	r3, #4
 8009144:	dd3f      	ble.n	80091c6 <_dtoa_r+0x962>
 8009146:	231c      	movs	r3, #28
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800914c:	18e4      	adds	r4, r4, r3
 800914e:	18d2      	adds	r2, r2, r3
 8009150:	920a      	str	r2, [sp, #40]	; 0x28
 8009152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009154:	18d3      	adds	r3, r2, r3
 8009156:	930c      	str	r3, [sp, #48]	; 0x30
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	dd05      	ble.n	800916a <_dtoa_r+0x906>
 800915e:	001a      	movs	r2, r3
 8009160:	9905      	ldr	r1, [sp, #20]
 8009162:	9804      	ldr	r0, [sp, #16]
 8009164:	f000 fcf8 	bl	8009b58 <__lshift>
 8009168:	9005      	str	r0, [sp, #20]
 800916a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd05      	ble.n	800917c <_dtoa_r+0x918>
 8009170:	0031      	movs	r1, r6
 8009172:	001a      	movs	r2, r3
 8009174:	9804      	ldr	r0, [sp, #16]
 8009176:	f000 fcef 	bl	8009b58 <__lshift>
 800917a:	0006      	movs	r6, r0
 800917c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800917e:	2b00      	cmp	r3, #0
 8009180:	d027      	beq.n	80091d2 <_dtoa_r+0x96e>
 8009182:	0031      	movs	r1, r6
 8009184:	9805      	ldr	r0, [sp, #20]
 8009186:	f000 fd55 	bl	8009c34 <__mcmp>
 800918a:	2800      	cmp	r0, #0
 800918c:	da21      	bge.n	80091d2 <_dtoa_r+0x96e>
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	220a      	movs	r2, #10
 8009192:	3b01      	subs	r3, #1
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	9905      	ldr	r1, [sp, #20]
 8009198:	2300      	movs	r3, #0
 800919a:	9804      	ldr	r0, [sp, #16]
 800919c:	f000 fae0 	bl	8009760 <__multadd>
 80091a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091a2:	9005      	str	r0, [sp, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d100      	bne.n	80091aa <_dtoa_r+0x946>
 80091a8:	e15d      	b.n	8009466 <_dtoa_r+0xc02>
 80091aa:	2300      	movs	r3, #0
 80091ac:	0039      	movs	r1, r7
 80091ae:	220a      	movs	r2, #10
 80091b0:	9804      	ldr	r0, [sp, #16]
 80091b2:	f000 fad5 	bl	8009760 <__multadd>
 80091b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b8:	0007      	movs	r7, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dc49      	bgt.n	8009252 <_dtoa_r+0x9ee>
 80091be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	dc0e      	bgt.n	80091e2 <_dtoa_r+0x97e>
 80091c4:	e045      	b.n	8009252 <_dtoa_r+0x9ee>
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d0c6      	beq.n	8009158 <_dtoa_r+0x8f4>
 80091ca:	331c      	adds	r3, #28
 80091cc:	e7bd      	b.n	800914a <_dtoa_r+0x8e6>
 80091ce:	0013      	movs	r3, r2
 80091d0:	e7fb      	b.n	80091ca <_dtoa_r+0x966>
 80091d2:	9b07      	ldr	r3, [sp, #28]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	dc36      	bgt.n	8009246 <_dtoa_r+0x9e2>
 80091d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091da:	2b02      	cmp	r3, #2
 80091dc:	dd33      	ble.n	8009246 <_dtoa_r+0x9e2>
 80091de:	9b07      	ldr	r3, [sp, #28]
 80091e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10c      	bne.n	8009202 <_dtoa_r+0x99e>
 80091e8:	0031      	movs	r1, r6
 80091ea:	2205      	movs	r2, #5
 80091ec:	9804      	ldr	r0, [sp, #16]
 80091ee:	f000 fab7 	bl	8009760 <__multadd>
 80091f2:	0006      	movs	r6, r0
 80091f4:	0001      	movs	r1, r0
 80091f6:	9805      	ldr	r0, [sp, #20]
 80091f8:	f000 fd1c 	bl	8009c34 <__mcmp>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	dd00      	ble.n	8009202 <_dtoa_r+0x99e>
 8009200:	e59f      	b.n	8008d42 <_dtoa_r+0x4de>
 8009202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009204:	43db      	mvns	r3, r3
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	9308      	str	r3, [sp, #32]
 800920c:	2500      	movs	r5, #0
 800920e:	0031      	movs	r1, r6
 8009210:	9804      	ldr	r0, [sp, #16]
 8009212:	f000 fa81 	bl	8009718 <_Bfree>
 8009216:	2f00      	cmp	r7, #0
 8009218:	d100      	bne.n	800921c <_dtoa_r+0x9b8>
 800921a:	e6a3      	b.n	8008f64 <_dtoa_r+0x700>
 800921c:	2d00      	cmp	r5, #0
 800921e:	d005      	beq.n	800922c <_dtoa_r+0x9c8>
 8009220:	42bd      	cmp	r5, r7
 8009222:	d003      	beq.n	800922c <_dtoa_r+0x9c8>
 8009224:	0029      	movs	r1, r5
 8009226:	9804      	ldr	r0, [sp, #16]
 8009228:	f000 fa76 	bl	8009718 <_Bfree>
 800922c:	0039      	movs	r1, r7
 800922e:	9804      	ldr	r0, [sp, #16]
 8009230:	f000 fa72 	bl	8009718 <_Bfree>
 8009234:	e696      	b.n	8008f64 <_dtoa_r+0x700>
 8009236:	2600      	movs	r6, #0
 8009238:	0037      	movs	r7, r6
 800923a:	e7e2      	b.n	8009202 <_dtoa_r+0x99e>
 800923c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800923e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009240:	9303      	str	r3, [sp, #12]
 8009242:	0037      	movs	r7, r6
 8009244:	e57d      	b.n	8008d42 <_dtoa_r+0x4de>
 8009246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009248:	2b00      	cmp	r3, #0
 800924a:	d100      	bne.n	800924e <_dtoa_r+0x9ea>
 800924c:	e0c3      	b.n	80093d6 <_dtoa_r+0xb72>
 800924e:	9b07      	ldr	r3, [sp, #28]
 8009250:	930b      	str	r3, [sp, #44]	; 0x2c
 8009252:	2c00      	cmp	r4, #0
 8009254:	dd05      	ble.n	8009262 <_dtoa_r+0x9fe>
 8009256:	0039      	movs	r1, r7
 8009258:	0022      	movs	r2, r4
 800925a:	9804      	ldr	r0, [sp, #16]
 800925c:	f000 fc7c 	bl	8009b58 <__lshift>
 8009260:	0007      	movs	r7, r0
 8009262:	0038      	movs	r0, r7
 8009264:	2d00      	cmp	r5, #0
 8009266:	d024      	beq.n	80092b2 <_dtoa_r+0xa4e>
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	9804      	ldr	r0, [sp, #16]
 800926c:	f000 fa10 	bl	8009690 <_Balloc>
 8009270:	1e04      	subs	r4, r0, #0
 8009272:	d111      	bne.n	8009298 <_dtoa_r+0xa34>
 8009274:	0022      	movs	r2, r4
 8009276:	4b05      	ldr	r3, [pc, #20]	; (800928c <_dtoa_r+0xa28>)
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <_dtoa_r+0xa2c>)
 800927a:	4906      	ldr	r1, [pc, #24]	; (8009294 <_dtoa_r+0xa30>)
 800927c:	f7ff fb07 	bl	800888e <_dtoa_r+0x2a>
 8009280:	40240000 	.word	0x40240000
 8009284:	00000433 	.word	0x00000433
 8009288:	7ff00000 	.word	0x7ff00000
 800928c:	0800c245 	.word	0x0800c245
 8009290:	0800c1ed 	.word	0x0800c1ed
 8009294:	000002ef 	.word	0x000002ef
 8009298:	0039      	movs	r1, r7
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	310c      	adds	r1, #12
 800929e:	3202      	adds	r2, #2
 80092a0:	0092      	lsls	r2, r2, #2
 80092a2:	300c      	adds	r0, #12
 80092a4:	f7ff fa40 	bl	8008728 <memcpy>
 80092a8:	2201      	movs	r2, #1
 80092aa:	0021      	movs	r1, r4
 80092ac:	9804      	ldr	r0, [sp, #16]
 80092ae:	f000 fc53 	bl	8009b58 <__lshift>
 80092b2:	9b06      	ldr	r3, [sp, #24]
 80092b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	189b      	adds	r3, r3, r2
 80092bc:	2201      	movs	r2, #1
 80092be:	003d      	movs	r5, r7
 80092c0:	0007      	movs	r7, r0
 80092c2:	930e      	str	r3, [sp, #56]	; 0x38
 80092c4:	9b08      	ldr	r3, [sp, #32]
 80092c6:	4013      	ands	r3, r2
 80092c8:	930d      	str	r3, [sp, #52]	; 0x34
 80092ca:	0031      	movs	r1, r6
 80092cc:	9805      	ldr	r0, [sp, #20]
 80092ce:	f7ff fa39 	bl	8008744 <quorem>
 80092d2:	0029      	movs	r1, r5
 80092d4:	0004      	movs	r4, r0
 80092d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80092d8:	9805      	ldr	r0, [sp, #20]
 80092da:	f000 fcab 	bl	8009c34 <__mcmp>
 80092de:	003a      	movs	r2, r7
 80092e0:	900c      	str	r0, [sp, #48]	; 0x30
 80092e2:	0031      	movs	r1, r6
 80092e4:	9804      	ldr	r0, [sp, #16]
 80092e6:	f000 fcc1 	bl	8009c6c <__mdiff>
 80092ea:	2201      	movs	r2, #1
 80092ec:	68c3      	ldr	r3, [r0, #12]
 80092ee:	3430      	adds	r4, #48	; 0x30
 80092f0:	9008      	str	r0, [sp, #32]
 80092f2:	920a      	str	r2, [sp, #40]	; 0x28
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <_dtoa_r+0xa9e>
 80092f8:	0001      	movs	r1, r0
 80092fa:	9805      	ldr	r0, [sp, #20]
 80092fc:	f000 fc9a 	bl	8009c34 <__mcmp>
 8009300:	900a      	str	r0, [sp, #40]	; 0x28
 8009302:	9908      	ldr	r1, [sp, #32]
 8009304:	9804      	ldr	r0, [sp, #16]
 8009306:	f000 fa07 	bl	8009718 <_Bfree>
 800930a:	9b07      	ldr	r3, [sp, #28]
 800930c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800930e:	3301      	adds	r3, #1
 8009310:	9308      	str	r3, [sp, #32]
 8009312:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009314:	4313      	orrs	r3, r2
 8009316:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009318:	4313      	orrs	r3, r2
 800931a:	d109      	bne.n	8009330 <_dtoa_r+0xacc>
 800931c:	2c39      	cmp	r4, #57	; 0x39
 800931e:	d022      	beq.n	8009366 <_dtoa_r+0xb02>
 8009320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd01      	ble.n	800932a <_dtoa_r+0xac6>
 8009326:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009328:	3431      	adds	r4, #49	; 0x31
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	701c      	strb	r4, [r3, #0]
 800932e:	e76e      	b.n	800920e <_dtoa_r+0x9aa>
 8009330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009332:	2b00      	cmp	r3, #0
 8009334:	db04      	blt.n	8009340 <_dtoa_r+0xadc>
 8009336:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009338:	4313      	orrs	r3, r2
 800933a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800933c:	4313      	orrs	r3, r2
 800933e:	d11e      	bne.n	800937e <_dtoa_r+0xb1a>
 8009340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	ddf1      	ble.n	800932a <_dtoa_r+0xac6>
 8009346:	9905      	ldr	r1, [sp, #20]
 8009348:	2201      	movs	r2, #1
 800934a:	9804      	ldr	r0, [sp, #16]
 800934c:	f000 fc04 	bl	8009b58 <__lshift>
 8009350:	0031      	movs	r1, r6
 8009352:	9005      	str	r0, [sp, #20]
 8009354:	f000 fc6e 	bl	8009c34 <__mcmp>
 8009358:	2800      	cmp	r0, #0
 800935a:	dc02      	bgt.n	8009362 <_dtoa_r+0xafe>
 800935c:	d1e5      	bne.n	800932a <_dtoa_r+0xac6>
 800935e:	07e3      	lsls	r3, r4, #31
 8009360:	d5e3      	bpl.n	800932a <_dtoa_r+0xac6>
 8009362:	2c39      	cmp	r4, #57	; 0x39
 8009364:	d1df      	bne.n	8009326 <_dtoa_r+0xac2>
 8009366:	2339      	movs	r3, #57	; 0x39
 8009368:	9a07      	ldr	r2, [sp, #28]
 800936a:	7013      	strb	r3, [r2, #0]
 800936c:	9b08      	ldr	r3, [sp, #32]
 800936e:	9308      	str	r3, [sp, #32]
 8009370:	3b01      	subs	r3, #1
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	2a39      	cmp	r2, #57	; 0x39
 8009376:	d063      	beq.n	8009440 <_dtoa_r+0xbdc>
 8009378:	3201      	adds	r2, #1
 800937a:	701a      	strb	r2, [r3, #0]
 800937c:	e747      	b.n	800920e <_dtoa_r+0x9aa>
 800937e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	dd03      	ble.n	800938c <_dtoa_r+0xb28>
 8009384:	2c39      	cmp	r4, #57	; 0x39
 8009386:	d0ee      	beq.n	8009366 <_dtoa_r+0xb02>
 8009388:	3401      	adds	r4, #1
 800938a:	e7ce      	b.n	800932a <_dtoa_r+0xac6>
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	9a07      	ldr	r2, [sp, #28]
 8009390:	701c      	strb	r4, [r3, #0]
 8009392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009394:	4293      	cmp	r3, r2
 8009396:	d03e      	beq.n	8009416 <_dtoa_r+0xbb2>
 8009398:	2300      	movs	r3, #0
 800939a:	220a      	movs	r2, #10
 800939c:	9905      	ldr	r1, [sp, #20]
 800939e:	9804      	ldr	r0, [sp, #16]
 80093a0:	f000 f9de 	bl	8009760 <__multadd>
 80093a4:	2300      	movs	r3, #0
 80093a6:	9005      	str	r0, [sp, #20]
 80093a8:	220a      	movs	r2, #10
 80093aa:	0029      	movs	r1, r5
 80093ac:	9804      	ldr	r0, [sp, #16]
 80093ae:	42bd      	cmp	r5, r7
 80093b0:	d106      	bne.n	80093c0 <_dtoa_r+0xb5c>
 80093b2:	f000 f9d5 	bl	8009760 <__multadd>
 80093b6:	0005      	movs	r5, r0
 80093b8:	0007      	movs	r7, r0
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	9307      	str	r3, [sp, #28]
 80093be:	e784      	b.n	80092ca <_dtoa_r+0xa66>
 80093c0:	f000 f9ce 	bl	8009760 <__multadd>
 80093c4:	0039      	movs	r1, r7
 80093c6:	0005      	movs	r5, r0
 80093c8:	2300      	movs	r3, #0
 80093ca:	220a      	movs	r2, #10
 80093cc:	9804      	ldr	r0, [sp, #16]
 80093ce:	f000 f9c7 	bl	8009760 <__multadd>
 80093d2:	0007      	movs	r7, r0
 80093d4:	e7f1      	b.n	80093ba <_dtoa_r+0xb56>
 80093d6:	9b07      	ldr	r3, [sp, #28]
 80093d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093da:	2500      	movs	r5, #0
 80093dc:	0031      	movs	r1, r6
 80093de:	9805      	ldr	r0, [sp, #20]
 80093e0:	f7ff f9b0 	bl	8008744 <quorem>
 80093e4:	9b06      	ldr	r3, [sp, #24]
 80093e6:	3030      	adds	r0, #48	; 0x30
 80093e8:	5558      	strb	r0, [r3, r5]
 80093ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ec:	3501      	adds	r5, #1
 80093ee:	0004      	movs	r4, r0
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	dd07      	ble.n	8009404 <_dtoa_r+0xba0>
 80093f4:	2300      	movs	r3, #0
 80093f6:	220a      	movs	r2, #10
 80093f8:	9905      	ldr	r1, [sp, #20]
 80093fa:	9804      	ldr	r0, [sp, #16]
 80093fc:	f000 f9b0 	bl	8009760 <__multadd>
 8009400:	9005      	str	r0, [sp, #20]
 8009402:	e7eb      	b.n	80093dc <_dtoa_r+0xb78>
 8009404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009406:	2301      	movs	r3, #1
 8009408:	2a00      	cmp	r2, #0
 800940a:	dd00      	ble.n	800940e <_dtoa_r+0xbaa>
 800940c:	0013      	movs	r3, r2
 800940e:	2500      	movs	r5, #0
 8009410:	9a06      	ldr	r2, [sp, #24]
 8009412:	18d3      	adds	r3, r2, r3
 8009414:	9308      	str	r3, [sp, #32]
 8009416:	9905      	ldr	r1, [sp, #20]
 8009418:	2201      	movs	r2, #1
 800941a:	9804      	ldr	r0, [sp, #16]
 800941c:	f000 fb9c 	bl	8009b58 <__lshift>
 8009420:	0031      	movs	r1, r6
 8009422:	9005      	str	r0, [sp, #20]
 8009424:	f000 fc06 	bl	8009c34 <__mcmp>
 8009428:	2800      	cmp	r0, #0
 800942a:	dc9f      	bgt.n	800936c <_dtoa_r+0xb08>
 800942c:	d101      	bne.n	8009432 <_dtoa_r+0xbce>
 800942e:	07e4      	lsls	r4, r4, #31
 8009430:	d49c      	bmi.n	800936c <_dtoa_r+0xb08>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	9308      	str	r3, [sp, #32]
 8009436:	3b01      	subs	r3, #1
 8009438:	781a      	ldrb	r2, [r3, #0]
 800943a:	2a30      	cmp	r2, #48	; 0x30
 800943c:	d0fa      	beq.n	8009434 <_dtoa_r+0xbd0>
 800943e:	e6e6      	b.n	800920e <_dtoa_r+0x9aa>
 8009440:	9a06      	ldr	r2, [sp, #24]
 8009442:	429a      	cmp	r2, r3
 8009444:	d193      	bne.n	800936e <_dtoa_r+0xb0a>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	3301      	adds	r3, #1
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	2331      	movs	r3, #49	; 0x31
 800944e:	7013      	strb	r3, [r2, #0]
 8009450:	e6dd      	b.n	800920e <_dtoa_r+0x9aa>
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <_dtoa_r+0xc14>)
 8009454:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009456:	9306      	str	r3, [sp, #24]
 8009458:	4b08      	ldr	r3, [pc, #32]	; (800947c <_dtoa_r+0xc18>)
 800945a:	2a00      	cmp	r2, #0
 800945c:	d001      	beq.n	8009462 <_dtoa_r+0xbfe>
 800945e:	f7ff fa49 	bl	80088f4 <_dtoa_r+0x90>
 8009462:	f7ff fa49 	bl	80088f8 <_dtoa_r+0x94>
 8009466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	dcb6      	bgt.n	80093da <_dtoa_r+0xb76>
 800946c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800946e:	2b02      	cmp	r3, #2
 8009470:	dd00      	ble.n	8009474 <_dtoa_r+0xc10>
 8009472:	e6b6      	b.n	80091e2 <_dtoa_r+0x97e>
 8009474:	e7b1      	b.n	80093da <_dtoa_r+0xb76>
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	0800c1c9 	.word	0x0800c1c9
 800947c:	0800c1d1 	.word	0x0800c1d1

08009480 <_free_r>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	0005      	movs	r5, r0
 8009484:	2900      	cmp	r1, #0
 8009486:	d010      	beq.n	80094aa <_free_r+0x2a>
 8009488:	1f0c      	subs	r4, r1, #4
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	da00      	bge.n	8009492 <_free_r+0x12>
 8009490:	18e4      	adds	r4, r4, r3
 8009492:	0028      	movs	r0, r5
 8009494:	f000 f8ec 	bl	8009670 <__malloc_lock>
 8009498:	4a1d      	ldr	r2, [pc, #116]	; (8009510 <_free_r+0x90>)
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d105      	bne.n	80094ac <_free_r+0x2c>
 80094a0:	6063      	str	r3, [r4, #4]
 80094a2:	6014      	str	r4, [r2, #0]
 80094a4:	0028      	movs	r0, r5
 80094a6:	f000 f8eb 	bl	8009680 <__malloc_unlock>
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d908      	bls.n	80094c2 <_free_r+0x42>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	1821      	adds	r1, r4, r0
 80094b4:	428b      	cmp	r3, r1
 80094b6:	d1f3      	bne.n	80094a0 <_free_r+0x20>
 80094b8:	6819      	ldr	r1, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	1809      	adds	r1, r1, r0
 80094be:	6021      	str	r1, [r4, #0]
 80094c0:	e7ee      	b.n	80094a0 <_free_r+0x20>
 80094c2:	001a      	movs	r2, r3
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <_free_r+0x4e>
 80094ca:	42a3      	cmp	r3, r4
 80094cc:	d9f9      	bls.n	80094c2 <_free_r+0x42>
 80094ce:	6811      	ldr	r1, [r2, #0]
 80094d0:	1850      	adds	r0, r2, r1
 80094d2:	42a0      	cmp	r0, r4
 80094d4:	d10b      	bne.n	80094ee <_free_r+0x6e>
 80094d6:	6820      	ldr	r0, [r4, #0]
 80094d8:	1809      	adds	r1, r1, r0
 80094da:	1850      	adds	r0, r2, r1
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	4283      	cmp	r3, r0
 80094e0:	d1e0      	bne.n	80094a4 <_free_r+0x24>
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	1841      	adds	r1, r0, r1
 80094e8:	6011      	str	r1, [r2, #0]
 80094ea:	6053      	str	r3, [r2, #4]
 80094ec:	e7da      	b.n	80094a4 <_free_r+0x24>
 80094ee:	42a0      	cmp	r0, r4
 80094f0:	d902      	bls.n	80094f8 <_free_r+0x78>
 80094f2:	230c      	movs	r3, #12
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	e7d5      	b.n	80094a4 <_free_r+0x24>
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	1821      	adds	r1, r4, r0
 80094fc:	428b      	cmp	r3, r1
 80094fe:	d103      	bne.n	8009508 <_free_r+0x88>
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	1809      	adds	r1, r1, r0
 8009506:	6021      	str	r1, [r4, #0]
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	6054      	str	r4, [r2, #4]
 800950c:	e7ca      	b.n	80094a4 <_free_r+0x24>
 800950e:	46c0      	nop			; (mov r8, r8)
 8009510:	20002224 	.word	0x20002224

08009514 <malloc>:
 8009514:	b510      	push	{r4, lr}
 8009516:	4b03      	ldr	r3, [pc, #12]	; (8009524 <malloc+0x10>)
 8009518:	0001      	movs	r1, r0
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	f000 f826 	bl	800956c <_malloc_r>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	20000068 	.word	0x20000068

08009528 <sbrk_aligned>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4e0f      	ldr	r6, [pc, #60]	; (8009568 <sbrk_aligned+0x40>)
 800952c:	000d      	movs	r5, r1
 800952e:	6831      	ldr	r1, [r6, #0]
 8009530:	0004      	movs	r4, r0
 8009532:	2900      	cmp	r1, #0
 8009534:	d102      	bne.n	800953c <sbrk_aligned+0x14>
 8009536:	f001 fe57 	bl	800b1e8 <_sbrk_r>
 800953a:	6030      	str	r0, [r6, #0]
 800953c:	0029      	movs	r1, r5
 800953e:	0020      	movs	r0, r4
 8009540:	f001 fe52 	bl	800b1e8 <_sbrk_r>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d00a      	beq.n	800955e <sbrk_aligned+0x36>
 8009548:	2303      	movs	r3, #3
 800954a:	1cc5      	adds	r5, r0, #3
 800954c:	439d      	bics	r5, r3
 800954e:	42a8      	cmp	r0, r5
 8009550:	d007      	beq.n	8009562 <sbrk_aligned+0x3a>
 8009552:	1a29      	subs	r1, r5, r0
 8009554:	0020      	movs	r0, r4
 8009556:	f001 fe47 	bl	800b1e8 <_sbrk_r>
 800955a:	3001      	adds	r0, #1
 800955c:	d101      	bne.n	8009562 <sbrk_aligned+0x3a>
 800955e:	2501      	movs	r5, #1
 8009560:	426d      	negs	r5, r5
 8009562:	0028      	movs	r0, r5
 8009564:	bd70      	pop	{r4, r5, r6, pc}
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	20002228 	.word	0x20002228

0800956c <_malloc_r>:
 800956c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800956e:	2203      	movs	r2, #3
 8009570:	1ccb      	adds	r3, r1, #3
 8009572:	4393      	bics	r3, r2
 8009574:	3308      	adds	r3, #8
 8009576:	0006      	movs	r6, r0
 8009578:	001f      	movs	r7, r3
 800957a:	2b0c      	cmp	r3, #12
 800957c:	d238      	bcs.n	80095f0 <_malloc_r+0x84>
 800957e:	270c      	movs	r7, #12
 8009580:	42b9      	cmp	r1, r7
 8009582:	d837      	bhi.n	80095f4 <_malloc_r+0x88>
 8009584:	0030      	movs	r0, r6
 8009586:	f000 f873 	bl	8009670 <__malloc_lock>
 800958a:	4b38      	ldr	r3, [pc, #224]	; (800966c <_malloc_r+0x100>)
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	001c      	movs	r4, r3
 8009592:	2c00      	cmp	r4, #0
 8009594:	d133      	bne.n	80095fe <_malloc_r+0x92>
 8009596:	0039      	movs	r1, r7
 8009598:	0030      	movs	r0, r6
 800959a:	f7ff ffc5 	bl	8009528 <sbrk_aligned>
 800959e:	0004      	movs	r4, r0
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d15e      	bne.n	8009662 <_malloc_r+0xf6>
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	681c      	ldr	r4, [r3, #0]
 80095a8:	0025      	movs	r5, r4
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	d14e      	bne.n	800964c <_malloc_r+0xe0>
 80095ae:	2c00      	cmp	r4, #0
 80095b0:	d051      	beq.n	8009656 <_malloc_r+0xea>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	0029      	movs	r1, r5
 80095b6:	18e3      	adds	r3, r4, r3
 80095b8:	0030      	movs	r0, r6
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	f001 fe14 	bl	800b1e8 <_sbrk_r>
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	4283      	cmp	r3, r0
 80095c4:	d147      	bne.n	8009656 <_malloc_r+0xea>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	0030      	movs	r0, r6
 80095ca:	1aff      	subs	r7, r7, r3
 80095cc:	0039      	movs	r1, r7
 80095ce:	f7ff ffab 	bl	8009528 <sbrk_aligned>
 80095d2:	3001      	adds	r0, #1
 80095d4:	d03f      	beq.n	8009656 <_malloc_r+0xea>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	19db      	adds	r3, r3, r7
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d040      	beq.n	8009666 <_malloc_r+0xfa>
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	42a2      	cmp	r2, r4
 80095e8:	d133      	bne.n	8009652 <_malloc_r+0xe6>
 80095ea:	2200      	movs	r2, #0
 80095ec:	605a      	str	r2, [r3, #4]
 80095ee:	e014      	b.n	800961a <_malloc_r+0xae>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dac5      	bge.n	8009580 <_malloc_r+0x14>
 80095f4:	230c      	movs	r3, #12
 80095f6:	2500      	movs	r5, #0
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	0028      	movs	r0, r5
 80095fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095fe:	6821      	ldr	r1, [r4, #0]
 8009600:	1bc9      	subs	r1, r1, r7
 8009602:	d420      	bmi.n	8009646 <_malloc_r+0xda>
 8009604:	290b      	cmp	r1, #11
 8009606:	d918      	bls.n	800963a <_malloc_r+0xce>
 8009608:	19e2      	adds	r2, r4, r7
 800960a:	6027      	str	r7, [r4, #0]
 800960c:	42a3      	cmp	r3, r4
 800960e:	d112      	bne.n	8009636 <_malloc_r+0xca>
 8009610:	9b00      	ldr	r3, [sp, #0]
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	6863      	ldr	r3, [r4, #4]
 8009616:	6011      	str	r1, [r2, #0]
 8009618:	6053      	str	r3, [r2, #4]
 800961a:	0030      	movs	r0, r6
 800961c:	0025      	movs	r5, r4
 800961e:	f000 f82f 	bl	8009680 <__malloc_unlock>
 8009622:	2207      	movs	r2, #7
 8009624:	350b      	adds	r5, #11
 8009626:	1d23      	adds	r3, r4, #4
 8009628:	4395      	bics	r5, r2
 800962a:	1aea      	subs	r2, r5, r3
 800962c:	429d      	cmp	r5, r3
 800962e:	d0e4      	beq.n	80095fa <_malloc_r+0x8e>
 8009630:	1b5b      	subs	r3, r3, r5
 8009632:	50a3      	str	r3, [r4, r2]
 8009634:	e7e1      	b.n	80095fa <_malloc_r+0x8e>
 8009636:	605a      	str	r2, [r3, #4]
 8009638:	e7ec      	b.n	8009614 <_malloc_r+0xa8>
 800963a:	6862      	ldr	r2, [r4, #4]
 800963c:	42a3      	cmp	r3, r4
 800963e:	d1d5      	bne.n	80095ec <_malloc_r+0x80>
 8009640:	9b00      	ldr	r3, [sp, #0]
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	e7e9      	b.n	800961a <_malloc_r+0xae>
 8009646:	0023      	movs	r3, r4
 8009648:	6864      	ldr	r4, [r4, #4]
 800964a:	e7a2      	b.n	8009592 <_malloc_r+0x26>
 800964c:	002c      	movs	r4, r5
 800964e:	686d      	ldr	r5, [r5, #4]
 8009650:	e7ab      	b.n	80095aa <_malloc_r+0x3e>
 8009652:	0013      	movs	r3, r2
 8009654:	e7c4      	b.n	80095e0 <_malloc_r+0x74>
 8009656:	230c      	movs	r3, #12
 8009658:	0030      	movs	r0, r6
 800965a:	6033      	str	r3, [r6, #0]
 800965c:	f000 f810 	bl	8009680 <__malloc_unlock>
 8009660:	e7cb      	b.n	80095fa <_malloc_r+0x8e>
 8009662:	6027      	str	r7, [r4, #0]
 8009664:	e7d9      	b.n	800961a <_malloc_r+0xae>
 8009666:	605b      	str	r3, [r3, #4]
 8009668:	deff      	udf	#255	; 0xff
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	20002224 	.word	0x20002224

08009670 <__malloc_lock>:
 8009670:	b510      	push	{r4, lr}
 8009672:	4802      	ldr	r0, [pc, #8]	; (800967c <__malloc_lock+0xc>)
 8009674:	f7ff f84b 	bl	800870e <__retarget_lock_acquire_recursive>
 8009678:	bd10      	pop	{r4, pc}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	20002220 	.word	0x20002220

08009680 <__malloc_unlock>:
 8009680:	b510      	push	{r4, lr}
 8009682:	4802      	ldr	r0, [pc, #8]	; (800968c <__malloc_unlock+0xc>)
 8009684:	f7ff f844 	bl	8008710 <__retarget_lock_release_recursive>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	20002220 	.word	0x20002220

08009690 <_Balloc>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	69c5      	ldr	r5, [r0, #28]
 8009694:	0006      	movs	r6, r0
 8009696:	000c      	movs	r4, r1
 8009698:	2d00      	cmp	r5, #0
 800969a:	d10e      	bne.n	80096ba <_Balloc+0x2a>
 800969c:	2010      	movs	r0, #16
 800969e:	f7ff ff39 	bl	8009514 <malloc>
 80096a2:	1e02      	subs	r2, r0, #0
 80096a4:	61f0      	str	r0, [r6, #28]
 80096a6:	d104      	bne.n	80096b2 <_Balloc+0x22>
 80096a8:	216b      	movs	r1, #107	; 0x6b
 80096aa:	4b19      	ldr	r3, [pc, #100]	; (8009710 <_Balloc+0x80>)
 80096ac:	4819      	ldr	r0, [pc, #100]	; (8009714 <_Balloc+0x84>)
 80096ae:	f001 fdb3 	bl	800b218 <__assert_func>
 80096b2:	6045      	str	r5, [r0, #4]
 80096b4:	6085      	str	r5, [r0, #8]
 80096b6:	6005      	str	r5, [r0, #0]
 80096b8:	60c5      	str	r5, [r0, #12]
 80096ba:	69f5      	ldr	r5, [r6, #28]
 80096bc:	68eb      	ldr	r3, [r5, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d013      	beq.n	80096ea <_Balloc+0x5a>
 80096c2:	69f3      	ldr	r3, [r6, #28]
 80096c4:	00a2      	lsls	r2, r4, #2
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	189b      	adds	r3, r3, r2
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d118      	bne.n	8009702 <_Balloc+0x72>
 80096d0:	2101      	movs	r1, #1
 80096d2:	000d      	movs	r5, r1
 80096d4:	40a5      	lsls	r5, r4
 80096d6:	1d6a      	adds	r2, r5, #5
 80096d8:	0030      	movs	r0, r6
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	f001 fdba 	bl	800b254 <_calloc_r>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d00c      	beq.n	80096fe <_Balloc+0x6e>
 80096e4:	6044      	str	r4, [r0, #4]
 80096e6:	6085      	str	r5, [r0, #8]
 80096e8:	e00d      	b.n	8009706 <_Balloc+0x76>
 80096ea:	2221      	movs	r2, #33	; 0x21
 80096ec:	2104      	movs	r1, #4
 80096ee:	0030      	movs	r0, r6
 80096f0:	f001 fdb0 	bl	800b254 <_calloc_r>
 80096f4:	69f3      	ldr	r3, [r6, #28]
 80096f6:	60e8      	str	r0, [r5, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e1      	bne.n	80096c2 <_Balloc+0x32>
 80096fe:	2000      	movs	r0, #0
 8009700:	bd70      	pop	{r4, r5, r6, pc}
 8009702:	6802      	ldr	r2, [r0, #0]
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	2300      	movs	r3, #0
 8009708:	6103      	str	r3, [r0, #16]
 800970a:	60c3      	str	r3, [r0, #12]
 800970c:	e7f8      	b.n	8009700 <_Balloc+0x70>
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	0800c1d6 	.word	0x0800c1d6
 8009714:	0800c256 	.word	0x0800c256

08009718 <_Bfree>:
 8009718:	b570      	push	{r4, r5, r6, lr}
 800971a:	69c6      	ldr	r6, [r0, #28]
 800971c:	0005      	movs	r5, r0
 800971e:	000c      	movs	r4, r1
 8009720:	2e00      	cmp	r6, #0
 8009722:	d10e      	bne.n	8009742 <_Bfree+0x2a>
 8009724:	2010      	movs	r0, #16
 8009726:	f7ff fef5 	bl	8009514 <malloc>
 800972a:	1e02      	subs	r2, r0, #0
 800972c:	61e8      	str	r0, [r5, #28]
 800972e:	d104      	bne.n	800973a <_Bfree+0x22>
 8009730:	218f      	movs	r1, #143	; 0x8f
 8009732:	4b09      	ldr	r3, [pc, #36]	; (8009758 <_Bfree+0x40>)
 8009734:	4809      	ldr	r0, [pc, #36]	; (800975c <_Bfree+0x44>)
 8009736:	f001 fd6f 	bl	800b218 <__assert_func>
 800973a:	6046      	str	r6, [r0, #4]
 800973c:	6086      	str	r6, [r0, #8]
 800973e:	6006      	str	r6, [r0, #0]
 8009740:	60c6      	str	r6, [r0, #12]
 8009742:	2c00      	cmp	r4, #0
 8009744:	d007      	beq.n	8009756 <_Bfree+0x3e>
 8009746:	69eb      	ldr	r3, [r5, #28]
 8009748:	6862      	ldr	r2, [r4, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	0092      	lsls	r2, r2, #2
 800974e:	189b      	adds	r3, r3, r2
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	6022      	str	r2, [r4, #0]
 8009754:	601c      	str	r4, [r3, #0]
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	0800c1d6 	.word	0x0800c1d6
 800975c:	0800c256 	.word	0x0800c256

08009760 <__multadd>:
 8009760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009762:	000e      	movs	r6, r1
 8009764:	9001      	str	r0, [sp, #4]
 8009766:	000c      	movs	r4, r1
 8009768:	001d      	movs	r5, r3
 800976a:	2000      	movs	r0, #0
 800976c:	690f      	ldr	r7, [r1, #16]
 800976e:	3614      	adds	r6, #20
 8009770:	6833      	ldr	r3, [r6, #0]
 8009772:	3001      	adds	r0, #1
 8009774:	b299      	uxth	r1, r3
 8009776:	4351      	muls	r1, r2
 8009778:	0c1b      	lsrs	r3, r3, #16
 800977a:	4353      	muls	r3, r2
 800977c:	1949      	adds	r1, r1, r5
 800977e:	0c0d      	lsrs	r5, r1, #16
 8009780:	195b      	adds	r3, r3, r5
 8009782:	0c1d      	lsrs	r5, r3, #16
 8009784:	b289      	uxth	r1, r1
 8009786:	041b      	lsls	r3, r3, #16
 8009788:	185b      	adds	r3, r3, r1
 800978a:	c608      	stmia	r6!, {r3}
 800978c:	4287      	cmp	r7, r0
 800978e:	dcef      	bgt.n	8009770 <__multadd+0x10>
 8009790:	2d00      	cmp	r5, #0
 8009792:	d022      	beq.n	80097da <__multadd+0x7a>
 8009794:	68a3      	ldr	r3, [r4, #8]
 8009796:	42bb      	cmp	r3, r7
 8009798:	dc19      	bgt.n	80097ce <__multadd+0x6e>
 800979a:	6861      	ldr	r1, [r4, #4]
 800979c:	9801      	ldr	r0, [sp, #4]
 800979e:	3101      	adds	r1, #1
 80097a0:	f7ff ff76 	bl	8009690 <_Balloc>
 80097a4:	1e06      	subs	r6, r0, #0
 80097a6:	d105      	bne.n	80097b4 <__multadd+0x54>
 80097a8:	0032      	movs	r2, r6
 80097aa:	21ba      	movs	r1, #186	; 0xba
 80097ac:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <__multadd+0x80>)
 80097ae:	480d      	ldr	r0, [pc, #52]	; (80097e4 <__multadd+0x84>)
 80097b0:	f001 fd32 	bl	800b218 <__assert_func>
 80097b4:	0021      	movs	r1, r4
 80097b6:	6922      	ldr	r2, [r4, #16]
 80097b8:	310c      	adds	r1, #12
 80097ba:	3202      	adds	r2, #2
 80097bc:	0092      	lsls	r2, r2, #2
 80097be:	300c      	adds	r0, #12
 80097c0:	f7fe ffb2 	bl	8008728 <memcpy>
 80097c4:	0021      	movs	r1, r4
 80097c6:	9801      	ldr	r0, [sp, #4]
 80097c8:	f7ff ffa6 	bl	8009718 <_Bfree>
 80097cc:	0034      	movs	r4, r6
 80097ce:	1d3b      	adds	r3, r7, #4
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	18e3      	adds	r3, r4, r3
 80097d4:	605d      	str	r5, [r3, #4]
 80097d6:	1c7b      	adds	r3, r7, #1
 80097d8:	6123      	str	r3, [r4, #16]
 80097da:	0020      	movs	r0, r4
 80097dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097de:	46c0      	nop			; (mov r8, r8)
 80097e0:	0800c245 	.word	0x0800c245
 80097e4:	0800c256 	.word	0x0800c256

080097e8 <__s2b>:
 80097e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ea:	0006      	movs	r6, r0
 80097ec:	0018      	movs	r0, r3
 80097ee:	000c      	movs	r4, r1
 80097f0:	3008      	adds	r0, #8
 80097f2:	2109      	movs	r1, #9
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	0015      	movs	r5, r2
 80097f8:	f7f6 fd2c 	bl	8000254 <__divsi3>
 80097fc:	2301      	movs	r3, #1
 80097fe:	2100      	movs	r1, #0
 8009800:	4283      	cmp	r3, r0
 8009802:	db0a      	blt.n	800981a <__s2b+0x32>
 8009804:	0030      	movs	r0, r6
 8009806:	f7ff ff43 	bl	8009690 <_Balloc>
 800980a:	1e01      	subs	r1, r0, #0
 800980c:	d108      	bne.n	8009820 <__s2b+0x38>
 800980e:	000a      	movs	r2, r1
 8009810:	4b19      	ldr	r3, [pc, #100]	; (8009878 <__s2b+0x90>)
 8009812:	481a      	ldr	r0, [pc, #104]	; (800987c <__s2b+0x94>)
 8009814:	31d3      	adds	r1, #211	; 0xd3
 8009816:	f001 fcff 	bl	800b218 <__assert_func>
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	3101      	adds	r1, #1
 800981e:	e7ef      	b.n	8009800 <__s2b+0x18>
 8009820:	9b08      	ldr	r3, [sp, #32]
 8009822:	6143      	str	r3, [r0, #20]
 8009824:	2301      	movs	r3, #1
 8009826:	6103      	str	r3, [r0, #16]
 8009828:	2d09      	cmp	r5, #9
 800982a:	dd18      	ble.n	800985e <__s2b+0x76>
 800982c:	0023      	movs	r3, r4
 800982e:	3309      	adds	r3, #9
 8009830:	001f      	movs	r7, r3
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	1964      	adds	r4, r4, r5
 8009836:	783b      	ldrb	r3, [r7, #0]
 8009838:	220a      	movs	r2, #10
 800983a:	0030      	movs	r0, r6
 800983c:	3b30      	subs	r3, #48	; 0x30
 800983e:	f7ff ff8f 	bl	8009760 <__multadd>
 8009842:	3701      	adds	r7, #1
 8009844:	0001      	movs	r1, r0
 8009846:	42a7      	cmp	r7, r4
 8009848:	d1f5      	bne.n	8009836 <__s2b+0x4e>
 800984a:	002c      	movs	r4, r5
 800984c:	9b00      	ldr	r3, [sp, #0]
 800984e:	3c08      	subs	r4, #8
 8009850:	191c      	adds	r4, r3, r4
 8009852:	002f      	movs	r7, r5
 8009854:	9b01      	ldr	r3, [sp, #4]
 8009856:	429f      	cmp	r7, r3
 8009858:	db04      	blt.n	8009864 <__s2b+0x7c>
 800985a:	0008      	movs	r0, r1
 800985c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800985e:	2509      	movs	r5, #9
 8009860:	340a      	adds	r4, #10
 8009862:	e7f6      	b.n	8009852 <__s2b+0x6a>
 8009864:	1b63      	subs	r3, r4, r5
 8009866:	5ddb      	ldrb	r3, [r3, r7]
 8009868:	220a      	movs	r2, #10
 800986a:	0030      	movs	r0, r6
 800986c:	3b30      	subs	r3, #48	; 0x30
 800986e:	f7ff ff77 	bl	8009760 <__multadd>
 8009872:	3701      	adds	r7, #1
 8009874:	0001      	movs	r1, r0
 8009876:	e7ed      	b.n	8009854 <__s2b+0x6c>
 8009878:	0800c245 	.word	0x0800c245
 800987c:	0800c256 	.word	0x0800c256

08009880 <__hi0bits>:
 8009880:	0003      	movs	r3, r0
 8009882:	0c02      	lsrs	r2, r0, #16
 8009884:	2000      	movs	r0, #0
 8009886:	4282      	cmp	r2, r0
 8009888:	d101      	bne.n	800988e <__hi0bits+0xe>
 800988a:	041b      	lsls	r3, r3, #16
 800988c:	3010      	adds	r0, #16
 800988e:	0e1a      	lsrs	r2, r3, #24
 8009890:	d101      	bne.n	8009896 <__hi0bits+0x16>
 8009892:	3008      	adds	r0, #8
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	0f1a      	lsrs	r2, r3, #28
 8009898:	d101      	bne.n	800989e <__hi0bits+0x1e>
 800989a:	3004      	adds	r0, #4
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	0f9a      	lsrs	r2, r3, #30
 80098a0:	d101      	bne.n	80098a6 <__hi0bits+0x26>
 80098a2:	3002      	adds	r0, #2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	db03      	blt.n	80098b2 <__hi0bits+0x32>
 80098aa:	3001      	adds	r0, #1
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	d400      	bmi.n	80098b2 <__hi0bits+0x32>
 80098b0:	2020      	movs	r0, #32
 80098b2:	4770      	bx	lr

080098b4 <__lo0bits>:
 80098b4:	6803      	ldr	r3, [r0, #0]
 80098b6:	0001      	movs	r1, r0
 80098b8:	2207      	movs	r2, #7
 80098ba:	0018      	movs	r0, r3
 80098bc:	4010      	ands	r0, r2
 80098be:	4213      	tst	r3, r2
 80098c0:	d00d      	beq.n	80098de <__lo0bits+0x2a>
 80098c2:	3a06      	subs	r2, #6
 80098c4:	2000      	movs	r0, #0
 80098c6:	4213      	tst	r3, r2
 80098c8:	d105      	bne.n	80098d6 <__lo0bits+0x22>
 80098ca:	3002      	adds	r0, #2
 80098cc:	4203      	tst	r3, r0
 80098ce:	d003      	beq.n	80098d8 <__lo0bits+0x24>
 80098d0:	40d3      	lsrs	r3, r2
 80098d2:	0010      	movs	r0, r2
 80098d4:	600b      	str	r3, [r1, #0]
 80098d6:	4770      	bx	lr
 80098d8:	089b      	lsrs	r3, r3, #2
 80098da:	600b      	str	r3, [r1, #0]
 80098dc:	e7fb      	b.n	80098d6 <__lo0bits+0x22>
 80098de:	b29a      	uxth	r2, r3
 80098e0:	2a00      	cmp	r2, #0
 80098e2:	d101      	bne.n	80098e8 <__lo0bits+0x34>
 80098e4:	2010      	movs	r0, #16
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	2a00      	cmp	r2, #0
 80098ec:	d101      	bne.n	80098f2 <__lo0bits+0x3e>
 80098ee:	3008      	adds	r0, #8
 80098f0:	0a1b      	lsrs	r3, r3, #8
 80098f2:	071a      	lsls	r2, r3, #28
 80098f4:	d101      	bne.n	80098fa <__lo0bits+0x46>
 80098f6:	3004      	adds	r0, #4
 80098f8:	091b      	lsrs	r3, r3, #4
 80098fa:	079a      	lsls	r2, r3, #30
 80098fc:	d101      	bne.n	8009902 <__lo0bits+0x4e>
 80098fe:	3002      	adds	r0, #2
 8009900:	089b      	lsrs	r3, r3, #2
 8009902:	07da      	lsls	r2, r3, #31
 8009904:	d4e9      	bmi.n	80098da <__lo0bits+0x26>
 8009906:	3001      	adds	r0, #1
 8009908:	085b      	lsrs	r3, r3, #1
 800990a:	d1e6      	bne.n	80098da <__lo0bits+0x26>
 800990c:	2020      	movs	r0, #32
 800990e:	e7e2      	b.n	80098d6 <__lo0bits+0x22>

08009910 <__i2b>:
 8009910:	b510      	push	{r4, lr}
 8009912:	000c      	movs	r4, r1
 8009914:	2101      	movs	r1, #1
 8009916:	f7ff febb 	bl	8009690 <_Balloc>
 800991a:	2800      	cmp	r0, #0
 800991c:	d107      	bne.n	800992e <__i2b+0x1e>
 800991e:	2146      	movs	r1, #70	; 0x46
 8009920:	4c05      	ldr	r4, [pc, #20]	; (8009938 <__i2b+0x28>)
 8009922:	0002      	movs	r2, r0
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <__i2b+0x2c>)
 8009926:	0020      	movs	r0, r4
 8009928:	31ff      	adds	r1, #255	; 0xff
 800992a:	f001 fc75 	bl	800b218 <__assert_func>
 800992e:	2301      	movs	r3, #1
 8009930:	6144      	str	r4, [r0, #20]
 8009932:	6103      	str	r3, [r0, #16]
 8009934:	bd10      	pop	{r4, pc}
 8009936:	46c0      	nop			; (mov r8, r8)
 8009938:	0800c256 	.word	0x0800c256
 800993c:	0800c245 	.word	0x0800c245

08009940 <__multiply>:
 8009940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009942:	0015      	movs	r5, r2
 8009944:	690a      	ldr	r2, [r1, #16]
 8009946:	692b      	ldr	r3, [r5, #16]
 8009948:	000c      	movs	r4, r1
 800994a:	b08b      	sub	sp, #44	; 0x2c
 800994c:	429a      	cmp	r2, r3
 800994e:	da01      	bge.n	8009954 <__multiply+0x14>
 8009950:	002c      	movs	r4, r5
 8009952:	000d      	movs	r5, r1
 8009954:	6927      	ldr	r7, [r4, #16]
 8009956:	692e      	ldr	r6, [r5, #16]
 8009958:	6861      	ldr	r1, [r4, #4]
 800995a:	19bb      	adds	r3, r7, r6
 800995c:	9303      	str	r3, [sp, #12]
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	19ba      	adds	r2, r7, r6
 8009962:	4293      	cmp	r3, r2
 8009964:	da00      	bge.n	8009968 <__multiply+0x28>
 8009966:	3101      	adds	r1, #1
 8009968:	f7ff fe92 	bl	8009690 <_Balloc>
 800996c:	9002      	str	r0, [sp, #8]
 800996e:	2800      	cmp	r0, #0
 8009970:	d106      	bne.n	8009980 <__multiply+0x40>
 8009972:	21b1      	movs	r1, #177	; 0xb1
 8009974:	4b48      	ldr	r3, [pc, #288]	; (8009a98 <__multiply+0x158>)
 8009976:	4849      	ldr	r0, [pc, #292]	; (8009a9c <__multiply+0x15c>)
 8009978:	9a02      	ldr	r2, [sp, #8]
 800997a:	0049      	lsls	r1, r1, #1
 800997c:	f001 fc4c 	bl	800b218 <__assert_func>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	3314      	adds	r3, #20
 8009986:	469c      	mov	ip, r3
 8009988:	19bb      	adds	r3, r7, r6
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4463      	add	r3, ip
 800998e:	9304      	str	r3, [sp, #16]
 8009990:	4663      	mov	r3, ip
 8009992:	9904      	ldr	r1, [sp, #16]
 8009994:	428b      	cmp	r3, r1
 8009996:	d32a      	bcc.n	80099ee <__multiply+0xae>
 8009998:	0023      	movs	r3, r4
 800999a:	00bf      	lsls	r7, r7, #2
 800999c:	3314      	adds	r3, #20
 800999e:	3514      	adds	r5, #20
 80099a0:	9308      	str	r3, [sp, #32]
 80099a2:	00b6      	lsls	r6, r6, #2
 80099a4:	19db      	adds	r3, r3, r7
 80099a6:	9305      	str	r3, [sp, #20]
 80099a8:	19ab      	adds	r3, r5, r6
 80099aa:	9309      	str	r3, [sp, #36]	; 0x24
 80099ac:	2304      	movs	r3, #4
 80099ae:	9306      	str	r3, [sp, #24]
 80099b0:	0023      	movs	r3, r4
 80099b2:	9a05      	ldr	r2, [sp, #20]
 80099b4:	3315      	adds	r3, #21
 80099b6:	9501      	str	r5, [sp, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d305      	bcc.n	80099c8 <__multiply+0x88>
 80099bc:	1b13      	subs	r3, r2, r4
 80099be:	3b15      	subs	r3, #21
 80099c0:	089b      	lsrs	r3, r3, #2
 80099c2:	3301      	adds	r3, #1
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	9306      	str	r3, [sp, #24]
 80099c8:	9b01      	ldr	r3, [sp, #4]
 80099ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d310      	bcc.n	80099f2 <__multiply+0xb2>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dd05      	ble.n	80099e2 <__multiply+0xa2>
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	3b04      	subs	r3, #4
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d056      	beq.n	8009a90 <__multiply+0x150>
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	9a03      	ldr	r2, [sp, #12]
 80099e6:	0018      	movs	r0, r3
 80099e8:	611a      	str	r2, [r3, #16]
 80099ea:	b00b      	add	sp, #44	; 0x2c
 80099ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ee:	c304      	stmia	r3!, {r2}
 80099f0:	e7cf      	b.n	8009992 <__multiply+0x52>
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	b280      	uxth	r0, r0
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d01e      	beq.n	8009a3a <__multiply+0xfa>
 80099fc:	4667      	mov	r7, ip
 80099fe:	2500      	movs	r5, #0
 8009a00:	9e08      	ldr	r6, [sp, #32]
 8009a02:	ce02      	ldmia	r6!, {r1}
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	9307      	str	r3, [sp, #28]
 8009a08:	b28b      	uxth	r3, r1
 8009a0a:	4343      	muls	r3, r0
 8009a0c:	001a      	movs	r2, r3
 8009a0e:	466b      	mov	r3, sp
 8009a10:	8b9b      	ldrh	r3, [r3, #28]
 8009a12:	18d3      	adds	r3, r2, r3
 8009a14:	195b      	adds	r3, r3, r5
 8009a16:	0c0d      	lsrs	r5, r1, #16
 8009a18:	4345      	muls	r5, r0
 8009a1a:	9a07      	ldr	r2, [sp, #28]
 8009a1c:	0c11      	lsrs	r1, r2, #16
 8009a1e:	1869      	adds	r1, r5, r1
 8009a20:	0c1a      	lsrs	r2, r3, #16
 8009a22:	188a      	adds	r2, r1, r2
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	0c15      	lsrs	r5, r2, #16
 8009a28:	0412      	lsls	r2, r2, #16
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	c704      	stmia	r7!, {r2}
 8009a30:	42b3      	cmp	r3, r6
 8009a32:	d8e6      	bhi.n	8009a02 <__multiply+0xc2>
 8009a34:	4663      	mov	r3, ip
 8009a36:	9a06      	ldr	r2, [sp, #24]
 8009a38:	509d      	str	r5, [r3, r2]
 8009a3a:	9b01      	ldr	r3, [sp, #4]
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	0c00      	lsrs	r0, r0, #16
 8009a40:	d020      	beq.n	8009a84 <__multiply+0x144>
 8009a42:	4663      	mov	r3, ip
 8009a44:	0025      	movs	r5, r4
 8009a46:	4661      	mov	r1, ip
 8009a48:	2700      	movs	r7, #0
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3514      	adds	r5, #20
 8009a4e:	682a      	ldr	r2, [r5, #0]
 8009a50:	680e      	ldr	r6, [r1, #0]
 8009a52:	b292      	uxth	r2, r2
 8009a54:	4342      	muls	r2, r0
 8009a56:	0c36      	lsrs	r6, r6, #16
 8009a58:	1992      	adds	r2, r2, r6
 8009a5a:	19d2      	adds	r2, r2, r7
 8009a5c:	0416      	lsls	r6, r2, #16
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	431e      	orrs	r6, r3
 8009a62:	600e      	str	r6, [r1, #0]
 8009a64:	cd40      	ldmia	r5!, {r6}
 8009a66:	684b      	ldr	r3, [r1, #4]
 8009a68:	0c36      	lsrs	r6, r6, #16
 8009a6a:	4346      	muls	r6, r0
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	0c12      	lsrs	r2, r2, #16
 8009a70:	18f3      	adds	r3, r6, r3
 8009a72:	189b      	adds	r3, r3, r2
 8009a74:	9a05      	ldr	r2, [sp, #20]
 8009a76:	0c1f      	lsrs	r7, r3, #16
 8009a78:	3104      	adds	r1, #4
 8009a7a:	42aa      	cmp	r2, r5
 8009a7c:	d8e7      	bhi.n	8009a4e <__multiply+0x10e>
 8009a7e:	4662      	mov	r2, ip
 8009a80:	9906      	ldr	r1, [sp, #24]
 8009a82:	5053      	str	r3, [r2, r1]
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	3304      	adds	r3, #4
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	2304      	movs	r3, #4
 8009a8c:	449c      	add	ip, r3
 8009a8e:	e79b      	b.n	80099c8 <__multiply+0x88>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	9303      	str	r3, [sp, #12]
 8009a96:	e79b      	b.n	80099d0 <__multiply+0x90>
 8009a98:	0800c245 	.word	0x0800c245
 8009a9c:	0800c256 	.word	0x0800c256

08009aa0 <__pow5mult>:
 8009aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	0015      	movs	r5, r2
 8009aa6:	0007      	movs	r7, r0
 8009aa8:	000e      	movs	r6, r1
 8009aaa:	401a      	ands	r2, r3
 8009aac:	421d      	tst	r5, r3
 8009aae:	d008      	beq.n	8009ac2 <__pow5mult+0x22>
 8009ab0:	4925      	ldr	r1, [pc, #148]	; (8009b48 <__pow5mult+0xa8>)
 8009ab2:	3a01      	subs	r2, #1
 8009ab4:	0092      	lsls	r2, r2, #2
 8009ab6:	5852      	ldr	r2, [r2, r1]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	0031      	movs	r1, r6
 8009abc:	f7ff fe50 	bl	8009760 <__multadd>
 8009ac0:	0006      	movs	r6, r0
 8009ac2:	10ad      	asrs	r5, r5, #2
 8009ac4:	d03d      	beq.n	8009b42 <__pow5mult+0xa2>
 8009ac6:	69fc      	ldr	r4, [r7, #28]
 8009ac8:	2c00      	cmp	r4, #0
 8009aca:	d10f      	bne.n	8009aec <__pow5mult+0x4c>
 8009acc:	2010      	movs	r0, #16
 8009ace:	f7ff fd21 	bl	8009514 <malloc>
 8009ad2:	1e02      	subs	r2, r0, #0
 8009ad4:	61f8      	str	r0, [r7, #28]
 8009ad6:	d105      	bne.n	8009ae4 <__pow5mult+0x44>
 8009ad8:	21b4      	movs	r1, #180	; 0xb4
 8009ada:	4b1c      	ldr	r3, [pc, #112]	; (8009b4c <__pow5mult+0xac>)
 8009adc:	481c      	ldr	r0, [pc, #112]	; (8009b50 <__pow5mult+0xb0>)
 8009ade:	31ff      	adds	r1, #255	; 0xff
 8009ae0:	f001 fb9a 	bl	800b218 <__assert_func>
 8009ae4:	6044      	str	r4, [r0, #4]
 8009ae6:	6084      	str	r4, [r0, #8]
 8009ae8:	6004      	str	r4, [r0, #0]
 8009aea:	60c4      	str	r4, [r0, #12]
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	689c      	ldr	r4, [r3, #8]
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	2c00      	cmp	r4, #0
 8009af4:	d108      	bne.n	8009b08 <__pow5mult+0x68>
 8009af6:	0038      	movs	r0, r7
 8009af8:	4916      	ldr	r1, [pc, #88]	; (8009b54 <__pow5mult+0xb4>)
 8009afa:	f7ff ff09 	bl	8009910 <__i2b>
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	0004      	movs	r4, r0
 8009b02:	6098      	str	r0, [r3, #8]
 8009b04:	2300      	movs	r3, #0
 8009b06:	6003      	str	r3, [r0, #0]
 8009b08:	2301      	movs	r3, #1
 8009b0a:	421d      	tst	r5, r3
 8009b0c:	d00a      	beq.n	8009b24 <__pow5mult+0x84>
 8009b0e:	0031      	movs	r1, r6
 8009b10:	0022      	movs	r2, r4
 8009b12:	0038      	movs	r0, r7
 8009b14:	f7ff ff14 	bl	8009940 <__multiply>
 8009b18:	0031      	movs	r1, r6
 8009b1a:	9001      	str	r0, [sp, #4]
 8009b1c:	0038      	movs	r0, r7
 8009b1e:	f7ff fdfb 	bl	8009718 <_Bfree>
 8009b22:	9e01      	ldr	r6, [sp, #4]
 8009b24:	106d      	asrs	r5, r5, #1
 8009b26:	d00c      	beq.n	8009b42 <__pow5mult+0xa2>
 8009b28:	6820      	ldr	r0, [r4, #0]
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d107      	bne.n	8009b3e <__pow5mult+0x9e>
 8009b2e:	0022      	movs	r2, r4
 8009b30:	0021      	movs	r1, r4
 8009b32:	0038      	movs	r0, r7
 8009b34:	f7ff ff04 	bl	8009940 <__multiply>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	6020      	str	r0, [r4, #0]
 8009b3c:	6003      	str	r3, [r0, #0]
 8009b3e:	0004      	movs	r4, r0
 8009b40:	e7e2      	b.n	8009b08 <__pow5mult+0x68>
 8009b42:	0030      	movs	r0, r6
 8009b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	0800c3a0 	.word	0x0800c3a0
 8009b4c:	0800c1d6 	.word	0x0800c1d6
 8009b50:	0800c256 	.word	0x0800c256
 8009b54:	00000271 	.word	0x00000271

08009b58 <__lshift>:
 8009b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b5a:	000c      	movs	r4, r1
 8009b5c:	0017      	movs	r7, r2
 8009b5e:	6923      	ldr	r3, [r4, #16]
 8009b60:	1155      	asrs	r5, r2, #5
 8009b62:	b087      	sub	sp, #28
 8009b64:	18eb      	adds	r3, r5, r3
 8009b66:	9302      	str	r3, [sp, #8]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	6849      	ldr	r1, [r1, #4]
 8009b6e:	68a3      	ldr	r3, [r4, #8]
 8009b70:	9004      	str	r0, [sp, #16]
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	4293      	cmp	r3, r2
 8009b76:	db10      	blt.n	8009b9a <__lshift+0x42>
 8009b78:	9804      	ldr	r0, [sp, #16]
 8009b7a:	f7ff fd89 	bl	8009690 <_Balloc>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	0002      	movs	r2, r0
 8009b82:	0006      	movs	r6, r0
 8009b84:	0019      	movs	r1, r3
 8009b86:	3214      	adds	r2, #20
 8009b88:	4298      	cmp	r0, r3
 8009b8a:	d10c      	bne.n	8009ba6 <__lshift+0x4e>
 8009b8c:	31df      	adds	r1, #223	; 0xdf
 8009b8e:	0032      	movs	r2, r6
 8009b90:	4b26      	ldr	r3, [pc, #152]	; (8009c2c <__lshift+0xd4>)
 8009b92:	4827      	ldr	r0, [pc, #156]	; (8009c30 <__lshift+0xd8>)
 8009b94:	31ff      	adds	r1, #255	; 0xff
 8009b96:	f001 fb3f 	bl	800b218 <__assert_func>
 8009b9a:	3101      	adds	r1, #1
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	e7e8      	b.n	8009b72 <__lshift+0x1a>
 8009ba0:	0098      	lsls	r0, r3, #2
 8009ba2:	5011      	str	r1, [r2, r0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	42ab      	cmp	r3, r5
 8009ba8:	dbfa      	blt.n	8009ba0 <__lshift+0x48>
 8009baa:	43eb      	mvns	r3, r5
 8009bac:	17db      	asrs	r3, r3, #31
 8009bae:	401d      	ands	r5, r3
 8009bb0:	211f      	movs	r1, #31
 8009bb2:	0023      	movs	r3, r4
 8009bb4:	0038      	movs	r0, r7
 8009bb6:	00ad      	lsls	r5, r5, #2
 8009bb8:	1955      	adds	r5, r2, r5
 8009bba:	6922      	ldr	r2, [r4, #16]
 8009bbc:	3314      	adds	r3, #20
 8009bbe:	0092      	lsls	r2, r2, #2
 8009bc0:	4008      	ands	r0, r1
 8009bc2:	4684      	mov	ip, r0
 8009bc4:	189a      	adds	r2, r3, r2
 8009bc6:	420f      	tst	r7, r1
 8009bc8:	d02a      	beq.n	8009c20 <__lshift+0xc8>
 8009bca:	3101      	adds	r1, #1
 8009bcc:	1a09      	subs	r1, r1, r0
 8009bce:	9105      	str	r1, [sp, #20]
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	9503      	str	r5, [sp, #12]
 8009bd4:	4667      	mov	r7, ip
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	40b8      	lsls	r0, r7
 8009bda:	4308      	orrs	r0, r1
 8009bdc:	9903      	ldr	r1, [sp, #12]
 8009bde:	c101      	stmia	r1!, {r0}
 8009be0:	9103      	str	r1, [sp, #12]
 8009be2:	9805      	ldr	r0, [sp, #20]
 8009be4:	cb02      	ldmia	r3!, {r1}
 8009be6:	40c1      	lsrs	r1, r0
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d8f3      	bhi.n	8009bd4 <__lshift+0x7c>
 8009bec:	0020      	movs	r0, r4
 8009bee:	3015      	adds	r0, #21
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	4282      	cmp	r2, r0
 8009bf4:	d304      	bcc.n	8009c00 <__lshift+0xa8>
 8009bf6:	1b13      	subs	r3, r2, r4
 8009bf8:	3b15      	subs	r3, #21
 8009bfa:	089b      	lsrs	r3, r3, #2
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	50e9      	str	r1, [r5, r3]
 8009c02:	2900      	cmp	r1, #0
 8009c04:	d002      	beq.n	8009c0c <__lshift+0xb4>
 8009c06:	9b02      	ldr	r3, [sp, #8]
 8009c08:	3302      	adds	r3, #2
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	9b01      	ldr	r3, [sp, #4]
 8009c0e:	9804      	ldr	r0, [sp, #16]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	0021      	movs	r1, r4
 8009c14:	6133      	str	r3, [r6, #16]
 8009c16:	f7ff fd7f 	bl	8009718 <_Bfree>
 8009c1a:	0030      	movs	r0, r6
 8009c1c:	b007      	add	sp, #28
 8009c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c20:	cb02      	ldmia	r3!, {r1}
 8009c22:	c502      	stmia	r5!, {r1}
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d8fb      	bhi.n	8009c20 <__lshift+0xc8>
 8009c28:	e7f0      	b.n	8009c0c <__lshift+0xb4>
 8009c2a:	46c0      	nop			; (mov r8, r8)
 8009c2c:	0800c245 	.word	0x0800c245
 8009c30:	0800c256 	.word	0x0800c256

08009c34 <__mcmp>:
 8009c34:	b530      	push	{r4, r5, lr}
 8009c36:	690b      	ldr	r3, [r1, #16]
 8009c38:	6904      	ldr	r4, [r0, #16]
 8009c3a:	0002      	movs	r2, r0
 8009c3c:	1ae0      	subs	r0, r4, r3
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d10e      	bne.n	8009c60 <__mcmp+0x2c>
 8009c42:	3214      	adds	r2, #20
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	3114      	adds	r1, #20
 8009c48:	0014      	movs	r4, r2
 8009c4a:	18c9      	adds	r1, r1, r3
 8009c4c:	18d2      	adds	r2, r2, r3
 8009c4e:	3a04      	subs	r2, #4
 8009c50:	3904      	subs	r1, #4
 8009c52:	6815      	ldr	r5, [r2, #0]
 8009c54:	680b      	ldr	r3, [r1, #0]
 8009c56:	429d      	cmp	r5, r3
 8009c58:	d003      	beq.n	8009c62 <__mcmp+0x2e>
 8009c5a:	2001      	movs	r0, #1
 8009c5c:	429d      	cmp	r5, r3
 8009c5e:	d303      	bcc.n	8009c68 <__mcmp+0x34>
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	4294      	cmp	r4, r2
 8009c64:	d3f3      	bcc.n	8009c4e <__mcmp+0x1a>
 8009c66:	e7fb      	b.n	8009c60 <__mcmp+0x2c>
 8009c68:	4240      	negs	r0, r0
 8009c6a:	e7f9      	b.n	8009c60 <__mcmp+0x2c>

08009c6c <__mdiff>:
 8009c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c6e:	000e      	movs	r6, r1
 8009c70:	0007      	movs	r7, r0
 8009c72:	0011      	movs	r1, r2
 8009c74:	0030      	movs	r0, r6
 8009c76:	b087      	sub	sp, #28
 8009c78:	0014      	movs	r4, r2
 8009c7a:	f7ff ffdb 	bl	8009c34 <__mcmp>
 8009c7e:	1e05      	subs	r5, r0, #0
 8009c80:	d110      	bne.n	8009ca4 <__mdiff+0x38>
 8009c82:	0001      	movs	r1, r0
 8009c84:	0038      	movs	r0, r7
 8009c86:	f7ff fd03 	bl	8009690 <_Balloc>
 8009c8a:	1e02      	subs	r2, r0, #0
 8009c8c:	d104      	bne.n	8009c98 <__mdiff+0x2c>
 8009c8e:	4b3f      	ldr	r3, [pc, #252]	; (8009d8c <__mdiff+0x120>)
 8009c90:	483f      	ldr	r0, [pc, #252]	; (8009d90 <__mdiff+0x124>)
 8009c92:	4940      	ldr	r1, [pc, #256]	; (8009d94 <__mdiff+0x128>)
 8009c94:	f001 fac0 	bl	800b218 <__assert_func>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	6145      	str	r5, [r0, #20]
 8009c9c:	6103      	str	r3, [r0, #16]
 8009c9e:	0010      	movs	r0, r2
 8009ca0:	b007      	add	sp, #28
 8009ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	db04      	blt.n	8009cb6 <__mdiff+0x4a>
 8009cac:	0023      	movs	r3, r4
 8009cae:	0034      	movs	r4, r6
 8009cb0:	001e      	movs	r6, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	0038      	movs	r0, r7
 8009cb8:	6861      	ldr	r1, [r4, #4]
 8009cba:	f7ff fce9 	bl	8009690 <_Balloc>
 8009cbe:	1e02      	subs	r2, r0, #0
 8009cc0:	d103      	bne.n	8009cca <__mdiff+0x5e>
 8009cc2:	4b32      	ldr	r3, [pc, #200]	; (8009d8c <__mdiff+0x120>)
 8009cc4:	4832      	ldr	r0, [pc, #200]	; (8009d90 <__mdiff+0x124>)
 8009cc6:	4934      	ldr	r1, [pc, #208]	; (8009d98 <__mdiff+0x12c>)
 8009cc8:	e7e4      	b.n	8009c94 <__mdiff+0x28>
 8009cca:	9b01      	ldr	r3, [sp, #4]
 8009ccc:	2700      	movs	r7, #0
 8009cce:	60c3      	str	r3, [r0, #12]
 8009cd0:	6920      	ldr	r0, [r4, #16]
 8009cd2:	3414      	adds	r4, #20
 8009cd4:	0083      	lsls	r3, r0, #2
 8009cd6:	18e3      	adds	r3, r4, r3
 8009cd8:	0021      	movs	r1, r4
 8009cda:	9401      	str	r4, [sp, #4]
 8009cdc:	0034      	movs	r4, r6
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	6933      	ldr	r3, [r6, #16]
 8009ce2:	3414      	adds	r4, #20
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	18e3      	adds	r3, r4, r3
 8009ce8:	9303      	str	r3, [sp, #12]
 8009cea:	0013      	movs	r3, r2
 8009cec:	3314      	adds	r3, #20
 8009cee:	469c      	mov	ip, r3
 8009cf0:	9305      	str	r3, [sp, #20]
 8009cf2:	9104      	str	r1, [sp, #16]
 8009cf4:	9b04      	ldr	r3, [sp, #16]
 8009cf6:	cc02      	ldmia	r4!, {r1}
 8009cf8:	cb20      	ldmia	r3!, {r5}
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	b2ab      	uxth	r3, r5
 8009cfe:	19df      	adds	r7, r3, r7
 8009d00:	b28b      	uxth	r3, r1
 8009d02:	1afb      	subs	r3, r7, r3
 8009d04:	0c09      	lsrs	r1, r1, #16
 8009d06:	0c2d      	lsrs	r5, r5, #16
 8009d08:	1a6d      	subs	r5, r5, r1
 8009d0a:	1419      	asrs	r1, r3, #16
 8009d0c:	1869      	adds	r1, r5, r1
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	140f      	asrs	r7, r1, #16
 8009d12:	0409      	lsls	r1, r1, #16
 8009d14:	4319      	orrs	r1, r3
 8009d16:	4663      	mov	r3, ip
 8009d18:	c302      	stmia	r3!, {r1}
 8009d1a:	469c      	mov	ip, r3
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	d8e8      	bhi.n	8009cf4 <__mdiff+0x88>
 8009d22:	0031      	movs	r1, r6
 8009d24:	9c03      	ldr	r4, [sp, #12]
 8009d26:	3115      	adds	r1, #21
 8009d28:	2304      	movs	r3, #4
 8009d2a:	428c      	cmp	r4, r1
 8009d2c:	d304      	bcc.n	8009d38 <__mdiff+0xcc>
 8009d2e:	1ba3      	subs	r3, r4, r6
 8009d30:	3b15      	subs	r3, #21
 8009d32:	089b      	lsrs	r3, r3, #2
 8009d34:	3301      	adds	r3, #1
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	9901      	ldr	r1, [sp, #4]
 8009d3a:	18cd      	adds	r5, r1, r3
 8009d3c:	9905      	ldr	r1, [sp, #20]
 8009d3e:	002e      	movs	r6, r5
 8009d40:	18cb      	adds	r3, r1, r3
 8009d42:	469c      	mov	ip, r3
 8009d44:	9902      	ldr	r1, [sp, #8]
 8009d46:	428e      	cmp	r6, r1
 8009d48:	d310      	bcc.n	8009d6c <__mdiff+0x100>
 8009d4a:	9e02      	ldr	r6, [sp, #8]
 8009d4c:	1ee9      	subs	r1, r5, #3
 8009d4e:	2400      	movs	r4, #0
 8009d50:	428e      	cmp	r6, r1
 8009d52:	d304      	bcc.n	8009d5e <__mdiff+0xf2>
 8009d54:	0031      	movs	r1, r6
 8009d56:	3103      	adds	r1, #3
 8009d58:	1b49      	subs	r1, r1, r5
 8009d5a:	0889      	lsrs	r1, r1, #2
 8009d5c:	008c      	lsls	r4, r1, #2
 8009d5e:	191b      	adds	r3, r3, r4
 8009d60:	3b04      	subs	r3, #4
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	2900      	cmp	r1, #0
 8009d66:	d00f      	beq.n	8009d88 <__mdiff+0x11c>
 8009d68:	6110      	str	r0, [r2, #16]
 8009d6a:	e798      	b.n	8009c9e <__mdiff+0x32>
 8009d6c:	ce02      	ldmia	r6!, {r1}
 8009d6e:	b28c      	uxth	r4, r1
 8009d70:	19e4      	adds	r4, r4, r7
 8009d72:	0c0f      	lsrs	r7, r1, #16
 8009d74:	1421      	asrs	r1, r4, #16
 8009d76:	1879      	adds	r1, r7, r1
 8009d78:	b2a4      	uxth	r4, r4
 8009d7a:	140f      	asrs	r7, r1, #16
 8009d7c:	0409      	lsls	r1, r1, #16
 8009d7e:	4321      	orrs	r1, r4
 8009d80:	4664      	mov	r4, ip
 8009d82:	c402      	stmia	r4!, {r1}
 8009d84:	46a4      	mov	ip, r4
 8009d86:	e7dd      	b.n	8009d44 <__mdiff+0xd8>
 8009d88:	3801      	subs	r0, #1
 8009d8a:	e7e9      	b.n	8009d60 <__mdiff+0xf4>
 8009d8c:	0800c245 	.word	0x0800c245
 8009d90:	0800c256 	.word	0x0800c256
 8009d94:	00000237 	.word	0x00000237
 8009d98:	00000245 	.word	0x00000245

08009d9c <__ulp>:
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <__ulp+0x30>)
 8009da0:	4019      	ands	r1, r3
 8009da2:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <__ulp+0x34>)
 8009da4:	18c9      	adds	r1, r1, r3
 8009da6:	4281      	cmp	r1, r0
 8009da8:	dc06      	bgt.n	8009db8 <__ulp+0x1c>
 8009daa:	4249      	negs	r1, r1
 8009dac:	150b      	asrs	r3, r1, #20
 8009dae:	2b13      	cmp	r3, #19
 8009db0:	dc03      	bgt.n	8009dba <__ulp+0x1e>
 8009db2:	2180      	movs	r1, #128	; 0x80
 8009db4:	0309      	lsls	r1, r1, #12
 8009db6:	4119      	asrs	r1, r3
 8009db8:	4770      	bx	lr
 8009dba:	3b14      	subs	r3, #20
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	2b1e      	cmp	r3, #30
 8009dc0:	dc02      	bgt.n	8009dc8 <__ulp+0x2c>
 8009dc2:	2080      	movs	r0, #128	; 0x80
 8009dc4:	0600      	lsls	r0, r0, #24
 8009dc6:	40d8      	lsrs	r0, r3
 8009dc8:	2100      	movs	r1, #0
 8009dca:	e7f5      	b.n	8009db8 <__ulp+0x1c>
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	fcc00000 	.word	0xfcc00000

08009dd4 <__b2d>:
 8009dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dd6:	0006      	movs	r6, r0
 8009dd8:	6903      	ldr	r3, [r0, #16]
 8009dda:	3614      	adds	r6, #20
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	18f3      	adds	r3, r6, r3
 8009de0:	1f1d      	subs	r5, r3, #4
 8009de2:	682c      	ldr	r4, [r5, #0]
 8009de4:	000f      	movs	r7, r1
 8009de6:	0020      	movs	r0, r4
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	f7ff fd49 	bl	8009880 <__hi0bits>
 8009dee:	2220      	movs	r2, #32
 8009df0:	1a12      	subs	r2, r2, r0
 8009df2:	603a      	str	r2, [r7, #0]
 8009df4:	0003      	movs	r3, r0
 8009df6:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <__b2d+0x94>)
 8009df8:	280a      	cmp	r0, #10
 8009dfa:	dc15      	bgt.n	8009e28 <__b2d+0x54>
 8009dfc:	210b      	movs	r1, #11
 8009dfe:	0027      	movs	r7, r4
 8009e00:	1a09      	subs	r1, r1, r0
 8009e02:	40cf      	lsrs	r7, r1
 8009e04:	433a      	orrs	r2, r7
 8009e06:	468c      	mov	ip, r1
 8009e08:	0011      	movs	r1, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	42ae      	cmp	r6, r5
 8009e0e:	d202      	bcs.n	8009e16 <__b2d+0x42>
 8009e10:	9a01      	ldr	r2, [sp, #4]
 8009e12:	3a08      	subs	r2, #8
 8009e14:	6812      	ldr	r2, [r2, #0]
 8009e16:	3315      	adds	r3, #21
 8009e18:	409c      	lsls	r4, r3
 8009e1a:	4663      	mov	r3, ip
 8009e1c:	0027      	movs	r7, r4
 8009e1e:	40da      	lsrs	r2, r3
 8009e20:	4317      	orrs	r7, r2
 8009e22:	0038      	movs	r0, r7
 8009e24:	b003      	add	sp, #12
 8009e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e28:	2700      	movs	r7, #0
 8009e2a:	42ae      	cmp	r6, r5
 8009e2c:	d202      	bcs.n	8009e34 <__b2d+0x60>
 8009e2e:	9d01      	ldr	r5, [sp, #4]
 8009e30:	3d08      	subs	r5, #8
 8009e32:	682f      	ldr	r7, [r5, #0]
 8009e34:	210b      	movs	r1, #11
 8009e36:	4249      	negs	r1, r1
 8009e38:	468c      	mov	ip, r1
 8009e3a:	449c      	add	ip, r3
 8009e3c:	2b0b      	cmp	r3, #11
 8009e3e:	d010      	beq.n	8009e62 <__b2d+0x8e>
 8009e40:	4661      	mov	r1, ip
 8009e42:	2320      	movs	r3, #32
 8009e44:	408c      	lsls	r4, r1
 8009e46:	1a5b      	subs	r3, r3, r1
 8009e48:	0039      	movs	r1, r7
 8009e4a:	40d9      	lsrs	r1, r3
 8009e4c:	430c      	orrs	r4, r1
 8009e4e:	4322      	orrs	r2, r4
 8009e50:	0011      	movs	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	42b5      	cmp	r5, r6
 8009e56:	d901      	bls.n	8009e5c <__b2d+0x88>
 8009e58:	3d04      	subs	r5, #4
 8009e5a:	682a      	ldr	r2, [r5, #0]
 8009e5c:	4664      	mov	r4, ip
 8009e5e:	40a7      	lsls	r7, r4
 8009e60:	e7dd      	b.n	8009e1e <__b2d+0x4a>
 8009e62:	4322      	orrs	r2, r4
 8009e64:	0011      	movs	r1, r2
 8009e66:	e7dc      	b.n	8009e22 <__b2d+0x4e>
 8009e68:	3ff00000 	.word	0x3ff00000

08009e6c <__d2b>:
 8009e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e6e:	2101      	movs	r1, #1
 8009e70:	0014      	movs	r4, r2
 8009e72:	001d      	movs	r5, r3
 8009e74:	9f08      	ldr	r7, [sp, #32]
 8009e76:	f7ff fc0b 	bl	8009690 <_Balloc>
 8009e7a:	1e06      	subs	r6, r0, #0
 8009e7c:	d105      	bne.n	8009e8a <__d2b+0x1e>
 8009e7e:	0032      	movs	r2, r6
 8009e80:	4b24      	ldr	r3, [pc, #144]	; (8009f14 <__d2b+0xa8>)
 8009e82:	4825      	ldr	r0, [pc, #148]	; (8009f18 <__d2b+0xac>)
 8009e84:	4925      	ldr	r1, [pc, #148]	; (8009f1c <__d2b+0xb0>)
 8009e86:	f001 f9c7 	bl	800b218 <__assert_func>
 8009e8a:	032b      	lsls	r3, r5, #12
 8009e8c:	006d      	lsls	r5, r5, #1
 8009e8e:	0b1b      	lsrs	r3, r3, #12
 8009e90:	0d6d      	lsrs	r5, r5, #21
 8009e92:	d125      	bne.n	8009ee0 <__d2b+0x74>
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	2c00      	cmp	r4, #0
 8009e98:	d028      	beq.n	8009eec <__d2b+0x80>
 8009e9a:	4668      	mov	r0, sp
 8009e9c:	9400      	str	r4, [sp, #0]
 8009e9e:	f7ff fd09 	bl	80098b4 <__lo0bits>
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	9900      	ldr	r1, [sp, #0]
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d01e      	beq.n	8009ee8 <__d2b+0x7c>
 8009eaa:	2220      	movs	r2, #32
 8009eac:	001c      	movs	r4, r3
 8009eae:	1a12      	subs	r2, r2, r0
 8009eb0:	4094      	lsls	r4, r2
 8009eb2:	0022      	movs	r2, r4
 8009eb4:	40c3      	lsrs	r3, r0
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	6172      	str	r2, [r6, #20]
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	9c01      	ldr	r4, [sp, #4]
 8009ebe:	61b4      	str	r4, [r6, #24]
 8009ec0:	1e63      	subs	r3, r4, #1
 8009ec2:	419c      	sbcs	r4, r3
 8009ec4:	3401      	adds	r4, #1
 8009ec6:	6134      	str	r4, [r6, #16]
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	d017      	beq.n	8009efc <__d2b+0x90>
 8009ecc:	2435      	movs	r4, #53	; 0x35
 8009ece:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <__d2b+0xb4>)
 8009ed0:	18ed      	adds	r5, r5, r3
 8009ed2:	182d      	adds	r5, r5, r0
 8009ed4:	603d      	str	r5, [r7, #0]
 8009ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed8:	1a24      	subs	r4, r4, r0
 8009eda:	601c      	str	r4, [r3, #0]
 8009edc:	0030      	movs	r0, r6
 8009ede:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ee0:	2280      	movs	r2, #128	; 0x80
 8009ee2:	0352      	lsls	r2, r2, #13
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	e7d5      	b.n	8009e94 <__d2b+0x28>
 8009ee8:	6171      	str	r1, [r6, #20]
 8009eea:	e7e7      	b.n	8009ebc <__d2b+0x50>
 8009eec:	a801      	add	r0, sp, #4
 8009eee:	f7ff fce1 	bl	80098b4 <__lo0bits>
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	2401      	movs	r4, #1
 8009ef6:	6173      	str	r3, [r6, #20]
 8009ef8:	3020      	adds	r0, #32
 8009efa:	e7e4      	b.n	8009ec6 <__d2b+0x5a>
 8009efc:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <__d2b+0xb8>)
 8009efe:	18c0      	adds	r0, r0, r3
 8009f00:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <__d2b+0xbc>)
 8009f02:	6038      	str	r0, [r7, #0]
 8009f04:	18e3      	adds	r3, r4, r3
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	18f3      	adds	r3, r6, r3
 8009f0a:	6958      	ldr	r0, [r3, #20]
 8009f0c:	f7ff fcb8 	bl	8009880 <__hi0bits>
 8009f10:	0164      	lsls	r4, r4, #5
 8009f12:	e7e0      	b.n	8009ed6 <__d2b+0x6a>
 8009f14:	0800c245 	.word	0x0800c245
 8009f18:	0800c256 	.word	0x0800c256
 8009f1c:	0000030f 	.word	0x0000030f
 8009f20:	fffffbcd 	.word	0xfffffbcd
 8009f24:	fffffbce 	.word	0xfffffbce
 8009f28:	3fffffff 	.word	0x3fffffff

08009f2c <__ratio>:
 8009f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	000f      	movs	r7, r1
 8009f32:	a904      	add	r1, sp, #16
 8009f34:	0006      	movs	r6, r0
 8009f36:	f7ff ff4d 	bl	8009dd4 <__b2d>
 8009f3a:	9000      	str	r0, [sp, #0]
 8009f3c:	9101      	str	r1, [sp, #4]
 8009f3e:	9c00      	ldr	r4, [sp, #0]
 8009f40:	9d01      	ldr	r5, [sp, #4]
 8009f42:	0038      	movs	r0, r7
 8009f44:	a905      	add	r1, sp, #20
 8009f46:	f7ff ff45 	bl	8009dd4 <__b2d>
 8009f4a:	9002      	str	r0, [sp, #8]
 8009f4c:	9103      	str	r1, [sp, #12]
 8009f4e:	9a02      	ldr	r2, [sp, #8]
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	6930      	ldr	r0, [r6, #16]
 8009f54:	6939      	ldr	r1, [r7, #16]
 8009f56:	9e04      	ldr	r6, [sp, #16]
 8009f58:	1a40      	subs	r0, r0, r1
 8009f5a:	9905      	ldr	r1, [sp, #20]
 8009f5c:	0140      	lsls	r0, r0, #5
 8009f5e:	1a71      	subs	r1, r6, r1
 8009f60:	1841      	adds	r1, r0, r1
 8009f62:	0508      	lsls	r0, r1, #20
 8009f64:	2900      	cmp	r1, #0
 8009f66:	dd07      	ble.n	8009f78 <__ratio+0x4c>
 8009f68:	9901      	ldr	r1, [sp, #4]
 8009f6a:	1845      	adds	r5, r0, r1
 8009f6c:	0020      	movs	r0, r4
 8009f6e:	0029      	movs	r1, r5
 8009f70:	f7f6 fe6a 	bl	8000c48 <__aeabi_ddiv>
 8009f74:	b007      	add	sp, #28
 8009f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f78:	9903      	ldr	r1, [sp, #12]
 8009f7a:	1a0b      	subs	r3, r1, r0
 8009f7c:	e7f6      	b.n	8009f6c <__ratio+0x40>

08009f7e <__copybits>:
 8009f7e:	b570      	push	{r4, r5, r6, lr}
 8009f80:	0014      	movs	r4, r2
 8009f82:	0005      	movs	r5, r0
 8009f84:	3901      	subs	r1, #1
 8009f86:	6913      	ldr	r3, [r2, #16]
 8009f88:	1149      	asrs	r1, r1, #5
 8009f8a:	3101      	adds	r1, #1
 8009f8c:	0089      	lsls	r1, r1, #2
 8009f8e:	3414      	adds	r4, #20
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	1841      	adds	r1, r0, r1
 8009f94:	18e3      	adds	r3, r4, r3
 8009f96:	42a3      	cmp	r3, r4
 8009f98:	d80d      	bhi.n	8009fb6 <__copybits+0x38>
 8009f9a:	0014      	movs	r4, r2
 8009f9c:	3411      	adds	r4, #17
 8009f9e:	2500      	movs	r5, #0
 8009fa0:	429c      	cmp	r4, r3
 8009fa2:	d803      	bhi.n	8009fac <__copybits+0x2e>
 8009fa4:	1a9b      	subs	r3, r3, r2
 8009fa6:	3b11      	subs	r3, #17
 8009fa8:	089b      	lsrs	r3, r3, #2
 8009faa:	009d      	lsls	r5, r3, #2
 8009fac:	2300      	movs	r3, #0
 8009fae:	1940      	adds	r0, r0, r5
 8009fb0:	4281      	cmp	r1, r0
 8009fb2:	d803      	bhi.n	8009fbc <__copybits+0x3e>
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
 8009fb6:	cc40      	ldmia	r4!, {r6}
 8009fb8:	c540      	stmia	r5!, {r6}
 8009fba:	e7ec      	b.n	8009f96 <__copybits+0x18>
 8009fbc:	c008      	stmia	r0!, {r3}
 8009fbe:	e7f7      	b.n	8009fb0 <__copybits+0x32>

08009fc0 <__any_on>:
 8009fc0:	0002      	movs	r2, r0
 8009fc2:	6900      	ldr	r0, [r0, #16]
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	3214      	adds	r2, #20
 8009fc8:	114b      	asrs	r3, r1, #5
 8009fca:	4298      	cmp	r0, r3
 8009fcc:	db13      	blt.n	8009ff6 <__any_on+0x36>
 8009fce:	dd0c      	ble.n	8009fea <__any_on+0x2a>
 8009fd0:	241f      	movs	r4, #31
 8009fd2:	0008      	movs	r0, r1
 8009fd4:	4020      	ands	r0, r4
 8009fd6:	4221      	tst	r1, r4
 8009fd8:	d007      	beq.n	8009fea <__any_on+0x2a>
 8009fda:	0099      	lsls	r1, r3, #2
 8009fdc:	588c      	ldr	r4, [r1, r2]
 8009fde:	0021      	movs	r1, r4
 8009fe0:	40c1      	lsrs	r1, r0
 8009fe2:	4081      	lsls	r1, r0
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	428c      	cmp	r4, r1
 8009fe8:	d104      	bne.n	8009ff4 <__any_on+0x34>
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	18d3      	adds	r3, r2, r3
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d803      	bhi.n	8009ffa <__any_on+0x3a>
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	0003      	movs	r3, r0
 8009ff8:	e7f7      	b.n	8009fea <__any_on+0x2a>
 8009ffa:	3b04      	subs	r3, #4
 8009ffc:	6819      	ldr	r1, [r3, #0]
 8009ffe:	2900      	cmp	r1, #0
 800a000:	d0f5      	beq.n	8009fee <__any_on+0x2e>
 800a002:	2001      	movs	r0, #1
 800a004:	e7f6      	b.n	8009ff4 <__any_on+0x34>
	...

0800a008 <sulp>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	0016      	movs	r6, r2
 800a00c:	000d      	movs	r5, r1
 800a00e:	f7ff fec5 	bl	8009d9c <__ulp>
 800a012:	2e00      	cmp	r6, #0
 800a014:	d00d      	beq.n	800a032 <sulp+0x2a>
 800a016:	236b      	movs	r3, #107	; 0x6b
 800a018:	006a      	lsls	r2, r5, #1
 800a01a:	0d52      	lsrs	r2, r2, #21
 800a01c:	1a9b      	subs	r3, r3, r2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd07      	ble.n	800a032 <sulp+0x2a>
 800a022:	2400      	movs	r4, #0
 800a024:	4a03      	ldr	r2, [pc, #12]	; (800a034 <sulp+0x2c>)
 800a026:	051b      	lsls	r3, r3, #20
 800a028:	189d      	adds	r5, r3, r2
 800a02a:	002b      	movs	r3, r5
 800a02c:	0022      	movs	r2, r4
 800a02e:	f7f7 fa05 	bl	800143c <__aeabi_dmul>
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	3ff00000 	.word	0x3ff00000

0800a038 <_strtod_l>:
 800a038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a03a:	b0a1      	sub	sp, #132	; 0x84
 800a03c:	9219      	str	r2, [sp, #100]	; 0x64
 800a03e:	2200      	movs	r2, #0
 800a040:	2600      	movs	r6, #0
 800a042:	2700      	movs	r7, #0
 800a044:	9004      	str	r0, [sp, #16]
 800a046:	9107      	str	r1, [sp, #28]
 800a048:	921c      	str	r2, [sp, #112]	; 0x70
 800a04a:	911b      	str	r1, [sp, #108]	; 0x6c
 800a04c:	780a      	ldrb	r2, [r1, #0]
 800a04e:	2a2b      	cmp	r2, #43	; 0x2b
 800a050:	d055      	beq.n	800a0fe <_strtod_l+0xc6>
 800a052:	d841      	bhi.n	800a0d8 <_strtod_l+0xa0>
 800a054:	2a0d      	cmp	r2, #13
 800a056:	d83b      	bhi.n	800a0d0 <_strtod_l+0x98>
 800a058:	2a08      	cmp	r2, #8
 800a05a:	d83b      	bhi.n	800a0d4 <_strtod_l+0x9c>
 800a05c:	2a00      	cmp	r2, #0
 800a05e:	d044      	beq.n	800a0ea <_strtod_l+0xb2>
 800a060:	2200      	movs	r2, #0
 800a062:	920f      	str	r2, [sp, #60]	; 0x3c
 800a064:	2100      	movs	r1, #0
 800a066:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a068:	9109      	str	r1, [sp, #36]	; 0x24
 800a06a:	782a      	ldrb	r2, [r5, #0]
 800a06c:	2a30      	cmp	r2, #48	; 0x30
 800a06e:	d000      	beq.n	800a072 <_strtod_l+0x3a>
 800a070:	e085      	b.n	800a17e <_strtod_l+0x146>
 800a072:	786a      	ldrb	r2, [r5, #1]
 800a074:	3120      	adds	r1, #32
 800a076:	438a      	bics	r2, r1
 800a078:	2a58      	cmp	r2, #88	; 0x58
 800a07a:	d000      	beq.n	800a07e <_strtod_l+0x46>
 800a07c:	e075      	b.n	800a16a <_strtod_l+0x132>
 800a07e:	9302      	str	r3, [sp, #8]
 800a080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a082:	4a97      	ldr	r2, [pc, #604]	; (800a2e0 <_strtod_l+0x2a8>)
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	ab1c      	add	r3, sp, #112	; 0x70
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	9804      	ldr	r0, [sp, #16]
 800a08c:	ab1d      	add	r3, sp, #116	; 0x74
 800a08e:	a91b      	add	r1, sp, #108	; 0x6c
 800a090:	f001 f978 	bl	800b384 <__gethex>
 800a094:	230f      	movs	r3, #15
 800a096:	0002      	movs	r2, r0
 800a098:	401a      	ands	r2, r3
 800a09a:	0004      	movs	r4, r0
 800a09c:	9205      	str	r2, [sp, #20]
 800a09e:	4218      	tst	r0, r3
 800a0a0:	d005      	beq.n	800a0ae <_strtod_l+0x76>
 800a0a2:	2a06      	cmp	r2, #6
 800a0a4:	d12d      	bne.n	800a102 <_strtod_l+0xca>
 800a0a6:	1c6b      	adds	r3, r5, #1
 800a0a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <_strtod_l+0x82>
 800a0b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0b8:	6013      	str	r3, [r2, #0]
 800a0ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01b      	beq.n	800a0f8 <_strtod_l+0xc0>
 800a0c0:	2380      	movs	r3, #128	; 0x80
 800a0c2:	0032      	movs	r2, r6
 800a0c4:	061b      	lsls	r3, r3, #24
 800a0c6:	18fb      	adds	r3, r7, r3
 800a0c8:	0010      	movs	r0, r2
 800a0ca:	0019      	movs	r1, r3
 800a0cc:	b021      	add	sp, #132	; 0x84
 800a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d0:	2a20      	cmp	r2, #32
 800a0d2:	d1c5      	bne.n	800a060 <_strtod_l+0x28>
 800a0d4:	3101      	adds	r1, #1
 800a0d6:	e7b8      	b.n	800a04a <_strtod_l+0x12>
 800a0d8:	2a2d      	cmp	r2, #45	; 0x2d
 800a0da:	d1c1      	bne.n	800a060 <_strtod_l+0x28>
 800a0dc:	3a2c      	subs	r2, #44	; 0x2c
 800a0de:	920f      	str	r2, [sp, #60]	; 0x3c
 800a0e0:	1c4a      	adds	r2, r1, #1
 800a0e2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a0e4:	784a      	ldrb	r2, [r1, #1]
 800a0e6:	2a00      	cmp	r2, #0
 800a0e8:	d1bc      	bne.n	800a064 <_strtod_l+0x2c>
 800a0ea:	9b07      	ldr	r3, [sp, #28]
 800a0ec:	931b      	str	r3, [sp, #108]	; 0x6c
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1dd      	bne.n	800a0b4 <_strtod_l+0x7c>
 800a0f8:	0032      	movs	r2, r6
 800a0fa:	003b      	movs	r3, r7
 800a0fc:	e7e4      	b.n	800a0c8 <_strtod_l+0x90>
 800a0fe:	2200      	movs	r2, #0
 800a100:	e7ed      	b.n	800a0de <_strtod_l+0xa6>
 800a102:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a104:	2a00      	cmp	r2, #0
 800a106:	d007      	beq.n	800a118 <_strtod_l+0xe0>
 800a108:	2135      	movs	r1, #53	; 0x35
 800a10a:	a81e      	add	r0, sp, #120	; 0x78
 800a10c:	f7ff ff37 	bl	8009f7e <__copybits>
 800a110:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a112:	9804      	ldr	r0, [sp, #16]
 800a114:	f7ff fb00 	bl	8009718 <_Bfree>
 800a118:	9805      	ldr	r0, [sp, #20]
 800a11a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a11c:	3801      	subs	r0, #1
 800a11e:	2804      	cmp	r0, #4
 800a120:	d806      	bhi.n	800a130 <_strtod_l+0xf8>
 800a122:	f7f5 fff9 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a126:	0312      	.short	0x0312
 800a128:	1e1c      	.short	0x1e1c
 800a12a:	12          	.byte	0x12
 800a12b:	00          	.byte	0x00
 800a12c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a12e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a130:	05e4      	lsls	r4, r4, #23
 800a132:	d502      	bpl.n	800a13a <_strtod_l+0x102>
 800a134:	2380      	movs	r3, #128	; 0x80
 800a136:	061b      	lsls	r3, r3, #24
 800a138:	431f      	orrs	r7, r3
 800a13a:	4b6a      	ldr	r3, [pc, #424]	; (800a2e4 <_strtod_l+0x2ac>)
 800a13c:	423b      	tst	r3, r7
 800a13e:	d1b6      	bne.n	800a0ae <_strtod_l+0x76>
 800a140:	f7fe faba 	bl	80086b8 <__errno>
 800a144:	2322      	movs	r3, #34	; 0x22
 800a146:	6003      	str	r3, [r0, #0]
 800a148:	e7b1      	b.n	800a0ae <_strtod_l+0x76>
 800a14a:	4967      	ldr	r1, [pc, #412]	; (800a2e8 <_strtod_l+0x2b0>)
 800a14c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a14e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a150:	400a      	ands	r2, r1
 800a152:	4966      	ldr	r1, [pc, #408]	; (800a2ec <_strtod_l+0x2b4>)
 800a154:	185b      	adds	r3, r3, r1
 800a156:	051b      	lsls	r3, r3, #20
 800a158:	431a      	orrs	r2, r3
 800a15a:	0017      	movs	r7, r2
 800a15c:	e7e8      	b.n	800a130 <_strtod_l+0xf8>
 800a15e:	4f61      	ldr	r7, [pc, #388]	; (800a2e4 <_strtod_l+0x2ac>)
 800a160:	e7e6      	b.n	800a130 <_strtod_l+0xf8>
 800a162:	2601      	movs	r6, #1
 800a164:	4f62      	ldr	r7, [pc, #392]	; (800a2f0 <_strtod_l+0x2b8>)
 800a166:	4276      	negs	r6, r6
 800a168:	e7e2      	b.n	800a130 <_strtod_l+0xf8>
 800a16a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	921b      	str	r2, [sp, #108]	; 0x6c
 800a170:	785b      	ldrb	r3, [r3, #1]
 800a172:	2b30      	cmp	r3, #48	; 0x30
 800a174:	d0f9      	beq.n	800a16a <_strtod_l+0x132>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d099      	beq.n	800a0ae <_strtod_l+0x76>
 800a17a:	2301      	movs	r3, #1
 800a17c:	9309      	str	r3, [sp, #36]	; 0x24
 800a17e:	2500      	movs	r5, #0
 800a180:	220a      	movs	r2, #10
 800a182:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a184:	950d      	str	r5, [sp, #52]	; 0x34
 800a186:	9310      	str	r3, [sp, #64]	; 0x40
 800a188:	9508      	str	r5, [sp, #32]
 800a18a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a18c:	7804      	ldrb	r4, [r0, #0]
 800a18e:	0023      	movs	r3, r4
 800a190:	3b30      	subs	r3, #48	; 0x30
 800a192:	b2d9      	uxtb	r1, r3
 800a194:	2909      	cmp	r1, #9
 800a196:	d927      	bls.n	800a1e8 <_strtod_l+0x1b0>
 800a198:	2201      	movs	r2, #1
 800a19a:	4956      	ldr	r1, [pc, #344]	; (800a2f4 <_strtod_l+0x2bc>)
 800a19c:	f001 f812 	bl	800b1c4 <strncmp>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d031      	beq.n	800a208 <_strtod_l+0x1d0>
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	0023      	movs	r3, r4
 800a1a8:	4684      	mov	ip, r0
 800a1aa:	9a08      	ldr	r2, [sp, #32]
 800a1ac:	900c      	str	r0, [sp, #48]	; 0x30
 800a1ae:	9205      	str	r2, [sp, #20]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	0019      	movs	r1, r3
 800a1b4:	4391      	bics	r1, r2
 800a1b6:	000a      	movs	r2, r1
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	9106      	str	r1, [sp, #24]
 800a1bc:	2a45      	cmp	r2, #69	; 0x45
 800a1be:	d000      	beq.n	800a1c2 <_strtod_l+0x18a>
 800a1c0:	e0c2      	b.n	800a348 <_strtod_l+0x310>
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c6:	4303      	orrs	r3, r0
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	428b      	cmp	r3, r1
 800a1cc:	d08d      	beq.n	800a0ea <_strtod_l+0xb2>
 800a1ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a1d6:	9b07      	ldr	r3, [sp, #28]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b2b      	cmp	r3, #43	; 0x2b
 800a1dc:	d071      	beq.n	800a2c2 <_strtod_l+0x28a>
 800a1de:	000c      	movs	r4, r1
 800a1e0:	2b2d      	cmp	r3, #45	; 0x2d
 800a1e2:	d174      	bne.n	800a2ce <_strtod_l+0x296>
 800a1e4:	2401      	movs	r4, #1
 800a1e6:	e06d      	b.n	800a2c4 <_strtod_l+0x28c>
 800a1e8:	9908      	ldr	r1, [sp, #32]
 800a1ea:	2908      	cmp	r1, #8
 800a1ec:	dc09      	bgt.n	800a202 <_strtod_l+0x1ca>
 800a1ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a1f0:	4351      	muls	r1, r2
 800a1f2:	185b      	adds	r3, r3, r1
 800a1f4:	930d      	str	r3, [sp, #52]	; 0x34
 800a1f6:	9b08      	ldr	r3, [sp, #32]
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	9308      	str	r3, [sp, #32]
 800a1fe:	901b      	str	r0, [sp, #108]	; 0x6c
 800a200:	e7c3      	b.n	800a18a <_strtod_l+0x152>
 800a202:	4355      	muls	r5, r2
 800a204:	195d      	adds	r5, r3, r5
 800a206:	e7f6      	b.n	800a1f6 <_strtod_l+0x1be>
 800a208:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a20e:	9a08      	ldr	r2, [sp, #32]
 800a210:	785b      	ldrb	r3, [r3, #1]
 800a212:	2a00      	cmp	r2, #0
 800a214:	d03a      	beq.n	800a28c <_strtod_l+0x254>
 800a216:	900c      	str	r0, [sp, #48]	; 0x30
 800a218:	9205      	str	r2, [sp, #20]
 800a21a:	001a      	movs	r2, r3
 800a21c:	3a30      	subs	r2, #48	; 0x30
 800a21e:	2a09      	cmp	r2, #9
 800a220:	d912      	bls.n	800a248 <_strtod_l+0x210>
 800a222:	2201      	movs	r2, #1
 800a224:	4694      	mov	ip, r2
 800a226:	e7c3      	b.n	800a1b0 <_strtod_l+0x178>
 800a228:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a22a:	3001      	adds	r0, #1
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	921b      	str	r2, [sp, #108]	; 0x6c
 800a230:	785b      	ldrb	r3, [r3, #1]
 800a232:	2b30      	cmp	r3, #48	; 0x30
 800a234:	d0f8      	beq.n	800a228 <_strtod_l+0x1f0>
 800a236:	001a      	movs	r2, r3
 800a238:	3a31      	subs	r2, #49	; 0x31
 800a23a:	2a08      	cmp	r2, #8
 800a23c:	d83c      	bhi.n	800a2b8 <_strtod_l+0x280>
 800a23e:	900c      	str	r0, [sp, #48]	; 0x30
 800a240:	2000      	movs	r0, #0
 800a242:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a244:	9005      	str	r0, [sp, #20]
 800a246:	9210      	str	r2, [sp, #64]	; 0x40
 800a248:	001a      	movs	r2, r3
 800a24a:	1c41      	adds	r1, r0, #1
 800a24c:	3a30      	subs	r2, #48	; 0x30
 800a24e:	2b30      	cmp	r3, #48	; 0x30
 800a250:	d016      	beq.n	800a280 <_strtod_l+0x248>
 800a252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a254:	185b      	adds	r3, r3, r1
 800a256:	930c      	str	r3, [sp, #48]	; 0x30
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	210a      	movs	r1, #10
 800a25c:	469c      	mov	ip, r3
 800a25e:	4484      	add	ip, r0
 800a260:	4563      	cmp	r3, ip
 800a262:	d115      	bne.n	800a290 <_strtod_l+0x258>
 800a264:	9905      	ldr	r1, [sp, #20]
 800a266:	9b05      	ldr	r3, [sp, #20]
 800a268:	3101      	adds	r1, #1
 800a26a:	1809      	adds	r1, r1, r0
 800a26c:	181b      	adds	r3, r3, r0
 800a26e:	9105      	str	r1, [sp, #20]
 800a270:	2b08      	cmp	r3, #8
 800a272:	dc19      	bgt.n	800a2a8 <_strtod_l+0x270>
 800a274:	230a      	movs	r3, #10
 800a276:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a278:	434b      	muls	r3, r1
 800a27a:	2100      	movs	r1, #0
 800a27c:	18d3      	adds	r3, r2, r3
 800a27e:	930d      	str	r3, [sp, #52]	; 0x34
 800a280:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a282:	0008      	movs	r0, r1
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	921b      	str	r2, [sp, #108]	; 0x6c
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	e7c6      	b.n	800a21a <_strtod_l+0x1e2>
 800a28c:	9808      	ldr	r0, [sp, #32]
 800a28e:	e7d0      	b.n	800a232 <_strtod_l+0x1fa>
 800a290:	1c5c      	adds	r4, r3, #1
 800a292:	2b08      	cmp	r3, #8
 800a294:	dc04      	bgt.n	800a2a0 <_strtod_l+0x268>
 800a296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a298:	434b      	muls	r3, r1
 800a29a:	930d      	str	r3, [sp, #52]	; 0x34
 800a29c:	0023      	movs	r3, r4
 800a29e:	e7df      	b.n	800a260 <_strtod_l+0x228>
 800a2a0:	2c10      	cmp	r4, #16
 800a2a2:	dcfb      	bgt.n	800a29c <_strtod_l+0x264>
 800a2a4:	434d      	muls	r5, r1
 800a2a6:	e7f9      	b.n	800a29c <_strtod_l+0x264>
 800a2a8:	9b05      	ldr	r3, [sp, #20]
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	2b10      	cmp	r3, #16
 800a2ae:	dce7      	bgt.n	800a280 <_strtod_l+0x248>
 800a2b0:	230a      	movs	r3, #10
 800a2b2:	435d      	muls	r5, r3
 800a2b4:	1955      	adds	r5, r2, r5
 800a2b6:	e7e3      	b.n	800a280 <_strtod_l+0x248>
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	920c      	str	r2, [sp, #48]	; 0x30
 800a2bc:	9205      	str	r2, [sp, #20]
 800a2be:	3201      	adds	r2, #1
 800a2c0:	e7b0      	b.n	800a224 <_strtod_l+0x1ec>
 800a2c2:	2400      	movs	r4, #0
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a2ca:	9b07      	ldr	r3, [sp, #28]
 800a2cc:	789b      	ldrb	r3, [r3, #2]
 800a2ce:	001a      	movs	r2, r3
 800a2d0:	3a30      	subs	r2, #48	; 0x30
 800a2d2:	2a09      	cmp	r2, #9
 800a2d4:	d914      	bls.n	800a300 <_strtod_l+0x2c8>
 800a2d6:	9a07      	ldr	r2, [sp, #28]
 800a2d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2da:	2200      	movs	r2, #0
 800a2dc:	e033      	b.n	800a346 <_strtod_l+0x30e>
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	0800c3b0 	.word	0x0800c3b0
 800a2e4:	7ff00000 	.word	0x7ff00000
 800a2e8:	ffefffff 	.word	0xffefffff
 800a2ec:	00000433 	.word	0x00000433
 800a2f0:	7fffffff 	.word	0x7fffffff
 800a2f4:	0800c3ac 	.word	0x0800c3ac
 800a2f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2fe:	785b      	ldrb	r3, [r3, #1]
 800a300:	2b30      	cmp	r3, #48	; 0x30
 800a302:	d0f9      	beq.n	800a2f8 <_strtod_l+0x2c0>
 800a304:	2200      	movs	r2, #0
 800a306:	9206      	str	r2, [sp, #24]
 800a308:	001a      	movs	r2, r3
 800a30a:	3a31      	subs	r2, #49	; 0x31
 800a30c:	2a08      	cmp	r2, #8
 800a30e:	d81b      	bhi.n	800a348 <_strtod_l+0x310>
 800a310:	3b30      	subs	r3, #48	; 0x30
 800a312:	930e      	str	r3, [sp, #56]	; 0x38
 800a314:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a316:	9306      	str	r3, [sp, #24]
 800a318:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	911b      	str	r1, [sp, #108]	; 0x6c
 800a31e:	785b      	ldrb	r3, [r3, #1]
 800a320:	001a      	movs	r2, r3
 800a322:	3a30      	subs	r2, #48	; 0x30
 800a324:	2a09      	cmp	r2, #9
 800a326:	d93a      	bls.n	800a39e <_strtod_l+0x366>
 800a328:	9a06      	ldr	r2, [sp, #24]
 800a32a:	1a8a      	subs	r2, r1, r2
 800a32c:	49b2      	ldr	r1, [pc, #712]	; (800a5f8 <_strtod_l+0x5c0>)
 800a32e:	9106      	str	r1, [sp, #24]
 800a330:	2a08      	cmp	r2, #8
 800a332:	dc04      	bgt.n	800a33e <_strtod_l+0x306>
 800a334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a336:	9206      	str	r2, [sp, #24]
 800a338:	428a      	cmp	r2, r1
 800a33a:	dd00      	ble.n	800a33e <_strtod_l+0x306>
 800a33c:	9106      	str	r1, [sp, #24]
 800a33e:	2c00      	cmp	r4, #0
 800a340:	d002      	beq.n	800a348 <_strtod_l+0x310>
 800a342:	9a06      	ldr	r2, [sp, #24]
 800a344:	4252      	negs	r2, r2
 800a346:	9206      	str	r2, [sp, #24]
 800a348:	9a05      	ldr	r2, [sp, #20]
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	d14d      	bne.n	800a3ea <_strtod_l+0x3b2>
 800a34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a350:	4310      	orrs	r0, r2
 800a352:	d000      	beq.n	800a356 <_strtod_l+0x31e>
 800a354:	e6ab      	b.n	800a0ae <_strtod_l+0x76>
 800a356:	4662      	mov	r2, ip
 800a358:	2a00      	cmp	r2, #0
 800a35a:	d000      	beq.n	800a35e <_strtod_l+0x326>
 800a35c:	e6c5      	b.n	800a0ea <_strtod_l+0xb2>
 800a35e:	2b69      	cmp	r3, #105	; 0x69
 800a360:	d027      	beq.n	800a3b2 <_strtod_l+0x37a>
 800a362:	dc23      	bgt.n	800a3ac <_strtod_l+0x374>
 800a364:	2b49      	cmp	r3, #73	; 0x49
 800a366:	d024      	beq.n	800a3b2 <_strtod_l+0x37a>
 800a368:	2b4e      	cmp	r3, #78	; 0x4e
 800a36a:	d000      	beq.n	800a36e <_strtod_l+0x336>
 800a36c:	e6bd      	b.n	800a0ea <_strtod_l+0xb2>
 800a36e:	49a3      	ldr	r1, [pc, #652]	; (800a5fc <_strtod_l+0x5c4>)
 800a370:	a81b      	add	r0, sp, #108	; 0x6c
 800a372:	f001 fa3d 	bl	800b7f0 <__match>
 800a376:	2800      	cmp	r0, #0
 800a378:	d100      	bne.n	800a37c <_strtod_l+0x344>
 800a37a:	e6b6      	b.n	800a0ea <_strtod_l+0xb2>
 800a37c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b28      	cmp	r3, #40	; 0x28
 800a382:	d12c      	bne.n	800a3de <_strtod_l+0x3a6>
 800a384:	499e      	ldr	r1, [pc, #632]	; (800a600 <_strtod_l+0x5c8>)
 800a386:	aa1e      	add	r2, sp, #120	; 0x78
 800a388:	a81b      	add	r0, sp, #108	; 0x6c
 800a38a:	f001 fa45 	bl	800b818 <__hexnan>
 800a38e:	2805      	cmp	r0, #5
 800a390:	d125      	bne.n	800a3de <_strtod_l+0x3a6>
 800a392:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a394:	4a9b      	ldr	r2, [pc, #620]	; (800a604 <_strtod_l+0x5cc>)
 800a396:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a398:	431a      	orrs	r2, r3
 800a39a:	0017      	movs	r7, r2
 800a39c:	e687      	b.n	800a0ae <_strtod_l+0x76>
 800a39e:	220a      	movs	r2, #10
 800a3a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a3a2:	434a      	muls	r2, r1
 800a3a4:	18d2      	adds	r2, r2, r3
 800a3a6:	3a30      	subs	r2, #48	; 0x30
 800a3a8:	920e      	str	r2, [sp, #56]	; 0x38
 800a3aa:	e7b5      	b.n	800a318 <_strtod_l+0x2e0>
 800a3ac:	2b6e      	cmp	r3, #110	; 0x6e
 800a3ae:	d0de      	beq.n	800a36e <_strtod_l+0x336>
 800a3b0:	e69b      	b.n	800a0ea <_strtod_l+0xb2>
 800a3b2:	4995      	ldr	r1, [pc, #596]	; (800a608 <_strtod_l+0x5d0>)
 800a3b4:	a81b      	add	r0, sp, #108	; 0x6c
 800a3b6:	f001 fa1b 	bl	800b7f0 <__match>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d100      	bne.n	800a3c0 <_strtod_l+0x388>
 800a3be:	e694      	b.n	800a0ea <_strtod_l+0xb2>
 800a3c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3c2:	4992      	ldr	r1, [pc, #584]	; (800a60c <_strtod_l+0x5d4>)
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	a81b      	add	r0, sp, #108	; 0x6c
 800a3c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3ca:	f001 fa11 	bl	800b7f0 <__match>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d102      	bne.n	800a3d8 <_strtod_l+0x3a0>
 800a3d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3d8:	2600      	movs	r6, #0
 800a3da:	4f8a      	ldr	r7, [pc, #552]	; (800a604 <_strtod_l+0x5cc>)
 800a3dc:	e667      	b.n	800a0ae <_strtod_l+0x76>
 800a3de:	488c      	ldr	r0, [pc, #560]	; (800a610 <_strtod_l+0x5d8>)
 800a3e0:	f000 ff14 	bl	800b20c <nan>
 800a3e4:	0006      	movs	r6, r0
 800a3e6:	000f      	movs	r7, r1
 800a3e8:	e661      	b.n	800a0ae <_strtod_l+0x76>
 800a3ea:	9b06      	ldr	r3, [sp, #24]
 800a3ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ee:	1a9b      	subs	r3, r3, r2
 800a3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <_strtod_l+0x3c4>
 800a3f8:	9b05      	ldr	r3, [sp, #20]
 800a3fa:	9308      	str	r3, [sp, #32]
 800a3fc:	9c05      	ldr	r4, [sp, #20]
 800a3fe:	2c10      	cmp	r4, #16
 800a400:	dd00      	ble.n	800a404 <_strtod_l+0x3cc>
 800a402:	2410      	movs	r4, #16
 800a404:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a406:	f7f7 fee1 	bl	80021cc <__aeabi_ui2d>
 800a40a:	9b05      	ldr	r3, [sp, #20]
 800a40c:	0006      	movs	r6, r0
 800a40e:	000f      	movs	r7, r1
 800a410:	2b09      	cmp	r3, #9
 800a412:	dd15      	ble.n	800a440 <_strtod_l+0x408>
 800a414:	0022      	movs	r2, r4
 800a416:	4b7f      	ldr	r3, [pc, #508]	; (800a614 <_strtod_l+0x5dc>)
 800a418:	3a09      	subs	r2, #9
 800a41a:	00d2      	lsls	r2, r2, #3
 800a41c:	189b      	adds	r3, r3, r2
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f7f7 f80b 	bl	800143c <__aeabi_dmul>
 800a426:	0006      	movs	r6, r0
 800a428:	0028      	movs	r0, r5
 800a42a:	000f      	movs	r7, r1
 800a42c:	f7f7 fece 	bl	80021cc <__aeabi_ui2d>
 800a430:	0002      	movs	r2, r0
 800a432:	000b      	movs	r3, r1
 800a434:	0030      	movs	r0, r6
 800a436:	0039      	movs	r1, r7
 800a438:	f7f6 f8a6 	bl	8000588 <__aeabi_dadd>
 800a43c:	0006      	movs	r6, r0
 800a43e:	000f      	movs	r7, r1
 800a440:	9b05      	ldr	r3, [sp, #20]
 800a442:	2b0f      	cmp	r3, #15
 800a444:	dc39      	bgt.n	800a4ba <_strtod_l+0x482>
 800a446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d100      	bne.n	800a44e <_strtod_l+0x416>
 800a44c:	e62f      	b.n	800a0ae <_strtod_l+0x76>
 800a44e:	dd24      	ble.n	800a49a <_strtod_l+0x462>
 800a450:	2b16      	cmp	r3, #22
 800a452:	dc09      	bgt.n	800a468 <_strtod_l+0x430>
 800a454:	496f      	ldr	r1, [pc, #444]	; (800a614 <_strtod_l+0x5dc>)
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	18c9      	adds	r1, r1, r3
 800a45a:	0032      	movs	r2, r6
 800a45c:	6808      	ldr	r0, [r1, #0]
 800a45e:	6849      	ldr	r1, [r1, #4]
 800a460:	003b      	movs	r3, r7
 800a462:	f7f6 ffeb 	bl	800143c <__aeabi_dmul>
 800a466:	e7bd      	b.n	800a3e4 <_strtod_l+0x3ac>
 800a468:	2325      	movs	r3, #37	; 0x25
 800a46a:	9a05      	ldr	r2, [sp, #20]
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a470:	4293      	cmp	r3, r2
 800a472:	db22      	blt.n	800a4ba <_strtod_l+0x482>
 800a474:	240f      	movs	r4, #15
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	4d66      	ldr	r5, [pc, #408]	; (800a614 <_strtod_l+0x5dc>)
 800a47a:	1ae4      	subs	r4, r4, r3
 800a47c:	00e1      	lsls	r1, r4, #3
 800a47e:	1869      	adds	r1, r5, r1
 800a480:	0032      	movs	r2, r6
 800a482:	6808      	ldr	r0, [r1, #0]
 800a484:	6849      	ldr	r1, [r1, #4]
 800a486:	003b      	movs	r3, r7
 800a488:	f7f6 ffd8 	bl	800143c <__aeabi_dmul>
 800a48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48e:	1b1c      	subs	r4, r3, r4
 800a490:	00e4      	lsls	r4, r4, #3
 800a492:	192d      	adds	r5, r5, r4
 800a494:	682a      	ldr	r2, [r5, #0]
 800a496:	686b      	ldr	r3, [r5, #4]
 800a498:	e7e3      	b.n	800a462 <_strtod_l+0x42a>
 800a49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49c:	3316      	adds	r3, #22
 800a49e:	db0c      	blt.n	800a4ba <_strtod_l+0x482>
 800a4a0:	9906      	ldr	r1, [sp, #24]
 800a4a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4a4:	4b5b      	ldr	r3, [pc, #364]	; (800a614 <_strtod_l+0x5dc>)
 800a4a6:	1a52      	subs	r2, r2, r1
 800a4a8:	00d2      	lsls	r2, r2, #3
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	0030      	movs	r0, r6
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	0039      	movs	r1, r7
 800a4b4:	f7f6 fbc8 	bl	8000c48 <__aeabi_ddiv>
 800a4b8:	e794      	b.n	800a3e4 <_strtod_l+0x3ac>
 800a4ba:	9b05      	ldr	r3, [sp, #20]
 800a4bc:	1b1c      	subs	r4, r3, r4
 800a4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c0:	18e4      	adds	r4, r4, r3
 800a4c2:	2c00      	cmp	r4, #0
 800a4c4:	dd72      	ble.n	800a5ac <_strtod_l+0x574>
 800a4c6:	220f      	movs	r2, #15
 800a4c8:	0023      	movs	r3, r4
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	4214      	tst	r4, r2
 800a4ce:	d00a      	beq.n	800a4e6 <_strtod_l+0x4ae>
 800a4d0:	4950      	ldr	r1, [pc, #320]	; (800a614 <_strtod_l+0x5dc>)
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	18c9      	adds	r1, r1, r3
 800a4d6:	0032      	movs	r2, r6
 800a4d8:	6808      	ldr	r0, [r1, #0]
 800a4da:	6849      	ldr	r1, [r1, #4]
 800a4dc:	003b      	movs	r3, r7
 800a4de:	f7f6 ffad 	bl	800143c <__aeabi_dmul>
 800a4e2:	0006      	movs	r6, r0
 800a4e4:	000f      	movs	r7, r1
 800a4e6:	230f      	movs	r3, #15
 800a4e8:	439c      	bics	r4, r3
 800a4ea:	d04a      	beq.n	800a582 <_strtod_l+0x54a>
 800a4ec:	3326      	adds	r3, #38	; 0x26
 800a4ee:	33ff      	adds	r3, #255	; 0xff
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	dd22      	ble.n	800a53a <_strtod_l+0x502>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	9306      	str	r3, [sp, #24]
 800a4fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a4fc:	9308      	str	r3, [sp, #32]
 800a4fe:	2322      	movs	r3, #34	; 0x22
 800a500:	2600      	movs	r6, #0
 800a502:	9a04      	ldr	r2, [sp, #16]
 800a504:	4f3f      	ldr	r7, [pc, #252]	; (800a604 <_strtod_l+0x5cc>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a50a:	42b3      	cmp	r3, r6
 800a50c:	d100      	bne.n	800a510 <_strtod_l+0x4d8>
 800a50e:	e5ce      	b.n	800a0ae <_strtod_l+0x76>
 800a510:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a512:	9804      	ldr	r0, [sp, #16]
 800a514:	f7ff f900 	bl	8009718 <_Bfree>
 800a518:	9908      	ldr	r1, [sp, #32]
 800a51a:	9804      	ldr	r0, [sp, #16]
 800a51c:	f7ff f8fc 	bl	8009718 <_Bfree>
 800a520:	9906      	ldr	r1, [sp, #24]
 800a522:	9804      	ldr	r0, [sp, #16]
 800a524:	f7ff f8f8 	bl	8009718 <_Bfree>
 800a528:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a52a:	9804      	ldr	r0, [sp, #16]
 800a52c:	f7ff f8f4 	bl	8009718 <_Bfree>
 800a530:	9905      	ldr	r1, [sp, #20]
 800a532:	9804      	ldr	r0, [sp, #16]
 800a534:	f7ff f8f0 	bl	8009718 <_Bfree>
 800a538:	e5b9      	b.n	800a0ae <_strtod_l+0x76>
 800a53a:	2300      	movs	r3, #0
 800a53c:	0030      	movs	r0, r6
 800a53e:	0039      	movs	r1, r7
 800a540:	4d35      	ldr	r5, [pc, #212]	; (800a618 <_strtod_l+0x5e0>)
 800a542:	1124      	asrs	r4, r4, #4
 800a544:	9307      	str	r3, [sp, #28]
 800a546:	2c01      	cmp	r4, #1
 800a548:	dc1e      	bgt.n	800a588 <_strtod_l+0x550>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <_strtod_l+0x51a>
 800a54e:	0006      	movs	r6, r0
 800a550:	000f      	movs	r7, r1
 800a552:	4b32      	ldr	r3, [pc, #200]	; (800a61c <_strtod_l+0x5e4>)
 800a554:	9a07      	ldr	r2, [sp, #28]
 800a556:	18ff      	adds	r7, r7, r3
 800a558:	4b2f      	ldr	r3, [pc, #188]	; (800a618 <_strtod_l+0x5e0>)
 800a55a:	00d2      	lsls	r2, r2, #3
 800a55c:	189d      	adds	r5, r3, r2
 800a55e:	6828      	ldr	r0, [r5, #0]
 800a560:	6869      	ldr	r1, [r5, #4]
 800a562:	0032      	movs	r2, r6
 800a564:	003b      	movs	r3, r7
 800a566:	f7f6 ff69 	bl	800143c <__aeabi_dmul>
 800a56a:	4b26      	ldr	r3, [pc, #152]	; (800a604 <_strtod_l+0x5cc>)
 800a56c:	4a2c      	ldr	r2, [pc, #176]	; (800a620 <_strtod_l+0x5e8>)
 800a56e:	0006      	movs	r6, r0
 800a570:	400b      	ands	r3, r1
 800a572:	4293      	cmp	r3, r2
 800a574:	d8be      	bhi.n	800a4f4 <_strtod_l+0x4bc>
 800a576:	4a2b      	ldr	r2, [pc, #172]	; (800a624 <_strtod_l+0x5ec>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d913      	bls.n	800a5a4 <_strtod_l+0x56c>
 800a57c:	2601      	movs	r6, #1
 800a57e:	4f2a      	ldr	r7, [pc, #168]	; (800a628 <_strtod_l+0x5f0>)
 800a580:	4276      	negs	r6, r6
 800a582:	2300      	movs	r3, #0
 800a584:	9307      	str	r3, [sp, #28]
 800a586:	e088      	b.n	800a69a <_strtod_l+0x662>
 800a588:	2201      	movs	r2, #1
 800a58a:	4214      	tst	r4, r2
 800a58c:	d004      	beq.n	800a598 <_strtod_l+0x560>
 800a58e:	682a      	ldr	r2, [r5, #0]
 800a590:	686b      	ldr	r3, [r5, #4]
 800a592:	f7f6 ff53 	bl	800143c <__aeabi_dmul>
 800a596:	2301      	movs	r3, #1
 800a598:	9a07      	ldr	r2, [sp, #28]
 800a59a:	1064      	asrs	r4, r4, #1
 800a59c:	3201      	adds	r2, #1
 800a59e:	9207      	str	r2, [sp, #28]
 800a5a0:	3508      	adds	r5, #8
 800a5a2:	e7d0      	b.n	800a546 <_strtod_l+0x50e>
 800a5a4:	23d4      	movs	r3, #212	; 0xd4
 800a5a6:	049b      	lsls	r3, r3, #18
 800a5a8:	18cf      	adds	r7, r1, r3
 800a5aa:	e7ea      	b.n	800a582 <_strtod_l+0x54a>
 800a5ac:	2c00      	cmp	r4, #0
 800a5ae:	d0e8      	beq.n	800a582 <_strtod_l+0x54a>
 800a5b0:	4264      	negs	r4, r4
 800a5b2:	230f      	movs	r3, #15
 800a5b4:	0022      	movs	r2, r4
 800a5b6:	401a      	ands	r2, r3
 800a5b8:	421c      	tst	r4, r3
 800a5ba:	d00a      	beq.n	800a5d2 <_strtod_l+0x59a>
 800a5bc:	4b15      	ldr	r3, [pc, #84]	; (800a614 <_strtod_l+0x5dc>)
 800a5be:	00d2      	lsls	r2, r2, #3
 800a5c0:	189b      	adds	r3, r3, r2
 800a5c2:	0030      	movs	r0, r6
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	0039      	movs	r1, r7
 800a5ca:	f7f6 fb3d 	bl	8000c48 <__aeabi_ddiv>
 800a5ce:	0006      	movs	r6, r0
 800a5d0:	000f      	movs	r7, r1
 800a5d2:	1124      	asrs	r4, r4, #4
 800a5d4:	d0d5      	beq.n	800a582 <_strtod_l+0x54a>
 800a5d6:	2c1f      	cmp	r4, #31
 800a5d8:	dd28      	ble.n	800a62c <_strtod_l+0x5f4>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9305      	str	r3, [sp, #20]
 800a5de:	9306      	str	r3, [sp, #24]
 800a5e0:	930d      	str	r3, [sp, #52]	; 0x34
 800a5e2:	9308      	str	r3, [sp, #32]
 800a5e4:	2322      	movs	r3, #34	; 0x22
 800a5e6:	9a04      	ldr	r2, [sp, #16]
 800a5e8:	2600      	movs	r6, #0
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ee:	2700      	movs	r7, #0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d18d      	bne.n	800a510 <_strtod_l+0x4d8>
 800a5f4:	e55b      	b.n	800a0ae <_strtod_l+0x76>
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	00004e1f 	.word	0x00004e1f
 800a5fc:	0800c19d 	.word	0x0800c19d
 800a600:	0800c3c4 	.word	0x0800c3c4
 800a604:	7ff00000 	.word	0x7ff00000
 800a608:	0800c195 	.word	0x0800c195
 800a60c:	0800c1cc 	.word	0x0800c1cc
 800a610:	0800c555 	.word	0x0800c555
 800a614:	0800c2d8 	.word	0x0800c2d8
 800a618:	0800c2b0 	.word	0x0800c2b0
 800a61c:	fcb00000 	.word	0xfcb00000
 800a620:	7ca00000 	.word	0x7ca00000
 800a624:	7c900000 	.word	0x7c900000
 800a628:	7fefffff 	.word	0x7fefffff
 800a62c:	2310      	movs	r3, #16
 800a62e:	0022      	movs	r2, r4
 800a630:	401a      	ands	r2, r3
 800a632:	9207      	str	r2, [sp, #28]
 800a634:	421c      	tst	r4, r3
 800a636:	d001      	beq.n	800a63c <_strtod_l+0x604>
 800a638:	335a      	adds	r3, #90	; 0x5a
 800a63a:	9307      	str	r3, [sp, #28]
 800a63c:	0030      	movs	r0, r6
 800a63e:	0039      	movs	r1, r7
 800a640:	2300      	movs	r3, #0
 800a642:	4dc4      	ldr	r5, [pc, #784]	; (800a954 <_strtod_l+0x91c>)
 800a644:	2201      	movs	r2, #1
 800a646:	4214      	tst	r4, r2
 800a648:	d004      	beq.n	800a654 <_strtod_l+0x61c>
 800a64a:	682a      	ldr	r2, [r5, #0]
 800a64c:	686b      	ldr	r3, [r5, #4]
 800a64e:	f7f6 fef5 	bl	800143c <__aeabi_dmul>
 800a652:	2301      	movs	r3, #1
 800a654:	1064      	asrs	r4, r4, #1
 800a656:	3508      	adds	r5, #8
 800a658:	2c00      	cmp	r4, #0
 800a65a:	d1f3      	bne.n	800a644 <_strtod_l+0x60c>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <_strtod_l+0x62c>
 800a660:	0006      	movs	r6, r0
 800a662:	000f      	movs	r7, r1
 800a664:	9b07      	ldr	r3, [sp, #28]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00f      	beq.n	800a68a <_strtod_l+0x652>
 800a66a:	236b      	movs	r3, #107	; 0x6b
 800a66c:	007a      	lsls	r2, r7, #1
 800a66e:	0d52      	lsrs	r2, r2, #21
 800a670:	0039      	movs	r1, r7
 800a672:	1a9b      	subs	r3, r3, r2
 800a674:	2b00      	cmp	r3, #0
 800a676:	dd08      	ble.n	800a68a <_strtod_l+0x652>
 800a678:	2b1f      	cmp	r3, #31
 800a67a:	dc00      	bgt.n	800a67e <_strtod_l+0x646>
 800a67c:	e121      	b.n	800a8c2 <_strtod_l+0x88a>
 800a67e:	2600      	movs	r6, #0
 800a680:	2b34      	cmp	r3, #52	; 0x34
 800a682:	dc00      	bgt.n	800a686 <_strtod_l+0x64e>
 800a684:	e116      	b.n	800a8b4 <_strtod_l+0x87c>
 800a686:	27dc      	movs	r7, #220	; 0xdc
 800a688:	04bf      	lsls	r7, r7, #18
 800a68a:	2200      	movs	r2, #0
 800a68c:	2300      	movs	r3, #0
 800a68e:	0030      	movs	r0, r6
 800a690:	0039      	movs	r1, r7
 800a692:	f7f5 fedb 	bl	800044c <__aeabi_dcmpeq>
 800a696:	2800      	cmp	r0, #0
 800a698:	d19f      	bne.n	800a5da <_strtod_l+0x5a2>
 800a69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a69c:	9a08      	ldr	r2, [sp, #32]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a6a2:	9b05      	ldr	r3, [sp, #20]
 800a6a4:	9804      	ldr	r0, [sp, #16]
 800a6a6:	f7ff f89f 	bl	80097e8 <__s2b>
 800a6aa:	900d      	str	r0, [sp, #52]	; 0x34
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d100      	bne.n	800a6b2 <_strtod_l+0x67a>
 800a6b0:	e720      	b.n	800a4f4 <_strtod_l+0x4bc>
 800a6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b4:	9906      	ldr	r1, [sp, #24]
 800a6b6:	17da      	asrs	r2, r3, #31
 800a6b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ba:	1a5b      	subs	r3, r3, r1
 800a6bc:	401a      	ands	r2, r3
 800a6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c0:	9215      	str	r2, [sp, #84]	; 0x54
 800a6c2:	43db      	mvns	r3, r3
 800a6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c6:	17db      	asrs	r3, r3, #31
 800a6c8:	401a      	ands	r2, r3
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9218      	str	r2, [sp, #96]	; 0x60
 800a6ce:	9305      	str	r3, [sp, #20]
 800a6d0:	9306      	str	r3, [sp, #24]
 800a6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6d4:	9804      	ldr	r0, [sp, #16]
 800a6d6:	6859      	ldr	r1, [r3, #4]
 800a6d8:	f7fe ffda 	bl	8009690 <_Balloc>
 800a6dc:	9008      	str	r0, [sp, #32]
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d100      	bne.n	800a6e4 <_strtod_l+0x6ac>
 800a6e2:	e70c      	b.n	800a4fe <_strtod_l+0x4c6>
 800a6e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e6:	300c      	adds	r0, #12
 800a6e8:	0019      	movs	r1, r3
 800a6ea:	691a      	ldr	r2, [r3, #16]
 800a6ec:	310c      	adds	r1, #12
 800a6ee:	3202      	adds	r2, #2
 800a6f0:	0092      	lsls	r2, r2, #2
 800a6f2:	f7fe f819 	bl	8008728 <memcpy>
 800a6f6:	ab1e      	add	r3, sp, #120	; 0x78
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	0032      	movs	r2, r6
 800a700:	003b      	movs	r3, r7
 800a702:	9804      	ldr	r0, [sp, #16]
 800a704:	9610      	str	r6, [sp, #64]	; 0x40
 800a706:	9711      	str	r7, [sp, #68]	; 0x44
 800a708:	f7ff fbb0 	bl	8009e6c <__d2b>
 800a70c:	901c      	str	r0, [sp, #112]	; 0x70
 800a70e:	2800      	cmp	r0, #0
 800a710:	d100      	bne.n	800a714 <_strtod_l+0x6dc>
 800a712:	e6f4      	b.n	800a4fe <_strtod_l+0x4c6>
 800a714:	2101      	movs	r1, #1
 800a716:	9804      	ldr	r0, [sp, #16]
 800a718:	f7ff f8fa 	bl	8009910 <__i2b>
 800a71c:	9006      	str	r0, [sp, #24]
 800a71e:	2800      	cmp	r0, #0
 800a720:	d100      	bne.n	800a724 <_strtod_l+0x6ec>
 800a722:	e6ec      	b.n	800a4fe <_strtod_l+0x4c6>
 800a724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a726:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a728:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a72a:	1ad4      	subs	r4, r2, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	db01      	blt.n	800a734 <_strtod_l+0x6fc>
 800a730:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a732:	195d      	adds	r5, r3, r5
 800a734:	9907      	ldr	r1, [sp, #28]
 800a736:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a738:	1a5b      	subs	r3, r3, r1
 800a73a:	2136      	movs	r1, #54	; 0x36
 800a73c:	189b      	adds	r3, r3, r2
 800a73e:	1a8a      	subs	r2, r1, r2
 800a740:	4985      	ldr	r1, [pc, #532]	; (800a958 <_strtod_l+0x920>)
 800a742:	2001      	movs	r0, #1
 800a744:	468c      	mov	ip, r1
 800a746:	2100      	movs	r1, #0
 800a748:	3b01      	subs	r3, #1
 800a74a:	9114      	str	r1, [sp, #80]	; 0x50
 800a74c:	9012      	str	r0, [sp, #72]	; 0x48
 800a74e:	4563      	cmp	r3, ip
 800a750:	da07      	bge.n	800a762 <_strtod_l+0x72a>
 800a752:	4661      	mov	r1, ip
 800a754:	1ac9      	subs	r1, r1, r3
 800a756:	1a52      	subs	r2, r2, r1
 800a758:	291f      	cmp	r1, #31
 800a75a:	dd00      	ble.n	800a75e <_strtod_l+0x726>
 800a75c:	e0b6      	b.n	800a8cc <_strtod_l+0x894>
 800a75e:	4088      	lsls	r0, r1
 800a760:	9012      	str	r0, [sp, #72]	; 0x48
 800a762:	18ab      	adds	r3, r5, r2
 800a764:	930c      	str	r3, [sp, #48]	; 0x30
 800a766:	18a4      	adds	r4, r4, r2
 800a768:	9b07      	ldr	r3, [sp, #28]
 800a76a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a76c:	191c      	adds	r4, r3, r4
 800a76e:	002b      	movs	r3, r5
 800a770:	4295      	cmp	r5, r2
 800a772:	dd00      	ble.n	800a776 <_strtod_l+0x73e>
 800a774:	0013      	movs	r3, r2
 800a776:	42a3      	cmp	r3, r4
 800a778:	dd00      	ble.n	800a77c <_strtod_l+0x744>
 800a77a:	0023      	movs	r3, r4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dd04      	ble.n	800a78a <_strtod_l+0x752>
 800a780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a782:	1ae4      	subs	r4, r4, r3
 800a784:	1ad2      	subs	r2, r2, r3
 800a786:	920c      	str	r2, [sp, #48]	; 0x30
 800a788:	1aed      	subs	r5, r5, r3
 800a78a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dd17      	ble.n	800a7c0 <_strtod_l+0x788>
 800a790:	001a      	movs	r2, r3
 800a792:	9906      	ldr	r1, [sp, #24]
 800a794:	9804      	ldr	r0, [sp, #16]
 800a796:	f7ff f983 	bl	8009aa0 <__pow5mult>
 800a79a:	9006      	str	r0, [sp, #24]
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d100      	bne.n	800a7a2 <_strtod_l+0x76a>
 800a7a0:	e6ad      	b.n	800a4fe <_strtod_l+0x4c6>
 800a7a2:	0001      	movs	r1, r0
 800a7a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a7a6:	9804      	ldr	r0, [sp, #16]
 800a7a8:	f7ff f8ca 	bl	8009940 <__multiply>
 800a7ac:	900e      	str	r0, [sp, #56]	; 0x38
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d100      	bne.n	800a7b4 <_strtod_l+0x77c>
 800a7b2:	e6a4      	b.n	800a4fe <_strtod_l+0x4c6>
 800a7b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a7b6:	9804      	ldr	r0, [sp, #16]
 800a7b8:	f7fe ffae 	bl	8009718 <_Bfree>
 800a7bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7be:	931c      	str	r3, [sp, #112]	; 0x70
 800a7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	dd00      	ble.n	800a7c8 <_strtod_l+0x790>
 800a7c6:	e087      	b.n	800a8d8 <_strtod_l+0x8a0>
 800a7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd08      	ble.n	800a7e0 <_strtod_l+0x7a8>
 800a7ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a7d0:	9908      	ldr	r1, [sp, #32]
 800a7d2:	9804      	ldr	r0, [sp, #16]
 800a7d4:	f7ff f964 	bl	8009aa0 <__pow5mult>
 800a7d8:	9008      	str	r0, [sp, #32]
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d100      	bne.n	800a7e0 <_strtod_l+0x7a8>
 800a7de:	e68e      	b.n	800a4fe <_strtod_l+0x4c6>
 800a7e0:	2c00      	cmp	r4, #0
 800a7e2:	dd08      	ble.n	800a7f6 <_strtod_l+0x7be>
 800a7e4:	0022      	movs	r2, r4
 800a7e6:	9908      	ldr	r1, [sp, #32]
 800a7e8:	9804      	ldr	r0, [sp, #16]
 800a7ea:	f7ff f9b5 	bl	8009b58 <__lshift>
 800a7ee:	9008      	str	r0, [sp, #32]
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d100      	bne.n	800a7f6 <_strtod_l+0x7be>
 800a7f4:	e683      	b.n	800a4fe <_strtod_l+0x4c6>
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	dd08      	ble.n	800a80c <_strtod_l+0x7d4>
 800a7fa:	002a      	movs	r2, r5
 800a7fc:	9906      	ldr	r1, [sp, #24]
 800a7fe:	9804      	ldr	r0, [sp, #16]
 800a800:	f7ff f9aa 	bl	8009b58 <__lshift>
 800a804:	9006      	str	r0, [sp, #24]
 800a806:	2800      	cmp	r0, #0
 800a808:	d100      	bne.n	800a80c <_strtod_l+0x7d4>
 800a80a:	e678      	b.n	800a4fe <_strtod_l+0x4c6>
 800a80c:	9a08      	ldr	r2, [sp, #32]
 800a80e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a810:	9804      	ldr	r0, [sp, #16]
 800a812:	f7ff fa2b 	bl	8009c6c <__mdiff>
 800a816:	9005      	str	r0, [sp, #20]
 800a818:	2800      	cmp	r0, #0
 800a81a:	d100      	bne.n	800a81e <_strtod_l+0x7e6>
 800a81c:	e66f      	b.n	800a4fe <_strtod_l+0x4c6>
 800a81e:	2200      	movs	r2, #0
 800a820:	68c3      	ldr	r3, [r0, #12]
 800a822:	9906      	ldr	r1, [sp, #24]
 800a824:	60c2      	str	r2, [r0, #12]
 800a826:	930c      	str	r3, [sp, #48]	; 0x30
 800a828:	f7ff fa04 	bl	8009c34 <__mcmp>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	da5d      	bge.n	800a8ec <_strtod_l+0x8b4>
 800a830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a832:	4333      	orrs	r3, r6
 800a834:	d000      	beq.n	800a838 <_strtod_l+0x800>
 800a836:	e088      	b.n	800a94a <_strtod_l+0x912>
 800a838:	033b      	lsls	r3, r7, #12
 800a83a:	d000      	beq.n	800a83e <_strtod_l+0x806>
 800a83c:	e085      	b.n	800a94a <_strtod_l+0x912>
 800a83e:	22d6      	movs	r2, #214	; 0xd6
 800a840:	4b46      	ldr	r3, [pc, #280]	; (800a95c <_strtod_l+0x924>)
 800a842:	04d2      	lsls	r2, r2, #19
 800a844:	403b      	ands	r3, r7
 800a846:	4293      	cmp	r3, r2
 800a848:	d97f      	bls.n	800a94a <_strtod_l+0x912>
 800a84a:	9b05      	ldr	r3, [sp, #20]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d103      	bne.n	800a85a <_strtod_l+0x822>
 800a852:	9b05      	ldr	r3, [sp, #20]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	2b01      	cmp	r3, #1
 800a858:	dd77      	ble.n	800a94a <_strtod_l+0x912>
 800a85a:	9905      	ldr	r1, [sp, #20]
 800a85c:	2201      	movs	r2, #1
 800a85e:	9804      	ldr	r0, [sp, #16]
 800a860:	f7ff f97a 	bl	8009b58 <__lshift>
 800a864:	9906      	ldr	r1, [sp, #24]
 800a866:	9005      	str	r0, [sp, #20]
 800a868:	f7ff f9e4 	bl	8009c34 <__mcmp>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	dd6c      	ble.n	800a94a <_strtod_l+0x912>
 800a870:	9907      	ldr	r1, [sp, #28]
 800a872:	003b      	movs	r3, r7
 800a874:	4a39      	ldr	r2, [pc, #228]	; (800a95c <_strtod_l+0x924>)
 800a876:	2900      	cmp	r1, #0
 800a878:	d100      	bne.n	800a87c <_strtod_l+0x844>
 800a87a:	e094      	b.n	800a9a6 <_strtod_l+0x96e>
 800a87c:	0011      	movs	r1, r2
 800a87e:	20d6      	movs	r0, #214	; 0xd6
 800a880:	4039      	ands	r1, r7
 800a882:	04c0      	lsls	r0, r0, #19
 800a884:	4281      	cmp	r1, r0
 800a886:	dd00      	ble.n	800a88a <_strtod_l+0x852>
 800a888:	e08d      	b.n	800a9a6 <_strtod_l+0x96e>
 800a88a:	23dc      	movs	r3, #220	; 0xdc
 800a88c:	049b      	lsls	r3, r3, #18
 800a88e:	4299      	cmp	r1, r3
 800a890:	dc00      	bgt.n	800a894 <_strtod_l+0x85c>
 800a892:	e6a7      	b.n	800a5e4 <_strtod_l+0x5ac>
 800a894:	0030      	movs	r0, r6
 800a896:	0039      	movs	r1, r7
 800a898:	4b31      	ldr	r3, [pc, #196]	; (800a960 <_strtod_l+0x928>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	f7f6 fdce 	bl	800143c <__aeabi_dmul>
 800a8a0:	4b2e      	ldr	r3, [pc, #184]	; (800a95c <_strtod_l+0x924>)
 800a8a2:	0006      	movs	r6, r0
 800a8a4:	000f      	movs	r7, r1
 800a8a6:	420b      	tst	r3, r1
 800a8a8:	d000      	beq.n	800a8ac <_strtod_l+0x874>
 800a8aa:	e631      	b.n	800a510 <_strtod_l+0x4d8>
 800a8ac:	2322      	movs	r3, #34	; 0x22
 800a8ae:	9a04      	ldr	r2, [sp, #16]
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	e62d      	b.n	800a510 <_strtod_l+0x4d8>
 800a8b4:	234b      	movs	r3, #75	; 0x4b
 800a8b6:	1a9a      	subs	r2, r3, r2
 800a8b8:	3b4c      	subs	r3, #76	; 0x4c
 800a8ba:	4093      	lsls	r3, r2
 800a8bc:	4019      	ands	r1, r3
 800a8be:	000f      	movs	r7, r1
 800a8c0:	e6e3      	b.n	800a68a <_strtod_l+0x652>
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4252      	negs	r2, r2
 800a8c6:	409a      	lsls	r2, r3
 800a8c8:	4016      	ands	r6, r2
 800a8ca:	e6de      	b.n	800a68a <_strtod_l+0x652>
 800a8cc:	4925      	ldr	r1, [pc, #148]	; (800a964 <_strtod_l+0x92c>)
 800a8ce:	1acb      	subs	r3, r1, r3
 800a8d0:	0001      	movs	r1, r0
 800a8d2:	4099      	lsls	r1, r3
 800a8d4:	9114      	str	r1, [sp, #80]	; 0x50
 800a8d6:	e743      	b.n	800a760 <_strtod_l+0x728>
 800a8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8da:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a8dc:	9804      	ldr	r0, [sp, #16]
 800a8de:	f7ff f93b 	bl	8009b58 <__lshift>
 800a8e2:	901c      	str	r0, [sp, #112]	; 0x70
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d000      	beq.n	800a8ea <_strtod_l+0x8b2>
 800a8e8:	e76e      	b.n	800a7c8 <_strtod_l+0x790>
 800a8ea:	e608      	b.n	800a4fe <_strtod_l+0x4c6>
 800a8ec:	970e      	str	r7, [sp, #56]	; 0x38
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d177      	bne.n	800a9e2 <_strtod_l+0x9aa>
 800a8f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8f4:	033b      	lsls	r3, r7, #12
 800a8f6:	0b1b      	lsrs	r3, r3, #12
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d039      	beq.n	800a970 <_strtod_l+0x938>
 800a8fc:	4a1a      	ldr	r2, [pc, #104]	; (800a968 <_strtod_l+0x930>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d139      	bne.n	800a976 <_strtod_l+0x93e>
 800a902:	2101      	movs	r1, #1
 800a904:	9b07      	ldr	r3, [sp, #28]
 800a906:	4249      	negs	r1, r1
 800a908:	0032      	movs	r2, r6
 800a90a:	0008      	movs	r0, r1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00b      	beq.n	800a928 <_strtod_l+0x8f0>
 800a910:	24d4      	movs	r4, #212	; 0xd4
 800a912:	4b12      	ldr	r3, [pc, #72]	; (800a95c <_strtod_l+0x924>)
 800a914:	0008      	movs	r0, r1
 800a916:	403b      	ands	r3, r7
 800a918:	04e4      	lsls	r4, r4, #19
 800a91a:	42a3      	cmp	r3, r4
 800a91c:	d804      	bhi.n	800a928 <_strtod_l+0x8f0>
 800a91e:	306c      	adds	r0, #108	; 0x6c
 800a920:	0d1b      	lsrs	r3, r3, #20
 800a922:	1ac3      	subs	r3, r0, r3
 800a924:	4099      	lsls	r1, r3
 800a926:	0008      	movs	r0, r1
 800a928:	4282      	cmp	r2, r0
 800a92a:	d124      	bne.n	800a976 <_strtod_l+0x93e>
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <_strtod_l+0x934>)
 800a92e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a930:	4299      	cmp	r1, r3
 800a932:	d102      	bne.n	800a93a <_strtod_l+0x902>
 800a934:	3201      	adds	r2, #1
 800a936:	d100      	bne.n	800a93a <_strtod_l+0x902>
 800a938:	e5e1      	b.n	800a4fe <_strtod_l+0x4c6>
 800a93a:	4b08      	ldr	r3, [pc, #32]	; (800a95c <_strtod_l+0x924>)
 800a93c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a93e:	2600      	movs	r6, #0
 800a940:	401a      	ands	r2, r3
 800a942:	0013      	movs	r3, r2
 800a944:	2280      	movs	r2, #128	; 0x80
 800a946:	0352      	lsls	r2, r2, #13
 800a948:	189f      	adds	r7, r3, r2
 800a94a:	9b07      	ldr	r3, [sp, #28]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1a1      	bne.n	800a894 <_strtod_l+0x85c>
 800a950:	e5de      	b.n	800a510 <_strtod_l+0x4d8>
 800a952:	46c0      	nop			; (mov r8, r8)
 800a954:	0800c3d8 	.word	0x0800c3d8
 800a958:	fffffc02 	.word	0xfffffc02
 800a95c:	7ff00000 	.word	0x7ff00000
 800a960:	39500000 	.word	0x39500000
 800a964:	fffffbe2 	.word	0xfffffbe2
 800a968:	000fffff 	.word	0x000fffff
 800a96c:	7fefffff 	.word	0x7fefffff
 800a970:	4333      	orrs	r3, r6
 800a972:	d100      	bne.n	800a976 <_strtod_l+0x93e>
 800a974:	e77c      	b.n	800a870 <_strtod_l+0x838>
 800a976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d01d      	beq.n	800a9b8 <_strtod_l+0x980>
 800a97c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a97e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a980:	4213      	tst	r3, r2
 800a982:	d0e2      	beq.n	800a94a <_strtod_l+0x912>
 800a984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a986:	0030      	movs	r0, r6
 800a988:	0039      	movs	r1, r7
 800a98a:	9a07      	ldr	r2, [sp, #28]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d017      	beq.n	800a9c0 <_strtod_l+0x988>
 800a990:	f7ff fb3a 	bl	800a008 <sulp>
 800a994:	0002      	movs	r2, r0
 800a996:	000b      	movs	r3, r1
 800a998:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a99a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a99c:	f7f5 fdf4 	bl	8000588 <__aeabi_dadd>
 800a9a0:	0006      	movs	r6, r0
 800a9a2:	000f      	movs	r7, r1
 800a9a4:	e7d1      	b.n	800a94a <_strtod_l+0x912>
 800a9a6:	2601      	movs	r6, #1
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	4a98      	ldr	r2, [pc, #608]	; (800ac0c <_strtod_l+0xbd4>)
 800a9ac:	4276      	negs	r6, r6
 800a9ae:	189b      	adds	r3, r3, r2
 800a9b0:	4a97      	ldr	r2, [pc, #604]	; (800ac10 <_strtod_l+0xbd8>)
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	0017      	movs	r7, r2
 800a9b6:	e7c8      	b.n	800a94a <_strtod_l+0x912>
 800a9b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9ba:	4233      	tst	r3, r6
 800a9bc:	d0c5      	beq.n	800a94a <_strtod_l+0x912>
 800a9be:	e7e1      	b.n	800a984 <_strtod_l+0x94c>
 800a9c0:	f7ff fb22 	bl	800a008 <sulp>
 800a9c4:	0002      	movs	r2, r0
 800a9c6:	000b      	movs	r3, r1
 800a9c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a9ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a9cc:	f7f6 fff8 	bl	80019c0 <__aeabi_dsub>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	0006      	movs	r6, r0
 800a9d6:	000f      	movs	r7, r1
 800a9d8:	f7f5 fd38 	bl	800044c <__aeabi_dcmpeq>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d0b4      	beq.n	800a94a <_strtod_l+0x912>
 800a9e0:	e600      	b.n	800a5e4 <_strtod_l+0x5ac>
 800a9e2:	9906      	ldr	r1, [sp, #24]
 800a9e4:	9805      	ldr	r0, [sp, #20]
 800a9e6:	f7ff faa1 	bl	8009f2c <__ratio>
 800a9ea:	2380      	movs	r3, #128	; 0x80
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	05db      	lsls	r3, r3, #23
 800a9f0:	0004      	movs	r4, r0
 800a9f2:	000d      	movs	r5, r1
 800a9f4:	f7f5 fd3a 	bl	800046c <__aeabi_dcmple>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d06d      	beq.n	800aad8 <_strtod_l+0xaa0>
 800a9fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d000      	beq.n	800aa04 <_strtod_l+0x9cc>
 800aa02:	e07e      	b.n	800ab02 <_strtod_l+0xaca>
 800aa04:	2e00      	cmp	r6, #0
 800aa06:	d158      	bne.n	800aaba <_strtod_l+0xa82>
 800aa08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa0a:	031b      	lsls	r3, r3, #12
 800aa0c:	d000      	beq.n	800aa10 <_strtod_l+0x9d8>
 800aa0e:	e07f      	b.n	800ab10 <_strtod_l+0xad8>
 800aa10:	2200      	movs	r2, #0
 800aa12:	0020      	movs	r0, r4
 800aa14:	0029      	movs	r1, r5
 800aa16:	4b7f      	ldr	r3, [pc, #508]	; (800ac14 <_strtod_l+0xbdc>)
 800aa18:	f7f5 fd1e 	bl	8000458 <__aeabi_dcmplt>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d158      	bne.n	800aad2 <_strtod_l+0xa9a>
 800aa20:	0020      	movs	r0, r4
 800aa22:	0029      	movs	r1, r5
 800aa24:	2200      	movs	r2, #0
 800aa26:	4b7c      	ldr	r3, [pc, #496]	; (800ac18 <_strtod_l+0xbe0>)
 800aa28:	f7f6 fd08 	bl	800143c <__aeabi_dmul>
 800aa2c:	0004      	movs	r4, r0
 800aa2e:	000d      	movs	r5, r1
 800aa30:	2380      	movs	r3, #128	; 0x80
 800aa32:	061b      	lsls	r3, r3, #24
 800aa34:	940a      	str	r4, [sp, #40]	; 0x28
 800aa36:	18eb      	adds	r3, r5, r3
 800aa38:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa3e:	9212      	str	r2, [sp, #72]	; 0x48
 800aa40:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa42:	4a76      	ldr	r2, [pc, #472]	; (800ac1c <_strtod_l+0xbe4>)
 800aa44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa46:	4013      	ands	r3, r2
 800aa48:	9314      	str	r3, [sp, #80]	; 0x50
 800aa4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa4c:	4b74      	ldr	r3, [pc, #464]	; (800ac20 <_strtod_l+0xbe8>)
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d000      	beq.n	800aa54 <_strtod_l+0xa1c>
 800aa52:	e091      	b.n	800ab78 <_strtod_l+0xb40>
 800aa54:	4a73      	ldr	r2, [pc, #460]	; (800ac24 <_strtod_l+0xbec>)
 800aa56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa58:	4694      	mov	ip, r2
 800aa5a:	4463      	add	r3, ip
 800aa5c:	001f      	movs	r7, r3
 800aa5e:	0030      	movs	r0, r6
 800aa60:	0019      	movs	r1, r3
 800aa62:	f7ff f99b 	bl	8009d9c <__ulp>
 800aa66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6a:	f7f6 fce7 	bl	800143c <__aeabi_dmul>
 800aa6e:	0032      	movs	r2, r6
 800aa70:	003b      	movs	r3, r7
 800aa72:	f7f5 fd89 	bl	8000588 <__aeabi_dadd>
 800aa76:	4a69      	ldr	r2, [pc, #420]	; (800ac1c <_strtod_l+0xbe4>)
 800aa78:	4b6b      	ldr	r3, [pc, #428]	; (800ac28 <_strtod_l+0xbf0>)
 800aa7a:	0006      	movs	r6, r0
 800aa7c:	400a      	ands	r2, r1
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d949      	bls.n	800ab16 <_strtod_l+0xade>
 800aa82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa84:	4b69      	ldr	r3, [pc, #420]	; (800ac2c <_strtod_l+0xbf4>)
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d103      	bne.n	800aa92 <_strtod_l+0xa5a>
 800aa8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	d100      	bne.n	800aa92 <_strtod_l+0xa5a>
 800aa90:	e535      	b.n	800a4fe <_strtod_l+0x4c6>
 800aa92:	2601      	movs	r6, #1
 800aa94:	4f65      	ldr	r7, [pc, #404]	; (800ac2c <_strtod_l+0xbf4>)
 800aa96:	4276      	negs	r6, r6
 800aa98:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa9a:	9804      	ldr	r0, [sp, #16]
 800aa9c:	f7fe fe3c 	bl	8009718 <_Bfree>
 800aaa0:	9908      	ldr	r1, [sp, #32]
 800aaa2:	9804      	ldr	r0, [sp, #16]
 800aaa4:	f7fe fe38 	bl	8009718 <_Bfree>
 800aaa8:	9906      	ldr	r1, [sp, #24]
 800aaaa:	9804      	ldr	r0, [sp, #16]
 800aaac:	f7fe fe34 	bl	8009718 <_Bfree>
 800aab0:	9905      	ldr	r1, [sp, #20]
 800aab2:	9804      	ldr	r0, [sp, #16]
 800aab4:	f7fe fe30 	bl	8009718 <_Bfree>
 800aab8:	e60b      	b.n	800a6d2 <_strtod_l+0x69a>
 800aaba:	2e01      	cmp	r6, #1
 800aabc:	d103      	bne.n	800aac6 <_strtod_l+0xa8e>
 800aabe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d100      	bne.n	800aac6 <_strtod_l+0xa8e>
 800aac4:	e58e      	b.n	800a5e4 <_strtod_l+0x5ac>
 800aac6:	2300      	movs	r3, #0
 800aac8:	4c59      	ldr	r4, [pc, #356]	; (800ac30 <_strtod_l+0xbf8>)
 800aaca:	930a      	str	r3, [sp, #40]	; 0x28
 800aacc:	940b      	str	r4, [sp, #44]	; 0x2c
 800aace:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800aad0:	e01c      	b.n	800ab0c <_strtod_l+0xad4>
 800aad2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800aad4:	4d50      	ldr	r5, [pc, #320]	; (800ac18 <_strtod_l+0xbe0>)
 800aad6:	e7ab      	b.n	800aa30 <_strtod_l+0x9f8>
 800aad8:	2200      	movs	r2, #0
 800aada:	0020      	movs	r0, r4
 800aadc:	0029      	movs	r1, r5
 800aade:	4b4e      	ldr	r3, [pc, #312]	; (800ac18 <_strtod_l+0xbe0>)
 800aae0:	f7f6 fcac 	bl	800143c <__aeabi_dmul>
 800aae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aae6:	0004      	movs	r4, r0
 800aae8:	000b      	movs	r3, r1
 800aaea:	000d      	movs	r5, r1
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	d104      	bne.n	800aafa <_strtod_l+0xac2>
 800aaf0:	2280      	movs	r2, #128	; 0x80
 800aaf2:	0612      	lsls	r2, r2, #24
 800aaf4:	900a      	str	r0, [sp, #40]	; 0x28
 800aaf6:	188b      	adds	r3, r1, r2
 800aaf8:	e79e      	b.n	800aa38 <_strtod_l+0xa00>
 800aafa:	0002      	movs	r2, r0
 800aafc:	920a      	str	r2, [sp, #40]	; 0x28
 800aafe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab00:	e79b      	b.n	800aa3a <_strtod_l+0xa02>
 800ab02:	2300      	movs	r3, #0
 800ab04:	4c43      	ldr	r4, [pc, #268]	; (800ac14 <_strtod_l+0xbdc>)
 800ab06:	930a      	str	r3, [sp, #40]	; 0x28
 800ab08:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab0a:	2400      	movs	r4, #0
 800ab0c:	4d41      	ldr	r5, [pc, #260]	; (800ac14 <_strtod_l+0xbdc>)
 800ab0e:	e794      	b.n	800aa3a <_strtod_l+0xa02>
 800ab10:	2300      	movs	r3, #0
 800ab12:	4c47      	ldr	r4, [pc, #284]	; (800ac30 <_strtod_l+0xbf8>)
 800ab14:	e7f7      	b.n	800ab06 <_strtod_l+0xace>
 800ab16:	23d4      	movs	r3, #212	; 0xd4
 800ab18:	049b      	lsls	r3, r3, #18
 800ab1a:	18cf      	adds	r7, r1, r3
 800ab1c:	9b07      	ldr	r3, [sp, #28]
 800ab1e:	970e      	str	r7, [sp, #56]	; 0x38
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1b9      	bne.n	800aa98 <_strtod_l+0xa60>
 800ab24:	4b3d      	ldr	r3, [pc, #244]	; (800ac1c <_strtod_l+0xbe4>)
 800ab26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab28:	403b      	ands	r3, r7
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d1b4      	bne.n	800aa98 <_strtod_l+0xa60>
 800ab2e:	0020      	movs	r0, r4
 800ab30:	0029      	movs	r1, r5
 800ab32:	f7f5 fcd7 	bl	80004e4 <__aeabi_d2lz>
 800ab36:	f7f5 fd11 	bl	800055c <__aeabi_l2d>
 800ab3a:	0002      	movs	r2, r0
 800ab3c:	000b      	movs	r3, r1
 800ab3e:	0020      	movs	r0, r4
 800ab40:	0029      	movs	r1, r5
 800ab42:	f7f6 ff3d 	bl	80019c0 <__aeabi_dsub>
 800ab46:	033b      	lsls	r3, r7, #12
 800ab48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab4a:	0b1b      	lsrs	r3, r3, #12
 800ab4c:	4333      	orrs	r3, r6
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	0004      	movs	r4, r0
 800ab52:	000d      	movs	r5, r1
 800ab54:	4a37      	ldr	r2, [pc, #220]	; (800ac34 <_strtod_l+0xbfc>)
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d054      	beq.n	800ac04 <_strtod_l+0xbcc>
 800ab5a:	4b37      	ldr	r3, [pc, #220]	; (800ac38 <_strtod_l+0xc00>)
 800ab5c:	f7f5 fc7c 	bl	8000458 <__aeabi_dcmplt>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d000      	beq.n	800ab66 <_strtod_l+0xb2e>
 800ab64:	e4d4      	b.n	800a510 <_strtod_l+0x4d8>
 800ab66:	0020      	movs	r0, r4
 800ab68:	0029      	movs	r1, r5
 800ab6a:	4a34      	ldr	r2, [pc, #208]	; (800ac3c <_strtod_l+0xc04>)
 800ab6c:	4b2a      	ldr	r3, [pc, #168]	; (800ac18 <_strtod_l+0xbe0>)
 800ab6e:	f7f5 fc87 	bl	8000480 <__aeabi_dcmpgt>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d090      	beq.n	800aa98 <_strtod_l+0xa60>
 800ab76:	e4cb      	b.n	800a510 <_strtod_l+0x4d8>
 800ab78:	9b07      	ldr	r3, [sp, #28]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d02b      	beq.n	800abd6 <_strtod_l+0xb9e>
 800ab7e:	23d4      	movs	r3, #212	; 0xd4
 800ab80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab82:	04db      	lsls	r3, r3, #19
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d826      	bhi.n	800abd6 <_strtod_l+0xb9e>
 800ab88:	0020      	movs	r0, r4
 800ab8a:	0029      	movs	r1, r5
 800ab8c:	4a2c      	ldr	r2, [pc, #176]	; (800ac40 <_strtod_l+0xc08>)
 800ab8e:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <_strtod_l+0xc0c>)
 800ab90:	f7f5 fc6c 	bl	800046c <__aeabi_dcmple>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d017      	beq.n	800abc8 <_strtod_l+0xb90>
 800ab98:	0020      	movs	r0, r4
 800ab9a:	0029      	movs	r1, r5
 800ab9c:	f7f5 fc84 	bl	80004a8 <__aeabi_d2uiz>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d100      	bne.n	800aba6 <_strtod_l+0xb6e>
 800aba4:	3001      	adds	r0, #1
 800aba6:	f7f7 fb11 	bl	80021cc <__aeabi_ui2d>
 800abaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abac:	0004      	movs	r4, r0
 800abae:	000b      	movs	r3, r1
 800abb0:	000d      	movs	r5, r1
 800abb2:	2a00      	cmp	r2, #0
 800abb4:	d122      	bne.n	800abfc <_strtod_l+0xbc4>
 800abb6:	2280      	movs	r2, #128	; 0x80
 800abb8:	0612      	lsls	r2, r2, #24
 800abba:	188b      	adds	r3, r1, r2
 800abbc:	9016      	str	r0, [sp, #88]	; 0x58
 800abbe:	9317      	str	r3, [sp, #92]	; 0x5c
 800abc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800abc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abc4:	9212      	str	r2, [sp, #72]	; 0x48
 800abc6:	9313      	str	r3, [sp, #76]	; 0x4c
 800abc8:	22d6      	movs	r2, #214	; 0xd6
 800abca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abcc:	04d2      	lsls	r2, r2, #19
 800abce:	189b      	adds	r3, r3, r2
 800abd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abd2:	1a9b      	subs	r3, r3, r2
 800abd4:	9313      	str	r3, [sp, #76]	; 0x4c
 800abd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800abda:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800abdc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800abde:	f7ff f8dd 	bl	8009d9c <__ulp>
 800abe2:	0002      	movs	r2, r0
 800abe4:	000b      	movs	r3, r1
 800abe6:	0030      	movs	r0, r6
 800abe8:	0039      	movs	r1, r7
 800abea:	f7f6 fc27 	bl	800143c <__aeabi_dmul>
 800abee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abf2:	f7f5 fcc9 	bl	8000588 <__aeabi_dadd>
 800abf6:	0006      	movs	r6, r0
 800abf8:	000f      	movs	r7, r1
 800abfa:	e78f      	b.n	800ab1c <_strtod_l+0xae4>
 800abfc:	0002      	movs	r2, r0
 800abfe:	9216      	str	r2, [sp, #88]	; 0x58
 800ac00:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac02:	e7dd      	b.n	800abc0 <_strtod_l+0xb88>
 800ac04:	4b10      	ldr	r3, [pc, #64]	; (800ac48 <_strtod_l+0xc10>)
 800ac06:	f7f5 fc27 	bl	8000458 <__aeabi_dcmplt>
 800ac0a:	e7b2      	b.n	800ab72 <_strtod_l+0xb3a>
 800ac0c:	fff00000 	.word	0xfff00000
 800ac10:	000fffff 	.word	0x000fffff
 800ac14:	3ff00000 	.word	0x3ff00000
 800ac18:	3fe00000 	.word	0x3fe00000
 800ac1c:	7ff00000 	.word	0x7ff00000
 800ac20:	7fe00000 	.word	0x7fe00000
 800ac24:	fcb00000 	.word	0xfcb00000
 800ac28:	7c9fffff 	.word	0x7c9fffff
 800ac2c:	7fefffff 	.word	0x7fefffff
 800ac30:	bff00000 	.word	0xbff00000
 800ac34:	94a03595 	.word	0x94a03595
 800ac38:	3fdfffff 	.word	0x3fdfffff
 800ac3c:	35afe535 	.word	0x35afe535
 800ac40:	ffc00000 	.word	0xffc00000
 800ac44:	41dfffff 	.word	0x41dfffff
 800ac48:	3fcfffff 	.word	0x3fcfffff

0800ac4c <_strtod_r>:
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <_strtod_r+0xc>)
 800ac50:	f7ff f9f2 	bl	800a038 <_strtod_l>
 800ac54:	bd10      	pop	{r4, pc}
 800ac56:	46c0      	nop			; (mov r8, r8)
 800ac58:	2000006c 	.word	0x2000006c

0800ac5c <_strtol_l.constprop.0>:
 800ac5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	001e      	movs	r6, r3
 800ac62:	9005      	str	r0, [sp, #20]
 800ac64:	9101      	str	r1, [sp, #4]
 800ac66:	9202      	str	r2, [sp, #8]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d048      	beq.n	800acfe <_strtol_l.constprop.0+0xa2>
 800ac6c:	000b      	movs	r3, r1
 800ac6e:	2e24      	cmp	r6, #36	; 0x24
 800ac70:	d845      	bhi.n	800acfe <_strtol_l.constprop.0+0xa2>
 800ac72:	4a3b      	ldr	r2, [pc, #236]	; (800ad60 <_strtol_l.constprop.0+0x104>)
 800ac74:	2108      	movs	r1, #8
 800ac76:	4694      	mov	ip, r2
 800ac78:	001a      	movs	r2, r3
 800ac7a:	4660      	mov	r0, ip
 800ac7c:	7814      	ldrb	r4, [r2, #0]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	5d00      	ldrb	r0, [r0, r4]
 800ac82:	001d      	movs	r5, r3
 800ac84:	0007      	movs	r7, r0
 800ac86:	400f      	ands	r7, r1
 800ac88:	4208      	tst	r0, r1
 800ac8a:	d1f5      	bne.n	800ac78 <_strtol_l.constprop.0+0x1c>
 800ac8c:	2c2d      	cmp	r4, #45	; 0x2d
 800ac8e:	d13d      	bne.n	800ad0c <_strtol_l.constprop.0+0xb0>
 800ac90:	2701      	movs	r7, #1
 800ac92:	781c      	ldrb	r4, [r3, #0]
 800ac94:	1c95      	adds	r5, r2, #2
 800ac96:	2e00      	cmp	r6, #0
 800ac98:	d05e      	beq.n	800ad58 <_strtol_l.constprop.0+0xfc>
 800ac9a:	2e10      	cmp	r6, #16
 800ac9c:	d109      	bne.n	800acb2 <_strtol_l.constprop.0+0x56>
 800ac9e:	2c30      	cmp	r4, #48	; 0x30
 800aca0:	d107      	bne.n	800acb2 <_strtol_l.constprop.0+0x56>
 800aca2:	2220      	movs	r2, #32
 800aca4:	782b      	ldrb	r3, [r5, #0]
 800aca6:	4393      	bics	r3, r2
 800aca8:	2b58      	cmp	r3, #88	; 0x58
 800acaa:	d150      	bne.n	800ad4e <_strtol_l.constprop.0+0xf2>
 800acac:	2610      	movs	r6, #16
 800acae:	786c      	ldrb	r4, [r5, #1]
 800acb0:	3502      	adds	r5, #2
 800acb2:	4b2c      	ldr	r3, [pc, #176]	; (800ad64 <_strtol_l.constprop.0+0x108>)
 800acb4:	0031      	movs	r1, r6
 800acb6:	18fb      	adds	r3, r7, r3
 800acb8:	0018      	movs	r0, r3
 800acba:	9303      	str	r3, [sp, #12]
 800acbc:	f7f5 fac6 	bl	800024c <__aeabi_uidivmod>
 800acc0:	2200      	movs	r2, #0
 800acc2:	9104      	str	r1, [sp, #16]
 800acc4:	2101      	movs	r1, #1
 800acc6:	4684      	mov	ip, r0
 800acc8:	0010      	movs	r0, r2
 800acca:	4249      	negs	r1, r1
 800accc:	0023      	movs	r3, r4
 800acce:	3b30      	subs	r3, #48	; 0x30
 800acd0:	2b09      	cmp	r3, #9
 800acd2:	d903      	bls.n	800acdc <_strtol_l.constprop.0+0x80>
 800acd4:	3b11      	subs	r3, #17
 800acd6:	2b19      	cmp	r3, #25
 800acd8:	d81d      	bhi.n	800ad16 <_strtol_l.constprop.0+0xba>
 800acda:	330a      	adds	r3, #10
 800acdc:	429e      	cmp	r6, r3
 800acde:	dd1e      	ble.n	800ad1e <_strtol_l.constprop.0+0xc2>
 800ace0:	1c54      	adds	r4, r2, #1
 800ace2:	d009      	beq.n	800acf8 <_strtol_l.constprop.0+0x9c>
 800ace4:	000a      	movs	r2, r1
 800ace6:	4584      	cmp	ip, r0
 800ace8:	d306      	bcc.n	800acf8 <_strtol_l.constprop.0+0x9c>
 800acea:	d102      	bne.n	800acf2 <_strtol_l.constprop.0+0x96>
 800acec:	9c04      	ldr	r4, [sp, #16]
 800acee:	429c      	cmp	r4, r3
 800acf0:	db02      	blt.n	800acf8 <_strtol_l.constprop.0+0x9c>
 800acf2:	2201      	movs	r2, #1
 800acf4:	4370      	muls	r0, r6
 800acf6:	1818      	adds	r0, r3, r0
 800acf8:	782c      	ldrb	r4, [r5, #0]
 800acfa:	3501      	adds	r5, #1
 800acfc:	e7e6      	b.n	800accc <_strtol_l.constprop.0+0x70>
 800acfe:	f7fd fcdb 	bl	80086b8 <__errno>
 800ad02:	2316      	movs	r3, #22
 800ad04:	6003      	str	r3, [r0, #0]
 800ad06:	2000      	movs	r0, #0
 800ad08:	b007      	add	sp, #28
 800ad0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad0c:	2c2b      	cmp	r4, #43	; 0x2b
 800ad0e:	d1c2      	bne.n	800ac96 <_strtol_l.constprop.0+0x3a>
 800ad10:	781c      	ldrb	r4, [r3, #0]
 800ad12:	1c95      	adds	r5, r2, #2
 800ad14:	e7bf      	b.n	800ac96 <_strtol_l.constprop.0+0x3a>
 800ad16:	0023      	movs	r3, r4
 800ad18:	3b61      	subs	r3, #97	; 0x61
 800ad1a:	2b19      	cmp	r3, #25
 800ad1c:	d9dd      	bls.n	800acda <_strtol_l.constprop.0+0x7e>
 800ad1e:	1c53      	adds	r3, r2, #1
 800ad20:	d109      	bne.n	800ad36 <_strtol_l.constprop.0+0xda>
 800ad22:	2322      	movs	r3, #34	; 0x22
 800ad24:	9a05      	ldr	r2, [sp, #20]
 800ad26:	9803      	ldr	r0, [sp, #12]
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	9b02      	ldr	r3, [sp, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0eb      	beq.n	800ad08 <_strtol_l.constprop.0+0xac>
 800ad30:	1e6b      	subs	r3, r5, #1
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	e007      	b.n	800ad46 <_strtol_l.constprop.0+0xea>
 800ad36:	2f00      	cmp	r7, #0
 800ad38:	d000      	beq.n	800ad3c <_strtol_l.constprop.0+0xe0>
 800ad3a:	4240      	negs	r0, r0
 800ad3c:	9b02      	ldr	r3, [sp, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d0e2      	beq.n	800ad08 <_strtol_l.constprop.0+0xac>
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	d1f4      	bne.n	800ad30 <_strtol_l.constprop.0+0xd4>
 800ad46:	9b02      	ldr	r3, [sp, #8]
 800ad48:	9a01      	ldr	r2, [sp, #4]
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	e7dc      	b.n	800ad08 <_strtol_l.constprop.0+0xac>
 800ad4e:	2430      	movs	r4, #48	; 0x30
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	d1ae      	bne.n	800acb2 <_strtol_l.constprop.0+0x56>
 800ad54:	3608      	adds	r6, #8
 800ad56:	e7ac      	b.n	800acb2 <_strtol_l.constprop.0+0x56>
 800ad58:	2c30      	cmp	r4, #48	; 0x30
 800ad5a:	d0a2      	beq.n	800aca2 <_strtol_l.constprop.0+0x46>
 800ad5c:	260a      	movs	r6, #10
 800ad5e:	e7a8      	b.n	800acb2 <_strtol_l.constprop.0+0x56>
 800ad60:	0800c401 	.word	0x0800c401
 800ad64:	7fffffff 	.word	0x7fffffff

0800ad68 <_strtol_r>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	f7ff ff77 	bl	800ac5c <_strtol_l.constprop.0>
 800ad6e:	bd10      	pop	{r4, pc}

0800ad70 <__ssputs_r>:
 800ad70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad72:	b085      	sub	sp, #20
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	9203      	str	r2, [sp, #12]
 800ad78:	688e      	ldr	r6, [r1, #8]
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	0007      	movs	r7, r0
 800ad7e:	000c      	movs	r4, r1
 800ad80:	680b      	ldr	r3, [r1, #0]
 800ad82:	4296      	cmp	r6, r2
 800ad84:	d831      	bhi.n	800adea <__ssputs_r+0x7a>
 800ad86:	898a      	ldrh	r2, [r1, #12]
 800ad88:	2190      	movs	r1, #144	; 0x90
 800ad8a:	00c9      	lsls	r1, r1, #3
 800ad8c:	420a      	tst	r2, r1
 800ad8e:	d029      	beq.n	800ade4 <__ssputs_r+0x74>
 800ad90:	2003      	movs	r0, #3
 800ad92:	6921      	ldr	r1, [r4, #16]
 800ad94:	1a5b      	subs	r3, r3, r1
 800ad96:	9302      	str	r3, [sp, #8]
 800ad98:	6963      	ldr	r3, [r4, #20]
 800ad9a:	4343      	muls	r3, r0
 800ad9c:	0fdd      	lsrs	r5, r3, #31
 800ad9e:	18ed      	adds	r5, r5, r3
 800ada0:	9b01      	ldr	r3, [sp, #4]
 800ada2:	9802      	ldr	r0, [sp, #8]
 800ada4:	3301      	adds	r3, #1
 800ada6:	181b      	adds	r3, r3, r0
 800ada8:	106d      	asrs	r5, r5, #1
 800adaa:	42ab      	cmp	r3, r5
 800adac:	d900      	bls.n	800adb0 <__ssputs_r+0x40>
 800adae:	001d      	movs	r5, r3
 800adb0:	0552      	lsls	r2, r2, #21
 800adb2:	d529      	bpl.n	800ae08 <__ssputs_r+0x98>
 800adb4:	0029      	movs	r1, r5
 800adb6:	0038      	movs	r0, r7
 800adb8:	f7fe fbd8 	bl	800956c <_malloc_r>
 800adbc:	1e06      	subs	r6, r0, #0
 800adbe:	d02d      	beq.n	800ae1c <__ssputs_r+0xac>
 800adc0:	9a02      	ldr	r2, [sp, #8]
 800adc2:	6921      	ldr	r1, [r4, #16]
 800adc4:	f7fd fcb0 	bl	8008728 <memcpy>
 800adc8:	89a2      	ldrh	r2, [r4, #12]
 800adca:	4b19      	ldr	r3, [pc, #100]	; (800ae30 <__ssputs_r+0xc0>)
 800adcc:	401a      	ands	r2, r3
 800adce:	2380      	movs	r3, #128	; 0x80
 800add0:	4313      	orrs	r3, r2
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	9b02      	ldr	r3, [sp, #8]
 800add6:	6126      	str	r6, [r4, #16]
 800add8:	18f6      	adds	r6, r6, r3
 800adda:	6026      	str	r6, [r4, #0]
 800addc:	6165      	str	r5, [r4, #20]
 800adde:	9e01      	ldr	r6, [sp, #4]
 800ade0:	1aed      	subs	r5, r5, r3
 800ade2:	60a5      	str	r5, [r4, #8]
 800ade4:	9b01      	ldr	r3, [sp, #4]
 800ade6:	429e      	cmp	r6, r3
 800ade8:	d900      	bls.n	800adec <__ssputs_r+0x7c>
 800adea:	9e01      	ldr	r6, [sp, #4]
 800adec:	0032      	movs	r2, r6
 800adee:	9903      	ldr	r1, [sp, #12]
 800adf0:	6820      	ldr	r0, [r4, #0]
 800adf2:	f000 f9d4 	bl	800b19e <memmove>
 800adf6:	2000      	movs	r0, #0
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	1b9b      	subs	r3, r3, r6
 800adfc:	60a3      	str	r3, [r4, #8]
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	199b      	adds	r3, r3, r6
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	b005      	add	sp, #20
 800ae06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae08:	002a      	movs	r2, r5
 800ae0a:	0038      	movs	r0, r7
 800ae0c:	f000 fdbe 	bl	800b98c <_realloc_r>
 800ae10:	1e06      	subs	r6, r0, #0
 800ae12:	d1df      	bne.n	800add4 <__ssputs_r+0x64>
 800ae14:	0038      	movs	r0, r7
 800ae16:	6921      	ldr	r1, [r4, #16]
 800ae18:	f7fe fb32 	bl	8009480 <_free_r>
 800ae1c:	230c      	movs	r3, #12
 800ae1e:	2001      	movs	r0, #1
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	89a2      	ldrh	r2, [r4, #12]
 800ae24:	3334      	adds	r3, #52	; 0x34
 800ae26:	4313      	orrs	r3, r2
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	4240      	negs	r0, r0
 800ae2c:	e7ea      	b.n	800ae04 <__ssputs_r+0x94>
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	fffffb7f 	.word	0xfffffb7f

0800ae34 <_svfiprintf_r>:
 800ae34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae36:	b0a1      	sub	sp, #132	; 0x84
 800ae38:	9003      	str	r0, [sp, #12]
 800ae3a:	001d      	movs	r5, r3
 800ae3c:	898b      	ldrh	r3, [r1, #12]
 800ae3e:	000f      	movs	r7, r1
 800ae40:	0016      	movs	r6, r2
 800ae42:	061b      	lsls	r3, r3, #24
 800ae44:	d511      	bpl.n	800ae6a <_svfiprintf_r+0x36>
 800ae46:	690b      	ldr	r3, [r1, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10e      	bne.n	800ae6a <_svfiprintf_r+0x36>
 800ae4c:	2140      	movs	r1, #64	; 0x40
 800ae4e:	f7fe fb8d 	bl	800956c <_malloc_r>
 800ae52:	6038      	str	r0, [r7, #0]
 800ae54:	6138      	str	r0, [r7, #16]
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d105      	bne.n	800ae66 <_svfiprintf_r+0x32>
 800ae5a:	230c      	movs	r3, #12
 800ae5c:	9a03      	ldr	r2, [sp, #12]
 800ae5e:	3801      	subs	r0, #1
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	b021      	add	sp, #132	; 0x84
 800ae64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae66:	2340      	movs	r3, #64	; 0x40
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	ac08      	add	r4, sp, #32
 800ae6e:	6163      	str	r3, [r4, #20]
 800ae70:	3320      	adds	r3, #32
 800ae72:	7663      	strb	r3, [r4, #25]
 800ae74:	3310      	adds	r3, #16
 800ae76:	76a3      	strb	r3, [r4, #26]
 800ae78:	9507      	str	r5, [sp, #28]
 800ae7a:	0035      	movs	r5, r6
 800ae7c:	782b      	ldrb	r3, [r5, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <_svfiprintf_r+0x52>
 800ae82:	2b25      	cmp	r3, #37	; 0x25
 800ae84:	d148      	bne.n	800af18 <_svfiprintf_r+0xe4>
 800ae86:	1bab      	subs	r3, r5, r6
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	42b5      	cmp	r5, r6
 800ae8c:	d00b      	beq.n	800aea6 <_svfiprintf_r+0x72>
 800ae8e:	0032      	movs	r2, r6
 800ae90:	0039      	movs	r1, r7
 800ae92:	9803      	ldr	r0, [sp, #12]
 800ae94:	f7ff ff6c 	bl	800ad70 <__ssputs_r>
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d100      	bne.n	800ae9e <_svfiprintf_r+0x6a>
 800ae9c:	e0af      	b.n	800affe <_svfiprintf_r+0x1ca>
 800ae9e:	6963      	ldr	r3, [r4, #20]
 800aea0:	9a05      	ldr	r2, [sp, #20]
 800aea2:	189b      	adds	r3, r3, r2
 800aea4:	6163      	str	r3, [r4, #20]
 800aea6:	782b      	ldrb	r3, [r5, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d100      	bne.n	800aeae <_svfiprintf_r+0x7a>
 800aeac:	e0a7      	b.n	800affe <_svfiprintf_r+0x1ca>
 800aeae:	2201      	movs	r2, #1
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4252      	negs	r2, r2
 800aeb4:	6062      	str	r2, [r4, #4]
 800aeb6:	a904      	add	r1, sp, #16
 800aeb8:	3254      	adds	r2, #84	; 0x54
 800aeba:	1852      	adds	r2, r2, r1
 800aebc:	1c6e      	adds	r6, r5, #1
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	60e3      	str	r3, [r4, #12]
 800aec2:	60a3      	str	r3, [r4, #8]
 800aec4:	7013      	strb	r3, [r2, #0]
 800aec6:	65a3      	str	r3, [r4, #88]	; 0x58
 800aec8:	4b55      	ldr	r3, [pc, #340]	; (800b020 <_svfiprintf_r+0x1ec>)
 800aeca:	2205      	movs	r2, #5
 800aecc:	0018      	movs	r0, r3
 800aece:	7831      	ldrb	r1, [r6, #0]
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	f7fd fc1e 	bl	8008712 <memchr>
 800aed6:	1c75      	adds	r5, r6, #1
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d11f      	bne.n	800af1c <_svfiprintf_r+0xe8>
 800aedc:	6822      	ldr	r2, [r4, #0]
 800aede:	06d3      	lsls	r3, r2, #27
 800aee0:	d504      	bpl.n	800aeec <_svfiprintf_r+0xb8>
 800aee2:	2353      	movs	r3, #83	; 0x53
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	185b      	adds	r3, r3, r1
 800aee8:	2120      	movs	r1, #32
 800aeea:	7019      	strb	r1, [r3, #0]
 800aeec:	0713      	lsls	r3, r2, #28
 800aeee:	d504      	bpl.n	800aefa <_svfiprintf_r+0xc6>
 800aef0:	2353      	movs	r3, #83	; 0x53
 800aef2:	a904      	add	r1, sp, #16
 800aef4:	185b      	adds	r3, r3, r1
 800aef6:	212b      	movs	r1, #43	; 0x2b
 800aef8:	7019      	strb	r1, [r3, #0]
 800aefa:	7833      	ldrb	r3, [r6, #0]
 800aefc:	2b2a      	cmp	r3, #42	; 0x2a
 800aefe:	d016      	beq.n	800af2e <_svfiprintf_r+0xfa>
 800af00:	0035      	movs	r5, r6
 800af02:	2100      	movs	r1, #0
 800af04:	200a      	movs	r0, #10
 800af06:	68e3      	ldr	r3, [r4, #12]
 800af08:	782a      	ldrb	r2, [r5, #0]
 800af0a:	1c6e      	adds	r6, r5, #1
 800af0c:	3a30      	subs	r2, #48	; 0x30
 800af0e:	2a09      	cmp	r2, #9
 800af10:	d94e      	bls.n	800afb0 <_svfiprintf_r+0x17c>
 800af12:	2900      	cmp	r1, #0
 800af14:	d111      	bne.n	800af3a <_svfiprintf_r+0x106>
 800af16:	e017      	b.n	800af48 <_svfiprintf_r+0x114>
 800af18:	3501      	adds	r5, #1
 800af1a:	e7af      	b.n	800ae7c <_svfiprintf_r+0x48>
 800af1c:	9b05      	ldr	r3, [sp, #20]
 800af1e:	6822      	ldr	r2, [r4, #0]
 800af20:	1ac0      	subs	r0, r0, r3
 800af22:	2301      	movs	r3, #1
 800af24:	4083      	lsls	r3, r0
 800af26:	4313      	orrs	r3, r2
 800af28:	002e      	movs	r6, r5
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	e7cc      	b.n	800aec8 <_svfiprintf_r+0x94>
 800af2e:	9b07      	ldr	r3, [sp, #28]
 800af30:	1d19      	adds	r1, r3, #4
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	9107      	str	r1, [sp, #28]
 800af36:	2b00      	cmp	r3, #0
 800af38:	db01      	blt.n	800af3e <_svfiprintf_r+0x10a>
 800af3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af3c:	e004      	b.n	800af48 <_svfiprintf_r+0x114>
 800af3e:	425b      	negs	r3, r3
 800af40:	60e3      	str	r3, [r4, #12]
 800af42:	2302      	movs	r3, #2
 800af44:	4313      	orrs	r3, r2
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	782b      	ldrb	r3, [r5, #0]
 800af4a:	2b2e      	cmp	r3, #46	; 0x2e
 800af4c:	d10a      	bne.n	800af64 <_svfiprintf_r+0x130>
 800af4e:	786b      	ldrb	r3, [r5, #1]
 800af50:	2b2a      	cmp	r3, #42	; 0x2a
 800af52:	d135      	bne.n	800afc0 <_svfiprintf_r+0x18c>
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	3502      	adds	r5, #2
 800af58:	1d1a      	adds	r2, r3, #4
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	9207      	str	r2, [sp, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	db2b      	blt.n	800afba <_svfiprintf_r+0x186>
 800af62:	9309      	str	r3, [sp, #36]	; 0x24
 800af64:	4e2f      	ldr	r6, [pc, #188]	; (800b024 <_svfiprintf_r+0x1f0>)
 800af66:	2203      	movs	r2, #3
 800af68:	0030      	movs	r0, r6
 800af6a:	7829      	ldrb	r1, [r5, #0]
 800af6c:	f7fd fbd1 	bl	8008712 <memchr>
 800af70:	2800      	cmp	r0, #0
 800af72:	d006      	beq.n	800af82 <_svfiprintf_r+0x14e>
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	1b80      	subs	r0, r0, r6
 800af78:	4083      	lsls	r3, r0
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	3501      	adds	r5, #1
 800af7e:	4313      	orrs	r3, r2
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	7829      	ldrb	r1, [r5, #0]
 800af84:	2206      	movs	r2, #6
 800af86:	4828      	ldr	r0, [pc, #160]	; (800b028 <_svfiprintf_r+0x1f4>)
 800af88:	1c6e      	adds	r6, r5, #1
 800af8a:	7621      	strb	r1, [r4, #24]
 800af8c:	f7fd fbc1 	bl	8008712 <memchr>
 800af90:	2800      	cmp	r0, #0
 800af92:	d03c      	beq.n	800b00e <_svfiprintf_r+0x1da>
 800af94:	4b25      	ldr	r3, [pc, #148]	; (800b02c <_svfiprintf_r+0x1f8>)
 800af96:	2b00      	cmp	r3, #0
 800af98:	d125      	bne.n	800afe6 <_svfiprintf_r+0x1b2>
 800af9a:	2207      	movs	r2, #7
 800af9c:	9b07      	ldr	r3, [sp, #28]
 800af9e:	3307      	adds	r3, #7
 800afa0:	4393      	bics	r3, r2
 800afa2:	3308      	adds	r3, #8
 800afa4:	9307      	str	r3, [sp, #28]
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	189b      	adds	r3, r3, r2
 800afac:	6163      	str	r3, [r4, #20]
 800afae:	e764      	b.n	800ae7a <_svfiprintf_r+0x46>
 800afb0:	4343      	muls	r3, r0
 800afb2:	0035      	movs	r5, r6
 800afb4:	2101      	movs	r1, #1
 800afb6:	189b      	adds	r3, r3, r2
 800afb8:	e7a6      	b.n	800af08 <_svfiprintf_r+0xd4>
 800afba:	2301      	movs	r3, #1
 800afbc:	425b      	negs	r3, r3
 800afbe:	e7d0      	b.n	800af62 <_svfiprintf_r+0x12e>
 800afc0:	2300      	movs	r3, #0
 800afc2:	200a      	movs	r0, #10
 800afc4:	001a      	movs	r2, r3
 800afc6:	3501      	adds	r5, #1
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	7829      	ldrb	r1, [r5, #0]
 800afcc:	1c6e      	adds	r6, r5, #1
 800afce:	3930      	subs	r1, #48	; 0x30
 800afd0:	2909      	cmp	r1, #9
 800afd2:	d903      	bls.n	800afdc <_svfiprintf_r+0x1a8>
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0c5      	beq.n	800af64 <_svfiprintf_r+0x130>
 800afd8:	9209      	str	r2, [sp, #36]	; 0x24
 800afda:	e7c3      	b.n	800af64 <_svfiprintf_r+0x130>
 800afdc:	4342      	muls	r2, r0
 800afde:	0035      	movs	r5, r6
 800afe0:	2301      	movs	r3, #1
 800afe2:	1852      	adds	r2, r2, r1
 800afe4:	e7f1      	b.n	800afca <_svfiprintf_r+0x196>
 800afe6:	aa07      	add	r2, sp, #28
 800afe8:	9200      	str	r2, [sp, #0]
 800afea:	0021      	movs	r1, r4
 800afec:	003a      	movs	r2, r7
 800afee:	4b10      	ldr	r3, [pc, #64]	; (800b030 <_svfiprintf_r+0x1fc>)
 800aff0:	9803      	ldr	r0, [sp, #12]
 800aff2:	f7fc fb9b 	bl	800772c <_printf_float>
 800aff6:	9004      	str	r0, [sp, #16]
 800aff8:	9b04      	ldr	r3, [sp, #16]
 800affa:	3301      	adds	r3, #1
 800affc:	d1d3      	bne.n	800afa6 <_svfiprintf_r+0x172>
 800affe:	89bb      	ldrh	r3, [r7, #12]
 800b000:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b002:	065b      	lsls	r3, r3, #25
 800b004:	d400      	bmi.n	800b008 <_svfiprintf_r+0x1d4>
 800b006:	e72c      	b.n	800ae62 <_svfiprintf_r+0x2e>
 800b008:	2001      	movs	r0, #1
 800b00a:	4240      	negs	r0, r0
 800b00c:	e729      	b.n	800ae62 <_svfiprintf_r+0x2e>
 800b00e:	aa07      	add	r2, sp, #28
 800b010:	9200      	str	r2, [sp, #0]
 800b012:	0021      	movs	r1, r4
 800b014:	003a      	movs	r2, r7
 800b016:	4b06      	ldr	r3, [pc, #24]	; (800b030 <_svfiprintf_r+0x1fc>)
 800b018:	9803      	ldr	r0, [sp, #12]
 800b01a:	f7fc fe4d 	bl	8007cb8 <_printf_i>
 800b01e:	e7ea      	b.n	800aff6 <_svfiprintf_r+0x1c2>
 800b020:	0800c501 	.word	0x0800c501
 800b024:	0800c507 	.word	0x0800c507
 800b028:	0800c50b 	.word	0x0800c50b
 800b02c:	0800772d 	.word	0x0800772d
 800b030:	0800ad71 	.word	0x0800ad71

0800b034 <__sflush_r>:
 800b034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b036:	898b      	ldrh	r3, [r1, #12]
 800b038:	0005      	movs	r5, r0
 800b03a:	000c      	movs	r4, r1
 800b03c:	071a      	lsls	r2, r3, #28
 800b03e:	d45c      	bmi.n	800b0fa <__sflush_r+0xc6>
 800b040:	684a      	ldr	r2, [r1, #4]
 800b042:	2a00      	cmp	r2, #0
 800b044:	dc04      	bgt.n	800b050 <__sflush_r+0x1c>
 800b046:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b048:	2a00      	cmp	r2, #0
 800b04a:	dc01      	bgt.n	800b050 <__sflush_r+0x1c>
 800b04c:	2000      	movs	r0, #0
 800b04e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b050:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b052:	2f00      	cmp	r7, #0
 800b054:	d0fa      	beq.n	800b04c <__sflush_r+0x18>
 800b056:	2200      	movs	r2, #0
 800b058:	2080      	movs	r0, #128	; 0x80
 800b05a:	682e      	ldr	r6, [r5, #0]
 800b05c:	602a      	str	r2, [r5, #0]
 800b05e:	001a      	movs	r2, r3
 800b060:	0140      	lsls	r0, r0, #5
 800b062:	6a21      	ldr	r1, [r4, #32]
 800b064:	4002      	ands	r2, r0
 800b066:	4203      	tst	r3, r0
 800b068:	d034      	beq.n	800b0d4 <__sflush_r+0xa0>
 800b06a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	075b      	lsls	r3, r3, #29
 800b070:	d506      	bpl.n	800b080 <__sflush_r+0x4c>
 800b072:	6863      	ldr	r3, [r4, #4]
 800b074:	1ac0      	subs	r0, r0, r3
 800b076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <__sflush_r+0x4c>
 800b07c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b07e:	1ac0      	subs	r0, r0, r3
 800b080:	0002      	movs	r2, r0
 800b082:	2300      	movs	r3, #0
 800b084:	0028      	movs	r0, r5
 800b086:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b088:	6a21      	ldr	r1, [r4, #32]
 800b08a:	47b8      	blx	r7
 800b08c:	89a2      	ldrh	r2, [r4, #12]
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	d106      	bne.n	800b0a0 <__sflush_r+0x6c>
 800b092:	6829      	ldr	r1, [r5, #0]
 800b094:	291d      	cmp	r1, #29
 800b096:	d82c      	bhi.n	800b0f2 <__sflush_r+0xbe>
 800b098:	4b2a      	ldr	r3, [pc, #168]	; (800b144 <__sflush_r+0x110>)
 800b09a:	410b      	asrs	r3, r1
 800b09c:	07db      	lsls	r3, r3, #31
 800b09e:	d428      	bmi.n	800b0f2 <__sflush_r+0xbe>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	6063      	str	r3, [r4, #4]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	04d2      	lsls	r2, r2, #19
 800b0aa:	d505      	bpl.n	800b0b8 <__sflush_r+0x84>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <__sflush_r+0x82>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d100      	bne.n	800b0b8 <__sflush_r+0x84>
 800b0b6:	6560      	str	r0, [r4, #84]	; 0x54
 800b0b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ba:	602e      	str	r6, [r5, #0]
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	d0c5      	beq.n	800b04c <__sflush_r+0x18>
 800b0c0:	0023      	movs	r3, r4
 800b0c2:	3344      	adds	r3, #68	; 0x44
 800b0c4:	4299      	cmp	r1, r3
 800b0c6:	d002      	beq.n	800b0ce <__sflush_r+0x9a>
 800b0c8:	0028      	movs	r0, r5
 800b0ca:	f7fe f9d9 	bl	8009480 <_free_r>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b0d2:	e7bc      	b.n	800b04e <__sflush_r+0x1a>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	0028      	movs	r0, r5
 800b0d8:	47b8      	blx	r7
 800b0da:	1c43      	adds	r3, r0, #1
 800b0dc:	d1c6      	bne.n	800b06c <__sflush_r+0x38>
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d0c3      	beq.n	800b06c <__sflush_r+0x38>
 800b0e4:	2b1d      	cmp	r3, #29
 800b0e6:	d001      	beq.n	800b0ec <__sflush_r+0xb8>
 800b0e8:	2b16      	cmp	r3, #22
 800b0ea:	d101      	bne.n	800b0f0 <__sflush_r+0xbc>
 800b0ec:	602e      	str	r6, [r5, #0]
 800b0ee:	e7ad      	b.n	800b04c <__sflush_r+0x18>
 800b0f0:	89a2      	ldrh	r2, [r4, #12]
 800b0f2:	2340      	movs	r3, #64	; 0x40
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	81a3      	strh	r3, [r4, #12]
 800b0f8:	e7a9      	b.n	800b04e <__sflush_r+0x1a>
 800b0fa:	690e      	ldr	r6, [r1, #16]
 800b0fc:	2e00      	cmp	r6, #0
 800b0fe:	d0a5      	beq.n	800b04c <__sflush_r+0x18>
 800b100:	680f      	ldr	r7, [r1, #0]
 800b102:	600e      	str	r6, [r1, #0]
 800b104:	1bba      	subs	r2, r7, r6
 800b106:	9201      	str	r2, [sp, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	079b      	lsls	r3, r3, #30
 800b10c:	d100      	bne.n	800b110 <__sflush_r+0xdc>
 800b10e:	694a      	ldr	r2, [r1, #20]
 800b110:	60a2      	str	r2, [r4, #8]
 800b112:	9b01      	ldr	r3, [sp, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	dd99      	ble.n	800b04c <__sflush_r+0x18>
 800b118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b11a:	0032      	movs	r2, r6
 800b11c:	001f      	movs	r7, r3
 800b11e:	0028      	movs	r0, r5
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	6a21      	ldr	r1, [r4, #32]
 800b124:	47b8      	blx	r7
 800b126:	2800      	cmp	r0, #0
 800b128:	dc06      	bgt.n	800b138 <__sflush_r+0x104>
 800b12a:	2340      	movs	r3, #64	; 0x40
 800b12c:	2001      	movs	r0, #1
 800b12e:	89a2      	ldrh	r2, [r4, #12]
 800b130:	4240      	negs	r0, r0
 800b132:	4313      	orrs	r3, r2
 800b134:	81a3      	strh	r3, [r4, #12]
 800b136:	e78a      	b.n	800b04e <__sflush_r+0x1a>
 800b138:	9b01      	ldr	r3, [sp, #4]
 800b13a:	1836      	adds	r6, r6, r0
 800b13c:	1a1b      	subs	r3, r3, r0
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	e7e7      	b.n	800b112 <__sflush_r+0xde>
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	dfbffffe 	.word	0xdfbffffe

0800b148 <_fflush_r>:
 800b148:	690b      	ldr	r3, [r1, #16]
 800b14a:	b570      	push	{r4, r5, r6, lr}
 800b14c:	0005      	movs	r5, r0
 800b14e:	000c      	movs	r4, r1
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <_fflush_r+0x12>
 800b154:	2500      	movs	r5, #0
 800b156:	0028      	movs	r0, r5
 800b158:	bd70      	pop	{r4, r5, r6, pc}
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d004      	beq.n	800b168 <_fflush_r+0x20>
 800b15e:	6a03      	ldr	r3, [r0, #32]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <_fflush_r+0x20>
 800b164:	f7fd f950 	bl	8008408 <__sinit>
 800b168:	220c      	movs	r2, #12
 800b16a:	5ea3      	ldrsh	r3, [r4, r2]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0f1      	beq.n	800b154 <_fflush_r+0xc>
 800b170:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b172:	07d2      	lsls	r2, r2, #31
 800b174:	d404      	bmi.n	800b180 <_fflush_r+0x38>
 800b176:	059b      	lsls	r3, r3, #22
 800b178:	d402      	bmi.n	800b180 <_fflush_r+0x38>
 800b17a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b17c:	f7fd fac7 	bl	800870e <__retarget_lock_acquire_recursive>
 800b180:	0028      	movs	r0, r5
 800b182:	0021      	movs	r1, r4
 800b184:	f7ff ff56 	bl	800b034 <__sflush_r>
 800b188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b18a:	0005      	movs	r5, r0
 800b18c:	07db      	lsls	r3, r3, #31
 800b18e:	d4e2      	bmi.n	800b156 <_fflush_r+0xe>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	059b      	lsls	r3, r3, #22
 800b194:	d4df      	bmi.n	800b156 <_fflush_r+0xe>
 800b196:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b198:	f7fd faba 	bl	8008710 <__retarget_lock_release_recursive>
 800b19c:	e7db      	b.n	800b156 <_fflush_r+0xe>

0800b19e <memmove>:
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	4288      	cmp	r0, r1
 800b1a2:	d902      	bls.n	800b1aa <memmove+0xc>
 800b1a4:	188b      	adds	r3, r1, r2
 800b1a6:	4298      	cmp	r0, r3
 800b1a8:	d303      	bcc.n	800b1b2 <memmove+0x14>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e007      	b.n	800b1be <memmove+0x20>
 800b1ae:	5c8b      	ldrb	r3, [r1, r2]
 800b1b0:	5483      	strb	r3, [r0, r2]
 800b1b2:	3a01      	subs	r2, #1
 800b1b4:	d2fb      	bcs.n	800b1ae <memmove+0x10>
 800b1b6:	bd10      	pop	{r4, pc}
 800b1b8:	5ccc      	ldrb	r4, [r1, r3]
 800b1ba:	54c4      	strb	r4, [r0, r3]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d1fa      	bne.n	800b1b8 <memmove+0x1a>
 800b1c2:	e7f8      	b.n	800b1b6 <memmove+0x18>

0800b1c4 <strncmp>:
 800b1c4:	b530      	push	{r4, r5, lr}
 800b1c6:	0005      	movs	r5, r0
 800b1c8:	1e10      	subs	r0, r2, #0
 800b1ca:	d00b      	beq.n	800b1e4 <strncmp+0x20>
 800b1cc:	2400      	movs	r4, #0
 800b1ce:	3a01      	subs	r2, #1
 800b1d0:	5d2b      	ldrb	r3, [r5, r4]
 800b1d2:	5d08      	ldrb	r0, [r1, r4]
 800b1d4:	4283      	cmp	r3, r0
 800b1d6:	d104      	bne.n	800b1e2 <strncmp+0x1e>
 800b1d8:	42a2      	cmp	r2, r4
 800b1da:	d002      	beq.n	800b1e2 <strncmp+0x1e>
 800b1dc:	3401      	adds	r4, #1
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1f6      	bne.n	800b1d0 <strncmp+0xc>
 800b1e2:	1a18      	subs	r0, r3, r0
 800b1e4:	bd30      	pop	{r4, r5, pc}
	...

0800b1e8 <_sbrk_r>:
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	b570      	push	{r4, r5, r6, lr}
 800b1ec:	4d06      	ldr	r5, [pc, #24]	; (800b208 <_sbrk_r+0x20>)
 800b1ee:	0004      	movs	r4, r0
 800b1f0:	0008      	movs	r0, r1
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	f7f7 feba 	bl	8002f6c <_sbrk>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d103      	bne.n	800b204 <_sbrk_r+0x1c>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d000      	beq.n	800b204 <_sbrk_r+0x1c>
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	bd70      	pop	{r4, r5, r6, pc}
 800b206:	46c0      	nop			; (mov r8, r8)
 800b208:	2000221c 	.word	0x2000221c

0800b20c <nan>:
 800b20c:	2000      	movs	r0, #0
 800b20e:	4901      	ldr	r1, [pc, #4]	; (800b214 <nan+0x8>)
 800b210:	4770      	bx	lr
 800b212:	46c0      	nop			; (mov r8, r8)
 800b214:	7ff80000 	.word	0x7ff80000

0800b218 <__assert_func>:
 800b218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b21a:	0014      	movs	r4, r2
 800b21c:	001a      	movs	r2, r3
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <__assert_func+0x2c>)
 800b220:	0005      	movs	r5, r0
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	000e      	movs	r6, r1
 800b226:	68d8      	ldr	r0, [r3, #12]
 800b228:	4b07      	ldr	r3, [pc, #28]	; (800b248 <__assert_func+0x30>)
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d101      	bne.n	800b232 <__assert_func+0x1a>
 800b22e:	4b07      	ldr	r3, [pc, #28]	; (800b24c <__assert_func+0x34>)
 800b230:	001c      	movs	r4, r3
 800b232:	4907      	ldr	r1, [pc, #28]	; (800b250 <__assert_func+0x38>)
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	9402      	str	r4, [sp, #8]
 800b238:	002b      	movs	r3, r5
 800b23a:	9600      	str	r6, [sp, #0]
 800b23c:	f000 fbe2 	bl	800ba04 <fiprintf>
 800b240:	f000 fbf0 	bl	800ba24 <abort>
 800b244:	20000068 	.word	0x20000068
 800b248:	0800c51a 	.word	0x0800c51a
 800b24c:	0800c555 	.word	0x0800c555
 800b250:	0800c527 	.word	0x0800c527

0800b254 <_calloc_r>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	0c0b      	lsrs	r3, r1, #16
 800b258:	0c15      	lsrs	r5, r2, #16
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11e      	bne.n	800b29c <_calloc_r+0x48>
 800b25e:	2d00      	cmp	r5, #0
 800b260:	d10c      	bne.n	800b27c <_calloc_r+0x28>
 800b262:	b289      	uxth	r1, r1
 800b264:	b294      	uxth	r4, r2
 800b266:	434c      	muls	r4, r1
 800b268:	0021      	movs	r1, r4
 800b26a:	f7fe f97f 	bl	800956c <_malloc_r>
 800b26e:	1e05      	subs	r5, r0, #0
 800b270:	d01b      	beq.n	800b2aa <_calloc_r+0x56>
 800b272:	0022      	movs	r2, r4
 800b274:	2100      	movs	r1, #0
 800b276:	f7fd f967 	bl	8008548 <memset>
 800b27a:	e016      	b.n	800b2aa <_calloc_r+0x56>
 800b27c:	1c2b      	adds	r3, r5, #0
 800b27e:	1c0c      	adds	r4, r1, #0
 800b280:	b289      	uxth	r1, r1
 800b282:	b292      	uxth	r2, r2
 800b284:	434a      	muls	r2, r1
 800b286:	b2a1      	uxth	r1, r4
 800b288:	b29c      	uxth	r4, r3
 800b28a:	434c      	muls	r4, r1
 800b28c:	0c13      	lsrs	r3, r2, #16
 800b28e:	18e4      	adds	r4, r4, r3
 800b290:	0c23      	lsrs	r3, r4, #16
 800b292:	d107      	bne.n	800b2a4 <_calloc_r+0x50>
 800b294:	0424      	lsls	r4, r4, #16
 800b296:	b292      	uxth	r2, r2
 800b298:	4314      	orrs	r4, r2
 800b29a:	e7e5      	b.n	800b268 <_calloc_r+0x14>
 800b29c:	2d00      	cmp	r5, #0
 800b29e:	d101      	bne.n	800b2a4 <_calloc_r+0x50>
 800b2a0:	1c14      	adds	r4, r2, #0
 800b2a2:	e7ed      	b.n	800b280 <_calloc_r+0x2c>
 800b2a4:	230c      	movs	r3, #12
 800b2a6:	2500      	movs	r5, #0
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	0028      	movs	r0, r5
 800b2ac:	bd70      	pop	{r4, r5, r6, pc}

0800b2ae <rshift>:
 800b2ae:	0002      	movs	r2, r0
 800b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b2:	6904      	ldr	r4, [r0, #16]
 800b2b4:	114b      	asrs	r3, r1, #5
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	3214      	adds	r2, #20
 800b2ba:	9302      	str	r3, [sp, #8]
 800b2bc:	114d      	asrs	r5, r1, #5
 800b2be:	0013      	movs	r3, r2
 800b2c0:	42ac      	cmp	r4, r5
 800b2c2:	dd32      	ble.n	800b32a <rshift+0x7c>
 800b2c4:	261f      	movs	r6, #31
 800b2c6:	000f      	movs	r7, r1
 800b2c8:	114b      	asrs	r3, r1, #5
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	00a5      	lsls	r5, r4, #2
 800b2ce:	18d3      	adds	r3, r2, r3
 800b2d0:	4037      	ands	r7, r6
 800b2d2:	1955      	adds	r5, r2, r5
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	9701      	str	r7, [sp, #4]
 800b2d8:	4231      	tst	r1, r6
 800b2da:	d10d      	bne.n	800b2f8 <rshift+0x4a>
 800b2dc:	0016      	movs	r6, r2
 800b2de:	0019      	movs	r1, r3
 800b2e0:	428d      	cmp	r5, r1
 800b2e2:	d836      	bhi.n	800b352 <rshift+0xa4>
 800b2e4:	9900      	ldr	r1, [sp, #0]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	3903      	subs	r1, #3
 800b2ea:	428d      	cmp	r5, r1
 800b2ec:	d302      	bcc.n	800b2f4 <rshift+0x46>
 800b2ee:	9b02      	ldr	r3, [sp, #8]
 800b2f0:	1ae4      	subs	r4, r4, r3
 800b2f2:	00a3      	lsls	r3, r4, #2
 800b2f4:	18d3      	adds	r3, r2, r3
 800b2f6:	e018      	b.n	800b32a <rshift+0x7c>
 800b2f8:	2120      	movs	r1, #32
 800b2fa:	9e01      	ldr	r6, [sp, #4]
 800b2fc:	9f01      	ldr	r7, [sp, #4]
 800b2fe:	1b89      	subs	r1, r1, r6
 800b300:	9e00      	ldr	r6, [sp, #0]
 800b302:	9103      	str	r1, [sp, #12]
 800b304:	ce02      	ldmia	r6!, {r1}
 800b306:	4694      	mov	ip, r2
 800b308:	40f9      	lsrs	r1, r7
 800b30a:	42b5      	cmp	r5, r6
 800b30c:	d816      	bhi.n	800b33c <rshift+0x8e>
 800b30e:	9e00      	ldr	r6, [sp, #0]
 800b310:	2300      	movs	r3, #0
 800b312:	3601      	adds	r6, #1
 800b314:	42b5      	cmp	r5, r6
 800b316:	d303      	bcc.n	800b320 <rshift+0x72>
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	1ae3      	subs	r3, r4, r3
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	3b04      	subs	r3, #4
 800b320:	18d3      	adds	r3, r2, r3
 800b322:	6019      	str	r1, [r3, #0]
 800b324:	2900      	cmp	r1, #0
 800b326:	d000      	beq.n	800b32a <rshift+0x7c>
 800b328:	3304      	adds	r3, #4
 800b32a:	1a99      	subs	r1, r3, r2
 800b32c:	1089      	asrs	r1, r1, #2
 800b32e:	6101      	str	r1, [r0, #16]
 800b330:	4293      	cmp	r3, r2
 800b332:	d101      	bne.n	800b338 <rshift+0x8a>
 800b334:	2300      	movs	r3, #0
 800b336:	6143      	str	r3, [r0, #20]
 800b338:	b005      	add	sp, #20
 800b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33c:	6837      	ldr	r7, [r6, #0]
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	409f      	lsls	r7, r3
 800b342:	430f      	orrs	r7, r1
 800b344:	4661      	mov	r1, ip
 800b346:	c180      	stmia	r1!, {r7}
 800b348:	468c      	mov	ip, r1
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	ce02      	ldmia	r6!, {r1}
 800b34e:	40d9      	lsrs	r1, r3
 800b350:	e7db      	b.n	800b30a <rshift+0x5c>
 800b352:	c980      	ldmia	r1!, {r7}
 800b354:	c680      	stmia	r6!, {r7}
 800b356:	e7c3      	b.n	800b2e0 <rshift+0x32>

0800b358 <__hexdig_fun>:
 800b358:	0002      	movs	r2, r0
 800b35a:	3a30      	subs	r2, #48	; 0x30
 800b35c:	0003      	movs	r3, r0
 800b35e:	2a09      	cmp	r2, #9
 800b360:	d802      	bhi.n	800b368 <__hexdig_fun+0x10>
 800b362:	3b20      	subs	r3, #32
 800b364:	b2d8      	uxtb	r0, r3
 800b366:	4770      	bx	lr
 800b368:	0002      	movs	r2, r0
 800b36a:	3a61      	subs	r2, #97	; 0x61
 800b36c:	2a05      	cmp	r2, #5
 800b36e:	d801      	bhi.n	800b374 <__hexdig_fun+0x1c>
 800b370:	3b47      	subs	r3, #71	; 0x47
 800b372:	e7f7      	b.n	800b364 <__hexdig_fun+0xc>
 800b374:	001a      	movs	r2, r3
 800b376:	3a41      	subs	r2, #65	; 0x41
 800b378:	2000      	movs	r0, #0
 800b37a:	2a05      	cmp	r2, #5
 800b37c:	d8f3      	bhi.n	800b366 <__hexdig_fun+0xe>
 800b37e:	3b27      	subs	r3, #39	; 0x27
 800b380:	e7f0      	b.n	800b364 <__hexdig_fun+0xc>
	...

0800b384 <__gethex>:
 800b384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b386:	b089      	sub	sp, #36	; 0x24
 800b388:	9307      	str	r3, [sp, #28]
 800b38a:	2302      	movs	r3, #2
 800b38c:	9201      	str	r2, [sp, #4]
 800b38e:	680a      	ldr	r2, [r1, #0]
 800b390:	425b      	negs	r3, r3
 800b392:	9003      	str	r0, [sp, #12]
 800b394:	9106      	str	r1, [sp, #24]
 800b396:	1c96      	adds	r6, r2, #2
 800b398:	1a9b      	subs	r3, r3, r2
 800b39a:	199a      	adds	r2, r3, r6
 800b39c:	9600      	str	r6, [sp, #0]
 800b39e:	9205      	str	r2, [sp, #20]
 800b3a0:	9a00      	ldr	r2, [sp, #0]
 800b3a2:	3601      	adds	r6, #1
 800b3a4:	7810      	ldrb	r0, [r2, #0]
 800b3a6:	2830      	cmp	r0, #48	; 0x30
 800b3a8:	d0f7      	beq.n	800b39a <__gethex+0x16>
 800b3aa:	f7ff ffd5 	bl	800b358 <__hexdig_fun>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	001d      	movs	r5, r3
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	4298      	cmp	r0, r3
 800b3b6:	d11d      	bne.n	800b3f4 <__gethex+0x70>
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	49a6      	ldr	r1, [pc, #664]	; (800b654 <__gethex+0x2d0>)
 800b3bc:	9800      	ldr	r0, [sp, #0]
 800b3be:	f7ff ff01 	bl	800b1c4 <strncmp>
 800b3c2:	0007      	movs	r7, r0
 800b3c4:	42a8      	cmp	r0, r5
 800b3c6:	d169      	bne.n	800b49c <__gethex+0x118>
 800b3c8:	9b00      	ldr	r3, [sp, #0]
 800b3ca:	0034      	movs	r4, r6
 800b3cc:	7858      	ldrb	r0, [r3, #1]
 800b3ce:	f7ff ffc3 	bl	800b358 <__hexdig_fun>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	9302      	str	r3, [sp, #8]
 800b3d6:	42a8      	cmp	r0, r5
 800b3d8:	d02f      	beq.n	800b43a <__gethex+0xb6>
 800b3da:	9600      	str	r6, [sp, #0]
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	7818      	ldrb	r0, [r3, #0]
 800b3e0:	2830      	cmp	r0, #48	; 0x30
 800b3e2:	d009      	beq.n	800b3f8 <__gethex+0x74>
 800b3e4:	f7ff ffb8 	bl	800b358 <__hexdig_fun>
 800b3e8:	4242      	negs	r2, r0
 800b3ea:	4142      	adcs	r2, r0
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	0035      	movs	r5, r6
 800b3f0:	9202      	str	r2, [sp, #8]
 800b3f2:	9305      	str	r3, [sp, #20]
 800b3f4:	9c00      	ldr	r4, [sp, #0]
 800b3f6:	e004      	b.n	800b402 <__gethex+0x7e>
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	e7ed      	b.n	800b3dc <__gethex+0x58>
 800b400:	3401      	adds	r4, #1
 800b402:	7820      	ldrb	r0, [r4, #0]
 800b404:	f7ff ffa8 	bl	800b358 <__hexdig_fun>
 800b408:	1e07      	subs	r7, r0, #0
 800b40a:	d1f9      	bne.n	800b400 <__gethex+0x7c>
 800b40c:	2201      	movs	r2, #1
 800b40e:	0020      	movs	r0, r4
 800b410:	4990      	ldr	r1, [pc, #576]	; (800b654 <__gethex+0x2d0>)
 800b412:	f7ff fed7 	bl	800b1c4 <strncmp>
 800b416:	2800      	cmp	r0, #0
 800b418:	d10d      	bne.n	800b436 <__gethex+0xb2>
 800b41a:	2d00      	cmp	r5, #0
 800b41c:	d106      	bne.n	800b42c <__gethex+0xa8>
 800b41e:	3401      	adds	r4, #1
 800b420:	0025      	movs	r5, r4
 800b422:	7820      	ldrb	r0, [r4, #0]
 800b424:	f7ff ff98 	bl	800b358 <__hexdig_fun>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d102      	bne.n	800b432 <__gethex+0xae>
 800b42c:	1b2d      	subs	r5, r5, r4
 800b42e:	00af      	lsls	r7, r5, #2
 800b430:	e003      	b.n	800b43a <__gethex+0xb6>
 800b432:	3401      	adds	r4, #1
 800b434:	e7f5      	b.n	800b422 <__gethex+0x9e>
 800b436:	2d00      	cmp	r5, #0
 800b438:	d1f8      	bne.n	800b42c <__gethex+0xa8>
 800b43a:	2220      	movs	r2, #32
 800b43c:	7823      	ldrb	r3, [r4, #0]
 800b43e:	0026      	movs	r6, r4
 800b440:	4393      	bics	r3, r2
 800b442:	2b50      	cmp	r3, #80	; 0x50
 800b444:	d11d      	bne.n	800b482 <__gethex+0xfe>
 800b446:	7863      	ldrb	r3, [r4, #1]
 800b448:	2b2b      	cmp	r3, #43	; 0x2b
 800b44a:	d02c      	beq.n	800b4a6 <__gethex+0x122>
 800b44c:	2b2d      	cmp	r3, #45	; 0x2d
 800b44e:	d02e      	beq.n	800b4ae <__gethex+0x12a>
 800b450:	2300      	movs	r3, #0
 800b452:	1c66      	adds	r6, r4, #1
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	7830      	ldrb	r0, [r6, #0]
 800b458:	f7ff ff7e 	bl	800b358 <__hexdig_fun>
 800b45c:	1e43      	subs	r3, r0, #1
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b18      	cmp	r3, #24
 800b462:	d82b      	bhi.n	800b4bc <__gethex+0x138>
 800b464:	3810      	subs	r0, #16
 800b466:	0005      	movs	r5, r0
 800b468:	7870      	ldrb	r0, [r6, #1]
 800b46a:	f7ff ff75 	bl	800b358 <__hexdig_fun>
 800b46e:	1e43      	subs	r3, r0, #1
 800b470:	b2db      	uxtb	r3, r3
 800b472:	3601      	adds	r6, #1
 800b474:	2b18      	cmp	r3, #24
 800b476:	d91c      	bls.n	800b4b2 <__gethex+0x12e>
 800b478:	9b04      	ldr	r3, [sp, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d000      	beq.n	800b480 <__gethex+0xfc>
 800b47e:	426d      	negs	r5, r5
 800b480:	197f      	adds	r7, r7, r5
 800b482:	9b06      	ldr	r3, [sp, #24]
 800b484:	601e      	str	r6, [r3, #0]
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d019      	beq.n	800b4c0 <__gethex+0x13c>
 800b48c:	2600      	movs	r6, #0
 800b48e:	9b05      	ldr	r3, [sp, #20]
 800b490:	42b3      	cmp	r3, r6
 800b492:	d100      	bne.n	800b496 <__gethex+0x112>
 800b494:	3606      	adds	r6, #6
 800b496:	0030      	movs	r0, r6
 800b498:	b009      	add	sp, #36	; 0x24
 800b49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b49c:	2301      	movs	r3, #1
 800b49e:	2700      	movs	r7, #0
 800b4a0:	9c00      	ldr	r4, [sp, #0]
 800b4a2:	9302      	str	r3, [sp, #8]
 800b4a4:	e7c9      	b.n	800b43a <__gethex+0xb6>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	1ca6      	adds	r6, r4, #2
 800b4ac:	e7d3      	b.n	800b456 <__gethex+0xd2>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e7fa      	b.n	800b4a8 <__gethex+0x124>
 800b4b2:	230a      	movs	r3, #10
 800b4b4:	435d      	muls	r5, r3
 800b4b6:	182d      	adds	r5, r5, r0
 800b4b8:	3d10      	subs	r5, #16
 800b4ba:	e7d5      	b.n	800b468 <__gethex+0xe4>
 800b4bc:	0026      	movs	r6, r4
 800b4be:	e7e0      	b.n	800b482 <__gethex+0xfe>
 800b4c0:	9b00      	ldr	r3, [sp, #0]
 800b4c2:	9902      	ldr	r1, [sp, #8]
 800b4c4:	1ae3      	subs	r3, r4, r3
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	2b07      	cmp	r3, #7
 800b4ca:	dc0a      	bgt.n	800b4e2 <__gethex+0x15e>
 800b4cc:	9803      	ldr	r0, [sp, #12]
 800b4ce:	f7fe f8df 	bl	8009690 <_Balloc>
 800b4d2:	1e05      	subs	r5, r0, #0
 800b4d4:	d108      	bne.n	800b4e8 <__gethex+0x164>
 800b4d6:	002a      	movs	r2, r5
 800b4d8:	21e4      	movs	r1, #228	; 0xe4
 800b4da:	4b5f      	ldr	r3, [pc, #380]	; (800b658 <__gethex+0x2d4>)
 800b4dc:	485f      	ldr	r0, [pc, #380]	; (800b65c <__gethex+0x2d8>)
 800b4de:	f7ff fe9b 	bl	800b218 <__assert_func>
 800b4e2:	3101      	adds	r1, #1
 800b4e4:	105b      	asrs	r3, r3, #1
 800b4e6:	e7ef      	b.n	800b4c8 <__gethex+0x144>
 800b4e8:	0003      	movs	r3, r0
 800b4ea:	3314      	adds	r3, #20
 800b4ec:	9302      	str	r3, [sp, #8]
 800b4ee:	9305      	str	r3, [sp, #20]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	001e      	movs	r6, r3
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	9b00      	ldr	r3, [sp, #0]
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d33f      	bcc.n	800b57c <__gethex+0x1f8>
 800b4fc:	9c05      	ldr	r4, [sp, #20]
 800b4fe:	9b02      	ldr	r3, [sp, #8]
 800b500:	c440      	stmia	r4!, {r6}
 800b502:	1ae4      	subs	r4, r4, r3
 800b504:	10a4      	asrs	r4, r4, #2
 800b506:	0030      	movs	r0, r6
 800b508:	612c      	str	r4, [r5, #16]
 800b50a:	f7fe f9b9 	bl	8009880 <__hi0bits>
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	0164      	lsls	r4, r4, #5
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	1a26      	subs	r6, r4, r0
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	429e      	cmp	r6, r3
 800b51a:	dd51      	ble.n	800b5c0 <__gethex+0x23c>
 800b51c:	1af6      	subs	r6, r6, r3
 800b51e:	0031      	movs	r1, r6
 800b520:	0028      	movs	r0, r5
 800b522:	f7fe fd4d 	bl	8009fc0 <__any_on>
 800b526:	1e04      	subs	r4, r0, #0
 800b528:	d016      	beq.n	800b558 <__gethex+0x1d4>
 800b52a:	2401      	movs	r4, #1
 800b52c:	231f      	movs	r3, #31
 800b52e:	0020      	movs	r0, r4
 800b530:	1e72      	subs	r2, r6, #1
 800b532:	4013      	ands	r3, r2
 800b534:	4098      	lsls	r0, r3
 800b536:	0003      	movs	r3, r0
 800b538:	1151      	asrs	r1, r2, #5
 800b53a:	9802      	ldr	r0, [sp, #8]
 800b53c:	0089      	lsls	r1, r1, #2
 800b53e:	5809      	ldr	r1, [r1, r0]
 800b540:	4219      	tst	r1, r3
 800b542:	d009      	beq.n	800b558 <__gethex+0x1d4>
 800b544:	42a2      	cmp	r2, r4
 800b546:	dd06      	ble.n	800b556 <__gethex+0x1d2>
 800b548:	0028      	movs	r0, r5
 800b54a:	1eb1      	subs	r1, r6, #2
 800b54c:	f7fe fd38 	bl	8009fc0 <__any_on>
 800b550:	3402      	adds	r4, #2
 800b552:	2800      	cmp	r0, #0
 800b554:	d100      	bne.n	800b558 <__gethex+0x1d4>
 800b556:	2402      	movs	r4, #2
 800b558:	0031      	movs	r1, r6
 800b55a:	0028      	movs	r0, r5
 800b55c:	f7ff fea7 	bl	800b2ae <rshift>
 800b560:	19bf      	adds	r7, r7, r6
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	42bb      	cmp	r3, r7
 800b568:	da3a      	bge.n	800b5e0 <__gethex+0x25c>
 800b56a:	0029      	movs	r1, r5
 800b56c:	9803      	ldr	r0, [sp, #12]
 800b56e:	f7fe f8d3 	bl	8009718 <_Bfree>
 800b572:	2300      	movs	r3, #0
 800b574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b576:	26a3      	movs	r6, #163	; 0xa3
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	e78c      	b.n	800b496 <__gethex+0x112>
 800b57c:	3c01      	subs	r4, #1
 800b57e:	7823      	ldrb	r3, [r4, #0]
 800b580:	2b2e      	cmp	r3, #46	; 0x2e
 800b582:	d012      	beq.n	800b5aa <__gethex+0x226>
 800b584:	9b04      	ldr	r3, [sp, #16]
 800b586:	2b20      	cmp	r3, #32
 800b588:	d104      	bne.n	800b594 <__gethex+0x210>
 800b58a:	9b05      	ldr	r3, [sp, #20]
 800b58c:	c340      	stmia	r3!, {r6}
 800b58e:	2600      	movs	r6, #0
 800b590:	9305      	str	r3, [sp, #20]
 800b592:	9604      	str	r6, [sp, #16]
 800b594:	7820      	ldrb	r0, [r4, #0]
 800b596:	f7ff fedf 	bl	800b358 <__hexdig_fun>
 800b59a:	230f      	movs	r3, #15
 800b59c:	4018      	ands	r0, r3
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	4098      	lsls	r0, r3
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4306      	orrs	r6, r0
 800b5a6:	9304      	str	r3, [sp, #16]
 800b5a8:	e7a5      	b.n	800b4f6 <__gethex+0x172>
 800b5aa:	9b00      	ldr	r3, [sp, #0]
 800b5ac:	42a3      	cmp	r3, r4
 800b5ae:	d8e9      	bhi.n	800b584 <__gethex+0x200>
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	0020      	movs	r0, r4
 800b5b4:	4927      	ldr	r1, [pc, #156]	; (800b654 <__gethex+0x2d0>)
 800b5b6:	f7ff fe05 	bl	800b1c4 <strncmp>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d1e2      	bne.n	800b584 <__gethex+0x200>
 800b5be:	e79a      	b.n	800b4f6 <__gethex+0x172>
 800b5c0:	9b00      	ldr	r3, [sp, #0]
 800b5c2:	2400      	movs	r4, #0
 800b5c4:	429e      	cmp	r6, r3
 800b5c6:	dacc      	bge.n	800b562 <__gethex+0x1de>
 800b5c8:	1b9e      	subs	r6, r3, r6
 800b5ca:	0029      	movs	r1, r5
 800b5cc:	0032      	movs	r2, r6
 800b5ce:	9803      	ldr	r0, [sp, #12]
 800b5d0:	f7fe fac2 	bl	8009b58 <__lshift>
 800b5d4:	0003      	movs	r3, r0
 800b5d6:	3314      	adds	r3, #20
 800b5d8:	0005      	movs	r5, r0
 800b5da:	1bbf      	subs	r7, r7, r6
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	e7c0      	b.n	800b562 <__gethex+0x1de>
 800b5e0:	9b01      	ldr	r3, [sp, #4]
 800b5e2:	685e      	ldr	r6, [r3, #4]
 800b5e4:	42be      	cmp	r6, r7
 800b5e6:	dd70      	ble.n	800b6ca <__gethex+0x346>
 800b5e8:	9b00      	ldr	r3, [sp, #0]
 800b5ea:	1bf6      	subs	r6, r6, r7
 800b5ec:	42b3      	cmp	r3, r6
 800b5ee:	dc37      	bgt.n	800b660 <__gethex+0x2dc>
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d024      	beq.n	800b642 <__gethex+0x2be>
 800b5f8:	2b03      	cmp	r3, #3
 800b5fa:	d026      	beq.n	800b64a <__gethex+0x2c6>
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d117      	bne.n	800b630 <__gethex+0x2ac>
 800b600:	9b00      	ldr	r3, [sp, #0]
 800b602:	42b3      	cmp	r3, r6
 800b604:	d114      	bne.n	800b630 <__gethex+0x2ac>
 800b606:	2b01      	cmp	r3, #1
 800b608:	d10b      	bne.n	800b622 <__gethex+0x29e>
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	9a07      	ldr	r2, [sp, #28]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	2662      	movs	r6, #98	; 0x62
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	2301      	movs	r3, #1
 800b616:	9a02      	ldr	r2, [sp, #8]
 800b618:	612b      	str	r3, [r5, #16]
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b61e:	601d      	str	r5, [r3, #0]
 800b620:	e739      	b.n	800b496 <__gethex+0x112>
 800b622:	9900      	ldr	r1, [sp, #0]
 800b624:	0028      	movs	r0, r5
 800b626:	3901      	subs	r1, #1
 800b628:	f7fe fcca 	bl	8009fc0 <__any_on>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1ec      	bne.n	800b60a <__gethex+0x286>
 800b630:	0029      	movs	r1, r5
 800b632:	9803      	ldr	r0, [sp, #12]
 800b634:	f7fe f870 	bl	8009718 <_Bfree>
 800b638:	2300      	movs	r3, #0
 800b63a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b63c:	2650      	movs	r6, #80	; 0x50
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	e729      	b.n	800b496 <__gethex+0x112>
 800b642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1f3      	bne.n	800b630 <__gethex+0x2ac>
 800b648:	e7df      	b.n	800b60a <__gethex+0x286>
 800b64a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1dc      	bne.n	800b60a <__gethex+0x286>
 800b650:	e7ee      	b.n	800b630 <__gethex+0x2ac>
 800b652:	46c0      	nop			; (mov r8, r8)
 800b654:	0800c3ac 	.word	0x0800c3ac
 800b658:	0800c245 	.word	0x0800c245
 800b65c:	0800c556 	.word	0x0800c556
 800b660:	1e77      	subs	r7, r6, #1
 800b662:	2c00      	cmp	r4, #0
 800b664:	d12f      	bne.n	800b6c6 <__gethex+0x342>
 800b666:	2f00      	cmp	r7, #0
 800b668:	d004      	beq.n	800b674 <__gethex+0x2f0>
 800b66a:	0039      	movs	r1, r7
 800b66c:	0028      	movs	r0, r5
 800b66e:	f7fe fca7 	bl	8009fc0 <__any_on>
 800b672:	0004      	movs	r4, r0
 800b674:	231f      	movs	r3, #31
 800b676:	117a      	asrs	r2, r7, #5
 800b678:	401f      	ands	r7, r3
 800b67a:	3b1e      	subs	r3, #30
 800b67c:	40bb      	lsls	r3, r7
 800b67e:	9902      	ldr	r1, [sp, #8]
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	5852      	ldr	r2, [r2, r1]
 800b684:	421a      	tst	r2, r3
 800b686:	d001      	beq.n	800b68c <__gethex+0x308>
 800b688:	2302      	movs	r3, #2
 800b68a:	431c      	orrs	r4, r3
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	0031      	movs	r1, r6
 800b690:	1b9b      	subs	r3, r3, r6
 800b692:	2602      	movs	r6, #2
 800b694:	0028      	movs	r0, r5
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	f7ff fe09 	bl	800b2ae <rshift>
 800b69c:	9b01      	ldr	r3, [sp, #4]
 800b69e:	685f      	ldr	r7, [r3, #4]
 800b6a0:	2c00      	cmp	r4, #0
 800b6a2:	d041      	beq.n	800b728 <__gethex+0x3a4>
 800b6a4:	9b01      	ldr	r3, [sp, #4]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d010      	beq.n	800b6ce <__gethex+0x34a>
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	d012      	beq.n	800b6d6 <__gethex+0x352>
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d106      	bne.n	800b6c2 <__gethex+0x33e>
 800b6b4:	07a2      	lsls	r2, r4, #30
 800b6b6:	d504      	bpl.n	800b6c2 <__gethex+0x33e>
 800b6b8:	9a02      	ldr	r2, [sp, #8]
 800b6ba:	6812      	ldr	r2, [r2, #0]
 800b6bc:	4314      	orrs	r4, r2
 800b6be:	421c      	tst	r4, r3
 800b6c0:	d10c      	bne.n	800b6dc <__gethex+0x358>
 800b6c2:	2310      	movs	r3, #16
 800b6c4:	e02f      	b.n	800b726 <__gethex+0x3a2>
 800b6c6:	2401      	movs	r4, #1
 800b6c8:	e7d4      	b.n	800b674 <__gethex+0x2f0>
 800b6ca:	2601      	movs	r6, #1
 800b6cc:	e7e8      	b.n	800b6a0 <__gethex+0x31c>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d0f2      	beq.n	800b6c2 <__gethex+0x33e>
 800b6dc:	692b      	ldr	r3, [r5, #16]
 800b6de:	2000      	movs	r0, #0
 800b6e0:	9302      	str	r3, [sp, #8]
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	002b      	movs	r3, r5
 800b6e8:	9a04      	ldr	r2, [sp, #16]
 800b6ea:	3314      	adds	r3, #20
 800b6ec:	1899      	adds	r1, r3, r2
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	1c54      	adds	r4, r2, #1
 800b6f2:	d01e      	beq.n	800b732 <__gethex+0x3ae>
 800b6f4:	3201      	adds	r2, #1
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	002b      	movs	r3, r5
 800b6fa:	3314      	adds	r3, #20
 800b6fc:	2e02      	cmp	r6, #2
 800b6fe:	d141      	bne.n	800b784 <__gethex+0x400>
 800b700:	9a01      	ldr	r2, [sp, #4]
 800b702:	9900      	ldr	r1, [sp, #0]
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	3a01      	subs	r2, #1
 800b708:	428a      	cmp	r2, r1
 800b70a:	d10b      	bne.n	800b724 <__gethex+0x3a0>
 800b70c:	221f      	movs	r2, #31
 800b70e:	9800      	ldr	r0, [sp, #0]
 800b710:	1149      	asrs	r1, r1, #5
 800b712:	4002      	ands	r2, r0
 800b714:	2001      	movs	r0, #1
 800b716:	0004      	movs	r4, r0
 800b718:	4094      	lsls	r4, r2
 800b71a:	0089      	lsls	r1, r1, #2
 800b71c:	58cb      	ldr	r3, [r1, r3]
 800b71e:	4223      	tst	r3, r4
 800b720:	d000      	beq.n	800b724 <__gethex+0x3a0>
 800b722:	2601      	movs	r6, #1
 800b724:	2320      	movs	r3, #32
 800b726:	431e      	orrs	r6, r3
 800b728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b72a:	601d      	str	r5, [r3, #0]
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	601f      	str	r7, [r3, #0]
 800b730:	e6b1      	b.n	800b496 <__gethex+0x112>
 800b732:	c301      	stmia	r3!, {r0}
 800b734:	4299      	cmp	r1, r3
 800b736:	d8da      	bhi.n	800b6ee <__gethex+0x36a>
 800b738:	68ab      	ldr	r3, [r5, #8]
 800b73a:	9a02      	ldr	r2, [sp, #8]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	db18      	blt.n	800b772 <__gethex+0x3ee>
 800b740:	6869      	ldr	r1, [r5, #4]
 800b742:	9803      	ldr	r0, [sp, #12]
 800b744:	3101      	adds	r1, #1
 800b746:	f7fd ffa3 	bl	8009690 <_Balloc>
 800b74a:	1e04      	subs	r4, r0, #0
 800b74c:	d104      	bne.n	800b758 <__gethex+0x3d4>
 800b74e:	0022      	movs	r2, r4
 800b750:	2184      	movs	r1, #132	; 0x84
 800b752:	4b1c      	ldr	r3, [pc, #112]	; (800b7c4 <__gethex+0x440>)
 800b754:	481c      	ldr	r0, [pc, #112]	; (800b7c8 <__gethex+0x444>)
 800b756:	e6c2      	b.n	800b4de <__gethex+0x15a>
 800b758:	0029      	movs	r1, r5
 800b75a:	692a      	ldr	r2, [r5, #16]
 800b75c:	310c      	adds	r1, #12
 800b75e:	3202      	adds	r2, #2
 800b760:	0092      	lsls	r2, r2, #2
 800b762:	300c      	adds	r0, #12
 800b764:	f7fc ffe0 	bl	8008728 <memcpy>
 800b768:	0029      	movs	r1, r5
 800b76a:	9803      	ldr	r0, [sp, #12]
 800b76c:	f7fd ffd4 	bl	8009718 <_Bfree>
 800b770:	0025      	movs	r5, r4
 800b772:	692b      	ldr	r3, [r5, #16]
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	612a      	str	r2, [r5, #16]
 800b778:	2201      	movs	r2, #1
 800b77a:	3304      	adds	r3, #4
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	18eb      	adds	r3, r5, r3
 800b780:	605a      	str	r2, [r3, #4]
 800b782:	e7b9      	b.n	800b6f8 <__gethex+0x374>
 800b784:	692a      	ldr	r2, [r5, #16]
 800b786:	9902      	ldr	r1, [sp, #8]
 800b788:	428a      	cmp	r2, r1
 800b78a:	dd09      	ble.n	800b7a0 <__gethex+0x41c>
 800b78c:	2101      	movs	r1, #1
 800b78e:	0028      	movs	r0, r5
 800b790:	f7ff fd8d 	bl	800b2ae <rshift>
 800b794:	9b01      	ldr	r3, [sp, #4]
 800b796:	3701      	adds	r7, #1
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	42bb      	cmp	r3, r7
 800b79c:	dac1      	bge.n	800b722 <__gethex+0x39e>
 800b79e:	e6e4      	b.n	800b56a <__gethex+0x1e6>
 800b7a0:	221f      	movs	r2, #31
 800b7a2:	9c00      	ldr	r4, [sp, #0]
 800b7a4:	9900      	ldr	r1, [sp, #0]
 800b7a6:	2601      	movs	r6, #1
 800b7a8:	4014      	ands	r4, r2
 800b7aa:	4211      	tst	r1, r2
 800b7ac:	d0ba      	beq.n	800b724 <__gethex+0x3a0>
 800b7ae:	9a04      	ldr	r2, [sp, #16]
 800b7b0:	189b      	adds	r3, r3, r2
 800b7b2:	3b04      	subs	r3, #4
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	f7fe f863 	bl	8009880 <__hi0bits>
 800b7ba:	2320      	movs	r3, #32
 800b7bc:	1b1b      	subs	r3, r3, r4
 800b7be:	4298      	cmp	r0, r3
 800b7c0:	dbe4      	blt.n	800b78c <__gethex+0x408>
 800b7c2:	e7af      	b.n	800b724 <__gethex+0x3a0>
 800b7c4:	0800c245 	.word	0x0800c245
 800b7c8:	0800c556 	.word	0x0800c556

0800b7cc <L_shift>:
 800b7cc:	2308      	movs	r3, #8
 800b7ce:	b570      	push	{r4, r5, r6, lr}
 800b7d0:	2520      	movs	r5, #32
 800b7d2:	1a9a      	subs	r2, r3, r2
 800b7d4:	0092      	lsls	r2, r2, #2
 800b7d6:	1aad      	subs	r5, r5, r2
 800b7d8:	6843      	ldr	r3, [r0, #4]
 800b7da:	6804      	ldr	r4, [r0, #0]
 800b7dc:	001e      	movs	r6, r3
 800b7de:	40ae      	lsls	r6, r5
 800b7e0:	40d3      	lsrs	r3, r2
 800b7e2:	4334      	orrs	r4, r6
 800b7e4:	6004      	str	r4, [r0, #0]
 800b7e6:	6043      	str	r3, [r0, #4]
 800b7e8:	3004      	adds	r0, #4
 800b7ea:	4288      	cmp	r0, r1
 800b7ec:	d3f4      	bcc.n	800b7d8 <L_shift+0xc>
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}

0800b7f0 <__match>:
 800b7f0:	b530      	push	{r4, r5, lr}
 800b7f2:	6803      	ldr	r3, [r0, #0]
 800b7f4:	780c      	ldrb	r4, [r1, #0]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	2c00      	cmp	r4, #0
 800b7fa:	d102      	bne.n	800b802 <__match+0x12>
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	2001      	movs	r0, #1
 800b800:	bd30      	pop	{r4, r5, pc}
 800b802:	781a      	ldrb	r2, [r3, #0]
 800b804:	0015      	movs	r5, r2
 800b806:	3d41      	subs	r5, #65	; 0x41
 800b808:	2d19      	cmp	r5, #25
 800b80a:	d800      	bhi.n	800b80e <__match+0x1e>
 800b80c:	3220      	adds	r2, #32
 800b80e:	3101      	adds	r1, #1
 800b810:	42a2      	cmp	r2, r4
 800b812:	d0ef      	beq.n	800b7f4 <__match+0x4>
 800b814:	2000      	movs	r0, #0
 800b816:	e7f3      	b.n	800b800 <__match+0x10>

0800b818 <__hexnan>:
 800b818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b81a:	680b      	ldr	r3, [r1, #0]
 800b81c:	b08b      	sub	sp, #44	; 0x2c
 800b81e:	9201      	str	r2, [sp, #4]
 800b820:	9901      	ldr	r1, [sp, #4]
 800b822:	115a      	asrs	r2, r3, #5
 800b824:	0092      	lsls	r2, r2, #2
 800b826:	188a      	adds	r2, r1, r2
 800b828:	9202      	str	r2, [sp, #8]
 800b82a:	0019      	movs	r1, r3
 800b82c:	221f      	movs	r2, #31
 800b82e:	4011      	ands	r1, r2
 800b830:	9008      	str	r0, [sp, #32]
 800b832:	9106      	str	r1, [sp, #24]
 800b834:	4213      	tst	r3, r2
 800b836:	d002      	beq.n	800b83e <__hexnan+0x26>
 800b838:	9b02      	ldr	r3, [sp, #8]
 800b83a:	3304      	adds	r3, #4
 800b83c:	9302      	str	r3, [sp, #8]
 800b83e:	9b02      	ldr	r3, [sp, #8]
 800b840:	2500      	movs	r5, #0
 800b842:	1f1f      	subs	r7, r3, #4
 800b844:	003e      	movs	r6, r7
 800b846:	003c      	movs	r4, r7
 800b848:	9b08      	ldr	r3, [sp, #32]
 800b84a:	603d      	str	r5, [r7, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	9507      	str	r5, [sp, #28]
 800b850:	9305      	str	r3, [sp, #20]
 800b852:	9503      	str	r5, [sp, #12]
 800b854:	9b05      	ldr	r3, [sp, #20]
 800b856:	3301      	adds	r3, #1
 800b858:	9309      	str	r3, [sp, #36]	; 0x24
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	785b      	ldrb	r3, [r3, #1]
 800b85e:	9304      	str	r3, [sp, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d028      	beq.n	800b8b6 <__hexnan+0x9e>
 800b864:	9804      	ldr	r0, [sp, #16]
 800b866:	f7ff fd77 	bl	800b358 <__hexdig_fun>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d154      	bne.n	800b918 <__hexnan+0x100>
 800b86e:	9b04      	ldr	r3, [sp, #16]
 800b870:	2b20      	cmp	r3, #32
 800b872:	d819      	bhi.n	800b8a8 <__hexnan+0x90>
 800b874:	9b03      	ldr	r3, [sp, #12]
 800b876:	9a07      	ldr	r2, [sp, #28]
 800b878:	4293      	cmp	r3, r2
 800b87a:	dd12      	ble.n	800b8a2 <__hexnan+0x8a>
 800b87c:	42b4      	cmp	r4, r6
 800b87e:	d206      	bcs.n	800b88e <__hexnan+0x76>
 800b880:	2d07      	cmp	r5, #7
 800b882:	dc04      	bgt.n	800b88e <__hexnan+0x76>
 800b884:	002a      	movs	r2, r5
 800b886:	0031      	movs	r1, r6
 800b888:	0020      	movs	r0, r4
 800b88a:	f7ff ff9f 	bl	800b7cc <L_shift>
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	2508      	movs	r5, #8
 800b892:	429c      	cmp	r4, r3
 800b894:	d905      	bls.n	800b8a2 <__hexnan+0x8a>
 800b896:	1f26      	subs	r6, r4, #4
 800b898:	2500      	movs	r5, #0
 800b89a:	0034      	movs	r4, r6
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	6035      	str	r5, [r6, #0]
 800b8a0:	9307      	str	r3, [sp, #28]
 800b8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a4:	9305      	str	r3, [sp, #20]
 800b8a6:	e7d5      	b.n	800b854 <__hexnan+0x3c>
 800b8a8:	9b04      	ldr	r3, [sp, #16]
 800b8aa:	2b29      	cmp	r3, #41	; 0x29
 800b8ac:	d159      	bne.n	800b962 <__hexnan+0x14a>
 800b8ae:	9b05      	ldr	r3, [sp, #20]
 800b8b0:	9a08      	ldr	r2, [sp, #32]
 800b8b2:	3302      	adds	r3, #2
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d052      	beq.n	800b962 <__hexnan+0x14a>
 800b8bc:	42b4      	cmp	r4, r6
 800b8be:	d206      	bcs.n	800b8ce <__hexnan+0xb6>
 800b8c0:	2d07      	cmp	r5, #7
 800b8c2:	dc04      	bgt.n	800b8ce <__hexnan+0xb6>
 800b8c4:	002a      	movs	r2, r5
 800b8c6:	0031      	movs	r1, r6
 800b8c8:	0020      	movs	r0, r4
 800b8ca:	f7ff ff7f 	bl	800b7cc <L_shift>
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	429c      	cmp	r4, r3
 800b8d2:	d935      	bls.n	800b940 <__hexnan+0x128>
 800b8d4:	001a      	movs	r2, r3
 800b8d6:	0023      	movs	r3, r4
 800b8d8:	cb02      	ldmia	r3!, {r1}
 800b8da:	c202      	stmia	r2!, {r1}
 800b8dc:	429f      	cmp	r7, r3
 800b8de:	d2fb      	bcs.n	800b8d8 <__hexnan+0xc0>
 800b8e0:	9b02      	ldr	r3, [sp, #8]
 800b8e2:	1c62      	adds	r2, r4, #1
 800b8e4:	1ed9      	subs	r1, r3, #3
 800b8e6:	2304      	movs	r3, #4
 800b8e8:	4291      	cmp	r1, r2
 800b8ea:	d305      	bcc.n	800b8f8 <__hexnan+0xe0>
 800b8ec:	9b02      	ldr	r3, [sp, #8]
 800b8ee:	3b04      	subs	r3, #4
 800b8f0:	1b1b      	subs	r3, r3, r4
 800b8f2:	089b      	lsrs	r3, r3, #2
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	9a01      	ldr	r2, [sp, #4]
 800b8fa:	18d3      	adds	r3, r2, r3
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	c304      	stmia	r3!, {r2}
 800b900:	429f      	cmp	r7, r3
 800b902:	d2fc      	bcs.n	800b8fe <__hexnan+0xe6>
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d104      	bne.n	800b914 <__hexnan+0xfc>
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	429f      	cmp	r7, r3
 800b90e:	d126      	bne.n	800b95e <__hexnan+0x146>
 800b910:	2301      	movs	r3, #1
 800b912:	603b      	str	r3, [r7, #0]
 800b914:	2005      	movs	r0, #5
 800b916:	e025      	b.n	800b964 <__hexnan+0x14c>
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	3501      	adds	r5, #1
 800b91c:	3301      	adds	r3, #1
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	2d08      	cmp	r5, #8
 800b922:	dd06      	ble.n	800b932 <__hexnan+0x11a>
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	429c      	cmp	r4, r3
 800b928:	d9bb      	bls.n	800b8a2 <__hexnan+0x8a>
 800b92a:	2300      	movs	r3, #0
 800b92c:	2501      	movs	r5, #1
 800b92e:	3c04      	subs	r4, #4
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	220f      	movs	r2, #15
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	4010      	ands	r0, r2
 800b938:	011b      	lsls	r3, r3, #4
 800b93a:	4303      	orrs	r3, r0
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	e7b0      	b.n	800b8a2 <__hexnan+0x8a>
 800b940:	9b06      	ldr	r3, [sp, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0de      	beq.n	800b904 <__hexnan+0xec>
 800b946:	2320      	movs	r3, #32
 800b948:	9a06      	ldr	r2, [sp, #24]
 800b94a:	9902      	ldr	r1, [sp, #8]
 800b94c:	1a9b      	subs	r3, r3, r2
 800b94e:	2201      	movs	r2, #1
 800b950:	4252      	negs	r2, r2
 800b952:	40da      	lsrs	r2, r3
 800b954:	3904      	subs	r1, #4
 800b956:	680b      	ldr	r3, [r1, #0]
 800b958:	4013      	ands	r3, r2
 800b95a:	600b      	str	r3, [r1, #0]
 800b95c:	e7d2      	b.n	800b904 <__hexnan+0xec>
 800b95e:	3f04      	subs	r7, #4
 800b960:	e7d0      	b.n	800b904 <__hexnan+0xec>
 800b962:	2004      	movs	r0, #4
 800b964:	b00b      	add	sp, #44	; 0x2c
 800b966:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b968 <__ascii_mbtowc>:
 800b968:	b082      	sub	sp, #8
 800b96a:	2900      	cmp	r1, #0
 800b96c:	d100      	bne.n	800b970 <__ascii_mbtowc+0x8>
 800b96e:	a901      	add	r1, sp, #4
 800b970:	1e10      	subs	r0, r2, #0
 800b972:	d006      	beq.n	800b982 <__ascii_mbtowc+0x1a>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d006      	beq.n	800b986 <__ascii_mbtowc+0x1e>
 800b978:	7813      	ldrb	r3, [r2, #0]
 800b97a:	600b      	str	r3, [r1, #0]
 800b97c:	7810      	ldrb	r0, [r2, #0]
 800b97e:	1e43      	subs	r3, r0, #1
 800b980:	4198      	sbcs	r0, r3
 800b982:	b002      	add	sp, #8
 800b984:	4770      	bx	lr
 800b986:	2002      	movs	r0, #2
 800b988:	4240      	negs	r0, r0
 800b98a:	e7fa      	b.n	800b982 <__ascii_mbtowc+0x1a>

0800b98c <_realloc_r>:
 800b98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b98e:	0007      	movs	r7, r0
 800b990:	000e      	movs	r6, r1
 800b992:	0014      	movs	r4, r2
 800b994:	2900      	cmp	r1, #0
 800b996:	d105      	bne.n	800b9a4 <_realloc_r+0x18>
 800b998:	0011      	movs	r1, r2
 800b99a:	f7fd fde7 	bl	800956c <_malloc_r>
 800b99e:	0005      	movs	r5, r0
 800b9a0:	0028      	movs	r0, r5
 800b9a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9a4:	2a00      	cmp	r2, #0
 800b9a6:	d103      	bne.n	800b9b0 <_realloc_r+0x24>
 800b9a8:	f7fd fd6a 	bl	8009480 <_free_r>
 800b9ac:	0025      	movs	r5, r4
 800b9ae:	e7f7      	b.n	800b9a0 <_realloc_r+0x14>
 800b9b0:	f000 f83f 	bl	800ba32 <_malloc_usable_size_r>
 800b9b4:	9001      	str	r0, [sp, #4]
 800b9b6:	4284      	cmp	r4, r0
 800b9b8:	d803      	bhi.n	800b9c2 <_realloc_r+0x36>
 800b9ba:	0035      	movs	r5, r6
 800b9bc:	0843      	lsrs	r3, r0, #1
 800b9be:	42a3      	cmp	r3, r4
 800b9c0:	d3ee      	bcc.n	800b9a0 <_realloc_r+0x14>
 800b9c2:	0021      	movs	r1, r4
 800b9c4:	0038      	movs	r0, r7
 800b9c6:	f7fd fdd1 	bl	800956c <_malloc_r>
 800b9ca:	1e05      	subs	r5, r0, #0
 800b9cc:	d0e8      	beq.n	800b9a0 <_realloc_r+0x14>
 800b9ce:	9b01      	ldr	r3, [sp, #4]
 800b9d0:	0022      	movs	r2, r4
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	d900      	bls.n	800b9d8 <_realloc_r+0x4c>
 800b9d6:	001a      	movs	r2, r3
 800b9d8:	0031      	movs	r1, r6
 800b9da:	0028      	movs	r0, r5
 800b9dc:	f7fc fea4 	bl	8008728 <memcpy>
 800b9e0:	0031      	movs	r1, r6
 800b9e2:	0038      	movs	r0, r7
 800b9e4:	f7fd fd4c 	bl	8009480 <_free_r>
 800b9e8:	e7da      	b.n	800b9a0 <_realloc_r+0x14>

0800b9ea <__ascii_wctomb>:
 800b9ea:	0003      	movs	r3, r0
 800b9ec:	1e08      	subs	r0, r1, #0
 800b9ee:	d005      	beq.n	800b9fc <__ascii_wctomb+0x12>
 800b9f0:	2aff      	cmp	r2, #255	; 0xff
 800b9f2:	d904      	bls.n	800b9fe <__ascii_wctomb+0x14>
 800b9f4:	228a      	movs	r2, #138	; 0x8a
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	4240      	negs	r0, r0
 800b9fc:	4770      	bx	lr
 800b9fe:	2001      	movs	r0, #1
 800ba00:	700a      	strb	r2, [r1, #0]
 800ba02:	e7fb      	b.n	800b9fc <__ascii_wctomb+0x12>

0800ba04 <fiprintf>:
 800ba04:	b40e      	push	{r1, r2, r3}
 800ba06:	b517      	push	{r0, r1, r2, r4, lr}
 800ba08:	4c05      	ldr	r4, [pc, #20]	; (800ba20 <fiprintf+0x1c>)
 800ba0a:	ab05      	add	r3, sp, #20
 800ba0c:	cb04      	ldmia	r3!, {r2}
 800ba0e:	0001      	movs	r1, r0
 800ba10:	6820      	ldr	r0, [r4, #0]
 800ba12:	9301      	str	r3, [sp, #4]
 800ba14:	f000 f83c 	bl	800ba90 <_vfiprintf_r>
 800ba18:	bc1e      	pop	{r1, r2, r3, r4}
 800ba1a:	bc08      	pop	{r3}
 800ba1c:	b003      	add	sp, #12
 800ba1e:	4718      	bx	r3
 800ba20:	20000068 	.word	0x20000068

0800ba24 <abort>:
 800ba24:	2006      	movs	r0, #6
 800ba26:	b510      	push	{r4, lr}
 800ba28:	f000 fa1e 	bl	800be68 <raise>
 800ba2c:	2001      	movs	r0, #1
 800ba2e:	f7f7 fa71 	bl	8002f14 <_exit>

0800ba32 <_malloc_usable_size_r>:
 800ba32:	1f0b      	subs	r3, r1, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1f18      	subs	r0, r3, #4
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	da01      	bge.n	800ba40 <_malloc_usable_size_r+0xe>
 800ba3c:	580b      	ldr	r3, [r1, r0]
 800ba3e:	18c0      	adds	r0, r0, r3
 800ba40:	4770      	bx	lr

0800ba42 <__sfputc_r>:
 800ba42:	6893      	ldr	r3, [r2, #8]
 800ba44:	b510      	push	{r4, lr}
 800ba46:	3b01      	subs	r3, #1
 800ba48:	6093      	str	r3, [r2, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	da04      	bge.n	800ba58 <__sfputc_r+0x16>
 800ba4e:	6994      	ldr	r4, [r2, #24]
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	db07      	blt.n	800ba64 <__sfputc_r+0x22>
 800ba54:	290a      	cmp	r1, #10
 800ba56:	d005      	beq.n	800ba64 <__sfputc_r+0x22>
 800ba58:	6813      	ldr	r3, [r2, #0]
 800ba5a:	1c58      	adds	r0, r3, #1
 800ba5c:	6010      	str	r0, [r2, #0]
 800ba5e:	7019      	strb	r1, [r3, #0]
 800ba60:	0008      	movs	r0, r1
 800ba62:	bd10      	pop	{r4, pc}
 800ba64:	f000 f930 	bl	800bcc8 <__swbuf_r>
 800ba68:	0001      	movs	r1, r0
 800ba6a:	e7f9      	b.n	800ba60 <__sfputc_r+0x1e>

0800ba6c <__sfputs_r>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	0006      	movs	r6, r0
 800ba70:	000f      	movs	r7, r1
 800ba72:	0014      	movs	r4, r2
 800ba74:	18d5      	adds	r5, r2, r3
 800ba76:	42ac      	cmp	r4, r5
 800ba78:	d101      	bne.n	800ba7e <__sfputs_r+0x12>
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	e007      	b.n	800ba8e <__sfputs_r+0x22>
 800ba7e:	7821      	ldrb	r1, [r4, #0]
 800ba80:	003a      	movs	r2, r7
 800ba82:	0030      	movs	r0, r6
 800ba84:	f7ff ffdd 	bl	800ba42 <__sfputc_r>
 800ba88:	3401      	adds	r4, #1
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d1f3      	bne.n	800ba76 <__sfputs_r+0xa>
 800ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba90 <_vfiprintf_r>:
 800ba90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba92:	b0a1      	sub	sp, #132	; 0x84
 800ba94:	000f      	movs	r7, r1
 800ba96:	0015      	movs	r5, r2
 800ba98:	001e      	movs	r6, r3
 800ba9a:	9003      	str	r0, [sp, #12]
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d004      	beq.n	800baaa <_vfiprintf_r+0x1a>
 800baa0:	6a03      	ldr	r3, [r0, #32]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <_vfiprintf_r+0x1a>
 800baa6:	f7fc fcaf 	bl	8008408 <__sinit>
 800baaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baac:	07db      	lsls	r3, r3, #31
 800baae:	d405      	bmi.n	800babc <_vfiprintf_r+0x2c>
 800bab0:	89bb      	ldrh	r3, [r7, #12]
 800bab2:	059b      	lsls	r3, r3, #22
 800bab4:	d402      	bmi.n	800babc <_vfiprintf_r+0x2c>
 800bab6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bab8:	f7fc fe29 	bl	800870e <__retarget_lock_acquire_recursive>
 800babc:	89bb      	ldrh	r3, [r7, #12]
 800babe:	071b      	lsls	r3, r3, #28
 800bac0:	d502      	bpl.n	800bac8 <_vfiprintf_r+0x38>
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d113      	bne.n	800baf0 <_vfiprintf_r+0x60>
 800bac8:	0039      	movs	r1, r7
 800baca:	9803      	ldr	r0, [sp, #12]
 800bacc:	f000 f93e 	bl	800bd4c <__swsetup_r>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d00d      	beq.n	800baf0 <_vfiprintf_r+0x60>
 800bad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bad6:	07db      	lsls	r3, r3, #31
 800bad8:	d503      	bpl.n	800bae2 <_vfiprintf_r+0x52>
 800bada:	2001      	movs	r0, #1
 800badc:	4240      	negs	r0, r0
 800bade:	b021      	add	sp, #132	; 0x84
 800bae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bae2:	89bb      	ldrh	r3, [r7, #12]
 800bae4:	059b      	lsls	r3, r3, #22
 800bae6:	d4f8      	bmi.n	800bada <_vfiprintf_r+0x4a>
 800bae8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800baea:	f7fc fe11 	bl	8008710 <__retarget_lock_release_recursive>
 800baee:	e7f4      	b.n	800bada <_vfiprintf_r+0x4a>
 800baf0:	2300      	movs	r3, #0
 800baf2:	ac08      	add	r4, sp, #32
 800baf4:	6163      	str	r3, [r4, #20]
 800baf6:	3320      	adds	r3, #32
 800baf8:	7663      	strb	r3, [r4, #25]
 800bafa:	3310      	adds	r3, #16
 800bafc:	76a3      	strb	r3, [r4, #26]
 800bafe:	9607      	str	r6, [sp, #28]
 800bb00:	002e      	movs	r6, r5
 800bb02:	7833      	ldrb	r3, [r6, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <_vfiprintf_r+0x7c>
 800bb08:	2b25      	cmp	r3, #37	; 0x25
 800bb0a:	d148      	bne.n	800bb9e <_vfiprintf_r+0x10e>
 800bb0c:	1b73      	subs	r3, r6, r5
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	42ae      	cmp	r6, r5
 800bb12:	d00b      	beq.n	800bb2c <_vfiprintf_r+0x9c>
 800bb14:	002a      	movs	r2, r5
 800bb16:	0039      	movs	r1, r7
 800bb18:	9803      	ldr	r0, [sp, #12]
 800bb1a:	f7ff ffa7 	bl	800ba6c <__sfputs_r>
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d100      	bne.n	800bb24 <_vfiprintf_r+0x94>
 800bb22:	e0af      	b.n	800bc84 <_vfiprintf_r+0x1f4>
 800bb24:	6963      	ldr	r3, [r4, #20]
 800bb26:	9a05      	ldr	r2, [sp, #20]
 800bb28:	189b      	adds	r3, r3, r2
 800bb2a:	6163      	str	r3, [r4, #20]
 800bb2c:	7833      	ldrb	r3, [r6, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d100      	bne.n	800bb34 <_vfiprintf_r+0xa4>
 800bb32:	e0a7      	b.n	800bc84 <_vfiprintf_r+0x1f4>
 800bb34:	2201      	movs	r2, #1
 800bb36:	2300      	movs	r3, #0
 800bb38:	4252      	negs	r2, r2
 800bb3a:	6062      	str	r2, [r4, #4]
 800bb3c:	a904      	add	r1, sp, #16
 800bb3e:	3254      	adds	r2, #84	; 0x54
 800bb40:	1852      	adds	r2, r2, r1
 800bb42:	1c75      	adds	r5, r6, #1
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	60e3      	str	r3, [r4, #12]
 800bb48:	60a3      	str	r3, [r4, #8]
 800bb4a:	7013      	strb	r3, [r2, #0]
 800bb4c:	65a3      	str	r3, [r4, #88]	; 0x58
 800bb4e:	4b59      	ldr	r3, [pc, #356]	; (800bcb4 <_vfiprintf_r+0x224>)
 800bb50:	2205      	movs	r2, #5
 800bb52:	0018      	movs	r0, r3
 800bb54:	7829      	ldrb	r1, [r5, #0]
 800bb56:	9305      	str	r3, [sp, #20]
 800bb58:	f7fc fddb 	bl	8008712 <memchr>
 800bb5c:	1c6e      	adds	r6, r5, #1
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d11f      	bne.n	800bba2 <_vfiprintf_r+0x112>
 800bb62:	6822      	ldr	r2, [r4, #0]
 800bb64:	06d3      	lsls	r3, r2, #27
 800bb66:	d504      	bpl.n	800bb72 <_vfiprintf_r+0xe2>
 800bb68:	2353      	movs	r3, #83	; 0x53
 800bb6a:	a904      	add	r1, sp, #16
 800bb6c:	185b      	adds	r3, r3, r1
 800bb6e:	2120      	movs	r1, #32
 800bb70:	7019      	strb	r1, [r3, #0]
 800bb72:	0713      	lsls	r3, r2, #28
 800bb74:	d504      	bpl.n	800bb80 <_vfiprintf_r+0xf0>
 800bb76:	2353      	movs	r3, #83	; 0x53
 800bb78:	a904      	add	r1, sp, #16
 800bb7a:	185b      	adds	r3, r3, r1
 800bb7c:	212b      	movs	r1, #43	; 0x2b
 800bb7e:	7019      	strb	r1, [r3, #0]
 800bb80:	782b      	ldrb	r3, [r5, #0]
 800bb82:	2b2a      	cmp	r3, #42	; 0x2a
 800bb84:	d016      	beq.n	800bbb4 <_vfiprintf_r+0x124>
 800bb86:	002e      	movs	r6, r5
 800bb88:	2100      	movs	r1, #0
 800bb8a:	200a      	movs	r0, #10
 800bb8c:	68e3      	ldr	r3, [r4, #12]
 800bb8e:	7832      	ldrb	r2, [r6, #0]
 800bb90:	1c75      	adds	r5, r6, #1
 800bb92:	3a30      	subs	r2, #48	; 0x30
 800bb94:	2a09      	cmp	r2, #9
 800bb96:	d94e      	bls.n	800bc36 <_vfiprintf_r+0x1a6>
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	d111      	bne.n	800bbc0 <_vfiprintf_r+0x130>
 800bb9c:	e017      	b.n	800bbce <_vfiprintf_r+0x13e>
 800bb9e:	3601      	adds	r6, #1
 800bba0:	e7af      	b.n	800bb02 <_vfiprintf_r+0x72>
 800bba2:	9b05      	ldr	r3, [sp, #20]
 800bba4:	6822      	ldr	r2, [r4, #0]
 800bba6:	1ac0      	subs	r0, r0, r3
 800bba8:	2301      	movs	r3, #1
 800bbaa:	4083      	lsls	r3, r0
 800bbac:	4313      	orrs	r3, r2
 800bbae:	0035      	movs	r5, r6
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	e7cc      	b.n	800bb4e <_vfiprintf_r+0xbe>
 800bbb4:	9b07      	ldr	r3, [sp, #28]
 800bbb6:	1d19      	adds	r1, r3, #4
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	9107      	str	r1, [sp, #28]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	db01      	blt.n	800bbc4 <_vfiprintf_r+0x134>
 800bbc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbc2:	e004      	b.n	800bbce <_vfiprintf_r+0x13e>
 800bbc4:	425b      	negs	r3, r3
 800bbc6:	60e3      	str	r3, [r4, #12]
 800bbc8:	2302      	movs	r3, #2
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	7833      	ldrb	r3, [r6, #0]
 800bbd0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd2:	d10a      	bne.n	800bbea <_vfiprintf_r+0x15a>
 800bbd4:	7873      	ldrb	r3, [r6, #1]
 800bbd6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbd8:	d135      	bne.n	800bc46 <_vfiprintf_r+0x1b6>
 800bbda:	9b07      	ldr	r3, [sp, #28]
 800bbdc:	3602      	adds	r6, #2
 800bbde:	1d1a      	adds	r2, r3, #4
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	9207      	str	r2, [sp, #28]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	db2b      	blt.n	800bc40 <_vfiprintf_r+0x1b0>
 800bbe8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbea:	4d33      	ldr	r5, [pc, #204]	; (800bcb8 <_vfiprintf_r+0x228>)
 800bbec:	2203      	movs	r2, #3
 800bbee:	0028      	movs	r0, r5
 800bbf0:	7831      	ldrb	r1, [r6, #0]
 800bbf2:	f7fc fd8e 	bl	8008712 <memchr>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d006      	beq.n	800bc08 <_vfiprintf_r+0x178>
 800bbfa:	2340      	movs	r3, #64	; 0x40
 800bbfc:	1b40      	subs	r0, r0, r5
 800bbfe:	4083      	lsls	r3, r0
 800bc00:	6822      	ldr	r2, [r4, #0]
 800bc02:	3601      	adds	r6, #1
 800bc04:	4313      	orrs	r3, r2
 800bc06:	6023      	str	r3, [r4, #0]
 800bc08:	7831      	ldrb	r1, [r6, #0]
 800bc0a:	2206      	movs	r2, #6
 800bc0c:	482b      	ldr	r0, [pc, #172]	; (800bcbc <_vfiprintf_r+0x22c>)
 800bc0e:	1c75      	adds	r5, r6, #1
 800bc10:	7621      	strb	r1, [r4, #24]
 800bc12:	f7fc fd7e 	bl	8008712 <memchr>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d043      	beq.n	800bca2 <_vfiprintf_r+0x212>
 800bc1a:	4b29      	ldr	r3, [pc, #164]	; (800bcc0 <_vfiprintf_r+0x230>)
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d125      	bne.n	800bc6c <_vfiprintf_r+0x1dc>
 800bc20:	2207      	movs	r2, #7
 800bc22:	9b07      	ldr	r3, [sp, #28]
 800bc24:	3307      	adds	r3, #7
 800bc26:	4393      	bics	r3, r2
 800bc28:	3308      	adds	r3, #8
 800bc2a:	9307      	str	r3, [sp, #28]
 800bc2c:	6963      	ldr	r3, [r4, #20]
 800bc2e:	9a04      	ldr	r2, [sp, #16]
 800bc30:	189b      	adds	r3, r3, r2
 800bc32:	6163      	str	r3, [r4, #20]
 800bc34:	e764      	b.n	800bb00 <_vfiprintf_r+0x70>
 800bc36:	4343      	muls	r3, r0
 800bc38:	002e      	movs	r6, r5
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	189b      	adds	r3, r3, r2
 800bc3e:	e7a6      	b.n	800bb8e <_vfiprintf_r+0xfe>
 800bc40:	2301      	movs	r3, #1
 800bc42:	425b      	negs	r3, r3
 800bc44:	e7d0      	b.n	800bbe8 <_vfiprintf_r+0x158>
 800bc46:	2300      	movs	r3, #0
 800bc48:	200a      	movs	r0, #10
 800bc4a:	001a      	movs	r2, r3
 800bc4c:	3601      	adds	r6, #1
 800bc4e:	6063      	str	r3, [r4, #4]
 800bc50:	7831      	ldrb	r1, [r6, #0]
 800bc52:	1c75      	adds	r5, r6, #1
 800bc54:	3930      	subs	r1, #48	; 0x30
 800bc56:	2909      	cmp	r1, #9
 800bc58:	d903      	bls.n	800bc62 <_vfiprintf_r+0x1d2>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0c5      	beq.n	800bbea <_vfiprintf_r+0x15a>
 800bc5e:	9209      	str	r2, [sp, #36]	; 0x24
 800bc60:	e7c3      	b.n	800bbea <_vfiprintf_r+0x15a>
 800bc62:	4342      	muls	r2, r0
 800bc64:	002e      	movs	r6, r5
 800bc66:	2301      	movs	r3, #1
 800bc68:	1852      	adds	r2, r2, r1
 800bc6a:	e7f1      	b.n	800bc50 <_vfiprintf_r+0x1c0>
 800bc6c:	aa07      	add	r2, sp, #28
 800bc6e:	9200      	str	r2, [sp, #0]
 800bc70:	0021      	movs	r1, r4
 800bc72:	003a      	movs	r2, r7
 800bc74:	4b13      	ldr	r3, [pc, #76]	; (800bcc4 <_vfiprintf_r+0x234>)
 800bc76:	9803      	ldr	r0, [sp, #12]
 800bc78:	f7fb fd58 	bl	800772c <_printf_float>
 800bc7c:	9004      	str	r0, [sp, #16]
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	3301      	adds	r3, #1
 800bc82:	d1d3      	bne.n	800bc2c <_vfiprintf_r+0x19c>
 800bc84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc86:	07db      	lsls	r3, r3, #31
 800bc88:	d405      	bmi.n	800bc96 <_vfiprintf_r+0x206>
 800bc8a:	89bb      	ldrh	r3, [r7, #12]
 800bc8c:	059b      	lsls	r3, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_vfiprintf_r+0x206>
 800bc90:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bc92:	f7fc fd3d 	bl	8008710 <__retarget_lock_release_recursive>
 800bc96:	89bb      	ldrh	r3, [r7, #12]
 800bc98:	065b      	lsls	r3, r3, #25
 800bc9a:	d500      	bpl.n	800bc9e <_vfiprintf_r+0x20e>
 800bc9c:	e71d      	b.n	800bada <_vfiprintf_r+0x4a>
 800bc9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bca0:	e71d      	b.n	800bade <_vfiprintf_r+0x4e>
 800bca2:	aa07      	add	r2, sp, #28
 800bca4:	9200      	str	r2, [sp, #0]
 800bca6:	0021      	movs	r1, r4
 800bca8:	003a      	movs	r2, r7
 800bcaa:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <_vfiprintf_r+0x234>)
 800bcac:	9803      	ldr	r0, [sp, #12]
 800bcae:	f7fc f803 	bl	8007cb8 <_printf_i>
 800bcb2:	e7e3      	b.n	800bc7c <_vfiprintf_r+0x1ec>
 800bcb4:	0800c501 	.word	0x0800c501
 800bcb8:	0800c507 	.word	0x0800c507
 800bcbc:	0800c50b 	.word	0x0800c50b
 800bcc0:	0800772d 	.word	0x0800772d
 800bcc4:	0800ba6d 	.word	0x0800ba6d

0800bcc8 <__swbuf_r>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	0006      	movs	r6, r0
 800bccc:	000d      	movs	r5, r1
 800bcce:	0014      	movs	r4, r2
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d004      	beq.n	800bcde <__swbuf_r+0x16>
 800bcd4:	6a03      	ldr	r3, [r0, #32]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <__swbuf_r+0x16>
 800bcda:	f7fc fb95 	bl	8008408 <__sinit>
 800bcde:	69a3      	ldr	r3, [r4, #24]
 800bce0:	60a3      	str	r3, [r4, #8]
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	071b      	lsls	r3, r3, #28
 800bce6:	d528      	bpl.n	800bd3a <__swbuf_r+0x72>
 800bce8:	6923      	ldr	r3, [r4, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d025      	beq.n	800bd3a <__swbuf_r+0x72>
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	6820      	ldr	r0, [r4, #0]
 800bcf2:	b2ef      	uxtb	r7, r5
 800bcf4:	1ac0      	subs	r0, r0, r3
 800bcf6:	6963      	ldr	r3, [r4, #20]
 800bcf8:	b2ed      	uxtb	r5, r5
 800bcfa:	4283      	cmp	r3, r0
 800bcfc:	dc05      	bgt.n	800bd0a <__swbuf_r+0x42>
 800bcfe:	0021      	movs	r1, r4
 800bd00:	0030      	movs	r0, r6
 800bd02:	f7ff fa21 	bl	800b148 <_fflush_r>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d11d      	bne.n	800bd46 <__swbuf_r+0x7e>
 800bd0a:	68a3      	ldr	r3, [r4, #8]
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	60a3      	str	r3, [r4, #8]
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	6022      	str	r2, [r4, #0]
 800bd18:	701f      	strb	r7, [r3, #0]
 800bd1a:	6963      	ldr	r3, [r4, #20]
 800bd1c:	4283      	cmp	r3, r0
 800bd1e:	d004      	beq.n	800bd2a <__swbuf_r+0x62>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	07db      	lsls	r3, r3, #31
 800bd24:	d507      	bpl.n	800bd36 <__swbuf_r+0x6e>
 800bd26:	2d0a      	cmp	r5, #10
 800bd28:	d105      	bne.n	800bd36 <__swbuf_r+0x6e>
 800bd2a:	0021      	movs	r1, r4
 800bd2c:	0030      	movs	r0, r6
 800bd2e:	f7ff fa0b 	bl	800b148 <_fflush_r>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d107      	bne.n	800bd46 <__swbuf_r+0x7e>
 800bd36:	0028      	movs	r0, r5
 800bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd3a:	0021      	movs	r1, r4
 800bd3c:	0030      	movs	r0, r6
 800bd3e:	f000 f805 	bl	800bd4c <__swsetup_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d0d3      	beq.n	800bcee <__swbuf_r+0x26>
 800bd46:	2501      	movs	r5, #1
 800bd48:	426d      	negs	r5, r5
 800bd4a:	e7f4      	b.n	800bd36 <__swbuf_r+0x6e>

0800bd4c <__swsetup_r>:
 800bd4c:	4b30      	ldr	r3, [pc, #192]	; (800be10 <__swsetup_r+0xc4>)
 800bd4e:	b570      	push	{r4, r5, r6, lr}
 800bd50:	0005      	movs	r5, r0
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	000c      	movs	r4, r1
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d004      	beq.n	800bd64 <__swsetup_r+0x18>
 800bd5a:	6a03      	ldr	r3, [r0, #32]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <__swsetup_r+0x18>
 800bd60:	f7fc fb52 	bl	8008408 <__sinit>
 800bd64:	230c      	movs	r3, #12
 800bd66:	5ee2      	ldrsh	r2, [r4, r3]
 800bd68:	b293      	uxth	r3, r2
 800bd6a:	0711      	lsls	r1, r2, #28
 800bd6c:	d423      	bmi.n	800bdb6 <__swsetup_r+0x6a>
 800bd6e:	06d9      	lsls	r1, r3, #27
 800bd70:	d407      	bmi.n	800bd82 <__swsetup_r+0x36>
 800bd72:	2309      	movs	r3, #9
 800bd74:	2001      	movs	r0, #1
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	3337      	adds	r3, #55	; 0x37
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	4240      	negs	r0, r0
 800bd80:	bd70      	pop	{r4, r5, r6, pc}
 800bd82:	075b      	lsls	r3, r3, #29
 800bd84:	d513      	bpl.n	800bdae <__swsetup_r+0x62>
 800bd86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd88:	2900      	cmp	r1, #0
 800bd8a:	d008      	beq.n	800bd9e <__swsetup_r+0x52>
 800bd8c:	0023      	movs	r3, r4
 800bd8e:	3344      	adds	r3, #68	; 0x44
 800bd90:	4299      	cmp	r1, r3
 800bd92:	d002      	beq.n	800bd9a <__swsetup_r+0x4e>
 800bd94:	0028      	movs	r0, r5
 800bd96:	f7fd fb73 	bl	8009480 <_free_r>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd9e:	2224      	movs	r2, #36	; 0x24
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	4393      	bics	r3, r2
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	2300      	movs	r3, #0
 800bda8:	6063      	str	r3, [r4, #4]
 800bdaa:	6923      	ldr	r3, [r4, #16]
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	2308      	movs	r3, #8
 800bdb0:	89a2      	ldrh	r2, [r4, #12]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10b      	bne.n	800bdd4 <__swsetup_r+0x88>
 800bdbc:	21a0      	movs	r1, #160	; 0xa0
 800bdbe:	2280      	movs	r2, #128	; 0x80
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	0089      	lsls	r1, r1, #2
 800bdc4:	0092      	lsls	r2, r2, #2
 800bdc6:	400b      	ands	r3, r1
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d003      	beq.n	800bdd4 <__swsetup_r+0x88>
 800bdcc:	0021      	movs	r1, r4
 800bdce:	0028      	movs	r0, r5
 800bdd0:	f000 f892 	bl	800bef8 <__smakebuf_r>
 800bdd4:	220c      	movs	r2, #12
 800bdd6:	5ea3      	ldrsh	r3, [r4, r2]
 800bdd8:	2001      	movs	r0, #1
 800bdda:	001a      	movs	r2, r3
 800bddc:	b299      	uxth	r1, r3
 800bdde:	4002      	ands	r2, r0
 800bde0:	4203      	tst	r3, r0
 800bde2:	d00f      	beq.n	800be04 <__swsetup_r+0xb8>
 800bde4:	2200      	movs	r2, #0
 800bde6:	60a2      	str	r2, [r4, #8]
 800bde8:	6962      	ldr	r2, [r4, #20]
 800bdea:	4252      	negs	r2, r2
 800bdec:	61a2      	str	r2, [r4, #24]
 800bdee:	2000      	movs	r0, #0
 800bdf0:	6922      	ldr	r2, [r4, #16]
 800bdf2:	4282      	cmp	r2, r0
 800bdf4:	d1c4      	bne.n	800bd80 <__swsetup_r+0x34>
 800bdf6:	0609      	lsls	r1, r1, #24
 800bdf8:	d5c2      	bpl.n	800bd80 <__swsetup_r+0x34>
 800bdfa:	2240      	movs	r2, #64	; 0x40
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	81a3      	strh	r3, [r4, #12]
 800be00:	3801      	subs	r0, #1
 800be02:	e7bd      	b.n	800bd80 <__swsetup_r+0x34>
 800be04:	0788      	lsls	r0, r1, #30
 800be06:	d400      	bmi.n	800be0a <__swsetup_r+0xbe>
 800be08:	6962      	ldr	r2, [r4, #20]
 800be0a:	60a2      	str	r2, [r4, #8]
 800be0c:	e7ef      	b.n	800bdee <__swsetup_r+0xa2>
 800be0e:	46c0      	nop			; (mov r8, r8)
 800be10:	20000068 	.word	0x20000068

0800be14 <_raise_r>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	0004      	movs	r4, r0
 800be18:	000d      	movs	r5, r1
 800be1a:	291f      	cmp	r1, #31
 800be1c:	d904      	bls.n	800be28 <_raise_r+0x14>
 800be1e:	2316      	movs	r3, #22
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	2001      	movs	r0, #1
 800be24:	4240      	negs	r0, r0
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d004      	beq.n	800be38 <_raise_r+0x24>
 800be2e:	008a      	lsls	r2, r1, #2
 800be30:	189b      	adds	r3, r3, r2
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	2a00      	cmp	r2, #0
 800be36:	d108      	bne.n	800be4a <_raise_r+0x36>
 800be38:	0020      	movs	r0, r4
 800be3a:	f000 f831 	bl	800bea0 <_getpid_r>
 800be3e:	002a      	movs	r2, r5
 800be40:	0001      	movs	r1, r0
 800be42:	0020      	movs	r0, r4
 800be44:	f000 f81a 	bl	800be7c <_kill_r>
 800be48:	e7ed      	b.n	800be26 <_raise_r+0x12>
 800be4a:	2000      	movs	r0, #0
 800be4c:	2a01      	cmp	r2, #1
 800be4e:	d0ea      	beq.n	800be26 <_raise_r+0x12>
 800be50:	1c51      	adds	r1, r2, #1
 800be52:	d103      	bne.n	800be5c <_raise_r+0x48>
 800be54:	2316      	movs	r3, #22
 800be56:	3001      	adds	r0, #1
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	e7e4      	b.n	800be26 <_raise_r+0x12>
 800be5c:	2400      	movs	r4, #0
 800be5e:	0028      	movs	r0, r5
 800be60:	601c      	str	r4, [r3, #0]
 800be62:	4790      	blx	r2
 800be64:	0020      	movs	r0, r4
 800be66:	e7de      	b.n	800be26 <_raise_r+0x12>

0800be68 <raise>:
 800be68:	b510      	push	{r4, lr}
 800be6a:	4b03      	ldr	r3, [pc, #12]	; (800be78 <raise+0x10>)
 800be6c:	0001      	movs	r1, r0
 800be6e:	6818      	ldr	r0, [r3, #0]
 800be70:	f7ff ffd0 	bl	800be14 <_raise_r>
 800be74:	bd10      	pop	{r4, pc}
 800be76:	46c0      	nop			; (mov r8, r8)
 800be78:	20000068 	.word	0x20000068

0800be7c <_kill_r>:
 800be7c:	2300      	movs	r3, #0
 800be7e:	b570      	push	{r4, r5, r6, lr}
 800be80:	4d06      	ldr	r5, [pc, #24]	; (800be9c <_kill_r+0x20>)
 800be82:	0004      	movs	r4, r0
 800be84:	0008      	movs	r0, r1
 800be86:	0011      	movs	r1, r2
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	f7f7 f83b 	bl	8002f04 <_kill>
 800be8e:	1c43      	adds	r3, r0, #1
 800be90:	d103      	bne.n	800be9a <_kill_r+0x1e>
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d000      	beq.n	800be9a <_kill_r+0x1e>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	2000221c 	.word	0x2000221c

0800bea0 <_getpid_r>:
 800bea0:	b510      	push	{r4, lr}
 800bea2:	f7f7 f82d 	bl	8002f00 <_getpid>
 800bea6:	bd10      	pop	{r4, pc}

0800bea8 <__swhatbuf_r>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	000e      	movs	r6, r1
 800beac:	001d      	movs	r5, r3
 800beae:	230e      	movs	r3, #14
 800beb0:	5ec9      	ldrsh	r1, [r1, r3]
 800beb2:	0014      	movs	r4, r2
 800beb4:	b096      	sub	sp, #88	; 0x58
 800beb6:	2900      	cmp	r1, #0
 800beb8:	da0c      	bge.n	800bed4 <__swhatbuf_r+0x2c>
 800beba:	89b2      	ldrh	r2, [r6, #12]
 800bebc:	2380      	movs	r3, #128	; 0x80
 800bebe:	0011      	movs	r1, r2
 800bec0:	4019      	ands	r1, r3
 800bec2:	421a      	tst	r2, r3
 800bec4:	d013      	beq.n	800beee <__swhatbuf_r+0x46>
 800bec6:	2100      	movs	r1, #0
 800bec8:	3b40      	subs	r3, #64	; 0x40
 800beca:	2000      	movs	r0, #0
 800becc:	6029      	str	r1, [r5, #0]
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	b016      	add	sp, #88	; 0x58
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	466a      	mov	r2, sp
 800bed6:	f000 f84d 	bl	800bf74 <_fstat_r>
 800beda:	2800      	cmp	r0, #0
 800bedc:	dbed      	blt.n	800beba <__swhatbuf_r+0x12>
 800bede:	23f0      	movs	r3, #240	; 0xf0
 800bee0:	9901      	ldr	r1, [sp, #4]
 800bee2:	021b      	lsls	r3, r3, #8
 800bee4:	4019      	ands	r1, r3
 800bee6:	4b03      	ldr	r3, [pc, #12]	; (800bef4 <__swhatbuf_r+0x4c>)
 800bee8:	18c9      	adds	r1, r1, r3
 800beea:	424b      	negs	r3, r1
 800beec:	4159      	adcs	r1, r3
 800beee:	2380      	movs	r3, #128	; 0x80
 800bef0:	00db      	lsls	r3, r3, #3
 800bef2:	e7ea      	b.n	800beca <__swhatbuf_r+0x22>
 800bef4:	ffffe000 	.word	0xffffe000

0800bef8 <__smakebuf_r>:
 800bef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800befa:	2602      	movs	r6, #2
 800befc:	898b      	ldrh	r3, [r1, #12]
 800befe:	0005      	movs	r5, r0
 800bf00:	000c      	movs	r4, r1
 800bf02:	4233      	tst	r3, r6
 800bf04:	d006      	beq.n	800bf14 <__smakebuf_r+0x1c>
 800bf06:	0023      	movs	r3, r4
 800bf08:	3347      	adds	r3, #71	; 0x47
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	6123      	str	r3, [r4, #16]
 800bf0e:	2301      	movs	r3, #1
 800bf10:	6163      	str	r3, [r4, #20]
 800bf12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bf14:	466a      	mov	r2, sp
 800bf16:	ab01      	add	r3, sp, #4
 800bf18:	f7ff ffc6 	bl	800bea8 <__swhatbuf_r>
 800bf1c:	9900      	ldr	r1, [sp, #0]
 800bf1e:	0007      	movs	r7, r0
 800bf20:	0028      	movs	r0, r5
 800bf22:	f7fd fb23 	bl	800956c <_malloc_r>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d108      	bne.n	800bf3c <__smakebuf_r+0x44>
 800bf2a:	220c      	movs	r2, #12
 800bf2c:	5ea3      	ldrsh	r3, [r4, r2]
 800bf2e:	059a      	lsls	r2, r3, #22
 800bf30:	d4ef      	bmi.n	800bf12 <__smakebuf_r+0x1a>
 800bf32:	2203      	movs	r2, #3
 800bf34:	4393      	bics	r3, r2
 800bf36:	431e      	orrs	r6, r3
 800bf38:	81a6      	strh	r6, [r4, #12]
 800bf3a:	e7e4      	b.n	800bf06 <__smakebuf_r+0xe>
 800bf3c:	2380      	movs	r3, #128	; 0x80
 800bf3e:	89a2      	ldrh	r2, [r4, #12]
 800bf40:	6020      	str	r0, [r4, #0]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	81a3      	strh	r3, [r4, #12]
 800bf46:	9b00      	ldr	r3, [sp, #0]
 800bf48:	6120      	str	r0, [r4, #16]
 800bf4a:	6163      	str	r3, [r4, #20]
 800bf4c:	9b01      	ldr	r3, [sp, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00c      	beq.n	800bf6c <__smakebuf_r+0x74>
 800bf52:	0028      	movs	r0, r5
 800bf54:	230e      	movs	r3, #14
 800bf56:	5ee1      	ldrsh	r1, [r4, r3]
 800bf58:	f000 f81e 	bl	800bf98 <_isatty_r>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d005      	beq.n	800bf6c <__smakebuf_r+0x74>
 800bf60:	2303      	movs	r3, #3
 800bf62:	89a2      	ldrh	r2, [r4, #12]
 800bf64:	439a      	bics	r2, r3
 800bf66:	3b02      	subs	r3, #2
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	81a3      	strh	r3, [r4, #12]
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	433b      	orrs	r3, r7
 800bf70:	81a3      	strh	r3, [r4, #12]
 800bf72:	e7ce      	b.n	800bf12 <__smakebuf_r+0x1a>

0800bf74 <_fstat_r>:
 800bf74:	2300      	movs	r3, #0
 800bf76:	b570      	push	{r4, r5, r6, lr}
 800bf78:	4d06      	ldr	r5, [pc, #24]	; (800bf94 <_fstat_r+0x20>)
 800bf7a:	0004      	movs	r4, r0
 800bf7c:	0008      	movs	r0, r1
 800bf7e:	0011      	movs	r1, r2
 800bf80:	602b      	str	r3, [r5, #0]
 800bf82:	f7f6 ffea 	bl	8002f5a <_fstat>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	d103      	bne.n	800bf92 <_fstat_r+0x1e>
 800bf8a:	682b      	ldr	r3, [r5, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d000      	beq.n	800bf92 <_fstat_r+0x1e>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	2000221c 	.word	0x2000221c

0800bf98 <_isatty_r>:
 800bf98:	2300      	movs	r3, #0
 800bf9a:	b570      	push	{r4, r5, r6, lr}
 800bf9c:	4d06      	ldr	r5, [pc, #24]	; (800bfb8 <_isatty_r+0x20>)
 800bf9e:	0004      	movs	r4, r0
 800bfa0:	0008      	movs	r0, r1
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7f6 ffde 	bl	8002f64 <_isatty>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d103      	bne.n	800bfb4 <_isatty_r+0x1c>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d000      	beq.n	800bfb4 <_isatty_r+0x1c>
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
 800bfb6:	46c0      	nop			; (mov r8, r8)
 800bfb8:	2000221c 	.word	0x2000221c

0800bfbc <_init>:
 800bfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc2:	bc08      	pop	{r3}
 800bfc4:	469e      	mov	lr, r3
 800bfc6:	4770      	bx	lr

0800bfc8 <_fini>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	46c0      	nop			; (mov r8, r8)
 800bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfce:	bc08      	pop	{r3}
 800bfd0:	469e      	mov	lr, r3
 800bfd2:	4770      	bx	lr
