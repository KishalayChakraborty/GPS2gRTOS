
RTOS_GPSv1_DUMMYAPP_FOTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000965c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08009718  08009718  00019718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c18  08009c18  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009c18  08009c18  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c18  08009c18  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c1c  08009c1c  00019c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  200001d4  08009df4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  08009df4  00020824  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020dab  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea9  00000000  00000000  00040fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000db92  00000000  00000000  00044e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  00052a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013f9  00000000  00000000  00053c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001988c  00000000  00000000  00054ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024294  00000000  00000000  0006e885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009fa57  00000000  00000000  00092b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e44  00000000  00000000  00132570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  001373b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d4 	.word	0x200001d4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080096fc 	.word	0x080096fc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001d8 	.word	0x200001d8
 80000fc:	080096fc 	.word	0x080096fc

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_sqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5609      	ldrsb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f000 ff99 	bl	8001380 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fee9 	bl	8001230 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ff8b 	bl	8001380 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ff81 	bl	8001380 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff11 	bl	80012b4 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 ff07 	bl	80012b4 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_d2uiz>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	2200      	movs	r2, #0
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <__aeabi_d2uiz+0x38>)
 80004ba:	0004      	movs	r4, r0
 80004bc:	000d      	movs	r5, r1
 80004be:	f7ff ffef 	bl	80004a0 <__aeabi_dcmpge>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d104      	bne.n	80004d0 <__aeabi_d2uiz+0x1c>
 80004c6:	0020      	movs	r0, r4
 80004c8:	0029      	movs	r1, r5
 80004ca:	f001 fe1f 	bl	800210c <__aeabi_d2iz>
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <__aeabi_d2uiz+0x38>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	0020      	movs	r0, r4
 80004d6:	0029      	movs	r1, r5
 80004d8:	f001 fa78 	bl	80019cc <__aeabi_dsub>
 80004dc:	f001 fe16 	bl	800210c <__aeabi_d2iz>
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	061b      	lsls	r3, r3, #24
 80004e4:	469c      	mov	ip, r3
 80004e6:	4460      	add	r0, ip
 80004e8:	e7f1      	b.n	80004ce <__aeabi_d2uiz+0x1a>
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	41e00000 	.word	0x41e00000

080004f0 <__aeabi_d2lz>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0005      	movs	r5, r0
 80004f4:	000c      	movs	r4, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f7ff ffb1 	bl	8000464 <__aeabi_dcmplt>
 8000502:	2800      	cmp	r0, #0
 8000504:	d108      	bne.n	8000518 <__aeabi_d2lz+0x28>
 8000506:	0028      	movs	r0, r5
 8000508:	0021      	movs	r1, r4
 800050a:	f000 f80f 	bl	800052c <__aeabi_d2ulz>
 800050e:	0002      	movs	r2, r0
 8000510:	000b      	movs	r3, r1
 8000512:	0010      	movs	r0, r2
 8000514:	0019      	movs	r1, r3
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	061b      	lsls	r3, r3, #24
 800051c:	18e1      	adds	r1, r4, r3
 800051e:	0028      	movs	r0, r5
 8000520:	f000 f804 	bl	800052c <__aeabi_d2ulz>
 8000524:	2300      	movs	r3, #0
 8000526:	4242      	negs	r2, r0
 8000528:	418b      	sbcs	r3, r1
 800052a:	e7f2      	b.n	8000512 <__aeabi_d2lz+0x22>

0800052c <__aeabi_d2ulz>:
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	2200      	movs	r2, #0
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <__aeabi_d2ulz+0x34>)
 8000532:	000d      	movs	r5, r1
 8000534:	0004      	movs	r4, r0
 8000536:	f000 ff87 	bl	8001448 <__aeabi_dmul>
 800053a:	f7ff ffbb 	bl	80004b4 <__aeabi_d2uiz>
 800053e:	0006      	movs	r6, r0
 8000540:	f001 fe4a 	bl	80021d8 <__aeabi_ui2d>
 8000544:	2200      	movs	r2, #0
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <__aeabi_d2ulz+0x38>)
 8000548:	f000 ff7e 	bl	8001448 <__aeabi_dmul>
 800054c:	0002      	movs	r2, r0
 800054e:	000b      	movs	r3, r1
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f001 fa3a 	bl	80019cc <__aeabi_dsub>
 8000558:	f7ff ffac 	bl	80004b4 <__aeabi_d2uiz>
 800055c:	0031      	movs	r1, r6
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	3df00000 	.word	0x3df00000
 8000564:	41f00000 	.word	0x41f00000

08000568 <__aeabi_l2d>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	0006      	movs	r6, r0
 800056c:	0008      	movs	r0, r1
 800056e:	f001 fe03 	bl	8002178 <__aeabi_i2d>
 8000572:	2200      	movs	r2, #0
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_l2d+0x28>)
 8000576:	f000 ff67 	bl	8001448 <__aeabi_dmul>
 800057a:	000d      	movs	r5, r1
 800057c:	0004      	movs	r4, r0
 800057e:	0030      	movs	r0, r6
 8000580:	f001 fe2a 	bl	80021d8 <__aeabi_ui2d>
 8000584:	002b      	movs	r3, r5
 8000586:	0022      	movs	r2, r4
 8000588:	f000 f804 	bl	8000594 <__aeabi_dadd>
 800058c:	bd70      	pop	{r4, r5, r6, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41f00000 	.word	0x41f00000

08000594 <__aeabi_dadd>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	464f      	mov	r7, r9
 8000598:	4646      	mov	r6, r8
 800059a:	46d6      	mov	lr, sl
 800059c:	0004      	movs	r4, r0
 800059e:	b5c0      	push	{r6, r7, lr}
 80005a0:	001f      	movs	r7, r3
 80005a2:	030b      	lsls	r3, r1, #12
 80005a4:	0010      	movs	r0, r2
 80005a6:	004e      	lsls	r6, r1, #1
 80005a8:	0a5b      	lsrs	r3, r3, #9
 80005aa:	0fcd      	lsrs	r5, r1, #31
 80005ac:	0f61      	lsrs	r1, r4, #29
 80005ae:	007a      	lsls	r2, r7, #1
 80005b0:	4319      	orrs	r1, r3
 80005b2:	00e3      	lsls	r3, r4, #3
 80005b4:	033c      	lsls	r4, r7, #12
 80005b6:	0fff      	lsrs	r7, r7, #31
 80005b8:	46bc      	mov	ip, r7
 80005ba:	0a64      	lsrs	r4, r4, #9
 80005bc:	0f47      	lsrs	r7, r0, #29
 80005be:	4327      	orrs	r7, r4
 80005c0:	0d76      	lsrs	r6, r6, #21
 80005c2:	0d52      	lsrs	r2, r2, #21
 80005c4:	00c0      	lsls	r0, r0, #3
 80005c6:	46b9      	mov	r9, r7
 80005c8:	4680      	mov	r8, r0
 80005ca:	1ab7      	subs	r7, r6, r2
 80005cc:	4565      	cmp	r5, ip
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x3e>
 80005d0:	e09b      	b.n	800070a <__aeabi_dadd+0x176>
 80005d2:	2f00      	cmp	r7, #0
 80005d4:	dc00      	bgt.n	80005d8 <__aeabi_dadd+0x44>
 80005d6:	e084      	b.n	80006e2 <__aeabi_dadd+0x14e>
 80005d8:	2a00      	cmp	r2, #0
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x4a>
 80005dc:	e0be      	b.n	800075c <__aeabi_dadd+0x1c8>
 80005de:	4ac8      	ldr	r2, [pc, #800]	; (8000900 <__aeabi_dadd+0x36c>)
 80005e0:	4296      	cmp	r6, r2
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x52>
 80005e4:	e124      	b.n	8000830 <__aeabi_dadd+0x29c>
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	464c      	mov	r4, r9
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	4314      	orrs	r4, r2
 80005ee:	46a1      	mov	r9, r4
 80005f0:	2f38      	cmp	r7, #56	; 0x38
 80005f2:	dd00      	ble.n	80005f6 <__aeabi_dadd+0x62>
 80005f4:	e167      	b.n	80008c6 <__aeabi_dadd+0x332>
 80005f6:	2f1f      	cmp	r7, #31
 80005f8:	dd00      	ble.n	80005fc <__aeabi_dadd+0x68>
 80005fa:	e1d6      	b.n	80009aa <__aeabi_dadd+0x416>
 80005fc:	2220      	movs	r2, #32
 80005fe:	464c      	mov	r4, r9
 8000600:	1bd2      	subs	r2, r2, r7
 8000602:	4094      	lsls	r4, r2
 8000604:	46a2      	mov	sl, r4
 8000606:	4644      	mov	r4, r8
 8000608:	40fc      	lsrs	r4, r7
 800060a:	0020      	movs	r0, r4
 800060c:	4654      	mov	r4, sl
 800060e:	4304      	orrs	r4, r0
 8000610:	4640      	mov	r0, r8
 8000612:	4090      	lsls	r0, r2
 8000614:	1e42      	subs	r2, r0, #1
 8000616:	4190      	sbcs	r0, r2
 8000618:	464a      	mov	r2, r9
 800061a:	40fa      	lsrs	r2, r7
 800061c:	4304      	orrs	r4, r0
 800061e:	1a89      	subs	r1, r1, r2
 8000620:	1b1c      	subs	r4, r3, r4
 8000622:	42a3      	cmp	r3, r4
 8000624:	4192      	sbcs	r2, r2
 8000626:	4252      	negs	r2, r2
 8000628:	1a8b      	subs	r3, r1, r2
 800062a:	469a      	mov	sl, r3
 800062c:	4653      	mov	r3, sl
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	d400      	bmi.n	8000634 <__aeabi_dadd+0xa0>
 8000632:	e0d4      	b.n	80007de <__aeabi_dadd+0x24a>
 8000634:	4653      	mov	r3, sl
 8000636:	025a      	lsls	r2, r3, #9
 8000638:	0a53      	lsrs	r3, r2, #9
 800063a:	469a      	mov	sl, r3
 800063c:	4653      	mov	r3, sl
 800063e:	2b00      	cmp	r3, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0xb0>
 8000642:	e104      	b.n	800084e <__aeabi_dadd+0x2ba>
 8000644:	4650      	mov	r0, sl
 8000646:	f001 fe73 	bl	8002330 <__clzsi2>
 800064a:	0003      	movs	r3, r0
 800064c:	3b08      	subs	r3, #8
 800064e:	2220      	movs	r2, #32
 8000650:	0020      	movs	r0, r4
 8000652:	1ad2      	subs	r2, r2, r3
 8000654:	4651      	mov	r1, sl
 8000656:	40d0      	lsrs	r0, r2
 8000658:	4099      	lsls	r1, r3
 800065a:	0002      	movs	r2, r0
 800065c:	409c      	lsls	r4, r3
 800065e:	430a      	orrs	r2, r1
 8000660:	42b3      	cmp	r3, r6
 8000662:	da00      	bge.n	8000666 <__aeabi_dadd+0xd2>
 8000664:	e102      	b.n	800086c <__aeabi_dadd+0x2d8>
 8000666:	1b9b      	subs	r3, r3, r6
 8000668:	1c59      	adds	r1, r3, #1
 800066a:	291f      	cmp	r1, #31
 800066c:	dd00      	ble.n	8000670 <__aeabi_dadd+0xdc>
 800066e:	e0a7      	b.n	80007c0 <__aeabi_dadd+0x22c>
 8000670:	2320      	movs	r3, #32
 8000672:	0010      	movs	r0, r2
 8000674:	0026      	movs	r6, r4
 8000676:	1a5b      	subs	r3, r3, r1
 8000678:	409c      	lsls	r4, r3
 800067a:	4098      	lsls	r0, r3
 800067c:	40ce      	lsrs	r6, r1
 800067e:	40ca      	lsrs	r2, r1
 8000680:	1e63      	subs	r3, r4, #1
 8000682:	419c      	sbcs	r4, r3
 8000684:	4330      	orrs	r0, r6
 8000686:	4692      	mov	sl, r2
 8000688:	2600      	movs	r6, #0
 800068a:	4304      	orrs	r4, r0
 800068c:	0763      	lsls	r3, r4, #29
 800068e:	d009      	beq.n	80006a4 <__aeabi_dadd+0x110>
 8000690:	230f      	movs	r3, #15
 8000692:	4023      	ands	r3, r4
 8000694:	2b04      	cmp	r3, #4
 8000696:	d005      	beq.n	80006a4 <__aeabi_dadd+0x110>
 8000698:	1d23      	adds	r3, r4, #4
 800069a:	42a3      	cmp	r3, r4
 800069c:	41a4      	sbcs	r4, r4
 800069e:	4264      	negs	r4, r4
 80006a0:	44a2      	add	sl, r4
 80006a2:	001c      	movs	r4, r3
 80006a4:	4653      	mov	r3, sl
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	d400      	bmi.n	80006ac <__aeabi_dadd+0x118>
 80006aa:	e09b      	b.n	80007e4 <__aeabi_dadd+0x250>
 80006ac:	4b94      	ldr	r3, [pc, #592]	; (8000900 <__aeabi_dadd+0x36c>)
 80006ae:	3601      	adds	r6, #1
 80006b0:	429e      	cmp	r6, r3
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x122>
 80006b4:	e0b8      	b.n	8000828 <__aeabi_dadd+0x294>
 80006b6:	4653      	mov	r3, sl
 80006b8:	4992      	ldr	r1, [pc, #584]	; (8000904 <__aeabi_dadd+0x370>)
 80006ba:	08e4      	lsrs	r4, r4, #3
 80006bc:	400b      	ands	r3, r1
 80006be:	0019      	movs	r1, r3
 80006c0:	075b      	lsls	r3, r3, #29
 80006c2:	4323      	orrs	r3, r4
 80006c4:	0572      	lsls	r2, r6, #21
 80006c6:	024c      	lsls	r4, r1, #9
 80006c8:	0b24      	lsrs	r4, r4, #12
 80006ca:	0d52      	lsrs	r2, r2, #21
 80006cc:	0512      	lsls	r2, r2, #20
 80006ce:	07ed      	lsls	r5, r5, #31
 80006d0:	4322      	orrs	r2, r4
 80006d2:	432a      	orrs	r2, r5
 80006d4:	0018      	movs	r0, r3
 80006d6:	0011      	movs	r1, r2
 80006d8:	bce0      	pop	{r5, r6, r7}
 80006da:	46ba      	mov	sl, r7
 80006dc:	46b1      	mov	r9, r6
 80006de:	46a8      	mov	r8, r5
 80006e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d048      	beq.n	8000778 <__aeabi_dadd+0x1e4>
 80006e6:	1b97      	subs	r7, r2, r6
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d000      	beq.n	80006ee <__aeabi_dadd+0x15a>
 80006ec:	e10e      	b.n	800090c <__aeabi_dadd+0x378>
 80006ee:	000c      	movs	r4, r1
 80006f0:	431c      	orrs	r4, r3
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x162>
 80006f4:	e1b7      	b.n	8000a66 <__aeabi_dadd+0x4d2>
 80006f6:	1e7c      	subs	r4, r7, #1
 80006f8:	2f01      	cmp	r7, #1
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x16a>
 80006fc:	e226      	b.n	8000b4c <__aeabi_dadd+0x5b8>
 80006fe:	4d80      	ldr	r5, [pc, #512]	; (8000900 <__aeabi_dadd+0x36c>)
 8000700:	42af      	cmp	r7, r5
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x172>
 8000704:	e1d5      	b.n	8000ab2 <__aeabi_dadd+0x51e>
 8000706:	0027      	movs	r7, r4
 8000708:	e107      	b.n	800091a <__aeabi_dadd+0x386>
 800070a:	2f00      	cmp	r7, #0
 800070c:	dc00      	bgt.n	8000710 <__aeabi_dadd+0x17c>
 800070e:	e0b2      	b.n	8000876 <__aeabi_dadd+0x2e2>
 8000710:	2a00      	cmp	r2, #0
 8000712:	d047      	beq.n	80007a4 <__aeabi_dadd+0x210>
 8000714:	4a7a      	ldr	r2, [pc, #488]	; (8000900 <__aeabi_dadd+0x36c>)
 8000716:	4296      	cmp	r6, r2
 8000718:	d100      	bne.n	800071c <__aeabi_dadd+0x188>
 800071a:	e089      	b.n	8000830 <__aeabi_dadd+0x29c>
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	464c      	mov	r4, r9
 8000720:	0412      	lsls	r2, r2, #16
 8000722:	4314      	orrs	r4, r2
 8000724:	46a1      	mov	r9, r4
 8000726:	2f38      	cmp	r7, #56	; 0x38
 8000728:	dc6b      	bgt.n	8000802 <__aeabi_dadd+0x26e>
 800072a:	2f1f      	cmp	r7, #31
 800072c:	dc00      	bgt.n	8000730 <__aeabi_dadd+0x19c>
 800072e:	e16e      	b.n	8000a0e <__aeabi_dadd+0x47a>
 8000730:	003a      	movs	r2, r7
 8000732:	4648      	mov	r0, r9
 8000734:	3a20      	subs	r2, #32
 8000736:	40d0      	lsrs	r0, r2
 8000738:	4684      	mov	ip, r0
 800073a:	2f20      	cmp	r7, #32
 800073c:	d007      	beq.n	800074e <__aeabi_dadd+0x1ba>
 800073e:	2240      	movs	r2, #64	; 0x40
 8000740:	4648      	mov	r0, r9
 8000742:	1bd2      	subs	r2, r2, r7
 8000744:	4090      	lsls	r0, r2
 8000746:	0002      	movs	r2, r0
 8000748:	4640      	mov	r0, r8
 800074a:	4310      	orrs	r0, r2
 800074c:	4680      	mov	r8, r0
 800074e:	4640      	mov	r0, r8
 8000750:	1e42      	subs	r2, r0, #1
 8000752:	4190      	sbcs	r0, r2
 8000754:	4662      	mov	r2, ip
 8000756:	0004      	movs	r4, r0
 8000758:	4314      	orrs	r4, r2
 800075a:	e057      	b.n	800080c <__aeabi_dadd+0x278>
 800075c:	464a      	mov	r2, r9
 800075e:	4302      	orrs	r2, r0
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0x1d0>
 8000762:	e103      	b.n	800096c <__aeabi_dadd+0x3d8>
 8000764:	1e7a      	subs	r2, r7, #1
 8000766:	2f01      	cmp	r7, #1
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x1d8>
 800076a:	e193      	b.n	8000a94 <__aeabi_dadd+0x500>
 800076c:	4c64      	ldr	r4, [pc, #400]	; (8000900 <__aeabi_dadd+0x36c>)
 800076e:	42a7      	cmp	r7, r4
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x1e0>
 8000772:	e18a      	b.n	8000a8a <__aeabi_dadd+0x4f6>
 8000774:	0017      	movs	r7, r2
 8000776:	e73b      	b.n	80005f0 <__aeabi_dadd+0x5c>
 8000778:	4c63      	ldr	r4, [pc, #396]	; (8000908 <__aeabi_dadd+0x374>)
 800077a:	1c72      	adds	r2, r6, #1
 800077c:	4222      	tst	r2, r4
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x1ee>
 8000780:	e0e0      	b.n	8000944 <__aeabi_dadd+0x3b0>
 8000782:	000a      	movs	r2, r1
 8000784:	431a      	orrs	r2, r3
 8000786:	2e00      	cmp	r6, #0
 8000788:	d000      	beq.n	800078c <__aeabi_dadd+0x1f8>
 800078a:	e174      	b.n	8000a76 <__aeabi_dadd+0x4e2>
 800078c:	2a00      	cmp	r2, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x1fe>
 8000790:	e1d0      	b.n	8000b34 <__aeabi_dadd+0x5a0>
 8000792:	464a      	mov	r2, r9
 8000794:	4302      	orrs	r2, r0
 8000796:	d000      	beq.n	800079a <__aeabi_dadd+0x206>
 8000798:	e1e3      	b.n	8000b62 <__aeabi_dadd+0x5ce>
 800079a:	074a      	lsls	r2, r1, #29
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	4313      	orrs	r3, r2
 80007a0:	08c9      	lsrs	r1, r1, #3
 80007a2:	e029      	b.n	80007f8 <__aeabi_dadd+0x264>
 80007a4:	464a      	mov	r2, r9
 80007a6:	4302      	orrs	r2, r0
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x218>
 80007aa:	e17d      	b.n	8000aa8 <__aeabi_dadd+0x514>
 80007ac:	1e7a      	subs	r2, r7, #1
 80007ae:	2f01      	cmp	r7, #1
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x220>
 80007b2:	e0e0      	b.n	8000976 <__aeabi_dadd+0x3e2>
 80007b4:	4c52      	ldr	r4, [pc, #328]	; (8000900 <__aeabi_dadd+0x36c>)
 80007b6:	42a7      	cmp	r7, r4
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x228>
 80007ba:	e166      	b.n	8000a8a <__aeabi_dadd+0x4f6>
 80007bc:	0017      	movs	r7, r2
 80007be:	e7b2      	b.n	8000726 <__aeabi_dadd+0x192>
 80007c0:	0010      	movs	r0, r2
 80007c2:	3b1f      	subs	r3, #31
 80007c4:	40d8      	lsrs	r0, r3
 80007c6:	2920      	cmp	r1, #32
 80007c8:	d003      	beq.n	80007d2 <__aeabi_dadd+0x23e>
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	1a5b      	subs	r3, r3, r1
 80007ce:	409a      	lsls	r2, r3
 80007d0:	4314      	orrs	r4, r2
 80007d2:	1e63      	subs	r3, r4, #1
 80007d4:	419c      	sbcs	r4, r3
 80007d6:	2300      	movs	r3, #0
 80007d8:	2600      	movs	r6, #0
 80007da:	469a      	mov	sl, r3
 80007dc:	4304      	orrs	r4, r0
 80007de:	0763      	lsls	r3, r4, #29
 80007e0:	d000      	beq.n	80007e4 <__aeabi_dadd+0x250>
 80007e2:	e755      	b.n	8000690 <__aeabi_dadd+0xfc>
 80007e4:	4652      	mov	r2, sl
 80007e6:	08e3      	lsrs	r3, r4, #3
 80007e8:	0752      	lsls	r2, r2, #29
 80007ea:	4313      	orrs	r3, r2
 80007ec:	4652      	mov	r2, sl
 80007ee:	0037      	movs	r7, r6
 80007f0:	08d1      	lsrs	r1, r2, #3
 80007f2:	4a43      	ldr	r2, [pc, #268]	; (8000900 <__aeabi_dadd+0x36c>)
 80007f4:	4297      	cmp	r7, r2
 80007f6:	d01f      	beq.n	8000838 <__aeabi_dadd+0x2a4>
 80007f8:	0309      	lsls	r1, r1, #12
 80007fa:	057a      	lsls	r2, r7, #21
 80007fc:	0b0c      	lsrs	r4, r1, #12
 80007fe:	0d52      	lsrs	r2, r2, #21
 8000800:	e764      	b.n	80006cc <__aeabi_dadd+0x138>
 8000802:	4642      	mov	r2, r8
 8000804:	464c      	mov	r4, r9
 8000806:	4314      	orrs	r4, r2
 8000808:	1e62      	subs	r2, r4, #1
 800080a:	4194      	sbcs	r4, r2
 800080c:	18e4      	adds	r4, r4, r3
 800080e:	429c      	cmp	r4, r3
 8000810:	4192      	sbcs	r2, r2
 8000812:	4252      	negs	r2, r2
 8000814:	4692      	mov	sl, r2
 8000816:	448a      	add	sl, r1
 8000818:	4653      	mov	r3, sl
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	d5df      	bpl.n	80007de <__aeabi_dadd+0x24a>
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <__aeabi_dadd+0x36c>)
 8000820:	3601      	adds	r6, #1
 8000822:	429e      	cmp	r6, r3
 8000824:	d000      	beq.n	8000828 <__aeabi_dadd+0x294>
 8000826:	e0b3      	b.n	8000990 <__aeabi_dadd+0x3fc>
 8000828:	0032      	movs	r2, r6
 800082a:	2400      	movs	r4, #0
 800082c:	2300      	movs	r3, #0
 800082e:	e74d      	b.n	80006cc <__aeabi_dadd+0x138>
 8000830:	074a      	lsls	r2, r1, #29
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	4313      	orrs	r3, r2
 8000836:	08c9      	lsrs	r1, r1, #3
 8000838:	001a      	movs	r2, r3
 800083a:	430a      	orrs	r2, r1
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x2ac>
 800083e:	e200      	b.n	8000c42 <__aeabi_dadd+0x6ae>
 8000840:	2480      	movs	r4, #128	; 0x80
 8000842:	0324      	lsls	r4, r4, #12
 8000844:	430c      	orrs	r4, r1
 8000846:	0324      	lsls	r4, r4, #12
 8000848:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <__aeabi_dadd+0x36c>)
 800084a:	0b24      	lsrs	r4, r4, #12
 800084c:	e73e      	b.n	80006cc <__aeabi_dadd+0x138>
 800084e:	0020      	movs	r0, r4
 8000850:	f001 fd6e 	bl	8002330 <__clzsi2>
 8000854:	0003      	movs	r3, r0
 8000856:	3318      	adds	r3, #24
 8000858:	2b1f      	cmp	r3, #31
 800085a:	dc00      	bgt.n	800085e <__aeabi_dadd+0x2ca>
 800085c:	e6f7      	b.n	800064e <__aeabi_dadd+0xba>
 800085e:	0022      	movs	r2, r4
 8000860:	3808      	subs	r0, #8
 8000862:	4082      	lsls	r2, r0
 8000864:	2400      	movs	r4, #0
 8000866:	42b3      	cmp	r3, r6
 8000868:	db00      	blt.n	800086c <__aeabi_dadd+0x2d8>
 800086a:	e6fc      	b.n	8000666 <__aeabi_dadd+0xd2>
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <__aeabi_dadd+0x370>)
 8000870:	401a      	ands	r2, r3
 8000872:	4692      	mov	sl, r2
 8000874:	e70a      	b.n	800068c <__aeabi_dadd+0xf8>
 8000876:	2f00      	cmp	r7, #0
 8000878:	d02b      	beq.n	80008d2 <__aeabi_dadd+0x33e>
 800087a:	1b97      	subs	r7, r2, r6
 800087c:	2e00      	cmp	r6, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x2ee>
 8000880:	e0b8      	b.n	80009f4 <__aeabi_dadd+0x460>
 8000882:	4c1f      	ldr	r4, [pc, #124]	; (8000900 <__aeabi_dadd+0x36c>)
 8000884:	42a2      	cmp	r2, r4
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x2f6>
 8000888:	e11c      	b.n	8000ac4 <__aeabi_dadd+0x530>
 800088a:	2480      	movs	r4, #128	; 0x80
 800088c:	0424      	lsls	r4, r4, #16
 800088e:	4321      	orrs	r1, r4
 8000890:	2f38      	cmp	r7, #56	; 0x38
 8000892:	dd00      	ble.n	8000896 <__aeabi_dadd+0x302>
 8000894:	e11e      	b.n	8000ad4 <__aeabi_dadd+0x540>
 8000896:	2f1f      	cmp	r7, #31
 8000898:	dd00      	ble.n	800089c <__aeabi_dadd+0x308>
 800089a:	e19e      	b.n	8000bda <__aeabi_dadd+0x646>
 800089c:	2620      	movs	r6, #32
 800089e:	000c      	movs	r4, r1
 80008a0:	1bf6      	subs	r6, r6, r7
 80008a2:	0018      	movs	r0, r3
 80008a4:	40b3      	lsls	r3, r6
 80008a6:	40b4      	lsls	r4, r6
 80008a8:	40f8      	lsrs	r0, r7
 80008aa:	1e5e      	subs	r6, r3, #1
 80008ac:	41b3      	sbcs	r3, r6
 80008ae:	40f9      	lsrs	r1, r7
 80008b0:	4304      	orrs	r4, r0
 80008b2:	431c      	orrs	r4, r3
 80008b4:	4489      	add	r9, r1
 80008b6:	4444      	add	r4, r8
 80008b8:	4544      	cmp	r4, r8
 80008ba:	419b      	sbcs	r3, r3
 80008bc:	425b      	negs	r3, r3
 80008be:	444b      	add	r3, r9
 80008c0:	469a      	mov	sl, r3
 80008c2:	0016      	movs	r6, r2
 80008c4:	e7a8      	b.n	8000818 <__aeabi_dadd+0x284>
 80008c6:	4642      	mov	r2, r8
 80008c8:	464c      	mov	r4, r9
 80008ca:	4314      	orrs	r4, r2
 80008cc:	1e62      	subs	r2, r4, #1
 80008ce:	4194      	sbcs	r4, r2
 80008d0:	e6a6      	b.n	8000620 <__aeabi_dadd+0x8c>
 80008d2:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__aeabi_dadd+0x374>)
 80008d4:	1c72      	adds	r2, r6, #1
 80008d6:	4222      	tst	r2, r4
 80008d8:	d000      	beq.n	80008dc <__aeabi_dadd+0x348>
 80008da:	e0a8      	b.n	8000a2e <__aeabi_dadd+0x49a>
 80008dc:	000a      	movs	r2, r1
 80008de:	431a      	orrs	r2, r3
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x352>
 80008e4:	e10a      	b.n	8000afc <__aeabi_dadd+0x568>
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x358>
 80008ea:	e15e      	b.n	8000baa <__aeabi_dadd+0x616>
 80008ec:	464a      	mov	r2, r9
 80008ee:	4302      	orrs	r2, r0
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dadd+0x360>
 80008f2:	e161      	b.n	8000bb8 <__aeabi_dadd+0x624>
 80008f4:	074a      	lsls	r2, r1, #29
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	08c9      	lsrs	r1, r1, #3
 80008fc:	e77c      	b.n	80007f8 <__aeabi_dadd+0x264>
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	000007ff 	.word	0x000007ff
 8000904:	ff7fffff 	.word	0xff7fffff
 8000908:	000007fe 	.word	0x000007fe
 800090c:	4ccf      	ldr	r4, [pc, #828]	; (8000c4c <__aeabi_dadd+0x6b8>)
 800090e:	42a2      	cmp	r2, r4
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x380>
 8000912:	e0ce      	b.n	8000ab2 <__aeabi_dadd+0x51e>
 8000914:	2480      	movs	r4, #128	; 0x80
 8000916:	0424      	lsls	r4, r4, #16
 8000918:	4321      	orrs	r1, r4
 800091a:	2f38      	cmp	r7, #56	; 0x38
 800091c:	dc5b      	bgt.n	80009d6 <__aeabi_dadd+0x442>
 800091e:	2f1f      	cmp	r7, #31
 8000920:	dd00      	ble.n	8000924 <__aeabi_dadd+0x390>
 8000922:	e0dc      	b.n	8000ade <__aeabi_dadd+0x54a>
 8000924:	2520      	movs	r5, #32
 8000926:	000c      	movs	r4, r1
 8000928:	1bed      	subs	r5, r5, r7
 800092a:	001e      	movs	r6, r3
 800092c:	40ab      	lsls	r3, r5
 800092e:	40ac      	lsls	r4, r5
 8000930:	40fe      	lsrs	r6, r7
 8000932:	1e5d      	subs	r5, r3, #1
 8000934:	41ab      	sbcs	r3, r5
 8000936:	4334      	orrs	r4, r6
 8000938:	40f9      	lsrs	r1, r7
 800093a:	431c      	orrs	r4, r3
 800093c:	464b      	mov	r3, r9
 800093e:	1a5b      	subs	r3, r3, r1
 8000940:	4699      	mov	r9, r3
 8000942:	e04c      	b.n	80009de <__aeabi_dadd+0x44a>
 8000944:	464a      	mov	r2, r9
 8000946:	1a1c      	subs	r4, r3, r0
 8000948:	1a88      	subs	r0, r1, r2
 800094a:	42a3      	cmp	r3, r4
 800094c:	4192      	sbcs	r2, r2
 800094e:	4252      	negs	r2, r2
 8000950:	4692      	mov	sl, r2
 8000952:	0002      	movs	r2, r0
 8000954:	4650      	mov	r0, sl
 8000956:	1a12      	subs	r2, r2, r0
 8000958:	4692      	mov	sl, r2
 800095a:	0212      	lsls	r2, r2, #8
 800095c:	d478      	bmi.n	8000a50 <__aeabi_dadd+0x4bc>
 800095e:	4653      	mov	r3, sl
 8000960:	4323      	orrs	r3, r4
 8000962:	d000      	beq.n	8000966 <__aeabi_dadd+0x3d2>
 8000964:	e66a      	b.n	800063c <__aeabi_dadd+0xa8>
 8000966:	2100      	movs	r1, #0
 8000968:	2500      	movs	r5, #0
 800096a:	e745      	b.n	80007f8 <__aeabi_dadd+0x264>
 800096c:	074a      	lsls	r2, r1, #29
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	4313      	orrs	r3, r2
 8000972:	08c9      	lsrs	r1, r1, #3
 8000974:	e73d      	b.n	80007f2 <__aeabi_dadd+0x25e>
 8000976:	181c      	adds	r4, r3, r0
 8000978:	429c      	cmp	r4, r3
 800097a:	419b      	sbcs	r3, r3
 800097c:	4449      	add	r1, r9
 800097e:	468a      	mov	sl, r1
 8000980:	425b      	negs	r3, r3
 8000982:	449a      	add	sl, r3
 8000984:	4653      	mov	r3, sl
 8000986:	2601      	movs	r6, #1
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x3fa>
 800098c:	e727      	b.n	80007de <__aeabi_dadd+0x24a>
 800098e:	2602      	movs	r6, #2
 8000990:	4652      	mov	r2, sl
 8000992:	4baf      	ldr	r3, [pc, #700]	; (8000c50 <__aeabi_dadd+0x6bc>)
 8000994:	2101      	movs	r1, #1
 8000996:	401a      	ands	r2, r3
 8000998:	0013      	movs	r3, r2
 800099a:	4021      	ands	r1, r4
 800099c:	0862      	lsrs	r2, r4, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	07dc      	lsls	r4, r3, #31
 80009a2:	085b      	lsrs	r3, r3, #1
 80009a4:	469a      	mov	sl, r3
 80009a6:	4314      	orrs	r4, r2
 80009a8:	e670      	b.n	800068c <__aeabi_dadd+0xf8>
 80009aa:	003a      	movs	r2, r7
 80009ac:	464c      	mov	r4, r9
 80009ae:	3a20      	subs	r2, #32
 80009b0:	40d4      	lsrs	r4, r2
 80009b2:	46a4      	mov	ip, r4
 80009b4:	2f20      	cmp	r7, #32
 80009b6:	d007      	beq.n	80009c8 <__aeabi_dadd+0x434>
 80009b8:	2240      	movs	r2, #64	; 0x40
 80009ba:	4648      	mov	r0, r9
 80009bc:	1bd2      	subs	r2, r2, r7
 80009be:	4090      	lsls	r0, r2
 80009c0:	0002      	movs	r2, r0
 80009c2:	4640      	mov	r0, r8
 80009c4:	4310      	orrs	r0, r2
 80009c6:	4680      	mov	r8, r0
 80009c8:	4640      	mov	r0, r8
 80009ca:	1e42      	subs	r2, r0, #1
 80009cc:	4190      	sbcs	r0, r2
 80009ce:	4662      	mov	r2, ip
 80009d0:	0004      	movs	r4, r0
 80009d2:	4314      	orrs	r4, r2
 80009d4:	e624      	b.n	8000620 <__aeabi_dadd+0x8c>
 80009d6:	4319      	orrs	r1, r3
 80009d8:	000c      	movs	r4, r1
 80009da:	1e63      	subs	r3, r4, #1
 80009dc:	419c      	sbcs	r4, r3
 80009de:	4643      	mov	r3, r8
 80009e0:	1b1c      	subs	r4, r3, r4
 80009e2:	45a0      	cmp	r8, r4
 80009e4:	419b      	sbcs	r3, r3
 80009e6:	4649      	mov	r1, r9
 80009e8:	425b      	negs	r3, r3
 80009ea:	1acb      	subs	r3, r1, r3
 80009ec:	469a      	mov	sl, r3
 80009ee:	4665      	mov	r5, ip
 80009f0:	0016      	movs	r6, r2
 80009f2:	e61b      	b.n	800062c <__aeabi_dadd+0x98>
 80009f4:	000c      	movs	r4, r1
 80009f6:	431c      	orrs	r4, r3
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x468>
 80009fa:	e0c7      	b.n	8000b8c <__aeabi_dadd+0x5f8>
 80009fc:	1e7c      	subs	r4, r7, #1
 80009fe:	2f01      	cmp	r7, #1
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dadd+0x470>
 8000a02:	e0f9      	b.n	8000bf8 <__aeabi_dadd+0x664>
 8000a04:	4e91      	ldr	r6, [pc, #580]	; (8000c4c <__aeabi_dadd+0x6b8>)
 8000a06:	42b7      	cmp	r7, r6
 8000a08:	d05c      	beq.n	8000ac4 <__aeabi_dadd+0x530>
 8000a0a:	0027      	movs	r7, r4
 8000a0c:	e740      	b.n	8000890 <__aeabi_dadd+0x2fc>
 8000a0e:	2220      	movs	r2, #32
 8000a10:	464c      	mov	r4, r9
 8000a12:	4640      	mov	r0, r8
 8000a14:	1bd2      	subs	r2, r2, r7
 8000a16:	4094      	lsls	r4, r2
 8000a18:	40f8      	lsrs	r0, r7
 8000a1a:	4304      	orrs	r4, r0
 8000a1c:	4640      	mov	r0, r8
 8000a1e:	4090      	lsls	r0, r2
 8000a20:	1e42      	subs	r2, r0, #1
 8000a22:	4190      	sbcs	r0, r2
 8000a24:	464a      	mov	r2, r9
 8000a26:	40fa      	lsrs	r2, r7
 8000a28:	4304      	orrs	r4, r0
 8000a2a:	1889      	adds	r1, r1, r2
 8000a2c:	e6ee      	b.n	800080c <__aeabi_dadd+0x278>
 8000a2e:	4c87      	ldr	r4, [pc, #540]	; (8000c4c <__aeabi_dadd+0x6b8>)
 8000a30:	42a2      	cmp	r2, r4
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x4a2>
 8000a34:	e6f9      	b.n	800082a <__aeabi_dadd+0x296>
 8000a36:	1818      	adds	r0, r3, r0
 8000a38:	4298      	cmp	r0, r3
 8000a3a:	419b      	sbcs	r3, r3
 8000a3c:	4449      	add	r1, r9
 8000a3e:	425b      	negs	r3, r3
 8000a40:	18cb      	adds	r3, r1, r3
 8000a42:	07dc      	lsls	r4, r3, #31
 8000a44:	0840      	lsrs	r0, r0, #1
 8000a46:	085b      	lsrs	r3, r3, #1
 8000a48:	469a      	mov	sl, r3
 8000a4a:	0016      	movs	r6, r2
 8000a4c:	4304      	orrs	r4, r0
 8000a4e:	e6c6      	b.n	80007de <__aeabi_dadd+0x24a>
 8000a50:	4642      	mov	r2, r8
 8000a52:	1ad4      	subs	r4, r2, r3
 8000a54:	45a0      	cmp	r8, r4
 8000a56:	4180      	sbcs	r0, r0
 8000a58:	464b      	mov	r3, r9
 8000a5a:	4240      	negs	r0, r0
 8000a5c:	1a59      	subs	r1, r3, r1
 8000a5e:	1a0b      	subs	r3, r1, r0
 8000a60:	469a      	mov	sl, r3
 8000a62:	4665      	mov	r5, ip
 8000a64:	e5ea      	b.n	800063c <__aeabi_dadd+0xa8>
 8000a66:	464b      	mov	r3, r9
 8000a68:	464a      	mov	r2, r9
 8000a6a:	08c0      	lsrs	r0, r0, #3
 8000a6c:	075b      	lsls	r3, r3, #29
 8000a6e:	4665      	mov	r5, ip
 8000a70:	4303      	orrs	r3, r0
 8000a72:	08d1      	lsrs	r1, r2, #3
 8000a74:	e6bd      	b.n	80007f2 <__aeabi_dadd+0x25e>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_dadd+0x4e8>
 8000a7a:	e08e      	b.n	8000b9a <__aeabi_dadd+0x606>
 8000a7c:	464b      	mov	r3, r9
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	d117      	bne.n	8000ab2 <__aeabi_dadd+0x51e>
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	2500      	movs	r5, #0
 8000a86:	0309      	lsls	r1, r1, #12
 8000a88:	e6da      	b.n	8000840 <__aeabi_dadd+0x2ac>
 8000a8a:	074a      	lsls	r2, r1, #29
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	08c9      	lsrs	r1, r1, #3
 8000a92:	e6d1      	b.n	8000838 <__aeabi_dadd+0x2a4>
 8000a94:	1a1c      	subs	r4, r3, r0
 8000a96:	464a      	mov	r2, r9
 8000a98:	42a3      	cmp	r3, r4
 8000a9a:	419b      	sbcs	r3, r3
 8000a9c:	1a89      	subs	r1, r1, r2
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	2601      	movs	r6, #1
 8000aa6:	e5c1      	b.n	800062c <__aeabi_dadd+0x98>
 8000aa8:	074a      	lsls	r2, r1, #29
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	08c9      	lsrs	r1, r1, #3
 8000ab0:	e69f      	b.n	80007f2 <__aeabi_dadd+0x25e>
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	08d8      	lsrs	r0, r3, #3
 8000ab6:	464b      	mov	r3, r9
 8000ab8:	464a      	mov	r2, r9
 8000aba:	075b      	lsls	r3, r3, #29
 8000abc:	4665      	mov	r5, ip
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	08d1      	lsrs	r1, r2, #3
 8000ac2:	e6b9      	b.n	8000838 <__aeabi_dadd+0x2a4>
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	08d8      	lsrs	r0, r3, #3
 8000ac8:	464b      	mov	r3, r9
 8000aca:	464a      	mov	r2, r9
 8000acc:	075b      	lsls	r3, r3, #29
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	08d1      	lsrs	r1, r2, #3
 8000ad2:	e6b1      	b.n	8000838 <__aeabi_dadd+0x2a4>
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	000c      	movs	r4, r1
 8000ad8:	1e63      	subs	r3, r4, #1
 8000ada:	419c      	sbcs	r4, r3
 8000adc:	e6eb      	b.n	80008b6 <__aeabi_dadd+0x322>
 8000ade:	003c      	movs	r4, r7
 8000ae0:	000d      	movs	r5, r1
 8000ae2:	3c20      	subs	r4, #32
 8000ae4:	40e5      	lsrs	r5, r4
 8000ae6:	2f20      	cmp	r7, #32
 8000ae8:	d003      	beq.n	8000af2 <__aeabi_dadd+0x55e>
 8000aea:	2440      	movs	r4, #64	; 0x40
 8000aec:	1be4      	subs	r4, r4, r7
 8000aee:	40a1      	lsls	r1, r4
 8000af0:	430b      	orrs	r3, r1
 8000af2:	001c      	movs	r4, r3
 8000af4:	1e63      	subs	r3, r4, #1
 8000af6:	419c      	sbcs	r4, r3
 8000af8:	432c      	orrs	r4, r5
 8000afa:	e770      	b.n	80009de <__aeabi_dadd+0x44a>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d0e1      	beq.n	8000ac4 <__aeabi_dadd+0x530>
 8000b00:	464a      	mov	r2, r9
 8000b02:	4302      	orrs	r2, r0
 8000b04:	d0c1      	beq.n	8000a8a <__aeabi_dadd+0x4f6>
 8000b06:	074a      	lsls	r2, r1, #29
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	0312      	lsls	r2, r2, #12
 8000b12:	4211      	tst	r1, r2
 8000b14:	d008      	beq.n	8000b28 <__aeabi_dadd+0x594>
 8000b16:	4648      	mov	r0, r9
 8000b18:	08c4      	lsrs	r4, r0, #3
 8000b1a:	4214      	tst	r4, r2
 8000b1c:	d104      	bne.n	8000b28 <__aeabi_dadd+0x594>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	0021      	movs	r1, r4
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	0742      	lsls	r2, r0, #29
 8000b26:	4313      	orrs	r3, r2
 8000b28:	0f5a      	lsrs	r2, r3, #29
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	0752      	lsls	r2, r2, #29
 8000b2e:	08db      	lsrs	r3, r3, #3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	e681      	b.n	8000838 <__aeabi_dadd+0x2a4>
 8000b34:	464b      	mov	r3, r9
 8000b36:	4303      	orrs	r3, r0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x5a8>
 8000b3a:	e714      	b.n	8000966 <__aeabi_dadd+0x3d2>
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	464a      	mov	r2, r9
 8000b40:	08c0      	lsrs	r0, r0, #3
 8000b42:	075b      	lsls	r3, r3, #29
 8000b44:	4665      	mov	r5, ip
 8000b46:	4303      	orrs	r3, r0
 8000b48:	08d1      	lsrs	r1, r2, #3
 8000b4a:	e655      	b.n	80007f8 <__aeabi_dadd+0x264>
 8000b4c:	1ac4      	subs	r4, r0, r3
 8000b4e:	45a0      	cmp	r8, r4
 8000b50:	4180      	sbcs	r0, r0
 8000b52:	464b      	mov	r3, r9
 8000b54:	4240      	negs	r0, r0
 8000b56:	1a59      	subs	r1, r3, r1
 8000b58:	1a0b      	subs	r3, r1, r0
 8000b5a:	469a      	mov	sl, r3
 8000b5c:	4665      	mov	r5, ip
 8000b5e:	2601      	movs	r6, #1
 8000b60:	e564      	b.n	800062c <__aeabi_dadd+0x98>
 8000b62:	1a1c      	subs	r4, r3, r0
 8000b64:	464a      	mov	r2, r9
 8000b66:	42a3      	cmp	r3, r4
 8000b68:	4180      	sbcs	r0, r0
 8000b6a:	1a8a      	subs	r2, r1, r2
 8000b6c:	4240      	negs	r0, r0
 8000b6e:	1a12      	subs	r2, r2, r0
 8000b70:	4692      	mov	sl, r2
 8000b72:	0212      	lsls	r2, r2, #8
 8000b74:	d549      	bpl.n	8000c0a <__aeabi_dadd+0x676>
 8000b76:	4642      	mov	r2, r8
 8000b78:	1ad4      	subs	r4, r2, r3
 8000b7a:	45a0      	cmp	r8, r4
 8000b7c:	4180      	sbcs	r0, r0
 8000b7e:	464b      	mov	r3, r9
 8000b80:	4240      	negs	r0, r0
 8000b82:	1a59      	subs	r1, r3, r1
 8000b84:	1a0b      	subs	r3, r1, r0
 8000b86:	469a      	mov	sl, r3
 8000b88:	4665      	mov	r5, ip
 8000b8a:	e57f      	b.n	800068c <__aeabi_dadd+0xf8>
 8000b8c:	464b      	mov	r3, r9
 8000b8e:	464a      	mov	r2, r9
 8000b90:	08c0      	lsrs	r0, r0, #3
 8000b92:	075b      	lsls	r3, r3, #29
 8000b94:	4303      	orrs	r3, r0
 8000b96:	08d1      	lsrs	r1, r2, #3
 8000b98:	e62b      	b.n	80007f2 <__aeabi_dadd+0x25e>
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	4302      	orrs	r2, r0
 8000ba0:	d138      	bne.n	8000c14 <__aeabi_dadd+0x680>
 8000ba2:	074a      	lsls	r2, r1, #29
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	08c9      	lsrs	r1, r1, #3
 8000ba8:	e646      	b.n	8000838 <__aeabi_dadd+0x2a4>
 8000baa:	464b      	mov	r3, r9
 8000bac:	464a      	mov	r2, r9
 8000bae:	08c0      	lsrs	r0, r0, #3
 8000bb0:	075b      	lsls	r3, r3, #29
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	08d1      	lsrs	r1, r2, #3
 8000bb6:	e61f      	b.n	80007f8 <__aeabi_dadd+0x264>
 8000bb8:	181c      	adds	r4, r3, r0
 8000bba:	429c      	cmp	r4, r3
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	4449      	add	r1, r9
 8000bc0:	468a      	mov	sl, r1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	449a      	add	sl, r3
 8000bc6:	4653      	mov	r3, sl
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	d400      	bmi.n	8000bce <__aeabi_dadd+0x63a>
 8000bcc:	e607      	b.n	80007de <__aeabi_dadd+0x24a>
 8000bce:	4652      	mov	r2, sl
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <__aeabi_dadd+0x6bc>)
 8000bd2:	2601      	movs	r6, #1
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	4692      	mov	sl, r2
 8000bd8:	e601      	b.n	80007de <__aeabi_dadd+0x24a>
 8000bda:	003c      	movs	r4, r7
 8000bdc:	000e      	movs	r6, r1
 8000bde:	3c20      	subs	r4, #32
 8000be0:	40e6      	lsrs	r6, r4
 8000be2:	2f20      	cmp	r7, #32
 8000be4:	d003      	beq.n	8000bee <__aeabi_dadd+0x65a>
 8000be6:	2440      	movs	r4, #64	; 0x40
 8000be8:	1be4      	subs	r4, r4, r7
 8000bea:	40a1      	lsls	r1, r4
 8000bec:	430b      	orrs	r3, r1
 8000bee:	001c      	movs	r4, r3
 8000bf0:	1e63      	subs	r3, r4, #1
 8000bf2:	419c      	sbcs	r4, r3
 8000bf4:	4334      	orrs	r4, r6
 8000bf6:	e65e      	b.n	80008b6 <__aeabi_dadd+0x322>
 8000bf8:	4443      	add	r3, r8
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	4180      	sbcs	r0, r0
 8000bfe:	4449      	add	r1, r9
 8000c00:	468a      	mov	sl, r1
 8000c02:	4240      	negs	r0, r0
 8000c04:	001c      	movs	r4, r3
 8000c06:	4482      	add	sl, r0
 8000c08:	e6bc      	b.n	8000984 <__aeabi_dadd+0x3f0>
 8000c0a:	4653      	mov	r3, sl
 8000c0c:	4323      	orrs	r3, r4
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_dadd+0x67e>
 8000c10:	e6a9      	b.n	8000966 <__aeabi_dadd+0x3d2>
 8000c12:	e5e4      	b.n	80007de <__aeabi_dadd+0x24a>
 8000c14:	074a      	lsls	r2, r1, #29
 8000c16:	4313      	orrs	r3, r2
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	08c9      	lsrs	r1, r1, #3
 8000c1c:	0312      	lsls	r2, r2, #12
 8000c1e:	4211      	tst	r1, r2
 8000c20:	d009      	beq.n	8000c36 <__aeabi_dadd+0x6a2>
 8000c22:	4648      	mov	r0, r9
 8000c24:	08c4      	lsrs	r4, r0, #3
 8000c26:	4214      	tst	r4, r2
 8000c28:	d105      	bne.n	8000c36 <__aeabi_dadd+0x6a2>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	0021      	movs	r1, r4
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	0742      	lsls	r2, r0, #29
 8000c34:	4313      	orrs	r3, r2
 8000c36:	0f5a      	lsrs	r2, r3, #29
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	08db      	lsrs	r3, r3, #3
 8000c3c:	0752      	lsls	r2, r2, #29
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	e5fa      	b.n	8000838 <__aeabi_dadd+0x2a4>
 8000c42:	2300      	movs	r3, #0
 8000c44:	4a01      	ldr	r2, [pc, #4]	; (8000c4c <__aeabi_dadd+0x6b8>)
 8000c46:	001c      	movs	r4, r3
 8000c48:	e540      	b.n	80006cc <__aeabi_dadd+0x138>
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	000007ff 	.word	0x000007ff
 8000c50:	ff7fffff 	.word	0xff7fffff

08000c54 <__aeabi_ddiv>:
 8000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c56:	4657      	mov	r7, sl
 8000c58:	464e      	mov	r6, r9
 8000c5a:	4645      	mov	r5, r8
 8000c5c:	46de      	mov	lr, fp
 8000c5e:	b5e0      	push	{r5, r6, r7, lr}
 8000c60:	030c      	lsls	r4, r1, #12
 8000c62:	001f      	movs	r7, r3
 8000c64:	004b      	lsls	r3, r1, #1
 8000c66:	4681      	mov	r9, r0
 8000c68:	4692      	mov	sl, r2
 8000c6a:	0005      	movs	r5, r0
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	0b24      	lsrs	r4, r4, #12
 8000c70:	0d5b      	lsrs	r3, r3, #21
 8000c72:	0fce      	lsrs	r6, r1, #31
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d100      	bne.n	8000c7a <__aeabi_ddiv+0x26>
 8000c78:	e152      	b.n	8000f20 <__aeabi_ddiv+0x2cc>
 8000c7a:	4ad2      	ldr	r2, [pc, #840]	; (8000fc4 <__aeabi_ddiv+0x370>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_ddiv+0x2e>
 8000c80:	e16e      	b.n	8000f60 <__aeabi_ddiv+0x30c>
 8000c82:	0f42      	lsrs	r2, r0, #29
 8000c84:	00e4      	lsls	r4, r4, #3
 8000c86:	4314      	orrs	r4, r2
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	0412      	lsls	r2, r2, #16
 8000c8c:	4322      	orrs	r2, r4
 8000c8e:	4690      	mov	r8, r2
 8000c90:	4acd      	ldr	r2, [pc, #820]	; (8000fc8 <__aeabi_ddiv+0x374>)
 8000c92:	00c5      	lsls	r5, r0, #3
 8000c94:	4693      	mov	fp, r2
 8000c96:	449b      	add	fp, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	033c      	lsls	r4, r7, #12
 8000ca0:	007b      	lsls	r3, r7, #1
 8000ca2:	4650      	mov	r0, sl
 8000ca4:	0b24      	lsrs	r4, r4, #12
 8000ca6:	0d5b      	lsrs	r3, r3, #21
 8000ca8:	0fff      	lsrs	r7, r7, #31
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x5c>
 8000cae:	e11a      	b.n	8000ee6 <__aeabi_ddiv+0x292>
 8000cb0:	4ac4      	ldr	r2, [pc, #784]	; (8000fc4 <__aeabi_ddiv+0x370>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_ddiv+0x64>
 8000cb6:	e15e      	b.n	8000f76 <__aeabi_ddiv+0x322>
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	00e4      	lsls	r4, r4, #3
 8000cbc:	4322      	orrs	r2, r4
 8000cbe:	2480      	movs	r4, #128	; 0x80
 8000cc0:	0424      	lsls	r4, r4, #16
 8000cc2:	4314      	orrs	r4, r2
 8000cc4:	4ac0      	ldr	r2, [pc, #768]	; (8000fc8 <__aeabi_ddiv+0x374>)
 8000cc6:	00c1      	lsls	r1, r0, #3
 8000cc8:	4694      	mov	ip, r2
 8000cca:	465a      	mov	r2, fp
 8000ccc:	4463      	add	r3, ip
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	0033      	movs	r3, r6
 8000cd6:	407b      	eors	r3, r7
 8000cd8:	469a      	mov	sl, r3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d827      	bhi.n	8000d30 <__aeabi_ddiv+0xdc>
 8000ce0:	4aba      	ldr	r2, [pc, #744]	; (8000fcc <__aeabi_ddiv+0x378>)
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	58d3      	ldr	r3, [r2, r3]
 8000ce6:	469f      	mov	pc, r3
 8000ce8:	46b2      	mov	sl, r6
 8000cea:	9b00      	ldr	r3, [sp, #0]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d016      	beq.n	8000d1e <__aeabi_ddiv+0xca>
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0xa2>
 8000cf4:	e287      	b.n	8001206 <__aeabi_ddiv+0x5b2>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_ddiv+0xa8>
 8000cfa:	e0d5      	b.n	8000ea8 <__aeabi_ddiv+0x254>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2500      	movs	r5, #0
 8000d02:	051b      	lsls	r3, r3, #20
 8000d04:	4313      	orrs	r3, r2
 8000d06:	4652      	mov	r2, sl
 8000d08:	07d2      	lsls	r2, r2, #31
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	0028      	movs	r0, r5
 8000d0e:	0019      	movs	r1, r3
 8000d10:	b005      	add	sp, #20
 8000d12:	bcf0      	pop	{r4, r5, r6, r7}
 8000d14:	46bb      	mov	fp, r7
 8000d16:	46b2      	mov	sl, r6
 8000d18:	46a9      	mov	r9, r5
 8000d1a:	46a0      	mov	r8, r4
 8000d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2500      	movs	r5, #0
 8000d22:	4ba8      	ldr	r3, [pc, #672]	; (8000fc4 <__aeabi_ddiv+0x370>)
 8000d24:	e7ed      	b.n	8000d02 <__aeabi_ddiv+0xae>
 8000d26:	46ba      	mov	sl, r7
 8000d28:	46a0      	mov	r8, r4
 8000d2a:	000d      	movs	r5, r1
 8000d2c:	9000      	str	r0, [sp, #0]
 8000d2e:	e7dc      	b.n	8000cea <__aeabi_ddiv+0x96>
 8000d30:	4544      	cmp	r4, r8
 8000d32:	d200      	bcs.n	8000d36 <__aeabi_ddiv+0xe2>
 8000d34:	e1c4      	b.n	80010c0 <__aeabi_ddiv+0x46c>
 8000d36:	d100      	bne.n	8000d3a <__aeabi_ddiv+0xe6>
 8000d38:	e1bf      	b.n	80010ba <__aeabi_ddiv+0x466>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	469c      	mov	ip, r3
 8000d40:	002e      	movs	r6, r5
 8000d42:	4640      	mov	r0, r8
 8000d44:	2500      	movs	r5, #0
 8000d46:	44e3      	add	fp, ip
 8000d48:	0223      	lsls	r3, r4, #8
 8000d4a:	0e0c      	lsrs	r4, r1, #24
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	4699      	mov	r9, r3
 8000d52:	0423      	lsls	r3, r4, #16
 8000d54:	020a      	lsls	r2, r1, #8
 8000d56:	0c1f      	lsrs	r7, r3, #16
 8000d58:	4649      	mov	r1, r9
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	9701      	str	r7, [sp, #4]
 8000d5e:	f7ff fa7b 	bl	8000258 <__aeabi_uidivmod>
 8000d62:	0002      	movs	r2, r0
 8000d64:	437a      	muls	r2, r7
 8000d66:	040b      	lsls	r3, r1, #16
 8000d68:	0c31      	lsrs	r1, r6, #16
 8000d6a:	4680      	mov	r8, r0
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	428a      	cmp	r2, r1
 8000d70:	d907      	bls.n	8000d82 <__aeabi_ddiv+0x12e>
 8000d72:	2301      	movs	r3, #1
 8000d74:	425b      	negs	r3, r3
 8000d76:	469c      	mov	ip, r3
 8000d78:	1909      	adds	r1, r1, r4
 8000d7a:	44e0      	add	r8, ip
 8000d7c:	428c      	cmp	r4, r1
 8000d7e:	d800      	bhi.n	8000d82 <__aeabi_ddiv+0x12e>
 8000d80:	e201      	b.n	8001186 <__aeabi_ddiv+0x532>
 8000d82:	1a88      	subs	r0, r1, r2
 8000d84:	4649      	mov	r1, r9
 8000d86:	f7ff fa67 	bl	8000258 <__aeabi_uidivmod>
 8000d8a:	9a01      	ldr	r2, [sp, #4]
 8000d8c:	0436      	lsls	r6, r6, #16
 8000d8e:	4342      	muls	r2, r0
 8000d90:	0409      	lsls	r1, r1, #16
 8000d92:	0c36      	lsrs	r6, r6, #16
 8000d94:	0003      	movs	r3, r0
 8000d96:	430e      	orrs	r6, r1
 8000d98:	42b2      	cmp	r2, r6
 8000d9a:	d904      	bls.n	8000da6 <__aeabi_ddiv+0x152>
 8000d9c:	1936      	adds	r6, r6, r4
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	42b4      	cmp	r4, r6
 8000da2:	d800      	bhi.n	8000da6 <__aeabi_ddiv+0x152>
 8000da4:	e1e9      	b.n	800117a <__aeabi_ddiv+0x526>
 8000da6:	1ab0      	subs	r0, r6, r2
 8000da8:	4642      	mov	r2, r8
 8000daa:	9e00      	ldr	r6, [sp, #0]
 8000dac:	0412      	lsls	r2, r2, #16
 8000dae:	431a      	orrs	r2, r3
 8000db0:	0c33      	lsrs	r3, r6, #16
 8000db2:	001f      	movs	r7, r3
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	4690      	mov	r8, r2
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	0413      	lsls	r3, r2, #16
 8000dbc:	0432      	lsls	r2, r6, #16
 8000dbe:	0c16      	lsrs	r6, r2, #16
 8000dc0:	0032      	movs	r2, r6
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	435a      	muls	r2, r3
 8000dc6:	9603      	str	r6, [sp, #12]
 8000dc8:	437b      	muls	r3, r7
 8000dca:	434e      	muls	r6, r1
 8000dcc:	4379      	muls	r1, r7
 8000dce:	0c17      	lsrs	r7, r2, #16
 8000dd0:	46bc      	mov	ip, r7
 8000dd2:	199b      	adds	r3, r3, r6
 8000dd4:	4463      	add	r3, ip
 8000dd6:	429e      	cmp	r6, r3
 8000dd8:	d903      	bls.n	8000de2 <__aeabi_ddiv+0x18e>
 8000dda:	2680      	movs	r6, #128	; 0x80
 8000ddc:	0276      	lsls	r6, r6, #9
 8000dde:	46b4      	mov	ip, r6
 8000de0:	4461      	add	r1, ip
 8000de2:	0c1e      	lsrs	r6, r3, #16
 8000de4:	1871      	adds	r1, r6, r1
 8000de6:	0416      	lsls	r6, r2, #16
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	0c36      	lsrs	r6, r6, #16
 8000dec:	199e      	adds	r6, r3, r6
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d302      	bcc.n	8000df8 <__aeabi_ddiv+0x1a4>
 8000df2:	d112      	bne.n	8000e1a <__aeabi_ddiv+0x1c6>
 8000df4:	42b5      	cmp	r5, r6
 8000df6:	d210      	bcs.n	8000e1a <__aeabi_ddiv+0x1c6>
 8000df8:	4643      	mov	r3, r8
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	9b00      	ldr	r3, [sp, #0]
 8000dfe:	469c      	mov	ip, r3
 8000e00:	4465      	add	r5, ip
 8000e02:	001f      	movs	r7, r3
 8000e04:	429d      	cmp	r5, r3
 8000e06:	419b      	sbcs	r3, r3
 8000e08:	425b      	negs	r3, r3
 8000e0a:	191b      	adds	r3, r3, r4
 8000e0c:	18c0      	adds	r0, r0, r3
 8000e0e:	4284      	cmp	r4, r0
 8000e10:	d200      	bcs.n	8000e14 <__aeabi_ddiv+0x1c0>
 8000e12:	e19e      	b.n	8001152 <__aeabi_ddiv+0x4fe>
 8000e14:	d100      	bne.n	8000e18 <__aeabi_ddiv+0x1c4>
 8000e16:	e199      	b.n	800114c <__aeabi_ddiv+0x4f8>
 8000e18:	4690      	mov	r8, r2
 8000e1a:	1bae      	subs	r6, r5, r6
 8000e1c:	42b5      	cmp	r5, r6
 8000e1e:	41ad      	sbcs	r5, r5
 8000e20:	1a40      	subs	r0, r0, r1
 8000e22:	426d      	negs	r5, r5
 8000e24:	1b40      	subs	r0, r0, r5
 8000e26:	4284      	cmp	r4, r0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x1d8>
 8000e2a:	e1d2      	b.n	80011d2 <__aeabi_ddiv+0x57e>
 8000e2c:	4649      	mov	r1, r9
 8000e2e:	f7ff fa13 	bl	8000258 <__aeabi_uidivmod>
 8000e32:	9a01      	ldr	r2, [sp, #4]
 8000e34:	040b      	lsls	r3, r1, #16
 8000e36:	4342      	muls	r2, r0
 8000e38:	0c31      	lsrs	r1, r6, #16
 8000e3a:	0005      	movs	r5, r0
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	428a      	cmp	r2, r1
 8000e40:	d900      	bls.n	8000e44 <__aeabi_ddiv+0x1f0>
 8000e42:	e16c      	b.n	800111e <__aeabi_ddiv+0x4ca>
 8000e44:	1a88      	subs	r0, r1, r2
 8000e46:	4649      	mov	r1, r9
 8000e48:	f7ff fa06 	bl	8000258 <__aeabi_uidivmod>
 8000e4c:	9a01      	ldr	r2, [sp, #4]
 8000e4e:	0436      	lsls	r6, r6, #16
 8000e50:	4342      	muls	r2, r0
 8000e52:	0409      	lsls	r1, r1, #16
 8000e54:	0c36      	lsrs	r6, r6, #16
 8000e56:	0003      	movs	r3, r0
 8000e58:	430e      	orrs	r6, r1
 8000e5a:	42b2      	cmp	r2, r6
 8000e5c:	d900      	bls.n	8000e60 <__aeabi_ddiv+0x20c>
 8000e5e:	e153      	b.n	8001108 <__aeabi_ddiv+0x4b4>
 8000e60:	9803      	ldr	r0, [sp, #12]
 8000e62:	1ab6      	subs	r6, r6, r2
 8000e64:	0002      	movs	r2, r0
 8000e66:	042d      	lsls	r5, r5, #16
 8000e68:	431d      	orrs	r5, r3
 8000e6a:	9f02      	ldr	r7, [sp, #8]
 8000e6c:	042b      	lsls	r3, r5, #16
 8000e6e:	0c1b      	lsrs	r3, r3, #16
 8000e70:	435a      	muls	r2, r3
 8000e72:	437b      	muls	r3, r7
 8000e74:	469c      	mov	ip, r3
 8000e76:	0c29      	lsrs	r1, r5, #16
 8000e78:	4348      	muls	r0, r1
 8000e7a:	0c13      	lsrs	r3, r2, #16
 8000e7c:	4484      	add	ip, r0
 8000e7e:	4463      	add	r3, ip
 8000e80:	4379      	muls	r1, r7
 8000e82:	4298      	cmp	r0, r3
 8000e84:	d903      	bls.n	8000e8e <__aeabi_ddiv+0x23a>
 8000e86:	2080      	movs	r0, #128	; 0x80
 8000e88:	0240      	lsls	r0, r0, #9
 8000e8a:	4684      	mov	ip, r0
 8000e8c:	4461      	add	r1, ip
 8000e8e:	0c18      	lsrs	r0, r3, #16
 8000e90:	0412      	lsls	r2, r2, #16
 8000e92:	041b      	lsls	r3, r3, #16
 8000e94:	0c12      	lsrs	r2, r2, #16
 8000e96:	1840      	adds	r0, r0, r1
 8000e98:	189b      	adds	r3, r3, r2
 8000e9a:	4286      	cmp	r6, r0
 8000e9c:	d200      	bcs.n	8000ea0 <__aeabi_ddiv+0x24c>
 8000e9e:	e100      	b.n	80010a2 <__aeabi_ddiv+0x44e>
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x250>
 8000ea2:	e0fb      	b.n	800109c <__aeabi_ddiv+0x448>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	431d      	orrs	r5, r3
 8000ea8:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <__aeabi_ddiv+0x37c>)
 8000eaa:	445b      	add	r3, fp
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dc00      	bgt.n	8000eb2 <__aeabi_ddiv+0x25e>
 8000eb0:	e0aa      	b.n	8001008 <__aeabi_ddiv+0x3b4>
 8000eb2:	076a      	lsls	r2, r5, #29
 8000eb4:	d000      	beq.n	8000eb8 <__aeabi_ddiv+0x264>
 8000eb6:	e13d      	b.n	8001134 <__aeabi_ddiv+0x4e0>
 8000eb8:	08e9      	lsrs	r1, r5, #3
 8000eba:	4642      	mov	r2, r8
 8000ebc:	01d2      	lsls	r2, r2, #7
 8000ebe:	d506      	bpl.n	8000ece <__aeabi_ddiv+0x27a>
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <__aeabi_ddiv+0x380>)
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	4690      	mov	r8, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	445b      	add	r3, fp
 8000ece:	4a42      	ldr	r2, [pc, #264]	; (8000fd8 <__aeabi_ddiv+0x384>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	dd00      	ble.n	8000ed6 <__aeabi_ddiv+0x282>
 8000ed4:	e723      	b.n	8000d1e <__aeabi_ddiv+0xca>
 8000ed6:	4642      	mov	r2, r8
 8000ed8:	055b      	lsls	r3, r3, #21
 8000eda:	0755      	lsls	r5, r2, #29
 8000edc:	0252      	lsls	r2, r2, #9
 8000ede:	430d      	orrs	r5, r1
 8000ee0:	0b12      	lsrs	r2, r2, #12
 8000ee2:	0d5b      	lsrs	r3, r3, #21
 8000ee4:	e70d      	b.n	8000d02 <__aeabi_ddiv+0xae>
 8000ee6:	4651      	mov	r1, sl
 8000ee8:	4321      	orrs	r1, r4
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x29a>
 8000eec:	e07c      	b.n	8000fe8 <__aeabi_ddiv+0x394>
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_ddiv+0x2a0>
 8000ef2:	e0fb      	b.n	80010ec <__aeabi_ddiv+0x498>
 8000ef4:	0020      	movs	r0, r4
 8000ef6:	f001 fa1b 	bl	8002330 <__clzsi2>
 8000efa:	0002      	movs	r2, r0
 8000efc:	3a0b      	subs	r2, #11
 8000efe:	231d      	movs	r3, #29
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	4652      	mov	r2, sl
 8000f04:	0001      	movs	r1, r0
 8000f06:	40da      	lsrs	r2, r3
 8000f08:	4653      	mov	r3, sl
 8000f0a:	3908      	subs	r1, #8
 8000f0c:	408b      	lsls	r3, r1
 8000f0e:	408c      	lsls	r4, r1
 8000f10:	0019      	movs	r1, r3
 8000f12:	4314      	orrs	r4, r2
 8000f14:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <__aeabi_ddiv+0x388>)
 8000f16:	4458      	add	r0, fp
 8000f18:	469b      	mov	fp, r3
 8000f1a:	4483      	add	fp, r0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e6d9      	b.n	8000cd4 <__aeabi_ddiv+0x80>
 8000f20:	0003      	movs	r3, r0
 8000f22:	4323      	orrs	r3, r4
 8000f24:	4698      	mov	r8, r3
 8000f26:	d044      	beq.n	8000fb2 <__aeabi_ddiv+0x35e>
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_ddiv+0x2da>
 8000f2c:	e0cf      	b.n	80010ce <__aeabi_ddiv+0x47a>
 8000f2e:	0020      	movs	r0, r4
 8000f30:	f001 f9fe 	bl	8002330 <__clzsi2>
 8000f34:	0001      	movs	r1, r0
 8000f36:	0002      	movs	r2, r0
 8000f38:	390b      	subs	r1, #11
 8000f3a:	231d      	movs	r3, #29
 8000f3c:	1a5b      	subs	r3, r3, r1
 8000f3e:	4649      	mov	r1, r9
 8000f40:	0010      	movs	r0, r2
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	3808      	subs	r0, #8
 8000f46:	4084      	lsls	r4, r0
 8000f48:	000b      	movs	r3, r1
 8000f4a:	464d      	mov	r5, r9
 8000f4c:	4323      	orrs	r3, r4
 8000f4e:	4698      	mov	r8, r3
 8000f50:	4085      	lsls	r5, r0
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <__aeabi_ddiv+0x38c>)
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	469b      	mov	fp, r3
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	e69e      	b.n	8000c9e <__aeabi_ddiv+0x4a>
 8000f60:	0002      	movs	r2, r0
 8000f62:	4322      	orrs	r2, r4
 8000f64:	4690      	mov	r8, r2
 8000f66:	d11d      	bne.n	8000fa4 <__aeabi_ddiv+0x350>
 8000f68:	2208      	movs	r2, #8
 8000f6a:	469b      	mov	fp, r3
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	2500      	movs	r5, #0
 8000f70:	4691      	mov	r9, r2
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e693      	b.n	8000c9e <__aeabi_ddiv+0x4a>
 8000f76:	4651      	mov	r1, sl
 8000f78:	4321      	orrs	r1, r4
 8000f7a:	d109      	bne.n	8000f90 <__aeabi_ddiv+0x33c>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	464a      	mov	r2, r9
 8000f80:	431a      	orrs	r2, r3
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <__aeabi_ddiv+0x390>)
 8000f84:	4691      	mov	r9, r2
 8000f86:	469c      	mov	ip, r3
 8000f88:	2400      	movs	r4, #0
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	44e3      	add	fp, ip
 8000f8e:	e6a1      	b.n	8000cd4 <__aeabi_ddiv+0x80>
 8000f90:	2303      	movs	r3, #3
 8000f92:	464a      	mov	r2, r9
 8000f94:	431a      	orrs	r2, r3
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <__aeabi_ddiv+0x390>)
 8000f98:	4691      	mov	r9, r2
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	4651      	mov	r1, sl
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	44e3      	add	fp, ip
 8000fa2:	e697      	b.n	8000cd4 <__aeabi_ddiv+0x80>
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	469b      	mov	fp, r3
 8000fa8:	2303      	movs	r3, #3
 8000faa:	46a0      	mov	r8, r4
 8000fac:	4691      	mov	r9, r2
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	e675      	b.n	8000c9e <__aeabi_ddiv+0x4a>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	4699      	mov	r9, r3
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	469b      	mov	fp, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	2500      	movs	r5, #0
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	e66d      	b.n	8000c9e <__aeabi_ddiv+0x4a>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	000007ff 	.word	0x000007ff
 8000fc8:	fffffc01 	.word	0xfffffc01
 8000fcc:	08009718 	.word	0x08009718
 8000fd0:	000003ff 	.word	0x000003ff
 8000fd4:	feffffff 	.word	0xfeffffff
 8000fd8:	000007fe 	.word	0x000007fe
 8000fdc:	000003f3 	.word	0x000003f3
 8000fe0:	fffffc0d 	.word	0xfffffc0d
 8000fe4:	fffff801 	.word	0xfffff801
 8000fe8:	464a      	mov	r2, r9
 8000fea:	2301      	movs	r3, #1
 8000fec:	431a      	orrs	r2, r3
 8000fee:	4691      	mov	r9, r2
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	e66e      	b.n	8000cd4 <__aeabi_ddiv+0x80>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	2500      	movs	r5, #0
 8000ffe:	4b88      	ldr	r3, [pc, #544]	; (8001220 <__aeabi_ddiv+0x5cc>)
 8001000:	0312      	lsls	r2, r2, #12
 8001002:	e67e      	b.n	8000d02 <__aeabi_ddiv+0xae>
 8001004:	2501      	movs	r5, #1
 8001006:	426d      	negs	r5, r5
 8001008:	2201      	movs	r2, #1
 800100a:	1ad2      	subs	r2, r2, r3
 800100c:	2a38      	cmp	r2, #56	; 0x38
 800100e:	dd00      	ble.n	8001012 <__aeabi_ddiv+0x3be>
 8001010:	e674      	b.n	8000cfc <__aeabi_ddiv+0xa8>
 8001012:	2a1f      	cmp	r2, #31
 8001014:	dc00      	bgt.n	8001018 <__aeabi_ddiv+0x3c4>
 8001016:	e0bd      	b.n	8001194 <__aeabi_ddiv+0x540>
 8001018:	211f      	movs	r1, #31
 800101a:	4249      	negs	r1, r1
 800101c:	1acb      	subs	r3, r1, r3
 800101e:	4641      	mov	r1, r8
 8001020:	40d9      	lsrs	r1, r3
 8001022:	000b      	movs	r3, r1
 8001024:	2a20      	cmp	r2, #32
 8001026:	d004      	beq.n	8001032 <__aeabi_ddiv+0x3de>
 8001028:	4641      	mov	r1, r8
 800102a:	4a7e      	ldr	r2, [pc, #504]	; (8001224 <__aeabi_ddiv+0x5d0>)
 800102c:	445a      	add	r2, fp
 800102e:	4091      	lsls	r1, r2
 8001030:	430d      	orrs	r5, r1
 8001032:	0029      	movs	r1, r5
 8001034:	1e4a      	subs	r2, r1, #1
 8001036:	4191      	sbcs	r1, r2
 8001038:	4319      	orrs	r1, r3
 800103a:	2307      	movs	r3, #7
 800103c:	001d      	movs	r5, r3
 800103e:	2200      	movs	r2, #0
 8001040:	400d      	ands	r5, r1
 8001042:	420b      	tst	r3, r1
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x3f4>
 8001046:	e0d0      	b.n	80011ea <__aeabi_ddiv+0x596>
 8001048:	220f      	movs	r2, #15
 800104a:	2300      	movs	r3, #0
 800104c:	400a      	ands	r2, r1
 800104e:	2a04      	cmp	r2, #4
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x400>
 8001052:	e0c7      	b.n	80011e4 <__aeabi_ddiv+0x590>
 8001054:	1d0a      	adds	r2, r1, #4
 8001056:	428a      	cmp	r2, r1
 8001058:	4189      	sbcs	r1, r1
 800105a:	4249      	negs	r1, r1
 800105c:	185b      	adds	r3, r3, r1
 800105e:	0011      	movs	r1, r2
 8001060:	021a      	lsls	r2, r3, #8
 8001062:	d400      	bmi.n	8001066 <__aeabi_ddiv+0x412>
 8001064:	e0be      	b.n	80011e4 <__aeabi_ddiv+0x590>
 8001066:	2301      	movs	r3, #1
 8001068:	2200      	movs	r2, #0
 800106a:	2500      	movs	r5, #0
 800106c:	e649      	b.n	8000d02 <__aeabi_ddiv+0xae>
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	4643      	mov	r3, r8
 8001072:	0312      	lsls	r2, r2, #12
 8001074:	4213      	tst	r3, r2
 8001076:	d008      	beq.n	800108a <__aeabi_ddiv+0x436>
 8001078:	4214      	tst	r4, r2
 800107a:	d106      	bne.n	800108a <__aeabi_ddiv+0x436>
 800107c:	4322      	orrs	r2, r4
 800107e:	0312      	lsls	r2, r2, #12
 8001080:	46ba      	mov	sl, r7
 8001082:	000d      	movs	r5, r1
 8001084:	4b66      	ldr	r3, [pc, #408]	; (8001220 <__aeabi_ddiv+0x5cc>)
 8001086:	0b12      	lsrs	r2, r2, #12
 8001088:	e63b      	b.n	8000d02 <__aeabi_ddiv+0xae>
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	4643      	mov	r3, r8
 800108e:	0312      	lsls	r2, r2, #12
 8001090:	431a      	orrs	r2, r3
 8001092:	0312      	lsls	r2, r2, #12
 8001094:	46b2      	mov	sl, r6
 8001096:	4b62      	ldr	r3, [pc, #392]	; (8001220 <__aeabi_ddiv+0x5cc>)
 8001098:	0b12      	lsrs	r2, r2, #12
 800109a:	e632      	b.n	8000d02 <__aeabi_ddiv+0xae>
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x44e>
 80010a0:	e702      	b.n	8000ea8 <__aeabi_ddiv+0x254>
 80010a2:	19a6      	adds	r6, r4, r6
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	42a6      	cmp	r6, r4
 80010a8:	d200      	bcs.n	80010ac <__aeabi_ddiv+0x458>
 80010aa:	e089      	b.n	80011c0 <__aeabi_ddiv+0x56c>
 80010ac:	4286      	cmp	r6, r0
 80010ae:	d200      	bcs.n	80010b2 <__aeabi_ddiv+0x45e>
 80010b0:	e09f      	b.n	80011f2 <__aeabi_ddiv+0x59e>
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x462>
 80010b4:	e0af      	b.n	8001216 <__aeabi_ddiv+0x5c2>
 80010b6:	0015      	movs	r5, r2
 80010b8:	e6f4      	b.n	8000ea4 <__aeabi_ddiv+0x250>
 80010ba:	42a9      	cmp	r1, r5
 80010bc:	d900      	bls.n	80010c0 <__aeabi_ddiv+0x46c>
 80010be:	e63c      	b.n	8000d3a <__aeabi_ddiv+0xe6>
 80010c0:	4643      	mov	r3, r8
 80010c2:	07de      	lsls	r6, r3, #31
 80010c4:	0858      	lsrs	r0, r3, #1
 80010c6:	086b      	lsrs	r3, r5, #1
 80010c8:	431e      	orrs	r6, r3
 80010ca:	07ed      	lsls	r5, r5, #31
 80010cc:	e63c      	b.n	8000d48 <__aeabi_ddiv+0xf4>
 80010ce:	f001 f92f 	bl	8002330 <__clzsi2>
 80010d2:	0001      	movs	r1, r0
 80010d4:	0002      	movs	r2, r0
 80010d6:	3115      	adds	r1, #21
 80010d8:	3220      	adds	r2, #32
 80010da:	291c      	cmp	r1, #28
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_ddiv+0x48c>
 80010de:	e72c      	b.n	8000f3a <__aeabi_ddiv+0x2e6>
 80010e0:	464b      	mov	r3, r9
 80010e2:	3808      	subs	r0, #8
 80010e4:	4083      	lsls	r3, r0
 80010e6:	2500      	movs	r5, #0
 80010e8:	4698      	mov	r8, r3
 80010ea:	e732      	b.n	8000f52 <__aeabi_ddiv+0x2fe>
 80010ec:	f001 f920 	bl	8002330 <__clzsi2>
 80010f0:	0003      	movs	r3, r0
 80010f2:	001a      	movs	r2, r3
 80010f4:	3215      	adds	r2, #21
 80010f6:	3020      	adds	r0, #32
 80010f8:	2a1c      	cmp	r2, #28
 80010fa:	dc00      	bgt.n	80010fe <__aeabi_ddiv+0x4aa>
 80010fc:	e6ff      	b.n	8000efe <__aeabi_ddiv+0x2aa>
 80010fe:	4654      	mov	r4, sl
 8001100:	3b08      	subs	r3, #8
 8001102:	2100      	movs	r1, #0
 8001104:	409c      	lsls	r4, r3
 8001106:	e705      	b.n	8000f14 <__aeabi_ddiv+0x2c0>
 8001108:	1936      	adds	r6, r6, r4
 800110a:	3b01      	subs	r3, #1
 800110c:	42b4      	cmp	r4, r6
 800110e:	d900      	bls.n	8001112 <__aeabi_ddiv+0x4be>
 8001110:	e6a6      	b.n	8000e60 <__aeabi_ddiv+0x20c>
 8001112:	42b2      	cmp	r2, r6
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x4c4>
 8001116:	e6a3      	b.n	8000e60 <__aeabi_ddiv+0x20c>
 8001118:	1e83      	subs	r3, r0, #2
 800111a:	1936      	adds	r6, r6, r4
 800111c:	e6a0      	b.n	8000e60 <__aeabi_ddiv+0x20c>
 800111e:	1909      	adds	r1, r1, r4
 8001120:	3d01      	subs	r5, #1
 8001122:	428c      	cmp	r4, r1
 8001124:	d900      	bls.n	8001128 <__aeabi_ddiv+0x4d4>
 8001126:	e68d      	b.n	8000e44 <__aeabi_ddiv+0x1f0>
 8001128:	428a      	cmp	r2, r1
 800112a:	d800      	bhi.n	800112e <__aeabi_ddiv+0x4da>
 800112c:	e68a      	b.n	8000e44 <__aeabi_ddiv+0x1f0>
 800112e:	1e85      	subs	r5, r0, #2
 8001130:	1909      	adds	r1, r1, r4
 8001132:	e687      	b.n	8000e44 <__aeabi_ddiv+0x1f0>
 8001134:	220f      	movs	r2, #15
 8001136:	402a      	ands	r2, r5
 8001138:	2a04      	cmp	r2, #4
 800113a:	d100      	bne.n	800113e <__aeabi_ddiv+0x4ea>
 800113c:	e6bc      	b.n	8000eb8 <__aeabi_ddiv+0x264>
 800113e:	1d29      	adds	r1, r5, #4
 8001140:	42a9      	cmp	r1, r5
 8001142:	41ad      	sbcs	r5, r5
 8001144:	426d      	negs	r5, r5
 8001146:	08c9      	lsrs	r1, r1, #3
 8001148:	44a8      	add	r8, r5
 800114a:	e6b6      	b.n	8000eba <__aeabi_ddiv+0x266>
 800114c:	42af      	cmp	r7, r5
 800114e:	d900      	bls.n	8001152 <__aeabi_ddiv+0x4fe>
 8001150:	e662      	b.n	8000e18 <__aeabi_ddiv+0x1c4>
 8001152:	4281      	cmp	r1, r0
 8001154:	d804      	bhi.n	8001160 <__aeabi_ddiv+0x50c>
 8001156:	d000      	beq.n	800115a <__aeabi_ddiv+0x506>
 8001158:	e65e      	b.n	8000e18 <__aeabi_ddiv+0x1c4>
 800115a:	42ae      	cmp	r6, r5
 800115c:	d800      	bhi.n	8001160 <__aeabi_ddiv+0x50c>
 800115e:	e65b      	b.n	8000e18 <__aeabi_ddiv+0x1c4>
 8001160:	2302      	movs	r3, #2
 8001162:	425b      	negs	r3, r3
 8001164:	469c      	mov	ip, r3
 8001166:	9b00      	ldr	r3, [sp, #0]
 8001168:	44e0      	add	r8, ip
 800116a:	469c      	mov	ip, r3
 800116c:	4465      	add	r5, ip
 800116e:	429d      	cmp	r5, r3
 8001170:	419b      	sbcs	r3, r3
 8001172:	425b      	negs	r3, r3
 8001174:	191b      	adds	r3, r3, r4
 8001176:	18c0      	adds	r0, r0, r3
 8001178:	e64f      	b.n	8000e1a <__aeabi_ddiv+0x1c6>
 800117a:	42b2      	cmp	r2, r6
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x52c>
 800117e:	e612      	b.n	8000da6 <__aeabi_ddiv+0x152>
 8001180:	1e83      	subs	r3, r0, #2
 8001182:	1936      	adds	r6, r6, r4
 8001184:	e60f      	b.n	8000da6 <__aeabi_ddiv+0x152>
 8001186:	428a      	cmp	r2, r1
 8001188:	d800      	bhi.n	800118c <__aeabi_ddiv+0x538>
 800118a:	e5fa      	b.n	8000d82 <__aeabi_ddiv+0x12e>
 800118c:	1e83      	subs	r3, r0, #2
 800118e:	4698      	mov	r8, r3
 8001190:	1909      	adds	r1, r1, r4
 8001192:	e5f6      	b.n	8000d82 <__aeabi_ddiv+0x12e>
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <__aeabi_ddiv+0x5d4>)
 8001196:	0028      	movs	r0, r5
 8001198:	445b      	add	r3, fp
 800119a:	4641      	mov	r1, r8
 800119c:	409d      	lsls	r5, r3
 800119e:	4099      	lsls	r1, r3
 80011a0:	40d0      	lsrs	r0, r2
 80011a2:	1e6b      	subs	r3, r5, #1
 80011a4:	419d      	sbcs	r5, r3
 80011a6:	4643      	mov	r3, r8
 80011a8:	4301      	orrs	r1, r0
 80011aa:	4329      	orrs	r1, r5
 80011ac:	40d3      	lsrs	r3, r2
 80011ae:	074a      	lsls	r2, r1, #29
 80011b0:	d100      	bne.n	80011b4 <__aeabi_ddiv+0x560>
 80011b2:	e755      	b.n	8001060 <__aeabi_ddiv+0x40c>
 80011b4:	220f      	movs	r2, #15
 80011b6:	400a      	ands	r2, r1
 80011b8:	2a04      	cmp	r2, #4
 80011ba:	d000      	beq.n	80011be <__aeabi_ddiv+0x56a>
 80011bc:	e74a      	b.n	8001054 <__aeabi_ddiv+0x400>
 80011be:	e74f      	b.n	8001060 <__aeabi_ddiv+0x40c>
 80011c0:	0015      	movs	r5, r2
 80011c2:	4286      	cmp	r6, r0
 80011c4:	d000      	beq.n	80011c8 <__aeabi_ddiv+0x574>
 80011c6:	e66d      	b.n	8000ea4 <__aeabi_ddiv+0x250>
 80011c8:	9a00      	ldr	r2, [sp, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d000      	beq.n	80011d0 <__aeabi_ddiv+0x57c>
 80011ce:	e669      	b.n	8000ea4 <__aeabi_ddiv+0x250>
 80011d0:	e66a      	b.n	8000ea8 <__aeabi_ddiv+0x254>
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <__aeabi_ddiv+0x5d8>)
 80011d4:	445b      	add	r3, fp
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	dc00      	bgt.n	80011dc <__aeabi_ddiv+0x588>
 80011da:	e713      	b.n	8001004 <__aeabi_ddiv+0x3b0>
 80011dc:	2501      	movs	r5, #1
 80011de:	2100      	movs	r1, #0
 80011e0:	44a8      	add	r8, r5
 80011e2:	e66a      	b.n	8000eba <__aeabi_ddiv+0x266>
 80011e4:	075d      	lsls	r5, r3, #29
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	0b1a      	lsrs	r2, r3, #12
 80011ea:	08c9      	lsrs	r1, r1, #3
 80011ec:	2300      	movs	r3, #0
 80011ee:	430d      	orrs	r5, r1
 80011f0:	e587      	b.n	8000d02 <__aeabi_ddiv+0xae>
 80011f2:	9900      	ldr	r1, [sp, #0]
 80011f4:	3d02      	subs	r5, #2
 80011f6:	004a      	lsls	r2, r1, #1
 80011f8:	428a      	cmp	r2, r1
 80011fa:	41bf      	sbcs	r7, r7
 80011fc:	427f      	negs	r7, r7
 80011fe:	193f      	adds	r7, r7, r4
 8001200:	19f6      	adds	r6, r6, r7
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	e7dd      	b.n	80011c2 <__aeabi_ddiv+0x56e>
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	4643      	mov	r3, r8
 800120a:	0312      	lsls	r2, r2, #12
 800120c:	431a      	orrs	r2, r3
 800120e:	0312      	lsls	r2, r2, #12
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <__aeabi_ddiv+0x5cc>)
 8001212:	0b12      	lsrs	r2, r2, #12
 8001214:	e575      	b.n	8000d02 <__aeabi_ddiv+0xae>
 8001216:	9900      	ldr	r1, [sp, #0]
 8001218:	4299      	cmp	r1, r3
 800121a:	d3ea      	bcc.n	80011f2 <__aeabi_ddiv+0x59e>
 800121c:	0015      	movs	r5, r2
 800121e:	e7d3      	b.n	80011c8 <__aeabi_ddiv+0x574>
 8001220:	000007ff 	.word	0x000007ff
 8001224:	0000043e 	.word	0x0000043e
 8001228:	0000041e 	.word	0x0000041e
 800122c:	000003ff 	.word	0x000003ff

08001230 <__eqdf2>:
 8001230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001232:	464e      	mov	r6, r9
 8001234:	4645      	mov	r5, r8
 8001236:	46de      	mov	lr, fp
 8001238:	4657      	mov	r7, sl
 800123a:	4690      	mov	r8, r2
 800123c:	b5e0      	push	{r5, r6, r7, lr}
 800123e:	0017      	movs	r7, r2
 8001240:	031a      	lsls	r2, r3, #12
 8001242:	0b12      	lsrs	r2, r2, #12
 8001244:	0005      	movs	r5, r0
 8001246:	4684      	mov	ip, r0
 8001248:	4819      	ldr	r0, [pc, #100]	; (80012b0 <__eqdf2+0x80>)
 800124a:	030e      	lsls	r6, r1, #12
 800124c:	004c      	lsls	r4, r1, #1
 800124e:	4691      	mov	r9, r2
 8001250:	005a      	lsls	r2, r3, #1
 8001252:	0fdb      	lsrs	r3, r3, #31
 8001254:	469b      	mov	fp, r3
 8001256:	0b36      	lsrs	r6, r6, #12
 8001258:	0d64      	lsrs	r4, r4, #21
 800125a:	0fc9      	lsrs	r1, r1, #31
 800125c:	0d52      	lsrs	r2, r2, #21
 800125e:	4284      	cmp	r4, r0
 8001260:	d019      	beq.n	8001296 <__eqdf2+0x66>
 8001262:	4282      	cmp	r2, r0
 8001264:	d010      	beq.n	8001288 <__eqdf2+0x58>
 8001266:	2001      	movs	r0, #1
 8001268:	4294      	cmp	r4, r2
 800126a:	d10e      	bne.n	800128a <__eqdf2+0x5a>
 800126c:	454e      	cmp	r6, r9
 800126e:	d10c      	bne.n	800128a <__eqdf2+0x5a>
 8001270:	2001      	movs	r0, #1
 8001272:	45c4      	cmp	ip, r8
 8001274:	d109      	bne.n	800128a <__eqdf2+0x5a>
 8001276:	4559      	cmp	r1, fp
 8001278:	d017      	beq.n	80012aa <__eqdf2+0x7a>
 800127a:	2c00      	cmp	r4, #0
 800127c:	d105      	bne.n	800128a <__eqdf2+0x5a>
 800127e:	0030      	movs	r0, r6
 8001280:	4328      	orrs	r0, r5
 8001282:	1e43      	subs	r3, r0, #1
 8001284:	4198      	sbcs	r0, r3
 8001286:	e000      	b.n	800128a <__eqdf2+0x5a>
 8001288:	2001      	movs	r0, #1
 800128a:	bcf0      	pop	{r4, r5, r6, r7}
 800128c:	46bb      	mov	fp, r7
 800128e:	46b2      	mov	sl, r6
 8001290:	46a9      	mov	r9, r5
 8001292:	46a0      	mov	r8, r4
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	0033      	movs	r3, r6
 8001298:	2001      	movs	r0, #1
 800129a:	432b      	orrs	r3, r5
 800129c:	d1f5      	bne.n	800128a <__eqdf2+0x5a>
 800129e:	42a2      	cmp	r2, r4
 80012a0:	d1f3      	bne.n	800128a <__eqdf2+0x5a>
 80012a2:	464b      	mov	r3, r9
 80012a4:	433b      	orrs	r3, r7
 80012a6:	d1f0      	bne.n	800128a <__eqdf2+0x5a>
 80012a8:	e7e2      	b.n	8001270 <__eqdf2+0x40>
 80012aa:	2000      	movs	r0, #0
 80012ac:	e7ed      	b.n	800128a <__eqdf2+0x5a>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	000007ff 	.word	0x000007ff

080012b4 <__gedf2>:
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	4647      	mov	r7, r8
 80012b8:	46ce      	mov	lr, r9
 80012ba:	0004      	movs	r4, r0
 80012bc:	0018      	movs	r0, r3
 80012be:	0016      	movs	r6, r2
 80012c0:	031b      	lsls	r3, r3, #12
 80012c2:	0b1b      	lsrs	r3, r3, #12
 80012c4:	4d2d      	ldr	r5, [pc, #180]	; (800137c <__gedf2+0xc8>)
 80012c6:	004a      	lsls	r2, r1, #1
 80012c8:	4699      	mov	r9, r3
 80012ca:	b580      	push	{r7, lr}
 80012cc:	0043      	lsls	r3, r0, #1
 80012ce:	030f      	lsls	r7, r1, #12
 80012d0:	46a4      	mov	ip, r4
 80012d2:	46b0      	mov	r8, r6
 80012d4:	0b3f      	lsrs	r7, r7, #12
 80012d6:	0d52      	lsrs	r2, r2, #21
 80012d8:	0fc9      	lsrs	r1, r1, #31
 80012da:	0d5b      	lsrs	r3, r3, #21
 80012dc:	0fc0      	lsrs	r0, r0, #31
 80012de:	42aa      	cmp	r2, r5
 80012e0:	d021      	beq.n	8001326 <__gedf2+0x72>
 80012e2:	42ab      	cmp	r3, r5
 80012e4:	d013      	beq.n	800130e <__gedf2+0x5a>
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d122      	bne.n	8001330 <__gedf2+0x7c>
 80012ea:	433c      	orrs	r4, r7
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <__gedf2+0x42>
 80012f0:	464d      	mov	r5, r9
 80012f2:	432e      	orrs	r6, r5
 80012f4:	d022      	beq.n	800133c <__gedf2+0x88>
 80012f6:	2c00      	cmp	r4, #0
 80012f8:	d010      	beq.n	800131c <__gedf2+0x68>
 80012fa:	4281      	cmp	r1, r0
 80012fc:	d022      	beq.n	8001344 <__gedf2+0x90>
 80012fe:	2002      	movs	r0, #2
 8001300:	3901      	subs	r1, #1
 8001302:	4008      	ands	r0, r1
 8001304:	3801      	subs	r0, #1
 8001306:	bcc0      	pop	{r6, r7}
 8001308:	46b9      	mov	r9, r7
 800130a:	46b0      	mov	r8, r6
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130e:	464d      	mov	r5, r9
 8001310:	432e      	orrs	r6, r5
 8001312:	d129      	bne.n	8001368 <__gedf2+0xb4>
 8001314:	2a00      	cmp	r2, #0
 8001316:	d1f0      	bne.n	80012fa <__gedf2+0x46>
 8001318:	433c      	orrs	r4, r7
 800131a:	d1ee      	bne.n	80012fa <__gedf2+0x46>
 800131c:	2800      	cmp	r0, #0
 800131e:	d1f2      	bne.n	8001306 <__gedf2+0x52>
 8001320:	2001      	movs	r0, #1
 8001322:	4240      	negs	r0, r0
 8001324:	e7ef      	b.n	8001306 <__gedf2+0x52>
 8001326:	003d      	movs	r5, r7
 8001328:	4325      	orrs	r5, r4
 800132a:	d11d      	bne.n	8001368 <__gedf2+0xb4>
 800132c:	4293      	cmp	r3, r2
 800132e:	d0ee      	beq.n	800130e <__gedf2+0x5a>
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e2      	bne.n	80012fa <__gedf2+0x46>
 8001334:	464c      	mov	r4, r9
 8001336:	4326      	orrs	r6, r4
 8001338:	d1df      	bne.n	80012fa <__gedf2+0x46>
 800133a:	e7e0      	b.n	80012fe <__gedf2+0x4a>
 800133c:	2000      	movs	r0, #0
 800133e:	2c00      	cmp	r4, #0
 8001340:	d0e1      	beq.n	8001306 <__gedf2+0x52>
 8001342:	e7dc      	b.n	80012fe <__gedf2+0x4a>
 8001344:	429a      	cmp	r2, r3
 8001346:	dc0a      	bgt.n	800135e <__gedf2+0xaa>
 8001348:	dbe8      	blt.n	800131c <__gedf2+0x68>
 800134a:	454f      	cmp	r7, r9
 800134c:	d8d7      	bhi.n	80012fe <__gedf2+0x4a>
 800134e:	d00e      	beq.n	800136e <__gedf2+0xba>
 8001350:	2000      	movs	r0, #0
 8001352:	454f      	cmp	r7, r9
 8001354:	d2d7      	bcs.n	8001306 <__gedf2+0x52>
 8001356:	2900      	cmp	r1, #0
 8001358:	d0e2      	beq.n	8001320 <__gedf2+0x6c>
 800135a:	0008      	movs	r0, r1
 800135c:	e7d3      	b.n	8001306 <__gedf2+0x52>
 800135e:	4243      	negs	r3, r0
 8001360:	4158      	adcs	r0, r3
 8001362:	0040      	lsls	r0, r0, #1
 8001364:	3801      	subs	r0, #1
 8001366:	e7ce      	b.n	8001306 <__gedf2+0x52>
 8001368:	2002      	movs	r0, #2
 800136a:	4240      	negs	r0, r0
 800136c:	e7cb      	b.n	8001306 <__gedf2+0x52>
 800136e:	45c4      	cmp	ip, r8
 8001370:	d8c5      	bhi.n	80012fe <__gedf2+0x4a>
 8001372:	2000      	movs	r0, #0
 8001374:	45c4      	cmp	ip, r8
 8001376:	d2c6      	bcs.n	8001306 <__gedf2+0x52>
 8001378:	e7ed      	b.n	8001356 <__gedf2+0xa2>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	000007ff 	.word	0x000007ff

08001380 <__ledf2>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	4647      	mov	r7, r8
 8001384:	46ce      	mov	lr, r9
 8001386:	0004      	movs	r4, r0
 8001388:	0018      	movs	r0, r3
 800138a:	0016      	movs	r6, r2
 800138c:	031b      	lsls	r3, r3, #12
 800138e:	0b1b      	lsrs	r3, r3, #12
 8001390:	4d2c      	ldr	r5, [pc, #176]	; (8001444 <__ledf2+0xc4>)
 8001392:	004a      	lsls	r2, r1, #1
 8001394:	4699      	mov	r9, r3
 8001396:	b580      	push	{r7, lr}
 8001398:	0043      	lsls	r3, r0, #1
 800139a:	030f      	lsls	r7, r1, #12
 800139c:	46a4      	mov	ip, r4
 800139e:	46b0      	mov	r8, r6
 80013a0:	0b3f      	lsrs	r7, r7, #12
 80013a2:	0d52      	lsrs	r2, r2, #21
 80013a4:	0fc9      	lsrs	r1, r1, #31
 80013a6:	0d5b      	lsrs	r3, r3, #21
 80013a8:	0fc0      	lsrs	r0, r0, #31
 80013aa:	42aa      	cmp	r2, r5
 80013ac:	d00d      	beq.n	80013ca <__ledf2+0x4a>
 80013ae:	42ab      	cmp	r3, r5
 80013b0:	d010      	beq.n	80013d4 <__ledf2+0x54>
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d127      	bne.n	8001406 <__ledf2+0x86>
 80013b6:	433c      	orrs	r4, r7
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d111      	bne.n	80013e0 <__ledf2+0x60>
 80013bc:	464d      	mov	r5, r9
 80013be:	432e      	orrs	r6, r5
 80013c0:	d10e      	bne.n	80013e0 <__ledf2+0x60>
 80013c2:	2000      	movs	r0, #0
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d015      	beq.n	80013f4 <__ledf2+0x74>
 80013c8:	e00e      	b.n	80013e8 <__ledf2+0x68>
 80013ca:	003d      	movs	r5, r7
 80013cc:	4325      	orrs	r5, r4
 80013ce:	d110      	bne.n	80013f2 <__ledf2+0x72>
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d118      	bne.n	8001406 <__ledf2+0x86>
 80013d4:	464d      	mov	r5, r9
 80013d6:	432e      	orrs	r6, r5
 80013d8:	d10b      	bne.n	80013f2 <__ledf2+0x72>
 80013da:	2a00      	cmp	r2, #0
 80013dc:	d102      	bne.n	80013e4 <__ledf2+0x64>
 80013de:	433c      	orrs	r4, r7
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	d00b      	beq.n	80013fc <__ledf2+0x7c>
 80013e4:	4281      	cmp	r1, r0
 80013e6:	d014      	beq.n	8001412 <__ledf2+0x92>
 80013e8:	2002      	movs	r0, #2
 80013ea:	3901      	subs	r1, #1
 80013ec:	4008      	ands	r0, r1
 80013ee:	3801      	subs	r0, #1
 80013f0:	e000      	b.n	80013f4 <__ledf2+0x74>
 80013f2:	2002      	movs	r0, #2
 80013f4:	bcc0      	pop	{r6, r7}
 80013f6:	46b9      	mov	r9, r7
 80013f8:	46b0      	mov	r8, r6
 80013fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d1f9      	bne.n	80013f4 <__ledf2+0x74>
 8001400:	2001      	movs	r0, #1
 8001402:	4240      	negs	r0, r0
 8001404:	e7f6      	b.n	80013f4 <__ledf2+0x74>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ec      	bne.n	80013e4 <__ledf2+0x64>
 800140a:	464c      	mov	r4, r9
 800140c:	4326      	orrs	r6, r4
 800140e:	d1e9      	bne.n	80013e4 <__ledf2+0x64>
 8001410:	e7ea      	b.n	80013e8 <__ledf2+0x68>
 8001412:	429a      	cmp	r2, r3
 8001414:	dd04      	ble.n	8001420 <__ledf2+0xa0>
 8001416:	4243      	negs	r3, r0
 8001418:	4158      	adcs	r0, r3
 800141a:	0040      	lsls	r0, r0, #1
 800141c:	3801      	subs	r0, #1
 800141e:	e7e9      	b.n	80013f4 <__ledf2+0x74>
 8001420:	429a      	cmp	r2, r3
 8001422:	dbeb      	blt.n	80013fc <__ledf2+0x7c>
 8001424:	454f      	cmp	r7, r9
 8001426:	d8df      	bhi.n	80013e8 <__ledf2+0x68>
 8001428:	d006      	beq.n	8001438 <__ledf2+0xb8>
 800142a:	2000      	movs	r0, #0
 800142c:	454f      	cmp	r7, r9
 800142e:	d2e1      	bcs.n	80013f4 <__ledf2+0x74>
 8001430:	2900      	cmp	r1, #0
 8001432:	d0e5      	beq.n	8001400 <__ledf2+0x80>
 8001434:	0008      	movs	r0, r1
 8001436:	e7dd      	b.n	80013f4 <__ledf2+0x74>
 8001438:	45c4      	cmp	ip, r8
 800143a:	d8d5      	bhi.n	80013e8 <__ledf2+0x68>
 800143c:	2000      	movs	r0, #0
 800143e:	45c4      	cmp	ip, r8
 8001440:	d2d8      	bcs.n	80013f4 <__ledf2+0x74>
 8001442:	e7f5      	b.n	8001430 <__ledf2+0xb0>
 8001444:	000007ff 	.word	0x000007ff

08001448 <__aeabi_dmul>:
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	4645      	mov	r5, r8
 800144c:	46de      	mov	lr, fp
 800144e:	4657      	mov	r7, sl
 8001450:	464e      	mov	r6, r9
 8001452:	b5e0      	push	{r5, r6, r7, lr}
 8001454:	001f      	movs	r7, r3
 8001456:	030b      	lsls	r3, r1, #12
 8001458:	0b1b      	lsrs	r3, r3, #12
 800145a:	469b      	mov	fp, r3
 800145c:	004d      	lsls	r5, r1, #1
 800145e:	0fcb      	lsrs	r3, r1, #31
 8001460:	0004      	movs	r4, r0
 8001462:	4691      	mov	r9, r2
 8001464:	4698      	mov	r8, r3
 8001466:	b087      	sub	sp, #28
 8001468:	0d6d      	lsrs	r5, r5, #21
 800146a:	d100      	bne.n	800146e <__aeabi_dmul+0x26>
 800146c:	e1cd      	b.n	800180a <__aeabi_dmul+0x3c2>
 800146e:	4bce      	ldr	r3, [pc, #824]	; (80017a8 <__aeabi_dmul+0x360>)
 8001470:	429d      	cmp	r5, r3
 8001472:	d100      	bne.n	8001476 <__aeabi_dmul+0x2e>
 8001474:	e1e9      	b.n	800184a <__aeabi_dmul+0x402>
 8001476:	465a      	mov	r2, fp
 8001478:	0f43      	lsrs	r3, r0, #29
 800147a:	00d2      	lsls	r2, r2, #3
 800147c:	4313      	orrs	r3, r2
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	0412      	lsls	r2, r2, #16
 8001482:	431a      	orrs	r2, r3
 8001484:	00c3      	lsls	r3, r0, #3
 8001486:	469a      	mov	sl, r3
 8001488:	4bc8      	ldr	r3, [pc, #800]	; (80017ac <__aeabi_dmul+0x364>)
 800148a:	4693      	mov	fp, r2
 800148c:	469c      	mov	ip, r3
 800148e:	2300      	movs	r3, #0
 8001490:	2600      	movs	r6, #0
 8001492:	4465      	add	r5, ip
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	033c      	lsls	r4, r7, #12
 8001498:	007b      	lsls	r3, r7, #1
 800149a:	4648      	mov	r0, r9
 800149c:	0b24      	lsrs	r4, r4, #12
 800149e:	0d5b      	lsrs	r3, r3, #21
 80014a0:	0fff      	lsrs	r7, r7, #31
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dmul+0x60>
 80014a6:	e189      	b.n	80017bc <__aeabi_dmul+0x374>
 80014a8:	4abf      	ldr	r2, [pc, #764]	; (80017a8 <__aeabi_dmul+0x360>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <__aeabi_dmul+0x9a>
 80014ae:	0f42      	lsrs	r2, r0, #29
 80014b0:	00e4      	lsls	r4, r4, #3
 80014b2:	4322      	orrs	r2, r4
 80014b4:	2480      	movs	r4, #128	; 0x80
 80014b6:	0424      	lsls	r4, r4, #16
 80014b8:	4314      	orrs	r4, r2
 80014ba:	4abc      	ldr	r2, [pc, #752]	; (80017ac <__aeabi_dmul+0x364>)
 80014bc:	2100      	movs	r1, #0
 80014be:	4694      	mov	ip, r2
 80014c0:	4642      	mov	r2, r8
 80014c2:	4463      	add	r3, ip
 80014c4:	195b      	adds	r3, r3, r5
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	9b01      	ldr	r3, [sp, #4]
 80014ca:	407a      	eors	r2, r7
 80014cc:	3301      	adds	r3, #1
 80014ce:	00c0      	lsls	r0, r0, #3
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	2e0a      	cmp	r6, #10
 80014d6:	dd1c      	ble.n	8001512 <__aeabi_dmul+0xca>
 80014d8:	003a      	movs	r2, r7
 80014da:	2e0b      	cmp	r6, #11
 80014dc:	d05e      	beq.n	800159c <__aeabi_dmul+0x154>
 80014de:	4647      	mov	r7, r8
 80014e0:	e056      	b.n	8001590 <__aeabi_dmul+0x148>
 80014e2:	4649      	mov	r1, r9
 80014e4:	4bb0      	ldr	r3, [pc, #704]	; (80017a8 <__aeabi_dmul+0x360>)
 80014e6:	4321      	orrs	r1, r4
 80014e8:	18eb      	adds	r3, r5, r3
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d12a      	bne.n	8001546 <__aeabi_dmul+0xfe>
 80014f0:	2080      	movs	r0, #128	; 0x80
 80014f2:	2202      	movs	r2, #2
 80014f4:	0100      	lsls	r0, r0, #4
 80014f6:	002b      	movs	r3, r5
 80014f8:	4684      	mov	ip, r0
 80014fa:	4316      	orrs	r6, r2
 80014fc:	4642      	mov	r2, r8
 80014fe:	4463      	add	r3, ip
 8001500:	407a      	eors	r2, r7
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2e0a      	cmp	r6, #10
 8001508:	dd00      	ble.n	800150c <__aeabi_dmul+0xc4>
 800150a:	e231      	b.n	8001970 <__aeabi_dmul+0x528>
 800150c:	2000      	movs	r0, #0
 800150e:	2400      	movs	r4, #0
 8001510:	2102      	movs	r1, #2
 8001512:	2e02      	cmp	r6, #2
 8001514:	dc26      	bgt.n	8001564 <__aeabi_dmul+0x11c>
 8001516:	3e01      	subs	r6, #1
 8001518:	2e01      	cmp	r6, #1
 800151a:	d852      	bhi.n	80015c2 <__aeabi_dmul+0x17a>
 800151c:	2902      	cmp	r1, #2
 800151e:	d04c      	beq.n	80015ba <__aeabi_dmul+0x172>
 8001520:	2901      	cmp	r1, #1
 8001522:	d000      	beq.n	8001526 <__aeabi_dmul+0xde>
 8001524:	e118      	b.n	8001758 <__aeabi_dmul+0x310>
 8001526:	2300      	movs	r3, #0
 8001528:	2400      	movs	r4, #0
 800152a:	2500      	movs	r5, #0
 800152c:	051b      	lsls	r3, r3, #20
 800152e:	4323      	orrs	r3, r4
 8001530:	07d2      	lsls	r2, r2, #31
 8001532:	4313      	orrs	r3, r2
 8001534:	0028      	movs	r0, r5
 8001536:	0019      	movs	r1, r3
 8001538:	b007      	add	sp, #28
 800153a:	bcf0      	pop	{r4, r5, r6, r7}
 800153c:	46bb      	mov	fp, r7
 800153e:	46b2      	mov	sl, r6
 8001540:	46a9      	mov	r9, r5
 8001542:	46a0      	mov	r8, r4
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	2203      	movs	r2, #3
 800154a:	0109      	lsls	r1, r1, #4
 800154c:	002b      	movs	r3, r5
 800154e:	468c      	mov	ip, r1
 8001550:	4316      	orrs	r6, r2
 8001552:	4642      	mov	r2, r8
 8001554:	4463      	add	r3, ip
 8001556:	407a      	eors	r2, r7
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	2e0a      	cmp	r6, #10
 800155e:	dd00      	ble.n	8001562 <__aeabi_dmul+0x11a>
 8001560:	e228      	b.n	80019b4 <__aeabi_dmul+0x56c>
 8001562:	2103      	movs	r1, #3
 8001564:	2501      	movs	r5, #1
 8001566:	40b5      	lsls	r5, r6
 8001568:	46ac      	mov	ip, r5
 800156a:	26a6      	movs	r6, #166	; 0xa6
 800156c:	4663      	mov	r3, ip
 800156e:	00f6      	lsls	r6, r6, #3
 8001570:	4035      	ands	r5, r6
 8001572:	4233      	tst	r3, r6
 8001574:	d10b      	bne.n	800158e <__aeabi_dmul+0x146>
 8001576:	2690      	movs	r6, #144	; 0x90
 8001578:	00b6      	lsls	r6, r6, #2
 800157a:	4233      	tst	r3, r6
 800157c:	d118      	bne.n	80015b0 <__aeabi_dmul+0x168>
 800157e:	3eb9      	subs	r6, #185	; 0xb9
 8001580:	3eff      	subs	r6, #255	; 0xff
 8001582:	421e      	tst	r6, r3
 8001584:	d01d      	beq.n	80015c2 <__aeabi_dmul+0x17a>
 8001586:	46a3      	mov	fp, r4
 8001588:	4682      	mov	sl, r0
 800158a:	9100      	str	r1, [sp, #0]
 800158c:	e000      	b.n	8001590 <__aeabi_dmul+0x148>
 800158e:	0017      	movs	r7, r2
 8001590:	9900      	ldr	r1, [sp, #0]
 8001592:	003a      	movs	r2, r7
 8001594:	2902      	cmp	r1, #2
 8001596:	d010      	beq.n	80015ba <__aeabi_dmul+0x172>
 8001598:	465c      	mov	r4, fp
 800159a:	4650      	mov	r0, sl
 800159c:	2903      	cmp	r1, #3
 800159e:	d1bf      	bne.n	8001520 <__aeabi_dmul+0xd8>
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	031b      	lsls	r3, r3, #12
 80015a4:	431c      	orrs	r4, r3
 80015a6:	0324      	lsls	r4, r4, #12
 80015a8:	0005      	movs	r5, r0
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <__aeabi_dmul+0x360>)
 80015ac:	0b24      	lsrs	r4, r4, #12
 80015ae:	e7bd      	b.n	800152c <__aeabi_dmul+0xe4>
 80015b0:	2480      	movs	r4, #128	; 0x80
 80015b2:	2200      	movs	r2, #0
 80015b4:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <__aeabi_dmul+0x360>)
 80015b6:	0324      	lsls	r4, r4, #12
 80015b8:	e7b8      	b.n	800152c <__aeabi_dmul+0xe4>
 80015ba:	2400      	movs	r4, #0
 80015bc:	2500      	movs	r5, #0
 80015be:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <__aeabi_dmul+0x360>)
 80015c0:	e7b4      	b.n	800152c <__aeabi_dmul+0xe4>
 80015c2:	4653      	mov	r3, sl
 80015c4:	041e      	lsls	r6, r3, #16
 80015c6:	0c36      	lsrs	r6, r6, #16
 80015c8:	0c1f      	lsrs	r7, r3, #16
 80015ca:	0033      	movs	r3, r6
 80015cc:	0c01      	lsrs	r1, r0, #16
 80015ce:	0400      	lsls	r0, r0, #16
 80015d0:	0c00      	lsrs	r0, r0, #16
 80015d2:	4343      	muls	r3, r0
 80015d4:	4698      	mov	r8, r3
 80015d6:	0003      	movs	r3, r0
 80015d8:	437b      	muls	r3, r7
 80015da:	4699      	mov	r9, r3
 80015dc:	0033      	movs	r3, r6
 80015de:	434b      	muls	r3, r1
 80015e0:	469c      	mov	ip, r3
 80015e2:	4643      	mov	r3, r8
 80015e4:	000d      	movs	r5, r1
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	469a      	mov	sl, r3
 80015ea:	437d      	muls	r5, r7
 80015ec:	44cc      	add	ip, r9
 80015ee:	44d4      	add	ip, sl
 80015f0:	9500      	str	r5, [sp, #0]
 80015f2:	45e1      	cmp	r9, ip
 80015f4:	d904      	bls.n	8001600 <__aeabi_dmul+0x1b8>
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	025b      	lsls	r3, r3, #9
 80015fa:	4699      	mov	r9, r3
 80015fc:	444d      	add	r5, r9
 80015fe:	9500      	str	r5, [sp, #0]
 8001600:	4663      	mov	r3, ip
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	001d      	movs	r5, r3
 8001606:	4663      	mov	r3, ip
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	469c      	mov	ip, r3
 800160c:	4643      	mov	r3, r8
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	0c1b      	lsrs	r3, r3, #16
 8001612:	4698      	mov	r8, r3
 8001614:	4663      	mov	r3, ip
 8001616:	4443      	add	r3, r8
 8001618:	9303      	str	r3, [sp, #12]
 800161a:	0c23      	lsrs	r3, r4, #16
 800161c:	4698      	mov	r8, r3
 800161e:	0033      	movs	r3, r6
 8001620:	0424      	lsls	r4, r4, #16
 8001622:	0c24      	lsrs	r4, r4, #16
 8001624:	4363      	muls	r3, r4
 8001626:	469c      	mov	ip, r3
 8001628:	0023      	movs	r3, r4
 800162a:	437b      	muls	r3, r7
 800162c:	4699      	mov	r9, r3
 800162e:	4643      	mov	r3, r8
 8001630:	435e      	muls	r6, r3
 8001632:	435f      	muls	r7, r3
 8001634:	444e      	add	r6, r9
 8001636:	4663      	mov	r3, ip
 8001638:	46b2      	mov	sl, r6
 800163a:	0c1e      	lsrs	r6, r3, #16
 800163c:	4456      	add	r6, sl
 800163e:	45b1      	cmp	r9, r6
 8001640:	d903      	bls.n	800164a <__aeabi_dmul+0x202>
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	025b      	lsls	r3, r3, #9
 8001646:	4699      	mov	r9, r3
 8001648:	444f      	add	r7, r9
 800164a:	0c33      	lsrs	r3, r6, #16
 800164c:	4699      	mov	r9, r3
 800164e:	003b      	movs	r3, r7
 8001650:	444b      	add	r3, r9
 8001652:	9305      	str	r3, [sp, #20]
 8001654:	4663      	mov	r3, ip
 8001656:	46ac      	mov	ip, r5
 8001658:	041f      	lsls	r7, r3, #16
 800165a:	0c3f      	lsrs	r7, r7, #16
 800165c:	0436      	lsls	r6, r6, #16
 800165e:	19f6      	adds	r6, r6, r7
 8001660:	44b4      	add	ip, r6
 8001662:	4663      	mov	r3, ip
 8001664:	9304      	str	r3, [sp, #16]
 8001666:	465b      	mov	r3, fp
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	469c      	mov	ip, r3
 800166c:	465b      	mov	r3, fp
 800166e:	041f      	lsls	r7, r3, #16
 8001670:	0c3f      	lsrs	r7, r7, #16
 8001672:	003b      	movs	r3, r7
 8001674:	4343      	muls	r3, r0
 8001676:	4699      	mov	r9, r3
 8001678:	4663      	mov	r3, ip
 800167a:	4343      	muls	r3, r0
 800167c:	469a      	mov	sl, r3
 800167e:	464b      	mov	r3, r9
 8001680:	4660      	mov	r0, ip
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	469b      	mov	fp, r3
 8001686:	4348      	muls	r0, r1
 8001688:	4379      	muls	r1, r7
 800168a:	4451      	add	r1, sl
 800168c:	4459      	add	r1, fp
 800168e:	458a      	cmp	sl, r1
 8001690:	d903      	bls.n	800169a <__aeabi_dmul+0x252>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	469a      	mov	sl, r3
 8001698:	4450      	add	r0, sl
 800169a:	0c0b      	lsrs	r3, r1, #16
 800169c:	469a      	mov	sl, r3
 800169e:	464b      	mov	r3, r9
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	4699      	mov	r9, r3
 80016a6:	003b      	movs	r3, r7
 80016a8:	4363      	muls	r3, r4
 80016aa:	0409      	lsls	r1, r1, #16
 80016ac:	4645      	mov	r5, r8
 80016ae:	4449      	add	r1, r9
 80016b0:	4699      	mov	r9, r3
 80016b2:	4663      	mov	r3, ip
 80016b4:	435c      	muls	r4, r3
 80016b6:	436b      	muls	r3, r5
 80016b8:	469c      	mov	ip, r3
 80016ba:	464b      	mov	r3, r9
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	4698      	mov	r8, r3
 80016c0:	436f      	muls	r7, r5
 80016c2:	193f      	adds	r7, r7, r4
 80016c4:	4447      	add	r7, r8
 80016c6:	4450      	add	r0, sl
 80016c8:	42bc      	cmp	r4, r7
 80016ca:	d903      	bls.n	80016d4 <__aeabi_dmul+0x28c>
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	4698      	mov	r8, r3
 80016d2:	44c4      	add	ip, r8
 80016d4:	9b04      	ldr	r3, [sp, #16]
 80016d6:	9d00      	ldr	r5, [sp, #0]
 80016d8:	4698      	mov	r8, r3
 80016da:	4445      	add	r5, r8
 80016dc:	42b5      	cmp	r5, r6
 80016de:	41b6      	sbcs	r6, r6
 80016e0:	4273      	negs	r3, r6
 80016e2:	4698      	mov	r8, r3
 80016e4:	464b      	mov	r3, r9
 80016e6:	041e      	lsls	r6, r3, #16
 80016e8:	9b05      	ldr	r3, [sp, #20]
 80016ea:	043c      	lsls	r4, r7, #16
 80016ec:	4699      	mov	r9, r3
 80016ee:	0c36      	lsrs	r6, r6, #16
 80016f0:	19a4      	adds	r4, r4, r6
 80016f2:	444c      	add	r4, r9
 80016f4:	46a1      	mov	r9, r4
 80016f6:	4683      	mov	fp, r0
 80016f8:	186e      	adds	r6, r5, r1
 80016fa:	44c1      	add	r9, r8
 80016fc:	428e      	cmp	r6, r1
 80016fe:	4189      	sbcs	r1, r1
 8001700:	44cb      	add	fp, r9
 8001702:	465d      	mov	r5, fp
 8001704:	4249      	negs	r1, r1
 8001706:	186d      	adds	r5, r5, r1
 8001708:	429c      	cmp	r4, r3
 800170a:	41a4      	sbcs	r4, r4
 800170c:	45c1      	cmp	r9, r8
 800170e:	419b      	sbcs	r3, r3
 8001710:	4583      	cmp	fp, r0
 8001712:	4180      	sbcs	r0, r0
 8001714:	428d      	cmp	r5, r1
 8001716:	4189      	sbcs	r1, r1
 8001718:	425b      	negs	r3, r3
 800171a:	4264      	negs	r4, r4
 800171c:	431c      	orrs	r4, r3
 800171e:	4240      	negs	r0, r0
 8001720:	9b03      	ldr	r3, [sp, #12]
 8001722:	4249      	negs	r1, r1
 8001724:	4301      	orrs	r1, r0
 8001726:	0270      	lsls	r0, r6, #9
 8001728:	0c3f      	lsrs	r7, r7, #16
 800172a:	4318      	orrs	r0, r3
 800172c:	19e4      	adds	r4, r4, r7
 800172e:	1e47      	subs	r7, r0, #1
 8001730:	41b8      	sbcs	r0, r7
 8001732:	1864      	adds	r4, r4, r1
 8001734:	4464      	add	r4, ip
 8001736:	0df6      	lsrs	r6, r6, #23
 8001738:	0261      	lsls	r1, r4, #9
 800173a:	4330      	orrs	r0, r6
 800173c:	0dec      	lsrs	r4, r5, #23
 800173e:	026e      	lsls	r6, r5, #9
 8001740:	430c      	orrs	r4, r1
 8001742:	4330      	orrs	r0, r6
 8001744:	01c9      	lsls	r1, r1, #7
 8001746:	d400      	bmi.n	800174a <__aeabi_dmul+0x302>
 8001748:	e0f1      	b.n	800192e <__aeabi_dmul+0x4e6>
 800174a:	2101      	movs	r1, #1
 800174c:	0843      	lsrs	r3, r0, #1
 800174e:	4001      	ands	r1, r0
 8001750:	430b      	orrs	r3, r1
 8001752:	07e0      	lsls	r0, r4, #31
 8001754:	4318      	orrs	r0, r3
 8001756:	0864      	lsrs	r4, r4, #1
 8001758:	4915      	ldr	r1, [pc, #84]	; (80017b0 <__aeabi_dmul+0x368>)
 800175a:	9b02      	ldr	r3, [sp, #8]
 800175c:	468c      	mov	ip, r1
 800175e:	4463      	add	r3, ip
 8001760:	2b00      	cmp	r3, #0
 8001762:	dc00      	bgt.n	8001766 <__aeabi_dmul+0x31e>
 8001764:	e097      	b.n	8001896 <__aeabi_dmul+0x44e>
 8001766:	0741      	lsls	r1, r0, #29
 8001768:	d009      	beq.n	800177e <__aeabi_dmul+0x336>
 800176a:	210f      	movs	r1, #15
 800176c:	4001      	ands	r1, r0
 800176e:	2904      	cmp	r1, #4
 8001770:	d005      	beq.n	800177e <__aeabi_dmul+0x336>
 8001772:	1d01      	adds	r1, r0, #4
 8001774:	4281      	cmp	r1, r0
 8001776:	4180      	sbcs	r0, r0
 8001778:	4240      	negs	r0, r0
 800177a:	1824      	adds	r4, r4, r0
 800177c:	0008      	movs	r0, r1
 800177e:	01e1      	lsls	r1, r4, #7
 8001780:	d506      	bpl.n	8001790 <__aeabi_dmul+0x348>
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	00c9      	lsls	r1, r1, #3
 8001786:	468c      	mov	ip, r1
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <__aeabi_dmul+0x36c>)
 800178a:	401c      	ands	r4, r3
 800178c:	9b02      	ldr	r3, [sp, #8]
 800178e:	4463      	add	r3, ip
 8001790:	4909      	ldr	r1, [pc, #36]	; (80017b8 <__aeabi_dmul+0x370>)
 8001792:	428b      	cmp	r3, r1
 8001794:	dd00      	ble.n	8001798 <__aeabi_dmul+0x350>
 8001796:	e710      	b.n	80015ba <__aeabi_dmul+0x172>
 8001798:	0761      	lsls	r1, r4, #29
 800179a:	08c5      	lsrs	r5, r0, #3
 800179c:	0264      	lsls	r4, r4, #9
 800179e:	055b      	lsls	r3, r3, #21
 80017a0:	430d      	orrs	r5, r1
 80017a2:	0b24      	lsrs	r4, r4, #12
 80017a4:	0d5b      	lsrs	r3, r3, #21
 80017a6:	e6c1      	b.n	800152c <__aeabi_dmul+0xe4>
 80017a8:	000007ff 	.word	0x000007ff
 80017ac:	fffffc01 	.word	0xfffffc01
 80017b0:	000003ff 	.word	0x000003ff
 80017b4:	feffffff 	.word	0xfeffffff
 80017b8:	000007fe 	.word	0x000007fe
 80017bc:	464b      	mov	r3, r9
 80017be:	4323      	orrs	r3, r4
 80017c0:	d059      	beq.n	8001876 <__aeabi_dmul+0x42e>
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x380>
 80017c6:	e0a3      	b.n	8001910 <__aeabi_dmul+0x4c8>
 80017c8:	0020      	movs	r0, r4
 80017ca:	f000 fdb1 	bl	8002330 <__clzsi2>
 80017ce:	0001      	movs	r1, r0
 80017d0:	0003      	movs	r3, r0
 80017d2:	390b      	subs	r1, #11
 80017d4:	221d      	movs	r2, #29
 80017d6:	1a52      	subs	r2, r2, r1
 80017d8:	4649      	mov	r1, r9
 80017da:	0018      	movs	r0, r3
 80017dc:	40d1      	lsrs	r1, r2
 80017de:	464a      	mov	r2, r9
 80017e0:	3808      	subs	r0, #8
 80017e2:	4082      	lsls	r2, r0
 80017e4:	4084      	lsls	r4, r0
 80017e6:	0010      	movs	r0, r2
 80017e8:	430c      	orrs	r4, r1
 80017ea:	4a74      	ldr	r2, [pc, #464]	; (80019bc <__aeabi_dmul+0x574>)
 80017ec:	1aeb      	subs	r3, r5, r3
 80017ee:	4694      	mov	ip, r2
 80017f0:	4642      	mov	r2, r8
 80017f2:	4463      	add	r3, ip
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	9b01      	ldr	r3, [sp, #4]
 80017f8:	407a      	eors	r2, r7
 80017fa:	3301      	adds	r3, #1
 80017fc:	2100      	movs	r1, #0
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2e0a      	cmp	r6, #10
 8001804:	dd00      	ble.n	8001808 <__aeabi_dmul+0x3c0>
 8001806:	e667      	b.n	80014d8 <__aeabi_dmul+0x90>
 8001808:	e683      	b.n	8001512 <__aeabi_dmul+0xca>
 800180a:	465b      	mov	r3, fp
 800180c:	4303      	orrs	r3, r0
 800180e:	469a      	mov	sl, r3
 8001810:	d02a      	beq.n	8001868 <__aeabi_dmul+0x420>
 8001812:	465b      	mov	r3, fp
 8001814:	2b00      	cmp	r3, #0
 8001816:	d06d      	beq.n	80018f4 <__aeabi_dmul+0x4ac>
 8001818:	4658      	mov	r0, fp
 800181a:	f000 fd89 	bl	8002330 <__clzsi2>
 800181e:	0001      	movs	r1, r0
 8001820:	0003      	movs	r3, r0
 8001822:	390b      	subs	r1, #11
 8001824:	221d      	movs	r2, #29
 8001826:	1a52      	subs	r2, r2, r1
 8001828:	0021      	movs	r1, r4
 800182a:	0018      	movs	r0, r3
 800182c:	465d      	mov	r5, fp
 800182e:	40d1      	lsrs	r1, r2
 8001830:	3808      	subs	r0, #8
 8001832:	4085      	lsls	r5, r0
 8001834:	000a      	movs	r2, r1
 8001836:	4084      	lsls	r4, r0
 8001838:	432a      	orrs	r2, r5
 800183a:	4693      	mov	fp, r2
 800183c:	46a2      	mov	sl, r4
 800183e:	4d5f      	ldr	r5, [pc, #380]	; (80019bc <__aeabi_dmul+0x574>)
 8001840:	2600      	movs	r6, #0
 8001842:	1aed      	subs	r5, r5, r3
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	e625      	b.n	8001496 <__aeabi_dmul+0x4e>
 800184a:	465b      	mov	r3, fp
 800184c:	4303      	orrs	r3, r0
 800184e:	469a      	mov	sl, r3
 8001850:	d105      	bne.n	800185e <__aeabi_dmul+0x416>
 8001852:	2300      	movs	r3, #0
 8001854:	469b      	mov	fp, r3
 8001856:	3302      	adds	r3, #2
 8001858:	2608      	movs	r6, #8
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	e61b      	b.n	8001496 <__aeabi_dmul+0x4e>
 800185e:	2303      	movs	r3, #3
 8001860:	4682      	mov	sl, r0
 8001862:	260c      	movs	r6, #12
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	e616      	b.n	8001496 <__aeabi_dmul+0x4e>
 8001868:	2300      	movs	r3, #0
 800186a:	469b      	mov	fp, r3
 800186c:	3301      	adds	r3, #1
 800186e:	2604      	movs	r6, #4
 8001870:	2500      	movs	r5, #0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	e60f      	b.n	8001496 <__aeabi_dmul+0x4e>
 8001876:	4642      	mov	r2, r8
 8001878:	3301      	adds	r3, #1
 800187a:	9501      	str	r5, [sp, #4]
 800187c:	431e      	orrs	r6, r3
 800187e:	9b01      	ldr	r3, [sp, #4]
 8001880:	407a      	eors	r2, r7
 8001882:	3301      	adds	r3, #1
 8001884:	2400      	movs	r4, #0
 8001886:	2000      	movs	r0, #0
 8001888:	2101      	movs	r1, #1
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2e0a      	cmp	r6, #10
 8001890:	dd00      	ble.n	8001894 <__aeabi_dmul+0x44c>
 8001892:	e621      	b.n	80014d8 <__aeabi_dmul+0x90>
 8001894:	e63d      	b.n	8001512 <__aeabi_dmul+0xca>
 8001896:	2101      	movs	r1, #1
 8001898:	1ac9      	subs	r1, r1, r3
 800189a:	2938      	cmp	r1, #56	; 0x38
 800189c:	dd00      	ble.n	80018a0 <__aeabi_dmul+0x458>
 800189e:	e642      	b.n	8001526 <__aeabi_dmul+0xde>
 80018a0:	291f      	cmp	r1, #31
 80018a2:	dd47      	ble.n	8001934 <__aeabi_dmul+0x4ec>
 80018a4:	261f      	movs	r6, #31
 80018a6:	0025      	movs	r5, r4
 80018a8:	4276      	negs	r6, r6
 80018aa:	1af3      	subs	r3, r6, r3
 80018ac:	40dd      	lsrs	r5, r3
 80018ae:	002b      	movs	r3, r5
 80018b0:	2920      	cmp	r1, #32
 80018b2:	d005      	beq.n	80018c0 <__aeabi_dmul+0x478>
 80018b4:	4942      	ldr	r1, [pc, #264]	; (80019c0 <__aeabi_dmul+0x578>)
 80018b6:	9d02      	ldr	r5, [sp, #8]
 80018b8:	468c      	mov	ip, r1
 80018ba:	4465      	add	r5, ip
 80018bc:	40ac      	lsls	r4, r5
 80018be:	4320      	orrs	r0, r4
 80018c0:	1e41      	subs	r1, r0, #1
 80018c2:	4188      	sbcs	r0, r1
 80018c4:	4318      	orrs	r0, r3
 80018c6:	2307      	movs	r3, #7
 80018c8:	001d      	movs	r5, r3
 80018ca:	2400      	movs	r4, #0
 80018cc:	4005      	ands	r5, r0
 80018ce:	4203      	tst	r3, r0
 80018d0:	d04a      	beq.n	8001968 <__aeabi_dmul+0x520>
 80018d2:	230f      	movs	r3, #15
 80018d4:	2400      	movs	r4, #0
 80018d6:	4003      	ands	r3, r0
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d042      	beq.n	8001962 <__aeabi_dmul+0x51a>
 80018dc:	1d03      	adds	r3, r0, #4
 80018de:	4283      	cmp	r3, r0
 80018e0:	4180      	sbcs	r0, r0
 80018e2:	4240      	negs	r0, r0
 80018e4:	1824      	adds	r4, r4, r0
 80018e6:	0018      	movs	r0, r3
 80018e8:	0223      	lsls	r3, r4, #8
 80018ea:	d53a      	bpl.n	8001962 <__aeabi_dmul+0x51a>
 80018ec:	2301      	movs	r3, #1
 80018ee:	2400      	movs	r4, #0
 80018f0:	2500      	movs	r5, #0
 80018f2:	e61b      	b.n	800152c <__aeabi_dmul+0xe4>
 80018f4:	f000 fd1c 	bl	8002330 <__clzsi2>
 80018f8:	0001      	movs	r1, r0
 80018fa:	0003      	movs	r3, r0
 80018fc:	3115      	adds	r1, #21
 80018fe:	3320      	adds	r3, #32
 8001900:	291c      	cmp	r1, #28
 8001902:	dd8f      	ble.n	8001824 <__aeabi_dmul+0x3dc>
 8001904:	3808      	subs	r0, #8
 8001906:	2200      	movs	r2, #0
 8001908:	4084      	lsls	r4, r0
 800190a:	4692      	mov	sl, r2
 800190c:	46a3      	mov	fp, r4
 800190e:	e796      	b.n	800183e <__aeabi_dmul+0x3f6>
 8001910:	f000 fd0e 	bl	8002330 <__clzsi2>
 8001914:	0001      	movs	r1, r0
 8001916:	0003      	movs	r3, r0
 8001918:	3115      	adds	r1, #21
 800191a:	3320      	adds	r3, #32
 800191c:	291c      	cmp	r1, #28
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dmul+0x4da>
 8001920:	e758      	b.n	80017d4 <__aeabi_dmul+0x38c>
 8001922:	0002      	movs	r2, r0
 8001924:	464c      	mov	r4, r9
 8001926:	3a08      	subs	r2, #8
 8001928:	2000      	movs	r0, #0
 800192a:	4094      	lsls	r4, r2
 800192c:	e75d      	b.n	80017ea <__aeabi_dmul+0x3a2>
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	e711      	b.n	8001758 <__aeabi_dmul+0x310>
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <__aeabi_dmul+0x57c>)
 8001936:	0026      	movs	r6, r4
 8001938:	469c      	mov	ip, r3
 800193a:	0003      	movs	r3, r0
 800193c:	9d02      	ldr	r5, [sp, #8]
 800193e:	40cb      	lsrs	r3, r1
 8001940:	4465      	add	r5, ip
 8001942:	40ae      	lsls	r6, r5
 8001944:	431e      	orrs	r6, r3
 8001946:	0003      	movs	r3, r0
 8001948:	40ab      	lsls	r3, r5
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	4183      	sbcs	r3, r0
 800194e:	0030      	movs	r0, r6
 8001950:	4318      	orrs	r0, r3
 8001952:	40cc      	lsrs	r4, r1
 8001954:	0743      	lsls	r3, r0, #29
 8001956:	d0c7      	beq.n	80018e8 <__aeabi_dmul+0x4a0>
 8001958:	230f      	movs	r3, #15
 800195a:	4003      	ands	r3, r0
 800195c:	2b04      	cmp	r3, #4
 800195e:	d1bd      	bne.n	80018dc <__aeabi_dmul+0x494>
 8001960:	e7c2      	b.n	80018e8 <__aeabi_dmul+0x4a0>
 8001962:	0765      	lsls	r5, r4, #29
 8001964:	0264      	lsls	r4, r4, #9
 8001966:	0b24      	lsrs	r4, r4, #12
 8001968:	08c0      	lsrs	r0, r0, #3
 800196a:	2300      	movs	r3, #0
 800196c:	4305      	orrs	r5, r0
 800196e:	e5dd      	b.n	800152c <__aeabi_dmul+0xe4>
 8001970:	2500      	movs	r5, #0
 8001972:	2302      	movs	r3, #2
 8001974:	2e0f      	cmp	r6, #15
 8001976:	d10c      	bne.n	8001992 <__aeabi_dmul+0x54a>
 8001978:	2480      	movs	r4, #128	; 0x80
 800197a:	465b      	mov	r3, fp
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	4223      	tst	r3, r4
 8001980:	d00e      	beq.n	80019a0 <__aeabi_dmul+0x558>
 8001982:	4221      	tst	r1, r4
 8001984:	d10c      	bne.n	80019a0 <__aeabi_dmul+0x558>
 8001986:	430c      	orrs	r4, r1
 8001988:	0324      	lsls	r4, r4, #12
 800198a:	003a      	movs	r2, r7
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <__aeabi_dmul+0x580>)
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	e5cc      	b.n	800152c <__aeabi_dmul+0xe4>
 8001992:	2e0b      	cmp	r6, #11
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x550>
 8001996:	e5a2      	b.n	80014de <__aeabi_dmul+0x96>
 8001998:	468b      	mov	fp, r1
 800199a:	46aa      	mov	sl, r5
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	e5f7      	b.n	8001590 <__aeabi_dmul+0x148>
 80019a0:	2480      	movs	r4, #128	; 0x80
 80019a2:	465b      	mov	r3, fp
 80019a4:	0324      	lsls	r4, r4, #12
 80019a6:	431c      	orrs	r4, r3
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	4642      	mov	r2, r8
 80019ac:	4655      	mov	r5, sl
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <__aeabi_dmul+0x580>)
 80019b0:	0b24      	lsrs	r4, r4, #12
 80019b2:	e5bb      	b.n	800152c <__aeabi_dmul+0xe4>
 80019b4:	464d      	mov	r5, r9
 80019b6:	0021      	movs	r1, r4
 80019b8:	2303      	movs	r3, #3
 80019ba:	e7db      	b.n	8001974 <__aeabi_dmul+0x52c>
 80019bc:	fffffc0d 	.word	0xfffffc0d
 80019c0:	0000043e 	.word	0x0000043e
 80019c4:	0000041e 	.word	0x0000041e
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__aeabi_dsub>:
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	4657      	mov	r7, sl
 80019d0:	464e      	mov	r6, r9
 80019d2:	4645      	mov	r5, r8
 80019d4:	46de      	mov	lr, fp
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	000d      	movs	r5, r1
 80019da:	0004      	movs	r4, r0
 80019dc:	0019      	movs	r1, r3
 80019de:	0010      	movs	r0, r2
 80019e0:	032b      	lsls	r3, r5, #12
 80019e2:	0a5b      	lsrs	r3, r3, #9
 80019e4:	0f62      	lsrs	r2, r4, #29
 80019e6:	431a      	orrs	r2, r3
 80019e8:	00e3      	lsls	r3, r4, #3
 80019ea:	030c      	lsls	r4, r1, #12
 80019ec:	0a64      	lsrs	r4, r4, #9
 80019ee:	0f47      	lsrs	r7, r0, #29
 80019f0:	4327      	orrs	r7, r4
 80019f2:	4cd0      	ldr	r4, [pc, #832]	; (8001d34 <__aeabi_dsub+0x368>)
 80019f4:	006e      	lsls	r6, r5, #1
 80019f6:	4691      	mov	r9, r2
 80019f8:	b083      	sub	sp, #12
 80019fa:	004a      	lsls	r2, r1, #1
 80019fc:	00c0      	lsls	r0, r0, #3
 80019fe:	4698      	mov	r8, r3
 8001a00:	46a2      	mov	sl, r4
 8001a02:	0d76      	lsrs	r6, r6, #21
 8001a04:	0fed      	lsrs	r5, r5, #31
 8001a06:	0d52      	lsrs	r2, r2, #21
 8001a08:	0fc9      	lsrs	r1, r1, #31
 8001a0a:	9001      	str	r0, [sp, #4]
 8001a0c:	42a2      	cmp	r2, r4
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x46>
 8001a10:	e0b9      	b.n	8001b86 <__aeabi_dsub+0x1ba>
 8001a12:	2401      	movs	r4, #1
 8001a14:	4061      	eors	r1, r4
 8001a16:	468b      	mov	fp, r1
 8001a18:	428d      	cmp	r5, r1
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x52>
 8001a1c:	e08d      	b.n	8001b3a <__aeabi_dsub+0x16e>
 8001a1e:	1ab4      	subs	r4, r6, r2
 8001a20:	46a4      	mov	ip, r4
 8001a22:	2c00      	cmp	r4, #0
 8001a24:	dc00      	bgt.n	8001a28 <__aeabi_dsub+0x5c>
 8001a26:	e0b7      	b.n	8001b98 <__aeabi_dsub+0x1cc>
 8001a28:	2a00      	cmp	r2, #0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x62>
 8001a2c:	e0cb      	b.n	8001bc6 <__aeabi_dsub+0x1fa>
 8001a2e:	4ac1      	ldr	r2, [pc, #772]	; (8001d34 <__aeabi_dsub+0x368>)
 8001a30:	4296      	cmp	r6, r2
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dsub+0x6a>
 8001a34:	e186      	b.n	8001d44 <__aeabi_dsub+0x378>
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	0412      	lsls	r2, r2, #16
 8001a3a:	4317      	orrs	r7, r2
 8001a3c:	4662      	mov	r2, ip
 8001a3e:	2a38      	cmp	r2, #56	; 0x38
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dsub+0x78>
 8001a42:	e1a4      	b.n	8001d8e <__aeabi_dsub+0x3c2>
 8001a44:	2a1f      	cmp	r2, #31
 8001a46:	dd00      	ble.n	8001a4a <__aeabi_dsub+0x7e>
 8001a48:	e21d      	b.n	8001e86 <__aeabi_dsub+0x4ba>
 8001a4a:	4661      	mov	r1, ip
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	003c      	movs	r4, r7
 8001a50:	1a52      	subs	r2, r2, r1
 8001a52:	0001      	movs	r1, r0
 8001a54:	4090      	lsls	r0, r2
 8001a56:	4094      	lsls	r4, r2
 8001a58:	1e42      	subs	r2, r0, #1
 8001a5a:	4190      	sbcs	r0, r2
 8001a5c:	4662      	mov	r2, ip
 8001a5e:	46a0      	mov	r8, r4
 8001a60:	4664      	mov	r4, ip
 8001a62:	40d7      	lsrs	r7, r2
 8001a64:	464a      	mov	r2, r9
 8001a66:	40e1      	lsrs	r1, r4
 8001a68:	4644      	mov	r4, r8
 8001a6a:	1bd2      	subs	r2, r2, r7
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	4304      	orrs	r4, r0
 8001a72:	1b1c      	subs	r4, r3, r4
 8001a74:	42a3      	cmp	r3, r4
 8001a76:	4192      	sbcs	r2, r2
 8001a78:	464b      	mov	r3, r9
 8001a7a:	4252      	negs	r2, r2
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	469a      	mov	sl, r3
 8001a80:	4653      	mov	r3, sl
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dsub+0xbc>
 8001a86:	e12b      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001a88:	4653      	mov	r3, sl
 8001a8a:	025a      	lsls	r2, r3, #9
 8001a8c:	0a53      	lsrs	r3, r2, #9
 8001a8e:	469a      	mov	sl, r3
 8001a90:	4653      	mov	r3, sl
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0xcc>
 8001a96:	e166      	b.n	8001d66 <__aeabi_dsub+0x39a>
 8001a98:	4650      	mov	r0, sl
 8001a9a:	f000 fc49 	bl	8002330 <__clzsi2>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	3b08      	subs	r3, #8
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	0020      	movs	r0, r4
 8001aa6:	1ad2      	subs	r2, r2, r3
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	40d0      	lsrs	r0, r2
 8001aac:	4099      	lsls	r1, r3
 8001aae:	0002      	movs	r2, r0
 8001ab0:	409c      	lsls	r4, r3
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	429e      	cmp	r6, r3
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dsub+0xee>
 8001ab8:	e164      	b.n	8001d84 <__aeabi_dsub+0x3b8>
 8001aba:	1b9b      	subs	r3, r3, r6
 8001abc:	1c59      	adds	r1, r3, #1
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dsub+0xf8>
 8001ac2:	e0fe      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	0026      	movs	r6, r4
 8001aca:	1a5b      	subs	r3, r3, r1
 8001acc:	409c      	lsls	r4, r3
 8001ace:	4098      	lsls	r0, r3
 8001ad0:	40ce      	lsrs	r6, r1
 8001ad2:	40ca      	lsrs	r2, r1
 8001ad4:	1e63      	subs	r3, r4, #1
 8001ad6:	419c      	sbcs	r4, r3
 8001ad8:	4330      	orrs	r0, r6
 8001ada:	4692      	mov	sl, r2
 8001adc:	2600      	movs	r6, #0
 8001ade:	4304      	orrs	r4, r0
 8001ae0:	0763      	lsls	r3, r4, #29
 8001ae2:	d009      	beq.n	8001af8 <__aeabi_dsub+0x12c>
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	4023      	ands	r3, r4
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d005      	beq.n	8001af8 <__aeabi_dsub+0x12c>
 8001aec:	1d23      	adds	r3, r4, #4
 8001aee:	42a3      	cmp	r3, r4
 8001af0:	41a4      	sbcs	r4, r4
 8001af2:	4264      	negs	r4, r4
 8001af4:	44a2      	add	sl, r4
 8001af6:	001c      	movs	r4, r3
 8001af8:	4653      	mov	r3, sl
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	d400      	bmi.n	8001b00 <__aeabi_dsub+0x134>
 8001afe:	e0f2      	b.n	8001ce6 <__aeabi_dsub+0x31a>
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <__aeabi_dsub+0x368>)
 8001b02:	3601      	adds	r6, #1
 8001b04:	429e      	cmp	r6, r3
 8001b06:	d100      	bne.n	8001b0a <__aeabi_dsub+0x13e>
 8001b08:	e10f      	b.n	8001d2a <__aeabi_dsub+0x35e>
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	498a      	ldr	r1, [pc, #552]	; (8001d38 <__aeabi_dsub+0x36c>)
 8001b0e:	08e4      	lsrs	r4, r4, #3
 8001b10:	400b      	ands	r3, r1
 8001b12:	0019      	movs	r1, r3
 8001b14:	075b      	lsls	r3, r3, #29
 8001b16:	4323      	orrs	r3, r4
 8001b18:	0572      	lsls	r2, r6, #21
 8001b1a:	024c      	lsls	r4, r1, #9
 8001b1c:	0b24      	lsrs	r4, r4, #12
 8001b1e:	0d52      	lsrs	r2, r2, #21
 8001b20:	0512      	lsls	r2, r2, #20
 8001b22:	4322      	orrs	r2, r4
 8001b24:	07ed      	lsls	r5, r5, #31
 8001b26:	432a      	orrs	r2, r5
 8001b28:	0018      	movs	r0, r3
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	b003      	add	sp, #12
 8001b2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b30:	46bb      	mov	fp, r7
 8001b32:	46b2      	mov	sl, r6
 8001b34:	46a9      	mov	r9, r5
 8001b36:	46a0      	mov	r8, r4
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3a:	1ab4      	subs	r4, r6, r2
 8001b3c:	46a4      	mov	ip, r4
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	dd59      	ble.n	8001bf6 <__aeabi_dsub+0x22a>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d100      	bne.n	8001b48 <__aeabi_dsub+0x17c>
 8001b46:	e0b0      	b.n	8001caa <__aeabi_dsub+0x2de>
 8001b48:	4556      	cmp	r6, sl
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x182>
 8001b4c:	e0fa      	b.n	8001d44 <__aeabi_dsub+0x378>
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	0412      	lsls	r2, r2, #16
 8001b52:	4317      	orrs	r7, r2
 8001b54:	4662      	mov	r2, ip
 8001b56:	2a38      	cmp	r2, #56	; 0x38
 8001b58:	dd00      	ble.n	8001b5c <__aeabi_dsub+0x190>
 8001b5a:	e0d4      	b.n	8001d06 <__aeabi_dsub+0x33a>
 8001b5c:	2a1f      	cmp	r2, #31
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_dsub+0x196>
 8001b60:	e1c0      	b.n	8001ee4 <__aeabi_dsub+0x518>
 8001b62:	0039      	movs	r1, r7
 8001b64:	3a20      	subs	r2, #32
 8001b66:	40d1      	lsrs	r1, r2
 8001b68:	4662      	mov	r2, ip
 8001b6a:	2a20      	cmp	r2, #32
 8001b6c:	d006      	beq.n	8001b7c <__aeabi_dsub+0x1b0>
 8001b6e:	4664      	mov	r4, ip
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	1b12      	subs	r2, r2, r4
 8001b74:	003c      	movs	r4, r7
 8001b76:	4094      	lsls	r4, r2
 8001b78:	4304      	orrs	r4, r0
 8001b7a:	9401      	str	r4, [sp, #4]
 8001b7c:	9c01      	ldr	r4, [sp, #4]
 8001b7e:	1e62      	subs	r2, r4, #1
 8001b80:	4194      	sbcs	r4, r2
 8001b82:	430c      	orrs	r4, r1
 8001b84:	e0c3      	b.n	8001d0e <__aeabi_dsub+0x342>
 8001b86:	003c      	movs	r4, r7
 8001b88:	4304      	orrs	r4, r0
 8001b8a:	d02b      	beq.n	8001be4 <__aeabi_dsub+0x218>
 8001b8c:	468b      	mov	fp, r1
 8001b8e:	428d      	cmp	r5, r1
 8001b90:	d02e      	beq.n	8001bf0 <__aeabi_dsub+0x224>
 8001b92:	4c6a      	ldr	r4, [pc, #424]	; (8001d3c <__aeabi_dsub+0x370>)
 8001b94:	46a4      	mov	ip, r4
 8001b96:	44b4      	add	ip, r6
 8001b98:	4664      	mov	r4, ip
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	d05f      	beq.n	8001c5e <__aeabi_dsub+0x292>
 8001b9e:	1b94      	subs	r4, r2, r6
 8001ba0:	46a4      	mov	ip, r4
 8001ba2:	2e00      	cmp	r6, #0
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_dsub+0x1dc>
 8001ba6:	e120      	b.n	8001dea <__aeabi_dsub+0x41e>
 8001ba8:	464c      	mov	r4, r9
 8001baa:	431c      	orrs	r4, r3
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x1e4>
 8001bae:	e1c7      	b.n	8001f40 <__aeabi_dsub+0x574>
 8001bb0:	4661      	mov	r1, ip
 8001bb2:	1e4c      	subs	r4, r1, #1
 8001bb4:	2901      	cmp	r1, #1
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dsub+0x1ee>
 8001bb8:	e223      	b.n	8002002 <__aeabi_dsub+0x636>
 8001bba:	4d5e      	ldr	r5, [pc, #376]	; (8001d34 <__aeabi_dsub+0x368>)
 8001bbc:	45ac      	cmp	ip, r5
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x1f6>
 8001bc0:	e1d8      	b.n	8001f74 <__aeabi_dsub+0x5a8>
 8001bc2:	46a4      	mov	ip, r4
 8001bc4:	e11a      	b.n	8001dfc <__aeabi_dsub+0x430>
 8001bc6:	003a      	movs	r2, r7
 8001bc8:	4302      	orrs	r2, r0
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x202>
 8001bcc:	e0e4      	b.n	8001d98 <__aeabi_dsub+0x3cc>
 8001bce:	0022      	movs	r2, r4
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	2c01      	cmp	r4, #1
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x20c>
 8001bd6:	e1c3      	b.n	8001f60 <__aeabi_dsub+0x594>
 8001bd8:	4956      	ldr	r1, [pc, #344]	; (8001d34 <__aeabi_dsub+0x368>)
 8001bda:	428c      	cmp	r4, r1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x214>
 8001bde:	e0b1      	b.n	8001d44 <__aeabi_dsub+0x378>
 8001be0:	4694      	mov	ip, r2
 8001be2:	e72b      	b.n	8001a3c <__aeabi_dsub+0x70>
 8001be4:	2401      	movs	r4, #1
 8001be6:	4061      	eors	r1, r4
 8001be8:	468b      	mov	fp, r1
 8001bea:	428d      	cmp	r5, r1
 8001bec:	d000      	beq.n	8001bf0 <__aeabi_dsub+0x224>
 8001bee:	e716      	b.n	8001a1e <__aeabi_dsub+0x52>
 8001bf0:	4952      	ldr	r1, [pc, #328]	; (8001d3c <__aeabi_dsub+0x370>)
 8001bf2:	468c      	mov	ip, r1
 8001bf4:	44b4      	add	ip, r6
 8001bf6:	4664      	mov	r4, ip
 8001bf8:	2c00      	cmp	r4, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x232>
 8001bfc:	e0d3      	b.n	8001da6 <__aeabi_dsub+0x3da>
 8001bfe:	1b91      	subs	r1, r2, r6
 8001c00:	468c      	mov	ip, r1
 8001c02:	2e00      	cmp	r6, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x23c>
 8001c06:	e15e      	b.n	8001ec6 <__aeabi_dsub+0x4fa>
 8001c08:	494a      	ldr	r1, [pc, #296]	; (8001d34 <__aeabi_dsub+0x368>)
 8001c0a:	428a      	cmp	r2, r1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x244>
 8001c0e:	e1be      	b.n	8001f8e <__aeabi_dsub+0x5c2>
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	464c      	mov	r4, r9
 8001c14:	0409      	lsls	r1, r1, #16
 8001c16:	430c      	orrs	r4, r1
 8001c18:	46a1      	mov	r9, r4
 8001c1a:	4661      	mov	r1, ip
 8001c1c:	2938      	cmp	r1, #56	; 0x38
 8001c1e:	dd00      	ble.n	8001c22 <__aeabi_dsub+0x256>
 8001c20:	e1ba      	b.n	8001f98 <__aeabi_dsub+0x5cc>
 8001c22:	291f      	cmp	r1, #31
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dsub+0x25c>
 8001c26:	e227      	b.n	8002078 <__aeabi_dsub+0x6ac>
 8001c28:	2420      	movs	r4, #32
 8001c2a:	1a64      	subs	r4, r4, r1
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	40a1      	lsls	r1, r4
 8001c30:	001e      	movs	r6, r3
 8001c32:	4688      	mov	r8, r1
 8001c34:	4661      	mov	r1, ip
 8001c36:	40a3      	lsls	r3, r4
 8001c38:	40ce      	lsrs	r6, r1
 8001c3a:	4641      	mov	r1, r8
 8001c3c:	1e5c      	subs	r4, r3, #1
 8001c3e:	41a3      	sbcs	r3, r4
 8001c40:	4331      	orrs	r1, r6
 8001c42:	4319      	orrs	r1, r3
 8001c44:	000c      	movs	r4, r1
 8001c46:	4663      	mov	r3, ip
 8001c48:	4649      	mov	r1, r9
 8001c4a:	40d9      	lsrs	r1, r3
 8001c4c:	187f      	adds	r7, r7, r1
 8001c4e:	1824      	adds	r4, r4, r0
 8001c50:	4284      	cmp	r4, r0
 8001c52:	419b      	sbcs	r3, r3
 8001c54:	425b      	negs	r3, r3
 8001c56:	469a      	mov	sl, r3
 8001c58:	0016      	movs	r6, r2
 8001c5a:	44ba      	add	sl, r7
 8001c5c:	e05d      	b.n	8001d1a <__aeabi_dsub+0x34e>
 8001c5e:	4c38      	ldr	r4, [pc, #224]	; (8001d40 <__aeabi_dsub+0x374>)
 8001c60:	1c72      	adds	r2, r6, #1
 8001c62:	4222      	tst	r2, r4
 8001c64:	d000      	beq.n	8001c68 <__aeabi_dsub+0x29c>
 8001c66:	e0df      	b.n	8001e28 <__aeabi_dsub+0x45c>
 8001c68:	464a      	mov	r2, r9
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2e00      	cmp	r6, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2a6>
 8001c70:	e15c      	b.n	8001f2c <__aeabi_dsub+0x560>
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2ac>
 8001c76:	e1cf      	b.n	8002018 <__aeabi_dsub+0x64c>
 8001c78:	003a      	movs	r2, r7
 8001c7a:	4302      	orrs	r2, r0
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x2b4>
 8001c7e:	e17f      	b.n	8001f80 <__aeabi_dsub+0x5b4>
 8001c80:	1a1c      	subs	r4, r3, r0
 8001c82:	464a      	mov	r2, r9
 8001c84:	42a3      	cmp	r3, r4
 8001c86:	4189      	sbcs	r1, r1
 8001c88:	1bd2      	subs	r2, r2, r7
 8001c8a:	4249      	negs	r1, r1
 8001c8c:	1a52      	subs	r2, r2, r1
 8001c8e:	4692      	mov	sl, r2
 8001c90:	0212      	lsls	r2, r2, #8
 8001c92:	d400      	bmi.n	8001c96 <__aeabi_dsub+0x2ca>
 8001c94:	e20a      	b.n	80020ac <__aeabi_dsub+0x6e0>
 8001c96:	1ac4      	subs	r4, r0, r3
 8001c98:	42a0      	cmp	r0, r4
 8001c9a:	4180      	sbcs	r0, r0
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4240      	negs	r0, r0
 8001ca0:	1aff      	subs	r7, r7, r3
 8001ca2:	1a3b      	subs	r3, r7, r0
 8001ca4:	469a      	mov	sl, r3
 8001ca6:	465d      	mov	r5, fp
 8001ca8:	e71a      	b.n	8001ae0 <__aeabi_dsub+0x114>
 8001caa:	003a      	movs	r2, r7
 8001cac:	4302      	orrs	r2, r0
 8001cae:	d073      	beq.n	8001d98 <__aeabi_dsub+0x3cc>
 8001cb0:	0022      	movs	r2, r4
 8001cb2:	3a01      	subs	r2, #1
 8001cb4:	2c01      	cmp	r4, #1
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x2ee>
 8001cb8:	e0cb      	b.n	8001e52 <__aeabi_dsub+0x486>
 8001cba:	4554      	cmp	r4, sl
 8001cbc:	d042      	beq.n	8001d44 <__aeabi_dsub+0x378>
 8001cbe:	4694      	mov	ip, r2
 8001cc0:	e748      	b.n	8001b54 <__aeabi_dsub+0x188>
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	3b1f      	subs	r3, #31
 8001cc6:	40d8      	lsrs	r0, r3
 8001cc8:	2920      	cmp	r1, #32
 8001cca:	d003      	beq.n	8001cd4 <__aeabi_dsub+0x308>
 8001ccc:	2340      	movs	r3, #64	; 0x40
 8001cce:	1a5b      	subs	r3, r3, r1
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	4314      	orrs	r4, r2
 8001cd4:	1e63      	subs	r3, r4, #1
 8001cd6:	419c      	sbcs	r4, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2600      	movs	r6, #0
 8001cdc:	469a      	mov	sl, r3
 8001cde:	4304      	orrs	r4, r0
 8001ce0:	0763      	lsls	r3, r4, #29
 8001ce2:	d000      	beq.n	8001ce6 <__aeabi_dsub+0x31a>
 8001ce4:	e6fe      	b.n	8001ae4 <__aeabi_dsub+0x118>
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	08e3      	lsrs	r3, r4, #3
 8001cea:	0752      	lsls	r2, r2, #29
 8001cec:	4313      	orrs	r3, r2
 8001cee:	4652      	mov	r2, sl
 8001cf0:	46b4      	mov	ip, r6
 8001cf2:	08d2      	lsrs	r2, r2, #3
 8001cf4:	490f      	ldr	r1, [pc, #60]	; (8001d34 <__aeabi_dsub+0x368>)
 8001cf6:	458c      	cmp	ip, r1
 8001cf8:	d02a      	beq.n	8001d50 <__aeabi_dsub+0x384>
 8001cfa:	0312      	lsls	r2, r2, #12
 8001cfc:	0b14      	lsrs	r4, r2, #12
 8001cfe:	4662      	mov	r2, ip
 8001d00:	0552      	lsls	r2, r2, #21
 8001d02:	0d52      	lsrs	r2, r2, #21
 8001d04:	e70c      	b.n	8001b20 <__aeabi_dsub+0x154>
 8001d06:	003c      	movs	r4, r7
 8001d08:	4304      	orrs	r4, r0
 8001d0a:	1e62      	subs	r2, r4, #1
 8001d0c:	4194      	sbcs	r4, r2
 8001d0e:	18e4      	adds	r4, r4, r3
 8001d10:	429c      	cmp	r4, r3
 8001d12:	4192      	sbcs	r2, r2
 8001d14:	4252      	negs	r2, r2
 8001d16:	444a      	add	r2, r9
 8001d18:	4692      	mov	sl, r2
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	d5df      	bpl.n	8001ce0 <__aeabi_dsub+0x314>
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__aeabi_dsub+0x368>)
 8001d22:	3601      	adds	r6, #1
 8001d24:	429e      	cmp	r6, r3
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x35e>
 8001d28:	e0a0      	b.n	8001e6c <__aeabi_dsub+0x4a0>
 8001d2a:	0032      	movs	r2, r6
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e6f6      	b.n	8001b20 <__aeabi_dsub+0x154>
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	000007ff 	.word	0x000007ff
 8001d38:	ff7fffff 	.word	0xff7fffff
 8001d3c:	fffff801 	.word	0xfffff801
 8001d40:	000007fe 	.word	0x000007fe
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	464a      	mov	r2, r9
 8001d48:	0752      	lsls	r2, r2, #29
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	08d2      	lsrs	r2, r2, #3
 8001d50:	0019      	movs	r1, r3
 8001d52:	4311      	orrs	r1, r2
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x38c>
 8001d56:	e1b5      	b.n	80020c4 <__aeabi_dsub+0x6f8>
 8001d58:	2480      	movs	r4, #128	; 0x80
 8001d5a:	0324      	lsls	r4, r4, #12
 8001d5c:	4314      	orrs	r4, r2
 8001d5e:	0324      	lsls	r4, r4, #12
 8001d60:	4ad5      	ldr	r2, [pc, #852]	; (80020b8 <__aeabi_dsub+0x6ec>)
 8001d62:	0b24      	lsrs	r4, r4, #12
 8001d64:	e6dc      	b.n	8001b20 <__aeabi_dsub+0x154>
 8001d66:	0020      	movs	r0, r4
 8001d68:	f000 fae2 	bl	8002330 <__clzsi2>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	3318      	adds	r3, #24
 8001d70:	2b1f      	cmp	r3, #31
 8001d72:	dc00      	bgt.n	8001d76 <__aeabi_dsub+0x3aa>
 8001d74:	e695      	b.n	8001aa2 <__aeabi_dsub+0xd6>
 8001d76:	0022      	movs	r2, r4
 8001d78:	3808      	subs	r0, #8
 8001d7a:	4082      	lsls	r2, r0
 8001d7c:	2400      	movs	r4, #0
 8001d7e:	429e      	cmp	r6, r3
 8001d80:	dc00      	bgt.n	8001d84 <__aeabi_dsub+0x3b8>
 8001d82:	e69a      	b.n	8001aba <__aeabi_dsub+0xee>
 8001d84:	1af6      	subs	r6, r6, r3
 8001d86:	4bcd      	ldr	r3, [pc, #820]	; (80020bc <__aeabi_dsub+0x6f0>)
 8001d88:	401a      	ands	r2, r3
 8001d8a:	4692      	mov	sl, r2
 8001d8c:	e6a8      	b.n	8001ae0 <__aeabi_dsub+0x114>
 8001d8e:	003c      	movs	r4, r7
 8001d90:	4304      	orrs	r4, r0
 8001d92:	1e62      	subs	r2, r4, #1
 8001d94:	4194      	sbcs	r4, r2
 8001d96:	e66c      	b.n	8001a72 <__aeabi_dsub+0xa6>
 8001d98:	464a      	mov	r2, r9
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	0752      	lsls	r2, r2, #29
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	464a      	mov	r2, r9
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	e7a6      	b.n	8001cf4 <__aeabi_dsub+0x328>
 8001da6:	4cc6      	ldr	r4, [pc, #792]	; (80020c0 <__aeabi_dsub+0x6f4>)
 8001da8:	1c72      	adds	r2, r6, #1
 8001daa:	4222      	tst	r2, r4
 8001dac:	d000      	beq.n	8001db0 <__aeabi_dsub+0x3e4>
 8001dae:	e0ac      	b.n	8001f0a <__aeabi_dsub+0x53e>
 8001db0:	464a      	mov	r2, r9
 8001db2:	431a      	orrs	r2, r3
 8001db4:	2e00      	cmp	r6, #0
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x3ee>
 8001db8:	e105      	b.n	8001fc6 <__aeabi_dsub+0x5fa>
 8001dba:	2a00      	cmp	r2, #0
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x3f4>
 8001dbe:	e156      	b.n	800206e <__aeabi_dsub+0x6a2>
 8001dc0:	003a      	movs	r2, r7
 8001dc2:	4302      	orrs	r2, r0
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x3fc>
 8001dc6:	e0db      	b.n	8001f80 <__aeabi_dsub+0x5b4>
 8001dc8:	181c      	adds	r4, r3, r0
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	444f      	add	r7, r9
 8001dd0:	46ba      	mov	sl, r7
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	449a      	add	sl, r3
 8001dd6:	4653      	mov	r3, sl
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	d400      	bmi.n	8001dde <__aeabi_dsub+0x412>
 8001ddc:	e780      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001dde:	4652      	mov	r2, sl
 8001de0:	4bb6      	ldr	r3, [pc, #728]	; (80020bc <__aeabi_dsub+0x6f0>)
 8001de2:	2601      	movs	r6, #1
 8001de4:	401a      	ands	r2, r3
 8001de6:	4692      	mov	sl, r2
 8001de8:	e77a      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001dea:	4cb3      	ldr	r4, [pc, #716]	; (80020b8 <__aeabi_dsub+0x6ec>)
 8001dec:	42a2      	cmp	r2, r4
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x426>
 8001df0:	e0c0      	b.n	8001f74 <__aeabi_dsub+0x5a8>
 8001df2:	2480      	movs	r4, #128	; 0x80
 8001df4:	464d      	mov	r5, r9
 8001df6:	0424      	lsls	r4, r4, #16
 8001df8:	4325      	orrs	r5, r4
 8001dfa:	46a9      	mov	r9, r5
 8001dfc:	4664      	mov	r4, ip
 8001dfe:	2c38      	cmp	r4, #56	; 0x38
 8001e00:	dc53      	bgt.n	8001eaa <__aeabi_dsub+0x4de>
 8001e02:	4661      	mov	r1, ip
 8001e04:	2c1f      	cmp	r4, #31
 8001e06:	dd00      	ble.n	8001e0a <__aeabi_dsub+0x43e>
 8001e08:	e0cd      	b.n	8001fa6 <__aeabi_dsub+0x5da>
 8001e0a:	2520      	movs	r5, #32
 8001e0c:	001e      	movs	r6, r3
 8001e0e:	1b2d      	subs	r5, r5, r4
 8001e10:	464c      	mov	r4, r9
 8001e12:	40ab      	lsls	r3, r5
 8001e14:	40ac      	lsls	r4, r5
 8001e16:	40ce      	lsrs	r6, r1
 8001e18:	1e5d      	subs	r5, r3, #1
 8001e1a:	41ab      	sbcs	r3, r5
 8001e1c:	4334      	orrs	r4, r6
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	464c      	mov	r4, r9
 8001e22:	40cc      	lsrs	r4, r1
 8001e24:	1b3f      	subs	r7, r7, r4
 8001e26:	e045      	b.n	8001eb4 <__aeabi_dsub+0x4e8>
 8001e28:	464a      	mov	r2, r9
 8001e2a:	1a1c      	subs	r4, r3, r0
 8001e2c:	1bd1      	subs	r1, r2, r7
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	4192      	sbcs	r2, r2
 8001e32:	4252      	negs	r2, r2
 8001e34:	4692      	mov	sl, r2
 8001e36:	000a      	movs	r2, r1
 8001e38:	4651      	mov	r1, sl
 8001e3a:	1a52      	subs	r2, r2, r1
 8001e3c:	4692      	mov	sl, r2
 8001e3e:	0212      	lsls	r2, r2, #8
 8001e40:	d500      	bpl.n	8001e44 <__aeabi_dsub+0x478>
 8001e42:	e083      	b.n	8001f4c <__aeabi_dsub+0x580>
 8001e44:	4653      	mov	r3, sl
 8001e46:	4323      	orrs	r3, r4
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x480>
 8001e4a:	e621      	b.n	8001a90 <__aeabi_dsub+0xc4>
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2500      	movs	r5, #0
 8001e50:	e753      	b.n	8001cfa <__aeabi_dsub+0x32e>
 8001e52:	181c      	adds	r4, r3, r0
 8001e54:	429c      	cmp	r4, r3
 8001e56:	419b      	sbcs	r3, r3
 8001e58:	444f      	add	r7, r9
 8001e5a:	46ba      	mov	sl, r7
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	449a      	add	sl, r3
 8001e60:	4653      	mov	r3, sl
 8001e62:	2601      	movs	r6, #1
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	d400      	bmi.n	8001e6a <__aeabi_dsub+0x49e>
 8001e68:	e73a      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001e6a:	2602      	movs	r6, #2
 8001e6c:	4652      	mov	r2, sl
 8001e6e:	4b93      	ldr	r3, [pc, #588]	; (80020bc <__aeabi_dsub+0x6f0>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	401a      	ands	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	4021      	ands	r1, r4
 8001e78:	0862      	lsrs	r2, r4, #1
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	07dc      	lsls	r4, r3, #31
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	469a      	mov	sl, r3
 8001e82:	4314      	orrs	r4, r2
 8001e84:	e62c      	b.n	8001ae0 <__aeabi_dsub+0x114>
 8001e86:	0039      	movs	r1, r7
 8001e88:	3a20      	subs	r2, #32
 8001e8a:	40d1      	lsrs	r1, r2
 8001e8c:	4662      	mov	r2, ip
 8001e8e:	2a20      	cmp	r2, #32
 8001e90:	d006      	beq.n	8001ea0 <__aeabi_dsub+0x4d4>
 8001e92:	4664      	mov	r4, ip
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	1b12      	subs	r2, r2, r4
 8001e98:	003c      	movs	r4, r7
 8001e9a:	4094      	lsls	r4, r2
 8001e9c:	4304      	orrs	r4, r0
 8001e9e:	9401      	str	r4, [sp, #4]
 8001ea0:	9c01      	ldr	r4, [sp, #4]
 8001ea2:	1e62      	subs	r2, r4, #1
 8001ea4:	4194      	sbcs	r4, r2
 8001ea6:	430c      	orrs	r4, r1
 8001ea8:	e5e3      	b.n	8001a72 <__aeabi_dsub+0xa6>
 8001eaa:	4649      	mov	r1, r9
 8001eac:	4319      	orrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	1e5c      	subs	r4, r3, #1
 8001eb2:	41a3      	sbcs	r3, r4
 8001eb4:	1ac4      	subs	r4, r0, r3
 8001eb6:	42a0      	cmp	r0, r4
 8001eb8:	419b      	sbcs	r3, r3
 8001eba:	425b      	negs	r3, r3
 8001ebc:	1afb      	subs	r3, r7, r3
 8001ebe:	469a      	mov	sl, r3
 8001ec0:	465d      	mov	r5, fp
 8001ec2:	0016      	movs	r6, r2
 8001ec4:	e5dc      	b.n	8001a80 <__aeabi_dsub+0xb4>
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	4319      	orrs	r1, r3
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x502>
 8001ecc:	e0ae      	b.n	800202c <__aeabi_dsub+0x660>
 8001ece:	4661      	mov	r1, ip
 8001ed0:	4664      	mov	r4, ip
 8001ed2:	3901      	subs	r1, #1
 8001ed4:	2c01      	cmp	r4, #1
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x50e>
 8001ed8:	e0e0      	b.n	800209c <__aeabi_dsub+0x6d0>
 8001eda:	4c77      	ldr	r4, [pc, #476]	; (80020b8 <__aeabi_dsub+0x6ec>)
 8001edc:	45a4      	cmp	ip, r4
 8001ede:	d056      	beq.n	8001f8e <__aeabi_dsub+0x5c2>
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	e69a      	b.n	8001c1a <__aeabi_dsub+0x24e>
 8001ee4:	4661      	mov	r1, ip
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	003c      	movs	r4, r7
 8001eea:	1a52      	subs	r2, r2, r1
 8001eec:	4094      	lsls	r4, r2
 8001eee:	0001      	movs	r1, r0
 8001ef0:	4090      	lsls	r0, r2
 8001ef2:	46a0      	mov	r8, r4
 8001ef4:	4664      	mov	r4, ip
 8001ef6:	1e42      	subs	r2, r0, #1
 8001ef8:	4190      	sbcs	r0, r2
 8001efa:	4662      	mov	r2, ip
 8001efc:	40e1      	lsrs	r1, r4
 8001efe:	4644      	mov	r4, r8
 8001f00:	40d7      	lsrs	r7, r2
 8001f02:	430c      	orrs	r4, r1
 8001f04:	4304      	orrs	r4, r0
 8001f06:	44b9      	add	r9, r7
 8001f08:	e701      	b.n	8001d0e <__aeabi_dsub+0x342>
 8001f0a:	496b      	ldr	r1, [pc, #428]	; (80020b8 <__aeabi_dsub+0x6ec>)
 8001f0c:	428a      	cmp	r2, r1
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x546>
 8001f10:	e70c      	b.n	8001d2c <__aeabi_dsub+0x360>
 8001f12:	1818      	adds	r0, r3, r0
 8001f14:	4298      	cmp	r0, r3
 8001f16:	419b      	sbcs	r3, r3
 8001f18:	444f      	add	r7, r9
 8001f1a:	425b      	negs	r3, r3
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	07dc      	lsls	r4, r3, #31
 8001f20:	0840      	lsrs	r0, r0, #1
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	469a      	mov	sl, r3
 8001f26:	0016      	movs	r6, r2
 8001f28:	4304      	orrs	r4, r0
 8001f2a:	e6d9      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001f2c:	2a00      	cmp	r2, #0
 8001f2e:	d000      	beq.n	8001f32 <__aeabi_dsub+0x566>
 8001f30:	e081      	b.n	8002036 <__aeabi_dsub+0x66a>
 8001f32:	003b      	movs	r3, r7
 8001f34:	4303      	orrs	r3, r0
 8001f36:	d11d      	bne.n	8001f74 <__aeabi_dsub+0x5a8>
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	2500      	movs	r5, #0
 8001f3c:	0312      	lsls	r2, r2, #12
 8001f3e:	e70b      	b.n	8001d58 <__aeabi_dsub+0x38c>
 8001f40:	08c0      	lsrs	r0, r0, #3
 8001f42:	077b      	lsls	r3, r7, #29
 8001f44:	465d      	mov	r5, fp
 8001f46:	4303      	orrs	r3, r0
 8001f48:	08fa      	lsrs	r2, r7, #3
 8001f4a:	e6d3      	b.n	8001cf4 <__aeabi_dsub+0x328>
 8001f4c:	1ac4      	subs	r4, r0, r3
 8001f4e:	42a0      	cmp	r0, r4
 8001f50:	4180      	sbcs	r0, r0
 8001f52:	464b      	mov	r3, r9
 8001f54:	4240      	negs	r0, r0
 8001f56:	1aff      	subs	r7, r7, r3
 8001f58:	1a3b      	subs	r3, r7, r0
 8001f5a:	469a      	mov	sl, r3
 8001f5c:	465d      	mov	r5, fp
 8001f5e:	e597      	b.n	8001a90 <__aeabi_dsub+0xc4>
 8001f60:	1a1c      	subs	r4, r3, r0
 8001f62:	464a      	mov	r2, r9
 8001f64:	42a3      	cmp	r3, r4
 8001f66:	419b      	sbcs	r3, r3
 8001f68:	1bd7      	subs	r7, r2, r7
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	1afb      	subs	r3, r7, r3
 8001f6e:	469a      	mov	sl, r3
 8001f70:	2601      	movs	r6, #1
 8001f72:	e585      	b.n	8001a80 <__aeabi_dsub+0xb4>
 8001f74:	08c0      	lsrs	r0, r0, #3
 8001f76:	077b      	lsls	r3, r7, #29
 8001f78:	465d      	mov	r5, fp
 8001f7a:	4303      	orrs	r3, r0
 8001f7c:	08fa      	lsrs	r2, r7, #3
 8001f7e:	e6e7      	b.n	8001d50 <__aeabi_dsub+0x384>
 8001f80:	464a      	mov	r2, r9
 8001f82:	08db      	lsrs	r3, r3, #3
 8001f84:	0752      	lsls	r2, r2, #29
 8001f86:	4313      	orrs	r3, r2
 8001f88:	464a      	mov	r2, r9
 8001f8a:	08d2      	lsrs	r2, r2, #3
 8001f8c:	e6b5      	b.n	8001cfa <__aeabi_dsub+0x32e>
 8001f8e:	08c0      	lsrs	r0, r0, #3
 8001f90:	077b      	lsls	r3, r7, #29
 8001f92:	4303      	orrs	r3, r0
 8001f94:	08fa      	lsrs	r2, r7, #3
 8001f96:	e6db      	b.n	8001d50 <__aeabi_dsub+0x384>
 8001f98:	4649      	mov	r1, r9
 8001f9a:	4319      	orrs	r1, r3
 8001f9c:	000b      	movs	r3, r1
 8001f9e:	1e59      	subs	r1, r3, #1
 8001fa0:	418b      	sbcs	r3, r1
 8001fa2:	001c      	movs	r4, r3
 8001fa4:	e653      	b.n	8001c4e <__aeabi_dsub+0x282>
 8001fa6:	464d      	mov	r5, r9
 8001fa8:	3c20      	subs	r4, #32
 8001faa:	40e5      	lsrs	r5, r4
 8001fac:	2920      	cmp	r1, #32
 8001fae:	d005      	beq.n	8001fbc <__aeabi_dsub+0x5f0>
 8001fb0:	2440      	movs	r4, #64	; 0x40
 8001fb2:	1a64      	subs	r4, r4, r1
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	40a1      	lsls	r1, r4
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	4698      	mov	r8, r3
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	1e5c      	subs	r4, r3, #1
 8001fc0:	41a3      	sbcs	r3, r4
 8001fc2:	432b      	orrs	r3, r5
 8001fc4:	e776      	b.n	8001eb4 <__aeabi_dsub+0x4e8>
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d0e1      	beq.n	8001f8e <__aeabi_dsub+0x5c2>
 8001fca:	003a      	movs	r2, r7
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	4302      	orrs	r2, r0
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x608>
 8001fd2:	e6b8      	b.n	8001d46 <__aeabi_dsub+0x37a>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	0752      	lsls	r2, r2, #29
 8001fd8:	2480      	movs	r4, #128	; 0x80
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	464a      	mov	r2, r9
 8001fde:	0324      	lsls	r4, r4, #12
 8001fe0:	08d2      	lsrs	r2, r2, #3
 8001fe2:	4222      	tst	r2, r4
 8001fe4:	d007      	beq.n	8001ff6 <__aeabi_dsub+0x62a>
 8001fe6:	08fe      	lsrs	r6, r7, #3
 8001fe8:	4226      	tst	r6, r4
 8001fea:	d104      	bne.n	8001ff6 <__aeabi_dsub+0x62a>
 8001fec:	465d      	mov	r5, fp
 8001fee:	0032      	movs	r2, r6
 8001ff0:	08c3      	lsrs	r3, r0, #3
 8001ff2:	077f      	lsls	r7, r7, #29
 8001ff4:	433b      	orrs	r3, r7
 8001ff6:	0f59      	lsrs	r1, r3, #29
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	0749      	lsls	r1, r1, #29
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	430b      	orrs	r3, r1
 8002000:	e6a6      	b.n	8001d50 <__aeabi_dsub+0x384>
 8002002:	1ac4      	subs	r4, r0, r3
 8002004:	42a0      	cmp	r0, r4
 8002006:	4180      	sbcs	r0, r0
 8002008:	464b      	mov	r3, r9
 800200a:	4240      	negs	r0, r0
 800200c:	1aff      	subs	r7, r7, r3
 800200e:	1a3b      	subs	r3, r7, r0
 8002010:	469a      	mov	sl, r3
 8002012:	465d      	mov	r5, fp
 8002014:	2601      	movs	r6, #1
 8002016:	e533      	b.n	8001a80 <__aeabi_dsub+0xb4>
 8002018:	003b      	movs	r3, r7
 800201a:	4303      	orrs	r3, r0
 800201c:	d100      	bne.n	8002020 <__aeabi_dsub+0x654>
 800201e:	e715      	b.n	8001e4c <__aeabi_dsub+0x480>
 8002020:	08c0      	lsrs	r0, r0, #3
 8002022:	077b      	lsls	r3, r7, #29
 8002024:	465d      	mov	r5, fp
 8002026:	4303      	orrs	r3, r0
 8002028:	08fa      	lsrs	r2, r7, #3
 800202a:	e666      	b.n	8001cfa <__aeabi_dsub+0x32e>
 800202c:	08c0      	lsrs	r0, r0, #3
 800202e:	077b      	lsls	r3, r7, #29
 8002030:	4303      	orrs	r3, r0
 8002032:	08fa      	lsrs	r2, r7, #3
 8002034:	e65e      	b.n	8001cf4 <__aeabi_dsub+0x328>
 8002036:	003a      	movs	r2, r7
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	4302      	orrs	r2, r0
 800203c:	d100      	bne.n	8002040 <__aeabi_dsub+0x674>
 800203e:	e682      	b.n	8001d46 <__aeabi_dsub+0x37a>
 8002040:	464a      	mov	r2, r9
 8002042:	0752      	lsls	r2, r2, #29
 8002044:	2480      	movs	r4, #128	; 0x80
 8002046:	4313      	orrs	r3, r2
 8002048:	464a      	mov	r2, r9
 800204a:	0324      	lsls	r4, r4, #12
 800204c:	08d2      	lsrs	r2, r2, #3
 800204e:	4222      	tst	r2, r4
 8002050:	d007      	beq.n	8002062 <__aeabi_dsub+0x696>
 8002052:	08fe      	lsrs	r6, r7, #3
 8002054:	4226      	tst	r6, r4
 8002056:	d104      	bne.n	8002062 <__aeabi_dsub+0x696>
 8002058:	465d      	mov	r5, fp
 800205a:	0032      	movs	r2, r6
 800205c:	08c3      	lsrs	r3, r0, #3
 800205e:	077f      	lsls	r7, r7, #29
 8002060:	433b      	orrs	r3, r7
 8002062:	0f59      	lsrs	r1, r3, #29
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	08db      	lsrs	r3, r3, #3
 8002068:	0749      	lsls	r1, r1, #29
 800206a:	430b      	orrs	r3, r1
 800206c:	e670      	b.n	8001d50 <__aeabi_dsub+0x384>
 800206e:	08c0      	lsrs	r0, r0, #3
 8002070:	077b      	lsls	r3, r7, #29
 8002072:	4303      	orrs	r3, r0
 8002074:	08fa      	lsrs	r2, r7, #3
 8002076:	e640      	b.n	8001cfa <__aeabi_dsub+0x32e>
 8002078:	464c      	mov	r4, r9
 800207a:	3920      	subs	r1, #32
 800207c:	40cc      	lsrs	r4, r1
 800207e:	4661      	mov	r1, ip
 8002080:	2920      	cmp	r1, #32
 8002082:	d006      	beq.n	8002092 <__aeabi_dsub+0x6c6>
 8002084:	4666      	mov	r6, ip
 8002086:	2140      	movs	r1, #64	; 0x40
 8002088:	1b89      	subs	r1, r1, r6
 800208a:	464e      	mov	r6, r9
 800208c:	408e      	lsls	r6, r1
 800208e:	4333      	orrs	r3, r6
 8002090:	4698      	mov	r8, r3
 8002092:	4643      	mov	r3, r8
 8002094:	1e59      	subs	r1, r3, #1
 8002096:	418b      	sbcs	r3, r1
 8002098:	431c      	orrs	r4, r3
 800209a:	e5d8      	b.n	8001c4e <__aeabi_dsub+0x282>
 800209c:	181c      	adds	r4, r3, r0
 800209e:	4284      	cmp	r4, r0
 80020a0:	4180      	sbcs	r0, r0
 80020a2:	444f      	add	r7, r9
 80020a4:	46ba      	mov	sl, r7
 80020a6:	4240      	negs	r0, r0
 80020a8:	4482      	add	sl, r0
 80020aa:	e6d9      	b.n	8001e60 <__aeabi_dsub+0x494>
 80020ac:	4653      	mov	r3, sl
 80020ae:	4323      	orrs	r3, r4
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dsub+0x6e8>
 80020b2:	e6cb      	b.n	8001e4c <__aeabi_dsub+0x480>
 80020b4:	e614      	b.n	8001ce0 <__aeabi_dsub+0x314>
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	000007ff 	.word	0x000007ff
 80020bc:	ff7fffff 	.word	0xff7fffff
 80020c0:	000007fe 	.word	0x000007fe
 80020c4:	2300      	movs	r3, #0
 80020c6:	4a01      	ldr	r2, [pc, #4]	; (80020cc <__aeabi_dsub+0x700>)
 80020c8:	001c      	movs	r4, r3
 80020ca:	e529      	b.n	8001b20 <__aeabi_dsub+0x154>
 80020cc:	000007ff 	.word	0x000007ff

080020d0 <__aeabi_dcmpun>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	0005      	movs	r5, r0
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <__aeabi_dcmpun+0x38>)
 80020d6:	031c      	lsls	r4, r3, #12
 80020d8:	0016      	movs	r6, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	030a      	lsls	r2, r1, #12
 80020de:	0049      	lsls	r1, r1, #1
 80020e0:	0b12      	lsrs	r2, r2, #12
 80020e2:	0d49      	lsrs	r1, r1, #21
 80020e4:	0b24      	lsrs	r4, r4, #12
 80020e6:	0d5b      	lsrs	r3, r3, #21
 80020e8:	4281      	cmp	r1, r0
 80020ea:	d008      	beq.n	80020fe <__aeabi_dcmpun+0x2e>
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <__aeabi_dcmpun+0x38>)
 80020ee:	2000      	movs	r0, #0
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d103      	bne.n	80020fc <__aeabi_dcmpun+0x2c>
 80020f4:	0020      	movs	r0, r4
 80020f6:	4330      	orrs	r0, r6
 80020f8:	1e43      	subs	r3, r0, #1
 80020fa:	4198      	sbcs	r0, r3
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	2001      	movs	r0, #1
 8002100:	432a      	orrs	r2, r5
 8002102:	d1fb      	bne.n	80020fc <__aeabi_dcmpun+0x2c>
 8002104:	e7f2      	b.n	80020ec <__aeabi_dcmpun+0x1c>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	000007ff 	.word	0x000007ff

0800210c <__aeabi_d2iz>:
 800210c:	000a      	movs	r2, r1
 800210e:	b530      	push	{r4, r5, lr}
 8002110:	4c13      	ldr	r4, [pc, #76]	; (8002160 <__aeabi_d2iz+0x54>)
 8002112:	0053      	lsls	r3, r2, #1
 8002114:	0309      	lsls	r1, r1, #12
 8002116:	0005      	movs	r5, r0
 8002118:	0b09      	lsrs	r1, r1, #12
 800211a:	2000      	movs	r0, #0
 800211c:	0d5b      	lsrs	r3, r3, #21
 800211e:	0fd2      	lsrs	r2, r2, #31
 8002120:	42a3      	cmp	r3, r4
 8002122:	dd04      	ble.n	800212e <__aeabi_d2iz+0x22>
 8002124:	480f      	ldr	r0, [pc, #60]	; (8002164 <__aeabi_d2iz+0x58>)
 8002126:	4283      	cmp	r3, r0
 8002128:	dd02      	ble.n	8002130 <__aeabi_d2iz+0x24>
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <__aeabi_d2iz+0x5c>)
 800212c:	18d0      	adds	r0, r2, r3
 800212e:	bd30      	pop	{r4, r5, pc}
 8002130:	2080      	movs	r0, #128	; 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4301      	orrs	r1, r0
 8002136:	480d      	ldr	r0, [pc, #52]	; (800216c <__aeabi_d2iz+0x60>)
 8002138:	1ac0      	subs	r0, r0, r3
 800213a:	281f      	cmp	r0, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x44>
 800213e:	480c      	ldr	r0, [pc, #48]	; (8002170 <__aeabi_d2iz+0x64>)
 8002140:	1ac3      	subs	r3, r0, r3
 8002142:	40d9      	lsrs	r1, r3
 8002144:	000b      	movs	r3, r1
 8002146:	4258      	negs	r0, r3
 8002148:	2a00      	cmp	r2, #0
 800214a:	d1f0      	bne.n	800212e <__aeabi_d2iz+0x22>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ee      	b.n	800212e <__aeabi_d2iz+0x22>
 8002150:	4c08      	ldr	r4, [pc, #32]	; (8002174 <__aeabi_d2iz+0x68>)
 8002152:	40c5      	lsrs	r5, r0
 8002154:	46a4      	mov	ip, r4
 8002156:	4463      	add	r3, ip
 8002158:	4099      	lsls	r1, r3
 800215a:	000b      	movs	r3, r1
 800215c:	432b      	orrs	r3, r5
 800215e:	e7f2      	b.n	8002146 <__aeabi_d2iz+0x3a>
 8002160:	000003fe 	.word	0x000003fe
 8002164:	0000041d 	.word	0x0000041d
 8002168:	7fffffff 	.word	0x7fffffff
 800216c:	00000433 	.word	0x00000433
 8002170:	00000413 	.word	0x00000413
 8002174:	fffffbed 	.word	0xfffffbed

08002178 <__aeabi_i2d>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	2800      	cmp	r0, #0
 800217c:	d016      	beq.n	80021ac <__aeabi_i2d+0x34>
 800217e:	17c3      	asrs	r3, r0, #31
 8002180:	18c5      	adds	r5, r0, r3
 8002182:	405d      	eors	r5, r3
 8002184:	0fc4      	lsrs	r4, r0, #31
 8002186:	0028      	movs	r0, r5
 8002188:	f000 f8d2 	bl	8002330 <__clzsi2>
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <__aeabi_i2d+0x5c>)
 800218e:	1a1b      	subs	r3, r3, r0
 8002190:	280a      	cmp	r0, #10
 8002192:	dc16      	bgt.n	80021c2 <__aeabi_i2d+0x4a>
 8002194:	0002      	movs	r2, r0
 8002196:	002e      	movs	r6, r5
 8002198:	3215      	adds	r2, #21
 800219a:	4096      	lsls	r6, r2
 800219c:	220b      	movs	r2, #11
 800219e:	1a12      	subs	r2, r2, r0
 80021a0:	40d5      	lsrs	r5, r2
 80021a2:	055b      	lsls	r3, r3, #21
 80021a4:	032d      	lsls	r5, r5, #12
 80021a6:	0b2d      	lsrs	r5, r5, #12
 80021a8:	0d5b      	lsrs	r3, r3, #21
 80021aa:	e003      	b.n	80021b4 <__aeabi_i2d+0x3c>
 80021ac:	2400      	movs	r4, #0
 80021ae:	2300      	movs	r3, #0
 80021b0:	2500      	movs	r5, #0
 80021b2:	2600      	movs	r6, #0
 80021b4:	051b      	lsls	r3, r3, #20
 80021b6:	432b      	orrs	r3, r5
 80021b8:	07e4      	lsls	r4, r4, #31
 80021ba:	4323      	orrs	r3, r4
 80021bc:	0030      	movs	r0, r6
 80021be:	0019      	movs	r1, r3
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
 80021c2:	380b      	subs	r0, #11
 80021c4:	4085      	lsls	r5, r0
 80021c6:	055b      	lsls	r3, r3, #21
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	2600      	movs	r6, #0
 80021cc:	0b2d      	lsrs	r5, r5, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	e7f0      	b.n	80021b4 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f8a7 	bl	8002330 <__clzsi2>
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <__aeabi_ui2d+0x48>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	280a      	cmp	r0, #10
 80021e8:	dc11      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ea:	220b      	movs	r2, #11
 80021ec:	0021      	movs	r1, r4
 80021ee:	1a12      	subs	r2, r2, r0
 80021f0:	40d1      	lsrs	r1, r2
 80021f2:	3015      	adds	r0, #21
 80021f4:	030a      	lsls	r2, r1, #12
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	4084      	lsls	r4, r0
 80021fa:	0b12      	lsrs	r2, r2, #12
 80021fc:	0d5b      	lsrs	r3, r3, #21
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	055b      	lsls	r3, r3, #21
 8002216:	0312      	lsls	r2, r2, #12
 8002218:	2400      	movs	r4, #0
 800221a:	0b12      	lsrs	r2, r2, #12
 800221c:	0d5b      	lsrs	r3, r3, #21
 800221e:	e7f1      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002220:	0000041e 	.word	0x0000041e

08002224 <__aeabi_d2f>:
 8002224:	0002      	movs	r2, r0
 8002226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002228:	004b      	lsls	r3, r1, #1
 800222a:	030d      	lsls	r5, r1, #12
 800222c:	0f40      	lsrs	r0, r0, #29
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fcc      	lsrs	r4, r1, #31
 8002232:	0a6d      	lsrs	r5, r5, #9
 8002234:	493a      	ldr	r1, [pc, #232]	; (8002320 <__aeabi_d2f+0xfc>)
 8002236:	4305      	orrs	r5, r0
 8002238:	1c58      	adds	r0, r3, #1
 800223a:	00d7      	lsls	r7, r2, #3
 800223c:	4208      	tst	r0, r1
 800223e:	d00a      	beq.n	8002256 <__aeabi_d2f+0x32>
 8002240:	4938      	ldr	r1, [pc, #224]	; (8002324 <__aeabi_d2f+0x100>)
 8002242:	1859      	adds	r1, r3, r1
 8002244:	29fe      	cmp	r1, #254	; 0xfe
 8002246:	dd16      	ble.n	8002276 <__aeabi_d2f+0x52>
 8002248:	20ff      	movs	r0, #255	; 0xff
 800224a:	2200      	movs	r2, #0
 800224c:	05c0      	lsls	r0, r0, #23
 800224e:	4310      	orrs	r0, r2
 8002250:	07e4      	lsls	r4, r4, #31
 8002252:	4320      	orrs	r0, r4
 8002254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <__aeabi_d2f+0x44>
 800225a:	433d      	orrs	r5, r7
 800225c:	d026      	beq.n	80022ac <__aeabi_d2f+0x88>
 800225e:	2205      	movs	r2, #5
 8002260:	0192      	lsls	r2, r2, #6
 8002262:	0a52      	lsrs	r2, r2, #9
 8002264:	b2d8      	uxtb	r0, r3
 8002266:	e7f1      	b.n	800224c <__aeabi_d2f+0x28>
 8002268:	432f      	orrs	r7, r5
 800226a:	d0ed      	beq.n	8002248 <__aeabi_d2f+0x24>
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	03d2      	lsls	r2, r2, #15
 8002270:	20ff      	movs	r0, #255	; 0xff
 8002272:	432a      	orrs	r2, r5
 8002274:	e7ea      	b.n	800224c <__aeabi_d2f+0x28>
 8002276:	2900      	cmp	r1, #0
 8002278:	dd1b      	ble.n	80022b2 <__aeabi_d2f+0x8e>
 800227a:	0192      	lsls	r2, r2, #6
 800227c:	1e50      	subs	r0, r2, #1
 800227e:	4182      	sbcs	r2, r0
 8002280:	00ed      	lsls	r5, r5, #3
 8002282:	0f7f      	lsrs	r7, r7, #29
 8002284:	432a      	orrs	r2, r5
 8002286:	433a      	orrs	r2, r7
 8002288:	0753      	lsls	r3, r2, #29
 800228a:	d047      	beq.n	800231c <__aeabi_d2f+0xf8>
 800228c:	230f      	movs	r3, #15
 800228e:	4013      	ands	r3, r2
 8002290:	2b04      	cmp	r3, #4
 8002292:	d000      	beq.n	8002296 <__aeabi_d2f+0x72>
 8002294:	3204      	adds	r2, #4
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	04db      	lsls	r3, r3, #19
 800229a:	4013      	ands	r3, r2
 800229c:	d03e      	beq.n	800231c <__aeabi_d2f+0xf8>
 800229e:	1c48      	adds	r0, r1, #1
 80022a0:	29fe      	cmp	r1, #254	; 0xfe
 80022a2:	d0d1      	beq.n	8002248 <__aeabi_d2f+0x24>
 80022a4:	0192      	lsls	r2, r2, #6
 80022a6:	0a52      	lsrs	r2, r2, #9
 80022a8:	b2c0      	uxtb	r0, r0
 80022aa:	e7cf      	b.n	800224c <__aeabi_d2f+0x28>
 80022ac:	2000      	movs	r0, #0
 80022ae:	2200      	movs	r2, #0
 80022b0:	e7cc      	b.n	800224c <__aeabi_d2f+0x28>
 80022b2:	000a      	movs	r2, r1
 80022b4:	3217      	adds	r2, #23
 80022b6:	db2f      	blt.n	8002318 <__aeabi_d2f+0xf4>
 80022b8:	2680      	movs	r6, #128	; 0x80
 80022ba:	0436      	lsls	r6, r6, #16
 80022bc:	432e      	orrs	r6, r5
 80022be:	251e      	movs	r5, #30
 80022c0:	1a6d      	subs	r5, r5, r1
 80022c2:	2d1f      	cmp	r5, #31
 80022c4:	dd11      	ble.n	80022ea <__aeabi_d2f+0xc6>
 80022c6:	2202      	movs	r2, #2
 80022c8:	4252      	negs	r2, r2
 80022ca:	1a52      	subs	r2, r2, r1
 80022cc:	0031      	movs	r1, r6
 80022ce:	40d1      	lsrs	r1, r2
 80022d0:	2d20      	cmp	r5, #32
 80022d2:	d004      	beq.n	80022de <__aeabi_d2f+0xba>
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <__aeabi_d2f+0x104>)
 80022d6:	4694      	mov	ip, r2
 80022d8:	4463      	add	r3, ip
 80022da:	409e      	lsls	r6, r3
 80022dc:	4337      	orrs	r7, r6
 80022de:	003a      	movs	r2, r7
 80022e0:	1e53      	subs	r3, r2, #1
 80022e2:	419a      	sbcs	r2, r3
 80022e4:	430a      	orrs	r2, r1
 80022e6:	2100      	movs	r1, #0
 80022e8:	e7ce      	b.n	8002288 <__aeabi_d2f+0x64>
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <__aeabi_d2f+0x108>)
 80022ec:	0038      	movs	r0, r7
 80022ee:	4694      	mov	ip, r2
 80022f0:	4463      	add	r3, ip
 80022f2:	4098      	lsls	r0, r3
 80022f4:	003a      	movs	r2, r7
 80022f6:	1e41      	subs	r1, r0, #1
 80022f8:	4188      	sbcs	r0, r1
 80022fa:	409e      	lsls	r6, r3
 80022fc:	40ea      	lsrs	r2, r5
 80022fe:	4330      	orrs	r0, r6
 8002300:	4302      	orrs	r2, r0
 8002302:	2100      	movs	r1, #0
 8002304:	0753      	lsls	r3, r2, #29
 8002306:	d1c1      	bne.n	800228c <__aeabi_d2f+0x68>
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0013      	movs	r3, r2
 800230c:	04c9      	lsls	r1, r1, #19
 800230e:	2001      	movs	r0, #1
 8002310:	400b      	ands	r3, r1
 8002312:	420a      	tst	r2, r1
 8002314:	d1c6      	bne.n	80022a4 <__aeabi_d2f+0x80>
 8002316:	e7a3      	b.n	8002260 <__aeabi_d2f+0x3c>
 8002318:	2300      	movs	r3, #0
 800231a:	e7a0      	b.n	800225e <__aeabi_d2f+0x3a>
 800231c:	000b      	movs	r3, r1
 800231e:	e79f      	b.n	8002260 <__aeabi_d2f+0x3c>
 8002320:	000007fe 	.word	0x000007fe
 8002324:	fffffc80 	.word	0xfffffc80
 8002328:	fffffca2 	.word	0xfffffca2
 800232c:	fffffc82 	.word	0xfffffc82

08002330 <__clzsi2>:
 8002330:	211c      	movs	r1, #28
 8002332:	2301      	movs	r3, #1
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	4298      	cmp	r0, r3
 8002338:	d301      	bcc.n	800233e <__clzsi2+0xe>
 800233a:	0c00      	lsrs	r0, r0, #16
 800233c:	3910      	subs	r1, #16
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	4298      	cmp	r0, r3
 8002342:	d301      	bcc.n	8002348 <__clzsi2+0x18>
 8002344:	0a00      	lsrs	r0, r0, #8
 8002346:	3908      	subs	r1, #8
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	4298      	cmp	r0, r3
 800234c:	d301      	bcc.n	8002352 <__clzsi2+0x22>
 800234e:	0900      	lsrs	r0, r0, #4
 8002350:	3904      	subs	r1, #4
 8002352:	a202      	add	r2, pc, #8	; (adr r2, 800235c <__clzsi2+0x2c>)
 8002354:	5c10      	ldrb	r0, [r2, r0]
 8002356:	1840      	adds	r0, r0, r1
 8002358:	4770      	bx	lr
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	02020304 	.word	0x02020304
 8002360:	01010101 	.word	0x01010101
	...

0800236c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b500      	push	{lr}
 800236e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002370:	2234      	movs	r2, #52	; 0x34
 8002372:	2100      	movs	r1, #0
 8002374:	a805      	add	r0, sp, #20
 8002376:	f003 fce5 	bl	8005d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237a:	2100      	movs	r1, #0
 800237c:	2210      	movs	r2, #16
 800237e:	a801      	add	r0, sp, #4
 8002380:	f003 fce0 	bl	8005d44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002384:	2080      	movs	r0, #128	; 0x80
 8002386:	0080      	lsls	r0, r0, #2
 8002388:	f001 fa98 	bl	80038bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800238c:	2302      	movs	r3, #2
 800238e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002390:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002392:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002394:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002396:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002398:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800239a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800239c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800239e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a0:	f001 fab8 	bl	8003914 <HAL_RCC_OscConfig>
 80023a4:	1e01      	subs	r1, r0, #0
 80023a6:	d001      	beq.n	80023ac <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023aa:	e7fe      	b.n	80023aa <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ac:	2307      	movs	r3, #7
 80023ae:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023b0:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023b2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023b6:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023b8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023ba:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023bc:	f001 fd08 	bl	8003dd0 <HAL_RCC_ClockConfig>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0x5c>
 80023c4:	b672      	cpsid	i
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <SystemClock_Config+0x5a>
}
 80023c8:	b013      	add	sp, #76	; 0x4c
 80023ca:	bd00      	pop	{pc}

080023cc <main>:
{
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80023d0:	f000 fd12 	bl	8002df8 <HAL_Init>
  SystemClock_Config();
 80023d4:	f7ff ffca 	bl	800236c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	2214      	movs	r2, #20
 80023da:	2100      	movs	r1, #0
 80023dc:	a807      	add	r0, sp, #28
 80023de:	f003 fcb1 	bl	8005d44 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	4dcd      	ldr	r5, [pc, #820]	; (800271c <main+0x350>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e8:	2108      	movs	r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80023ec:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	4313      	orrs	r3, r2
 80023f0:	636b      	str	r3, [r5, #52]	; 0x34
 80023f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 80023f4:	278e      	movs	r7, #142	; 0x8e
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	4013      	ands	r3, r2
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80023fe:	321c      	adds	r2, #28
 8002400:	4313      	orrs	r3, r2
 8002402:	636b      	str	r3, [r5, #52]	; 0x34
 8002404:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8002406:	4cc6      	ldr	r4, [pc, #792]	; (8002720 <main+0x354>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002408:	4013      	ands	r3, r2
 800240a:	9303      	str	r3, [sp, #12]
 800240c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002410:	3a1e      	subs	r2, #30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	4333      	orrs	r3, r6
 8002414:	636b      	str	r3, [r5, #52]	; 0x34
 8002416:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8002418:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4033      	ands	r3, r6
 800241c:	9304      	str	r3, [sp, #16]
 800241e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8002422:	00bf      	lsls	r7, r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002424:	4313      	orrs	r3, r2
 8002426:	636b      	str	r3, [r5, #52]	; 0x34
 8002428:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800242a:	4013      	ands	r3, r2
 800242c:	9305      	str	r3, [sp, #20]
 800242e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002430:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002434:	430b      	orrs	r3, r1
 8002436:	636b      	str	r3, [r5, #52]	; 0x34
 8002438:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800243a:	400b      	ands	r3, r1
 800243c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800243e:	0021      	movs	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002440:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8002442:	f001 f995 	bl	8003770 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	21c0      	movs	r1, #192	; 0xc0
 800244a:	48b6      	ldr	r0, [pc, #728]	; (8002724 <main+0x358>)
 800244c:	f001 f990 	bl	8003770 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	2107      	movs	r1, #7
 8002454:	48b4      	ldr	r0, [pc, #720]	; (8002728 <main+0x35c>)
 8002456:	f001 f98b 	bl	8003770 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	0039      	movs	r1, r7
 800245e:	48b3      	ldr	r0, [pc, #716]	; (800272c <main+0x360>)
 8002460:	f001 f986 	bl	8003770 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 8002466:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	a907      	add	r1, sp, #28
 800246c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f001 f8ca 	bl	800360c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8002478:	23f9      	movs	r3, #249	; 0xf9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	48ac      	ldr	r0, [pc, #688]	; (800272c <main+0x360>)
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 800247c:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8002480:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002482:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	f001 f8c1 	bl	800360c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin|DI_IN1_Pin;
 800248a:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin|DI_IN1_Pin;
 800248e:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	a907      	add	r1, sp, #28
 8002492:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin|DI_IN1_Pin;
 8002494:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002496:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f001 f8b7 	bl	800360c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 800249e:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a0:	48a0      	ldr	r0, [pc, #640]	; (8002724 <main+0x358>)
 80024a2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80024a4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f001 f8ae 	bl	800360c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80024b0:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b2:	489d      	ldr	r0, [pc, #628]	; (8002728 <main+0x35c>)
 80024b4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80024b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024be:	f001 f8a5 	bl	800360c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 80024c2:	9707      	str	r7, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80024c4:	270c      	movs	r7, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	4899      	ldr	r0, [pc, #612]	; (800272c <main+0x360>)
 80024c8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ca:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f001 f89c 	bl	800360c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024d6:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024d8:	4333      	orrs	r3, r6
 80024da:	63ab      	str	r3, [r5, #56]	; 0x38
 80024dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024de:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024e0:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024e2:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024e8:	f000 fee6 	bl	80032b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024ec:	2009      	movs	r0, #9
 80024ee:	f000 ff0d 	bl	800330c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80024f2:	0022      	movs	r2, r4
 80024f4:	0021      	movs	r1, r4
 80024f6:	200a      	movs	r0, #10
 80024f8:	f000 fede 	bl	80032b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80024fc:	200a      	movs	r0, #10
 80024fe:	f000 ff05 	bl	800330c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8002502:	0022      	movs	r2, r4
 8002504:	0021      	movs	r1, r4
 8002506:	200b      	movs	r0, #11
 8002508:	f000 fed6 	bl	80032b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 800250c:	200b      	movs	r0, #11
 800250e:	f000 fefd 	bl	800330c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002512:	003a      	movs	r2, r7
 8002514:	0021      	movs	r1, r4
 8002516:	a807      	add	r0, sp, #28
 8002518:	f003 fc14 	bl	8005d44 <memset>
  hadc1.Instance = ADC1;
 800251c:	4d84      	ldr	r5, [pc, #528]	; (8002730 <main+0x364>)
 800251e:	4b85      	ldr	r3, [pc, #532]	; (8002734 <main+0x368>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002520:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 8002522:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	05db      	lsls	r3, r3, #23
 8002528:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	039b      	lsls	r3, r3, #14
 800252e:	612b      	str	r3, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002530:	19ab      	adds	r3, r5, r6
 8002532:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002534:	002b      	movs	r3, r5
 8002536:	332c      	adds	r3, #44	; 0x2c
 8002538:	701c      	strb	r4, [r3, #0]
  hadc1.Init.OversamplingMode = DISABLE;
 800253a:	002b      	movs	r3, r5
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800253c:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 800253e:	333c      	adds	r3, #60	; 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002540:	832c      	strh	r4, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002542:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002544:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002546:	616a      	str	r2, [r5, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002548:	76ac      	strb	r4, [r5, #26]
  hadc1.Init.NbrOfConversion = 4;
 800254a:	61ea      	str	r2, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800254c:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800254e:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002550:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002552:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002554:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002556:	701c      	strb	r4, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002558:	64ec      	str	r4, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800255a:	f000 fc83 	bl	8002e64 <HAL_ADC_Init>
 800255e:	42a0      	cmp	r0, r4
 8002560:	d001      	beq.n	8002566 <main+0x19a>
 8002562:	b672      	cpsid	i
  while (1)
 8002564:	e7fe      	b.n	8002564 <main+0x198>
  sConfig.Channel = ADC_CHANNEL_1;
 8002566:	4b74      	ldr	r3, [pc, #464]	; (8002738 <main+0x36c>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002568:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.Channel = ADC_CHANNEL_1;
 800256a:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800256c:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800256e:	0028      	movs	r0, r5
 8002570:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002572:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002574:	f000 fd88 	bl	8003088 <HAL_ADC_ConfigChannel>
 8002578:	2800      	cmp	r0, #0
 800257a:	d001      	beq.n	8002580 <main+0x1b4>
 800257c:	b672      	cpsid	i
  while (1)
 800257e:	e7fe      	b.n	800257e <main+0x1b2>
  sConfig.Channel = ADC_CHANNEL_9;
 8002580:	4b6e      	ldr	r3, [pc, #440]	; (800273c <main+0x370>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002582:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 8002584:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002586:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002588:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800258a:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800258c:	f000 fd7c 	bl	8003088 <HAL_ADC_ConfigChannel>
 8002590:	2800      	cmp	r0, #0
 8002592:	d001      	beq.n	8002598 <main+0x1cc>
 8002594:	b672      	cpsid	i
  while (1)
 8002596:	e7fe      	b.n	8002596 <main+0x1ca>
  sConfig.Channel = ADC_CHANNEL_11;
 8002598:	4b69      	ldr	r3, [pc, #420]	; (8002740 <main+0x374>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800259a:	0028      	movs	r0, r5
 800259c:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_11;
 800259e:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80025a0:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025a2:	f000 fd71 	bl	8003088 <HAL_ADC_ConfigChannel>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d001      	beq.n	80025ae <main+0x1e2>
 80025aa:	b672      	cpsid	i
  while (1)
 80025ac:	e7fe      	b.n	80025ac <main+0x1e0>
  hi2c1.Instance = I2C1;
 80025ae:	4c65      	ldr	r4, [pc, #404]	; (8002744 <main+0x378>)
 80025b0:	4b65      	ldr	r3, [pc, #404]	; (8002748 <main+0x37c>)
  hi2c1.Init.OwnAddress1 = 0;
 80025b2:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 80025b4:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <main+0x380>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b8:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025ba:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025bc:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025be:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c0:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025c2:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000E14;
 80025c4:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c6:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025c8:	f001 f8d8 	bl	800377c <HAL_I2C_Init>
 80025cc:	1e01      	subs	r1, r0, #0
 80025ce:	d001      	beq.n	80025d4 <main+0x208>
 80025d0:	b672      	cpsid	i
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <main+0x206>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025d4:	0020      	movs	r0, r4
 80025d6:	f001 f927 	bl	8003828 <HAL_I2CEx_ConfigAnalogFilter>
 80025da:	1e01      	subs	r1, r0, #0
 80025dc:	d001      	beq.n	80025e2 <main+0x216>
 80025de:	b672      	cpsid	i
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <main+0x214>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025e2:	0020      	movs	r0, r4
 80025e4:	f001 f946 	bl	8003874 <HAL_I2CEx_ConfigDigitalFilter>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d001      	beq.n	80025f0 <main+0x224>
 80025ec:	b672      	cpsid	i
  while (1)
 80025ee:	e7fe      	b.n	80025ee <main+0x222>
  hspi1.Instance = SPI1;
 80025f0:	4857      	ldr	r0, [pc, #348]	; (8002750 <main+0x384>)
 80025f2:	4a58      	ldr	r2, [pc, #352]	; (8002754 <main+0x388>)
  hspi1.Init.CRCPolynomial = 7;
 80025f4:	2107      	movs	r1, #7
  hspi1.Instance = SPI1;
 80025f6:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025f8:	2282      	movs	r2, #130	; 0x82
 80025fa:	0052      	lsls	r2, r2, #1
 80025fc:	6042      	str	r2, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025fe:	22e0      	movs	r2, #224	; 0xe0
 8002600:	00d2      	lsls	r2, r2, #3
 8002602:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800260a:	3af9      	subs	r2, #249	; 0xf9
 800260c:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800260e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002610:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002612:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002614:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002616:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002618:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800261c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800261e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002620:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002622:	f001 fd65 	bl	80040f0 <HAL_SPI_Init>
 8002626:	1e05      	subs	r5, r0, #0
 8002628:	d001      	beq.n	800262e <main+0x262>
 800262a:	b672      	cpsid	i
  while (1)
 800262c:	e7fe      	b.n	800262c <main+0x260>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262e:	0001      	movs	r1, r0
 8002630:	003a      	movs	r2, r7
 8002632:	a807      	add	r0, sp, #28
 8002634:	f003 fb86 	bl	8005d44 <memset>
  htim6.Instance = TIM6;
 8002638:	4c47      	ldr	r4, [pc, #284]	; (8002758 <main+0x38c>)
 800263a:	4b48      	ldr	r3, [pc, #288]	; (800275c <main+0x390>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800263c:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 800263e:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 8000-1;
 8002640:	4b47      	ldr	r3, [pc, #284]	; (8002760 <main+0x394>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	60a5      	str	r5, [r4, #8]
  htim6.Init.Prescaler = 8000-1;
 8002644:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 500-1;
 8002646:	23f4      	movs	r3, #244	; 0xf4
 8002648:	33ff      	adds	r3, #255	; 0xff
 800264a:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800264e:	f001 fef9 	bl	8004444 <HAL_TIM_Base_Init>
 8002652:	2800      	cmp	r0, #0
 8002654:	d001      	beq.n	800265a <main+0x28e>
 8002656:	b672      	cpsid	i
  while (1)
 8002658:	e7fe      	b.n	8002658 <main+0x28c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265a:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265c:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800265e:	a907      	add	r1, sp, #28
 8002660:	0020      	movs	r0, r4
 8002662:	f001 ff19 	bl	8004498 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	2800      	cmp	r0, #0
 8002668:	d001      	beq.n	800266e <main+0x2a2>
 800266a:	b672      	cpsid	i
  while (1)
 800266c:	e7fe      	b.n	800266c <main+0x2a0>
  huart1.Instance = USART1;
 800266e:	4c3d      	ldr	r4, [pc, #244]	; (8002764 <main+0x398>)
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <main+0x39c>)
  huart1.Init.BaudRate = 9600;
 8002672:	2696      	movs	r6, #150	; 0x96
  huart1.Instance = USART1;
 8002674:	6023      	str	r3, [r4, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002676:	250c      	movs	r5, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002678:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800267a:	0020      	movs	r0, r4
  huart1.Init.BaudRate = 9600;
 800267c:	01b6      	lsls	r6, r6, #6
 800267e:	6066      	str	r6, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002680:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002682:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002684:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002686:	6165      	str	r5, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002688:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800268a:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268c:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800268e:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002690:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002692:	f002 fae1 	bl	8004c58 <HAL_UART_Init>
 8002696:	1e01      	subs	r1, r0, #0
 8002698:	d001      	beq.n	800269e <main+0x2d2>
 800269a:	b672      	cpsid	i
  while (1)
 800269c:	e7fe      	b.n	800269c <main+0x2d0>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269e:	0020      	movs	r0, r4
 80026a0:	f002 fb58 	bl	8004d54 <HAL_UARTEx_SetTxFifoThreshold>
 80026a4:	1e01      	subs	r1, r0, #0
 80026a6:	d001      	beq.n	80026ac <main+0x2e0>
 80026a8:	b672      	cpsid	i
  while (1)
 80026aa:	e7fe      	b.n	80026aa <main+0x2de>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ac:	0020      	movs	r0, r4
 80026ae:	f002 fb71 	bl	8004d94 <HAL_UARTEx_SetRxFifoThreshold>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d001      	beq.n	80026ba <main+0x2ee>
 80026b6:	b672      	cpsid	i
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <main+0x2ec>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026ba:	0020      	movs	r0, r4
 80026bc:	f002 fb2c 	bl	8004d18 <HAL_UARTEx_DisableFifoMode>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d001      	beq.n	80026c8 <main+0x2fc>
 80026c4:	b672      	cpsid	i
  while (1)
 80026c6:	e7fe      	b.n	80026c6 <main+0x2fa>
  huart2.Instance = USART2;
 80026c8:	4c28      	ldr	r4, [pc, #160]	; (800276c <main+0x3a0>)
 80026ca:	4b29      	ldr	r3, [pc, #164]	; (8002770 <main+0x3a4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026cc:	60a0      	str	r0, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ce:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026d0:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d6:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d8:	6260      	str	r0, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026da:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026dc:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 80026de:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 80026e0:	6066      	str	r6, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026e2:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e4:	f002 fab8 	bl	8004c58 <HAL_UART_Init>
 80026e8:	1e01      	subs	r1, r0, #0
 80026ea:	d001      	beq.n	80026f0 <main+0x324>
 80026ec:	b672      	cpsid	i
  while (1)
 80026ee:	e7fe      	b.n	80026ee <main+0x322>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f0:	0020      	movs	r0, r4
 80026f2:	f002 fb2f 	bl	8004d54 <HAL_UARTEx_SetTxFifoThreshold>
 80026f6:	1e01      	subs	r1, r0, #0
 80026f8:	d001      	beq.n	80026fe <main+0x332>
 80026fa:	b672      	cpsid	i
  while (1)
 80026fc:	e7fe      	b.n	80026fc <main+0x330>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026fe:	0020      	movs	r0, r4
 8002700:	f002 fb48 	bl	8004d94 <HAL_UARTEx_SetRxFifoThreshold>
 8002704:	2800      	cmp	r0, #0
 8002706:	d001      	beq.n	800270c <main+0x340>
 8002708:	b672      	cpsid	i
  while (1)
 800270a:	e7fe      	b.n	800270a <main+0x33e>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800270c:	0020      	movs	r0, r4
 800270e:	f002 fb03 	bl	8004d18 <HAL_UARTEx_DisableFifoMode>
 8002712:	1e03      	subs	r3, r0, #0
 8002714:	d02e      	beq.n	8002774 <main+0x3a8>
 8002716:	b672      	cpsid	i
  while (1)
 8002718:	e7fe      	b.n	8002718 <main+0x34c>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40021000 	.word	0x40021000
 8002720:	00008010 	.word	0x00008010
 8002724:	50000800 	.word	0x50000800
 8002728:	50000c00 	.word	0x50000c00
 800272c:	50000400 	.word	0x50000400
 8002730:	200001f0 	.word	0x200001f0
 8002734:	40012400 	.word	0x40012400
 8002738:	04000002 	.word	0x04000002
 800273c:	24000200 	.word	0x24000200
 8002740:	2c000800 	.word	0x2c000800
 8002744:	200003c4 	.word	0x200003c4
 8002748:	40005400 	.word	0x40005400
 800274c:	00000e14 	.word	0x00000e14
 8002750:	20000418 	.word	0x20000418
 8002754:	40013000 	.word	0x40013000
 8002758:	2000047c 	.word	0x2000047c
 800275c:	40001000 	.word	0x40001000
 8002760:	00001f3f 	.word	0x00001f3f
 8002764:	200004c8 	.word	0x200004c8
 8002768:	40013800 	.word	0x40013800
 800276c:	2000055c 	.word	0x2000055c
 8002770:	40004400 	.word	0x40004400
  huart3.Instance = USART3;
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <main+0x3d0>)
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <main+0x3d4>)
  huart3.Init.BaudRate = 9600;
 8002778:	6046      	str	r6, [r0, #4]
  huart3.Instance = USART3;
 800277a:	6002      	str	r2, [r0, #0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800277c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800277e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002780:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002782:	6145      	str	r5, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002784:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002786:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002788:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800278a:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278c:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800278e:	f002 fa63 	bl	8004c58 <HAL_UART_Init>
 8002792:	2800      	cmp	r0, #0
 8002794:	d001      	beq.n	800279a <main+0x3ce>
 8002796:	b672      	cpsid	i
  while (1)
 8002798:	e7fe      	b.n	8002798 <main+0x3cc>
  while (1)
 800279a:	e7fe      	b.n	800279a <main+0x3ce>
 800279c:	200005f0 	.word	0x200005f0
 80027a0:	40004800 	.word	0x40004800

080027a4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80027a6:	6802      	ldr	r2, [r0, #0]
{
 80027a8:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 80027ae:	f000 fb37 	bl	8002e20 <HAL_IncTick>
}
 80027b2:	bd10      	pop	{r4, pc}
 80027b4:	40012c00 	.word	0x40012c00

080027b8 <Error_Handler>:
 80027b8:	b672      	cpsid	i
  while (1)
 80027ba:	e7fe      	b.n	80027ba <Error_Handler+0x2>

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2101      	movs	r1, #1
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_MspInit+0x30>)

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80027c2:	20c0      	movs	r0, #192	; 0xc0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80027c6:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c8:	430a      	orrs	r2, r1
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
 80027cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ce:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	9200      	str	r2, [sp, #0]
 80027d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d8:	0549      	lsls	r1, r1, #21
 80027da:	430a      	orrs	r2, r1
 80027dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	400b      	ands	r3, r1
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80027e6:	f000 fb2d 	bl	8002e44 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ea:	bd07      	pop	{r0, r1, r2, pc}
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	0005      	movs	r5, r0
 80027f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f6:	2214      	movs	r2, #20
 80027f8:	2100      	movs	r1, #0
 80027fa:	a803      	add	r0, sp, #12
 80027fc:	f003 faa2 	bl	8005d44 <memset>
  if(hadc->Instance==ADC1)
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_ADC_MspInit+0xa8>)
 8002802:	682a      	ldr	r2, [r5, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d145      	bne.n	8002894 <HAL_ADC_MspInit+0xa4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002808:	2180      	movs	r1, #128	; 0x80
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_ADC_MspInit+0xac>)
 800280c:	0349      	lsls	r1, r1, #13
 800280e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 8002812:	430a      	orrs	r2, r1
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
 8002816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 8002818:	2403      	movs	r4, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 800281a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	2101      	movs	r1, #1

    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8002820:	9200      	str	r2, [sp, #0]
 8002822:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002828:	430a      	orrs	r2, r1
 800282a:	635a      	str	r2, [r3, #52]	; 0x34
 800282c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282e:	400a      	ands	r2, r1
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002836:	1849      	adds	r1, r1, r1
 8002838:	430a      	orrs	r2, r1
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 800283e:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	400b      	ands	r3, r1
 8002842:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002848:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f000 fedf 	bl	800360c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_ADC_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	4814      	ldr	r0, [pc, #80]	; (80028a4 <HAL_ADC_MspInit+0xb4>)
 8002852:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8002854:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002856:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f000 fed7 	bl	800360c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800285e:	4c12      	ldr	r4, [pc, #72]	; (80028a8 <HAL_ADC_MspInit+0xb8>)
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002862:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8002864:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002866:	2305      	movs	r3, #5
 8002868:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800286a:	337b      	adds	r3, #123	; 0x7b
 800286c:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800286e:	3381      	adds	r3, #129	; 0x81
 8002870:	33ff      	adds	r3, #255	; 0xff
 8002872:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800287a:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287c:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800287e:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002880:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002882:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002884:	f000 fd68 	bl	8003358 <HAL_DMA_Init>
 8002888:	42b0      	cmp	r0, r6
 800288a:	d001      	beq.n	8002890 <HAL_ADC_MspInit+0xa0>
    {
      Error_Handler();
 800288c:	f7ff ff94 	bl	80027b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002890:	652c      	str	r4, [r5, #80]	; 0x50
 8002892:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002894:	b008      	add	sp, #32
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	40012400 	.word	0x40012400
 800289c:	40021000 	.word	0x40021000
 80028a0:	00000402 	.word	0x00000402
 80028a4:	50000400 	.word	0x50000400
 80028a8:	20000254 	.word	0x20000254
 80028ac:	40020008 	.word	0x40020008

080028b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b0:	b510      	push	{r4, lr}
 80028b2:	0004      	movs	r4, r0
 80028b4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	2214      	movs	r2, #20
 80028b8:	2100      	movs	r1, #0
 80028ba:	a802      	add	r0, sp, #8
 80028bc:	f003 fa42 	bl	8005d44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c0:	221c      	movs	r2, #28
 80028c2:	2100      	movs	r1, #0
 80028c4:	a807      	add	r0, sp, #28
 80028c6:	f003 fa3d 	bl	8005d44 <memset>
  if(hi2c->Instance==I2C1)
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_I2C_MspInit+0x78>)
 80028cc:	6822      	ldr	r2, [r4, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d128      	bne.n	8002924 <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028d2:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d4:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028d6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d8:	f001 fb56 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 80028e0:	f7ff ff6a 	bl	80027b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e4:	2202      	movs	r2, #2
 80028e6:	4c11      	ldr	r4, [pc, #68]	; (800292c <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	4811      	ldr	r0, [pc, #68]	; (8002930 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4313      	orrs	r3, r2
 80028f0:	6363      	str	r3, [r4, #52]	; 0x34
 80028f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028f4:	4013      	ands	r3, r2
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80028fa:	23c0      	movs	r3, #192	; 0xc0
 80028fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028fe:	3bae      	subs	r3, #174	; 0xae
 8002900:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002902:	3b11      	subs	r3, #17
 8002904:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800290a:	3306      	adds	r3, #6
 800290c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	f000 fe7d 	bl	800360c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002916:	0392      	lsls	r2, r2, #14
 8002918:	4313      	orrs	r3, r2
 800291a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800291c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800291e:	4013      	ands	r3, r2
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002924:	b00e      	add	sp, #56	; 0x38
 8002926:	bd10      	pop	{r4, pc}
 8002928:	40005400 	.word	0x40005400
 800292c:	40021000 	.word	0x40021000
 8002930:	50000400 	.word	0x50000400

08002934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002934:	b510      	push	{r4, lr}
 8002936:	0004      	movs	r4, r0
 8002938:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	2214      	movs	r2, #20
 800293c:	2100      	movs	r1, #0
 800293e:	a803      	add	r0, sp, #12
 8002940:	f003 fa00 	bl	8005d44 <memset>
  if(hspi->Instance==SPI1)
 8002944:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_SPI_MspInit+0x54>)
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d11a      	bne.n	8002982 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_SPI_MspInit+0x58>)
 8002950:	0149      	lsls	r1, r1, #5
 8002952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002956:	430a      	orrs	r2, r1
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
 800295a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800295e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002962:	9201      	str	r2, [sp, #4]
 8002964:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002968:	430a      	orrs	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	400b      	ands	r3, r1
 8002970:	9302      	str	r3, [sp, #8]
 8002972:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002974:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002978:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	3bde      	subs	r3, #222	; 0xde
 800297c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f000 fe45 	bl	800360c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002982:	b008      	add	sp, #32
 8002984:	bd10      	pop	{r4, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	40013000 	.word	0x40013000
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002990:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_TIM_Base_MspInit+0x30>)
 8002994:	6802      	ldr	r2, [r0, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d110      	bne.n	80029bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800299a:	2110      	movs	r1, #16
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_TIM_Base_MspInit+0x34>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800299e:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029a2:	430a      	orrs	r2, r1
 80029a4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	400b      	ands	r3, r1
 80029ac:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80029ae:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029b0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80029b2:	f000 fc81 	bl	80032b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80029b6:	2011      	movs	r0, #17
 80029b8:	f000 fca8 	bl	800330c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80029bc:	bd07      	pop	{r0, r1, r2, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40001000 	.word	0x40001000
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	0005      	movs	r5, r0
 80029cc:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ce:	2214      	movs	r2, #20
 80029d0:	2100      	movs	r1, #0
 80029d2:	a806      	add	r0, sp, #24
 80029d4:	f003 f9b6 	bl	8005d44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d8:	221c      	movs	r2, #28
 80029da:	2100      	movs	r1, #0
 80029dc:	a80b      	add	r0, sp, #44	; 0x2c
 80029de:	f003 f9b1 	bl	8005d44 <memset>
  if(huart->Instance==USART1)
 80029e2:	682b      	ldr	r3, [r5, #0]
 80029e4:	4a69      	ldr	r2, [pc, #420]	; (8002b8c <HAL_UART_MspInit+0x1c4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d149      	bne.n	8002a7e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029ea:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ec:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029ee:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f0:	f001 faca 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 80029f8:	f7ff fede 	bl	80027b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	4b64      	ldr	r3, [pc, #400]	; (8002b90 <HAL_UART_MspInit+0x1c8>)
 8002a00:	01c9      	lsls	r1, r1, #7
 8002a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a06:	430a      	orrs	r2, r1
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
 8002a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0e:	400a      	ands	r2, r1
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	2201      	movs	r2, #1
 8002a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	6359      	str	r1, [r3, #52]	; 0x34
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4013      	ands	r3, r2
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8002a28:	23c0      	movs	r3, #192	; 0xc0
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002a36:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f000 fde8 	bl	800360c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002a3c:	4c55      	ldr	r4, [pc, #340]	; (8002b94 <HAL_UART_MspInit+0x1cc>)
 8002a3e:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_UART_MspInit+0x1d0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a40:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002a42:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002a44:	2332      	movs	r3, #50	; 0x32
 8002a46:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a48:	334e      	adds	r3, #78	; 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a4a:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	60e6      	str	r6, [r4, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4e:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a50:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a52:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002a54:	61e6      	str	r6, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a56:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a58:	f000 fc7e 	bl	8003358 <HAL_DMA_Init>
 8002a5c:	42b0      	cmp	r0, r6
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_MspInit+0x9c>
    {
      Error_Handler();
 8002a60:	f7ff feaa 	bl	80027b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a66:	1d2b      	adds	r3, r5, #4
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a68:	201b      	movs	r0, #27
 8002a6a:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a6c:	67dc      	str	r4, [r3, #124]	; 0x7c
 8002a6e:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a70:	f000 fc22 	bl	80032b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a74:	201b      	movs	r0, #27

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002a76:	f000 fc49 	bl	800330c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a7a:	b012      	add	sp, #72	; 0x48
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002a7e:	4a47      	ldr	r2, [pc, #284]	; (8002b9c <HAL_UART_MspInit+0x1d4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d145      	bne.n	8002b10 <HAL_UART_MspInit+0x148>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a84:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a86:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a88:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8a:	f001 fa7d 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002a92:	f7ff fe91 	bl	80027b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_UART_MspInit+0x1c8>)
 8002a9a:	0289      	lsls	r1, r1, #10
 8002a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	9202      	str	r2, [sp, #8]
 8002aac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	2201      	movs	r2, #1
 8002ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4311      	orrs	r1, r2
 8002ab6:	6359      	str	r1, [r3, #52]	; 0x34
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abc:	4013      	ands	r3, r2
 8002abe:	9303      	str	r3, [sp, #12]
 8002ac0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	3b0a      	subs	r3, #10
 8002ac8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002ace:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f000 fd9c 	bl	800360c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002ad4:	4c32      	ldr	r4, [pc, #200]	; (8002ba0 <HAL_UART_MspInit+0x1d8>)
 8002ad6:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_UART_MspInit+0x1dc>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ad8:	0020      	movs	r0, r4
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002ada:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002adc:	2334      	movs	r3, #52	; 0x34
 8002ade:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae0:	334c      	adds	r3, #76	; 0x4c
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ae2:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae4:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae6:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae8:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aea:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002aec:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aee:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002af0:	f000 fc32 	bl	8003358 <HAL_DMA_Init>
 8002af4:	42b0      	cmp	r0, r6
 8002af6:	d001      	beq.n	8002afc <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002af8:	f7ff fe5e 	bl	80027b8 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002afc:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002afe:	1d2b      	adds	r3, r5, #4
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b00:	201c      	movs	r0, #28
 8002b02:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b04:	67dc      	str	r4, [r3, #124]	; 0x7c
 8002b06:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b08:	f000 fbd6 	bl	80032b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b0c:	201c      	movs	r0, #28
 8002b0e:	e7b2      	b.n	8002a76 <HAL_UART_MspInit+0xae>
  else if(huart->Instance==USART3)
 8002b10:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <HAL_UART_MspInit+0x1e0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d1b1      	bne.n	8002a7a <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_UART_MspInit+0x1c8>)
 8002b1a:	02c9      	lsls	r1, r1, #11
 8002b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	4823      	ldr	r0, [pc, #140]	; (8002bac <HAL_UART_MspInit+0x1e4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b20:	430a      	orrs	r2, r1
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b26:	400a      	ands	r2, r1
 8002b28:	9204      	str	r2, [sp, #16]
 8002b2a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b30:	4311      	orrs	r1, r2
 8002b32:	6359      	str	r1, [r3, #52]	; 0x34
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	4013      	ands	r3, r2
 8002b3a:	9305      	str	r3, [sp, #20]
 8002b3c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8002b3e:	2305      	movs	r3, #5
 8002b40:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002b42:	3b01      	subs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002b46:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b48:	f000 fd60 	bl	800360c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002b4c:	4c18      	ldr	r4, [pc, #96]	; (8002bb0 <HAL_UART_MspInit+0x1e8>)
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_UART_MspInit+0x1ec>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b50:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002b52:	6023      	str	r3, [r4, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002b54:	2337      	movs	r3, #55	; 0x37
 8002b56:	6063      	str	r3, [r4, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b58:	3b27      	subs	r3, #39	; 0x27
 8002b5a:	60a3      	str	r3, [r4, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b5c:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b5e:	0020      	movs	r0, r4
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b60:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b62:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b64:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b66:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b68:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b6a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b6c:	f000 fbf4 	bl	8003358 <HAL_DMA_Init>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002b74:	f7ff fe20 	bl	80027b8 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	201d      	movs	r0, #29
 8002b7c:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002b7e:	67ec      	str	r4, [r5, #124]	; 0x7c
 8002b80:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002b82:	f000 fb99 	bl	80032b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002b86:	201d      	movs	r0, #29
 8002b88:	e775      	b.n	8002a76 <HAL_UART_MspInit+0xae>
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	200002b0 	.word	0x200002b0
 8002b98:	4002001c 	.word	0x4002001c
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	2000030c 	.word	0x2000030c
 8002ba4:	40020030 	.word	0x40020030
 8002ba8:	40004800 	.word	0x40004800
 8002bac:	50000400 	.word	0x50000400
 8002bb0:	20000368 	.word	0x20000368
 8002bb4:	40020044 	.word	0x40020044

08002bb8 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_InitTick+0x88>)
{
 8002bbc:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc0:	0109      	lsls	r1, r1, #4
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8002bc8:	b086      	sub	sp, #24
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bca:	400b      	ands	r3, r1
 8002bcc:	9301      	str	r3, [sp, #4]
{
 8002bce:	0005      	movs	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bd0:	4669      	mov	r1, sp
 8002bd2:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bd4:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bd6:	f001 f9bd 	bl	8003f54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bda:	9b05      	ldr	r3, [sp, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d128      	bne.n	8002c32 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002be0:	f001 f9a4 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002be4:	4e17      	ldr	r6, [pc, #92]	; (8002c44 <HAL_InitTick+0x8c>)
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be8:	4918      	ldr	r1, [pc, #96]	; (8002c4c <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 8002bea:	6033      	str	r3, [r6, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002bec:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_InitTick+0x98>)
 8002bee:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bf0:	f7fd faac 	bl	800014c <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002bf4:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bf6:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002bf8:	6070      	str	r0, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8002bfa:	0030      	movs	r0, r6
  htim1.Init.ClockDivision = 0;
 8002bfc:	6133      	str	r3, [r6, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfe:	60b3      	str	r3, [r6, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c00:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8002c02:	f001 fc1f 	bl	8004444 <HAL_TIM_Base_Init>
 8002c06:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 8002c08:	d110      	bne.n	8002c2c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	f001 fae8 	bl	80041e0 <HAL_TIM_Base_Start_IT>
 8002c10:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8002c12:	d10b      	bne.n	8002c2c <HAL_InitTick+0x74>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002c14:	200d      	movs	r0, #13
 8002c16:	f000 fb79 	bl	800330c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1a:	2d03      	cmp	r5, #3
 8002c1c:	d80d      	bhi.n	8002c3a <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8002c1e:	0022      	movs	r2, r4
 8002c20:	0029      	movs	r1, r5
 8002c22:	200d      	movs	r0, #13
 8002c24:	f000 fb48 	bl	80032b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_InitTick+0x9c>)
 8002c2a:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8002c2c:	0020      	movs	r0, r4
 8002c2e:	b006      	add	sp, #24
 8002c30:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c32:	f001 f97b 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8002c36:	0040      	lsls	r0, r0, #1
 8002c38:	e7d4      	b.n	8002be4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002c3a:	2401      	movs	r4, #1
 8002c3c:	e7f6      	b.n	8002c2c <HAL_InitTick+0x74>
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	40021000 	.word	0x40021000
 8002c44:	20000684 	.word	0x20000684
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	000f4240 	.word	0x000f4240
 8002c50:	000003e7 	.word	0x000003e7
 8002c54:	20000008 	.word	0x20000008

08002c58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <NMI_Handler>

08002c5a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <HardFault_Handler>

08002c5c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c5c:	4770      	bx	lr

08002c5e <PendSV_Handler>:
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Handler>:
 8002c60:	4770      	bx	lr
	...

08002c64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA1_Channel1_IRQHandler+0xc>)
 8002c68:	f000 fc4a 	bl	8003500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	20000254 	.word	0x20000254

08002c74 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002c74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c76:	4803      	ldr	r0, [pc, #12]	; (8002c84 <DMA1_Channel2_3_IRQHandler+0x10>)
 8002c78:	f000 fc42 	bl	8003500 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002c7e:	f000 fc3f 	bl	8003500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002c82:	bd10      	pop	{r4, pc}
 8002c84:	200002b0 	.word	0x200002b0
 8002c88:	2000030c 	.word	0x2000030c

08002c8c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002c8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c8e:	4803      	ldr	r0, [pc, #12]	; (8002c9c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8002c90:	f000 fc36 	bl	8003500 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002c96:	f000 fc87 	bl	80035a8 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002c9a:	bd10      	pop	{r4, pc}
 8002c9c:	20000368 	.word	0x20000368
 8002ca0:	20000254 	.word	0x20000254

08002ca4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002ca4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca6:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8002ca8:	f001 fad0 	bl	800424c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000684 	.word	0x20000684

08002cb4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002cb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cb6:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <TIM6_IRQHandler+0xc>)
 8002cb8:	f001 fac8 	bl	800424c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002cbc:	bd10      	pop	{r4, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	2000047c 	.word	0x2000047c

08002cc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cc6:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <USART1_IRQHandler+0xc>)
 8002cc8:	f001 fc60 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ccc:	bd10      	pop	{r4, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	200004c8 	.word	0x200004c8

08002cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002cd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cd6:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <USART2_IRQHandler+0xc>)
 8002cd8:	f001 fc58 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cdc:	bd10      	pop	{r4, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	2000055c 	.word	0x2000055c

08002ce4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002ce4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ce6:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <USART3_4_IRQHandler+0xc>)
 8002ce8:	f001 fc50 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	200005f0 	.word	0x200005f0

08002cf4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	4770      	bx	lr

08002cf8 <_kill>:

int _kill(int pid, int sig)
{
 8002cf8:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cfa:	f003 f87d 	bl	8005df8 <__errno>
 8002cfe:	2316      	movs	r3, #22
 8002d00:	6003      	str	r3, [r0, #0]
  return -1;
 8002d02:	2001      	movs	r0, #1
}
 8002d04:	4240      	negs	r0, r0
 8002d06:	bd10      	pop	{r4, pc}

08002d08 <_exit>:

void _exit (int status)
{
 8002d08:	b510      	push	{r4, lr}
  errno = EINVAL;
 8002d0a:	f003 f875 	bl	8005df8 <__errno>
 8002d0e:	2316      	movs	r3, #22
 8002d10:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002d12:	e7fe      	b.n	8002d12 <_exit+0xa>

08002d14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	000e      	movs	r6, r1
 8002d18:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	2500      	movs	r5, #0
 8002d1c:	42a5      	cmp	r5, r4
 8002d1e:	db01      	blt.n	8002d24 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002d20:	0020      	movs	r0, r4
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002d24:	e000      	b.n	8002d28 <_read+0x14>
 8002d26:	bf00      	nop
 8002d28:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2a:	3501      	adds	r5, #1
 8002d2c:	e7f6      	b.n	8002d1c <_read+0x8>

08002d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2e:	b570      	push	{r4, r5, r6, lr}
 8002d30:	000e      	movs	r6, r1
 8002d32:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d34:	2500      	movs	r5, #0
 8002d36:	42a5      	cmp	r5, r4
 8002d38:	db01      	blt.n	8002d3e <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002d3e:	5d70      	ldrb	r0, [r6, r5]
 8002d40:	e000      	b.n	8002d44 <_write+0x16>
 8002d42:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d44:	3501      	adds	r5, #1
 8002d46:	e7f6      	b.n	8002d36 <_write+0x8>

08002d48 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002d48:	2001      	movs	r0, #1
}
 8002d4a:	4240      	negs	r0, r0
 8002d4c:	4770      	bx	lr

08002d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	019b      	lsls	r3, r3, #6
  return 0;
}
 8002d52:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002d54:	604b      	str	r3, [r1, #4]
}
 8002d56:	4770      	bx	lr

08002d58 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002d58:	2001      	movs	r0, #1
 8002d5a:	4770      	bx	lr

08002d5c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	4770      	bx	lr

08002d60 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d60:	490b      	ldr	r1, [pc, #44]	; (8002d90 <_sbrk+0x30>)
 8002d62:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <_sbrk+0x34>)
{
 8002d64:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d66:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d68:	490b      	ldr	r1, [pc, #44]	; (8002d98 <_sbrk+0x38>)
{
 8002d6a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002d6c:	6808      	ldr	r0, [r1, #0]
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d101      	bne.n	8002d76 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002d72:	480a      	ldr	r0, [pc, #40]	; (8002d9c <_sbrk+0x3c>)
 8002d74:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d76:	6808      	ldr	r0, [r1, #0]
 8002d78:	18c3      	adds	r3, r0, r3
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d906      	bls.n	8002d8c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002d7e:	f003 f83b 	bl	8005df8 <__errno>
 8002d82:	230c      	movs	r3, #12
 8002d84:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002d86:	2001      	movs	r0, #1
 8002d88:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002d8a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002d8c:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8002d8e:	e7fc      	b.n	8002d8a <_sbrk+0x2a>
 8002d90:	00000400 	.word	0x00000400
 8002d94:	20009000 	.word	0x20009000
 8002d98:	200006d0 	.word	0x200006d0
 8002d9c:	20000828 	.word	0x20000828

08002da0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da0:	4770      	bx	lr
	...

08002da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002da4:	480d      	ldr	r0, [pc, #52]	; (8002ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002da6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002da8:	f7ff fffa 	bl	8002da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dac:	480c      	ldr	r0, [pc, #48]	; (8002de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dae:	490d      	ldr	r1, [pc, #52]	; (8002de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <LoopForever+0xe>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db4:	e002      	b.n	8002dbc <LoopCopyDataInit>

08002db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dba:	3304      	adds	r3, #4

08002dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc0:	d3f9      	bcc.n	8002db6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dc4:	4c0a      	ldr	r4, [pc, #40]	; (8002df0 <LoopForever+0x16>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc8:	e001      	b.n	8002dce <LoopFillZerobss>

08002dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dcc:	3204      	adds	r2, #4

08002dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd0:	d3fb      	bcc.n	8002dca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dd2:	f003 f817 	bl	8005e04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002dd6:	f7ff faf9 	bl	80023cc <main>

08002dda <LoopForever>:

LoopForever:
  b LoopForever
 8002dda:	e7fe      	b.n	8002dda <LoopForever>
  ldr   r0, =_estack
 8002ddc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002de8:	08009c20 	.word	0x08009c20
  ldr r2, =_sbss
 8002dec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002df0:	20000824 	.word	0x20000824

08002df4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002df4:	e7fe      	b.n	8002df4 <ADC1_IRQHandler>
	...

08002df8 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_Init+0x24>)
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	6811      	ldr	r1, [r2, #0]
{
 8002e00:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e02:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e04:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e06:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e08:	f7ff fed6 	bl	8002bb8 <HAL_InitTick>
 8002e0c:	1e04      	subs	r4, r0, #0
 8002e0e:	d103      	bne.n	8002e18 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e10:	f7ff fcd4 	bl	80027bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8002e14:	0020      	movs	r0, r4
 8002e16:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002e18:	2401      	movs	r4, #1
 8002e1a:	e7fb      	b.n	8002e14 <HAL_Init+0x1c>
 8002e1c:	40022000 	.word	0x40022000

08002e20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <HAL_IncTick+0x10>)
 8002e22:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_IncTick+0x14>)
 8002e24:	6811      	ldr	r1, [r2, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	185b      	adds	r3, r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	4770      	bx	lr
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	200006d4 	.word	0x200006d4
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e38:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <HAL_GetTick+0x8>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
}
 8002e3c:	4770      	bx	lr
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	200006d4 	.word	0x200006d4

08002e44 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002e44:	4a03      	ldr	r2, [pc, #12]	; (8002e54 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8002e46:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	4303      	orrs	r3, r0
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	4770      	bx	lr
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40010000 	.word	0x40010000
 8002e58:	fffff9ff 	.word	0xfffff9ff

08002e5c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5c:	6880      	ldr	r0, [r0, #8]
 8002e5e:	0740      	lsls	r0, r0, #29
 8002e60:	0fc0      	lsrs	r0, r0, #31
}
 8002e62:	4770      	bx	lr

08002e64 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e64:	2300      	movs	r3, #0
{
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	0004      	movs	r4, r0

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8002e6c:	2601      	movs	r6, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002e6e:	9303      	str	r3, [sp, #12]
  if (hadc == NULL)
 8002e70:	4298      	cmp	r0, r3
 8002e72:	d100      	bne.n	8002e76 <HAL_ADC_Init+0x12>
 8002e74:	e0b4      	b.n	8002fe0 <HAL_ADC_Init+0x17c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e76:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002e78:	429d      	cmp	r5, r3
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e7c:	f7ff fcb8 	bl	80027f0 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e80:	0023      	movs	r3, r4
 8002e82:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002e86:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e88:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e8a:	6825      	ldr	r5, [r4, #0]
 8002e8c:	055b      	lsls	r3, r3, #21
 8002e8e:	68aa      	ldr	r2, [r5, #8]
 8002e90:	421a      	tst	r2, r3
 8002e92:	d100      	bne.n	8002e96 <HAL_ADC_Init+0x32>
 8002e94:	e0a7      	b.n	8002fe6 <HAL_ADC_Init+0x182>
 8002e96:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e98:	2600      	movs	r6, #0
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	d407      	bmi.n	8002eae <HAL_ADC_Init+0x4a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea0:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002eaa:	4333      	orrs	r3, r6
 8002eac:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eae:	0028      	movs	r0, r5
 8002eb0:	f7ff ffd4 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002eb8:	4013      	ands	r3, r2
 8002eba:	4303      	orrs	r3, r0
 8002ebc:	d000      	beq.n	8002ec0 <HAL_ADC_Init+0x5c>
 8002ebe:	e0cd      	b.n	800305c <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002ec2:	4b69      	ldr	r3, [pc, #420]	; (8003068 <HAL_ADC_Init+0x204>)
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	33ff      	adds	r3, #255	; 0xff
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	65a3      	str	r3, [r4, #88]	; 0x58
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ece:	6922      	ldr	r2, [r4, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed0:	68ab      	ldr	r3, [r5, #8]
 8002ed2:	9201      	str	r2, [sp, #4]
 8002ed4:	07db      	lsls	r3, r3, #31
 8002ed6:	d462      	bmi.n	8002f9e <HAL_ADC_Init+0x13a>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002ed8:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002eda:	68e1      	ldr	r1, [r4, #12]
 8002edc:	1e7b      	subs	r3, r7, #1
 8002ede:	419f      	sbcs	r7, r3
 8002ee0:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ee2:	7ea2      	ldrb	r2, [r4, #26]
 8002ee4:	430b      	orrs	r3, r1
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ee6:	7e21      	ldrb	r1, [r4, #24]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002ee8:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002eea:	0389      	lsls	r1, r1, #14
 8002eec:	430b      	orrs	r3, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002eee:	7e61      	ldrb	r1, [r4, #25]
 8002ef0:	03c9      	lsls	r1, r1, #15
 8002ef2:	430b      	orrs	r3, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ef4:	0351      	lsls	r1, r2, #13
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	469c      	mov	ip, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db00      	blt.n	8002f02 <HAL_ADC_Init+0x9e>
 8002f00:	e086      	b.n	8003010 <HAL_ADC_Init+0x1ac>
 8002f02:	0059      	lsls	r1, r3, #1
 8002f04:	0849      	lsrs	r1, r1, #1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f06:	0023      	movs	r3, r4
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f08:	4660      	mov	r0, ip
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f0a:	332c      	adds	r3, #44	; 0x2c
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f10:	4303      	orrs	r3, r0
 8002f12:	433b      	orrs	r3, r7
 8002f14:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f16:	1c61      	adds	r1, r4, #1
 8002f18:	7fc9      	ldrb	r1, [r1, #31]
 8002f1a:	2901      	cmp	r1, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_ADC_Init+0xc6>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d000      	beq.n	8002f24 <HAL_ADC_Init+0xc0>
 8002f22:	e078      	b.n	8003016 <HAL_ADC_Init+0x1b2>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	0252      	lsls	r2, r2, #9
 8002f28:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_ADC_Init+0xd8>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f30:	21e0      	movs	r1, #224	; 0xe0
 8002f32:	0049      	lsls	r1, r1, #1
 8002f34:	400a      	ands	r2, r1
 8002f36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f3c:	68ea      	ldr	r2, [r5, #12]
 8002f3e:	494b      	ldr	r1, [pc, #300]	; (800306c <HAL_ADC_Init+0x208>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60eb      	str	r3, [r5, #12]

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f46:	0023      	movs	r3, r4
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f48:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002f4a:	333c      	adds	r3, #60	; 0x3c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f50:	0f97      	lsrs	r7, r2, #30
 8002f52:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 8002f54:	469c      	mov	ip, r3
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f56:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d108      	bne.n	8002f6e <HAL_ADC_Init+0x10a>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f60:	4303      	orrs	r3, r0
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f66:	430b      	orrs	r3, r1
 8002f68:	4661      	mov	r1, ip
 8002f6a:	433b      	orrs	r3, r7
 8002f6c:	4319      	orrs	r1, r3
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f6e:	692b      	ldr	r3, [r5, #16]
 8002f70:	4f3f      	ldr	r7, [pc, #252]	; (8003070 <HAL_ADC_Init+0x20c>)
 8002f72:	403b      	ands	r3, r7
 8002f74:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f76:	2180      	movs	r1, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8002f78:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f7a:	0053      	lsls	r3, r2, #1
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	05c9      	lsls	r1, r1, #23
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d00c      	beq.n	8002f9e <HAL_ADC_Init+0x13a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d008      	beq.n	8002f9e <HAL_ADC_Init+0x13a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002f8c:	4939      	ldr	r1, [pc, #228]	; (8003074 <HAL_ADC_Init+0x210>)
 8002f8e:	4f3a      	ldr	r7, [pc, #232]	; (8003078 <HAL_ADC_Init+0x214>)
 8002f90:	680b      	ldr	r3, [r1, #0]
 8002f92:	403b      	ands	r3, r7
 8002f94:	27f0      	movs	r7, #240	; 0xf0
 8002f96:	03bf      	lsls	r7, r7, #14
 8002f98:	403a      	ands	r2, r7
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 8002f9e:	2107      	movs	r1, #7
 8002fa0:	2770      	movs	r7, #112	; 0x70
 8002fa2:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002fa4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002fa6:	438b      	bics	r3, r1
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	616b      	str	r3, [r5, #20]
 8002fac:	6969      	ldr	r1, [r5, #20]
 8002fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fb0:	43b9      	bics	r1, r7
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002fb8:	9b01      	ldr	r3, [sp, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d133      	bne.n	8003026 <HAL_ADC_Init+0x1c2>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002fbe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002fc0:	3b10      	subs	r3, #16
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002fc6:	2107      	movs	r1, #7
 8002fc8:	696b      	ldr	r3, [r5, #20]
 8002fca:	400b      	ands	r3, r1
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d13a      	bne.n	8003046 <HAL_ADC_Init+0x1e2>
      == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	65e3      	str	r3, [r4, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002fd6:	3303      	adds	r3, #3
 8002fd8:	439a      	bics	r2, r3
 8002fda:	3b02      	subs	r3, #2
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8002fe0:	0030      	movs	r0, r6
 8002fe2:	b005      	add	sp, #20
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8002fe6:	68aa      	ldr	r2, [r5, #8]
 8002fe8:	4924      	ldr	r1, [pc, #144]	; (800307c <HAL_ADC_Init+0x218>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_ADC_Init+0x21c>)
 8002ff2:	4924      	ldr	r1, [pc, #144]	; (8003084 <HAL_ADC_Init+0x220>)
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	f7fd f8a9 	bl	800014c <__udivsi3>
 8002ffa:	3001      	adds	r0, #1
 8002ffc:	0040      	lsls	r0, r0, #1
 8002ffe:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 8003000:	9b03      	ldr	r3, [sp, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d100      	bne.n	8003008 <HAL_ADC_Init+0x1a4>
 8003006:	e746      	b.n	8002e96 <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8003008:	9b03      	ldr	r3, [sp, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	9303      	str	r3, [sp, #12]
 800300e:	e7f7      	b.n	8003000 <HAL_ADC_Init+0x19c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0389      	lsls	r1, r1, #14
 8003014:	e777      	b.n	8002f06 <HAL_ADC_Init+0xa2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003016:	2220      	movs	r2, #32
 8003018:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800301a:	433a      	orrs	r2, r7
 800301c:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003020:	4311      	orrs	r1, r2
 8003022:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003024:	e781      	b.n	8002f2a <HAL_ADC_Init+0xc6>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	9901      	ldr	r1, [sp, #4]
 800302a:	039b      	lsls	r3, r3, #14
 800302c:	4299      	cmp	r1, r3
 800302e:	d1ca      	bne.n	8002fc6 <HAL_ADC_Init+0x162>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003030:	211c      	movs	r1, #28
 8003032:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003034:	69e3      	ldr	r3, [r4, #28]
 8003036:	3b01      	subs	r3, #1
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	400b      	ands	r3, r1
 800303c:	392c      	subs	r1, #44	; 0x2c
 800303e:	4099      	lsls	r1, r3
 8003040:	000b      	movs	r3, r1
 8003042:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003044:	e7bd      	b.n	8002fc2 <HAL_ADC_Init+0x15e>
      ADC_STATE_CLR_SET(hadc->State,
 8003046:	2312      	movs	r3, #18
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003048:	2601      	movs	r6, #1
      ADC_STATE_CLR_SET(hadc->State,
 800304a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800304c:	439a      	bics	r2, r3
 800304e:	3b02      	subs	r3, #2
 8003050:	4313      	orrs	r3, r2
 8003052:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003056:	4333      	orrs	r3, r6
 8003058:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 800305a:	e7c1      	b.n	8002fe0 <HAL_ADC_Init+0x17c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800305e:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003060:	431a      	orrs	r2, r3
 8003062:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003064:	e7bc      	b.n	8002fe0 <HAL_ADC_Init+0x17c>
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	fffffefd 	.word	0xfffffefd
 800306c:	fffe0201 	.word	0xfffe0201
 8003070:	1ffffc02 	.word	0x1ffffc02
 8003074:	40012708 	.word	0x40012708
 8003078:	ffc3ffff 	.word	0xffc3ffff
 800307c:	6fffffe8 	.word	0x6fffffe8
 8003080:	20000000 	.word	0x20000000
 8003084:	00030d40 	.word	0x00030d40

08003088 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003088:	2300      	movs	r3, #0
{
 800308a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308c:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800308e:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003090:	0003      	movs	r3, r0
{
 8003092:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hadc);
 8003094:	3354      	adds	r3, #84	; 0x54
 8003096:	781a      	ldrb	r2, [r3, #0]
{
 8003098:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800309a:	2002      	movs	r0, #2
 800309c:	2a01      	cmp	r2, #1
 800309e:	d100      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x1a>
 80030a0:	e0bf      	b.n	8003222 <HAL_ADC_ConfigChannel+0x19a>
 80030a2:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030a4:	692f      	ldr	r7, [r5, #16]
  __HAL_LOCK(hadc);
 80030a6:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a8:	682e      	ldr	r6, [r5, #0]
 80030aa:	0030      	movs	r0, r6
 80030ac:	f7ff fed6 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d000      	beq.n	80030b6 <HAL_ADC_ConfigChannel+0x2e>
 80030b4:	e0ea      	b.n	800328c <HAL_ADC_ConfigChannel+0x204>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80030b6:	9b00      	ldr	r3, [sp, #0]
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030b8:	2204      	movs	r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	469c      	mov	ip, r3
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030c0:	4397      	bics	r7, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 80030c2:	4662      	mov	r2, ip
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80030c4:	9b00      	ldr	r3, [sp, #0]
 80030c6:	0609      	lsls	r1, r1, #24
 80030c8:	681b      	ldr	r3, [r3, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80030ca:	2a02      	cmp	r2, #2
 80030cc:	d100      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x48>
 80030ce:	e0b1      	b.n	8003234 <HAL_ADC_ConfigChannel+0x1ac>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030d0:	035a      	lsls	r2, r3, #13
 80030d2:	0b52      	lsrs	r2, r2, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030d4:	428f      	cmp	r7, r1
 80030d6:	d110      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x72>
 80030d8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 80030da:	430a      	orrs	r2, r1
 80030dc:	62b2      	str	r2, [r6, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 80030de:	9a00      	ldr	r2, [sp, #0]
 80030e0:	6970      	ldr	r0, [r6, #20]
 80030e2:	6892      	ldr	r2, [r2, #8]
 80030e4:	0219      	lsls	r1, r3, #8
 80030e6:	4c6c      	ldr	r4, [pc, #432]	; (8003298 <HAL_ADC_ConfigChannel+0x210>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	4022      	ands	r2, r4
 80030ec:	4388      	bics	r0, r1
 80030ee:	4302      	orrs	r2, r0
 80030f0:	6172      	str	r2, [r6, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	db60      	blt.n	80031b8 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f6:	2000      	movs	r0, #0
}
 80030f8:	e090      	b.n	800321c <HAL_ADC_ConfigChannel+0x194>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80030fa:	211f      	movs	r1, #31
 80030fc:	4667      	mov	r7, ip
 80030fe:	400f      	ands	r7, r1
 8003100:	3910      	subs	r1, #16
 8003102:	40b9      	lsls	r1, r7
 8003104:	43cc      	mvns	r4, r1
 8003106:	9401      	str	r4, [sp, #4]
 8003108:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 800310a:	438c      	bics	r4, r1
 800310c:	0021      	movs	r1, r4
 800310e:	2a00      	cmp	r2, #0
 8003110:	d112      	bne.n	8003138 <HAL_ADC_ConfigChannel+0xb0>
 8003112:	0e98      	lsrs	r0, r3, #26
 8003114:	321f      	adds	r2, #31
 8003116:	4010      	ands	r0, r2
 8003118:	40b8      	lsls	r0, r7
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800311a:	4662      	mov	r2, ip
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800311c:	4308      	orrs	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800311e:	0892      	lsrs	r2, r2, #2
 8003120:	69e9      	ldr	r1, [r5, #28]
 8003122:	3201      	adds	r2, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003124:	6628      	str	r0, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003126:	428a      	cmp	r2, r1
 8003128:	d8d9      	bhi.n	80030de <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 800312a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800312c:	9801      	ldr	r0, [sp, #4]
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	0f12      	lsrs	r2, r2, #28
 8003132:	40ba      	lsls	r2, r7
 8003134:	4001      	ands	r1, r0
 8003136:	e7d0      	b.n	80030da <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003138:	2201      	movs	r2, #1
 800313a:	4213      	tst	r3, r2
 800313c:	d1ec      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 800313e:	1892      	adds	r2, r2, r2
 8003140:	2001      	movs	r0, #1
 8003142:	4213      	tst	r3, r2
 8003144:	d1e8      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003146:	0010      	movs	r0, r2
 8003148:	3202      	adds	r2, #2
 800314a:	4213      	tst	r3, r2
 800314c:	d1e4      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 800314e:	3001      	adds	r0, #1
 8003150:	071a      	lsls	r2, r3, #28
 8003152:	d4e1      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003154:	3001      	adds	r0, #1
 8003156:	06da      	lsls	r2, r3, #27
 8003158:	d4de      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 800315a:	3001      	adds	r0, #1
 800315c:	069a      	lsls	r2, r3, #26
 800315e:	d4db      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003160:	3001      	adds	r0, #1
 8003162:	065a      	lsls	r2, r3, #25
 8003164:	d4d8      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003166:	3001      	adds	r0, #1
 8003168:	061a      	lsls	r2, r3, #24
 800316a:	d4d5      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 800316c:	3001      	adds	r0, #1
 800316e:	05da      	lsls	r2, r3, #23
 8003170:	d4d2      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003172:	3001      	adds	r0, #1
 8003174:	059a      	lsls	r2, r3, #22
 8003176:	d4cf      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003178:	3001      	adds	r0, #1
 800317a:	055a      	lsls	r2, r3, #21
 800317c:	d4cc      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 800317e:	3001      	adds	r0, #1
 8003180:	051a      	lsls	r2, r3, #20
 8003182:	d4c9      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003184:	3001      	adds	r0, #1
 8003186:	04da      	lsls	r2, r3, #19
 8003188:	d4c6      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 800318a:	3001      	adds	r0, #1
 800318c:	049a      	lsls	r2, r3, #18
 800318e:	d4c3      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003190:	3001      	adds	r0, #1
 8003192:	045a      	lsls	r2, r3, #17
 8003194:	d4c0      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 8003196:	3001      	adds	r0, #1
 8003198:	041a      	lsls	r2, r3, #16
 800319a:	d4bd      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 800319c:	3001      	adds	r0, #1
 800319e:	03da      	lsls	r2, r3, #15
 80031a0:	d4ba      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 80031a2:	3001      	adds	r0, #1
 80031a4:	039a      	lsls	r2, r3, #14
 80031a6:	d4b7      	bmi.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0018      	movs	r0, r3
 80031ac:	02d2      	lsls	r2, r2, #11
 80031ae:	4010      	ands	r0, r2
 80031b0:	4213      	tst	r3, r2
 80031b2:	d0b1      	beq.n	8003118 <HAL_ADC_ConfigChannel+0x90>
 80031b4:	2012      	movs	r0, #18
 80031b6:	e7af      	b.n	8003118 <HAL_ADC_ConfigChannel+0x90>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031b8:	24e0      	movs	r4, #224	; 0xe0
 80031ba:	4a38      	ldr	r2, [pc, #224]	; (800329c <HAL_ADC_ConfigChannel+0x214>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031bc:	4838      	ldr	r0, [pc, #224]	; (80032a0 <HAL_ADC_ConfigChannel+0x218>)
 80031be:	6811      	ldr	r1, [r2, #0]
 80031c0:	0464      	lsls	r4, r4, #17
 80031c2:	400c      	ands	r4, r1
 80031c4:	4283      	cmp	r3, r0
 80031c6:	d119      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x174>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031c8:	2080      	movs	r0, #128	; 0x80
 80031ca:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031cc:	4201      	tst	r1, r0
 80031ce:	d192      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	4934      	ldr	r1, [pc, #208]	; (80032a4 <HAL_ADC_ConfigChannel+0x21c>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	4323      	orrs	r3, r4
 80031d8:	4318      	orrs	r0, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031da:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <HAL_ADC_ConfigChannel+0x220>)
 80031dc:	6010      	str	r0, [r2, #0]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	4932      	ldr	r1, [pc, #200]	; (80032ac <HAL_ADC_ConfigChannel+0x224>)
 80031e2:	f7fc ffb3 	bl	800014c <__udivsi3>
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	200c      	movs	r0, #12
 80031ea:	4358      	muls	r0, r3
 80031ec:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 80031ee:	9b03      	ldr	r3, [sp, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d080      	beq.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
          {
            wait_loop_index--;
 80031f4:	9b03      	ldr	r3, [sp, #12]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	9303      	str	r3, [sp, #12]
 80031fa:	e7f8      	b.n	80031ee <HAL_ADC_ConfigChannel+0x166>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031fc:	482c      	ldr	r0, [pc, #176]	; (80032b0 <HAL_ADC_ConfigChannel+0x228>)
 80031fe:	4283      	cmp	r3, r0
 8003200:	d111      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x19e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	045b      	lsls	r3, r3, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003206:	0008      	movs	r0, r1
 8003208:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800320a:	4219      	tst	r1, r3
 800320c:	d000      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x188>
 800320e:	e772      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
 8003210:	6811      	ldr	r1, [r2, #0]
 8003212:	4e24      	ldr	r6, [pc, #144]	; (80032a4 <HAL_ADC_ConfigChannel+0x21c>)
 8003214:	4031      	ands	r1, r6
 8003216:	4321      	orrs	r1, r4
 8003218:	430b      	orrs	r3, r1
 800321a:	6013      	str	r3, [r2, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800321c:	2300      	movs	r3, #0
 800321e:	3554      	adds	r5, #84	; 0x54
 8003220:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 8003222:	b005      	add	sp, #20
 8003224:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003226:	4823      	ldr	r0, [pc, #140]	; (80032b4 <HAL_ADC_ConfigChannel+0x22c>)
 8003228:	4283      	cmp	r3, r0
 800322a:	d000      	beq.n	800322e <HAL_ADC_ConfigChannel+0x1a6>
 800322c:	e763      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	03db      	lsls	r3, r3, #15
 8003232:	e7e8      	b.n	8003206 <HAL_ADC_ConfigChannel+0x17e>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003234:	428f      	cmp	r7, r1
 8003236:	d104      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x1ba>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003238:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800323a:	0359      	lsls	r1, r3, #13
 800323c:	0b49      	lsrs	r1, r1, #13
 800323e:	438a      	bics	r2, r1
 8003240:	62b2      	str	r2, [r6, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003242:	2b00      	cmp	r3, #0
 8003244:	db00      	blt.n	8003248 <HAL_ADC_ConfigChannel+0x1c0>
 8003246:	e756      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_ADC_ConfigChannel+0x214>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324a:	4815      	ldr	r0, [pc, #84]	; (80032a0 <HAL_ADC_ConfigChannel+0x218>)
 800324c:	6811      	ldr	r1, [r2, #0]
 800324e:	4283      	cmp	r3, r0
 8003250:	d108      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1dc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003252:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003254:	6810      	ldr	r0, [r2, #0]
 8003256:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003258:	400b      	ands	r3, r1
 800325a:	4912      	ldr	r1, [pc, #72]	; (80032a4 <HAL_ADC_ConfigChannel+0x21c>)
 800325c:	4001      	ands	r1, r0
 800325e:	430b      	orrs	r3, r1
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e748      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003264:	4812      	ldr	r0, [pc, #72]	; (80032b0 <HAL_ADC_ConfigChannel+0x228>)
 8003266:	4283      	cmp	r3, r0
 8003268:	d103      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x1ea>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326a:	23c0      	movs	r3, #192	; 0xc0
 800326c:	6810      	ldr	r0, [r2, #0]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	e7f2      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1d0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003272:	4810      	ldr	r0, [pc, #64]	; (80032b4 <HAL_ADC_ConfigChannel+0x22c>)
 8003274:	4283      	cmp	r3, r0
 8003276:	d000      	beq.n	800327a <HAL_ADC_ConfigChannel+0x1f2>
 8003278:	e73d      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800327a:	20c0      	movs	r0, #192	; 0xc0
 800327c:	0440      	lsls	r0, r0, #17
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	4001      	ands	r1, r0
 8003282:	4808      	ldr	r0, [pc, #32]	; (80032a4 <HAL_ADC_ConfigChannel+0x21c>)
 8003284:	4003      	ands	r3, r0
 8003286:	4319      	orrs	r1, r3
 8003288:	6011      	str	r1, [r2, #0]
 800328a:	e734      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328c:	2320      	movs	r3, #32
 800328e:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003290:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003292:	4313      	orrs	r3, r2
 8003294:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003296:	e7c1      	b.n	800321c <HAL_ADC_ConfigChannel+0x194>
 8003298:	07ffff00 	.word	0x07ffff00
 800329c:	40012708 	.word	0x40012708
 80032a0:	b0001000 	.word	0xb0001000
 80032a4:	fe3fffff 	.word	0xfe3fffff
 80032a8:	20000000 	.word	0x20000000
 80032ac:	00030d40 	.word	0x00030d40
 80032b0:	b8004000 	.word	0xb8004000
 80032b4:	b4002000 	.word	0xb4002000

080032b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ba:	25ff      	movs	r5, #255	; 0xff
 80032bc:	2403      	movs	r4, #3
 80032be:	002a      	movs	r2, r5
 80032c0:	4004      	ands	r4, r0
 80032c2:	00e4      	lsls	r4, r4, #3
 80032c4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032c6:	0189      	lsls	r1, r1, #6
 80032c8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ca:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032cc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ce:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80032d0:	2800      	cmp	r0, #0
 80032d2:	db0a      	blt.n	80032ea <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032d4:	24c0      	movs	r4, #192	; 0xc0
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_NVIC_SetPriority+0x4c>)
 80032d8:	0880      	lsrs	r0, r0, #2
 80032da:	0080      	lsls	r0, r0, #2
 80032dc:	18c0      	adds	r0, r0, r3
 80032de:	00a4      	lsls	r4, r4, #2
 80032e0:	5903      	ldr	r3, [r0, r4]
 80032e2:	4013      	ands	r3, r2
 80032e4:	430b      	orrs	r3, r1
 80032e6:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80032e8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ea:	200f      	movs	r0, #15
 80032ec:	4003      	ands	r3, r0
 80032ee:	3b08      	subs	r3, #8
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <HAL_NVIC_SetPriority+0x50>)
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	181b      	adds	r3, r3, r0
 80032f8:	69d8      	ldr	r0, [r3, #28]
 80032fa:	4002      	ands	r2, r0
 80032fc:	430a      	orrs	r2, r1
 80032fe:	61da      	str	r2, [r3, #28]
 8003300:	e7f2      	b.n	80032e8 <HAL_NVIC_SetPriority+0x30>
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800330c:	2800      	cmp	r0, #0
 800330e:	db05      	blt.n	800331c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003310:	231f      	movs	r3, #31
 8003312:	4018      	ands	r0, r3
 8003314:	3b1e      	subs	r3, #30
 8003316:	4083      	lsls	r3, r0
 8003318:	4a01      	ldr	r2, [pc, #4]	; (8003320 <HAL_NVIC_EnableIRQ+0x14>)
 800331a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800331c:	4770      	bx	lr
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	e000e100 	.word	0xe000e100

08003324 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003324:	b510      	push	{r4, lr}
 8003326:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003328:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	189b      	adds	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003334:	6800      	ldr	r0, [r0, #0]
 8003336:	2114      	movs	r1, #20
 8003338:	b2c0      	uxtb	r0, r0
 800333a:	3808      	subs	r0, #8
 800333c:	f7fc ff06 	bl	800014c <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8003342:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003344:	231f      	movs	r3, #31
 8003346:	4018      	ands	r0, r3
 8003348:	3b1e      	subs	r3, #30
 800334a:	4083      	lsls	r3, r0
 800334c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800334e:	bd10      	pop	{r4, pc}
 8003350:	10008200 	.word	0x10008200
 8003354:	40020880 	.word	0x40020880

08003358 <HAL_DMA_Init>:
{
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800335c:	2001      	movs	r0, #1
  if (hdma == NULL)
 800335e:	2c00      	cmp	r4, #0
 8003360:	d048      	beq.n	80033f4 <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003362:	6825      	ldr	r5, [r4, #0]
 8003364:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_DMA_Init+0xa8>)
 8003366:	2114      	movs	r1, #20
 8003368:	18e8      	adds	r0, r5, r3
 800336a:	f7fc feef 	bl	800014c <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 800336e:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003370:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8003372:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003374:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003376:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	4a22      	ldr	r2, [pc, #136]	; (8003404 <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800337c:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800337e:	4013      	ands	r3, r2
 8003380:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003382:	68e3      	ldr	r3, [r4, #12]
 8003384:	6921      	ldr	r1, [r4, #16]
 8003386:	433b      	orrs	r3, r7
 8003388:	430b      	orrs	r3, r1
 800338a:	6961      	ldr	r1, [r4, #20]
 800338c:	682a      	ldr	r2, [r5, #0]
 800338e:	430b      	orrs	r3, r1
 8003390:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003392:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003394:	430b      	orrs	r3, r1
 8003396:	69e1      	ldr	r1, [r4, #28]
 8003398:	430b      	orrs	r3, r1
 800339a:	6a21      	ldr	r1, [r4, #32]
 800339c:	430b      	orrs	r3, r1
 800339e:	4313      	orrs	r3, r2
 80033a0:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033a2:	f7ff ffbf 	bl	8003324 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	01db      	lsls	r3, r3, #7
 80033aa:	429f      	cmp	r7, r3
 80033ac:	d101      	bne.n	80033b2 <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033ae:	2300      	movs	r3, #0
 80033b0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033b2:	233f      	movs	r3, #63	; 0x3f
 80033b4:	6862      	ldr	r2, [r4, #4]
 80033b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80033b8:	4013      	ands	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80033be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033c0:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033c2:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033c4:	2a03      	cmp	r2, #3
 80033c6:	d816      	bhi.n	80033f6 <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ca:	4810      	ldr	r0, [pc, #64]	; (800340c <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033cc:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033ce:	2203      	movs	r2, #3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	3a02      	subs	r2, #2
 80033d6:	409a      	lsls	r2, r3
 80033d8:	65a2      	str	r2, [r4, #88]	; 0x58
 80033da:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033dc:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033de:	0089      	lsls	r1, r1, #2
 80033e0:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033e2:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033e4:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033e6:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80033ea:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 80033ee:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 80033f0:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 80033f2:	77e0      	strb	r0, [r4, #31]
}
 80033f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80033fa:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80033fe:	e7f3      	b.n	80033e8 <HAL_DMA_Init+0x90>
 8003400:	bffdfff8 	.word	0xbffdfff8
 8003404:	ffff800f 	.word	0xffff800f
 8003408:	1000823f 	.word	0x1000823f
 800340c:	40020940 	.word	0x40020940

08003410 <HAL_DMA_Abort>:
{
 8003410:	0003      	movs	r3, r0
 8003412:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 8003414:	2001      	movs	r0, #1
  if (NULL == hdma)
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800341a:	1d98      	adds	r0, r3, #6
 800341c:	7fc2      	ldrb	r2, [r0, #31]
 800341e:	1d5c      	adds	r4, r3, #5
 8003420:	2a02      	cmp	r2, #2
 8003422:	d005      	beq.n	8003430 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003424:	2204      	movs	r2, #4
 8003426:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003428:	2300      	movs	r3, #0
    return HAL_ERROR;
 800342a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800342c:	77e3      	strb	r3, [r4, #31]
}
 800342e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003430:	250e      	movs	r5, #14
 8003432:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003434:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003436:	680a      	ldr	r2, [r1, #0]
 8003438:	43aa      	bics	r2, r5
 800343a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800343c:	6832      	ldr	r2, [r6, #0]
 800343e:	4d10      	ldr	r5, [pc, #64]	; (8003480 <HAL_DMA_Abort+0x70>)
 8003440:	402a      	ands	r2, r5
 8003442:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8003444:	2201      	movs	r2, #1
 8003446:	680e      	ldr	r6, [r1, #0]
 8003448:	4396      	bics	r6, r2
 800344a:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800344c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800344e:	321b      	adds	r2, #27
 8003450:	4011      	ands	r1, r2
 8003452:	3a1b      	subs	r2, #27
 8003454:	408a      	lsls	r2, r1
 8003456:	4e0b      	ldr	r6, [pc, #44]	; (8003484 <HAL_DMA_Abort+0x74>)
 8003458:	6877      	ldr	r7, [r6, #4]
 800345a:	433a      	orrs	r2, r7
 800345c:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800345e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003462:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003466:	2a00      	cmp	r2, #0
 8003468:	d005      	beq.n	8003476 <HAL_DMA_Abort+0x66>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800346a:	6811      	ldr	r1, [r2, #0]
 800346c:	4029      	ands	r1, r5
 800346e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003476:	2301      	movs	r3, #1
 8003478:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 800347a:	2000      	movs	r0, #0
 800347c:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 800347e:	e7d6      	b.n	800342e <HAL_DMA_Abort+0x1e>
 8003480:	fffffeff 	.word	0xfffffeff
 8003484:	40020000 	.word	0x40020000

08003488 <HAL_DMA_Abort_IT>:
{
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800348a:	1d81      	adds	r1, r0, #6
 800348c:	7fcb      	ldrb	r3, [r1, #31]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003492:	2304      	movs	r3, #4
 8003494:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003496:	3b03      	subs	r3, #3
}
 8003498:	0018      	movs	r0, r3
 800349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349c:	240e      	movs	r4, #14
 800349e:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80034a0:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a2:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034a4:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a6:	43a3      	bics	r3, r4
 80034a8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80034aa:	2301      	movs	r3, #1
 80034ac:	6814      	ldr	r4, [r2, #0]
 80034ae:	439c      	bics	r4, r3
 80034b0:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034b2:	682a      	ldr	r2, [r5, #0]
 80034b4:	4c10      	ldr	r4, [pc, #64]	; (80034f8 <HAL_DMA_Abort_IT+0x70>)
 80034b6:	4022      	ands	r2, r4
 80034b8:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80034ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80034bc:	4d0f      	ldr	r5, [pc, #60]	; (80034fc <HAL_DMA_Abort_IT+0x74>)
 80034be:	403a      	ands	r2, r7
 80034c0:	4093      	lsls	r3, r2
 80034c2:	686e      	ldr	r6, [r5, #4]
 80034c4:	4333      	orrs	r3, r6
 80034c6:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80034ca:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80034cc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80034ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4022      	ands	r2, r4
 80034d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80034dc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80034de:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80034e2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80034e4:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 80034e6:	1d43      	adds	r3, r0, #5
 80034e8:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 80034ea:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 80034ee:	42a2      	cmp	r2, r4
 80034f0:	d0d2      	beq.n	8003498 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80034f2:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	0023      	movs	r3, r4
 80034f6:	e7cf      	b.n	8003498 <HAL_DMA_Abort_IT+0x10>
 80034f8:	fffffeff 	.word	0xfffffeff
 80034fc:	40020000 	.word	0x40020000

08003500 <HAL_DMA_IRQHandler>:
{
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003502:	241c      	movs	r4, #28
 8003504:	2704      	movs	r7, #4
 8003506:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8003508:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800350a:	4021      	ands	r1, r4
 800350c:	003c      	movs	r4, r7
 800350e:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8003510:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003512:	6803      	ldr	r3, [r0, #0]
 8003514:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003516:	4226      	tst	r6, r4
 8003518:	d00f      	beq.n	800353a <HAL_DMA_IRQHandler+0x3a>
 800351a:	423d      	tst	r5, r7
 800351c:	d00d      	beq.n	800353a <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	0689      	lsls	r1, r1, #26
 8003522:	d402      	bmi.n	800352a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	43b9      	bics	r1, r7
 8003528:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800352a:	6853      	ldr	r3, [r2, #4]
 800352c:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 800352e:	6b03      	ldr	r3, [r0, #48]	; 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003530:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01b      	beq.n	800356e <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8003536:	4798      	blx	r3
  return;
 8003538:	e019      	b.n	800356e <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800353a:	2702      	movs	r7, #2
 800353c:	003c      	movs	r4, r7
 800353e:	408c      	lsls	r4, r1
 8003540:	4226      	tst	r6, r4
 8003542:	d015      	beq.n	8003570 <HAL_DMA_IRQHandler+0x70>
 8003544:	423d      	tst	r5, r7
 8003546:	d013      	beq.n	8003570 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	0689      	lsls	r1, r1, #26
 800354c:	d406      	bmi.n	800355c <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800354e:	250a      	movs	r5, #10
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	43a9      	bics	r1, r5
 8003554:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003556:	2101      	movs	r1, #1
 8003558:	1d83      	adds	r3, r0, #6
 800355a:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800355c:	6853      	ldr	r3, [r2, #4]
 800355e:	431c      	orrs	r4, r3
 8003560:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003562:	2200      	movs	r2, #0
 8003564:	1d43      	adds	r3, r0, #5
 8003566:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 8003568:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800356a:	4293      	cmp	r3, r2
 800356c:	d1e3      	bne.n	8003536 <HAL_DMA_IRQHandler+0x36>
}
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003570:	2408      	movs	r4, #8
 8003572:	0027      	movs	r7, r4
 8003574:	408f      	lsls	r7, r1
 8003576:	423e      	tst	r6, r7
 8003578:	d0f9      	beq.n	800356e <HAL_DMA_IRQHandler+0x6e>
 800357a:	4225      	tst	r5, r4
 800357c:	d0f7      	beq.n	800356e <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357e:	250e      	movs	r5, #14
 8003580:	681c      	ldr	r4, [r3, #0]
 8003582:	43ac      	bics	r4, r5
 8003584:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003586:	2301      	movs	r3, #1
 8003588:	001d      	movs	r5, r3
 800358a:	408d      	lsls	r5, r1
 800358c:	0029      	movs	r1, r5
 800358e:	6854      	ldr	r4, [r2, #4]
 8003590:	4321      	orrs	r1, r4
 8003592:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003594:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003596:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003598:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800359a:	2200      	movs	r2, #0
 800359c:	1d43      	adds	r3, r0, #5
 800359e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80035a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035a2:	e7e2      	b.n	800356a <HAL_DMA_IRQHandler+0x6a>
 80035a4:	40020000 	.word	0x40020000

080035a8 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80035a8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80035aa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80035ac:	6813      	ldr	r3, [r2, #0]
{
 80035ae:	b570      	push	{r4, r5, r6, lr}
 80035b0:	0004      	movs	r4, r0
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80035b2:	4219      	tst	r1, r3
 80035b4:	d00f      	beq.n	80035d6 <HAL_DMAEx_MUX_IRQHandler+0x2e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035b6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80035b8:	4d13      	ldr	r5, [pc, #76]	; (8003608 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 80035ba:	6803      	ldr	r3, [r0, #0]
 80035bc:	402b      	ands	r3, r5
 80035be:	6003      	str	r3, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80035c0:	2380      	movs	r3, #128	; 0x80
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c2:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80035c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4313      	orrs	r3, r2
 80035ca:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80035cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_DMAEx_MUX_IRQHandler+0x2e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035d2:	0020      	movs	r0, r4
 80035d4:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80035d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80035dc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80035de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e0:	680a      	ldr	r2, [r1, #0]
 80035e2:	4210      	tst	r0, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4d07      	ldr	r5, [pc, #28]	; (8003608 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 80035ea:	402a      	ands	r2, r5
 80035ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80035ee:	2380      	movs	r3, #128	; 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035f0:	6048      	str	r0, [r1, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80035f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4313      	orrs	r3, r2
 80035f8:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80035fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003600:	0020      	movs	r0, r4
 8003602:	4798      	blx	r3
      }
    }
  }
}
 8003604:	bd70      	pop	{r4, r5, r6, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	fffffeff 	.word	0xfffffeff

0800360c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800360c:	2300      	movs	r3, #0
{
 800360e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003610:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003612:	680a      	ldr	r2, [r1, #0]
 8003614:	0014      	movs	r4, r2
 8003616:	40dc      	lsrs	r4, r3
 8003618:	d101      	bne.n	800361e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800361a:	b005      	add	sp, #20
 800361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800361e:	2501      	movs	r5, #1
 8003620:	0014      	movs	r4, r2
 8003622:	409d      	lsls	r5, r3
 8003624:	402c      	ands	r4, r5
 8003626:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8003628:	422a      	tst	r2, r5
 800362a:	d100      	bne.n	800362e <HAL_GPIO_Init+0x22>
 800362c:	e091      	b.n	8003752 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800362e:	684a      	ldr	r2, [r1, #4]
 8003630:	005f      	lsls	r7, r3, #1
 8003632:	4694      	mov	ip, r2
 8003634:	2203      	movs	r2, #3
 8003636:	4664      	mov	r4, ip
 8003638:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800363a:	2403      	movs	r4, #3
 800363c:	40bc      	lsls	r4, r7
 800363e:	43e4      	mvns	r4, r4
 8003640:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003642:	1e54      	subs	r4, r2, #1
 8003644:	2c01      	cmp	r4, #1
 8003646:	d82e      	bhi.n	80036a6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8003648:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800364a:	9c01      	ldr	r4, [sp, #4]
 800364c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800364e:	68cc      	ldr	r4, [r1, #12]
 8003650:	40bc      	lsls	r4, r7
 8003652:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003654:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003656:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003658:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365a:	43ac      	bics	r4, r5
 800365c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365e:	4664      	mov	r4, ip
 8003660:	0924      	lsrs	r4, r4, #4
 8003662:	4034      	ands	r4, r6
 8003664:	409c      	lsls	r4, r3
 8003666:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003668:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800366a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800366c:	9c01      	ldr	r4, [sp, #4]
 800366e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003670:	688c      	ldr	r4, [r1, #8]
 8003672:	40bc      	lsls	r4, r7
 8003674:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003676:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003678:	2a02      	cmp	r2, #2
 800367a:	d116      	bne.n	80036aa <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800367c:	2507      	movs	r5, #7
 800367e:	260f      	movs	r6, #15
 8003680:	401d      	ands	r5, r3
 8003682:	00ad      	lsls	r5, r5, #2
 8003684:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8003686:	08dc      	lsrs	r4, r3, #3
 8003688:	00a4      	lsls	r4, r4, #2
 800368a:	1904      	adds	r4, r0, r4
 800368c:	9402      	str	r4, [sp, #8]
 800368e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003690:	9603      	str	r6, [sp, #12]
 8003692:	0026      	movs	r6, r4
 8003694:	9c03      	ldr	r4, [sp, #12]
 8003696:	43a6      	bics	r6, r4
 8003698:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800369a:	690e      	ldr	r6, [r1, #16]
 800369c:	40ae      	lsls	r6, r5
 800369e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80036a0:	9c02      	ldr	r4, [sp, #8]
 80036a2:	6226      	str	r6, [r4, #32]
 80036a4:	e001      	b.n	80036aa <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a6:	2a03      	cmp	r2, #3
 80036a8:	d1df      	bne.n	800366a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036aa:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80036ac:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036ae:	9d01      	ldr	r5, [sp, #4]
 80036b0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036b2:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036b4:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 80036b6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036b8:	4662      	mov	r2, ip
 80036ba:	02a4      	lsls	r4, r4, #10
 80036bc:	4222      	tst	r2, r4
 80036be:	d048      	beq.n	8003752 <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 80036c0:	4a25      	ldr	r2, [pc, #148]	; (8003758 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80036c2:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 80036c4:	089c      	lsrs	r4, r3, #2
 80036c6:	00a4      	lsls	r4, r4, #2
 80036c8:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80036ca:	220f      	movs	r2, #15
 80036cc:	401d      	ands	r5, r3
 80036ce:	00ed      	lsls	r5, r5, #3
 80036d0:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036d2:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80036d4:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036d6:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80036d8:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036da:	2200      	movs	r2, #0
 80036dc:	42b8      	cmp	r0, r7
 80036de:	d00c      	beq.n	80036fa <HAL_GPIO_Init+0xee>
 80036e0:	4f1e      	ldr	r7, [pc, #120]	; (800375c <HAL_GPIO_Init+0x150>)
 80036e2:	3201      	adds	r2, #1
 80036e4:	42b8      	cmp	r0, r7
 80036e6:	d008      	beq.n	80036fa <HAL_GPIO_Init+0xee>
 80036e8:	4f1d      	ldr	r7, [pc, #116]	; (8003760 <HAL_GPIO_Init+0x154>)
 80036ea:	3201      	adds	r2, #1
 80036ec:	42b8      	cmp	r0, r7
 80036ee:	d004      	beq.n	80036fa <HAL_GPIO_Init+0xee>
 80036f0:	4f1c      	ldr	r7, [pc, #112]	; (8003764 <HAL_GPIO_Init+0x158>)
 80036f2:	3201      	adds	r2, #1
 80036f4:	42b8      	cmp	r0, r7
 80036f6:	d000      	beq.n	80036fa <HAL_GPIO_Init+0xee>
 80036f8:	3202      	adds	r2, #2
 80036fa:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036fc:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036fe:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8003700:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 8003702:	4c15      	ldr	r4, [pc, #84]	; (8003758 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8003704:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 8003706:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8003708:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800370a:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 800370c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800370e:	02ff      	lsls	r7, r7, #11
 8003710:	d401      	bmi.n	8003716 <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 8003712:	0035      	movs	r5, r6
 8003714:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003716:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8003718:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800371a:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800371c:	9d00      	ldr	r5, [sp, #0]
 800371e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003720:	02bf      	lsls	r7, r7, #10
 8003722:	d401      	bmi.n	8003728 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8003724:	0035      	movs	r5, r6
 8003726:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003728:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 800372a:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 800372c:	4c0e      	ldr	r4, [pc, #56]	; (8003768 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 800372e:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8003730:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8003732:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003734:	03bf      	lsls	r7, r7, #14
 8003736:	d401      	bmi.n	800373c <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8003738:	0035      	movs	r5, r6
 800373a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373c:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 800373e:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 8003740:	4c0a      	ldr	r4, [pc, #40]	; (800376c <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 8003742:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8003744:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8003746:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003748:	03ff      	lsls	r7, r7, #15
 800374a:	d401      	bmi.n	8003750 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 800374c:	4015      	ands	r5, r2
 800374e:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8003750:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 8003752:	3301      	adds	r3, #1
 8003754:	e75d      	b.n	8003612 <HAL_GPIO_Init+0x6>
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	40021800 	.word	0x40021800
 800375c:	50000400 	.word	0x50000400
 8003760:	50000800 	.word	0x50000800
 8003764:	50000c00 	.word	0x50000c00
 8003768:	40021808 	.word	0x40021808
 800376c:	40021804 	.word	0x40021804

08003770 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003770:	2a00      	cmp	r2, #0
 8003772:	d001      	beq.n	8003778 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003774:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003776:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003778:	6281      	str	r1, [r0, #40]	; 0x28
}
 800377a:	e7fc      	b.n	8003776 <HAL_GPIO_WritePin+0x6>

0800377c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8003780:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003782:	2c00      	cmp	r4, #0
 8003784:	d03f      	beq.n	8003806 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	0025      	movs	r5, r4
 8003788:	3541      	adds	r5, #65	; 0x41
 800378a:	782b      	ldrb	r3, [r5, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	0023      	movs	r3, r4
 8003794:	3340      	adds	r3, #64	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003796:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003798:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800379a:	f7ff f889 	bl	80028b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800379e:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80037a4:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037aa:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	438a      	bics	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037b0:	491a      	ldr	r1, [pc, #104]	; (800381c <HAL_I2C_Init+0xa0>)
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	400a      	ands	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	4919      	ldr	r1, [pc, #100]	; (8003820 <HAL_I2C_Init+0xa4>)
 80037bc:	400a      	ands	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c0:	2801      	cmp	r0, #1
 80037c2:	d121      	bne.n	8003808 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	0212      	lsls	r2, r2, #8
 80037c8:	4332      	orrs	r2, r6
 80037ca:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037cc:	6858      	ldr	r0, [r3, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <HAL_I2C_Init+0xa8>)
 80037d0:	4302      	orrs	r2, r0
 80037d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037d4:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d6:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037d8:	400a      	ands	r2, r1
 80037da:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037dc:	6961      	ldr	r1, [r4, #20]
 80037de:	6922      	ldr	r2, [r4, #16]
 80037e0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037e2:	69a1      	ldr	r1, [r4, #24]
 80037e4:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e6:	430a      	orrs	r2, r1
 80037e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ea:	6a21      	ldr	r1, [r4, #32]
 80037ec:	69e2      	ldr	r2, [r4, #28]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80037f2:	2201      	movs	r2, #1
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003800:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003802:	3442      	adds	r4, #66	; 0x42
 8003804:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003806:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003808:	2284      	movs	r2, #132	; 0x84
 800380a:	0212      	lsls	r2, r2, #8
 800380c:	4332      	orrs	r2, r6
 800380e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003810:	2802      	cmp	r0, #2
 8003812:	d1db      	bne.n	80037cc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	e7d7      	b.n	80037cc <HAL_I2C_Init+0x50>
 800381c:	f0ffffff 	.word	0xf0ffffff
 8003820:	ffff7fff 	.word	0xffff7fff
 8003824:	02008000 	.word	0x02008000

08003828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382a:	0004      	movs	r4, r0
 800382c:	3441      	adds	r4, #65	; 0x41
 800382e:	7822      	ldrb	r2, [r4, #0]
{
 8003830:	0003      	movs	r3, r0
 8003832:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003834:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003836:	b2d6      	uxtb	r6, r2
 8003838:	2a20      	cmp	r2, #32
 800383a:	d118      	bne.n	800386e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800383c:	001d      	movs	r5, r3
 800383e:	3540      	adds	r5, #64	; 0x40
 8003840:	782a      	ldrb	r2, [r5, #0]
 8003842:	2a01      	cmp	r2, #1
 8003844:	d013      	beq.n	800386e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3a23      	subs	r2, #35	; 0x23
 800384e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003850:	4807      	ldr	r0, [pc, #28]	; (8003870 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003852:	4391      	bics	r1, r2
 8003854:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003856:	6819      	ldr	r1, [r3, #0]
 8003858:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800385a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800385c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	4339      	orrs	r1, r7
 8003862:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800386a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800386c:	7028      	strb	r0, [r5, #0]
  }
}
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003870:	ffffefff 	.word	0xffffefff

08003874 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003874:	0002      	movs	r2, r0
{
 8003876:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003878:	3241      	adds	r2, #65	; 0x41
 800387a:	7814      	ldrb	r4, [r2, #0]
{
 800387c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800387e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003880:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	2c20      	cmp	r4, #32
 8003884:	d117      	bne.n	80038b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003886:	001c      	movs	r4, r3
 8003888:	3440      	adds	r4, #64	; 0x40
 800388a:	7826      	ldrb	r6, [r4, #0]
 800388c:	2e01      	cmp	r6, #1
 800388e:	d012      	beq.n	80038b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003890:	3022      	adds	r0, #34	; 0x22
 8003892:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3823      	subs	r0, #35	; 0x23
 8003898:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800389a:	4f07      	ldr	r7, [pc, #28]	; (80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800389c:	4386      	bics	r6, r0
 800389e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80038a0:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80038a2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80038a4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80038a6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80038a8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	4308      	orrs	r0, r1
 80038ae:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80038b0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80038b4:	7020      	strb	r0, [r4, #0]
  }
}
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b8:	fffff0ff 	.word	0xfffff0ff

080038bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038bc:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038be:	4c11      	ldr	r4, [pc, #68]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80038c0:	4911      	ldr	r1, [pc, #68]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80038c2:	6823      	ldr	r3, [r4, #0]
{
 80038c4:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038c6:	400b      	ands	r3, r1
 80038c8:	4303      	orrs	r3, r0
 80038ca:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038cc:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80038ce:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d10e      	bne.n	80038f4 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x50>)
 80038d8:	490d      	ldr	r1, [pc, #52]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	2306      	movs	r3, #6
 80038de:	4358      	muls	r0, r3
 80038e0:	f7fc fc34 	bl	800014c <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038e4:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038e6:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038e8:	00d2      	lsls	r2, r2, #3
 80038ea:	6961      	ldr	r1, [r4, #20]
 80038ec:	0008      	movs	r0, r1
 80038ee:	4010      	ands	r0, r2
 80038f0:	4211      	tst	r1, r2
 80038f2:	d100      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80038f4:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80038fa:	3b01      	subs	r3, #1
 80038fc:	e7f5      	b.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80038fe:	2003      	movs	r0, #3
 8003900:	e7f8      	b.n	80038f4 <HAL_PWREx_ControlVoltageScaling+0x38>
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	40007000 	.word	0x40007000
 8003908:	fffff9ff 	.word	0xfffff9ff
 800390c:	20000000 	.word	0x20000000
 8003910:	000f4240 	.word	0x000f4240

08003914 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003916:	0004      	movs	r4, r0
 8003918:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800391a:	2800      	cmp	r0, #0
 800391c:	d023      	beq.n	8003966 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	6803      	ldr	r3, [r0, #0]
 8003920:	07db      	lsls	r3, r3, #31
 8003922:	d410      	bmi.n	8003946 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	079b      	lsls	r3, r3, #30
 8003928:	d45e      	bmi.n	80039e8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	071b      	lsls	r3, r3, #28
 800392e:	d500      	bpl.n	8003932 <HAL_RCC_OscConfig+0x1e>
 8003930:	e0c2      	b.n	8003ab8 <HAL_RCC_OscConfig+0x1a4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	075b      	lsls	r3, r3, #29
 8003936:	d500      	bpl.n	800393a <HAL_RCC_OscConfig+0x26>
 8003938:	e0f3      	b.n	8003b22 <HAL_RCC_OscConfig+0x20e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800393a:	69e3      	ldr	r3, [r4, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d000      	beq.n	8003942 <HAL_RCC_OscConfig+0x2e>
 8003940:	e17a      	b.n	8003c38 <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2000      	movs	r0, #0
 8003944:	e029      	b.n	800399a <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003946:	2238      	movs	r2, #56	; 0x38
 8003948:	4daf      	ldr	r5, [pc, #700]	; (8003c08 <HAL_RCC_OscConfig+0x2f4>)
 800394a:	68ab      	ldr	r3, [r5, #8]
 800394c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003950:	2b10      	cmp	r3, #16
 8003952:	d10a      	bne.n	800396a <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003954:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003956:	079b      	lsls	r3, r3, #30
 8003958:	d109      	bne.n	800396e <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	039b      	lsls	r3, r3, #14
 800395e:	d5e1      	bpl.n	8003924 <HAL_RCC_OscConfig+0x10>
 8003960:	6863      	ldr	r3, [r4, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1de      	bne.n	8003924 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
 8003968:	e017      	b.n	800399a <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800396a:	2b08      	cmp	r3, #8
 800396c:	d0f5      	beq.n	800395a <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	0252      	lsls	r2, r2, #9
 8003974:	4293      	cmp	r3, r2
 8003976:	d112      	bne.n	800399e <HAL_RCC_OscConfig+0x8a>
 8003978:	682a      	ldr	r2, [r5, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800397e:	f7ff fa5b 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003984:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003986:	02bf      	lsls	r7, r7, #10
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	423b      	tst	r3, r7
 800398c:	d1ca      	bne.n	8003924 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398e:	f7ff fa53 	bl	8002e38 <HAL_GetTick>
 8003992:	1b80      	subs	r0, r0, r6
 8003994:	2864      	cmp	r0, #100	; 0x64
 8003996:	d9f7      	bls.n	8003988 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8003998:	2003      	movs	r0, #3
}
 800399a:	b005      	add	sp, #20
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399e:	21a0      	movs	r1, #160	; 0xa0
 80039a0:	02c9      	lsls	r1, r1, #11
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d108      	bne.n	80039b8 <HAL_RCC_OscConfig+0xa4>
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	6829      	ldr	r1, [r5, #0]
 80039aa:	02db      	lsls	r3, r3, #11
 80039ac:	430b      	orrs	r3, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b6:	e7e2      	b.n	800397e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	682a      	ldr	r2, [r5, #0]
 80039ba:	4994      	ldr	r1, [pc, #592]	; (8003c0c <HAL_RCC_OscConfig+0x2f8>)
 80039bc:	400a      	ands	r2, r1
 80039be:	602a      	str	r2, [r5, #0]
 80039c0:	682a      	ldr	r2, [r5, #0]
 80039c2:	4993      	ldr	r1, [pc, #588]	; (8003c10 <HAL_RCC_OscConfig+0x2fc>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1d8      	bne.n	800397e <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80039cc:	f7ff fa34 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80039d2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d4:	02bf      	lsls	r7, r7, #10
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	423b      	tst	r3, r7
 80039da:	d0a3      	beq.n	8003924 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7ff fa2c 	bl	8002e38 <HAL_GetTick>
 80039e0:	1b80      	subs	r0, r0, r6
 80039e2:	2864      	cmp	r0, #100	; 0x64
 80039e4:	d9f7      	bls.n	80039d6 <HAL_RCC_OscConfig+0xc2>
 80039e6:	e7d7      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e8:	2238      	movs	r2, #56	; 0x38
 80039ea:	4d87      	ldr	r5, [pc, #540]	; (8003c08 <HAL_RCC_OscConfig+0x2f4>)
 80039ec:	68ab      	ldr	r3, [r5, #8]
 80039ee:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d127      	bne.n	8003a46 <HAL_RCC_OscConfig+0x132>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f6:	2103      	movs	r1, #3
 80039f8:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039fa:	2a02      	cmp	r2, #2
 80039fc:	d125      	bne.n	8003a4a <HAL_RCC_OscConfig+0x136>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039fe:	682a      	ldr	r2, [r5, #0]
 8003a00:	0552      	lsls	r2, r2, #21
 8003a02:	d502      	bpl.n	8003a0a <HAL_RCC_OscConfig+0xf6>
 8003a04:	68e2      	ldr	r2, [r4, #12]
 8003a06:	2a00      	cmp	r2, #0
 8003a08:	d0ad      	beq.n	8003966 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0a:	6869      	ldr	r1, [r5, #4]
 8003a0c:	6962      	ldr	r2, [r4, #20]
 8003a0e:	4881      	ldr	r0, [pc, #516]	; (8003c14 <HAL_RCC_OscConfig+0x300>)
 8003a10:	0212      	lsls	r2, r2, #8
 8003a12:	4001      	ands	r1, r0
 8003a14:	430a      	orrs	r2, r1
 8003a16:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCC_OscConfig+0x122>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	4a7e      	ldr	r2, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x304>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a20:	497e      	ldr	r1, [pc, #504]	; (8003c1c <HAL_RCC_OscConfig+0x308>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a22:	4013      	ands	r3, r2
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a2a:	682b      	ldr	r3, [r5, #0]
 8003a2c:	4a7c      	ldr	r2, [pc, #496]	; (8003c20 <HAL_RCC_OscConfig+0x30c>)
 8003a2e:	049b      	lsls	r3, r3, #18
 8003a30:	0f5b      	lsrs	r3, r3, #29
 8003a32:	40da      	lsrs	r2, r3
 8003a34:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a36:	4b7b      	ldr	r3, [pc, #492]	; (8003c24 <HAL_RCC_OscConfig+0x310>)
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	f7ff f8bd 	bl	8002bb8 <HAL_InitTick>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d100      	bne.n	8003a44 <HAL_RCC_OscConfig+0x130>
 8003a42:	e772      	b.n	800392a <HAL_RCC_OscConfig+0x16>
 8003a44:	e78f      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0d9      	beq.n	80039fe <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	4a71      	ldr	r2, [pc, #452]	; (8003c18 <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a54:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a56:	4013      	ands	r3, r2
 8003a58:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	682a      	ldr	r2, [r5, #0]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4313      	orrs	r3, r2
 8003a68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a6a:	f7ff f9e5 	bl	8002e38 <HAL_GetTick>
 8003a6e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	423b      	tst	r3, r7
 8003a74:	d007      	beq.n	8003a86 <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a76:	686a      	ldr	r2, [r5, #4]
 8003a78:	6963      	ldr	r3, [r4, #20]
 8003a7a:	4966      	ldr	r1, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x300>)
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	400a      	ands	r2, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	606b      	str	r3, [r5, #4]
 8003a84:	e751      	b.n	800392a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a86:	f7ff f9d7 	bl	8002e38 <HAL_GetTick>
 8003a8a:	1b80      	subs	r0, r0, r6
 8003a8c:	2802      	cmp	r0, #2
 8003a8e:	d9ef      	bls.n	8003a70 <HAL_RCC_OscConfig+0x15c>
 8003a90:	e782      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	4a64      	ldr	r2, [pc, #400]	; (8003c28 <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a96:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8003a98:	4013      	ands	r3, r2
 8003a9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a9c:	f7ff f9cc 	bl	8002e38 <HAL_GetTick>
 8003aa0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa2:	00ff      	lsls	r7, r7, #3
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	423b      	tst	r3, r7
 8003aa8:	d100      	bne.n	8003aac <HAL_RCC_OscConfig+0x198>
 8003aaa:	e73e      	b.n	800392a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7ff f9c4 	bl	8002e38 <HAL_GetTick>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	2802      	cmp	r0, #2
 8003ab4:	d9f6      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x190>
 8003ab6:	e76f      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ab8:	2238      	movs	r2, #56	; 0x38
 8003aba:	4d53      	ldr	r5, [pc, #332]	; (8003c08 <HAL_RCC_OscConfig+0x2f4>)
 8003abc:	68ab      	ldr	r3, [r5, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b18      	cmp	r3, #24
 8003ac2:	d108      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1c2>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ac4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003ac6:	079b      	lsls	r3, r3, #30
 8003ac8:	d400      	bmi.n	8003acc <HAL_RCC_OscConfig+0x1b8>
 8003aca:	e732      	b.n	8003932 <HAL_RCC_OscConfig+0x1e>
 8003acc:	69a3      	ldr	r3, [r4, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1c0>
 8003ad2:	e72e      	b.n	8003932 <HAL_RCC_OscConfig+0x1e>
 8003ad4:	e747      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad6:	69a2      	ldr	r2, [r4, #24]
 8003ad8:	2301      	movs	r3, #1
 8003ada:	2a00      	cmp	r2, #0
 8003adc:	d010      	beq.n	8003b00 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_LSI_ENABLE();
 8003ade:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003ae6:	f7ff f9a7 	bl	8002e38 <HAL_GetTick>
 8003aea:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aec:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003aee:	423b      	tst	r3, r7
 8003af0:	d000      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1e0>
 8003af2:	e71e      	b.n	8003932 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af4:	f7ff f9a0 	bl	8002e38 <HAL_GetTick>
 8003af8:	1b80      	subs	r0, r0, r6
 8003afa:	2802      	cmp	r0, #2
 8003afc:	d9f6      	bls.n	8003aec <HAL_RCC_OscConfig+0x1d8>
 8003afe:	e74b      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8003b00:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b02:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8003b04:	439a      	bics	r2, r3
 8003b06:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b08:	f7ff f996 	bl	8002e38 <HAL_GetTick>
 8003b0c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003b10:	423b      	tst	r3, r7
 8003b12:	d100      	bne.n	8003b16 <HAL_RCC_OscConfig+0x202>
 8003b14:	e70d      	b.n	8003932 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b16:	f7ff f98f 	bl	8002e38 <HAL_GetTick>
 8003b1a:	1b80      	subs	r0, r0, r6
 8003b1c:	2802      	cmp	r0, #2
 8003b1e:	d9f6      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1fa>
 8003b20:	e73a      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b22:	2238      	movs	r2, #56	; 0x38
 8003b24:	4d38      	ldr	r5, [pc, #224]	; (8003c08 <HAL_RCC_OscConfig+0x2f4>)
 8003b26:	68ab      	ldr	r3, [r5, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d108      	bne.n	8003b40 <HAL_RCC_OscConfig+0x22c>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b2e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003b30:	079b      	lsls	r3, r3, #30
 8003b32:	d400      	bmi.n	8003b36 <HAL_RCC_OscConfig+0x222>
 8003b34:	e701      	b.n	800393a <HAL_RCC_OscConfig+0x26>
 8003b36:	68a3      	ldr	r3, [r4, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d000      	beq.n	8003b3e <HAL_RCC_OscConfig+0x22a>
 8003b3c:	e6fd      	b.n	800393a <HAL_RCC_OscConfig+0x26>
 8003b3e:	e712      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b40:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b44:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b46:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8003b48:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b4a:	4213      	tst	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b50:	4313      	orrs	r3, r2
 8003b52:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003b54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b56:	4013      	ands	r3, r2
 8003b58:	9303      	str	r3, [sp, #12]
 8003b5a:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b60:	2780      	movs	r7, #128	; 0x80
 8003b62:	4e32      	ldr	r6, [pc, #200]	; (8003c2c <HAL_RCC_OscConfig+0x318>)
 8003b64:	007f      	lsls	r7, r7, #1
 8003b66:	6833      	ldr	r3, [r6, #0]
 8003b68:	423b      	tst	r3, r7
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	68a3      	ldr	r3, [r4, #8]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d122      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x2a4>
 8003b72:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003b74:	4313      	orrs	r3, r2
 8003b76:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8003b78:	f7ff f95e 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003b7e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b80:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003b82:	423b      	tst	r3, r7
 8003b84:	d038      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x2e4>
      if (pwrclkchanged == SET)
 8003b86:	9b00      	ldr	r3, [sp, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d000      	beq.n	8003b8e <HAL_RCC_OscConfig+0x27a>
 8003b8c:	e6d5      	b.n	800393a <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003b8e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x31c>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003b96:	e6d0      	b.n	800393a <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b98:	6833      	ldr	r3, [r6, #0]
 8003b9a:	433b      	orrs	r3, r7
 8003b9c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003b9e:	f7ff f94b 	bl	8002e38 <HAL_GetTick>
 8003ba2:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba4:	6833      	ldr	r3, [r6, #0]
 8003ba6:	423b      	tst	r3, r7
 8003ba8:	d1e0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x258>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7ff f945 	bl	8002e38 <HAL_GetTick>
 8003bae:	9b01      	ldr	r3, [sp, #4]
 8003bb0:	1ac0      	subs	r0, r0, r3
 8003bb2:	2802      	cmp	r0, #2
 8003bb4:	d9f6      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x290>
 8003bb6:	e6ef      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d105      	bne.n	8003bca <HAL_RCC_OscConfig+0x2b6>
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	65eb      	str	r3, [r5, #92]	; 0x5c
 8003bc4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e7d4      	b.n	8003b74 <HAL_RCC_OscConfig+0x260>
 8003bca:	2101      	movs	r1, #1
 8003bcc:	438a      	bics	r2, r1
 8003bce:	65ea      	str	r2, [r5, #92]	; 0x5c
 8003bd0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003bd2:	3103      	adds	r1, #3
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1cd      	bne.n	8003b78 <HAL_RCC_OscConfig+0x264>
        tickstart = HAL_GetTick();
 8003bdc:	f7ff f92c 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003be0:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003be2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003be4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003be6:	423b      	tst	r3, r7
 8003be8:	d0cd      	beq.n	8003b86 <HAL_RCC_OscConfig+0x272>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7ff f925 	bl	8002e38 <HAL_GetTick>
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCC_OscConfig+0x320>)
 8003bf0:	1b80      	subs	r0, r0, r6
 8003bf2:	4298      	cmp	r0, r3
 8003bf4:	d9f6      	bls.n	8003be4 <HAL_RCC_OscConfig+0x2d0>
 8003bf6:	e6cf      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7ff f91e 	bl	8002e38 <HAL_GetTick>
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCC_OscConfig+0x320>)
 8003bfe:	1b80      	subs	r0, r0, r6
 8003c00:	4298      	cmp	r0, r3
 8003c02:	d9bd      	bls.n	8003b80 <HAL_RCC_OscConfig+0x26c>
 8003c04:	e6c8      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	fffeffff 	.word	0xfffeffff
 8003c10:	fffbffff 	.word	0xfffbffff
 8003c14:	ffff80ff 	.word	0xffff80ff
 8003c18:	ffffc7ff 	.word	0xffffc7ff
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	20000008 	.word	0x20000008
 8003c28:	fffffeff 	.word	0xfffffeff
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	efffffff 	.word	0xefffffff
 8003c34:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c38:	2138      	movs	r1, #56	; 0x38
 8003c3a:	4d3f      	ldr	r5, [pc, #252]	; (8003d38 <HAL_RCC_OscConfig+0x424>)
 8003c3c:	68aa      	ldr	r2, [r5, #8]
 8003c3e:	400a      	ands	r2, r1
 8003c40:	2a10      	cmp	r2, #16
 8003c42:	d053      	beq.n	8003cec <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c44:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <HAL_RCC_OscConfig+0x428>)
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d138      	bne.n	8003cbc <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4013      	ands	r3, r2
 8003c50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c52:	f7ff f8f1 	bl	8002e38 <HAL_GetTick>
 8003c56:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	04bf      	lsls	r7, r7, #18
 8003c5a:	682b      	ldr	r3, [r5, #0]
 8003c5c:	423b      	tst	r3, r7
 8003c5e:	d127      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c62:	6a23      	ldr	r3, [r4, #32]
 8003c64:	68ea      	ldr	r2, [r5, #12]
 8003c66:	430b      	orrs	r3, r1
 8003c68:	4935      	ldr	r1, [pc, #212]	; (8003d40 <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c72:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c74:	4313      	orrs	r3, r2
 8003c76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c7c:	0212      	lsls	r2, r2, #8
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	682a      	ldr	r2, [r5, #0]
 8003c86:	045b      	lsls	r3, r3, #17
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	68ea      	ldr	r2, [r5, #12]
 8003c90:	055b      	lsls	r3, r3, #21
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003c96:	f7ff f8cf 	bl	8002e38 <HAL_GetTick>
 8003c9a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	4233      	tst	r3, r6
 8003ca0:	d000      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x390>
 8003ca2:	e64e      	b.n	8003942 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7ff f8c8 	bl	8002e38 <HAL_GetTick>
 8003ca8:	1b00      	subs	r0, r0, r4
 8003caa:	2802      	cmp	r0, #2
 8003cac:	d9f6      	bls.n	8003c9c <HAL_RCC_OscConfig+0x388>
 8003cae:	e673      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7ff f8c2 	bl	8002e38 <HAL_GetTick>
 8003cb4:	1b80      	subs	r0, r0, r6
 8003cb6:	2802      	cmp	r0, #2
 8003cb8:	d9cf      	bls.n	8003c5a <HAL_RCC_OscConfig+0x346>
 8003cba:	e66d      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 8003cbc:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cbe:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cc4:	f7ff f8b8 	bl	8002e38 <HAL_GetTick>
 8003cc8:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cca:	04b6      	lsls	r6, r6, #18
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	4030      	ands	r0, r6
 8003cd2:	4233      	tst	r3, r6
 8003cd4:	d104      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003cd6:	68eb      	ldr	r3, [r5, #12]
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	; (8003d44 <HAL_RCC_OscConfig+0x430>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60eb      	str	r3, [r5, #12]
 8003cde:	e65c      	b.n	800399a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7ff f8aa 	bl	8002e38 <HAL_GetTick>
 8003ce4:	1b00      	subs	r0, r0, r4
 8003ce6:	2802      	cmp	r0, #2
 8003ce8:	d9f0      	bls.n	8003ccc <HAL_RCC_OscConfig+0x3b8>
 8003cea:	e655      	b.n	8003998 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d100      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3de>
 8003cf0:	e639      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8003cf4:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	6a21      	ldr	r1, [r4, #32]
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	428a      	cmp	r2, r1
 8003cfc:	d000      	beq.n	8003d00 <HAL_RCC_OscConfig+0x3ec>
 8003cfe:	e632      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d00:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d04:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d06:	428a      	cmp	r2, r1
 8003d08:	d000      	beq.n	8003d0c <HAL_RCC_OscConfig+0x3f8>
 8003d0a:	e62c      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d0c:	21fe      	movs	r1, #254	; 0xfe
 8003d0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d10:	01c9      	lsls	r1, r1, #7
 8003d12:	4019      	ands	r1, r3
 8003d14:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d16:	4291      	cmp	r1, r2
 8003d18:	d000      	beq.n	8003d1c <HAL_RCC_OscConfig+0x408>
 8003d1a:	e624      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d1c:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d20:	0392      	lsls	r2, r2, #14
 8003d22:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d24:	428a      	cmp	r2, r1
 8003d26:	d000      	beq.n	8003d2a <HAL_RCC_OscConfig+0x416>
 8003d28:	e61d      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d2c:	0f5b      	lsrs	r3, r3, #29
 8003d2e:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d100      	bne.n	8003d36 <HAL_RCC_OscConfig+0x422>
 8003d34:	e605      	b.n	8003942 <HAL_RCC_OscConfig+0x2e>
 8003d36:	e616      	b.n	8003966 <HAL_RCC_OscConfig+0x52>
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	feffffff 	.word	0xfeffffff
 8003d40:	1fc1808c 	.word	0x1fc1808c
 8003d44:	effefffc 	.word	0xeffefffc

08003d48 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d48:	2338      	movs	r3, #56	; 0x38
{
 8003d4a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4c:	4c1d      	ldr	r4, [pc, #116]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d4e:	68a2      	ldr	r2, [r4, #8]
 8003d50:	421a      	tst	r2, r3
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d54:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d56:	481c      	ldr	r0, [pc, #112]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d58:	049b      	lsls	r3, r3, #18
 8003d5a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d5c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d60:	68a2      	ldr	r2, [r4, #8]
 8003d62:	401a      	ands	r2, r3
 8003d64:	2a08      	cmp	r2, #8
 8003d66:	d027      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d68:	68a2      	ldr	r2, [r4, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	2a10      	cmp	r2, #16
 8003d6e:	d117      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d70:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d72:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d74:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d76:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d78:	0649      	lsls	r1, r1, #25
 8003d7a:	0f49      	lsrs	r1, r1, #29
 8003d7c:	326f      	adds	r2, #111	; 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d7e:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d80:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d82:	4015      	ands	r5, r2
    switch (pllsource)
 8003d84:	079b      	lsls	r3, r3, #30
 8003d86:	d109      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d88:	4810      	ldr	r0, [pc, #64]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d8a:	f7fc f9df 	bl	800014c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d8e:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d90:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d92:	0f49      	lsrs	r1, r1, #29
 8003d94:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8003d96:	f7fc f9d9 	bl	800014c <__udivsi3>
 8003d9a:	e7e0      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d9c:	480a      	ldr	r0, [pc, #40]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003d9e:	e7f4      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003da0:	68a2      	ldr	r2, [r4, #8]
 8003da2:	401a      	ands	r2, r3
 8003da4:	2a20      	cmp	r2, #32
 8003da6:	d009      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003da8:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 8003daa:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b18      	cmp	r3, #24
 8003db0:	d1d5      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8003db2:	20fa      	movs	r0, #250	; 0xfa
 8003db4:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8003db6:	e7d2      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003db8:	4804      	ldr	r0, [pc, #16]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x84>)
 8003dba:	e7d0      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8003dbc:	2080      	movs	r0, #128	; 0x80
 8003dbe:	0200      	lsls	r0, r0, #8
 8003dc0:	e7cd      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x16>
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <HAL_RCC_ClockConfig>:
{
 8003dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dd2:	0004      	movs	r4, r0
 8003dd4:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8003dda:	2001      	movs	r0, #1
}
 8003ddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dde:	2707      	movs	r7, #7
 8003de0:	4e4a      	ldr	r6, [pc, #296]	; (8003f0c <HAL_RCC_ClockConfig+0x13c>)
 8003de2:	6833      	ldr	r3, [r6, #0]
 8003de4:	403b      	ands	r3, r7
 8003de6:	428b      	cmp	r3, r1
 8003de8:	d32a      	bcc.n	8003e40 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dea:	6822      	ldr	r2, [r4, #0]
 8003dec:	0793      	lsls	r3, r2, #30
 8003dee:	d43b      	bmi.n	8003e68 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df0:	07d2      	lsls	r2, r2, #31
 8003df2:	d448      	bmi.n	8003e86 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003df4:	2707      	movs	r7, #7
 8003df6:	6833      	ldr	r3, [r6, #0]
 8003df8:	403b      	ands	r3, r7
 8003dfa:	42ab      	cmp	r3, r5
 8003dfc:	d90a      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	6833      	ldr	r3, [r6, #0]
 8003e00:	43bb      	bics	r3, r7
 8003e02:	432b      	orrs	r3, r5
 8003e04:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e06:	f7ff f817 	bl	8002e38 <HAL_GetTick>
 8003e0a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e0c:	6833      	ldr	r3, [r6, #0]
 8003e0e:	403b      	ands	r3, r7
 8003e10:	42ab      	cmp	r3, r5
 8003e12:	d16b      	bne.n	8003eec <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	4d3e      	ldr	r5, [pc, #248]	; (8003f10 <HAL_RCC_ClockConfig+0x140>)
 8003e18:	075b      	lsls	r3, r3, #29
 8003e1a:	d46f      	bmi.n	8003efc <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e1c:	f7ff ff94 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003e20:	68ab      	ldr	r3, [r5, #8]
 8003e22:	493c      	ldr	r1, [pc, #240]	; (8003f14 <HAL_RCC_ClockConfig+0x144>)
 8003e24:	051b      	lsls	r3, r3, #20
 8003e26:	0f1b      	lsrs	r3, r3, #28
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	585b      	ldr	r3, [r3, r1]
 8003e2c:	211f      	movs	r1, #31
 8003e2e:	400b      	ands	r3, r1
 8003e30:	40d8      	lsrs	r0, r3
 8003e32:	4a39      	ldr	r2, [pc, #228]	; (8003f18 <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 8003e34:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e36:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	f7fe febd 	bl	8002bb8 <HAL_InitTick>
 8003e3e:	e7cd      	b.n	8003ddc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	43bb      	bics	r3, r7
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e48:	f7fe fff6 	bl	8002e38 <HAL_GetTick>
 8003e4c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e4e:	6833      	ldr	r3, [r6, #0]
 8003e50:	403b      	ands	r3, r7
 8003e52:	42ab      	cmp	r3, r5
 8003e54:	d0c9      	beq.n	8003dea <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e56:	f7fe ffef 	bl	8002e38 <HAL_GetTick>
 8003e5a:	9b01      	ldr	r3, [sp, #4]
 8003e5c:	1ac0      	subs	r0, r0, r3
 8003e5e:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <HAL_RCC_ClockConfig+0x150>)
 8003e60:	4298      	cmp	r0, r3
 8003e62:	d9f4      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8003e64:	2003      	movs	r0, #3
 8003e66:	e7b9      	b.n	8003ddc <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	4929      	ldr	r1, [pc, #164]	; (8003f10 <HAL_RCC_ClockConfig+0x140>)
 8003e6a:	0753      	lsls	r3, r2, #29
 8003e6c:	d504      	bpl.n	8003e78 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e6e:	23e0      	movs	r3, #224	; 0xe0
 8003e70:	6888      	ldr	r0, [r1, #8]
 8003e72:	01db      	lsls	r3, r3, #7
 8003e74:	4303      	orrs	r3, r0
 8003e76:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	688b      	ldr	r3, [r1, #8]
 8003e7a:	482a      	ldr	r0, [pc, #168]	; (8003f24 <HAL_RCC_ClockConfig+0x154>)
 8003e7c:	4003      	ands	r3, r0
 8003e7e:	68a0      	ldr	r0, [r4, #8]
 8003e80:	4303      	orrs	r3, r0
 8003e82:	608b      	str	r3, [r1, #8]
 8003e84:	e7b4      	b.n	8003df0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e86:	6862      	ldr	r2, [r4, #4]
 8003e88:	4f21      	ldr	r7, [pc, #132]	; (8003f10 <HAL_RCC_ClockConfig+0x140>)
 8003e8a:	2a01      	cmp	r2, #1
 8003e8c:	d119      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	039b      	lsls	r3, r3, #14
 8003e92:	d5a2      	bpl.n	8003dda <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e94:	2107      	movs	r1, #7
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	438b      	bics	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8003e9e:	f7fe ffcb 	bl	8002e38 <HAL_GetTick>
 8003ea2:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea4:	2338      	movs	r3, #56	; 0x38
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	6863      	ldr	r3, [r4, #4]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d0a0      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb2:	f7fe ffc1 	bl	8002e38 <HAL_GetTick>
 8003eb6:	9b01      	ldr	r3, [sp, #4]
 8003eb8:	1ac0      	subs	r0, r0, r3
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_RCC_ClockConfig+0x150>)
 8003ebc:	4298      	cmp	r0, r3
 8003ebe:	d9f1      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0xd4>
 8003ec0:	e7d0      	b.n	8003e64 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec2:	2a02      	cmp	r2, #2
 8003ec4:	d103      	bne.n	8003ece <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	d4e3      	bmi.n	8003e94 <HAL_RCC_ClockConfig+0xc4>
 8003ecc:	e785      	b.n	8003dda <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ece:	2a00      	cmp	r2, #0
 8003ed0:	d103      	bne.n	8003eda <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	055b      	lsls	r3, r3, #21
 8003ed6:	d4dd      	bmi.n	8003e94 <HAL_RCC_ClockConfig+0xc4>
 8003ed8:	e77f      	b.n	8003dda <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003eda:	2302      	movs	r3, #2
 8003edc:	2a03      	cmp	r2, #3
 8003ede:	d103      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee2:	4219      	tst	r1, r3
 8003ee4:	d1d6      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xc4>
 8003ee6:	e778      	b.n	8003dda <HAL_RCC_ClockConfig+0xa>
 8003ee8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003eea:	e7fa      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fe ffa4 	bl	8002e38 <HAL_GetTick>
 8003ef0:	9b01      	ldr	r3, [sp, #4]
 8003ef2:	1ac0      	subs	r0, r0, r3
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x150>)
 8003ef6:	4298      	cmp	r0, r3
 8003ef8:	d988      	bls.n	8003e0c <HAL_RCC_ClockConfig+0x3c>
 8003efa:	e7b3      	b.n	8003e64 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003efc:	68ab      	ldr	r3, [r5, #8]
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <HAL_RCC_ClockConfig+0x158>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	68e2      	ldr	r2, [r4, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60ab      	str	r3, [r5, #8]
 8003f08:	e788      	b.n	8003e1c <HAL_RCC_ClockConfig+0x4c>
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08009758 	.word	0x08009758
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000008 	.word	0x20000008
 8003f20:	00001388 	.word	0x00001388
 8003f24:	fffff0ff 	.word	0xfffff0ff
 8003f28:	ffff8fff 	.word	0xffff8fff

08003f2c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f2e:	4907      	ldr	r1, [pc, #28]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f34:	045b      	lsls	r3, r3, #17
 8003f36:	0f5b      	lsrs	r3, r3, #29
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	585b      	ldr	r3, [r3, r1]
 8003f3c:	211f      	movs	r1, #31
 8003f3e:	6810      	ldr	r0, [r2, #0]
 8003f40:	400b      	ands	r3, r1
 8003f42:	40d8      	lsrs	r0, r3
}
 8003f44:	4770      	bx	lr
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08009798 	.word	0x08009798
 8003f50:	20000000 	.word	0x20000000

08003f54 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003f54:	2207      	movs	r2, #7
{
 8003f56:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f58:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003f5c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f5e:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f60:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f62:	4014      	ands	r4, r2
 8003f64:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f66:	689c      	ldr	r4, [r3, #8]
 8003f68:	402c      	ands	r4, r5
 8003f6a:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003f6c:	24e0      	movs	r4, #224	; 0xe0
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	01e4      	lsls	r4, r4, #7
 8003f72:	4023      	ands	r3, r4
 8003f74:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f76:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_GetClockConfig+0x30>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
}
 8003f7e:	bd30      	pop	{r4, r5, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40022000 	.word	0x40022000

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f8a:	6803      	ldr	r3, [r0, #0]
{
 8003f8c:	0005      	movs	r5, r0
 8003f8e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f90:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f92:	039b      	lsls	r3, r3, #14
 8003f94:	d53b      	bpl.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	4c4d      	ldr	r4, [pc, #308]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003f9a:	0552      	lsls	r2, r2, #21
 8003f9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa0:	4213      	tst	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fac:	4013      	ands	r3, r2
 8003fae:	9303      	str	r3, [sp, #12]
 8003fb0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb6:	2780      	movs	r7, #128	; 0x80
 8003fb8:	4e46      	ldr	r6, [pc, #280]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003fba:	007f      	lsls	r7, r7, #1
 8003fbc:	6833      	ldr	r3, [r6, #0]
 8003fbe:	433b      	orrs	r3, r7
 8003fc0:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc2:	f7fe ff39 	bl	8002e38 <HAL_GetTick>
 8003fc6:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	423b      	tst	r3, r7
 8003fcc:	d011      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003fd0:	23c0      	movs	r3, #192	; 0xc0
 8003fd2:	0010      	movs	r0, r2
 8003fd4:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fd6:	69a9      	ldr	r1, [r5, #24]
 8003fd8:	4e3f      	ldr	r6, [pc, #252]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fda:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fdc:	421a      	tst	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fe0:	4288      	cmp	r0, r1
 8003fe2:	d156      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003fe6:	69aa      	ldr	r2, [r5, #24]
 8003fe8:	4033      	ands	r3, r6
 8003fea:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fec:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fee:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fe ff21 	bl	8002e38 <HAL_GetTick>
 8003ff6:	9b01      	ldr	r3, [sp, #4]
 8003ff8:	1ac0      	subs	r0, r0, r3
 8003ffa:	2802      	cmp	r0, #2
 8003ffc:	d9e4      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004000:	9b00      	ldr	r3, [sp, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d103      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004008:	4a34      	ldr	r2, [pc, #208]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800400a:	4013      	ands	r3, r2
 800400c:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400e:	682a      	ldr	r2, [r5, #0]
 8004010:	07d3      	lsls	r3, r2, #31
 8004012:	d506      	bpl.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004014:	2403      	movs	r4, #3
 8004016:	492e      	ldr	r1, [pc, #184]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8004018:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800401a:	43a3      	bics	r3, r4
 800401c:	686c      	ldr	r4, [r5, #4]
 800401e:	4323      	orrs	r3, r4
 8004020:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004022:	0793      	lsls	r3, r2, #30
 8004024:	d506      	bpl.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004026:	240c      	movs	r4, #12
 8004028:	4929      	ldr	r1, [pc, #164]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800402a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800402c:	43a3      	bics	r3, r4
 800402e:	68ac      	ldr	r4, [r5, #8]
 8004030:	4323      	orrs	r3, r4
 8004032:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004034:	0693      	lsls	r3, r2, #26
 8004036:	d506      	bpl.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004038:	4925      	ldr	r1, [pc, #148]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800403a:	4c29      	ldr	r4, [pc, #164]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800403c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800403e:	4023      	ands	r3, r4
 8004040:	68ec      	ldr	r4, [r5, #12]
 8004042:	4323      	orrs	r3, r4
 8004044:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004046:	0453      	lsls	r3, r2, #17
 8004048:	d50f      	bpl.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800404a:	4921      	ldr	r1, [pc, #132]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800404c:	696c      	ldr	r4, [r5, #20]
 800404e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	4323      	orrs	r3, r4
 8004056:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	429c      	cmp	r4, r3
 800405e:	d104      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	68cc      	ldr	r4, [r1, #12]
 8004064:	025b      	lsls	r3, r3, #9
 8004066:	4323      	orrs	r3, r4
 8004068:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800406a:	0512      	lsls	r2, r2, #20
 800406c:	d50f      	bpl.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800406e:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8004070:	4c1c      	ldr	r4, [pc, #112]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004072:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004074:	6929      	ldr	r1, [r5, #16]
 8004076:	4023      	ands	r3, r4
 8004078:	430b      	orrs	r3, r1
 800407a:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	01db      	lsls	r3, r3, #7
 8004080:	4299      	cmp	r1, r3
 8004082:	d104      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	68d1      	ldr	r1, [r2, #12]
 8004088:	025b      	lsls	r3, r3, #9
 800408a:	430b      	orrs	r3, r1
 800408c:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800408e:	b005      	add	sp, #20
 8004090:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8004092:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004094:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8004096:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004098:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 800409a:	0252      	lsls	r2, r2, #9
 800409c:	4302      	orrs	r2, r0
 800409e:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80040a2:	4811      	ldr	r0, [pc, #68]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040a4:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a6:	4002      	ands	r2, r0
 80040a8:	65e2      	str	r2, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 80040aa:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040ac:	07db      	lsls	r3, r3, #31
 80040ae:	d599      	bpl.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 80040b0:	f7fe fec2 	bl	8002e38 <HAL_GetTick>
 80040b4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	2202      	movs	r2, #2
 80040b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80040ba:	4213      	tst	r3, r2
 80040bc:	d000      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80040be:	e791      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe feba 	bl	8002e38 <HAL_GetTick>
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c6:	1bc0      	subs	r0, r0, r7
 80040c8:	4298      	cmp	r0, r3
 80040ca:	d9f4      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80040cc:	e797      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40007000 	.word	0x40007000
 80040d8:	fffffcff 	.word	0xfffffcff
 80040dc:	efffffff 	.word	0xefffffff
 80040e0:	ffffcfff 	.word	0xffffcfff
 80040e4:	ffff3fff 	.word	0xffff3fff
 80040e8:	fffeffff 	.word	0xfffeffff
 80040ec:	00001388 	.word	0x00001388

080040f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 80040f4:	2001      	movs	r0, #1
  if (hspi == NULL)
 80040f6:	2c00      	cmp	r4, #0
 80040f8:	d066      	beq.n	80041c8 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d164      	bne.n	80041ca <HAL_SPI_Init+0xda>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004100:	2282      	movs	r2, #130	; 0x82
 8004102:	6861      	ldr	r1, [r4, #4]
 8004104:	0052      	lsls	r2, r2, #1
 8004106:	4291      	cmp	r1, r2
 8004108:	d000      	beq.n	800410c <HAL_SPI_Init+0x1c>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800410a:	61e3      	str	r3, [r4, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800410c:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800410e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004110:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004112:	355d      	adds	r5, #93	; 0x5d
 8004114:	782b      	ldrb	r3, [r5, #0]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_SPI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800411c:	0023      	movs	r3, r4
 800411e:	335c      	adds	r3, #92	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004120:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004122:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004124:	f7fe fc06 	bl	8002934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004128:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800412a:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800412c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800412e:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004130:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004136:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 8004138:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800413a:	00c9      	lsls	r1, r1, #3
 800413c:	2300      	movs	r3, #0
 800413e:	428e      	cmp	r6, r1
 8004140:	d847      	bhi.n	80041d2 <HAL_SPI_Init+0xe2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004142:	2080      	movs	r0, #128	; 0x80
 8004144:	0140      	lsls	r0, r0, #5
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004146:	428e      	cmp	r6, r1
 8004148:	d000      	beq.n	800414c <HAL_SPI_Init+0x5c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800414a:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800414c:	2182      	movs	r1, #130	; 0x82
 800414e:	2784      	movs	r7, #132	; 0x84
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	0049      	lsls	r1, r1, #1
 8004154:	400b      	ands	r3, r1
 8004156:	68a1      	ldr	r1, [r4, #8]
 8004158:	023f      	lsls	r7, r7, #8
 800415a:	4039      	ands	r1, r7
 800415c:	2702      	movs	r7, #2
 800415e:	430b      	orrs	r3, r1
 8004160:	6921      	ldr	r1, [r4, #16]
 8004162:	69a5      	ldr	r5, [r4, #24]
 8004164:	4039      	ands	r1, r7
 8004166:	430b      	orrs	r3, r1
 8004168:	2101      	movs	r1, #1
 800416a:	6967      	ldr	r7, [r4, #20]
 800416c:	400f      	ands	r7, r1
 800416e:	433b      	orrs	r3, r7
 8004170:	2780      	movs	r7, #128	; 0x80
 8004172:	00bf      	lsls	r7, r7, #2
 8004174:	402f      	ands	r7, r5
 8004176:	433b      	orrs	r3, r7
 8004178:	69e7      	ldr	r7, [r4, #28]
 800417a:	3137      	adds	r1, #55	; 0x37
 800417c:	400f      	ands	r7, r1
 800417e:	433b      	orrs	r3, r7
 8004180:	6a27      	ldr	r7, [r4, #32]
 8004182:	3148      	adds	r1, #72	; 0x48
 8004184:	400f      	ands	r7, r1
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	433b      	orrs	r3, r7
 800418a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800418c:	0189      	lsls	r1, r1, #6
 800418e:	400f      	ands	r7, r1
 8004190:	433b      	orrs	r3, r7
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004192:	2710      	movs	r7, #16
 8004194:	2108      	movs	r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004196:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800419a:	0c2d      	lsrs	r5, r5, #16
 800419c:	403b      	ands	r3, r7
 800419e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80041a0:	400f      	ands	r7, r1
 80041a2:	433b      	orrs	r3, r7
 80041a4:	27f0      	movs	r7, #240	; 0xf0
 80041a6:	013f      	lsls	r7, r7, #4
 80041a8:	403e      	ands	r6, r7
 80041aa:	4333      	orrs	r3, r6
 80041ac:	2604      	movs	r6, #4
 80041ae:	4035      	ands	r5, r6
 80041b0:	432b      	orrs	r3, r5
 80041b2:	4303      	orrs	r3, r0
 80041b4:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041b6:	69d3      	ldr	r3, [r2, #28]
 80041b8:	4808      	ldr	r0, [pc, #32]	; (80041dc <HAL_SPI_Init+0xec>)
 80041ba:	4003      	ands	r3, r0
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041bc:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041be:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80041c0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041c2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041c4:	345d      	adds	r4, #93	; 0x5d
 80041c6:	7023      	strb	r3, [r4, #0]

  return HAL_OK;
}
 80041c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ca:	2300      	movs	r3, #0
 80041cc:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ce:	6163      	str	r3, [r4, #20]
 80041d0:	e79c      	b.n	800410c <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041d2:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041d4:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041d6:	0109      	lsls	r1, r1, #4
 80041d8:	e7b5      	b.n	8004146 <HAL_SPI_Init+0x56>
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	fffff7ff 	.word	0xfffff7ff

080041e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e0:	0002      	movs	r2, r0
{
 80041e2:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80041e4:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80041e6:	323d      	adds	r2, #61	; 0x3d
 80041e8:	7811      	ldrb	r1, [r2, #0]
 80041ea:	4281      	cmp	r1, r0
 80041ec:	d11b      	bne.n	8004226 <HAL_TIM_Base_Start_IT+0x46>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	2102      	movs	r1, #2
 80041f0:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	4302      	orrs	r2, r0
 80041f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_TIM_Base_Start_IT+0x54>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d005      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x2c>
 8004200:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <HAL_TIM_Base_Start_IT+0x58>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d002      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x2c>
 8004206:	4a0d      	ldr	r2, [pc, #52]	; (800423c <HAL_TIM_Base_Start_IT+0x5c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10d      	bne.n	8004228 <HAL_TIM_Base_Start_IT+0x48>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	490c      	ldr	r1, [pc, #48]	; (8004240 <HAL_TIM_Base_Start_IT+0x60>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004210:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004212:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004214:	2a06      	cmp	r2, #6
 8004216:	d006      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x46>
 8004218:	3907      	subs	r1, #7
 800421a:	428a      	cmp	r2, r1
 800421c:	d003      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 800421e:	2201      	movs	r2, #1
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4302      	orrs	r2, r0
 800422c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800422e:	2000      	movs	r0, #0
 8004230:	e7f9      	b.n	8004226 <HAL_TIM_Base_Start_IT+0x46>
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40000400 	.word	0x40000400
 800423c:	40014000 	.word	0x40014000
 8004240:	00010007 	.word	0x00010007

08004244 <HAL_TIM_OC_DelayElapsedCallback>:
 8004244:	4770      	bx	lr

08004246 <HAL_TIM_IC_CaptureCallback>:
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_TriggerCallback>:
 800424a:	4770      	bx	lr

0800424c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800424c:	2202      	movs	r2, #2
 800424e:	6803      	ldr	r3, [r0, #0]
{
 8004250:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004252:	6919      	ldr	r1, [r3, #16]
{
 8004254:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004256:	4211      	tst	r1, r2
 8004258:	d00e      	beq.n	8004278 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800425a:	68d9      	ldr	r1, [r3, #12]
 800425c:	4211      	tst	r1, r2
 800425e:	d00b      	beq.n	8004278 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004260:	3a05      	subs	r2, #5
 8004262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004264:	3204      	adds	r2, #4
 8004266:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	079b      	lsls	r3, r3, #30
 800426c:	d100      	bne.n	8004270 <HAL_TIM_IRQHandler+0x24>
 800426e:	e086      	b.n	800437e <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004270:	f7ff ffe9 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004274:	2300      	movs	r3, #0
 8004276:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004278:	2204      	movs	r2, #4
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	4211      	tst	r1, r2
 8004280:	d011      	beq.n	80042a6 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004282:	68d9      	ldr	r1, [r3, #12]
 8004284:	4211      	tst	r1, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004288:	3a09      	subs	r2, #9
 800428a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800428c:	3207      	adds	r2, #7
 800428e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	23c0      	movs	r3, #192	; 0xc0
 8004294:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004298:	421a      	tst	r2, r3
 800429a:	d100      	bne.n	800429e <HAL_TIM_IRQHandler+0x52>
 800429c:	e075      	b.n	800438a <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 800429e:	f7ff ffd2 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	2300      	movs	r3, #0
 80042a4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a6:	2208      	movs	r2, #8
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	6919      	ldr	r1, [r3, #16]
 80042ac:	4211      	tst	r1, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b0:	68d9      	ldr	r1, [r3, #12]
 80042b2:	4211      	tst	r1, r2
 80042b4:	d00b      	beq.n	80042ce <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042b6:	3a11      	subs	r2, #17
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ba:	320d      	adds	r2, #13
 80042bc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042be:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c2:	079b      	lsls	r3, r3, #30
 80042c4:	d067      	beq.n	8004396 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	f7ff ffbe 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	2300      	movs	r3, #0
 80042cc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ce:	2210      	movs	r2, #16
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	6919      	ldr	r1, [r3, #16]
 80042d4:	4211      	tst	r1, r2
 80042d6:	d010      	beq.n	80042fa <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	4211      	tst	r1, r2
 80042dc:	d00d      	beq.n	80042fa <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042de:	3a21      	subs	r2, #33	; 0x21
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e2:	3219      	adds	r2, #25
 80042e4:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	23c0      	movs	r3, #192	; 0xc0
 80042ea:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ec:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ee:	421a      	tst	r2, r3
 80042f0:	d057      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	f7ff ffa8 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	2300      	movs	r3, #0
 80042f8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042fa:	2201      	movs	r2, #1
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	6919      	ldr	r1, [r3, #16]
 8004300:	4211      	tst	r1, r2
 8004302:	d007      	beq.n	8004314 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004304:	68d9      	ldr	r1, [r3, #12]
 8004306:	4211      	tst	r1, r2
 8004308:	d004      	beq.n	8004314 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800430a:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800430c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800430e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004310:	f7fe fa48 	bl	80027a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	6919      	ldr	r1, [r3, #16]
 800431a:	4211      	tst	r1, r2
 800431c:	d008      	beq.n	8004330 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431e:	68d9      	ldr	r1, [r3, #12]
 8004320:	4211      	tst	r1, r2
 8004322:	d005      	beq.n	8004330 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004324:	3a02      	subs	r2, #2
 8004326:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004328:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800432a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800432c:	f000 f8eb 	bl	8004506 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	05d2      	lsls	r2, r2, #23
 8004336:	d507      	bpl.n	8004348 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	0612      	lsls	r2, r2, #24
 800433c:	d504      	bpl.n	8004348 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800433e:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004340:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004342:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004344:	f000 f8e0 	bl	8004508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004348:	2240      	movs	r2, #64	; 0x40
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	6919      	ldr	r1, [r3, #16]
 800434e:	4211      	tst	r1, r2
 8004350:	d007      	beq.n	8004362 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004352:	68d9      	ldr	r1, [r3, #12]
 8004354:	4211      	tst	r1, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004358:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800435a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800435c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800435e:	f7ff ff74 	bl	800424a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004362:	2220      	movs	r2, #32
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	6919      	ldr	r1, [r3, #16]
 8004368:	4211      	tst	r1, r2
 800436a:	d007      	beq.n	800437c <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800436c:	68d9      	ldr	r1, [r3, #12]
 800436e:	4211      	tst	r1, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004372:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004374:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004376:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004378:	f000 f8c4 	bl	8004504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800437c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	f7ff ff61 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004382:	0020      	movs	r0, r4
 8004384:	f7ff ff60 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
 8004388:	e774      	b.n	8004274 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	f7ff ff5b 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438e:	0020      	movs	r0, r4
 8004390:	f7ff ff5a 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
 8004394:	e785      	b.n	80042a2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	f7ff ff55 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439a:	0020      	movs	r0, r4
 800439c:	f7ff ff54 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
 80043a0:	e793      	b.n	80042ca <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	f7ff ff4f 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	0020      	movs	r0, r4
 80043a8:	f7ff ff4e 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
 80043ac:	e7a3      	b.n	80042f6 <HAL_TIM_IRQHandler+0xaa>
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	fffffeff 	.word	0xfffffeff

080043b4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <TIM_Base_SetConfig+0x74>)
{
 80043b6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80043b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ba:	4290      	cmp	r0, r2
 80043bc:	d002      	beq.n	80043c4 <TIM_Base_SetConfig+0x10>
 80043be:	4c1b      	ldr	r4, [pc, #108]	; (800442c <TIM_Base_SetConfig+0x78>)
 80043c0:	42a0      	cmp	r0, r4
 80043c2:	d108      	bne.n	80043d6 <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c4:	2470      	movs	r4, #112	; 0x70
 80043c6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80043c8:	684c      	ldr	r4, [r1, #4]
 80043ca:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043cc:	4290      	cmp	r0, r2
 80043ce:	d00e      	beq.n	80043ee <TIM_Base_SetConfig+0x3a>
 80043d0:	4c16      	ldr	r4, [pc, #88]	; (800442c <TIM_Base_SetConfig+0x78>)
 80043d2:	42a0      	cmp	r0, r4
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0x3a>
 80043d6:	4c16      	ldr	r4, [pc, #88]	; (8004430 <TIM_Base_SetConfig+0x7c>)
 80043d8:	42a0      	cmp	r0, r4
 80043da:	d008      	beq.n	80043ee <TIM_Base_SetConfig+0x3a>
 80043dc:	4c15      	ldr	r4, [pc, #84]	; (8004434 <TIM_Base_SetConfig+0x80>)
 80043de:	42a0      	cmp	r0, r4
 80043e0:	d005      	beq.n	80043ee <TIM_Base_SetConfig+0x3a>
 80043e2:	4c15      	ldr	r4, [pc, #84]	; (8004438 <TIM_Base_SetConfig+0x84>)
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d002      	beq.n	80043ee <TIM_Base_SetConfig+0x3a>
 80043e8:	4c14      	ldr	r4, [pc, #80]	; (800443c <TIM_Base_SetConfig+0x88>)
 80043ea:	42a0      	cmp	r0, r4
 80043ec:	d103      	bne.n	80043f6 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	4c14      	ldr	r4, [pc, #80]	; (8004440 <TIM_Base_SetConfig+0x8c>)
 80043f0:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f2:	68cb      	ldr	r3, [r1, #12]
 80043f4:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f6:	2480      	movs	r4, #128	; 0x80
 80043f8:	43a3      	bics	r3, r4
 80043fa:	694c      	ldr	r4, [r1, #20]
 80043fc:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80043fe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004400:	688b      	ldr	r3, [r1, #8]
 8004402:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004404:	680b      	ldr	r3, [r1, #0]
 8004406:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	4290      	cmp	r0, r2
 800440a:	d008      	beq.n	800441e <TIM_Base_SetConfig+0x6a>
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <TIM_Base_SetConfig+0x80>)
 800440e:	4298      	cmp	r0, r3
 8004410:	d005      	beq.n	800441e <TIM_Base_SetConfig+0x6a>
 8004412:	4b09      	ldr	r3, [pc, #36]	; (8004438 <TIM_Base_SetConfig+0x84>)
 8004414:	4298      	cmp	r0, r3
 8004416:	d002      	beq.n	800441e <TIM_Base_SetConfig+0x6a>
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <TIM_Base_SetConfig+0x88>)
 800441a:	4298      	cmp	r0, r3
 800441c:	d101      	bne.n	8004422 <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441e:	690b      	ldr	r3, [r1, #16]
 8004420:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004422:	2301      	movs	r3, #1
 8004424:	6143      	str	r3, [r0, #20]
}
 8004426:	bd10      	pop	{r4, pc}
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40002000 	.word	0x40002000
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800
 8004440:	fffffcff 	.word	0xfffffcff

08004444 <HAL_TIM_Base_Init>:
{
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004448:	2001      	movs	r0, #1
  if (htim == NULL)
 800444a:	2c00      	cmp	r4, #0
 800444c:	d023      	beq.n	8004496 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	0025      	movs	r5, r4
 8004450:	353d      	adds	r5, #61	; 0x3d
 8004452:	782b      	ldrb	r3, [r5, #0]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800445a:	0023      	movs	r3, r4
 800445c:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800445e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004460:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004462:	f7fe fa95 	bl	8002990 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004466:	2302      	movs	r3, #2
 8004468:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	1d21      	adds	r1, r4, #4
 800446e:	f7ff ffa1 	bl	80043b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004472:	0022      	movs	r2, r4
 8004474:	2301      	movs	r3, #1
  return HAL_OK;
 8004476:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	3248      	adds	r2, #72	; 0x48
 800447a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447e:	3a0a      	subs	r2, #10
 8004480:	7013      	strb	r3, [r2, #0]
 8004482:	7053      	strb	r3, [r2, #1]
 8004484:	7093      	strb	r3, [r2, #2]
 8004486:	70d3      	strb	r3, [r2, #3]
 8004488:	7113      	strb	r3, [r2, #4]
 800448a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448c:	7193      	strb	r3, [r2, #6]
 800448e:	71d3      	strb	r3, [r2, #7]
 8004490:	7213      	strb	r3, [r2, #8]
 8004492:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004494:	702b      	strb	r3, [r5, #0]
}
 8004496:	bd70      	pop	{r4, r5, r6, pc}

08004498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800449a:	0004      	movs	r4, r0
 800449c:	2202      	movs	r2, #2
 800449e:	343c      	adds	r4, #60	; 0x3c
 80044a0:	7825      	ldrb	r5, [r4, #0]
{
 80044a2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80044a4:	0010      	movs	r0, r2
 80044a6:	2d01      	cmp	r5, #1
 80044a8:	d022      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044aa:	001d      	movs	r5, r3
 80044ac:	353d      	adds	r5, #61	; 0x3d
 80044ae:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b0:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044b2:	4e10      	ldr	r6, [pc, #64]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 80044b4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80044b6:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044b8:	42b2      	cmp	r2, r6
 80044ba:	d103      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044bc:	4f0e      	ldr	r7, [pc, #56]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80044be:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c0:	684f      	ldr	r7, [r1, #4]
 80044c2:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c4:	2770      	movs	r7, #112	; 0x70
 80044c6:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c8:	680f      	ldr	r7, [r1, #0]
 80044ca:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044cc:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ce:	42b2      	cmp	r2, r6
 80044d0:	d005      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d002      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80044da:	429a      	cmp	r2, r3
 80044dc:	d104      	bne.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e2:	688b      	ldr	r3, [r1, #8]
 80044e4:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e6:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80044ea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80044ee:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80044f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	ff0fffff 	.word	0xff0fffff
 80044fc:	40000400 	.word	0x40000400
 8004500:	40014000 	.word	0x40014000

08004504 <HAL_TIMEx_CommutCallback>:
 8004504:	4770      	bx	lr

08004506 <HAL_TIMEx_BreakCallback>:
 8004506:	4770      	bx	lr

08004508 <HAL_TIMEx_Break2Callback>:
 8004508:	4770      	bx	lr
	...

0800450c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	2201      	movs	r2, #1
 8004514:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	4d13      	ldr	r5, [pc, #76]	; (8004568 <UART_EndRxTransfer+0x5c>)
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	402b      	ands	r3, r5
 8004520:	600b      	str	r3, [r1, #0]
 8004522:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004526:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800452e:	6802      	ldr	r2, [r0, #0]
 8004530:	4c0e      	ldr	r4, [pc, #56]	; (800456c <UART_EndRxTransfer+0x60>)
 8004532:	6893      	ldr	r3, [r2, #8]
 8004534:	4023      	ands	r3, r4
 8004536:	6093      	str	r3, [r2, #8]
 8004538:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d10a      	bne.n	8004558 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004542:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004546:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454a:	2410      	movs	r4, #16
 800454c:	6802      	ldr	r2, [r0, #0]
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	43a3      	bics	r3, r4
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	0003      	movs	r3, r0
 800455a:	2220      	movs	r2, #32
 800455c:	338c      	adds	r3, #140	; 0x8c
 800455e:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004560:	2300      	movs	r3, #0
 8004562:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004564:	6743      	str	r3, [r0, #116]	; 0x74
}
 8004566:	bd30      	pop	{r4, r5, pc}
 8004568:	fffffedf 	.word	0xfffffedf
 800456c:	effffffe 	.word	0xeffffffe

08004570 <HAL_UART_TxCpltCallback>:
 8004570:	4770      	bx	lr

08004572 <HAL_UART_ErrorCallback>:
 8004572:	4770      	bx	lr

08004574 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004574:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	0002      	movs	r2, r0
{
 800457a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800457c:	325e      	adds	r2, #94	; 0x5e
 800457e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8004580:	3a08      	subs	r2, #8
 8004582:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004584:	f7ff fff5 	bl	8004572 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004588:	bd10      	pop	{r4, pc}

0800458a <HAL_UARTEx_RxEventCallback>:
}
 800458a:	4770      	bx	lr

0800458c <HAL_UART_IRQHandler>:
{
 800458c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800458e:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004590:	4dc1      	ldr	r5, [pc, #772]	; (8004898 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004592:	69cb      	ldr	r3, [r1, #28]
{
 8004594:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004596:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004598:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 800459a:	422b      	tst	r3, r5
 800459c:	d110      	bne.n	80045c0 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800459e:	2520      	movs	r5, #32
 80045a0:	422b      	tst	r3, r5
 80045a2:	d100      	bne.n	80045a6 <HAL_UART_IRQHandler+0x1a>
 80045a4:	e09b      	b.n	80046de <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045a6:	2680      	movs	r6, #128	; 0x80
 80045a8:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045aa:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045ac:	4006      	ands	r6, r0
 80045ae:	4335      	orrs	r5, r6
 80045b0:	d100      	bne.n	80045b4 <HAL_UART_IRQHandler+0x28>
 80045b2:	e094      	b.n	80046de <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 80045b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
      huart->TxISR(huart);
 80045b6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d000      	beq.n	80045be <HAL_UART_IRQHandler+0x32>
 80045bc:	e085      	b.n	80046ca <HAL_UART_IRQHandler+0x13e>
 80045be:	e085      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80045c0:	4db6      	ldr	r5, [pc, #728]	; (800489c <HAL_UART_IRQHandler+0x310>)
 80045c2:	4005      	ands	r5, r0
 80045c4:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80045c6:	4db6      	ldr	r5, [pc, #728]	; (80048a0 <HAL_UART_IRQHandler+0x314>)
 80045c8:	9e00      	ldr	r6, [sp, #0]
 80045ca:	4015      	ands	r5, r2
 80045cc:	4335      	orrs	r5, r6
 80045ce:	d100      	bne.n	80045d2 <HAL_UART_IRQHandler+0x46>
 80045d0:	e085      	b.n	80046de <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045d2:	0025      	movs	r5, r4
 80045d4:	2601      	movs	r6, #1
 80045d6:	3590      	adds	r5, #144	; 0x90
 80045d8:	4233      	tst	r3, r6
 80045da:	d005      	beq.n	80045e8 <HAL_UART_IRQHandler+0x5c>
 80045dc:	05d7      	lsls	r7, r2, #23
 80045de:	d503      	bpl.n	80045e8 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045e0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045e2:	682f      	ldr	r7, [r5, #0]
 80045e4:	433e      	orrs	r6, r7
 80045e6:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e8:	2602      	movs	r6, #2
 80045ea:	4233      	tst	r3, r6
 80045ec:	d00c      	beq.n	8004608 <HAL_UART_IRQHandler+0x7c>
 80045ee:	07c7      	lsls	r7, r0, #31
 80045f0:	d50a      	bpl.n	8004608 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f2:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045f4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f6:	3790      	adds	r7, #144	; 0x90
 80045f8:	683e      	ldr	r6, [r7, #0]
 80045fa:	9701      	str	r7, [sp, #4]
 80045fc:	46b4      	mov	ip, r6
 80045fe:	2604      	movs	r6, #4
 8004600:	4667      	mov	r7, ip
 8004602:	433e      	orrs	r6, r7
 8004604:	9f01      	ldr	r7, [sp, #4]
 8004606:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004608:	2604      	movs	r6, #4
 800460a:	4233      	tst	r3, r6
 800460c:	d00c      	beq.n	8004628 <HAL_UART_IRQHandler+0x9c>
 800460e:	07c7      	lsls	r7, r0, #31
 8004610:	d50a      	bpl.n	8004628 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004612:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004614:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004616:	3790      	adds	r7, #144	; 0x90
 8004618:	683e      	ldr	r6, [r7, #0]
 800461a:	9701      	str	r7, [sp, #4]
 800461c:	46b4      	mov	ip, r6
 800461e:	2602      	movs	r6, #2
 8004620:	4667      	mov	r7, ip
 8004622:	433e      	orrs	r6, r7
 8004624:	9f01      	ldr	r7, [sp, #4]
 8004626:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004628:	2608      	movs	r6, #8
 800462a:	46b4      	mov	ip, r6
 800462c:	4233      	tst	r3, r6
 800462e:	d009      	beq.n	8004644 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004630:	2720      	movs	r7, #32
 8004632:	9e00      	ldr	r6, [sp, #0]
 8004634:	4017      	ands	r7, r2
 8004636:	4337      	orrs	r7, r6
 8004638:	d004      	beq.n	8004644 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800463a:	4666      	mov	r6, ip
 800463c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463e:	682f      	ldr	r7, [r5, #0]
 8004640:	433e      	orrs	r6, r7
 8004642:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004644:	2680      	movs	r6, #128	; 0x80
 8004646:	0136      	lsls	r6, r6, #4
 8004648:	4233      	tst	r3, r6
 800464a:	d006      	beq.n	800465a <HAL_UART_IRQHandler+0xce>
 800464c:	0157      	lsls	r7, r2, #5
 800464e:	d504      	bpl.n	800465a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004650:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004652:	2120      	movs	r1, #32
 8004654:	682e      	ldr	r6, [r5, #0]
 8004656:	4331      	orrs	r1, r6
 8004658:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465a:	6829      	ldr	r1, [r5, #0]
 800465c:	2900      	cmp	r1, #0
 800465e:	d035      	beq.n	80046cc <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004660:	2120      	movs	r1, #32
 8004662:	420b      	tst	r3, r1
 8004664:	d00a      	beq.n	800467c <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800466a:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800466c:	4003      	ands	r3, r0
 800466e:	4319      	orrs	r1, r3
 8004670:	d004      	beq.n	800467c <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 8004672:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8004678:	0020      	movs	r0, r4
 800467a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800467c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800467e:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004680:	2740      	movs	r7, #64	; 0x40
 8004682:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004684:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004686:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004688:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800468a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800468c:	431e      	orrs	r6, r3
 800468e:	d022      	beq.n	80046d6 <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8004690:	f7ff ff3c 	bl	800450c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	423b      	tst	r3, r7
 800469a:	d018      	beq.n	80046ce <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a0:	2301      	movs	r3, #1
 80046a2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	0025      	movs	r5, r4
 80046a8:	cd04      	ldmia	r5!, {r2}
 80046aa:	6893      	ldr	r3, [r2, #8]
 80046ac:	43bb      	bics	r3, r7
 80046ae:	6093      	str	r3, [r2, #8]
 80046b0:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80046b4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d009      	beq.n	80046ce <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ba:	4b7a      	ldr	r3, [pc, #488]	; (80048a4 <HAL_UART_IRQHandler+0x318>)
 80046bc:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046be:	f7fe fee3 	bl	8003488 <HAL_DMA_Abort_IT>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046c6:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80046c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80046ca:	4798      	blx	r3
}
 80046cc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80046ce:	0020      	movs	r0, r4
 80046d0:	f7ff ff4f 	bl	8004572 <HAL_UART_ErrorCallback>
 80046d4:	e7fa      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 80046d6:	f7ff ff4c 	bl	8004572 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046da:	602e      	str	r6, [r5, #0]
 80046dc:	e7f6      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046de:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80046e0:	2d01      	cmp	r5, #1
 80046e2:	d000      	beq.n	80046e6 <HAL_UART_IRQHandler+0x15a>
 80046e4:	e09f      	b.n	8004826 <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046e6:	2610      	movs	r6, #16
 80046e8:	4233      	tst	r3, r6
 80046ea:	d100      	bne.n	80046ee <HAL_UART_IRQHandler+0x162>
 80046ec:	e09b      	b.n	8004826 <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046ee:	4232      	tst	r2, r6
 80046f0:	d100      	bne.n	80046f4 <HAL_UART_IRQHandler+0x168>
 80046f2:	e098      	b.n	8004826 <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046f4:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f6:	6889      	ldr	r1, [r1, #8]
 80046f8:	2340      	movs	r3, #64	; 0x40
 80046fa:	000a      	movs	r2, r1
 80046fc:	401a      	ands	r2, r3
 80046fe:	4219      	tst	r1, r3
 8004700:	d057      	beq.n	80047b2 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004702:	1d21      	adds	r1, r4, #4
 8004704:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 8004706:	6810      	ldr	r0, [r2, #0]
 8004708:	6842      	ldr	r2, [r0, #4]
 800470a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800470c:	2a00      	cmp	r2, #0
 800470e:	d0dd      	beq.n	80046cc <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004710:	0027      	movs	r7, r4
 8004712:	375c      	adds	r7, #92	; 0x5c
 8004714:	883f      	ldrh	r7, [r7, #0]
 8004716:	4297      	cmp	r7, r2
 8004718:	d9d8      	bls.n	80046cc <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 800471a:	0027      	movs	r7, r4
 800471c:	375e      	adds	r7, #94	; 0x5e
 800471e:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004720:	6802      	ldr	r2, [r0, #0]
 8004722:	2020      	movs	r0, #32
 8004724:	4684      	mov	ip, r0
 8004726:	4010      	ands	r0, r2
 8004728:	9000      	str	r0, [sp, #0]
 800472a:	4660      	mov	r0, ip
 800472c:	4202      	tst	r2, r0
 800472e:	d132      	bne.n	8004796 <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004730:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004734:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004738:	6820      	ldr	r0, [r4, #0]
 800473a:	4e5b      	ldr	r6, [pc, #364]	; (80048a8 <HAL_UART_IRQHandler+0x31c>)
 800473c:	6802      	ldr	r2, [r0, #0]
 800473e:	4032      	ands	r2, r6
 8004740:	6002      	str	r2, [r0, #0]
 8004742:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004746:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	6882      	ldr	r2, [r0, #8]
 8004752:	43aa      	bics	r2, r5
 8004754:	6082      	str	r2, [r0, #8]
 8004756:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	6882      	ldr	r2, [r0, #8]
 8004766:	439a      	bics	r2, r3
 8004768:	6082      	str	r2, [r0, #8]
 800476a:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 800476e:	0023      	movs	r3, r4
 8004770:	4662      	mov	r2, ip
 8004772:	338c      	adds	r3, #140	; 0x8c
 8004774:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	9b00      	ldr	r3, [sp, #0]
 8004778:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	350f      	adds	r5, #15
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	43ab      	bics	r3, r5
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004790:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 8004792:	f7fe fe3d 	bl	8003410 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004796:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004798:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800479a:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800479c:	0023      	movs	r3, r4
 800479e:	325c      	adds	r2, #92	; 0x5c
 80047a0:	335e      	adds	r3, #94	; 0x5e
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	8811      	ldrh	r1, [r2, #0]
 80047a6:	1ac9      	subs	r1, r1, r3
 80047a8:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047aa:	0020      	movs	r0, r4
 80047ac:	f7ff feed 	bl	800458a <HAL_UARTEx_RxEventCallback>
 80047b0:	e78c      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047b2:	0023      	movs	r3, r4
 80047b4:	0020      	movs	r0, r4
 80047b6:	335c      	adds	r3, #92	; 0x5c
 80047b8:	305e      	adds	r0, #94	; 0x5e
 80047ba:	8819      	ldrh	r1, [r3, #0]
 80047bc:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 80047be:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047c0:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d100      	bne.n	80047c8 <HAL_UART_IRQHandler+0x23c>
 80047c6:	e781      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047c8:	1ac9      	subs	r1, r1, r3
 80047ca:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80047cc:	2900      	cmp	r1, #0
 80047ce:	d100      	bne.n	80047d2 <HAL_UART_IRQHandler+0x246>
 80047d0:	e77c      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047da:	6820      	ldr	r0, [r4, #0]
 80047dc:	4e33      	ldr	r6, [pc, #204]	; (80048ac <HAL_UART_IRQHandler+0x320>)
 80047de:	6803      	ldr	r3, [r0, #0]
 80047e0:	4033      	ands	r3, r6
 80047e2:	6003      	str	r3, [r0, #0]
 80047e4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ec:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	4e2f      	ldr	r6, [pc, #188]	; (80048b0 <HAL_UART_IRQHandler+0x324>)
 80047f4:	6883      	ldr	r3, [r0, #8]
 80047f6:	4033      	ands	r3, r6
 80047f8:	6083      	str	r3, [r0, #8]
 80047fa:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80047fe:	0023      	movs	r3, r4
 8004800:	2020      	movs	r0, #32
 8004802:	338c      	adds	r3, #140	; 0x8c
 8004804:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8004808:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004812:	2510      	movs	r5, #16
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	43ab      	bics	r3, r5
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004820:	2302      	movs	r3, #2
 8004822:	6723      	str	r3, [r4, #112]	; 0x70
 8004824:	e7c1      	b.n	80047aa <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004826:	2580      	movs	r5, #128	; 0x80
 8004828:	036d      	lsls	r5, r5, #13
 800482a:	422b      	tst	r3, r5
 800482c:	d006      	beq.n	800483c <HAL_UART_IRQHandler+0x2b0>
 800482e:	0246      	lsls	r6, r0, #9
 8004830:	d504      	bpl.n	800483c <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 8004832:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004834:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004836:	f000 fa6b 	bl	8004d10 <HAL_UARTEx_WakeupCallback>
    return;
 800483a:	e747      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	420b      	tst	r3, r1
 8004840:	d007      	beq.n	8004852 <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004842:	2580      	movs	r5, #128	; 0x80
 8004844:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004846:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004848:	4028      	ands	r0, r5
 800484a:	4301      	orrs	r1, r0
 800484c:	d001      	beq.n	8004852 <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 800484e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004850:	e6b1      	b.n	80045b6 <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	420b      	tst	r3, r1
 8004856:	d016      	beq.n	8004886 <HAL_UART_IRQHandler+0x2fa>
 8004858:	420a      	tst	r2, r1
 800485a:	d014      	beq.n	8004886 <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004860:	2301      	movs	r3, #1
 8004862:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	438b      	bics	r3, r1
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004872:	0023      	movs	r3, r4
 8004874:	2220      	movs	r2, #32
 8004876:	3388      	adds	r3, #136	; 0x88
 8004878:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800487a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800487c:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800487e:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8004880:	f7ff fe76 	bl	8004570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004884:	e722      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004886:	0219      	lsls	r1, r3, #8
 8004888:	d514      	bpl.n	80048b4 <HAL_UART_IRQHandler+0x328>
 800488a:	0051      	lsls	r1, r2, #1
 800488c:	d512      	bpl.n	80048b4 <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800488e:	0020      	movs	r0, r4
 8004890:	f000 fa40 	bl	8004d14 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004894:	e71a      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	0000080f 	.word	0x0000080f
 800489c:	10000001 	.word	0x10000001
 80048a0:	04000120 	.word	0x04000120
 80048a4:	08004575 	.word	0x08004575
 80048a8:	fffffeff 	.word	0xfffffeff
 80048ac:	fffffedf 	.word	0xfffffedf
 80048b0:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048b4:	01db      	lsls	r3, r3, #7
 80048b6:	d400      	bmi.n	80048ba <HAL_UART_IRQHandler+0x32e>
 80048b8:	e708      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	db00      	blt.n	80048c0 <HAL_UART_IRQHandler+0x334>
 80048be:	e705      	b.n	80046cc <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048c0:	0020      	movs	r0, r4
 80048c2:	f000 fa26 	bl	8004d12 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80048c6:	e701      	b.n	80046cc <HAL_UART_IRQHandler+0x140>

080048c8 <UART_SetConfig>:
{
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048cc:	6925      	ldr	r5, [r4, #16]
 80048ce:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048d0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d2:	4329      	orrs	r1, r5
 80048d4:	6965      	ldr	r5, [r4, #20]
 80048d6:	69c3      	ldr	r3, [r0, #28]
 80048d8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048da:	6810      	ldr	r0, [r2, #0]
 80048dc:	4d4e      	ldr	r5, [pc, #312]	; (8004a18 <UART_SetConfig+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048de:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e0:	4028      	ands	r0, r5
 80048e2:	4301      	orrs	r1, r0
 80048e4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e6:	6851      	ldr	r1, [r2, #4]
 80048e8:	484c      	ldr	r0, [pc, #304]	; (8004a1c <UART_SetConfig+0x154>)
    tmpreg |= huart->Init.OneBitSampling;
 80048ea:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ec:	4001      	ands	r1, r0
 80048ee:	68e0      	ldr	r0, [r4, #12]
 80048f0:	4301      	orrs	r1, r0
 80048f2:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f6:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80048f8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048fa:	4d49      	ldr	r5, [pc, #292]	; (8004a20 <UART_SetConfig+0x158>)
 80048fc:	4028      	ands	r0, r5
 80048fe:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004900:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004902:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004904:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004906:	4381      	bics	r1, r0
 8004908:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800490a:	4301      	orrs	r1, r0
 800490c:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800490e:	4945      	ldr	r1, [pc, #276]	; (8004a24 <UART_SetConfig+0x15c>)
 8004910:	428a      	cmp	r2, r1
 8004912:	d117      	bne.n	8004944 <UART_SetConfig+0x7c>
 8004914:	2103      	movs	r1, #3
 8004916:	4a44      	ldr	r2, [pc, #272]	; (8004a28 <UART_SetConfig+0x160>)
 8004918:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800491a:	400a      	ands	r2, r1
 800491c:	3a01      	subs	r2, #1
 800491e:	4943      	ldr	r1, [pc, #268]	; (8004a2c <UART_SetConfig+0x164>)
 8004920:	2a02      	cmp	r2, #2
 8004922:	d917      	bls.n	8004954 <UART_SetConfig+0x8c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	0212      	lsls	r2, r2, #8
 8004928:	4293      	cmp	r3, r2
 800492a:	d000      	beq.n	800492e <UART_SetConfig+0x66>
 800492c:	e068      	b.n	8004a00 <UART_SetConfig+0x138>
        pclk = HAL_RCC_GetPCLK1Freq();
 800492e:	f7ff fafd 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8004934:	d128      	bne.n	8004988 <UART_SetConfig+0xc0>
 8004936:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8004938:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <UART_SetConfig+0x168>)
 800493a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800493c:	2300      	movs	r3, #0
 800493e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004940:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004942:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004944:	493b      	ldr	r1, [pc, #236]	; (8004a34 <UART_SetConfig+0x16c>)
 8004946:	428a      	cmp	r2, r1
 8004948:	d112      	bne.n	8004970 <UART_SetConfig+0xa8>
 800494a:	200c      	movs	r0, #12
 800494c:	4a36      	ldr	r2, [pc, #216]	; (8004a28 <UART_SetConfig+0x160>)
 800494e:	493a      	ldr	r1, [pc, #232]	; (8004a38 <UART_SetConfig+0x170>)
 8004950:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004952:	4002      	ands	r2, r0
 8004954:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	0212      	lsls	r2, r2, #8
 800495a:	4293      	cmp	r3, r2
 800495c:	d131      	bne.n	80049c2 <UART_SetConfig+0xfa>
    switch (clocksource)
 800495e:	2808      	cmp	r0, #8
 8004960:	d80c      	bhi.n	800497c <UART_SetConfig+0xb4>
 8004962:	f7fb fbd5 	bl	8000110 <__gnu_thumb1_case_sqi>
 8004966:	0be4      	.short	0x0be4
 8004968:	0b0d0b10 	.word	0x0b0d0b10
 800496c:	0b0b      	.short	0x0b0b
 800496e:	11          	.byte	0x11
 800496f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004970:	4932      	ldr	r1, [pc, #200]	; (8004a3c <UART_SetConfig+0x174>)
 8004972:	428a      	cmp	r2, r1
 8004974:	d0d6      	beq.n	8004924 <UART_SetConfig+0x5c>
 8004976:	4932      	ldr	r1, [pc, #200]	; (8004a40 <UART_SetConfig+0x178>)
 8004978:	428a      	cmp	r2, r1
 800497a:	d0d3      	beq.n	8004924 <UART_SetConfig+0x5c>
    switch (clocksource)
 800497c:	2001      	movs	r0, #1
 800497e:	e7db      	b.n	8004938 <UART_SetConfig+0x70>
        pclk = HAL_RCC_GetSysClockFreq();
 8004980:	f7ff f9e2 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004984:	e7d5      	b.n	8004932 <UART_SetConfig+0x6a>
    switch (clocksource)
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <UART_SetConfig+0x17c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004988:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <UART_SetConfig+0x180>)
 800498c:	0049      	lsls	r1, r1, #1
 800498e:	5a89      	ldrh	r1, [r1, r2]
 8004990:	0018      	movs	r0, r3
 8004992:	f7fb fbdb 	bl	800014c <__udivsi3>
 8004996:	6865      	ldr	r5, [r4, #4]
 8004998:	0040      	lsls	r0, r0, #1
 800499a:	086b      	lsrs	r3, r5, #1
 800499c:	18c0      	adds	r0, r0, r3
 800499e:	0029      	movs	r1, r5
 80049a0:	f7fb fbd4 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a4:	0002      	movs	r2, r0
 80049a6:	4b29      	ldr	r3, [pc, #164]	; (8004a4c <UART_SetConfig+0x184>)
 80049a8:	3a10      	subs	r2, #16
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d8e6      	bhi.n	800497c <UART_SetConfig+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ae:	230f      	movs	r3, #15
 80049b0:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049b2:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049b4:	439a      	bics	r2, r3
 80049b6:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049b8:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	4303      	orrs	r3, r0
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e7b9      	b.n	8004936 <UART_SetConfig+0x6e>
    switch (clocksource)
 80049c2:	2808      	cmp	r0, #8
 80049c4:	d8da      	bhi.n	800497c <UART_SetConfig+0xb4>
 80049c6:	f7fb fba3 	bl	8000110 <__gnu_thumb1_case_sqi>
 80049ca:	d91b      	.short	0xd91b
 80049cc:	d921d924 	.word	0xd921d924
 80049d0:	d9d9      	.short	0xd9d9
 80049d2:	05          	.byte	0x05
 80049d3:	00          	.byte	0x00
 80049d4:	2080      	movs	r0, #128	; 0x80
 80049d6:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <UART_SetConfig+0x180>)
 80049dc:	0052      	lsls	r2, r2, #1
 80049de:	5ad1      	ldrh	r1, [r2, r3]
 80049e0:	f7fb fbb4 	bl	800014c <__udivsi3>
 80049e4:	6865      	ldr	r5, [r4, #4]
 80049e6:	086b      	lsrs	r3, r5, #1
 80049e8:	18c0      	adds	r0, r0, r3
 80049ea:	0029      	movs	r1, r5
 80049ec:	f7fb fbae 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f0:	0002      	movs	r2, r0
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <UART_SetConfig+0x184>)
 80049f4:	3a10      	subs	r2, #16
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d8c0      	bhi.n	800497c <UART_SetConfig+0xb4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	60d8      	str	r0, [r3, #12]
 80049fe:	e79a      	b.n	8004936 <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7ff fa94 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d100      	bne.n	8004a0a <UART_SetConfig+0x142>
 8004a08:	e795      	b.n	8004936 <UART_SetConfig+0x6e>
 8004a0a:	e7e5      	b.n	80049d8 <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0c:	f7ff f99c 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
        break;
 8004a10:	e7f8      	b.n	8004a04 <UART_SetConfig+0x13c>
        pclk = (uint32_t) HSI_VALUE;
 8004a12:	480c      	ldr	r0, [pc, #48]	; (8004a44 <UART_SetConfig+0x17c>)
 8004a14:	e7e0      	b.n	80049d8 <UART_SetConfig+0x110>
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	cfff69f3 	.word	0xcfff69f3
 8004a1c:	ffffcfff 	.word	0xffffcfff
 8004a20:	11fff4ff 	.word	0x11fff4ff
 8004a24:	40013800 	.word	0x40013800
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	080097b8 	.word	0x080097b8
 8004a30:	00010001 	.word	0x00010001
 8004a34:	40004400 	.word	0x40004400
 8004a38:	080097bb 	.word	0x080097bb
 8004a3c:	40004800 	.word	0x40004800
 8004a40:	40004c00 	.word	0x40004c00
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	080097c8 	.word	0x080097c8
 8004a4c:	0000ffef 	.word	0x0000ffef

08004a50 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a50:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8004a52:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a54:	07da      	lsls	r2, r3, #31
 8004a56:	d506      	bpl.n	8004a66 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	4c28      	ldr	r4, [pc, #160]	; (8004afc <UART_AdvFeatureConfig+0xac>)
 8004a5c:	684a      	ldr	r2, [r1, #4]
 8004a5e:	4022      	ands	r2, r4
 8004a60:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004a62:	4322      	orrs	r2, r4
 8004a64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a66:	079a      	lsls	r2, r3, #30
 8004a68:	d506      	bpl.n	8004a78 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a6a:	6801      	ldr	r1, [r0, #0]
 8004a6c:	4c24      	ldr	r4, [pc, #144]	; (8004b00 <UART_AdvFeatureConfig+0xb0>)
 8004a6e:	684a      	ldr	r2, [r1, #4]
 8004a70:	4022      	ands	r2, r4
 8004a72:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004a74:	4322      	orrs	r2, r4
 8004a76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a78:	075a      	lsls	r2, r3, #29
 8004a7a:	d506      	bpl.n	8004a8a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a7c:	6801      	ldr	r1, [r0, #0]
 8004a7e:	4c21      	ldr	r4, [pc, #132]	; (8004b04 <UART_AdvFeatureConfig+0xb4>)
 8004a80:	684a      	ldr	r2, [r1, #4]
 8004a82:	4022      	ands	r2, r4
 8004a84:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004a86:	4322      	orrs	r2, r4
 8004a88:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a8a:	071a      	lsls	r2, r3, #28
 8004a8c:	d506      	bpl.n	8004a9c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a8e:	6801      	ldr	r1, [r0, #0]
 8004a90:	4c1d      	ldr	r4, [pc, #116]	; (8004b08 <UART_AdvFeatureConfig+0xb8>)
 8004a92:	684a      	ldr	r2, [r1, #4]
 8004a94:	4022      	ands	r2, r4
 8004a96:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004a98:	4322      	orrs	r2, r4
 8004a9a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a9c:	06da      	lsls	r2, r3, #27
 8004a9e:	d506      	bpl.n	8004aae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa0:	6801      	ldr	r1, [r0, #0]
 8004aa2:	4c1a      	ldr	r4, [pc, #104]	; (8004b0c <UART_AdvFeatureConfig+0xbc>)
 8004aa4:	688a      	ldr	r2, [r1, #8]
 8004aa6:	4022      	ands	r2, r4
 8004aa8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004aaa:	4322      	orrs	r2, r4
 8004aac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aae:	069a      	lsls	r2, r3, #26
 8004ab0:	d506      	bpl.n	8004ac0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab2:	6801      	ldr	r1, [r0, #0]
 8004ab4:	4c16      	ldr	r4, [pc, #88]	; (8004b10 <UART_AdvFeatureConfig+0xc0>)
 8004ab6:	688a      	ldr	r2, [r1, #8]
 8004ab8:	4022      	ands	r2, r4
 8004aba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004abc:	4322      	orrs	r2, r4
 8004abe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac0:	065a      	lsls	r2, r3, #25
 8004ac2:	d510      	bpl.n	8004ae6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac4:	6801      	ldr	r1, [r0, #0]
 8004ac6:	4d13      	ldr	r5, [pc, #76]	; (8004b14 <UART_AdvFeatureConfig+0xc4>)
 8004ac8:	684a      	ldr	r2, [r1, #4]
 8004aca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004acc:	402a      	ands	r2, r5
 8004ace:	4322      	orrs	r2, r4
 8004ad0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	0352      	lsls	r2, r2, #13
 8004ad6:	4294      	cmp	r4, r2
 8004ad8:	d105      	bne.n	8004ae6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ada:	684a      	ldr	r2, [r1, #4]
 8004adc:	4c0e      	ldr	r4, [pc, #56]	; (8004b18 <UART_AdvFeatureConfig+0xc8>)
 8004ade:	4022      	ands	r2, r4
 8004ae0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004ae2:	4322      	orrs	r2, r4
 8004ae4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	d506      	bpl.n	8004af8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aea:	6802      	ldr	r2, [r0, #0]
 8004aec:	490b      	ldr	r1, [pc, #44]	; (8004b1c <UART_AdvFeatureConfig+0xcc>)
 8004aee:	6853      	ldr	r3, [r2, #4]
 8004af0:	400b      	ands	r3, r1
 8004af2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6053      	str	r3, [r2, #4]
}
 8004af8:	bd30      	pop	{r4, r5, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	fffdffff 	.word	0xfffdffff
 8004b00:	fffeffff 	.word	0xfffeffff
 8004b04:	fffbffff 	.word	0xfffbffff
 8004b08:	ffff7fff 	.word	0xffff7fff
 8004b0c:	ffffefff 	.word	0xffffefff
 8004b10:	ffffdfff 	.word	0xffffdfff
 8004b14:	ffefffff 	.word	0xffefffff
 8004b18:	ff9fffff 	.word	0xff9fffff
 8004b1c:	fff7ffff 	.word	0xfff7ffff

08004b20 <UART_WaitOnFlagUntilTimeout>:
{
 8004b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b22:	2780      	movs	r7, #128	; 0x80
{
 8004b24:	0004      	movs	r4, r0
 8004b26:	000d      	movs	r5, r1
 8004b28:	0016      	movs	r6, r2
 8004b2a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b2c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	69d3      	ldr	r3, [r2, #28]
 8004b32:	402b      	ands	r3, r5
 8004b34:	1b5b      	subs	r3, r3, r5
 8004b36:	4259      	negs	r1, r3
 8004b38:	414b      	adcs	r3, r1
 8004b3a:	42b3      	cmp	r3, r6
 8004b3c:	d001      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e02a      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8004b42:	9b08      	ldr	r3, [sp, #32]
 8004b44:	3301      	adds	r3, #1
 8004b46:	d0f3      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b48:	f7fe f976 	bl	8002e38 <HAL_GetTick>
 8004b4c:	9b01      	ldr	r3, [sp, #4]
 8004b4e:	1ac0      	subs	r0, r0, r3
 8004b50:	9b08      	ldr	r3, [sp, #32]
 8004b52:	4298      	cmp	r0, r3
 8004b54:	d801      	bhi.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x3a>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11f      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b64:	6821      	ldr	r1, [r4, #0]
 8004b66:	4d20      	ldr	r5, [pc, #128]	; (8004be8 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8004b68:	680b      	ldr	r3, [r1, #0]
 8004b6a:	402b      	ands	r3, r5
 8004b6c:	600b      	str	r3, [r1, #0]
 8004b6e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b72:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7a:	6821      	ldr	r1, [r4, #0]
 8004b7c:	688b      	ldr	r3, [r1, #8]
 8004b7e:	4393      	bics	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
 8004b82:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8004b86:	0022      	movs	r2, r4
 8004b88:	2320      	movs	r3, #32
 8004b8a:	3288      	adds	r2, #136	; 0x88
 8004b8c:	6013      	str	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	6053      	str	r3, [r2, #4]
          __HAL_UNLOCK(huart);
 8004b90:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004b92:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004b94:	3484      	adds	r4, #132	; 0x84
 8004b96:	7023      	strb	r3, [r4, #0]
}
 8004b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b9a:	2104      	movs	r1, #4
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	420a      	tst	r2, r1
 8004ba2:	d0c4      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	423a      	tst	r2, r7
 8004ba8:	d0c1      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004baa:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bb6:	6821      	ldr	r1, [r4, #0]
 8004bb8:	4d0b      	ldr	r5, [pc, #44]	; (8004be8 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8004bba:	680b      	ldr	r3, [r1, #0]
 8004bbc:	402b      	ands	r3, r5
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc8:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bcc:	6821      	ldr	r1, [r4, #0]
 8004bce:	688b      	ldr	r3, [r1, #8]
 8004bd0:	4393      	bics	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]
 8004bd4:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8004bd8:	0022      	movs	r2, r4
 8004bda:	2320      	movs	r3, #32
 8004bdc:	3288      	adds	r2, #136	; 0x88
 8004bde:	6013      	str	r3, [r2, #0]
          huart->RxState = HAL_UART_STATE_READY;
 8004be0:	6053      	str	r3, [r2, #4]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be2:	6093      	str	r3, [r2, #8]
 8004be4:	e7d4      	b.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x70>
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	fffffe5f 	.word	0xfffffe5f

08004bec <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bec:	0003      	movs	r3, r0
{
 8004bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	2600      	movs	r6, #0
{
 8004bf2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf4:	3390      	adds	r3, #144	; 0x90
 8004bf6:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8004bf8:	f7fe f91e 	bl	8002e38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bfc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004bfe:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	071b      	lsls	r3, r3, #28
 8004c04:	d419      	bmi.n	8004c3a <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	075b      	lsls	r3, r3, #29
 8004c0c:	d50a      	bpl.n	8004c24 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <UART_CheckIdleState+0x68>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	0020      	movs	r0, r4
 8004c18:	002b      	movs	r3, r5
 8004c1a:	03c9      	lsls	r1, r1, #15
 8004c1c:	f7ff ff80 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d115      	bne.n	8004c50 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	0022      	movs	r2, r4
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c28:	2320      	movs	r3, #32
 8004c2a:	3288      	adds	r2, #136	; 0x88
 8004c2c:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004c2e:	6053      	str	r3, [r2, #4]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c30:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c32:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8004c34:	3484      	adds	r4, #132	; 0x84
 8004c36:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004c38:	e00b      	b.n	8004c52 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <UART_CheckIdleState+0x68>)
 8004c3e:	0032      	movs	r2, r6
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	0389      	lsls	r1, r1, #14
 8004c44:	0003      	movs	r3, r0
 8004c46:	0020      	movs	r0, r4
 8004c48:	f7ff ff6a 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d0da      	beq.n	8004c06 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004c50:	2003      	movs	r0, #3
}
 8004c52:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004c54:	01ffffff 	.word	0x01ffffff

08004c58 <HAL_UART_Init>:
{
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004c5e:	2001      	movs	r0, #1
}
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c62:	0005      	movs	r5, r0
 8004c64:	3588      	adds	r5, #136	; 0x88
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8004c6c:	0002      	movs	r2, r0
 8004c6e:	3284      	adds	r2, #132	; 0x84
 8004c70:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004c72:	f7fd fea9 	bl	80029c8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c76:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004c78:	2101      	movs	r1, #1
 8004c7a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8004c7e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c80:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004c82:	438b      	bics	r3, r1
 8004c84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c86:	f7ff fe1f 	bl	80048c8 <UART_SetConfig>
 8004c8a:	2801      	cmp	r0, #1
 8004c8c:	d0e7      	beq.n	8004c5e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8004c94:	0020      	movs	r0, r4
 8004c96:	f7ff fedb 	bl	8004a50 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <HAL_UART_Init+0x64>)
 8004c9e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004ca0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	438a      	bics	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004cae:	2201      	movs	r2, #1
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004cb6:	f7ff ff99 	bl	8004bec <UART_CheckIdleState>
 8004cba:	e7d1      	b.n	8004c60 <HAL_UART_Init+0x8>
 8004cbc:	ffffb7ff 	.word	0xffffb7ff

08004cc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc2:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cc4:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8004cc6:	0004      	movs	r4, r0
 8004cc8:	376a      	adds	r7, #106	; 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8004cce:	2001      	movs	r0, #1
 8004cd0:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8004cd2:	3468      	adds	r4, #104	; 0x68
 8004cd4:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cd6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cd8:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cda:	4e0b      	ldr	r6, [pc, #44]	; (8004d08 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cdc:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cde:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ce0:	4d0a      	ldr	r5, [pc, #40]	; (8004d0c <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ce2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ce4:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ce6:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ce8:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cea:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cec:	f7fb fab8 	bl	8000260 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cf0:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cf2:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cf4:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cf6:	0f5b      	lsrs	r3, r3, #29
 8004cf8:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cfa:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cfc:	00c0      	lsls	r0, r0, #3
 8004cfe:	f7fb faaf 	bl	8000260 <__divsi3>
 8004d02:	b280      	uxth	r0, r0
}
 8004d04:	e7e5      	b.n	8004cd2 <UARTEx_SetNbDataToProcess+0x12>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	080097e8 	.word	0x080097e8
 8004d0c:	080097e0 	.word	0x080097e0

08004d10 <HAL_UARTEx_WakeupCallback>:
}
 8004d10:	4770      	bx	lr

08004d12 <HAL_UARTEx_RxFifoFullCallback>:
 8004d12:	4770      	bx	lr

08004d14 <HAL_UARTEx_TxFifoEmptyCallback>:
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_UARTEx_DisableFifoMode>:
{
 8004d18:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004d1a:	0004      	movs	r4, r0
 8004d1c:	3484      	adds	r4, #132	; 0x84
 8004d1e:	7822      	ldrb	r2, [r4, #0]
{
 8004d20:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8004d22:	2002      	movs	r0, #2
 8004d24:	2a01      	cmp	r2, #1
 8004d26:	d011      	beq.n	8004d4c <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8004d28:	001d      	movs	r5, r3
 8004d2a:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004d2c:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004d2e:	3588      	adds	r5, #136	; 0x88
 8004d30:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004d36:	6810      	ldr	r0, [r2, #0]
 8004d38:	43b0      	bics	r0, r6
 8004d3a:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d3c:	4804      	ldr	r0, [pc, #16]	; (8004d50 <HAL_UARTEx_DisableFifoMode+0x38>)
 8004d3e:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d40:	2000      	movs	r0, #0
 8004d42:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8004d44:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d46:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004d48:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8004d4a:	7020      	strb	r0, [r4, #0]
}
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	dfffffff 	.word	0xdfffffff

08004d54 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8004d56:	0005      	movs	r5, r0
 8004d58:	3584      	adds	r5, #132	; 0x84
{
 8004d5a:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8004d5c:	7829      	ldrb	r1, [r5, #0]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	2901      	cmp	r1, #1
 8004d62:	d015      	beq.n	8004d90 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004d64:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8004d66:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d68:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d6a:	3688      	adds	r6, #136	; 0x88
 8004d6c:	3222      	adds	r2, #34	; 0x22
 8004d6e:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d70:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	438a      	bics	r2, r1
 8004d76:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d78:	68a1      	ldr	r1, [r4, #8]
 8004d7a:	00c9      	lsls	r1, r1, #3
 8004d7c:	08c9      	lsrs	r1, r1, #3
 8004d7e:	4319      	orrs	r1, r3
 8004d80:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004d82:	f7ff ff9d 	bl	8004cc0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004d86:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004d88:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d8a:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8004d8e:	702a      	strb	r2, [r5, #0]
}
 8004d90:	0010      	movs	r0, r2
 8004d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d94 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8004d96:	0005      	movs	r5, r0
 8004d98:	3584      	adds	r5, #132	; 0x84
{
 8004d9a:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004d9c:	7829      	ldrb	r1, [r5, #0]
 8004d9e:	2302      	movs	r3, #2
 8004da0:	2901      	cmp	r1, #1
 8004da2:	d015      	beq.n	8004dd0 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8004da6:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da8:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	3688      	adds	r6, #136	; 0x88
 8004dac:	3322      	adds	r3, #34	; 0x22
 8004dae:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004db0:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	438b      	bics	r3, r1
 8004db6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004db8:	68a1      	ldr	r1, [r4, #8]
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8004dbc:	4019      	ands	r1, r3
 8004dbe:	4311      	orrs	r1, r2
 8004dc0:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004dc2:	f7ff ff7d 	bl	8004cc0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004dc6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dc8:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004dca:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	702b      	strb	r3, [r5, #0]
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd4:	f1ffffff 	.word	0xf1ffffff

08004dd8 <__cvt>:
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	001e      	movs	r6, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	0014      	movs	r4, r2
 8004de0:	b08b      	sub	sp, #44	; 0x2c
 8004de2:	429e      	cmp	r6, r3
 8004de4:	da04      	bge.n	8004df0 <__cvt+0x18>
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	0609      	lsls	r1, r1, #24
 8004dea:	1873      	adds	r3, r6, r1
 8004dec:	001e      	movs	r6, r3
 8004dee:	232d      	movs	r3, #45	; 0x2d
 8004df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004df2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004df4:	7013      	strb	r3, [r2, #0]
 8004df6:	2320      	movs	r3, #32
 8004df8:	2203      	movs	r2, #3
 8004dfa:	439f      	bics	r7, r3
 8004dfc:	2f46      	cmp	r7, #70	; 0x46
 8004dfe:	d007      	beq.n	8004e10 <__cvt+0x38>
 8004e00:	003b      	movs	r3, r7
 8004e02:	3b45      	subs	r3, #69	; 0x45
 8004e04:	4259      	negs	r1, r3
 8004e06:	414b      	adcs	r3, r1
 8004e08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	18cb      	adds	r3, r1, r3
 8004e0e:	9310      	str	r3, [sp, #64]	; 0x40
 8004e10:	ab09      	add	r3, sp, #36	; 0x24
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	ab08      	add	r3, sp, #32
 8004e16:	9303      	str	r3, [sp, #12]
 8004e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e1a:	9200      	str	r2, [sp, #0]
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e20:	0022      	movs	r2, r4
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	0033      	movs	r3, r6
 8004e26:	f001 f8b3 	bl	8005f90 <_dtoa_r>
 8004e2a:	0005      	movs	r5, r0
 8004e2c:	2f47      	cmp	r7, #71	; 0x47
 8004e2e:	d102      	bne.n	8004e36 <__cvt+0x5e>
 8004e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e32:	07db      	lsls	r3, r3, #31
 8004e34:	d528      	bpl.n	8004e88 <__cvt+0xb0>
 8004e36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e38:	18eb      	adds	r3, r5, r3
 8004e3a:	9307      	str	r3, [sp, #28]
 8004e3c:	2f46      	cmp	r7, #70	; 0x46
 8004e3e:	d114      	bne.n	8004e6a <__cvt+0x92>
 8004e40:	782b      	ldrb	r3, [r5, #0]
 8004e42:	2b30      	cmp	r3, #48	; 0x30
 8004e44:	d10c      	bne.n	8004e60 <__cvt+0x88>
 8004e46:	2200      	movs	r2, #0
 8004e48:	2300      	movs	r3, #0
 8004e4a:	0020      	movs	r0, r4
 8004e4c:	0031      	movs	r1, r6
 8004e4e:	f7fb fb03 	bl	8000458 <__aeabi_dcmpeq>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d104      	bne.n	8004e60 <__cvt+0x88>
 8004e56:	2301      	movs	r3, #1
 8004e58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e62:	9a07      	ldr	r2, [sp, #28]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	18d3      	adds	r3, r2, r3
 8004e68:	9307      	str	r3, [sp, #28]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	0020      	movs	r0, r4
 8004e70:	0031      	movs	r1, r6
 8004e72:	f7fb faf1 	bl	8000458 <__aeabi_dcmpeq>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d001      	beq.n	8004e7e <__cvt+0xa6>
 8004e7a:	9b07      	ldr	r3, [sp, #28]
 8004e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7e:	2230      	movs	r2, #48	; 0x30
 8004e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e82:	9907      	ldr	r1, [sp, #28]
 8004e84:	428b      	cmp	r3, r1
 8004e86:	d306      	bcc.n	8004e96 <__cvt+0xbe>
 8004e88:	0028      	movs	r0, r5
 8004e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e8e:	1b5b      	subs	r3, r3, r5
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	b00b      	add	sp, #44	; 0x2c
 8004e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e96:	1c59      	adds	r1, r3, #1
 8004e98:	9109      	str	r1, [sp, #36]	; 0x24
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	e7f0      	b.n	8004e80 <__cvt+0xa8>

08004e9e <__exponent>:
 8004e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea0:	1c83      	adds	r3, r0, #2
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	0005      	movs	r5, r0
 8004ea8:	000c      	movs	r4, r1
 8004eaa:	232b      	movs	r3, #43	; 0x2b
 8004eac:	7002      	strb	r2, [r0, #0]
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	da01      	bge.n	8004eb6 <__exponent+0x18>
 8004eb2:	424c      	negs	r4, r1
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	706b      	strb	r3, [r5, #1]
 8004eb8:	2c09      	cmp	r4, #9
 8004eba:	dd2f      	ble.n	8004f1c <__exponent+0x7e>
 8004ebc:	270a      	movs	r7, #10
 8004ebe:	ab04      	add	r3, sp, #16
 8004ec0:	1dde      	adds	r6, r3, #7
 8004ec2:	0020      	movs	r0, r4
 8004ec4:	0039      	movs	r1, r7
 8004ec6:	9601      	str	r6, [sp, #4]
 8004ec8:	f7fb fab0 	bl	800042c <__aeabi_idivmod>
 8004ecc:	3e01      	subs	r6, #1
 8004ece:	3130      	adds	r1, #48	; 0x30
 8004ed0:	0020      	movs	r0, r4
 8004ed2:	7031      	strb	r1, [r6, #0]
 8004ed4:	0039      	movs	r1, r7
 8004ed6:	9402      	str	r4, [sp, #8]
 8004ed8:	f7fb f9c2 	bl	8000260 <__divsi3>
 8004edc:	9b02      	ldr	r3, [sp, #8]
 8004ede:	0004      	movs	r4, r0
 8004ee0:	2b63      	cmp	r3, #99	; 0x63
 8004ee2:	dcee      	bgt.n	8004ec2 <__exponent+0x24>
 8004ee4:	9b01      	ldr	r3, [sp, #4]
 8004ee6:	3430      	adds	r4, #48	; 0x30
 8004ee8:	1e9a      	subs	r2, r3, #2
 8004eea:	0013      	movs	r3, r2
 8004eec:	9903      	ldr	r1, [sp, #12]
 8004eee:	7014      	strb	r4, [r2, #0]
 8004ef0:	a804      	add	r0, sp, #16
 8004ef2:	3007      	adds	r0, #7
 8004ef4:	4298      	cmp	r0, r3
 8004ef6:	d80c      	bhi.n	8004f12 <__exponent+0x74>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4282      	cmp	r2, r0
 8004efc:	d804      	bhi.n	8004f08 <__exponent+0x6a>
 8004efe:	aa04      	add	r2, sp, #16
 8004f00:	3309      	adds	r3, #9
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	9a01      	ldr	r2, [sp, #4]
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	9a03      	ldr	r2, [sp, #12]
 8004f0a:	18d3      	adds	r3, r2, r3
 8004f0c:	1b58      	subs	r0, r3, r5
 8004f0e:	b007      	add	sp, #28
 8004f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f12:	7818      	ldrb	r0, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	7008      	strb	r0, [r1, #0]
 8004f18:	3101      	adds	r1, #1
 8004f1a:	e7e9      	b.n	8004ef0 <__exponent+0x52>
 8004f1c:	2330      	movs	r3, #48	; 0x30
 8004f1e:	3430      	adds	r4, #48	; 0x30
 8004f20:	70ab      	strb	r3, [r5, #2]
 8004f22:	70ec      	strb	r4, [r5, #3]
 8004f24:	1d2b      	adds	r3, r5, #4
 8004f26:	e7f1      	b.n	8004f0c <__exponent+0x6e>

08004f28 <_printf_float>:
 8004f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f2a:	b095      	sub	sp, #84	; 0x54
 8004f2c:	000c      	movs	r4, r1
 8004f2e:	9208      	str	r2, [sp, #32]
 8004f30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004f32:	9309      	str	r3, [sp, #36]	; 0x24
 8004f34:	0007      	movs	r7, r0
 8004f36:	f000 ff0d 	bl	8005d54 <_localeconv_r>
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f40:	f7fb f8de 	bl	8000100 <strlen>
 8004f44:	2300      	movs	r3, #0
 8004f46:	9312      	str	r3, [sp, #72]	; 0x48
 8004f48:	7e23      	ldrb	r3, [r4, #24]
 8004f4a:	2207      	movs	r2, #7
 8004f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	900d      	str	r0, [sp, #52]	; 0x34
 8004f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	05c9      	lsls	r1, r1, #23
 8004f5a:	d547      	bpl.n	8004fec <_printf_float+0xc4>
 8004f5c:	189b      	adds	r3, r3, r2
 8004f5e:	4393      	bics	r3, r2
 8004f60:	001a      	movs	r2, r3
 8004f62:	3208      	adds	r2, #8
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	681e      	ldr	r6, [r3, #0]
 8004f68:	685d      	ldr	r5, [r3, #4]
 8004f6a:	0032      	movs	r2, r6
 8004f6c:	002b      	movs	r3, r5
 8004f6e:	64a2      	str	r2, [r4, #72]	; 0x48
 8004f70:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f72:	2201      	movs	r2, #1
 8004f74:	006b      	lsls	r3, r5, #1
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	930e      	str	r3, [sp, #56]	; 0x38
 8004f7a:	0030      	movs	r0, r6
 8004f7c:	4bab      	ldr	r3, [pc, #684]	; (800522c <_printf_float+0x304>)
 8004f7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f80:	4252      	negs	r2, r2
 8004f82:	f7fd f8a5 	bl	80020d0 <__aeabi_dcmpun>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d132      	bne.n	8004ff0 <_printf_float+0xc8>
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	0030      	movs	r0, r6
 8004f8e:	4ba7      	ldr	r3, [pc, #668]	; (800522c <_printf_float+0x304>)
 8004f90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f92:	4252      	negs	r2, r2
 8004f94:	f7fb fa70 	bl	8000478 <__aeabi_dcmple>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d129      	bne.n	8004ff0 <_printf_float+0xc8>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	0030      	movs	r0, r6
 8004fa2:	0029      	movs	r1, r5
 8004fa4:	f7fb fa5e 	bl	8000464 <__aeabi_dcmplt>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d003      	beq.n	8004fb4 <_printf_float+0x8c>
 8004fac:	0023      	movs	r3, r4
 8004fae:	222d      	movs	r2, #45	; 0x2d
 8004fb0:	3343      	adds	r3, #67	; 0x43
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb6:	4d9e      	ldr	r5, [pc, #632]	; (8005230 <_printf_float+0x308>)
 8004fb8:	2b47      	cmp	r3, #71	; 0x47
 8004fba:	d900      	bls.n	8004fbe <_printf_float+0x96>
 8004fbc:	4d9d      	ldr	r5, [pc, #628]	; (8005234 <_printf_float+0x30c>)
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	439a      	bics	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd0:	0021      	movs	r1, r4
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	0038      	movs	r0, r7
 8004fd6:	9b08      	ldr	r3, [sp, #32]
 8004fd8:	aa13      	add	r2, sp, #76	; 0x4c
 8004fda:	f000 f9fb 	bl	80053d4 <_printf_common>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d000      	beq.n	8004fe4 <_printf_float+0xbc>
 8004fe2:	e0a3      	b.n	800512c <_printf_float+0x204>
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	4240      	negs	r0, r0
 8004fe8:	b015      	add	sp, #84	; 0x54
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fec:	3307      	adds	r3, #7
 8004fee:	e7b6      	b.n	8004f5e <_printf_float+0x36>
 8004ff0:	0032      	movs	r2, r6
 8004ff2:	002b      	movs	r3, r5
 8004ff4:	0030      	movs	r0, r6
 8004ff6:	0029      	movs	r1, r5
 8004ff8:	f7fd f86a 	bl	80020d0 <__aeabi_dcmpun>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d00b      	beq.n	8005018 <_printf_float+0xf0>
 8005000:	2d00      	cmp	r5, #0
 8005002:	da03      	bge.n	800500c <_printf_float+0xe4>
 8005004:	0023      	movs	r3, r4
 8005006:	222d      	movs	r2, #45	; 0x2d
 8005008:	3343      	adds	r3, #67	; 0x43
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500e:	4d8a      	ldr	r5, [pc, #552]	; (8005238 <_printf_float+0x310>)
 8005010:	2b47      	cmp	r3, #71	; 0x47
 8005012:	d9d4      	bls.n	8004fbe <_printf_float+0x96>
 8005014:	4d89      	ldr	r5, [pc, #548]	; (800523c <_printf_float+0x314>)
 8005016:	e7d2      	b.n	8004fbe <_printf_float+0x96>
 8005018:	2220      	movs	r2, #32
 800501a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	4391      	bics	r1, r2
 8005020:	910e      	str	r1, [sp, #56]	; 0x38
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	d14a      	bne.n	80050bc <_printf_float+0x194>
 8005026:	3307      	adds	r3, #7
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4313      	orrs	r3, r2
 8005032:	2200      	movs	r2, #0
 8005034:	9206      	str	r2, [sp, #24]
 8005036:	aa12      	add	r2, sp, #72	; 0x48
 8005038:	9205      	str	r2, [sp, #20]
 800503a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	9204      	str	r2, [sp, #16]
 8005040:	aa11      	add	r2, sp, #68	; 0x44
 8005042:	9203      	str	r2, [sp, #12]
 8005044:	2223      	movs	r2, #35	; 0x23
 8005046:	a908      	add	r1, sp, #32
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	6863      	ldr	r3, [r4, #4]
 800504c:	1852      	adds	r2, r2, r1
 800504e:	9202      	str	r2, [sp, #8]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	0032      	movs	r2, r6
 8005054:	002b      	movs	r3, r5
 8005056:	0038      	movs	r0, r7
 8005058:	f7ff febe 	bl	8004dd8 <__cvt>
 800505c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800505e:	0005      	movs	r5, r0
 8005060:	2b47      	cmp	r3, #71	; 0x47
 8005062:	d109      	bne.n	8005078 <_printf_float+0x150>
 8005064:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005066:	1cda      	adds	r2, r3, #3
 8005068:	db02      	blt.n	8005070 <_printf_float+0x148>
 800506a:	6862      	ldr	r2, [r4, #4]
 800506c:	4293      	cmp	r3, r2
 800506e:	dd49      	ble.n	8005104 <_printf_float+0x1dc>
 8005070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005072:	3b02      	subs	r3, #2
 8005074:	b2db      	uxtb	r3, r3
 8005076:	930a      	str	r3, [sp, #40]	; 0x28
 8005078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800507a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800507c:	2b65      	cmp	r3, #101	; 0x65
 800507e:	d824      	bhi.n	80050ca <_printf_float+0x1a2>
 8005080:	0020      	movs	r0, r4
 8005082:	001a      	movs	r2, r3
 8005084:	3901      	subs	r1, #1
 8005086:	3050      	adds	r0, #80	; 0x50
 8005088:	9111      	str	r1, [sp, #68]	; 0x44
 800508a:	f7ff ff08 	bl	8004e9e <__exponent>
 800508e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005090:	900b      	str	r0, [sp, #44]	; 0x2c
 8005092:	1813      	adds	r3, r2, r0
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	2a01      	cmp	r2, #1
 8005098:	dc02      	bgt.n	80050a0 <_printf_float+0x178>
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	07d2      	lsls	r2, r2, #31
 800509e:	d501      	bpl.n	80050a4 <_printf_float+0x17c>
 80050a0:	3301      	adds	r3, #1
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	2323      	movs	r3, #35	; 0x23
 80050a6:	aa08      	add	r2, sp, #32
 80050a8:	189b      	adds	r3, r3, r2
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d100      	bne.n	80050b2 <_printf_float+0x18a>
 80050b0:	e78d      	b.n	8004fce <_printf_float+0xa6>
 80050b2:	0023      	movs	r3, r4
 80050b4:	222d      	movs	r2, #45	; 0x2d
 80050b6:	3343      	adds	r3, #67	; 0x43
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e788      	b.n	8004fce <_printf_float+0xa6>
 80050bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050be:	2a47      	cmp	r2, #71	; 0x47
 80050c0:	d1b3      	bne.n	800502a <_printf_float+0x102>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1b1      	bne.n	800502a <_printf_float+0x102>
 80050c6:	3301      	adds	r3, #1
 80050c8:	e7ae      	b.n	8005028 <_printf_float+0x100>
 80050ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050cc:	2b66      	cmp	r3, #102	; 0x66
 80050ce:	d11b      	bne.n	8005108 <_printf_float+0x1e0>
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	2900      	cmp	r1, #0
 80050d4:	dd09      	ble.n	80050ea <_printf_float+0x1c2>
 80050d6:	6121      	str	r1, [r4, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <_printf_float+0x1ba>
 80050dc:	6822      	ldr	r2, [r4, #0]
 80050de:	07d2      	lsls	r2, r2, #31
 80050e0:	d50b      	bpl.n	80050fa <_printf_float+0x1d2>
 80050e2:	3301      	adds	r3, #1
 80050e4:	185b      	adds	r3, r3, r1
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	e007      	b.n	80050fa <_printf_float+0x1d2>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <_printf_float+0x1ce>
 80050ee:	2201      	movs	r2, #1
 80050f0:	6821      	ldr	r1, [r4, #0]
 80050f2:	4211      	tst	r1, r2
 80050f4:	d000      	beq.n	80050f8 <_printf_float+0x1d0>
 80050f6:	1c9a      	adds	r2, r3, #2
 80050f8:	6122      	str	r2, [r4, #16]
 80050fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80050fe:	2300      	movs	r3, #0
 8005100:	930b      	str	r3, [sp, #44]	; 0x2c
 8005102:	e7cf      	b.n	80050a4 <_printf_float+0x17c>
 8005104:	2367      	movs	r3, #103	; 0x67
 8005106:	930a      	str	r3, [sp, #40]	; 0x28
 8005108:	9911      	ldr	r1, [sp, #68]	; 0x44
 800510a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800510c:	4299      	cmp	r1, r3
 800510e:	db06      	blt.n	800511e <_printf_float+0x1f6>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	6121      	str	r1, [r4, #16]
 8005114:	07db      	lsls	r3, r3, #31
 8005116:	d5f0      	bpl.n	80050fa <_printf_float+0x1d2>
 8005118:	3101      	adds	r1, #1
 800511a:	6121      	str	r1, [r4, #16]
 800511c:	e7ed      	b.n	80050fa <_printf_float+0x1d2>
 800511e:	2201      	movs	r2, #1
 8005120:	2900      	cmp	r1, #0
 8005122:	dc01      	bgt.n	8005128 <_printf_float+0x200>
 8005124:	1892      	adds	r2, r2, r2
 8005126:	1a52      	subs	r2, r2, r1
 8005128:	189b      	adds	r3, r3, r2
 800512a:	e7dc      	b.n	80050e6 <_printf_float+0x1be>
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	0553      	lsls	r3, r2, #21
 8005130:	d408      	bmi.n	8005144 <_printf_float+0x21c>
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	002a      	movs	r2, r5
 8005136:	0038      	movs	r0, r7
 8005138:	9908      	ldr	r1, [sp, #32]
 800513a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800513c:	47a8      	blx	r5
 800513e:	3001      	adds	r0, #1
 8005140:	d12a      	bne.n	8005198 <_printf_float+0x270>
 8005142:	e74f      	b.n	8004fe4 <_printf_float+0xbc>
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	2b65      	cmp	r3, #101	; 0x65
 8005148:	d800      	bhi.n	800514c <_printf_float+0x224>
 800514a:	e0ec      	b.n	8005326 <_printf_float+0x3fe>
 800514c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800514e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005150:	2200      	movs	r2, #0
 8005152:	2300      	movs	r3, #0
 8005154:	f7fb f980 	bl	8000458 <__aeabi_dcmpeq>
 8005158:	2800      	cmp	r0, #0
 800515a:	d034      	beq.n	80051c6 <_printf_float+0x29e>
 800515c:	2301      	movs	r3, #1
 800515e:	0038      	movs	r0, r7
 8005160:	4a37      	ldr	r2, [pc, #220]	; (8005240 <_printf_float+0x318>)
 8005162:	9908      	ldr	r1, [sp, #32]
 8005164:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005166:	47a8      	blx	r5
 8005168:	3001      	adds	r0, #1
 800516a:	d100      	bne.n	800516e <_printf_float+0x246>
 800516c:	e73a      	b.n	8004fe4 <_printf_float+0xbc>
 800516e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005172:	429a      	cmp	r2, r3
 8005174:	db02      	blt.n	800517c <_printf_float+0x254>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	07db      	lsls	r3, r3, #31
 800517a:	d50d      	bpl.n	8005198 <_printf_float+0x270>
 800517c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800517e:	0038      	movs	r0, r7
 8005180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005184:	9908      	ldr	r1, [sp, #32]
 8005186:	47a8      	blx	r5
 8005188:	2500      	movs	r5, #0
 800518a:	3001      	adds	r0, #1
 800518c:	d100      	bne.n	8005190 <_printf_float+0x268>
 800518e:	e729      	b.n	8004fe4 <_printf_float+0xbc>
 8005190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005192:	3b01      	subs	r3, #1
 8005194:	42ab      	cmp	r3, r5
 8005196:	dc0a      	bgt.n	80051ae <_printf_float+0x286>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	079b      	lsls	r3, r3, #30
 800519c:	d500      	bpl.n	80051a0 <_printf_float+0x278>
 800519e:	e116      	b.n	80053ce <_printf_float+0x4a6>
 80051a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051a2:	68e0      	ldr	r0, [r4, #12]
 80051a4:	4298      	cmp	r0, r3
 80051a6:	db00      	blt.n	80051aa <_printf_float+0x282>
 80051a8:	e71e      	b.n	8004fe8 <_printf_float+0xc0>
 80051aa:	0018      	movs	r0, r3
 80051ac:	e71c      	b.n	8004fe8 <_printf_float+0xc0>
 80051ae:	0022      	movs	r2, r4
 80051b0:	2301      	movs	r3, #1
 80051b2:	0038      	movs	r0, r7
 80051b4:	9908      	ldr	r1, [sp, #32]
 80051b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80051b8:	321a      	adds	r2, #26
 80051ba:	47b0      	blx	r6
 80051bc:	3001      	adds	r0, #1
 80051be:	d100      	bne.n	80051c2 <_printf_float+0x29a>
 80051c0:	e710      	b.n	8004fe4 <_printf_float+0xbc>
 80051c2:	3501      	adds	r5, #1
 80051c4:	e7e4      	b.n	8005190 <_printf_float+0x268>
 80051c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	dc3b      	bgt.n	8005244 <_printf_float+0x31c>
 80051cc:	2301      	movs	r3, #1
 80051ce:	0038      	movs	r0, r7
 80051d0:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <_printf_float+0x318>)
 80051d2:	9908      	ldr	r1, [sp, #32]
 80051d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80051d6:	47b0      	blx	r6
 80051d8:	3001      	adds	r0, #1
 80051da:	d100      	bne.n	80051de <_printf_float+0x2b6>
 80051dc:	e702      	b.n	8004fe4 <_printf_float+0xbc>
 80051de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051e2:	4313      	orrs	r3, r2
 80051e4:	d102      	bne.n	80051ec <_printf_float+0x2c4>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	07db      	lsls	r3, r3, #31
 80051ea:	d5d5      	bpl.n	8005198 <_printf_float+0x270>
 80051ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ee:	0038      	movs	r0, r7
 80051f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051f2:	9908      	ldr	r1, [sp, #32]
 80051f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80051f6:	47b0      	blx	r6
 80051f8:	2300      	movs	r3, #0
 80051fa:	3001      	adds	r0, #1
 80051fc:	d100      	bne.n	8005200 <_printf_float+0x2d8>
 80051fe:	e6f1      	b.n	8004fe4 <_printf_float+0xbc>
 8005200:	930a      	str	r3, [sp, #40]	; 0x28
 8005202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005206:	425b      	negs	r3, r3
 8005208:	4293      	cmp	r3, r2
 800520a:	dc01      	bgt.n	8005210 <_printf_float+0x2e8>
 800520c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800520e:	e791      	b.n	8005134 <_printf_float+0x20c>
 8005210:	0022      	movs	r2, r4
 8005212:	2301      	movs	r3, #1
 8005214:	0038      	movs	r0, r7
 8005216:	9908      	ldr	r1, [sp, #32]
 8005218:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800521a:	321a      	adds	r2, #26
 800521c:	47b0      	blx	r6
 800521e:	3001      	adds	r0, #1
 8005220:	d100      	bne.n	8005224 <_printf_float+0x2fc>
 8005222:	e6df      	b.n	8004fe4 <_printf_float+0xbc>
 8005224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005226:	3301      	adds	r3, #1
 8005228:	e7ea      	b.n	8005200 <_printf_float+0x2d8>
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	7fefffff 	.word	0x7fefffff
 8005230:	080097f0 	.word	0x080097f0
 8005234:	080097f4 	.word	0x080097f4
 8005238:	080097f8 	.word	0x080097f8
 800523c:	080097fc 	.word	0x080097fc
 8005240:	08009800 	.word	0x08009800
 8005244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005248:	920a      	str	r2, [sp, #40]	; 0x28
 800524a:	429a      	cmp	r2, r3
 800524c:	dd00      	ble.n	8005250 <_printf_float+0x328>
 800524e:	930a      	str	r3, [sp, #40]	; 0x28
 8005250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	dc3d      	bgt.n	80052d2 <_printf_float+0x3aa>
 8005256:	2300      	movs	r3, #0
 8005258:	930e      	str	r3, [sp, #56]	; 0x38
 800525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525c:	43db      	mvns	r3, r3
 800525e:	17db      	asrs	r3, r3, #31
 8005260:	930f      	str	r3, [sp, #60]	; 0x3c
 8005262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005266:	930b      	str	r3, [sp, #44]	; 0x2c
 8005268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800526a:	4013      	ands	r3, r2
 800526c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005272:	4293      	cmp	r3, r2
 8005274:	dc36      	bgt.n	80052e4 <_printf_float+0x3bc>
 8005276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800527a:	429a      	cmp	r2, r3
 800527c:	db40      	blt.n	8005300 <_printf_float+0x3d8>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	07db      	lsls	r3, r3, #31
 8005282:	d43d      	bmi.n	8005300 <_printf_float+0x3d8>
 8005284:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005286:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800528a:	1af3      	subs	r3, r6, r3
 800528c:	1ab6      	subs	r6, r6, r2
 800528e:	429e      	cmp	r6, r3
 8005290:	dd00      	ble.n	8005294 <_printf_float+0x36c>
 8005292:	001e      	movs	r6, r3
 8005294:	2e00      	cmp	r6, #0
 8005296:	dc3c      	bgt.n	8005312 <_printf_float+0x3ea>
 8005298:	2300      	movs	r3, #0
 800529a:	930a      	str	r3, [sp, #40]	; 0x28
 800529c:	43f3      	mvns	r3, r6
 800529e:	17db      	asrs	r3, r3, #31
 80052a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80052a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052aa:	4032      	ands	r2, r6
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052b0:	4293      	cmp	r3, r2
 80052b2:	dc00      	bgt.n	80052b6 <_printf_float+0x38e>
 80052b4:	e770      	b.n	8005198 <_printf_float+0x270>
 80052b6:	0022      	movs	r2, r4
 80052b8:	2301      	movs	r3, #1
 80052ba:	0038      	movs	r0, r7
 80052bc:	9908      	ldr	r1, [sp, #32]
 80052be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80052c0:	321a      	adds	r2, #26
 80052c2:	47a8      	blx	r5
 80052c4:	3001      	adds	r0, #1
 80052c6:	d100      	bne.n	80052ca <_printf_float+0x3a2>
 80052c8:	e68c      	b.n	8004fe4 <_printf_float+0xbc>
 80052ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052cc:	3301      	adds	r3, #1
 80052ce:	930a      	str	r3, [sp, #40]	; 0x28
 80052d0:	e7e7      	b.n	80052a2 <_printf_float+0x37a>
 80052d2:	002a      	movs	r2, r5
 80052d4:	0038      	movs	r0, r7
 80052d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d8:	9908      	ldr	r1, [sp, #32]
 80052da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80052dc:	47b0      	blx	r6
 80052de:	3001      	adds	r0, #1
 80052e0:	d1b9      	bne.n	8005256 <_printf_float+0x32e>
 80052e2:	e67f      	b.n	8004fe4 <_printf_float+0xbc>
 80052e4:	0022      	movs	r2, r4
 80052e6:	2301      	movs	r3, #1
 80052e8:	0038      	movs	r0, r7
 80052ea:	9908      	ldr	r1, [sp, #32]
 80052ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80052ee:	321a      	adds	r2, #26
 80052f0:	47b0      	blx	r6
 80052f2:	3001      	adds	r0, #1
 80052f4:	d100      	bne.n	80052f8 <_printf_float+0x3d0>
 80052f6:	e675      	b.n	8004fe4 <_printf_float+0xbc>
 80052f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052fa:	3301      	adds	r3, #1
 80052fc:	930e      	str	r3, [sp, #56]	; 0x38
 80052fe:	e7b0      	b.n	8005262 <_printf_float+0x33a>
 8005300:	0038      	movs	r0, r7
 8005302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005306:	9908      	ldr	r1, [sp, #32]
 8005308:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800530a:	47b0      	blx	r6
 800530c:	3001      	adds	r0, #1
 800530e:	d1b9      	bne.n	8005284 <_printf_float+0x35c>
 8005310:	e668      	b.n	8004fe4 <_printf_float+0xbc>
 8005312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005314:	0038      	movs	r0, r7
 8005316:	18ea      	adds	r2, r5, r3
 8005318:	9908      	ldr	r1, [sp, #32]
 800531a:	0033      	movs	r3, r6
 800531c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800531e:	47a8      	blx	r5
 8005320:	3001      	adds	r0, #1
 8005322:	d1b9      	bne.n	8005298 <_printf_float+0x370>
 8005324:	e65e      	b.n	8004fe4 <_printf_float+0xbc>
 8005326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005328:	2b01      	cmp	r3, #1
 800532a:	dc02      	bgt.n	8005332 <_printf_float+0x40a>
 800532c:	2301      	movs	r3, #1
 800532e:	421a      	tst	r2, r3
 8005330:	d03a      	beq.n	80053a8 <_printf_float+0x480>
 8005332:	2301      	movs	r3, #1
 8005334:	002a      	movs	r2, r5
 8005336:	0038      	movs	r0, r7
 8005338:	9908      	ldr	r1, [sp, #32]
 800533a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800533c:	47b0      	blx	r6
 800533e:	3001      	adds	r0, #1
 8005340:	d100      	bne.n	8005344 <_printf_float+0x41c>
 8005342:	e64f      	b.n	8004fe4 <_printf_float+0xbc>
 8005344:	0038      	movs	r0, r7
 8005346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800534a:	9908      	ldr	r1, [sp, #32]
 800534c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800534e:	47b0      	blx	r6
 8005350:	3001      	adds	r0, #1
 8005352:	d100      	bne.n	8005356 <_printf_float+0x42e>
 8005354:	e646      	b.n	8004fe4 <_printf_float+0xbc>
 8005356:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005358:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800535a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800535c:	2200      	movs	r2, #0
 800535e:	001e      	movs	r6, r3
 8005360:	2300      	movs	r3, #0
 8005362:	f7fb f879 	bl	8000458 <__aeabi_dcmpeq>
 8005366:	2800      	cmp	r0, #0
 8005368:	d11c      	bne.n	80053a4 <_printf_float+0x47c>
 800536a:	0033      	movs	r3, r6
 800536c:	1c6a      	adds	r2, r5, #1
 800536e:	3b01      	subs	r3, #1
 8005370:	0038      	movs	r0, r7
 8005372:	9908      	ldr	r1, [sp, #32]
 8005374:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005376:	47a8      	blx	r5
 8005378:	3001      	adds	r0, #1
 800537a:	d10f      	bne.n	800539c <_printf_float+0x474>
 800537c:	e632      	b.n	8004fe4 <_printf_float+0xbc>
 800537e:	0022      	movs	r2, r4
 8005380:	2301      	movs	r3, #1
 8005382:	0038      	movs	r0, r7
 8005384:	9908      	ldr	r1, [sp, #32]
 8005386:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005388:	321a      	adds	r2, #26
 800538a:	47b0      	blx	r6
 800538c:	3001      	adds	r0, #1
 800538e:	d100      	bne.n	8005392 <_printf_float+0x46a>
 8005390:	e628      	b.n	8004fe4 <_printf_float+0xbc>
 8005392:	3501      	adds	r5, #1
 8005394:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005396:	3b01      	subs	r3, #1
 8005398:	42ab      	cmp	r3, r5
 800539a:	dcf0      	bgt.n	800537e <_printf_float+0x456>
 800539c:	0022      	movs	r2, r4
 800539e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053a0:	3250      	adds	r2, #80	; 0x50
 80053a2:	e6c8      	b.n	8005136 <_printf_float+0x20e>
 80053a4:	2500      	movs	r5, #0
 80053a6:	e7f5      	b.n	8005394 <_printf_float+0x46c>
 80053a8:	002a      	movs	r2, r5
 80053aa:	e7e1      	b.n	8005370 <_printf_float+0x448>
 80053ac:	0022      	movs	r2, r4
 80053ae:	2301      	movs	r3, #1
 80053b0:	0038      	movs	r0, r7
 80053b2:	9908      	ldr	r1, [sp, #32]
 80053b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80053b6:	3219      	adds	r2, #25
 80053b8:	47b0      	blx	r6
 80053ba:	3001      	adds	r0, #1
 80053bc:	d100      	bne.n	80053c0 <_printf_float+0x498>
 80053be:	e611      	b.n	8004fe4 <_printf_float+0xbc>
 80053c0:	3501      	adds	r5, #1
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	42ab      	cmp	r3, r5
 80053ca:	dcef      	bgt.n	80053ac <_printf_float+0x484>
 80053cc:	e6e8      	b.n	80051a0 <_printf_float+0x278>
 80053ce:	2500      	movs	r5, #0
 80053d0:	e7f7      	b.n	80053c2 <_printf_float+0x49a>
 80053d2:	46c0      	nop			; (mov r8, r8)

080053d4 <_printf_common>:
 80053d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d6:	0016      	movs	r6, r2
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	688a      	ldr	r2, [r1, #8]
 80053dc:	690b      	ldr	r3, [r1, #16]
 80053de:	000c      	movs	r4, r1
 80053e0:	9000      	str	r0, [sp, #0]
 80053e2:	4293      	cmp	r3, r2
 80053e4:	da00      	bge.n	80053e8 <_printf_common+0x14>
 80053e6:	0013      	movs	r3, r2
 80053e8:	0022      	movs	r2, r4
 80053ea:	6033      	str	r3, [r6, #0]
 80053ec:	3243      	adds	r2, #67	; 0x43
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d001      	beq.n	80053f8 <_printf_common+0x24>
 80053f4:	3301      	adds	r3, #1
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	069b      	lsls	r3, r3, #26
 80053fc:	d502      	bpl.n	8005404 <_printf_common+0x30>
 80053fe:	6833      	ldr	r3, [r6, #0]
 8005400:	3302      	adds	r3, #2
 8005402:	6033      	str	r3, [r6, #0]
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	2306      	movs	r3, #6
 8005408:	0015      	movs	r5, r2
 800540a:	401d      	ands	r5, r3
 800540c:	421a      	tst	r2, r3
 800540e:	d027      	beq.n	8005460 <_printf_common+0x8c>
 8005410:	0023      	movs	r3, r4
 8005412:	3343      	adds	r3, #67	; 0x43
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	1e5a      	subs	r2, r3, #1
 8005418:	4193      	sbcs	r3, r2
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	0692      	lsls	r2, r2, #26
 800541e:	d430      	bmi.n	8005482 <_printf_common+0xae>
 8005420:	0022      	movs	r2, r4
 8005422:	9901      	ldr	r1, [sp, #4]
 8005424:	9800      	ldr	r0, [sp, #0]
 8005426:	9d08      	ldr	r5, [sp, #32]
 8005428:	3243      	adds	r2, #67	; 0x43
 800542a:	47a8      	blx	r5
 800542c:	3001      	adds	r0, #1
 800542e:	d025      	beq.n	800547c <_printf_common+0xa8>
 8005430:	2206      	movs	r2, #6
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	2500      	movs	r5, #0
 8005436:	4013      	ands	r3, r2
 8005438:	2b04      	cmp	r3, #4
 800543a:	d105      	bne.n	8005448 <_printf_common+0x74>
 800543c:	6833      	ldr	r3, [r6, #0]
 800543e:	68e5      	ldr	r5, [r4, #12]
 8005440:	1aed      	subs	r5, r5, r3
 8005442:	43eb      	mvns	r3, r5
 8005444:	17db      	asrs	r3, r3, #31
 8005446:	401d      	ands	r5, r3
 8005448:	68a3      	ldr	r3, [r4, #8]
 800544a:	6922      	ldr	r2, [r4, #16]
 800544c:	4293      	cmp	r3, r2
 800544e:	dd01      	ble.n	8005454 <_printf_common+0x80>
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	18ed      	adds	r5, r5, r3
 8005454:	2600      	movs	r6, #0
 8005456:	42b5      	cmp	r5, r6
 8005458:	d120      	bne.n	800549c <_printf_common+0xc8>
 800545a:	2000      	movs	r0, #0
 800545c:	e010      	b.n	8005480 <_printf_common+0xac>
 800545e:	3501      	adds	r5, #1
 8005460:	68e3      	ldr	r3, [r4, #12]
 8005462:	6832      	ldr	r2, [r6, #0]
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	42ab      	cmp	r3, r5
 8005468:	ddd2      	ble.n	8005410 <_printf_common+0x3c>
 800546a:	0022      	movs	r2, r4
 800546c:	2301      	movs	r3, #1
 800546e:	9901      	ldr	r1, [sp, #4]
 8005470:	9800      	ldr	r0, [sp, #0]
 8005472:	9f08      	ldr	r7, [sp, #32]
 8005474:	3219      	adds	r2, #25
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	d1f0      	bne.n	800545e <_printf_common+0x8a>
 800547c:	2001      	movs	r0, #1
 800547e:	4240      	negs	r0, r0
 8005480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005482:	2030      	movs	r0, #48	; 0x30
 8005484:	18e1      	adds	r1, r4, r3
 8005486:	3143      	adds	r1, #67	; 0x43
 8005488:	7008      	strb	r0, [r1, #0]
 800548a:	0021      	movs	r1, r4
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	3145      	adds	r1, #69	; 0x45
 8005490:	7809      	ldrb	r1, [r1, #0]
 8005492:	18a2      	adds	r2, r4, r2
 8005494:	3243      	adds	r2, #67	; 0x43
 8005496:	3302      	adds	r3, #2
 8005498:	7011      	strb	r1, [r2, #0]
 800549a:	e7c1      	b.n	8005420 <_printf_common+0x4c>
 800549c:	0022      	movs	r2, r4
 800549e:	2301      	movs	r3, #1
 80054a0:	9901      	ldr	r1, [sp, #4]
 80054a2:	9800      	ldr	r0, [sp, #0]
 80054a4:	9f08      	ldr	r7, [sp, #32]
 80054a6:	321a      	adds	r2, #26
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	d0e6      	beq.n	800547c <_printf_common+0xa8>
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7d1      	b.n	8005456 <_printf_common+0x82>
	...

080054b4 <_printf_i>:
 80054b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b6:	b08b      	sub	sp, #44	; 0x2c
 80054b8:	9206      	str	r2, [sp, #24]
 80054ba:	000a      	movs	r2, r1
 80054bc:	3243      	adds	r2, #67	; 0x43
 80054be:	9307      	str	r3, [sp, #28]
 80054c0:	9005      	str	r0, [sp, #20]
 80054c2:	9204      	str	r2, [sp, #16]
 80054c4:	7e0a      	ldrb	r2, [r1, #24]
 80054c6:	000c      	movs	r4, r1
 80054c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054ca:	2a78      	cmp	r2, #120	; 0x78
 80054cc:	d809      	bhi.n	80054e2 <_printf_i+0x2e>
 80054ce:	2a62      	cmp	r2, #98	; 0x62
 80054d0:	d80b      	bhi.n	80054ea <_printf_i+0x36>
 80054d2:	2a00      	cmp	r2, #0
 80054d4:	d100      	bne.n	80054d8 <_printf_i+0x24>
 80054d6:	e0be      	b.n	8005656 <_printf_i+0x1a2>
 80054d8:	497c      	ldr	r1, [pc, #496]	; (80056cc <_printf_i+0x218>)
 80054da:	9103      	str	r1, [sp, #12]
 80054dc:	2a58      	cmp	r2, #88	; 0x58
 80054de:	d100      	bne.n	80054e2 <_printf_i+0x2e>
 80054e0:	e093      	b.n	800560a <_printf_i+0x156>
 80054e2:	0026      	movs	r6, r4
 80054e4:	3642      	adds	r6, #66	; 0x42
 80054e6:	7032      	strb	r2, [r6, #0]
 80054e8:	e022      	b.n	8005530 <_printf_i+0x7c>
 80054ea:	0010      	movs	r0, r2
 80054ec:	3863      	subs	r0, #99	; 0x63
 80054ee:	2815      	cmp	r0, #21
 80054f0:	d8f7      	bhi.n	80054e2 <_printf_i+0x2e>
 80054f2:	f7fa fe21 	bl	8000138 <__gnu_thumb1_case_shi>
 80054f6:	0016      	.short	0x0016
 80054f8:	fff6001f 	.word	0xfff6001f
 80054fc:	fff6fff6 	.word	0xfff6fff6
 8005500:	001ffff6 	.word	0x001ffff6
 8005504:	fff6fff6 	.word	0xfff6fff6
 8005508:	fff6fff6 	.word	0xfff6fff6
 800550c:	003600a3 	.word	0x003600a3
 8005510:	fff60083 	.word	0xfff60083
 8005514:	00b4fff6 	.word	0x00b4fff6
 8005518:	0036fff6 	.word	0x0036fff6
 800551c:	fff6fff6 	.word	0xfff6fff6
 8005520:	0087      	.short	0x0087
 8005522:	0026      	movs	r6, r4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	3642      	adds	r6, #66	; 0x42
 8005528:	1d11      	adds	r1, r2, #4
 800552a:	6019      	str	r1, [r3, #0]
 800552c:	6813      	ldr	r3, [r2, #0]
 800552e:	7033      	strb	r3, [r6, #0]
 8005530:	2301      	movs	r3, #1
 8005532:	e0a2      	b.n	800567a <_printf_i+0x1c6>
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	6809      	ldr	r1, [r1, #0]
 8005538:	1d02      	adds	r2, r0, #4
 800553a:	060d      	lsls	r5, r1, #24
 800553c:	d50b      	bpl.n	8005556 <_printf_i+0xa2>
 800553e:	6805      	ldr	r5, [r0, #0]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	2d00      	cmp	r5, #0
 8005544:	da03      	bge.n	800554e <_printf_i+0x9a>
 8005546:	232d      	movs	r3, #45	; 0x2d
 8005548:	9a04      	ldr	r2, [sp, #16]
 800554a:	426d      	negs	r5, r5
 800554c:	7013      	strb	r3, [r2, #0]
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <_printf_i+0x218>)
 8005550:	270a      	movs	r7, #10
 8005552:	9303      	str	r3, [sp, #12]
 8005554:	e01b      	b.n	800558e <_printf_i+0xda>
 8005556:	6805      	ldr	r5, [r0, #0]
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	0649      	lsls	r1, r1, #25
 800555c:	d5f1      	bpl.n	8005542 <_printf_i+0x8e>
 800555e:	b22d      	sxth	r5, r5
 8005560:	e7ef      	b.n	8005542 <_printf_i+0x8e>
 8005562:	680d      	ldr	r5, [r1, #0]
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	1d08      	adds	r0, r1, #4
 8005568:	6018      	str	r0, [r3, #0]
 800556a:	062e      	lsls	r6, r5, #24
 800556c:	d501      	bpl.n	8005572 <_printf_i+0xbe>
 800556e:	680d      	ldr	r5, [r1, #0]
 8005570:	e003      	b.n	800557a <_printf_i+0xc6>
 8005572:	066d      	lsls	r5, r5, #25
 8005574:	d5fb      	bpl.n	800556e <_printf_i+0xba>
 8005576:	680d      	ldr	r5, [r1, #0]
 8005578:	b2ad      	uxth	r5, r5
 800557a:	4b54      	ldr	r3, [pc, #336]	; (80056cc <_printf_i+0x218>)
 800557c:	2708      	movs	r7, #8
 800557e:	9303      	str	r3, [sp, #12]
 8005580:	2a6f      	cmp	r2, #111	; 0x6f
 8005582:	d000      	beq.n	8005586 <_printf_i+0xd2>
 8005584:	3702      	adds	r7, #2
 8005586:	0023      	movs	r3, r4
 8005588:	2200      	movs	r2, #0
 800558a:	3343      	adds	r3, #67	; 0x43
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	6863      	ldr	r3, [r4, #4]
 8005590:	60a3      	str	r3, [r4, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db03      	blt.n	800559e <_printf_i+0xea>
 8005596:	2104      	movs	r1, #4
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	438a      	bics	r2, r1
 800559c:	6022      	str	r2, [r4, #0]
 800559e:	2d00      	cmp	r5, #0
 80055a0:	d102      	bne.n	80055a8 <_printf_i+0xf4>
 80055a2:	9e04      	ldr	r6, [sp, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <_printf_i+0x10e>
 80055a8:	9e04      	ldr	r6, [sp, #16]
 80055aa:	0028      	movs	r0, r5
 80055ac:	0039      	movs	r1, r7
 80055ae:	f7fa fe53 	bl	8000258 <__aeabi_uidivmod>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	3e01      	subs	r6, #1
 80055b6:	5c5b      	ldrb	r3, [r3, r1]
 80055b8:	7033      	strb	r3, [r6, #0]
 80055ba:	002b      	movs	r3, r5
 80055bc:	0005      	movs	r5, r0
 80055be:	429f      	cmp	r7, r3
 80055c0:	d9f3      	bls.n	80055aa <_printf_i+0xf6>
 80055c2:	2f08      	cmp	r7, #8
 80055c4:	d109      	bne.n	80055da <_printf_i+0x126>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	07db      	lsls	r3, r3, #31
 80055ca:	d506      	bpl.n	80055da <_printf_i+0x126>
 80055cc:	6862      	ldr	r2, [r4, #4]
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	dc02      	bgt.n	80055da <_printf_i+0x126>
 80055d4:	2330      	movs	r3, #48	; 0x30
 80055d6:	3e01      	subs	r6, #1
 80055d8:	7033      	strb	r3, [r6, #0]
 80055da:	9b04      	ldr	r3, [sp, #16]
 80055dc:	1b9b      	subs	r3, r3, r6
 80055de:	6123      	str	r3, [r4, #16]
 80055e0:	9b07      	ldr	r3, [sp, #28]
 80055e2:	0021      	movs	r1, r4
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	9805      	ldr	r0, [sp, #20]
 80055e8:	9b06      	ldr	r3, [sp, #24]
 80055ea:	aa09      	add	r2, sp, #36	; 0x24
 80055ec:	f7ff fef2 	bl	80053d4 <_printf_common>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d147      	bne.n	8005684 <_printf_i+0x1d0>
 80055f4:	2001      	movs	r0, #1
 80055f6:	4240      	negs	r0, r0
 80055f8:	b00b      	add	sp, #44	; 0x2c
 80055fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fc:	2220      	movs	r2, #32
 80055fe:	6809      	ldr	r1, [r1, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	6022      	str	r2, [r4, #0]
 8005604:	2278      	movs	r2, #120	; 0x78
 8005606:	4932      	ldr	r1, [pc, #200]	; (80056d0 <_printf_i+0x21c>)
 8005608:	9103      	str	r1, [sp, #12]
 800560a:	0021      	movs	r1, r4
 800560c:	3145      	adds	r1, #69	; 0x45
 800560e:	700a      	strb	r2, [r1, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	c920      	ldmia	r1!, {r5}
 8005616:	0610      	lsls	r0, r2, #24
 8005618:	d402      	bmi.n	8005620 <_printf_i+0x16c>
 800561a:	0650      	lsls	r0, r2, #25
 800561c:	d500      	bpl.n	8005620 <_printf_i+0x16c>
 800561e:	b2ad      	uxth	r5, r5
 8005620:	6019      	str	r1, [r3, #0]
 8005622:	07d3      	lsls	r3, r2, #31
 8005624:	d502      	bpl.n	800562c <_printf_i+0x178>
 8005626:	2320      	movs	r3, #32
 8005628:	4313      	orrs	r3, r2
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	2710      	movs	r7, #16
 800562e:	2d00      	cmp	r5, #0
 8005630:	d1a9      	bne.n	8005586 <_printf_i+0xd2>
 8005632:	2220      	movs	r2, #32
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	4393      	bics	r3, r2
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	e7a4      	b.n	8005586 <_printf_i+0xd2>
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	680d      	ldr	r5, [r1, #0]
 8005640:	1d10      	adds	r0, r2, #4
 8005642:	6949      	ldr	r1, [r1, #20]
 8005644:	6018      	str	r0, [r3, #0]
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	062e      	lsls	r6, r5, #24
 800564a:	d501      	bpl.n	8005650 <_printf_i+0x19c>
 800564c:	6019      	str	r1, [r3, #0]
 800564e:	e002      	b.n	8005656 <_printf_i+0x1a2>
 8005650:	066d      	lsls	r5, r5, #25
 8005652:	d5fb      	bpl.n	800564c <_printf_i+0x198>
 8005654:	8019      	strh	r1, [r3, #0]
 8005656:	2300      	movs	r3, #0
 8005658:	9e04      	ldr	r6, [sp, #16]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	e7c0      	b.n	80055e0 <_printf_i+0x12c>
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	1d11      	adds	r1, r2, #4
 8005662:	6019      	str	r1, [r3, #0]
 8005664:	6816      	ldr	r6, [r2, #0]
 8005666:	2100      	movs	r1, #0
 8005668:	0030      	movs	r0, r6
 800566a:	6862      	ldr	r2, [r4, #4]
 800566c:	f000 fbf1 	bl	8005e52 <memchr>
 8005670:	2800      	cmp	r0, #0
 8005672:	d001      	beq.n	8005678 <_printf_i+0x1c4>
 8005674:	1b80      	subs	r0, r0, r6
 8005676:	6060      	str	r0, [r4, #4]
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	2300      	movs	r3, #0
 800567e:	9a04      	ldr	r2, [sp, #16]
 8005680:	7013      	strb	r3, [r2, #0]
 8005682:	e7ad      	b.n	80055e0 <_printf_i+0x12c>
 8005684:	0032      	movs	r2, r6
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	9906      	ldr	r1, [sp, #24]
 800568a:	9805      	ldr	r0, [sp, #20]
 800568c:	9d07      	ldr	r5, [sp, #28]
 800568e:	47a8      	blx	r5
 8005690:	3001      	adds	r0, #1
 8005692:	d0af      	beq.n	80055f4 <_printf_i+0x140>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	079b      	lsls	r3, r3, #30
 8005698:	d415      	bmi.n	80056c6 <_printf_i+0x212>
 800569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569c:	68e0      	ldr	r0, [r4, #12]
 800569e:	4298      	cmp	r0, r3
 80056a0:	daaa      	bge.n	80055f8 <_printf_i+0x144>
 80056a2:	0018      	movs	r0, r3
 80056a4:	e7a8      	b.n	80055f8 <_printf_i+0x144>
 80056a6:	0022      	movs	r2, r4
 80056a8:	2301      	movs	r3, #1
 80056aa:	9906      	ldr	r1, [sp, #24]
 80056ac:	9805      	ldr	r0, [sp, #20]
 80056ae:	9e07      	ldr	r6, [sp, #28]
 80056b0:	3219      	adds	r2, #25
 80056b2:	47b0      	blx	r6
 80056b4:	3001      	adds	r0, #1
 80056b6:	d09d      	beq.n	80055f4 <_printf_i+0x140>
 80056b8:	3501      	adds	r5, #1
 80056ba:	68e3      	ldr	r3, [r4, #12]
 80056bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	42ab      	cmp	r3, r5
 80056c2:	dcf0      	bgt.n	80056a6 <_printf_i+0x1f2>
 80056c4:	e7e9      	b.n	800569a <_printf_i+0x1e6>
 80056c6:	2500      	movs	r5, #0
 80056c8:	e7f7      	b.n	80056ba <_printf_i+0x206>
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	08009802 	.word	0x08009802
 80056d0:	08009813 	.word	0x08009813

080056d4 <_scanf_float>:
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	b08b      	sub	sp, #44	; 0x2c
 80056d8:	0016      	movs	r6, r2
 80056da:	9002      	str	r0, [sp, #8]
 80056dc:	22ae      	movs	r2, #174	; 0xae
 80056de:	2000      	movs	r0, #0
 80056e0:	9307      	str	r3, [sp, #28]
 80056e2:	688b      	ldr	r3, [r1, #8]
 80056e4:	000f      	movs	r7, r1
 80056e6:	1e59      	subs	r1, r3, #1
 80056e8:	0052      	lsls	r2, r2, #1
 80056ea:	9006      	str	r0, [sp, #24]
 80056ec:	4291      	cmp	r1, r2
 80056ee:	d905      	bls.n	80056fc <_scanf_float+0x28>
 80056f0:	3b5e      	subs	r3, #94	; 0x5e
 80056f2:	3bff      	subs	r3, #255	; 0xff
 80056f4:	9306      	str	r3, [sp, #24]
 80056f6:	235e      	movs	r3, #94	; 0x5e
 80056f8:	33ff      	adds	r3, #255	; 0xff
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	23f0      	movs	r3, #240	; 0xf0
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4313      	orrs	r3, r2
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	003b      	movs	r3, r7
 8005708:	2400      	movs	r4, #0
 800570a:	331c      	adds	r3, #28
 800570c:	001d      	movs	r5, r3
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	9403      	str	r4, [sp, #12]
 8005712:	9409      	str	r4, [sp, #36]	; 0x24
 8005714:	9408      	str	r4, [sp, #32]
 8005716:	9401      	str	r4, [sp, #4]
 8005718:	9405      	str	r4, [sp, #20]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	2a00      	cmp	r2, #0
 800571e:	d00a      	beq.n	8005736 <_scanf_float+0x62>
 8005720:	6833      	ldr	r3, [r6, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b4e      	cmp	r3, #78	; 0x4e
 8005726:	d844      	bhi.n	80057b2 <_scanf_float+0xde>
 8005728:	0018      	movs	r0, r3
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	d82c      	bhi.n	8005788 <_scanf_float+0xb4>
 800572e:	382b      	subs	r0, #43	; 0x2b
 8005730:	b2c1      	uxtb	r1, r0
 8005732:	290e      	cmp	r1, #14
 8005734:	d92a      	bls.n	800578c <_scanf_float+0xb8>
 8005736:	9b01      	ldr	r3, [sp, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <_scanf_float+0x70>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	4aa3      	ldr	r2, [pc, #652]	; (80059cc <_scanf_float+0x2f8>)
 8005740:	4013      	ands	r3, r2
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d900      	bls.n	800574e <_scanf_float+0x7a>
 800574c:	e0f9      	b.n	8005942 <_scanf_float+0x26e>
 800574e:	24be      	movs	r4, #190	; 0xbe
 8005750:	0064      	lsls	r4, r4, #1
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	429d      	cmp	r5, r3
 8005756:	d900      	bls.n	800575a <_scanf_float+0x86>
 8005758:	e0e9      	b.n	800592e <_scanf_float+0x25a>
 800575a:	2301      	movs	r3, #1
 800575c:	9303      	str	r3, [sp, #12]
 800575e:	e183      	b.n	8005a68 <_scanf_float+0x394>
 8005760:	0018      	movs	r0, r3
 8005762:	3861      	subs	r0, #97	; 0x61
 8005764:	280d      	cmp	r0, #13
 8005766:	d8e6      	bhi.n	8005736 <_scanf_float+0x62>
 8005768:	f7fa fce6 	bl	8000138 <__gnu_thumb1_case_shi>
 800576c:	ffe50083 	.word	0xffe50083
 8005770:	ffe5ffe5 	.word	0xffe5ffe5
 8005774:	00a200b6 	.word	0x00a200b6
 8005778:	ffe5ffe5 	.word	0xffe5ffe5
 800577c:	ffe50089 	.word	0xffe50089
 8005780:	ffe5ffe5 	.word	0xffe5ffe5
 8005784:	0065ffe5 	.word	0x0065ffe5
 8005788:	3841      	subs	r0, #65	; 0x41
 800578a:	e7eb      	b.n	8005764 <_scanf_float+0x90>
 800578c:	280e      	cmp	r0, #14
 800578e:	d8d2      	bhi.n	8005736 <_scanf_float+0x62>
 8005790:	f7fa fcd2 	bl	8000138 <__gnu_thumb1_case_shi>
 8005794:	ffd1004b 	.word	0xffd1004b
 8005798:	0098004b 	.word	0x0098004b
 800579c:	0020ffd1 	.word	0x0020ffd1
 80057a0:	00400040 	.word	0x00400040
 80057a4:	00400040 	.word	0x00400040
 80057a8:	00400040 	.word	0x00400040
 80057ac:	00400040 	.word	0x00400040
 80057b0:	0040      	.short	0x0040
 80057b2:	2b6e      	cmp	r3, #110	; 0x6e
 80057b4:	d809      	bhi.n	80057ca <_scanf_float+0xf6>
 80057b6:	2b60      	cmp	r3, #96	; 0x60
 80057b8:	d8d2      	bhi.n	8005760 <_scanf_float+0x8c>
 80057ba:	2b54      	cmp	r3, #84	; 0x54
 80057bc:	d07d      	beq.n	80058ba <_scanf_float+0x1e6>
 80057be:	2b59      	cmp	r3, #89	; 0x59
 80057c0:	d1b9      	bne.n	8005736 <_scanf_float+0x62>
 80057c2:	2c07      	cmp	r4, #7
 80057c4:	d1b7      	bne.n	8005736 <_scanf_float+0x62>
 80057c6:	2408      	movs	r4, #8
 80057c8:	e02c      	b.n	8005824 <_scanf_float+0x150>
 80057ca:	2b74      	cmp	r3, #116	; 0x74
 80057cc:	d075      	beq.n	80058ba <_scanf_float+0x1e6>
 80057ce:	2b79      	cmp	r3, #121	; 0x79
 80057d0:	d0f7      	beq.n	80057c2 <_scanf_float+0xee>
 80057d2:	e7b0      	b.n	8005736 <_scanf_float+0x62>
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	05c8      	lsls	r0, r1, #23
 80057d8:	d51c      	bpl.n	8005814 <_scanf_float+0x140>
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	4399      	bics	r1, r3
 80057de:	9b01      	ldr	r3, [sp, #4]
 80057e0:	6039      	str	r1, [r7, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	9b06      	ldr	r3, [sp, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <_scanf_float+0x120>
 80057ec:	3b01      	subs	r3, #1
 80057ee:	3201      	adds	r2, #1
 80057f0:	9306      	str	r3, [sp, #24]
 80057f2:	60ba      	str	r2, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	6873      	ldr	r3, [r6, #4]
 8005802:	3b01      	subs	r3, #1
 8005804:	6073      	str	r3, [r6, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	dc00      	bgt.n	800580c <_scanf_float+0x138>
 800580a:	e086      	b.n	800591a <_scanf_float+0x246>
 800580c:	6833      	ldr	r3, [r6, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	6033      	str	r3, [r6, #0]
 8005812:	e782      	b.n	800571a <_scanf_float+0x46>
 8005814:	9a03      	ldr	r2, [sp, #12]
 8005816:	1912      	adds	r2, r2, r4
 8005818:	2a00      	cmp	r2, #0
 800581a:	d18c      	bne.n	8005736 <_scanf_float+0x62>
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	496c      	ldr	r1, [pc, #432]	; (80059d0 <_scanf_float+0x2fc>)
 8005820:	400a      	ands	r2, r1
 8005822:	603a      	str	r2, [r7, #0]
 8005824:	702b      	strb	r3, [r5, #0]
 8005826:	3501      	adds	r5, #1
 8005828:	e7e4      	b.n	80057f4 <_scanf_float+0x120>
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	420a      	tst	r2, r1
 8005830:	d081      	beq.n	8005736 <_scanf_float+0x62>
 8005832:	438a      	bics	r2, r1
 8005834:	e7f5      	b.n	8005822 <_scanf_float+0x14e>
 8005836:	9a03      	ldr	r2, [sp, #12]
 8005838:	2a00      	cmp	r2, #0
 800583a:	d10f      	bne.n	800585c <_scanf_float+0x188>
 800583c:	9a01      	ldr	r2, [sp, #4]
 800583e:	2a00      	cmp	r2, #0
 8005840:	d10f      	bne.n	8005862 <_scanf_float+0x18e>
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	21e0      	movs	r1, #224	; 0xe0
 8005846:	0010      	movs	r0, r2
 8005848:	00c9      	lsls	r1, r1, #3
 800584a:	4008      	ands	r0, r1
 800584c:	4288      	cmp	r0, r1
 800584e:	d108      	bne.n	8005862 <_scanf_float+0x18e>
 8005850:	4960      	ldr	r1, [pc, #384]	; (80059d4 <_scanf_float+0x300>)
 8005852:	400a      	ands	r2, r1
 8005854:	603a      	str	r2, [r7, #0]
 8005856:	2201      	movs	r2, #1
 8005858:	9203      	str	r2, [sp, #12]
 800585a:	e7e3      	b.n	8005824 <_scanf_float+0x150>
 800585c:	9a03      	ldr	r2, [sp, #12]
 800585e:	2a02      	cmp	r2, #2
 8005860:	d059      	beq.n	8005916 <_scanf_float+0x242>
 8005862:	2c01      	cmp	r4, #1
 8005864:	d002      	beq.n	800586c <_scanf_float+0x198>
 8005866:	2c04      	cmp	r4, #4
 8005868:	d000      	beq.n	800586c <_scanf_float+0x198>
 800586a:	e764      	b.n	8005736 <_scanf_float+0x62>
 800586c:	3401      	adds	r4, #1
 800586e:	b2e4      	uxtb	r4, r4
 8005870:	e7d8      	b.n	8005824 <_scanf_float+0x150>
 8005872:	9a03      	ldr	r2, [sp, #12]
 8005874:	2a01      	cmp	r2, #1
 8005876:	d000      	beq.n	800587a <_scanf_float+0x1a6>
 8005878:	e75d      	b.n	8005736 <_scanf_float+0x62>
 800587a:	2202      	movs	r2, #2
 800587c:	e7ec      	b.n	8005858 <_scanf_float+0x184>
 800587e:	2c00      	cmp	r4, #0
 8005880:	d110      	bne.n	80058a4 <_scanf_float+0x1d0>
 8005882:	9a01      	ldr	r2, [sp, #4]
 8005884:	2a00      	cmp	r2, #0
 8005886:	d000      	beq.n	800588a <_scanf_float+0x1b6>
 8005888:	e758      	b.n	800573c <_scanf_float+0x68>
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	21e0      	movs	r1, #224	; 0xe0
 800588e:	0010      	movs	r0, r2
 8005890:	00c9      	lsls	r1, r1, #3
 8005892:	4008      	ands	r0, r1
 8005894:	4288      	cmp	r0, r1
 8005896:	d000      	beq.n	800589a <_scanf_float+0x1c6>
 8005898:	e754      	b.n	8005744 <_scanf_float+0x70>
 800589a:	494e      	ldr	r1, [pc, #312]	; (80059d4 <_scanf_float+0x300>)
 800589c:	3401      	adds	r4, #1
 800589e:	400a      	ands	r2, r1
 80058a0:	603a      	str	r2, [r7, #0]
 80058a2:	e7bf      	b.n	8005824 <_scanf_float+0x150>
 80058a4:	21fd      	movs	r1, #253	; 0xfd
 80058a6:	1ee2      	subs	r2, r4, #3
 80058a8:	420a      	tst	r2, r1
 80058aa:	d000      	beq.n	80058ae <_scanf_float+0x1da>
 80058ac:	e743      	b.n	8005736 <_scanf_float+0x62>
 80058ae:	e7dd      	b.n	800586c <_scanf_float+0x198>
 80058b0:	2c02      	cmp	r4, #2
 80058b2:	d000      	beq.n	80058b6 <_scanf_float+0x1e2>
 80058b4:	e73f      	b.n	8005736 <_scanf_float+0x62>
 80058b6:	2403      	movs	r4, #3
 80058b8:	e7b4      	b.n	8005824 <_scanf_float+0x150>
 80058ba:	2c06      	cmp	r4, #6
 80058bc:	d000      	beq.n	80058c0 <_scanf_float+0x1ec>
 80058be:	e73a      	b.n	8005736 <_scanf_float+0x62>
 80058c0:	2407      	movs	r4, #7
 80058c2:	e7af      	b.n	8005824 <_scanf_float+0x150>
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	0591      	lsls	r1, r2, #22
 80058c8:	d400      	bmi.n	80058cc <_scanf_float+0x1f8>
 80058ca:	e734      	b.n	8005736 <_scanf_float+0x62>
 80058cc:	4942      	ldr	r1, [pc, #264]	; (80059d8 <_scanf_float+0x304>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	603a      	str	r2, [r7, #0]
 80058d2:	9a01      	ldr	r2, [sp, #4]
 80058d4:	9205      	str	r2, [sp, #20]
 80058d6:	e7a5      	b.n	8005824 <_scanf_float+0x150>
 80058d8:	21a0      	movs	r1, #160	; 0xa0
 80058da:	2080      	movs	r0, #128	; 0x80
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	00c9      	lsls	r1, r1, #3
 80058e0:	4011      	ands	r1, r2
 80058e2:	00c0      	lsls	r0, r0, #3
 80058e4:	4281      	cmp	r1, r0
 80058e6:	d006      	beq.n	80058f6 <_scanf_float+0x222>
 80058e8:	4202      	tst	r2, r0
 80058ea:	d100      	bne.n	80058ee <_scanf_float+0x21a>
 80058ec:	e723      	b.n	8005736 <_scanf_float+0x62>
 80058ee:	9901      	ldr	r1, [sp, #4]
 80058f0:	2900      	cmp	r1, #0
 80058f2:	d100      	bne.n	80058f6 <_scanf_float+0x222>
 80058f4:	e726      	b.n	8005744 <_scanf_float+0x70>
 80058f6:	0591      	lsls	r1, r2, #22
 80058f8:	d404      	bmi.n	8005904 <_scanf_float+0x230>
 80058fa:	9901      	ldr	r1, [sp, #4]
 80058fc:	9805      	ldr	r0, [sp, #20]
 80058fe:	9509      	str	r5, [sp, #36]	; 0x24
 8005900:	1a09      	subs	r1, r1, r0
 8005902:	9108      	str	r1, [sp, #32]
 8005904:	4933      	ldr	r1, [pc, #204]	; (80059d4 <_scanf_float+0x300>)
 8005906:	400a      	ands	r2, r1
 8005908:	21c0      	movs	r1, #192	; 0xc0
 800590a:	0049      	lsls	r1, r1, #1
 800590c:	430a      	orrs	r2, r1
 800590e:	603a      	str	r2, [r7, #0]
 8005910:	2200      	movs	r2, #0
 8005912:	9201      	str	r2, [sp, #4]
 8005914:	e786      	b.n	8005824 <_scanf_float+0x150>
 8005916:	2203      	movs	r2, #3
 8005918:	e79e      	b.n	8005858 <_scanf_float+0x184>
 800591a:	23c0      	movs	r3, #192	; 0xc0
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	0031      	movs	r1, r6
 8005920:	58fb      	ldr	r3, [r7, r3]
 8005922:	9802      	ldr	r0, [sp, #8]
 8005924:	4798      	blx	r3
 8005926:	2800      	cmp	r0, #0
 8005928:	d100      	bne.n	800592c <_scanf_float+0x258>
 800592a:	e6f6      	b.n	800571a <_scanf_float+0x46>
 800592c:	e703      	b.n	8005736 <_scanf_float+0x62>
 800592e:	3d01      	subs	r5, #1
 8005930:	593b      	ldr	r3, [r7, r4]
 8005932:	0032      	movs	r2, r6
 8005934:	7829      	ldrb	r1, [r5, #0]
 8005936:	9802      	ldr	r0, [sp, #8]
 8005938:	4798      	blx	r3
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3b01      	subs	r3, #1
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e707      	b.n	8005752 <_scanf_float+0x7e>
 8005942:	1e63      	subs	r3, r4, #1
 8005944:	2b06      	cmp	r3, #6
 8005946:	d80e      	bhi.n	8005966 <_scanf_float+0x292>
 8005948:	9503      	str	r5, [sp, #12]
 800594a:	2c02      	cmp	r4, #2
 800594c:	d920      	bls.n	8005990 <_scanf_float+0x2bc>
 800594e:	1b63      	subs	r3, r4, r5
 8005950:	b2db      	uxtb	r3, r3
 8005952:	9306      	str	r3, [sp, #24]
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	9a06      	ldr	r2, [sp, #24]
 8005958:	189b      	adds	r3, r3, r2
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b03      	cmp	r3, #3
 800595e:	d827      	bhi.n	80059b0 <_scanf_float+0x2dc>
 8005960:	3c03      	subs	r4, #3
 8005962:	b2e4      	uxtb	r4, r4
 8005964:	1b2d      	subs	r5, r5, r4
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	05da      	lsls	r2, r3, #23
 800596a:	d552      	bpl.n	8005a12 <_scanf_float+0x33e>
 800596c:	055b      	lsls	r3, r3, #21
 800596e:	d535      	bpl.n	80059dc <_scanf_float+0x308>
 8005970:	24be      	movs	r4, #190	; 0xbe
 8005972:	0064      	lsls	r4, r4, #1
 8005974:	9b04      	ldr	r3, [sp, #16]
 8005976:	429d      	cmp	r5, r3
 8005978:	d800      	bhi.n	800597c <_scanf_float+0x2a8>
 800597a:	e6ee      	b.n	800575a <_scanf_float+0x86>
 800597c:	3d01      	subs	r5, #1
 800597e:	593b      	ldr	r3, [r7, r4]
 8005980:	0032      	movs	r2, r6
 8005982:	7829      	ldrb	r1, [r5, #0]
 8005984:	9802      	ldr	r0, [sp, #8]
 8005986:	4798      	blx	r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3b01      	subs	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	e7f1      	b.n	8005974 <_scanf_float+0x2a0>
 8005990:	24be      	movs	r4, #190	; 0xbe
 8005992:	0064      	lsls	r4, r4, #1
 8005994:	9b04      	ldr	r3, [sp, #16]
 8005996:	429d      	cmp	r5, r3
 8005998:	d800      	bhi.n	800599c <_scanf_float+0x2c8>
 800599a:	e6de      	b.n	800575a <_scanf_float+0x86>
 800599c:	3d01      	subs	r5, #1
 800599e:	593b      	ldr	r3, [r7, r4]
 80059a0:	0032      	movs	r2, r6
 80059a2:	7829      	ldrb	r1, [r5, #0]
 80059a4:	9802      	ldr	r0, [sp, #8]
 80059a6:	4798      	blx	r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e7f1      	b.n	8005994 <_scanf_float+0x2c0>
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	0032      	movs	r2, r6
 80059b4:	3b01      	subs	r3, #1
 80059b6:	7819      	ldrb	r1, [r3, #0]
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	23be      	movs	r3, #190	; 0xbe
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	58fb      	ldr	r3, [r7, r3]
 80059c0:	9802      	ldr	r0, [sp, #8]
 80059c2:	4798      	blx	r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	e7c3      	b.n	8005954 <_scanf_float+0x280>
 80059cc:	fffffeff 	.word	0xfffffeff
 80059d0:	fffffe7f 	.word	0xfffffe7f
 80059d4:	fffff87f 	.word	0xfffff87f
 80059d8:	fffffd7f 	.word	0xfffffd7f
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1e6c      	subs	r4, r5, #1
 80059e0:	7821      	ldrb	r1, [r4, #0]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	2965      	cmp	r1, #101	; 0x65
 80059e8:	d00c      	beq.n	8005a04 <_scanf_float+0x330>
 80059ea:	2945      	cmp	r1, #69	; 0x45
 80059ec:	d00a      	beq.n	8005a04 <_scanf_float+0x330>
 80059ee:	23be      	movs	r3, #190	; 0xbe
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	58fb      	ldr	r3, [r7, r3]
 80059f4:	0032      	movs	r2, r6
 80059f6:	9802      	ldr	r0, [sp, #8]
 80059f8:	4798      	blx	r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1eac      	subs	r4, r5, #2
 80059fe:	3b01      	subs	r3, #1
 8005a00:	7821      	ldrb	r1, [r4, #0]
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	23be      	movs	r3, #190	; 0xbe
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	0032      	movs	r2, r6
 8005a0a:	58fb      	ldr	r3, [r7, r3]
 8005a0c:	9802      	ldr	r0, [sp, #8]
 8005a0e:	4798      	blx	r3
 8005a10:	0025      	movs	r5, r4
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	2310      	movs	r3, #16
 8005a16:	0011      	movs	r1, r2
 8005a18:	4019      	ands	r1, r3
 8005a1a:	9103      	str	r1, [sp, #12]
 8005a1c:	421a      	tst	r2, r3
 8005a1e:	d15b      	bne.n	8005ad8 <_scanf_float+0x404>
 8005a20:	22c0      	movs	r2, #192	; 0xc0
 8005a22:	7029      	strb	r1, [r5, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	00d2      	lsls	r2, r2, #3
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	00d2      	lsls	r2, r2, #3
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d11d      	bne.n	8005a6e <_scanf_float+0x39a>
 8005a32:	9b05      	ldr	r3, [sp, #20]
 8005a34:	9a01      	ldr	r2, [sp, #4]
 8005a36:	9901      	ldr	r1, [sp, #4]
 8005a38:	1a9a      	subs	r2, r3, r2
 8005a3a:	428b      	cmp	r3, r1
 8005a3c:	d124      	bne.n	8005a88 <_scanf_float+0x3b4>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	9904      	ldr	r1, [sp, #16]
 8005a42:	9802      	ldr	r0, [sp, #8]
 8005a44:	f002 fc98 	bl	8008378 <_strtod_r>
 8005a48:	9b07      	ldr	r3, [sp, #28]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	0004      	movs	r4, r0
 8005a4e:	000d      	movs	r5, r1
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	0791      	lsls	r1, r2, #30
 8005a54:	d525      	bpl.n	8005aa2 <_scanf_float+0x3ce>
 8005a56:	9907      	ldr	r1, [sp, #28]
 8005a58:	1d1a      	adds	r2, r3, #4
 8005a5a:	600a      	str	r2, [r1, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	601c      	str	r4, [r3, #0]
 8005a60:	605d      	str	r5, [r3, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	9803      	ldr	r0, [sp, #12]
 8005a6a:	b00b      	add	sp, #44	; 0x2c
 8005a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a6e:	9b08      	ldr	r3, [sp, #32]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0e4      	beq.n	8005a3e <_scanf_float+0x36a>
 8005a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a76:	9a03      	ldr	r2, [sp, #12]
 8005a78:	1c59      	adds	r1, r3, #1
 8005a7a:	9802      	ldr	r0, [sp, #8]
 8005a7c:	230a      	movs	r3, #10
 8005a7e:	f002 fd09 	bl	8008494 <_strtol_r>
 8005a82:	9b08      	ldr	r3, [sp, #32]
 8005a84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a86:	1ac2      	subs	r2, r0, r3
 8005a88:	003b      	movs	r3, r7
 8005a8a:	3370      	adds	r3, #112	; 0x70
 8005a8c:	33ff      	adds	r3, #255	; 0xff
 8005a8e:	429d      	cmp	r5, r3
 8005a90:	d302      	bcc.n	8005a98 <_scanf_float+0x3c4>
 8005a92:	003d      	movs	r5, r7
 8005a94:	356f      	adds	r5, #111	; 0x6f
 8005a96:	35ff      	adds	r5, #255	; 0xff
 8005a98:	0028      	movs	r0, r5
 8005a9a:	4910      	ldr	r1, [pc, #64]	; (8005adc <_scanf_float+0x408>)
 8005a9c:	f000 f8e6 	bl	8005c6c <siprintf>
 8005aa0:	e7cd      	b.n	8005a3e <_scanf_float+0x36a>
 8005aa2:	1d19      	adds	r1, r3, #4
 8005aa4:	0752      	lsls	r2, r2, #29
 8005aa6:	d502      	bpl.n	8005aae <_scanf_float+0x3da>
 8005aa8:	9a07      	ldr	r2, [sp, #28]
 8005aaa:	6011      	str	r1, [r2, #0]
 8005aac:	e7d6      	b.n	8005a5c <_scanf_float+0x388>
 8005aae:	9a07      	ldr	r2, [sp, #28]
 8005ab0:	0020      	movs	r0, r4
 8005ab2:	6011      	str	r1, [r2, #0]
 8005ab4:	681e      	ldr	r6, [r3, #0]
 8005ab6:	0022      	movs	r2, r4
 8005ab8:	002b      	movs	r3, r5
 8005aba:	0029      	movs	r1, r5
 8005abc:	f7fc fb08 	bl	80020d0 <__aeabi_dcmpun>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d004      	beq.n	8005ace <_scanf_float+0x3fa>
 8005ac4:	4806      	ldr	r0, [pc, #24]	; (8005ae0 <_scanf_float+0x40c>)
 8005ac6:	f000 f9cf 	bl	8005e68 <nanf>
 8005aca:	6030      	str	r0, [r6, #0]
 8005acc:	e7c9      	b.n	8005a62 <_scanf_float+0x38e>
 8005ace:	0020      	movs	r0, r4
 8005ad0:	0029      	movs	r1, r5
 8005ad2:	f7fc fba7 	bl	8002224 <__aeabi_d2f>
 8005ad6:	e7f8      	b.n	8005aca <_scanf_float+0x3f6>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e63f      	b.n	800575c <_scanf_float+0x88>
 8005adc:	08009824 	.word	0x08009824
 8005ae0:	08009bb5 	.word	0x08009bb5

08005ae4 <std>:
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	0004      	movs	r4, r0
 8005aea:	6003      	str	r3, [r0, #0]
 8005aec:	6043      	str	r3, [r0, #4]
 8005aee:	6083      	str	r3, [r0, #8]
 8005af0:	8181      	strh	r1, [r0, #12]
 8005af2:	6643      	str	r3, [r0, #100]	; 0x64
 8005af4:	81c2      	strh	r2, [r0, #14]
 8005af6:	6103      	str	r3, [r0, #16]
 8005af8:	6143      	str	r3, [r0, #20]
 8005afa:	6183      	str	r3, [r0, #24]
 8005afc:	0019      	movs	r1, r3
 8005afe:	2208      	movs	r2, #8
 8005b00:	305c      	adds	r0, #92	; 0x5c
 8005b02:	f000 f91f 	bl	8005d44 <memset>
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <std+0x50>)
 8005b08:	6224      	str	r4, [r4, #32]
 8005b0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <std+0x54>)
 8005b0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <std+0x58>)
 8005b12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <std+0x5c>)
 8005b16:	6323      	str	r3, [r4, #48]	; 0x30
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <std+0x60>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	d005      	beq.n	8005b2a <std+0x46>
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <std+0x64>)
 8005b20:	429c      	cmp	r4, r3
 8005b22:	d002      	beq.n	8005b2a <std+0x46>
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <std+0x68>)
 8005b26:	429c      	cmp	r4, r3
 8005b28:	d103      	bne.n	8005b32 <std+0x4e>
 8005b2a:	0020      	movs	r0, r4
 8005b2c:	3058      	adds	r0, #88	; 0x58
 8005b2e:	f000 f98d 	bl	8005e4c <__retarget_lock_init_recursive>
 8005b32:	bd10      	pop	{r4, pc}
 8005b34:	08005cad 	.word	0x08005cad
 8005b38:	08005cd5 	.word	0x08005cd5
 8005b3c:	08005d0d 	.word	0x08005d0d
 8005b40:	08005d39 	.word	0x08005d39
 8005b44:	200006d8 	.word	0x200006d8
 8005b48:	20000740 	.word	0x20000740
 8005b4c:	200007a8 	.word	0x200007a8

08005b50 <stdio_exit_handler>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	4a03      	ldr	r2, [pc, #12]	; (8005b60 <stdio_exit_handler+0x10>)
 8005b54:	4903      	ldr	r1, [pc, #12]	; (8005b64 <stdio_exit_handler+0x14>)
 8005b56:	4804      	ldr	r0, [pc, #16]	; (8005b68 <stdio_exit_handler+0x18>)
 8005b58:	f000 f86c 	bl	8005c34 <_fwalk_sglue>
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	2000000c 	.word	0x2000000c
 8005b64:	08008875 	.word	0x08008875
 8005b68:	20000018 	.word	0x20000018

08005b6c <cleanup_stdio>:
 8005b6c:	6841      	ldr	r1, [r0, #4]
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <cleanup_stdio+0x30>)
 8005b70:	b510      	push	{r4, lr}
 8005b72:	0004      	movs	r4, r0
 8005b74:	4299      	cmp	r1, r3
 8005b76:	d001      	beq.n	8005b7c <cleanup_stdio+0x10>
 8005b78:	f002 fe7c 	bl	8008874 <_fflush_r>
 8005b7c:	68a1      	ldr	r1, [r4, #8]
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <cleanup_stdio+0x34>)
 8005b80:	4299      	cmp	r1, r3
 8005b82:	d002      	beq.n	8005b8a <cleanup_stdio+0x1e>
 8005b84:	0020      	movs	r0, r4
 8005b86:	f002 fe75 	bl	8008874 <_fflush_r>
 8005b8a:	68e1      	ldr	r1, [r4, #12]
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <cleanup_stdio+0x38>)
 8005b8e:	4299      	cmp	r1, r3
 8005b90:	d002      	beq.n	8005b98 <cleanup_stdio+0x2c>
 8005b92:	0020      	movs	r0, r4
 8005b94:	f002 fe6e 	bl	8008874 <_fflush_r>
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	200006d8 	.word	0x200006d8
 8005ba0:	20000740 	.word	0x20000740
 8005ba4:	200007a8 	.word	0x200007a8

08005ba8 <global_stdio_init.part.0>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <global_stdio_init.part.0+0x28>)
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <global_stdio_init.part.0+0x2c>)
 8005bae:	2104      	movs	r1, #4
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	4809      	ldr	r0, [pc, #36]	; (8005bd8 <global_stdio_init.part.0+0x30>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f7ff ff95 	bl	8005ae4 <std>
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2109      	movs	r1, #9
 8005bbe:	4807      	ldr	r0, [pc, #28]	; (8005bdc <global_stdio_init.part.0+0x34>)
 8005bc0:	f7ff ff90 	bl	8005ae4 <std>
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	2112      	movs	r1, #18
 8005bc8:	4805      	ldr	r0, [pc, #20]	; (8005be0 <global_stdio_init.part.0+0x38>)
 8005bca:	f7ff ff8b 	bl	8005ae4 <std>
 8005bce:	bd10      	pop	{r4, pc}
 8005bd0:	20000810 	.word	0x20000810
 8005bd4:	08005b51 	.word	0x08005b51
 8005bd8:	200006d8 	.word	0x200006d8
 8005bdc:	20000740 	.word	0x20000740
 8005be0:	200007a8 	.word	0x200007a8

08005be4 <__sfp_lock_acquire>:
 8005be4:	b510      	push	{r4, lr}
 8005be6:	4802      	ldr	r0, [pc, #8]	; (8005bf0 <__sfp_lock_acquire+0xc>)
 8005be8:	f000 f931 	bl	8005e4e <__retarget_lock_acquire_recursive>
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	20000819 	.word	0x20000819

08005bf4 <__sfp_lock_release>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	4802      	ldr	r0, [pc, #8]	; (8005c00 <__sfp_lock_release+0xc>)
 8005bf8:	f000 f92a 	bl	8005e50 <__retarget_lock_release_recursive>
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	20000819 	.word	0x20000819

08005c04 <__sinit>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	0004      	movs	r4, r0
 8005c08:	f7ff ffec 	bl	8005be4 <__sfp_lock_acquire>
 8005c0c:	6a23      	ldr	r3, [r4, #32]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <__sinit+0x14>
 8005c12:	f7ff ffef 	bl	8005bf4 <__sfp_lock_release>
 8005c16:	bd10      	pop	{r4, pc}
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__sinit+0x28>)
 8005c1a:	6223      	str	r3, [r4, #32]
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <__sinit+0x2c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f6      	bne.n	8005c12 <__sinit+0xe>
 8005c24:	f7ff ffc0 	bl	8005ba8 <global_stdio_init.part.0>
 8005c28:	e7f3      	b.n	8005c12 <__sinit+0xe>
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	08005b6d 	.word	0x08005b6d
 8005c30:	20000810 	.word	0x20000810

08005c34 <_fwalk_sglue>:
 8005c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c36:	0014      	movs	r4, r2
 8005c38:	2600      	movs	r6, #0
 8005c3a:	9000      	str	r0, [sp, #0]
 8005c3c:	9101      	str	r1, [sp, #4]
 8005c3e:	68a5      	ldr	r5, [r4, #8]
 8005c40:	6867      	ldr	r7, [r4, #4]
 8005c42:	3f01      	subs	r7, #1
 8005c44:	d504      	bpl.n	8005c50 <_fwalk_sglue+0x1c>
 8005c46:	6824      	ldr	r4, [r4, #0]
 8005c48:	2c00      	cmp	r4, #0
 8005c4a:	d1f8      	bne.n	8005c3e <_fwalk_sglue+0xa>
 8005c4c:	0030      	movs	r0, r6
 8005c4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c50:	89ab      	ldrh	r3, [r5, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d908      	bls.n	8005c68 <_fwalk_sglue+0x34>
 8005c56:	220e      	movs	r2, #14
 8005c58:	5eab      	ldrsh	r3, [r5, r2]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	d004      	beq.n	8005c68 <_fwalk_sglue+0x34>
 8005c5e:	0029      	movs	r1, r5
 8005c60:	9800      	ldr	r0, [sp, #0]
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	4798      	blx	r3
 8005c66:	4306      	orrs	r6, r0
 8005c68:	3568      	adds	r5, #104	; 0x68
 8005c6a:	e7ea      	b.n	8005c42 <_fwalk_sglue+0xe>

08005c6c <siprintf>:
 8005c6c:	b40e      	push	{r1, r2, r3}
 8005c6e:	b500      	push	{lr}
 8005c70:	490b      	ldr	r1, [pc, #44]	; (8005ca0 <siprintf+0x34>)
 8005c72:	b09c      	sub	sp, #112	; 0x70
 8005c74:	ab1d      	add	r3, sp, #116	; 0x74
 8005c76:	9002      	str	r0, [sp, #8]
 8005c78:	9006      	str	r0, [sp, #24]
 8005c7a:	9107      	str	r1, [sp, #28]
 8005c7c:	9104      	str	r1, [sp, #16]
 8005c7e:	4809      	ldr	r0, [pc, #36]	; (8005ca4 <siprintf+0x38>)
 8005c80:	4909      	ldr	r1, [pc, #36]	; (8005ca8 <siprintf+0x3c>)
 8005c82:	cb04      	ldmia	r3!, {r2}
 8005c84:	9105      	str	r1, [sp, #20]
 8005c86:	6800      	ldr	r0, [r0, #0]
 8005c88:	a902      	add	r1, sp, #8
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	f002 fc68 	bl	8008560 <_svfiprintf_r>
 8005c90:	2200      	movs	r2, #0
 8005c92:	9b02      	ldr	r3, [sp, #8]
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	b01c      	add	sp, #112	; 0x70
 8005c98:	bc08      	pop	{r3}
 8005c9a:	b003      	add	sp, #12
 8005c9c:	4718      	bx	r3
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	7fffffff 	.word	0x7fffffff
 8005ca4:	20000064 	.word	0x20000064
 8005ca8:	ffff0208 	.word	0xffff0208

08005cac <__sread>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	000c      	movs	r4, r1
 8005cb0:	250e      	movs	r5, #14
 8005cb2:	5f49      	ldrsh	r1, [r1, r5]
 8005cb4:	f000 f878 	bl	8005da8 <_read_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	db03      	blt.n	8005cc4 <__sread+0x18>
 8005cbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cbe:	181b      	adds	r3, r3, r0
 8005cc0:	6563      	str	r3, [r4, #84]	; 0x54
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	4a02      	ldr	r2, [pc, #8]	; (8005cd0 <__sread+0x24>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	e7f9      	b.n	8005cc2 <__sread+0x16>
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	ffffefff 	.word	0xffffefff

08005cd4 <__swrite>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	001f      	movs	r7, r3
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	0005      	movs	r5, r0
 8005cdc:	000c      	movs	r4, r1
 8005cde:	0016      	movs	r6, r2
 8005ce0:	05db      	lsls	r3, r3, #23
 8005ce2:	d505      	bpl.n	8005cf0 <__swrite+0x1c>
 8005ce4:	230e      	movs	r3, #14
 8005ce6:	5ec9      	ldrsh	r1, [r1, r3]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2302      	movs	r3, #2
 8005cec:	f000 f848 	bl	8005d80 <_lseek_r>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <__swrite+0x34>)
 8005cf4:	0028      	movs	r0, r5
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	0032      	movs	r2, r6
 8005cfc:	230e      	movs	r3, #14
 8005cfe:	5ee1      	ldrsh	r1, [r4, r3]
 8005d00:	003b      	movs	r3, r7
 8005d02:	f000 f865 	bl	8005dd0 <_write_r>
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	ffffefff 	.word	0xffffefff

08005d0c <__sseek>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	000c      	movs	r4, r1
 8005d10:	250e      	movs	r5, #14
 8005d12:	5f49      	ldrsh	r1, [r1, r5]
 8005d14:	f000 f834 	bl	8005d80 <_lseek_r>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	1c42      	adds	r2, r0, #1
 8005d1c:	d103      	bne.n	8005d26 <__sseek+0x1a>
 8005d1e:	4a05      	ldr	r2, [pc, #20]	; (8005d34 <__sseek+0x28>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	0152      	lsls	r2, r2, #5
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8005d30:	e7f8      	b.n	8005d24 <__sseek+0x18>
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	ffffefff 	.word	0xffffefff

08005d38 <__sclose>:
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	230e      	movs	r3, #14
 8005d3c:	5ec9      	ldrsh	r1, [r1, r3]
 8005d3e:	f000 f80d 	bl	8005d5c <_close_r>
 8005d42:	bd10      	pop	{r4, pc}

08005d44 <memset>:
 8005d44:	0003      	movs	r3, r0
 8005d46:	1882      	adds	r2, r0, r2
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d100      	bne.n	8005d4e <memset+0xa>
 8005d4c:	4770      	bx	lr
 8005d4e:	7019      	strb	r1, [r3, #0]
 8005d50:	3301      	adds	r3, #1
 8005d52:	e7f9      	b.n	8005d48 <memset+0x4>

08005d54 <_localeconv_r>:
 8005d54:	4800      	ldr	r0, [pc, #0]	; (8005d58 <_localeconv_r+0x4>)
 8005d56:	4770      	bx	lr
 8005d58:	20000158 	.word	0x20000158

08005d5c <_close_r>:
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	b570      	push	{r4, r5, r6, lr}
 8005d60:	4d06      	ldr	r5, [pc, #24]	; (8005d7c <_close_r+0x20>)
 8005d62:	0004      	movs	r4, r0
 8005d64:	0008      	movs	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f7fc ffee 	bl	8002d48 <_close>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d103      	bne.n	8005d78 <_close_r+0x1c>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d000      	beq.n	8005d78 <_close_r+0x1c>
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	bd70      	pop	{r4, r5, r6, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	20000814 	.word	0x20000814

08005d80 <_lseek_r>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	0004      	movs	r4, r0
 8005d84:	0008      	movs	r0, r1
 8005d86:	0011      	movs	r1, r2
 8005d88:	001a      	movs	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4d05      	ldr	r5, [pc, #20]	; (8005da4 <_lseek_r+0x24>)
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fc ffe4 	bl	8002d5c <_lseek>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d103      	bne.n	8005da0 <_lseek_r+0x20>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d000      	beq.n	8005da0 <_lseek_r+0x20>
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	20000814 	.word	0x20000814

08005da8 <_read_r>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	0004      	movs	r4, r0
 8005dac:	0008      	movs	r0, r1
 8005dae:	0011      	movs	r1, r2
 8005db0:	001a      	movs	r2, r3
 8005db2:	2300      	movs	r3, #0
 8005db4:	4d05      	ldr	r5, [pc, #20]	; (8005dcc <_read_r+0x24>)
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fc ffac 	bl	8002d14 <_read>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d103      	bne.n	8005dc8 <_read_r+0x20>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d000      	beq.n	8005dc8 <_read_r+0x20>
 8005dc6:	6023      	str	r3, [r4, #0]
 8005dc8:	bd70      	pop	{r4, r5, r6, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	20000814 	.word	0x20000814

08005dd0 <_write_r>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	0004      	movs	r4, r0
 8005dd4:	0008      	movs	r0, r1
 8005dd6:	0011      	movs	r1, r2
 8005dd8:	001a      	movs	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d05      	ldr	r5, [pc, #20]	; (8005df4 <_write_r+0x24>)
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fc ffa5 	bl	8002d2e <_write>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d103      	bne.n	8005df0 <_write_r+0x20>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d000      	beq.n	8005df0 <_write_r+0x20>
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	20000814 	.word	0x20000814

08005df8 <__errno>:
 8005df8:	4b01      	ldr	r3, [pc, #4]	; (8005e00 <__errno+0x8>)
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	4770      	bx	lr
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	20000064 	.word	0x20000064

08005e04 <__libc_init_array>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	2600      	movs	r6, #0
 8005e08:	4c0c      	ldr	r4, [pc, #48]	; (8005e3c <__libc_init_array+0x38>)
 8005e0a:	4d0d      	ldr	r5, [pc, #52]	; (8005e40 <__libc_init_array+0x3c>)
 8005e0c:	1b64      	subs	r4, r4, r5
 8005e0e:	10a4      	asrs	r4, r4, #2
 8005e10:	42a6      	cmp	r6, r4
 8005e12:	d109      	bne.n	8005e28 <__libc_init_array+0x24>
 8005e14:	2600      	movs	r6, #0
 8005e16:	f003 fc71 	bl	80096fc <_init>
 8005e1a:	4c0a      	ldr	r4, [pc, #40]	; (8005e44 <__libc_init_array+0x40>)
 8005e1c:	4d0a      	ldr	r5, [pc, #40]	; (8005e48 <__libc_init_array+0x44>)
 8005e1e:	1b64      	subs	r4, r4, r5
 8005e20:	10a4      	asrs	r4, r4, #2
 8005e22:	42a6      	cmp	r6, r4
 8005e24:	d105      	bne.n	8005e32 <__libc_init_array+0x2e>
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	00b3      	lsls	r3, r6, #2
 8005e2a:	58eb      	ldr	r3, [r5, r3]
 8005e2c:	4798      	blx	r3
 8005e2e:	3601      	adds	r6, #1
 8005e30:	e7ee      	b.n	8005e10 <__libc_init_array+0xc>
 8005e32:	00b3      	lsls	r3, r6, #2
 8005e34:	58eb      	ldr	r3, [r5, r3]
 8005e36:	4798      	blx	r3
 8005e38:	3601      	adds	r6, #1
 8005e3a:	e7f2      	b.n	8005e22 <__libc_init_array+0x1e>
 8005e3c:	08009c18 	.word	0x08009c18
 8005e40:	08009c18 	.word	0x08009c18
 8005e44:	08009c1c 	.word	0x08009c1c
 8005e48:	08009c18 	.word	0x08009c18

08005e4c <__retarget_lock_init_recursive>:
 8005e4c:	4770      	bx	lr

08005e4e <__retarget_lock_acquire_recursive>:
 8005e4e:	4770      	bx	lr

08005e50 <__retarget_lock_release_recursive>:
 8005e50:	4770      	bx	lr

08005e52 <memchr>:
 8005e52:	b2c9      	uxtb	r1, r1
 8005e54:	1882      	adds	r2, r0, r2
 8005e56:	4290      	cmp	r0, r2
 8005e58:	d101      	bne.n	8005e5e <memchr+0xc>
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	4770      	bx	lr
 8005e5e:	7803      	ldrb	r3, [r0, #0]
 8005e60:	428b      	cmp	r3, r1
 8005e62:	d0fb      	beq.n	8005e5c <memchr+0xa>
 8005e64:	3001      	adds	r0, #1
 8005e66:	e7f6      	b.n	8005e56 <memchr+0x4>

08005e68 <nanf>:
 8005e68:	4800      	ldr	r0, [pc, #0]	; (8005e6c <nanf+0x4>)
 8005e6a:	4770      	bx	lr
 8005e6c:	7fc00000 	.word	0x7fc00000

08005e70 <quorem>:
 8005e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e72:	6902      	ldr	r2, [r0, #16]
 8005e74:	690b      	ldr	r3, [r1, #16]
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	0007      	movs	r7, r0
 8005e7a:	9104      	str	r1, [sp, #16]
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	db69      	blt.n	8005f56 <quorem+0xe6>
 8005e82:	3b01      	subs	r3, #1
 8005e84:	009c      	lsls	r4, r3, #2
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	000b      	movs	r3, r1
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	191b      	adds	r3, r3, r4
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	003b      	movs	r3, r7
 8005e94:	3314      	adds	r3, #20
 8005e96:	9303      	str	r3, [sp, #12]
 8005e98:	191c      	adds	r4, r3, r4
 8005e9a:	9b05      	ldr	r3, [sp, #20]
 8005e9c:	6826      	ldr	r6, [r4, #0]
 8005e9e:	681d      	ldr	r5, [r3, #0]
 8005ea0:	0030      	movs	r0, r6
 8005ea2:	3501      	adds	r5, #1
 8005ea4:	0029      	movs	r1, r5
 8005ea6:	f7fa f951 	bl	800014c <__udivsi3>
 8005eaa:	9002      	str	r0, [sp, #8]
 8005eac:	42ae      	cmp	r6, r5
 8005eae:	d329      	bcc.n	8005f04 <quorem+0x94>
 8005eb0:	9b06      	ldr	r3, [sp, #24]
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	469c      	mov	ip, r3
 8005eb6:	9d03      	ldr	r5, [sp, #12]
 8005eb8:	9606      	str	r6, [sp, #24]
 8005eba:	4662      	mov	r2, ip
 8005ebc:	ca08      	ldmia	r2!, {r3}
 8005ebe:	6828      	ldr	r0, [r5, #0]
 8005ec0:	4694      	mov	ip, r2
 8005ec2:	9a02      	ldr	r2, [sp, #8]
 8005ec4:	b299      	uxth	r1, r3
 8005ec6:	4351      	muls	r1, r2
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	4353      	muls	r3, r2
 8005ecc:	1989      	adds	r1, r1, r6
 8005ece:	0c0a      	lsrs	r2, r1, #16
 8005ed0:	189b      	adds	r3, r3, r2
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	0c1e      	lsrs	r6, r3, #16
 8005ed6:	9b06      	ldr	r3, [sp, #24]
 8005ed8:	b282      	uxth	r2, r0
 8005eda:	18d2      	adds	r2, r2, r3
 8005edc:	466b      	mov	r3, sp
 8005ede:	b289      	uxth	r1, r1
 8005ee0:	8b9b      	ldrh	r3, [r3, #28]
 8005ee2:	1a52      	subs	r2, r2, r1
 8005ee4:	0c01      	lsrs	r1, r0, #16
 8005ee6:	1ac9      	subs	r1, r1, r3
 8005ee8:	1413      	asrs	r3, r2, #16
 8005eea:	18cb      	adds	r3, r1, r3
 8005eec:	1419      	asrs	r1, r3, #16
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	c508      	stmia	r5!, {r3}
 8005ef6:	9b05      	ldr	r3, [sp, #20]
 8005ef8:	9106      	str	r1, [sp, #24]
 8005efa:	4563      	cmp	r3, ip
 8005efc:	d2dd      	bcs.n	8005eba <quorem+0x4a>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d030      	beq.n	8005f66 <quorem+0xf6>
 8005f04:	0038      	movs	r0, r7
 8005f06:	9904      	ldr	r1, [sp, #16]
 8005f08:	f001 fa2a 	bl	8007360 <__mcmp>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	db21      	blt.n	8005f54 <quorem+0xe4>
 8005f10:	0038      	movs	r0, r7
 8005f12:	2600      	movs	r6, #0
 8005f14:	9b02      	ldr	r3, [sp, #8]
 8005f16:	9c04      	ldr	r4, [sp, #16]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	9302      	str	r3, [sp, #8]
 8005f1c:	3014      	adds	r0, #20
 8005f1e:	3414      	adds	r4, #20
 8005f20:	6803      	ldr	r3, [r0, #0]
 8005f22:	cc02      	ldmia	r4!, {r1}
 8005f24:	b29d      	uxth	r5, r3
 8005f26:	19ad      	adds	r5, r5, r6
 8005f28:	b28a      	uxth	r2, r1
 8005f2a:	1aaa      	subs	r2, r5, r2
 8005f2c:	0c09      	lsrs	r1, r1, #16
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	1a5b      	subs	r3, r3, r1
 8005f32:	1411      	asrs	r1, r2, #16
 8005f34:	185b      	adds	r3, r3, r1
 8005f36:	141e      	asrs	r6, r3, #16
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	041b      	lsls	r3, r3, #16
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	c008      	stmia	r0!, {r3}
 8005f40:	9b05      	ldr	r3, [sp, #20]
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	d2ec      	bcs.n	8005f20 <quorem+0xb0>
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	9a03      	ldr	r2, [sp, #12]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	18d3      	adds	r3, r2, r3
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	2a00      	cmp	r2, #0
 8005f52:	d015      	beq.n	8005f80 <quorem+0x110>
 8005f54:	9802      	ldr	r0, [sp, #8]
 8005f56:	b009      	add	sp, #36	; 0x24
 8005f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <quorem+0xfe>
 8005f60:	9b01      	ldr	r3, [sp, #4]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	3c04      	subs	r4, #4
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	d3f5      	bcc.n	8005f5a <quorem+0xea>
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e7c7      	b.n	8005f04 <quorem+0x94>
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	d106      	bne.n	8005f88 <quorem+0x118>
 8005f7a:	9a01      	ldr	r2, [sp, #4]
 8005f7c:	3a01      	subs	r2, #1
 8005f7e:	9201      	str	r2, [sp, #4]
 8005f80:	9a03      	ldr	r2, [sp, #12]
 8005f82:	3b04      	subs	r3, #4
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d3f5      	bcc.n	8005f74 <quorem+0x104>
 8005f88:	9b01      	ldr	r3, [sp, #4]
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e7e2      	b.n	8005f54 <quorem+0xe4>
	...

08005f90 <_dtoa_r>:
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f92:	0014      	movs	r4, r2
 8005f94:	001d      	movs	r5, r3
 8005f96:	69c6      	ldr	r6, [r0, #28]
 8005f98:	b09d      	sub	sp, #116	; 0x74
 8005f9a:	9408      	str	r4, [sp, #32]
 8005f9c:	9509      	str	r5, [sp, #36]	; 0x24
 8005f9e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8005fa0:	9004      	str	r0, [sp, #16]
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d10f      	bne.n	8005fc6 <_dtoa_r+0x36>
 8005fa6:	2010      	movs	r0, #16
 8005fa8:	f000 fe4a 	bl	8006c40 <malloc>
 8005fac:	9b04      	ldr	r3, [sp, #16]
 8005fae:	1e02      	subs	r2, r0, #0
 8005fb0:	61d8      	str	r0, [r3, #28]
 8005fb2:	d104      	bne.n	8005fbe <_dtoa_r+0x2e>
 8005fb4:	21ef      	movs	r1, #239	; 0xef
 8005fb6:	4bc6      	ldr	r3, [pc, #792]	; (80062d0 <_dtoa_r+0x340>)
 8005fb8:	48c6      	ldr	r0, [pc, #792]	; (80062d4 <_dtoa_r+0x344>)
 8005fba:	f002 fccd 	bl	8008958 <__assert_func>
 8005fbe:	6046      	str	r6, [r0, #4]
 8005fc0:	6086      	str	r6, [r0, #8]
 8005fc2:	6006      	str	r6, [r0, #0]
 8005fc4:	60c6      	str	r6, [r0, #12]
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d00b      	beq.n	8005fe8 <_dtoa_r+0x58>
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4093      	lsls	r3, r2
 8005fd6:	604a      	str	r2, [r1, #4]
 8005fd8:	608b      	str	r3, [r1, #8]
 8005fda:	9804      	ldr	r0, [sp, #16]
 8005fdc:	f000 ff32 	bl	8006e44 <_Bfree>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	9b04      	ldr	r3, [sp, #16]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	da1e      	bge.n	800602a <_dtoa_r+0x9a>
 8005fec:	2301      	movs	r3, #1
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	006b      	lsls	r3, r5, #1
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ff8:	4bb7      	ldr	r3, [pc, #732]	; (80062d8 <_dtoa_r+0x348>)
 8005ffa:	4ab7      	ldr	r2, [pc, #732]	; (80062d8 <_dtoa_r+0x348>)
 8005ffc:	403b      	ands	r3, r7
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d116      	bne.n	8006030 <_dtoa_r+0xa0>
 8006002:	4bb6      	ldr	r3, [pc, #728]	; (80062dc <_dtoa_r+0x34c>)
 8006004:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	033b      	lsls	r3, r7, #12
 800600a:	0b1b      	lsrs	r3, r3, #12
 800600c:	4323      	orrs	r3, r4
 800600e:	d101      	bne.n	8006014 <_dtoa_r+0x84>
 8006010:	f000 fdb5 	bl	8006b7e <_dtoa_r+0xbee>
 8006014:	4bb2      	ldr	r3, [pc, #712]	; (80062e0 <_dtoa_r+0x350>)
 8006016:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006018:	9306      	str	r3, [sp, #24]
 800601a:	2a00      	cmp	r2, #0
 800601c:	d002      	beq.n	8006024 <_dtoa_r+0x94>
 800601e:	4bb1      	ldr	r3, [pc, #708]	; (80062e4 <_dtoa_r+0x354>)
 8006020:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	9806      	ldr	r0, [sp, #24]
 8006026:	b01d      	add	sp, #116	; 0x74
 8006028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602a:	2300      	movs	r3, #0
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	e7e2      	b.n	8005ff6 <_dtoa_r+0x66>
 8006030:	9a08      	ldr	r2, [sp, #32]
 8006032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006034:	9210      	str	r2, [sp, #64]	; 0x40
 8006036:	9311      	str	r3, [sp, #68]	; 0x44
 8006038:	9810      	ldr	r0, [sp, #64]	; 0x40
 800603a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800603c:	2200      	movs	r2, #0
 800603e:	2300      	movs	r3, #0
 8006040:	f7fa fa0a 	bl	8000458 <__aeabi_dcmpeq>
 8006044:	1e06      	subs	r6, r0, #0
 8006046:	d009      	beq.n	800605c <_dtoa_r+0xcc>
 8006048:	2301      	movs	r3, #1
 800604a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	4ba6      	ldr	r3, [pc, #664]	; (80062e8 <_dtoa_r+0x358>)
 8006050:	9306      	str	r3, [sp, #24]
 8006052:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0e5      	beq.n	8006024 <_dtoa_r+0x94>
 8006058:	4ba4      	ldr	r3, [pc, #656]	; (80062ec <_dtoa_r+0x35c>)
 800605a:	e7e1      	b.n	8006020 <_dtoa_r+0x90>
 800605c:	ab1a      	add	r3, sp, #104	; 0x68
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	ab1b      	add	r3, sp, #108	; 0x6c
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	9804      	ldr	r0, [sp, #16]
 8006066:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800606a:	f001 fa95 	bl	8007598 <__d2b>
 800606e:	007a      	lsls	r2, r7, #1
 8006070:	9005      	str	r0, [sp, #20]
 8006072:	0d52      	lsrs	r2, r2, #21
 8006074:	d100      	bne.n	8006078 <_dtoa_r+0xe8>
 8006076:	e07b      	b.n	8006170 <_dtoa_r+0x1e0>
 8006078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800607a:	9617      	str	r6, [sp, #92]	; 0x5c
 800607c:	0319      	lsls	r1, r3, #12
 800607e:	4b9c      	ldr	r3, [pc, #624]	; (80062f0 <_dtoa_r+0x360>)
 8006080:	0b09      	lsrs	r1, r1, #12
 8006082:	430b      	orrs	r3, r1
 8006084:	499b      	ldr	r1, [pc, #620]	; (80062f4 <_dtoa_r+0x364>)
 8006086:	1857      	adds	r7, r2, r1
 8006088:	9810      	ldr	r0, [sp, #64]	; 0x40
 800608a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800608c:	0019      	movs	r1, r3
 800608e:	2200      	movs	r2, #0
 8006090:	4b99      	ldr	r3, [pc, #612]	; (80062f8 <_dtoa_r+0x368>)
 8006092:	f7fb fc9b 	bl	80019cc <__aeabi_dsub>
 8006096:	4a99      	ldr	r2, [pc, #612]	; (80062fc <_dtoa_r+0x36c>)
 8006098:	4b99      	ldr	r3, [pc, #612]	; (8006300 <_dtoa_r+0x370>)
 800609a:	f7fb f9d5 	bl	8001448 <__aeabi_dmul>
 800609e:	4a99      	ldr	r2, [pc, #612]	; (8006304 <_dtoa_r+0x374>)
 80060a0:	4b99      	ldr	r3, [pc, #612]	; (8006308 <_dtoa_r+0x378>)
 80060a2:	f7fa fa77 	bl	8000594 <__aeabi_dadd>
 80060a6:	0004      	movs	r4, r0
 80060a8:	0038      	movs	r0, r7
 80060aa:	000d      	movs	r5, r1
 80060ac:	f7fc f864 	bl	8002178 <__aeabi_i2d>
 80060b0:	4a96      	ldr	r2, [pc, #600]	; (800630c <_dtoa_r+0x37c>)
 80060b2:	4b97      	ldr	r3, [pc, #604]	; (8006310 <_dtoa_r+0x380>)
 80060b4:	f7fb f9c8 	bl	8001448 <__aeabi_dmul>
 80060b8:	0002      	movs	r2, r0
 80060ba:	000b      	movs	r3, r1
 80060bc:	0020      	movs	r0, r4
 80060be:	0029      	movs	r1, r5
 80060c0:	f7fa fa68 	bl	8000594 <__aeabi_dadd>
 80060c4:	0004      	movs	r4, r0
 80060c6:	000d      	movs	r5, r1
 80060c8:	f7fc f820 	bl	800210c <__aeabi_d2iz>
 80060cc:	2200      	movs	r2, #0
 80060ce:	9003      	str	r0, [sp, #12]
 80060d0:	2300      	movs	r3, #0
 80060d2:	0020      	movs	r0, r4
 80060d4:	0029      	movs	r1, r5
 80060d6:	f7fa f9c5 	bl	8000464 <__aeabi_dcmplt>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d00b      	beq.n	80060f6 <_dtoa_r+0x166>
 80060de:	9803      	ldr	r0, [sp, #12]
 80060e0:	f7fc f84a 	bl	8002178 <__aeabi_i2d>
 80060e4:	002b      	movs	r3, r5
 80060e6:	0022      	movs	r2, r4
 80060e8:	f7fa f9b6 	bl	8000458 <__aeabi_dcmpeq>
 80060ec:	4243      	negs	r3, r0
 80060ee:	4158      	adcs	r0, r3
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	1a1b      	subs	r3, r3, r0
 80060f4:	9303      	str	r3, [sp, #12]
 80060f6:	2301      	movs	r3, #1
 80060f8:	9316      	str	r3, [sp, #88]	; 0x58
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	2b16      	cmp	r3, #22
 80060fe:	d810      	bhi.n	8006122 <_dtoa_r+0x192>
 8006100:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006102:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006104:	9a03      	ldr	r2, [sp, #12]
 8006106:	4b83      	ldr	r3, [pc, #524]	; (8006314 <_dtoa_r+0x384>)
 8006108:	00d2      	lsls	r2, r2, #3
 800610a:	189b      	adds	r3, r3, r2
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f7fa f9a8 	bl	8000464 <__aeabi_dcmplt>
 8006114:	2800      	cmp	r0, #0
 8006116:	d047      	beq.n	80061a8 <_dtoa_r+0x218>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	3b01      	subs	r3, #1
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	2300      	movs	r3, #0
 8006120:	9316      	str	r3, [sp, #88]	; 0x58
 8006122:	2200      	movs	r2, #0
 8006124:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006126:	920a      	str	r2, [sp, #40]	; 0x28
 8006128:	1bdb      	subs	r3, r3, r7
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	d53e      	bpl.n	80061ac <_dtoa_r+0x21c>
 800612e:	2201      	movs	r2, #1
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	930a      	str	r3, [sp, #40]	; 0x28
 8006134:	2300      	movs	r3, #0
 8006136:	930c      	str	r3, [sp, #48]	; 0x30
 8006138:	9b03      	ldr	r3, [sp, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	db38      	blt.n	80061b0 <_dtoa_r+0x220>
 800613e:	9a03      	ldr	r2, [sp, #12]
 8006140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006142:	4694      	mov	ip, r2
 8006144:	4463      	add	r3, ip
 8006146:	930c      	str	r3, [sp, #48]	; 0x30
 8006148:	2300      	movs	r3, #0
 800614a:	9213      	str	r2, [sp, #76]	; 0x4c
 800614c:	930d      	str	r3, [sp, #52]	; 0x34
 800614e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006150:	2401      	movs	r4, #1
 8006152:	2b09      	cmp	r3, #9
 8006154:	d867      	bhi.n	8006226 <_dtoa_r+0x296>
 8006156:	2b05      	cmp	r3, #5
 8006158:	dd02      	ble.n	8006160 <_dtoa_r+0x1d0>
 800615a:	2400      	movs	r4, #0
 800615c:	3b04      	subs	r3, #4
 800615e:	9322      	str	r3, [sp, #136]	; 0x88
 8006160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006162:	1e98      	subs	r0, r3, #2
 8006164:	2803      	cmp	r0, #3
 8006166:	d867      	bhi.n	8006238 <_dtoa_r+0x2a8>
 8006168:	f7f9 ffdc 	bl	8000124 <__gnu_thumb1_case_uqi>
 800616c:	5b383a2b 	.word	0x5b383a2b
 8006170:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006172:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006174:	18f6      	adds	r6, r6, r3
 8006176:	4b68      	ldr	r3, [pc, #416]	; (8006318 <_dtoa_r+0x388>)
 8006178:	18f2      	adds	r2, r6, r3
 800617a:	2a20      	cmp	r2, #32
 800617c:	dd0f      	ble.n	800619e <_dtoa_r+0x20e>
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	409f      	lsls	r7, r3
 8006184:	4b65      	ldr	r3, [pc, #404]	; (800631c <_dtoa_r+0x38c>)
 8006186:	0038      	movs	r0, r7
 8006188:	18f3      	adds	r3, r6, r3
 800618a:	40dc      	lsrs	r4, r3
 800618c:	4320      	orrs	r0, r4
 800618e:	f7fc f823 	bl	80021d8 <__aeabi_ui2d>
 8006192:	2201      	movs	r2, #1
 8006194:	4b62      	ldr	r3, [pc, #392]	; (8006320 <_dtoa_r+0x390>)
 8006196:	1e77      	subs	r7, r6, #1
 8006198:	18cb      	adds	r3, r1, r3
 800619a:	9217      	str	r2, [sp, #92]	; 0x5c
 800619c:	e776      	b.n	800608c <_dtoa_r+0xfc>
 800619e:	2320      	movs	r3, #32
 80061a0:	0020      	movs	r0, r4
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	4098      	lsls	r0, r3
 80061a6:	e7f2      	b.n	800618e <_dtoa_r+0x1fe>
 80061a8:	9016      	str	r0, [sp, #88]	; 0x58
 80061aa:	e7ba      	b.n	8006122 <_dtoa_r+0x192>
 80061ac:	920c      	str	r2, [sp, #48]	; 0x30
 80061ae:	e7c3      	b.n	8006138 <_dtoa_r+0x1a8>
 80061b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b2:	9a03      	ldr	r2, [sp, #12]
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	930a      	str	r3, [sp, #40]	; 0x28
 80061b8:	4253      	negs	r3, r2
 80061ba:	930d      	str	r3, [sp, #52]	; 0x34
 80061bc:	2300      	movs	r3, #0
 80061be:	9313      	str	r3, [sp, #76]	; 0x4c
 80061c0:	e7c5      	b.n	800614e <_dtoa_r+0x1be>
 80061c2:	2300      	movs	r3, #0
 80061c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	dc13      	bgt.n	80061f8 <_dtoa_r+0x268>
 80061d0:	2301      	movs	r3, #1
 80061d2:	001a      	movs	r2, r3
 80061d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d6:	9307      	str	r3, [sp, #28]
 80061d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80061da:	e00d      	b.n	80061f8 <_dtoa_r+0x268>
 80061dc:	2301      	movs	r3, #1
 80061de:	e7f1      	b.n	80061c4 <_dtoa_r+0x234>
 80061e0:	2300      	movs	r3, #0
 80061e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80061e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061e6:	4694      	mov	ip, r2
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	4463      	add	r3, ip
 80061ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ee:	3301      	adds	r3, #1
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	dc00      	bgt.n	80061f8 <_dtoa_r+0x268>
 80061f6:	2301      	movs	r3, #1
 80061f8:	9a04      	ldr	r2, [sp, #16]
 80061fa:	2100      	movs	r1, #0
 80061fc:	69d0      	ldr	r0, [r2, #28]
 80061fe:	2204      	movs	r2, #4
 8006200:	0015      	movs	r5, r2
 8006202:	3514      	adds	r5, #20
 8006204:	429d      	cmp	r5, r3
 8006206:	d91b      	bls.n	8006240 <_dtoa_r+0x2b0>
 8006208:	6041      	str	r1, [r0, #4]
 800620a:	9804      	ldr	r0, [sp, #16]
 800620c:	f000 fdd6 	bl	8006dbc <_Balloc>
 8006210:	9006      	str	r0, [sp, #24]
 8006212:	2800      	cmp	r0, #0
 8006214:	d117      	bne.n	8006246 <_dtoa_r+0x2b6>
 8006216:	21b0      	movs	r1, #176	; 0xb0
 8006218:	4b42      	ldr	r3, [pc, #264]	; (8006324 <_dtoa_r+0x394>)
 800621a:	482e      	ldr	r0, [pc, #184]	; (80062d4 <_dtoa_r+0x344>)
 800621c:	9a06      	ldr	r2, [sp, #24]
 800621e:	31ff      	adds	r1, #255	; 0xff
 8006220:	e6cb      	b.n	8005fba <_dtoa_r+0x2a>
 8006222:	2301      	movs	r3, #1
 8006224:	e7dd      	b.n	80061e2 <_dtoa_r+0x252>
 8006226:	2300      	movs	r3, #0
 8006228:	940f      	str	r4, [sp, #60]	; 0x3c
 800622a:	9322      	str	r3, [sp, #136]	; 0x88
 800622c:	3b01      	subs	r3, #1
 800622e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006230:	9307      	str	r3, [sp, #28]
 8006232:	2200      	movs	r2, #0
 8006234:	3313      	adds	r3, #19
 8006236:	e7cf      	b.n	80061d8 <_dtoa_r+0x248>
 8006238:	2301      	movs	r3, #1
 800623a:	930f      	str	r3, [sp, #60]	; 0x3c
 800623c:	3b02      	subs	r3, #2
 800623e:	e7f6      	b.n	800622e <_dtoa_r+0x29e>
 8006240:	3101      	adds	r1, #1
 8006242:	0052      	lsls	r2, r2, #1
 8006244:	e7dc      	b.n	8006200 <_dtoa_r+0x270>
 8006246:	9b04      	ldr	r3, [sp, #16]
 8006248:	9a06      	ldr	r2, [sp, #24]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	9b07      	ldr	r3, [sp, #28]
 8006250:	2b0e      	cmp	r3, #14
 8006252:	d900      	bls.n	8006256 <_dtoa_r+0x2c6>
 8006254:	e0e5      	b.n	8006422 <_dtoa_r+0x492>
 8006256:	2c00      	cmp	r4, #0
 8006258:	d100      	bne.n	800625c <_dtoa_r+0x2cc>
 800625a:	e0e2      	b.n	8006422 <_dtoa_r+0x492>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	dd64      	ble.n	800632c <_dtoa_r+0x39c>
 8006262:	210f      	movs	r1, #15
 8006264:	9a03      	ldr	r2, [sp, #12]
 8006266:	4b2b      	ldr	r3, [pc, #172]	; (8006314 <_dtoa_r+0x384>)
 8006268:	400a      	ands	r2, r1
 800626a:	00d2      	lsls	r2, r2, #3
 800626c:	189b      	adds	r3, r3, r2
 800626e:	681e      	ldr	r6, [r3, #0]
 8006270:	685f      	ldr	r7, [r3, #4]
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	2402      	movs	r4, #2
 8006276:	111d      	asrs	r5, r3, #4
 8006278:	05db      	lsls	r3, r3, #23
 800627a:	d50a      	bpl.n	8006292 <_dtoa_r+0x302>
 800627c:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <_dtoa_r+0x398>)
 800627e:	400d      	ands	r5, r1
 8006280:	6a1a      	ldr	r2, [r3, #32]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006286:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006288:	f7fa fce4 	bl	8000c54 <__aeabi_ddiv>
 800628c:	9008      	str	r0, [sp, #32]
 800628e:	9109      	str	r1, [sp, #36]	; 0x24
 8006290:	3401      	adds	r4, #1
 8006292:	4b25      	ldr	r3, [pc, #148]	; (8006328 <_dtoa_r+0x398>)
 8006294:	930e      	str	r3, [sp, #56]	; 0x38
 8006296:	2d00      	cmp	r5, #0
 8006298:	d108      	bne.n	80062ac <_dtoa_r+0x31c>
 800629a:	9808      	ldr	r0, [sp, #32]
 800629c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800629e:	0032      	movs	r2, r6
 80062a0:	003b      	movs	r3, r7
 80062a2:	f7fa fcd7 	bl	8000c54 <__aeabi_ddiv>
 80062a6:	9008      	str	r0, [sp, #32]
 80062a8:	9109      	str	r1, [sp, #36]	; 0x24
 80062aa:	e05a      	b.n	8006362 <_dtoa_r+0x3d2>
 80062ac:	2301      	movs	r3, #1
 80062ae:	421d      	tst	r5, r3
 80062b0:	d009      	beq.n	80062c6 <_dtoa_r+0x336>
 80062b2:	18e4      	adds	r4, r4, r3
 80062b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062b6:	0030      	movs	r0, r6
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	0039      	movs	r1, r7
 80062be:	f7fb f8c3 	bl	8001448 <__aeabi_dmul>
 80062c2:	0006      	movs	r6, r0
 80062c4:	000f      	movs	r7, r1
 80062c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c8:	106d      	asrs	r5, r5, #1
 80062ca:	3308      	adds	r3, #8
 80062cc:	e7e2      	b.n	8006294 <_dtoa_r+0x304>
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	08009836 	.word	0x08009836
 80062d4:	0800984d 	.word	0x0800984d
 80062d8:	7ff00000 	.word	0x7ff00000
 80062dc:	0000270f 	.word	0x0000270f
 80062e0:	08009832 	.word	0x08009832
 80062e4:	08009835 	.word	0x08009835
 80062e8:	08009800 	.word	0x08009800
 80062ec:	08009801 	.word	0x08009801
 80062f0:	3ff00000 	.word	0x3ff00000
 80062f4:	fffffc01 	.word	0xfffffc01
 80062f8:	3ff80000 	.word	0x3ff80000
 80062fc:	636f4361 	.word	0x636f4361
 8006300:	3fd287a7 	.word	0x3fd287a7
 8006304:	8b60c8b3 	.word	0x8b60c8b3
 8006308:	3fc68a28 	.word	0x3fc68a28
 800630c:	509f79fb 	.word	0x509f79fb
 8006310:	3fd34413 	.word	0x3fd34413
 8006314:	08009938 	.word	0x08009938
 8006318:	00000432 	.word	0x00000432
 800631c:	00000412 	.word	0x00000412
 8006320:	fe100000 	.word	0xfe100000
 8006324:	080098a5 	.word	0x080098a5
 8006328:	08009910 	.word	0x08009910
 800632c:	9b03      	ldr	r3, [sp, #12]
 800632e:	2402      	movs	r4, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d016      	beq.n	8006362 <_dtoa_r+0x3d2>
 8006334:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006336:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006338:	220f      	movs	r2, #15
 800633a:	425d      	negs	r5, r3
 800633c:	402a      	ands	r2, r5
 800633e:	4bdd      	ldr	r3, [pc, #884]	; (80066b4 <_dtoa_r+0x724>)
 8006340:	00d2      	lsls	r2, r2, #3
 8006342:	189b      	adds	r3, r3, r2
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f7fb f87e 	bl	8001448 <__aeabi_dmul>
 800634c:	2701      	movs	r7, #1
 800634e:	2300      	movs	r3, #0
 8006350:	9008      	str	r0, [sp, #32]
 8006352:	9109      	str	r1, [sp, #36]	; 0x24
 8006354:	4ed8      	ldr	r6, [pc, #864]	; (80066b8 <_dtoa_r+0x728>)
 8006356:	112d      	asrs	r5, r5, #4
 8006358:	2d00      	cmp	r5, #0
 800635a:	d000      	beq.n	800635e <_dtoa_r+0x3ce>
 800635c:	e091      	b.n	8006482 <_dtoa_r+0x4f2>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1a1      	bne.n	80062a6 <_dtoa_r+0x316>
 8006362:	9e08      	ldr	r6, [sp, #32]
 8006364:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006366:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006368:	2b00      	cmp	r3, #0
 800636a:	d100      	bne.n	800636e <_dtoa_r+0x3de>
 800636c:	e094      	b.n	8006498 <_dtoa_r+0x508>
 800636e:	2200      	movs	r2, #0
 8006370:	0030      	movs	r0, r6
 8006372:	0039      	movs	r1, r7
 8006374:	4bd1      	ldr	r3, [pc, #836]	; (80066bc <_dtoa_r+0x72c>)
 8006376:	f7fa f875 	bl	8000464 <__aeabi_dcmplt>
 800637a:	2800      	cmp	r0, #0
 800637c:	d100      	bne.n	8006380 <_dtoa_r+0x3f0>
 800637e:	e08b      	b.n	8006498 <_dtoa_r+0x508>
 8006380:	9b07      	ldr	r3, [sp, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d100      	bne.n	8006388 <_dtoa_r+0x3f8>
 8006386:	e087      	b.n	8006498 <_dtoa_r+0x508>
 8006388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	dd45      	ble.n	800641a <_dtoa_r+0x48a>
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	3b01      	subs	r3, #1
 8006394:	930e      	str	r3, [sp, #56]	; 0x38
 8006396:	0030      	movs	r0, r6
 8006398:	4bc9      	ldr	r3, [pc, #804]	; (80066c0 <_dtoa_r+0x730>)
 800639a:	0039      	movs	r1, r7
 800639c:	f7fb f854 	bl	8001448 <__aeabi_dmul>
 80063a0:	9008      	str	r0, [sp, #32]
 80063a2:	9109      	str	r1, [sp, #36]	; 0x24
 80063a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a6:	3401      	adds	r4, #1
 80063a8:	0020      	movs	r0, r4
 80063aa:	9e08      	ldr	r6, [sp, #32]
 80063ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80063ae:	9312      	str	r3, [sp, #72]	; 0x48
 80063b0:	f7fb fee2 	bl	8002178 <__aeabi_i2d>
 80063b4:	0032      	movs	r2, r6
 80063b6:	003b      	movs	r3, r7
 80063b8:	f7fb f846 	bl	8001448 <__aeabi_dmul>
 80063bc:	2200      	movs	r2, #0
 80063be:	4bc1      	ldr	r3, [pc, #772]	; (80066c4 <_dtoa_r+0x734>)
 80063c0:	f7fa f8e8 	bl	8000594 <__aeabi_dadd>
 80063c4:	4ac0      	ldr	r2, [pc, #768]	; (80066c8 <_dtoa_r+0x738>)
 80063c6:	9014      	str	r0, [sp, #80]	; 0x50
 80063c8:	9115      	str	r1, [sp, #84]	; 0x54
 80063ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80063ce:	4694      	mov	ip, r2
 80063d0:	9308      	str	r3, [sp, #32]
 80063d2:	9409      	str	r4, [sp, #36]	; 0x24
 80063d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063d6:	4463      	add	r3, ip
 80063d8:	9318      	str	r3, [sp, #96]	; 0x60
 80063da:	9309      	str	r3, [sp, #36]	; 0x24
 80063dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d15e      	bne.n	80064a0 <_dtoa_r+0x510>
 80063e2:	2200      	movs	r2, #0
 80063e4:	4bb9      	ldr	r3, [pc, #740]	; (80066cc <_dtoa_r+0x73c>)
 80063e6:	0030      	movs	r0, r6
 80063e8:	0039      	movs	r1, r7
 80063ea:	f7fb faef 	bl	80019cc <__aeabi_dsub>
 80063ee:	9a08      	ldr	r2, [sp, #32]
 80063f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80063f2:	0004      	movs	r4, r0
 80063f4:	000d      	movs	r5, r1
 80063f6:	f7fa f849 	bl	800048c <__aeabi_dcmpgt>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d000      	beq.n	8006400 <_dtoa_r+0x470>
 80063fe:	e2b3      	b.n	8006968 <_dtoa_r+0x9d8>
 8006400:	48b3      	ldr	r0, [pc, #716]	; (80066d0 <_dtoa_r+0x740>)
 8006402:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006404:	4684      	mov	ip, r0
 8006406:	4461      	add	r1, ip
 8006408:	000b      	movs	r3, r1
 800640a:	0020      	movs	r0, r4
 800640c:	0029      	movs	r1, r5
 800640e:	9a08      	ldr	r2, [sp, #32]
 8006410:	f7fa f828 	bl	8000464 <__aeabi_dcmplt>
 8006414:	2800      	cmp	r0, #0
 8006416:	d000      	beq.n	800641a <_dtoa_r+0x48a>
 8006418:	e2a3      	b.n	8006962 <_dtoa_r+0x9d2>
 800641a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800641c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800641e:	9308      	str	r3, [sp, #32]
 8006420:	9409      	str	r4, [sp, #36]	; 0x24
 8006422:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006424:	2b00      	cmp	r3, #0
 8006426:	da00      	bge.n	800642a <_dtoa_r+0x49a>
 8006428:	e179      	b.n	800671e <_dtoa_r+0x78e>
 800642a:	9a03      	ldr	r2, [sp, #12]
 800642c:	2a0e      	cmp	r2, #14
 800642e:	dd00      	ble.n	8006432 <_dtoa_r+0x4a2>
 8006430:	e175      	b.n	800671e <_dtoa_r+0x78e>
 8006432:	4ba0      	ldr	r3, [pc, #640]	; (80066b4 <_dtoa_r+0x724>)
 8006434:	00d2      	lsls	r2, r2, #3
 8006436:	189b      	adds	r3, r3, r2
 8006438:	681e      	ldr	r6, [r3, #0]
 800643a:	685f      	ldr	r7, [r3, #4]
 800643c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800643e:	2b00      	cmp	r3, #0
 8006440:	db00      	blt.n	8006444 <_dtoa_r+0x4b4>
 8006442:	e0e5      	b.n	8006610 <_dtoa_r+0x680>
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd00      	ble.n	800644c <_dtoa_r+0x4bc>
 800644a:	e0e1      	b.n	8006610 <_dtoa_r+0x680>
 800644c:	d000      	beq.n	8006450 <_dtoa_r+0x4c0>
 800644e:	e288      	b.n	8006962 <_dtoa_r+0x9d2>
 8006450:	2200      	movs	r2, #0
 8006452:	0030      	movs	r0, r6
 8006454:	0039      	movs	r1, r7
 8006456:	4b9d      	ldr	r3, [pc, #628]	; (80066cc <_dtoa_r+0x73c>)
 8006458:	f7fa fff6 	bl	8001448 <__aeabi_dmul>
 800645c:	9a08      	ldr	r2, [sp, #32]
 800645e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006460:	f7fa f81e 	bl	80004a0 <__aeabi_dcmpge>
 8006464:	9e07      	ldr	r6, [sp, #28]
 8006466:	0037      	movs	r7, r6
 8006468:	2800      	cmp	r0, #0
 800646a:	d000      	beq.n	800646e <_dtoa_r+0x4de>
 800646c:	e25f      	b.n	800692e <_dtoa_r+0x99e>
 800646e:	9b06      	ldr	r3, [sp, #24]
 8006470:	9a06      	ldr	r2, [sp, #24]
 8006472:	3301      	adds	r3, #1
 8006474:	9308      	str	r3, [sp, #32]
 8006476:	2331      	movs	r3, #49	; 0x31
 8006478:	7013      	strb	r3, [r2, #0]
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	3301      	adds	r3, #1
 800647e:	9303      	str	r3, [sp, #12]
 8006480:	e25a      	b.n	8006938 <_dtoa_r+0x9a8>
 8006482:	423d      	tst	r5, r7
 8006484:	d005      	beq.n	8006492 <_dtoa_r+0x502>
 8006486:	6832      	ldr	r2, [r6, #0]
 8006488:	6873      	ldr	r3, [r6, #4]
 800648a:	f7fa ffdd 	bl	8001448 <__aeabi_dmul>
 800648e:	003b      	movs	r3, r7
 8006490:	3401      	adds	r4, #1
 8006492:	106d      	asrs	r5, r5, #1
 8006494:	3608      	adds	r6, #8
 8006496:	e75f      	b.n	8006358 <_dtoa_r+0x3c8>
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	930e      	str	r3, [sp, #56]	; 0x38
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	e783      	b.n	80063a8 <_dtoa_r+0x418>
 80064a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064a2:	4b84      	ldr	r3, [pc, #528]	; (80066b4 <_dtoa_r+0x724>)
 80064a4:	3a01      	subs	r2, #1
 80064a6:	00d2      	lsls	r2, r2, #3
 80064a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064aa:	189b      	adds	r3, r3, r2
 80064ac:	9c08      	ldr	r4, [sp, #32]
 80064ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d051      	beq.n	800655c <_dtoa_r+0x5cc>
 80064b8:	2000      	movs	r0, #0
 80064ba:	4986      	ldr	r1, [pc, #536]	; (80066d4 <_dtoa_r+0x744>)
 80064bc:	f7fa fbca 	bl	8000c54 <__aeabi_ddiv>
 80064c0:	0022      	movs	r2, r4
 80064c2:	002b      	movs	r3, r5
 80064c4:	f7fb fa82 	bl	80019cc <__aeabi_dsub>
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	0004      	movs	r4, r0
 80064cc:	4694      	mov	ip, r2
 80064ce:	000d      	movs	r5, r1
 80064d0:	9b06      	ldr	r3, [sp, #24]
 80064d2:	9314      	str	r3, [sp, #80]	; 0x50
 80064d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064d6:	4463      	add	r3, ip
 80064d8:	9318      	str	r3, [sp, #96]	; 0x60
 80064da:	0039      	movs	r1, r7
 80064dc:	0030      	movs	r0, r6
 80064de:	f7fb fe15 	bl	800210c <__aeabi_d2iz>
 80064e2:	9012      	str	r0, [sp, #72]	; 0x48
 80064e4:	f7fb fe48 	bl	8002178 <__aeabi_i2d>
 80064e8:	0002      	movs	r2, r0
 80064ea:	000b      	movs	r3, r1
 80064ec:	0030      	movs	r0, r6
 80064ee:	0039      	movs	r1, r7
 80064f0:	f7fb fa6c 	bl	80019cc <__aeabi_dsub>
 80064f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064f8:	3301      	adds	r3, #1
 80064fa:	9308      	str	r3, [sp, #32]
 80064fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064fe:	0006      	movs	r6, r0
 8006500:	3330      	adds	r3, #48	; 0x30
 8006502:	7013      	strb	r3, [r2, #0]
 8006504:	0022      	movs	r2, r4
 8006506:	002b      	movs	r3, r5
 8006508:	000f      	movs	r7, r1
 800650a:	f7f9 ffab 	bl	8000464 <__aeabi_dcmplt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d174      	bne.n	80065fc <_dtoa_r+0x66c>
 8006512:	0032      	movs	r2, r6
 8006514:	003b      	movs	r3, r7
 8006516:	2000      	movs	r0, #0
 8006518:	4968      	ldr	r1, [pc, #416]	; (80066bc <_dtoa_r+0x72c>)
 800651a:	f7fb fa57 	bl	80019cc <__aeabi_dsub>
 800651e:	0022      	movs	r2, r4
 8006520:	002b      	movs	r3, r5
 8006522:	f7f9 ff9f 	bl	8000464 <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	d000      	beq.n	800652c <_dtoa_r+0x59c>
 800652a:	e0d7      	b.n	80066dc <_dtoa_r+0x74c>
 800652c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800652e:	9a08      	ldr	r2, [sp, #32]
 8006530:	4293      	cmp	r3, r2
 8006532:	d100      	bne.n	8006536 <_dtoa_r+0x5a6>
 8006534:	e771      	b.n	800641a <_dtoa_r+0x48a>
 8006536:	2200      	movs	r2, #0
 8006538:	0020      	movs	r0, r4
 800653a:	0029      	movs	r1, r5
 800653c:	4b60      	ldr	r3, [pc, #384]	; (80066c0 <_dtoa_r+0x730>)
 800653e:	f7fa ff83 	bl	8001448 <__aeabi_dmul>
 8006542:	4b5f      	ldr	r3, [pc, #380]	; (80066c0 <_dtoa_r+0x730>)
 8006544:	0004      	movs	r4, r0
 8006546:	000d      	movs	r5, r1
 8006548:	0030      	movs	r0, r6
 800654a:	0039      	movs	r1, r7
 800654c:	2200      	movs	r2, #0
 800654e:	f7fa ff7b 	bl	8001448 <__aeabi_dmul>
 8006552:	9b08      	ldr	r3, [sp, #32]
 8006554:	0006      	movs	r6, r0
 8006556:	000f      	movs	r7, r1
 8006558:	9314      	str	r3, [sp, #80]	; 0x50
 800655a:	e7be      	b.n	80064da <_dtoa_r+0x54a>
 800655c:	0020      	movs	r0, r4
 800655e:	0029      	movs	r1, r5
 8006560:	f7fa ff72 	bl	8001448 <__aeabi_dmul>
 8006564:	9a06      	ldr	r2, [sp, #24]
 8006566:	9b06      	ldr	r3, [sp, #24]
 8006568:	4694      	mov	ip, r2
 800656a:	9308      	str	r3, [sp, #32]
 800656c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800656e:	9014      	str	r0, [sp, #80]	; 0x50
 8006570:	9115      	str	r1, [sp, #84]	; 0x54
 8006572:	4463      	add	r3, ip
 8006574:	9319      	str	r3, [sp, #100]	; 0x64
 8006576:	0030      	movs	r0, r6
 8006578:	0039      	movs	r1, r7
 800657a:	f7fb fdc7 	bl	800210c <__aeabi_d2iz>
 800657e:	9018      	str	r0, [sp, #96]	; 0x60
 8006580:	f7fb fdfa 	bl	8002178 <__aeabi_i2d>
 8006584:	0002      	movs	r2, r0
 8006586:	000b      	movs	r3, r1
 8006588:	0030      	movs	r0, r6
 800658a:	0039      	movs	r1, r7
 800658c:	f7fb fa1e 	bl	80019cc <__aeabi_dsub>
 8006590:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006592:	9b08      	ldr	r3, [sp, #32]
 8006594:	3630      	adds	r6, #48	; 0x30
 8006596:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006598:	701e      	strb	r6, [r3, #0]
 800659a:	3301      	adds	r3, #1
 800659c:	0004      	movs	r4, r0
 800659e:	000d      	movs	r5, r1
 80065a0:	9308      	str	r3, [sp, #32]
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d12d      	bne.n	8006602 <_dtoa_r+0x672>
 80065a6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80065a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80065aa:	9a06      	ldr	r2, [sp, #24]
 80065ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ae:	4694      	mov	ip, r2
 80065b0:	4463      	add	r3, ip
 80065b2:	2200      	movs	r2, #0
 80065b4:	9308      	str	r3, [sp, #32]
 80065b6:	4b47      	ldr	r3, [pc, #284]	; (80066d4 <_dtoa_r+0x744>)
 80065b8:	f7f9 ffec 	bl	8000594 <__aeabi_dadd>
 80065bc:	0002      	movs	r2, r0
 80065be:	000b      	movs	r3, r1
 80065c0:	0020      	movs	r0, r4
 80065c2:	0029      	movs	r1, r5
 80065c4:	f7f9 ff62 	bl	800048c <__aeabi_dcmpgt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d000      	beq.n	80065ce <_dtoa_r+0x63e>
 80065cc:	e086      	b.n	80066dc <_dtoa_r+0x74c>
 80065ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065d2:	2000      	movs	r0, #0
 80065d4:	493f      	ldr	r1, [pc, #252]	; (80066d4 <_dtoa_r+0x744>)
 80065d6:	f7fb f9f9 	bl	80019cc <__aeabi_dsub>
 80065da:	0002      	movs	r2, r0
 80065dc:	000b      	movs	r3, r1
 80065de:	0020      	movs	r0, r4
 80065e0:	0029      	movs	r1, r5
 80065e2:	f7f9 ff3f 	bl	8000464 <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d100      	bne.n	80065ec <_dtoa_r+0x65c>
 80065ea:	e716      	b.n	800641a <_dtoa_r+0x48a>
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	001a      	movs	r2, r3
 80065f0:	3a01      	subs	r2, #1
 80065f2:	9208      	str	r2, [sp, #32]
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	2a30      	cmp	r2, #48	; 0x30
 80065f8:	d0f8      	beq.n	80065ec <_dtoa_r+0x65c>
 80065fa:	9308      	str	r3, [sp, #32]
 80065fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	e046      	b.n	8006690 <_dtoa_r+0x700>
 8006602:	2200      	movs	r2, #0
 8006604:	4b2e      	ldr	r3, [pc, #184]	; (80066c0 <_dtoa_r+0x730>)
 8006606:	f7fa ff1f 	bl	8001448 <__aeabi_dmul>
 800660a:	0006      	movs	r6, r0
 800660c:	000f      	movs	r7, r1
 800660e:	e7b2      	b.n	8006576 <_dtoa_r+0x5e6>
 8006610:	9b06      	ldr	r3, [sp, #24]
 8006612:	9a06      	ldr	r2, [sp, #24]
 8006614:	930a      	str	r3, [sp, #40]	; 0x28
 8006616:	9b07      	ldr	r3, [sp, #28]
 8006618:	9c08      	ldr	r4, [sp, #32]
 800661a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800661c:	3b01      	subs	r3, #1
 800661e:	189b      	adds	r3, r3, r2
 8006620:	930b      	str	r3, [sp, #44]	; 0x2c
 8006622:	0032      	movs	r2, r6
 8006624:	003b      	movs	r3, r7
 8006626:	0020      	movs	r0, r4
 8006628:	0029      	movs	r1, r5
 800662a:	f7fa fb13 	bl	8000c54 <__aeabi_ddiv>
 800662e:	f7fb fd6d 	bl	800210c <__aeabi_d2iz>
 8006632:	9007      	str	r0, [sp, #28]
 8006634:	f7fb fda0 	bl	8002178 <__aeabi_i2d>
 8006638:	0032      	movs	r2, r6
 800663a:	003b      	movs	r3, r7
 800663c:	f7fa ff04 	bl	8001448 <__aeabi_dmul>
 8006640:	0002      	movs	r2, r0
 8006642:	000b      	movs	r3, r1
 8006644:	0020      	movs	r0, r4
 8006646:	0029      	movs	r1, r5
 8006648:	f7fb f9c0 	bl	80019cc <__aeabi_dsub>
 800664c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664e:	001a      	movs	r2, r3
 8006650:	3201      	adds	r2, #1
 8006652:	920a      	str	r2, [sp, #40]	; 0x28
 8006654:	9208      	str	r2, [sp, #32]
 8006656:	9a07      	ldr	r2, [sp, #28]
 8006658:	3230      	adds	r2, #48	; 0x30
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800665e:	429a      	cmp	r2, r3
 8006660:	d14f      	bne.n	8006702 <_dtoa_r+0x772>
 8006662:	0002      	movs	r2, r0
 8006664:	000b      	movs	r3, r1
 8006666:	f7f9 ff95 	bl	8000594 <__aeabi_dadd>
 800666a:	0032      	movs	r2, r6
 800666c:	003b      	movs	r3, r7
 800666e:	0004      	movs	r4, r0
 8006670:	000d      	movs	r5, r1
 8006672:	f7f9 ff0b 	bl	800048c <__aeabi_dcmpgt>
 8006676:	2800      	cmp	r0, #0
 8006678:	d12e      	bne.n	80066d8 <_dtoa_r+0x748>
 800667a:	0032      	movs	r2, r6
 800667c:	003b      	movs	r3, r7
 800667e:	0020      	movs	r0, r4
 8006680:	0029      	movs	r1, r5
 8006682:	f7f9 fee9 	bl	8000458 <__aeabi_dcmpeq>
 8006686:	2800      	cmp	r0, #0
 8006688:	d002      	beq.n	8006690 <_dtoa_r+0x700>
 800668a:	9b07      	ldr	r3, [sp, #28]
 800668c:	07de      	lsls	r6, r3, #31
 800668e:	d423      	bmi.n	80066d8 <_dtoa_r+0x748>
 8006690:	9905      	ldr	r1, [sp, #20]
 8006692:	9804      	ldr	r0, [sp, #16]
 8006694:	f000 fbd6 	bl	8006e44 <_Bfree>
 8006698:	2300      	movs	r3, #0
 800669a:	9a08      	ldr	r2, [sp, #32]
 800669c:	7013      	strb	r3, [r2, #0]
 800669e:	9b03      	ldr	r3, [sp, #12]
 80066a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066a2:	3301      	adds	r3, #1
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d100      	bne.n	80066ae <_dtoa_r+0x71e>
 80066ac:	e4ba      	b.n	8006024 <_dtoa_r+0x94>
 80066ae:	9a08      	ldr	r2, [sp, #32]
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e4b7      	b.n	8006024 <_dtoa_r+0x94>
 80066b4:	08009938 	.word	0x08009938
 80066b8:	08009910 	.word	0x08009910
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	40240000 	.word	0x40240000
 80066c4:	401c0000 	.word	0x401c0000
 80066c8:	fcc00000 	.word	0xfcc00000
 80066cc:	40140000 	.word	0x40140000
 80066d0:	7cc00000 	.word	0x7cc00000
 80066d4:	3fe00000 	.word	0x3fe00000
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	930e      	str	r3, [sp, #56]	; 0x38
 80066dc:	9b08      	ldr	r3, [sp, #32]
 80066de:	9308      	str	r3, [sp, #32]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	2a39      	cmp	r2, #57	; 0x39
 80066e6:	d108      	bne.n	80066fa <_dtoa_r+0x76a>
 80066e8:	9a06      	ldr	r2, [sp, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d1f7      	bne.n	80066de <_dtoa_r+0x74e>
 80066ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066f0:	9906      	ldr	r1, [sp, #24]
 80066f2:	3201      	adds	r2, #1
 80066f4:	920e      	str	r2, [sp, #56]	; 0x38
 80066f6:	2230      	movs	r2, #48	; 0x30
 80066f8:	700a      	strb	r2, [r1, #0]
 80066fa:	781a      	ldrb	r2, [r3, #0]
 80066fc:	3201      	adds	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	e77c      	b.n	80065fc <_dtoa_r+0x66c>
 8006702:	2200      	movs	r2, #0
 8006704:	4ba9      	ldr	r3, [pc, #676]	; (80069ac <_dtoa_r+0xa1c>)
 8006706:	f7fa fe9f 	bl	8001448 <__aeabi_dmul>
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	0004      	movs	r4, r0
 8006710:	000d      	movs	r5, r1
 8006712:	f7f9 fea1 	bl	8000458 <__aeabi_dcmpeq>
 8006716:	2800      	cmp	r0, #0
 8006718:	d100      	bne.n	800671c <_dtoa_r+0x78c>
 800671a:	e782      	b.n	8006622 <_dtoa_r+0x692>
 800671c:	e7b8      	b.n	8006690 <_dtoa_r+0x700>
 800671e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006720:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006722:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006724:	2f00      	cmp	r7, #0
 8006726:	d012      	beq.n	800674e <_dtoa_r+0x7be>
 8006728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800672a:	2a01      	cmp	r2, #1
 800672c:	dc6e      	bgt.n	800680c <_dtoa_r+0x87c>
 800672e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006730:	2a00      	cmp	r2, #0
 8006732:	d065      	beq.n	8006800 <_dtoa_r+0x870>
 8006734:	4a9e      	ldr	r2, [pc, #632]	; (80069b0 <_dtoa_r+0xa20>)
 8006736:	189b      	adds	r3, r3, r2
 8006738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800673a:	2101      	movs	r1, #1
 800673c:	18d2      	adds	r2, r2, r3
 800673e:	920a      	str	r2, [sp, #40]	; 0x28
 8006740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006742:	9804      	ldr	r0, [sp, #16]
 8006744:	18d3      	adds	r3, r2, r3
 8006746:	930c      	str	r3, [sp, #48]	; 0x30
 8006748:	f000 fc78 	bl	800703c <__i2b>
 800674c:	0007      	movs	r7, r0
 800674e:	2c00      	cmp	r4, #0
 8006750:	d00e      	beq.n	8006770 <_dtoa_r+0x7e0>
 8006752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	dd0b      	ble.n	8006770 <_dtoa_r+0x7e0>
 8006758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800675a:	0023      	movs	r3, r4
 800675c:	4294      	cmp	r4, r2
 800675e:	dd00      	ble.n	8006762 <_dtoa_r+0x7d2>
 8006760:	0013      	movs	r3, r2
 8006762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006764:	1ae4      	subs	r4, r4, r3
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	920a      	str	r2, [sp, #40]	; 0x28
 800676a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	930c      	str	r3, [sp, #48]	; 0x30
 8006770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01e      	beq.n	80067b4 <_dtoa_r+0x824>
 8006776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d05c      	beq.n	8006836 <_dtoa_r+0x8a6>
 800677c:	2d00      	cmp	r5, #0
 800677e:	dd10      	ble.n	80067a2 <_dtoa_r+0x812>
 8006780:	0039      	movs	r1, r7
 8006782:	002a      	movs	r2, r5
 8006784:	9804      	ldr	r0, [sp, #16]
 8006786:	f000 fd21 	bl	80071cc <__pow5mult>
 800678a:	9a05      	ldr	r2, [sp, #20]
 800678c:	0001      	movs	r1, r0
 800678e:	0007      	movs	r7, r0
 8006790:	9804      	ldr	r0, [sp, #16]
 8006792:	f000 fc6b 	bl	800706c <__multiply>
 8006796:	0006      	movs	r6, r0
 8006798:	9905      	ldr	r1, [sp, #20]
 800679a:	9804      	ldr	r0, [sp, #16]
 800679c:	f000 fb52 	bl	8006e44 <_Bfree>
 80067a0:	9605      	str	r6, [sp, #20]
 80067a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a4:	1b5a      	subs	r2, r3, r5
 80067a6:	42ab      	cmp	r3, r5
 80067a8:	d004      	beq.n	80067b4 <_dtoa_r+0x824>
 80067aa:	9905      	ldr	r1, [sp, #20]
 80067ac:	9804      	ldr	r0, [sp, #16]
 80067ae:	f000 fd0d 	bl	80071cc <__pow5mult>
 80067b2:	9005      	str	r0, [sp, #20]
 80067b4:	2101      	movs	r1, #1
 80067b6:	9804      	ldr	r0, [sp, #16]
 80067b8:	f000 fc40 	bl	800703c <__i2b>
 80067bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067be:	0006      	movs	r6, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dd3a      	ble.n	800683a <_dtoa_r+0x8aa>
 80067c4:	001a      	movs	r2, r3
 80067c6:	0001      	movs	r1, r0
 80067c8:	9804      	ldr	r0, [sp, #16]
 80067ca:	f000 fcff 	bl	80071cc <__pow5mult>
 80067ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067d0:	0006      	movs	r6, r0
 80067d2:	2500      	movs	r5, #0
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	dc38      	bgt.n	800684a <_dtoa_r+0x8ba>
 80067d8:	2500      	movs	r5, #0
 80067da:	9b08      	ldr	r3, [sp, #32]
 80067dc:	42ab      	cmp	r3, r5
 80067de:	d130      	bne.n	8006842 <_dtoa_r+0x8b2>
 80067e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e2:	031b      	lsls	r3, r3, #12
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	d12c      	bne.n	8006842 <_dtoa_r+0x8b2>
 80067e8:	4b72      	ldr	r3, [pc, #456]	; (80069b4 <_dtoa_r+0xa24>)
 80067ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ec:	4213      	tst	r3, r2
 80067ee:	d028      	beq.n	8006842 <_dtoa_r+0x8b2>
 80067f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f2:	3501      	adds	r5, #1
 80067f4:	3301      	adds	r3, #1
 80067f6:	930a      	str	r3, [sp, #40]	; 0x28
 80067f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fa:	3301      	adds	r3, #1
 80067fc:	930c      	str	r3, [sp, #48]	; 0x30
 80067fe:	e020      	b.n	8006842 <_dtoa_r+0x8b2>
 8006800:	2336      	movs	r3, #54	; 0x36
 8006802:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006804:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006806:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	e795      	b.n	8006738 <_dtoa_r+0x7a8>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	1e5d      	subs	r5, r3, #1
 8006810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006812:	42ab      	cmp	r3, r5
 8006814:	db07      	blt.n	8006826 <_dtoa_r+0x896>
 8006816:	1b5d      	subs	r5, r3, r5
 8006818:	9b07      	ldr	r3, [sp, #28]
 800681a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800681c:	2b00      	cmp	r3, #0
 800681e:	da8b      	bge.n	8006738 <_dtoa_r+0x7a8>
 8006820:	1ae4      	subs	r4, r4, r3
 8006822:	2300      	movs	r3, #0
 8006824:	e788      	b.n	8006738 <_dtoa_r+0x7a8>
 8006826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800682a:	1aeb      	subs	r3, r5, r3
 800682c:	18d3      	adds	r3, r2, r3
 800682e:	950d      	str	r5, [sp, #52]	; 0x34
 8006830:	9313      	str	r3, [sp, #76]	; 0x4c
 8006832:	2500      	movs	r5, #0
 8006834:	e7f0      	b.n	8006818 <_dtoa_r+0x888>
 8006836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006838:	e7b7      	b.n	80067aa <_dtoa_r+0x81a>
 800683a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800683c:	2500      	movs	r5, #0
 800683e:	2b01      	cmp	r3, #1
 8006840:	ddca      	ble.n	80067d8 <_dtoa_r+0x848>
 8006842:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006844:	2001      	movs	r0, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <_dtoa_r+0x8cc>
 800684a:	6933      	ldr	r3, [r6, #16]
 800684c:	3303      	adds	r3, #3
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	18f3      	adds	r3, r6, r3
 8006852:	6858      	ldr	r0, [r3, #4]
 8006854:	f000 fbaa 	bl	8006fac <__hi0bits>
 8006858:	2320      	movs	r3, #32
 800685a:	1a18      	subs	r0, r3, r0
 800685c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800685e:	1818      	adds	r0, r3, r0
 8006860:	0002      	movs	r2, r0
 8006862:	231f      	movs	r3, #31
 8006864:	401a      	ands	r2, r3
 8006866:	4218      	tst	r0, r3
 8006868:	d047      	beq.n	80068fa <_dtoa_r+0x96a>
 800686a:	3301      	adds	r3, #1
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	2b04      	cmp	r3, #4
 8006870:	dd3f      	ble.n	80068f2 <_dtoa_r+0x962>
 8006872:	231c      	movs	r3, #28
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006878:	18e4      	adds	r4, r4, r3
 800687a:	18d2      	adds	r2, r2, r3
 800687c:	920a      	str	r2, [sp, #40]	; 0x28
 800687e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006880:	18d3      	adds	r3, r2, r3
 8006882:	930c      	str	r3, [sp, #48]	; 0x30
 8006884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	dd05      	ble.n	8006896 <_dtoa_r+0x906>
 800688a:	001a      	movs	r2, r3
 800688c:	9905      	ldr	r1, [sp, #20]
 800688e:	9804      	ldr	r0, [sp, #16]
 8006890:	f000 fcf8 	bl	8007284 <__lshift>
 8006894:	9005      	str	r0, [sp, #20]
 8006896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006898:	2b00      	cmp	r3, #0
 800689a:	dd05      	ble.n	80068a8 <_dtoa_r+0x918>
 800689c:	0031      	movs	r1, r6
 800689e:	001a      	movs	r2, r3
 80068a0:	9804      	ldr	r0, [sp, #16]
 80068a2:	f000 fcef 	bl	8007284 <__lshift>
 80068a6:	0006      	movs	r6, r0
 80068a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d027      	beq.n	80068fe <_dtoa_r+0x96e>
 80068ae:	0031      	movs	r1, r6
 80068b0:	9805      	ldr	r0, [sp, #20]
 80068b2:	f000 fd55 	bl	8007360 <__mcmp>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	da21      	bge.n	80068fe <_dtoa_r+0x96e>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	220a      	movs	r2, #10
 80068be:	3b01      	subs	r3, #1
 80068c0:	9303      	str	r3, [sp, #12]
 80068c2:	9905      	ldr	r1, [sp, #20]
 80068c4:	2300      	movs	r3, #0
 80068c6:	9804      	ldr	r0, [sp, #16]
 80068c8:	f000 fae0 	bl	8006e8c <__multadd>
 80068cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ce:	9005      	str	r0, [sp, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d100      	bne.n	80068d6 <_dtoa_r+0x946>
 80068d4:	e15d      	b.n	8006b92 <_dtoa_r+0xc02>
 80068d6:	2300      	movs	r3, #0
 80068d8:	0039      	movs	r1, r7
 80068da:	220a      	movs	r2, #10
 80068dc:	9804      	ldr	r0, [sp, #16]
 80068de:	f000 fad5 	bl	8006e8c <__multadd>
 80068e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e4:	0007      	movs	r7, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dc49      	bgt.n	800697e <_dtoa_r+0x9ee>
 80068ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	dc0e      	bgt.n	800690e <_dtoa_r+0x97e>
 80068f0:	e045      	b.n	800697e <_dtoa_r+0x9ee>
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d0c6      	beq.n	8006884 <_dtoa_r+0x8f4>
 80068f6:	331c      	adds	r3, #28
 80068f8:	e7bd      	b.n	8006876 <_dtoa_r+0x8e6>
 80068fa:	0013      	movs	r3, r2
 80068fc:	e7fb      	b.n	80068f6 <_dtoa_r+0x966>
 80068fe:	9b07      	ldr	r3, [sp, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	dc36      	bgt.n	8006972 <_dtoa_r+0x9e2>
 8006904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006906:	2b02      	cmp	r3, #2
 8006908:	dd33      	ble.n	8006972 <_dtoa_r+0x9e2>
 800690a:	9b07      	ldr	r3, [sp, #28]
 800690c:	930b      	str	r3, [sp, #44]	; 0x2c
 800690e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <_dtoa_r+0x99e>
 8006914:	0031      	movs	r1, r6
 8006916:	2205      	movs	r2, #5
 8006918:	9804      	ldr	r0, [sp, #16]
 800691a:	f000 fab7 	bl	8006e8c <__multadd>
 800691e:	0006      	movs	r6, r0
 8006920:	0001      	movs	r1, r0
 8006922:	9805      	ldr	r0, [sp, #20]
 8006924:	f000 fd1c 	bl	8007360 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dd00      	ble.n	800692e <_dtoa_r+0x99e>
 800692c:	e59f      	b.n	800646e <_dtoa_r+0x4de>
 800692e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006930:	43db      	mvns	r3, r3
 8006932:	9303      	str	r3, [sp, #12]
 8006934:	9b06      	ldr	r3, [sp, #24]
 8006936:	9308      	str	r3, [sp, #32]
 8006938:	2500      	movs	r5, #0
 800693a:	0031      	movs	r1, r6
 800693c:	9804      	ldr	r0, [sp, #16]
 800693e:	f000 fa81 	bl	8006e44 <_Bfree>
 8006942:	2f00      	cmp	r7, #0
 8006944:	d100      	bne.n	8006948 <_dtoa_r+0x9b8>
 8006946:	e6a3      	b.n	8006690 <_dtoa_r+0x700>
 8006948:	2d00      	cmp	r5, #0
 800694a:	d005      	beq.n	8006958 <_dtoa_r+0x9c8>
 800694c:	42bd      	cmp	r5, r7
 800694e:	d003      	beq.n	8006958 <_dtoa_r+0x9c8>
 8006950:	0029      	movs	r1, r5
 8006952:	9804      	ldr	r0, [sp, #16]
 8006954:	f000 fa76 	bl	8006e44 <_Bfree>
 8006958:	0039      	movs	r1, r7
 800695a:	9804      	ldr	r0, [sp, #16]
 800695c:	f000 fa72 	bl	8006e44 <_Bfree>
 8006960:	e696      	b.n	8006690 <_dtoa_r+0x700>
 8006962:	2600      	movs	r6, #0
 8006964:	0037      	movs	r7, r6
 8006966:	e7e2      	b.n	800692e <_dtoa_r+0x99e>
 8006968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800696a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800696c:	9303      	str	r3, [sp, #12]
 800696e:	0037      	movs	r7, r6
 8006970:	e57d      	b.n	800646e <_dtoa_r+0x4de>
 8006972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d100      	bne.n	800697a <_dtoa_r+0x9ea>
 8006978:	e0c3      	b.n	8006b02 <_dtoa_r+0xb72>
 800697a:	9b07      	ldr	r3, [sp, #28]
 800697c:	930b      	str	r3, [sp, #44]	; 0x2c
 800697e:	2c00      	cmp	r4, #0
 8006980:	dd05      	ble.n	800698e <_dtoa_r+0x9fe>
 8006982:	0039      	movs	r1, r7
 8006984:	0022      	movs	r2, r4
 8006986:	9804      	ldr	r0, [sp, #16]
 8006988:	f000 fc7c 	bl	8007284 <__lshift>
 800698c:	0007      	movs	r7, r0
 800698e:	0038      	movs	r0, r7
 8006990:	2d00      	cmp	r5, #0
 8006992:	d024      	beq.n	80069de <_dtoa_r+0xa4e>
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	9804      	ldr	r0, [sp, #16]
 8006998:	f000 fa10 	bl	8006dbc <_Balloc>
 800699c:	1e04      	subs	r4, r0, #0
 800699e:	d111      	bne.n	80069c4 <_dtoa_r+0xa34>
 80069a0:	0022      	movs	r2, r4
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <_dtoa_r+0xa28>)
 80069a4:	4805      	ldr	r0, [pc, #20]	; (80069bc <_dtoa_r+0xa2c>)
 80069a6:	4906      	ldr	r1, [pc, #24]	; (80069c0 <_dtoa_r+0xa30>)
 80069a8:	f7ff fb07 	bl	8005fba <_dtoa_r+0x2a>
 80069ac:	40240000 	.word	0x40240000
 80069b0:	00000433 	.word	0x00000433
 80069b4:	7ff00000 	.word	0x7ff00000
 80069b8:	080098a5 	.word	0x080098a5
 80069bc:	0800984d 	.word	0x0800984d
 80069c0:	000002ef 	.word	0x000002ef
 80069c4:	0039      	movs	r1, r7
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	310c      	adds	r1, #12
 80069ca:	3202      	adds	r2, #2
 80069cc:	0092      	lsls	r2, r2, #2
 80069ce:	300c      	adds	r0, #12
 80069d0:	f001 ffb2 	bl	8008938 <memcpy>
 80069d4:	2201      	movs	r2, #1
 80069d6:	0021      	movs	r1, r4
 80069d8:	9804      	ldr	r0, [sp, #16]
 80069da:	f000 fc53 	bl	8007284 <__lshift>
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069e2:	9307      	str	r3, [sp, #28]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	189b      	adds	r3, r3, r2
 80069e8:	2201      	movs	r2, #1
 80069ea:	003d      	movs	r5, r7
 80069ec:	0007      	movs	r7, r0
 80069ee:	930e      	str	r3, [sp, #56]	; 0x38
 80069f0:	9b08      	ldr	r3, [sp, #32]
 80069f2:	4013      	ands	r3, r2
 80069f4:	930d      	str	r3, [sp, #52]	; 0x34
 80069f6:	0031      	movs	r1, r6
 80069f8:	9805      	ldr	r0, [sp, #20]
 80069fa:	f7ff fa39 	bl	8005e70 <quorem>
 80069fe:	0029      	movs	r1, r5
 8006a00:	0004      	movs	r4, r0
 8006a02:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a04:	9805      	ldr	r0, [sp, #20]
 8006a06:	f000 fcab 	bl	8007360 <__mcmp>
 8006a0a:	003a      	movs	r2, r7
 8006a0c:	900c      	str	r0, [sp, #48]	; 0x30
 8006a0e:	0031      	movs	r1, r6
 8006a10:	9804      	ldr	r0, [sp, #16]
 8006a12:	f000 fcc1 	bl	8007398 <__mdiff>
 8006a16:	2201      	movs	r2, #1
 8006a18:	68c3      	ldr	r3, [r0, #12]
 8006a1a:	3430      	adds	r4, #48	; 0x30
 8006a1c:	9008      	str	r0, [sp, #32]
 8006a1e:	920a      	str	r2, [sp, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <_dtoa_r+0xa9e>
 8006a24:	0001      	movs	r1, r0
 8006a26:	9805      	ldr	r0, [sp, #20]
 8006a28:	f000 fc9a 	bl	8007360 <__mcmp>
 8006a2c:	900a      	str	r0, [sp, #40]	; 0x28
 8006a2e:	9908      	ldr	r1, [sp, #32]
 8006a30:	9804      	ldr	r0, [sp, #16]
 8006a32:	f000 fa07 	bl	8006e44 <_Bfree>
 8006a36:	9b07      	ldr	r3, [sp, #28]
 8006a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	9308      	str	r3, [sp, #32]
 8006a3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a40:	4313      	orrs	r3, r2
 8006a42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a44:	4313      	orrs	r3, r2
 8006a46:	d109      	bne.n	8006a5c <_dtoa_r+0xacc>
 8006a48:	2c39      	cmp	r4, #57	; 0x39
 8006a4a:	d022      	beq.n	8006a92 <_dtoa_r+0xb02>
 8006a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dd01      	ble.n	8006a56 <_dtoa_r+0xac6>
 8006a52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006a54:	3431      	adds	r4, #49	; 0x31
 8006a56:	9b07      	ldr	r3, [sp, #28]
 8006a58:	701c      	strb	r4, [r3, #0]
 8006a5a:	e76e      	b.n	800693a <_dtoa_r+0x9aa>
 8006a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	db04      	blt.n	8006a6c <_dtoa_r+0xadc>
 8006a62:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a64:	4313      	orrs	r3, r2
 8006a66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	d11e      	bne.n	8006aaa <_dtoa_r+0xb1a>
 8006a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	ddf1      	ble.n	8006a56 <_dtoa_r+0xac6>
 8006a72:	9905      	ldr	r1, [sp, #20]
 8006a74:	2201      	movs	r2, #1
 8006a76:	9804      	ldr	r0, [sp, #16]
 8006a78:	f000 fc04 	bl	8007284 <__lshift>
 8006a7c:	0031      	movs	r1, r6
 8006a7e:	9005      	str	r0, [sp, #20]
 8006a80:	f000 fc6e 	bl	8007360 <__mcmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	dc02      	bgt.n	8006a8e <_dtoa_r+0xafe>
 8006a88:	d1e5      	bne.n	8006a56 <_dtoa_r+0xac6>
 8006a8a:	07e3      	lsls	r3, r4, #31
 8006a8c:	d5e3      	bpl.n	8006a56 <_dtoa_r+0xac6>
 8006a8e:	2c39      	cmp	r4, #57	; 0x39
 8006a90:	d1df      	bne.n	8006a52 <_dtoa_r+0xac2>
 8006a92:	2339      	movs	r3, #57	; 0x39
 8006a94:	9a07      	ldr	r2, [sp, #28]
 8006a96:	7013      	strb	r3, [r2, #0]
 8006a98:	9b08      	ldr	r3, [sp, #32]
 8006a9a:	9308      	str	r3, [sp, #32]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	2a39      	cmp	r2, #57	; 0x39
 8006aa2:	d063      	beq.n	8006b6c <_dtoa_r+0xbdc>
 8006aa4:	3201      	adds	r2, #1
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e747      	b.n	800693a <_dtoa_r+0x9aa>
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd03      	ble.n	8006ab8 <_dtoa_r+0xb28>
 8006ab0:	2c39      	cmp	r4, #57	; 0x39
 8006ab2:	d0ee      	beq.n	8006a92 <_dtoa_r+0xb02>
 8006ab4:	3401      	adds	r4, #1
 8006ab6:	e7ce      	b.n	8006a56 <_dtoa_r+0xac6>
 8006ab8:	9b07      	ldr	r3, [sp, #28]
 8006aba:	9a07      	ldr	r2, [sp, #28]
 8006abc:	701c      	strb	r4, [r3, #0]
 8006abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d03e      	beq.n	8006b42 <_dtoa_r+0xbb2>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	220a      	movs	r2, #10
 8006ac8:	9905      	ldr	r1, [sp, #20]
 8006aca:	9804      	ldr	r0, [sp, #16]
 8006acc:	f000 f9de 	bl	8006e8c <__multadd>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9005      	str	r0, [sp, #20]
 8006ad4:	220a      	movs	r2, #10
 8006ad6:	0029      	movs	r1, r5
 8006ad8:	9804      	ldr	r0, [sp, #16]
 8006ada:	42bd      	cmp	r5, r7
 8006adc:	d106      	bne.n	8006aec <_dtoa_r+0xb5c>
 8006ade:	f000 f9d5 	bl	8006e8c <__multadd>
 8006ae2:	0005      	movs	r5, r0
 8006ae4:	0007      	movs	r7, r0
 8006ae6:	9b08      	ldr	r3, [sp, #32]
 8006ae8:	9307      	str	r3, [sp, #28]
 8006aea:	e784      	b.n	80069f6 <_dtoa_r+0xa66>
 8006aec:	f000 f9ce 	bl	8006e8c <__multadd>
 8006af0:	0039      	movs	r1, r7
 8006af2:	0005      	movs	r5, r0
 8006af4:	2300      	movs	r3, #0
 8006af6:	220a      	movs	r2, #10
 8006af8:	9804      	ldr	r0, [sp, #16]
 8006afa:	f000 f9c7 	bl	8006e8c <__multadd>
 8006afe:	0007      	movs	r7, r0
 8006b00:	e7f1      	b.n	8006ae6 <_dtoa_r+0xb56>
 8006b02:	9b07      	ldr	r3, [sp, #28]
 8006b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b06:	2500      	movs	r5, #0
 8006b08:	0031      	movs	r1, r6
 8006b0a:	9805      	ldr	r0, [sp, #20]
 8006b0c:	f7ff f9b0 	bl	8005e70 <quorem>
 8006b10:	9b06      	ldr	r3, [sp, #24]
 8006b12:	3030      	adds	r0, #48	; 0x30
 8006b14:	5558      	strb	r0, [r3, r5]
 8006b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b18:	3501      	adds	r5, #1
 8006b1a:	0004      	movs	r4, r0
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dd07      	ble.n	8006b30 <_dtoa_r+0xba0>
 8006b20:	2300      	movs	r3, #0
 8006b22:	220a      	movs	r2, #10
 8006b24:	9905      	ldr	r1, [sp, #20]
 8006b26:	9804      	ldr	r0, [sp, #16]
 8006b28:	f000 f9b0 	bl	8006e8c <__multadd>
 8006b2c:	9005      	str	r0, [sp, #20]
 8006b2e:	e7eb      	b.n	8006b08 <_dtoa_r+0xb78>
 8006b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b32:	2301      	movs	r3, #1
 8006b34:	2a00      	cmp	r2, #0
 8006b36:	dd00      	ble.n	8006b3a <_dtoa_r+0xbaa>
 8006b38:	0013      	movs	r3, r2
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	9a06      	ldr	r2, [sp, #24]
 8006b3e:	18d3      	adds	r3, r2, r3
 8006b40:	9308      	str	r3, [sp, #32]
 8006b42:	9905      	ldr	r1, [sp, #20]
 8006b44:	2201      	movs	r2, #1
 8006b46:	9804      	ldr	r0, [sp, #16]
 8006b48:	f000 fb9c 	bl	8007284 <__lshift>
 8006b4c:	0031      	movs	r1, r6
 8006b4e:	9005      	str	r0, [sp, #20]
 8006b50:	f000 fc06 	bl	8007360 <__mcmp>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	dc9f      	bgt.n	8006a98 <_dtoa_r+0xb08>
 8006b58:	d101      	bne.n	8006b5e <_dtoa_r+0xbce>
 8006b5a:	07e4      	lsls	r4, r4, #31
 8006b5c:	d49c      	bmi.n	8006a98 <_dtoa_r+0xb08>
 8006b5e:	9b08      	ldr	r3, [sp, #32]
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	2a30      	cmp	r2, #48	; 0x30
 8006b68:	d0fa      	beq.n	8006b60 <_dtoa_r+0xbd0>
 8006b6a:	e6e6      	b.n	800693a <_dtoa_r+0x9aa>
 8006b6c:	9a06      	ldr	r2, [sp, #24]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d193      	bne.n	8006a9a <_dtoa_r+0xb0a>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	3301      	adds	r3, #1
 8006b76:	9303      	str	r3, [sp, #12]
 8006b78:	2331      	movs	r3, #49	; 0x31
 8006b7a:	7013      	strb	r3, [r2, #0]
 8006b7c:	e6dd      	b.n	800693a <_dtoa_r+0x9aa>
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <_dtoa_r+0xc14>)
 8006b80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b82:	9306      	str	r3, [sp, #24]
 8006b84:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <_dtoa_r+0xc18>)
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	d001      	beq.n	8006b8e <_dtoa_r+0xbfe>
 8006b8a:	f7ff fa49 	bl	8006020 <_dtoa_r+0x90>
 8006b8e:	f7ff fa49 	bl	8006024 <_dtoa_r+0x94>
 8006b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dcb6      	bgt.n	8006b06 <_dtoa_r+0xb76>
 8006b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	dd00      	ble.n	8006ba0 <_dtoa_r+0xc10>
 8006b9e:	e6b6      	b.n	800690e <_dtoa_r+0x97e>
 8006ba0:	e7b1      	b.n	8006b06 <_dtoa_r+0xb76>
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	08009829 	.word	0x08009829
 8006ba8:	08009831 	.word	0x08009831

08006bac <_free_r>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	0005      	movs	r5, r0
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d010      	beq.n	8006bd6 <_free_r+0x2a>
 8006bb4:	1f0c      	subs	r4, r1, #4
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da00      	bge.n	8006bbe <_free_r+0x12>
 8006bbc:	18e4      	adds	r4, r4, r3
 8006bbe:	0028      	movs	r0, r5
 8006bc0:	f000 f8ec 	bl	8006d9c <__malloc_lock>
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <_free_r+0x90>)
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <_free_r+0x2c>
 8006bcc:	6063      	str	r3, [r4, #4]
 8006bce:	6014      	str	r4, [r2, #0]
 8006bd0:	0028      	movs	r0, r5
 8006bd2:	f000 f8eb 	bl	8006dac <__malloc_unlock>
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d908      	bls.n	8006bee <_free_r+0x42>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	1821      	adds	r1, r4, r0
 8006be0:	428b      	cmp	r3, r1
 8006be2:	d1f3      	bne.n	8006bcc <_free_r+0x20>
 8006be4:	6819      	ldr	r1, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	1809      	adds	r1, r1, r0
 8006bea:	6021      	str	r1, [r4, #0]
 8006bec:	e7ee      	b.n	8006bcc <_free_r+0x20>
 8006bee:	001a      	movs	r2, r3
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <_free_r+0x4e>
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	d9f9      	bls.n	8006bee <_free_r+0x42>
 8006bfa:	6811      	ldr	r1, [r2, #0]
 8006bfc:	1850      	adds	r0, r2, r1
 8006bfe:	42a0      	cmp	r0, r4
 8006c00:	d10b      	bne.n	8006c1a <_free_r+0x6e>
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	1809      	adds	r1, r1, r0
 8006c06:	1850      	adds	r0, r2, r1
 8006c08:	6011      	str	r1, [r2, #0]
 8006c0a:	4283      	cmp	r3, r0
 8006c0c:	d1e0      	bne.n	8006bd0 <_free_r+0x24>
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	1841      	adds	r1, r0, r1
 8006c14:	6011      	str	r1, [r2, #0]
 8006c16:	6053      	str	r3, [r2, #4]
 8006c18:	e7da      	b.n	8006bd0 <_free_r+0x24>
 8006c1a:	42a0      	cmp	r0, r4
 8006c1c:	d902      	bls.n	8006c24 <_free_r+0x78>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	e7d5      	b.n	8006bd0 <_free_r+0x24>
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	1821      	adds	r1, r4, r0
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	d103      	bne.n	8006c34 <_free_r+0x88>
 8006c2c:	6819      	ldr	r1, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	1809      	adds	r1, r1, r0
 8006c32:	6021      	str	r1, [r4, #0]
 8006c34:	6063      	str	r3, [r4, #4]
 8006c36:	6054      	str	r4, [r2, #4]
 8006c38:	e7ca      	b.n	8006bd0 <_free_r+0x24>
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	2000081c 	.word	0x2000081c

08006c40 <malloc>:
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <malloc+0x10>)
 8006c44:	0001      	movs	r1, r0
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	f000 f826 	bl	8006c98 <_malloc_r>
 8006c4c:	bd10      	pop	{r4, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	20000064 	.word	0x20000064

08006c54 <sbrk_aligned>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	4e0f      	ldr	r6, [pc, #60]	; (8006c94 <sbrk_aligned+0x40>)
 8006c58:	000d      	movs	r5, r1
 8006c5a:	6831      	ldr	r1, [r6, #0]
 8006c5c:	0004      	movs	r4, r0
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	d102      	bne.n	8006c68 <sbrk_aligned+0x14>
 8006c62:	f001 fe57 	bl	8008914 <_sbrk_r>
 8006c66:	6030      	str	r0, [r6, #0]
 8006c68:	0029      	movs	r1, r5
 8006c6a:	0020      	movs	r0, r4
 8006c6c:	f001 fe52 	bl	8008914 <_sbrk_r>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d00a      	beq.n	8006c8a <sbrk_aligned+0x36>
 8006c74:	2303      	movs	r3, #3
 8006c76:	1cc5      	adds	r5, r0, #3
 8006c78:	439d      	bics	r5, r3
 8006c7a:	42a8      	cmp	r0, r5
 8006c7c:	d007      	beq.n	8006c8e <sbrk_aligned+0x3a>
 8006c7e:	1a29      	subs	r1, r5, r0
 8006c80:	0020      	movs	r0, r4
 8006c82:	f001 fe47 	bl	8008914 <_sbrk_r>
 8006c86:	3001      	adds	r0, #1
 8006c88:	d101      	bne.n	8006c8e <sbrk_aligned+0x3a>
 8006c8a:	2501      	movs	r5, #1
 8006c8c:	426d      	negs	r5, r5
 8006c8e:	0028      	movs	r0, r5
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	20000820 	.word	0x20000820

08006c98 <_malloc_r>:
 8006c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	1ccb      	adds	r3, r1, #3
 8006c9e:	4393      	bics	r3, r2
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	0006      	movs	r6, r0
 8006ca4:	001f      	movs	r7, r3
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d238      	bcs.n	8006d1c <_malloc_r+0x84>
 8006caa:	270c      	movs	r7, #12
 8006cac:	42b9      	cmp	r1, r7
 8006cae:	d837      	bhi.n	8006d20 <_malloc_r+0x88>
 8006cb0:	0030      	movs	r0, r6
 8006cb2:	f000 f873 	bl	8006d9c <__malloc_lock>
 8006cb6:	4b38      	ldr	r3, [pc, #224]	; (8006d98 <_malloc_r+0x100>)
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	001c      	movs	r4, r3
 8006cbe:	2c00      	cmp	r4, #0
 8006cc0:	d133      	bne.n	8006d2a <_malloc_r+0x92>
 8006cc2:	0039      	movs	r1, r7
 8006cc4:	0030      	movs	r0, r6
 8006cc6:	f7ff ffc5 	bl	8006c54 <sbrk_aligned>
 8006cca:	0004      	movs	r4, r0
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d15e      	bne.n	8006d8e <_malloc_r+0xf6>
 8006cd0:	9b00      	ldr	r3, [sp, #0]
 8006cd2:	681c      	ldr	r4, [r3, #0]
 8006cd4:	0025      	movs	r5, r4
 8006cd6:	2d00      	cmp	r5, #0
 8006cd8:	d14e      	bne.n	8006d78 <_malloc_r+0xe0>
 8006cda:	2c00      	cmp	r4, #0
 8006cdc:	d051      	beq.n	8006d82 <_malloc_r+0xea>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	0029      	movs	r1, r5
 8006ce2:	18e3      	adds	r3, r4, r3
 8006ce4:	0030      	movs	r0, r6
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	f001 fe14 	bl	8008914 <_sbrk_r>
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	4283      	cmp	r3, r0
 8006cf0:	d147      	bne.n	8006d82 <_malloc_r+0xea>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	0030      	movs	r0, r6
 8006cf6:	1aff      	subs	r7, r7, r3
 8006cf8:	0039      	movs	r1, r7
 8006cfa:	f7ff ffab 	bl	8006c54 <sbrk_aligned>
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d03f      	beq.n	8006d82 <_malloc_r+0xea>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	19db      	adds	r3, r3, r7
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	9b00      	ldr	r3, [sp, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d040      	beq.n	8006d92 <_malloc_r+0xfa>
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	42a2      	cmp	r2, r4
 8006d14:	d133      	bne.n	8006d7e <_malloc_r+0xe6>
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e014      	b.n	8006d46 <_malloc_r+0xae>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dac5      	bge.n	8006cac <_malloc_r+0x14>
 8006d20:	230c      	movs	r3, #12
 8006d22:	2500      	movs	r5, #0
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	0028      	movs	r0, r5
 8006d28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d2a:	6821      	ldr	r1, [r4, #0]
 8006d2c:	1bc9      	subs	r1, r1, r7
 8006d2e:	d420      	bmi.n	8006d72 <_malloc_r+0xda>
 8006d30:	290b      	cmp	r1, #11
 8006d32:	d918      	bls.n	8006d66 <_malloc_r+0xce>
 8006d34:	19e2      	adds	r2, r4, r7
 8006d36:	6027      	str	r7, [r4, #0]
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d112      	bne.n	8006d62 <_malloc_r+0xca>
 8006d3c:	9b00      	ldr	r3, [sp, #0]
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	6011      	str	r1, [r2, #0]
 8006d44:	6053      	str	r3, [r2, #4]
 8006d46:	0030      	movs	r0, r6
 8006d48:	0025      	movs	r5, r4
 8006d4a:	f000 f82f 	bl	8006dac <__malloc_unlock>
 8006d4e:	2207      	movs	r2, #7
 8006d50:	350b      	adds	r5, #11
 8006d52:	1d23      	adds	r3, r4, #4
 8006d54:	4395      	bics	r5, r2
 8006d56:	1aea      	subs	r2, r5, r3
 8006d58:	429d      	cmp	r5, r3
 8006d5a:	d0e4      	beq.n	8006d26 <_malloc_r+0x8e>
 8006d5c:	1b5b      	subs	r3, r3, r5
 8006d5e:	50a3      	str	r3, [r4, r2]
 8006d60:	e7e1      	b.n	8006d26 <_malloc_r+0x8e>
 8006d62:	605a      	str	r2, [r3, #4]
 8006d64:	e7ec      	b.n	8006d40 <_malloc_r+0xa8>
 8006d66:	6862      	ldr	r2, [r4, #4]
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d1d5      	bne.n	8006d18 <_malloc_r+0x80>
 8006d6c:	9b00      	ldr	r3, [sp, #0]
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e7e9      	b.n	8006d46 <_malloc_r+0xae>
 8006d72:	0023      	movs	r3, r4
 8006d74:	6864      	ldr	r4, [r4, #4]
 8006d76:	e7a2      	b.n	8006cbe <_malloc_r+0x26>
 8006d78:	002c      	movs	r4, r5
 8006d7a:	686d      	ldr	r5, [r5, #4]
 8006d7c:	e7ab      	b.n	8006cd6 <_malloc_r+0x3e>
 8006d7e:	0013      	movs	r3, r2
 8006d80:	e7c4      	b.n	8006d0c <_malloc_r+0x74>
 8006d82:	230c      	movs	r3, #12
 8006d84:	0030      	movs	r0, r6
 8006d86:	6033      	str	r3, [r6, #0]
 8006d88:	f000 f810 	bl	8006dac <__malloc_unlock>
 8006d8c:	e7cb      	b.n	8006d26 <_malloc_r+0x8e>
 8006d8e:	6027      	str	r7, [r4, #0]
 8006d90:	e7d9      	b.n	8006d46 <_malloc_r+0xae>
 8006d92:	605b      	str	r3, [r3, #4]
 8006d94:	deff      	udf	#255	; 0xff
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	2000081c 	.word	0x2000081c

08006d9c <__malloc_lock>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	4802      	ldr	r0, [pc, #8]	; (8006da8 <__malloc_lock+0xc>)
 8006da0:	f7ff f855 	bl	8005e4e <__retarget_lock_acquire_recursive>
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	46c0      	nop			; (mov r8, r8)
 8006da8:	20000818 	.word	0x20000818

08006dac <__malloc_unlock>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4802      	ldr	r0, [pc, #8]	; (8006db8 <__malloc_unlock+0xc>)
 8006db0:	f7ff f84e 	bl	8005e50 <__retarget_lock_release_recursive>
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	20000818 	.word	0x20000818

08006dbc <_Balloc>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	69c5      	ldr	r5, [r0, #28]
 8006dc0:	0006      	movs	r6, r0
 8006dc2:	000c      	movs	r4, r1
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	d10e      	bne.n	8006de6 <_Balloc+0x2a>
 8006dc8:	2010      	movs	r0, #16
 8006dca:	f7ff ff39 	bl	8006c40 <malloc>
 8006dce:	1e02      	subs	r2, r0, #0
 8006dd0:	61f0      	str	r0, [r6, #28]
 8006dd2:	d104      	bne.n	8006dde <_Balloc+0x22>
 8006dd4:	216b      	movs	r1, #107	; 0x6b
 8006dd6:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <_Balloc+0x80>)
 8006dd8:	4819      	ldr	r0, [pc, #100]	; (8006e40 <_Balloc+0x84>)
 8006dda:	f001 fdbd 	bl	8008958 <__assert_func>
 8006dde:	6045      	str	r5, [r0, #4]
 8006de0:	6085      	str	r5, [r0, #8]
 8006de2:	6005      	str	r5, [r0, #0]
 8006de4:	60c5      	str	r5, [r0, #12]
 8006de6:	69f5      	ldr	r5, [r6, #28]
 8006de8:	68eb      	ldr	r3, [r5, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d013      	beq.n	8006e16 <_Balloc+0x5a>
 8006dee:	69f3      	ldr	r3, [r6, #28]
 8006df0:	00a2      	lsls	r2, r4, #2
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	189b      	adds	r3, r3, r2
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d118      	bne.n	8006e2e <_Balloc+0x72>
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	000d      	movs	r5, r1
 8006e00:	40a5      	lsls	r5, r4
 8006e02:	1d6a      	adds	r2, r5, #5
 8006e04:	0030      	movs	r0, r6
 8006e06:	0092      	lsls	r2, r2, #2
 8006e08:	f001 fdc4 	bl	8008994 <_calloc_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d00c      	beq.n	8006e2a <_Balloc+0x6e>
 8006e10:	6044      	str	r4, [r0, #4]
 8006e12:	6085      	str	r5, [r0, #8]
 8006e14:	e00d      	b.n	8006e32 <_Balloc+0x76>
 8006e16:	2221      	movs	r2, #33	; 0x21
 8006e18:	2104      	movs	r1, #4
 8006e1a:	0030      	movs	r0, r6
 8006e1c:	f001 fdba 	bl	8008994 <_calloc_r>
 8006e20:	69f3      	ldr	r3, [r6, #28]
 8006e22:	60e8      	str	r0, [r5, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e1      	bne.n	8006dee <_Balloc+0x32>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	6802      	ldr	r2, [r0, #0]
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6103      	str	r3, [r0, #16]
 8006e36:	60c3      	str	r3, [r0, #12]
 8006e38:	e7f8      	b.n	8006e2c <_Balloc+0x70>
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	08009836 	.word	0x08009836
 8006e40:	080098b6 	.word	0x080098b6

08006e44 <_Bfree>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	69c6      	ldr	r6, [r0, #28]
 8006e48:	0005      	movs	r5, r0
 8006e4a:	000c      	movs	r4, r1
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	d10e      	bne.n	8006e6e <_Bfree+0x2a>
 8006e50:	2010      	movs	r0, #16
 8006e52:	f7ff fef5 	bl	8006c40 <malloc>
 8006e56:	1e02      	subs	r2, r0, #0
 8006e58:	61e8      	str	r0, [r5, #28]
 8006e5a:	d104      	bne.n	8006e66 <_Bfree+0x22>
 8006e5c:	218f      	movs	r1, #143	; 0x8f
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <_Bfree+0x40>)
 8006e60:	4809      	ldr	r0, [pc, #36]	; (8006e88 <_Bfree+0x44>)
 8006e62:	f001 fd79 	bl	8008958 <__assert_func>
 8006e66:	6046      	str	r6, [r0, #4]
 8006e68:	6086      	str	r6, [r0, #8]
 8006e6a:	6006      	str	r6, [r0, #0]
 8006e6c:	60c6      	str	r6, [r0, #12]
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	d007      	beq.n	8006e82 <_Bfree+0x3e>
 8006e72:	69eb      	ldr	r3, [r5, #28]
 8006e74:	6862      	ldr	r2, [r4, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	0092      	lsls	r2, r2, #2
 8006e7a:	189b      	adds	r3, r3, r2
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	601c      	str	r4, [r3, #0]
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	08009836 	.word	0x08009836
 8006e88:	080098b6 	.word	0x080098b6

08006e8c <__multadd>:
 8006e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e8e:	000e      	movs	r6, r1
 8006e90:	9001      	str	r0, [sp, #4]
 8006e92:	000c      	movs	r4, r1
 8006e94:	001d      	movs	r5, r3
 8006e96:	2000      	movs	r0, #0
 8006e98:	690f      	ldr	r7, [r1, #16]
 8006e9a:	3614      	adds	r6, #20
 8006e9c:	6833      	ldr	r3, [r6, #0]
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	b299      	uxth	r1, r3
 8006ea2:	4351      	muls	r1, r2
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	4353      	muls	r3, r2
 8006ea8:	1949      	adds	r1, r1, r5
 8006eaa:	0c0d      	lsrs	r5, r1, #16
 8006eac:	195b      	adds	r3, r3, r5
 8006eae:	0c1d      	lsrs	r5, r3, #16
 8006eb0:	b289      	uxth	r1, r1
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	185b      	adds	r3, r3, r1
 8006eb6:	c608      	stmia	r6!, {r3}
 8006eb8:	4287      	cmp	r7, r0
 8006eba:	dcef      	bgt.n	8006e9c <__multadd+0x10>
 8006ebc:	2d00      	cmp	r5, #0
 8006ebe:	d022      	beq.n	8006f06 <__multadd+0x7a>
 8006ec0:	68a3      	ldr	r3, [r4, #8]
 8006ec2:	42bb      	cmp	r3, r7
 8006ec4:	dc19      	bgt.n	8006efa <__multadd+0x6e>
 8006ec6:	6861      	ldr	r1, [r4, #4]
 8006ec8:	9801      	ldr	r0, [sp, #4]
 8006eca:	3101      	adds	r1, #1
 8006ecc:	f7ff ff76 	bl	8006dbc <_Balloc>
 8006ed0:	1e06      	subs	r6, r0, #0
 8006ed2:	d105      	bne.n	8006ee0 <__multadd+0x54>
 8006ed4:	0032      	movs	r2, r6
 8006ed6:	21ba      	movs	r1, #186	; 0xba
 8006ed8:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <__multadd+0x80>)
 8006eda:	480d      	ldr	r0, [pc, #52]	; (8006f10 <__multadd+0x84>)
 8006edc:	f001 fd3c 	bl	8008958 <__assert_func>
 8006ee0:	0021      	movs	r1, r4
 8006ee2:	6922      	ldr	r2, [r4, #16]
 8006ee4:	310c      	adds	r1, #12
 8006ee6:	3202      	adds	r2, #2
 8006ee8:	0092      	lsls	r2, r2, #2
 8006eea:	300c      	adds	r0, #12
 8006eec:	f001 fd24 	bl	8008938 <memcpy>
 8006ef0:	0021      	movs	r1, r4
 8006ef2:	9801      	ldr	r0, [sp, #4]
 8006ef4:	f7ff ffa6 	bl	8006e44 <_Bfree>
 8006ef8:	0034      	movs	r4, r6
 8006efa:	1d3b      	adds	r3, r7, #4
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	18e3      	adds	r3, r4, r3
 8006f00:	605d      	str	r5, [r3, #4]
 8006f02:	1c7b      	adds	r3, r7, #1
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	0020      	movs	r0, r4
 8006f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	080098a5 	.word	0x080098a5
 8006f10:	080098b6 	.word	0x080098b6

08006f14 <__s2b>:
 8006f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f16:	0006      	movs	r6, r0
 8006f18:	0018      	movs	r0, r3
 8006f1a:	000c      	movs	r4, r1
 8006f1c:	3008      	adds	r0, #8
 8006f1e:	2109      	movs	r1, #9
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	0015      	movs	r5, r2
 8006f24:	f7f9 f99c 	bl	8000260 <__divsi3>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	4283      	cmp	r3, r0
 8006f2e:	db0a      	blt.n	8006f46 <__s2b+0x32>
 8006f30:	0030      	movs	r0, r6
 8006f32:	f7ff ff43 	bl	8006dbc <_Balloc>
 8006f36:	1e01      	subs	r1, r0, #0
 8006f38:	d108      	bne.n	8006f4c <__s2b+0x38>
 8006f3a:	000a      	movs	r2, r1
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <__s2b+0x90>)
 8006f3e:	481a      	ldr	r0, [pc, #104]	; (8006fa8 <__s2b+0x94>)
 8006f40:	31d3      	adds	r1, #211	; 0xd3
 8006f42:	f001 fd09 	bl	8008958 <__assert_func>
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	3101      	adds	r1, #1
 8006f4a:	e7ef      	b.n	8006f2c <__s2b+0x18>
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	6143      	str	r3, [r0, #20]
 8006f50:	2301      	movs	r3, #1
 8006f52:	6103      	str	r3, [r0, #16]
 8006f54:	2d09      	cmp	r5, #9
 8006f56:	dd18      	ble.n	8006f8a <__s2b+0x76>
 8006f58:	0023      	movs	r3, r4
 8006f5a:	3309      	adds	r3, #9
 8006f5c:	001f      	movs	r7, r3
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	1964      	adds	r4, r4, r5
 8006f62:	783b      	ldrb	r3, [r7, #0]
 8006f64:	220a      	movs	r2, #10
 8006f66:	0030      	movs	r0, r6
 8006f68:	3b30      	subs	r3, #48	; 0x30
 8006f6a:	f7ff ff8f 	bl	8006e8c <__multadd>
 8006f6e:	3701      	adds	r7, #1
 8006f70:	0001      	movs	r1, r0
 8006f72:	42a7      	cmp	r7, r4
 8006f74:	d1f5      	bne.n	8006f62 <__s2b+0x4e>
 8006f76:	002c      	movs	r4, r5
 8006f78:	9b00      	ldr	r3, [sp, #0]
 8006f7a:	3c08      	subs	r4, #8
 8006f7c:	191c      	adds	r4, r3, r4
 8006f7e:	002f      	movs	r7, r5
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	429f      	cmp	r7, r3
 8006f84:	db04      	blt.n	8006f90 <__s2b+0x7c>
 8006f86:	0008      	movs	r0, r1
 8006f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f8a:	2509      	movs	r5, #9
 8006f8c:	340a      	adds	r4, #10
 8006f8e:	e7f6      	b.n	8006f7e <__s2b+0x6a>
 8006f90:	1b63      	subs	r3, r4, r5
 8006f92:	5ddb      	ldrb	r3, [r3, r7]
 8006f94:	220a      	movs	r2, #10
 8006f96:	0030      	movs	r0, r6
 8006f98:	3b30      	subs	r3, #48	; 0x30
 8006f9a:	f7ff ff77 	bl	8006e8c <__multadd>
 8006f9e:	3701      	adds	r7, #1
 8006fa0:	0001      	movs	r1, r0
 8006fa2:	e7ed      	b.n	8006f80 <__s2b+0x6c>
 8006fa4:	080098a5 	.word	0x080098a5
 8006fa8:	080098b6 	.word	0x080098b6

08006fac <__hi0bits>:
 8006fac:	0003      	movs	r3, r0
 8006fae:	0c02      	lsrs	r2, r0, #16
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	4282      	cmp	r2, r0
 8006fb4:	d101      	bne.n	8006fba <__hi0bits+0xe>
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	3010      	adds	r0, #16
 8006fba:	0e1a      	lsrs	r2, r3, #24
 8006fbc:	d101      	bne.n	8006fc2 <__hi0bits+0x16>
 8006fbe:	3008      	adds	r0, #8
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	0f1a      	lsrs	r2, r3, #28
 8006fc4:	d101      	bne.n	8006fca <__hi0bits+0x1e>
 8006fc6:	3004      	adds	r0, #4
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	0f9a      	lsrs	r2, r3, #30
 8006fcc:	d101      	bne.n	8006fd2 <__hi0bits+0x26>
 8006fce:	3002      	adds	r0, #2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	db03      	blt.n	8006fde <__hi0bits+0x32>
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	d400      	bmi.n	8006fde <__hi0bits+0x32>
 8006fdc:	2020      	movs	r0, #32
 8006fde:	4770      	bx	lr

08006fe0 <__lo0bits>:
 8006fe0:	6803      	ldr	r3, [r0, #0]
 8006fe2:	0001      	movs	r1, r0
 8006fe4:	2207      	movs	r2, #7
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	4010      	ands	r0, r2
 8006fea:	4213      	tst	r3, r2
 8006fec:	d00d      	beq.n	800700a <__lo0bits+0x2a>
 8006fee:	3a06      	subs	r2, #6
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	4213      	tst	r3, r2
 8006ff4:	d105      	bne.n	8007002 <__lo0bits+0x22>
 8006ff6:	3002      	adds	r0, #2
 8006ff8:	4203      	tst	r3, r0
 8006ffa:	d003      	beq.n	8007004 <__lo0bits+0x24>
 8006ffc:	40d3      	lsrs	r3, r2
 8006ffe:	0010      	movs	r0, r2
 8007000:	600b      	str	r3, [r1, #0]
 8007002:	4770      	bx	lr
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	600b      	str	r3, [r1, #0]
 8007008:	e7fb      	b.n	8007002 <__lo0bits+0x22>
 800700a:	b29a      	uxth	r2, r3
 800700c:	2a00      	cmp	r2, #0
 800700e:	d101      	bne.n	8007014 <__lo0bits+0x34>
 8007010:	2010      	movs	r0, #16
 8007012:	0c1b      	lsrs	r3, r3, #16
 8007014:	b2da      	uxtb	r2, r3
 8007016:	2a00      	cmp	r2, #0
 8007018:	d101      	bne.n	800701e <__lo0bits+0x3e>
 800701a:	3008      	adds	r0, #8
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	071a      	lsls	r2, r3, #28
 8007020:	d101      	bne.n	8007026 <__lo0bits+0x46>
 8007022:	3004      	adds	r0, #4
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	079a      	lsls	r2, r3, #30
 8007028:	d101      	bne.n	800702e <__lo0bits+0x4e>
 800702a:	3002      	adds	r0, #2
 800702c:	089b      	lsrs	r3, r3, #2
 800702e:	07da      	lsls	r2, r3, #31
 8007030:	d4e9      	bmi.n	8007006 <__lo0bits+0x26>
 8007032:	3001      	adds	r0, #1
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	d1e6      	bne.n	8007006 <__lo0bits+0x26>
 8007038:	2020      	movs	r0, #32
 800703a:	e7e2      	b.n	8007002 <__lo0bits+0x22>

0800703c <__i2b>:
 800703c:	b510      	push	{r4, lr}
 800703e:	000c      	movs	r4, r1
 8007040:	2101      	movs	r1, #1
 8007042:	f7ff febb 	bl	8006dbc <_Balloc>
 8007046:	2800      	cmp	r0, #0
 8007048:	d107      	bne.n	800705a <__i2b+0x1e>
 800704a:	2146      	movs	r1, #70	; 0x46
 800704c:	4c05      	ldr	r4, [pc, #20]	; (8007064 <__i2b+0x28>)
 800704e:	0002      	movs	r2, r0
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <__i2b+0x2c>)
 8007052:	0020      	movs	r0, r4
 8007054:	31ff      	adds	r1, #255	; 0xff
 8007056:	f001 fc7f 	bl	8008958 <__assert_func>
 800705a:	2301      	movs	r3, #1
 800705c:	6144      	str	r4, [r0, #20]
 800705e:	6103      	str	r3, [r0, #16]
 8007060:	bd10      	pop	{r4, pc}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	080098b6 	.word	0x080098b6
 8007068:	080098a5 	.word	0x080098a5

0800706c <__multiply>:
 800706c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800706e:	0015      	movs	r5, r2
 8007070:	690a      	ldr	r2, [r1, #16]
 8007072:	692b      	ldr	r3, [r5, #16]
 8007074:	000c      	movs	r4, r1
 8007076:	b08b      	sub	sp, #44	; 0x2c
 8007078:	429a      	cmp	r2, r3
 800707a:	da01      	bge.n	8007080 <__multiply+0x14>
 800707c:	002c      	movs	r4, r5
 800707e:	000d      	movs	r5, r1
 8007080:	6927      	ldr	r7, [r4, #16]
 8007082:	692e      	ldr	r6, [r5, #16]
 8007084:	6861      	ldr	r1, [r4, #4]
 8007086:	19bb      	adds	r3, r7, r6
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	68a3      	ldr	r3, [r4, #8]
 800708c:	19ba      	adds	r2, r7, r6
 800708e:	4293      	cmp	r3, r2
 8007090:	da00      	bge.n	8007094 <__multiply+0x28>
 8007092:	3101      	adds	r1, #1
 8007094:	f7ff fe92 	bl	8006dbc <_Balloc>
 8007098:	9002      	str	r0, [sp, #8]
 800709a:	2800      	cmp	r0, #0
 800709c:	d106      	bne.n	80070ac <__multiply+0x40>
 800709e:	21b1      	movs	r1, #177	; 0xb1
 80070a0:	4b48      	ldr	r3, [pc, #288]	; (80071c4 <__multiply+0x158>)
 80070a2:	4849      	ldr	r0, [pc, #292]	; (80071c8 <__multiply+0x15c>)
 80070a4:	9a02      	ldr	r2, [sp, #8]
 80070a6:	0049      	lsls	r1, r1, #1
 80070a8:	f001 fc56 	bl	8008958 <__assert_func>
 80070ac:	9b02      	ldr	r3, [sp, #8]
 80070ae:	2200      	movs	r2, #0
 80070b0:	3314      	adds	r3, #20
 80070b2:	469c      	mov	ip, r3
 80070b4:	19bb      	adds	r3, r7, r6
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4463      	add	r3, ip
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	4663      	mov	r3, ip
 80070be:	9904      	ldr	r1, [sp, #16]
 80070c0:	428b      	cmp	r3, r1
 80070c2:	d32a      	bcc.n	800711a <__multiply+0xae>
 80070c4:	0023      	movs	r3, r4
 80070c6:	00bf      	lsls	r7, r7, #2
 80070c8:	3314      	adds	r3, #20
 80070ca:	3514      	adds	r5, #20
 80070cc:	9308      	str	r3, [sp, #32]
 80070ce:	00b6      	lsls	r6, r6, #2
 80070d0:	19db      	adds	r3, r3, r7
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	19ab      	adds	r3, r5, r6
 80070d6:	9309      	str	r3, [sp, #36]	; 0x24
 80070d8:	2304      	movs	r3, #4
 80070da:	9306      	str	r3, [sp, #24]
 80070dc:	0023      	movs	r3, r4
 80070de:	9a05      	ldr	r2, [sp, #20]
 80070e0:	3315      	adds	r3, #21
 80070e2:	9501      	str	r5, [sp, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d305      	bcc.n	80070f4 <__multiply+0x88>
 80070e8:	1b13      	subs	r3, r2, r4
 80070ea:	3b15      	subs	r3, #21
 80070ec:	089b      	lsrs	r3, r3, #2
 80070ee:	3301      	adds	r3, #1
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	9306      	str	r3, [sp, #24]
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d310      	bcc.n	800711e <__multiply+0xb2>
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dd05      	ble.n	800710e <__multiply+0xa2>
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	3b04      	subs	r3, #4
 8007106:	9304      	str	r3, [sp, #16]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d056      	beq.n	80071bc <__multiply+0x150>
 800710e:	9b02      	ldr	r3, [sp, #8]
 8007110:	9a03      	ldr	r2, [sp, #12]
 8007112:	0018      	movs	r0, r3
 8007114:	611a      	str	r2, [r3, #16]
 8007116:	b00b      	add	sp, #44	; 0x2c
 8007118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800711a:	c304      	stmia	r3!, {r2}
 800711c:	e7cf      	b.n	80070be <__multiply+0x52>
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	b280      	uxth	r0, r0
 8007124:	2800      	cmp	r0, #0
 8007126:	d01e      	beq.n	8007166 <__multiply+0xfa>
 8007128:	4667      	mov	r7, ip
 800712a:	2500      	movs	r5, #0
 800712c:	9e08      	ldr	r6, [sp, #32]
 800712e:	ce02      	ldmia	r6!, {r1}
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	9307      	str	r3, [sp, #28]
 8007134:	b28b      	uxth	r3, r1
 8007136:	4343      	muls	r3, r0
 8007138:	001a      	movs	r2, r3
 800713a:	466b      	mov	r3, sp
 800713c:	8b9b      	ldrh	r3, [r3, #28]
 800713e:	18d3      	adds	r3, r2, r3
 8007140:	195b      	adds	r3, r3, r5
 8007142:	0c0d      	lsrs	r5, r1, #16
 8007144:	4345      	muls	r5, r0
 8007146:	9a07      	ldr	r2, [sp, #28]
 8007148:	0c11      	lsrs	r1, r2, #16
 800714a:	1869      	adds	r1, r5, r1
 800714c:	0c1a      	lsrs	r2, r3, #16
 800714e:	188a      	adds	r2, r1, r2
 8007150:	b29b      	uxth	r3, r3
 8007152:	0c15      	lsrs	r5, r2, #16
 8007154:	0412      	lsls	r2, r2, #16
 8007156:	431a      	orrs	r2, r3
 8007158:	9b05      	ldr	r3, [sp, #20]
 800715a:	c704      	stmia	r7!, {r2}
 800715c:	42b3      	cmp	r3, r6
 800715e:	d8e6      	bhi.n	800712e <__multiply+0xc2>
 8007160:	4663      	mov	r3, ip
 8007162:	9a06      	ldr	r2, [sp, #24]
 8007164:	509d      	str	r5, [r3, r2]
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	0c00      	lsrs	r0, r0, #16
 800716c:	d020      	beq.n	80071b0 <__multiply+0x144>
 800716e:	4663      	mov	r3, ip
 8007170:	0025      	movs	r5, r4
 8007172:	4661      	mov	r1, ip
 8007174:	2700      	movs	r7, #0
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3514      	adds	r5, #20
 800717a:	682a      	ldr	r2, [r5, #0]
 800717c:	680e      	ldr	r6, [r1, #0]
 800717e:	b292      	uxth	r2, r2
 8007180:	4342      	muls	r2, r0
 8007182:	0c36      	lsrs	r6, r6, #16
 8007184:	1992      	adds	r2, r2, r6
 8007186:	19d2      	adds	r2, r2, r7
 8007188:	0416      	lsls	r6, r2, #16
 800718a:	b29b      	uxth	r3, r3
 800718c:	431e      	orrs	r6, r3
 800718e:	600e      	str	r6, [r1, #0]
 8007190:	cd40      	ldmia	r5!, {r6}
 8007192:	684b      	ldr	r3, [r1, #4]
 8007194:	0c36      	lsrs	r6, r6, #16
 8007196:	4346      	muls	r6, r0
 8007198:	b29b      	uxth	r3, r3
 800719a:	0c12      	lsrs	r2, r2, #16
 800719c:	18f3      	adds	r3, r6, r3
 800719e:	189b      	adds	r3, r3, r2
 80071a0:	9a05      	ldr	r2, [sp, #20]
 80071a2:	0c1f      	lsrs	r7, r3, #16
 80071a4:	3104      	adds	r1, #4
 80071a6:	42aa      	cmp	r2, r5
 80071a8:	d8e7      	bhi.n	800717a <__multiply+0x10e>
 80071aa:	4662      	mov	r2, ip
 80071ac:	9906      	ldr	r1, [sp, #24]
 80071ae:	5053      	str	r3, [r2, r1]
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	3304      	adds	r3, #4
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	2304      	movs	r3, #4
 80071b8:	449c      	add	ip, r3
 80071ba:	e79b      	b.n	80070f4 <__multiply+0x88>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	3b01      	subs	r3, #1
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	e79b      	b.n	80070fc <__multiply+0x90>
 80071c4:	080098a5 	.word	0x080098a5
 80071c8:	080098b6 	.word	0x080098b6

080071cc <__pow5mult>:
 80071cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ce:	2303      	movs	r3, #3
 80071d0:	0015      	movs	r5, r2
 80071d2:	0007      	movs	r7, r0
 80071d4:	000e      	movs	r6, r1
 80071d6:	401a      	ands	r2, r3
 80071d8:	421d      	tst	r5, r3
 80071da:	d008      	beq.n	80071ee <__pow5mult+0x22>
 80071dc:	4925      	ldr	r1, [pc, #148]	; (8007274 <__pow5mult+0xa8>)
 80071de:	3a01      	subs	r2, #1
 80071e0:	0092      	lsls	r2, r2, #2
 80071e2:	5852      	ldr	r2, [r2, r1]
 80071e4:	2300      	movs	r3, #0
 80071e6:	0031      	movs	r1, r6
 80071e8:	f7ff fe50 	bl	8006e8c <__multadd>
 80071ec:	0006      	movs	r6, r0
 80071ee:	10ad      	asrs	r5, r5, #2
 80071f0:	d03d      	beq.n	800726e <__pow5mult+0xa2>
 80071f2:	69fc      	ldr	r4, [r7, #28]
 80071f4:	2c00      	cmp	r4, #0
 80071f6:	d10f      	bne.n	8007218 <__pow5mult+0x4c>
 80071f8:	2010      	movs	r0, #16
 80071fa:	f7ff fd21 	bl	8006c40 <malloc>
 80071fe:	1e02      	subs	r2, r0, #0
 8007200:	61f8      	str	r0, [r7, #28]
 8007202:	d105      	bne.n	8007210 <__pow5mult+0x44>
 8007204:	21b4      	movs	r1, #180	; 0xb4
 8007206:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <__pow5mult+0xac>)
 8007208:	481c      	ldr	r0, [pc, #112]	; (800727c <__pow5mult+0xb0>)
 800720a:	31ff      	adds	r1, #255	; 0xff
 800720c:	f001 fba4 	bl	8008958 <__assert_func>
 8007210:	6044      	str	r4, [r0, #4]
 8007212:	6084      	str	r4, [r0, #8]
 8007214:	6004      	str	r4, [r0, #0]
 8007216:	60c4      	str	r4, [r0, #12]
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	689c      	ldr	r4, [r3, #8]
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	2c00      	cmp	r4, #0
 8007220:	d108      	bne.n	8007234 <__pow5mult+0x68>
 8007222:	0038      	movs	r0, r7
 8007224:	4916      	ldr	r1, [pc, #88]	; (8007280 <__pow5mult+0xb4>)
 8007226:	f7ff ff09 	bl	800703c <__i2b>
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	0004      	movs	r4, r0
 800722e:	6098      	str	r0, [r3, #8]
 8007230:	2300      	movs	r3, #0
 8007232:	6003      	str	r3, [r0, #0]
 8007234:	2301      	movs	r3, #1
 8007236:	421d      	tst	r5, r3
 8007238:	d00a      	beq.n	8007250 <__pow5mult+0x84>
 800723a:	0031      	movs	r1, r6
 800723c:	0022      	movs	r2, r4
 800723e:	0038      	movs	r0, r7
 8007240:	f7ff ff14 	bl	800706c <__multiply>
 8007244:	0031      	movs	r1, r6
 8007246:	9001      	str	r0, [sp, #4]
 8007248:	0038      	movs	r0, r7
 800724a:	f7ff fdfb 	bl	8006e44 <_Bfree>
 800724e:	9e01      	ldr	r6, [sp, #4]
 8007250:	106d      	asrs	r5, r5, #1
 8007252:	d00c      	beq.n	800726e <__pow5mult+0xa2>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	2800      	cmp	r0, #0
 8007258:	d107      	bne.n	800726a <__pow5mult+0x9e>
 800725a:	0022      	movs	r2, r4
 800725c:	0021      	movs	r1, r4
 800725e:	0038      	movs	r0, r7
 8007260:	f7ff ff04 	bl	800706c <__multiply>
 8007264:	2300      	movs	r3, #0
 8007266:	6020      	str	r0, [r4, #0]
 8007268:	6003      	str	r3, [r0, #0]
 800726a:	0004      	movs	r4, r0
 800726c:	e7e2      	b.n	8007234 <__pow5mult+0x68>
 800726e:	0030      	movs	r0, r6
 8007270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	08009a00 	.word	0x08009a00
 8007278:	08009836 	.word	0x08009836
 800727c:	080098b6 	.word	0x080098b6
 8007280:	00000271 	.word	0x00000271

08007284 <__lshift>:
 8007284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007286:	000c      	movs	r4, r1
 8007288:	0017      	movs	r7, r2
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	1155      	asrs	r5, r2, #5
 800728e:	b087      	sub	sp, #28
 8007290:	18eb      	adds	r3, r5, r3
 8007292:	9302      	str	r3, [sp, #8]
 8007294:	3301      	adds	r3, #1
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	6849      	ldr	r1, [r1, #4]
 800729a:	68a3      	ldr	r3, [r4, #8]
 800729c:	9004      	str	r0, [sp, #16]
 800729e:	9a01      	ldr	r2, [sp, #4]
 80072a0:	4293      	cmp	r3, r2
 80072a2:	db10      	blt.n	80072c6 <__lshift+0x42>
 80072a4:	9804      	ldr	r0, [sp, #16]
 80072a6:	f7ff fd89 	bl	8006dbc <_Balloc>
 80072aa:	2300      	movs	r3, #0
 80072ac:	0002      	movs	r2, r0
 80072ae:	0006      	movs	r6, r0
 80072b0:	0019      	movs	r1, r3
 80072b2:	3214      	adds	r2, #20
 80072b4:	4298      	cmp	r0, r3
 80072b6:	d10c      	bne.n	80072d2 <__lshift+0x4e>
 80072b8:	31df      	adds	r1, #223	; 0xdf
 80072ba:	0032      	movs	r2, r6
 80072bc:	4b26      	ldr	r3, [pc, #152]	; (8007358 <__lshift+0xd4>)
 80072be:	4827      	ldr	r0, [pc, #156]	; (800735c <__lshift+0xd8>)
 80072c0:	31ff      	adds	r1, #255	; 0xff
 80072c2:	f001 fb49 	bl	8008958 <__assert_func>
 80072c6:	3101      	adds	r1, #1
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	e7e8      	b.n	800729e <__lshift+0x1a>
 80072cc:	0098      	lsls	r0, r3, #2
 80072ce:	5011      	str	r1, [r2, r0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	42ab      	cmp	r3, r5
 80072d4:	dbfa      	blt.n	80072cc <__lshift+0x48>
 80072d6:	43eb      	mvns	r3, r5
 80072d8:	17db      	asrs	r3, r3, #31
 80072da:	401d      	ands	r5, r3
 80072dc:	211f      	movs	r1, #31
 80072de:	0023      	movs	r3, r4
 80072e0:	0038      	movs	r0, r7
 80072e2:	00ad      	lsls	r5, r5, #2
 80072e4:	1955      	adds	r5, r2, r5
 80072e6:	6922      	ldr	r2, [r4, #16]
 80072e8:	3314      	adds	r3, #20
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	4008      	ands	r0, r1
 80072ee:	4684      	mov	ip, r0
 80072f0:	189a      	adds	r2, r3, r2
 80072f2:	420f      	tst	r7, r1
 80072f4:	d02a      	beq.n	800734c <__lshift+0xc8>
 80072f6:	3101      	adds	r1, #1
 80072f8:	1a09      	subs	r1, r1, r0
 80072fa:	9105      	str	r1, [sp, #20]
 80072fc:	2100      	movs	r1, #0
 80072fe:	9503      	str	r5, [sp, #12]
 8007300:	4667      	mov	r7, ip
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	40b8      	lsls	r0, r7
 8007306:	4308      	orrs	r0, r1
 8007308:	9903      	ldr	r1, [sp, #12]
 800730a:	c101      	stmia	r1!, {r0}
 800730c:	9103      	str	r1, [sp, #12]
 800730e:	9805      	ldr	r0, [sp, #20]
 8007310:	cb02      	ldmia	r3!, {r1}
 8007312:	40c1      	lsrs	r1, r0
 8007314:	429a      	cmp	r2, r3
 8007316:	d8f3      	bhi.n	8007300 <__lshift+0x7c>
 8007318:	0020      	movs	r0, r4
 800731a:	3015      	adds	r0, #21
 800731c:	2304      	movs	r3, #4
 800731e:	4282      	cmp	r2, r0
 8007320:	d304      	bcc.n	800732c <__lshift+0xa8>
 8007322:	1b13      	subs	r3, r2, r4
 8007324:	3b15      	subs	r3, #21
 8007326:	089b      	lsrs	r3, r3, #2
 8007328:	3301      	adds	r3, #1
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	50e9      	str	r1, [r5, r3]
 800732e:	2900      	cmp	r1, #0
 8007330:	d002      	beq.n	8007338 <__lshift+0xb4>
 8007332:	9b02      	ldr	r3, [sp, #8]
 8007334:	3302      	adds	r3, #2
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	9b01      	ldr	r3, [sp, #4]
 800733a:	9804      	ldr	r0, [sp, #16]
 800733c:	3b01      	subs	r3, #1
 800733e:	0021      	movs	r1, r4
 8007340:	6133      	str	r3, [r6, #16]
 8007342:	f7ff fd7f 	bl	8006e44 <_Bfree>
 8007346:	0030      	movs	r0, r6
 8007348:	b007      	add	sp, #28
 800734a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734c:	cb02      	ldmia	r3!, {r1}
 800734e:	c502      	stmia	r5!, {r1}
 8007350:	429a      	cmp	r2, r3
 8007352:	d8fb      	bhi.n	800734c <__lshift+0xc8>
 8007354:	e7f0      	b.n	8007338 <__lshift+0xb4>
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	080098a5 	.word	0x080098a5
 800735c:	080098b6 	.word	0x080098b6

08007360 <__mcmp>:
 8007360:	b530      	push	{r4, r5, lr}
 8007362:	690b      	ldr	r3, [r1, #16]
 8007364:	6904      	ldr	r4, [r0, #16]
 8007366:	0002      	movs	r2, r0
 8007368:	1ae0      	subs	r0, r4, r3
 800736a:	429c      	cmp	r4, r3
 800736c:	d10e      	bne.n	800738c <__mcmp+0x2c>
 800736e:	3214      	adds	r2, #20
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	3114      	adds	r1, #20
 8007374:	0014      	movs	r4, r2
 8007376:	18c9      	adds	r1, r1, r3
 8007378:	18d2      	adds	r2, r2, r3
 800737a:	3a04      	subs	r2, #4
 800737c:	3904      	subs	r1, #4
 800737e:	6815      	ldr	r5, [r2, #0]
 8007380:	680b      	ldr	r3, [r1, #0]
 8007382:	429d      	cmp	r5, r3
 8007384:	d003      	beq.n	800738e <__mcmp+0x2e>
 8007386:	2001      	movs	r0, #1
 8007388:	429d      	cmp	r5, r3
 800738a:	d303      	bcc.n	8007394 <__mcmp+0x34>
 800738c:	bd30      	pop	{r4, r5, pc}
 800738e:	4294      	cmp	r4, r2
 8007390:	d3f3      	bcc.n	800737a <__mcmp+0x1a>
 8007392:	e7fb      	b.n	800738c <__mcmp+0x2c>
 8007394:	4240      	negs	r0, r0
 8007396:	e7f9      	b.n	800738c <__mcmp+0x2c>

08007398 <__mdiff>:
 8007398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739a:	000e      	movs	r6, r1
 800739c:	0007      	movs	r7, r0
 800739e:	0011      	movs	r1, r2
 80073a0:	0030      	movs	r0, r6
 80073a2:	b087      	sub	sp, #28
 80073a4:	0014      	movs	r4, r2
 80073a6:	f7ff ffdb 	bl	8007360 <__mcmp>
 80073aa:	1e05      	subs	r5, r0, #0
 80073ac:	d110      	bne.n	80073d0 <__mdiff+0x38>
 80073ae:	0001      	movs	r1, r0
 80073b0:	0038      	movs	r0, r7
 80073b2:	f7ff fd03 	bl	8006dbc <_Balloc>
 80073b6:	1e02      	subs	r2, r0, #0
 80073b8:	d104      	bne.n	80073c4 <__mdiff+0x2c>
 80073ba:	4b3f      	ldr	r3, [pc, #252]	; (80074b8 <__mdiff+0x120>)
 80073bc:	483f      	ldr	r0, [pc, #252]	; (80074bc <__mdiff+0x124>)
 80073be:	4940      	ldr	r1, [pc, #256]	; (80074c0 <__mdiff+0x128>)
 80073c0:	f001 faca 	bl	8008958 <__assert_func>
 80073c4:	2301      	movs	r3, #1
 80073c6:	6145      	str	r5, [r0, #20]
 80073c8:	6103      	str	r3, [r0, #16]
 80073ca:	0010      	movs	r0, r2
 80073cc:	b007      	add	sp, #28
 80073ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d0:	2301      	movs	r3, #1
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	2800      	cmp	r0, #0
 80073d6:	db04      	blt.n	80073e2 <__mdiff+0x4a>
 80073d8:	0023      	movs	r3, r4
 80073da:	0034      	movs	r4, r6
 80073dc:	001e      	movs	r6, r3
 80073de:	2300      	movs	r3, #0
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	0038      	movs	r0, r7
 80073e4:	6861      	ldr	r1, [r4, #4]
 80073e6:	f7ff fce9 	bl	8006dbc <_Balloc>
 80073ea:	1e02      	subs	r2, r0, #0
 80073ec:	d103      	bne.n	80073f6 <__mdiff+0x5e>
 80073ee:	4b32      	ldr	r3, [pc, #200]	; (80074b8 <__mdiff+0x120>)
 80073f0:	4832      	ldr	r0, [pc, #200]	; (80074bc <__mdiff+0x124>)
 80073f2:	4934      	ldr	r1, [pc, #208]	; (80074c4 <__mdiff+0x12c>)
 80073f4:	e7e4      	b.n	80073c0 <__mdiff+0x28>
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	2700      	movs	r7, #0
 80073fa:	60c3      	str	r3, [r0, #12]
 80073fc:	6920      	ldr	r0, [r4, #16]
 80073fe:	3414      	adds	r4, #20
 8007400:	0083      	lsls	r3, r0, #2
 8007402:	18e3      	adds	r3, r4, r3
 8007404:	0021      	movs	r1, r4
 8007406:	9401      	str	r4, [sp, #4]
 8007408:	0034      	movs	r4, r6
 800740a:	9302      	str	r3, [sp, #8]
 800740c:	6933      	ldr	r3, [r6, #16]
 800740e:	3414      	adds	r4, #20
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	18e3      	adds	r3, r4, r3
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	0013      	movs	r3, r2
 8007418:	3314      	adds	r3, #20
 800741a:	469c      	mov	ip, r3
 800741c:	9305      	str	r3, [sp, #20]
 800741e:	9104      	str	r1, [sp, #16]
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	cc02      	ldmia	r4!, {r1}
 8007424:	cb20      	ldmia	r3!, {r5}
 8007426:	9304      	str	r3, [sp, #16]
 8007428:	b2ab      	uxth	r3, r5
 800742a:	19df      	adds	r7, r3, r7
 800742c:	b28b      	uxth	r3, r1
 800742e:	1afb      	subs	r3, r7, r3
 8007430:	0c09      	lsrs	r1, r1, #16
 8007432:	0c2d      	lsrs	r5, r5, #16
 8007434:	1a6d      	subs	r5, r5, r1
 8007436:	1419      	asrs	r1, r3, #16
 8007438:	1869      	adds	r1, r5, r1
 800743a:	b29b      	uxth	r3, r3
 800743c:	140f      	asrs	r7, r1, #16
 800743e:	0409      	lsls	r1, r1, #16
 8007440:	4319      	orrs	r1, r3
 8007442:	4663      	mov	r3, ip
 8007444:	c302      	stmia	r3!, {r1}
 8007446:	469c      	mov	ip, r3
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	42a3      	cmp	r3, r4
 800744c:	d8e8      	bhi.n	8007420 <__mdiff+0x88>
 800744e:	0031      	movs	r1, r6
 8007450:	9c03      	ldr	r4, [sp, #12]
 8007452:	3115      	adds	r1, #21
 8007454:	2304      	movs	r3, #4
 8007456:	428c      	cmp	r4, r1
 8007458:	d304      	bcc.n	8007464 <__mdiff+0xcc>
 800745a:	1ba3      	subs	r3, r4, r6
 800745c:	3b15      	subs	r3, #21
 800745e:	089b      	lsrs	r3, r3, #2
 8007460:	3301      	adds	r3, #1
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	9901      	ldr	r1, [sp, #4]
 8007466:	18cd      	adds	r5, r1, r3
 8007468:	9905      	ldr	r1, [sp, #20]
 800746a:	002e      	movs	r6, r5
 800746c:	18cb      	adds	r3, r1, r3
 800746e:	469c      	mov	ip, r3
 8007470:	9902      	ldr	r1, [sp, #8]
 8007472:	428e      	cmp	r6, r1
 8007474:	d310      	bcc.n	8007498 <__mdiff+0x100>
 8007476:	9e02      	ldr	r6, [sp, #8]
 8007478:	1ee9      	subs	r1, r5, #3
 800747a:	2400      	movs	r4, #0
 800747c:	428e      	cmp	r6, r1
 800747e:	d304      	bcc.n	800748a <__mdiff+0xf2>
 8007480:	0031      	movs	r1, r6
 8007482:	3103      	adds	r1, #3
 8007484:	1b49      	subs	r1, r1, r5
 8007486:	0889      	lsrs	r1, r1, #2
 8007488:	008c      	lsls	r4, r1, #2
 800748a:	191b      	adds	r3, r3, r4
 800748c:	3b04      	subs	r3, #4
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	2900      	cmp	r1, #0
 8007492:	d00f      	beq.n	80074b4 <__mdiff+0x11c>
 8007494:	6110      	str	r0, [r2, #16]
 8007496:	e798      	b.n	80073ca <__mdiff+0x32>
 8007498:	ce02      	ldmia	r6!, {r1}
 800749a:	b28c      	uxth	r4, r1
 800749c:	19e4      	adds	r4, r4, r7
 800749e:	0c0f      	lsrs	r7, r1, #16
 80074a0:	1421      	asrs	r1, r4, #16
 80074a2:	1879      	adds	r1, r7, r1
 80074a4:	b2a4      	uxth	r4, r4
 80074a6:	140f      	asrs	r7, r1, #16
 80074a8:	0409      	lsls	r1, r1, #16
 80074aa:	4321      	orrs	r1, r4
 80074ac:	4664      	mov	r4, ip
 80074ae:	c402      	stmia	r4!, {r1}
 80074b0:	46a4      	mov	ip, r4
 80074b2:	e7dd      	b.n	8007470 <__mdiff+0xd8>
 80074b4:	3801      	subs	r0, #1
 80074b6:	e7e9      	b.n	800748c <__mdiff+0xf4>
 80074b8:	080098a5 	.word	0x080098a5
 80074bc:	080098b6 	.word	0x080098b6
 80074c0:	00000237 	.word	0x00000237
 80074c4:	00000245 	.word	0x00000245

080074c8 <__ulp>:
 80074c8:	2000      	movs	r0, #0
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <__ulp+0x30>)
 80074cc:	4019      	ands	r1, r3
 80074ce:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <__ulp+0x34>)
 80074d0:	18c9      	adds	r1, r1, r3
 80074d2:	4281      	cmp	r1, r0
 80074d4:	dc06      	bgt.n	80074e4 <__ulp+0x1c>
 80074d6:	4249      	negs	r1, r1
 80074d8:	150b      	asrs	r3, r1, #20
 80074da:	2b13      	cmp	r3, #19
 80074dc:	dc03      	bgt.n	80074e6 <__ulp+0x1e>
 80074de:	2180      	movs	r1, #128	; 0x80
 80074e0:	0309      	lsls	r1, r1, #12
 80074e2:	4119      	asrs	r1, r3
 80074e4:	4770      	bx	lr
 80074e6:	3b14      	subs	r3, #20
 80074e8:	2001      	movs	r0, #1
 80074ea:	2b1e      	cmp	r3, #30
 80074ec:	dc02      	bgt.n	80074f4 <__ulp+0x2c>
 80074ee:	2080      	movs	r0, #128	; 0x80
 80074f0:	0600      	lsls	r0, r0, #24
 80074f2:	40d8      	lsrs	r0, r3
 80074f4:	2100      	movs	r1, #0
 80074f6:	e7f5      	b.n	80074e4 <__ulp+0x1c>
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	fcc00000 	.word	0xfcc00000

08007500 <__b2d>:
 8007500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007502:	0006      	movs	r6, r0
 8007504:	6903      	ldr	r3, [r0, #16]
 8007506:	3614      	adds	r6, #20
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	18f3      	adds	r3, r6, r3
 800750c:	1f1d      	subs	r5, r3, #4
 800750e:	682c      	ldr	r4, [r5, #0]
 8007510:	000f      	movs	r7, r1
 8007512:	0020      	movs	r0, r4
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f7ff fd49 	bl	8006fac <__hi0bits>
 800751a:	2220      	movs	r2, #32
 800751c:	1a12      	subs	r2, r2, r0
 800751e:	603a      	str	r2, [r7, #0]
 8007520:	0003      	movs	r3, r0
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <__b2d+0x94>)
 8007524:	280a      	cmp	r0, #10
 8007526:	dc15      	bgt.n	8007554 <__b2d+0x54>
 8007528:	210b      	movs	r1, #11
 800752a:	0027      	movs	r7, r4
 800752c:	1a09      	subs	r1, r1, r0
 800752e:	40cf      	lsrs	r7, r1
 8007530:	433a      	orrs	r2, r7
 8007532:	468c      	mov	ip, r1
 8007534:	0011      	movs	r1, r2
 8007536:	2200      	movs	r2, #0
 8007538:	42ae      	cmp	r6, r5
 800753a:	d202      	bcs.n	8007542 <__b2d+0x42>
 800753c:	9a01      	ldr	r2, [sp, #4]
 800753e:	3a08      	subs	r2, #8
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	3315      	adds	r3, #21
 8007544:	409c      	lsls	r4, r3
 8007546:	4663      	mov	r3, ip
 8007548:	0027      	movs	r7, r4
 800754a:	40da      	lsrs	r2, r3
 800754c:	4317      	orrs	r7, r2
 800754e:	0038      	movs	r0, r7
 8007550:	b003      	add	sp, #12
 8007552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007554:	2700      	movs	r7, #0
 8007556:	42ae      	cmp	r6, r5
 8007558:	d202      	bcs.n	8007560 <__b2d+0x60>
 800755a:	9d01      	ldr	r5, [sp, #4]
 800755c:	3d08      	subs	r5, #8
 800755e:	682f      	ldr	r7, [r5, #0]
 8007560:	210b      	movs	r1, #11
 8007562:	4249      	negs	r1, r1
 8007564:	468c      	mov	ip, r1
 8007566:	449c      	add	ip, r3
 8007568:	2b0b      	cmp	r3, #11
 800756a:	d010      	beq.n	800758e <__b2d+0x8e>
 800756c:	4661      	mov	r1, ip
 800756e:	2320      	movs	r3, #32
 8007570:	408c      	lsls	r4, r1
 8007572:	1a5b      	subs	r3, r3, r1
 8007574:	0039      	movs	r1, r7
 8007576:	40d9      	lsrs	r1, r3
 8007578:	430c      	orrs	r4, r1
 800757a:	4322      	orrs	r2, r4
 800757c:	0011      	movs	r1, r2
 800757e:	2200      	movs	r2, #0
 8007580:	42b5      	cmp	r5, r6
 8007582:	d901      	bls.n	8007588 <__b2d+0x88>
 8007584:	3d04      	subs	r5, #4
 8007586:	682a      	ldr	r2, [r5, #0]
 8007588:	4664      	mov	r4, ip
 800758a:	40a7      	lsls	r7, r4
 800758c:	e7dd      	b.n	800754a <__b2d+0x4a>
 800758e:	4322      	orrs	r2, r4
 8007590:	0011      	movs	r1, r2
 8007592:	e7dc      	b.n	800754e <__b2d+0x4e>
 8007594:	3ff00000 	.word	0x3ff00000

08007598 <__d2b>:
 8007598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800759a:	2101      	movs	r1, #1
 800759c:	0014      	movs	r4, r2
 800759e:	001d      	movs	r5, r3
 80075a0:	9f08      	ldr	r7, [sp, #32]
 80075a2:	f7ff fc0b 	bl	8006dbc <_Balloc>
 80075a6:	1e06      	subs	r6, r0, #0
 80075a8:	d105      	bne.n	80075b6 <__d2b+0x1e>
 80075aa:	0032      	movs	r2, r6
 80075ac:	4b24      	ldr	r3, [pc, #144]	; (8007640 <__d2b+0xa8>)
 80075ae:	4825      	ldr	r0, [pc, #148]	; (8007644 <__d2b+0xac>)
 80075b0:	4925      	ldr	r1, [pc, #148]	; (8007648 <__d2b+0xb0>)
 80075b2:	f001 f9d1 	bl	8008958 <__assert_func>
 80075b6:	032b      	lsls	r3, r5, #12
 80075b8:	006d      	lsls	r5, r5, #1
 80075ba:	0b1b      	lsrs	r3, r3, #12
 80075bc:	0d6d      	lsrs	r5, r5, #21
 80075be:	d125      	bne.n	800760c <__d2b+0x74>
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	2c00      	cmp	r4, #0
 80075c4:	d028      	beq.n	8007618 <__d2b+0x80>
 80075c6:	4668      	mov	r0, sp
 80075c8:	9400      	str	r4, [sp, #0]
 80075ca:	f7ff fd09 	bl	8006fe0 <__lo0bits>
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	9900      	ldr	r1, [sp, #0]
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d01e      	beq.n	8007614 <__d2b+0x7c>
 80075d6:	2220      	movs	r2, #32
 80075d8:	001c      	movs	r4, r3
 80075da:	1a12      	subs	r2, r2, r0
 80075dc:	4094      	lsls	r4, r2
 80075de:	0022      	movs	r2, r4
 80075e0:	40c3      	lsrs	r3, r0
 80075e2:	430a      	orrs	r2, r1
 80075e4:	6172      	str	r2, [r6, #20]
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	9c01      	ldr	r4, [sp, #4]
 80075ea:	61b4      	str	r4, [r6, #24]
 80075ec:	1e63      	subs	r3, r4, #1
 80075ee:	419c      	sbcs	r4, r3
 80075f0:	3401      	adds	r4, #1
 80075f2:	6134      	str	r4, [r6, #16]
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	d017      	beq.n	8007628 <__d2b+0x90>
 80075f8:	2435      	movs	r4, #53	; 0x35
 80075fa:	4b14      	ldr	r3, [pc, #80]	; (800764c <__d2b+0xb4>)
 80075fc:	18ed      	adds	r5, r5, r3
 80075fe:	182d      	adds	r5, r5, r0
 8007600:	603d      	str	r5, [r7, #0]
 8007602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007604:	1a24      	subs	r4, r4, r0
 8007606:	601c      	str	r4, [r3, #0]
 8007608:	0030      	movs	r0, r6
 800760a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800760c:	2280      	movs	r2, #128	; 0x80
 800760e:	0352      	lsls	r2, r2, #13
 8007610:	4313      	orrs	r3, r2
 8007612:	e7d5      	b.n	80075c0 <__d2b+0x28>
 8007614:	6171      	str	r1, [r6, #20]
 8007616:	e7e7      	b.n	80075e8 <__d2b+0x50>
 8007618:	a801      	add	r0, sp, #4
 800761a:	f7ff fce1 	bl	8006fe0 <__lo0bits>
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	2401      	movs	r4, #1
 8007622:	6173      	str	r3, [r6, #20]
 8007624:	3020      	adds	r0, #32
 8007626:	e7e4      	b.n	80075f2 <__d2b+0x5a>
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <__d2b+0xb8>)
 800762a:	18c0      	adds	r0, r0, r3
 800762c:	4b09      	ldr	r3, [pc, #36]	; (8007654 <__d2b+0xbc>)
 800762e:	6038      	str	r0, [r7, #0]
 8007630:	18e3      	adds	r3, r4, r3
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	18f3      	adds	r3, r6, r3
 8007636:	6958      	ldr	r0, [r3, #20]
 8007638:	f7ff fcb8 	bl	8006fac <__hi0bits>
 800763c:	0164      	lsls	r4, r4, #5
 800763e:	e7e0      	b.n	8007602 <__d2b+0x6a>
 8007640:	080098a5 	.word	0x080098a5
 8007644:	080098b6 	.word	0x080098b6
 8007648:	0000030f 	.word	0x0000030f
 800764c:	fffffbcd 	.word	0xfffffbcd
 8007650:	fffffbce 	.word	0xfffffbce
 8007654:	3fffffff 	.word	0x3fffffff

08007658 <__ratio>:
 8007658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765a:	b087      	sub	sp, #28
 800765c:	000f      	movs	r7, r1
 800765e:	a904      	add	r1, sp, #16
 8007660:	0006      	movs	r6, r0
 8007662:	f7ff ff4d 	bl	8007500 <__b2d>
 8007666:	9000      	str	r0, [sp, #0]
 8007668:	9101      	str	r1, [sp, #4]
 800766a:	9c00      	ldr	r4, [sp, #0]
 800766c:	9d01      	ldr	r5, [sp, #4]
 800766e:	0038      	movs	r0, r7
 8007670:	a905      	add	r1, sp, #20
 8007672:	f7ff ff45 	bl	8007500 <__b2d>
 8007676:	9002      	str	r0, [sp, #8]
 8007678:	9103      	str	r1, [sp, #12]
 800767a:	9a02      	ldr	r2, [sp, #8]
 800767c:	9b03      	ldr	r3, [sp, #12]
 800767e:	6930      	ldr	r0, [r6, #16]
 8007680:	6939      	ldr	r1, [r7, #16]
 8007682:	9e04      	ldr	r6, [sp, #16]
 8007684:	1a40      	subs	r0, r0, r1
 8007686:	9905      	ldr	r1, [sp, #20]
 8007688:	0140      	lsls	r0, r0, #5
 800768a:	1a71      	subs	r1, r6, r1
 800768c:	1841      	adds	r1, r0, r1
 800768e:	0508      	lsls	r0, r1, #20
 8007690:	2900      	cmp	r1, #0
 8007692:	dd07      	ble.n	80076a4 <__ratio+0x4c>
 8007694:	9901      	ldr	r1, [sp, #4]
 8007696:	1845      	adds	r5, r0, r1
 8007698:	0020      	movs	r0, r4
 800769a:	0029      	movs	r1, r5
 800769c:	f7f9 fada 	bl	8000c54 <__aeabi_ddiv>
 80076a0:	b007      	add	sp, #28
 80076a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a4:	9903      	ldr	r1, [sp, #12]
 80076a6:	1a0b      	subs	r3, r1, r0
 80076a8:	e7f6      	b.n	8007698 <__ratio+0x40>

080076aa <__copybits>:
 80076aa:	b570      	push	{r4, r5, r6, lr}
 80076ac:	0014      	movs	r4, r2
 80076ae:	0005      	movs	r5, r0
 80076b0:	3901      	subs	r1, #1
 80076b2:	6913      	ldr	r3, [r2, #16]
 80076b4:	1149      	asrs	r1, r1, #5
 80076b6:	3101      	adds	r1, #1
 80076b8:	0089      	lsls	r1, r1, #2
 80076ba:	3414      	adds	r4, #20
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	1841      	adds	r1, r0, r1
 80076c0:	18e3      	adds	r3, r4, r3
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	d80d      	bhi.n	80076e2 <__copybits+0x38>
 80076c6:	0014      	movs	r4, r2
 80076c8:	3411      	adds	r4, #17
 80076ca:	2500      	movs	r5, #0
 80076cc:	429c      	cmp	r4, r3
 80076ce:	d803      	bhi.n	80076d8 <__copybits+0x2e>
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	3b11      	subs	r3, #17
 80076d4:	089b      	lsrs	r3, r3, #2
 80076d6:	009d      	lsls	r5, r3, #2
 80076d8:	2300      	movs	r3, #0
 80076da:	1940      	adds	r0, r0, r5
 80076dc:	4281      	cmp	r1, r0
 80076de:	d803      	bhi.n	80076e8 <__copybits+0x3e>
 80076e0:	bd70      	pop	{r4, r5, r6, pc}
 80076e2:	cc40      	ldmia	r4!, {r6}
 80076e4:	c540      	stmia	r5!, {r6}
 80076e6:	e7ec      	b.n	80076c2 <__copybits+0x18>
 80076e8:	c008      	stmia	r0!, {r3}
 80076ea:	e7f7      	b.n	80076dc <__copybits+0x32>

080076ec <__any_on>:
 80076ec:	0002      	movs	r2, r0
 80076ee:	6900      	ldr	r0, [r0, #16]
 80076f0:	b510      	push	{r4, lr}
 80076f2:	3214      	adds	r2, #20
 80076f4:	114b      	asrs	r3, r1, #5
 80076f6:	4298      	cmp	r0, r3
 80076f8:	db13      	blt.n	8007722 <__any_on+0x36>
 80076fa:	dd0c      	ble.n	8007716 <__any_on+0x2a>
 80076fc:	241f      	movs	r4, #31
 80076fe:	0008      	movs	r0, r1
 8007700:	4020      	ands	r0, r4
 8007702:	4221      	tst	r1, r4
 8007704:	d007      	beq.n	8007716 <__any_on+0x2a>
 8007706:	0099      	lsls	r1, r3, #2
 8007708:	588c      	ldr	r4, [r1, r2]
 800770a:	0021      	movs	r1, r4
 800770c:	40c1      	lsrs	r1, r0
 800770e:	4081      	lsls	r1, r0
 8007710:	2001      	movs	r0, #1
 8007712:	428c      	cmp	r4, r1
 8007714:	d104      	bne.n	8007720 <__any_on+0x34>
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	18d3      	adds	r3, r2, r3
 800771a:	4293      	cmp	r3, r2
 800771c:	d803      	bhi.n	8007726 <__any_on+0x3a>
 800771e:	2000      	movs	r0, #0
 8007720:	bd10      	pop	{r4, pc}
 8007722:	0003      	movs	r3, r0
 8007724:	e7f7      	b.n	8007716 <__any_on+0x2a>
 8007726:	3b04      	subs	r3, #4
 8007728:	6819      	ldr	r1, [r3, #0]
 800772a:	2900      	cmp	r1, #0
 800772c:	d0f5      	beq.n	800771a <__any_on+0x2e>
 800772e:	2001      	movs	r0, #1
 8007730:	e7f6      	b.n	8007720 <__any_on+0x34>
	...

08007734 <sulp>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	0016      	movs	r6, r2
 8007738:	000d      	movs	r5, r1
 800773a:	f7ff fec5 	bl	80074c8 <__ulp>
 800773e:	2e00      	cmp	r6, #0
 8007740:	d00d      	beq.n	800775e <sulp+0x2a>
 8007742:	236b      	movs	r3, #107	; 0x6b
 8007744:	006a      	lsls	r2, r5, #1
 8007746:	0d52      	lsrs	r2, r2, #21
 8007748:	1a9b      	subs	r3, r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	dd07      	ble.n	800775e <sulp+0x2a>
 800774e:	2400      	movs	r4, #0
 8007750:	4a03      	ldr	r2, [pc, #12]	; (8007760 <sulp+0x2c>)
 8007752:	051b      	lsls	r3, r3, #20
 8007754:	189d      	adds	r5, r3, r2
 8007756:	002b      	movs	r3, r5
 8007758:	0022      	movs	r2, r4
 800775a:	f7f9 fe75 	bl	8001448 <__aeabi_dmul>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	3ff00000 	.word	0x3ff00000

08007764 <_strtod_l>:
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007766:	b0a1      	sub	sp, #132	; 0x84
 8007768:	9219      	str	r2, [sp, #100]	; 0x64
 800776a:	2200      	movs	r2, #0
 800776c:	2600      	movs	r6, #0
 800776e:	2700      	movs	r7, #0
 8007770:	9004      	str	r0, [sp, #16]
 8007772:	9107      	str	r1, [sp, #28]
 8007774:	921c      	str	r2, [sp, #112]	; 0x70
 8007776:	911b      	str	r1, [sp, #108]	; 0x6c
 8007778:	780a      	ldrb	r2, [r1, #0]
 800777a:	2a2b      	cmp	r2, #43	; 0x2b
 800777c:	d055      	beq.n	800782a <_strtod_l+0xc6>
 800777e:	d841      	bhi.n	8007804 <_strtod_l+0xa0>
 8007780:	2a0d      	cmp	r2, #13
 8007782:	d83b      	bhi.n	80077fc <_strtod_l+0x98>
 8007784:	2a08      	cmp	r2, #8
 8007786:	d83b      	bhi.n	8007800 <_strtod_l+0x9c>
 8007788:	2a00      	cmp	r2, #0
 800778a:	d044      	beq.n	8007816 <_strtod_l+0xb2>
 800778c:	2200      	movs	r2, #0
 800778e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007790:	2100      	movs	r1, #0
 8007792:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007794:	9109      	str	r1, [sp, #36]	; 0x24
 8007796:	782a      	ldrb	r2, [r5, #0]
 8007798:	2a30      	cmp	r2, #48	; 0x30
 800779a:	d000      	beq.n	800779e <_strtod_l+0x3a>
 800779c:	e085      	b.n	80078aa <_strtod_l+0x146>
 800779e:	786a      	ldrb	r2, [r5, #1]
 80077a0:	3120      	adds	r1, #32
 80077a2:	438a      	bics	r2, r1
 80077a4:	2a58      	cmp	r2, #88	; 0x58
 80077a6:	d000      	beq.n	80077aa <_strtod_l+0x46>
 80077a8:	e075      	b.n	8007896 <_strtod_l+0x132>
 80077aa:	9302      	str	r3, [sp, #8]
 80077ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077ae:	4a97      	ldr	r2, [pc, #604]	; (8007a0c <_strtod_l+0x2a8>)
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	ab1c      	add	r3, sp, #112	; 0x70
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	9804      	ldr	r0, [sp, #16]
 80077b8:	ab1d      	add	r3, sp, #116	; 0x74
 80077ba:	a91b      	add	r1, sp, #108	; 0x6c
 80077bc:	f001 f982 	bl	8008ac4 <__gethex>
 80077c0:	230f      	movs	r3, #15
 80077c2:	0002      	movs	r2, r0
 80077c4:	401a      	ands	r2, r3
 80077c6:	0004      	movs	r4, r0
 80077c8:	9205      	str	r2, [sp, #20]
 80077ca:	4218      	tst	r0, r3
 80077cc:	d005      	beq.n	80077da <_strtod_l+0x76>
 80077ce:	2a06      	cmp	r2, #6
 80077d0:	d12d      	bne.n	800782e <_strtod_l+0xca>
 80077d2:	1c6b      	adds	r3, r5, #1
 80077d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80077d6:	2300      	movs	r3, #0
 80077d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <_strtod_l+0x82>
 80077e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01b      	beq.n	8007824 <_strtod_l+0xc0>
 80077ec:	2380      	movs	r3, #128	; 0x80
 80077ee:	0032      	movs	r2, r6
 80077f0:	061b      	lsls	r3, r3, #24
 80077f2:	18fb      	adds	r3, r7, r3
 80077f4:	0010      	movs	r0, r2
 80077f6:	0019      	movs	r1, r3
 80077f8:	b021      	add	sp, #132	; 0x84
 80077fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077fc:	2a20      	cmp	r2, #32
 80077fe:	d1c5      	bne.n	800778c <_strtod_l+0x28>
 8007800:	3101      	adds	r1, #1
 8007802:	e7b8      	b.n	8007776 <_strtod_l+0x12>
 8007804:	2a2d      	cmp	r2, #45	; 0x2d
 8007806:	d1c1      	bne.n	800778c <_strtod_l+0x28>
 8007808:	3a2c      	subs	r2, #44	; 0x2c
 800780a:	920f      	str	r2, [sp, #60]	; 0x3c
 800780c:	1c4a      	adds	r2, r1, #1
 800780e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007810:	784a      	ldrb	r2, [r1, #1]
 8007812:	2a00      	cmp	r2, #0
 8007814:	d1bc      	bne.n	8007790 <_strtod_l+0x2c>
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	931b      	str	r3, [sp, #108]	; 0x6c
 800781a:	2300      	movs	r3, #0
 800781c:	930f      	str	r3, [sp, #60]	; 0x3c
 800781e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1dd      	bne.n	80077e0 <_strtod_l+0x7c>
 8007824:	0032      	movs	r2, r6
 8007826:	003b      	movs	r3, r7
 8007828:	e7e4      	b.n	80077f4 <_strtod_l+0x90>
 800782a:	2200      	movs	r2, #0
 800782c:	e7ed      	b.n	800780a <_strtod_l+0xa6>
 800782e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007830:	2a00      	cmp	r2, #0
 8007832:	d007      	beq.n	8007844 <_strtod_l+0xe0>
 8007834:	2135      	movs	r1, #53	; 0x35
 8007836:	a81e      	add	r0, sp, #120	; 0x78
 8007838:	f7ff ff37 	bl	80076aa <__copybits>
 800783c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800783e:	9804      	ldr	r0, [sp, #16]
 8007840:	f7ff fb00 	bl	8006e44 <_Bfree>
 8007844:	9805      	ldr	r0, [sp, #20]
 8007846:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007848:	3801      	subs	r0, #1
 800784a:	2804      	cmp	r0, #4
 800784c:	d806      	bhi.n	800785c <_strtod_l+0xf8>
 800784e:	f7f8 fc69 	bl	8000124 <__gnu_thumb1_case_uqi>
 8007852:	0312      	.short	0x0312
 8007854:	1e1c      	.short	0x1e1c
 8007856:	12          	.byte	0x12
 8007857:	00          	.byte	0x00
 8007858:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800785a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800785c:	05e4      	lsls	r4, r4, #23
 800785e:	d502      	bpl.n	8007866 <_strtod_l+0x102>
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	061b      	lsls	r3, r3, #24
 8007864:	431f      	orrs	r7, r3
 8007866:	4b6a      	ldr	r3, [pc, #424]	; (8007a10 <_strtod_l+0x2ac>)
 8007868:	423b      	tst	r3, r7
 800786a:	d1b6      	bne.n	80077da <_strtod_l+0x76>
 800786c:	f7fe fac4 	bl	8005df8 <__errno>
 8007870:	2322      	movs	r3, #34	; 0x22
 8007872:	6003      	str	r3, [r0, #0]
 8007874:	e7b1      	b.n	80077da <_strtod_l+0x76>
 8007876:	4967      	ldr	r1, [pc, #412]	; (8007a14 <_strtod_l+0x2b0>)
 8007878:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800787a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800787c:	400a      	ands	r2, r1
 800787e:	4966      	ldr	r1, [pc, #408]	; (8007a18 <_strtod_l+0x2b4>)
 8007880:	185b      	adds	r3, r3, r1
 8007882:	051b      	lsls	r3, r3, #20
 8007884:	431a      	orrs	r2, r3
 8007886:	0017      	movs	r7, r2
 8007888:	e7e8      	b.n	800785c <_strtod_l+0xf8>
 800788a:	4f61      	ldr	r7, [pc, #388]	; (8007a10 <_strtod_l+0x2ac>)
 800788c:	e7e6      	b.n	800785c <_strtod_l+0xf8>
 800788e:	2601      	movs	r6, #1
 8007890:	4f62      	ldr	r7, [pc, #392]	; (8007a1c <_strtod_l+0x2b8>)
 8007892:	4276      	negs	r6, r6
 8007894:	e7e2      	b.n	800785c <_strtod_l+0xf8>
 8007896:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	921b      	str	r2, [sp, #108]	; 0x6c
 800789c:	785b      	ldrb	r3, [r3, #1]
 800789e:	2b30      	cmp	r3, #48	; 0x30
 80078a0:	d0f9      	beq.n	8007896 <_strtod_l+0x132>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d099      	beq.n	80077da <_strtod_l+0x76>
 80078a6:	2301      	movs	r3, #1
 80078a8:	9309      	str	r3, [sp, #36]	; 0x24
 80078aa:	2500      	movs	r5, #0
 80078ac:	220a      	movs	r2, #10
 80078ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078b0:	950d      	str	r5, [sp, #52]	; 0x34
 80078b2:	9310      	str	r3, [sp, #64]	; 0x40
 80078b4:	9508      	str	r5, [sp, #32]
 80078b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80078b8:	7804      	ldrb	r4, [r0, #0]
 80078ba:	0023      	movs	r3, r4
 80078bc:	3b30      	subs	r3, #48	; 0x30
 80078be:	b2d9      	uxtb	r1, r3
 80078c0:	2909      	cmp	r1, #9
 80078c2:	d927      	bls.n	8007914 <_strtod_l+0x1b0>
 80078c4:	2201      	movs	r2, #1
 80078c6:	4956      	ldr	r1, [pc, #344]	; (8007a20 <_strtod_l+0x2bc>)
 80078c8:	f001 f812 	bl	80088f0 <strncmp>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d031      	beq.n	8007934 <_strtod_l+0x1d0>
 80078d0:	2000      	movs	r0, #0
 80078d2:	0023      	movs	r3, r4
 80078d4:	4684      	mov	ip, r0
 80078d6:	9a08      	ldr	r2, [sp, #32]
 80078d8:	900c      	str	r0, [sp, #48]	; 0x30
 80078da:	9205      	str	r2, [sp, #20]
 80078dc:	2220      	movs	r2, #32
 80078de:	0019      	movs	r1, r3
 80078e0:	4391      	bics	r1, r2
 80078e2:	000a      	movs	r2, r1
 80078e4:	2100      	movs	r1, #0
 80078e6:	9106      	str	r1, [sp, #24]
 80078e8:	2a45      	cmp	r2, #69	; 0x45
 80078ea:	d000      	beq.n	80078ee <_strtod_l+0x18a>
 80078ec:	e0c2      	b.n	8007a74 <_strtod_l+0x310>
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f2:	4303      	orrs	r3, r0
 80078f4:	4313      	orrs	r3, r2
 80078f6:	428b      	cmp	r3, r1
 80078f8:	d08d      	beq.n	8007816 <_strtod_l+0xb2>
 80078fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078fc:	9307      	str	r3, [sp, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	931b      	str	r3, [sp, #108]	; 0x6c
 8007902:	9b07      	ldr	r3, [sp, #28]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b2b      	cmp	r3, #43	; 0x2b
 8007908:	d071      	beq.n	80079ee <_strtod_l+0x28a>
 800790a:	000c      	movs	r4, r1
 800790c:	2b2d      	cmp	r3, #45	; 0x2d
 800790e:	d174      	bne.n	80079fa <_strtod_l+0x296>
 8007910:	2401      	movs	r4, #1
 8007912:	e06d      	b.n	80079f0 <_strtod_l+0x28c>
 8007914:	9908      	ldr	r1, [sp, #32]
 8007916:	2908      	cmp	r1, #8
 8007918:	dc09      	bgt.n	800792e <_strtod_l+0x1ca>
 800791a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800791c:	4351      	muls	r1, r2
 800791e:	185b      	adds	r3, r3, r1
 8007920:	930d      	str	r3, [sp, #52]	; 0x34
 8007922:	9b08      	ldr	r3, [sp, #32]
 8007924:	3001      	adds	r0, #1
 8007926:	3301      	adds	r3, #1
 8007928:	9308      	str	r3, [sp, #32]
 800792a:	901b      	str	r0, [sp, #108]	; 0x6c
 800792c:	e7c3      	b.n	80078b6 <_strtod_l+0x152>
 800792e:	4355      	muls	r5, r2
 8007930:	195d      	adds	r5, r3, r5
 8007932:	e7f6      	b.n	8007922 <_strtod_l+0x1be>
 8007934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	921b      	str	r2, [sp, #108]	; 0x6c
 800793a:	9a08      	ldr	r2, [sp, #32]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2a00      	cmp	r2, #0
 8007940:	d03a      	beq.n	80079b8 <_strtod_l+0x254>
 8007942:	900c      	str	r0, [sp, #48]	; 0x30
 8007944:	9205      	str	r2, [sp, #20]
 8007946:	001a      	movs	r2, r3
 8007948:	3a30      	subs	r2, #48	; 0x30
 800794a:	2a09      	cmp	r2, #9
 800794c:	d912      	bls.n	8007974 <_strtod_l+0x210>
 800794e:	2201      	movs	r2, #1
 8007950:	4694      	mov	ip, r2
 8007952:	e7c3      	b.n	80078dc <_strtod_l+0x178>
 8007954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007956:	3001      	adds	r0, #1
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	921b      	str	r2, [sp, #108]	; 0x6c
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b30      	cmp	r3, #48	; 0x30
 8007960:	d0f8      	beq.n	8007954 <_strtod_l+0x1f0>
 8007962:	001a      	movs	r2, r3
 8007964:	3a31      	subs	r2, #49	; 0x31
 8007966:	2a08      	cmp	r2, #8
 8007968:	d83c      	bhi.n	80079e4 <_strtod_l+0x280>
 800796a:	900c      	str	r0, [sp, #48]	; 0x30
 800796c:	2000      	movs	r0, #0
 800796e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007970:	9005      	str	r0, [sp, #20]
 8007972:	9210      	str	r2, [sp, #64]	; 0x40
 8007974:	001a      	movs	r2, r3
 8007976:	1c41      	adds	r1, r0, #1
 8007978:	3a30      	subs	r2, #48	; 0x30
 800797a:	2b30      	cmp	r3, #48	; 0x30
 800797c:	d016      	beq.n	80079ac <_strtod_l+0x248>
 800797e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007980:	185b      	adds	r3, r3, r1
 8007982:	930c      	str	r3, [sp, #48]	; 0x30
 8007984:	9b05      	ldr	r3, [sp, #20]
 8007986:	210a      	movs	r1, #10
 8007988:	469c      	mov	ip, r3
 800798a:	4484      	add	ip, r0
 800798c:	4563      	cmp	r3, ip
 800798e:	d115      	bne.n	80079bc <_strtod_l+0x258>
 8007990:	9905      	ldr	r1, [sp, #20]
 8007992:	9b05      	ldr	r3, [sp, #20]
 8007994:	3101      	adds	r1, #1
 8007996:	1809      	adds	r1, r1, r0
 8007998:	181b      	adds	r3, r3, r0
 800799a:	9105      	str	r1, [sp, #20]
 800799c:	2b08      	cmp	r3, #8
 800799e:	dc19      	bgt.n	80079d4 <_strtod_l+0x270>
 80079a0:	230a      	movs	r3, #10
 80079a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079a4:	434b      	muls	r3, r1
 80079a6:	2100      	movs	r1, #0
 80079a8:	18d3      	adds	r3, r2, r3
 80079aa:	930d      	str	r3, [sp, #52]	; 0x34
 80079ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079ae:	0008      	movs	r0, r1
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	e7c6      	b.n	8007946 <_strtod_l+0x1e2>
 80079b8:	9808      	ldr	r0, [sp, #32]
 80079ba:	e7d0      	b.n	800795e <_strtod_l+0x1fa>
 80079bc:	1c5c      	adds	r4, r3, #1
 80079be:	2b08      	cmp	r3, #8
 80079c0:	dc04      	bgt.n	80079cc <_strtod_l+0x268>
 80079c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c4:	434b      	muls	r3, r1
 80079c6:	930d      	str	r3, [sp, #52]	; 0x34
 80079c8:	0023      	movs	r3, r4
 80079ca:	e7df      	b.n	800798c <_strtod_l+0x228>
 80079cc:	2c10      	cmp	r4, #16
 80079ce:	dcfb      	bgt.n	80079c8 <_strtod_l+0x264>
 80079d0:	434d      	muls	r5, r1
 80079d2:	e7f9      	b.n	80079c8 <_strtod_l+0x264>
 80079d4:	9b05      	ldr	r3, [sp, #20]
 80079d6:	2100      	movs	r1, #0
 80079d8:	2b10      	cmp	r3, #16
 80079da:	dce7      	bgt.n	80079ac <_strtod_l+0x248>
 80079dc:	230a      	movs	r3, #10
 80079de:	435d      	muls	r5, r3
 80079e0:	1955      	adds	r5, r2, r5
 80079e2:	e7e3      	b.n	80079ac <_strtod_l+0x248>
 80079e4:	2200      	movs	r2, #0
 80079e6:	920c      	str	r2, [sp, #48]	; 0x30
 80079e8:	9205      	str	r2, [sp, #20]
 80079ea:	3201      	adds	r2, #1
 80079ec:	e7b0      	b.n	8007950 <_strtod_l+0x1ec>
 80079ee:	2400      	movs	r4, #0
 80079f0:	9b07      	ldr	r3, [sp, #28]
 80079f2:	3302      	adds	r3, #2
 80079f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80079f6:	9b07      	ldr	r3, [sp, #28]
 80079f8:	789b      	ldrb	r3, [r3, #2]
 80079fa:	001a      	movs	r2, r3
 80079fc:	3a30      	subs	r2, #48	; 0x30
 80079fe:	2a09      	cmp	r2, #9
 8007a00:	d914      	bls.n	8007a2c <_strtod_l+0x2c8>
 8007a02:	9a07      	ldr	r2, [sp, #28]
 8007a04:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a06:	2200      	movs	r2, #0
 8007a08:	e033      	b.n	8007a72 <_strtod_l+0x30e>
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	08009a10 	.word	0x08009a10
 8007a10:	7ff00000 	.word	0x7ff00000
 8007a14:	ffefffff 	.word	0xffefffff
 8007a18:	00000433 	.word	0x00000433
 8007a1c:	7fffffff 	.word	0x7fffffff
 8007a20:	08009a0c 	.word	0x08009a0c
 8007a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	2b30      	cmp	r3, #48	; 0x30
 8007a2e:	d0f9      	beq.n	8007a24 <_strtod_l+0x2c0>
 8007a30:	2200      	movs	r2, #0
 8007a32:	9206      	str	r2, [sp, #24]
 8007a34:	001a      	movs	r2, r3
 8007a36:	3a31      	subs	r2, #49	; 0x31
 8007a38:	2a08      	cmp	r2, #8
 8007a3a:	d81b      	bhi.n	8007a74 <_strtod_l+0x310>
 8007a3c:	3b30      	subs	r3, #48	; 0x30
 8007a3e:	930e      	str	r3, [sp, #56]	; 0x38
 8007a40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a46:	1c59      	adds	r1, r3, #1
 8007a48:	911b      	str	r1, [sp, #108]	; 0x6c
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	001a      	movs	r2, r3
 8007a4e:	3a30      	subs	r2, #48	; 0x30
 8007a50:	2a09      	cmp	r2, #9
 8007a52:	d93a      	bls.n	8007aca <_strtod_l+0x366>
 8007a54:	9a06      	ldr	r2, [sp, #24]
 8007a56:	1a8a      	subs	r2, r1, r2
 8007a58:	49b2      	ldr	r1, [pc, #712]	; (8007d24 <_strtod_l+0x5c0>)
 8007a5a:	9106      	str	r1, [sp, #24]
 8007a5c:	2a08      	cmp	r2, #8
 8007a5e:	dc04      	bgt.n	8007a6a <_strtod_l+0x306>
 8007a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a62:	9206      	str	r2, [sp, #24]
 8007a64:	428a      	cmp	r2, r1
 8007a66:	dd00      	ble.n	8007a6a <_strtod_l+0x306>
 8007a68:	9106      	str	r1, [sp, #24]
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	d002      	beq.n	8007a74 <_strtod_l+0x310>
 8007a6e:	9a06      	ldr	r2, [sp, #24]
 8007a70:	4252      	negs	r2, r2
 8007a72:	9206      	str	r2, [sp, #24]
 8007a74:	9a05      	ldr	r2, [sp, #20]
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d14d      	bne.n	8007b16 <_strtod_l+0x3b2>
 8007a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a7c:	4310      	orrs	r0, r2
 8007a7e:	d000      	beq.n	8007a82 <_strtod_l+0x31e>
 8007a80:	e6ab      	b.n	80077da <_strtod_l+0x76>
 8007a82:	4662      	mov	r2, ip
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	d000      	beq.n	8007a8a <_strtod_l+0x326>
 8007a88:	e6c5      	b.n	8007816 <_strtod_l+0xb2>
 8007a8a:	2b69      	cmp	r3, #105	; 0x69
 8007a8c:	d027      	beq.n	8007ade <_strtod_l+0x37a>
 8007a8e:	dc23      	bgt.n	8007ad8 <_strtod_l+0x374>
 8007a90:	2b49      	cmp	r3, #73	; 0x49
 8007a92:	d024      	beq.n	8007ade <_strtod_l+0x37a>
 8007a94:	2b4e      	cmp	r3, #78	; 0x4e
 8007a96:	d000      	beq.n	8007a9a <_strtod_l+0x336>
 8007a98:	e6bd      	b.n	8007816 <_strtod_l+0xb2>
 8007a9a:	49a3      	ldr	r1, [pc, #652]	; (8007d28 <_strtod_l+0x5c4>)
 8007a9c:	a81b      	add	r0, sp, #108	; 0x6c
 8007a9e:	f001 fa47 	bl	8008f30 <__match>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d100      	bne.n	8007aa8 <_strtod_l+0x344>
 8007aa6:	e6b6      	b.n	8007816 <_strtod_l+0xb2>
 8007aa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b28      	cmp	r3, #40	; 0x28
 8007aae:	d12c      	bne.n	8007b0a <_strtod_l+0x3a6>
 8007ab0:	499e      	ldr	r1, [pc, #632]	; (8007d2c <_strtod_l+0x5c8>)
 8007ab2:	aa1e      	add	r2, sp, #120	; 0x78
 8007ab4:	a81b      	add	r0, sp, #108	; 0x6c
 8007ab6:	f001 fa4f 	bl	8008f58 <__hexnan>
 8007aba:	2805      	cmp	r0, #5
 8007abc:	d125      	bne.n	8007b0a <_strtod_l+0x3a6>
 8007abe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ac0:	4a9b      	ldr	r2, [pc, #620]	; (8007d30 <_strtod_l+0x5cc>)
 8007ac2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	0017      	movs	r7, r2
 8007ac8:	e687      	b.n	80077da <_strtod_l+0x76>
 8007aca:	220a      	movs	r2, #10
 8007acc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007ace:	434a      	muls	r2, r1
 8007ad0:	18d2      	adds	r2, r2, r3
 8007ad2:	3a30      	subs	r2, #48	; 0x30
 8007ad4:	920e      	str	r2, [sp, #56]	; 0x38
 8007ad6:	e7b5      	b.n	8007a44 <_strtod_l+0x2e0>
 8007ad8:	2b6e      	cmp	r3, #110	; 0x6e
 8007ada:	d0de      	beq.n	8007a9a <_strtod_l+0x336>
 8007adc:	e69b      	b.n	8007816 <_strtod_l+0xb2>
 8007ade:	4995      	ldr	r1, [pc, #596]	; (8007d34 <_strtod_l+0x5d0>)
 8007ae0:	a81b      	add	r0, sp, #108	; 0x6c
 8007ae2:	f001 fa25 	bl	8008f30 <__match>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d100      	bne.n	8007aec <_strtod_l+0x388>
 8007aea:	e694      	b.n	8007816 <_strtod_l+0xb2>
 8007aec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aee:	4992      	ldr	r1, [pc, #584]	; (8007d38 <_strtod_l+0x5d4>)
 8007af0:	3b01      	subs	r3, #1
 8007af2:	a81b      	add	r0, sp, #108	; 0x6c
 8007af4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007af6:	f001 fa1b 	bl	8008f30 <__match>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d102      	bne.n	8007b04 <_strtod_l+0x3a0>
 8007afe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b00:	3301      	adds	r3, #1
 8007b02:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b04:	2600      	movs	r6, #0
 8007b06:	4f8a      	ldr	r7, [pc, #552]	; (8007d30 <_strtod_l+0x5cc>)
 8007b08:	e667      	b.n	80077da <_strtod_l+0x76>
 8007b0a:	488c      	ldr	r0, [pc, #560]	; (8007d3c <_strtod_l+0x5d8>)
 8007b0c:	f000 ff1e 	bl	800894c <nan>
 8007b10:	0006      	movs	r6, r0
 8007b12:	000f      	movs	r7, r1
 8007b14:	e661      	b.n	80077da <_strtod_l+0x76>
 8007b16:	9b06      	ldr	r3, [sp, #24]
 8007b18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <_strtod_l+0x3c4>
 8007b24:	9b05      	ldr	r3, [sp, #20]
 8007b26:	9308      	str	r3, [sp, #32]
 8007b28:	9c05      	ldr	r4, [sp, #20]
 8007b2a:	2c10      	cmp	r4, #16
 8007b2c:	dd00      	ble.n	8007b30 <_strtod_l+0x3cc>
 8007b2e:	2410      	movs	r4, #16
 8007b30:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b32:	f7fa fb51 	bl	80021d8 <__aeabi_ui2d>
 8007b36:	9b05      	ldr	r3, [sp, #20]
 8007b38:	0006      	movs	r6, r0
 8007b3a:	000f      	movs	r7, r1
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	dd15      	ble.n	8007b6c <_strtod_l+0x408>
 8007b40:	0022      	movs	r2, r4
 8007b42:	4b7f      	ldr	r3, [pc, #508]	; (8007d40 <_strtod_l+0x5dc>)
 8007b44:	3a09      	subs	r2, #9
 8007b46:	00d2      	lsls	r2, r2, #3
 8007b48:	189b      	adds	r3, r3, r2
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f7f9 fc7b 	bl	8001448 <__aeabi_dmul>
 8007b52:	0006      	movs	r6, r0
 8007b54:	0028      	movs	r0, r5
 8007b56:	000f      	movs	r7, r1
 8007b58:	f7fa fb3e 	bl	80021d8 <__aeabi_ui2d>
 8007b5c:	0002      	movs	r2, r0
 8007b5e:	000b      	movs	r3, r1
 8007b60:	0030      	movs	r0, r6
 8007b62:	0039      	movs	r1, r7
 8007b64:	f7f8 fd16 	bl	8000594 <__aeabi_dadd>
 8007b68:	0006      	movs	r6, r0
 8007b6a:	000f      	movs	r7, r1
 8007b6c:	9b05      	ldr	r3, [sp, #20]
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	dc39      	bgt.n	8007be6 <_strtod_l+0x482>
 8007b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d100      	bne.n	8007b7a <_strtod_l+0x416>
 8007b78:	e62f      	b.n	80077da <_strtod_l+0x76>
 8007b7a:	dd24      	ble.n	8007bc6 <_strtod_l+0x462>
 8007b7c:	2b16      	cmp	r3, #22
 8007b7e:	dc09      	bgt.n	8007b94 <_strtod_l+0x430>
 8007b80:	496f      	ldr	r1, [pc, #444]	; (8007d40 <_strtod_l+0x5dc>)
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	18c9      	adds	r1, r1, r3
 8007b86:	0032      	movs	r2, r6
 8007b88:	6808      	ldr	r0, [r1, #0]
 8007b8a:	6849      	ldr	r1, [r1, #4]
 8007b8c:	003b      	movs	r3, r7
 8007b8e:	f7f9 fc5b 	bl	8001448 <__aeabi_dmul>
 8007b92:	e7bd      	b.n	8007b10 <_strtod_l+0x3ac>
 8007b94:	2325      	movs	r3, #37	; 0x25
 8007b96:	9a05      	ldr	r2, [sp, #20]
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	db22      	blt.n	8007be6 <_strtod_l+0x482>
 8007ba0:	240f      	movs	r4, #15
 8007ba2:	9b05      	ldr	r3, [sp, #20]
 8007ba4:	4d66      	ldr	r5, [pc, #408]	; (8007d40 <_strtod_l+0x5dc>)
 8007ba6:	1ae4      	subs	r4, r4, r3
 8007ba8:	00e1      	lsls	r1, r4, #3
 8007baa:	1869      	adds	r1, r5, r1
 8007bac:	0032      	movs	r2, r6
 8007bae:	6808      	ldr	r0, [r1, #0]
 8007bb0:	6849      	ldr	r1, [r1, #4]
 8007bb2:	003b      	movs	r3, r7
 8007bb4:	f7f9 fc48 	bl	8001448 <__aeabi_dmul>
 8007bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bba:	1b1c      	subs	r4, r3, r4
 8007bbc:	00e4      	lsls	r4, r4, #3
 8007bbe:	192d      	adds	r5, r5, r4
 8007bc0:	682a      	ldr	r2, [r5, #0]
 8007bc2:	686b      	ldr	r3, [r5, #4]
 8007bc4:	e7e3      	b.n	8007b8e <_strtod_l+0x42a>
 8007bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc8:	3316      	adds	r3, #22
 8007bca:	db0c      	blt.n	8007be6 <_strtod_l+0x482>
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bd0:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <_strtod_l+0x5dc>)
 8007bd2:	1a52      	subs	r2, r2, r1
 8007bd4:	00d2      	lsls	r2, r2, #3
 8007bd6:	189b      	adds	r3, r3, r2
 8007bd8:	0030      	movs	r0, r6
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	0039      	movs	r1, r7
 8007be0:	f7f9 f838 	bl	8000c54 <__aeabi_ddiv>
 8007be4:	e794      	b.n	8007b10 <_strtod_l+0x3ac>
 8007be6:	9b05      	ldr	r3, [sp, #20]
 8007be8:	1b1c      	subs	r4, r3, r4
 8007bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bec:	18e4      	adds	r4, r4, r3
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	dd72      	ble.n	8007cd8 <_strtod_l+0x574>
 8007bf2:	220f      	movs	r2, #15
 8007bf4:	0023      	movs	r3, r4
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	4214      	tst	r4, r2
 8007bfa:	d00a      	beq.n	8007c12 <_strtod_l+0x4ae>
 8007bfc:	4950      	ldr	r1, [pc, #320]	; (8007d40 <_strtod_l+0x5dc>)
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	18c9      	adds	r1, r1, r3
 8007c02:	0032      	movs	r2, r6
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	6849      	ldr	r1, [r1, #4]
 8007c08:	003b      	movs	r3, r7
 8007c0a:	f7f9 fc1d 	bl	8001448 <__aeabi_dmul>
 8007c0e:	0006      	movs	r6, r0
 8007c10:	000f      	movs	r7, r1
 8007c12:	230f      	movs	r3, #15
 8007c14:	439c      	bics	r4, r3
 8007c16:	d04a      	beq.n	8007cae <_strtod_l+0x54a>
 8007c18:	3326      	adds	r3, #38	; 0x26
 8007c1a:	33ff      	adds	r3, #255	; 0xff
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	dd22      	ble.n	8007c66 <_strtod_l+0x502>
 8007c20:	2300      	movs	r3, #0
 8007c22:	9305      	str	r3, [sp, #20]
 8007c24:	9306      	str	r3, [sp, #24]
 8007c26:	930d      	str	r3, [sp, #52]	; 0x34
 8007c28:	9308      	str	r3, [sp, #32]
 8007c2a:	2322      	movs	r3, #34	; 0x22
 8007c2c:	2600      	movs	r6, #0
 8007c2e:	9a04      	ldr	r2, [sp, #16]
 8007c30:	4f3f      	ldr	r7, [pc, #252]	; (8007d30 <_strtod_l+0x5cc>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c36:	42b3      	cmp	r3, r6
 8007c38:	d100      	bne.n	8007c3c <_strtod_l+0x4d8>
 8007c3a:	e5ce      	b.n	80077da <_strtod_l+0x76>
 8007c3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c3e:	9804      	ldr	r0, [sp, #16]
 8007c40:	f7ff f900 	bl	8006e44 <_Bfree>
 8007c44:	9908      	ldr	r1, [sp, #32]
 8007c46:	9804      	ldr	r0, [sp, #16]
 8007c48:	f7ff f8fc 	bl	8006e44 <_Bfree>
 8007c4c:	9906      	ldr	r1, [sp, #24]
 8007c4e:	9804      	ldr	r0, [sp, #16]
 8007c50:	f7ff f8f8 	bl	8006e44 <_Bfree>
 8007c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c56:	9804      	ldr	r0, [sp, #16]
 8007c58:	f7ff f8f4 	bl	8006e44 <_Bfree>
 8007c5c:	9905      	ldr	r1, [sp, #20]
 8007c5e:	9804      	ldr	r0, [sp, #16]
 8007c60:	f7ff f8f0 	bl	8006e44 <_Bfree>
 8007c64:	e5b9      	b.n	80077da <_strtod_l+0x76>
 8007c66:	2300      	movs	r3, #0
 8007c68:	0030      	movs	r0, r6
 8007c6a:	0039      	movs	r1, r7
 8007c6c:	4d35      	ldr	r5, [pc, #212]	; (8007d44 <_strtod_l+0x5e0>)
 8007c6e:	1124      	asrs	r4, r4, #4
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	2c01      	cmp	r4, #1
 8007c74:	dc1e      	bgt.n	8007cb4 <_strtod_l+0x550>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <_strtod_l+0x51a>
 8007c7a:	0006      	movs	r6, r0
 8007c7c:	000f      	movs	r7, r1
 8007c7e:	4b32      	ldr	r3, [pc, #200]	; (8007d48 <_strtod_l+0x5e4>)
 8007c80:	9a07      	ldr	r2, [sp, #28]
 8007c82:	18ff      	adds	r7, r7, r3
 8007c84:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <_strtod_l+0x5e0>)
 8007c86:	00d2      	lsls	r2, r2, #3
 8007c88:	189d      	adds	r5, r3, r2
 8007c8a:	6828      	ldr	r0, [r5, #0]
 8007c8c:	6869      	ldr	r1, [r5, #4]
 8007c8e:	0032      	movs	r2, r6
 8007c90:	003b      	movs	r3, r7
 8007c92:	f7f9 fbd9 	bl	8001448 <__aeabi_dmul>
 8007c96:	4b26      	ldr	r3, [pc, #152]	; (8007d30 <_strtod_l+0x5cc>)
 8007c98:	4a2c      	ldr	r2, [pc, #176]	; (8007d4c <_strtod_l+0x5e8>)
 8007c9a:	0006      	movs	r6, r0
 8007c9c:	400b      	ands	r3, r1
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d8be      	bhi.n	8007c20 <_strtod_l+0x4bc>
 8007ca2:	4a2b      	ldr	r2, [pc, #172]	; (8007d50 <_strtod_l+0x5ec>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d913      	bls.n	8007cd0 <_strtod_l+0x56c>
 8007ca8:	2601      	movs	r6, #1
 8007caa:	4f2a      	ldr	r7, [pc, #168]	; (8007d54 <_strtod_l+0x5f0>)
 8007cac:	4276      	negs	r6, r6
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9307      	str	r3, [sp, #28]
 8007cb2:	e088      	b.n	8007dc6 <_strtod_l+0x662>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4214      	tst	r4, r2
 8007cb8:	d004      	beq.n	8007cc4 <_strtod_l+0x560>
 8007cba:	682a      	ldr	r2, [r5, #0]
 8007cbc:	686b      	ldr	r3, [r5, #4]
 8007cbe:	f7f9 fbc3 	bl	8001448 <__aeabi_dmul>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	9a07      	ldr	r2, [sp, #28]
 8007cc6:	1064      	asrs	r4, r4, #1
 8007cc8:	3201      	adds	r2, #1
 8007cca:	9207      	str	r2, [sp, #28]
 8007ccc:	3508      	adds	r5, #8
 8007cce:	e7d0      	b.n	8007c72 <_strtod_l+0x50e>
 8007cd0:	23d4      	movs	r3, #212	; 0xd4
 8007cd2:	049b      	lsls	r3, r3, #18
 8007cd4:	18cf      	adds	r7, r1, r3
 8007cd6:	e7ea      	b.n	8007cae <_strtod_l+0x54a>
 8007cd8:	2c00      	cmp	r4, #0
 8007cda:	d0e8      	beq.n	8007cae <_strtod_l+0x54a>
 8007cdc:	4264      	negs	r4, r4
 8007cde:	230f      	movs	r3, #15
 8007ce0:	0022      	movs	r2, r4
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	421c      	tst	r4, r3
 8007ce6:	d00a      	beq.n	8007cfe <_strtod_l+0x59a>
 8007ce8:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <_strtod_l+0x5dc>)
 8007cea:	00d2      	lsls	r2, r2, #3
 8007cec:	189b      	adds	r3, r3, r2
 8007cee:	0030      	movs	r0, r6
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	0039      	movs	r1, r7
 8007cf6:	f7f8 ffad 	bl	8000c54 <__aeabi_ddiv>
 8007cfa:	0006      	movs	r6, r0
 8007cfc:	000f      	movs	r7, r1
 8007cfe:	1124      	asrs	r4, r4, #4
 8007d00:	d0d5      	beq.n	8007cae <_strtod_l+0x54a>
 8007d02:	2c1f      	cmp	r4, #31
 8007d04:	dd28      	ble.n	8007d58 <_strtod_l+0x5f4>
 8007d06:	2300      	movs	r3, #0
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	9306      	str	r3, [sp, #24]
 8007d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d0e:	9308      	str	r3, [sp, #32]
 8007d10:	2322      	movs	r3, #34	; 0x22
 8007d12:	9a04      	ldr	r2, [sp, #16]
 8007d14:	2600      	movs	r6, #0
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1a:	2700      	movs	r7, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d18d      	bne.n	8007c3c <_strtod_l+0x4d8>
 8007d20:	e55b      	b.n	80077da <_strtod_l+0x76>
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	00004e1f 	.word	0x00004e1f
 8007d28:	080097fd 	.word	0x080097fd
 8007d2c:	08009a24 	.word	0x08009a24
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	080097f5 	.word	0x080097f5
 8007d38:	0800982c 	.word	0x0800982c
 8007d3c:	08009bb5 	.word	0x08009bb5
 8007d40:	08009938 	.word	0x08009938
 8007d44:	08009910 	.word	0x08009910
 8007d48:	fcb00000 	.word	0xfcb00000
 8007d4c:	7ca00000 	.word	0x7ca00000
 8007d50:	7c900000 	.word	0x7c900000
 8007d54:	7fefffff 	.word	0x7fefffff
 8007d58:	2310      	movs	r3, #16
 8007d5a:	0022      	movs	r2, r4
 8007d5c:	401a      	ands	r2, r3
 8007d5e:	9207      	str	r2, [sp, #28]
 8007d60:	421c      	tst	r4, r3
 8007d62:	d001      	beq.n	8007d68 <_strtod_l+0x604>
 8007d64:	335a      	adds	r3, #90	; 0x5a
 8007d66:	9307      	str	r3, [sp, #28]
 8007d68:	0030      	movs	r0, r6
 8007d6a:	0039      	movs	r1, r7
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4dc4      	ldr	r5, [pc, #784]	; (8008080 <_strtod_l+0x91c>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	4214      	tst	r4, r2
 8007d74:	d004      	beq.n	8007d80 <_strtod_l+0x61c>
 8007d76:	682a      	ldr	r2, [r5, #0]
 8007d78:	686b      	ldr	r3, [r5, #4]
 8007d7a:	f7f9 fb65 	bl	8001448 <__aeabi_dmul>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	1064      	asrs	r4, r4, #1
 8007d82:	3508      	adds	r5, #8
 8007d84:	2c00      	cmp	r4, #0
 8007d86:	d1f3      	bne.n	8007d70 <_strtod_l+0x60c>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <_strtod_l+0x62c>
 8007d8c:	0006      	movs	r6, r0
 8007d8e:	000f      	movs	r7, r1
 8007d90:	9b07      	ldr	r3, [sp, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00f      	beq.n	8007db6 <_strtod_l+0x652>
 8007d96:	236b      	movs	r3, #107	; 0x6b
 8007d98:	007a      	lsls	r2, r7, #1
 8007d9a:	0d52      	lsrs	r2, r2, #21
 8007d9c:	0039      	movs	r1, r7
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd08      	ble.n	8007db6 <_strtod_l+0x652>
 8007da4:	2b1f      	cmp	r3, #31
 8007da6:	dc00      	bgt.n	8007daa <_strtod_l+0x646>
 8007da8:	e121      	b.n	8007fee <_strtod_l+0x88a>
 8007daa:	2600      	movs	r6, #0
 8007dac:	2b34      	cmp	r3, #52	; 0x34
 8007dae:	dc00      	bgt.n	8007db2 <_strtod_l+0x64e>
 8007db0:	e116      	b.n	8007fe0 <_strtod_l+0x87c>
 8007db2:	27dc      	movs	r7, #220	; 0xdc
 8007db4:	04bf      	lsls	r7, r7, #18
 8007db6:	2200      	movs	r2, #0
 8007db8:	2300      	movs	r3, #0
 8007dba:	0030      	movs	r0, r6
 8007dbc:	0039      	movs	r1, r7
 8007dbe:	f7f8 fb4b 	bl	8000458 <__aeabi_dcmpeq>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d19f      	bne.n	8007d06 <_strtod_l+0x5a2>
 8007dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc8:	9a08      	ldr	r2, [sp, #32]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007dce:	9b05      	ldr	r3, [sp, #20]
 8007dd0:	9804      	ldr	r0, [sp, #16]
 8007dd2:	f7ff f89f 	bl	8006f14 <__s2b>
 8007dd6:	900d      	str	r0, [sp, #52]	; 0x34
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d100      	bne.n	8007dde <_strtod_l+0x67a>
 8007ddc:	e720      	b.n	8007c20 <_strtod_l+0x4bc>
 8007dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de0:	9906      	ldr	r1, [sp, #24]
 8007de2:	17da      	asrs	r2, r3, #31
 8007de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de6:	1a5b      	subs	r3, r3, r1
 8007de8:	401a      	ands	r2, r3
 8007dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dec:	9215      	str	r2, [sp, #84]	; 0x54
 8007dee:	43db      	mvns	r3, r3
 8007df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df2:	17db      	asrs	r3, r3, #31
 8007df4:	401a      	ands	r2, r3
 8007df6:	2300      	movs	r3, #0
 8007df8:	9218      	str	r2, [sp, #96]	; 0x60
 8007dfa:	9305      	str	r3, [sp, #20]
 8007dfc:	9306      	str	r3, [sp, #24]
 8007dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e00:	9804      	ldr	r0, [sp, #16]
 8007e02:	6859      	ldr	r1, [r3, #4]
 8007e04:	f7fe ffda 	bl	8006dbc <_Balloc>
 8007e08:	9008      	str	r0, [sp, #32]
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d100      	bne.n	8007e10 <_strtod_l+0x6ac>
 8007e0e:	e70c      	b.n	8007c2a <_strtod_l+0x4c6>
 8007e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e12:	300c      	adds	r0, #12
 8007e14:	0019      	movs	r1, r3
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	310c      	adds	r1, #12
 8007e1a:	3202      	adds	r2, #2
 8007e1c:	0092      	lsls	r2, r2, #2
 8007e1e:	f000 fd8b 	bl	8008938 <memcpy>
 8007e22:	ab1e      	add	r3, sp, #120	; 0x78
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	ab1d      	add	r3, sp, #116	; 0x74
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	0032      	movs	r2, r6
 8007e2c:	003b      	movs	r3, r7
 8007e2e:	9804      	ldr	r0, [sp, #16]
 8007e30:	9610      	str	r6, [sp, #64]	; 0x40
 8007e32:	9711      	str	r7, [sp, #68]	; 0x44
 8007e34:	f7ff fbb0 	bl	8007598 <__d2b>
 8007e38:	901c      	str	r0, [sp, #112]	; 0x70
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d100      	bne.n	8007e40 <_strtod_l+0x6dc>
 8007e3e:	e6f4      	b.n	8007c2a <_strtod_l+0x4c6>
 8007e40:	2101      	movs	r1, #1
 8007e42:	9804      	ldr	r0, [sp, #16]
 8007e44:	f7ff f8fa 	bl	800703c <__i2b>
 8007e48:	9006      	str	r0, [sp, #24]
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d100      	bne.n	8007e50 <_strtod_l+0x6ec>
 8007e4e:	e6ec      	b.n	8007c2a <_strtod_l+0x4c6>
 8007e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e54:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007e56:	1ad4      	subs	r4, r2, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	db01      	blt.n	8007e60 <_strtod_l+0x6fc>
 8007e5c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007e5e:	195d      	adds	r5, r3, r5
 8007e60:	9907      	ldr	r1, [sp, #28]
 8007e62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007e64:	1a5b      	subs	r3, r3, r1
 8007e66:	2136      	movs	r1, #54	; 0x36
 8007e68:	189b      	adds	r3, r3, r2
 8007e6a:	1a8a      	subs	r2, r1, r2
 8007e6c:	4985      	ldr	r1, [pc, #532]	; (8008084 <_strtod_l+0x920>)
 8007e6e:	2001      	movs	r0, #1
 8007e70:	468c      	mov	ip, r1
 8007e72:	2100      	movs	r1, #0
 8007e74:	3b01      	subs	r3, #1
 8007e76:	9114      	str	r1, [sp, #80]	; 0x50
 8007e78:	9012      	str	r0, [sp, #72]	; 0x48
 8007e7a:	4563      	cmp	r3, ip
 8007e7c:	da07      	bge.n	8007e8e <_strtod_l+0x72a>
 8007e7e:	4661      	mov	r1, ip
 8007e80:	1ac9      	subs	r1, r1, r3
 8007e82:	1a52      	subs	r2, r2, r1
 8007e84:	291f      	cmp	r1, #31
 8007e86:	dd00      	ble.n	8007e8a <_strtod_l+0x726>
 8007e88:	e0b6      	b.n	8007ff8 <_strtod_l+0x894>
 8007e8a:	4088      	lsls	r0, r1
 8007e8c:	9012      	str	r0, [sp, #72]	; 0x48
 8007e8e:	18ab      	adds	r3, r5, r2
 8007e90:	930c      	str	r3, [sp, #48]	; 0x30
 8007e92:	18a4      	adds	r4, r4, r2
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e98:	191c      	adds	r4, r3, r4
 8007e9a:	002b      	movs	r3, r5
 8007e9c:	4295      	cmp	r5, r2
 8007e9e:	dd00      	ble.n	8007ea2 <_strtod_l+0x73e>
 8007ea0:	0013      	movs	r3, r2
 8007ea2:	42a3      	cmp	r3, r4
 8007ea4:	dd00      	ble.n	8007ea8 <_strtod_l+0x744>
 8007ea6:	0023      	movs	r3, r4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dd04      	ble.n	8007eb6 <_strtod_l+0x752>
 8007eac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eae:	1ae4      	subs	r4, r4, r3
 8007eb0:	1ad2      	subs	r2, r2, r3
 8007eb2:	920c      	str	r2, [sp, #48]	; 0x30
 8007eb4:	1aed      	subs	r5, r5, r3
 8007eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dd17      	ble.n	8007eec <_strtod_l+0x788>
 8007ebc:	001a      	movs	r2, r3
 8007ebe:	9906      	ldr	r1, [sp, #24]
 8007ec0:	9804      	ldr	r0, [sp, #16]
 8007ec2:	f7ff f983 	bl	80071cc <__pow5mult>
 8007ec6:	9006      	str	r0, [sp, #24]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d100      	bne.n	8007ece <_strtod_l+0x76a>
 8007ecc:	e6ad      	b.n	8007c2a <_strtod_l+0x4c6>
 8007ece:	0001      	movs	r1, r0
 8007ed0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ed2:	9804      	ldr	r0, [sp, #16]
 8007ed4:	f7ff f8ca 	bl	800706c <__multiply>
 8007ed8:	900e      	str	r0, [sp, #56]	; 0x38
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d100      	bne.n	8007ee0 <_strtod_l+0x77c>
 8007ede:	e6a4      	b.n	8007c2a <_strtod_l+0x4c6>
 8007ee0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ee2:	9804      	ldr	r0, [sp, #16]
 8007ee4:	f7fe ffae 	bl	8006e44 <_Bfree>
 8007ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eea:	931c      	str	r3, [sp, #112]	; 0x70
 8007eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd00      	ble.n	8007ef4 <_strtod_l+0x790>
 8007ef2:	e087      	b.n	8008004 <_strtod_l+0x8a0>
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dd08      	ble.n	8007f0c <_strtod_l+0x7a8>
 8007efa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007efc:	9908      	ldr	r1, [sp, #32]
 8007efe:	9804      	ldr	r0, [sp, #16]
 8007f00:	f7ff f964 	bl	80071cc <__pow5mult>
 8007f04:	9008      	str	r0, [sp, #32]
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d100      	bne.n	8007f0c <_strtod_l+0x7a8>
 8007f0a:	e68e      	b.n	8007c2a <_strtod_l+0x4c6>
 8007f0c:	2c00      	cmp	r4, #0
 8007f0e:	dd08      	ble.n	8007f22 <_strtod_l+0x7be>
 8007f10:	0022      	movs	r2, r4
 8007f12:	9908      	ldr	r1, [sp, #32]
 8007f14:	9804      	ldr	r0, [sp, #16]
 8007f16:	f7ff f9b5 	bl	8007284 <__lshift>
 8007f1a:	9008      	str	r0, [sp, #32]
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d100      	bne.n	8007f22 <_strtod_l+0x7be>
 8007f20:	e683      	b.n	8007c2a <_strtod_l+0x4c6>
 8007f22:	2d00      	cmp	r5, #0
 8007f24:	dd08      	ble.n	8007f38 <_strtod_l+0x7d4>
 8007f26:	002a      	movs	r2, r5
 8007f28:	9906      	ldr	r1, [sp, #24]
 8007f2a:	9804      	ldr	r0, [sp, #16]
 8007f2c:	f7ff f9aa 	bl	8007284 <__lshift>
 8007f30:	9006      	str	r0, [sp, #24]
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d100      	bne.n	8007f38 <_strtod_l+0x7d4>
 8007f36:	e678      	b.n	8007c2a <_strtod_l+0x4c6>
 8007f38:	9a08      	ldr	r2, [sp, #32]
 8007f3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f3c:	9804      	ldr	r0, [sp, #16]
 8007f3e:	f7ff fa2b 	bl	8007398 <__mdiff>
 8007f42:	9005      	str	r0, [sp, #20]
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d100      	bne.n	8007f4a <_strtod_l+0x7e6>
 8007f48:	e66f      	b.n	8007c2a <_strtod_l+0x4c6>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	68c3      	ldr	r3, [r0, #12]
 8007f4e:	9906      	ldr	r1, [sp, #24]
 8007f50:	60c2      	str	r2, [r0, #12]
 8007f52:	930c      	str	r3, [sp, #48]	; 0x30
 8007f54:	f7ff fa04 	bl	8007360 <__mcmp>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	da5d      	bge.n	8008018 <_strtod_l+0x8b4>
 8007f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5e:	4333      	orrs	r3, r6
 8007f60:	d000      	beq.n	8007f64 <_strtod_l+0x800>
 8007f62:	e088      	b.n	8008076 <_strtod_l+0x912>
 8007f64:	033b      	lsls	r3, r7, #12
 8007f66:	d000      	beq.n	8007f6a <_strtod_l+0x806>
 8007f68:	e085      	b.n	8008076 <_strtod_l+0x912>
 8007f6a:	22d6      	movs	r2, #214	; 0xd6
 8007f6c:	4b46      	ldr	r3, [pc, #280]	; (8008088 <_strtod_l+0x924>)
 8007f6e:	04d2      	lsls	r2, r2, #19
 8007f70:	403b      	ands	r3, r7
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d97f      	bls.n	8008076 <_strtod_l+0x912>
 8007f76:	9b05      	ldr	r3, [sp, #20]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <_strtod_l+0x822>
 8007f7e:	9b05      	ldr	r3, [sp, #20]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	dd77      	ble.n	8008076 <_strtod_l+0x912>
 8007f86:	9905      	ldr	r1, [sp, #20]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	9804      	ldr	r0, [sp, #16]
 8007f8c:	f7ff f97a 	bl	8007284 <__lshift>
 8007f90:	9906      	ldr	r1, [sp, #24]
 8007f92:	9005      	str	r0, [sp, #20]
 8007f94:	f7ff f9e4 	bl	8007360 <__mcmp>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	dd6c      	ble.n	8008076 <_strtod_l+0x912>
 8007f9c:	9907      	ldr	r1, [sp, #28]
 8007f9e:	003b      	movs	r3, r7
 8007fa0:	4a39      	ldr	r2, [pc, #228]	; (8008088 <_strtod_l+0x924>)
 8007fa2:	2900      	cmp	r1, #0
 8007fa4:	d100      	bne.n	8007fa8 <_strtod_l+0x844>
 8007fa6:	e094      	b.n	80080d2 <_strtod_l+0x96e>
 8007fa8:	0011      	movs	r1, r2
 8007faa:	20d6      	movs	r0, #214	; 0xd6
 8007fac:	4039      	ands	r1, r7
 8007fae:	04c0      	lsls	r0, r0, #19
 8007fb0:	4281      	cmp	r1, r0
 8007fb2:	dd00      	ble.n	8007fb6 <_strtod_l+0x852>
 8007fb4:	e08d      	b.n	80080d2 <_strtod_l+0x96e>
 8007fb6:	23dc      	movs	r3, #220	; 0xdc
 8007fb8:	049b      	lsls	r3, r3, #18
 8007fba:	4299      	cmp	r1, r3
 8007fbc:	dc00      	bgt.n	8007fc0 <_strtod_l+0x85c>
 8007fbe:	e6a7      	b.n	8007d10 <_strtod_l+0x5ac>
 8007fc0:	0030      	movs	r0, r6
 8007fc2:	0039      	movs	r1, r7
 8007fc4:	4b31      	ldr	r3, [pc, #196]	; (800808c <_strtod_l+0x928>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f7f9 fa3e 	bl	8001448 <__aeabi_dmul>
 8007fcc:	4b2e      	ldr	r3, [pc, #184]	; (8008088 <_strtod_l+0x924>)
 8007fce:	0006      	movs	r6, r0
 8007fd0:	000f      	movs	r7, r1
 8007fd2:	420b      	tst	r3, r1
 8007fd4:	d000      	beq.n	8007fd8 <_strtod_l+0x874>
 8007fd6:	e631      	b.n	8007c3c <_strtod_l+0x4d8>
 8007fd8:	2322      	movs	r3, #34	; 0x22
 8007fda:	9a04      	ldr	r2, [sp, #16]
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e62d      	b.n	8007c3c <_strtod_l+0x4d8>
 8007fe0:	234b      	movs	r3, #75	; 0x4b
 8007fe2:	1a9a      	subs	r2, r3, r2
 8007fe4:	3b4c      	subs	r3, #76	; 0x4c
 8007fe6:	4093      	lsls	r3, r2
 8007fe8:	4019      	ands	r1, r3
 8007fea:	000f      	movs	r7, r1
 8007fec:	e6e3      	b.n	8007db6 <_strtod_l+0x652>
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4252      	negs	r2, r2
 8007ff2:	409a      	lsls	r2, r3
 8007ff4:	4016      	ands	r6, r2
 8007ff6:	e6de      	b.n	8007db6 <_strtod_l+0x652>
 8007ff8:	4925      	ldr	r1, [pc, #148]	; (8008090 <_strtod_l+0x92c>)
 8007ffa:	1acb      	subs	r3, r1, r3
 8007ffc:	0001      	movs	r1, r0
 8007ffe:	4099      	lsls	r1, r3
 8008000:	9114      	str	r1, [sp, #80]	; 0x50
 8008002:	e743      	b.n	8007e8c <_strtod_l+0x728>
 8008004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008006:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008008:	9804      	ldr	r0, [sp, #16]
 800800a:	f7ff f93b 	bl	8007284 <__lshift>
 800800e:	901c      	str	r0, [sp, #112]	; 0x70
 8008010:	2800      	cmp	r0, #0
 8008012:	d000      	beq.n	8008016 <_strtod_l+0x8b2>
 8008014:	e76e      	b.n	8007ef4 <_strtod_l+0x790>
 8008016:	e608      	b.n	8007c2a <_strtod_l+0x4c6>
 8008018:	970e      	str	r7, [sp, #56]	; 0x38
 800801a:	2800      	cmp	r0, #0
 800801c:	d177      	bne.n	800810e <_strtod_l+0x9aa>
 800801e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008020:	033b      	lsls	r3, r7, #12
 8008022:	0b1b      	lsrs	r3, r3, #12
 8008024:	2a00      	cmp	r2, #0
 8008026:	d039      	beq.n	800809c <_strtod_l+0x938>
 8008028:	4a1a      	ldr	r2, [pc, #104]	; (8008094 <_strtod_l+0x930>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d139      	bne.n	80080a2 <_strtod_l+0x93e>
 800802e:	2101      	movs	r1, #1
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	4249      	negs	r1, r1
 8008034:	0032      	movs	r2, r6
 8008036:	0008      	movs	r0, r1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <_strtod_l+0x8f0>
 800803c:	24d4      	movs	r4, #212	; 0xd4
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <_strtod_l+0x924>)
 8008040:	0008      	movs	r0, r1
 8008042:	403b      	ands	r3, r7
 8008044:	04e4      	lsls	r4, r4, #19
 8008046:	42a3      	cmp	r3, r4
 8008048:	d804      	bhi.n	8008054 <_strtod_l+0x8f0>
 800804a:	306c      	adds	r0, #108	; 0x6c
 800804c:	0d1b      	lsrs	r3, r3, #20
 800804e:	1ac3      	subs	r3, r0, r3
 8008050:	4099      	lsls	r1, r3
 8008052:	0008      	movs	r0, r1
 8008054:	4282      	cmp	r2, r0
 8008056:	d124      	bne.n	80080a2 <_strtod_l+0x93e>
 8008058:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <_strtod_l+0x934>)
 800805a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800805c:	4299      	cmp	r1, r3
 800805e:	d102      	bne.n	8008066 <_strtod_l+0x902>
 8008060:	3201      	adds	r2, #1
 8008062:	d100      	bne.n	8008066 <_strtod_l+0x902>
 8008064:	e5e1      	b.n	8007c2a <_strtod_l+0x4c6>
 8008066:	4b08      	ldr	r3, [pc, #32]	; (8008088 <_strtod_l+0x924>)
 8008068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800806a:	2600      	movs	r6, #0
 800806c:	401a      	ands	r2, r3
 800806e:	0013      	movs	r3, r2
 8008070:	2280      	movs	r2, #128	; 0x80
 8008072:	0352      	lsls	r2, r2, #13
 8008074:	189f      	adds	r7, r3, r2
 8008076:	9b07      	ldr	r3, [sp, #28]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1a1      	bne.n	8007fc0 <_strtod_l+0x85c>
 800807c:	e5de      	b.n	8007c3c <_strtod_l+0x4d8>
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	08009a38 	.word	0x08009a38
 8008084:	fffffc02 	.word	0xfffffc02
 8008088:	7ff00000 	.word	0x7ff00000
 800808c:	39500000 	.word	0x39500000
 8008090:	fffffbe2 	.word	0xfffffbe2
 8008094:	000fffff 	.word	0x000fffff
 8008098:	7fefffff 	.word	0x7fefffff
 800809c:	4333      	orrs	r3, r6
 800809e:	d100      	bne.n	80080a2 <_strtod_l+0x93e>
 80080a0:	e77c      	b.n	8007f9c <_strtod_l+0x838>
 80080a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01d      	beq.n	80080e4 <_strtod_l+0x980>
 80080a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080ac:	4213      	tst	r3, r2
 80080ae:	d0e2      	beq.n	8008076 <_strtod_l+0x912>
 80080b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080b2:	0030      	movs	r0, r6
 80080b4:	0039      	movs	r1, r7
 80080b6:	9a07      	ldr	r2, [sp, #28]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d017      	beq.n	80080ec <_strtod_l+0x988>
 80080bc:	f7ff fb3a 	bl	8007734 <sulp>
 80080c0:	0002      	movs	r2, r0
 80080c2:	000b      	movs	r3, r1
 80080c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080c8:	f7f8 fa64 	bl	8000594 <__aeabi_dadd>
 80080cc:	0006      	movs	r6, r0
 80080ce:	000f      	movs	r7, r1
 80080d0:	e7d1      	b.n	8008076 <_strtod_l+0x912>
 80080d2:	2601      	movs	r6, #1
 80080d4:	4013      	ands	r3, r2
 80080d6:	4a98      	ldr	r2, [pc, #608]	; (8008338 <_strtod_l+0xbd4>)
 80080d8:	4276      	negs	r6, r6
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	4a97      	ldr	r2, [pc, #604]	; (800833c <_strtod_l+0xbd8>)
 80080de:	431a      	orrs	r2, r3
 80080e0:	0017      	movs	r7, r2
 80080e2:	e7c8      	b.n	8008076 <_strtod_l+0x912>
 80080e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080e6:	4233      	tst	r3, r6
 80080e8:	d0c5      	beq.n	8008076 <_strtod_l+0x912>
 80080ea:	e7e1      	b.n	80080b0 <_strtod_l+0x94c>
 80080ec:	f7ff fb22 	bl	8007734 <sulp>
 80080f0:	0002      	movs	r2, r0
 80080f2:	000b      	movs	r3, r1
 80080f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080f8:	f7f9 fc68 	bl	80019cc <__aeabi_dsub>
 80080fc:	2200      	movs	r2, #0
 80080fe:	2300      	movs	r3, #0
 8008100:	0006      	movs	r6, r0
 8008102:	000f      	movs	r7, r1
 8008104:	f7f8 f9a8 	bl	8000458 <__aeabi_dcmpeq>
 8008108:	2800      	cmp	r0, #0
 800810a:	d0b4      	beq.n	8008076 <_strtod_l+0x912>
 800810c:	e600      	b.n	8007d10 <_strtod_l+0x5ac>
 800810e:	9906      	ldr	r1, [sp, #24]
 8008110:	9805      	ldr	r0, [sp, #20]
 8008112:	f7ff faa1 	bl	8007658 <__ratio>
 8008116:	2380      	movs	r3, #128	; 0x80
 8008118:	2200      	movs	r2, #0
 800811a:	05db      	lsls	r3, r3, #23
 800811c:	0004      	movs	r4, r0
 800811e:	000d      	movs	r5, r1
 8008120:	f7f8 f9aa 	bl	8000478 <__aeabi_dcmple>
 8008124:	2800      	cmp	r0, #0
 8008126:	d06d      	beq.n	8008204 <_strtod_l+0xaa0>
 8008128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800812a:	2b00      	cmp	r3, #0
 800812c:	d000      	beq.n	8008130 <_strtod_l+0x9cc>
 800812e:	e07e      	b.n	800822e <_strtod_l+0xaca>
 8008130:	2e00      	cmp	r6, #0
 8008132:	d158      	bne.n	80081e6 <_strtod_l+0xa82>
 8008134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008136:	031b      	lsls	r3, r3, #12
 8008138:	d000      	beq.n	800813c <_strtod_l+0x9d8>
 800813a:	e07f      	b.n	800823c <_strtod_l+0xad8>
 800813c:	2200      	movs	r2, #0
 800813e:	0020      	movs	r0, r4
 8008140:	0029      	movs	r1, r5
 8008142:	4b7f      	ldr	r3, [pc, #508]	; (8008340 <_strtod_l+0xbdc>)
 8008144:	f7f8 f98e 	bl	8000464 <__aeabi_dcmplt>
 8008148:	2800      	cmp	r0, #0
 800814a:	d158      	bne.n	80081fe <_strtod_l+0xa9a>
 800814c:	0020      	movs	r0, r4
 800814e:	0029      	movs	r1, r5
 8008150:	2200      	movs	r2, #0
 8008152:	4b7c      	ldr	r3, [pc, #496]	; (8008344 <_strtod_l+0xbe0>)
 8008154:	f7f9 f978 	bl	8001448 <__aeabi_dmul>
 8008158:	0004      	movs	r4, r0
 800815a:	000d      	movs	r5, r1
 800815c:	2380      	movs	r3, #128	; 0x80
 800815e:	061b      	lsls	r3, r3, #24
 8008160:	940a      	str	r4, [sp, #40]	; 0x28
 8008162:	18eb      	adds	r3, r5, r3
 8008164:	930b      	str	r3, [sp, #44]	; 0x2c
 8008166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816a:	9212      	str	r2, [sp, #72]	; 0x48
 800816c:	9313      	str	r3, [sp, #76]	; 0x4c
 800816e:	4a76      	ldr	r2, [pc, #472]	; (8008348 <_strtod_l+0xbe4>)
 8008170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008172:	4013      	ands	r3, r2
 8008174:	9314      	str	r3, [sp, #80]	; 0x50
 8008176:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008178:	4b74      	ldr	r3, [pc, #464]	; (800834c <_strtod_l+0xbe8>)
 800817a:	429a      	cmp	r2, r3
 800817c:	d000      	beq.n	8008180 <_strtod_l+0xa1c>
 800817e:	e091      	b.n	80082a4 <_strtod_l+0xb40>
 8008180:	4a73      	ldr	r2, [pc, #460]	; (8008350 <_strtod_l+0xbec>)
 8008182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008184:	4694      	mov	ip, r2
 8008186:	4463      	add	r3, ip
 8008188:	001f      	movs	r7, r3
 800818a:	0030      	movs	r0, r6
 800818c:	0019      	movs	r1, r3
 800818e:	f7ff f99b 	bl	80074c8 <__ulp>
 8008192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008196:	f7f9 f957 	bl	8001448 <__aeabi_dmul>
 800819a:	0032      	movs	r2, r6
 800819c:	003b      	movs	r3, r7
 800819e:	f7f8 f9f9 	bl	8000594 <__aeabi_dadd>
 80081a2:	4a69      	ldr	r2, [pc, #420]	; (8008348 <_strtod_l+0xbe4>)
 80081a4:	4b6b      	ldr	r3, [pc, #428]	; (8008354 <_strtod_l+0xbf0>)
 80081a6:	0006      	movs	r6, r0
 80081a8:	400a      	ands	r2, r1
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d949      	bls.n	8008242 <_strtod_l+0xade>
 80081ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081b0:	4b69      	ldr	r3, [pc, #420]	; (8008358 <_strtod_l+0xbf4>)
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d103      	bne.n	80081be <_strtod_l+0xa5a>
 80081b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081b8:	3301      	adds	r3, #1
 80081ba:	d100      	bne.n	80081be <_strtod_l+0xa5a>
 80081bc:	e535      	b.n	8007c2a <_strtod_l+0x4c6>
 80081be:	2601      	movs	r6, #1
 80081c0:	4f65      	ldr	r7, [pc, #404]	; (8008358 <_strtod_l+0xbf4>)
 80081c2:	4276      	negs	r6, r6
 80081c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081c6:	9804      	ldr	r0, [sp, #16]
 80081c8:	f7fe fe3c 	bl	8006e44 <_Bfree>
 80081cc:	9908      	ldr	r1, [sp, #32]
 80081ce:	9804      	ldr	r0, [sp, #16]
 80081d0:	f7fe fe38 	bl	8006e44 <_Bfree>
 80081d4:	9906      	ldr	r1, [sp, #24]
 80081d6:	9804      	ldr	r0, [sp, #16]
 80081d8:	f7fe fe34 	bl	8006e44 <_Bfree>
 80081dc:	9905      	ldr	r1, [sp, #20]
 80081de:	9804      	ldr	r0, [sp, #16]
 80081e0:	f7fe fe30 	bl	8006e44 <_Bfree>
 80081e4:	e60b      	b.n	8007dfe <_strtod_l+0x69a>
 80081e6:	2e01      	cmp	r6, #1
 80081e8:	d103      	bne.n	80081f2 <_strtod_l+0xa8e>
 80081ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d100      	bne.n	80081f2 <_strtod_l+0xa8e>
 80081f0:	e58e      	b.n	8007d10 <_strtod_l+0x5ac>
 80081f2:	2300      	movs	r3, #0
 80081f4:	4c59      	ldr	r4, [pc, #356]	; (800835c <_strtod_l+0xbf8>)
 80081f6:	930a      	str	r3, [sp, #40]	; 0x28
 80081f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80081fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80081fc:	e01c      	b.n	8008238 <_strtod_l+0xad4>
 80081fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008200:	4d50      	ldr	r5, [pc, #320]	; (8008344 <_strtod_l+0xbe0>)
 8008202:	e7ab      	b.n	800815c <_strtod_l+0x9f8>
 8008204:	2200      	movs	r2, #0
 8008206:	0020      	movs	r0, r4
 8008208:	0029      	movs	r1, r5
 800820a:	4b4e      	ldr	r3, [pc, #312]	; (8008344 <_strtod_l+0xbe0>)
 800820c:	f7f9 f91c 	bl	8001448 <__aeabi_dmul>
 8008210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008212:	0004      	movs	r4, r0
 8008214:	000b      	movs	r3, r1
 8008216:	000d      	movs	r5, r1
 8008218:	2a00      	cmp	r2, #0
 800821a:	d104      	bne.n	8008226 <_strtod_l+0xac2>
 800821c:	2280      	movs	r2, #128	; 0x80
 800821e:	0612      	lsls	r2, r2, #24
 8008220:	900a      	str	r0, [sp, #40]	; 0x28
 8008222:	188b      	adds	r3, r1, r2
 8008224:	e79e      	b.n	8008164 <_strtod_l+0xa00>
 8008226:	0002      	movs	r2, r0
 8008228:	920a      	str	r2, [sp, #40]	; 0x28
 800822a:	930b      	str	r3, [sp, #44]	; 0x2c
 800822c:	e79b      	b.n	8008166 <_strtod_l+0xa02>
 800822e:	2300      	movs	r3, #0
 8008230:	4c43      	ldr	r4, [pc, #268]	; (8008340 <_strtod_l+0xbdc>)
 8008232:	930a      	str	r3, [sp, #40]	; 0x28
 8008234:	940b      	str	r4, [sp, #44]	; 0x2c
 8008236:	2400      	movs	r4, #0
 8008238:	4d41      	ldr	r5, [pc, #260]	; (8008340 <_strtod_l+0xbdc>)
 800823a:	e794      	b.n	8008166 <_strtod_l+0xa02>
 800823c:	2300      	movs	r3, #0
 800823e:	4c47      	ldr	r4, [pc, #284]	; (800835c <_strtod_l+0xbf8>)
 8008240:	e7f7      	b.n	8008232 <_strtod_l+0xace>
 8008242:	23d4      	movs	r3, #212	; 0xd4
 8008244:	049b      	lsls	r3, r3, #18
 8008246:	18cf      	adds	r7, r1, r3
 8008248:	9b07      	ldr	r3, [sp, #28]
 800824a:	970e      	str	r7, [sp, #56]	; 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1b9      	bne.n	80081c4 <_strtod_l+0xa60>
 8008250:	4b3d      	ldr	r3, [pc, #244]	; (8008348 <_strtod_l+0xbe4>)
 8008252:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008254:	403b      	ands	r3, r7
 8008256:	429a      	cmp	r2, r3
 8008258:	d1b4      	bne.n	80081c4 <_strtod_l+0xa60>
 800825a:	0020      	movs	r0, r4
 800825c:	0029      	movs	r1, r5
 800825e:	f7f8 f947 	bl	80004f0 <__aeabi_d2lz>
 8008262:	f7f8 f981 	bl	8000568 <__aeabi_l2d>
 8008266:	0002      	movs	r2, r0
 8008268:	000b      	movs	r3, r1
 800826a:	0020      	movs	r0, r4
 800826c:	0029      	movs	r1, r5
 800826e:	f7f9 fbad 	bl	80019cc <__aeabi_dsub>
 8008272:	033b      	lsls	r3, r7, #12
 8008274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008276:	0b1b      	lsrs	r3, r3, #12
 8008278:	4333      	orrs	r3, r6
 800827a:	4313      	orrs	r3, r2
 800827c:	0004      	movs	r4, r0
 800827e:	000d      	movs	r5, r1
 8008280:	4a37      	ldr	r2, [pc, #220]	; (8008360 <_strtod_l+0xbfc>)
 8008282:	2b00      	cmp	r3, #0
 8008284:	d054      	beq.n	8008330 <_strtod_l+0xbcc>
 8008286:	4b37      	ldr	r3, [pc, #220]	; (8008364 <_strtod_l+0xc00>)
 8008288:	f7f8 f8ec 	bl	8000464 <__aeabi_dcmplt>
 800828c:	2800      	cmp	r0, #0
 800828e:	d000      	beq.n	8008292 <_strtod_l+0xb2e>
 8008290:	e4d4      	b.n	8007c3c <_strtod_l+0x4d8>
 8008292:	0020      	movs	r0, r4
 8008294:	0029      	movs	r1, r5
 8008296:	4a34      	ldr	r2, [pc, #208]	; (8008368 <_strtod_l+0xc04>)
 8008298:	4b2a      	ldr	r3, [pc, #168]	; (8008344 <_strtod_l+0xbe0>)
 800829a:	f7f8 f8f7 	bl	800048c <__aeabi_dcmpgt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d090      	beq.n	80081c4 <_strtod_l+0xa60>
 80082a2:	e4cb      	b.n	8007c3c <_strtod_l+0x4d8>
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d02b      	beq.n	8008302 <_strtod_l+0xb9e>
 80082aa:	23d4      	movs	r3, #212	; 0xd4
 80082ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082ae:	04db      	lsls	r3, r3, #19
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d826      	bhi.n	8008302 <_strtod_l+0xb9e>
 80082b4:	0020      	movs	r0, r4
 80082b6:	0029      	movs	r1, r5
 80082b8:	4a2c      	ldr	r2, [pc, #176]	; (800836c <_strtod_l+0xc08>)
 80082ba:	4b2d      	ldr	r3, [pc, #180]	; (8008370 <_strtod_l+0xc0c>)
 80082bc:	f7f8 f8dc 	bl	8000478 <__aeabi_dcmple>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d017      	beq.n	80082f4 <_strtod_l+0xb90>
 80082c4:	0020      	movs	r0, r4
 80082c6:	0029      	movs	r1, r5
 80082c8:	f7f8 f8f4 	bl	80004b4 <__aeabi_d2uiz>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d100      	bne.n	80082d2 <_strtod_l+0xb6e>
 80082d0:	3001      	adds	r0, #1
 80082d2:	f7f9 ff81 	bl	80021d8 <__aeabi_ui2d>
 80082d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082d8:	0004      	movs	r4, r0
 80082da:	000b      	movs	r3, r1
 80082dc:	000d      	movs	r5, r1
 80082de:	2a00      	cmp	r2, #0
 80082e0:	d122      	bne.n	8008328 <_strtod_l+0xbc4>
 80082e2:	2280      	movs	r2, #128	; 0x80
 80082e4:	0612      	lsls	r2, r2, #24
 80082e6:	188b      	adds	r3, r1, r2
 80082e8:	9016      	str	r0, [sp, #88]	; 0x58
 80082ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80082ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f0:	9212      	str	r2, [sp, #72]	; 0x48
 80082f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80082f4:	22d6      	movs	r2, #214	; 0xd6
 80082f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082f8:	04d2      	lsls	r2, r2, #19
 80082fa:	189b      	adds	r3, r3, r2
 80082fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	9313      	str	r3, [sp, #76]	; 0x4c
 8008302:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008304:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008306:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008308:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800830a:	f7ff f8dd 	bl	80074c8 <__ulp>
 800830e:	0002      	movs	r2, r0
 8008310:	000b      	movs	r3, r1
 8008312:	0030      	movs	r0, r6
 8008314:	0039      	movs	r1, r7
 8008316:	f7f9 f897 	bl	8001448 <__aeabi_dmul>
 800831a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800831c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800831e:	f7f8 f939 	bl	8000594 <__aeabi_dadd>
 8008322:	0006      	movs	r6, r0
 8008324:	000f      	movs	r7, r1
 8008326:	e78f      	b.n	8008248 <_strtod_l+0xae4>
 8008328:	0002      	movs	r2, r0
 800832a:	9216      	str	r2, [sp, #88]	; 0x58
 800832c:	9317      	str	r3, [sp, #92]	; 0x5c
 800832e:	e7dd      	b.n	80082ec <_strtod_l+0xb88>
 8008330:	4b10      	ldr	r3, [pc, #64]	; (8008374 <_strtod_l+0xc10>)
 8008332:	f7f8 f897 	bl	8000464 <__aeabi_dcmplt>
 8008336:	e7b2      	b.n	800829e <_strtod_l+0xb3a>
 8008338:	fff00000 	.word	0xfff00000
 800833c:	000fffff 	.word	0x000fffff
 8008340:	3ff00000 	.word	0x3ff00000
 8008344:	3fe00000 	.word	0x3fe00000
 8008348:	7ff00000 	.word	0x7ff00000
 800834c:	7fe00000 	.word	0x7fe00000
 8008350:	fcb00000 	.word	0xfcb00000
 8008354:	7c9fffff 	.word	0x7c9fffff
 8008358:	7fefffff 	.word	0x7fefffff
 800835c:	bff00000 	.word	0xbff00000
 8008360:	94a03595 	.word	0x94a03595
 8008364:	3fdfffff 	.word	0x3fdfffff
 8008368:	35afe535 	.word	0x35afe535
 800836c:	ffc00000 	.word	0xffc00000
 8008370:	41dfffff 	.word	0x41dfffff
 8008374:	3fcfffff 	.word	0x3fcfffff

08008378 <_strtod_r>:
 8008378:	b510      	push	{r4, lr}
 800837a:	4b02      	ldr	r3, [pc, #8]	; (8008384 <_strtod_r+0xc>)
 800837c:	f7ff f9f2 	bl	8007764 <_strtod_l>
 8008380:	bd10      	pop	{r4, pc}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	20000068 	.word	0x20000068

08008388 <_strtol_l.constprop.0>:
 8008388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838a:	b087      	sub	sp, #28
 800838c:	001e      	movs	r6, r3
 800838e:	9005      	str	r0, [sp, #20]
 8008390:	9101      	str	r1, [sp, #4]
 8008392:	9202      	str	r2, [sp, #8]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d048      	beq.n	800842a <_strtol_l.constprop.0+0xa2>
 8008398:	000b      	movs	r3, r1
 800839a:	2e24      	cmp	r6, #36	; 0x24
 800839c:	d845      	bhi.n	800842a <_strtol_l.constprop.0+0xa2>
 800839e:	4a3b      	ldr	r2, [pc, #236]	; (800848c <_strtol_l.constprop.0+0x104>)
 80083a0:	2108      	movs	r1, #8
 80083a2:	4694      	mov	ip, r2
 80083a4:	001a      	movs	r2, r3
 80083a6:	4660      	mov	r0, ip
 80083a8:	7814      	ldrb	r4, [r2, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	5d00      	ldrb	r0, [r0, r4]
 80083ae:	001d      	movs	r5, r3
 80083b0:	0007      	movs	r7, r0
 80083b2:	400f      	ands	r7, r1
 80083b4:	4208      	tst	r0, r1
 80083b6:	d1f5      	bne.n	80083a4 <_strtol_l.constprop.0+0x1c>
 80083b8:	2c2d      	cmp	r4, #45	; 0x2d
 80083ba:	d13d      	bne.n	8008438 <_strtol_l.constprop.0+0xb0>
 80083bc:	2701      	movs	r7, #1
 80083be:	781c      	ldrb	r4, [r3, #0]
 80083c0:	1c95      	adds	r5, r2, #2
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	d05e      	beq.n	8008484 <_strtol_l.constprop.0+0xfc>
 80083c6:	2e10      	cmp	r6, #16
 80083c8:	d109      	bne.n	80083de <_strtol_l.constprop.0+0x56>
 80083ca:	2c30      	cmp	r4, #48	; 0x30
 80083cc:	d107      	bne.n	80083de <_strtol_l.constprop.0+0x56>
 80083ce:	2220      	movs	r2, #32
 80083d0:	782b      	ldrb	r3, [r5, #0]
 80083d2:	4393      	bics	r3, r2
 80083d4:	2b58      	cmp	r3, #88	; 0x58
 80083d6:	d150      	bne.n	800847a <_strtol_l.constprop.0+0xf2>
 80083d8:	2610      	movs	r6, #16
 80083da:	786c      	ldrb	r4, [r5, #1]
 80083dc:	3502      	adds	r5, #2
 80083de:	4b2c      	ldr	r3, [pc, #176]	; (8008490 <_strtol_l.constprop.0+0x108>)
 80083e0:	0031      	movs	r1, r6
 80083e2:	18fb      	adds	r3, r7, r3
 80083e4:	0018      	movs	r0, r3
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	f7f7 ff36 	bl	8000258 <__aeabi_uidivmod>
 80083ec:	2200      	movs	r2, #0
 80083ee:	9104      	str	r1, [sp, #16]
 80083f0:	2101      	movs	r1, #1
 80083f2:	4684      	mov	ip, r0
 80083f4:	0010      	movs	r0, r2
 80083f6:	4249      	negs	r1, r1
 80083f8:	0023      	movs	r3, r4
 80083fa:	3b30      	subs	r3, #48	; 0x30
 80083fc:	2b09      	cmp	r3, #9
 80083fe:	d903      	bls.n	8008408 <_strtol_l.constprop.0+0x80>
 8008400:	3b11      	subs	r3, #17
 8008402:	2b19      	cmp	r3, #25
 8008404:	d81d      	bhi.n	8008442 <_strtol_l.constprop.0+0xba>
 8008406:	330a      	adds	r3, #10
 8008408:	429e      	cmp	r6, r3
 800840a:	dd1e      	ble.n	800844a <_strtol_l.constprop.0+0xc2>
 800840c:	1c54      	adds	r4, r2, #1
 800840e:	d009      	beq.n	8008424 <_strtol_l.constprop.0+0x9c>
 8008410:	000a      	movs	r2, r1
 8008412:	4584      	cmp	ip, r0
 8008414:	d306      	bcc.n	8008424 <_strtol_l.constprop.0+0x9c>
 8008416:	d102      	bne.n	800841e <_strtol_l.constprop.0+0x96>
 8008418:	9c04      	ldr	r4, [sp, #16]
 800841a:	429c      	cmp	r4, r3
 800841c:	db02      	blt.n	8008424 <_strtol_l.constprop.0+0x9c>
 800841e:	2201      	movs	r2, #1
 8008420:	4370      	muls	r0, r6
 8008422:	1818      	adds	r0, r3, r0
 8008424:	782c      	ldrb	r4, [r5, #0]
 8008426:	3501      	adds	r5, #1
 8008428:	e7e6      	b.n	80083f8 <_strtol_l.constprop.0+0x70>
 800842a:	f7fd fce5 	bl	8005df8 <__errno>
 800842e:	2316      	movs	r3, #22
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	2000      	movs	r0, #0
 8008434:	b007      	add	sp, #28
 8008436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008438:	2c2b      	cmp	r4, #43	; 0x2b
 800843a:	d1c2      	bne.n	80083c2 <_strtol_l.constprop.0+0x3a>
 800843c:	781c      	ldrb	r4, [r3, #0]
 800843e:	1c95      	adds	r5, r2, #2
 8008440:	e7bf      	b.n	80083c2 <_strtol_l.constprop.0+0x3a>
 8008442:	0023      	movs	r3, r4
 8008444:	3b61      	subs	r3, #97	; 0x61
 8008446:	2b19      	cmp	r3, #25
 8008448:	d9dd      	bls.n	8008406 <_strtol_l.constprop.0+0x7e>
 800844a:	1c53      	adds	r3, r2, #1
 800844c:	d109      	bne.n	8008462 <_strtol_l.constprop.0+0xda>
 800844e:	2322      	movs	r3, #34	; 0x22
 8008450:	9a05      	ldr	r2, [sp, #20]
 8008452:	9803      	ldr	r0, [sp, #12]
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0eb      	beq.n	8008434 <_strtol_l.constprop.0+0xac>
 800845c:	1e6b      	subs	r3, r5, #1
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	e007      	b.n	8008472 <_strtol_l.constprop.0+0xea>
 8008462:	2f00      	cmp	r7, #0
 8008464:	d000      	beq.n	8008468 <_strtol_l.constprop.0+0xe0>
 8008466:	4240      	negs	r0, r0
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0e2      	beq.n	8008434 <_strtol_l.constprop.0+0xac>
 800846e:	2a00      	cmp	r2, #0
 8008470:	d1f4      	bne.n	800845c <_strtol_l.constprop.0+0xd4>
 8008472:	9b02      	ldr	r3, [sp, #8]
 8008474:	9a01      	ldr	r2, [sp, #4]
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e7dc      	b.n	8008434 <_strtol_l.constprop.0+0xac>
 800847a:	2430      	movs	r4, #48	; 0x30
 800847c:	2e00      	cmp	r6, #0
 800847e:	d1ae      	bne.n	80083de <_strtol_l.constprop.0+0x56>
 8008480:	3608      	adds	r6, #8
 8008482:	e7ac      	b.n	80083de <_strtol_l.constprop.0+0x56>
 8008484:	2c30      	cmp	r4, #48	; 0x30
 8008486:	d0a2      	beq.n	80083ce <_strtol_l.constprop.0+0x46>
 8008488:	260a      	movs	r6, #10
 800848a:	e7a8      	b.n	80083de <_strtol_l.constprop.0+0x56>
 800848c:	08009a61 	.word	0x08009a61
 8008490:	7fffffff 	.word	0x7fffffff

08008494 <_strtol_r>:
 8008494:	b510      	push	{r4, lr}
 8008496:	f7ff ff77 	bl	8008388 <_strtol_l.constprop.0>
 800849a:	bd10      	pop	{r4, pc}

0800849c <__ssputs_r>:
 800849c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800849e:	b085      	sub	sp, #20
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	9203      	str	r2, [sp, #12]
 80084a4:	688e      	ldr	r6, [r1, #8]
 80084a6:	9a01      	ldr	r2, [sp, #4]
 80084a8:	0007      	movs	r7, r0
 80084aa:	000c      	movs	r4, r1
 80084ac:	680b      	ldr	r3, [r1, #0]
 80084ae:	4296      	cmp	r6, r2
 80084b0:	d831      	bhi.n	8008516 <__ssputs_r+0x7a>
 80084b2:	898a      	ldrh	r2, [r1, #12]
 80084b4:	2190      	movs	r1, #144	; 0x90
 80084b6:	00c9      	lsls	r1, r1, #3
 80084b8:	420a      	tst	r2, r1
 80084ba:	d029      	beq.n	8008510 <__ssputs_r+0x74>
 80084bc:	2003      	movs	r0, #3
 80084be:	6921      	ldr	r1, [r4, #16]
 80084c0:	1a5b      	subs	r3, r3, r1
 80084c2:	9302      	str	r3, [sp, #8]
 80084c4:	6963      	ldr	r3, [r4, #20]
 80084c6:	4343      	muls	r3, r0
 80084c8:	0fdd      	lsrs	r5, r3, #31
 80084ca:	18ed      	adds	r5, r5, r3
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	9802      	ldr	r0, [sp, #8]
 80084d0:	3301      	adds	r3, #1
 80084d2:	181b      	adds	r3, r3, r0
 80084d4:	106d      	asrs	r5, r5, #1
 80084d6:	42ab      	cmp	r3, r5
 80084d8:	d900      	bls.n	80084dc <__ssputs_r+0x40>
 80084da:	001d      	movs	r5, r3
 80084dc:	0552      	lsls	r2, r2, #21
 80084de:	d529      	bpl.n	8008534 <__ssputs_r+0x98>
 80084e0:	0029      	movs	r1, r5
 80084e2:	0038      	movs	r0, r7
 80084e4:	f7fe fbd8 	bl	8006c98 <_malloc_r>
 80084e8:	1e06      	subs	r6, r0, #0
 80084ea:	d02d      	beq.n	8008548 <__ssputs_r+0xac>
 80084ec:	9a02      	ldr	r2, [sp, #8]
 80084ee:	6921      	ldr	r1, [r4, #16]
 80084f0:	f000 fa22 	bl	8008938 <memcpy>
 80084f4:	89a2      	ldrh	r2, [r4, #12]
 80084f6:	4b19      	ldr	r3, [pc, #100]	; (800855c <__ssputs_r+0xc0>)
 80084f8:	401a      	ands	r2, r3
 80084fa:	2380      	movs	r3, #128	; 0x80
 80084fc:	4313      	orrs	r3, r2
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	9b02      	ldr	r3, [sp, #8]
 8008502:	6126      	str	r6, [r4, #16]
 8008504:	18f6      	adds	r6, r6, r3
 8008506:	6026      	str	r6, [r4, #0]
 8008508:	6165      	str	r5, [r4, #20]
 800850a:	9e01      	ldr	r6, [sp, #4]
 800850c:	1aed      	subs	r5, r5, r3
 800850e:	60a5      	str	r5, [r4, #8]
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	429e      	cmp	r6, r3
 8008514:	d900      	bls.n	8008518 <__ssputs_r+0x7c>
 8008516:	9e01      	ldr	r6, [sp, #4]
 8008518:	0032      	movs	r2, r6
 800851a:	9903      	ldr	r1, [sp, #12]
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	f000 f9d4 	bl	80088ca <memmove>
 8008522:	2000      	movs	r0, #0
 8008524:	68a3      	ldr	r3, [r4, #8]
 8008526:	1b9b      	subs	r3, r3, r6
 8008528:	60a3      	str	r3, [r4, #8]
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	199b      	adds	r3, r3, r6
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	b005      	add	sp, #20
 8008532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008534:	002a      	movs	r2, r5
 8008536:	0038      	movs	r0, r7
 8008538:	f000 fdc8 	bl	80090cc <_realloc_r>
 800853c:	1e06      	subs	r6, r0, #0
 800853e:	d1df      	bne.n	8008500 <__ssputs_r+0x64>
 8008540:	0038      	movs	r0, r7
 8008542:	6921      	ldr	r1, [r4, #16]
 8008544:	f7fe fb32 	bl	8006bac <_free_r>
 8008548:	230c      	movs	r3, #12
 800854a:	2001      	movs	r0, #1
 800854c:	603b      	str	r3, [r7, #0]
 800854e:	89a2      	ldrh	r2, [r4, #12]
 8008550:	3334      	adds	r3, #52	; 0x34
 8008552:	4313      	orrs	r3, r2
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	4240      	negs	r0, r0
 8008558:	e7ea      	b.n	8008530 <__ssputs_r+0x94>
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	fffffb7f 	.word	0xfffffb7f

08008560 <_svfiprintf_r>:
 8008560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008562:	b0a1      	sub	sp, #132	; 0x84
 8008564:	9003      	str	r0, [sp, #12]
 8008566:	001d      	movs	r5, r3
 8008568:	898b      	ldrh	r3, [r1, #12]
 800856a:	000f      	movs	r7, r1
 800856c:	0016      	movs	r6, r2
 800856e:	061b      	lsls	r3, r3, #24
 8008570:	d511      	bpl.n	8008596 <_svfiprintf_r+0x36>
 8008572:	690b      	ldr	r3, [r1, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10e      	bne.n	8008596 <_svfiprintf_r+0x36>
 8008578:	2140      	movs	r1, #64	; 0x40
 800857a:	f7fe fb8d 	bl	8006c98 <_malloc_r>
 800857e:	6038      	str	r0, [r7, #0]
 8008580:	6138      	str	r0, [r7, #16]
 8008582:	2800      	cmp	r0, #0
 8008584:	d105      	bne.n	8008592 <_svfiprintf_r+0x32>
 8008586:	230c      	movs	r3, #12
 8008588:	9a03      	ldr	r2, [sp, #12]
 800858a:	3801      	subs	r0, #1
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	b021      	add	sp, #132	; 0x84
 8008590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008592:	2340      	movs	r3, #64	; 0x40
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	2300      	movs	r3, #0
 8008598:	ac08      	add	r4, sp, #32
 800859a:	6163      	str	r3, [r4, #20]
 800859c:	3320      	adds	r3, #32
 800859e:	7663      	strb	r3, [r4, #25]
 80085a0:	3310      	adds	r3, #16
 80085a2:	76a3      	strb	r3, [r4, #26]
 80085a4:	9507      	str	r5, [sp, #28]
 80085a6:	0035      	movs	r5, r6
 80085a8:	782b      	ldrb	r3, [r5, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <_svfiprintf_r+0x52>
 80085ae:	2b25      	cmp	r3, #37	; 0x25
 80085b0:	d148      	bne.n	8008644 <_svfiprintf_r+0xe4>
 80085b2:	1bab      	subs	r3, r5, r6
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	42b5      	cmp	r5, r6
 80085b8:	d00b      	beq.n	80085d2 <_svfiprintf_r+0x72>
 80085ba:	0032      	movs	r2, r6
 80085bc:	0039      	movs	r1, r7
 80085be:	9803      	ldr	r0, [sp, #12]
 80085c0:	f7ff ff6c 	bl	800849c <__ssputs_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	d100      	bne.n	80085ca <_svfiprintf_r+0x6a>
 80085c8:	e0af      	b.n	800872a <_svfiprintf_r+0x1ca>
 80085ca:	6963      	ldr	r3, [r4, #20]
 80085cc:	9a05      	ldr	r2, [sp, #20]
 80085ce:	189b      	adds	r3, r3, r2
 80085d0:	6163      	str	r3, [r4, #20]
 80085d2:	782b      	ldrb	r3, [r5, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d100      	bne.n	80085da <_svfiprintf_r+0x7a>
 80085d8:	e0a7      	b.n	800872a <_svfiprintf_r+0x1ca>
 80085da:	2201      	movs	r2, #1
 80085dc:	2300      	movs	r3, #0
 80085de:	4252      	negs	r2, r2
 80085e0:	6062      	str	r2, [r4, #4]
 80085e2:	a904      	add	r1, sp, #16
 80085e4:	3254      	adds	r2, #84	; 0x54
 80085e6:	1852      	adds	r2, r2, r1
 80085e8:	1c6e      	adds	r6, r5, #1
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	60e3      	str	r3, [r4, #12]
 80085ee:	60a3      	str	r3, [r4, #8]
 80085f0:	7013      	strb	r3, [r2, #0]
 80085f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80085f4:	4b55      	ldr	r3, [pc, #340]	; (800874c <_svfiprintf_r+0x1ec>)
 80085f6:	2205      	movs	r2, #5
 80085f8:	0018      	movs	r0, r3
 80085fa:	7831      	ldrb	r1, [r6, #0]
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	f7fd fc28 	bl	8005e52 <memchr>
 8008602:	1c75      	adds	r5, r6, #1
 8008604:	2800      	cmp	r0, #0
 8008606:	d11f      	bne.n	8008648 <_svfiprintf_r+0xe8>
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	06d3      	lsls	r3, r2, #27
 800860c:	d504      	bpl.n	8008618 <_svfiprintf_r+0xb8>
 800860e:	2353      	movs	r3, #83	; 0x53
 8008610:	a904      	add	r1, sp, #16
 8008612:	185b      	adds	r3, r3, r1
 8008614:	2120      	movs	r1, #32
 8008616:	7019      	strb	r1, [r3, #0]
 8008618:	0713      	lsls	r3, r2, #28
 800861a:	d504      	bpl.n	8008626 <_svfiprintf_r+0xc6>
 800861c:	2353      	movs	r3, #83	; 0x53
 800861e:	a904      	add	r1, sp, #16
 8008620:	185b      	adds	r3, r3, r1
 8008622:	212b      	movs	r1, #43	; 0x2b
 8008624:	7019      	strb	r1, [r3, #0]
 8008626:	7833      	ldrb	r3, [r6, #0]
 8008628:	2b2a      	cmp	r3, #42	; 0x2a
 800862a:	d016      	beq.n	800865a <_svfiprintf_r+0xfa>
 800862c:	0035      	movs	r5, r6
 800862e:	2100      	movs	r1, #0
 8008630:	200a      	movs	r0, #10
 8008632:	68e3      	ldr	r3, [r4, #12]
 8008634:	782a      	ldrb	r2, [r5, #0]
 8008636:	1c6e      	adds	r6, r5, #1
 8008638:	3a30      	subs	r2, #48	; 0x30
 800863a:	2a09      	cmp	r2, #9
 800863c:	d94e      	bls.n	80086dc <_svfiprintf_r+0x17c>
 800863e:	2900      	cmp	r1, #0
 8008640:	d111      	bne.n	8008666 <_svfiprintf_r+0x106>
 8008642:	e017      	b.n	8008674 <_svfiprintf_r+0x114>
 8008644:	3501      	adds	r5, #1
 8008646:	e7af      	b.n	80085a8 <_svfiprintf_r+0x48>
 8008648:	9b05      	ldr	r3, [sp, #20]
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	1ac0      	subs	r0, r0, r3
 800864e:	2301      	movs	r3, #1
 8008650:	4083      	lsls	r3, r0
 8008652:	4313      	orrs	r3, r2
 8008654:	002e      	movs	r6, r5
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	e7cc      	b.n	80085f4 <_svfiprintf_r+0x94>
 800865a:	9b07      	ldr	r3, [sp, #28]
 800865c:	1d19      	adds	r1, r3, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	9107      	str	r1, [sp, #28]
 8008662:	2b00      	cmp	r3, #0
 8008664:	db01      	blt.n	800866a <_svfiprintf_r+0x10a>
 8008666:	930b      	str	r3, [sp, #44]	; 0x2c
 8008668:	e004      	b.n	8008674 <_svfiprintf_r+0x114>
 800866a:	425b      	negs	r3, r3
 800866c:	60e3      	str	r3, [r4, #12]
 800866e:	2302      	movs	r3, #2
 8008670:	4313      	orrs	r3, r2
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	782b      	ldrb	r3, [r5, #0]
 8008676:	2b2e      	cmp	r3, #46	; 0x2e
 8008678:	d10a      	bne.n	8008690 <_svfiprintf_r+0x130>
 800867a:	786b      	ldrb	r3, [r5, #1]
 800867c:	2b2a      	cmp	r3, #42	; 0x2a
 800867e:	d135      	bne.n	80086ec <_svfiprintf_r+0x18c>
 8008680:	9b07      	ldr	r3, [sp, #28]
 8008682:	3502      	adds	r5, #2
 8008684:	1d1a      	adds	r2, r3, #4
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	9207      	str	r2, [sp, #28]
 800868a:	2b00      	cmp	r3, #0
 800868c:	db2b      	blt.n	80086e6 <_svfiprintf_r+0x186>
 800868e:	9309      	str	r3, [sp, #36]	; 0x24
 8008690:	4e2f      	ldr	r6, [pc, #188]	; (8008750 <_svfiprintf_r+0x1f0>)
 8008692:	2203      	movs	r2, #3
 8008694:	0030      	movs	r0, r6
 8008696:	7829      	ldrb	r1, [r5, #0]
 8008698:	f7fd fbdb 	bl	8005e52 <memchr>
 800869c:	2800      	cmp	r0, #0
 800869e:	d006      	beq.n	80086ae <_svfiprintf_r+0x14e>
 80086a0:	2340      	movs	r3, #64	; 0x40
 80086a2:	1b80      	subs	r0, r0, r6
 80086a4:	4083      	lsls	r3, r0
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	3501      	adds	r5, #1
 80086aa:	4313      	orrs	r3, r2
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	7829      	ldrb	r1, [r5, #0]
 80086b0:	2206      	movs	r2, #6
 80086b2:	4828      	ldr	r0, [pc, #160]	; (8008754 <_svfiprintf_r+0x1f4>)
 80086b4:	1c6e      	adds	r6, r5, #1
 80086b6:	7621      	strb	r1, [r4, #24]
 80086b8:	f7fd fbcb 	bl	8005e52 <memchr>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d03c      	beq.n	800873a <_svfiprintf_r+0x1da>
 80086c0:	4b25      	ldr	r3, [pc, #148]	; (8008758 <_svfiprintf_r+0x1f8>)
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d125      	bne.n	8008712 <_svfiprintf_r+0x1b2>
 80086c6:	2207      	movs	r2, #7
 80086c8:	9b07      	ldr	r3, [sp, #28]
 80086ca:	3307      	adds	r3, #7
 80086cc:	4393      	bics	r3, r2
 80086ce:	3308      	adds	r3, #8
 80086d0:	9307      	str	r3, [sp, #28]
 80086d2:	6963      	ldr	r3, [r4, #20]
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	189b      	adds	r3, r3, r2
 80086d8:	6163      	str	r3, [r4, #20]
 80086da:	e764      	b.n	80085a6 <_svfiprintf_r+0x46>
 80086dc:	4343      	muls	r3, r0
 80086de:	0035      	movs	r5, r6
 80086e0:	2101      	movs	r1, #1
 80086e2:	189b      	adds	r3, r3, r2
 80086e4:	e7a6      	b.n	8008634 <_svfiprintf_r+0xd4>
 80086e6:	2301      	movs	r3, #1
 80086e8:	425b      	negs	r3, r3
 80086ea:	e7d0      	b.n	800868e <_svfiprintf_r+0x12e>
 80086ec:	2300      	movs	r3, #0
 80086ee:	200a      	movs	r0, #10
 80086f0:	001a      	movs	r2, r3
 80086f2:	3501      	adds	r5, #1
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	7829      	ldrb	r1, [r5, #0]
 80086f8:	1c6e      	adds	r6, r5, #1
 80086fa:	3930      	subs	r1, #48	; 0x30
 80086fc:	2909      	cmp	r1, #9
 80086fe:	d903      	bls.n	8008708 <_svfiprintf_r+0x1a8>
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0c5      	beq.n	8008690 <_svfiprintf_r+0x130>
 8008704:	9209      	str	r2, [sp, #36]	; 0x24
 8008706:	e7c3      	b.n	8008690 <_svfiprintf_r+0x130>
 8008708:	4342      	muls	r2, r0
 800870a:	0035      	movs	r5, r6
 800870c:	2301      	movs	r3, #1
 800870e:	1852      	adds	r2, r2, r1
 8008710:	e7f1      	b.n	80086f6 <_svfiprintf_r+0x196>
 8008712:	aa07      	add	r2, sp, #28
 8008714:	9200      	str	r2, [sp, #0]
 8008716:	0021      	movs	r1, r4
 8008718:	003a      	movs	r2, r7
 800871a:	4b10      	ldr	r3, [pc, #64]	; (800875c <_svfiprintf_r+0x1fc>)
 800871c:	9803      	ldr	r0, [sp, #12]
 800871e:	f7fc fc03 	bl	8004f28 <_printf_float>
 8008722:	9004      	str	r0, [sp, #16]
 8008724:	9b04      	ldr	r3, [sp, #16]
 8008726:	3301      	adds	r3, #1
 8008728:	d1d3      	bne.n	80086d2 <_svfiprintf_r+0x172>
 800872a:	89bb      	ldrh	r3, [r7, #12]
 800872c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800872e:	065b      	lsls	r3, r3, #25
 8008730:	d400      	bmi.n	8008734 <_svfiprintf_r+0x1d4>
 8008732:	e72c      	b.n	800858e <_svfiprintf_r+0x2e>
 8008734:	2001      	movs	r0, #1
 8008736:	4240      	negs	r0, r0
 8008738:	e729      	b.n	800858e <_svfiprintf_r+0x2e>
 800873a:	aa07      	add	r2, sp, #28
 800873c:	9200      	str	r2, [sp, #0]
 800873e:	0021      	movs	r1, r4
 8008740:	003a      	movs	r2, r7
 8008742:	4b06      	ldr	r3, [pc, #24]	; (800875c <_svfiprintf_r+0x1fc>)
 8008744:	9803      	ldr	r0, [sp, #12]
 8008746:	f7fc feb5 	bl	80054b4 <_printf_i>
 800874a:	e7ea      	b.n	8008722 <_svfiprintf_r+0x1c2>
 800874c:	08009b61 	.word	0x08009b61
 8008750:	08009b67 	.word	0x08009b67
 8008754:	08009b6b 	.word	0x08009b6b
 8008758:	08004f29 	.word	0x08004f29
 800875c:	0800849d 	.word	0x0800849d

08008760 <__sflush_r>:
 8008760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008762:	898b      	ldrh	r3, [r1, #12]
 8008764:	0005      	movs	r5, r0
 8008766:	000c      	movs	r4, r1
 8008768:	071a      	lsls	r2, r3, #28
 800876a:	d45c      	bmi.n	8008826 <__sflush_r+0xc6>
 800876c:	684a      	ldr	r2, [r1, #4]
 800876e:	2a00      	cmp	r2, #0
 8008770:	dc04      	bgt.n	800877c <__sflush_r+0x1c>
 8008772:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008774:	2a00      	cmp	r2, #0
 8008776:	dc01      	bgt.n	800877c <__sflush_r+0x1c>
 8008778:	2000      	movs	r0, #0
 800877a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800877c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800877e:	2f00      	cmp	r7, #0
 8008780:	d0fa      	beq.n	8008778 <__sflush_r+0x18>
 8008782:	2200      	movs	r2, #0
 8008784:	2080      	movs	r0, #128	; 0x80
 8008786:	682e      	ldr	r6, [r5, #0]
 8008788:	602a      	str	r2, [r5, #0]
 800878a:	001a      	movs	r2, r3
 800878c:	0140      	lsls	r0, r0, #5
 800878e:	6a21      	ldr	r1, [r4, #32]
 8008790:	4002      	ands	r2, r0
 8008792:	4203      	tst	r3, r0
 8008794:	d034      	beq.n	8008800 <__sflush_r+0xa0>
 8008796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	075b      	lsls	r3, r3, #29
 800879c:	d506      	bpl.n	80087ac <__sflush_r+0x4c>
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	1ac0      	subs	r0, r0, r3
 80087a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <__sflush_r+0x4c>
 80087a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087aa:	1ac0      	subs	r0, r0, r3
 80087ac:	0002      	movs	r2, r0
 80087ae:	2300      	movs	r3, #0
 80087b0:	0028      	movs	r0, r5
 80087b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087b4:	6a21      	ldr	r1, [r4, #32]
 80087b6:	47b8      	blx	r7
 80087b8:	89a2      	ldrh	r2, [r4, #12]
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d106      	bne.n	80087cc <__sflush_r+0x6c>
 80087be:	6829      	ldr	r1, [r5, #0]
 80087c0:	291d      	cmp	r1, #29
 80087c2:	d82c      	bhi.n	800881e <__sflush_r+0xbe>
 80087c4:	4b2a      	ldr	r3, [pc, #168]	; (8008870 <__sflush_r+0x110>)
 80087c6:	410b      	asrs	r3, r1
 80087c8:	07db      	lsls	r3, r3, #31
 80087ca:	d428      	bmi.n	800881e <__sflush_r+0xbe>
 80087cc:	2300      	movs	r3, #0
 80087ce:	6063      	str	r3, [r4, #4]
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	04d2      	lsls	r2, r2, #19
 80087d6:	d505      	bpl.n	80087e4 <__sflush_r+0x84>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <__sflush_r+0x82>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d100      	bne.n	80087e4 <__sflush_r+0x84>
 80087e2:	6560      	str	r0, [r4, #84]	; 0x54
 80087e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e6:	602e      	str	r6, [r5, #0]
 80087e8:	2900      	cmp	r1, #0
 80087ea:	d0c5      	beq.n	8008778 <__sflush_r+0x18>
 80087ec:	0023      	movs	r3, r4
 80087ee:	3344      	adds	r3, #68	; 0x44
 80087f0:	4299      	cmp	r1, r3
 80087f2:	d002      	beq.n	80087fa <__sflush_r+0x9a>
 80087f4:	0028      	movs	r0, r5
 80087f6:	f7fe f9d9 	bl	8006bac <_free_r>
 80087fa:	2000      	movs	r0, #0
 80087fc:	6360      	str	r0, [r4, #52]	; 0x34
 80087fe:	e7bc      	b.n	800877a <__sflush_r+0x1a>
 8008800:	2301      	movs	r3, #1
 8008802:	0028      	movs	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d1c6      	bne.n	8008798 <__sflush_r+0x38>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0c3      	beq.n	8008798 <__sflush_r+0x38>
 8008810:	2b1d      	cmp	r3, #29
 8008812:	d001      	beq.n	8008818 <__sflush_r+0xb8>
 8008814:	2b16      	cmp	r3, #22
 8008816:	d101      	bne.n	800881c <__sflush_r+0xbc>
 8008818:	602e      	str	r6, [r5, #0]
 800881a:	e7ad      	b.n	8008778 <__sflush_r+0x18>
 800881c:	89a2      	ldrh	r2, [r4, #12]
 800881e:	2340      	movs	r3, #64	; 0x40
 8008820:	4313      	orrs	r3, r2
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	e7a9      	b.n	800877a <__sflush_r+0x1a>
 8008826:	690e      	ldr	r6, [r1, #16]
 8008828:	2e00      	cmp	r6, #0
 800882a:	d0a5      	beq.n	8008778 <__sflush_r+0x18>
 800882c:	680f      	ldr	r7, [r1, #0]
 800882e:	600e      	str	r6, [r1, #0]
 8008830:	1bba      	subs	r2, r7, r6
 8008832:	9201      	str	r2, [sp, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	079b      	lsls	r3, r3, #30
 8008838:	d100      	bne.n	800883c <__sflush_r+0xdc>
 800883a:	694a      	ldr	r2, [r1, #20]
 800883c:	60a2      	str	r2, [r4, #8]
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	dd99      	ble.n	8008778 <__sflush_r+0x18>
 8008844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008846:	0032      	movs	r2, r6
 8008848:	001f      	movs	r7, r3
 800884a:	0028      	movs	r0, r5
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	6a21      	ldr	r1, [r4, #32]
 8008850:	47b8      	blx	r7
 8008852:	2800      	cmp	r0, #0
 8008854:	dc06      	bgt.n	8008864 <__sflush_r+0x104>
 8008856:	2340      	movs	r3, #64	; 0x40
 8008858:	2001      	movs	r0, #1
 800885a:	89a2      	ldrh	r2, [r4, #12]
 800885c:	4240      	negs	r0, r0
 800885e:	4313      	orrs	r3, r2
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	e78a      	b.n	800877a <__sflush_r+0x1a>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	1836      	adds	r6, r6, r0
 8008868:	1a1b      	subs	r3, r3, r0
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	e7e7      	b.n	800883e <__sflush_r+0xde>
 800886e:	46c0      	nop			; (mov r8, r8)
 8008870:	dfbffffe 	.word	0xdfbffffe

08008874 <_fflush_r>:
 8008874:	690b      	ldr	r3, [r1, #16]
 8008876:	b570      	push	{r4, r5, r6, lr}
 8008878:	0005      	movs	r5, r0
 800887a:	000c      	movs	r4, r1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <_fflush_r+0x12>
 8008880:	2500      	movs	r5, #0
 8008882:	0028      	movs	r0, r5
 8008884:	bd70      	pop	{r4, r5, r6, pc}
 8008886:	2800      	cmp	r0, #0
 8008888:	d004      	beq.n	8008894 <_fflush_r+0x20>
 800888a:	6a03      	ldr	r3, [r0, #32]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <_fflush_r+0x20>
 8008890:	f7fd f9b8 	bl	8005c04 <__sinit>
 8008894:	220c      	movs	r2, #12
 8008896:	5ea3      	ldrsh	r3, [r4, r2]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0f1      	beq.n	8008880 <_fflush_r+0xc>
 800889c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800889e:	07d2      	lsls	r2, r2, #31
 80088a0:	d404      	bmi.n	80088ac <_fflush_r+0x38>
 80088a2:	059b      	lsls	r3, r3, #22
 80088a4:	d402      	bmi.n	80088ac <_fflush_r+0x38>
 80088a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088a8:	f7fd fad1 	bl	8005e4e <__retarget_lock_acquire_recursive>
 80088ac:	0028      	movs	r0, r5
 80088ae:	0021      	movs	r1, r4
 80088b0:	f7ff ff56 	bl	8008760 <__sflush_r>
 80088b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088b6:	0005      	movs	r5, r0
 80088b8:	07db      	lsls	r3, r3, #31
 80088ba:	d4e2      	bmi.n	8008882 <_fflush_r+0xe>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	059b      	lsls	r3, r3, #22
 80088c0:	d4df      	bmi.n	8008882 <_fflush_r+0xe>
 80088c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088c4:	f7fd fac4 	bl	8005e50 <__retarget_lock_release_recursive>
 80088c8:	e7db      	b.n	8008882 <_fflush_r+0xe>

080088ca <memmove>:
 80088ca:	b510      	push	{r4, lr}
 80088cc:	4288      	cmp	r0, r1
 80088ce:	d902      	bls.n	80088d6 <memmove+0xc>
 80088d0:	188b      	adds	r3, r1, r2
 80088d2:	4298      	cmp	r0, r3
 80088d4:	d303      	bcc.n	80088de <memmove+0x14>
 80088d6:	2300      	movs	r3, #0
 80088d8:	e007      	b.n	80088ea <memmove+0x20>
 80088da:	5c8b      	ldrb	r3, [r1, r2]
 80088dc:	5483      	strb	r3, [r0, r2]
 80088de:	3a01      	subs	r2, #1
 80088e0:	d2fb      	bcs.n	80088da <memmove+0x10>
 80088e2:	bd10      	pop	{r4, pc}
 80088e4:	5ccc      	ldrb	r4, [r1, r3]
 80088e6:	54c4      	strb	r4, [r0, r3]
 80088e8:	3301      	adds	r3, #1
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d1fa      	bne.n	80088e4 <memmove+0x1a>
 80088ee:	e7f8      	b.n	80088e2 <memmove+0x18>

080088f0 <strncmp>:
 80088f0:	b530      	push	{r4, r5, lr}
 80088f2:	0005      	movs	r5, r0
 80088f4:	1e10      	subs	r0, r2, #0
 80088f6:	d00b      	beq.n	8008910 <strncmp+0x20>
 80088f8:	2400      	movs	r4, #0
 80088fa:	3a01      	subs	r2, #1
 80088fc:	5d2b      	ldrb	r3, [r5, r4]
 80088fe:	5d08      	ldrb	r0, [r1, r4]
 8008900:	4283      	cmp	r3, r0
 8008902:	d104      	bne.n	800890e <strncmp+0x1e>
 8008904:	42a2      	cmp	r2, r4
 8008906:	d002      	beq.n	800890e <strncmp+0x1e>
 8008908:	3401      	adds	r4, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f6      	bne.n	80088fc <strncmp+0xc>
 800890e:	1a18      	subs	r0, r3, r0
 8008910:	bd30      	pop	{r4, r5, pc}
	...

08008914 <_sbrk_r>:
 8008914:	2300      	movs	r3, #0
 8008916:	b570      	push	{r4, r5, r6, lr}
 8008918:	4d06      	ldr	r5, [pc, #24]	; (8008934 <_sbrk_r+0x20>)
 800891a:	0004      	movs	r4, r0
 800891c:	0008      	movs	r0, r1
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	f7fa fa1e 	bl	8002d60 <_sbrk>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d103      	bne.n	8008930 <_sbrk_r+0x1c>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d000      	beq.n	8008930 <_sbrk_r+0x1c>
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	20000814 	.word	0x20000814

08008938 <memcpy>:
 8008938:	2300      	movs	r3, #0
 800893a:	b510      	push	{r4, lr}
 800893c:	429a      	cmp	r2, r3
 800893e:	d100      	bne.n	8008942 <memcpy+0xa>
 8008940:	bd10      	pop	{r4, pc}
 8008942:	5ccc      	ldrb	r4, [r1, r3]
 8008944:	54c4      	strb	r4, [r0, r3]
 8008946:	3301      	adds	r3, #1
 8008948:	e7f8      	b.n	800893c <memcpy+0x4>
	...

0800894c <nan>:
 800894c:	2000      	movs	r0, #0
 800894e:	4901      	ldr	r1, [pc, #4]	; (8008954 <nan+0x8>)
 8008950:	4770      	bx	lr
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	7ff80000 	.word	0x7ff80000

08008958 <__assert_func>:
 8008958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800895a:	0014      	movs	r4, r2
 800895c:	001a      	movs	r2, r3
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <__assert_func+0x2c>)
 8008960:	0005      	movs	r5, r0
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	000e      	movs	r6, r1
 8008966:	68d8      	ldr	r0, [r3, #12]
 8008968:	4b07      	ldr	r3, [pc, #28]	; (8008988 <__assert_func+0x30>)
 800896a:	2c00      	cmp	r4, #0
 800896c:	d101      	bne.n	8008972 <__assert_func+0x1a>
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <__assert_func+0x34>)
 8008970:	001c      	movs	r4, r3
 8008972:	4907      	ldr	r1, [pc, #28]	; (8008990 <__assert_func+0x38>)
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	9402      	str	r4, [sp, #8]
 8008978:	002b      	movs	r3, r5
 800897a:	9600      	str	r6, [sp, #0]
 800897c:	f000 fbe2 	bl	8009144 <fiprintf>
 8008980:	f000 fbf0 	bl	8009164 <abort>
 8008984:	20000064 	.word	0x20000064
 8008988:	08009b7a 	.word	0x08009b7a
 800898c:	08009bb5 	.word	0x08009bb5
 8008990:	08009b87 	.word	0x08009b87

08008994 <_calloc_r>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	0c0b      	lsrs	r3, r1, #16
 8008998:	0c15      	lsrs	r5, r2, #16
 800899a:	2b00      	cmp	r3, #0
 800899c:	d11e      	bne.n	80089dc <_calloc_r+0x48>
 800899e:	2d00      	cmp	r5, #0
 80089a0:	d10c      	bne.n	80089bc <_calloc_r+0x28>
 80089a2:	b289      	uxth	r1, r1
 80089a4:	b294      	uxth	r4, r2
 80089a6:	434c      	muls	r4, r1
 80089a8:	0021      	movs	r1, r4
 80089aa:	f7fe f975 	bl	8006c98 <_malloc_r>
 80089ae:	1e05      	subs	r5, r0, #0
 80089b0:	d01b      	beq.n	80089ea <_calloc_r+0x56>
 80089b2:	0022      	movs	r2, r4
 80089b4:	2100      	movs	r1, #0
 80089b6:	f7fd f9c5 	bl	8005d44 <memset>
 80089ba:	e016      	b.n	80089ea <_calloc_r+0x56>
 80089bc:	1c2b      	adds	r3, r5, #0
 80089be:	1c0c      	adds	r4, r1, #0
 80089c0:	b289      	uxth	r1, r1
 80089c2:	b292      	uxth	r2, r2
 80089c4:	434a      	muls	r2, r1
 80089c6:	b2a1      	uxth	r1, r4
 80089c8:	b29c      	uxth	r4, r3
 80089ca:	434c      	muls	r4, r1
 80089cc:	0c13      	lsrs	r3, r2, #16
 80089ce:	18e4      	adds	r4, r4, r3
 80089d0:	0c23      	lsrs	r3, r4, #16
 80089d2:	d107      	bne.n	80089e4 <_calloc_r+0x50>
 80089d4:	0424      	lsls	r4, r4, #16
 80089d6:	b292      	uxth	r2, r2
 80089d8:	4314      	orrs	r4, r2
 80089da:	e7e5      	b.n	80089a8 <_calloc_r+0x14>
 80089dc:	2d00      	cmp	r5, #0
 80089de:	d101      	bne.n	80089e4 <_calloc_r+0x50>
 80089e0:	1c14      	adds	r4, r2, #0
 80089e2:	e7ed      	b.n	80089c0 <_calloc_r+0x2c>
 80089e4:	230c      	movs	r3, #12
 80089e6:	2500      	movs	r5, #0
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	0028      	movs	r0, r5
 80089ec:	bd70      	pop	{r4, r5, r6, pc}

080089ee <rshift>:
 80089ee:	0002      	movs	r2, r0
 80089f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089f2:	6904      	ldr	r4, [r0, #16]
 80089f4:	114b      	asrs	r3, r1, #5
 80089f6:	b085      	sub	sp, #20
 80089f8:	3214      	adds	r2, #20
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	114d      	asrs	r5, r1, #5
 80089fe:	0013      	movs	r3, r2
 8008a00:	42ac      	cmp	r4, r5
 8008a02:	dd32      	ble.n	8008a6a <rshift+0x7c>
 8008a04:	261f      	movs	r6, #31
 8008a06:	000f      	movs	r7, r1
 8008a08:	114b      	asrs	r3, r1, #5
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	00a5      	lsls	r5, r4, #2
 8008a0e:	18d3      	adds	r3, r2, r3
 8008a10:	4037      	ands	r7, r6
 8008a12:	1955      	adds	r5, r2, r5
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	9701      	str	r7, [sp, #4]
 8008a18:	4231      	tst	r1, r6
 8008a1a:	d10d      	bne.n	8008a38 <rshift+0x4a>
 8008a1c:	0016      	movs	r6, r2
 8008a1e:	0019      	movs	r1, r3
 8008a20:	428d      	cmp	r5, r1
 8008a22:	d836      	bhi.n	8008a92 <rshift+0xa4>
 8008a24:	9900      	ldr	r1, [sp, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	3903      	subs	r1, #3
 8008a2a:	428d      	cmp	r5, r1
 8008a2c:	d302      	bcc.n	8008a34 <rshift+0x46>
 8008a2e:	9b02      	ldr	r3, [sp, #8]
 8008a30:	1ae4      	subs	r4, r4, r3
 8008a32:	00a3      	lsls	r3, r4, #2
 8008a34:	18d3      	adds	r3, r2, r3
 8008a36:	e018      	b.n	8008a6a <rshift+0x7c>
 8008a38:	2120      	movs	r1, #32
 8008a3a:	9e01      	ldr	r6, [sp, #4]
 8008a3c:	9f01      	ldr	r7, [sp, #4]
 8008a3e:	1b89      	subs	r1, r1, r6
 8008a40:	9e00      	ldr	r6, [sp, #0]
 8008a42:	9103      	str	r1, [sp, #12]
 8008a44:	ce02      	ldmia	r6!, {r1}
 8008a46:	4694      	mov	ip, r2
 8008a48:	40f9      	lsrs	r1, r7
 8008a4a:	42b5      	cmp	r5, r6
 8008a4c:	d816      	bhi.n	8008a7c <rshift+0x8e>
 8008a4e:	9e00      	ldr	r6, [sp, #0]
 8008a50:	2300      	movs	r3, #0
 8008a52:	3601      	adds	r6, #1
 8008a54:	42b5      	cmp	r5, r6
 8008a56:	d303      	bcc.n	8008a60 <rshift+0x72>
 8008a58:	9b02      	ldr	r3, [sp, #8]
 8008a5a:	1ae3      	subs	r3, r4, r3
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	3b04      	subs	r3, #4
 8008a60:	18d3      	adds	r3, r2, r3
 8008a62:	6019      	str	r1, [r3, #0]
 8008a64:	2900      	cmp	r1, #0
 8008a66:	d000      	beq.n	8008a6a <rshift+0x7c>
 8008a68:	3304      	adds	r3, #4
 8008a6a:	1a99      	subs	r1, r3, r2
 8008a6c:	1089      	asrs	r1, r1, #2
 8008a6e:	6101      	str	r1, [r0, #16]
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d101      	bne.n	8008a78 <rshift+0x8a>
 8008a74:	2300      	movs	r3, #0
 8008a76:	6143      	str	r3, [r0, #20]
 8008a78:	b005      	add	sp, #20
 8008a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7c:	6837      	ldr	r7, [r6, #0]
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	409f      	lsls	r7, r3
 8008a82:	430f      	orrs	r7, r1
 8008a84:	4661      	mov	r1, ip
 8008a86:	c180      	stmia	r1!, {r7}
 8008a88:	468c      	mov	ip, r1
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	ce02      	ldmia	r6!, {r1}
 8008a8e:	40d9      	lsrs	r1, r3
 8008a90:	e7db      	b.n	8008a4a <rshift+0x5c>
 8008a92:	c980      	ldmia	r1!, {r7}
 8008a94:	c680      	stmia	r6!, {r7}
 8008a96:	e7c3      	b.n	8008a20 <rshift+0x32>

08008a98 <__hexdig_fun>:
 8008a98:	0002      	movs	r2, r0
 8008a9a:	3a30      	subs	r2, #48	; 0x30
 8008a9c:	0003      	movs	r3, r0
 8008a9e:	2a09      	cmp	r2, #9
 8008aa0:	d802      	bhi.n	8008aa8 <__hexdig_fun+0x10>
 8008aa2:	3b20      	subs	r3, #32
 8008aa4:	b2d8      	uxtb	r0, r3
 8008aa6:	4770      	bx	lr
 8008aa8:	0002      	movs	r2, r0
 8008aaa:	3a61      	subs	r2, #97	; 0x61
 8008aac:	2a05      	cmp	r2, #5
 8008aae:	d801      	bhi.n	8008ab4 <__hexdig_fun+0x1c>
 8008ab0:	3b47      	subs	r3, #71	; 0x47
 8008ab2:	e7f7      	b.n	8008aa4 <__hexdig_fun+0xc>
 8008ab4:	001a      	movs	r2, r3
 8008ab6:	3a41      	subs	r2, #65	; 0x41
 8008ab8:	2000      	movs	r0, #0
 8008aba:	2a05      	cmp	r2, #5
 8008abc:	d8f3      	bhi.n	8008aa6 <__hexdig_fun+0xe>
 8008abe:	3b27      	subs	r3, #39	; 0x27
 8008ac0:	e7f0      	b.n	8008aa4 <__hexdig_fun+0xc>
	...

08008ac4 <__gethex>:
 8008ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac6:	b089      	sub	sp, #36	; 0x24
 8008ac8:	9307      	str	r3, [sp, #28]
 8008aca:	2302      	movs	r3, #2
 8008acc:	9201      	str	r2, [sp, #4]
 8008ace:	680a      	ldr	r2, [r1, #0]
 8008ad0:	425b      	negs	r3, r3
 8008ad2:	9003      	str	r0, [sp, #12]
 8008ad4:	9106      	str	r1, [sp, #24]
 8008ad6:	1c96      	adds	r6, r2, #2
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	199a      	adds	r2, r3, r6
 8008adc:	9600      	str	r6, [sp, #0]
 8008ade:	9205      	str	r2, [sp, #20]
 8008ae0:	9a00      	ldr	r2, [sp, #0]
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	7810      	ldrb	r0, [r2, #0]
 8008ae6:	2830      	cmp	r0, #48	; 0x30
 8008ae8:	d0f7      	beq.n	8008ada <__gethex+0x16>
 8008aea:	f7ff ffd5 	bl	8008a98 <__hexdig_fun>
 8008aee:	2300      	movs	r3, #0
 8008af0:	001d      	movs	r5, r3
 8008af2:	9302      	str	r3, [sp, #8]
 8008af4:	4298      	cmp	r0, r3
 8008af6:	d11d      	bne.n	8008b34 <__gethex+0x70>
 8008af8:	2201      	movs	r2, #1
 8008afa:	49a6      	ldr	r1, [pc, #664]	; (8008d94 <__gethex+0x2d0>)
 8008afc:	9800      	ldr	r0, [sp, #0]
 8008afe:	f7ff fef7 	bl	80088f0 <strncmp>
 8008b02:	0007      	movs	r7, r0
 8008b04:	42a8      	cmp	r0, r5
 8008b06:	d169      	bne.n	8008bdc <__gethex+0x118>
 8008b08:	9b00      	ldr	r3, [sp, #0]
 8008b0a:	0034      	movs	r4, r6
 8008b0c:	7858      	ldrb	r0, [r3, #1]
 8008b0e:	f7ff ffc3 	bl	8008a98 <__hexdig_fun>
 8008b12:	2301      	movs	r3, #1
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	42a8      	cmp	r0, r5
 8008b18:	d02f      	beq.n	8008b7a <__gethex+0xb6>
 8008b1a:	9600      	str	r6, [sp, #0]
 8008b1c:	9b00      	ldr	r3, [sp, #0]
 8008b1e:	7818      	ldrb	r0, [r3, #0]
 8008b20:	2830      	cmp	r0, #48	; 0x30
 8008b22:	d009      	beq.n	8008b38 <__gethex+0x74>
 8008b24:	f7ff ffb8 	bl	8008a98 <__hexdig_fun>
 8008b28:	4242      	negs	r2, r0
 8008b2a:	4142      	adcs	r2, r0
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	0035      	movs	r5, r6
 8008b30:	9202      	str	r2, [sp, #8]
 8008b32:	9305      	str	r3, [sp, #20]
 8008b34:	9c00      	ldr	r4, [sp, #0]
 8008b36:	e004      	b.n	8008b42 <__gethex+0x7e>
 8008b38:	9b00      	ldr	r3, [sp, #0]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	e7ed      	b.n	8008b1c <__gethex+0x58>
 8008b40:	3401      	adds	r4, #1
 8008b42:	7820      	ldrb	r0, [r4, #0]
 8008b44:	f7ff ffa8 	bl	8008a98 <__hexdig_fun>
 8008b48:	1e07      	subs	r7, r0, #0
 8008b4a:	d1f9      	bne.n	8008b40 <__gethex+0x7c>
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	0020      	movs	r0, r4
 8008b50:	4990      	ldr	r1, [pc, #576]	; (8008d94 <__gethex+0x2d0>)
 8008b52:	f7ff fecd 	bl	80088f0 <strncmp>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d10d      	bne.n	8008b76 <__gethex+0xb2>
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	d106      	bne.n	8008b6c <__gethex+0xa8>
 8008b5e:	3401      	adds	r4, #1
 8008b60:	0025      	movs	r5, r4
 8008b62:	7820      	ldrb	r0, [r4, #0]
 8008b64:	f7ff ff98 	bl	8008a98 <__hexdig_fun>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d102      	bne.n	8008b72 <__gethex+0xae>
 8008b6c:	1b2d      	subs	r5, r5, r4
 8008b6e:	00af      	lsls	r7, r5, #2
 8008b70:	e003      	b.n	8008b7a <__gethex+0xb6>
 8008b72:	3401      	adds	r4, #1
 8008b74:	e7f5      	b.n	8008b62 <__gethex+0x9e>
 8008b76:	2d00      	cmp	r5, #0
 8008b78:	d1f8      	bne.n	8008b6c <__gethex+0xa8>
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	7823      	ldrb	r3, [r4, #0]
 8008b7e:	0026      	movs	r6, r4
 8008b80:	4393      	bics	r3, r2
 8008b82:	2b50      	cmp	r3, #80	; 0x50
 8008b84:	d11d      	bne.n	8008bc2 <__gethex+0xfe>
 8008b86:	7863      	ldrb	r3, [r4, #1]
 8008b88:	2b2b      	cmp	r3, #43	; 0x2b
 8008b8a:	d02c      	beq.n	8008be6 <__gethex+0x122>
 8008b8c:	2b2d      	cmp	r3, #45	; 0x2d
 8008b8e:	d02e      	beq.n	8008bee <__gethex+0x12a>
 8008b90:	2300      	movs	r3, #0
 8008b92:	1c66      	adds	r6, r4, #1
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	7830      	ldrb	r0, [r6, #0]
 8008b98:	f7ff ff7e 	bl	8008a98 <__hexdig_fun>
 8008b9c:	1e43      	subs	r3, r0, #1
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b18      	cmp	r3, #24
 8008ba2:	d82b      	bhi.n	8008bfc <__gethex+0x138>
 8008ba4:	3810      	subs	r0, #16
 8008ba6:	0005      	movs	r5, r0
 8008ba8:	7870      	ldrb	r0, [r6, #1]
 8008baa:	f7ff ff75 	bl	8008a98 <__hexdig_fun>
 8008bae:	1e43      	subs	r3, r0, #1
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	3601      	adds	r6, #1
 8008bb4:	2b18      	cmp	r3, #24
 8008bb6:	d91c      	bls.n	8008bf2 <__gethex+0x12e>
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d000      	beq.n	8008bc0 <__gethex+0xfc>
 8008bbe:	426d      	negs	r5, r5
 8008bc0:	197f      	adds	r7, r7, r5
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	601e      	str	r6, [r3, #0]
 8008bc6:	9b02      	ldr	r3, [sp, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d019      	beq.n	8008c00 <__gethex+0x13c>
 8008bcc:	2600      	movs	r6, #0
 8008bce:	9b05      	ldr	r3, [sp, #20]
 8008bd0:	42b3      	cmp	r3, r6
 8008bd2:	d100      	bne.n	8008bd6 <__gethex+0x112>
 8008bd4:	3606      	adds	r6, #6
 8008bd6:	0030      	movs	r0, r6
 8008bd8:	b009      	add	sp, #36	; 0x24
 8008bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bdc:	2301      	movs	r3, #1
 8008bde:	2700      	movs	r7, #0
 8008be0:	9c00      	ldr	r4, [sp, #0]
 8008be2:	9302      	str	r3, [sp, #8]
 8008be4:	e7c9      	b.n	8008b7a <__gethex+0xb6>
 8008be6:	2300      	movs	r3, #0
 8008be8:	9304      	str	r3, [sp, #16]
 8008bea:	1ca6      	adds	r6, r4, #2
 8008bec:	e7d3      	b.n	8008b96 <__gethex+0xd2>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e7fa      	b.n	8008be8 <__gethex+0x124>
 8008bf2:	230a      	movs	r3, #10
 8008bf4:	435d      	muls	r5, r3
 8008bf6:	182d      	adds	r5, r5, r0
 8008bf8:	3d10      	subs	r5, #16
 8008bfa:	e7d5      	b.n	8008ba8 <__gethex+0xe4>
 8008bfc:	0026      	movs	r6, r4
 8008bfe:	e7e0      	b.n	8008bc2 <__gethex+0xfe>
 8008c00:	9b00      	ldr	r3, [sp, #0]
 8008c02:	9902      	ldr	r1, [sp, #8]
 8008c04:	1ae3      	subs	r3, r4, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	2b07      	cmp	r3, #7
 8008c0a:	dc0a      	bgt.n	8008c22 <__gethex+0x15e>
 8008c0c:	9803      	ldr	r0, [sp, #12]
 8008c0e:	f7fe f8d5 	bl	8006dbc <_Balloc>
 8008c12:	1e05      	subs	r5, r0, #0
 8008c14:	d108      	bne.n	8008c28 <__gethex+0x164>
 8008c16:	002a      	movs	r2, r5
 8008c18:	21e4      	movs	r1, #228	; 0xe4
 8008c1a:	4b5f      	ldr	r3, [pc, #380]	; (8008d98 <__gethex+0x2d4>)
 8008c1c:	485f      	ldr	r0, [pc, #380]	; (8008d9c <__gethex+0x2d8>)
 8008c1e:	f7ff fe9b 	bl	8008958 <__assert_func>
 8008c22:	3101      	adds	r1, #1
 8008c24:	105b      	asrs	r3, r3, #1
 8008c26:	e7ef      	b.n	8008c08 <__gethex+0x144>
 8008c28:	0003      	movs	r3, r0
 8008c2a:	3314      	adds	r3, #20
 8008c2c:	9302      	str	r3, [sp, #8]
 8008c2e:	9305      	str	r3, [sp, #20]
 8008c30:	2300      	movs	r3, #0
 8008c32:	001e      	movs	r6, r3
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	9b00      	ldr	r3, [sp, #0]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d33f      	bcc.n	8008cbc <__gethex+0x1f8>
 8008c3c:	9c05      	ldr	r4, [sp, #20]
 8008c3e:	9b02      	ldr	r3, [sp, #8]
 8008c40:	c440      	stmia	r4!, {r6}
 8008c42:	1ae4      	subs	r4, r4, r3
 8008c44:	10a4      	asrs	r4, r4, #2
 8008c46:	0030      	movs	r0, r6
 8008c48:	612c      	str	r4, [r5, #16]
 8008c4a:	f7fe f9af 	bl	8006fac <__hi0bits>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	0164      	lsls	r4, r4, #5
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	1a26      	subs	r6, r4, r0
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	429e      	cmp	r6, r3
 8008c5a:	dd51      	ble.n	8008d00 <__gethex+0x23c>
 8008c5c:	1af6      	subs	r6, r6, r3
 8008c5e:	0031      	movs	r1, r6
 8008c60:	0028      	movs	r0, r5
 8008c62:	f7fe fd43 	bl	80076ec <__any_on>
 8008c66:	1e04      	subs	r4, r0, #0
 8008c68:	d016      	beq.n	8008c98 <__gethex+0x1d4>
 8008c6a:	2401      	movs	r4, #1
 8008c6c:	231f      	movs	r3, #31
 8008c6e:	0020      	movs	r0, r4
 8008c70:	1e72      	subs	r2, r6, #1
 8008c72:	4013      	ands	r3, r2
 8008c74:	4098      	lsls	r0, r3
 8008c76:	0003      	movs	r3, r0
 8008c78:	1151      	asrs	r1, r2, #5
 8008c7a:	9802      	ldr	r0, [sp, #8]
 8008c7c:	0089      	lsls	r1, r1, #2
 8008c7e:	5809      	ldr	r1, [r1, r0]
 8008c80:	4219      	tst	r1, r3
 8008c82:	d009      	beq.n	8008c98 <__gethex+0x1d4>
 8008c84:	42a2      	cmp	r2, r4
 8008c86:	dd06      	ble.n	8008c96 <__gethex+0x1d2>
 8008c88:	0028      	movs	r0, r5
 8008c8a:	1eb1      	subs	r1, r6, #2
 8008c8c:	f7fe fd2e 	bl	80076ec <__any_on>
 8008c90:	3402      	adds	r4, #2
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d100      	bne.n	8008c98 <__gethex+0x1d4>
 8008c96:	2402      	movs	r4, #2
 8008c98:	0031      	movs	r1, r6
 8008c9a:	0028      	movs	r0, r5
 8008c9c:	f7ff fea7 	bl	80089ee <rshift>
 8008ca0:	19bf      	adds	r7, r7, r6
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	42bb      	cmp	r3, r7
 8008ca8:	da3a      	bge.n	8008d20 <__gethex+0x25c>
 8008caa:	0029      	movs	r1, r5
 8008cac:	9803      	ldr	r0, [sp, #12]
 8008cae:	f7fe f8c9 	bl	8006e44 <_Bfree>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cb6:	26a3      	movs	r6, #163	; 0xa3
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	e78c      	b.n	8008bd6 <__gethex+0x112>
 8008cbc:	3c01      	subs	r4, #1
 8008cbe:	7823      	ldrb	r3, [r4, #0]
 8008cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cc2:	d012      	beq.n	8008cea <__gethex+0x226>
 8008cc4:	9b04      	ldr	r3, [sp, #16]
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d104      	bne.n	8008cd4 <__gethex+0x210>
 8008cca:	9b05      	ldr	r3, [sp, #20]
 8008ccc:	c340      	stmia	r3!, {r6}
 8008cce:	2600      	movs	r6, #0
 8008cd0:	9305      	str	r3, [sp, #20]
 8008cd2:	9604      	str	r6, [sp, #16]
 8008cd4:	7820      	ldrb	r0, [r4, #0]
 8008cd6:	f7ff fedf 	bl	8008a98 <__hexdig_fun>
 8008cda:	230f      	movs	r3, #15
 8008cdc:	4018      	ands	r0, r3
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	4098      	lsls	r0, r3
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4306      	orrs	r6, r0
 8008ce6:	9304      	str	r3, [sp, #16]
 8008ce8:	e7a5      	b.n	8008c36 <__gethex+0x172>
 8008cea:	9b00      	ldr	r3, [sp, #0]
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d8e9      	bhi.n	8008cc4 <__gethex+0x200>
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	0020      	movs	r0, r4
 8008cf4:	4927      	ldr	r1, [pc, #156]	; (8008d94 <__gethex+0x2d0>)
 8008cf6:	f7ff fdfb 	bl	80088f0 <strncmp>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d1e2      	bne.n	8008cc4 <__gethex+0x200>
 8008cfe:	e79a      	b.n	8008c36 <__gethex+0x172>
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	2400      	movs	r4, #0
 8008d04:	429e      	cmp	r6, r3
 8008d06:	dacc      	bge.n	8008ca2 <__gethex+0x1de>
 8008d08:	1b9e      	subs	r6, r3, r6
 8008d0a:	0029      	movs	r1, r5
 8008d0c:	0032      	movs	r2, r6
 8008d0e:	9803      	ldr	r0, [sp, #12]
 8008d10:	f7fe fab8 	bl	8007284 <__lshift>
 8008d14:	0003      	movs	r3, r0
 8008d16:	3314      	adds	r3, #20
 8008d18:	0005      	movs	r5, r0
 8008d1a:	1bbf      	subs	r7, r7, r6
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	e7c0      	b.n	8008ca2 <__gethex+0x1de>
 8008d20:	9b01      	ldr	r3, [sp, #4]
 8008d22:	685e      	ldr	r6, [r3, #4]
 8008d24:	42be      	cmp	r6, r7
 8008d26:	dd70      	ble.n	8008e0a <__gethex+0x346>
 8008d28:	9b00      	ldr	r3, [sp, #0]
 8008d2a:	1bf6      	subs	r6, r6, r7
 8008d2c:	42b3      	cmp	r3, r6
 8008d2e:	dc37      	bgt.n	8008da0 <__gethex+0x2dc>
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d024      	beq.n	8008d82 <__gethex+0x2be>
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d026      	beq.n	8008d8a <__gethex+0x2c6>
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d117      	bne.n	8008d70 <__gethex+0x2ac>
 8008d40:	9b00      	ldr	r3, [sp, #0]
 8008d42:	42b3      	cmp	r3, r6
 8008d44:	d114      	bne.n	8008d70 <__gethex+0x2ac>
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d10b      	bne.n	8008d62 <__gethex+0x29e>
 8008d4a:	9b01      	ldr	r3, [sp, #4]
 8008d4c:	9a07      	ldr	r2, [sp, #28]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2662      	movs	r6, #98	; 0x62
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	2301      	movs	r3, #1
 8008d56:	9a02      	ldr	r2, [sp, #8]
 8008d58:	612b      	str	r3, [r5, #16]
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5e:	601d      	str	r5, [r3, #0]
 8008d60:	e739      	b.n	8008bd6 <__gethex+0x112>
 8008d62:	9900      	ldr	r1, [sp, #0]
 8008d64:	0028      	movs	r0, r5
 8008d66:	3901      	subs	r1, #1
 8008d68:	f7fe fcc0 	bl	80076ec <__any_on>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d1ec      	bne.n	8008d4a <__gethex+0x286>
 8008d70:	0029      	movs	r1, r5
 8008d72:	9803      	ldr	r0, [sp, #12]
 8008d74:	f7fe f866 	bl	8006e44 <_Bfree>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d7c:	2650      	movs	r6, #80	; 0x50
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	e729      	b.n	8008bd6 <__gethex+0x112>
 8008d82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1f3      	bne.n	8008d70 <__gethex+0x2ac>
 8008d88:	e7df      	b.n	8008d4a <__gethex+0x286>
 8008d8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1dc      	bne.n	8008d4a <__gethex+0x286>
 8008d90:	e7ee      	b.n	8008d70 <__gethex+0x2ac>
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	08009a0c 	.word	0x08009a0c
 8008d98:	080098a5 	.word	0x080098a5
 8008d9c:	08009bb6 	.word	0x08009bb6
 8008da0:	1e77      	subs	r7, r6, #1
 8008da2:	2c00      	cmp	r4, #0
 8008da4:	d12f      	bne.n	8008e06 <__gethex+0x342>
 8008da6:	2f00      	cmp	r7, #0
 8008da8:	d004      	beq.n	8008db4 <__gethex+0x2f0>
 8008daa:	0039      	movs	r1, r7
 8008dac:	0028      	movs	r0, r5
 8008dae:	f7fe fc9d 	bl	80076ec <__any_on>
 8008db2:	0004      	movs	r4, r0
 8008db4:	231f      	movs	r3, #31
 8008db6:	117a      	asrs	r2, r7, #5
 8008db8:	401f      	ands	r7, r3
 8008dba:	3b1e      	subs	r3, #30
 8008dbc:	40bb      	lsls	r3, r7
 8008dbe:	9902      	ldr	r1, [sp, #8]
 8008dc0:	0092      	lsls	r2, r2, #2
 8008dc2:	5852      	ldr	r2, [r2, r1]
 8008dc4:	421a      	tst	r2, r3
 8008dc6:	d001      	beq.n	8008dcc <__gethex+0x308>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	431c      	orrs	r4, r3
 8008dcc:	9b00      	ldr	r3, [sp, #0]
 8008dce:	0031      	movs	r1, r6
 8008dd0:	1b9b      	subs	r3, r3, r6
 8008dd2:	2602      	movs	r6, #2
 8008dd4:	0028      	movs	r0, r5
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	f7ff fe09 	bl	80089ee <rshift>
 8008ddc:	9b01      	ldr	r3, [sp, #4]
 8008dde:	685f      	ldr	r7, [r3, #4]
 8008de0:	2c00      	cmp	r4, #0
 8008de2:	d041      	beq.n	8008e68 <__gethex+0x3a4>
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d010      	beq.n	8008e0e <__gethex+0x34a>
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d012      	beq.n	8008e16 <__gethex+0x352>
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d106      	bne.n	8008e02 <__gethex+0x33e>
 8008df4:	07a2      	lsls	r2, r4, #30
 8008df6:	d504      	bpl.n	8008e02 <__gethex+0x33e>
 8008df8:	9a02      	ldr	r2, [sp, #8]
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	4314      	orrs	r4, r2
 8008dfe:	421c      	tst	r4, r3
 8008e00:	d10c      	bne.n	8008e1c <__gethex+0x358>
 8008e02:	2310      	movs	r3, #16
 8008e04:	e02f      	b.n	8008e66 <__gethex+0x3a2>
 8008e06:	2401      	movs	r4, #1
 8008e08:	e7d4      	b.n	8008db4 <__gethex+0x2f0>
 8008e0a:	2601      	movs	r6, #1
 8008e0c:	e7e8      	b.n	8008de0 <__gethex+0x31c>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0f2      	beq.n	8008e02 <__gethex+0x33e>
 8008e1c:	692b      	ldr	r3, [r5, #16]
 8008e1e:	2000      	movs	r0, #0
 8008e20:	9302      	str	r3, [sp, #8]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	002b      	movs	r3, r5
 8008e28:	9a04      	ldr	r2, [sp, #16]
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	1899      	adds	r1, r3, r2
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	1c54      	adds	r4, r2, #1
 8008e32:	d01e      	beq.n	8008e72 <__gethex+0x3ae>
 8008e34:	3201      	adds	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	002b      	movs	r3, r5
 8008e3a:	3314      	adds	r3, #20
 8008e3c:	2e02      	cmp	r6, #2
 8008e3e:	d141      	bne.n	8008ec4 <__gethex+0x400>
 8008e40:	9a01      	ldr	r2, [sp, #4]
 8008e42:	9900      	ldr	r1, [sp, #0]
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	3a01      	subs	r2, #1
 8008e48:	428a      	cmp	r2, r1
 8008e4a:	d10b      	bne.n	8008e64 <__gethex+0x3a0>
 8008e4c:	221f      	movs	r2, #31
 8008e4e:	9800      	ldr	r0, [sp, #0]
 8008e50:	1149      	asrs	r1, r1, #5
 8008e52:	4002      	ands	r2, r0
 8008e54:	2001      	movs	r0, #1
 8008e56:	0004      	movs	r4, r0
 8008e58:	4094      	lsls	r4, r2
 8008e5a:	0089      	lsls	r1, r1, #2
 8008e5c:	58cb      	ldr	r3, [r1, r3]
 8008e5e:	4223      	tst	r3, r4
 8008e60:	d000      	beq.n	8008e64 <__gethex+0x3a0>
 8008e62:	2601      	movs	r6, #1
 8008e64:	2320      	movs	r3, #32
 8008e66:	431e      	orrs	r6, r3
 8008e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e6a:	601d      	str	r5, [r3, #0]
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	601f      	str	r7, [r3, #0]
 8008e70:	e6b1      	b.n	8008bd6 <__gethex+0x112>
 8008e72:	c301      	stmia	r3!, {r0}
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d8da      	bhi.n	8008e2e <__gethex+0x36a>
 8008e78:	68ab      	ldr	r3, [r5, #8]
 8008e7a:	9a02      	ldr	r2, [sp, #8]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	db18      	blt.n	8008eb2 <__gethex+0x3ee>
 8008e80:	6869      	ldr	r1, [r5, #4]
 8008e82:	9803      	ldr	r0, [sp, #12]
 8008e84:	3101      	adds	r1, #1
 8008e86:	f7fd ff99 	bl	8006dbc <_Balloc>
 8008e8a:	1e04      	subs	r4, r0, #0
 8008e8c:	d104      	bne.n	8008e98 <__gethex+0x3d4>
 8008e8e:	0022      	movs	r2, r4
 8008e90:	2184      	movs	r1, #132	; 0x84
 8008e92:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <__gethex+0x440>)
 8008e94:	481c      	ldr	r0, [pc, #112]	; (8008f08 <__gethex+0x444>)
 8008e96:	e6c2      	b.n	8008c1e <__gethex+0x15a>
 8008e98:	0029      	movs	r1, r5
 8008e9a:	692a      	ldr	r2, [r5, #16]
 8008e9c:	310c      	adds	r1, #12
 8008e9e:	3202      	adds	r2, #2
 8008ea0:	0092      	lsls	r2, r2, #2
 8008ea2:	300c      	adds	r0, #12
 8008ea4:	f7ff fd48 	bl	8008938 <memcpy>
 8008ea8:	0029      	movs	r1, r5
 8008eaa:	9803      	ldr	r0, [sp, #12]
 8008eac:	f7fd ffca 	bl	8006e44 <_Bfree>
 8008eb0:	0025      	movs	r5, r4
 8008eb2:	692b      	ldr	r3, [r5, #16]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	612a      	str	r2, [r5, #16]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	3304      	adds	r3, #4
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	18eb      	adds	r3, r5, r3
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	e7b9      	b.n	8008e38 <__gethex+0x374>
 8008ec4:	692a      	ldr	r2, [r5, #16]
 8008ec6:	9902      	ldr	r1, [sp, #8]
 8008ec8:	428a      	cmp	r2, r1
 8008eca:	dd09      	ble.n	8008ee0 <__gethex+0x41c>
 8008ecc:	2101      	movs	r1, #1
 8008ece:	0028      	movs	r0, r5
 8008ed0:	f7ff fd8d 	bl	80089ee <rshift>
 8008ed4:	9b01      	ldr	r3, [sp, #4]
 8008ed6:	3701      	adds	r7, #1
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	42bb      	cmp	r3, r7
 8008edc:	dac1      	bge.n	8008e62 <__gethex+0x39e>
 8008ede:	e6e4      	b.n	8008caa <__gethex+0x1e6>
 8008ee0:	221f      	movs	r2, #31
 8008ee2:	9c00      	ldr	r4, [sp, #0]
 8008ee4:	9900      	ldr	r1, [sp, #0]
 8008ee6:	2601      	movs	r6, #1
 8008ee8:	4014      	ands	r4, r2
 8008eea:	4211      	tst	r1, r2
 8008eec:	d0ba      	beq.n	8008e64 <__gethex+0x3a0>
 8008eee:	9a04      	ldr	r2, [sp, #16]
 8008ef0:	189b      	adds	r3, r3, r2
 8008ef2:	3b04      	subs	r3, #4
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	f7fe f859 	bl	8006fac <__hi0bits>
 8008efa:	2320      	movs	r3, #32
 8008efc:	1b1b      	subs	r3, r3, r4
 8008efe:	4298      	cmp	r0, r3
 8008f00:	dbe4      	blt.n	8008ecc <__gethex+0x408>
 8008f02:	e7af      	b.n	8008e64 <__gethex+0x3a0>
 8008f04:	080098a5 	.word	0x080098a5
 8008f08:	08009bb6 	.word	0x08009bb6

08008f0c <L_shift>:
 8008f0c:	2308      	movs	r3, #8
 8008f0e:	b570      	push	{r4, r5, r6, lr}
 8008f10:	2520      	movs	r5, #32
 8008f12:	1a9a      	subs	r2, r3, r2
 8008f14:	0092      	lsls	r2, r2, #2
 8008f16:	1aad      	subs	r5, r5, r2
 8008f18:	6843      	ldr	r3, [r0, #4]
 8008f1a:	6804      	ldr	r4, [r0, #0]
 8008f1c:	001e      	movs	r6, r3
 8008f1e:	40ae      	lsls	r6, r5
 8008f20:	40d3      	lsrs	r3, r2
 8008f22:	4334      	orrs	r4, r6
 8008f24:	6004      	str	r4, [r0, #0]
 8008f26:	6043      	str	r3, [r0, #4]
 8008f28:	3004      	adds	r0, #4
 8008f2a:	4288      	cmp	r0, r1
 8008f2c:	d3f4      	bcc.n	8008f18 <L_shift+0xc>
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}

08008f30 <__match>:
 8008f30:	b530      	push	{r4, r5, lr}
 8008f32:	6803      	ldr	r3, [r0, #0]
 8008f34:	780c      	ldrb	r4, [r1, #0]
 8008f36:	3301      	adds	r3, #1
 8008f38:	2c00      	cmp	r4, #0
 8008f3a:	d102      	bne.n	8008f42 <__match+0x12>
 8008f3c:	6003      	str	r3, [r0, #0]
 8008f3e:	2001      	movs	r0, #1
 8008f40:	bd30      	pop	{r4, r5, pc}
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	0015      	movs	r5, r2
 8008f46:	3d41      	subs	r5, #65	; 0x41
 8008f48:	2d19      	cmp	r5, #25
 8008f4a:	d800      	bhi.n	8008f4e <__match+0x1e>
 8008f4c:	3220      	adds	r2, #32
 8008f4e:	3101      	adds	r1, #1
 8008f50:	42a2      	cmp	r2, r4
 8008f52:	d0ef      	beq.n	8008f34 <__match+0x4>
 8008f54:	2000      	movs	r0, #0
 8008f56:	e7f3      	b.n	8008f40 <__match+0x10>

08008f58 <__hexnan>:
 8008f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f5a:	680b      	ldr	r3, [r1, #0]
 8008f5c:	b08b      	sub	sp, #44	; 0x2c
 8008f5e:	9201      	str	r2, [sp, #4]
 8008f60:	9901      	ldr	r1, [sp, #4]
 8008f62:	115a      	asrs	r2, r3, #5
 8008f64:	0092      	lsls	r2, r2, #2
 8008f66:	188a      	adds	r2, r1, r2
 8008f68:	9202      	str	r2, [sp, #8]
 8008f6a:	0019      	movs	r1, r3
 8008f6c:	221f      	movs	r2, #31
 8008f6e:	4011      	ands	r1, r2
 8008f70:	9008      	str	r0, [sp, #32]
 8008f72:	9106      	str	r1, [sp, #24]
 8008f74:	4213      	tst	r3, r2
 8008f76:	d002      	beq.n	8008f7e <__hexnan+0x26>
 8008f78:	9b02      	ldr	r3, [sp, #8]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	9302      	str	r3, [sp, #8]
 8008f7e:	9b02      	ldr	r3, [sp, #8]
 8008f80:	2500      	movs	r5, #0
 8008f82:	1f1f      	subs	r7, r3, #4
 8008f84:	003e      	movs	r6, r7
 8008f86:	003c      	movs	r4, r7
 8008f88:	9b08      	ldr	r3, [sp, #32]
 8008f8a:	603d      	str	r5, [r7, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	9507      	str	r5, [sp, #28]
 8008f90:	9305      	str	r3, [sp, #20]
 8008f92:	9503      	str	r5, [sp, #12]
 8008f94:	9b05      	ldr	r3, [sp, #20]
 8008f96:	3301      	adds	r3, #1
 8008f98:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9a:	9b05      	ldr	r3, [sp, #20]
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	9304      	str	r3, [sp, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d028      	beq.n	8008ff6 <__hexnan+0x9e>
 8008fa4:	9804      	ldr	r0, [sp, #16]
 8008fa6:	f7ff fd77 	bl	8008a98 <__hexdig_fun>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d154      	bne.n	8009058 <__hexnan+0x100>
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d819      	bhi.n	8008fe8 <__hexnan+0x90>
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	9a07      	ldr	r2, [sp, #28]
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	dd12      	ble.n	8008fe2 <__hexnan+0x8a>
 8008fbc:	42b4      	cmp	r4, r6
 8008fbe:	d206      	bcs.n	8008fce <__hexnan+0x76>
 8008fc0:	2d07      	cmp	r5, #7
 8008fc2:	dc04      	bgt.n	8008fce <__hexnan+0x76>
 8008fc4:	002a      	movs	r2, r5
 8008fc6:	0031      	movs	r1, r6
 8008fc8:	0020      	movs	r0, r4
 8008fca:	f7ff ff9f 	bl	8008f0c <L_shift>
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	2508      	movs	r5, #8
 8008fd2:	429c      	cmp	r4, r3
 8008fd4:	d905      	bls.n	8008fe2 <__hexnan+0x8a>
 8008fd6:	1f26      	subs	r6, r4, #4
 8008fd8:	2500      	movs	r5, #0
 8008fda:	0034      	movs	r4, r6
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	6035      	str	r5, [r6, #0]
 8008fe0:	9307      	str	r3, [sp, #28]
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	e7d5      	b.n	8008f94 <__hexnan+0x3c>
 8008fe8:	9b04      	ldr	r3, [sp, #16]
 8008fea:	2b29      	cmp	r3, #41	; 0x29
 8008fec:	d159      	bne.n	80090a2 <__hexnan+0x14a>
 8008fee:	9b05      	ldr	r3, [sp, #20]
 8008ff0:	9a08      	ldr	r2, [sp, #32]
 8008ff2:	3302      	adds	r3, #2
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d052      	beq.n	80090a2 <__hexnan+0x14a>
 8008ffc:	42b4      	cmp	r4, r6
 8008ffe:	d206      	bcs.n	800900e <__hexnan+0xb6>
 8009000:	2d07      	cmp	r5, #7
 8009002:	dc04      	bgt.n	800900e <__hexnan+0xb6>
 8009004:	002a      	movs	r2, r5
 8009006:	0031      	movs	r1, r6
 8009008:	0020      	movs	r0, r4
 800900a:	f7ff ff7f 	bl	8008f0c <L_shift>
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	429c      	cmp	r4, r3
 8009012:	d935      	bls.n	8009080 <__hexnan+0x128>
 8009014:	001a      	movs	r2, r3
 8009016:	0023      	movs	r3, r4
 8009018:	cb02      	ldmia	r3!, {r1}
 800901a:	c202      	stmia	r2!, {r1}
 800901c:	429f      	cmp	r7, r3
 800901e:	d2fb      	bcs.n	8009018 <__hexnan+0xc0>
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	1c62      	adds	r2, r4, #1
 8009024:	1ed9      	subs	r1, r3, #3
 8009026:	2304      	movs	r3, #4
 8009028:	4291      	cmp	r1, r2
 800902a:	d305      	bcc.n	8009038 <__hexnan+0xe0>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	3b04      	subs	r3, #4
 8009030:	1b1b      	subs	r3, r3, r4
 8009032:	089b      	lsrs	r3, r3, #2
 8009034:	3301      	adds	r3, #1
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	9a01      	ldr	r2, [sp, #4]
 800903a:	18d3      	adds	r3, r2, r3
 800903c:	2200      	movs	r2, #0
 800903e:	c304      	stmia	r3!, {r2}
 8009040:	429f      	cmp	r7, r3
 8009042:	d2fc      	bcs.n	800903e <__hexnan+0xe6>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <__hexnan+0xfc>
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	429f      	cmp	r7, r3
 800904e:	d126      	bne.n	800909e <__hexnan+0x146>
 8009050:	2301      	movs	r3, #1
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	2005      	movs	r0, #5
 8009056:	e025      	b.n	80090a4 <__hexnan+0x14c>
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	3501      	adds	r5, #1
 800905c:	3301      	adds	r3, #1
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	2d08      	cmp	r5, #8
 8009062:	dd06      	ble.n	8009072 <__hexnan+0x11a>
 8009064:	9b01      	ldr	r3, [sp, #4]
 8009066:	429c      	cmp	r4, r3
 8009068:	d9bb      	bls.n	8008fe2 <__hexnan+0x8a>
 800906a:	2300      	movs	r3, #0
 800906c:	2501      	movs	r5, #1
 800906e:	3c04      	subs	r4, #4
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	220f      	movs	r2, #15
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	4010      	ands	r0, r2
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	4303      	orrs	r3, r0
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	e7b0      	b.n	8008fe2 <__hexnan+0x8a>
 8009080:	9b06      	ldr	r3, [sp, #24]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0de      	beq.n	8009044 <__hexnan+0xec>
 8009086:	2320      	movs	r3, #32
 8009088:	9a06      	ldr	r2, [sp, #24]
 800908a:	9902      	ldr	r1, [sp, #8]
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	2201      	movs	r2, #1
 8009090:	4252      	negs	r2, r2
 8009092:	40da      	lsrs	r2, r3
 8009094:	3904      	subs	r1, #4
 8009096:	680b      	ldr	r3, [r1, #0]
 8009098:	4013      	ands	r3, r2
 800909a:	600b      	str	r3, [r1, #0]
 800909c:	e7d2      	b.n	8009044 <__hexnan+0xec>
 800909e:	3f04      	subs	r7, #4
 80090a0:	e7d0      	b.n	8009044 <__hexnan+0xec>
 80090a2:	2004      	movs	r0, #4
 80090a4:	b00b      	add	sp, #44	; 0x2c
 80090a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090a8 <__ascii_mbtowc>:
 80090a8:	b082      	sub	sp, #8
 80090aa:	2900      	cmp	r1, #0
 80090ac:	d100      	bne.n	80090b0 <__ascii_mbtowc+0x8>
 80090ae:	a901      	add	r1, sp, #4
 80090b0:	1e10      	subs	r0, r2, #0
 80090b2:	d006      	beq.n	80090c2 <__ascii_mbtowc+0x1a>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d006      	beq.n	80090c6 <__ascii_mbtowc+0x1e>
 80090b8:	7813      	ldrb	r3, [r2, #0]
 80090ba:	600b      	str	r3, [r1, #0]
 80090bc:	7810      	ldrb	r0, [r2, #0]
 80090be:	1e43      	subs	r3, r0, #1
 80090c0:	4198      	sbcs	r0, r3
 80090c2:	b002      	add	sp, #8
 80090c4:	4770      	bx	lr
 80090c6:	2002      	movs	r0, #2
 80090c8:	4240      	negs	r0, r0
 80090ca:	e7fa      	b.n	80090c2 <__ascii_mbtowc+0x1a>

080090cc <_realloc_r>:
 80090cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ce:	0007      	movs	r7, r0
 80090d0:	000e      	movs	r6, r1
 80090d2:	0014      	movs	r4, r2
 80090d4:	2900      	cmp	r1, #0
 80090d6:	d105      	bne.n	80090e4 <_realloc_r+0x18>
 80090d8:	0011      	movs	r1, r2
 80090da:	f7fd fddd 	bl	8006c98 <_malloc_r>
 80090de:	0005      	movs	r5, r0
 80090e0:	0028      	movs	r0, r5
 80090e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d103      	bne.n	80090f0 <_realloc_r+0x24>
 80090e8:	f7fd fd60 	bl	8006bac <_free_r>
 80090ec:	0025      	movs	r5, r4
 80090ee:	e7f7      	b.n	80090e0 <_realloc_r+0x14>
 80090f0:	f000 f83f 	bl	8009172 <_malloc_usable_size_r>
 80090f4:	9001      	str	r0, [sp, #4]
 80090f6:	4284      	cmp	r4, r0
 80090f8:	d803      	bhi.n	8009102 <_realloc_r+0x36>
 80090fa:	0035      	movs	r5, r6
 80090fc:	0843      	lsrs	r3, r0, #1
 80090fe:	42a3      	cmp	r3, r4
 8009100:	d3ee      	bcc.n	80090e0 <_realloc_r+0x14>
 8009102:	0021      	movs	r1, r4
 8009104:	0038      	movs	r0, r7
 8009106:	f7fd fdc7 	bl	8006c98 <_malloc_r>
 800910a:	1e05      	subs	r5, r0, #0
 800910c:	d0e8      	beq.n	80090e0 <_realloc_r+0x14>
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	0022      	movs	r2, r4
 8009112:	429c      	cmp	r4, r3
 8009114:	d900      	bls.n	8009118 <_realloc_r+0x4c>
 8009116:	001a      	movs	r2, r3
 8009118:	0031      	movs	r1, r6
 800911a:	0028      	movs	r0, r5
 800911c:	f7ff fc0c 	bl	8008938 <memcpy>
 8009120:	0031      	movs	r1, r6
 8009122:	0038      	movs	r0, r7
 8009124:	f7fd fd42 	bl	8006bac <_free_r>
 8009128:	e7da      	b.n	80090e0 <_realloc_r+0x14>

0800912a <__ascii_wctomb>:
 800912a:	0003      	movs	r3, r0
 800912c:	1e08      	subs	r0, r1, #0
 800912e:	d005      	beq.n	800913c <__ascii_wctomb+0x12>
 8009130:	2aff      	cmp	r2, #255	; 0xff
 8009132:	d904      	bls.n	800913e <__ascii_wctomb+0x14>
 8009134:	228a      	movs	r2, #138	; 0x8a
 8009136:	2001      	movs	r0, #1
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	4240      	negs	r0, r0
 800913c:	4770      	bx	lr
 800913e:	2001      	movs	r0, #1
 8009140:	700a      	strb	r2, [r1, #0]
 8009142:	e7fb      	b.n	800913c <__ascii_wctomb+0x12>

08009144 <fiprintf>:
 8009144:	b40e      	push	{r1, r2, r3}
 8009146:	b517      	push	{r0, r1, r2, r4, lr}
 8009148:	4c05      	ldr	r4, [pc, #20]	; (8009160 <fiprintf+0x1c>)
 800914a:	ab05      	add	r3, sp, #20
 800914c:	cb04      	ldmia	r3!, {r2}
 800914e:	0001      	movs	r1, r0
 8009150:	6820      	ldr	r0, [r4, #0]
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	f000 f83c 	bl	80091d0 <_vfiprintf_r>
 8009158:	bc1e      	pop	{r1, r2, r3, r4}
 800915a:	bc08      	pop	{r3}
 800915c:	b003      	add	sp, #12
 800915e:	4718      	bx	r3
 8009160:	20000064 	.word	0x20000064

08009164 <abort>:
 8009164:	2006      	movs	r0, #6
 8009166:	b510      	push	{r4, lr}
 8009168:	f000 fa1e 	bl	80095a8 <raise>
 800916c:	2001      	movs	r0, #1
 800916e:	f7f9 fdcb 	bl	8002d08 <_exit>

08009172 <_malloc_usable_size_r>:
 8009172:	1f0b      	subs	r3, r1, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	1f18      	subs	r0, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	da01      	bge.n	8009180 <_malloc_usable_size_r+0xe>
 800917c:	580b      	ldr	r3, [r1, r0]
 800917e:	18c0      	adds	r0, r0, r3
 8009180:	4770      	bx	lr

08009182 <__sfputc_r>:
 8009182:	6893      	ldr	r3, [r2, #8]
 8009184:	b510      	push	{r4, lr}
 8009186:	3b01      	subs	r3, #1
 8009188:	6093      	str	r3, [r2, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da04      	bge.n	8009198 <__sfputc_r+0x16>
 800918e:	6994      	ldr	r4, [r2, #24]
 8009190:	42a3      	cmp	r3, r4
 8009192:	db07      	blt.n	80091a4 <__sfputc_r+0x22>
 8009194:	290a      	cmp	r1, #10
 8009196:	d005      	beq.n	80091a4 <__sfputc_r+0x22>
 8009198:	6813      	ldr	r3, [r2, #0]
 800919a:	1c58      	adds	r0, r3, #1
 800919c:	6010      	str	r0, [r2, #0]
 800919e:	7019      	strb	r1, [r3, #0]
 80091a0:	0008      	movs	r0, r1
 80091a2:	bd10      	pop	{r4, pc}
 80091a4:	f000 f930 	bl	8009408 <__swbuf_r>
 80091a8:	0001      	movs	r1, r0
 80091aa:	e7f9      	b.n	80091a0 <__sfputc_r+0x1e>

080091ac <__sfputs_r>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	0006      	movs	r6, r0
 80091b0:	000f      	movs	r7, r1
 80091b2:	0014      	movs	r4, r2
 80091b4:	18d5      	adds	r5, r2, r3
 80091b6:	42ac      	cmp	r4, r5
 80091b8:	d101      	bne.n	80091be <__sfputs_r+0x12>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e007      	b.n	80091ce <__sfputs_r+0x22>
 80091be:	7821      	ldrb	r1, [r4, #0]
 80091c0:	003a      	movs	r2, r7
 80091c2:	0030      	movs	r0, r6
 80091c4:	f7ff ffdd 	bl	8009182 <__sfputc_r>
 80091c8:	3401      	adds	r4, #1
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	d1f3      	bne.n	80091b6 <__sfputs_r+0xa>
 80091ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091d0 <_vfiprintf_r>:
 80091d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d2:	b0a1      	sub	sp, #132	; 0x84
 80091d4:	000f      	movs	r7, r1
 80091d6:	0015      	movs	r5, r2
 80091d8:	001e      	movs	r6, r3
 80091da:	9003      	str	r0, [sp, #12]
 80091dc:	2800      	cmp	r0, #0
 80091de:	d004      	beq.n	80091ea <_vfiprintf_r+0x1a>
 80091e0:	6a03      	ldr	r3, [r0, #32]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <_vfiprintf_r+0x1a>
 80091e6:	f7fc fd0d 	bl	8005c04 <__sinit>
 80091ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ec:	07db      	lsls	r3, r3, #31
 80091ee:	d405      	bmi.n	80091fc <_vfiprintf_r+0x2c>
 80091f0:	89bb      	ldrh	r3, [r7, #12]
 80091f2:	059b      	lsls	r3, r3, #22
 80091f4:	d402      	bmi.n	80091fc <_vfiprintf_r+0x2c>
 80091f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80091f8:	f7fc fe29 	bl	8005e4e <__retarget_lock_acquire_recursive>
 80091fc:	89bb      	ldrh	r3, [r7, #12]
 80091fe:	071b      	lsls	r3, r3, #28
 8009200:	d502      	bpl.n	8009208 <_vfiprintf_r+0x38>
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d113      	bne.n	8009230 <_vfiprintf_r+0x60>
 8009208:	0039      	movs	r1, r7
 800920a:	9803      	ldr	r0, [sp, #12]
 800920c:	f000 f93e 	bl	800948c <__swsetup_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	d00d      	beq.n	8009230 <_vfiprintf_r+0x60>
 8009214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009216:	07db      	lsls	r3, r3, #31
 8009218:	d503      	bpl.n	8009222 <_vfiprintf_r+0x52>
 800921a:	2001      	movs	r0, #1
 800921c:	4240      	negs	r0, r0
 800921e:	b021      	add	sp, #132	; 0x84
 8009220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009222:	89bb      	ldrh	r3, [r7, #12]
 8009224:	059b      	lsls	r3, r3, #22
 8009226:	d4f8      	bmi.n	800921a <_vfiprintf_r+0x4a>
 8009228:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800922a:	f7fc fe11 	bl	8005e50 <__retarget_lock_release_recursive>
 800922e:	e7f4      	b.n	800921a <_vfiprintf_r+0x4a>
 8009230:	2300      	movs	r3, #0
 8009232:	ac08      	add	r4, sp, #32
 8009234:	6163      	str	r3, [r4, #20]
 8009236:	3320      	adds	r3, #32
 8009238:	7663      	strb	r3, [r4, #25]
 800923a:	3310      	adds	r3, #16
 800923c:	76a3      	strb	r3, [r4, #26]
 800923e:	9607      	str	r6, [sp, #28]
 8009240:	002e      	movs	r6, r5
 8009242:	7833      	ldrb	r3, [r6, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <_vfiprintf_r+0x7c>
 8009248:	2b25      	cmp	r3, #37	; 0x25
 800924a:	d148      	bne.n	80092de <_vfiprintf_r+0x10e>
 800924c:	1b73      	subs	r3, r6, r5
 800924e:	9305      	str	r3, [sp, #20]
 8009250:	42ae      	cmp	r6, r5
 8009252:	d00b      	beq.n	800926c <_vfiprintf_r+0x9c>
 8009254:	002a      	movs	r2, r5
 8009256:	0039      	movs	r1, r7
 8009258:	9803      	ldr	r0, [sp, #12]
 800925a:	f7ff ffa7 	bl	80091ac <__sfputs_r>
 800925e:	3001      	adds	r0, #1
 8009260:	d100      	bne.n	8009264 <_vfiprintf_r+0x94>
 8009262:	e0af      	b.n	80093c4 <_vfiprintf_r+0x1f4>
 8009264:	6963      	ldr	r3, [r4, #20]
 8009266:	9a05      	ldr	r2, [sp, #20]
 8009268:	189b      	adds	r3, r3, r2
 800926a:	6163      	str	r3, [r4, #20]
 800926c:	7833      	ldrb	r3, [r6, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d100      	bne.n	8009274 <_vfiprintf_r+0xa4>
 8009272:	e0a7      	b.n	80093c4 <_vfiprintf_r+0x1f4>
 8009274:	2201      	movs	r2, #1
 8009276:	2300      	movs	r3, #0
 8009278:	4252      	negs	r2, r2
 800927a:	6062      	str	r2, [r4, #4]
 800927c:	a904      	add	r1, sp, #16
 800927e:	3254      	adds	r2, #84	; 0x54
 8009280:	1852      	adds	r2, r2, r1
 8009282:	1c75      	adds	r5, r6, #1
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	60e3      	str	r3, [r4, #12]
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	7013      	strb	r3, [r2, #0]
 800928c:	65a3      	str	r3, [r4, #88]	; 0x58
 800928e:	4b59      	ldr	r3, [pc, #356]	; (80093f4 <_vfiprintf_r+0x224>)
 8009290:	2205      	movs	r2, #5
 8009292:	0018      	movs	r0, r3
 8009294:	7829      	ldrb	r1, [r5, #0]
 8009296:	9305      	str	r3, [sp, #20]
 8009298:	f7fc fddb 	bl	8005e52 <memchr>
 800929c:	1c6e      	adds	r6, r5, #1
 800929e:	2800      	cmp	r0, #0
 80092a0:	d11f      	bne.n	80092e2 <_vfiprintf_r+0x112>
 80092a2:	6822      	ldr	r2, [r4, #0]
 80092a4:	06d3      	lsls	r3, r2, #27
 80092a6:	d504      	bpl.n	80092b2 <_vfiprintf_r+0xe2>
 80092a8:	2353      	movs	r3, #83	; 0x53
 80092aa:	a904      	add	r1, sp, #16
 80092ac:	185b      	adds	r3, r3, r1
 80092ae:	2120      	movs	r1, #32
 80092b0:	7019      	strb	r1, [r3, #0]
 80092b2:	0713      	lsls	r3, r2, #28
 80092b4:	d504      	bpl.n	80092c0 <_vfiprintf_r+0xf0>
 80092b6:	2353      	movs	r3, #83	; 0x53
 80092b8:	a904      	add	r1, sp, #16
 80092ba:	185b      	adds	r3, r3, r1
 80092bc:	212b      	movs	r1, #43	; 0x2b
 80092be:	7019      	strb	r1, [r3, #0]
 80092c0:	782b      	ldrb	r3, [r5, #0]
 80092c2:	2b2a      	cmp	r3, #42	; 0x2a
 80092c4:	d016      	beq.n	80092f4 <_vfiprintf_r+0x124>
 80092c6:	002e      	movs	r6, r5
 80092c8:	2100      	movs	r1, #0
 80092ca:	200a      	movs	r0, #10
 80092cc:	68e3      	ldr	r3, [r4, #12]
 80092ce:	7832      	ldrb	r2, [r6, #0]
 80092d0:	1c75      	adds	r5, r6, #1
 80092d2:	3a30      	subs	r2, #48	; 0x30
 80092d4:	2a09      	cmp	r2, #9
 80092d6:	d94e      	bls.n	8009376 <_vfiprintf_r+0x1a6>
 80092d8:	2900      	cmp	r1, #0
 80092da:	d111      	bne.n	8009300 <_vfiprintf_r+0x130>
 80092dc:	e017      	b.n	800930e <_vfiprintf_r+0x13e>
 80092de:	3601      	adds	r6, #1
 80092e0:	e7af      	b.n	8009242 <_vfiprintf_r+0x72>
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	6822      	ldr	r2, [r4, #0]
 80092e6:	1ac0      	subs	r0, r0, r3
 80092e8:	2301      	movs	r3, #1
 80092ea:	4083      	lsls	r3, r0
 80092ec:	4313      	orrs	r3, r2
 80092ee:	0035      	movs	r5, r6
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	e7cc      	b.n	800928e <_vfiprintf_r+0xbe>
 80092f4:	9b07      	ldr	r3, [sp, #28]
 80092f6:	1d19      	adds	r1, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9107      	str	r1, [sp, #28]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	db01      	blt.n	8009304 <_vfiprintf_r+0x134>
 8009300:	930b      	str	r3, [sp, #44]	; 0x2c
 8009302:	e004      	b.n	800930e <_vfiprintf_r+0x13e>
 8009304:	425b      	negs	r3, r3
 8009306:	60e3      	str	r3, [r4, #12]
 8009308:	2302      	movs	r3, #2
 800930a:	4313      	orrs	r3, r2
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	7833      	ldrb	r3, [r6, #0]
 8009310:	2b2e      	cmp	r3, #46	; 0x2e
 8009312:	d10a      	bne.n	800932a <_vfiprintf_r+0x15a>
 8009314:	7873      	ldrb	r3, [r6, #1]
 8009316:	2b2a      	cmp	r3, #42	; 0x2a
 8009318:	d135      	bne.n	8009386 <_vfiprintf_r+0x1b6>
 800931a:	9b07      	ldr	r3, [sp, #28]
 800931c:	3602      	adds	r6, #2
 800931e:	1d1a      	adds	r2, r3, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	9207      	str	r2, [sp, #28]
 8009324:	2b00      	cmp	r3, #0
 8009326:	db2b      	blt.n	8009380 <_vfiprintf_r+0x1b0>
 8009328:	9309      	str	r3, [sp, #36]	; 0x24
 800932a:	4d33      	ldr	r5, [pc, #204]	; (80093f8 <_vfiprintf_r+0x228>)
 800932c:	2203      	movs	r2, #3
 800932e:	0028      	movs	r0, r5
 8009330:	7831      	ldrb	r1, [r6, #0]
 8009332:	f7fc fd8e 	bl	8005e52 <memchr>
 8009336:	2800      	cmp	r0, #0
 8009338:	d006      	beq.n	8009348 <_vfiprintf_r+0x178>
 800933a:	2340      	movs	r3, #64	; 0x40
 800933c:	1b40      	subs	r0, r0, r5
 800933e:	4083      	lsls	r3, r0
 8009340:	6822      	ldr	r2, [r4, #0]
 8009342:	3601      	adds	r6, #1
 8009344:	4313      	orrs	r3, r2
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	7831      	ldrb	r1, [r6, #0]
 800934a:	2206      	movs	r2, #6
 800934c:	482b      	ldr	r0, [pc, #172]	; (80093fc <_vfiprintf_r+0x22c>)
 800934e:	1c75      	adds	r5, r6, #1
 8009350:	7621      	strb	r1, [r4, #24]
 8009352:	f7fc fd7e 	bl	8005e52 <memchr>
 8009356:	2800      	cmp	r0, #0
 8009358:	d043      	beq.n	80093e2 <_vfiprintf_r+0x212>
 800935a:	4b29      	ldr	r3, [pc, #164]	; (8009400 <_vfiprintf_r+0x230>)
 800935c:	2b00      	cmp	r3, #0
 800935e:	d125      	bne.n	80093ac <_vfiprintf_r+0x1dc>
 8009360:	2207      	movs	r2, #7
 8009362:	9b07      	ldr	r3, [sp, #28]
 8009364:	3307      	adds	r3, #7
 8009366:	4393      	bics	r3, r2
 8009368:	3308      	adds	r3, #8
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	6963      	ldr	r3, [r4, #20]
 800936e:	9a04      	ldr	r2, [sp, #16]
 8009370:	189b      	adds	r3, r3, r2
 8009372:	6163      	str	r3, [r4, #20]
 8009374:	e764      	b.n	8009240 <_vfiprintf_r+0x70>
 8009376:	4343      	muls	r3, r0
 8009378:	002e      	movs	r6, r5
 800937a:	2101      	movs	r1, #1
 800937c:	189b      	adds	r3, r3, r2
 800937e:	e7a6      	b.n	80092ce <_vfiprintf_r+0xfe>
 8009380:	2301      	movs	r3, #1
 8009382:	425b      	negs	r3, r3
 8009384:	e7d0      	b.n	8009328 <_vfiprintf_r+0x158>
 8009386:	2300      	movs	r3, #0
 8009388:	200a      	movs	r0, #10
 800938a:	001a      	movs	r2, r3
 800938c:	3601      	adds	r6, #1
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	7831      	ldrb	r1, [r6, #0]
 8009392:	1c75      	adds	r5, r6, #1
 8009394:	3930      	subs	r1, #48	; 0x30
 8009396:	2909      	cmp	r1, #9
 8009398:	d903      	bls.n	80093a2 <_vfiprintf_r+0x1d2>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0c5      	beq.n	800932a <_vfiprintf_r+0x15a>
 800939e:	9209      	str	r2, [sp, #36]	; 0x24
 80093a0:	e7c3      	b.n	800932a <_vfiprintf_r+0x15a>
 80093a2:	4342      	muls	r2, r0
 80093a4:	002e      	movs	r6, r5
 80093a6:	2301      	movs	r3, #1
 80093a8:	1852      	adds	r2, r2, r1
 80093aa:	e7f1      	b.n	8009390 <_vfiprintf_r+0x1c0>
 80093ac:	aa07      	add	r2, sp, #28
 80093ae:	9200      	str	r2, [sp, #0]
 80093b0:	0021      	movs	r1, r4
 80093b2:	003a      	movs	r2, r7
 80093b4:	4b13      	ldr	r3, [pc, #76]	; (8009404 <_vfiprintf_r+0x234>)
 80093b6:	9803      	ldr	r0, [sp, #12]
 80093b8:	f7fb fdb6 	bl	8004f28 <_printf_float>
 80093bc:	9004      	str	r0, [sp, #16]
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	3301      	adds	r3, #1
 80093c2:	d1d3      	bne.n	800936c <_vfiprintf_r+0x19c>
 80093c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093c6:	07db      	lsls	r3, r3, #31
 80093c8:	d405      	bmi.n	80093d6 <_vfiprintf_r+0x206>
 80093ca:	89bb      	ldrh	r3, [r7, #12]
 80093cc:	059b      	lsls	r3, r3, #22
 80093ce:	d402      	bmi.n	80093d6 <_vfiprintf_r+0x206>
 80093d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80093d2:	f7fc fd3d 	bl	8005e50 <__retarget_lock_release_recursive>
 80093d6:	89bb      	ldrh	r3, [r7, #12]
 80093d8:	065b      	lsls	r3, r3, #25
 80093da:	d500      	bpl.n	80093de <_vfiprintf_r+0x20e>
 80093dc:	e71d      	b.n	800921a <_vfiprintf_r+0x4a>
 80093de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093e0:	e71d      	b.n	800921e <_vfiprintf_r+0x4e>
 80093e2:	aa07      	add	r2, sp, #28
 80093e4:	9200      	str	r2, [sp, #0]
 80093e6:	0021      	movs	r1, r4
 80093e8:	003a      	movs	r2, r7
 80093ea:	4b06      	ldr	r3, [pc, #24]	; (8009404 <_vfiprintf_r+0x234>)
 80093ec:	9803      	ldr	r0, [sp, #12]
 80093ee:	f7fc f861 	bl	80054b4 <_printf_i>
 80093f2:	e7e3      	b.n	80093bc <_vfiprintf_r+0x1ec>
 80093f4:	08009b61 	.word	0x08009b61
 80093f8:	08009b67 	.word	0x08009b67
 80093fc:	08009b6b 	.word	0x08009b6b
 8009400:	08004f29 	.word	0x08004f29
 8009404:	080091ad 	.word	0x080091ad

08009408 <__swbuf_r>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	0006      	movs	r6, r0
 800940c:	000d      	movs	r5, r1
 800940e:	0014      	movs	r4, r2
 8009410:	2800      	cmp	r0, #0
 8009412:	d004      	beq.n	800941e <__swbuf_r+0x16>
 8009414:	6a03      	ldr	r3, [r0, #32]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <__swbuf_r+0x16>
 800941a:	f7fc fbf3 	bl	8005c04 <__sinit>
 800941e:	69a3      	ldr	r3, [r4, #24]
 8009420:	60a3      	str	r3, [r4, #8]
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	071b      	lsls	r3, r3, #28
 8009426:	d528      	bpl.n	800947a <__swbuf_r+0x72>
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d025      	beq.n	800947a <__swbuf_r+0x72>
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	b2ef      	uxtb	r7, r5
 8009434:	1ac0      	subs	r0, r0, r3
 8009436:	6963      	ldr	r3, [r4, #20]
 8009438:	b2ed      	uxtb	r5, r5
 800943a:	4283      	cmp	r3, r0
 800943c:	dc05      	bgt.n	800944a <__swbuf_r+0x42>
 800943e:	0021      	movs	r1, r4
 8009440:	0030      	movs	r0, r6
 8009442:	f7ff fa17 	bl	8008874 <_fflush_r>
 8009446:	2800      	cmp	r0, #0
 8009448:	d11d      	bne.n	8009486 <__swbuf_r+0x7e>
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	3001      	adds	r0, #1
 800944e:	3b01      	subs	r3, #1
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	6022      	str	r2, [r4, #0]
 8009458:	701f      	strb	r7, [r3, #0]
 800945a:	6963      	ldr	r3, [r4, #20]
 800945c:	4283      	cmp	r3, r0
 800945e:	d004      	beq.n	800946a <__swbuf_r+0x62>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	07db      	lsls	r3, r3, #31
 8009464:	d507      	bpl.n	8009476 <__swbuf_r+0x6e>
 8009466:	2d0a      	cmp	r5, #10
 8009468:	d105      	bne.n	8009476 <__swbuf_r+0x6e>
 800946a:	0021      	movs	r1, r4
 800946c:	0030      	movs	r0, r6
 800946e:	f7ff fa01 	bl	8008874 <_fflush_r>
 8009472:	2800      	cmp	r0, #0
 8009474:	d107      	bne.n	8009486 <__swbuf_r+0x7e>
 8009476:	0028      	movs	r0, r5
 8009478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947a:	0021      	movs	r1, r4
 800947c:	0030      	movs	r0, r6
 800947e:	f000 f805 	bl	800948c <__swsetup_r>
 8009482:	2800      	cmp	r0, #0
 8009484:	d0d3      	beq.n	800942e <__swbuf_r+0x26>
 8009486:	2501      	movs	r5, #1
 8009488:	426d      	negs	r5, r5
 800948a:	e7f4      	b.n	8009476 <__swbuf_r+0x6e>

0800948c <__swsetup_r>:
 800948c:	4b30      	ldr	r3, [pc, #192]	; (8009550 <__swsetup_r+0xc4>)
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	0005      	movs	r5, r0
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	000c      	movs	r4, r1
 8009496:	2800      	cmp	r0, #0
 8009498:	d004      	beq.n	80094a4 <__swsetup_r+0x18>
 800949a:	6a03      	ldr	r3, [r0, #32]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <__swsetup_r+0x18>
 80094a0:	f7fc fbb0 	bl	8005c04 <__sinit>
 80094a4:	230c      	movs	r3, #12
 80094a6:	5ee2      	ldrsh	r2, [r4, r3]
 80094a8:	b293      	uxth	r3, r2
 80094aa:	0711      	lsls	r1, r2, #28
 80094ac:	d423      	bmi.n	80094f6 <__swsetup_r+0x6a>
 80094ae:	06d9      	lsls	r1, r3, #27
 80094b0:	d407      	bmi.n	80094c2 <__swsetup_r+0x36>
 80094b2:	2309      	movs	r3, #9
 80094b4:	2001      	movs	r0, #1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	3337      	adds	r3, #55	; 0x37
 80094ba:	4313      	orrs	r3, r2
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	4240      	negs	r0, r0
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
 80094c2:	075b      	lsls	r3, r3, #29
 80094c4:	d513      	bpl.n	80094ee <__swsetup_r+0x62>
 80094c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c8:	2900      	cmp	r1, #0
 80094ca:	d008      	beq.n	80094de <__swsetup_r+0x52>
 80094cc:	0023      	movs	r3, r4
 80094ce:	3344      	adds	r3, #68	; 0x44
 80094d0:	4299      	cmp	r1, r3
 80094d2:	d002      	beq.n	80094da <__swsetup_r+0x4e>
 80094d4:	0028      	movs	r0, r5
 80094d6:	f7fd fb69 	bl	8006bac <_free_r>
 80094da:	2300      	movs	r3, #0
 80094dc:	6363      	str	r3, [r4, #52]	; 0x34
 80094de:	2224      	movs	r2, #36	; 0x24
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	4393      	bics	r3, r2
 80094e4:	81a3      	strh	r3, [r4, #12]
 80094e6:	2300      	movs	r3, #0
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	2308      	movs	r3, #8
 80094f0:	89a2      	ldrh	r2, [r4, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10b      	bne.n	8009514 <__swsetup_r+0x88>
 80094fc:	21a0      	movs	r1, #160	; 0xa0
 80094fe:	2280      	movs	r2, #128	; 0x80
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	0089      	lsls	r1, r1, #2
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	400b      	ands	r3, r1
 8009508:	4293      	cmp	r3, r2
 800950a:	d003      	beq.n	8009514 <__swsetup_r+0x88>
 800950c:	0021      	movs	r1, r4
 800950e:	0028      	movs	r0, r5
 8009510:	f000 f892 	bl	8009638 <__smakebuf_r>
 8009514:	220c      	movs	r2, #12
 8009516:	5ea3      	ldrsh	r3, [r4, r2]
 8009518:	2001      	movs	r0, #1
 800951a:	001a      	movs	r2, r3
 800951c:	b299      	uxth	r1, r3
 800951e:	4002      	ands	r2, r0
 8009520:	4203      	tst	r3, r0
 8009522:	d00f      	beq.n	8009544 <__swsetup_r+0xb8>
 8009524:	2200      	movs	r2, #0
 8009526:	60a2      	str	r2, [r4, #8]
 8009528:	6962      	ldr	r2, [r4, #20]
 800952a:	4252      	negs	r2, r2
 800952c:	61a2      	str	r2, [r4, #24]
 800952e:	2000      	movs	r0, #0
 8009530:	6922      	ldr	r2, [r4, #16]
 8009532:	4282      	cmp	r2, r0
 8009534:	d1c4      	bne.n	80094c0 <__swsetup_r+0x34>
 8009536:	0609      	lsls	r1, r1, #24
 8009538:	d5c2      	bpl.n	80094c0 <__swsetup_r+0x34>
 800953a:	2240      	movs	r2, #64	; 0x40
 800953c:	4313      	orrs	r3, r2
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	3801      	subs	r0, #1
 8009542:	e7bd      	b.n	80094c0 <__swsetup_r+0x34>
 8009544:	0788      	lsls	r0, r1, #30
 8009546:	d400      	bmi.n	800954a <__swsetup_r+0xbe>
 8009548:	6962      	ldr	r2, [r4, #20]
 800954a:	60a2      	str	r2, [r4, #8]
 800954c:	e7ef      	b.n	800952e <__swsetup_r+0xa2>
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	20000064 	.word	0x20000064

08009554 <_raise_r>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	0004      	movs	r4, r0
 8009558:	000d      	movs	r5, r1
 800955a:	291f      	cmp	r1, #31
 800955c:	d904      	bls.n	8009568 <_raise_r+0x14>
 800955e:	2316      	movs	r3, #22
 8009560:	6003      	str	r3, [r0, #0]
 8009562:	2001      	movs	r0, #1
 8009564:	4240      	negs	r0, r0
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d004      	beq.n	8009578 <_raise_r+0x24>
 800956e:	008a      	lsls	r2, r1, #2
 8009570:	189b      	adds	r3, r3, r2
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	2a00      	cmp	r2, #0
 8009576:	d108      	bne.n	800958a <_raise_r+0x36>
 8009578:	0020      	movs	r0, r4
 800957a:	f000 f831 	bl	80095e0 <_getpid_r>
 800957e:	002a      	movs	r2, r5
 8009580:	0001      	movs	r1, r0
 8009582:	0020      	movs	r0, r4
 8009584:	f000 f81a 	bl	80095bc <_kill_r>
 8009588:	e7ed      	b.n	8009566 <_raise_r+0x12>
 800958a:	2000      	movs	r0, #0
 800958c:	2a01      	cmp	r2, #1
 800958e:	d0ea      	beq.n	8009566 <_raise_r+0x12>
 8009590:	1c51      	adds	r1, r2, #1
 8009592:	d103      	bne.n	800959c <_raise_r+0x48>
 8009594:	2316      	movs	r3, #22
 8009596:	3001      	adds	r0, #1
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	e7e4      	b.n	8009566 <_raise_r+0x12>
 800959c:	2400      	movs	r4, #0
 800959e:	0028      	movs	r0, r5
 80095a0:	601c      	str	r4, [r3, #0]
 80095a2:	4790      	blx	r2
 80095a4:	0020      	movs	r0, r4
 80095a6:	e7de      	b.n	8009566 <_raise_r+0x12>

080095a8 <raise>:
 80095a8:	b510      	push	{r4, lr}
 80095aa:	4b03      	ldr	r3, [pc, #12]	; (80095b8 <raise+0x10>)
 80095ac:	0001      	movs	r1, r0
 80095ae:	6818      	ldr	r0, [r3, #0]
 80095b0:	f7ff ffd0 	bl	8009554 <_raise_r>
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	20000064 	.word	0x20000064

080095bc <_kill_r>:
 80095bc:	2300      	movs	r3, #0
 80095be:	b570      	push	{r4, r5, r6, lr}
 80095c0:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_kill_r+0x20>)
 80095c2:	0004      	movs	r4, r0
 80095c4:	0008      	movs	r0, r1
 80095c6:	0011      	movs	r1, r2
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f7f9 fb95 	bl	8002cf8 <_kill>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d103      	bne.n	80095da <_kill_r+0x1e>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d000      	beq.n	80095da <_kill_r+0x1e>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	20000814 	.word	0x20000814

080095e0 <_getpid_r>:
 80095e0:	b510      	push	{r4, lr}
 80095e2:	f7f9 fb87 	bl	8002cf4 <_getpid>
 80095e6:	bd10      	pop	{r4, pc}

080095e8 <__swhatbuf_r>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	000e      	movs	r6, r1
 80095ec:	001d      	movs	r5, r3
 80095ee:	230e      	movs	r3, #14
 80095f0:	5ec9      	ldrsh	r1, [r1, r3]
 80095f2:	0014      	movs	r4, r2
 80095f4:	b096      	sub	sp, #88	; 0x58
 80095f6:	2900      	cmp	r1, #0
 80095f8:	da0c      	bge.n	8009614 <__swhatbuf_r+0x2c>
 80095fa:	89b2      	ldrh	r2, [r6, #12]
 80095fc:	2380      	movs	r3, #128	; 0x80
 80095fe:	0011      	movs	r1, r2
 8009600:	4019      	ands	r1, r3
 8009602:	421a      	tst	r2, r3
 8009604:	d013      	beq.n	800962e <__swhatbuf_r+0x46>
 8009606:	2100      	movs	r1, #0
 8009608:	3b40      	subs	r3, #64	; 0x40
 800960a:	2000      	movs	r0, #0
 800960c:	6029      	str	r1, [r5, #0]
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	b016      	add	sp, #88	; 0x58
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	466a      	mov	r2, sp
 8009616:	f000 f84d 	bl	80096b4 <_fstat_r>
 800961a:	2800      	cmp	r0, #0
 800961c:	dbed      	blt.n	80095fa <__swhatbuf_r+0x12>
 800961e:	23f0      	movs	r3, #240	; 0xf0
 8009620:	9901      	ldr	r1, [sp, #4]
 8009622:	021b      	lsls	r3, r3, #8
 8009624:	4019      	ands	r1, r3
 8009626:	4b03      	ldr	r3, [pc, #12]	; (8009634 <__swhatbuf_r+0x4c>)
 8009628:	18c9      	adds	r1, r1, r3
 800962a:	424b      	negs	r3, r1
 800962c:	4159      	adcs	r1, r3
 800962e:	2380      	movs	r3, #128	; 0x80
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	e7ea      	b.n	800960a <__swhatbuf_r+0x22>
 8009634:	ffffe000 	.word	0xffffe000

08009638 <__smakebuf_r>:
 8009638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800963a:	2602      	movs	r6, #2
 800963c:	898b      	ldrh	r3, [r1, #12]
 800963e:	0005      	movs	r5, r0
 8009640:	000c      	movs	r4, r1
 8009642:	4233      	tst	r3, r6
 8009644:	d006      	beq.n	8009654 <__smakebuf_r+0x1c>
 8009646:	0023      	movs	r3, r4
 8009648:	3347      	adds	r3, #71	; 0x47
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	6123      	str	r3, [r4, #16]
 800964e:	2301      	movs	r3, #1
 8009650:	6163      	str	r3, [r4, #20]
 8009652:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009654:	466a      	mov	r2, sp
 8009656:	ab01      	add	r3, sp, #4
 8009658:	f7ff ffc6 	bl	80095e8 <__swhatbuf_r>
 800965c:	9900      	ldr	r1, [sp, #0]
 800965e:	0007      	movs	r7, r0
 8009660:	0028      	movs	r0, r5
 8009662:	f7fd fb19 	bl	8006c98 <_malloc_r>
 8009666:	2800      	cmp	r0, #0
 8009668:	d108      	bne.n	800967c <__smakebuf_r+0x44>
 800966a:	220c      	movs	r2, #12
 800966c:	5ea3      	ldrsh	r3, [r4, r2]
 800966e:	059a      	lsls	r2, r3, #22
 8009670:	d4ef      	bmi.n	8009652 <__smakebuf_r+0x1a>
 8009672:	2203      	movs	r2, #3
 8009674:	4393      	bics	r3, r2
 8009676:	431e      	orrs	r6, r3
 8009678:	81a6      	strh	r6, [r4, #12]
 800967a:	e7e4      	b.n	8009646 <__smakebuf_r+0xe>
 800967c:	2380      	movs	r3, #128	; 0x80
 800967e:	89a2      	ldrh	r2, [r4, #12]
 8009680:	6020      	str	r0, [r4, #0]
 8009682:	4313      	orrs	r3, r2
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	9b00      	ldr	r3, [sp, #0]
 8009688:	6120      	str	r0, [r4, #16]
 800968a:	6163      	str	r3, [r4, #20]
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00c      	beq.n	80096ac <__smakebuf_r+0x74>
 8009692:	0028      	movs	r0, r5
 8009694:	230e      	movs	r3, #14
 8009696:	5ee1      	ldrsh	r1, [r4, r3]
 8009698:	f000 f81e 	bl	80096d8 <_isatty_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	d005      	beq.n	80096ac <__smakebuf_r+0x74>
 80096a0:	2303      	movs	r3, #3
 80096a2:	89a2      	ldrh	r2, [r4, #12]
 80096a4:	439a      	bics	r2, r3
 80096a6:	3b02      	subs	r3, #2
 80096a8:	4313      	orrs	r3, r2
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	433b      	orrs	r3, r7
 80096b0:	81a3      	strh	r3, [r4, #12]
 80096b2:	e7ce      	b.n	8009652 <__smakebuf_r+0x1a>

080096b4 <_fstat_r>:
 80096b4:	2300      	movs	r3, #0
 80096b6:	b570      	push	{r4, r5, r6, lr}
 80096b8:	4d06      	ldr	r5, [pc, #24]	; (80096d4 <_fstat_r+0x20>)
 80096ba:	0004      	movs	r4, r0
 80096bc:	0008      	movs	r0, r1
 80096be:	0011      	movs	r1, r2
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	f7f9 fb44 	bl	8002d4e <_fstat>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d103      	bne.n	80096d2 <_fstat_r+0x1e>
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d000      	beq.n	80096d2 <_fstat_r+0x1e>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	20000814 	.word	0x20000814

080096d8 <_isatty_r>:
 80096d8:	2300      	movs	r3, #0
 80096da:	b570      	push	{r4, r5, r6, lr}
 80096dc:	4d06      	ldr	r5, [pc, #24]	; (80096f8 <_isatty_r+0x20>)
 80096de:	0004      	movs	r4, r0
 80096e0:	0008      	movs	r0, r1
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	f7f9 fb38 	bl	8002d58 <_isatty>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d103      	bne.n	80096f4 <_isatty_r+0x1c>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d000      	beq.n	80096f4 <_isatty_r+0x1c>
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	46c0      	nop			; (mov r8, r8)
 80096f8:	20000814 	.word	0x20000814

080096fc <_init>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009702:	bc08      	pop	{r3}
 8009704:	469e      	mov	lr, r3
 8009706:	4770      	bx	lr

08009708 <_fini>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr
