
RTOS_GPSv1_DUMMYAPP_FOTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e38c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800e450  0800e450  0001e450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea38  0800ea38  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea38  0800ea38  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea38  0800ea38  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea3c  0800ea3c  0001ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ea40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002040  200001d8  0800ec18  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002218  0800ec18  00022218  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228bf  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004642  00000000  00000000  00042b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  00047148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e4  00000000  00000000  00048fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005ebb  00000000  00000000  0004a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023ae0  00000000  00000000  0005066f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aaced  00000000  00000000  0007414f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008450  00000000  00000000  0011ee3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0012728c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e434 	.word	0x0800e434

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800e434 	.word	0x0800e434

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff99 	bl	8001374 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fee9 	bl	8001224 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff8b 	bl	8001374 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff81 	bl	8001374 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff11 	bl	80012a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff07 	bl	80012a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fe1f 	bl	8002100 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa78 	bl	80019c0 <__aeabi_dsub>
 80004d0:	f001 fe16 	bl	8002100 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff87 	bl	800143c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe4a 	bl	80021cc <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff7e 	bl	800143c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fa3a 	bl	80019c0 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fe03 	bl	800216c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff67 	bl	800143c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fe2a 	bl	80021cc <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0004      	movs	r4, r0
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	001f      	movs	r7, r3
 8000596:	030b      	lsls	r3, r1, #12
 8000598:	0010      	movs	r0, r2
 800059a:	004e      	lsls	r6, r1, #1
 800059c:	0a5b      	lsrs	r3, r3, #9
 800059e:	0fcd      	lsrs	r5, r1, #31
 80005a0:	0f61      	lsrs	r1, r4, #29
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	4319      	orrs	r1, r3
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	0fff      	lsrs	r7, r7, #31
 80005ac:	46bc      	mov	ip, r7
 80005ae:	0a64      	lsrs	r4, r4, #9
 80005b0:	0f47      	lsrs	r7, r0, #29
 80005b2:	4327      	orrs	r7, r4
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d52      	lsrs	r2, r2, #21
 80005b8:	00c0      	lsls	r0, r0, #3
 80005ba:	46b9      	mov	r9, r7
 80005bc:	4680      	mov	r8, r0
 80005be:	1ab7      	subs	r7, r6, r2
 80005c0:	4565      	cmp	r5, ip
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e09b      	b.n	80006fe <__aeabi_dadd+0x176>
 80005c6:	2f00      	cmp	r7, #0
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_dadd+0x44>
 80005ca:	e084      	b.n	80006d6 <__aeabi_dadd+0x14e>
 80005cc:	2a00      	cmp	r2, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e0be      	b.n	8000750 <__aeabi_dadd+0x1c8>
 80005d2:	4ac8      	ldr	r2, [pc, #800]	; (80008f4 <__aeabi_dadd+0x36c>)
 80005d4:	4296      	cmp	r6, r2
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e124      	b.n	8000824 <__aeabi_dadd+0x29c>
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	464c      	mov	r4, r9
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	4314      	orrs	r4, r2
 80005e2:	46a1      	mov	r9, r4
 80005e4:	2f38      	cmp	r7, #56	; 0x38
 80005e6:	dd00      	ble.n	80005ea <__aeabi_dadd+0x62>
 80005e8:	e167      	b.n	80008ba <__aeabi_dadd+0x332>
 80005ea:	2f1f      	cmp	r7, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x68>
 80005ee:	e1d6      	b.n	800099e <__aeabi_dadd+0x416>
 80005f0:	2220      	movs	r2, #32
 80005f2:	464c      	mov	r4, r9
 80005f4:	1bd2      	subs	r2, r2, r7
 80005f6:	4094      	lsls	r4, r2
 80005f8:	46a2      	mov	sl, r4
 80005fa:	4644      	mov	r4, r8
 80005fc:	40fc      	lsrs	r4, r7
 80005fe:	0020      	movs	r0, r4
 8000600:	4654      	mov	r4, sl
 8000602:	4304      	orrs	r4, r0
 8000604:	4640      	mov	r0, r8
 8000606:	4090      	lsls	r0, r2
 8000608:	1e42      	subs	r2, r0, #1
 800060a:	4190      	sbcs	r0, r2
 800060c:	464a      	mov	r2, r9
 800060e:	40fa      	lsrs	r2, r7
 8000610:	4304      	orrs	r4, r0
 8000612:	1a89      	subs	r1, r1, r2
 8000614:	1b1c      	subs	r4, r3, r4
 8000616:	42a3      	cmp	r3, r4
 8000618:	4192      	sbcs	r2, r2
 800061a:	4252      	negs	r2, r2
 800061c:	1a8b      	subs	r3, r1, r2
 800061e:	469a      	mov	sl, r3
 8000620:	4653      	mov	r3, sl
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	d400      	bmi.n	8000628 <__aeabi_dadd+0xa0>
 8000626:	e0d4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000628:	4653      	mov	r3, sl
 800062a:	025a      	lsls	r2, r3, #9
 800062c:	0a53      	lsrs	r3, r2, #9
 800062e:	469a      	mov	sl, r3
 8000630:	4653      	mov	r3, sl
 8000632:	2b00      	cmp	r3, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0xb0>
 8000636:	e104      	b.n	8000842 <__aeabi_dadd+0x2ba>
 8000638:	4650      	mov	r0, sl
 800063a:	f001 fe73 	bl	8002324 <__clzsi2>
 800063e:	0003      	movs	r3, r0
 8000640:	3b08      	subs	r3, #8
 8000642:	2220      	movs	r2, #32
 8000644:	0020      	movs	r0, r4
 8000646:	1ad2      	subs	r2, r2, r3
 8000648:	4651      	mov	r1, sl
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4099      	lsls	r1, r3
 800064e:	0002      	movs	r2, r0
 8000650:	409c      	lsls	r4, r3
 8000652:	430a      	orrs	r2, r1
 8000654:	42b3      	cmp	r3, r6
 8000656:	da00      	bge.n	800065a <__aeabi_dadd+0xd2>
 8000658:	e102      	b.n	8000860 <__aeabi_dadd+0x2d8>
 800065a:	1b9b      	subs	r3, r3, r6
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	291f      	cmp	r1, #31
 8000660:	dd00      	ble.n	8000664 <__aeabi_dadd+0xdc>
 8000662:	e0a7      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000664:	2320      	movs	r3, #32
 8000666:	0010      	movs	r0, r2
 8000668:	0026      	movs	r6, r4
 800066a:	1a5b      	subs	r3, r3, r1
 800066c:	409c      	lsls	r4, r3
 800066e:	4098      	lsls	r0, r3
 8000670:	40ce      	lsrs	r6, r1
 8000672:	40ca      	lsrs	r2, r1
 8000674:	1e63      	subs	r3, r4, #1
 8000676:	419c      	sbcs	r4, r3
 8000678:	4330      	orrs	r0, r6
 800067a:	4692      	mov	sl, r2
 800067c:	2600      	movs	r6, #0
 800067e:	4304      	orrs	r4, r0
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d009      	beq.n	8000698 <__aeabi_dadd+0x110>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d005      	beq.n	8000698 <__aeabi_dadd+0x110>
 800068c:	1d23      	adds	r3, r4, #4
 800068e:	42a3      	cmp	r3, r4
 8000690:	41a4      	sbcs	r4, r4
 8000692:	4264      	negs	r4, r4
 8000694:	44a2      	add	sl, r4
 8000696:	001c      	movs	r4, r3
 8000698:	4653      	mov	r3, sl
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	d400      	bmi.n	80006a0 <__aeabi_dadd+0x118>
 800069e:	e09b      	b.n	80007d8 <__aeabi_dadd+0x250>
 80006a0:	4b94      	ldr	r3, [pc, #592]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a2:	3601      	adds	r6, #1
 80006a4:	429e      	cmp	r6, r3
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x122>
 80006a8:	e0b8      	b.n	800081c <__aeabi_dadd+0x294>
 80006aa:	4653      	mov	r3, sl
 80006ac:	4992      	ldr	r1, [pc, #584]	; (80008f8 <__aeabi_dadd+0x370>)
 80006ae:	08e4      	lsrs	r4, r4, #3
 80006b0:	400b      	ands	r3, r1
 80006b2:	0019      	movs	r1, r3
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	4323      	orrs	r3, r4
 80006b8:	0572      	lsls	r2, r6, #21
 80006ba:	024c      	lsls	r4, r1, #9
 80006bc:	0b24      	lsrs	r4, r4, #12
 80006be:	0d52      	lsrs	r2, r2, #21
 80006c0:	0512      	lsls	r2, r2, #20
 80006c2:	07ed      	lsls	r5, r5, #31
 80006c4:	4322      	orrs	r2, r4
 80006c6:	432a      	orrs	r2, r5
 80006c8:	0018      	movs	r0, r3
 80006ca:	0011      	movs	r1, r2
 80006cc:	bce0      	pop	{r5, r6, r7}
 80006ce:	46ba      	mov	sl, r7
 80006d0:	46b1      	mov	r9, r6
 80006d2:	46a8      	mov	r8, r5
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d048      	beq.n	800076c <__aeabi_dadd+0x1e4>
 80006da:	1b97      	subs	r7, r2, r6
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x15a>
 80006e0:	e10e      	b.n	8000900 <__aeabi_dadd+0x378>
 80006e2:	000c      	movs	r4, r1
 80006e4:	431c      	orrs	r4, r3
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x162>
 80006e8:	e1b7      	b.n	8000a5a <__aeabi_dadd+0x4d2>
 80006ea:	1e7c      	subs	r4, r7, #1
 80006ec:	2f01      	cmp	r7, #1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x16a>
 80006f0:	e226      	b.n	8000b40 <__aeabi_dadd+0x5b8>
 80006f2:	4d80      	ldr	r5, [pc, #512]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006f4:	42af      	cmp	r7, r5
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x172>
 80006f8:	e1d5      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 80006fa:	0027      	movs	r7, r4
 80006fc:	e107      	b.n	800090e <__aeabi_dadd+0x386>
 80006fe:	2f00      	cmp	r7, #0
 8000700:	dc00      	bgt.n	8000704 <__aeabi_dadd+0x17c>
 8000702:	e0b2      	b.n	800086a <__aeabi_dadd+0x2e2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d047      	beq.n	8000798 <__aeabi_dadd+0x210>
 8000708:	4a7a      	ldr	r2, [pc, #488]	; (80008f4 <__aeabi_dadd+0x36c>)
 800070a:	4296      	cmp	r6, r2
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x188>
 800070e:	e089      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	464c      	mov	r4, r9
 8000714:	0412      	lsls	r2, r2, #16
 8000716:	4314      	orrs	r4, r2
 8000718:	46a1      	mov	r9, r4
 800071a:	2f38      	cmp	r7, #56	; 0x38
 800071c:	dc6b      	bgt.n	80007f6 <__aeabi_dadd+0x26e>
 800071e:	2f1f      	cmp	r7, #31
 8000720:	dc00      	bgt.n	8000724 <__aeabi_dadd+0x19c>
 8000722:	e16e      	b.n	8000a02 <__aeabi_dadd+0x47a>
 8000724:	003a      	movs	r2, r7
 8000726:	4648      	mov	r0, r9
 8000728:	3a20      	subs	r2, #32
 800072a:	40d0      	lsrs	r0, r2
 800072c:	4684      	mov	ip, r0
 800072e:	2f20      	cmp	r7, #32
 8000730:	d007      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000732:	2240      	movs	r2, #64	; 0x40
 8000734:	4648      	mov	r0, r9
 8000736:	1bd2      	subs	r2, r2, r7
 8000738:	4090      	lsls	r0, r2
 800073a:	0002      	movs	r2, r0
 800073c:	4640      	mov	r0, r8
 800073e:	4310      	orrs	r0, r2
 8000740:	4680      	mov	r8, r0
 8000742:	4640      	mov	r0, r8
 8000744:	1e42      	subs	r2, r0, #1
 8000746:	4190      	sbcs	r0, r2
 8000748:	4662      	mov	r2, ip
 800074a:	0004      	movs	r4, r0
 800074c:	4314      	orrs	r4, r2
 800074e:	e057      	b.n	8000800 <__aeabi_dadd+0x278>
 8000750:	464a      	mov	r2, r9
 8000752:	4302      	orrs	r2, r0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x1d0>
 8000756:	e103      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000758:	1e7a      	subs	r2, r7, #1
 800075a:	2f01      	cmp	r7, #1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x1d8>
 800075e:	e193      	b.n	8000a88 <__aeabi_dadd+0x500>
 8000760:	4c64      	ldr	r4, [pc, #400]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000762:	42a7      	cmp	r7, r4
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e18a      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 8000768:	0017      	movs	r7, r2
 800076a:	e73b      	b.n	80005e4 <__aeabi_dadd+0x5c>
 800076c:	4c63      	ldr	r4, [pc, #396]	; (80008fc <__aeabi_dadd+0x374>)
 800076e:	1c72      	adds	r2, r6, #1
 8000770:	4222      	tst	r2, r4
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e0e0      	b.n	8000938 <__aeabi_dadd+0x3b0>
 8000776:	000a      	movs	r2, r1
 8000778:	431a      	orrs	r2, r3
 800077a:	2e00      	cmp	r6, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x1f8>
 800077e:	e174      	b.n	8000a6a <__aeabi_dadd+0x4e2>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x1fe>
 8000784:	e1d0      	b.n	8000b28 <__aeabi_dadd+0x5a0>
 8000786:	464a      	mov	r2, r9
 8000788:	4302      	orrs	r2, r0
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x206>
 800078c:	e1e3      	b.n	8000b56 <__aeabi_dadd+0x5ce>
 800078e:	074a      	lsls	r2, r1, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	08c9      	lsrs	r1, r1, #3
 8000796:	e029      	b.n	80007ec <__aeabi_dadd+0x264>
 8000798:	464a      	mov	r2, r9
 800079a:	4302      	orrs	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e17d      	b.n	8000a9c <__aeabi_dadd+0x514>
 80007a0:	1e7a      	subs	r2, r7, #1
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c52      	ldr	r4, [pc, #328]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007aa:	42a7      	cmp	r7, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e166      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 80007b0:	0017      	movs	r7, r2
 80007b2:	e7b2      	b.n	800071a <__aeabi_dadd+0x192>
 80007b4:	0010      	movs	r0, r2
 80007b6:	3b1f      	subs	r3, #31
 80007b8:	40d8      	lsrs	r0, r3
 80007ba:	2920      	cmp	r1, #32
 80007bc:	d003      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	1a5b      	subs	r3, r3, r1
 80007c2:	409a      	lsls	r2, r3
 80007c4:	4314      	orrs	r4, r2
 80007c6:	1e63      	subs	r3, r4, #1
 80007c8:	419c      	sbcs	r4, r3
 80007ca:	2300      	movs	r3, #0
 80007cc:	2600      	movs	r6, #0
 80007ce:	469a      	mov	sl, r3
 80007d0:	4304      	orrs	r4, r0
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e755      	b.n	8000684 <__aeabi_dadd+0xfc>
 80007d8:	4652      	mov	r2, sl
 80007da:	08e3      	lsrs	r3, r4, #3
 80007dc:	0752      	lsls	r2, r2, #29
 80007de:	4313      	orrs	r3, r2
 80007e0:	4652      	mov	r2, sl
 80007e2:	0037      	movs	r7, r6
 80007e4:	08d1      	lsrs	r1, r2, #3
 80007e6:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007e8:	4297      	cmp	r7, r2
 80007ea:	d01f      	beq.n	800082c <__aeabi_dadd+0x2a4>
 80007ec:	0309      	lsls	r1, r1, #12
 80007ee:	057a      	lsls	r2, r7, #21
 80007f0:	0b0c      	lsrs	r4, r1, #12
 80007f2:	0d52      	lsrs	r2, r2, #21
 80007f4:	e764      	b.n	80006c0 <__aeabi_dadd+0x138>
 80007f6:	4642      	mov	r2, r8
 80007f8:	464c      	mov	r4, r9
 80007fa:	4314      	orrs	r4, r2
 80007fc:	1e62      	subs	r2, r4, #1
 80007fe:	4194      	sbcs	r4, r2
 8000800:	18e4      	adds	r4, r4, r3
 8000802:	429c      	cmp	r4, r3
 8000804:	4192      	sbcs	r2, r2
 8000806:	4252      	negs	r2, r2
 8000808:	4692      	mov	sl, r2
 800080a:	448a      	add	sl, r1
 800080c:	4653      	mov	r3, sl
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	d5df      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000814:	3601      	adds	r6, #1
 8000816:	429e      	cmp	r6, r3
 8000818:	d000      	beq.n	800081c <__aeabi_dadd+0x294>
 800081a:	e0b3      	b.n	8000984 <__aeabi_dadd+0x3fc>
 800081c:	0032      	movs	r2, r6
 800081e:	2400      	movs	r4, #0
 8000820:	2300      	movs	r3, #0
 8000822:	e74d      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000824:	074a      	lsls	r2, r1, #29
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	4313      	orrs	r3, r2
 800082a:	08c9      	lsrs	r1, r1, #3
 800082c:	001a      	movs	r2, r3
 800082e:	430a      	orrs	r2, r1
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x2ac>
 8000832:	e200      	b.n	8000c36 <__aeabi_dadd+0x6ae>
 8000834:	2480      	movs	r4, #128	; 0x80
 8000836:	0324      	lsls	r4, r4, #12
 8000838:	430c      	orrs	r4, r1
 800083a:	0324      	lsls	r4, r4, #12
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <__aeabi_dadd+0x36c>)
 800083e:	0b24      	lsrs	r4, r4, #12
 8000840:	e73e      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000842:	0020      	movs	r0, r4
 8000844:	f001 fd6e 	bl	8002324 <__clzsi2>
 8000848:	0003      	movs	r3, r0
 800084a:	3318      	adds	r3, #24
 800084c:	2b1f      	cmp	r3, #31
 800084e:	dc00      	bgt.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e6f7      	b.n	8000642 <__aeabi_dadd+0xba>
 8000852:	0022      	movs	r2, r4
 8000854:	3808      	subs	r0, #8
 8000856:	4082      	lsls	r2, r0
 8000858:	2400      	movs	r4, #0
 800085a:	42b3      	cmp	r3, r6
 800085c:	db00      	blt.n	8000860 <__aeabi_dadd+0x2d8>
 800085e:	e6fc      	b.n	800065a <__aeabi_dadd+0xd2>
 8000860:	1af6      	subs	r6, r6, r3
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <__aeabi_dadd+0x370>)
 8000864:	401a      	ands	r2, r3
 8000866:	4692      	mov	sl, r2
 8000868:	e70a      	b.n	8000680 <__aeabi_dadd+0xf8>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d02b      	beq.n	80008c6 <__aeabi_dadd+0x33e>
 800086e:	1b97      	subs	r7, r2, r6
 8000870:	2e00      	cmp	r6, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x2ee>
 8000874:	e0b8      	b.n	80009e8 <__aeabi_dadd+0x460>
 8000876:	4c1f      	ldr	r4, [pc, #124]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000878:	42a2      	cmp	r2, r4
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x2f6>
 800087c:	e11c      	b.n	8000ab8 <__aeabi_dadd+0x530>
 800087e:	2480      	movs	r4, #128	; 0x80
 8000880:	0424      	lsls	r4, r4, #16
 8000882:	4321      	orrs	r1, r4
 8000884:	2f38      	cmp	r7, #56	; 0x38
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0x302>
 8000888:	e11e      	b.n	8000ac8 <__aeabi_dadd+0x540>
 800088a:	2f1f      	cmp	r7, #31
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x308>
 800088e:	e19e      	b.n	8000bce <__aeabi_dadd+0x646>
 8000890:	2620      	movs	r6, #32
 8000892:	000c      	movs	r4, r1
 8000894:	1bf6      	subs	r6, r6, r7
 8000896:	0018      	movs	r0, r3
 8000898:	40b3      	lsls	r3, r6
 800089a:	40b4      	lsls	r4, r6
 800089c:	40f8      	lsrs	r0, r7
 800089e:	1e5e      	subs	r6, r3, #1
 80008a0:	41b3      	sbcs	r3, r6
 80008a2:	40f9      	lsrs	r1, r7
 80008a4:	4304      	orrs	r4, r0
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4489      	add	r9, r1
 80008aa:	4444      	add	r4, r8
 80008ac:	4544      	cmp	r4, r8
 80008ae:	419b      	sbcs	r3, r3
 80008b0:	425b      	negs	r3, r3
 80008b2:	444b      	add	r3, r9
 80008b4:	469a      	mov	sl, r3
 80008b6:	0016      	movs	r6, r2
 80008b8:	e7a8      	b.n	800080c <__aeabi_dadd+0x284>
 80008ba:	4642      	mov	r2, r8
 80008bc:	464c      	mov	r4, r9
 80008be:	4314      	orrs	r4, r2
 80008c0:	1e62      	subs	r2, r4, #1
 80008c2:	4194      	sbcs	r4, r2
 80008c4:	e6a6      	b.n	8000614 <__aeabi_dadd+0x8c>
 80008c6:	4c0d      	ldr	r4, [pc, #52]	; (80008fc <__aeabi_dadd+0x374>)
 80008c8:	1c72      	adds	r2, r6, #1
 80008ca:	4222      	tst	r2, r4
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x348>
 80008ce:	e0a8      	b.n	8000a22 <__aeabi_dadd+0x49a>
 80008d0:	000a      	movs	r2, r1
 80008d2:	431a      	orrs	r2, r3
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x352>
 80008d8:	e10a      	b.n	8000af0 <__aeabi_dadd+0x568>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x358>
 80008de:	e15e      	b.n	8000b9e <__aeabi_dadd+0x616>
 80008e0:	464a      	mov	r2, r9
 80008e2:	4302      	orrs	r2, r0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dadd+0x360>
 80008e6:	e161      	b.n	8000bac <__aeabi_dadd+0x624>
 80008e8:	074a      	lsls	r2, r1, #29
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	08c9      	lsrs	r1, r1, #3
 80008f0:	e77c      	b.n	80007ec <__aeabi_dadd+0x264>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	000007ff 	.word	0x000007ff
 80008f8:	ff7fffff 	.word	0xff7fffff
 80008fc:	000007fe 	.word	0x000007fe
 8000900:	4ccf      	ldr	r4, [pc, #828]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000902:	42a2      	cmp	r2, r4
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x380>
 8000906:	e0ce      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000908:	2480      	movs	r4, #128	; 0x80
 800090a:	0424      	lsls	r4, r4, #16
 800090c:	4321      	orrs	r1, r4
 800090e:	2f38      	cmp	r7, #56	; 0x38
 8000910:	dc5b      	bgt.n	80009ca <__aeabi_dadd+0x442>
 8000912:	2f1f      	cmp	r7, #31
 8000914:	dd00      	ble.n	8000918 <__aeabi_dadd+0x390>
 8000916:	e0dc      	b.n	8000ad2 <__aeabi_dadd+0x54a>
 8000918:	2520      	movs	r5, #32
 800091a:	000c      	movs	r4, r1
 800091c:	1bed      	subs	r5, r5, r7
 800091e:	001e      	movs	r6, r3
 8000920:	40ab      	lsls	r3, r5
 8000922:	40ac      	lsls	r4, r5
 8000924:	40fe      	lsrs	r6, r7
 8000926:	1e5d      	subs	r5, r3, #1
 8000928:	41ab      	sbcs	r3, r5
 800092a:	4334      	orrs	r4, r6
 800092c:	40f9      	lsrs	r1, r7
 800092e:	431c      	orrs	r4, r3
 8000930:	464b      	mov	r3, r9
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	4699      	mov	r9, r3
 8000936:	e04c      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000938:	464a      	mov	r2, r9
 800093a:	1a1c      	subs	r4, r3, r0
 800093c:	1a88      	subs	r0, r1, r2
 800093e:	42a3      	cmp	r3, r4
 8000940:	4192      	sbcs	r2, r2
 8000942:	4252      	negs	r2, r2
 8000944:	4692      	mov	sl, r2
 8000946:	0002      	movs	r2, r0
 8000948:	4650      	mov	r0, sl
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	4692      	mov	sl, r2
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	d478      	bmi.n	8000a44 <__aeabi_dadd+0x4bc>
 8000952:	4653      	mov	r3, sl
 8000954:	4323      	orrs	r3, r4
 8000956:	d000      	beq.n	800095a <__aeabi_dadd+0x3d2>
 8000958:	e66a      	b.n	8000630 <__aeabi_dadd+0xa8>
 800095a:	2100      	movs	r1, #0
 800095c:	2500      	movs	r5, #0
 800095e:	e745      	b.n	80007ec <__aeabi_dadd+0x264>
 8000960:	074a      	lsls	r2, r1, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c9      	lsrs	r1, r1, #3
 8000968:	e73d      	b.n	80007e6 <__aeabi_dadd+0x25e>
 800096a:	181c      	adds	r4, r3, r0
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4449      	add	r1, r9
 8000972:	468a      	mov	sl, r1
 8000974:	425b      	negs	r3, r3
 8000976:	449a      	add	sl, r3
 8000978:	4653      	mov	r3, sl
 800097a:	2601      	movs	r6, #1
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	d400      	bmi.n	8000982 <__aeabi_dadd+0x3fa>
 8000980:	e727      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000982:	2602      	movs	r6, #2
 8000984:	4652      	mov	r2, sl
 8000986:	4baf      	ldr	r3, [pc, #700]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000988:	2101      	movs	r1, #1
 800098a:	401a      	ands	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	4021      	ands	r1, r4
 8000990:	0862      	lsrs	r2, r4, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	07dc      	lsls	r4, r3, #31
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	469a      	mov	sl, r3
 800099a:	4314      	orrs	r4, r2
 800099c:	e670      	b.n	8000680 <__aeabi_dadd+0xf8>
 800099e:	003a      	movs	r2, r7
 80009a0:	464c      	mov	r4, r9
 80009a2:	3a20      	subs	r2, #32
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	46a4      	mov	ip, r4
 80009a8:	2f20      	cmp	r7, #32
 80009aa:	d007      	beq.n	80009bc <__aeabi_dadd+0x434>
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	4648      	mov	r0, r9
 80009b0:	1bd2      	subs	r2, r2, r7
 80009b2:	4090      	lsls	r0, r2
 80009b4:	0002      	movs	r2, r0
 80009b6:	4640      	mov	r0, r8
 80009b8:	4310      	orrs	r0, r2
 80009ba:	4680      	mov	r8, r0
 80009bc:	4640      	mov	r0, r8
 80009be:	1e42      	subs	r2, r0, #1
 80009c0:	4190      	sbcs	r0, r2
 80009c2:	4662      	mov	r2, ip
 80009c4:	0004      	movs	r4, r0
 80009c6:	4314      	orrs	r4, r2
 80009c8:	e624      	b.n	8000614 <__aeabi_dadd+0x8c>
 80009ca:	4319      	orrs	r1, r3
 80009cc:	000c      	movs	r4, r1
 80009ce:	1e63      	subs	r3, r4, #1
 80009d0:	419c      	sbcs	r4, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	1b1c      	subs	r4, r3, r4
 80009d6:	45a0      	cmp	r8, r4
 80009d8:	419b      	sbcs	r3, r3
 80009da:	4649      	mov	r1, r9
 80009dc:	425b      	negs	r3, r3
 80009de:	1acb      	subs	r3, r1, r3
 80009e0:	469a      	mov	sl, r3
 80009e2:	4665      	mov	r5, ip
 80009e4:	0016      	movs	r6, r2
 80009e6:	e61b      	b.n	8000620 <__aeabi_dadd+0x98>
 80009e8:	000c      	movs	r4, r1
 80009ea:	431c      	orrs	r4, r3
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x468>
 80009ee:	e0c7      	b.n	8000b80 <__aeabi_dadd+0x5f8>
 80009f0:	1e7c      	subs	r4, r7, #1
 80009f2:	2f01      	cmp	r7, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x470>
 80009f6:	e0f9      	b.n	8000bec <__aeabi_dadd+0x664>
 80009f8:	4e91      	ldr	r6, [pc, #580]	; (8000c40 <__aeabi_dadd+0x6b8>)
 80009fa:	42b7      	cmp	r7, r6
 80009fc:	d05c      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 80009fe:	0027      	movs	r7, r4
 8000a00:	e740      	b.n	8000884 <__aeabi_dadd+0x2fc>
 8000a02:	2220      	movs	r2, #32
 8000a04:	464c      	mov	r4, r9
 8000a06:	4640      	mov	r0, r8
 8000a08:	1bd2      	subs	r2, r2, r7
 8000a0a:	4094      	lsls	r4, r2
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4304      	orrs	r4, r0
 8000a10:	4640      	mov	r0, r8
 8000a12:	4090      	lsls	r0, r2
 8000a14:	1e42      	subs	r2, r0, #1
 8000a16:	4190      	sbcs	r0, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	40fa      	lsrs	r2, r7
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	1889      	adds	r1, r1, r2
 8000a20:	e6ee      	b.n	8000800 <__aeabi_dadd+0x278>
 8000a22:	4c87      	ldr	r4, [pc, #540]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x4a2>
 8000a28:	e6f9      	b.n	800081e <__aeabi_dadd+0x296>
 8000a2a:	1818      	adds	r0, r3, r0
 8000a2c:	4298      	cmp	r0, r3
 8000a2e:	419b      	sbcs	r3, r3
 8000a30:	4449      	add	r1, r9
 8000a32:	425b      	negs	r3, r3
 8000a34:	18cb      	adds	r3, r1, r3
 8000a36:	07dc      	lsls	r4, r3, #31
 8000a38:	0840      	lsrs	r0, r0, #1
 8000a3a:	085b      	lsrs	r3, r3, #1
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	0016      	movs	r6, r2
 8000a40:	4304      	orrs	r4, r0
 8000a42:	e6c6      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a44:	4642      	mov	r2, r8
 8000a46:	1ad4      	subs	r4, r2, r3
 8000a48:	45a0      	cmp	r8, r4
 8000a4a:	4180      	sbcs	r0, r0
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	4240      	negs	r0, r0
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	1a0b      	subs	r3, r1, r0
 8000a54:	469a      	mov	sl, r3
 8000a56:	4665      	mov	r5, ip
 8000a58:	e5ea      	b.n	8000630 <__aeabi_dadd+0xa8>
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	08c0      	lsrs	r0, r0, #3
 8000a60:	075b      	lsls	r3, r3, #29
 8000a62:	4665      	mov	r5, ip
 8000a64:	4303      	orrs	r3, r0
 8000a66:	08d1      	lsrs	r1, r2, #3
 8000a68:	e6bd      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dadd+0x4e8>
 8000a6e:	e08e      	b.n	8000b8e <__aeabi_dadd+0x606>
 8000a70:	464b      	mov	r3, r9
 8000a72:	4303      	orrs	r3, r0
 8000a74:	d117      	bne.n	8000aa6 <__aeabi_dadd+0x51e>
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	2500      	movs	r5, #0
 8000a7a:	0309      	lsls	r1, r1, #12
 8000a7c:	e6da      	b.n	8000834 <__aeabi_dadd+0x2ac>
 8000a7e:	074a      	lsls	r2, r1, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c9      	lsrs	r1, r1, #3
 8000a86:	e6d1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a88:	1a1c      	subs	r4, r3, r0
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	419b      	sbcs	r3, r3
 8000a90:	1a89      	subs	r1, r1, r2
 8000a92:	425b      	negs	r3, r3
 8000a94:	1acb      	subs	r3, r1, r3
 8000a96:	469a      	mov	sl, r3
 8000a98:	2601      	movs	r6, #1
 8000a9a:	e5c1      	b.n	8000620 <__aeabi_dadd+0x98>
 8000a9c:	074a      	lsls	r2, r1, #29
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	08c9      	lsrs	r1, r1, #3
 8000aa4:	e69f      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	08d8      	lsrs	r0, r3, #3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	464a      	mov	r2, r9
 8000aae:	075b      	lsls	r3, r3, #29
 8000ab0:	4665      	mov	r5, ip
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	08d1      	lsrs	r1, r2, #3
 8000ab6:	e6b9      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ab8:	4643      	mov	r3, r8
 8000aba:	08d8      	lsrs	r0, r3, #3
 8000abc:	464b      	mov	r3, r9
 8000abe:	464a      	mov	r2, r9
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	08d1      	lsrs	r1, r2, #3
 8000ac6:	e6b1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	000c      	movs	r4, r1
 8000acc:	1e63      	subs	r3, r4, #1
 8000ace:	419c      	sbcs	r4, r3
 8000ad0:	e6eb      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ad2:	003c      	movs	r4, r7
 8000ad4:	000d      	movs	r5, r1
 8000ad6:	3c20      	subs	r4, #32
 8000ad8:	40e5      	lsrs	r5, r4
 8000ada:	2f20      	cmp	r7, #32
 8000adc:	d003      	beq.n	8000ae6 <__aeabi_dadd+0x55e>
 8000ade:	2440      	movs	r4, #64	; 0x40
 8000ae0:	1be4      	subs	r4, r4, r7
 8000ae2:	40a1      	lsls	r1, r4
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	1e63      	subs	r3, r4, #1
 8000aea:	419c      	sbcs	r4, r3
 8000aec:	432c      	orrs	r4, r5
 8000aee:	e770      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d0e1      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4302      	orrs	r2, r0
 8000af8:	d0c1      	beq.n	8000a7e <__aeabi_dadd+0x4f6>
 8000afa:	074a      	lsls	r2, r1, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	0312      	lsls	r2, r2, #12
 8000b06:	4211      	tst	r1, r2
 8000b08:	d008      	beq.n	8000b1c <__aeabi_dadd+0x594>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	08c4      	lsrs	r4, r0, #3
 8000b0e:	4214      	tst	r4, r2
 8000b10:	d104      	bne.n	8000b1c <__aeabi_dadd+0x594>
 8000b12:	4643      	mov	r3, r8
 8000b14:	0021      	movs	r1, r4
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	0742      	lsls	r2, r0, #29
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	0f5a      	lsrs	r2, r3, #29
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	0752      	lsls	r2, r2, #29
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	e681      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x5a8>
 8000b2e:	e714      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000b30:	464b      	mov	r3, r9
 8000b32:	464a      	mov	r2, r9
 8000b34:	08c0      	lsrs	r0, r0, #3
 8000b36:	075b      	lsls	r3, r3, #29
 8000b38:	4665      	mov	r5, ip
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	08d1      	lsrs	r1, r2, #3
 8000b3e:	e655      	b.n	80007ec <__aeabi_dadd+0x264>
 8000b40:	1ac4      	subs	r4, r0, r3
 8000b42:	45a0      	cmp	r8, r4
 8000b44:	4180      	sbcs	r0, r0
 8000b46:	464b      	mov	r3, r9
 8000b48:	4240      	negs	r0, r0
 8000b4a:	1a59      	subs	r1, r3, r1
 8000b4c:	1a0b      	subs	r3, r1, r0
 8000b4e:	469a      	mov	sl, r3
 8000b50:	4665      	mov	r5, ip
 8000b52:	2601      	movs	r6, #1
 8000b54:	e564      	b.n	8000620 <__aeabi_dadd+0x98>
 8000b56:	1a1c      	subs	r4, r3, r0
 8000b58:	464a      	mov	r2, r9
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	1a8a      	subs	r2, r1, r2
 8000b60:	4240      	negs	r0, r0
 8000b62:	1a12      	subs	r2, r2, r0
 8000b64:	4692      	mov	sl, r2
 8000b66:	0212      	lsls	r2, r2, #8
 8000b68:	d549      	bpl.n	8000bfe <__aeabi_dadd+0x676>
 8000b6a:	4642      	mov	r2, r8
 8000b6c:	1ad4      	subs	r4, r2, r3
 8000b6e:	45a0      	cmp	r8, r4
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	464b      	mov	r3, r9
 8000b74:	4240      	negs	r0, r0
 8000b76:	1a59      	subs	r1, r3, r1
 8000b78:	1a0b      	subs	r3, r1, r0
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	e57f      	b.n	8000680 <__aeabi_dadd+0xf8>
 8000b80:	464b      	mov	r3, r9
 8000b82:	464a      	mov	r2, r9
 8000b84:	08c0      	lsrs	r0, r0, #3
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	08d1      	lsrs	r1, r2, #3
 8000b8c:	e62b      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	4302      	orrs	r2, r0
 8000b94:	d138      	bne.n	8000c08 <__aeabi_dadd+0x680>
 8000b96:	074a      	lsls	r2, r1, #29
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e646      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	08c0      	lsrs	r0, r0, #3
 8000ba4:	075b      	lsls	r3, r3, #29
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e61f      	b.n	80007ec <__aeabi_dadd+0x264>
 8000bac:	181c      	adds	r4, r3, r0
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	419b      	sbcs	r3, r3
 8000bb2:	4449      	add	r1, r9
 8000bb4:	468a      	mov	sl, r1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	449a      	add	sl, r3
 8000bba:	4653      	mov	r3, sl
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	d400      	bmi.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e607      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000bc6:	2601      	movs	r6, #1
 8000bc8:	401a      	ands	r2, r3
 8000bca:	4692      	mov	sl, r2
 8000bcc:	e601      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bce:	003c      	movs	r4, r7
 8000bd0:	000e      	movs	r6, r1
 8000bd2:	3c20      	subs	r4, #32
 8000bd4:	40e6      	lsrs	r6, r4
 8000bd6:	2f20      	cmp	r7, #32
 8000bd8:	d003      	beq.n	8000be2 <__aeabi_dadd+0x65a>
 8000bda:	2440      	movs	r4, #64	; 0x40
 8000bdc:	1be4      	subs	r4, r4, r7
 8000bde:	40a1      	lsls	r1, r4
 8000be0:	430b      	orrs	r3, r1
 8000be2:	001c      	movs	r4, r3
 8000be4:	1e63      	subs	r3, r4, #1
 8000be6:	419c      	sbcs	r4, r3
 8000be8:	4334      	orrs	r4, r6
 8000bea:	e65e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bec:	4443      	add	r3, r8
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	4180      	sbcs	r0, r0
 8000bf2:	4449      	add	r1, r9
 8000bf4:	468a      	mov	sl, r1
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	001c      	movs	r4, r3
 8000bfa:	4482      	add	sl, r0
 8000bfc:	e6bc      	b.n	8000978 <__aeabi_dadd+0x3f0>
 8000bfe:	4653      	mov	r3, sl
 8000c00:	4323      	orrs	r3, r4
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x67e>
 8000c04:	e6a9      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000c06:	e5e4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000c08:	074a      	lsls	r2, r1, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	08c9      	lsrs	r1, r1, #3
 8000c10:	0312      	lsls	r2, r2, #12
 8000c12:	4211      	tst	r1, r2
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c16:	4648      	mov	r0, r9
 8000c18:	08c4      	lsrs	r4, r0, #3
 8000c1a:	4214      	tst	r4, r2
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	4665      	mov	r5, ip
 8000c22:	0021      	movs	r1, r4
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	0742      	lsls	r2, r0, #29
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	0f5a      	lsrs	r2, r3, #29
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	0752      	lsls	r2, r2, #29
 8000c32:	4313      	orrs	r3, r2
 8000c34:	e5fa      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000c36:	2300      	movs	r3, #0
 8000c38:	4a01      	ldr	r2, [pc, #4]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	e540      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	000007ff 	.word	0x000007ff
 8000c44:	ff7fffff 	.word	0xff7fffff

08000c48 <__aeabi_ddiv>:
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	4657      	mov	r7, sl
 8000c4c:	464e      	mov	r6, r9
 8000c4e:	4645      	mov	r5, r8
 8000c50:	46de      	mov	lr, fp
 8000c52:	b5e0      	push	{r5, r6, r7, lr}
 8000c54:	030c      	lsls	r4, r1, #12
 8000c56:	001f      	movs	r7, r3
 8000c58:	004b      	lsls	r3, r1, #1
 8000c5a:	4681      	mov	r9, r0
 8000c5c:	4692      	mov	sl, r2
 8000c5e:	0005      	movs	r5, r0
 8000c60:	b085      	sub	sp, #20
 8000c62:	0b24      	lsrs	r4, r4, #12
 8000c64:	0d5b      	lsrs	r3, r3, #21
 8000c66:	0fce      	lsrs	r6, r1, #31
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_ddiv+0x26>
 8000c6c:	e152      	b.n	8000f14 <__aeabi_ddiv+0x2cc>
 8000c6e:	4ad2      	ldr	r2, [pc, #840]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d100      	bne.n	8000c76 <__aeabi_ddiv+0x2e>
 8000c74:	e16e      	b.n	8000f54 <__aeabi_ddiv+0x30c>
 8000c76:	0f42      	lsrs	r2, r0, #29
 8000c78:	00e4      	lsls	r4, r4, #3
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4322      	orrs	r2, r4
 8000c82:	4690      	mov	r8, r2
 8000c84:	4acd      	ldr	r2, [pc, #820]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000c86:	00c5      	lsls	r5, r0, #3
 8000c88:	4693      	mov	fp, r2
 8000c8a:	449b      	add	fp, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	033c      	lsls	r4, r7, #12
 8000c94:	007b      	lsls	r3, r7, #1
 8000c96:	4650      	mov	r0, sl
 8000c98:	0b24      	lsrs	r4, r4, #12
 8000c9a:	0d5b      	lsrs	r3, r3, #21
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x5c>
 8000ca2:	e11a      	b.n	8000eda <__aeabi_ddiv+0x292>
 8000ca4:	4ac4      	ldr	r2, [pc, #784]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x64>
 8000caa:	e15e      	b.n	8000f6a <__aeabi_ddiv+0x322>
 8000cac:	0f42      	lsrs	r2, r0, #29
 8000cae:	00e4      	lsls	r4, r4, #3
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	2480      	movs	r4, #128	; 0x80
 8000cb4:	0424      	lsls	r4, r4, #16
 8000cb6:	4314      	orrs	r4, r2
 8000cb8:	4ac0      	ldr	r2, [pc, #768]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000cba:	00c1      	lsls	r1, r0, #3
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	465a      	mov	r2, fp
 8000cc0:	4463      	add	r3, ip
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	0033      	movs	r3, r6
 8000cca:	407b      	eors	r3, r7
 8000ccc:	469a      	mov	sl, r3
 8000cce:	464b      	mov	r3, r9
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d827      	bhi.n	8000d24 <__aeabi_ddiv+0xdc>
 8000cd4:	4aba      	ldr	r2, [pc, #744]	; (8000fc0 <__aeabi_ddiv+0x378>)
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	469f      	mov	pc, r3
 8000cdc:	46b2      	mov	sl, r6
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d016      	beq.n	8000d12 <__aeabi_ddiv+0xca>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0xa2>
 8000ce8:	e287      	b.n	80011fa <__aeabi_ddiv+0x5b2>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_ddiv+0xa8>
 8000cee:	e0d5      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	051b      	lsls	r3, r3, #20
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	4652      	mov	r2, sl
 8000cfc:	07d2      	lsls	r2, r2, #31
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	0028      	movs	r0, r5
 8000d02:	0019      	movs	r1, r3
 8000d04:	b005      	add	sp, #20
 8000d06:	bcf0      	pop	{r4, r5, r6, r7}
 8000d08:	46bb      	mov	fp, r7
 8000d0a:	46b2      	mov	sl, r6
 8000d0c:	46a9      	mov	r9, r5
 8000d0e:	46a0      	mov	r8, r4
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d12:	2200      	movs	r2, #0
 8000d14:	2500      	movs	r5, #0
 8000d16:	4ba8      	ldr	r3, [pc, #672]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000d18:	e7ed      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000d1a:	46ba      	mov	sl, r7
 8000d1c:	46a0      	mov	r8, r4
 8000d1e:	000d      	movs	r5, r1
 8000d20:	9000      	str	r0, [sp, #0]
 8000d22:	e7dc      	b.n	8000cde <__aeabi_ddiv+0x96>
 8000d24:	4544      	cmp	r4, r8
 8000d26:	d200      	bcs.n	8000d2a <__aeabi_ddiv+0xe2>
 8000d28:	e1c4      	b.n	80010b4 <__aeabi_ddiv+0x46c>
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0xe6>
 8000d2c:	e1bf      	b.n	80010ae <__aeabi_ddiv+0x466>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	469c      	mov	ip, r3
 8000d34:	002e      	movs	r6, r5
 8000d36:	4640      	mov	r0, r8
 8000d38:	2500      	movs	r5, #0
 8000d3a:	44e3      	add	fp, ip
 8000d3c:	0223      	lsls	r3, r4, #8
 8000d3e:	0e0c      	lsrs	r4, r1, #24
 8000d40:	431c      	orrs	r4, r3
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	4699      	mov	r9, r3
 8000d46:	0423      	lsls	r3, r4, #16
 8000d48:	020a      	lsls	r2, r1, #8
 8000d4a:	0c1f      	lsrs	r7, r3, #16
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	9701      	str	r7, [sp, #4]
 8000d52:	f7ff fa7b 	bl	800024c <__aeabi_uidivmod>
 8000d56:	0002      	movs	r2, r0
 8000d58:	437a      	muls	r2, r7
 8000d5a:	040b      	lsls	r3, r1, #16
 8000d5c:	0c31      	lsrs	r1, r6, #16
 8000d5e:	4680      	mov	r8, r0
 8000d60:	4319      	orrs	r1, r3
 8000d62:	428a      	cmp	r2, r1
 8000d64:	d907      	bls.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d66:	2301      	movs	r3, #1
 8000d68:	425b      	negs	r3, r3
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	1909      	adds	r1, r1, r4
 8000d6e:	44e0      	add	r8, ip
 8000d70:	428c      	cmp	r4, r1
 8000d72:	d800      	bhi.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d74:	e201      	b.n	800117a <__aeabi_ddiv+0x532>
 8000d76:	1a88      	subs	r0, r1, r2
 8000d78:	4649      	mov	r1, r9
 8000d7a:	f7ff fa67 	bl	800024c <__aeabi_uidivmod>
 8000d7e:	9a01      	ldr	r2, [sp, #4]
 8000d80:	0436      	lsls	r6, r6, #16
 8000d82:	4342      	muls	r2, r0
 8000d84:	0409      	lsls	r1, r1, #16
 8000d86:	0c36      	lsrs	r6, r6, #16
 8000d88:	0003      	movs	r3, r0
 8000d8a:	430e      	orrs	r6, r1
 8000d8c:	42b2      	cmp	r2, r6
 8000d8e:	d904      	bls.n	8000d9a <__aeabi_ddiv+0x152>
 8000d90:	1936      	adds	r6, r6, r4
 8000d92:	3b01      	subs	r3, #1
 8000d94:	42b4      	cmp	r4, r6
 8000d96:	d800      	bhi.n	8000d9a <__aeabi_ddiv+0x152>
 8000d98:	e1e9      	b.n	800116e <__aeabi_ddiv+0x526>
 8000d9a:	1ab0      	subs	r0, r6, r2
 8000d9c:	4642      	mov	r2, r8
 8000d9e:	9e00      	ldr	r6, [sp, #0]
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	431a      	orrs	r2, r3
 8000da4:	0c33      	lsrs	r3, r6, #16
 8000da6:	001f      	movs	r7, r3
 8000da8:	0c11      	lsrs	r1, r2, #16
 8000daa:	4690      	mov	r8, r2
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	0413      	lsls	r3, r2, #16
 8000db0:	0432      	lsls	r2, r6, #16
 8000db2:	0c16      	lsrs	r6, r2, #16
 8000db4:	0032      	movs	r2, r6
 8000db6:	0c1b      	lsrs	r3, r3, #16
 8000db8:	435a      	muls	r2, r3
 8000dba:	9603      	str	r6, [sp, #12]
 8000dbc:	437b      	muls	r3, r7
 8000dbe:	434e      	muls	r6, r1
 8000dc0:	4379      	muls	r1, r7
 8000dc2:	0c17      	lsrs	r7, r2, #16
 8000dc4:	46bc      	mov	ip, r7
 8000dc6:	199b      	adds	r3, r3, r6
 8000dc8:	4463      	add	r3, ip
 8000dca:	429e      	cmp	r6, r3
 8000dcc:	d903      	bls.n	8000dd6 <__aeabi_ddiv+0x18e>
 8000dce:	2680      	movs	r6, #128	; 0x80
 8000dd0:	0276      	lsls	r6, r6, #9
 8000dd2:	46b4      	mov	ip, r6
 8000dd4:	4461      	add	r1, ip
 8000dd6:	0c1e      	lsrs	r6, r3, #16
 8000dd8:	1871      	adds	r1, r6, r1
 8000dda:	0416      	lsls	r6, r2, #16
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c36      	lsrs	r6, r6, #16
 8000de0:	199e      	adds	r6, r3, r6
 8000de2:	4288      	cmp	r0, r1
 8000de4:	d302      	bcc.n	8000dec <__aeabi_ddiv+0x1a4>
 8000de6:	d112      	bne.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000de8:	42b5      	cmp	r5, r6
 8000dea:	d210      	bcs.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000dec:	4643      	mov	r3, r8
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	469c      	mov	ip, r3
 8000df4:	4465      	add	r5, ip
 8000df6:	001f      	movs	r7, r3
 8000df8:	429d      	cmp	r5, r3
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	191b      	adds	r3, r3, r4
 8000e00:	18c0      	adds	r0, r0, r3
 8000e02:	4284      	cmp	r4, r0
 8000e04:	d200      	bcs.n	8000e08 <__aeabi_ddiv+0x1c0>
 8000e06:	e19e      	b.n	8001146 <__aeabi_ddiv+0x4fe>
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x1c4>
 8000e0a:	e199      	b.n	8001140 <__aeabi_ddiv+0x4f8>
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	1bae      	subs	r6, r5, r6
 8000e10:	42b5      	cmp	r5, r6
 8000e12:	41ad      	sbcs	r5, r5
 8000e14:	1a40      	subs	r0, r0, r1
 8000e16:	426d      	negs	r5, r5
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	4284      	cmp	r4, r0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x1d8>
 8000e1e:	e1d2      	b.n	80011c6 <__aeabi_ddiv+0x57e>
 8000e20:	4649      	mov	r1, r9
 8000e22:	f7ff fa13 	bl	800024c <__aeabi_uidivmod>
 8000e26:	9a01      	ldr	r2, [sp, #4]
 8000e28:	040b      	lsls	r3, r1, #16
 8000e2a:	4342      	muls	r2, r0
 8000e2c:	0c31      	lsrs	r1, r6, #16
 8000e2e:	0005      	movs	r5, r0
 8000e30:	4319      	orrs	r1, r3
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d900      	bls.n	8000e38 <__aeabi_ddiv+0x1f0>
 8000e36:	e16c      	b.n	8001112 <__aeabi_ddiv+0x4ca>
 8000e38:	1a88      	subs	r0, r1, r2
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	f7ff fa06 	bl	800024c <__aeabi_uidivmod>
 8000e40:	9a01      	ldr	r2, [sp, #4]
 8000e42:	0436      	lsls	r6, r6, #16
 8000e44:	4342      	muls	r2, r0
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	0c36      	lsrs	r6, r6, #16
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	430e      	orrs	r6, r1
 8000e4e:	42b2      	cmp	r2, r6
 8000e50:	d900      	bls.n	8000e54 <__aeabi_ddiv+0x20c>
 8000e52:	e153      	b.n	80010fc <__aeabi_ddiv+0x4b4>
 8000e54:	9803      	ldr	r0, [sp, #12]
 8000e56:	1ab6      	subs	r6, r6, r2
 8000e58:	0002      	movs	r2, r0
 8000e5a:	042d      	lsls	r5, r5, #16
 8000e5c:	431d      	orrs	r5, r3
 8000e5e:	9f02      	ldr	r7, [sp, #8]
 8000e60:	042b      	lsls	r3, r5, #16
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	435a      	muls	r2, r3
 8000e66:	437b      	muls	r3, r7
 8000e68:	469c      	mov	ip, r3
 8000e6a:	0c29      	lsrs	r1, r5, #16
 8000e6c:	4348      	muls	r0, r1
 8000e6e:	0c13      	lsrs	r3, r2, #16
 8000e70:	4484      	add	ip, r0
 8000e72:	4463      	add	r3, ip
 8000e74:	4379      	muls	r1, r7
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d903      	bls.n	8000e82 <__aeabi_ddiv+0x23a>
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0240      	lsls	r0, r0, #9
 8000e7e:	4684      	mov	ip, r0
 8000e80:	4461      	add	r1, ip
 8000e82:	0c18      	lsrs	r0, r3, #16
 8000e84:	0412      	lsls	r2, r2, #16
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	0c12      	lsrs	r2, r2, #16
 8000e8a:	1840      	adds	r0, r0, r1
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	4286      	cmp	r6, r0
 8000e90:	d200      	bcs.n	8000e94 <__aeabi_ddiv+0x24c>
 8000e92:	e100      	b.n	8001096 <__aeabi_ddiv+0x44e>
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x250>
 8000e96:	e0fb      	b.n	8001090 <__aeabi_ddiv+0x448>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	431d      	orrs	r5, r3
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <__aeabi_ddiv+0x37c>)
 8000e9e:	445b      	add	r3, fp
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dc00      	bgt.n	8000ea6 <__aeabi_ddiv+0x25e>
 8000ea4:	e0aa      	b.n	8000ffc <__aeabi_ddiv+0x3b4>
 8000ea6:	076a      	lsls	r2, r5, #29
 8000ea8:	d000      	beq.n	8000eac <__aeabi_ddiv+0x264>
 8000eaa:	e13d      	b.n	8001128 <__aeabi_ddiv+0x4e0>
 8000eac:	08e9      	lsrs	r1, r5, #3
 8000eae:	4642      	mov	r2, r8
 8000eb0:	01d2      	lsls	r2, r2, #7
 8000eb2:	d506      	bpl.n	8000ec2 <__aeabi_ddiv+0x27a>
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <__aeabi_ddiv+0x380>)
 8000eb8:	401a      	ands	r2, r3
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	445b      	add	r3, fp
 8000ec2:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <__aeabi_ddiv+0x384>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	dd00      	ble.n	8000eca <__aeabi_ddiv+0x282>
 8000ec8:	e723      	b.n	8000d12 <__aeabi_ddiv+0xca>
 8000eca:	4642      	mov	r2, r8
 8000ecc:	055b      	lsls	r3, r3, #21
 8000ece:	0755      	lsls	r5, r2, #29
 8000ed0:	0252      	lsls	r2, r2, #9
 8000ed2:	430d      	orrs	r5, r1
 8000ed4:	0b12      	lsrs	r2, r2, #12
 8000ed6:	0d5b      	lsrs	r3, r3, #21
 8000ed8:	e70d      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000eda:	4651      	mov	r1, sl
 8000edc:	4321      	orrs	r1, r4
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x29a>
 8000ee0:	e07c      	b.n	8000fdc <__aeabi_ddiv+0x394>
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_ddiv+0x2a0>
 8000ee6:	e0fb      	b.n	80010e0 <__aeabi_ddiv+0x498>
 8000ee8:	0020      	movs	r0, r4
 8000eea:	f001 fa1b 	bl	8002324 <__clzsi2>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	3a0b      	subs	r2, #11
 8000ef2:	231d      	movs	r3, #29
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	0001      	movs	r1, r0
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	4653      	mov	r3, sl
 8000efe:	3908      	subs	r1, #8
 8000f00:	408b      	lsls	r3, r1
 8000f02:	408c      	lsls	r4, r1
 8000f04:	0019      	movs	r1, r3
 8000f06:	4314      	orrs	r4, r2
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <__aeabi_ddiv+0x388>)
 8000f0a:	4458      	add	r0, fp
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	4483      	add	fp, r0
 8000f10:	2000      	movs	r0, #0
 8000f12:	e6d9      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f14:	0003      	movs	r3, r0
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d044      	beq.n	8000fa6 <__aeabi_ddiv+0x35e>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0x2da>
 8000f20:	e0cf      	b.n	80010c2 <__aeabi_ddiv+0x47a>
 8000f22:	0020      	movs	r0, r4
 8000f24:	f001 f9fe 	bl	8002324 <__clzsi2>
 8000f28:	0001      	movs	r1, r0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	390b      	subs	r1, #11
 8000f2e:	231d      	movs	r3, #29
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	4649      	mov	r1, r9
 8000f34:	0010      	movs	r0, r2
 8000f36:	40d9      	lsrs	r1, r3
 8000f38:	3808      	subs	r0, #8
 8000f3a:	4084      	lsls	r4, r0
 8000f3c:	000b      	movs	r3, r1
 8000f3e:	464d      	mov	r5, r9
 8000f40:	4323      	orrs	r3, r4
 8000f42:	4698      	mov	r8, r3
 8000f44:	4085      	lsls	r5, r0
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <__aeabi_ddiv+0x38c>)
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	469b      	mov	fp, r3
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4699      	mov	r9, r3
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	e69e      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f54:	0002      	movs	r2, r0
 8000f56:	4322      	orrs	r2, r4
 8000f58:	4690      	mov	r8, r2
 8000f5a:	d11d      	bne.n	8000f98 <__aeabi_ddiv+0x350>
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	469b      	mov	fp, r3
 8000f60:	2302      	movs	r3, #2
 8000f62:	2500      	movs	r5, #0
 8000f64:	4691      	mov	r9, r2
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	e693      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f6a:	4651      	mov	r1, sl
 8000f6c:	4321      	orrs	r1, r4
 8000f6e:	d109      	bne.n	8000f84 <__aeabi_ddiv+0x33c>
 8000f70:	2302      	movs	r3, #2
 8000f72:	464a      	mov	r2, r9
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f78:	4691      	mov	r9, r2
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2002      	movs	r0, #2
 8000f80:	44e3      	add	fp, ip
 8000f82:	e6a1      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f84:	2303      	movs	r3, #3
 8000f86:	464a      	mov	r2, r9
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f8c:	4691      	mov	r9, r2
 8000f8e:	469c      	mov	ip, r3
 8000f90:	4651      	mov	r1, sl
 8000f92:	2003      	movs	r0, #3
 8000f94:	44e3      	add	fp, ip
 8000f96:	e697      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f98:	220c      	movs	r2, #12
 8000f9a:	469b      	mov	fp, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	46a0      	mov	r8, r4
 8000fa0:	4691      	mov	r9, r2
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	e675      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	4699      	mov	r9, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	469b      	mov	fp, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	e66d      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	fffffc01 	.word	0xfffffc01
 8000fc0:	0800e49c 	.word	0x0800e49c
 8000fc4:	000003ff 	.word	0x000003ff
 8000fc8:	feffffff 	.word	0xfeffffff
 8000fcc:	000007fe 	.word	0x000007fe
 8000fd0:	000003f3 	.word	0x000003f3
 8000fd4:	fffffc0d 	.word	0xfffffc0d
 8000fd8:	fffff801 	.word	0xfffff801
 8000fdc:	464a      	mov	r2, r9
 8000fde:	2301      	movs	r3, #1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e66e      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000fea:	2300      	movs	r3, #0
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	469a      	mov	sl, r3
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	4b88      	ldr	r3, [pc, #544]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8000ff4:	0312      	lsls	r2, r2, #12
 8000ff6:	e67e      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000ff8:	2501      	movs	r5, #1
 8000ffa:	426d      	negs	r5, r5
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	2a38      	cmp	r2, #56	; 0x38
 8001002:	dd00      	ble.n	8001006 <__aeabi_ddiv+0x3be>
 8001004:	e674      	b.n	8000cf0 <__aeabi_ddiv+0xa8>
 8001006:	2a1f      	cmp	r2, #31
 8001008:	dc00      	bgt.n	800100c <__aeabi_ddiv+0x3c4>
 800100a:	e0bd      	b.n	8001188 <__aeabi_ddiv+0x540>
 800100c:	211f      	movs	r1, #31
 800100e:	4249      	negs	r1, r1
 8001010:	1acb      	subs	r3, r1, r3
 8001012:	4641      	mov	r1, r8
 8001014:	40d9      	lsrs	r1, r3
 8001016:	000b      	movs	r3, r1
 8001018:	2a20      	cmp	r2, #32
 800101a:	d004      	beq.n	8001026 <__aeabi_ddiv+0x3de>
 800101c:	4641      	mov	r1, r8
 800101e:	4a7e      	ldr	r2, [pc, #504]	; (8001218 <__aeabi_ddiv+0x5d0>)
 8001020:	445a      	add	r2, fp
 8001022:	4091      	lsls	r1, r2
 8001024:	430d      	orrs	r5, r1
 8001026:	0029      	movs	r1, r5
 8001028:	1e4a      	subs	r2, r1, #1
 800102a:	4191      	sbcs	r1, r2
 800102c:	4319      	orrs	r1, r3
 800102e:	2307      	movs	r3, #7
 8001030:	001d      	movs	r5, r3
 8001032:	2200      	movs	r2, #0
 8001034:	400d      	ands	r5, r1
 8001036:	420b      	tst	r3, r1
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x3f4>
 800103a:	e0d0      	b.n	80011de <__aeabi_ddiv+0x596>
 800103c:	220f      	movs	r2, #15
 800103e:	2300      	movs	r3, #0
 8001040:	400a      	ands	r2, r1
 8001042:	2a04      	cmp	r2, #4
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x400>
 8001046:	e0c7      	b.n	80011d8 <__aeabi_ddiv+0x590>
 8001048:	1d0a      	adds	r2, r1, #4
 800104a:	428a      	cmp	r2, r1
 800104c:	4189      	sbcs	r1, r1
 800104e:	4249      	negs	r1, r1
 8001050:	185b      	adds	r3, r3, r1
 8001052:	0011      	movs	r1, r2
 8001054:	021a      	lsls	r2, r3, #8
 8001056:	d400      	bmi.n	800105a <__aeabi_ddiv+0x412>
 8001058:	e0be      	b.n	80011d8 <__aeabi_ddiv+0x590>
 800105a:	2301      	movs	r3, #1
 800105c:	2200      	movs	r2, #0
 800105e:	2500      	movs	r5, #0
 8001060:	e649      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	4643      	mov	r3, r8
 8001066:	0312      	lsls	r2, r2, #12
 8001068:	4213      	tst	r3, r2
 800106a:	d008      	beq.n	800107e <__aeabi_ddiv+0x436>
 800106c:	4214      	tst	r4, r2
 800106e:	d106      	bne.n	800107e <__aeabi_ddiv+0x436>
 8001070:	4322      	orrs	r2, r4
 8001072:	0312      	lsls	r2, r2, #12
 8001074:	46ba      	mov	sl, r7
 8001076:	000d      	movs	r5, r1
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800107a:	0b12      	lsrs	r2, r2, #12
 800107c:	e63b      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	4643      	mov	r3, r8
 8001082:	0312      	lsls	r2, r2, #12
 8001084:	431a      	orrs	r2, r3
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	46b2      	mov	sl, r6
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800108c:	0b12      	lsrs	r2, r2, #12
 800108e:	e632      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x44e>
 8001094:	e702      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8001096:	19a6      	adds	r6, r4, r6
 8001098:	1e6a      	subs	r2, r5, #1
 800109a:	42a6      	cmp	r6, r4
 800109c:	d200      	bcs.n	80010a0 <__aeabi_ddiv+0x458>
 800109e:	e089      	b.n	80011b4 <__aeabi_ddiv+0x56c>
 80010a0:	4286      	cmp	r6, r0
 80010a2:	d200      	bcs.n	80010a6 <__aeabi_ddiv+0x45e>
 80010a4:	e09f      	b.n	80011e6 <__aeabi_ddiv+0x59e>
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x462>
 80010a8:	e0af      	b.n	800120a <__aeabi_ddiv+0x5c2>
 80010aa:	0015      	movs	r5, r2
 80010ac:	e6f4      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80010ae:	42a9      	cmp	r1, r5
 80010b0:	d900      	bls.n	80010b4 <__aeabi_ddiv+0x46c>
 80010b2:	e63c      	b.n	8000d2e <__aeabi_ddiv+0xe6>
 80010b4:	4643      	mov	r3, r8
 80010b6:	07de      	lsls	r6, r3, #31
 80010b8:	0858      	lsrs	r0, r3, #1
 80010ba:	086b      	lsrs	r3, r5, #1
 80010bc:	431e      	orrs	r6, r3
 80010be:	07ed      	lsls	r5, r5, #31
 80010c0:	e63c      	b.n	8000d3c <__aeabi_ddiv+0xf4>
 80010c2:	f001 f92f 	bl	8002324 <__clzsi2>
 80010c6:	0001      	movs	r1, r0
 80010c8:	0002      	movs	r2, r0
 80010ca:	3115      	adds	r1, #21
 80010cc:	3220      	adds	r2, #32
 80010ce:	291c      	cmp	r1, #28
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_ddiv+0x48c>
 80010d2:	e72c      	b.n	8000f2e <__aeabi_ddiv+0x2e6>
 80010d4:	464b      	mov	r3, r9
 80010d6:	3808      	subs	r0, #8
 80010d8:	4083      	lsls	r3, r0
 80010da:	2500      	movs	r5, #0
 80010dc:	4698      	mov	r8, r3
 80010de:	e732      	b.n	8000f46 <__aeabi_ddiv+0x2fe>
 80010e0:	f001 f920 	bl	8002324 <__clzsi2>
 80010e4:	0003      	movs	r3, r0
 80010e6:	001a      	movs	r2, r3
 80010e8:	3215      	adds	r2, #21
 80010ea:	3020      	adds	r0, #32
 80010ec:	2a1c      	cmp	r2, #28
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_ddiv+0x4aa>
 80010f0:	e6ff      	b.n	8000ef2 <__aeabi_ddiv+0x2aa>
 80010f2:	4654      	mov	r4, sl
 80010f4:	3b08      	subs	r3, #8
 80010f6:	2100      	movs	r1, #0
 80010f8:	409c      	lsls	r4, r3
 80010fa:	e705      	b.n	8000f08 <__aeabi_ddiv+0x2c0>
 80010fc:	1936      	adds	r6, r6, r4
 80010fe:	3b01      	subs	r3, #1
 8001100:	42b4      	cmp	r4, r6
 8001102:	d900      	bls.n	8001106 <__aeabi_ddiv+0x4be>
 8001104:	e6a6      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001106:	42b2      	cmp	r2, r6
 8001108:	d800      	bhi.n	800110c <__aeabi_ddiv+0x4c4>
 800110a:	e6a3      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 800110c:	1e83      	subs	r3, r0, #2
 800110e:	1936      	adds	r6, r6, r4
 8001110:	e6a0      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001112:	1909      	adds	r1, r1, r4
 8001114:	3d01      	subs	r5, #1
 8001116:	428c      	cmp	r4, r1
 8001118:	d900      	bls.n	800111c <__aeabi_ddiv+0x4d4>
 800111a:	e68d      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 800111c:	428a      	cmp	r2, r1
 800111e:	d800      	bhi.n	8001122 <__aeabi_ddiv+0x4da>
 8001120:	e68a      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001122:	1e85      	subs	r5, r0, #2
 8001124:	1909      	adds	r1, r1, r4
 8001126:	e687      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001128:	220f      	movs	r2, #15
 800112a:	402a      	ands	r2, r5
 800112c:	2a04      	cmp	r2, #4
 800112e:	d100      	bne.n	8001132 <__aeabi_ddiv+0x4ea>
 8001130:	e6bc      	b.n	8000eac <__aeabi_ddiv+0x264>
 8001132:	1d29      	adds	r1, r5, #4
 8001134:	42a9      	cmp	r1, r5
 8001136:	41ad      	sbcs	r5, r5
 8001138:	426d      	negs	r5, r5
 800113a:	08c9      	lsrs	r1, r1, #3
 800113c:	44a8      	add	r8, r5
 800113e:	e6b6      	b.n	8000eae <__aeabi_ddiv+0x266>
 8001140:	42af      	cmp	r7, r5
 8001142:	d900      	bls.n	8001146 <__aeabi_ddiv+0x4fe>
 8001144:	e662      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001146:	4281      	cmp	r1, r0
 8001148:	d804      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 800114a:	d000      	beq.n	800114e <__aeabi_ddiv+0x506>
 800114c:	e65e      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 800114e:	42ae      	cmp	r6, r5
 8001150:	d800      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 8001152:	e65b      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001154:	2302      	movs	r3, #2
 8001156:	425b      	negs	r3, r3
 8001158:	469c      	mov	ip, r3
 800115a:	9b00      	ldr	r3, [sp, #0]
 800115c:	44e0      	add	r8, ip
 800115e:	469c      	mov	ip, r3
 8001160:	4465      	add	r5, ip
 8001162:	429d      	cmp	r5, r3
 8001164:	419b      	sbcs	r3, r3
 8001166:	425b      	negs	r3, r3
 8001168:	191b      	adds	r3, r3, r4
 800116a:	18c0      	adds	r0, r0, r3
 800116c:	e64f      	b.n	8000e0e <__aeabi_ddiv+0x1c6>
 800116e:	42b2      	cmp	r2, r6
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x52c>
 8001172:	e612      	b.n	8000d9a <__aeabi_ddiv+0x152>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	1936      	adds	r6, r6, r4
 8001178:	e60f      	b.n	8000d9a <__aeabi_ddiv+0x152>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x538>
 800117e:	e5fa      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001180:	1e83      	subs	r3, r0, #2
 8001182:	4698      	mov	r8, r3
 8001184:	1909      	adds	r1, r1, r4
 8001186:	e5f6      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <__aeabi_ddiv+0x5d4>)
 800118a:	0028      	movs	r0, r5
 800118c:	445b      	add	r3, fp
 800118e:	4641      	mov	r1, r8
 8001190:	409d      	lsls	r5, r3
 8001192:	4099      	lsls	r1, r3
 8001194:	40d0      	lsrs	r0, r2
 8001196:	1e6b      	subs	r3, r5, #1
 8001198:	419d      	sbcs	r5, r3
 800119a:	4643      	mov	r3, r8
 800119c:	4301      	orrs	r1, r0
 800119e:	4329      	orrs	r1, r5
 80011a0:	40d3      	lsrs	r3, r2
 80011a2:	074a      	lsls	r2, r1, #29
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x560>
 80011a6:	e755      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011a8:	220f      	movs	r2, #15
 80011aa:	400a      	ands	r2, r1
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d000      	beq.n	80011b2 <__aeabi_ddiv+0x56a>
 80011b0:	e74a      	b.n	8001048 <__aeabi_ddiv+0x400>
 80011b2:	e74f      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011b4:	0015      	movs	r5, r2
 80011b6:	4286      	cmp	r6, r0
 80011b8:	d000      	beq.n	80011bc <__aeabi_ddiv+0x574>
 80011ba:	e66d      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011bc:	9a00      	ldr	r2, [sp, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0x57c>
 80011c2:	e669      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011c4:	e66a      	b.n	8000e9c <__aeabi_ddiv+0x254>
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <__aeabi_ddiv+0x5d8>)
 80011c8:	445b      	add	r3, fp
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc00      	bgt.n	80011d0 <__aeabi_ddiv+0x588>
 80011ce:	e713      	b.n	8000ff8 <__aeabi_ddiv+0x3b0>
 80011d0:	2501      	movs	r5, #1
 80011d2:	2100      	movs	r1, #0
 80011d4:	44a8      	add	r8, r5
 80011d6:	e66a      	b.n	8000eae <__aeabi_ddiv+0x266>
 80011d8:	075d      	lsls	r5, r3, #29
 80011da:	025b      	lsls	r3, r3, #9
 80011dc:	0b1a      	lsrs	r2, r3, #12
 80011de:	08c9      	lsrs	r1, r1, #3
 80011e0:	2300      	movs	r3, #0
 80011e2:	430d      	orrs	r5, r1
 80011e4:	e587      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 80011e6:	9900      	ldr	r1, [sp, #0]
 80011e8:	3d02      	subs	r5, #2
 80011ea:	004a      	lsls	r2, r1, #1
 80011ec:	428a      	cmp	r2, r1
 80011ee:	41bf      	sbcs	r7, r7
 80011f0:	427f      	negs	r7, r7
 80011f2:	193f      	adds	r7, r7, r4
 80011f4:	19f6      	adds	r6, r6, r7
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	e7dd      	b.n	80011b6 <__aeabi_ddiv+0x56e>
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	4643      	mov	r3, r8
 80011fe:	0312      	lsls	r2, r2, #12
 8001200:	431a      	orrs	r2, r3
 8001202:	0312      	lsls	r2, r2, #12
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8001206:	0b12      	lsrs	r2, r2, #12
 8001208:	e575      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800120a:	9900      	ldr	r1, [sp, #0]
 800120c:	4299      	cmp	r1, r3
 800120e:	d3ea      	bcc.n	80011e6 <__aeabi_ddiv+0x59e>
 8001210:	0015      	movs	r5, r2
 8001212:	e7d3      	b.n	80011bc <__aeabi_ddiv+0x574>
 8001214:	000007ff 	.word	0x000007ff
 8001218:	0000043e 	.word	0x0000043e
 800121c:	0000041e 	.word	0x0000041e
 8001220:	000003ff 	.word	0x000003ff

08001224 <__eqdf2>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	464e      	mov	r6, r9
 8001228:	4645      	mov	r5, r8
 800122a:	46de      	mov	lr, fp
 800122c:	4657      	mov	r7, sl
 800122e:	4690      	mov	r8, r2
 8001230:	b5e0      	push	{r5, r6, r7, lr}
 8001232:	0017      	movs	r7, r2
 8001234:	031a      	lsls	r2, r3, #12
 8001236:	0b12      	lsrs	r2, r2, #12
 8001238:	0005      	movs	r5, r0
 800123a:	4684      	mov	ip, r0
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <__eqdf2+0x80>)
 800123e:	030e      	lsls	r6, r1, #12
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	4691      	mov	r9, r2
 8001244:	005a      	lsls	r2, r3, #1
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	469b      	mov	fp, r3
 800124a:	0b36      	lsrs	r6, r6, #12
 800124c:	0d64      	lsrs	r4, r4, #21
 800124e:	0fc9      	lsrs	r1, r1, #31
 8001250:	0d52      	lsrs	r2, r2, #21
 8001252:	4284      	cmp	r4, r0
 8001254:	d019      	beq.n	800128a <__eqdf2+0x66>
 8001256:	4282      	cmp	r2, r0
 8001258:	d010      	beq.n	800127c <__eqdf2+0x58>
 800125a:	2001      	movs	r0, #1
 800125c:	4294      	cmp	r4, r2
 800125e:	d10e      	bne.n	800127e <__eqdf2+0x5a>
 8001260:	454e      	cmp	r6, r9
 8001262:	d10c      	bne.n	800127e <__eqdf2+0x5a>
 8001264:	2001      	movs	r0, #1
 8001266:	45c4      	cmp	ip, r8
 8001268:	d109      	bne.n	800127e <__eqdf2+0x5a>
 800126a:	4559      	cmp	r1, fp
 800126c:	d017      	beq.n	800129e <__eqdf2+0x7a>
 800126e:	2c00      	cmp	r4, #0
 8001270:	d105      	bne.n	800127e <__eqdf2+0x5a>
 8001272:	0030      	movs	r0, r6
 8001274:	4328      	orrs	r0, r5
 8001276:	1e43      	subs	r3, r0, #1
 8001278:	4198      	sbcs	r0, r3
 800127a:	e000      	b.n	800127e <__eqdf2+0x5a>
 800127c:	2001      	movs	r0, #1
 800127e:	bcf0      	pop	{r4, r5, r6, r7}
 8001280:	46bb      	mov	fp, r7
 8001282:	46b2      	mov	sl, r6
 8001284:	46a9      	mov	r9, r5
 8001286:	46a0      	mov	r8, r4
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128a:	0033      	movs	r3, r6
 800128c:	2001      	movs	r0, #1
 800128e:	432b      	orrs	r3, r5
 8001290:	d1f5      	bne.n	800127e <__eqdf2+0x5a>
 8001292:	42a2      	cmp	r2, r4
 8001294:	d1f3      	bne.n	800127e <__eqdf2+0x5a>
 8001296:	464b      	mov	r3, r9
 8001298:	433b      	orrs	r3, r7
 800129a:	d1f0      	bne.n	800127e <__eqdf2+0x5a>
 800129c:	e7e2      	b.n	8001264 <__eqdf2+0x40>
 800129e:	2000      	movs	r0, #0
 80012a0:	e7ed      	b.n	800127e <__eqdf2+0x5a>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__gedf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	4647      	mov	r7, r8
 80012ac:	46ce      	mov	lr, r9
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	0016      	movs	r6, r2
 80012b4:	031b      	lsls	r3, r3, #12
 80012b6:	0b1b      	lsrs	r3, r3, #12
 80012b8:	4d2d      	ldr	r5, [pc, #180]	; (8001370 <__gedf2+0xc8>)
 80012ba:	004a      	lsls	r2, r1, #1
 80012bc:	4699      	mov	r9, r3
 80012be:	b580      	push	{r7, lr}
 80012c0:	0043      	lsls	r3, r0, #1
 80012c2:	030f      	lsls	r7, r1, #12
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d021      	beq.n	800131a <__gedf2+0x72>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d013      	beq.n	8001302 <__gedf2+0x5a>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d122      	bne.n	8001324 <__gedf2+0x7c>
 80012de:	433c      	orrs	r4, r7
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <__gedf2+0x42>
 80012e4:	464d      	mov	r5, r9
 80012e6:	432e      	orrs	r6, r5
 80012e8:	d022      	beq.n	8001330 <__gedf2+0x88>
 80012ea:	2c00      	cmp	r4, #0
 80012ec:	d010      	beq.n	8001310 <__gedf2+0x68>
 80012ee:	4281      	cmp	r1, r0
 80012f0:	d022      	beq.n	8001338 <__gedf2+0x90>
 80012f2:	2002      	movs	r0, #2
 80012f4:	3901      	subs	r1, #1
 80012f6:	4008      	ands	r0, r1
 80012f8:	3801      	subs	r0, #1
 80012fa:	bcc0      	pop	{r6, r7}
 80012fc:	46b9      	mov	r9, r7
 80012fe:	46b0      	mov	r8, r6
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001302:	464d      	mov	r5, r9
 8001304:	432e      	orrs	r6, r5
 8001306:	d129      	bne.n	800135c <__gedf2+0xb4>
 8001308:	2a00      	cmp	r2, #0
 800130a:	d1f0      	bne.n	80012ee <__gedf2+0x46>
 800130c:	433c      	orrs	r4, r7
 800130e:	d1ee      	bne.n	80012ee <__gedf2+0x46>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f2      	bne.n	80012fa <__gedf2+0x52>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7ef      	b.n	80012fa <__gedf2+0x52>
 800131a:	003d      	movs	r5, r7
 800131c:	4325      	orrs	r5, r4
 800131e:	d11d      	bne.n	800135c <__gedf2+0xb4>
 8001320:	4293      	cmp	r3, r2
 8001322:	d0ee      	beq.n	8001302 <__gedf2+0x5a>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e2      	bne.n	80012ee <__gedf2+0x46>
 8001328:	464c      	mov	r4, r9
 800132a:	4326      	orrs	r6, r4
 800132c:	d1df      	bne.n	80012ee <__gedf2+0x46>
 800132e:	e7e0      	b.n	80012f2 <__gedf2+0x4a>
 8001330:	2000      	movs	r0, #0
 8001332:	2c00      	cmp	r4, #0
 8001334:	d0e1      	beq.n	80012fa <__gedf2+0x52>
 8001336:	e7dc      	b.n	80012f2 <__gedf2+0x4a>
 8001338:	429a      	cmp	r2, r3
 800133a:	dc0a      	bgt.n	8001352 <__gedf2+0xaa>
 800133c:	dbe8      	blt.n	8001310 <__gedf2+0x68>
 800133e:	454f      	cmp	r7, r9
 8001340:	d8d7      	bhi.n	80012f2 <__gedf2+0x4a>
 8001342:	d00e      	beq.n	8001362 <__gedf2+0xba>
 8001344:	2000      	movs	r0, #0
 8001346:	454f      	cmp	r7, r9
 8001348:	d2d7      	bcs.n	80012fa <__gedf2+0x52>
 800134a:	2900      	cmp	r1, #0
 800134c:	d0e2      	beq.n	8001314 <__gedf2+0x6c>
 800134e:	0008      	movs	r0, r1
 8001350:	e7d3      	b.n	80012fa <__gedf2+0x52>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	0040      	lsls	r0, r0, #1
 8001358:	3801      	subs	r0, #1
 800135a:	e7ce      	b.n	80012fa <__gedf2+0x52>
 800135c:	2002      	movs	r0, #2
 800135e:	4240      	negs	r0, r0
 8001360:	e7cb      	b.n	80012fa <__gedf2+0x52>
 8001362:	45c4      	cmp	ip, r8
 8001364:	d8c5      	bhi.n	80012f2 <__gedf2+0x4a>
 8001366:	2000      	movs	r0, #0
 8001368:	45c4      	cmp	ip, r8
 800136a:	d2c6      	bcs.n	80012fa <__gedf2+0x52>
 800136c:	e7ed      	b.n	800134a <__gedf2+0xa2>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	000007ff 	.word	0x000007ff

08001374 <__ledf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	4647      	mov	r7, r8
 8001378:	46ce      	mov	lr, r9
 800137a:	0004      	movs	r4, r0
 800137c:	0018      	movs	r0, r3
 800137e:	0016      	movs	r6, r2
 8001380:	031b      	lsls	r3, r3, #12
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	4d2c      	ldr	r5, [pc, #176]	; (8001438 <__ledf2+0xc4>)
 8001386:	004a      	lsls	r2, r1, #1
 8001388:	4699      	mov	r9, r3
 800138a:	b580      	push	{r7, lr}
 800138c:	0043      	lsls	r3, r0, #1
 800138e:	030f      	lsls	r7, r1, #12
 8001390:	46a4      	mov	ip, r4
 8001392:	46b0      	mov	r8, r6
 8001394:	0b3f      	lsrs	r7, r7, #12
 8001396:	0d52      	lsrs	r2, r2, #21
 8001398:	0fc9      	lsrs	r1, r1, #31
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	0fc0      	lsrs	r0, r0, #31
 800139e:	42aa      	cmp	r2, r5
 80013a0:	d00d      	beq.n	80013be <__ledf2+0x4a>
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	d010      	beq.n	80013c8 <__ledf2+0x54>
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d127      	bne.n	80013fa <__ledf2+0x86>
 80013aa:	433c      	orrs	r4, r7
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <__ledf2+0x60>
 80013b0:	464d      	mov	r5, r9
 80013b2:	432e      	orrs	r6, r5
 80013b4:	d10e      	bne.n	80013d4 <__ledf2+0x60>
 80013b6:	2000      	movs	r0, #0
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d015      	beq.n	80013e8 <__ledf2+0x74>
 80013bc:	e00e      	b.n	80013dc <__ledf2+0x68>
 80013be:	003d      	movs	r5, r7
 80013c0:	4325      	orrs	r5, r4
 80013c2:	d110      	bne.n	80013e6 <__ledf2+0x72>
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d118      	bne.n	80013fa <__ledf2+0x86>
 80013c8:	464d      	mov	r5, r9
 80013ca:	432e      	orrs	r6, r5
 80013cc:	d10b      	bne.n	80013e6 <__ledf2+0x72>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d102      	bne.n	80013d8 <__ledf2+0x64>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d00b      	beq.n	80013f0 <__ledf2+0x7c>
 80013d8:	4281      	cmp	r1, r0
 80013da:	d014      	beq.n	8001406 <__ledf2+0x92>
 80013dc:	2002      	movs	r0, #2
 80013de:	3901      	subs	r1, #1
 80013e0:	4008      	ands	r0, r1
 80013e2:	3801      	subs	r0, #1
 80013e4:	e000      	b.n	80013e8 <__ledf2+0x74>
 80013e6:	2002      	movs	r0, #2
 80013e8:	bcc0      	pop	{r6, r7}
 80013ea:	46b9      	mov	r9, r7
 80013ec:	46b0      	mov	r8, r6
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1f9      	bne.n	80013e8 <__ledf2+0x74>
 80013f4:	2001      	movs	r0, #1
 80013f6:	4240      	negs	r0, r0
 80013f8:	e7f6      	b.n	80013e8 <__ledf2+0x74>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ec      	bne.n	80013d8 <__ledf2+0x64>
 80013fe:	464c      	mov	r4, r9
 8001400:	4326      	orrs	r6, r4
 8001402:	d1e9      	bne.n	80013d8 <__ledf2+0x64>
 8001404:	e7ea      	b.n	80013dc <__ledf2+0x68>
 8001406:	429a      	cmp	r2, r3
 8001408:	dd04      	ble.n	8001414 <__ledf2+0xa0>
 800140a:	4243      	negs	r3, r0
 800140c:	4158      	adcs	r0, r3
 800140e:	0040      	lsls	r0, r0, #1
 8001410:	3801      	subs	r0, #1
 8001412:	e7e9      	b.n	80013e8 <__ledf2+0x74>
 8001414:	429a      	cmp	r2, r3
 8001416:	dbeb      	blt.n	80013f0 <__ledf2+0x7c>
 8001418:	454f      	cmp	r7, r9
 800141a:	d8df      	bhi.n	80013dc <__ledf2+0x68>
 800141c:	d006      	beq.n	800142c <__ledf2+0xb8>
 800141e:	2000      	movs	r0, #0
 8001420:	454f      	cmp	r7, r9
 8001422:	d2e1      	bcs.n	80013e8 <__ledf2+0x74>
 8001424:	2900      	cmp	r1, #0
 8001426:	d0e5      	beq.n	80013f4 <__ledf2+0x80>
 8001428:	0008      	movs	r0, r1
 800142a:	e7dd      	b.n	80013e8 <__ledf2+0x74>
 800142c:	45c4      	cmp	ip, r8
 800142e:	d8d5      	bhi.n	80013dc <__ledf2+0x68>
 8001430:	2000      	movs	r0, #0
 8001432:	45c4      	cmp	ip, r8
 8001434:	d2d8      	bcs.n	80013e8 <__ledf2+0x74>
 8001436:	e7f5      	b.n	8001424 <__ledf2+0xb0>
 8001438:	000007ff 	.word	0x000007ff

0800143c <__aeabi_dmul>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4645      	mov	r5, r8
 8001440:	46de      	mov	lr, fp
 8001442:	4657      	mov	r7, sl
 8001444:	464e      	mov	r6, r9
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	001f      	movs	r7, r3
 800144a:	030b      	lsls	r3, r1, #12
 800144c:	0b1b      	lsrs	r3, r3, #12
 800144e:	469b      	mov	fp, r3
 8001450:	004d      	lsls	r5, r1, #1
 8001452:	0fcb      	lsrs	r3, r1, #31
 8001454:	0004      	movs	r4, r0
 8001456:	4691      	mov	r9, r2
 8001458:	4698      	mov	r8, r3
 800145a:	b087      	sub	sp, #28
 800145c:	0d6d      	lsrs	r5, r5, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x26>
 8001460:	e1cd      	b.n	80017fe <__aeabi_dmul+0x3c2>
 8001462:	4bce      	ldr	r3, [pc, #824]	; (800179c <__aeabi_dmul+0x360>)
 8001464:	429d      	cmp	r5, r3
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x2e>
 8001468:	e1e9      	b.n	800183e <__aeabi_dmul+0x402>
 800146a:	465a      	mov	r2, fp
 800146c:	0f43      	lsrs	r3, r0, #29
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	4313      	orrs	r3, r2
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	00c3      	lsls	r3, r0, #3
 800147a:	469a      	mov	sl, r3
 800147c:	4bc8      	ldr	r3, [pc, #800]	; (80017a0 <__aeabi_dmul+0x364>)
 800147e:	4693      	mov	fp, r2
 8001480:	469c      	mov	ip, r3
 8001482:	2300      	movs	r3, #0
 8001484:	2600      	movs	r6, #0
 8001486:	4465      	add	r5, ip
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	033c      	lsls	r4, r7, #12
 800148c:	007b      	lsls	r3, r7, #1
 800148e:	4648      	mov	r0, r9
 8001490:	0b24      	lsrs	r4, r4, #12
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fff      	lsrs	r7, r7, #31
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <__aeabi_dmul+0x60>
 800149a:	e189      	b.n	80017b0 <__aeabi_dmul+0x374>
 800149c:	4abf      	ldr	r2, [pc, #764]	; (800179c <__aeabi_dmul+0x360>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <__aeabi_dmul+0x9a>
 80014a2:	0f42      	lsrs	r2, r0, #29
 80014a4:	00e4      	lsls	r4, r4, #3
 80014a6:	4322      	orrs	r2, r4
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	0424      	lsls	r4, r4, #16
 80014ac:	4314      	orrs	r4, r2
 80014ae:	4abc      	ldr	r2, [pc, #752]	; (80017a0 <__aeabi_dmul+0x364>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4694      	mov	ip, r2
 80014b4:	4642      	mov	r2, r8
 80014b6:	4463      	add	r3, ip
 80014b8:	195b      	adds	r3, r3, r5
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]
 80014be:	407a      	eors	r2, r7
 80014c0:	3301      	adds	r3, #1
 80014c2:	00c0      	lsls	r0, r0, #3
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2e0a      	cmp	r6, #10
 80014ca:	dd1c      	ble.n	8001506 <__aeabi_dmul+0xca>
 80014cc:	003a      	movs	r2, r7
 80014ce:	2e0b      	cmp	r6, #11
 80014d0:	d05e      	beq.n	8001590 <__aeabi_dmul+0x154>
 80014d2:	4647      	mov	r7, r8
 80014d4:	e056      	b.n	8001584 <__aeabi_dmul+0x148>
 80014d6:	4649      	mov	r1, r9
 80014d8:	4bb0      	ldr	r3, [pc, #704]	; (800179c <__aeabi_dmul+0x360>)
 80014da:	4321      	orrs	r1, r4
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d12a      	bne.n	800153a <__aeabi_dmul+0xfe>
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	2202      	movs	r2, #2
 80014e8:	0100      	lsls	r0, r0, #4
 80014ea:	002b      	movs	r3, r5
 80014ec:	4684      	mov	ip, r0
 80014ee:	4316      	orrs	r6, r2
 80014f0:	4642      	mov	r2, r8
 80014f2:	4463      	add	r3, ip
 80014f4:	407a      	eors	r2, r7
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2e0a      	cmp	r6, #10
 80014fc:	dd00      	ble.n	8001500 <__aeabi_dmul+0xc4>
 80014fe:	e231      	b.n	8001964 <__aeabi_dmul+0x528>
 8001500:	2000      	movs	r0, #0
 8001502:	2400      	movs	r4, #0
 8001504:	2102      	movs	r1, #2
 8001506:	2e02      	cmp	r6, #2
 8001508:	dc26      	bgt.n	8001558 <__aeabi_dmul+0x11c>
 800150a:	3e01      	subs	r6, #1
 800150c:	2e01      	cmp	r6, #1
 800150e:	d852      	bhi.n	80015b6 <__aeabi_dmul+0x17a>
 8001510:	2902      	cmp	r1, #2
 8001512:	d04c      	beq.n	80015ae <__aeabi_dmul+0x172>
 8001514:	2901      	cmp	r1, #1
 8001516:	d000      	beq.n	800151a <__aeabi_dmul+0xde>
 8001518:	e118      	b.n	800174c <__aeabi_dmul+0x310>
 800151a:	2300      	movs	r3, #0
 800151c:	2400      	movs	r4, #0
 800151e:	2500      	movs	r5, #0
 8001520:	051b      	lsls	r3, r3, #20
 8001522:	4323      	orrs	r3, r4
 8001524:	07d2      	lsls	r2, r2, #31
 8001526:	4313      	orrs	r3, r2
 8001528:	0028      	movs	r0, r5
 800152a:	0019      	movs	r1, r3
 800152c:	b007      	add	sp, #28
 800152e:	bcf0      	pop	{r4, r5, r6, r7}
 8001530:	46bb      	mov	fp, r7
 8001532:	46b2      	mov	sl, r6
 8001534:	46a9      	mov	r9, r5
 8001536:	46a0      	mov	r8, r4
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	2203      	movs	r2, #3
 800153e:	0109      	lsls	r1, r1, #4
 8001540:	002b      	movs	r3, r5
 8001542:	468c      	mov	ip, r1
 8001544:	4316      	orrs	r6, r2
 8001546:	4642      	mov	r2, r8
 8001548:	4463      	add	r3, ip
 800154a:	407a      	eors	r2, r7
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2e0a      	cmp	r6, #10
 8001552:	dd00      	ble.n	8001556 <__aeabi_dmul+0x11a>
 8001554:	e228      	b.n	80019a8 <__aeabi_dmul+0x56c>
 8001556:	2103      	movs	r1, #3
 8001558:	2501      	movs	r5, #1
 800155a:	40b5      	lsls	r5, r6
 800155c:	46ac      	mov	ip, r5
 800155e:	26a6      	movs	r6, #166	; 0xa6
 8001560:	4663      	mov	r3, ip
 8001562:	00f6      	lsls	r6, r6, #3
 8001564:	4035      	ands	r5, r6
 8001566:	4233      	tst	r3, r6
 8001568:	d10b      	bne.n	8001582 <__aeabi_dmul+0x146>
 800156a:	2690      	movs	r6, #144	; 0x90
 800156c:	00b6      	lsls	r6, r6, #2
 800156e:	4233      	tst	r3, r6
 8001570:	d118      	bne.n	80015a4 <__aeabi_dmul+0x168>
 8001572:	3eb9      	subs	r6, #185	; 0xb9
 8001574:	3eff      	subs	r6, #255	; 0xff
 8001576:	421e      	tst	r6, r3
 8001578:	d01d      	beq.n	80015b6 <__aeabi_dmul+0x17a>
 800157a:	46a3      	mov	fp, r4
 800157c:	4682      	mov	sl, r0
 800157e:	9100      	str	r1, [sp, #0]
 8001580:	e000      	b.n	8001584 <__aeabi_dmul+0x148>
 8001582:	0017      	movs	r7, r2
 8001584:	9900      	ldr	r1, [sp, #0]
 8001586:	003a      	movs	r2, r7
 8001588:	2902      	cmp	r1, #2
 800158a:	d010      	beq.n	80015ae <__aeabi_dmul+0x172>
 800158c:	465c      	mov	r4, fp
 800158e:	4650      	mov	r0, sl
 8001590:	2903      	cmp	r1, #3
 8001592:	d1bf      	bne.n	8001514 <__aeabi_dmul+0xd8>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	431c      	orrs	r4, r3
 800159a:	0324      	lsls	r4, r4, #12
 800159c:	0005      	movs	r5, r0
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <__aeabi_dmul+0x360>)
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	e7bd      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015a4:	2480      	movs	r4, #128	; 0x80
 80015a6:	2200      	movs	r2, #0
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <__aeabi_dmul+0x360>)
 80015aa:	0324      	lsls	r4, r4, #12
 80015ac:	e7b8      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015ae:	2400      	movs	r4, #0
 80015b0:	2500      	movs	r5, #0
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <__aeabi_dmul+0x360>)
 80015b4:	e7b4      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015b6:	4653      	mov	r3, sl
 80015b8:	041e      	lsls	r6, r3, #16
 80015ba:	0c36      	lsrs	r6, r6, #16
 80015bc:	0c1f      	lsrs	r7, r3, #16
 80015be:	0033      	movs	r3, r6
 80015c0:	0c01      	lsrs	r1, r0, #16
 80015c2:	0400      	lsls	r0, r0, #16
 80015c4:	0c00      	lsrs	r0, r0, #16
 80015c6:	4343      	muls	r3, r0
 80015c8:	4698      	mov	r8, r3
 80015ca:	0003      	movs	r3, r0
 80015cc:	437b      	muls	r3, r7
 80015ce:	4699      	mov	r9, r3
 80015d0:	0033      	movs	r3, r6
 80015d2:	434b      	muls	r3, r1
 80015d4:	469c      	mov	ip, r3
 80015d6:	4643      	mov	r3, r8
 80015d8:	000d      	movs	r5, r1
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	469a      	mov	sl, r3
 80015de:	437d      	muls	r5, r7
 80015e0:	44cc      	add	ip, r9
 80015e2:	44d4      	add	ip, sl
 80015e4:	9500      	str	r5, [sp, #0]
 80015e6:	45e1      	cmp	r9, ip
 80015e8:	d904      	bls.n	80015f4 <__aeabi_dmul+0x1b8>
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	4699      	mov	r9, r3
 80015f0:	444d      	add	r5, r9
 80015f2:	9500      	str	r5, [sp, #0]
 80015f4:	4663      	mov	r3, ip
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	001d      	movs	r5, r3
 80015fa:	4663      	mov	r3, ip
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	469c      	mov	ip, r3
 8001600:	4643      	mov	r3, r8
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	4698      	mov	r8, r3
 8001608:	4663      	mov	r3, ip
 800160a:	4443      	add	r3, r8
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	0c23      	lsrs	r3, r4, #16
 8001610:	4698      	mov	r8, r3
 8001612:	0033      	movs	r3, r6
 8001614:	0424      	lsls	r4, r4, #16
 8001616:	0c24      	lsrs	r4, r4, #16
 8001618:	4363      	muls	r3, r4
 800161a:	469c      	mov	ip, r3
 800161c:	0023      	movs	r3, r4
 800161e:	437b      	muls	r3, r7
 8001620:	4699      	mov	r9, r3
 8001622:	4643      	mov	r3, r8
 8001624:	435e      	muls	r6, r3
 8001626:	435f      	muls	r7, r3
 8001628:	444e      	add	r6, r9
 800162a:	4663      	mov	r3, ip
 800162c:	46b2      	mov	sl, r6
 800162e:	0c1e      	lsrs	r6, r3, #16
 8001630:	4456      	add	r6, sl
 8001632:	45b1      	cmp	r9, r6
 8001634:	d903      	bls.n	800163e <__aeabi_dmul+0x202>
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	4699      	mov	r9, r3
 800163c:	444f      	add	r7, r9
 800163e:	0c33      	lsrs	r3, r6, #16
 8001640:	4699      	mov	r9, r3
 8001642:	003b      	movs	r3, r7
 8001644:	444b      	add	r3, r9
 8001646:	9305      	str	r3, [sp, #20]
 8001648:	4663      	mov	r3, ip
 800164a:	46ac      	mov	ip, r5
 800164c:	041f      	lsls	r7, r3, #16
 800164e:	0c3f      	lsrs	r7, r7, #16
 8001650:	0436      	lsls	r6, r6, #16
 8001652:	19f6      	adds	r6, r6, r7
 8001654:	44b4      	add	ip, r6
 8001656:	4663      	mov	r3, ip
 8001658:	9304      	str	r3, [sp, #16]
 800165a:	465b      	mov	r3, fp
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	469c      	mov	ip, r3
 8001660:	465b      	mov	r3, fp
 8001662:	041f      	lsls	r7, r3, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	003b      	movs	r3, r7
 8001668:	4343      	muls	r3, r0
 800166a:	4699      	mov	r9, r3
 800166c:	4663      	mov	r3, ip
 800166e:	4343      	muls	r3, r0
 8001670:	469a      	mov	sl, r3
 8001672:	464b      	mov	r3, r9
 8001674:	4660      	mov	r0, ip
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	469b      	mov	fp, r3
 800167a:	4348      	muls	r0, r1
 800167c:	4379      	muls	r1, r7
 800167e:	4451      	add	r1, sl
 8001680:	4459      	add	r1, fp
 8001682:	458a      	cmp	sl, r1
 8001684:	d903      	bls.n	800168e <__aeabi_dmul+0x252>
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	469a      	mov	sl, r3
 800168c:	4450      	add	r0, sl
 800168e:	0c0b      	lsrs	r3, r1, #16
 8001690:	469a      	mov	sl, r3
 8001692:	464b      	mov	r3, r9
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	4699      	mov	r9, r3
 800169a:	003b      	movs	r3, r7
 800169c:	4363      	muls	r3, r4
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	4645      	mov	r5, r8
 80016a2:	4449      	add	r1, r9
 80016a4:	4699      	mov	r9, r3
 80016a6:	4663      	mov	r3, ip
 80016a8:	435c      	muls	r4, r3
 80016aa:	436b      	muls	r3, r5
 80016ac:	469c      	mov	ip, r3
 80016ae:	464b      	mov	r3, r9
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	4698      	mov	r8, r3
 80016b4:	436f      	muls	r7, r5
 80016b6:	193f      	adds	r7, r7, r4
 80016b8:	4447      	add	r7, r8
 80016ba:	4450      	add	r0, sl
 80016bc:	42bc      	cmp	r4, r7
 80016be:	d903      	bls.n	80016c8 <__aeabi_dmul+0x28c>
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	4698      	mov	r8, r3
 80016c6:	44c4      	add	ip, r8
 80016c8:	9b04      	ldr	r3, [sp, #16]
 80016ca:	9d00      	ldr	r5, [sp, #0]
 80016cc:	4698      	mov	r8, r3
 80016ce:	4445      	add	r5, r8
 80016d0:	42b5      	cmp	r5, r6
 80016d2:	41b6      	sbcs	r6, r6
 80016d4:	4273      	negs	r3, r6
 80016d6:	4698      	mov	r8, r3
 80016d8:	464b      	mov	r3, r9
 80016da:	041e      	lsls	r6, r3, #16
 80016dc:	9b05      	ldr	r3, [sp, #20]
 80016de:	043c      	lsls	r4, r7, #16
 80016e0:	4699      	mov	r9, r3
 80016e2:	0c36      	lsrs	r6, r6, #16
 80016e4:	19a4      	adds	r4, r4, r6
 80016e6:	444c      	add	r4, r9
 80016e8:	46a1      	mov	r9, r4
 80016ea:	4683      	mov	fp, r0
 80016ec:	186e      	adds	r6, r5, r1
 80016ee:	44c1      	add	r9, r8
 80016f0:	428e      	cmp	r6, r1
 80016f2:	4189      	sbcs	r1, r1
 80016f4:	44cb      	add	fp, r9
 80016f6:	465d      	mov	r5, fp
 80016f8:	4249      	negs	r1, r1
 80016fa:	186d      	adds	r5, r5, r1
 80016fc:	429c      	cmp	r4, r3
 80016fe:	41a4      	sbcs	r4, r4
 8001700:	45c1      	cmp	r9, r8
 8001702:	419b      	sbcs	r3, r3
 8001704:	4583      	cmp	fp, r0
 8001706:	4180      	sbcs	r0, r0
 8001708:	428d      	cmp	r5, r1
 800170a:	4189      	sbcs	r1, r1
 800170c:	425b      	negs	r3, r3
 800170e:	4264      	negs	r4, r4
 8001710:	431c      	orrs	r4, r3
 8001712:	4240      	negs	r0, r0
 8001714:	9b03      	ldr	r3, [sp, #12]
 8001716:	4249      	negs	r1, r1
 8001718:	4301      	orrs	r1, r0
 800171a:	0270      	lsls	r0, r6, #9
 800171c:	0c3f      	lsrs	r7, r7, #16
 800171e:	4318      	orrs	r0, r3
 8001720:	19e4      	adds	r4, r4, r7
 8001722:	1e47      	subs	r7, r0, #1
 8001724:	41b8      	sbcs	r0, r7
 8001726:	1864      	adds	r4, r4, r1
 8001728:	4464      	add	r4, ip
 800172a:	0df6      	lsrs	r6, r6, #23
 800172c:	0261      	lsls	r1, r4, #9
 800172e:	4330      	orrs	r0, r6
 8001730:	0dec      	lsrs	r4, r5, #23
 8001732:	026e      	lsls	r6, r5, #9
 8001734:	430c      	orrs	r4, r1
 8001736:	4330      	orrs	r0, r6
 8001738:	01c9      	lsls	r1, r1, #7
 800173a:	d400      	bmi.n	800173e <__aeabi_dmul+0x302>
 800173c:	e0f1      	b.n	8001922 <__aeabi_dmul+0x4e6>
 800173e:	2101      	movs	r1, #1
 8001740:	0843      	lsrs	r3, r0, #1
 8001742:	4001      	ands	r1, r0
 8001744:	430b      	orrs	r3, r1
 8001746:	07e0      	lsls	r0, r4, #31
 8001748:	4318      	orrs	r0, r3
 800174a:	0864      	lsrs	r4, r4, #1
 800174c:	4915      	ldr	r1, [pc, #84]	; (80017a4 <__aeabi_dmul+0x368>)
 800174e:	9b02      	ldr	r3, [sp, #8]
 8001750:	468c      	mov	ip, r1
 8001752:	4463      	add	r3, ip
 8001754:	2b00      	cmp	r3, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x31e>
 8001758:	e097      	b.n	800188a <__aeabi_dmul+0x44e>
 800175a:	0741      	lsls	r1, r0, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x336>
 800175e:	210f      	movs	r1, #15
 8001760:	4001      	ands	r1, r0
 8001762:	2904      	cmp	r1, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x336>
 8001766:	1d01      	adds	r1, r0, #4
 8001768:	4281      	cmp	r1, r0
 800176a:	4180      	sbcs	r0, r0
 800176c:	4240      	negs	r0, r0
 800176e:	1824      	adds	r4, r4, r0
 8001770:	0008      	movs	r0, r1
 8001772:	01e1      	lsls	r1, r4, #7
 8001774:	d506      	bpl.n	8001784 <__aeabi_dmul+0x348>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	00c9      	lsls	r1, r1, #3
 800177a:	468c      	mov	ip, r1
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <__aeabi_dmul+0x36c>)
 800177e:	401c      	ands	r4, r3
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4463      	add	r3, ip
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <__aeabi_dmul+0x370>)
 8001786:	428b      	cmp	r3, r1
 8001788:	dd00      	ble.n	800178c <__aeabi_dmul+0x350>
 800178a:	e710      	b.n	80015ae <__aeabi_dmul+0x172>
 800178c:	0761      	lsls	r1, r4, #29
 800178e:	08c5      	lsrs	r5, r0, #3
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	430d      	orrs	r5, r1
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	e6c1      	b.n	8001520 <__aeabi_dmul+0xe4>
 800179c:	000007ff 	.word	0x000007ff
 80017a0:	fffffc01 	.word	0xfffffc01
 80017a4:	000003ff 	.word	0x000003ff
 80017a8:	feffffff 	.word	0xfeffffff
 80017ac:	000007fe 	.word	0x000007fe
 80017b0:	464b      	mov	r3, r9
 80017b2:	4323      	orrs	r3, r4
 80017b4:	d059      	beq.n	800186a <__aeabi_dmul+0x42e>
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dmul+0x380>
 80017ba:	e0a3      	b.n	8001904 <__aeabi_dmul+0x4c8>
 80017bc:	0020      	movs	r0, r4
 80017be:	f000 fdb1 	bl	8002324 <__clzsi2>
 80017c2:	0001      	movs	r1, r0
 80017c4:	0003      	movs	r3, r0
 80017c6:	390b      	subs	r1, #11
 80017c8:	221d      	movs	r2, #29
 80017ca:	1a52      	subs	r2, r2, r1
 80017cc:	4649      	mov	r1, r9
 80017ce:	0018      	movs	r0, r3
 80017d0:	40d1      	lsrs	r1, r2
 80017d2:	464a      	mov	r2, r9
 80017d4:	3808      	subs	r0, #8
 80017d6:	4082      	lsls	r2, r0
 80017d8:	4084      	lsls	r4, r0
 80017da:	0010      	movs	r0, r2
 80017dc:	430c      	orrs	r4, r1
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <__aeabi_dmul+0x574>)
 80017e0:	1aeb      	subs	r3, r5, r3
 80017e2:	4694      	mov	ip, r2
 80017e4:	4642      	mov	r2, r8
 80017e6:	4463      	add	r3, ip
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	407a      	eors	r2, r7
 80017ee:	3301      	adds	r3, #1
 80017f0:	2100      	movs	r1, #0
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	2e0a      	cmp	r6, #10
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dmul+0x3c0>
 80017fa:	e667      	b.n	80014cc <__aeabi_dmul+0x90>
 80017fc:	e683      	b.n	8001506 <__aeabi_dmul+0xca>
 80017fe:	465b      	mov	r3, fp
 8001800:	4303      	orrs	r3, r0
 8001802:	469a      	mov	sl, r3
 8001804:	d02a      	beq.n	800185c <__aeabi_dmul+0x420>
 8001806:	465b      	mov	r3, fp
 8001808:	2b00      	cmp	r3, #0
 800180a:	d06d      	beq.n	80018e8 <__aeabi_dmul+0x4ac>
 800180c:	4658      	mov	r0, fp
 800180e:	f000 fd89 	bl	8002324 <__clzsi2>
 8001812:	0001      	movs	r1, r0
 8001814:	0003      	movs	r3, r0
 8001816:	390b      	subs	r1, #11
 8001818:	221d      	movs	r2, #29
 800181a:	1a52      	subs	r2, r2, r1
 800181c:	0021      	movs	r1, r4
 800181e:	0018      	movs	r0, r3
 8001820:	465d      	mov	r5, fp
 8001822:	40d1      	lsrs	r1, r2
 8001824:	3808      	subs	r0, #8
 8001826:	4085      	lsls	r5, r0
 8001828:	000a      	movs	r2, r1
 800182a:	4084      	lsls	r4, r0
 800182c:	432a      	orrs	r2, r5
 800182e:	4693      	mov	fp, r2
 8001830:	46a2      	mov	sl, r4
 8001832:	4d5f      	ldr	r5, [pc, #380]	; (80019b0 <__aeabi_dmul+0x574>)
 8001834:	2600      	movs	r6, #0
 8001836:	1aed      	subs	r5, r5, r3
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	e625      	b.n	800148a <__aeabi_dmul+0x4e>
 800183e:	465b      	mov	r3, fp
 8001840:	4303      	orrs	r3, r0
 8001842:	469a      	mov	sl, r3
 8001844:	d105      	bne.n	8001852 <__aeabi_dmul+0x416>
 8001846:	2300      	movs	r3, #0
 8001848:	469b      	mov	fp, r3
 800184a:	3302      	adds	r3, #2
 800184c:	2608      	movs	r6, #8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	e61b      	b.n	800148a <__aeabi_dmul+0x4e>
 8001852:	2303      	movs	r3, #3
 8001854:	4682      	mov	sl, r0
 8001856:	260c      	movs	r6, #12
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	e616      	b.n	800148a <__aeabi_dmul+0x4e>
 800185c:	2300      	movs	r3, #0
 800185e:	469b      	mov	fp, r3
 8001860:	3301      	adds	r3, #1
 8001862:	2604      	movs	r6, #4
 8001864:	2500      	movs	r5, #0
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	e60f      	b.n	800148a <__aeabi_dmul+0x4e>
 800186a:	4642      	mov	r2, r8
 800186c:	3301      	adds	r3, #1
 800186e:	9501      	str	r5, [sp, #4]
 8001870:	431e      	orrs	r6, r3
 8001872:	9b01      	ldr	r3, [sp, #4]
 8001874:	407a      	eors	r2, r7
 8001876:	3301      	adds	r3, #1
 8001878:	2400      	movs	r4, #0
 800187a:	2000      	movs	r0, #0
 800187c:	2101      	movs	r1, #1
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2e0a      	cmp	r6, #10
 8001884:	dd00      	ble.n	8001888 <__aeabi_dmul+0x44c>
 8001886:	e621      	b.n	80014cc <__aeabi_dmul+0x90>
 8001888:	e63d      	b.n	8001506 <__aeabi_dmul+0xca>
 800188a:	2101      	movs	r1, #1
 800188c:	1ac9      	subs	r1, r1, r3
 800188e:	2938      	cmp	r1, #56	; 0x38
 8001890:	dd00      	ble.n	8001894 <__aeabi_dmul+0x458>
 8001892:	e642      	b.n	800151a <__aeabi_dmul+0xde>
 8001894:	291f      	cmp	r1, #31
 8001896:	dd47      	ble.n	8001928 <__aeabi_dmul+0x4ec>
 8001898:	261f      	movs	r6, #31
 800189a:	0025      	movs	r5, r4
 800189c:	4276      	negs	r6, r6
 800189e:	1af3      	subs	r3, r6, r3
 80018a0:	40dd      	lsrs	r5, r3
 80018a2:	002b      	movs	r3, r5
 80018a4:	2920      	cmp	r1, #32
 80018a6:	d005      	beq.n	80018b4 <__aeabi_dmul+0x478>
 80018a8:	4942      	ldr	r1, [pc, #264]	; (80019b4 <__aeabi_dmul+0x578>)
 80018aa:	9d02      	ldr	r5, [sp, #8]
 80018ac:	468c      	mov	ip, r1
 80018ae:	4465      	add	r5, ip
 80018b0:	40ac      	lsls	r4, r5
 80018b2:	4320      	orrs	r0, r4
 80018b4:	1e41      	subs	r1, r0, #1
 80018b6:	4188      	sbcs	r0, r1
 80018b8:	4318      	orrs	r0, r3
 80018ba:	2307      	movs	r3, #7
 80018bc:	001d      	movs	r5, r3
 80018be:	2400      	movs	r4, #0
 80018c0:	4005      	ands	r5, r0
 80018c2:	4203      	tst	r3, r0
 80018c4:	d04a      	beq.n	800195c <__aeabi_dmul+0x520>
 80018c6:	230f      	movs	r3, #15
 80018c8:	2400      	movs	r4, #0
 80018ca:	4003      	ands	r3, r0
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d042      	beq.n	8001956 <__aeabi_dmul+0x51a>
 80018d0:	1d03      	adds	r3, r0, #4
 80018d2:	4283      	cmp	r3, r0
 80018d4:	4180      	sbcs	r0, r0
 80018d6:	4240      	negs	r0, r0
 80018d8:	1824      	adds	r4, r4, r0
 80018da:	0018      	movs	r0, r3
 80018dc:	0223      	lsls	r3, r4, #8
 80018de:	d53a      	bpl.n	8001956 <__aeabi_dmul+0x51a>
 80018e0:	2301      	movs	r3, #1
 80018e2:	2400      	movs	r4, #0
 80018e4:	2500      	movs	r5, #0
 80018e6:	e61b      	b.n	8001520 <__aeabi_dmul+0xe4>
 80018e8:	f000 fd1c 	bl	8002324 <__clzsi2>
 80018ec:	0001      	movs	r1, r0
 80018ee:	0003      	movs	r3, r0
 80018f0:	3115      	adds	r1, #21
 80018f2:	3320      	adds	r3, #32
 80018f4:	291c      	cmp	r1, #28
 80018f6:	dd8f      	ble.n	8001818 <__aeabi_dmul+0x3dc>
 80018f8:	3808      	subs	r0, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	4084      	lsls	r4, r0
 80018fe:	4692      	mov	sl, r2
 8001900:	46a3      	mov	fp, r4
 8001902:	e796      	b.n	8001832 <__aeabi_dmul+0x3f6>
 8001904:	f000 fd0e 	bl	8002324 <__clzsi2>
 8001908:	0001      	movs	r1, r0
 800190a:	0003      	movs	r3, r0
 800190c:	3115      	adds	r1, #21
 800190e:	3320      	adds	r3, #32
 8001910:	291c      	cmp	r1, #28
 8001912:	dc00      	bgt.n	8001916 <__aeabi_dmul+0x4da>
 8001914:	e758      	b.n	80017c8 <__aeabi_dmul+0x38c>
 8001916:	0002      	movs	r2, r0
 8001918:	464c      	mov	r4, r9
 800191a:	3a08      	subs	r2, #8
 800191c:	2000      	movs	r0, #0
 800191e:	4094      	lsls	r4, r2
 8001920:	e75d      	b.n	80017de <__aeabi_dmul+0x3a2>
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	e711      	b.n	800174c <__aeabi_dmul+0x310>
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <__aeabi_dmul+0x57c>)
 800192a:	0026      	movs	r6, r4
 800192c:	469c      	mov	ip, r3
 800192e:	0003      	movs	r3, r0
 8001930:	9d02      	ldr	r5, [sp, #8]
 8001932:	40cb      	lsrs	r3, r1
 8001934:	4465      	add	r5, ip
 8001936:	40ae      	lsls	r6, r5
 8001938:	431e      	orrs	r6, r3
 800193a:	0003      	movs	r3, r0
 800193c:	40ab      	lsls	r3, r5
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	4183      	sbcs	r3, r0
 8001942:	0030      	movs	r0, r6
 8001944:	4318      	orrs	r0, r3
 8001946:	40cc      	lsrs	r4, r1
 8001948:	0743      	lsls	r3, r0, #29
 800194a:	d0c7      	beq.n	80018dc <__aeabi_dmul+0x4a0>
 800194c:	230f      	movs	r3, #15
 800194e:	4003      	ands	r3, r0
 8001950:	2b04      	cmp	r3, #4
 8001952:	d1bd      	bne.n	80018d0 <__aeabi_dmul+0x494>
 8001954:	e7c2      	b.n	80018dc <__aeabi_dmul+0x4a0>
 8001956:	0765      	lsls	r5, r4, #29
 8001958:	0264      	lsls	r4, r4, #9
 800195a:	0b24      	lsrs	r4, r4, #12
 800195c:	08c0      	lsrs	r0, r0, #3
 800195e:	2300      	movs	r3, #0
 8001960:	4305      	orrs	r5, r0
 8001962:	e5dd      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001964:	2500      	movs	r5, #0
 8001966:	2302      	movs	r3, #2
 8001968:	2e0f      	cmp	r6, #15
 800196a:	d10c      	bne.n	8001986 <__aeabi_dmul+0x54a>
 800196c:	2480      	movs	r4, #128	; 0x80
 800196e:	465b      	mov	r3, fp
 8001970:	0324      	lsls	r4, r4, #12
 8001972:	4223      	tst	r3, r4
 8001974:	d00e      	beq.n	8001994 <__aeabi_dmul+0x558>
 8001976:	4221      	tst	r1, r4
 8001978:	d10c      	bne.n	8001994 <__aeabi_dmul+0x558>
 800197a:	430c      	orrs	r4, r1
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	003a      	movs	r2, r7
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <__aeabi_dmul+0x580>)
 8001982:	0b24      	lsrs	r4, r4, #12
 8001984:	e5cc      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001986:	2e0b      	cmp	r6, #11
 8001988:	d000      	beq.n	800198c <__aeabi_dmul+0x550>
 800198a:	e5a2      	b.n	80014d2 <__aeabi_dmul+0x96>
 800198c:	468b      	mov	fp, r1
 800198e:	46aa      	mov	sl, r5
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	e5f7      	b.n	8001584 <__aeabi_dmul+0x148>
 8001994:	2480      	movs	r4, #128	; 0x80
 8001996:	465b      	mov	r3, fp
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	431c      	orrs	r4, r3
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4642      	mov	r2, r8
 80019a0:	4655      	mov	r5, sl
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <__aeabi_dmul+0x580>)
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	e5bb      	b.n	8001520 <__aeabi_dmul+0xe4>
 80019a8:	464d      	mov	r5, r9
 80019aa:	0021      	movs	r1, r4
 80019ac:	2303      	movs	r3, #3
 80019ae:	e7db      	b.n	8001968 <__aeabi_dmul+0x52c>
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	0000043e 	.word	0x0000043e
 80019b8:	0000041e 	.word	0x0000041e
 80019bc:	000007ff 	.word	0x000007ff

080019c0 <__aeabi_dsub>:
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	4657      	mov	r7, sl
 80019c4:	464e      	mov	r6, r9
 80019c6:	4645      	mov	r5, r8
 80019c8:	46de      	mov	lr, fp
 80019ca:	b5e0      	push	{r5, r6, r7, lr}
 80019cc:	000d      	movs	r5, r1
 80019ce:	0004      	movs	r4, r0
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	032b      	lsls	r3, r5, #12
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	0f62      	lsrs	r2, r4, #29
 80019da:	431a      	orrs	r2, r3
 80019dc:	00e3      	lsls	r3, r4, #3
 80019de:	030c      	lsls	r4, r1, #12
 80019e0:	0a64      	lsrs	r4, r4, #9
 80019e2:	0f47      	lsrs	r7, r0, #29
 80019e4:	4327      	orrs	r7, r4
 80019e6:	4cd0      	ldr	r4, [pc, #832]	; (8001d28 <__aeabi_dsub+0x368>)
 80019e8:	006e      	lsls	r6, r5, #1
 80019ea:	4691      	mov	r9, r2
 80019ec:	b083      	sub	sp, #12
 80019ee:	004a      	lsls	r2, r1, #1
 80019f0:	00c0      	lsls	r0, r0, #3
 80019f2:	4698      	mov	r8, r3
 80019f4:	46a2      	mov	sl, r4
 80019f6:	0d76      	lsrs	r6, r6, #21
 80019f8:	0fed      	lsrs	r5, r5, #31
 80019fa:	0d52      	lsrs	r2, r2, #21
 80019fc:	0fc9      	lsrs	r1, r1, #31
 80019fe:	9001      	str	r0, [sp, #4]
 8001a00:	42a2      	cmp	r2, r4
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x46>
 8001a04:	e0b9      	b.n	8001b7a <__aeabi_dsub+0x1ba>
 8001a06:	2401      	movs	r4, #1
 8001a08:	4061      	eors	r1, r4
 8001a0a:	468b      	mov	fp, r1
 8001a0c:	428d      	cmp	r5, r1
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x52>
 8001a10:	e08d      	b.n	8001b2e <__aeabi_dsub+0x16e>
 8001a12:	1ab4      	subs	r4, r6, r2
 8001a14:	46a4      	mov	ip, r4
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	dc00      	bgt.n	8001a1c <__aeabi_dsub+0x5c>
 8001a1a:	e0b7      	b.n	8001b8c <__aeabi_dsub+0x1cc>
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x62>
 8001a20:	e0cb      	b.n	8001bba <__aeabi_dsub+0x1fa>
 8001a22:	4ac1      	ldr	r2, [pc, #772]	; (8001d28 <__aeabi_dsub+0x368>)
 8001a24:	4296      	cmp	r6, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x6a>
 8001a28:	e186      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0412      	lsls	r2, r2, #16
 8001a2e:	4317      	orrs	r7, r2
 8001a30:	4662      	mov	r2, ip
 8001a32:	2a38      	cmp	r2, #56	; 0x38
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x78>
 8001a36:	e1a4      	b.n	8001d82 <__aeabi_dsub+0x3c2>
 8001a38:	2a1f      	cmp	r2, #31
 8001a3a:	dd00      	ble.n	8001a3e <__aeabi_dsub+0x7e>
 8001a3c:	e21d      	b.n	8001e7a <__aeabi_dsub+0x4ba>
 8001a3e:	4661      	mov	r1, ip
 8001a40:	2220      	movs	r2, #32
 8001a42:	003c      	movs	r4, r7
 8001a44:	1a52      	subs	r2, r2, r1
 8001a46:	0001      	movs	r1, r0
 8001a48:	4090      	lsls	r0, r2
 8001a4a:	4094      	lsls	r4, r2
 8001a4c:	1e42      	subs	r2, r0, #1
 8001a4e:	4190      	sbcs	r0, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	46a0      	mov	r8, r4
 8001a54:	4664      	mov	r4, ip
 8001a56:	40d7      	lsrs	r7, r2
 8001a58:	464a      	mov	r2, r9
 8001a5a:	40e1      	lsrs	r1, r4
 8001a5c:	4644      	mov	r4, r8
 8001a5e:	1bd2      	subs	r2, r2, r7
 8001a60:	4691      	mov	r9, r2
 8001a62:	430c      	orrs	r4, r1
 8001a64:	4304      	orrs	r4, r0
 8001a66:	1b1c      	subs	r4, r3, r4
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	4192      	sbcs	r2, r2
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	4252      	negs	r2, r2
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	469a      	mov	sl, r3
 8001a74:	4653      	mov	r3, sl
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	d400      	bmi.n	8001a7c <__aeabi_dsub+0xbc>
 8001a7a:	e12b      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001a7c:	4653      	mov	r3, sl
 8001a7e:	025a      	lsls	r2, r3, #9
 8001a80:	0a53      	lsrs	r3, r2, #9
 8001a82:	469a      	mov	sl, r3
 8001a84:	4653      	mov	r3, sl
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0xcc>
 8001a8a:	e166      	b.n	8001d5a <__aeabi_dsub+0x39a>
 8001a8c:	4650      	mov	r0, sl
 8001a8e:	f000 fc49 	bl	8002324 <__clzsi2>
 8001a92:	0003      	movs	r3, r0
 8001a94:	3b08      	subs	r3, #8
 8001a96:	2220      	movs	r2, #32
 8001a98:	0020      	movs	r0, r4
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	40d0      	lsrs	r0, r2
 8001aa0:	4099      	lsls	r1, r3
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	409c      	lsls	r4, r3
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	429e      	cmp	r6, r3
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_dsub+0xee>
 8001aac:	e164      	b.n	8001d78 <__aeabi_dsub+0x3b8>
 8001aae:	1b9b      	subs	r3, r3, r6
 8001ab0:	1c59      	adds	r1, r3, #1
 8001ab2:	291f      	cmp	r1, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0xf8>
 8001ab6:	e0fe      	b.n	8001cb6 <__aeabi_dsub+0x2f6>
 8001ab8:	2320      	movs	r3, #32
 8001aba:	0010      	movs	r0, r2
 8001abc:	0026      	movs	r6, r4
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	409c      	lsls	r4, r3
 8001ac2:	4098      	lsls	r0, r3
 8001ac4:	40ce      	lsrs	r6, r1
 8001ac6:	40ca      	lsrs	r2, r1
 8001ac8:	1e63      	subs	r3, r4, #1
 8001aca:	419c      	sbcs	r4, r3
 8001acc:	4330      	orrs	r0, r6
 8001ace:	4692      	mov	sl, r2
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	4304      	orrs	r4, r0
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a2      	add	sl, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	4653      	mov	r3, sl
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x134>
 8001af2:	e0f2      	b.n	8001cda <__aeabi_dsub+0x31a>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x368>)
 8001af6:	3601      	adds	r6, #1
 8001af8:	429e      	cmp	r6, r3
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x13e>
 8001afc:	e10f      	b.n	8001d1e <__aeabi_dsub+0x35e>
 8001afe:	4653      	mov	r3, sl
 8001b00:	498a      	ldr	r1, [pc, #552]	; (8001d2c <__aeabi_dsub+0x36c>)
 8001b02:	08e4      	lsrs	r4, r4, #3
 8001b04:	400b      	ands	r3, r1
 8001b06:	0019      	movs	r1, r3
 8001b08:	075b      	lsls	r3, r3, #29
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	0572      	lsls	r2, r6, #21
 8001b0e:	024c      	lsls	r4, r1, #9
 8001b10:	0b24      	lsrs	r4, r4, #12
 8001b12:	0d52      	lsrs	r2, r2, #21
 8001b14:	0512      	lsls	r2, r2, #20
 8001b16:	4322      	orrs	r2, r4
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	432a      	orrs	r2, r5
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	0011      	movs	r1, r2
 8001b20:	b003      	add	sp, #12
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	1ab4      	subs	r4, r6, r2
 8001b30:	46a4      	mov	ip, r4
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	dd59      	ble.n	8001bea <__aeabi_dsub+0x22a>
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x17c>
 8001b3a:	e0b0      	b.n	8001c9e <__aeabi_dsub+0x2de>
 8001b3c:	4556      	cmp	r6, sl
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x182>
 8001b40:	e0fa      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0412      	lsls	r2, r2, #16
 8001b46:	4317      	orrs	r7, r2
 8001b48:	4662      	mov	r2, ip
 8001b4a:	2a38      	cmp	r2, #56	; 0x38
 8001b4c:	dd00      	ble.n	8001b50 <__aeabi_dsub+0x190>
 8001b4e:	e0d4      	b.n	8001cfa <__aeabi_dsub+0x33a>
 8001b50:	2a1f      	cmp	r2, #31
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_dsub+0x196>
 8001b54:	e1c0      	b.n	8001ed8 <__aeabi_dsub+0x518>
 8001b56:	0039      	movs	r1, r7
 8001b58:	3a20      	subs	r2, #32
 8001b5a:	40d1      	lsrs	r1, r2
 8001b5c:	4662      	mov	r2, ip
 8001b5e:	2a20      	cmp	r2, #32
 8001b60:	d006      	beq.n	8001b70 <__aeabi_dsub+0x1b0>
 8001b62:	4664      	mov	r4, ip
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	1b12      	subs	r2, r2, r4
 8001b68:	003c      	movs	r4, r7
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4304      	orrs	r4, r0
 8001b6e:	9401      	str	r4, [sp, #4]
 8001b70:	9c01      	ldr	r4, [sp, #4]
 8001b72:	1e62      	subs	r2, r4, #1
 8001b74:	4194      	sbcs	r4, r2
 8001b76:	430c      	orrs	r4, r1
 8001b78:	e0c3      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001b7a:	003c      	movs	r4, r7
 8001b7c:	4304      	orrs	r4, r0
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x218>
 8001b80:	468b      	mov	fp, r1
 8001b82:	428d      	cmp	r5, r1
 8001b84:	d02e      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001b86:	4c6a      	ldr	r4, [pc, #424]	; (8001d30 <__aeabi_dsub+0x370>)
 8001b88:	46a4      	mov	ip, r4
 8001b8a:	44b4      	add	ip, r6
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d05f      	beq.n	8001c52 <__aeabi_dsub+0x292>
 8001b92:	1b94      	subs	r4, r2, r6
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2e00      	cmp	r6, #0
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dsub+0x1dc>
 8001b9a:	e120      	b.n	8001dde <__aeabi_dsub+0x41e>
 8001b9c:	464c      	mov	r4, r9
 8001b9e:	431c      	orrs	r4, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1e4>
 8001ba2:	e1c7      	b.n	8001f34 <__aeabi_dsub+0x574>
 8001ba4:	4661      	mov	r1, ip
 8001ba6:	1e4c      	subs	r4, r1, #1
 8001ba8:	2901      	cmp	r1, #1
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x1ee>
 8001bac:	e223      	b.n	8001ff6 <__aeabi_dsub+0x636>
 8001bae:	4d5e      	ldr	r5, [pc, #376]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bb0:	45ac      	cmp	ip, r5
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x1f6>
 8001bb4:	e1d8      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001bb6:	46a4      	mov	ip, r4
 8001bb8:	e11a      	b.n	8001df0 <__aeabi_dsub+0x430>
 8001bba:	003a      	movs	r2, r7
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x202>
 8001bc0:	e0e4      	b.n	8001d8c <__aeabi_dsub+0x3cc>
 8001bc2:	0022      	movs	r2, r4
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	2c01      	cmp	r4, #1
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x20c>
 8001bca:	e1c3      	b.n	8001f54 <__aeabi_dsub+0x594>
 8001bcc:	4956      	ldr	r1, [pc, #344]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bce:	428c      	cmp	r4, r1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x214>
 8001bd2:	e0b1      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001bd4:	4694      	mov	ip, r2
 8001bd6:	e72b      	b.n	8001a30 <__aeabi_dsub+0x70>
 8001bd8:	2401      	movs	r4, #1
 8001bda:	4061      	eors	r1, r4
 8001bdc:	468b      	mov	fp, r1
 8001bde:	428d      	cmp	r5, r1
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001be2:	e716      	b.n	8001a12 <__aeabi_dsub+0x52>
 8001be4:	4952      	ldr	r1, [pc, #328]	; (8001d30 <__aeabi_dsub+0x370>)
 8001be6:	468c      	mov	ip, r1
 8001be8:	44b4      	add	ip, r6
 8001bea:	4664      	mov	r4, ip
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x232>
 8001bf0:	e0d3      	b.n	8001d9a <__aeabi_dsub+0x3da>
 8001bf2:	1b91      	subs	r1, r2, r6
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x23c>
 8001bfa:	e15e      	b.n	8001eba <__aeabi_dsub+0x4fa>
 8001bfc:	494a      	ldr	r1, [pc, #296]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bfe:	428a      	cmp	r2, r1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x244>
 8001c02:	e1be      	b.n	8001f82 <__aeabi_dsub+0x5c2>
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	464c      	mov	r4, r9
 8001c08:	0409      	lsls	r1, r1, #16
 8001c0a:	430c      	orrs	r4, r1
 8001c0c:	46a1      	mov	r9, r4
 8001c0e:	4661      	mov	r1, ip
 8001c10:	2938      	cmp	r1, #56	; 0x38
 8001c12:	dd00      	ble.n	8001c16 <__aeabi_dsub+0x256>
 8001c14:	e1ba      	b.n	8001f8c <__aeabi_dsub+0x5cc>
 8001c16:	291f      	cmp	r1, #31
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dsub+0x25c>
 8001c1a:	e227      	b.n	800206c <__aeabi_dsub+0x6ac>
 8001c1c:	2420      	movs	r4, #32
 8001c1e:	1a64      	subs	r4, r4, r1
 8001c20:	4649      	mov	r1, r9
 8001c22:	40a1      	lsls	r1, r4
 8001c24:	001e      	movs	r6, r3
 8001c26:	4688      	mov	r8, r1
 8001c28:	4661      	mov	r1, ip
 8001c2a:	40a3      	lsls	r3, r4
 8001c2c:	40ce      	lsrs	r6, r1
 8001c2e:	4641      	mov	r1, r8
 8001c30:	1e5c      	subs	r4, r3, #1
 8001c32:	41a3      	sbcs	r3, r4
 8001c34:	4331      	orrs	r1, r6
 8001c36:	4319      	orrs	r1, r3
 8001c38:	000c      	movs	r4, r1
 8001c3a:	4663      	mov	r3, ip
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	40d9      	lsrs	r1, r3
 8001c40:	187f      	adds	r7, r7, r1
 8001c42:	1824      	adds	r4, r4, r0
 8001c44:	4284      	cmp	r4, r0
 8001c46:	419b      	sbcs	r3, r3
 8001c48:	425b      	negs	r3, r3
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	0016      	movs	r6, r2
 8001c4e:	44ba      	add	sl, r7
 8001c50:	e05d      	b.n	8001d0e <__aeabi_dsub+0x34e>
 8001c52:	4c38      	ldr	r4, [pc, #224]	; (8001d34 <__aeabi_dsub+0x374>)
 8001c54:	1c72      	adds	r2, r6, #1
 8001c56:	4222      	tst	r2, r4
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dsub+0x29c>
 8001c5a:	e0df      	b.n	8001e1c <__aeabi_dsub+0x45c>
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	2e00      	cmp	r6, #0
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x2a6>
 8001c64:	e15c      	b.n	8001f20 <__aeabi_dsub+0x560>
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x2ac>
 8001c6a:	e1cf      	b.n	800200c <__aeabi_dsub+0x64c>
 8001c6c:	003a      	movs	r2, r7
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x2b4>
 8001c72:	e17f      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001c74:	1a1c      	subs	r4, r3, r0
 8001c76:	464a      	mov	r2, r9
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	4189      	sbcs	r1, r1
 8001c7c:	1bd2      	subs	r2, r2, r7
 8001c7e:	4249      	negs	r1, r1
 8001c80:	1a52      	subs	r2, r2, r1
 8001c82:	4692      	mov	sl, r2
 8001c84:	0212      	lsls	r2, r2, #8
 8001c86:	d400      	bmi.n	8001c8a <__aeabi_dsub+0x2ca>
 8001c88:	e20a      	b.n	80020a0 <__aeabi_dsub+0x6e0>
 8001c8a:	1ac4      	subs	r4, r0, r3
 8001c8c:	42a0      	cmp	r0, r4
 8001c8e:	4180      	sbcs	r0, r0
 8001c90:	464b      	mov	r3, r9
 8001c92:	4240      	negs	r0, r0
 8001c94:	1aff      	subs	r7, r7, r3
 8001c96:	1a3b      	subs	r3, r7, r0
 8001c98:	469a      	mov	sl, r3
 8001c9a:	465d      	mov	r5, fp
 8001c9c:	e71a      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001c9e:	003a      	movs	r2, r7
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d073      	beq.n	8001d8c <__aeabi_dsub+0x3cc>
 8001ca4:	0022      	movs	r2, r4
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	2c01      	cmp	r4, #1
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x2ee>
 8001cac:	e0cb      	b.n	8001e46 <__aeabi_dsub+0x486>
 8001cae:	4554      	cmp	r4, sl
 8001cb0:	d042      	beq.n	8001d38 <__aeabi_dsub+0x378>
 8001cb2:	4694      	mov	ip, r2
 8001cb4:	e748      	b.n	8001b48 <__aeabi_dsub+0x188>
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	3b1f      	subs	r3, #31
 8001cba:	40d8      	lsrs	r0, r3
 8001cbc:	2920      	cmp	r1, #32
 8001cbe:	d003      	beq.n	8001cc8 <__aeabi_dsub+0x308>
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	4314      	orrs	r4, r2
 8001cc8:	1e63      	subs	r3, r4, #1
 8001cca:	419c      	sbcs	r4, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2600      	movs	r6, #0
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	4304      	orrs	r4, r0
 8001cd4:	0763      	lsls	r3, r4, #29
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x31a>
 8001cd8:	e6fe      	b.n	8001ad8 <__aeabi_dsub+0x118>
 8001cda:	4652      	mov	r2, sl
 8001cdc:	08e3      	lsrs	r3, r4, #3
 8001cde:	0752      	lsls	r2, r2, #29
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	4652      	mov	r2, sl
 8001ce4:	46b4      	mov	ip, r6
 8001ce6:	08d2      	lsrs	r2, r2, #3
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <__aeabi_dsub+0x368>)
 8001cea:	458c      	cmp	ip, r1
 8001cec:	d02a      	beq.n	8001d44 <__aeabi_dsub+0x384>
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	0b14      	lsrs	r4, r2, #12
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	0552      	lsls	r2, r2, #21
 8001cf6:	0d52      	lsrs	r2, r2, #21
 8001cf8:	e70c      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001cfa:	003c      	movs	r4, r7
 8001cfc:	4304      	orrs	r4, r0
 8001cfe:	1e62      	subs	r2, r4, #1
 8001d00:	4194      	sbcs	r4, r2
 8001d02:	18e4      	adds	r4, r4, r3
 8001d04:	429c      	cmp	r4, r3
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	444a      	add	r2, r9
 8001d0c:	4692      	mov	sl, r2
 8001d0e:	4653      	mov	r3, sl
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	d5df      	bpl.n	8001cd4 <__aeabi_dsub+0x314>
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__aeabi_dsub+0x368>)
 8001d16:	3601      	adds	r6, #1
 8001d18:	429e      	cmp	r6, r3
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x35e>
 8001d1c:	e0a0      	b.n	8001e60 <__aeabi_dsub+0x4a0>
 8001d1e:	0032      	movs	r2, r6
 8001d20:	2400      	movs	r4, #0
 8001d22:	2300      	movs	r3, #0
 8001d24:	e6f6      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	464a      	mov	r2, r9
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	0019      	movs	r1, r3
 8001d46:	4311      	orrs	r1, r2
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x38c>
 8001d4a:	e1b5      	b.n	80020b8 <__aeabi_dsub+0x6f8>
 8001d4c:	2480      	movs	r4, #128	; 0x80
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4ad5      	ldr	r2, [pc, #852]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e6dc      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 fae2 	bl	8002324 <__clzsi2>
 8001d60:	0003      	movs	r3, r0
 8001d62:	3318      	adds	r3, #24
 8001d64:	2b1f      	cmp	r3, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x3aa>
 8001d68:	e695      	b.n	8001a96 <__aeabi_dsub+0xd6>
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	3808      	subs	r0, #8
 8001d6e:	4082      	lsls	r2, r0
 8001d70:	2400      	movs	r4, #0
 8001d72:	429e      	cmp	r6, r3
 8001d74:	dc00      	bgt.n	8001d78 <__aeabi_dsub+0x3b8>
 8001d76:	e69a      	b.n	8001aae <__aeabi_dsub+0xee>
 8001d78:	1af6      	subs	r6, r6, r3
 8001d7a:	4bcd      	ldr	r3, [pc, #820]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	4692      	mov	sl, r2
 8001d80:	e6a8      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001d82:	003c      	movs	r4, r7
 8001d84:	4304      	orrs	r4, r0
 8001d86:	1e62      	subs	r2, r4, #1
 8001d88:	4194      	sbcs	r4, r2
 8001d8a:	e66c      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0752      	lsls	r2, r2, #29
 8001d92:	4313      	orrs	r3, r2
 8001d94:	464a      	mov	r2, r9
 8001d96:	08d2      	lsrs	r2, r2, #3
 8001d98:	e7a6      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001d9a:	4cc6      	ldr	r4, [pc, #792]	; (80020b4 <__aeabi_dsub+0x6f4>)
 8001d9c:	1c72      	adds	r2, r6, #1
 8001d9e:	4222      	tst	r2, r4
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dsub+0x3e4>
 8001da2:	e0ac      	b.n	8001efe <__aeabi_dsub+0x53e>
 8001da4:	464a      	mov	r2, r9
 8001da6:	431a      	orrs	r2, r3
 8001da8:	2e00      	cmp	r6, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x3ee>
 8001dac:	e105      	b.n	8001fba <__aeabi_dsub+0x5fa>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x3f4>
 8001db2:	e156      	b.n	8002062 <__aeabi_dsub+0x6a2>
 8001db4:	003a      	movs	r2, r7
 8001db6:	4302      	orrs	r2, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x3fc>
 8001dba:	e0db      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001dbc:	181c      	adds	r4, r3, r0
 8001dbe:	429c      	cmp	r4, r3
 8001dc0:	419b      	sbcs	r3, r3
 8001dc2:	444f      	add	r7, r9
 8001dc4:	46ba      	mov	sl, r7
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	449a      	add	sl, r3
 8001dca:	4653      	mov	r3, sl
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	d400      	bmi.n	8001dd2 <__aeabi_dsub+0x412>
 8001dd0:	e780      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	4bb6      	ldr	r3, [pc, #728]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001dd6:	2601      	movs	r6, #1
 8001dd8:	401a      	ands	r2, r3
 8001dda:	4692      	mov	sl, r2
 8001ddc:	e77a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dde:	4cb3      	ldr	r4, [pc, #716]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001de0:	42a2      	cmp	r2, r4
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x426>
 8001de4:	e0c0      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001de6:	2480      	movs	r4, #128	; 0x80
 8001de8:	464d      	mov	r5, r9
 8001dea:	0424      	lsls	r4, r4, #16
 8001dec:	4325      	orrs	r5, r4
 8001dee:	46a9      	mov	r9, r5
 8001df0:	4664      	mov	r4, ip
 8001df2:	2c38      	cmp	r4, #56	; 0x38
 8001df4:	dc53      	bgt.n	8001e9e <__aeabi_dsub+0x4de>
 8001df6:	4661      	mov	r1, ip
 8001df8:	2c1f      	cmp	r4, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0x43e>
 8001dfc:	e0cd      	b.n	8001f9a <__aeabi_dsub+0x5da>
 8001dfe:	2520      	movs	r5, #32
 8001e00:	001e      	movs	r6, r3
 8001e02:	1b2d      	subs	r5, r5, r4
 8001e04:	464c      	mov	r4, r9
 8001e06:	40ab      	lsls	r3, r5
 8001e08:	40ac      	lsls	r4, r5
 8001e0a:	40ce      	lsrs	r6, r1
 8001e0c:	1e5d      	subs	r5, r3, #1
 8001e0e:	41ab      	sbcs	r3, r5
 8001e10:	4334      	orrs	r4, r6
 8001e12:	4323      	orrs	r3, r4
 8001e14:	464c      	mov	r4, r9
 8001e16:	40cc      	lsrs	r4, r1
 8001e18:	1b3f      	subs	r7, r7, r4
 8001e1a:	e045      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001e1c:	464a      	mov	r2, r9
 8001e1e:	1a1c      	subs	r4, r3, r0
 8001e20:	1bd1      	subs	r1, r2, r7
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	4192      	sbcs	r2, r2
 8001e26:	4252      	negs	r2, r2
 8001e28:	4692      	mov	sl, r2
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	1a52      	subs	r2, r2, r1
 8001e30:	4692      	mov	sl, r2
 8001e32:	0212      	lsls	r2, r2, #8
 8001e34:	d500      	bpl.n	8001e38 <__aeabi_dsub+0x478>
 8001e36:	e083      	b.n	8001f40 <__aeabi_dsub+0x580>
 8001e38:	4653      	mov	r3, sl
 8001e3a:	4323      	orrs	r3, r4
 8001e3c:	d000      	beq.n	8001e40 <__aeabi_dsub+0x480>
 8001e3e:	e621      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001e40:	2200      	movs	r2, #0
 8001e42:	2500      	movs	r5, #0
 8001e44:	e753      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001e46:	181c      	adds	r4, r3, r0
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	419b      	sbcs	r3, r3
 8001e4c:	444f      	add	r7, r9
 8001e4e:	46ba      	mov	sl, r7
 8001e50:	425b      	negs	r3, r3
 8001e52:	449a      	add	sl, r3
 8001e54:	4653      	mov	r3, sl
 8001e56:	2601      	movs	r6, #1
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x49e>
 8001e5c:	e73a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001e5e:	2602      	movs	r6, #2
 8001e60:	4652      	mov	r2, sl
 8001e62:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	401a      	ands	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	4021      	ands	r1, r4
 8001e6c:	0862      	lsrs	r2, r4, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	07dc      	lsls	r4, r3, #31
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	469a      	mov	sl, r3
 8001e76:	4314      	orrs	r4, r2
 8001e78:	e62c      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001e7a:	0039      	movs	r1, r7
 8001e7c:	3a20      	subs	r2, #32
 8001e7e:	40d1      	lsrs	r1, r2
 8001e80:	4662      	mov	r2, ip
 8001e82:	2a20      	cmp	r2, #32
 8001e84:	d006      	beq.n	8001e94 <__aeabi_dsub+0x4d4>
 8001e86:	4664      	mov	r4, ip
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	1b12      	subs	r2, r2, r4
 8001e8c:	003c      	movs	r4, r7
 8001e8e:	4094      	lsls	r4, r2
 8001e90:	4304      	orrs	r4, r0
 8001e92:	9401      	str	r4, [sp, #4]
 8001e94:	9c01      	ldr	r4, [sp, #4]
 8001e96:	1e62      	subs	r2, r4, #1
 8001e98:	4194      	sbcs	r4, r2
 8001e9a:	430c      	orrs	r4, r1
 8001e9c:	e5e3      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	4319      	orrs	r1, r3
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	1e5c      	subs	r4, r3, #1
 8001ea6:	41a3      	sbcs	r3, r4
 8001ea8:	1ac4      	subs	r4, r0, r3
 8001eaa:	42a0      	cmp	r0, r4
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	425b      	negs	r3, r3
 8001eb0:	1afb      	subs	r3, r7, r3
 8001eb2:	469a      	mov	sl, r3
 8001eb4:	465d      	mov	r5, fp
 8001eb6:	0016      	movs	r6, r2
 8001eb8:	e5dc      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001eba:	4649      	mov	r1, r9
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x502>
 8001ec0:	e0ae      	b.n	8002020 <__aeabi_dsub+0x660>
 8001ec2:	4661      	mov	r1, ip
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	3901      	subs	r1, #1
 8001ec8:	2c01      	cmp	r4, #1
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x50e>
 8001ecc:	e0e0      	b.n	8002090 <__aeabi_dsub+0x6d0>
 8001ece:	4c77      	ldr	r4, [pc, #476]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001ed0:	45a4      	cmp	ip, r4
 8001ed2:	d056      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001ed4:	468c      	mov	ip, r1
 8001ed6:	e69a      	b.n	8001c0e <__aeabi_dsub+0x24e>
 8001ed8:	4661      	mov	r1, ip
 8001eda:	2220      	movs	r2, #32
 8001edc:	003c      	movs	r4, r7
 8001ede:	1a52      	subs	r2, r2, r1
 8001ee0:	4094      	lsls	r4, r2
 8001ee2:	0001      	movs	r1, r0
 8001ee4:	4090      	lsls	r0, r2
 8001ee6:	46a0      	mov	r8, r4
 8001ee8:	4664      	mov	r4, ip
 8001eea:	1e42      	subs	r2, r0, #1
 8001eec:	4190      	sbcs	r0, r2
 8001eee:	4662      	mov	r2, ip
 8001ef0:	40e1      	lsrs	r1, r4
 8001ef2:	4644      	mov	r4, r8
 8001ef4:	40d7      	lsrs	r7, r2
 8001ef6:	430c      	orrs	r4, r1
 8001ef8:	4304      	orrs	r4, r0
 8001efa:	44b9      	add	r9, r7
 8001efc:	e701      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001efe:	496b      	ldr	r1, [pc, #428]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x546>
 8001f04:	e70c      	b.n	8001d20 <__aeabi_dsub+0x360>
 8001f06:	1818      	adds	r0, r3, r0
 8001f08:	4298      	cmp	r0, r3
 8001f0a:	419b      	sbcs	r3, r3
 8001f0c:	444f      	add	r7, r9
 8001f0e:	425b      	negs	r3, r3
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	07dc      	lsls	r4, r3, #31
 8001f14:	0840      	lsrs	r0, r0, #1
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	469a      	mov	sl, r3
 8001f1a:	0016      	movs	r6, r2
 8001f1c:	4304      	orrs	r4, r0
 8001f1e:	e6d9      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x566>
 8001f24:	e081      	b.n	800202a <__aeabi_dsub+0x66a>
 8001f26:	003b      	movs	r3, r7
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	d11d      	bne.n	8001f68 <__aeabi_dsub+0x5a8>
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	2500      	movs	r5, #0
 8001f30:	0312      	lsls	r2, r2, #12
 8001f32:	e70b      	b.n	8001d4c <__aeabi_dsub+0x38c>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e6d3      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001f40:	1ac4      	subs	r4, r0, r3
 8001f42:	42a0      	cmp	r0, r4
 8001f44:	4180      	sbcs	r0, r0
 8001f46:	464b      	mov	r3, r9
 8001f48:	4240      	negs	r0, r0
 8001f4a:	1aff      	subs	r7, r7, r3
 8001f4c:	1a3b      	subs	r3, r7, r0
 8001f4e:	469a      	mov	sl, r3
 8001f50:	465d      	mov	r5, fp
 8001f52:	e597      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001f54:	1a1c      	subs	r4, r3, r0
 8001f56:	464a      	mov	r2, r9
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	419b      	sbcs	r3, r3
 8001f5c:	1bd7      	subs	r7, r2, r7
 8001f5e:	425b      	negs	r3, r3
 8001f60:	1afb      	subs	r3, r7, r3
 8001f62:	469a      	mov	sl, r3
 8001f64:	2601      	movs	r6, #1
 8001f66:	e585      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001f68:	08c0      	lsrs	r0, r0, #3
 8001f6a:	077b      	lsls	r3, r7, #29
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	08fa      	lsrs	r2, r7, #3
 8001f72:	e6e7      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f74:	464a      	mov	r2, r9
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	464a      	mov	r2, r9
 8001f7e:	08d2      	lsrs	r2, r2, #3
 8001f80:	e6b5      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e6db      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	4319      	orrs	r1, r3
 8001f90:	000b      	movs	r3, r1
 8001f92:	1e59      	subs	r1, r3, #1
 8001f94:	418b      	sbcs	r3, r1
 8001f96:	001c      	movs	r4, r3
 8001f98:	e653      	b.n	8001c42 <__aeabi_dsub+0x282>
 8001f9a:	464d      	mov	r5, r9
 8001f9c:	3c20      	subs	r4, #32
 8001f9e:	40e5      	lsrs	r5, r4
 8001fa0:	2920      	cmp	r1, #32
 8001fa2:	d005      	beq.n	8001fb0 <__aeabi_dsub+0x5f0>
 8001fa4:	2440      	movs	r4, #64	; 0x40
 8001fa6:	1a64      	subs	r4, r4, r1
 8001fa8:	4649      	mov	r1, r9
 8001faa:	40a1      	lsls	r1, r4
 8001fac:	430b      	orrs	r3, r1
 8001fae:	4698      	mov	r8, r3
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	1e5c      	subs	r4, r3, #1
 8001fb4:	41a3      	sbcs	r3, r4
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	e776      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d0e1      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	4302      	orrs	r2, r0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x608>
 8001fc6:	e6b8      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	0752      	lsls	r2, r2, #29
 8001fcc:	2480      	movs	r4, #128	; 0x80
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0324      	lsls	r4, r4, #12
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	4222      	tst	r2, r4
 8001fd8:	d007      	beq.n	8001fea <__aeabi_dsub+0x62a>
 8001fda:	08fe      	lsrs	r6, r7, #3
 8001fdc:	4226      	tst	r6, r4
 8001fde:	d104      	bne.n	8001fea <__aeabi_dsub+0x62a>
 8001fe0:	465d      	mov	r5, fp
 8001fe2:	0032      	movs	r2, r6
 8001fe4:	08c3      	lsrs	r3, r0, #3
 8001fe6:	077f      	lsls	r7, r7, #29
 8001fe8:	433b      	orrs	r3, r7
 8001fea:	0f59      	lsrs	r1, r3, #29
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	0749      	lsls	r1, r1, #29
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	e6a6      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001ff6:	1ac4      	subs	r4, r0, r3
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	4180      	sbcs	r0, r0
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	4240      	negs	r0, r0
 8002000:	1aff      	subs	r7, r7, r3
 8002002:	1a3b      	subs	r3, r7, r0
 8002004:	469a      	mov	sl, r3
 8002006:	465d      	mov	r5, fp
 8002008:	2601      	movs	r6, #1
 800200a:	e533      	b.n	8001a74 <__aeabi_dsub+0xb4>
 800200c:	003b      	movs	r3, r7
 800200e:	4303      	orrs	r3, r0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x654>
 8002012:	e715      	b.n	8001e40 <__aeabi_dsub+0x480>
 8002014:	08c0      	lsrs	r0, r0, #3
 8002016:	077b      	lsls	r3, r7, #29
 8002018:	465d      	mov	r5, fp
 800201a:	4303      	orrs	r3, r0
 800201c:	08fa      	lsrs	r2, r7, #3
 800201e:	e666      	b.n	8001cee <__aeabi_dsub+0x32e>
 8002020:	08c0      	lsrs	r0, r0, #3
 8002022:	077b      	lsls	r3, r7, #29
 8002024:	4303      	orrs	r3, r0
 8002026:	08fa      	lsrs	r2, r7, #3
 8002028:	e65e      	b.n	8001ce8 <__aeabi_dsub+0x328>
 800202a:	003a      	movs	r2, r7
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	4302      	orrs	r2, r0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x674>
 8002032:	e682      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8002034:	464a      	mov	r2, r9
 8002036:	0752      	lsls	r2, r2, #29
 8002038:	2480      	movs	r4, #128	; 0x80
 800203a:	4313      	orrs	r3, r2
 800203c:	464a      	mov	r2, r9
 800203e:	0324      	lsls	r4, r4, #12
 8002040:	08d2      	lsrs	r2, r2, #3
 8002042:	4222      	tst	r2, r4
 8002044:	d007      	beq.n	8002056 <__aeabi_dsub+0x696>
 8002046:	08fe      	lsrs	r6, r7, #3
 8002048:	4226      	tst	r6, r4
 800204a:	d104      	bne.n	8002056 <__aeabi_dsub+0x696>
 800204c:	465d      	mov	r5, fp
 800204e:	0032      	movs	r2, r6
 8002050:	08c3      	lsrs	r3, r0, #3
 8002052:	077f      	lsls	r7, r7, #29
 8002054:	433b      	orrs	r3, r7
 8002056:	0f59      	lsrs	r1, r3, #29
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	430b      	orrs	r3, r1
 8002060:	e670      	b.n	8001d44 <__aeabi_dsub+0x384>
 8002062:	08c0      	lsrs	r0, r0, #3
 8002064:	077b      	lsls	r3, r7, #29
 8002066:	4303      	orrs	r3, r0
 8002068:	08fa      	lsrs	r2, r7, #3
 800206a:	e640      	b.n	8001cee <__aeabi_dsub+0x32e>
 800206c:	464c      	mov	r4, r9
 800206e:	3920      	subs	r1, #32
 8002070:	40cc      	lsrs	r4, r1
 8002072:	4661      	mov	r1, ip
 8002074:	2920      	cmp	r1, #32
 8002076:	d006      	beq.n	8002086 <__aeabi_dsub+0x6c6>
 8002078:	4666      	mov	r6, ip
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	1b89      	subs	r1, r1, r6
 800207e:	464e      	mov	r6, r9
 8002080:	408e      	lsls	r6, r1
 8002082:	4333      	orrs	r3, r6
 8002084:	4698      	mov	r8, r3
 8002086:	4643      	mov	r3, r8
 8002088:	1e59      	subs	r1, r3, #1
 800208a:	418b      	sbcs	r3, r1
 800208c:	431c      	orrs	r4, r3
 800208e:	e5d8      	b.n	8001c42 <__aeabi_dsub+0x282>
 8002090:	181c      	adds	r4, r3, r0
 8002092:	4284      	cmp	r4, r0
 8002094:	4180      	sbcs	r0, r0
 8002096:	444f      	add	r7, r9
 8002098:	46ba      	mov	sl, r7
 800209a:	4240      	negs	r0, r0
 800209c:	4482      	add	sl, r0
 800209e:	e6d9      	b.n	8001e54 <__aeabi_dsub+0x494>
 80020a0:	4653      	mov	r3, sl
 80020a2:	4323      	orrs	r3, r4
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x6e8>
 80020a6:	e6cb      	b.n	8001e40 <__aeabi_dsub+0x480>
 80020a8:	e614      	b.n	8001cd4 <__aeabi_dsub+0x314>
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	ff7fffff 	.word	0xff7fffff
 80020b4:	000007fe 	.word	0x000007fe
 80020b8:	2300      	movs	r3, #0
 80020ba:	4a01      	ldr	r2, [pc, #4]	; (80020c0 <__aeabi_dsub+0x700>)
 80020bc:	001c      	movs	r4, r3
 80020be:	e529      	b.n	8001b14 <__aeabi_dsub+0x154>
 80020c0:	000007ff 	.word	0x000007ff

080020c4 <__aeabi_dcmpun>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	0005      	movs	r5, r0
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020ca:	031c      	lsls	r4, r3, #12
 80020cc:	0016      	movs	r6, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	030a      	lsls	r2, r1, #12
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	0b12      	lsrs	r2, r2, #12
 80020d6:	0d49      	lsrs	r1, r1, #21
 80020d8:	0b24      	lsrs	r4, r4, #12
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	4281      	cmp	r1, r0
 80020de:	d008      	beq.n	80020f2 <__aeabi_dcmpun+0x2e>
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020e2:	2000      	movs	r0, #0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d103      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020e8:	0020      	movs	r0, r4
 80020ea:	4330      	orrs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	2001      	movs	r0, #1
 80020f4:	432a      	orrs	r2, r5
 80020f6:	d1fb      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020f8:	e7f2      	b.n	80020e0 <__aeabi_dcmpun+0x1c>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_d2iz>:
 8002100:	000a      	movs	r2, r1
 8002102:	b530      	push	{r4, r5, lr}
 8002104:	4c13      	ldr	r4, [pc, #76]	; (8002154 <__aeabi_d2iz+0x54>)
 8002106:	0053      	lsls	r3, r2, #1
 8002108:	0309      	lsls	r1, r1, #12
 800210a:	0005      	movs	r5, r0
 800210c:	0b09      	lsrs	r1, r1, #12
 800210e:	2000      	movs	r0, #0
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	0fd2      	lsrs	r2, r2, #31
 8002114:	42a3      	cmp	r3, r4
 8002116:	dd04      	ble.n	8002122 <__aeabi_d2iz+0x22>
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <__aeabi_d2iz+0x58>)
 800211a:	4283      	cmp	r3, r0
 800211c:	dd02      	ble.n	8002124 <__aeabi_d2iz+0x24>
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <__aeabi_d2iz+0x5c>)
 8002120:	18d0      	adds	r0, r2, r3
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	0340      	lsls	r0, r0, #13
 8002128:	4301      	orrs	r1, r0
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <__aeabi_d2iz+0x60>)
 800212c:	1ac0      	subs	r0, r0, r3
 800212e:	281f      	cmp	r0, #31
 8002130:	dd08      	ble.n	8002144 <__aeabi_d2iz+0x44>
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <__aeabi_d2iz+0x64>)
 8002134:	1ac3      	subs	r3, r0, r3
 8002136:	40d9      	lsrs	r1, r3
 8002138:	000b      	movs	r3, r1
 800213a:	4258      	negs	r0, r3
 800213c:	2a00      	cmp	r2, #0
 800213e:	d1f0      	bne.n	8002122 <__aeabi_d2iz+0x22>
 8002140:	0018      	movs	r0, r3
 8002142:	e7ee      	b.n	8002122 <__aeabi_d2iz+0x22>
 8002144:	4c08      	ldr	r4, [pc, #32]	; (8002168 <__aeabi_d2iz+0x68>)
 8002146:	40c5      	lsrs	r5, r0
 8002148:	46a4      	mov	ip, r4
 800214a:	4463      	add	r3, ip
 800214c:	4099      	lsls	r1, r3
 800214e:	000b      	movs	r3, r1
 8002150:	432b      	orrs	r3, r5
 8002152:	e7f2      	b.n	800213a <__aeabi_d2iz+0x3a>
 8002154:	000003fe 	.word	0x000003fe
 8002158:	0000041d 	.word	0x0000041d
 800215c:	7fffffff 	.word	0x7fffffff
 8002160:	00000433 	.word	0x00000433
 8002164:	00000413 	.word	0x00000413
 8002168:	fffffbed 	.word	0xfffffbed

0800216c <__aeabi_i2d>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2800      	cmp	r0, #0
 8002170:	d016      	beq.n	80021a0 <__aeabi_i2d+0x34>
 8002172:	17c3      	asrs	r3, r0, #31
 8002174:	18c5      	adds	r5, r0, r3
 8002176:	405d      	eors	r5, r3
 8002178:	0fc4      	lsrs	r4, r0, #31
 800217a:	0028      	movs	r0, r5
 800217c:	f000 f8d2 	bl	8002324 <__clzsi2>
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <__aeabi_i2d+0x5c>)
 8002182:	1a1b      	subs	r3, r3, r0
 8002184:	280a      	cmp	r0, #10
 8002186:	dc16      	bgt.n	80021b6 <__aeabi_i2d+0x4a>
 8002188:	0002      	movs	r2, r0
 800218a:	002e      	movs	r6, r5
 800218c:	3215      	adds	r2, #21
 800218e:	4096      	lsls	r6, r2
 8002190:	220b      	movs	r2, #11
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	40d5      	lsrs	r5, r2
 8002196:	055b      	lsls	r3, r3, #21
 8002198:	032d      	lsls	r5, r5, #12
 800219a:	0b2d      	lsrs	r5, r5, #12
 800219c:	0d5b      	lsrs	r3, r3, #21
 800219e:	e003      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021a0:	2400      	movs	r4, #0
 80021a2:	2300      	movs	r3, #0
 80021a4:	2500      	movs	r5, #0
 80021a6:	2600      	movs	r6, #0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	432b      	orrs	r3, r5
 80021ac:	07e4      	lsls	r4, r4, #31
 80021ae:	4323      	orrs	r3, r4
 80021b0:	0030      	movs	r0, r6
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
 80021b6:	380b      	subs	r0, #11
 80021b8:	4085      	lsls	r5, r0
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	032d      	lsls	r5, r5, #12
 80021be:	2600      	movs	r6, #0
 80021c0:	0b2d      	lsrs	r5, r5, #12
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	e7f0      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_ui2d>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	1e04      	subs	r4, r0, #0
 80021d0:	d010      	beq.n	80021f4 <__aeabi_ui2d+0x28>
 80021d2:	f000 f8a7 	bl	8002324 <__clzsi2>
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <__aeabi_ui2d+0x48>)
 80021d8:	1a1b      	subs	r3, r3, r0
 80021da:	280a      	cmp	r0, #10
 80021dc:	dc11      	bgt.n	8002202 <__aeabi_ui2d+0x36>
 80021de:	220b      	movs	r2, #11
 80021e0:	0021      	movs	r1, r4
 80021e2:	1a12      	subs	r2, r2, r0
 80021e4:	40d1      	lsrs	r1, r2
 80021e6:	3015      	adds	r0, #21
 80021e8:	030a      	lsls	r2, r1, #12
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4084      	lsls	r4, r0
 80021ee:	0b12      	lsrs	r2, r2, #12
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	e001      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	4313      	orrs	r3, r2
 80021fc:	0020      	movs	r0, r4
 80021fe:	0019      	movs	r1, r3
 8002200:	bd10      	pop	{r4, pc}
 8002202:	0022      	movs	r2, r4
 8002204:	380b      	subs	r0, #11
 8002206:	4082      	lsls	r2, r0
 8002208:	055b      	lsls	r3, r3, #21
 800220a:	0312      	lsls	r2, r2, #12
 800220c:	2400      	movs	r4, #0
 800220e:	0b12      	lsrs	r2, r2, #12
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	e7f1      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 8002214:	0000041e 	.word	0x0000041e

08002218 <__aeabi_d2f>:
 8002218:	0002      	movs	r2, r0
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	004b      	lsls	r3, r1, #1
 800221e:	030d      	lsls	r5, r1, #12
 8002220:	0f40      	lsrs	r0, r0, #29
 8002222:	0d5b      	lsrs	r3, r3, #21
 8002224:	0fcc      	lsrs	r4, r1, #31
 8002226:	0a6d      	lsrs	r5, r5, #9
 8002228:	493a      	ldr	r1, [pc, #232]	; (8002314 <__aeabi_d2f+0xfc>)
 800222a:	4305      	orrs	r5, r0
 800222c:	1c58      	adds	r0, r3, #1
 800222e:	00d7      	lsls	r7, r2, #3
 8002230:	4208      	tst	r0, r1
 8002232:	d00a      	beq.n	800224a <__aeabi_d2f+0x32>
 8002234:	4938      	ldr	r1, [pc, #224]	; (8002318 <__aeabi_d2f+0x100>)
 8002236:	1859      	adds	r1, r3, r1
 8002238:	29fe      	cmp	r1, #254	; 0xfe
 800223a:	dd16      	ble.n	800226a <__aeabi_d2f+0x52>
 800223c:	20ff      	movs	r0, #255	; 0xff
 800223e:	2200      	movs	r2, #0
 8002240:	05c0      	lsls	r0, r0, #23
 8002242:	4310      	orrs	r0, r2
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4320      	orrs	r0, r4
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <__aeabi_d2f+0x44>
 800224e:	433d      	orrs	r5, r7
 8002250:	d026      	beq.n	80022a0 <__aeabi_d2f+0x88>
 8002252:	2205      	movs	r2, #5
 8002254:	0192      	lsls	r2, r2, #6
 8002256:	0a52      	lsrs	r2, r2, #9
 8002258:	b2d8      	uxtb	r0, r3
 800225a:	e7f1      	b.n	8002240 <__aeabi_d2f+0x28>
 800225c:	432f      	orrs	r7, r5
 800225e:	d0ed      	beq.n	800223c <__aeabi_d2f+0x24>
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	03d2      	lsls	r2, r2, #15
 8002264:	20ff      	movs	r0, #255	; 0xff
 8002266:	432a      	orrs	r2, r5
 8002268:	e7ea      	b.n	8002240 <__aeabi_d2f+0x28>
 800226a:	2900      	cmp	r1, #0
 800226c:	dd1b      	ble.n	80022a6 <__aeabi_d2f+0x8e>
 800226e:	0192      	lsls	r2, r2, #6
 8002270:	1e50      	subs	r0, r2, #1
 8002272:	4182      	sbcs	r2, r0
 8002274:	00ed      	lsls	r5, r5, #3
 8002276:	0f7f      	lsrs	r7, r7, #29
 8002278:	432a      	orrs	r2, r5
 800227a:	433a      	orrs	r2, r7
 800227c:	0753      	lsls	r3, r2, #29
 800227e:	d047      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002280:	230f      	movs	r3, #15
 8002282:	4013      	ands	r3, r2
 8002284:	2b04      	cmp	r3, #4
 8002286:	d000      	beq.n	800228a <__aeabi_d2f+0x72>
 8002288:	3204      	adds	r2, #4
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	04db      	lsls	r3, r3, #19
 800228e:	4013      	ands	r3, r2
 8002290:	d03e      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002292:	1c48      	adds	r0, r1, #1
 8002294:	29fe      	cmp	r1, #254	; 0xfe
 8002296:	d0d1      	beq.n	800223c <__aeabi_d2f+0x24>
 8002298:	0192      	lsls	r2, r2, #6
 800229a:	0a52      	lsrs	r2, r2, #9
 800229c:	b2c0      	uxtb	r0, r0
 800229e:	e7cf      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a0:	2000      	movs	r0, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	e7cc      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a6:	000a      	movs	r2, r1
 80022a8:	3217      	adds	r2, #23
 80022aa:	db2f      	blt.n	800230c <__aeabi_d2f+0xf4>
 80022ac:	2680      	movs	r6, #128	; 0x80
 80022ae:	0436      	lsls	r6, r6, #16
 80022b0:	432e      	orrs	r6, r5
 80022b2:	251e      	movs	r5, #30
 80022b4:	1a6d      	subs	r5, r5, r1
 80022b6:	2d1f      	cmp	r5, #31
 80022b8:	dd11      	ble.n	80022de <__aeabi_d2f+0xc6>
 80022ba:	2202      	movs	r2, #2
 80022bc:	4252      	negs	r2, r2
 80022be:	1a52      	subs	r2, r2, r1
 80022c0:	0031      	movs	r1, r6
 80022c2:	40d1      	lsrs	r1, r2
 80022c4:	2d20      	cmp	r5, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_d2f+0xba>
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <__aeabi_d2f+0x104>)
 80022ca:	4694      	mov	ip, r2
 80022cc:	4463      	add	r3, ip
 80022ce:	409e      	lsls	r6, r3
 80022d0:	4337      	orrs	r7, r6
 80022d2:	003a      	movs	r2, r7
 80022d4:	1e53      	subs	r3, r2, #1
 80022d6:	419a      	sbcs	r2, r3
 80022d8:	430a      	orrs	r2, r1
 80022da:	2100      	movs	r1, #0
 80022dc:	e7ce      	b.n	800227c <__aeabi_d2f+0x64>
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <__aeabi_d2f+0x108>)
 80022e0:	0038      	movs	r0, r7
 80022e2:	4694      	mov	ip, r2
 80022e4:	4463      	add	r3, ip
 80022e6:	4098      	lsls	r0, r3
 80022e8:	003a      	movs	r2, r7
 80022ea:	1e41      	subs	r1, r0, #1
 80022ec:	4188      	sbcs	r0, r1
 80022ee:	409e      	lsls	r6, r3
 80022f0:	40ea      	lsrs	r2, r5
 80022f2:	4330      	orrs	r0, r6
 80022f4:	4302      	orrs	r2, r0
 80022f6:	2100      	movs	r1, #0
 80022f8:	0753      	lsls	r3, r2, #29
 80022fa:	d1c1      	bne.n	8002280 <__aeabi_d2f+0x68>
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0013      	movs	r3, r2
 8002300:	04c9      	lsls	r1, r1, #19
 8002302:	2001      	movs	r0, #1
 8002304:	400b      	ands	r3, r1
 8002306:	420a      	tst	r2, r1
 8002308:	d1c6      	bne.n	8002298 <__aeabi_d2f+0x80>
 800230a:	e7a3      	b.n	8002254 <__aeabi_d2f+0x3c>
 800230c:	2300      	movs	r3, #0
 800230e:	e7a0      	b.n	8002252 <__aeabi_d2f+0x3a>
 8002310:	000b      	movs	r3, r1
 8002312:	e79f      	b.n	8002254 <__aeabi_d2f+0x3c>
 8002314:	000007fe 	.word	0x000007fe
 8002318:	fffffc80 	.word	0xfffffc80
 800231c:	fffffca2 	.word	0xfffffca2
 8002320:	fffffc82 	.word	0xfffffc82

08002324 <__clzsi2>:
 8002324:	211c      	movs	r1, #28
 8002326:	2301      	movs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	4298      	cmp	r0, r3
 800232c:	d301      	bcc.n	8002332 <__clzsi2+0xe>
 800232e:	0c00      	lsrs	r0, r0, #16
 8002330:	3910      	subs	r1, #16
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	4298      	cmp	r0, r3
 8002336:	d301      	bcc.n	800233c <__clzsi2+0x18>
 8002338:	0a00      	lsrs	r0, r0, #8
 800233a:	3908      	subs	r1, #8
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	4298      	cmp	r0, r3
 8002340:	d301      	bcc.n	8002346 <__clzsi2+0x22>
 8002342:	0900      	lsrs	r0, r0, #4
 8002344:	3904      	subs	r1, #4
 8002346:	a202      	add	r2, pc, #8	; (adr r2, 8002350 <__clzsi2+0x2c>)
 8002348:	5c10      	ldrb	r0, [r2, r0]
 800234a:	1840      	adds	r0, r0, r1
 800234c:	4770      	bx	lr
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	02020304 	.word	0x02020304
 8002354:	01010101 	.word	0x01010101
	...

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f001 f956 	bl	8003614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f852 	bl	8002410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236c:	f000 fae4 	bl	8002938 <MX_GPIO_Init>
  MX_DMA_Init();
 8002370:	f000 fab4 	bl	80028dc <MX_DMA_Init>
  MX_ADC1_Init();
 8002374:	f000 f896 	bl	80024a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002378:	f000 f926 	bl	80025c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800237c:	f000 f964 	bl	8002648 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002380:	f000 f9a0 	bl	80026c4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002384:	f000 f9da 	bl	800273c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002388:	f000 fa26 	bl	80027d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800238c:	f000 fa72 	bl	8002874 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002390:	f005 f84a 	bl	8007428 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testQ */
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <main+0x84>)
 8002396:	001a      	movs	r2, r3
 8002398:	2102      	movs	r1, #2
 800239a:	2010      	movs	r0, #16
 800239c:	f005 f93e 	bl	800761c <osMessageQueueNew>
 80023a0:	0002      	movs	r2, r0
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <main+0x88>)
 80023a4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80023a6:	4a11      	ldr	r2, [pc, #68]	; (80023ec <main+0x8c>)
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <main+0x90>)
 80023aa:	2100      	movs	r1, #0
 80023ac:	0018      	movs	r0, r3
 80023ae:	f005 f883 	bl	80074b8 <osThreadNew>
 80023b2:	0002      	movs	r2, r0
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <main+0x94>)
 80023b6:	601a      	str	r2, [r3, #0]

  /* creation of GPS_read */
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 80023b8:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <main+0x98>)
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <main+0x9c>)
 80023bc:	2100      	movs	r1, #0
 80023be:	0018      	movs	r0, r3
 80023c0:	f005 f87a 	bl	80074b8 <osThreadNew>
 80023c4:	0002      	movs	r2, r0
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <main+0xa0>)
 80023c8:	601a      	str	r2, [r3, #0]

  /* creation of StatusLED */
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <main+0xa4>)
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <main+0xa8>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	0018      	movs	r0, r3
 80023d2:	f005 f871 	bl	80074b8 <osThreadNew>
 80023d6:	0002      	movs	r2, r0
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <main+0xac>)
 80023da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80023dc:	f005 f846 	bl	800746c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <main+0x80>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	0800e548 	.word	0x0800e548
 80023e8:	20000694 	.word	0x20000694
 80023ec:	0800e4dc 	.word	0x0800e4dc
 80023f0:	08002b59 	.word	0x08002b59
 80023f4:	20000688 	.word	0x20000688
 80023f8:	0800e500 	.word	0x0800e500
 80023fc:	08002b79 	.word	0x08002b79
 8002400:	2000068c 	.word	0x2000068c
 8002404:	0800e524 	.word	0x0800e524
 8002408:	08002b89 	.word	0x08002b89
 800240c:	20000690 	.word	0x20000690

08002410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b093      	sub	sp, #76	; 0x4c
 8002414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002416:	2414      	movs	r4, #20
 8002418:	193b      	adds	r3, r7, r4
 800241a:	0018      	movs	r0, r3
 800241c:	2334      	movs	r3, #52	; 0x34
 800241e:	001a      	movs	r2, r3
 8002420:	2100      	movs	r1, #0
 8002422:	f008 facd 	bl	800a9c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	0018      	movs	r0, r3
 800242a:	2310      	movs	r3, #16
 800242c:	001a      	movs	r2, r3
 800242e:	2100      	movs	r1, #0
 8002430:	f008 fac6 	bl	800a9c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	0018      	movs	r0, r3
 800243a:	f002 fbeb 	bl	8004c14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800243e:	193b      	adds	r3, r7, r4
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002444:	193b      	adds	r3, r7, r4
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0052      	lsls	r2, r2, #1
 800244a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800244c:	193b      	adds	r3, r7, r4
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2240      	movs	r2, #64	; 0x40
 8002456:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002458:	193b      	adds	r3, r7, r4
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245e:	193b      	adds	r3, r7, r4
 8002460:	0018      	movs	r0, r3
 8002462:	f002 fc23 	bl	8004cac <HAL_RCC_OscConfig>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d001      	beq.n	800246e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800246a:	f000 fbcf 	bl	8002c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	22a0      	movs	r2, #160	; 0xa0
 8002484:	01d2      	lsls	r2, r2, #7
 8002486:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2100      	movs	r1, #0
 800248c:	0018      	movs	r0, r3
 800248e:	f002 ff1d 	bl	80052cc <HAL_RCC_ClockConfig>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002496:	f000 fbb9 	bl	8002c0c <Error_Handler>
  }
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b013      	add	sp, #76	; 0x4c
 80024a0:	bd90      	pop	{r4, r7, pc}
	...

080024a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	0018      	movs	r0, r3
 80024ae:	230c      	movs	r3, #12
 80024b0:	001a      	movs	r2, r3
 80024b2:	2100      	movs	r1, #0
 80024b4:	f008 fa84 	bl	800a9c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024ba:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <MX_ADC1_Init+0x114>)
 80024bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	05d2      	lsls	r2, r2, #23
 80024c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	0392      	lsls	r2, r2, #14
 80024d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024dc:	2204      	movs	r2, #4
 80024de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024f4:	2204      	movs	r2, #4
 80024f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <MX_ADC1_Init+0x110>)
 80024fa:	2220      	movs	r2, #32
 80024fc:	2100      	movs	r1, #0
 80024fe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <MX_ADC1_Init+0x110>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <MX_ADC1_Init+0x110>)
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <MX_ADC1_Init+0x110>)
 800250e:	222c      	movs	r2, #44	; 0x2c
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <MX_ADC1_Init+0x110>)
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <MX_ADC1_Init+0x110>)
 800251c:	2200      	movs	r2, #0
 800251e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <MX_ADC1_Init+0x110>)
 8002522:	2200      	movs	r2, #0
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <MX_ADC1_Init+0x110>)
 8002528:	223c      	movs	r2, #60	; 0x3c
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <MX_ADC1_Init+0x110>)
 8002530:	2200      	movs	r2, #0
 8002532:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <MX_ADC1_Init+0x110>)
 8002536:	0018      	movs	r0, r3
 8002538:	f001 f9e0 	bl	80038fc <HAL_ADC_Init>
 800253c:	1e03      	subs	r3, r0, #0
 800253e:	d001      	beq.n	8002544 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002540:	f000 fb64 	bl	8002c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <MX_ADC1_Init+0x118>)
 8002548:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2204      	movs	r2, #4
 800254e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002556:	1d3a      	adds	r2, r7, #4
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <MX_ADC1_Init+0x110>)
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f001 fb75 	bl	8003c4c <HAL_ADC_ConfigChannel>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d001      	beq.n	800256a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002566:	f000 fb51 	bl	8002c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <MX_ADC1_Init+0x11c>)
 800256e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2208      	movs	r2, #8
 8002574:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002576:	1d3a      	adds	r2, r7, #4
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <MX_ADC1_Init+0x110>)
 800257a:	0011      	movs	r1, r2
 800257c:	0018      	movs	r0, r3
 800257e:	f001 fb65 	bl	8003c4c <HAL_ADC_ConfigChannel>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002586:	f000 fb41 	bl	8002c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <MX_ADC1_Init+0x120>)
 800258e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	220c      	movs	r2, #12
 8002594:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002596:	1d3a      	adds	r2, r7, #4
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <MX_ADC1_Init+0x110>)
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f001 fb55 	bl	8003c4c <HAL_ADC_ConfigChannel>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80025a6:	f000 fb31 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b004      	add	sp, #16
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	200001f4 	.word	0x200001f4
 80025b8:	40012400 	.word	0x40012400
 80025bc:	04000002 	.word	0x04000002
 80025c0:	24000200 	.word	0x24000200
 80025c4:	2c000800 	.word	0x2c000800

080025c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <MX_I2C1_Init+0x74>)
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <MX_I2C1_Init+0x78>)
 80025d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <MX_I2C1_Init+0x74>)
 80025d4:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <MX_I2C1_Init+0x7c>)
 80025d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <MX_I2C1_Init+0x74>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_I2C1_Init+0x74>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_I2C1_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_I2C1_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_I2C1_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_I2C1_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_I2C1_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_I2C1_Init+0x74>)
 8002604:	0018      	movs	r0, r3
 8002606:	f002 f9d7 	bl	80049b8 <HAL_I2C_Init>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800260e:	f000 fafd 	bl	8002c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_I2C1_Init+0x74>)
 8002614:	2100      	movs	r1, #0
 8002616:	0018      	movs	r0, r3
 8002618:	f002 fa64 	bl	8004ae4 <HAL_I2CEx_ConfigAnalogFilter>
 800261c:	1e03      	subs	r3, r0, #0
 800261e:	d001      	beq.n	8002624 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002620:	f000 faf4 	bl	8002c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <MX_I2C1_Init+0x74>)
 8002626:	2100      	movs	r1, #0
 8002628:	0018      	movs	r0, r3
 800262a:	f002 faa7 	bl	8004b7c <HAL_I2CEx_ConfigDigitalFilter>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d001      	beq.n	8002636 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002632:	f000 faeb 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200002b4 	.word	0x200002b4
 8002640:	40005400 	.word	0x40005400
 8002644:	00000e14 	.word	0x00000e14

08002648 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <MX_SPI1_Init+0x74>)
 800264e:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <MX_SPI1_Init+0x78>)
 8002650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <MX_SPI1_Init+0x74>)
 8002654:	2282      	movs	r2, #130	; 0x82
 8002656:	0052      	lsls	r2, r2, #1
 8002658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <MX_SPI1_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <MX_SPI1_Init+0x74>)
 8002662:	22e0      	movs	r2, #224	; 0xe0
 8002664:	00d2      	lsls	r2, r2, #3
 8002666:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <MX_SPI1_Init+0x74>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <MX_SPI1_Init+0x74>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_SPI1_Init+0x74>)
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	0092      	lsls	r2, r2, #2
 800267a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <MX_SPI1_Init+0x74>)
 800267e:	2208      	movs	r2, #8
 8002680:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_SPI1_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_SPI1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <MX_SPI1_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_SPI1_Init+0x74>)
 8002696:	2207      	movs	r2, #7
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <MX_SPI1_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_SPI1_Init+0x74>)
 80026a2:	2208      	movs	r2, #8
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <MX_SPI1_Init+0x74>)
 80026a8:	0018      	movs	r0, r3
 80026aa:	f003 f917 	bl	80058dc <HAL_SPI_Init>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026b2:	f000 faab 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000308 	.word	0x20000308
 80026c0:	40013000 	.word	0x40013000

080026c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	0018      	movs	r0, r3
 80026ce:	230c      	movs	r3, #12
 80026d0:	001a      	movs	r2, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	f008 f974 	bl	800a9c0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_TIM6_Init+0x6c>)
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <MX_TIM6_Init+0x70>)
 80026dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_TIM6_Init+0x6c>)
 80026e0:	4a15      	ldr	r2, [pc, #84]	; (8002738 <MX_TIM6_Init+0x74>)
 80026e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <MX_TIM6_Init+0x6c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_TIM6_Init+0x6c>)
 80026ec:	22f4      	movs	r2, #244	; 0xf4
 80026ee:	32ff      	adds	r2, #255	; 0xff
 80026f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_TIM6_Init+0x6c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <MX_TIM6_Init+0x6c>)
 80026fa:	0018      	movs	r0, r3
 80026fc:	f003 f9a6 	bl	8005a4c <HAL_TIM_Base_Init>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8002704:	f000 fa82 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002714:	1d3a      	adds	r2, r7, #4
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_TIM6_Init+0x6c>)
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f003 fc0c 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8002724:	f000 fa72 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}
 8002730:	2000036c 	.word	0x2000036c
 8002734:	40001000 	.word	0x40001000
 8002738:	00001f3f 	.word	0x00001f3f

0800273c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002742:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <MX_USART1_UART_Init+0x98>)
 8002744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002746:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002748:	2296      	movs	r2, #150	; 0x96
 800274a:	0192      	lsls	r2, r2, #6
 800274c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002762:	220c      	movs	r2, #12
 8002764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002774:	2200      	movs	r2, #0
 8002776:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 800277a:	2200      	movs	r2, #0
 800277c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002786:	0018      	movs	r0, r3
 8002788:	f003 fc56 	bl	8006038 <HAL_UART_Init>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002790:	f000 fa3c 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 8002796:	2100      	movs	r1, #0
 8002798:	0018      	movs	r0, r3
 800279a:	f004 fcdb 	bl	8007154 <HAL_UARTEx_SetTxFifoThreshold>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027a2:	f000 fa33 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 80027a8:	2100      	movs	r1, #0
 80027aa:	0018      	movs	r0, r3
 80027ac:	f004 fd12 	bl	80071d4 <HAL_UARTEx_SetRxFifoThreshold>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d001      	beq.n	80027b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027b4:	f000 fa2a 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <MX_USART1_UART_Init+0x94>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f004 fc90 	bl	80070e0 <HAL_UARTEx_DisableFifoMode>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d001      	beq.n	80027c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027c4:	f000 fa22 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	200003b8 	.word	0x200003b8
 80027d4:	40013800 	.word	0x40013800

080027d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <MX_USART2_UART_Init+0x94>)
 80027de:	4a24      	ldr	r2, [pc, #144]	; (8002870 <MX_USART2_UART_Init+0x98>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80027e2:	4b22      	ldr	r3, [pc, #136]	; (800286c <MX_USART2_UART_Init+0x94>)
 80027e4:	2296      	movs	r2, #150	; 0x96
 80027e6:	0192      	lsls	r2, r2, #6
 80027e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <MX_USART2_UART_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <MX_USART2_UART_Init+0x94>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <MX_USART2_UART_Init+0x94>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <MX_USART2_UART_Init+0x94>)
 80027fe:	220c      	movs	r2, #12
 8002800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_USART2_UART_Init+0x94>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <MX_USART2_UART_Init+0x94>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_USART2_UART_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <MX_USART2_UART_Init+0x94>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_USART2_UART_Init+0x94>)
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <MX_USART2_UART_Init+0x94>)
 8002822:	0018      	movs	r0, r3
 8002824:	f003 fc08 	bl	8006038 <HAL_UART_Init>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d001      	beq.n	8002830 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800282c:	f000 f9ee 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_USART2_UART_Init+0x94>)
 8002832:	2100      	movs	r1, #0
 8002834:	0018      	movs	r0, r3
 8002836:	f004 fc8d 	bl	8007154 <HAL_UARTEx_SetTxFifoThreshold>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800283e:	f000 f9e5 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_USART2_UART_Init+0x94>)
 8002844:	2100      	movs	r1, #0
 8002846:	0018      	movs	r0, r3
 8002848:	f004 fcc4 	bl	80071d4 <HAL_UARTEx_SetRxFifoThreshold>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002850:	f000 f9dc 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <MX_USART2_UART_Init+0x94>)
 8002856:	0018      	movs	r0, r3
 8002858:	f004 fc42 	bl	80070e0 <HAL_UARTEx_DisableFifoMode>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d001      	beq.n	8002864 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002860:	f000 f9d4 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	2000044c 	.word	0x2000044c
 8002870:	40004400 	.word	0x40004400

08002874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 800287a:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <MX_USART3_UART_Init+0x64>)
 800287c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 8002880:	2296      	movs	r2, #150	; 0x96
 8002882:	0192      	lsls	r2, r2, #6
 8002884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <MX_USART3_UART_Init+0x60>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f003 fbba 	bl	8006038 <HAL_UART_Init>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80028c8:	f000 f9a0 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	200004e0 	.word	0x200004e0
 80028d8:	40004800 	.word	0x40004800

080028dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_DMA_Init+0x58>)
 80028e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <MX_DMA_Init+0x58>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	639a      	str	r2, [r3, #56]	; 0x38
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_DMA_Init+0x58>)
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2103      	movs	r1, #3
 80028fe:	2009      	movs	r0, #9
 8002900:	f001 fc04 	bl	800410c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002904:	2009      	movs	r0, #9
 8002906:	f001 fc16 	bl	8004136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2103      	movs	r1, #3
 800290e:	200a      	movs	r0, #10
 8002910:	f001 fbfc 	bl	800410c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002914:	200a      	movs	r0, #10
 8002916:	f001 fc0e 	bl	8004136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2103      	movs	r1, #3
 800291e:	200b      	movs	r0, #11
 8002920:	f001 fbf4 	bl	800410c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002924:	200b      	movs	r0, #11
 8002926:	f001 fc06 	bl	8004136 <HAL_NVIC_EnableIRQ>

}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	40021000 	.word	0x40021000

08002938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b08b      	sub	sp, #44	; 0x2c
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	2414      	movs	r4, #20
 8002940:	193b      	adds	r3, r7, r4
 8002942:	0018      	movs	r0, r3
 8002944:	2314      	movs	r3, #20
 8002946:	001a      	movs	r2, r3
 8002948:	2100      	movs	r1, #0
 800294a:	f008 f839 	bl	800a9c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294e:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	4b74      	ldr	r3, [pc, #464]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 8002954:	2104      	movs	r1, #4
 8002956:	430a      	orrs	r2, r1
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
 800295a:	4b72      	ldr	r3, [pc, #456]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 8002968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296a:	4b6e      	ldr	r3, [pc, #440]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 800296c:	2120      	movs	r1, #32
 800296e:	430a      	orrs	r2, r1
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
 8002972:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	2220      	movs	r2, #32
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	4b69      	ldr	r3, [pc, #420]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 8002980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002982:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 8002984:	2101      	movs	r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
 800298a:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	2201      	movs	r2, #1
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 8002998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299a:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 800299c:	2102      	movs	r1, #2
 800299e:	430a      	orrs	r2, r1
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
 80029a2:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 80029b4:	2108      	movs	r1, #8
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ba:	4b5a      	ldr	r3, [pc, #360]	; (8002b24 <MX_GPIO_Init+0x1ec>)
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	2208      	movs	r2, #8
 80029c0:	4013      	ands	r3, r2
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80029c6:	4958      	ldr	r1, [pc, #352]	; (8002b28 <MX_GPIO_Init+0x1f0>)
 80029c8:	23a0      	movs	r3, #160	; 0xa0
 80029ca:	05db      	lsls	r3, r3, #23
 80029cc:	2200      	movs	r2, #0
 80029ce:	0018      	movs	r0, r3
 80029d0:	f001 ffd4 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80029d4:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <MX_GPIO_Init+0x1f4>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	21c0      	movs	r1, #192	; 0xc0
 80029da:	0018      	movs	r0, r3
 80029dc:	f001 ffce 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <MX_GPIO_Init+0x1f8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	2107      	movs	r1, #7
 80029e6:	0018      	movs	r0, r3
 80029e8:	f001 ffc8 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 80029ec:	238e      	movs	r3, #142	; 0x8e
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4850      	ldr	r0, [pc, #320]	; (8002b34 <MX_GPIO_Init+0x1fc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	0019      	movs	r1, r3
 80029f6:	f001 ffc1 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_MEM_Pin DO_GPS_VCC_EN_Pin */
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <MX_GPIO_Init+0x1f0>)
 80029fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2201      	movs	r2, #1
 8002a04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	193a      	adds	r2, r7, r4
 8002a14:	23a0      	movs	r3, #160	; 0xa0
 8002a16:	05db      	lsls	r3, r3, #23
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f001 fe4a 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_IN2_Pin DI_IN3_Pin DI_MAINS_STATE_Pin DI_ACC_STATE_Pin
                            DI_INT1_ACCEL_Pin */
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8002a20:	0021      	movs	r1, r4
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	22f2      	movs	r2, #242	; 0xf2
 8002a26:	01d2      	lsls	r2, r2, #7
 8002a28:	601a      	str	r2, [r3, #0]
                          | DI_INT1_ACCEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2a:	000c      	movs	r4, r1
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	4a3e      	ldr	r2, [pc, #248]	; (8002b34 <MX_GPIO_Init+0x1fc>)
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	0010      	movs	r0, r2
 8002a40:	f001 fe38 	bl	80046b4 <HAL_GPIO_Init>


  /*Configure GPIO pins :  DI_BOX_STATE_Pin  */
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8002a44:	0021      	movs	r1, r4
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	0212      	lsls	r2, r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4e:	000c      	movs	r4, r1
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	2200      	movs	r2, #0
 8002a54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	2201      	movs	r2, #1
 8002a5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	4a35      	ldr	r2, [pc, #212]	; (8002b34 <MX_GPIO_Init+0x1fc>)
 8002a60:	0019      	movs	r1, r3
 8002a62:	0010      	movs	r0, r2
 8002a64:	f001 fe26 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_SOS_STATE_Pin  */
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	0052      	lsls	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a70:	193b      	adds	r3, r7, r4
 8002a72:	2200      	movs	r2, #0
 8002a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	2201      	movs	r2, #1
 8002a7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	193a      	adds	r2, r7, r4
 8002a7e:	23a0      	movs	r3, #160	; 0xa0
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	0011      	movs	r1, r2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f001 fe15 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins :  DI_IN1_Pin */
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	0152      	lsls	r2, r2, #5
 8002a90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	193b      	adds	r3, r7, r4
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	193a      	adds	r2, r7, r4
 8002aa0:	23a0      	movs	r3, #160	; 0xa0
 8002aa2:	05db      	lsls	r3, r3, #23
 8002aa4:	0011      	movs	r1, r2
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f001 fe04 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_GSM_VCC_EN_Pin DO_PWRKEY_Pin */
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	22c0      	movs	r2, #192	; 0xc0
 8002ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac4:	193b      	adds	r3, r7, r4
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <MX_GPIO_Init+0x1f4>)
 8002ac8:	0019      	movs	r1, r3
 8002aca:	0010      	movs	r0, r2
 8002acc:	f001 fdf2 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_LED_PWR_Pin DO_LED_NET_Pin DO_LED_GPS_Pin */
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	2201      	movs	r2, #1
 8002ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <MX_GPIO_Init+0x1f8>)
 8002aec:	0019      	movs	r1, r3
 8002aee:	0010      	movs	r0, r2
 8002af0:	f001 fde0 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_OUT1_Pin DO_OUT2_Pin DO_5V_OUT_EN_Pin DO_OUT3_P_LED_Pin */
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8002af4:	0021      	movs	r1, r4
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	228e      	movs	r2, #142	; 0x8e
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2201      	movs	r2, #1
 8002b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <MX_GPIO_Init+0x1fc>)
 8002b14:	0019      	movs	r1, r3
 8002b16:	0010      	movs	r0, r2
 8002b18:	f001 fdcc 	bl	80046b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b00b      	add	sp, #44	; 0x2c
 8002b22:	bd90      	pop	{r4, r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	00008010 	.word	0x00008010
 8002b2c:	50000800 	.word	0x50000800
 8002b30:	50000c00 	.word	0x50000c00
 8002b34:	50000400 	.word	0x50000400

08002b38 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]


}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_UART_ErrorCallback>:
	}

}


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]





}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */



while (1){
 Debug_Tx("new app");
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <StartDefaultTask+0x1c>)
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f82a 	bl	8002bbc <Debug_Tx>
 HAL_Delay(2000);
 8002b68:	23fa      	movs	r3, #250	; 0xfa
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 fd8d 	bl	800368c <HAL_Delay>
 Debug_Tx("new app");
 8002b72:	e7f5      	b.n	8002b60 <StartDefaultTask+0x8>
 8002b74:	0800e47c 	.word	0x0800e47c

08002b78 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

while(1){osDelay(1);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f004 fd2f 	bl	80075e4 <osDelay>
 8002b86:	e7fb      	b.n	8002b80 <StartTask02+0x8>

08002b88 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f004 fd27 	bl	80075e4 <osDelay>
 8002b96:	e7fb      	b.n	8002b90 <StartTask03+0x8>

08002b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002baa:	f000 fd53 	bl	8003654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	40012c00 	.word	0x40012c00

08002bbc <Debug_Tx>:





static void Debug_Tx(char _out[]){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <Debug_Tx+0x44>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	220c      	movs	r2, #12
 8002bca:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fd fa9a 	bl	8000108 <strlen>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <Debug_Tx+0x48>)
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4808      	ldr	r0, [pc, #32]	; (8002c00 <Debug_Tx+0x44>)
 8002bde:	f003 fa81 	bl	80060e4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8002be2:	210c      	movs	r1, #12
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <Debug_Tx+0x4c>)
 8002be8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8002bea:	1879      	adds	r1, r7, r1
 8002bec:	4804      	ldr	r0, [pc, #16]	; (8002c00 <Debug_Tx+0x44>)
 8002bee:	230a      	movs	r3, #10
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f003 fa77 	bl	80060e4 <HAL_UART_Transmit>


}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b004      	add	sp, #16
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	200004e0 	.word	0x200004e0
 8002c04:	00001388 	.word	0x00001388
 8002c08:	00000a0d 	.word	0x00000a0d

08002c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c10:	b672      	cpsid	i
}
 8002c12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <Error_Handler+0x8>
	...

08002c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c24:	2101      	movs	r1, #1
 8002c26:	430a      	orrs	r2, r1
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4013      	ands	r3, r2
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	0549      	lsls	r1, r1, #21
 8002c40:	430a      	orrs	r2, r1
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	055b      	lsls	r3, r3, #21
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002c52:	2302      	movs	r3, #2
 8002c54:	425b      	negs	r3, r3
 8002c56:	2200      	movs	r2, #0
 8002c58:	2103      	movs	r1, #3
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f001 fa56 	bl	800410c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 fd35 	bl	80036d4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b08b      	sub	sp, #44	; 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	2414      	movs	r4, #20
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	0018      	movs	r0, r3
 8002c86:	2314      	movs	r3, #20
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	f007 fe98 	bl	800a9c0 <memset>
  if(hadc->Instance==ADC1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <HAL_ADC_MspInit+0x10c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d16f      	bne.n	8002d7a <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0349      	lsls	r1, r1, #13
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca8:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	035b      	lsls	r3, r3, #13
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cba:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_ADC_MspInit+0x110>)
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	2203      	movs	r2, #3
 8002cea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	2203      	movs	r2, #3
 8002cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	193a      	adds	r2, r7, r4
 8002cfa:	23a0      	movs	r3, #160	; 0xa0
 8002cfc:	05db      	lsls	r3, r3, #23
 8002cfe:	0011      	movs	r1, r2
 8002d00:	0018      	movs	r0, r3
 8002d02:	f001 fcd7 	bl	80046b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_ADC_MspInit+0x114>)
 8002d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	2203      	movs	r2, #3
 8002d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_ADC_MspInit+0x118>)
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	0010      	movs	r0, r2
 8002d20:	f001 fcc8 	bl	80046b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_ADC_MspInit+0x120>)
 8002d28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d3c:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d54:	2220      	movs	r2, #32
 8002d56:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d60:	0018      	movs	r0, r3
 8002d62:	f001 f9f9 	bl	8004158 <HAL_DMA_Init>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002d6a:	f7ff ff4f 	bl	8002c0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d72:	651a      	str	r2, [r3, #80]	; 0x50
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_ADC_MspInit+0x11c>)
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b00b      	add	sp, #44	; 0x2c
 8002d80:	bd90      	pop	{r4, r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40012400 	.word	0x40012400
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	00000402 	.word	0x00000402
 8002d90:	50000400 	.word	0x50000400
 8002d94:	20000258 	.word	0x20000258
 8002d98:	40020008 	.word	0x40020008

08002d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b091      	sub	sp, #68	; 0x44
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	232c      	movs	r3, #44	; 0x2c
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	0018      	movs	r0, r3
 8002daa:	2314      	movs	r3, #20
 8002dac:	001a      	movs	r2, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	f007 fe06 	bl	800a9c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002db4:	2410      	movs	r4, #16
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	0018      	movs	r0, r3
 8002dba:	231c      	movs	r3, #28
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	f007 fdfe 	bl	800a9c0 <memset>
  if(hi2c->Instance==I2C1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_I2C_MspInit+0xb8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d13d      	bne.n	8002e4a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f002 fc49 	bl	8005674 <HAL_RCCEx_PeriphCLKConfig>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002de6:	f7ff ff11 	bl	8002c0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_I2C_MspInit+0xbc>)
 8002dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_I2C_MspInit+0xbc>)
 8002df0:	2102      	movs	r1, #2
 8002df2:	430a      	orrs	r2, r1
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_I2C_MspInit+0xbc>)
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	22c0      	movs	r2, #192	; 0xc0
 8002e08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	2212      	movs	r2, #18
 8002e0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2201      	movs	r2, #1
 8002e14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2206      	movs	r2, #6
 8002e20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <HAL_I2C_MspInit+0xc0>)
 8002e26:	0019      	movs	r1, r3
 8002e28:	0010      	movs	r0, r2
 8002e2a:	f001 fc43 	bl	80046b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_I2C_MspInit+0xbc>)
 8002e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_I2C_MspInit+0xbc>)
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0389      	lsls	r1, r1, #14
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_I2C_MspInit+0xbc>)
 8002e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	039b      	lsls	r3, r3, #14
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b011      	add	sp, #68	; 0x44
 8002e50:	bd90      	pop	{r4, r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40005400 	.word	0x40005400
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	50000400 	.word	0x50000400

08002e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b08b      	sub	sp, #44	; 0x2c
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	2414      	movs	r4, #20
 8002e6a:	193b      	adds	r3, r7, r4
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	2314      	movs	r3, #20
 8002e70:	001a      	movs	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f007 fda4 	bl	800a9c0 <memset>
  if(hspi->Instance==SPI1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <HAL_SPI_MspInit+0x8c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d130      	bne.n	8002ee4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	0149      	lsls	r1, r1, #5
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002eb6:	0021      	movs	r1, r4
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	22e0      	movs	r2, #224	; 0xe0
 8002ebc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	187a      	adds	r2, r7, r1
 8002ed8:	23a0      	movs	r3, #160	; 0xa0
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	0011      	movs	r1, r2
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 fbe8 	bl	80046b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b00b      	add	sp, #44	; 0x2c
 8002eea:	bd90      	pop	{r4, r7, pc}
 8002eec:	40013000 	.word	0x40013000
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <HAL_TIM_Base_MspInit+0x44>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d113      	bne.n	8002f2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_TIM_Base_MspInit+0x48>)
 8002f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_TIM_Base_MspInit+0x48>)
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_TIM_Base_MspInit+0x48>)
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	2210      	movs	r2, #16
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2103      	movs	r1, #3
 8002f22:	2011      	movs	r0, #17
 8002f24:	f001 f8f2 	bl	800410c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002f28:	2011      	movs	r0, #17
 8002f2a:	f001 f904 	bl	8004136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	40001000 	.word	0x40001000
 8002f3c:	40021000 	.word	0x40021000

08002f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b095      	sub	sp, #84	; 0x54
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	233c      	movs	r3, #60	; 0x3c
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	2314      	movs	r3, #20
 8002f50:	001a      	movs	r2, r3
 8002f52:	2100      	movs	r1, #0
 8002f54:	f007 fd34 	bl	800a9c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f58:	2420      	movs	r4, #32
 8002f5a:	193b      	adds	r3, r7, r4
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	231c      	movs	r3, #28
 8002f60:	001a      	movs	r2, r3
 8002f62:	2100      	movs	r1, #0
 8002f64:	f007 fd2c 	bl	800a9c0 <memset>
  if(huart->Instance==USART1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4aab      	ldr	r2, [pc, #684]	; (800321c <HAL_UART_MspInit+0x2dc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d172      	bne.n	8003058 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	0018      	movs	r0, r3
 8002f82:	f002 fb77 	bl	8005674 <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f8a:	f7ff fe3f 	bl	8002c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f8e:	4ba4      	ldr	r3, [pc, #656]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8002f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f92:	4ba3      	ldr	r3, [pc, #652]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	01c9      	lsls	r1, r1, #7
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f9c:	4ba0      	ldr	r3, [pc, #640]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8002f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	01db      	lsls	r3, r3, #7
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b9d      	ldr	r3, [pc, #628]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fae:	4b9c      	ldr	r3, [pc, #624]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb6:	4b9a      	ldr	r3, [pc, #616]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8002fc2:	213c      	movs	r1, #60	; 0x3c
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	22c0      	movs	r2, #192	; 0xc0
 8002fc8:	00d2      	lsls	r2, r2, #3
 8002fca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2202      	movs	r2, #2
 8002fd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	187a      	adds	r2, r7, r1
 8002fe6:	23a0      	movs	r3, #160	; 0xa0
 8002fe8:	05db      	lsls	r3, r3, #23
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f001 fb61 	bl	80046b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002ff2:	4b8c      	ldr	r3, [pc, #560]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8002ff4:	4a8c      	ldr	r2, [pc, #560]	; (8003228 <HAL_UART_MspInit+0x2e8>)
 8002ff6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ff8:	4b8a      	ldr	r3, [pc, #552]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8002ffa:	2232      	movs	r2, #50	; 0x32
 8002ffc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ffe:	4b89      	ldr	r3, [pc, #548]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003004:	4b87      	ldr	r3, [pc, #540]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800300a:	4b86      	ldr	r3, [pc, #536]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003010:	4b84      	ldr	r3, [pc, #528]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8003012:	2200      	movs	r2, #0
 8003014:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003016:	4b83      	ldr	r3, [pc, #524]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800301c:	4b81      	ldr	r3, [pc, #516]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003022:	4b80      	ldr	r3, [pc, #512]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003028:	4b7e      	ldr	r3, [pc, #504]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 800302a:	0018      	movs	r0, r3
 800302c:	f001 f894 	bl	8004158 <HAL_DMA_Init>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8003034:	f7ff fdea 	bl	8002c0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 800303e:	505a      	str	r2, [r3, r1]
 8003040:	4b78      	ldr	r3, [pc, #480]	; (8003224 <HAL_UART_MspInit+0x2e4>)
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2103      	movs	r1, #3
 800304a:	201b      	movs	r0, #27
 800304c:	f001 f85e 	bl	800410c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003050:	201b      	movs	r0, #27
 8003052:	f001 f870 	bl	8004136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003056:	e0dd      	b.n	8003214 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a73      	ldr	r2, [pc, #460]	; (800322c <HAL_UART_MspInit+0x2ec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d172      	bne.n	8003148 <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003062:	2120      	movs	r1, #32
 8003064:	187b      	adds	r3, r7, r1
 8003066:	2202      	movs	r2, #2
 8003068:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003070:	187b      	adds	r3, r7, r1
 8003072:	0018      	movs	r0, r3
 8003074:	f002 fafe 	bl	8005674 <HAL_RCCEx_PeriphCLKConfig>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0x140>
      Error_Handler();
 800307c:	f7ff fdc6 	bl	8002c0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003080:	4b67      	ldr	r3, [pc, #412]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003084:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	0289      	lsls	r1, r1, #10
 800308a:	430a      	orrs	r2, r1
 800308c:	63da      	str	r2, [r3, #60]	; 0x3c
 800308e:	4b64      	ldr	r3, [pc, #400]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	4013      	ands	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309c:	4b60      	ldr	r3, [pc, #384]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 800309e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a0:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 80030a2:	2101      	movs	r1, #1
 80030a4:	430a      	orrs	r2, r1
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34
 80030a8:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 80030b4:	213c      	movs	r1, #60	; 0x3c
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	220c      	movs	r2, #12
 80030ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2202      	movs	r2, #2
 80030c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	2201      	movs	r2, #1
 80030d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	187a      	adds	r2, r7, r1
 80030d6:	23a0      	movs	r3, #160	; 0xa0
 80030d8:	05db      	lsls	r3, r3, #23
 80030da:	0011      	movs	r1, r2
 80030dc:	0018      	movs	r0, r3
 80030de:	f001 fae9 	bl	80046b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 80030e4:	4a53      	ldr	r2, [pc, #332]	; (8003234 <HAL_UART_MspInit+0x2f4>)
 80030e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80030e8:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 80030ea:	2234      	movs	r2, #52	; 0x34
 80030ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ee:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f4:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030fa:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003100:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003106:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800310c:	4b48      	ldr	r3, [pc, #288]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 8003114:	2200      	movs	r2, #0
 8003116:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003118:	4b45      	ldr	r3, [pc, #276]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 800311a:	0018      	movs	r0, r3
 800311c:	f001 f81c 	bl	8004158 <HAL_DMA_Init>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8003124:	f7ff fd72 	bl	8002c0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 800312e:	505a      	str	r2, [r3, r1]
 8003130:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_UART_MspInit+0x2f0>)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2103      	movs	r1, #3
 800313a:	201c      	movs	r0, #28
 800313c:	f000 ffe6 	bl	800410c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003140:	201c      	movs	r0, #28
 8003142:	f000 fff8 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 8003146:	e065      	b.n	8003214 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3a      	ldr	r2, [pc, #232]	; (8003238 <HAL_UART_MspInit+0x2f8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d160      	bne.n	8003214 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003152:	4b33      	ldr	r3, [pc, #204]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003156:	4b32      	ldr	r3, [pc, #200]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	02c9      	lsls	r1, r1, #11
 800315c:	430a      	orrs	r2, r1
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	02db      	lsls	r3, r3, #11
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 8003174:	2102      	movs	r1, #2
 8003176:	430a      	orrs	r2, r1
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <HAL_UART_MspInit+0x2e0>)
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	2202      	movs	r2, #2
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8003186:	213c      	movs	r1, #60	; 0x3c
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2205      	movs	r2, #5
 800318c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2202      	movs	r2, #2
 8003192:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	187b      	adds	r3, r7, r1
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	187b      	adds	r3, r7, r1
 800319c:	2200      	movs	r2, #0
 800319e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	2204      	movs	r2, #4
 80031a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <HAL_UART_MspInit+0x2fc>)
 80031aa:	0019      	movs	r1, r3
 80031ac:	0010      	movs	r0, r2
 80031ae:	f001 fa81 	bl	80046b4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <HAL_UART_MspInit+0x304>)
 80031b6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80031b8:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031ba:	2237      	movs	r2, #55	; 0x37
 80031bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031c0:	2210      	movs	r2, #16
 80031c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c4:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 ffb4 	bl	8004158 <HAL_DMA_Init>
 80031f0:	1e03      	subs	r3, r0, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 80031f4:	f7ff fd0a 	bl	8002c0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_UART_MspInit+0x300>)
 80031fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_UART_MspInit+0x300>)
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2103      	movs	r1, #3
 8003208:	201d      	movs	r0, #29
 800320a:	f000 ff7f 	bl	800410c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800320e:	201d      	movs	r0, #29
 8003210:	f000 ff91 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b015      	add	sp, #84	; 0x54
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	40013800 	.word	0x40013800
 8003220:	40021000 	.word	0x40021000
 8003224:	20000574 	.word	0x20000574
 8003228:	4002001c 	.word	0x4002001c
 800322c:	40004400 	.word	0x40004400
 8003230:	200005d0 	.word	0x200005d0
 8003234:	40020030 	.word	0x40020030
 8003238:	40004800 	.word	0x40004800
 800323c:	50000400 	.word	0x50000400
 8003240:	2000062c 	.word	0x2000062c
 8003244:	40020044 	.word	0x40020044

08003248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003250:	232b      	movs	r3, #43	; 0x2b
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_InitTick+0xf4>)
 800325a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325c:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_InitTick+0xf4>)
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	0109      	lsls	r1, r1, #4
 8003262:	430a      	orrs	r2, r1
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <HAL_InitTick+0xf4>)
 8003268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	4013      	ands	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003274:	230c      	movs	r3, #12
 8003276:	18fa      	adds	r2, r7, r3
 8003278:	2410      	movs	r4, #16
 800327a:	193b      	adds	r3, r7, r4
 800327c:	0011      	movs	r1, r2
 800327e:	0018      	movs	r0, r3
 8003280:	f002 f9ce 	bl	8005620 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003284:	193b      	adds	r3, r7, r4
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003290:	f002 f9b0 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8003294:	0003      	movs	r3, r0
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003298:	e004      	b.n	80032a4 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800329a:	f002 f9ab 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 800329e:	0003      	movs	r3, r0
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	4926      	ldr	r1, [pc, #152]	; (8003340 <HAL_InitTick+0xf8>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7fc ff49 	bl	8000140 <__udivsi3>
 80032ae:	0003      	movs	r3, r0
 80032b0:	3b01      	subs	r3, #1
 80032b2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032b4:	4b23      	ldr	r3, [pc, #140]	; (8003344 <HAL_InitTick+0xfc>)
 80032b6:	4a24      	ldr	r2, [pc, #144]	; (8003348 <HAL_InitTick+0x100>)
 80032b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_InitTick+0xfc>)
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <HAL_InitTick+0x104>)
 80032be:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80032c0:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_InitTick+0xfc>)
 80032c2:	6a3a      	ldr	r2, [r7, #32]
 80032c4:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80032c6:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <HAL_InitTick+0xfc>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_InitTick+0xfc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <HAL_InitTick+0xfc>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80032d8:	252b      	movs	r5, #43	; 0x2b
 80032da:	197c      	adds	r4, r7, r5
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_InitTick+0xfc>)
 80032de:	0018      	movs	r0, r3
 80032e0:	f002 fbb4 	bl	8005a4c <HAL_TIM_Base_Init>
 80032e4:	0003      	movs	r3, r0
 80032e6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80032e8:	197b      	adds	r3, r7, r5
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11e      	bne.n	800332e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032f0:	197c      	adds	r4, r7, r5
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_InitTick+0xfc>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f002 fc01 	bl	8005afc <HAL_TIM_Base_Start_IT>
 80032fa:	0003      	movs	r3, r0
 80032fc:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80032fe:	197b      	adds	r3, r7, r5
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003306:	200d      	movs	r0, #13
 8003308:	f000 ff15 	bl	8004136 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d809      	bhi.n	8003326 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	0019      	movs	r1, r3
 8003318:	200d      	movs	r0, #13
 800331a:	f000 fef7 	bl	800410c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_InitTick+0x108>)
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e003      	b.n	800332e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8003326:	232b      	movs	r3, #43	; 0x2b
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800332e:	232b      	movs	r3, #43	; 0x2b
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	781b      	ldrb	r3, [r3, #0]
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b00c      	add	sp, #48	; 0x30
 800333a:	bdb0      	pop	{r4, r5, r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	000f4240 	.word	0x000f4240
 8003344:	20000698 	.word	0x20000698
 8003348:	40012c00 	.word	0x40012c00
 800334c:	000003e7 	.word	0x000003e7
 8003350:	20000004 	.word	0x20000004

08003354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <NMI_Handler+0x4>

0800335a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0x4>

08003360 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <DMA1_Channel1_IRQHandler+0x14>)
 8003366:	0018      	movs	r0, r3
 8003368:	f001 f84c 	bl	8004404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	20000258 	.word	0x20000258

08003378 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800337e:	0018      	movs	r0, r3
 8003380:	f001 f840 	bl	8004404 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003386:	0018      	movs	r0, r3
 8003388:	f001 f83c 	bl	8004404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	20000574 	.word	0x20000574
 8003398:	200005d0 	.word	0x200005d0

0800339c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 80033a2:	0018      	movs	r0, r3
 80033a4:	f001 f82e 	bl	8004404 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 80033aa:	0018      	movs	r0, r3
 80033ac:	f001 f92c 	bl	8004608 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	2000062c 	.word	0x2000062c
 80033bc:	20000258 	.word	0x20000258

080033c0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80033c6:	0018      	movs	r0, r3
 80033c8:	f002 fbee 	bl	8005ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	20000698 	.word	0x20000698

080033d8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <TIM6_IRQHandler+0x14>)
 80033de:	0018      	movs	r0, r3
 80033e0:	f002 fbe2 	bl	8005ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	2000036c 	.word	0x2000036c

080033f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <USART1_IRQHandler+0x14>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f002 ff10 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	200003b8 	.word	0x200003b8

08003408 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <USART2_IRQHandler+0x14>)
 800340e:	0018      	movs	r0, r3
 8003410:	f002 ff04 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	2000044c 	.word	0x2000044c

08003420 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <USART3_4_IRQHandler+0x14>)
 8003426:	0018      	movs	r0, r3
 8003428:	f002 fef8 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	200004e0 	.word	0x200004e0

08003438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  return 1;
 800343c:	2301      	movs	r3, #1
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <_kill>:

int _kill(int pid, int sig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800344e:	f007 fb6f 	bl	800ab30 <__errno>
 8003452:	0003      	movs	r3, r0
 8003454:	2216      	movs	r2, #22
 8003456:	601a      	str	r2, [r3, #0]
  return -1;
 8003458:	2301      	movs	r3, #1
 800345a:	425b      	negs	r3, r3
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}

08003464 <_exit>:

void _exit (int status)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800346c:	2301      	movs	r3, #1
 800346e:	425a      	negs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff ffe5 	bl	8003444 <_kill>
  while (1) {}    /* Make sure we hang here */
 800347a:	e7fe      	b.n	800347a <_exit+0x16>

0800347c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e00a      	b.n	80034a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800348e:	e000      	b.n	8003492 <_read+0x16>
 8003490:	bf00      	nop
 8003492:	0001      	movs	r1, r0
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	60ba      	str	r2, [r7, #8]
 800349a:	b2ca      	uxtb	r2, r1
 800349c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3301      	adds	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dbf0      	blt.n	800348e <_read+0x12>
  }

  return len;
 80034ac:	687b      	ldr	r3, [r7, #4]
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b006      	add	sp, #24
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e009      	b.n	80034dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	60ba      	str	r2, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	0018      	movs	r0, r3
 80034d2:	e000      	b.n	80034d6 <_write+0x20>
 80034d4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dbf1      	blt.n	80034c8 <_write+0x12>
  }
  return len;
 80034e4:	687b      	ldr	r3, [r7, #4]
}
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b006      	add	sp, #24
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_close>:

int _close(int file)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	425b      	negs	r3, r3
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}

08003502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	0192      	lsls	r2, r2, #6
 8003512:	605a      	str	r2, [r3, #4]
  return 0;
 8003514:	2300      	movs	r3, #0
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bd80      	pop	{r7, pc}

0800351e <_isatty>:

int _isatty(int file)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003526:	2301      	movs	r3, #1
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b004      	add	sp, #16
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <_sbrk+0x5c>)
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <_sbrk+0x60>)
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <_sbrk+0x64>)
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <_sbrk+0x68>)
 8003568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	18d3      	adds	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d207      	bcs.n	8003588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003578:	f007 fada 	bl	800ab30 <__errno>
 800357c:	0003      	movs	r3, r0
 800357e:	220c      	movs	r2, #12
 8003580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003582:	2301      	movs	r3, #1
 8003584:	425b      	negs	r3, r3
 8003586:	e009      	b.n	800359c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	18d2      	adds	r2, r2, r3
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <_sbrk+0x64>)
 8003598:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b006      	add	sp, #24
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20009000 	.word	0x20009000
 80035a8:	00000400 	.word	0x00000400
 80035ac:	200006e4 	.word	0x200006e4
 80035b0:	20002218 	.word	0x20002218

080035b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035c0:	480d      	ldr	r0, [pc, #52]	; (80035f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035c4:	f7ff fff6 	bl	80035b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <LoopForever+0x6>)
  ldr r1, =_edata
 80035ca:	490d      	ldr	r1, [pc, #52]	; (8003600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <LoopForever+0xe>)
  movs r3, #0
 80035ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d0:	e002      	b.n	80035d8 <LoopCopyDataInit>

080035d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d6:	3304      	adds	r3, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035dc:	d3f9      	bcc.n	80035d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035e0:	4c0a      	ldr	r4, [pc, #40]	; (800360c <LoopForever+0x16>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e4:	e001      	b.n	80035ea <LoopFillZerobss>

080035e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e8:	3204      	adds	r2, #4

080035ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ec:	d3fb      	bcc.n	80035e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035ee:	f007 faa5 	bl	800ab3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035f2:	f7fe feb5 	bl	8002360 <main>

080035f6 <LoopForever>:

LoopForever:
  b LoopForever
 80035f6:	e7fe      	b.n	80035f6 <LoopForever>
  ldr   r0, =_estack
 80035f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80035fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003600:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003604:	0800ea40 	.word	0x0800ea40
  ldr r2, =_sbss
 8003608:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800360c:	20002218 	.word	0x20002218

08003610 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003610:	e7fe      	b.n	8003610 <ADC1_IRQHandler>
	...

08003614 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_Init+0x3c>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_Init+0x3c>)
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	0049      	lsls	r1, r1, #1
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800362e:	2003      	movs	r0, #3
 8003630:	f7ff fe0a 	bl	8003248 <HAL_InitTick>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d003      	beq.n	8003640 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003638:	1dfb      	adds	r3, r7, #7
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e001      	b.n	8003644 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003640:	f7ff faea 	bl	8002c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003644:	1dfb      	adds	r3, r7, #7
 8003646:	781b      	ldrb	r3, [r3, #0]
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40022000 	.word	0x40022000

08003654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_IncTick+0x1c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	001a      	movs	r2, r3
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_IncTick+0x20>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	18d2      	adds	r2, r2, r3
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_IncTick+0x20>)
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000008 	.word	0x20000008
 8003674:	200006e8 	.word	0x200006e8

08003678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  return uwTick;
 800367c:	4b02      	ldr	r3, [pc, #8]	; (8003688 <HAL_GetTick+0x10>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	200006e8 	.word	0x200006e8

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff fff0 	bl	8003678 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	001a      	movs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	189b      	adds	r3, r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	f7ff ffe0 	bl	8003678 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	20000008 	.word	0x20000008

080036d4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a06      	ldr	r2, [pc, #24]	; (80036fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	40010000 	.word	0x40010000
 80036fc:	fffff9ff 	.word	0xfffff9ff

08003700 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003710:	401a      	ands	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	fe3fffff 	.word	0xfe3fffff

08003728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	23e0      	movs	r3, #224	; 0xe0
 8003736:	045b      	lsls	r3, r3, #17
 8003738:	4013      	ands	r3, r2
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}

08003742 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	2104      	movs	r1, #4
 8003756:	400a      	ands	r2, r1
 8003758:	2107      	movs	r1, #7
 800375a:	4091      	lsls	r1, r2
 800375c:	000a      	movs	r2, r1
 800375e:	43d2      	mvns	r2, r2
 8003760:	401a      	ands	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2104      	movs	r1, #4
 8003766:	400b      	ands	r3, r1
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4099      	lsls	r1, r3
 800376c:	000b      	movs	r3, r1
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b004      	add	sp, #16
 800377a:	bd80      	pop	{r7, pc}

0800377c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	2104      	movs	r1, #4
 800378e:	400a      	ands	r2, r1
 8003790:	2107      	movs	r1, #7
 8003792:	4091      	lsls	r1, r2
 8003794:	000a      	movs	r2, r1
 8003796:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2104      	movs	r1, #4
 800379c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800379e:	40da      	lsrs	r2, r3
 80037a0:	0013      	movs	r3, r2
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b002      	add	sp, #8
 80037a8:	bd80      	pop	{r7, pc}

080037aa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	211f      	movs	r1, #31
 80037be:	400a      	ands	r2, r1
 80037c0:	210f      	movs	r1, #15
 80037c2:	4091      	lsls	r1, r2
 80037c4:	000a      	movs	r2, r1
 80037c6:	43d2      	mvns	r2, r2
 80037c8:	401a      	ands	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0e9b      	lsrs	r3, r3, #26
 80037ce:	210f      	movs	r1, #15
 80037d0:	4019      	ands	r1, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	201f      	movs	r0, #31
 80037d6:	4003      	ands	r3, r0
 80037d8:	4099      	lsls	r1, r3
 80037da:	000b      	movs	r3, r1
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bd80      	pop	{r7, pc}

080037ea <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	035b      	lsls	r3, r3, #13
 80037fc:	0b5b      	lsrs	r3, r3, #13
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	0352      	lsls	r2, r2, #13
 800381e:	0b52      	lsrs	r2, r2, #13
 8003820:	43d2      	mvns	r2, r2
 8003822:	401a      	ands	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	0212      	lsls	r2, r2, #8
 8003844:	43d2      	mvns	r2, r2
 8003846:	401a      	ands	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	400b      	ands	r3, r1
 8003850:	4904      	ldr	r1, [pc, #16]	; (8003864 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003852:	400b      	ands	r3, r1
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	07ffff00 	.word	0x07ffff00

08003868 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a05      	ldr	r2, [pc, #20]	; (800388c <LL_ADC_EnableInternalRegulator+0x24>)
 8003876:	4013      	ands	r3, r2
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	0552      	lsls	r2, r2, #21
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	6fffffe8 	.word	0x6fffffe8

08003890 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	055b      	lsls	r3, r3, #21
 80038a0:	401a      	ands	r2, r3
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	055b      	lsls	r3, r3, #21
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d101      	bne.n	80038ae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2201      	movs	r2, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <LL_ADC_IsEnabled+0x18>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <LL_ADC_IsEnabled+0x1a>
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b002      	add	sp, #8
 80038d8:	bd80      	pop	{r7, pc}

080038da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2204      	movs	r2, #4
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d101      	bne.n	80038f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003904:	231f      	movs	r3, #31
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e17f      	b.n	8003c22 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff f9a3 	bl	8002c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2254      	movs	r2, #84	; 0x54
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff ffa3 	bl	8003890 <LL_ADC_IsInternalRegulatorEnabled>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d115      	bne.n	800397a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff ff88 	bl	8003868 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003958:	4bb4      	ldr	r3, [pc, #720]	; (8003c2c <HAL_ADC_Init+0x330>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	49b4      	ldr	r1, [pc, #720]	; (8003c30 <HAL_ADC_Init+0x334>)
 800395e:	0018      	movs	r0, r3
 8003960:	f7fc fbee 	bl	8000140 <__udivsi3>
 8003964:	0003      	movs	r3, r0
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800396c:	e002      	b.n	8003974 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3b01      	subs	r3, #1
 8003972:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f9      	bne.n	800396e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff ff86 	bl	8003890 <LL_ADC_IsInternalRegulatorEnabled>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	2210      	movs	r2, #16
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2201      	movs	r2, #1
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039a0:	231f      	movs	r3, #31
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7ff ff94 	bl	80038da <LL_ADC_REG_IsConversionOngoing>
 80039b2:	0003      	movs	r3, r0
 80039b4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	2210      	movs	r2, #16
 80039bc:	4013      	ands	r3, r2
 80039be:	d000      	beq.n	80039c2 <HAL_ADC_Init+0xc6>
 80039c0:	e122      	b.n	8003c08 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d000      	beq.n	80039ca <HAL_ADC_Init+0xce>
 80039c8:	e11e      	b.n	8003c08 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	4a99      	ldr	r2, [pc, #612]	; (8003c34 <HAL_ADC_Init+0x338>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	2202      	movs	r2, #2
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	0018      	movs	r0, r3
 80039e0:	f7ff ff6a 	bl	80038b8 <LL_ADC_IsEnabled>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d000      	beq.n	80039ea <HAL_ADC_Init+0xee>
 80039e8:	e0ad      	b.n	8003b46 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7e1b      	ldrb	r3, [r3, #24]
 80039f2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80039f4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7e5b      	ldrb	r3, [r3, #25]
 80039fa:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039fc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7e9b      	ldrb	r3, [r3, #26]
 8003a02:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a04:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_ADC_Init+0x118>
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	015b      	lsls	r3, r3, #5
 8003a12:	e000      	b.n	8003a16 <HAL_ADC_Init+0x11a>
 8003a14:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a16:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a1c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da04      	bge.n	8003a30 <HAL_ADC_Init+0x134>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	e001      	b.n	8003a34 <HAL_ADC_Init+0x138>
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003a34:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	5c5b      	ldrb	r3, [r3, r1]
 8003a3c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a3e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	5c9b      	ldrb	r3, [r3, r2]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d115      	bne.n	8003a7c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7e9b      	ldrb	r3, [r3, #26]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	0252      	lsls	r2, r2, #9
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	e00b      	b.n	8003a7c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	2220      	movs	r2, #32
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a74:	2201      	movs	r2, #1
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a88:	23e0      	movs	r3, #224	; 0xe0
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a92:	4313      	orrs	r3, r2
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a65      	ldr	r2, [pc, #404]	; (8003c38 <HAL_ADC_Init+0x33c>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0f9b      	lsrs	r3, r3, #30
 8003ab6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003abc:	4313      	orrs	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	223c      	movs	r2, #60	; 0x3c
 8003ac8:	5c9b      	ldrb	r3, [r3, r2]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d111      	bne.n	8003af2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	0f9b      	lsrs	r3, r3, #30
 8003ad4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ada:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003ae0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003ae6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	2201      	movs	r2, #1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	4a50      	ldr	r2, [pc, #320]	; (8003c3c <HAL_ADC_Init+0x340>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	23c0      	movs	r3, #192	; 0xc0
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d018      	beq.n	8003b46 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d012      	beq.n	8003b46 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d00c      	beq.n	8003b46 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003b2c:	4b44      	ldr	r3, [pc, #272]	; (8003c40 <HAL_ADC_Init+0x344>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a44      	ldr	r2, [pc, #272]	; (8003c44 <HAL_ADC_Init+0x348>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	23f0      	movs	r3, #240	; 0xf0
 8003b3c:	039b      	lsls	r3, r3, #14
 8003b3e:	401a      	ands	r2, r3
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <HAL_ADC_Init+0x344>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	001a      	movs	r2, r3
 8003b50:	2100      	movs	r1, #0
 8003b52:	f7ff fdf6 	bl	8003742 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	493a      	ldr	r1, [pc, #232]	; (8003c48 <HAL_ADC_Init+0x34c>)
 8003b60:	001a      	movs	r2, r3
 8003b62:	f7ff fdee 	bl	8003742 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2110      	movs	r1, #16
 8003b7a:	4249      	negs	r1, r1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b80:	e018      	b.n	8003bb4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	039b      	lsls	r3, r3, #14
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d112      	bne.n	8003bb4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	221c      	movs	r2, #28
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	4252      	negs	r2, r2
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	0011      	movs	r1, r2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7ff fdde 	bl	800377c <LL_ADC_GetSamplingTimeCommonChannels>
 8003bc0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d10b      	bne.n	8003be2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	4393      	bics	r3, r2
 8003bd8:	2201      	movs	r2, #1
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003be0:	e01c      	b.n	8003c1c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	2212      	movs	r2, #18
 8003be8:	4393      	bics	r3, r2
 8003bea:	2210      	movs	r2, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003bfe:	231f      	movs	r3, #31
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c06:	e009      	b.n	8003c1c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c14:	231f      	movs	r3, #31
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003c1c:	231f      	movs	r3, #31
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	781b      	ldrb	r3, [r3, #0]
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b008      	add	sp, #32
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	00030d40 	.word	0x00030d40
 8003c34:	fffffefd 	.word	0xfffffefd
 8003c38:	fffe0201 	.word	0xfffe0201
 8003c3c:	1ffffc02 	.word	0x1ffffc02
 8003c40:	40012708 	.word	0x40012708
 8003c44:	ffc3ffff 	.word	0xffc3ffff
 8003c48:	07ffff04 	.word	0x07ffff04

08003c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c56:	2317      	movs	r3, #23
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2254      	movs	r2, #84	; 0x54
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x24>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e1c0      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x3a6>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2254      	movs	r2, #84	; 0x54
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7ff fe2c 	bl	80038da <LL_ADC_REG_IsConversionOngoing>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d000      	beq.n	8003c88 <HAL_ADC_ConfigChannel+0x3c>
 8003c86:	e1a3      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d100      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x46>
 8003c90:	e143      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ca2:	4ac1      	ldr	r2, [pc, #772]	; (8003fa8 <HAL_ADC_ConfigChannel+0x35c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d108      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	0010      	movs	r0, r2
 8003cb4:	f7ff fd99 	bl	80037ea <LL_ADC_REG_SetSequencerChAdd>
 8003cb8:	e0c9      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	211f      	movs	r1, #31
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	4099      	lsls	r1, r3
 8003cca:	000b      	movs	r3, r1
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	4013      	ands	r3, r2
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	035b      	lsls	r3, r3, #13
 8003cd8:	0b5b      	lsrs	r3, r3, #13
 8003cda:	d105      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x9c>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	221f      	movs	r2, #31
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	e098      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d000      	beq.n	8003cf4 <HAL_ADC_ConfigChannel+0xa8>
 8003cf2:	e091      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x1cc>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d000      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0xb4>
 8003cfe:	e089      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x1c8>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2204      	movs	r2, #4
 8003d06:	4013      	ands	r3, r2
 8003d08:	d000      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0xc0>
 8003d0a:	e081      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x1c4>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2208      	movs	r2, #8
 8003d12:	4013      	ands	r3, r2
 8003d14:	d000      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0xcc>
 8003d16:	e079      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x1c0>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d000      	beq.n	8003d24 <HAL_ADC_ConfigChannel+0xd8>
 8003d22:	e071      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x1bc>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d000      	beq.n	8003d30 <HAL_ADC_ConfigChannel+0xe4>
 8003d2e:	e069      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x1b8>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2240      	movs	r2, #64	; 0x40
 8003d36:	4013      	ands	r3, r2
 8003d38:	d000      	beq.n	8003d3c <HAL_ADC_ConfigChannel+0xf0>
 8003d3a:	e061      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x1b4>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	4013      	ands	r3, r2
 8003d44:	d000      	beq.n	8003d48 <HAL_ADC_ConfigChannel+0xfc>
 8003d46:	e059      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x1b0>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4013      	ands	r3, r2
 8003d52:	d151      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1ac>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d149      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x1a8>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d141      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x1a4>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	4013      	ands	r3, r2
 8003d76:	d139      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x1a0>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	015b      	lsls	r3, r3, #5
 8003d80:	4013      	ands	r3, r2
 8003d82:	d131      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x19c>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	019b      	lsls	r3, r3, #6
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d129      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x198>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d121      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x194>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	4013      	ands	r3, r2
 8003da6:	d119      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x190>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	025b      	lsls	r3, r3, #9
 8003db0:	4013      	ands	r3, r2
 8003db2:	d111      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x18c>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	029b      	lsls	r3, r3, #10
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d109      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x188>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	02db      	lsls	r3, r3, #11
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d001      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0x184>
 8003dcc:	2312      	movs	r3, #18
 8003dce:	e024      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e022      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003dd4:	2311      	movs	r3, #17
 8003dd6:	e020      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	e01e      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003ddc:	230f      	movs	r3, #15
 8003dde:	e01c      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003de0:	230e      	movs	r3, #14
 8003de2:	e01a      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003de4:	230d      	movs	r3, #13
 8003de6:	e018      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003de8:	230c      	movs	r3, #12
 8003dea:	e016      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003dec:	230b      	movs	r3, #11
 8003dee:	e014      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003df0:	230a      	movs	r3, #10
 8003df2:	e012      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003df4:	2309      	movs	r3, #9
 8003df6:	e010      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003df8:	2308      	movs	r3, #8
 8003dfa:	e00e      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003dfc:	2307      	movs	r3, #7
 8003dfe:	e00c      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003e00:	2306      	movs	r3, #6
 8003e02:	e00a      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003e04:	2305      	movs	r3, #5
 8003e06:	e008      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e006      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e004      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e002      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x1ce>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	6852      	ldr	r2, [r2, #4]
 8003e1e:	201f      	movs	r0, #31
 8003e20:	4002      	ands	r2, r0
 8003e22:	4093      	lsls	r3, r2
 8003e24:	000a      	movs	r2, r1
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d808      	bhi.n	8003e4e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	001a      	movs	r2, r3
 8003e4a:	f7ff fcae 	bl	80037aa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	f7ff fce8 	bl	8003830 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	db00      	blt.n	8003e6a <HAL_ADC_ConfigChannel+0x21e>
 8003e68:	e0bc      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e6a:	4b50      	ldr	r3, [pc, #320]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7ff fc5b 	bl	8003728 <LL_ADC_GetCommonPathInternalCh>
 8003e72:	0003      	movs	r3, r0
 8003e74:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4d      	ldr	r2, [pc, #308]	; (8003fb0 <HAL_ADC_ConfigChannel+0x364>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d122      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e88:	d11d      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	0412      	lsls	r2, r2, #16
 8003e90:	4313      	orrs	r3, r2
 8003e92:	4a46      	ldr	r2, [pc, #280]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003e94:	0019      	movs	r1, r3
 8003e96:	0010      	movs	r0, r2
 8003e98:	f7ff fc32 	bl	8003700 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e9c:	4b45      	ldr	r3, [pc, #276]	; (8003fb4 <HAL_ADC_ConfigChannel+0x368>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4945      	ldr	r1, [pc, #276]	; (8003fb8 <HAL_ADC_ConfigChannel+0x36c>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7fc f94c 	bl	8000140 <__udivsi3>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	0013      	movs	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eb6:	e002      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ec4:	e08e      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <HAL_ADC_ConfigChannel+0x370>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d10e      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	045b      	lsls	r3, r3, #17
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d109      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	0452      	lsls	r2, r2, #17
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	4a32      	ldr	r2, [pc, #200]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f7ff fc0a 	bl	8003700 <LL_ADC_SetCommonPathInternalCh>
 8003eec:	e07a      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a33      	ldr	r2, [pc, #204]	; (8003fc0 <HAL_ADC_ConfigChannel+0x374>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d000      	beq.n	8003efa <HAL_ADC_ConfigChannel+0x2ae>
 8003ef8:	e074      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	03db      	lsls	r3, r3, #15
 8003f00:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003f02:	d000      	beq.n	8003f06 <HAL_ADC_ConfigChannel+0x2ba>
 8003f04:	e06e      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	03d2      	lsls	r2, r2, #15
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	4a27      	ldr	r2, [pc, #156]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003f10:	0019      	movs	r1, r3
 8003f12:	0010      	movs	r0, r2
 8003f14:	f7ff fbf4 	bl	8003700 <LL_ADC_SetCommonPathInternalCh>
 8003f18:	e064      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d004      	beq.n	8003f30 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_ADC_ConfigChannel+0x35c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d107      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0019      	movs	r1, r3
 8003f3a:	0010      	movs	r0, r2
 8003f3c:	f7ff fc66 	bl	800380c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	da4d      	bge.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f48:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff fbec 	bl	8003728 <LL_ADC_GetCommonPathInternalCh>
 8003f50:	0003      	movs	r3, r0
 8003f52:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_ADC_ConfigChannel+0x364>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_ADC_ConfigChannel+0x378>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	4a11      	ldr	r2, [pc, #68]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003f66:	0019      	movs	r1, r3
 8003f68:	0010      	movs	r0, r2
 8003f6a:	f7ff fbc9 	bl	8003700 <LL_ADC_SetCommonPathInternalCh>
 8003f6e:	e039      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <HAL_ADC_ConfigChannel+0x370>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <HAL_ADC_ConfigChannel+0x37c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003f82:	0019      	movs	r1, r3
 8003f84:	0010      	movs	r0, r2
 8003f86:	f7ff fbbb 	bl	8003700 <LL_ADC_SetCommonPathInternalCh>
 8003f8a:	e02b      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <HAL_ADC_ConfigChannel+0x374>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d126      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_ADC_ConfigChannel+0x380>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <HAL_ADC_ConfigChannel+0x360>)
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	0010      	movs	r0, r2
 8003fa2:	f7ff fbad 	bl	8003700 <LL_ADC_SetCommonPathInternalCh>
 8003fa6:	e01d      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x398>
 8003fa8:	80000004 	.word	0x80000004
 8003fac:	40012708 	.word	0x40012708
 8003fb0:	b0001000 	.word	0xb0001000
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	00030d40 	.word	0x00030d40
 8003fbc:	b8004000 	.word	0xb8004000
 8003fc0:	b4002000 	.word	0xb4002000
 8003fc4:	ff7fffff 	.word	0xff7fffff
 8003fc8:	feffffff 	.word	0xfeffffff
 8003fcc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fdc:	2317      	movs	r3, #23
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2254      	movs	r2, #84	; 0x54
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003fec:	2317      	movs	r3, #23
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b006      	add	sp, #24
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)

08003ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	0002      	movs	r2, r0
 8004004:	1dfb      	adds	r3, r7, #7
 8004006:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004008:	1dfb      	adds	r3, r7, #7
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b7f      	cmp	r3, #127	; 0x7f
 800400e:	d809      	bhi.n	8004024 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004010:	1dfb      	adds	r3, r7, #7
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	001a      	movs	r2, r3
 8004016:	231f      	movs	r3, #31
 8004018:	401a      	ands	r2, r3
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <__NVIC_EnableIRQ+0x30>)
 800401c:	2101      	movs	r1, #1
 800401e:	4091      	lsls	r1, r2
 8004020:	000a      	movs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}
 800402c:	e000e100 	.word	0xe000e100

08004030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	0002      	movs	r2, r0
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b7f      	cmp	r3, #127	; 0x7f
 8004044:	d828      	bhi.n	8004098 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <__NVIC_SetPriority+0xd4>)
 8004048:	1dfb      	adds	r3, r7, #7
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	b25b      	sxtb	r3, r3
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	33c0      	adds	r3, #192	; 0xc0
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	589b      	ldr	r3, [r3, r2]
 8004056:	1dfa      	adds	r2, r7, #7
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	0011      	movs	r1, r2
 800405c:	2203      	movs	r2, #3
 800405e:	400a      	ands	r2, r1
 8004060:	00d2      	lsls	r2, r2, #3
 8004062:	21ff      	movs	r1, #255	; 0xff
 8004064:	4091      	lsls	r1, r2
 8004066:	000a      	movs	r2, r1
 8004068:	43d2      	mvns	r2, r2
 800406a:	401a      	ands	r2, r3
 800406c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	401a      	ands	r2, r3
 8004076:	1dfb      	adds	r3, r7, #7
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	0018      	movs	r0, r3
 800407c:	2303      	movs	r3, #3
 800407e:	4003      	ands	r3, r0
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004084:	481f      	ldr	r0, [pc, #124]	; (8004104 <__NVIC_SetPriority+0xd4>)
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b25b      	sxtb	r3, r3
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	430a      	orrs	r2, r1
 8004090:	33c0      	adds	r3, #192	; 0xc0
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004096:	e031      	b.n	80040fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <__NVIC_SetPriority+0xd8>)
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	0019      	movs	r1, r3
 80040a0:	230f      	movs	r3, #15
 80040a2:	400b      	ands	r3, r1
 80040a4:	3b08      	subs	r3, #8
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	3306      	adds	r3, #6
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	18d3      	adds	r3, r2, r3
 80040ae:	3304      	adds	r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1dfa      	adds	r2, r7, #7
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	0011      	movs	r1, r2
 80040b8:	2203      	movs	r2, #3
 80040ba:	400a      	ands	r2, r1
 80040bc:	00d2      	lsls	r2, r2, #3
 80040be:	21ff      	movs	r1, #255	; 0xff
 80040c0:	4091      	lsls	r1, r2
 80040c2:	000a      	movs	r2, r1
 80040c4:	43d2      	mvns	r2, r2
 80040c6:	401a      	ands	r2, r3
 80040c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	401a      	ands	r2, r3
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	0018      	movs	r0, r3
 80040d8:	2303      	movs	r3, #3
 80040da:	4003      	ands	r3, r0
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040e0:	4809      	ldr	r0, [pc, #36]	; (8004108 <__NVIC_SetPriority+0xd8>)
 80040e2:	1dfb      	adds	r3, r7, #7
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	001c      	movs	r4, r3
 80040e8:	230f      	movs	r3, #15
 80040ea:	4023      	ands	r3, r4
 80040ec:	3b08      	subs	r3, #8
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	430a      	orrs	r2, r1
 80040f2:	3306      	adds	r3, #6
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	18c3      	adds	r3, r0, r3
 80040f8:	3304      	adds	r3, #4
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b003      	add	sp, #12
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	e000e100 	.word	0xe000e100
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	210f      	movs	r1, #15
 8004118:	187b      	adds	r3, r7, r1
 800411a:	1c02      	adds	r2, r0, #0
 800411c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	187b      	adds	r3, r7, r1
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b25b      	sxtb	r3, r3
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff ff81 	bl	8004030 <__NVIC_SetPriority>
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	0002      	movs	r2, r0
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004142:	1dfb      	adds	r3, r7, #7
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b25b      	sxtb	r3, r3
 8004148:	0018      	movs	r0, r3
 800414a:	f7ff ff57 	bl	8003ffc <__NVIC_EnableIRQ>
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b002      	add	sp, #8
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e077      	b.n	800425a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a3d      	ldr	r2, [pc, #244]	; (8004264 <HAL_DMA_Init+0x10c>)
 8004170:	4694      	mov	ip, r2
 8004172:	4463      	add	r3, ip
 8004174:	2114      	movs	r1, #20
 8004176:	0018      	movs	r0, r3
 8004178:	f7fb ffe2 	bl	8000140 <__udivsi3>
 800417c:	0003      	movs	r3, r0
 800417e:	009a      	lsls	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2225      	movs	r2, #37	; 0x25
 8004188:	2102      	movs	r1, #2
 800418a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4934      	ldr	r1, [pc, #208]	; (8004268 <HAL_DMA_Init+0x110>)
 8004198:	400a      	ands	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f000 f9c7 	bl	8004568 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	01db      	lsls	r3, r3, #7
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d102      	bne.n	80041ec <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	213f      	movs	r1, #63	; 0x3f
 80041f6:	400a      	ands	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004202:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <HAL_DMA_Init+0xd8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d80d      	bhi.n	8004230 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	0018      	movs	r0, r3
 8004218:	f000 f9d2 	bl	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	e008      	b.n	8004242 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2225      	movs	r2, #37	; 0x25
 800424c:	2101      	movs	r1, #1
 800424e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	; 0x24
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b002      	add	sp, #8
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	bffdfff8 	.word	0xbffdfff8
 8004268:	ffff800f 	.word	0xffff800f

0800426c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e050      	b.n	8004320 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2225      	movs	r2, #37	; 0x25
 8004282:	5c9b      	ldrb	r3, [r3, r2]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d008      	beq.n	800429c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e041      	b.n	8004320 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	210e      	movs	r1, #14
 80042a8:	438a      	bics	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	491c      	ldr	r1, [pc, #112]	; (8004328 <HAL_DMA_Abort+0xbc>)
 80042b8:	400a      	ands	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2101      	movs	r1, #1
 80042c8:	438a      	bics	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80042cc:	4b17      	ldr	r3, [pc, #92]	; (800432c <HAL_DMA_Abort+0xc0>)
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	221c      	movs	r2, #28
 80042d6:	4013      	ands	r3, r2
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_DMA_Abort+0xc0>)
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00c      	beq.n	800430e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	490a      	ldr	r1, [pc, #40]	; (8004328 <HAL_DMA_Abort+0xbc>)
 8004300:	400a      	ands	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800430c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2225      	movs	r2, #37	; 0x25
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	; 0x24
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}
 8004328:	fffffeff 	.word	0xfffffeff
 800432c:	40020000 	.word	0x40020000

08004330 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	210f      	movs	r1, #15
 800433a:	187b      	adds	r3, r7, r1
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2225      	movs	r2, #37	; 0x25
 8004344:	5c9b      	ldrb	r3, [r3, r2]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d006      	beq.n	800435a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2204      	movs	r2, #4
 8004350:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004352:	187b      	adds	r3, r7, r1
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e049      	b.n	80043ee <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	210e      	movs	r1, #14
 8004366:	438a      	bics	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	438a      	bics	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	491d      	ldr	r1, [pc, #116]	; (80043fc <HAL_DMA_Abort_IT+0xcc>)
 8004386:	400a      	ands	r2, r1
 8004388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <HAL_DMA_Abort_IT+0xd0>)
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	221c      	movs	r2, #28
 8004394:	4013      	ands	r3, r2
 8004396:	2201      	movs	r2, #1
 8004398:	409a      	lsls	r2, r3
 800439a:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_DMA_Abort_IT+0xd0>)
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	490f      	ldr	r1, [pc, #60]	; (80043fc <HAL_DMA_Abort_IT+0xcc>)
 80043be:	400a      	ands	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2225      	movs	r2, #37	; 0x25
 80043d0:	2101      	movs	r1, #1
 80043d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2224      	movs	r2, #36	; 0x24
 80043d8:	2100      	movs	r1, #0
 80043da:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	0010      	movs	r0, r2
 80043ec:	4798      	blx	r3
    }
  }
  return status;
 80043ee:	230f      	movs	r3, #15
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	781b      	ldrb	r3, [r3, #0]
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b004      	add	sp, #16
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	fffffeff 	.word	0xfffffeff
 8004400:	40020000 	.word	0x40020000

08004404 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800440c:	4b55      	ldr	r3, [pc, #340]	; (8004564 <HAL_DMA_IRQHandler+0x160>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	221c      	movs	r2, #28
 8004420:	4013      	ands	r3, r2
 8004422:	2204      	movs	r2, #4
 8004424:	409a      	lsls	r2, r3
 8004426:	0013      	movs	r3, r2
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4013      	ands	r3, r2
 800442c:	d027      	beq.n	800447e <HAL_DMA_IRQHandler+0x7a>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2204      	movs	r2, #4
 8004432:	4013      	ands	r3, r2
 8004434:	d023      	beq.n	800447e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2220      	movs	r2, #32
 800443e:	4013      	ands	r3, r2
 8004440:	d107      	bne.n	8004452 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2104      	movs	r1, #4
 800444e:	438a      	bics	r2, r1
 8004450:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <HAL_DMA_IRQHandler+0x160>)
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	221c      	movs	r2, #28
 800445c:	4013      	ands	r3, r2
 800445e:	2204      	movs	r2, #4
 8004460:	409a      	lsls	r2, r3
 8004462:	4b40      	ldr	r3, [pc, #256]	; (8004564 <HAL_DMA_IRQHandler+0x160>)
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	2b00      	cmp	r3, #0
 800446e:	d100      	bne.n	8004472 <HAL_DMA_IRQHandler+0x6e>
 8004470:	e073      	b.n	800455a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	0010      	movs	r0, r2
 800447a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800447c:	e06d      	b.n	800455a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	221c      	movs	r2, #28
 8004484:	4013      	ands	r3, r2
 8004486:	2202      	movs	r2, #2
 8004488:	409a      	lsls	r2, r3
 800448a:	0013      	movs	r3, r2
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4013      	ands	r3, r2
 8004490:	d02e      	beq.n	80044f0 <HAL_DMA_IRQHandler+0xec>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2202      	movs	r2, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d02a      	beq.n	80044f0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2220      	movs	r2, #32
 80044a2:	4013      	ands	r3, r2
 80044a4:	d10b      	bne.n	80044be <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	210a      	movs	r1, #10
 80044b2:	438a      	bics	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2225      	movs	r2, #37	; 0x25
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_DMA_IRQHandler+0x160>)
 80044c0:	6859      	ldr	r1, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	221c      	movs	r2, #28
 80044c8:	4013      	ands	r3, r2
 80044ca:	2202      	movs	r2, #2
 80044cc:	409a      	lsls	r2, r3
 80044ce:	4b25      	ldr	r3, [pc, #148]	; (8004564 <HAL_DMA_IRQHandler+0x160>)
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	; 0x24
 80044d8:	2100      	movs	r1, #0
 80044da:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d03a      	beq.n	800455a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	0010      	movs	r0, r2
 80044ec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80044ee:	e034      	b.n	800455a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	221c      	movs	r2, #28
 80044f6:	4013      	ands	r3, r2
 80044f8:	2208      	movs	r2, #8
 80044fa:	409a      	lsls	r2, r3
 80044fc:	0013      	movs	r3, r2
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4013      	ands	r3, r2
 8004502:	d02b      	beq.n	800455c <HAL_DMA_IRQHandler+0x158>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2208      	movs	r2, #8
 8004508:	4013      	ands	r3, r2
 800450a:	d027      	beq.n	800455c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	210e      	movs	r1, #14
 8004518:	438a      	bics	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_DMA_IRQHandler+0x160>)
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	221c      	movs	r2, #28
 8004526:	4013      	ands	r3, r2
 8004528:	2201      	movs	r2, #1
 800452a:	409a      	lsls	r2, r3
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_DMA_IRQHandler+0x160>)
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2225      	movs	r2, #37	; 0x25
 800453c:	2101      	movs	r1, #1
 800453e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	2100      	movs	r1, #0
 8004546:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	0010      	movs	r0, r2
 8004558:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46c0      	nop			; (mov r8, r8)
}
 800455e:	46bd      	mov	sp, r7
 8004560:	b004      	add	sp, #16
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40020000 	.word	0x40020000

08004568 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	089b      	lsrs	r3, r3, #2
 8004576:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004578:	4694      	mov	ip, r2
 800457a:	4463      	add	r3, ip
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	001a      	movs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	001a      	movs	r2, r3
 800458a:	23ff      	movs	r3, #255	; 0xff
 800458c:	4013      	ands	r3, r2
 800458e:	3b08      	subs	r3, #8
 8004590:	2114      	movs	r1, #20
 8004592:	0018      	movs	r0, r3
 8004594:	f7fb fdd4 	bl	8000140 <__udivsi3>
 8004598:	0003      	movs	r3, r0
 800459a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a07      	ldr	r2, [pc, #28]	; (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80045a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	221f      	movs	r2, #31
 80045a6:	4013      	ands	r3, r2
 80045a8:	2201      	movs	r2, #1
 80045aa:	409a      	lsls	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	10008200 	.word	0x10008200
 80045bc:	40020880 	.word	0x40020880

080045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	223f      	movs	r2, #63	; 0x3f
 80045ce:	4013      	ands	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045d6:	4694      	mov	ip, r2
 80045d8:	4463      	add	r3, ip
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	001a      	movs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a07      	ldr	r2, [pc, #28]	; (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	2203      	movs	r2, #3
 80045ee:	4013      	ands	r3, r2
 80045f0:	2201      	movs	r2, #1
 80045f2:	409a      	lsls	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b004      	add	sp, #16
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	1000823f 	.word	0x1000823f
 8004604:	40020940 	.word	0x40020940

08004608 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	4013      	ands	r3, r2
 800461c:	d01c      	beq.n	8004658 <HAL_DMAEx_MUX_IRQHandler+0x50>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	4921      	ldr	r1, [pc, #132]	; (80046b0 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 800462a:	400a      	ands	r2, r1
 800462c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	2280      	movs	r2, #128	; 0x80
 800463e:	0092      	lsls	r2, r2, #2
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <HAL_DMAEx_MUX_IRQHandler+0x50>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	0010      	movs	r0, r2
 8004656:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	2b00      	cmp	r3, #0
 800465e:	d023      	beq.n	80046a8 <HAL_DMAEx_MUX_IRQHandler+0xa0>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	4013      	ands	r3, r2
 800466c:	d01c      	beq.n	80046a8 <HAL_DMAEx_MUX_IRQHandler+0xa0>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	490d      	ldr	r1, [pc, #52]	; (80046b0 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004686:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468c:	2280      	movs	r2, #128	; 0x80
 800468e:	00d2      	lsls	r2, r2, #3
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_DMAEx_MUX_IRQHandler+0xa0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	0010      	movs	r0, r2
 80046a6:	4798      	blx	r3
      }
    }
  }
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	fffffeff 	.word	0xfffffeff

080046b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046c2:	e147      	b.n	8004954 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4091      	lsls	r1, r2
 80046ce:	000a      	movs	r2, r1
 80046d0:	4013      	ands	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d100      	bne.n	80046dc <HAL_GPIO_Init+0x28>
 80046da:	e138      	b.n	800494e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2203      	movs	r2, #3
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d005      	beq.n	80046f4 <HAL_GPIO_Init+0x40>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2203      	movs	r2, #3
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d130      	bne.n	8004756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	409a      	lsls	r2, r3
 8004702:	0013      	movs	r3, r2
 8004704:	43da      	mvns	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	409a      	lsls	r2, r3
 8004716:	0013      	movs	r3, r2
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800472a:	2201      	movs	r2, #1
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	409a      	lsls	r2, r3
 8004730:	0013      	movs	r3, r2
 8004732:	43da      	mvns	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	2201      	movs	r2, #1
 8004742:	401a      	ands	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	409a      	lsls	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2203      	movs	r2, #3
 800475c:	4013      	ands	r3, r2
 800475e:	2b03      	cmp	r3, #3
 8004760:	d017      	beq.n	8004792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	2203      	movs	r2, #3
 800476e:	409a      	lsls	r2, r3
 8004770:	0013      	movs	r3, r2
 8004772:	43da      	mvns	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2203      	movs	r2, #3
 8004798:	4013      	ands	r3, r2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d123      	bne.n	80047e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	08da      	lsrs	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3208      	adds	r2, #8
 80047a6:	0092      	lsls	r2, r2, #2
 80047a8:	58d3      	ldr	r3, [r2, r3]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2207      	movs	r2, #7
 80047b0:	4013      	ands	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	220f      	movs	r2, #15
 80047b6:	409a      	lsls	r2, r3
 80047b8:	0013      	movs	r3, r2
 80047ba:	43da      	mvns	r2, r3
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2107      	movs	r1, #7
 80047ca:	400b      	ands	r3, r1
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	409a      	lsls	r2, r3
 80047d0:	0013      	movs	r3, r2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	08da      	lsrs	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3208      	adds	r2, #8
 80047e0:	0092      	lsls	r2, r2, #2
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	2203      	movs	r2, #3
 80047f2:	409a      	lsls	r2, r3
 80047f4:	0013      	movs	r3, r2
 80047f6:	43da      	mvns	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2203      	movs	r2, #3
 8004804:	401a      	ands	r2, r3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	409a      	lsls	r2, r3
 800480c:	0013      	movs	r3, r2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	23c0      	movs	r3, #192	; 0xc0
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	4013      	ands	r3, r2
 8004824:	d100      	bne.n	8004828 <HAL_GPIO_Init+0x174>
 8004826:	e092      	b.n	800494e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004828:	4a50      	ldr	r2, [pc, #320]	; (800496c <HAL_GPIO_Init+0x2b8>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	3318      	adds	r3, #24
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	589b      	ldr	r3, [r3, r2]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2203      	movs	r2, #3
 800483a:	4013      	ands	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	220f      	movs	r2, #15
 8004840:	409a      	lsls	r2, r3
 8004842:	0013      	movs	r3, r2
 8004844:	43da      	mvns	r2, r3
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	23a0      	movs	r3, #160	; 0xa0
 8004850:	05db      	lsls	r3, r3, #23
 8004852:	429a      	cmp	r2, r3
 8004854:	d013      	beq.n	800487e <HAL_GPIO_Init+0x1ca>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a45      	ldr	r2, [pc, #276]	; (8004970 <HAL_GPIO_Init+0x2bc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00d      	beq.n	800487a <HAL_GPIO_Init+0x1c6>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a44      	ldr	r2, [pc, #272]	; (8004974 <HAL_GPIO_Init+0x2c0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <HAL_GPIO_Init+0x1c2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a43      	ldr	r2, [pc, #268]	; (8004978 <HAL_GPIO_Init+0x2c4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_GPIO_Init+0x1be>
 800486e:	2303      	movs	r3, #3
 8004870:	e006      	b.n	8004880 <HAL_GPIO_Init+0x1cc>
 8004872:	2305      	movs	r3, #5
 8004874:	e004      	b.n	8004880 <HAL_GPIO_Init+0x1cc>
 8004876:	2302      	movs	r3, #2
 8004878:	e002      	b.n	8004880 <HAL_GPIO_Init+0x1cc>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_GPIO_Init+0x1cc>
 800487e:	2300      	movs	r3, #0
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	2103      	movs	r1, #3
 8004884:	400a      	ands	r2, r1
 8004886:	00d2      	lsls	r2, r2, #3
 8004888:	4093      	lsls	r3, r2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004890:	4936      	ldr	r1, [pc, #216]	; (800496c <HAL_GPIO_Init+0x2b8>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3318      	adds	r3, #24
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800489e:	4b33      	ldr	r3, [pc, #204]	; (800496c <HAL_GPIO_Init+0x2b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	43da      	mvns	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	035b      	lsls	r3, r3, #13
 80048b6:	4013      	ands	r3, r2
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048c2:	4b2a      	ldr	r3, [pc, #168]	; (800496c <HAL_GPIO_Init+0x2b8>)
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <HAL_GPIO_Init+0x2b8>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	039b      	lsls	r3, r3, #14
 80048e0:	4013      	ands	r3, r2
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048ec:	4b1f      	ldr	r3, [pc, #124]	; (800496c <HAL_GPIO_Init+0x2b8>)
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_GPIO_Init+0x2b8>)
 80048f4:	2384      	movs	r3, #132	; 0x84
 80048f6:	58d3      	ldr	r3, [r2, r3]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	43da      	mvns	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	029b      	lsls	r3, r3, #10
 800490c:	4013      	ands	r3, r2
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004918:	4914      	ldr	r1, [pc, #80]	; (800496c <HAL_GPIO_Init+0x2b8>)
 800491a:	2284      	movs	r2, #132	; 0x84
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004920:	4a12      	ldr	r2, [pc, #72]	; (800496c <HAL_GPIO_Init+0x2b8>)
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	58d3      	ldr	r3, [r2, r3]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43da      	mvns	r2, r3
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	025b      	lsls	r3, r3, #9
 800493a:	4013      	ands	r3, r2
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004946:	4909      	ldr	r1, [pc, #36]	; (800496c <HAL_GPIO_Init+0x2b8>)
 8004948:	2280      	movs	r2, #128	; 0x80
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	3301      	adds	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	40da      	lsrs	r2, r3
 800495c:	1e13      	subs	r3, r2, #0
 800495e:	d000      	beq.n	8004962 <HAL_GPIO_Init+0x2ae>
 8004960:	e6b0      	b.n	80046c4 <HAL_GPIO_Init+0x10>
  }
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b006      	add	sp, #24
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021800 	.word	0x40021800
 8004970:	50000400 	.word	0x50000400
 8004974:	50000800 	.word	0x50000800
 8004978:	50000c00 	.word	0x50000c00

0800497c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	0008      	movs	r0, r1
 8004986:	0011      	movs	r1, r2
 8004988:	1cbb      	adds	r3, r7, #2
 800498a:	1c02      	adds	r2, r0, #0
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	1c7b      	adds	r3, r7, #1
 8004990:	1c0a      	adds	r2, r1, #0
 8004992:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004994:	1c7b      	adds	r3, r7, #1
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800499c:	1cbb      	adds	r3, r7, #2
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049a4:	e003      	b.n	80049ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049a6:	1cbb      	adds	r3, r7, #2
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b002      	add	sp, #8
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e082      	b.n	8004ad0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2241      	movs	r2, #65	; 0x41
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d107      	bne.n	80049e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2240      	movs	r2, #64	; 0x40
 80049da:	2100      	movs	r1, #0
 80049dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f7fe f9db 	bl	8002d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2241      	movs	r2, #65	; 0x41
 80049ea:	2124      	movs	r1, #36	; 0x24
 80049ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2101      	movs	r1, #1
 80049fa:	438a      	bics	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4934      	ldr	r1, [pc, #208]	; (8004ad8 <HAL_I2C_Init+0x120>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4931      	ldr	r1, [pc, #196]	; (8004adc <HAL_I2C_Init+0x124>)
 8004a18:	400a      	ands	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d108      	bne.n	8004a36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	0209      	lsls	r1, r1, #8
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	e007      	b.n	8004a46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2184      	movs	r1, #132	; 0x84
 8004a40:	0209      	lsls	r1, r1, #8
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d104      	bne.n	8004a58 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	491f      	ldr	r1, [pc, #124]	; (8004ae0 <HAL_I2C_Init+0x128>)
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	491a      	ldr	r1, [pc, #104]	; (8004adc <HAL_I2C_Init+0x124>)
 8004a74:	400a      	ands	r2, r1
 8004a76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69d9      	ldr	r1, [r3, #28]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1a      	ldr	r2, [r3, #32]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2101      	movs	r1, #1
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2241      	movs	r2, #65	; 0x41
 8004abc:	2120      	movs	r1, #32
 8004abe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2242      	movs	r2, #66	; 0x42
 8004aca:	2100      	movs	r1, #0
 8004acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	f0ffffff 	.word	0xf0ffffff
 8004adc:	ffff7fff 	.word	0xffff7fff
 8004ae0:	02008000 	.word	0x02008000

08004ae4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2241      	movs	r2, #65	; 0x41
 8004af2:	5c9b      	ldrb	r3, [r3, r2]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d138      	bne.n	8004b6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2240      	movs	r2, #64	; 0x40
 8004afe:	5c9b      	ldrb	r3, [r3, r2]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e032      	b.n	8004b6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2241      	movs	r2, #65	; 0x41
 8004b14:	2124      	movs	r1, #36	; 0x24
 8004b16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2101      	movs	r1, #1
 8004b24:	438a      	bics	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4911      	ldr	r1, [pc, #68]	; (8004b78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004b34:	400a      	ands	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6819      	ldr	r1, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2101      	movs	r1, #1
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2241      	movs	r2, #65	; 0x41
 8004b5c:	2120      	movs	r1, #32
 8004b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	2100      	movs	r1, #0
 8004b66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
  }
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	ffffefff 	.word	0xffffefff

08004b7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2241      	movs	r2, #65	; 0x41
 8004b8a:	5c9b      	ldrb	r3, [r3, r2]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d139      	bne.n	8004c06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2240      	movs	r2, #64	; 0x40
 8004b96:	5c9b      	ldrb	r3, [r3, r2]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e033      	b.n	8004c08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2240      	movs	r2, #64	; 0x40
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2241      	movs	r2, #65	; 0x41
 8004bac:	2124      	movs	r1, #36	; 0x24
 8004bae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2101      	movs	r1, #1
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2241      	movs	r2, #65	; 0x41
 8004bf6:	2120      	movs	r1, #32
 8004bf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2240      	movs	r2, #64	; 0x40
 8004bfe:	2100      	movs	r1, #0
 8004c00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b004      	add	sp, #16
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	fffff0ff 	.word	0xfffff0ff

08004c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d11f      	bne.n	8004c78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	189b      	adds	r3, r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4912      	ldr	r1, [pc, #72]	; (8004c90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7fb fa7a 	bl	8000140 <__udivsi3>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c52:	e008      	b.n	8004c66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e001      	b.n	8004c66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e009      	b.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c66:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d0ed      	beq.n	8004c54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b004      	add	sp, #16
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40007000 	.word	0x40007000
 8004c88:	fffff9ff 	.word	0xfffff9ff
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	000f4240 	.word	0x000f4240

08004c94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	23e0      	movs	r3, #224	; 0xe0
 8004c9e:	01db      	lsls	r3, r3, #7
 8004ca0:	4013      	ands	r3, r2
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000

08004cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e2f3      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d100      	bne.n	8004cca <HAL_RCC_OscConfig+0x1e>
 8004cc8:	e07c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cca:	4bc3      	ldr	r3, [pc, #780]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2238      	movs	r2, #56	; 0x38
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cd4:	4bc0      	ldr	r3, [pc, #768]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	4013      	ands	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d102      	bne.n	8004cea <HAL_RCC_OscConfig+0x3e>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d002      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	4bb9      	ldr	r3, [pc, #740]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d062      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x116>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d15e      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e2ce      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	025b      	lsls	r3, r3, #9
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_OscConfig+0x78>
 8004d14:	4bb0      	ldr	r3, [pc, #704]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4baf      	ldr	r3, [pc, #700]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	0249      	lsls	r1, r1, #9
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e020      	b.n	8004d66 <HAL_RCC_OscConfig+0xba>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	23a0      	movs	r3, #160	; 0xa0
 8004d2a:	02db      	lsls	r3, r3, #11
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d10e      	bne.n	8004d4e <HAL_RCC_OscConfig+0xa2>
 8004d30:	4ba9      	ldr	r3, [pc, #676]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4ba8      	ldr	r3, [pc, #672]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	02c9      	lsls	r1, r1, #11
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	4ba6      	ldr	r3, [pc, #664]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4ba5      	ldr	r3, [pc, #660]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d44:	2180      	movs	r1, #128	; 0x80
 8004d46:	0249      	lsls	r1, r1, #9
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e00b      	b.n	8004d66 <HAL_RCC_OscConfig+0xba>
 8004d4e:	4ba2      	ldr	r3, [pc, #648]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4ba1      	ldr	r3, [pc, #644]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d54:	49a1      	ldr	r1, [pc, #644]	; (8004fdc <HAL_RCC_OscConfig+0x330>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	4b9f      	ldr	r3, [pc, #636]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b9e      	ldr	r3, [pc, #632]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d60:	499f      	ldr	r1, [pc, #636]	; (8004fe0 <HAL_RCC_OscConfig+0x334>)
 8004d62:	400a      	ands	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d014      	beq.n	8004d98 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fe fc83 	bl	8003678 <HAL_GetTick>
 8004d72:	0003      	movs	r3, r0
 8004d74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fe fc7e 	bl	8003678 <HAL_GetTick>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	; 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e28d      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d8a:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	029b      	lsls	r3, r3, #10
 8004d92:	4013      	ands	r3, r2
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0xcc>
 8004d96:	e015      	b.n	8004dc4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fe fc6e 	bl	8003678 <HAL_GetTick>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da2:	f7fe fc69 	bl	8003678 <HAL_GetTick>
 8004da6:	0002      	movs	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b64      	cmp	r3, #100	; 0x64
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e278      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004db4:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	029b      	lsls	r3, r3, #10
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d1f0      	bne.n	8004da2 <HAL_RCC_OscConfig+0xf6>
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d100      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x124>
 8004dce:	e099      	b.n	8004f04 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd0:	4b81      	ldr	r3, [pc, #516]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2238      	movs	r2, #56	; 0x38
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dda:	4b7f      	ldr	r3, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2203      	movs	r2, #3
 8004de0:	4013      	ands	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d102      	bne.n	8004df0 <HAL_RCC_OscConfig+0x144>
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d002      	beq.n	8004df6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d135      	bne.n	8004e62 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df6:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x162>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e24b      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b72      	ldr	r3, [pc, #456]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4a74      	ldr	r2, [pc, #464]	; (8004fe4 <HAL_RCC_OscConfig+0x338>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	0019      	movs	r1, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	021a      	lsls	r2, r3, #8
 8004e1e:	4b6e      	ldr	r3, [pc, #440]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d112      	bne.n	8004e50 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e2a:	4b6b      	ldr	r3, [pc, #428]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6e      	ldr	r2, [pc, #440]	; (8004fe8 <HAL_RCC_OscConfig+0x33c>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	0019      	movs	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004e3e:	4b66      	ldr	r3, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	0adb      	lsrs	r3, r3, #11
 8004e44:	2207      	movs	r2, #7
 8004e46:	4013      	ands	r3, r2
 8004e48:	4a68      	ldr	r2, [pc, #416]	; (8004fec <HAL_RCC_OscConfig+0x340>)
 8004e4a:	40da      	lsrs	r2, r3
 8004e4c:	4b68      	ldr	r3, [pc, #416]	; (8004ff0 <HAL_RCC_OscConfig+0x344>)
 8004e4e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e50:	4b68      	ldr	r3, [pc, #416]	; (8004ff4 <HAL_RCC_OscConfig+0x348>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7fe f9f7 	bl	8003248 <HAL_InitTick>
 8004e5a:	1e03      	subs	r3, r0, #0
 8004e5c:	d051      	beq.n	8004f02 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e221      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d030      	beq.n	8004ecc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5e      	ldr	r2, [pc, #376]	; (8004fe8 <HAL_RCC_OscConfig+0x33c>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	4b57      	ldr	r3, [pc, #348]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004e7e:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b55      	ldr	r3, [pc, #340]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	0049      	lsls	r1, r1, #1
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fe fbf4 	bl	8003678 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e96:	f7fe fbef 	bl	8003678 <HAL_GetTick>
 8004e9a:	0002      	movs	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e1fe      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea8:	4b4b      	ldr	r3, [pc, #300]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4b48      	ldr	r3, [pc, #288]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <HAL_RCC_OscConfig+0x338>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	021a      	lsls	r2, r3, #8
 8004ec4:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	e01b      	b.n	8004f04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004ecc:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004ed2:	4949      	ldr	r1, [pc, #292]	; (8004ff8 <HAL_RCC_OscConfig+0x34c>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fe fbce 	bl	8003678 <HAL_GetTick>
 8004edc:	0003      	movs	r3, r0
 8004ede:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee2:	f7fe fbc9 	bl	8003678 <HAL_GetTick>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1d8      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef4:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4013      	ands	r3, r2
 8004efe:	d1f0      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x236>
 8004f00:	e000      	b.n	8004f04 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2208      	movs	r2, #8
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d047      	beq.n	8004f9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f0e:	4b32      	ldr	r3, [pc, #200]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2238      	movs	r2, #56	; 0x38
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b18      	cmp	r3, #24
 8004f18:	d10a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1e:	2202      	movs	r2, #2
 8004f20:	4013      	ands	r3, r2
 8004f22:	d03c      	beq.n	8004f9e <HAL_RCC_OscConfig+0x2f2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d138      	bne.n	8004f9e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e1ba      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004f38:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f3e:	2101      	movs	r1, #1
 8004f40:	430a      	orrs	r2, r1
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fe fb98 	bl	8003678 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fe fb93 	bl	8003678 <HAL_GetTick>
 8004f52:	0002      	movs	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1a2      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f64:	2202      	movs	r2, #2
 8004f66:	4013      	ands	r3, r2
 8004f68:	d0f1      	beq.n	8004f4e <HAL_RCC_OscConfig+0x2a2>
 8004f6a:	e018      	b.n	8004f9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f72:	2101      	movs	r1, #1
 8004f74:	438a      	bics	r2, r1
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fe fb7e 	bl	8003678 <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f82:	f7fe fb79 	bl	8003678 <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e188      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f94:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	2202      	movs	r2, #2
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d1f1      	bne.n	8004f82 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d100      	bne.n	8004faa <HAL_RCC_OscConfig+0x2fe>
 8004fa8:	e0c6      	b.n	8005138 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004faa:	231f      	movs	r3, #31
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2238      	movs	r2, #56	; 0x38
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d11e      	bne.n	8004ffc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_OscConfig+0x32c>)
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d100      	bne.n	8004fca <HAL_RCC_OscConfig+0x31e>
 8004fc8:	e0b6      	b.n	8005138 <HAL_RCC_OscConfig+0x48c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d000      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x328>
 8004fd2:	e0b1      	b.n	8005138 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e166      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	fffeffff 	.word	0xfffeffff
 8004fe0:	fffbffff 	.word	0xfffbffff
 8004fe4:	ffff80ff 	.word	0xffff80ff
 8004fe8:	ffffc7ff 	.word	0xffffc7ff
 8004fec:	00f42400 	.word	0x00f42400
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	20000004 	.word	0x20000004
 8004ff8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ffc:	4bac      	ldr	r3, [pc, #688]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8004ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	055b      	lsls	r3, r3, #21
 8005004:	4013      	ands	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_RCC_OscConfig+0x360>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_RCC_OscConfig+0x362>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d011      	beq.n	8005036 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005012:	4ba7      	ldr	r3, [pc, #668]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005016:	4ba6      	ldr	r3, [pc, #664]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005018:	2180      	movs	r1, #128	; 0x80
 800501a:	0549      	lsls	r1, r1, #21
 800501c:	430a      	orrs	r2, r1
 800501e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005020:	4ba3      	ldr	r3, [pc, #652]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	055b      	lsls	r3, r3, #21
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800502e:	231f      	movs	r3, #31
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005036:	4b9f      	ldr	r3, [pc, #636]	; (80052b4 <HAL_RCC_OscConfig+0x608>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4013      	ands	r3, r2
 8005040:	d11a      	bne.n	8005078 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005042:	4b9c      	ldr	r3, [pc, #624]	; (80052b4 <HAL_RCC_OscConfig+0x608>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b9b      	ldr	r3, [pc, #620]	; (80052b4 <HAL_RCC_OscConfig+0x608>)
 8005048:	2180      	movs	r1, #128	; 0x80
 800504a:	0049      	lsls	r1, r1, #1
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005050:	f7fe fb12 	bl	8003678 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505a:	f7fe fb0d 	bl	8003678 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e11c      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800506c:	4b91      	ldr	r3, [pc, #580]	; (80052b4 <HAL_RCC_OscConfig+0x608>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4013      	ands	r3, r2
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d106      	bne.n	800508e <HAL_RCC_OscConfig+0x3e2>
 8005080:	4b8b      	ldr	r3, [pc, #556]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005082:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005084:	4b8a      	ldr	r3, [pc, #552]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005086:	2101      	movs	r1, #1
 8005088:	430a      	orrs	r2, r1
 800508a:	65da      	str	r2, [r3, #92]	; 0x5c
 800508c:	e01c      	b.n	80050c8 <HAL_RCC_OscConfig+0x41c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b05      	cmp	r3, #5
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x404>
 8005096:	4b86      	ldr	r3, [pc, #536]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005098:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800509a:	4b85      	ldr	r3, [pc, #532]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800509c:	2104      	movs	r1, #4
 800509e:	430a      	orrs	r2, r1
 80050a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80050a2:	4b83      	ldr	r3, [pc, #524]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80050a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050a6:	4b82      	ldr	r3, [pc, #520]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80050a8:	2101      	movs	r1, #1
 80050aa:	430a      	orrs	r2, r1
 80050ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0x41c>
 80050b0:	4b7f      	ldr	r3, [pc, #508]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80050b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050b4:	4b7e      	ldr	r3, [pc, #504]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80050b6:	2101      	movs	r1, #1
 80050b8:	438a      	bics	r2, r1
 80050ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80050bc:	4b7c      	ldr	r3, [pc, #496]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80050be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050c0:	4b7b      	ldr	r3, [pc, #492]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80050c2:	2104      	movs	r1, #4
 80050c4:	438a      	bics	r2, r1
 80050c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d014      	beq.n	80050fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fe fad2 	bl	8003678 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d8:	e009      	b.n	80050ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fe facd 	bl	8003678 <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	4a74      	ldr	r2, [pc, #464]	; (80052b8 <HAL_RCC_OscConfig+0x60c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0db      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ee:	4b70      	ldr	r3, [pc, #448]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	2202      	movs	r2, #2
 80050f4:	4013      	ands	r3, r2
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x42e>
 80050f8:	e013      	b.n	8005122 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fe fabd 	bl	8003678 <HAL_GetTick>
 80050fe:	0003      	movs	r3, r0
 8005100:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005102:	e009      	b.n	8005118 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005104:	f7fe fab8 	bl	8003678 <HAL_GetTick>
 8005108:	0002      	movs	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	4a6a      	ldr	r2, [pc, #424]	; (80052b8 <HAL_RCC_OscConfig+0x60c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0c6      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005118:	4b65      	ldr	r3, [pc, #404]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2202      	movs	r2, #2
 800511e:	4013      	ands	r3, r2
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005122:	231f      	movs	r3, #31
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d105      	bne.n	8005138 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800512c:	4b60      	ldr	r3, [pc, #384]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800512e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005130:	4b5f      	ldr	r3, [pc, #380]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005132:	4962      	ldr	r1, [pc, #392]	; (80052bc <HAL_RCC_OscConfig+0x610>)
 8005134:	400a      	ands	r2, r1
 8005136:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d100      	bne.n	8005142 <HAL_RCC_OscConfig+0x496>
 8005140:	e0b0      	b.n	80052a4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005142:	4b5b      	ldr	r3, [pc, #364]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2238      	movs	r2, #56	; 0x38
 8005148:	4013      	ands	r3, r2
 800514a:	2b10      	cmp	r3, #16
 800514c:	d100      	bne.n	8005150 <HAL_RCC_OscConfig+0x4a4>
 800514e:	e078      	b.n	8005242 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d153      	bne.n	8005200 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005158:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b54      	ldr	r3, [pc, #336]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800515e:	4958      	ldr	r1, [pc, #352]	; (80052c0 <HAL_RCC_OscConfig+0x614>)
 8005160:	400a      	ands	r2, r1
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fe fa88 	bl	8003678 <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516e:	f7fe fa83 	bl	8003678 <HAL_GetTick>
 8005172:	0002      	movs	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e092      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005180:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	049b      	lsls	r3, r3, #18
 8005188:	4013      	ands	r3, r2
 800518a:	d1f0      	bne.n	800516e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800518c:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	4a4c      	ldr	r2, [pc, #304]	; (80052c4 <HAL_RCC_OscConfig+0x618>)
 8005192:	4013      	ands	r3, r2
 8005194:	0019      	movs	r1, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	431a      	orrs	r2, r3
 80051b4:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80051b6:	430a      	orrs	r2, r1
 80051b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ba:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	0449      	lsls	r1, r1, #17
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	4b38      	ldr	r3, [pc, #224]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	0549      	lsls	r1, r1, #21
 80051d2:	430a      	orrs	r2, r1
 80051d4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d6:	f7fe fa4f 	bl	8003678 <HAL_GetTick>
 80051da:	0003      	movs	r3, r0
 80051dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fe fa4a 	bl	8003678 <HAL_GetTick>
 80051e4:	0002      	movs	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e059      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	049b      	lsls	r3, r3, #18
 80051fa:	4013      	ands	r3, r2
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x534>
 80051fe:	e051      	b.n	80052a4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005206:	492e      	ldr	r1, [pc, #184]	; (80052c0 <HAL_RCC_OscConfig+0x614>)
 8005208:	400a      	ands	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fe fa34 	bl	8003678 <HAL_GetTick>
 8005210:	0003      	movs	r3, r0
 8005212:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005216:	f7fe fa2f 	bl	8003678 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e03e      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	049b      	lsls	r3, r3, #18
 8005230:	4013      	ands	r3, r2
 8005232:	d1f0      	bne.n	8005216 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005234:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 800523a:	4923      	ldr	r1, [pc, #140]	; (80052c8 <HAL_RCC_OscConfig+0x61c>)
 800523c:	400a      	ands	r2, r1
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e030      	b.n	80052a4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e02b      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800524e:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <HAL_RCC_OscConfig+0x604>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2203      	movs	r2, #3
 8005258:	401a      	ands	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	429a      	cmp	r2, r3
 8005260:	d11e      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2270      	movs	r2, #112	; 0x70
 8005266:	401a      	ands	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d117      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	23fe      	movs	r3, #254	; 0xfe
 8005274:	01db      	lsls	r3, r3, #7
 8005276:	401a      	ands	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d10e      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	23f8      	movs	r3, #248	; 0xf8
 8005286:	039b      	lsls	r3, r3, #14
 8005288:	401a      	ands	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d106      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	0f5b      	lsrs	r3, r3, #29
 8005296:	075a      	lsls	r2, r3, #29
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d001      	beq.n	80052a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b008      	add	sp, #32
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40007000 	.word	0x40007000
 80052b8:	00001388 	.word	0x00001388
 80052bc:	efffffff 	.word	0xefffffff
 80052c0:	feffffff 	.word	0xfeffffff
 80052c4:	1fc1808c 	.word	0x1fc1808c
 80052c8:	effefffc 	.word	0xeffefffc

080052cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0e9      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e0:	4b76      	ldr	r3, [pc, #472]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2207      	movs	r2, #7
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d91e      	bls.n	800532c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b73      	ldr	r3, [pc, #460]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2207      	movs	r2, #7
 80052f4:	4393      	bics	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	4b70      	ldr	r3, [pc, #448]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005300:	f7fe f9ba 	bl	8003678 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005308:	e009      	b.n	800531e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530a:	f7fe f9b5 	bl	8003678 <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e0ca      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800531e:	4b67      	ldr	r3, [pc, #412]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2207      	movs	r2, #7
 8005324:	4013      	ands	r3, r2
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d1ee      	bne.n	800530a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	d015      	beq.n	8005362 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2204      	movs	r2, #4
 800533c:	4013      	ands	r3, r2
 800533e:	d006      	beq.n	800534e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005340:	4b60      	ldr	r3, [pc, #384]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005346:	21e0      	movs	r1, #224	; 0xe0
 8005348:	01c9      	lsls	r1, r1, #7
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534e:	4b5d      	ldr	r3, [pc, #372]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	4a5d      	ldr	r2, [pc, #372]	; (80054c8 <HAL_RCC_ClockConfig+0x1fc>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	4b59      	ldr	r3, [pc, #356]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	4013      	ands	r3, r2
 800536a:	d057      	beq.n	800541c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005374:	4b53      	ldr	r3, [pc, #332]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	029b      	lsls	r3, r3, #10
 800537c:	4013      	ands	r3, r2
 800537e:	d12b      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e097      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d107      	bne.n	800539c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538c:	4b4d      	ldr	r3, [pc, #308]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	049b      	lsls	r3, r3, #18
 8005394:	4013      	ands	r3, r2
 8005396:	d11f      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e08b      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d107      	bne.n	80053b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a4:	4b47      	ldr	r3, [pc, #284]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4013      	ands	r3, r2
 80053ae:	d113      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e07f      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053bc:	4b41      	ldr	r3, [pc, #260]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	2202      	movs	r2, #2
 80053c2:	4013      	ands	r3, r2
 80053c4:	d108      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e074      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ca:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 80053cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ce:	2202      	movs	r2, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e06d      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053d8:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2207      	movs	r2, #7
 80053de:	4393      	bics	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ec:	f7fe f944 	bl	8003678 <HAL_GetTick>
 80053f0:	0003      	movs	r3, r0
 80053f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f4:	e009      	b.n	800540a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f6:	f7fe f93f 	bl	8003678 <HAL_GetTick>
 80053fa:	0002      	movs	r2, r0
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e054      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	4b2e      	ldr	r3, [pc, #184]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2238      	movs	r2, #56	; 0x38
 8005410:	401a      	ands	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	429a      	cmp	r2, r3
 800541a:	d1ec      	bne.n	80053f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2207      	movs	r2, #7
 8005422:	4013      	ands	r3, r2
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d21e      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b24      	ldr	r3, [pc, #144]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2207      	movs	r2, #7
 8005430:	4393      	bics	r3, r2
 8005432:	0019      	movs	r1, r3
 8005434:	4b21      	ldr	r3, [pc, #132]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800543c:	f7fe f91c 	bl	8003678 <HAL_GetTick>
 8005440:	0003      	movs	r3, r0
 8005442:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005444:	e009      	b.n	800545a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005446:	f7fe f917 	bl	8003678 <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e02c      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800545a:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_RCC_ClockConfig+0x1f0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2207      	movs	r2, #7
 8005460:	4013      	ands	r3, r2
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d1ee      	bne.n	8005446 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2204      	movs	r2, #4
 800546e:	4013      	ands	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <HAL_RCC_ClockConfig+0x200>)
 8005478:	4013      	ands	r3, r2
 800547a:	0019      	movs	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005482:	430a      	orrs	r2, r1
 8005484:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005486:	f000 f829 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800548a:	0001      	movs	r1, r0
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <HAL_RCC_ClockConfig+0x1f8>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	220f      	movs	r2, #15
 8005494:	401a      	ands	r2, r3
 8005496:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <HAL_RCC_ClockConfig+0x204>)
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	58d3      	ldr	r3, [r2, r3]
 800549c:	221f      	movs	r2, #31
 800549e:	4013      	ands	r3, r2
 80054a0:	000a      	movs	r2, r1
 80054a2:	40da      	lsrs	r2, r3
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCC_ClockConfig+0x208>)
 80054a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_ClockConfig+0x20c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fd fecb 	bl	8003248 <HAL_InitTick>
 80054b2:	0003      	movs	r3, r0
}
 80054b4:	0018      	movs	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b004      	add	sp, #16
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40022000 	.word	0x40022000
 80054c0:	00001388 	.word	0x00001388
 80054c4:	40021000 	.word	0x40021000
 80054c8:	fffff0ff 	.word	0xfffff0ff
 80054cc:	ffff8fff 	.word	0xffff8fff
 80054d0:	0800e560 	.word	0x0800e560
 80054d4:	20000000 	.word	0x20000000
 80054d8:	20000004 	.word	0x20000004

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054e2:	4b3c      	ldr	r3, [pc, #240]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2238      	movs	r2, #56	; 0x38
 80054e8:	4013      	ands	r3, r2
 80054ea:	d10f      	bne.n	800550c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80054ec:	4b39      	ldr	r3, [pc, #228]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	0adb      	lsrs	r3, r3, #11
 80054f2:	2207      	movs	r2, #7
 80054f4:	4013      	ands	r3, r2
 80054f6:	2201      	movs	r2, #1
 80054f8:	409a      	lsls	r2, r3
 80054fa:	0013      	movs	r3, r2
 80054fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	4835      	ldr	r0, [pc, #212]	; (80055d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005502:	f7fa fe1d 	bl	8000140 <__udivsi3>
 8005506:	0003      	movs	r3, r0
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e05d      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800550c:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2238      	movs	r2, #56	; 0x38
 8005512:	4013      	ands	r3, r2
 8005514:	2b08      	cmp	r3, #8
 8005516:	d102      	bne.n	800551e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005518:	4b30      	ldr	r3, [pc, #192]	; (80055dc <HAL_RCC_GetSysClockFreq+0x100>)
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e054      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800551e:	4b2d      	ldr	r3, [pc, #180]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2238      	movs	r2, #56	; 0x38
 8005524:	4013      	ands	r3, r2
 8005526:	2b10      	cmp	r3, #16
 8005528:	d138      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800552a:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2203      	movs	r2, #3
 8005530:	4013      	ands	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005534:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	2207      	movs	r2, #7
 800553c:	4013      	ands	r3, r2
 800553e:	3301      	adds	r3, #1
 8005540:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d10d      	bne.n	8005564 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	4824      	ldr	r0, [pc, #144]	; (80055dc <HAL_RCC_GetSysClockFreq+0x100>)
 800554c:	f7fa fdf8 	bl	8000140 <__udivsi3>
 8005550:	0003      	movs	r3, r0
 8005552:	0019      	movs	r1, r3
 8005554:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	227f      	movs	r2, #127	; 0x7f
 800555c:	4013      	ands	r3, r2
 800555e:	434b      	muls	r3, r1
 8005560:	617b      	str	r3, [r7, #20]
        break;
 8005562:	e00d      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	481c      	ldr	r0, [pc, #112]	; (80055d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005568:	f7fa fdea 	bl	8000140 <__udivsi3>
 800556c:	0003      	movs	r3, r0
 800556e:	0019      	movs	r1, r3
 8005570:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	227f      	movs	r2, #127	; 0x7f
 8005578:	4013      	ands	r3, r2
 800557a:	434b      	muls	r3, r1
 800557c:	617b      	str	r3, [r7, #20]
        break;
 800557e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	0f5b      	lsrs	r3, r3, #29
 8005586:	2207      	movs	r2, #7
 8005588:	4013      	ands	r3, r2
 800558a:	3301      	adds	r3, #1
 800558c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	6978      	ldr	r0, [r7, #20]
 8005592:	f7fa fdd5 	bl	8000140 <__udivsi3>
 8005596:	0003      	movs	r3, r0
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e015      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2238      	movs	r2, #56	; 0x38
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d103      	bne.n	80055b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e00b      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2238      	movs	r2, #56	; 0x38
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b18      	cmp	r3, #24
 80055ba:	d103      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80055bc:	23fa      	movs	r3, #250	; 0xfa
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e001      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055c8:	693b      	ldr	r3, [r7, #16]
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b006      	add	sp, #24
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	40021000 	.word	0x40021000
 80055d8:	00f42400 	.word	0x00f42400
 80055dc:	007a1200 	.word	0x007a1200

080055e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e4:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055e6:	681b      	ldr	r3, [r3, #0]
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	20000000 	.word	0x20000000

080055f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f4:	b5b0      	push	{r4, r5, r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055f8:	f7ff fff2 	bl	80055e0 <HAL_RCC_GetHCLKFreq>
 80055fc:	0004      	movs	r4, r0
 80055fe:	f7ff fb49 	bl	8004c94 <LL_RCC_GetAPB1Prescaler>
 8005602:	0003      	movs	r3, r0
 8005604:	0b1a      	lsrs	r2, r3, #12
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	58d3      	ldr	r3, [r2, r3]
 800560c:	221f      	movs	r2, #31
 800560e:	4013      	ands	r3, r2
 8005610:	40dc      	lsrs	r4, r3
 8005612:	0023      	movs	r3, r4
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	bdb0      	pop	{r4, r5, r7, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	0800e5a0 	.word	0x0800e5a0

08005620 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2207      	movs	r2, #7
 800562e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005630:	4b0e      	ldr	r3, [pc, #56]	; (800566c <HAL_RCC_GetClockConfig+0x4c>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2207      	movs	r2, #7
 8005636:	401a      	ands	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_GetClockConfig+0x4c>)
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	23f0      	movs	r3, #240	; 0xf0
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	401a      	ands	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_RCC_GetClockConfig+0x4c>)
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	23e0      	movs	r3, #224	; 0xe0
 8005650:	01db      	lsls	r3, r3, #7
 8005652:	401a      	ands	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_RCC_GetClockConfig+0x50>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2207      	movs	r2, #7
 800565e:	401a      	ands	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b002      	add	sp, #8
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40021000 	.word	0x40021000
 8005670:	40022000 	.word	0x40022000

08005674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800567c:	2313      	movs	r3, #19
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005684:	2312      	movs	r3, #18
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	029b      	lsls	r3, r3, #10
 8005694:	4013      	ands	r3, r2
 8005696:	d100      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005698:	e0a3      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569a:	2011      	movs	r0, #17
 800569c:	183b      	adds	r3, r7, r0
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a2:	4b86      	ldr	r3, [pc, #536]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	055b      	lsls	r3, r3, #21
 80056aa:	4013      	ands	r3, r2
 80056ac:	d110      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	4b83      	ldr	r3, [pc, #524]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b2:	4b82      	ldr	r3, [pc, #520]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056b4:	2180      	movs	r1, #128	; 0x80
 80056b6:	0549      	lsls	r1, r1, #21
 80056b8:	430a      	orrs	r2, r1
 80056ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80056bc:	4b7f      	ldr	r3, [pc, #508]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	055b      	lsls	r3, r3, #21
 80056c4:	4013      	ands	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ca:	183b      	adds	r3, r7, r0
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d0:	4b7b      	ldr	r3, [pc, #492]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b7a      	ldr	r3, [pc, #488]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	0049      	lsls	r1, r1, #1
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056de:	f7fd ffcb 	bl	8003678 <HAL_GetTick>
 80056e2:	0003      	movs	r3, r0
 80056e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e6:	e00b      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fd ffc6 	bl	8003678 <HAL_GetTick>
 80056ec:	0002      	movs	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d904      	bls.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80056f6:	2313      	movs	r3, #19
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2203      	movs	r2, #3
 80056fc:	701a      	strb	r2, [r3, #0]
        break;
 80056fe:	e005      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005700:	4b6f      	ldr	r3, [pc, #444]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4013      	ands	r3, r2
 800570a:	d0ed      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800570c:	2313      	movs	r3, #19
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d154      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005716:	4b69      	ldr	r3, [pc, #420]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800571a:	23c0      	movs	r3, #192	; 0xc0
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4013      	ands	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	429a      	cmp	r2, r3
 8005730:	d014      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005732:	4b62      	ldr	r3, [pc, #392]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	4a63      	ldr	r2, [pc, #396]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005738:	4013      	ands	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800573c:	4b5f      	ldr	r3, [pc, #380]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800573e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005740:	4b5e      	ldr	r3, [pc, #376]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005742:	2180      	movs	r1, #128	; 0x80
 8005744:	0249      	lsls	r1, r1, #9
 8005746:	430a      	orrs	r2, r1
 8005748:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800574a:	4b5c      	ldr	r3, [pc, #368]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800574c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800574e:	4b5b      	ldr	r3, [pc, #364]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005750:	495d      	ldr	r1, [pc, #372]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005752:	400a      	ands	r2, r1
 8005754:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005756:	4b59      	ldr	r3, [pc, #356]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2201      	movs	r2, #1
 8005760:	4013      	ands	r3, r2
 8005762:	d016      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd ff88 	bl	8003678 <HAL_GetTick>
 8005768:	0003      	movs	r3, r0
 800576a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576c:	e00c      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576e:	f7fd ff83 	bl	8003678 <HAL_GetTick>
 8005772:	0002      	movs	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	4a54      	ldr	r2, [pc, #336]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d904      	bls.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800577e:	2313      	movs	r3, #19
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2203      	movs	r2, #3
 8005784:	701a      	strb	r2, [r3, #0]
            break;
 8005786:	e004      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005788:	4b4c      	ldr	r3, [pc, #304]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800578a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578c:	2202      	movs	r2, #2
 800578e:	4013      	ands	r3, r2
 8005790:	d0ed      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005792:	2313      	movs	r3, #19
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579c:	4b47      	ldr	r3, [pc, #284]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800579e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a0:	4a48      	ldr	r2, [pc, #288]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	0019      	movs	r1, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	4b44      	ldr	r3, [pc, #272]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057ac:	430a      	orrs	r2, r1
 80057ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80057b0:	e00c      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057b2:	2312      	movs	r3, #18
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	2213      	movs	r2, #19
 80057b8:	18ba      	adds	r2, r7, r2
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e005      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	2312      	movs	r3, #18
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	2213      	movs	r2, #19
 80057c6:	18ba      	adds	r2, r7, r2
 80057c8:	7812      	ldrb	r2, [r2, #0]
 80057ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057cc:	2311      	movs	r3, #17
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d105      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d6:	4b39      	ldr	r3, [pc, #228]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057da:	4b38      	ldr	r3, [pc, #224]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057dc:	493c      	ldr	r1, [pc, #240]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057de:	400a      	ands	r2, r1
 80057e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ec:	4b33      	ldr	r3, [pc, #204]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	2203      	movs	r2, #3
 80057f2:	4393      	bics	r3, r2
 80057f4:	0019      	movs	r1, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057fc:	430a      	orrs	r2, r1
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2202      	movs	r2, #2
 8005806:	4013      	ands	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800580a:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	220c      	movs	r2, #12
 8005810:	4393      	bics	r3, r2
 8005812:	0019      	movs	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	4b28      	ldr	r3, [pc, #160]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800581a:	430a      	orrs	r2, r1
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2220      	movs	r2, #32
 8005824:	4013      	ands	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005828:	4b24      	ldr	r3, [pc, #144]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582e:	4013      	ands	r3, r2
 8005830:	0019      	movs	r1, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	4b21      	ldr	r3, [pc, #132]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005838:	430a      	orrs	r2, r1
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	01db      	lsls	r3, r3, #7
 8005844:	4013      	ands	r3, r2
 8005846:	d015      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005848:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	0899      	lsrs	r1, r3, #2
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	4b19      	ldr	r3, [pc, #100]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005856:	430a      	orrs	r2, r1
 8005858:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	05db      	lsls	r3, r3, #23
 8005862:	429a      	cmp	r2, r3
 8005864:	d106      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	4b14      	ldr	r3, [pc, #80]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	0249      	lsls	r1, r1, #9
 8005870:	430a      	orrs	r2, r1
 8005872:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	4013      	ands	r3, r2
 800587e:	d016      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005880:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	4a14      	ldr	r2, [pc, #80]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005886:	4013      	ands	r3, r2
 8005888:	0019      	movs	r1, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005890:	430a      	orrs	r2, r1
 8005892:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	01db      	lsls	r3, r3, #7
 800589c:	429a      	cmp	r2, r3
 800589e:	d106      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058a6:	2180      	movs	r1, #128	; 0x80
 80058a8:	0249      	lsls	r1, r1, #9
 80058aa:	430a      	orrs	r2, r1
 80058ac:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80058ae:	2312      	movs	r3, #18
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	781b      	ldrb	r3, [r3, #0]
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b006      	add	sp, #24
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40007000 	.word	0x40007000
 80058c4:	fffffcff 	.word	0xfffffcff
 80058c8:	fffeffff 	.word	0xfffeffff
 80058cc:	00001388 	.word	0x00001388
 80058d0:	efffffff 	.word	0xefffffff
 80058d4:	ffffcfff 	.word	0xffffcfff
 80058d8:	ffff3fff 	.word	0xffff3fff

080058dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0a8      	b.n	8005a40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	2382      	movs	r3, #130	; 0x82
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	429a      	cmp	r2, r3
 8005900:	d009      	beq.n	8005916 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	61da      	str	r2, [r3, #28]
 8005908:	e005      	b.n	8005916 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	225d      	movs	r2, #93	; 0x5d
 8005920:	5c9b      	ldrb	r3, [r3, r2]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d107      	bne.n	8005938 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	225c      	movs	r2, #92	; 0x5c
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	0018      	movs	r0, r3
 8005934:	f7fd fa94 	bl	8002e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	225d      	movs	r2, #93	; 0x5d
 800593c:	2102      	movs	r1, #2
 800593e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2140      	movs	r1, #64	; 0x40
 800594c:	438a      	bics	r2, r1
 800594e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	23e0      	movs	r3, #224	; 0xe0
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	429a      	cmp	r2, r3
 800595a:	d902      	bls.n	8005962 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e002      	b.n	8005968 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	015b      	lsls	r3, r3, #5
 8005966:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	23f0      	movs	r3, #240	; 0xf0
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	429a      	cmp	r2, r3
 8005972:	d008      	beq.n	8005986 <HAL_SPI_Init+0xaa>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	23e0      	movs	r3, #224	; 0xe0
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	429a      	cmp	r2, r3
 800597e:	d002      	beq.n	8005986 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	2382      	movs	r3, #130	; 0x82
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	401a      	ands	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6899      	ldr	r1, [r3, #8]
 8005994:	2384      	movs	r3, #132	; 0x84
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	400b      	ands	r3, r1
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2102      	movs	r1, #2
 80059a2:	400b      	ands	r3, r1
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	2101      	movs	r1, #1
 80059ac:	400b      	ands	r3, r1
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6999      	ldr	r1, [r3, #24]
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	400b      	ands	r3, r1
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	2138      	movs	r1, #56	; 0x38
 80059c2:	400b      	ands	r3, r1
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	400b      	ands	r3, r1
 80059ce:	431a      	orrs	r2, r3
 80059d0:	0011      	movs	r1, r2
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	401a      	ands	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	2204      	movs	r2, #4
 80059ec:	401a      	ands	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	2110      	movs	r1, #16
 80059f4:	400b      	ands	r3, r1
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	2108      	movs	r1, #8
 80059fe:	400b      	ands	r3, r1
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68d9      	ldr	r1, [r3, #12]
 8005a06:	23f0      	movs	r3, #240	; 0xf0
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	0011      	movs	r1, r2
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	015b      	lsls	r3, r3, #5
 8005a16:	401a      	ands	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69da      	ldr	r2, [r3, #28]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4907      	ldr	r1, [pc, #28]	; (8005a48 <HAL_SPI_Init+0x16c>)
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	225d      	movs	r2, #93	; 0x5d
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	0018      	movs	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	b004      	add	sp, #16
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	fffff7ff 	.word	0xfffff7ff

08005a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e04a      	b.n	8005af4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	223d      	movs	r2, #61	; 0x3d
 8005a62:	5c9b      	ldrb	r3, [r3, r2]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	223c      	movs	r2, #60	; 0x3c
 8005a6e:	2100      	movs	r1, #0
 8005a70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7fd fa3d 	bl	8002ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	223d      	movs	r2, #61	; 0x3d
 8005a7e:	2102      	movs	r1, #2
 8005a80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	0010      	movs	r0, r2
 8005a8e:	f000 f9dd 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2248      	movs	r2, #72	; 0x48
 8005a96:	2101      	movs	r1, #1
 8005a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	223e      	movs	r2, #62	; 0x3e
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	5499      	strb	r1, [r3, r2]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	223f      	movs	r2, #63	; 0x3f
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2240      	movs	r2, #64	; 0x40
 8005aae:	2101      	movs	r1, #1
 8005ab0:	5499      	strb	r1, [r3, r2]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2241      	movs	r2, #65	; 0x41
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	5499      	strb	r1, [r3, r2]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2242      	movs	r2, #66	; 0x42
 8005abe:	2101      	movs	r1, #1
 8005ac0:	5499      	strb	r1, [r3, r2]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2243      	movs	r2, #67	; 0x43
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2244      	movs	r2, #68	; 0x44
 8005ace:	2101      	movs	r1, #1
 8005ad0:	5499      	strb	r1, [r3, r2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2245      	movs	r2, #69	; 0x45
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	5499      	strb	r1, [r3, r2]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2246      	movs	r2, #70	; 0x46
 8005ade:	2101      	movs	r1, #1
 8005ae0:	5499      	strb	r1, [r3, r2]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2247      	movs	r2, #71	; 0x47
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	223d      	movs	r2, #61	; 0x3d
 8005aee:	2101      	movs	r1, #1
 8005af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b002      	add	sp, #8
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	223d      	movs	r2, #61	; 0x3d
 8005b08:	5c9b      	ldrb	r3, [r3, r2]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e03c      	b.n	8005b8e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	223d      	movs	r2, #61	; 0x3d
 8005b18:	2102      	movs	r1, #2
 8005b1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2101      	movs	r1, #1
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <HAL_TIM_Base_Start_IT+0x9c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_TIM_Base_Start_IT+0x4e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <HAL_TIM_Base_Start_IT+0xa0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_TIM_Base_Start_IT+0x4e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a16      	ldr	r2, [pc, #88]	; (8005ba0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d116      	bne.n	8005b78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b06      	cmp	r3, #6
 8005b5a:	d016      	beq.n	8005b8a <HAL_TIM_Base_Start_IT+0x8e>
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	025b      	lsls	r3, r3, #9
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d011      	beq.n	8005b8a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2101      	movs	r1, #1
 8005b72:	430a      	orrs	r2, r1
 8005b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b76:	e008      	b.n	8005b8a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2101      	movs	r1, #1
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	e000      	b.n	8005b8c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b004      	add	sp, #16
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	00010007 	.word	0x00010007

08005ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d124      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d11d      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	4252      	negs	r2, r2
 8005bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	2203      	movs	r2, #3
 8005be4:	4013      	ands	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	0018      	movs	r0, r3
 8005bec:	f000 f916 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e007      	b.n	8005c02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f000 f909 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 f915 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d125      	bne.n	8005c62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d11e      	bne.n	8005c62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2205      	movs	r2, #5
 8005c2a:	4252      	negs	r2, r2
 8005c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	23c0      	movs	r3, #192	; 0xc0
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 f8e9 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005c4a:	e007      	b.n	8005c5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 f8dc 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 f8e8 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d124      	bne.n	8005cba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2208      	movs	r2, #8
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d11d      	bne.n	8005cba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2209      	movs	r2, #9
 8005c84:	4252      	negs	r2, r2
 8005c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	2203      	movs	r2, #3
 8005c96:	4013      	ands	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f000 f8bd 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005ca2:	e007      	b.n	8005cb4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 f8b0 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 f8bc 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d125      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2210      	movs	r2, #16
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d11e      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2211      	movs	r2, #17
 8005cdc:	4252      	negs	r2, r2
 8005cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2208      	movs	r2, #8
 8005ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	23c0      	movs	r3, #192	; 0xc0
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f000 f890 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e007      	b.n	8005d0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 f883 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f88f 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d10f      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d108      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2202      	movs	r2, #2
 8005d36:	4252      	negs	r2, r2
 8005d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7fc ff2b 	bl	8002b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2280      	movs	r2, #128	; 0x80
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b80      	cmp	r3, #128	; 0x80
 8005d4e:	d10f      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d108      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2281      	movs	r2, #129	; 0x81
 8005d64:	4252      	negs	r2, r2
 8005d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 f954 	bl	8006018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	2380      	movs	r3, #128	; 0x80
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d10e      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2280      	movs	r2, #128	; 0x80
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d107      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_TIM_IRQHandler+0x260>)
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 f943 	bl	8006028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2240      	movs	r2, #64	; 0x40
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d10f      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2240      	movs	r2, #64	; 0x40
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d108      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2241      	movs	r2, #65	; 0x41
 8005dc4:	4252      	negs	r2, r2
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f000 f836 	bl	8005e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d10f      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d108      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2221      	movs	r2, #33	; 0x21
 8005df2:	4252      	negs	r2, r2
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f000 f905 	bl	8006008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b002      	add	sp, #8
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	fffffeff 	.word	0xfffffeff

08005e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a2f      	ldr	r2, [pc, #188]	; (8005f1c <TIM_Base_SetConfig+0xd0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0x20>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a2e      	ldr	r2, [pc, #184]	; (8005f20 <TIM_Base_SetConfig+0xd4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2270      	movs	r2, #112	; 0x70
 8005e70:	4393      	bics	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <TIM_Base_SetConfig+0xd0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <TIM_Base_SetConfig+0x62>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a25      	ldr	r2, [pc, #148]	; (8005f20 <TIM_Base_SetConfig+0xd4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00f      	beq.n	8005eae <TIM_Base_SetConfig+0x62>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a24      	ldr	r2, [pc, #144]	; (8005f24 <TIM_Base_SetConfig+0xd8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00b      	beq.n	8005eae <TIM_Base_SetConfig+0x62>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <TIM_Base_SetConfig+0xdc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_Base_SetConfig+0x62>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <TIM_Base_SetConfig+0xe0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_Base_SetConfig+0x62>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <TIM_Base_SetConfig+0xe4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d108      	bne.n	8005ec0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <TIM_Base_SetConfig+0xe8>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	4393      	bics	r3, r2
 8005ec6:	001a      	movs	r2, r3
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <TIM_Base_SetConfig+0xd0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <TIM_Base_SetConfig+0xba>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a0d      	ldr	r2, [pc, #52]	; (8005f28 <TIM_Base_SetConfig+0xdc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d007      	beq.n	8005f06 <TIM_Base_SetConfig+0xba>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <TIM_Base_SetConfig+0xe0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d003      	beq.n	8005f06 <TIM_Base_SetConfig+0xba>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <TIM_Base_SetConfig+0xe4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d103      	bne.n	8005f0e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	615a      	str	r2, [r3, #20]
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b004      	add	sp, #16
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40002000 	.word	0x40002000
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800
 8005f34:	fffffcff 	.word	0xfffffcff

08005f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	223c      	movs	r2, #60	; 0x3c
 8005f46:	5c9b      	ldrb	r3, [r3, r2]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e04f      	b.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	223c      	movs	r2, #60	; 0x3c
 8005f54:	2101      	movs	r1, #1
 8005f56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	223d      	movs	r2, #61	; 0x3d
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a20      	ldr	r2, [pc, #128]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2270      	movs	r2, #112	; 0x70
 8005f90:	4393      	bics	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a12      	ldr	r2, [pc, #72]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a11      	ldr	r2, [pc, #68]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d10c      	bne.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2280      	movs	r2, #128	; 0x80
 8005fc8:	4393      	bics	r3, r2
 8005fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	223d      	movs	r2, #61	; 0x3d
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	223c      	movs	r2, #60	; 0x3c
 8005fea:	2100      	movs	r1, #0
 8005fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b004      	add	sp, #16
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	ff0fffff 	.word	0xff0fffff
 8006000:	40000400 	.word	0x40000400
 8006004:	40014000 	.word	0x40014000

08006008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b002      	add	sp, #8
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006020:	46c0      	nop			; (mov r8, r8)
 8006022:	46bd      	mov	sp, r7
 8006024:	b002      	add	sp, #8
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e046      	b.n	80060d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2288      	movs	r2, #136	; 0x88
 800604e:	589b      	ldr	r3, [r3, r2]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2284      	movs	r2, #132	; 0x84
 8006058:	2100      	movs	r1, #0
 800605a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	0018      	movs	r0, r3
 8006060:	f7fc ff6e 	bl	8002f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2288      	movs	r2, #136	; 0x88
 8006068:	2124      	movs	r1, #36	; 0x24
 800606a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2101      	movs	r1, #1
 8006078:	438a      	bics	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0018      	movs	r0, r3
 8006080:	f000 fbfe 	bl	8006880 <UART_SetConfig>
 8006084:	0003      	movs	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e024      	b.n	80060d8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 fd95 	bl	8006bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	490d      	ldr	r1, [pc, #52]	; (80060e0 <HAL_UART_Init+0xa8>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	212a      	movs	r1, #42	; 0x2a
 80060ba:	438a      	bics	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 fe2d 	bl	8006d30 <UART_CheckIdleState>
 80060d6:	0003      	movs	r3, r0
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	ffffb7ff 	.word	0xffffb7ff

080060e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2288      	movs	r2, #136	; 0x88
 80060f8:	589b      	ldr	r3, [r3, r2]
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d000      	beq.n	8006100 <HAL_UART_Transmit+0x1c>
 80060fe:	e088      	b.n	8006212 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_UART_Transmit+0x2a>
 8006106:	1dbb      	adds	r3, r7, #6
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e080      	b.n	8006214 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	015b      	lsls	r3, r3, #5
 800611a:	429a      	cmp	r2, r3
 800611c:	d109      	bne.n	8006132 <HAL_UART_Transmit+0x4e>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2201      	movs	r2, #1
 800612a:	4013      	ands	r3, r2
 800612c:	d001      	beq.n	8006132 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e070      	b.n	8006214 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2290      	movs	r2, #144	; 0x90
 8006136:	2100      	movs	r1, #0
 8006138:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2288      	movs	r2, #136	; 0x88
 800613e:	2121      	movs	r1, #33	; 0x21
 8006140:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006142:	f7fd fa99 	bl	8003678 <HAL_GetTick>
 8006146:	0003      	movs	r3, r0
 8006148:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1dba      	adds	r2, r7, #6
 800614e:	2154      	movs	r1, #84	; 0x54
 8006150:	8812      	ldrh	r2, [r2, #0]
 8006152:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1dba      	adds	r2, r7, #6
 8006158:	2156      	movs	r1, #86	; 0x56
 800615a:	8812      	ldrh	r2, [r2, #0]
 800615c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	015b      	lsls	r3, r3, #5
 8006166:	429a      	cmp	r2, r3
 8006168:	d108      	bne.n	800617c <HAL_UART_Transmit+0x98>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	e003      	b.n	8006184 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006184:	e02c      	b.n	80061e0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	0013      	movs	r3, r2
 8006190:	2200      	movs	r2, #0
 8006192:	2180      	movs	r1, #128	; 0x80
 8006194:	f000 fe1a 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 8006198:	1e03      	subs	r3, r0, #0
 800619a:	d001      	beq.n	80061a0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e039      	b.n	8006214 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	001a      	movs	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	05d2      	lsls	r2, r2, #23
 80061b2:	0dd2      	lsrs	r2, r2, #23
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	3302      	adds	r3, #2
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	e007      	b.n	80061ce <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3301      	adds	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2256      	movs	r2, #86	; 0x56
 80061d2:	5a9b      	ldrh	r3, [r3, r2]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b299      	uxth	r1, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2256      	movs	r2, #86	; 0x56
 80061de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2256      	movs	r2, #86	; 0x56
 80061e4:	5a9b      	ldrh	r3, [r3, r2]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1cc      	bne.n	8006186 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	0013      	movs	r3, r2
 80061f6:	2200      	movs	r2, #0
 80061f8:	2140      	movs	r1, #64	; 0x40
 80061fa:	f000 fde7 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 80061fe:	1e03      	subs	r3, r0, #0
 8006200:	d001      	beq.n	8006206 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e006      	b.n	8006214 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2288      	movs	r2, #136	; 0x88
 800620a:	2120      	movs	r1, #32
 800620c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b008      	add	sp, #32
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800621c:	b5b0      	push	{r4, r5, r7, lr}
 800621e:	b0aa      	sub	sp, #168	; 0xa8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	22a4      	movs	r2, #164	; 0xa4
 800622c:	18b9      	adds	r1, r7, r2
 800622e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	20a0      	movs	r0, #160	; 0xa0
 8006238:	1839      	adds	r1, r7, r0
 800623a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	249c      	movs	r4, #156	; 0x9c
 8006244:	1939      	adds	r1, r7, r4
 8006246:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006248:	0011      	movs	r1, r2
 800624a:	18bb      	adds	r3, r7, r2
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4aa2      	ldr	r2, [pc, #648]	; (80064d8 <HAL_UART_IRQHandler+0x2bc>)
 8006250:	4013      	ands	r3, r2
 8006252:	2298      	movs	r2, #152	; 0x98
 8006254:	18bd      	adds	r5, r7, r2
 8006256:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006258:	18bb      	adds	r3, r7, r2
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d11a      	bne.n	8006296 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006260:	187b      	adds	r3, r7, r1
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2220      	movs	r2, #32
 8006266:	4013      	ands	r3, r2
 8006268:	d015      	beq.n	8006296 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800626a:	183b      	adds	r3, r7, r0
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2220      	movs	r2, #32
 8006270:	4013      	ands	r3, r2
 8006272:	d105      	bne.n	8006280 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006274:	193b      	adds	r3, r7, r4
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	055b      	lsls	r3, r3, #21
 800627c:	4013      	ands	r3, r2
 800627e:	d00a      	beq.n	8006296 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006284:	2b00      	cmp	r3, #0
 8006286:	d100      	bne.n	800628a <HAL_UART_IRQHandler+0x6e>
 8006288:	e2dc      	b.n	8006844 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	0010      	movs	r0, r2
 8006292:	4798      	blx	r3
      }
      return;
 8006294:	e2d6      	b.n	8006844 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006296:	2398      	movs	r3, #152	; 0x98
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d100      	bne.n	80062a2 <HAL_UART_IRQHandler+0x86>
 80062a0:	e122      	b.n	80064e8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062a2:	239c      	movs	r3, #156	; 0x9c
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a8c      	ldr	r2, [pc, #560]	; (80064dc <HAL_UART_IRQHandler+0x2c0>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	d106      	bne.n	80062bc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062ae:	23a0      	movs	r3, #160	; 0xa0
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a8a      	ldr	r2, [pc, #552]	; (80064e0 <HAL_UART_IRQHandler+0x2c4>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	d100      	bne.n	80062bc <HAL_UART_IRQHandler+0xa0>
 80062ba:	e115      	b.n	80064e8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062bc:	23a4      	movs	r3, #164	; 0xa4
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2201      	movs	r2, #1
 80062c4:	4013      	ands	r3, r2
 80062c6:	d012      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
 80062c8:	23a0      	movs	r3, #160	; 0xa0
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4013      	ands	r3, r2
 80062d4:	d00b      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2201      	movs	r2, #1
 80062dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2290      	movs	r2, #144	; 0x90
 80062e2:	589b      	ldr	r3, [r3, r2]
 80062e4:	2201      	movs	r2, #1
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2190      	movs	r1, #144	; 0x90
 80062ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062ee:	23a4      	movs	r3, #164	; 0xa4
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2202      	movs	r2, #2
 80062f6:	4013      	ands	r3, r2
 80062f8:	d011      	beq.n	800631e <HAL_UART_IRQHandler+0x102>
 80062fa:	239c      	movs	r3, #156	; 0x9c
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	4013      	ands	r3, r2
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2202      	movs	r2, #2
 800630c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2290      	movs	r2, #144	; 0x90
 8006312:	589b      	ldr	r3, [r3, r2]
 8006314:	2204      	movs	r2, #4
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2190      	movs	r1, #144	; 0x90
 800631c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800631e:	23a4      	movs	r3, #164	; 0xa4
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2204      	movs	r2, #4
 8006326:	4013      	ands	r3, r2
 8006328:	d011      	beq.n	800634e <HAL_UART_IRQHandler+0x132>
 800632a:	239c      	movs	r3, #156	; 0x9c
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	4013      	ands	r3, r2
 8006334:	d00b      	beq.n	800634e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2204      	movs	r2, #4
 800633c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2290      	movs	r2, #144	; 0x90
 8006342:	589b      	ldr	r3, [r3, r2]
 8006344:	2202      	movs	r2, #2
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2190      	movs	r1, #144	; 0x90
 800634c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800634e:	23a4      	movs	r3, #164	; 0xa4
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2208      	movs	r2, #8
 8006356:	4013      	ands	r3, r2
 8006358:	d017      	beq.n	800638a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800635a:	23a0      	movs	r3, #160	; 0xa0
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2220      	movs	r2, #32
 8006362:	4013      	ands	r3, r2
 8006364:	d105      	bne.n	8006372 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006366:	239c      	movs	r3, #156	; 0x9c
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5b      	ldr	r2, [pc, #364]	; (80064dc <HAL_UART_IRQHandler+0x2c0>)
 800636e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006370:	d00b      	beq.n	800638a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2208      	movs	r2, #8
 8006378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2290      	movs	r2, #144	; 0x90
 800637e:	589b      	ldr	r3, [r3, r2]
 8006380:	2208      	movs	r2, #8
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2190      	movs	r1, #144	; 0x90
 8006388:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800638a:	23a4      	movs	r3, #164	; 0xa4
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	4013      	ands	r3, r2
 8006396:	d013      	beq.n	80063c0 <HAL_UART_IRQHandler+0x1a4>
 8006398:	23a0      	movs	r3, #160	; 0xa0
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	04db      	lsls	r3, r3, #19
 80063a2:	4013      	ands	r3, r2
 80063a4:	d00c      	beq.n	80063c0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	0112      	lsls	r2, r2, #4
 80063ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2290      	movs	r2, #144	; 0x90
 80063b4:	589b      	ldr	r3, [r3, r2]
 80063b6:	2220      	movs	r2, #32
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2190      	movs	r1, #144	; 0x90
 80063be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2290      	movs	r2, #144	; 0x90
 80063c4:	589b      	ldr	r3, [r3, r2]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d100      	bne.n	80063cc <HAL_UART_IRQHandler+0x1b0>
 80063ca:	e23d      	b.n	8006848 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063cc:	23a4      	movs	r3, #164	; 0xa4
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2220      	movs	r2, #32
 80063d4:	4013      	ands	r3, r2
 80063d6:	d015      	beq.n	8006404 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063d8:	23a0      	movs	r3, #160	; 0xa0
 80063da:	18fb      	adds	r3, r7, r3
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2220      	movs	r2, #32
 80063e0:	4013      	ands	r3, r2
 80063e2:	d106      	bne.n	80063f2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063e4:	239c      	movs	r3, #156	; 0x9c
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	055b      	lsls	r3, r3, #21
 80063ee:	4013      	ands	r3, r2
 80063f0:	d008      	beq.n	8006404 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	0010      	movs	r0, r2
 8006402:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2290      	movs	r2, #144	; 0x90
 8006408:	589b      	ldr	r3, [r3, r2]
 800640a:	2194      	movs	r1, #148	; 0x94
 800640c:	187a      	adds	r2, r7, r1
 800640e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2240      	movs	r2, #64	; 0x40
 8006418:	4013      	ands	r3, r2
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d004      	beq.n	8006428 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800641e:	187b      	adds	r3, r7, r1
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2228      	movs	r2, #40	; 0x28
 8006424:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006426:	d04c      	beq.n	80064c2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0018      	movs	r0, r3
 800642c:	f000 fd96 	bl	8006f5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2240      	movs	r2, #64	; 0x40
 8006438:	4013      	ands	r3, r2
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d13c      	bne.n	80064b8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643e:	f3ef 8310 	mrs	r3, PRIMASK
 8006442:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006446:	2090      	movs	r0, #144	; 0x90
 8006448:	183a      	adds	r2, r7, r0
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	2301      	movs	r3, #1
 800644e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006452:	f383 8810 	msr	PRIMASK, r3
}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	438a      	bics	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	183b      	adds	r3, r7, r0
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006470:	f383 8810 	msr	PRIMASK, r3
}
 8006474:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2280      	movs	r2, #128	; 0x80
 800647a:	589b      	ldr	r3, [r3, r2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d016      	beq.n	80064ae <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2280      	movs	r2, #128	; 0x80
 8006484:	589b      	ldr	r3, [r3, r2]
 8006486:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <HAL_UART_IRQHandler+0x2c8>)
 8006488:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	589b      	ldr	r3, [r3, r2]
 8006490:	0018      	movs	r0, r3
 8006492:	f7fd ff4d 	bl	8004330 <HAL_DMA_Abort_IT>
 8006496:	1e03      	subs	r3, r0, #0
 8006498:	d01c      	beq.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2280      	movs	r2, #128	; 0x80
 800649e:	589b      	ldr	r3, [r3, r2]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	2180      	movs	r1, #128	; 0x80
 80064a6:	5852      	ldr	r2, [r2, r1]
 80064a8:	0010      	movs	r0, r2
 80064aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e012      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7fc fb49 	bl	8002b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b6:	e00d      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f7fc fb44 	bl	8002b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	e008      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7fc fb3f 	bl	8002b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2290      	movs	r2, #144	; 0x90
 80064ce:	2100      	movs	r1, #0
 80064d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80064d2:	e1b9      	b.n	8006848 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	46c0      	nop			; (mov r8, r8)
    return;
 80064d6:	e1b7      	b.n	8006848 <HAL_UART_IRQHandler+0x62c>
 80064d8:	0000080f 	.word	0x0000080f
 80064dc:	10000001 	.word	0x10000001
 80064e0:	04000120 	.word	0x04000120
 80064e4:	08007029 	.word	0x08007029

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d000      	beq.n	80064f2 <HAL_UART_IRQHandler+0x2d6>
 80064f0:	e13e      	b.n	8006770 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064f2:	23a4      	movs	r3, #164	; 0xa4
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2210      	movs	r2, #16
 80064fa:	4013      	ands	r3, r2
 80064fc:	d100      	bne.n	8006500 <HAL_UART_IRQHandler+0x2e4>
 80064fe:	e137      	b.n	8006770 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006500:	23a0      	movs	r3, #160	; 0xa0
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2210      	movs	r2, #16
 8006508:	4013      	ands	r3, r2
 800650a:	d100      	bne.n	800650e <HAL_UART_IRQHandler+0x2f2>
 800650c:	e130      	b.n	8006770 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2210      	movs	r2, #16
 8006514:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2240      	movs	r2, #64	; 0x40
 800651e:	4013      	ands	r3, r2
 8006520:	2b40      	cmp	r3, #64	; 0x40
 8006522:	d000      	beq.n	8006526 <HAL_UART_IRQHandler+0x30a>
 8006524:	e0a4      	b.n	8006670 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	589b      	ldr	r3, [r3, r2]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	217e      	movs	r1, #126	; 0x7e
 8006532:	187b      	adds	r3, r7, r1
 8006534:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006536:	187b      	adds	r3, r7, r1
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d100      	bne.n	8006540 <HAL_UART_IRQHandler+0x324>
 800653e:	e185      	b.n	800684c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	225c      	movs	r2, #92	; 0x5c
 8006544:	5a9b      	ldrh	r3, [r3, r2]
 8006546:	187a      	adds	r2, r7, r1
 8006548:	8812      	ldrh	r2, [r2, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d300      	bcc.n	8006550 <HAL_UART_IRQHandler+0x334>
 800654e:	e17d      	b.n	800684c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	187a      	adds	r2, r7, r1
 8006554:	215e      	movs	r1, #94	; 0x5e
 8006556:	8812      	ldrh	r2, [r2, #0]
 8006558:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2280      	movs	r2, #128	; 0x80
 800655e:	589b      	ldr	r3, [r3, r2]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2220      	movs	r2, #32
 8006566:	4013      	ands	r3, r2
 8006568:	d170      	bne.n	800664c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656a:	f3ef 8310 	mrs	r3, PRIMASK
 800656e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	67bb      	str	r3, [r7, #120]	; 0x78
 8006574:	2301      	movs	r3, #1
 8006576:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657a:	f383 8810 	msr	PRIMASK, r3
}
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	49b4      	ldr	r1, [pc, #720]	; (800685c <HAL_UART_IRQHandler+0x640>)
 800658c:	400a      	ands	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006592:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	f383 8810 	msr	PRIMASK, r3
}
 800659a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659c:	f3ef 8310 	mrs	r3, PRIMASK
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a4:	677b      	str	r3, [r7, #116]	; 0x74
 80065a6:	2301      	movs	r3, #1
 80065a8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2101      	movs	r1, #1
 80065be:	438a      	bics	r2, r1
 80065c0:	609a      	str	r2, [r3, #8]
 80065c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c8:	f383 8810 	msr	PRIMASK, r3
}
 80065cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ce:	f3ef 8310 	mrs	r3, PRIMASK
 80065d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80065d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	673b      	str	r3, [r7, #112]	; 0x70
 80065d8:	2301      	movs	r3, #1
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	f383 8810 	msr	PRIMASK, r3
}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2140      	movs	r1, #64	; 0x40
 80065f0:	438a      	bics	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fa:	f383 8810 	msr	PRIMASK, r3
}
 80065fe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	228c      	movs	r2, #140	; 0x8c
 8006604:	2120      	movs	r1, #32
 8006606:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800660e:	f3ef 8310 	mrs	r3, PRIMASK
 8006612:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006614:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006618:	2301      	movs	r3, #1
 800661a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800661e:	f383 8810 	msr	PRIMASK, r3
}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2110      	movs	r1, #16
 8006630:	438a      	bics	r2, r1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800663a:	f383 8810 	msr	PRIMASK, r3
}
 800663e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2280      	movs	r2, #128	; 0x80
 8006644:	589b      	ldr	r3, [r3, r2]
 8006646:	0018      	movs	r0, r3
 8006648:	f7fd fe10 	bl	800426c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	225c      	movs	r2, #92	; 0x5c
 8006656:	5a9a      	ldrh	r2, [r3, r2]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	215e      	movs	r1, #94	; 0x5e
 800665c:	5a5b      	ldrh	r3, [r3, r1]
 800665e:	b29b      	uxth	r3, r3
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	0011      	movs	r1, r2
 8006668:	0018      	movs	r0, r3
 800666a:	f000 f8fd 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800666e:	e0ed      	b.n	800684c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	225c      	movs	r2, #92	; 0x5c
 8006674:	5a99      	ldrh	r1, [r3, r2]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	225e      	movs	r2, #94	; 0x5e
 800667a:	5a9b      	ldrh	r3, [r3, r2]
 800667c:	b29a      	uxth	r2, r3
 800667e:	208e      	movs	r0, #142	; 0x8e
 8006680:	183b      	adds	r3, r7, r0
 8006682:	1a8a      	subs	r2, r1, r2
 8006684:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	225e      	movs	r2, #94	; 0x5e
 800668a:	5a9b      	ldrh	r3, [r3, r2]
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d100      	bne.n	8006694 <HAL_UART_IRQHandler+0x478>
 8006692:	e0dd      	b.n	8006850 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006694:	183b      	adds	r3, r7, r0
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d100      	bne.n	800669e <HAL_UART_IRQHandler+0x482>
 800669c:	e0d8      	b.n	8006850 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800669e:	f3ef 8310 	mrs	r3, PRIMASK
 80066a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80066a4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a6:	2488      	movs	r4, #136	; 0x88
 80066a8:	193a      	adds	r2, r7, r4
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	2301      	movs	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f383 8810 	msr	PRIMASK, r3
}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4967      	ldr	r1, [pc, #412]	; (8006860 <HAL_UART_IRQHandler+0x644>)
 80066c4:	400a      	ands	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	193b      	adds	r3, r7, r4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f383 8810 	msr	PRIMASK, r3
}
 80066d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	61bb      	str	r3, [r7, #24]
  return(result);
 80066dc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066de:	2484      	movs	r4, #132	; 0x84
 80066e0:	193a      	adds	r2, r7, r4
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	2301      	movs	r3, #1
 80066e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f383 8810 	msr	PRIMASK, r3
}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	495a      	ldr	r1, [pc, #360]	; (8006864 <HAL_UART_IRQHandler+0x648>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	193b      	adds	r3, r7, r4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f383 8810 	msr	PRIMASK, r3
}
 800670c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	228c      	movs	r2, #140	; 0x8c
 8006712:	2120      	movs	r1, #32
 8006714:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006722:	f3ef 8310 	mrs	r3, PRIMASK
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672a:	2480      	movs	r4, #128	; 0x80
 800672c:	193a      	adds	r2, r7, r4
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	2301      	movs	r3, #1
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	f383 8810 	msr	PRIMASK, r3
}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2110      	movs	r1, #16
 8006748:	438a      	bics	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	193b      	adds	r3, r7, r4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	f383 8810 	msr	PRIMASK, r3
}
 8006758:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006760:	183b      	adds	r3, r7, r0
 8006762:	881a      	ldrh	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	0011      	movs	r1, r2
 8006768:	0018      	movs	r0, r3
 800676a:	f000 f87d 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800676e:	e06f      	b.n	8006850 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006770:	23a4      	movs	r3, #164	; 0xa4
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	035b      	lsls	r3, r3, #13
 800677a:	4013      	ands	r3, r2
 800677c:	d010      	beq.n	80067a0 <HAL_UART_IRQHandler+0x584>
 800677e:	239c      	movs	r3, #156	; 0x9c
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	03db      	lsls	r3, r3, #15
 8006788:	4013      	ands	r3, r2
 800678a:	d009      	beq.n	80067a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2280      	movs	r2, #128	; 0x80
 8006792:	0352      	lsls	r2, r2, #13
 8006794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0018      	movs	r0, r3
 800679a:	f000 fc88 	bl	80070ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800679e:	e05a      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067a0:	23a4      	movs	r3, #164	; 0xa4
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2280      	movs	r2, #128	; 0x80
 80067a8:	4013      	ands	r3, r2
 80067aa:	d016      	beq.n	80067da <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067ac:	23a0      	movs	r3, #160	; 0xa0
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2280      	movs	r2, #128	; 0x80
 80067b4:	4013      	ands	r3, r2
 80067b6:	d106      	bne.n	80067c6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067b8:	239c      	movs	r3, #156	; 0x9c
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	4013      	ands	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d042      	beq.n	8006854 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	0010      	movs	r0, r2
 80067d6:	4798      	blx	r3
    }
    return;
 80067d8:	e03c      	b.n	8006854 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067da:	23a4      	movs	r3, #164	; 0xa4
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2240      	movs	r2, #64	; 0x40
 80067e2:	4013      	ands	r3, r2
 80067e4:	d00a      	beq.n	80067fc <HAL_UART_IRQHandler+0x5e0>
 80067e6:	23a0      	movs	r3, #160	; 0xa0
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2240      	movs	r2, #64	; 0x40
 80067ee:	4013      	ands	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 fc2e 	bl	8007056 <UART_EndTransmit_IT>
    return;
 80067fa:	e02c      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067fc:	23a4      	movs	r3, #164	; 0xa4
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2380      	movs	r3, #128	; 0x80
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	4013      	ands	r3, r2
 8006808:	d00b      	beq.n	8006822 <HAL_UART_IRQHandler+0x606>
 800680a:	23a0      	movs	r3, #160	; 0xa0
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	05db      	lsls	r3, r3, #23
 8006814:	4013      	ands	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0018      	movs	r0, r3
 800681c:	f000 fc57 	bl	80070ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006820:	e019      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006822:	23a4      	movs	r3, #164	; 0xa4
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	045b      	lsls	r3, r3, #17
 800682c:	4013      	ands	r3, r2
 800682e:	d012      	beq.n	8006856 <HAL_UART_IRQHandler+0x63a>
 8006830:	23a0      	movs	r3, #160	; 0xa0
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	da0d      	bge.n	8006856 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0018      	movs	r0, r3
 800683e:	f000 fc3e 	bl	80070be <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006842:	e008      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
      return;
 8006844:	46c0      	nop			; (mov r8, r8)
 8006846:	e006      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
    return;
 8006848:	46c0      	nop			; (mov r8, r8)
 800684a:	e004      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
      return;
 800684c:	46c0      	nop			; (mov r8, r8)
 800684e:	e002      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
      return;
 8006850:	46c0      	nop			; (mov r8, r8)
 8006852:	e000      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
    return;
 8006854:	46c0      	nop			; (mov r8, r8)
  }
}
 8006856:	46bd      	mov	sp, r7
 8006858:	b02a      	add	sp, #168	; 0xa8
 800685a:	bdb0      	pop	{r4, r5, r7, pc}
 800685c:	fffffeff 	.word	0xfffffeff
 8006860:	fffffedf 	.word	0xfffffedf
 8006864:	effffffe 	.word	0xeffffffe

08006868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	000a      	movs	r2, r1
 8006872:	1cbb      	adds	r3, r7, #2
 8006874:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	46bd      	mov	sp, r7
 800687a:	b002      	add	sp, #8
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006888:	231a      	movs	r3, #26
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4abc      	ldr	r2, [pc, #752]	; (8006ba0 <UART_SetConfig+0x320>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	0019      	movs	r1, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4ab7      	ldr	r2, [pc, #732]	; (8006ba4 <UART_SetConfig+0x324>)
 80068c6:	4013      	ands	r3, r2
 80068c8:	0019      	movs	r1, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	4aae      	ldr	r2, [pc, #696]	; (8006ba8 <UART_SetConfig+0x328>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006902:	220f      	movs	r2, #15
 8006904:	4393      	bics	r3, r2
 8006906:	0019      	movs	r1, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4aa4      	ldr	r2, [pc, #656]	; (8006bac <UART_SetConfig+0x32c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d127      	bne.n	800696e <UART_SetConfig+0xee>
 800691e:	4ba4      	ldr	r3, [pc, #656]	; (8006bb0 <UART_SetConfig+0x330>)
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	2203      	movs	r2, #3
 8006924:	4013      	ands	r3, r2
 8006926:	2b03      	cmp	r3, #3
 8006928:	d017      	beq.n	800695a <UART_SetConfig+0xda>
 800692a:	d81b      	bhi.n	8006964 <UART_SetConfig+0xe4>
 800692c:	2b02      	cmp	r3, #2
 800692e:	d00a      	beq.n	8006946 <UART_SetConfig+0xc6>
 8006930:	d818      	bhi.n	8006964 <UART_SetConfig+0xe4>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <UART_SetConfig+0xbc>
 8006936:	2b01      	cmp	r3, #1
 8006938:	d00a      	beq.n	8006950 <UART_SetConfig+0xd0>
 800693a:	e013      	b.n	8006964 <UART_SetConfig+0xe4>
 800693c:	231b      	movs	r3, #27
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	e058      	b.n	80069f8 <UART_SetConfig+0x178>
 8006946:	231b      	movs	r3, #27
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	2202      	movs	r2, #2
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	e053      	b.n	80069f8 <UART_SetConfig+0x178>
 8006950:	231b      	movs	r3, #27
 8006952:	18fb      	adds	r3, r7, r3
 8006954:	2204      	movs	r2, #4
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	e04e      	b.n	80069f8 <UART_SetConfig+0x178>
 800695a:	231b      	movs	r3, #27
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	2208      	movs	r2, #8
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	e049      	b.n	80069f8 <UART_SetConfig+0x178>
 8006964:	231b      	movs	r3, #27
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2210      	movs	r2, #16
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e044      	b.n	80069f8 <UART_SetConfig+0x178>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a90      	ldr	r2, [pc, #576]	; (8006bb4 <UART_SetConfig+0x334>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d127      	bne.n	80069c8 <UART_SetConfig+0x148>
 8006978:	4b8d      	ldr	r3, [pc, #564]	; (8006bb0 <UART_SetConfig+0x330>)
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	220c      	movs	r2, #12
 800697e:	4013      	ands	r3, r2
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d017      	beq.n	80069b4 <UART_SetConfig+0x134>
 8006984:	d81b      	bhi.n	80069be <UART_SetConfig+0x13e>
 8006986:	2b08      	cmp	r3, #8
 8006988:	d00a      	beq.n	80069a0 <UART_SetConfig+0x120>
 800698a:	d818      	bhi.n	80069be <UART_SetConfig+0x13e>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <UART_SetConfig+0x116>
 8006990:	2b04      	cmp	r3, #4
 8006992:	d00a      	beq.n	80069aa <UART_SetConfig+0x12a>
 8006994:	e013      	b.n	80069be <UART_SetConfig+0x13e>
 8006996:	231b      	movs	r3, #27
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e02b      	b.n	80069f8 <UART_SetConfig+0x178>
 80069a0:	231b      	movs	r3, #27
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	2202      	movs	r2, #2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e026      	b.n	80069f8 <UART_SetConfig+0x178>
 80069aa:	231b      	movs	r3, #27
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	2204      	movs	r2, #4
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e021      	b.n	80069f8 <UART_SetConfig+0x178>
 80069b4:	231b      	movs	r3, #27
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	2208      	movs	r2, #8
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	e01c      	b.n	80069f8 <UART_SetConfig+0x178>
 80069be:	231b      	movs	r3, #27
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2210      	movs	r2, #16
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e017      	b.n	80069f8 <UART_SetConfig+0x178>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7a      	ldr	r2, [pc, #488]	; (8006bb8 <UART_SetConfig+0x338>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d104      	bne.n	80069dc <UART_SetConfig+0x15c>
 80069d2:	231b      	movs	r3, #27
 80069d4:	18fb      	adds	r3, r7, r3
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e00d      	b.n	80069f8 <UART_SetConfig+0x178>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a76      	ldr	r2, [pc, #472]	; (8006bbc <UART_SetConfig+0x33c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d104      	bne.n	80069f0 <UART_SetConfig+0x170>
 80069e6:	231b      	movs	r3, #27
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	2200      	movs	r2, #0
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e003      	b.n	80069f8 <UART_SetConfig+0x178>
 80069f0:	231b      	movs	r3, #27
 80069f2:	18fb      	adds	r3, r7, r3
 80069f4:	2210      	movs	r2, #16
 80069f6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d000      	beq.n	8006a06 <UART_SetConfig+0x186>
 8006a04:	e065      	b.n	8006ad2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006a06:	231b      	movs	r3, #27
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d015      	beq.n	8006a3c <UART_SetConfig+0x1bc>
 8006a10:	dc18      	bgt.n	8006a44 <UART_SetConfig+0x1c4>
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d00d      	beq.n	8006a32 <UART_SetConfig+0x1b2>
 8006a16:	dc15      	bgt.n	8006a44 <UART_SetConfig+0x1c4>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <UART_SetConfig+0x1a2>
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d005      	beq.n	8006a2c <UART_SetConfig+0x1ac>
 8006a20:	e010      	b.n	8006a44 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a22:	f7fe fde7 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8006a26:	0003      	movs	r3, r0
 8006a28:	617b      	str	r3, [r7, #20]
        break;
 8006a2a:	e012      	b.n	8006a52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a2c:	4b64      	ldr	r3, [pc, #400]	; (8006bc0 <UART_SetConfig+0x340>)
 8006a2e:	617b      	str	r3, [r7, #20]
        break;
 8006a30:	e00f      	b.n	8006a52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a32:	f7fe fd53 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8006a36:	0003      	movs	r3, r0
 8006a38:	617b      	str	r3, [r7, #20]
        break;
 8006a3a:	e00a      	b.n	8006a52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	617b      	str	r3, [r7, #20]
        break;
 8006a42:	e006      	b.n	8006a52 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a48:	231a      	movs	r3, #26
 8006a4a:	18fb      	adds	r3, r7, r3
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]
        break;
 8006a50:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d100      	bne.n	8006a5a <UART_SetConfig+0x1da>
 8006a58:	e08d      	b.n	8006b76 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a5e:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <UART_SetConfig+0x344>)
 8006a60:	0052      	lsls	r2, r2, #1
 8006a62:	5ad3      	ldrh	r3, [r2, r3]
 8006a64:	0019      	movs	r1, r3
 8006a66:	6978      	ldr	r0, [r7, #20]
 8006a68:	f7f9 fb6a 	bl	8000140 <__udivsi3>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	005a      	lsls	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	18d2      	adds	r2, r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	0019      	movs	r1, r3
 8006a7e:	0010      	movs	r0, r2
 8006a80:	f7f9 fb5e 	bl	8000140 <__udivsi3>
 8006a84:	0003      	movs	r3, r0
 8006a86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b0f      	cmp	r3, #15
 8006a8c:	d91c      	bls.n	8006ac8 <UART_SetConfig+0x248>
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	025b      	lsls	r3, r3, #9
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d217      	bcs.n	8006ac8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	200e      	movs	r0, #14
 8006a9e:	183b      	adds	r3, r7, r0
 8006aa0:	210f      	movs	r1, #15
 8006aa2:	438a      	bics	r2, r1
 8006aa4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2207      	movs	r2, #7
 8006aae:	4013      	ands	r3, r2
 8006ab0:	b299      	uxth	r1, r3
 8006ab2:	183b      	adds	r3, r7, r0
 8006ab4:	183a      	adds	r2, r7, r0
 8006ab6:	8812      	ldrh	r2, [r2, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	183a      	adds	r2, r7, r0
 8006ac2:	8812      	ldrh	r2, [r2, #0]
 8006ac4:	60da      	str	r2, [r3, #12]
 8006ac6:	e056      	b.n	8006b76 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006ac8:	231a      	movs	r3, #26
 8006aca:	18fb      	adds	r3, r7, r3
 8006acc:	2201      	movs	r2, #1
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e051      	b.n	8006b76 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad2:	231b      	movs	r3, #27
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d015      	beq.n	8006b08 <UART_SetConfig+0x288>
 8006adc:	dc18      	bgt.n	8006b10 <UART_SetConfig+0x290>
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d00d      	beq.n	8006afe <UART_SetConfig+0x27e>
 8006ae2:	dc15      	bgt.n	8006b10 <UART_SetConfig+0x290>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <UART_SetConfig+0x26e>
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d005      	beq.n	8006af8 <UART_SetConfig+0x278>
 8006aec:	e010      	b.n	8006b10 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aee:	f7fe fd81 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8006af2:	0003      	movs	r3, r0
 8006af4:	617b      	str	r3, [r7, #20]
        break;
 8006af6:	e012      	b.n	8006b1e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b31      	ldr	r3, [pc, #196]	; (8006bc0 <UART_SetConfig+0x340>)
 8006afa:	617b      	str	r3, [r7, #20]
        break;
 8006afc:	e00f      	b.n	8006b1e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fe fced 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8006b02:	0003      	movs	r3, r0
 8006b04:	617b      	str	r3, [r7, #20]
        break;
 8006b06:	e00a      	b.n	8006b1e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	617b      	str	r3, [r7, #20]
        break;
 8006b0e:	e006      	b.n	8006b1e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b14:	231a      	movs	r3, #26
 8006b16:	18fb      	adds	r3, r7, r3
 8006b18:	2201      	movs	r2, #1
 8006b1a:	701a      	strb	r2, [r3, #0]
        break;
 8006b1c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d028      	beq.n	8006b76 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b28:	4b26      	ldr	r3, [pc, #152]	; (8006bc4 <UART_SetConfig+0x344>)
 8006b2a:	0052      	lsls	r2, r2, #1
 8006b2c:	5ad3      	ldrh	r3, [r2, r3]
 8006b2e:	0019      	movs	r1, r3
 8006b30:	6978      	ldr	r0, [r7, #20]
 8006b32:	f7f9 fb05 	bl	8000140 <__udivsi3>
 8006b36:	0003      	movs	r3, r0
 8006b38:	001a      	movs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	18d2      	adds	r2, r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	0019      	movs	r1, r3
 8006b48:	0010      	movs	r0, r2
 8006b4a:	f7f9 faf9 	bl	8000140 <__udivsi3>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b0f      	cmp	r3, #15
 8006b56:	d90a      	bls.n	8006b6e <UART_SetConfig+0x2ee>
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	2380      	movs	r3, #128	; 0x80
 8006b5c:	025b      	lsls	r3, r3, #9
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d205      	bcs.n	8006b6e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	e003      	b.n	8006b76 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006b6e:	231a      	movs	r3, #26
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	226a      	movs	r2, #106	; 0x6a
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2268      	movs	r2, #104	; 0x68
 8006b82:	2101      	movs	r1, #1
 8006b84:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006b92:	231a      	movs	r3, #26
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	781b      	ldrb	r3, [r3, #0]
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b008      	add	sp, #32
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	cfff69f3 	.word	0xcfff69f3
 8006ba4:	ffffcfff 	.word	0xffffcfff
 8006ba8:	11fff4ff 	.word	0x11fff4ff
 8006bac:	40013800 	.word	0x40013800
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	40004400 	.word	0x40004400
 8006bb8:	40004800 	.word	0x40004800
 8006bbc:	40004c00 	.word	0x40004c00
 8006bc0:	00f42400 	.word	0x00f42400
 8006bc4:	0800e5c0 	.word	0x0800e5c0

08006bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <UART_AdvFeatureConfig+0x144>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	0019      	movs	r1, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d00b      	beq.n	8006c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4a43      	ldr	r2, [pc, #268]	; (8006d10 <UART_AdvFeatureConfig+0x148>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	0019      	movs	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	2204      	movs	r2, #4
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d00b      	beq.n	8006c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	4a3b      	ldr	r2, [pc, #236]	; (8006d14 <UART_AdvFeatureConfig+0x14c>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	0019      	movs	r1, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d00b      	beq.n	8006c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4a34      	ldr	r2, [pc, #208]	; (8006d18 <UART_AdvFeatureConfig+0x150>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	0019      	movs	r1, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a2c      	ldr	r2, [pc, #176]	; (8006d1c <UART_AdvFeatureConfig+0x154>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	0019      	movs	r1, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	2220      	movs	r2, #32
 8006c80:	4013      	ands	r3, r2
 8006c82:	d00b      	beq.n	8006c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4a25      	ldr	r2, [pc, #148]	; (8006d20 <UART_AdvFeatureConfig+0x158>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	0019      	movs	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca0:	2240      	movs	r2, #64	; 0x40
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d01d      	beq.n	8006ce2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4a1d      	ldr	r2, [pc, #116]	; (8006d24 <UART_AdvFeatureConfig+0x15c>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	0019      	movs	r1, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc2:	2380      	movs	r3, #128	; 0x80
 8006cc4:	035b      	lsls	r3, r3, #13
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d10b      	bne.n	8006ce2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a15      	ldr	r2, [pc, #84]	; (8006d28 <UART_AdvFeatureConfig+0x160>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	2280      	movs	r2, #128	; 0x80
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d00b      	beq.n	8006d04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4a0e      	ldr	r2, [pc, #56]	; (8006d2c <UART_AdvFeatureConfig+0x164>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
  }
}
 8006d04:	46c0      	nop			; (mov r8, r8)
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b002      	add	sp, #8
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	fffdffff 	.word	0xfffdffff
 8006d10:	fffeffff 	.word	0xfffeffff
 8006d14:	fffbffff 	.word	0xfffbffff
 8006d18:	ffff7fff 	.word	0xffff7fff
 8006d1c:	ffffefff 	.word	0xffffefff
 8006d20:	ffffdfff 	.word	0xffffdfff
 8006d24:	ffefffff 	.word	0xffefffff
 8006d28:	ff9fffff 	.word	0xff9fffff
 8006d2c:	fff7ffff 	.word	0xfff7ffff

08006d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2290      	movs	r2, #144	; 0x90
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d40:	f7fc fc9a 	bl	8003678 <HAL_GetTick>
 8006d44:	0003      	movs	r3, r0
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2208      	movs	r2, #8
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d10c      	bne.n	8006d70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2280      	movs	r2, #128	; 0x80
 8006d5a:	0391      	lsls	r1, r2, #14
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4a1a      	ldr	r2, [pc, #104]	; (8006dc8 <UART_CheckIdleState+0x98>)
 8006d60:	9200      	str	r2, [sp, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f000 f832 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 8006d68:	1e03      	subs	r3, r0, #0
 8006d6a:	d001      	beq.n	8006d70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e026      	b.n	8006dbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2204      	movs	r2, #4
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d10c      	bne.n	8006d98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2280      	movs	r2, #128	; 0x80
 8006d82:	03d1      	lsls	r1, r2, #15
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <UART_CheckIdleState+0x98>)
 8006d88:	9200      	str	r2, [sp, #0]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f000 f81e 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 8006d90:	1e03      	subs	r3, r0, #0
 8006d92:	d001      	beq.n	8006d98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e012      	b.n	8006dbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2288      	movs	r2, #136	; 0x88
 8006d9c:	2120      	movs	r1, #32
 8006d9e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	228c      	movs	r2, #140	; 0x8c
 8006da4:	2120      	movs	r1, #32
 8006da6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2284      	movs	r2, #132	; 0x84
 8006db8:	2100      	movs	r1, #0
 8006dba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	b004      	add	sp, #16
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	01ffffff 	.word	0x01ffffff

08006dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b094      	sub	sp, #80	; 0x50
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	1dfb      	adds	r3, r7, #7
 8006dda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ddc:	e0a7      	b.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de0:	3301      	adds	r3, #1
 8006de2:	d100      	bne.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006de4:	e0a3      	b.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de6:	f7fc fc47 	bl	8003678 <HAL_GetTick>
 8006dea:	0002      	movs	r2, r0
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8006df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d13f      	bne.n	8006e7c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e04:	647b      	str	r3, [r7, #68]	; 0x44
 8006e06:	2301      	movs	r3, #1
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	f383 8810 	msr	PRIMASK, r3
}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	494e      	ldr	r1, [pc, #312]	; (8006f58 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006e1e:	400a      	ands	r2, r1
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f383 8810 	msr	PRIMASK, r3
}
 8006e2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e36:	643b      	str	r3, [r7, #64]	; 0x40
 8006e38:	2301      	movs	r3, #1
 8006e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	f383 8810 	msr	PRIMASK, r3
}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2101      	movs	r1, #1
 8006e50:	438a      	bics	r2, r1
 8006e52:	609a      	str	r2, [r3, #8]
 8006e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5a:	f383 8810 	msr	PRIMASK, r3
}
 8006e5e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2288      	movs	r2, #136	; 0x88
 8006e64:	2120      	movs	r1, #32
 8006e66:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	228c      	movs	r2, #140	; 0x8c
 8006e6c:	2120      	movs	r1, #32
 8006e6e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2284      	movs	r2, #132	; 0x84
 8006e74:	2100      	movs	r1, #0
 8006e76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e069      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2204      	movs	r2, #4
 8006e84:	4013      	ands	r3, r2
 8006e86:	d052      	beq.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69da      	ldr	r2, [r3, #28]
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	401a      	ands	r2, r3
 8006e94:	2380      	movs	r3, #128	; 0x80
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d148      	bne.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2280      	movs	r2, #128	; 0x80
 8006ea2:	0112      	lsls	r2, r2, #4
 8006ea4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eaa:	613b      	str	r3, [r7, #16]
  return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f383 8810 	msr	PRIMASK, r3
}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4924      	ldr	r1, [pc, #144]	; (8006f58 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006ec8:	400a      	ands	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ece:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f383 8810 	msr	PRIMASK, r3
}
 8006ed6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8006edc:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ede:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	f383 8810 	msr	PRIMASK, r3
}
 8006eec:	46c0      	nop			; (mov r8, r8)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2101      	movs	r1, #1
 8006efa:	438a      	bics	r2, r1
 8006efc:	609a      	str	r2, [r3, #8]
 8006efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	f383 8810 	msr	PRIMASK, r3
}
 8006f08:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2288      	movs	r2, #136	; 0x88
 8006f0e:	2120      	movs	r1, #32
 8006f10:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	228c      	movs	r2, #140	; 0x8c
 8006f16:	2120      	movs	r1, #32
 8006f18:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2290      	movs	r2, #144	; 0x90
 8006f1e:	2120      	movs	r1, #32
 8006f20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2284      	movs	r2, #132	; 0x84
 8006f26:	2100      	movs	r1, #0
 8006f28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e010      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	4013      	ands	r3, r2
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	425a      	negs	r2, r3
 8006f3e:	4153      	adcs	r3, r2
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	001a      	movs	r2, r3
 8006f44:	1dfb      	adds	r3, r7, #7
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d100      	bne.n	8006f4e <UART_WaitOnFlagUntilTimeout+0x182>
 8006f4c:	e747      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	0018      	movs	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b014      	add	sp, #80	; 0x50
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	fffffe5f 	.word	0xfffffe5f

08006f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08e      	sub	sp, #56	; 0x38
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f64:	f3ef 8310 	mrs	r3, PRIMASK
 8006f68:	617b      	str	r3, [r7, #20]
  return(result);
 8006f6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6e:	2301      	movs	r3, #1
 8006f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4926      	ldr	r1, [pc, #152]	; (8007020 <UART_EndRxTransfer+0xc4>)
 8006f86:	400a      	ands	r2, r1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f96:	f3ef 8310 	mrs	r3, PRIMASK
 8006f9a:	623b      	str	r3, [r7, #32]
  return(result);
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	491b      	ldr	r1, [pc, #108]	; (8007024 <UART_EndRxTransfer+0xc8>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	f383 8810 	msr	PRIMASK, r3
}
 8006fc6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d118      	bne.n	8007002 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fda:	2301      	movs	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			; (mov r8, r8)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2110      	movs	r1, #16
 8006ff2:	438a      	bics	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f383 8810 	msr	PRIMASK, r3
}
 8007000:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	228c      	movs	r2, #140	; 0x8c
 8007006:	2120      	movs	r1, #32
 8007008:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	46bd      	mov	sp, r7
 800701a:	b00e      	add	sp, #56	; 0x38
 800701c:	bd80      	pop	{r7, pc}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	fffffedf 	.word	0xfffffedf
 8007024:	effffffe 	.word	0xeffffffe

08007028 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	225e      	movs	r2, #94	; 0x5e
 800703a:	2100      	movs	r1, #0
 800703c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2256      	movs	r2, #86	; 0x56
 8007042:	2100      	movs	r1, #0
 8007044:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	0018      	movs	r0, r3
 800704a:	f7fb fd7d 	bl	8002b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	46bd      	mov	sp, r7
 8007052:	b004      	add	sp, #16
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705e:	f3ef 8310 	mrs	r3, PRIMASK
 8007062:	60bb      	str	r3, [r7, #8]
  return(result);
 8007064:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	2301      	movs	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2140      	movs	r1, #64	; 0x40
 8007080:	438a      	bics	r2, r1
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f383 8810 	msr	PRIMASK, r3
}
 800708e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2288      	movs	r2, #136	; 0x88
 8007094:	2120      	movs	r1, #32
 8007096:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7fb fd49 	bl	8002b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b006      	add	sp, #24
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b002      	add	sp, #8
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	46bd      	mov	sp, r7
 80070ca:	b002      	add	sp, #8
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	46bd      	mov	sp, r7
 80070da:	b002      	add	sp, #8
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2284      	movs	r2, #132	; 0x84
 80070ec:	5c9b      	ldrb	r3, [r3, r2]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e027      	b.n	8007146 <HAL_UARTEx_DisableFifoMode+0x66>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2284      	movs	r2, #132	; 0x84
 80070fa:	2101      	movs	r1, #1
 80070fc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2288      	movs	r2, #136	; 0x88
 8007102:	2124      	movs	r1, #36	; 0x24
 8007104:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2101      	movs	r1, #1
 800711a:	438a      	bics	r2, r1
 800711c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a0b      	ldr	r2, [pc, #44]	; (8007150 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007122:	4013      	ands	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2288      	movs	r2, #136	; 0x88
 8007138:	2120      	movs	r1, #32
 800713a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2284      	movs	r2, #132	; 0x84
 8007140:	2100      	movs	r1, #0
 8007142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	0018      	movs	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	b004      	add	sp, #16
 800714c:	bd80      	pop	{r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	dfffffff 	.word	0xdfffffff

08007154 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2284      	movs	r2, #132	; 0x84
 8007162:	5c9b      	ldrb	r3, [r3, r2]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007168:	2302      	movs	r3, #2
 800716a:	e02e      	b.n	80071ca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2284      	movs	r2, #132	; 0x84
 8007170:	2101      	movs	r1, #1
 8007172:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2288      	movs	r2, #136	; 0x88
 8007178:	2124      	movs	r1, #36	; 0x24
 800717a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2101      	movs	r1, #1
 8007190:	438a      	bics	r2, r1
 8007192:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	08d9      	lsrs	r1, r3, #3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	0018      	movs	r0, r3
 80071ac:	f000 f854 	bl	8007258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2288      	movs	r2, #136	; 0x88
 80071bc:	2120      	movs	r1, #32
 80071be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2284      	movs	r2, #132	; 0x84
 80071c4:	2100      	movs	r1, #0
 80071c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	0018      	movs	r0, r3
 80071cc:	46bd      	mov	sp, r7
 80071ce:	b004      	add	sp, #16
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2284      	movs	r2, #132	; 0x84
 80071e2:	5c9b      	ldrb	r3, [r3, r2]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e02f      	b.n	800724c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2284      	movs	r2, #132	; 0x84
 80071f0:	2101      	movs	r1, #1
 80071f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2288      	movs	r2, #136	; 0x88
 80071f8:	2124      	movs	r1, #36	; 0x24
 80071fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2101      	movs	r1, #1
 8007210:	438a      	bics	r2, r1
 8007212:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	4a0e      	ldr	r2, [pc, #56]	; (8007254 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800721c:	4013      	ands	r3, r2
 800721e:	0019      	movs	r1, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	0018      	movs	r0, r3
 800722e:	f000 f813 	bl	8007258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2288      	movs	r2, #136	; 0x88
 800723e:	2120      	movs	r1, #32
 8007240:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2284      	movs	r2, #132	; 0x84
 8007246:	2100      	movs	r1, #0
 8007248:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	0018      	movs	r0, r3
 800724e:	46bd      	mov	sp, r7
 8007250:	b004      	add	sp, #16
 8007252:	bd80      	pop	{r7, pc}
 8007254:	f1ffffff 	.word	0xf1ffffff

08007258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007264:	2b00      	cmp	r3, #0
 8007266:	d108      	bne.n	800727a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	226a      	movs	r2, #106	; 0x6a
 800726c:	2101      	movs	r1, #1
 800726e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2268      	movs	r2, #104	; 0x68
 8007274:	2101      	movs	r1, #1
 8007276:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007278:	e043      	b.n	8007302 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800727a:	260f      	movs	r6, #15
 800727c:	19bb      	adds	r3, r7, r6
 800727e:	2208      	movs	r2, #8
 8007280:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007282:	200e      	movs	r0, #14
 8007284:	183b      	adds	r3, r7, r0
 8007286:	2208      	movs	r2, #8
 8007288:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	0e5b      	lsrs	r3, r3, #25
 8007292:	b2da      	uxtb	r2, r3
 8007294:	240d      	movs	r4, #13
 8007296:	193b      	adds	r3, r7, r4
 8007298:	2107      	movs	r1, #7
 800729a:	400a      	ands	r2, r1
 800729c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	0f5b      	lsrs	r3, r3, #29
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	250c      	movs	r5, #12
 80072aa:	197b      	adds	r3, r7, r5
 80072ac:	2107      	movs	r1, #7
 80072ae:	400a      	ands	r2, r1
 80072b0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b2:	183b      	adds	r3, r7, r0
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	197a      	adds	r2, r7, r5
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	4914      	ldr	r1, [pc, #80]	; (800730c <UARTEx_SetNbDataToProcess+0xb4>)
 80072bc:	5c8a      	ldrb	r2, [r1, r2]
 80072be:	435a      	muls	r2, r3
 80072c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80072c2:	197b      	adds	r3, r7, r5
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	4a12      	ldr	r2, [pc, #72]	; (8007310 <UARTEx_SetNbDataToProcess+0xb8>)
 80072c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072ca:	0019      	movs	r1, r3
 80072cc:	f7f8 ffc2 	bl	8000254 <__divsi3>
 80072d0:	0003      	movs	r3, r0
 80072d2:	b299      	uxth	r1, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	226a      	movs	r2, #106	; 0x6a
 80072d8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072da:	19bb      	adds	r3, r7, r6
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	193a      	adds	r2, r7, r4
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	490a      	ldr	r1, [pc, #40]	; (800730c <UARTEx_SetNbDataToProcess+0xb4>)
 80072e4:	5c8a      	ldrb	r2, [r1, r2]
 80072e6:	435a      	muls	r2, r3
 80072e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80072ea:	193b      	adds	r3, r7, r4
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4a08      	ldr	r2, [pc, #32]	; (8007310 <UARTEx_SetNbDataToProcess+0xb8>)
 80072f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072f2:	0019      	movs	r1, r3
 80072f4:	f7f8 ffae 	bl	8000254 <__divsi3>
 80072f8:	0003      	movs	r3, r0
 80072fa:	b299      	uxth	r1, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2268      	movs	r2, #104	; 0x68
 8007300:	5299      	strh	r1, [r3, r2]
}
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	46bd      	mov	sp, r7
 8007306:	b005      	add	sp, #20
 8007308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	0800e5d8 	.word	0x0800e5d8
 8007310:	0800e5e0 	.word	0x0800e5e0

08007314 <__NVIC_SetPriority>:
{
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	0002      	movs	r2, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	1dfb      	adds	r3, r7, #7
 8007320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007322:	1dfb      	adds	r3, r7, #7
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b7f      	cmp	r3, #127	; 0x7f
 8007328:	d828      	bhi.n	800737c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800732a:	4a2f      	ldr	r2, [pc, #188]	; (80073e8 <__NVIC_SetPriority+0xd4>)
 800732c:	1dfb      	adds	r3, r7, #7
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b25b      	sxtb	r3, r3
 8007332:	089b      	lsrs	r3, r3, #2
 8007334:	33c0      	adds	r3, #192	; 0xc0
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	589b      	ldr	r3, [r3, r2]
 800733a:	1dfa      	adds	r2, r7, #7
 800733c:	7812      	ldrb	r2, [r2, #0]
 800733e:	0011      	movs	r1, r2
 8007340:	2203      	movs	r2, #3
 8007342:	400a      	ands	r2, r1
 8007344:	00d2      	lsls	r2, r2, #3
 8007346:	21ff      	movs	r1, #255	; 0xff
 8007348:	4091      	lsls	r1, r2
 800734a:	000a      	movs	r2, r1
 800734c:	43d2      	mvns	r2, r2
 800734e:	401a      	ands	r2, r3
 8007350:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	22ff      	movs	r2, #255	; 0xff
 8007358:	401a      	ands	r2, r3
 800735a:	1dfb      	adds	r3, r7, #7
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	0018      	movs	r0, r3
 8007360:	2303      	movs	r3, #3
 8007362:	4003      	ands	r3, r0
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007368:	481f      	ldr	r0, [pc, #124]	; (80073e8 <__NVIC_SetPriority+0xd4>)
 800736a:	1dfb      	adds	r3, r7, #7
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b25b      	sxtb	r3, r3
 8007370:	089b      	lsrs	r3, r3, #2
 8007372:	430a      	orrs	r2, r1
 8007374:	33c0      	adds	r3, #192	; 0xc0
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	501a      	str	r2, [r3, r0]
}
 800737a:	e031      	b.n	80073e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800737c:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <__NVIC_SetPriority+0xd8>)
 800737e:	1dfb      	adds	r3, r7, #7
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	0019      	movs	r1, r3
 8007384:	230f      	movs	r3, #15
 8007386:	400b      	ands	r3, r1
 8007388:	3b08      	subs	r3, #8
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	3306      	adds	r3, #6
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	18d3      	adds	r3, r2, r3
 8007392:	3304      	adds	r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	1dfa      	adds	r2, r7, #7
 8007398:	7812      	ldrb	r2, [r2, #0]
 800739a:	0011      	movs	r1, r2
 800739c:	2203      	movs	r2, #3
 800739e:	400a      	ands	r2, r1
 80073a0:	00d2      	lsls	r2, r2, #3
 80073a2:	21ff      	movs	r1, #255	; 0xff
 80073a4:	4091      	lsls	r1, r2
 80073a6:	000a      	movs	r2, r1
 80073a8:	43d2      	mvns	r2, r2
 80073aa:	401a      	ands	r2, r3
 80073ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	019b      	lsls	r3, r3, #6
 80073b2:	22ff      	movs	r2, #255	; 0xff
 80073b4:	401a      	ands	r2, r3
 80073b6:	1dfb      	adds	r3, r7, #7
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	0018      	movs	r0, r3
 80073bc:	2303      	movs	r3, #3
 80073be:	4003      	ands	r3, r0
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80073c4:	4809      	ldr	r0, [pc, #36]	; (80073ec <__NVIC_SetPriority+0xd8>)
 80073c6:	1dfb      	adds	r3, r7, #7
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	001c      	movs	r4, r3
 80073cc:	230f      	movs	r3, #15
 80073ce:	4023      	ands	r3, r4
 80073d0:	3b08      	subs	r3, #8
 80073d2:	089b      	lsrs	r3, r3, #2
 80073d4:	430a      	orrs	r2, r1
 80073d6:	3306      	adds	r3, #6
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	18c3      	adds	r3, r0, r3
 80073dc:	3304      	adds	r3, #4
 80073de:	601a      	str	r2, [r3, #0]
}
 80073e0:	46c0      	nop			; (mov r8, r8)
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b003      	add	sp, #12
 80073e6:	bd90      	pop	{r4, r7, pc}
 80073e8:	e000e100 	.word	0xe000e100
 80073ec:	e000ed00 	.word	0xe000ed00

080073f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <SysTick_Handler+0x1c>)
 80073f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80073f8:	f001 fc6a 	bl	8008cd0 <xTaskGetSchedulerState>
 80073fc:	0003      	movs	r3, r0
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d001      	beq.n	8007406 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007402:	f002 f939 	bl	8009678 <xPortSysTickHandler>
  }
}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	e000e010 	.word	0xe000e010

08007410 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007414:	2305      	movs	r3, #5
 8007416:	425b      	negs	r3, r3
 8007418:	2100      	movs	r1, #0
 800741a:	0018      	movs	r0, r3
 800741c:	f7ff ff7a 	bl	8007314 <__NVIC_SetPriority>
#endif
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800742e:	f3ef 8305 	mrs	r3, IPSR
 8007432:	603b      	str	r3, [r7, #0]
  return(result);
 8007434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800743a:	2306      	movs	r3, #6
 800743c:	425b      	negs	r3, r3
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	e00c      	b.n	800745c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <osKernelInitialize+0x40>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800744a:	4b07      	ldr	r3, [pc, #28]	; (8007468 <osKernelInitialize+0x40>)
 800744c:	2201      	movs	r2, #1
 800744e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007450:	2300      	movs	r3, #0
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	e002      	b.n	800745c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007456:	2301      	movs	r3, #1
 8007458:	425b      	negs	r3, r3
 800745a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800745c:	687b      	ldr	r3, [r7, #4]
}
 800745e:	0018      	movs	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	b002      	add	sp, #8
 8007464:	bd80      	pop	{r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	200006ec 	.word	0x200006ec

0800746c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007472:	f3ef 8305 	mrs	r3, IPSR
 8007476:	603b      	str	r3, [r7, #0]
  return(result);
 8007478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <osKernelStart+0x1a>
    stat = osErrorISR;
 800747e:	2306      	movs	r3, #6
 8007480:	425b      	negs	r3, r3
 8007482:	607b      	str	r3, [r7, #4]
 8007484:	e010      	b.n	80074a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <osKernelStart+0x48>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d109      	bne.n	80074a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800748e:	f7ff ffbf 	bl	8007410 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <osKernelStart+0x48>)
 8007494:	2202      	movs	r2, #2
 8007496:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007498:	f001 f830 	bl	80084fc <vTaskStartScheduler>
      stat = osOK;
 800749c:	2300      	movs	r3, #0
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	e002      	b.n	80074a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074a2:	2301      	movs	r3, #1
 80074a4:	425b      	negs	r3, r3
 80074a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074a8:	687b      	ldr	r3, [r7, #4]
}
 80074aa:	0018      	movs	r0, r3
 80074ac:	46bd      	mov	sp, r7
 80074ae:	b002      	add	sp, #8
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	46c0      	nop			; (mov r8, r8)
 80074b4:	200006ec 	.word	0x200006ec

080074b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b08e      	sub	sp, #56	; 0x38
 80074bc:	af04      	add	r7, sp, #16
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c8:	f3ef 8305 	mrs	r3, IPSR
 80074cc:	617b      	str	r3, [r7, #20]
  return(result);
 80074ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d000      	beq.n	80074d6 <osThreadNew+0x1e>
 80074d4:	e081      	b.n	80075da <osThreadNew+0x122>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d100      	bne.n	80074de <osThreadNew+0x26>
 80074dc:	e07d      	b.n	80075da <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074e2:	2318      	movs	r3, #24
 80074e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	425b      	negs	r3, r3
 80074ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d044      	beq.n	8007580 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <osThreadNew+0x4c>
        name = attr->name;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d007      	beq.n	8007528 <osThreadNew+0x70>
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b38      	cmp	r3, #56	; 0x38
 800751c:	d804      	bhi.n	8007528 <osThreadNew+0x70>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	4013      	ands	r3, r2
 8007526:	d001      	beq.n	800752c <osThreadNew+0x74>
        return (NULL);
 8007528:	2300      	movs	r3, #0
 800752a:	e057      	b.n	80075dc <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	089b      	lsrs	r3, r3, #2
 800753a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00e      	beq.n	8007562 <osThreadNew+0xaa>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	2ba7      	cmp	r3, #167	; 0xa7
 800754a:	d90a      	bls.n	8007562 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007550:	2b00      	cmp	r3, #0
 8007552:	d006      	beq.n	8007562 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <osThreadNew+0xaa>
        mem = 1;
 800755c:	2301      	movs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e010      	b.n	8007584 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10c      	bne.n	8007584 <osThreadNew+0xcc>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d108      	bne.n	8007584 <osThreadNew+0xcc>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d104      	bne.n	8007584 <osThreadNew+0xcc>
          mem = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	e001      	b.n	8007584 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d112      	bne.n	80075b0 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007592:	68bd      	ldr	r5, [r7, #8]
 8007594:	6a3c      	ldr	r4, [r7, #32]
 8007596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	9302      	str	r3, [sp, #8]
 800759c:	9201      	str	r2, [sp, #4]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	002b      	movs	r3, r5
 80075a4:	0022      	movs	r2, r4
 80075a6:	f000 fdea 	bl	800817e <xTaskCreateStatic>
 80075aa:	0003      	movs	r3, r0
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	e014      	b.n	80075da <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d111      	bne.n	80075da <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68bc      	ldr	r4, [r7, #8]
 80075bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	2310      	movs	r3, #16
 80075c2:	18fb      	adds	r3, r7, r3
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	0023      	movs	r3, r4
 80075cc:	f000 fe1b 	bl	8008206 <xTaskCreate>
 80075d0:	0003      	movs	r3, r0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d001      	beq.n	80075da <osThreadNew+0x122>
            hTask = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075da:	693b      	ldr	r3, [r7, #16]
}
 80075dc:	0018      	movs	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	b00a      	add	sp, #40	; 0x28
 80075e2:	bdb0      	pop	{r4, r5, r7, pc}

080075e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ec:	f3ef 8305 	mrs	r3, IPSR
 80075f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <osDelay+0x1c>
    stat = osErrorISR;
 80075f8:	2306      	movs	r3, #6
 80075fa:	425b      	negs	r3, r3
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	e008      	b.n	8007612 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <osDelay+0x2e>
      vTaskDelay(ticks);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	0018      	movs	r0, r3
 800760e:	f000 ff4f 	bl	80084b0 <vTaskDelay>
    }
  }

  return (stat);
 8007612:	68fb      	ldr	r3, [r7, #12]
}
 8007614:	0018      	movs	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	b004      	add	sp, #16
 800761a:	bd80      	pop	{r7, pc}

0800761c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b08b      	sub	sp, #44	; 0x2c
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007628:	2300      	movs	r3, #0
 800762a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800762c:	f3ef 8305 	mrs	r3, IPSR
 8007630:	613b      	str	r3, [r7, #16]
  return(result);
 8007632:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007634:	2b00      	cmp	r3, #0
 8007636:	d000      	beq.n	800763a <osMessageQueueNew+0x1e>
 8007638:	e064      	b.n	8007704 <osMessageQueueNew+0xe8>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d100      	bne.n	8007642 <osMessageQueueNew+0x26>
 8007640:	e060      	b.n	8007704 <osMessageQueueNew+0xe8>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d05d      	beq.n	8007704 <osMessageQueueNew+0xe8>
    mem = -1;
 8007648:	2301      	movs	r3, #1
 800764a:	425b      	negs	r3, r3
 800764c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d028      	beq.n	80076a6 <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d011      	beq.n	8007680 <osMessageQueueNew+0x64>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b4f      	cmp	r3, #79	; 0x4f
 8007662:	d90d      	bls.n	8007680 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007668:	2b00      	cmp	r3, #0
 800766a:	d009      	beq.n	8007680 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	434b      	muls	r3, r1
 8007676:	429a      	cmp	r2, r3
 8007678:	d302      	bcc.n	8007680 <osMessageQueueNew+0x64>
        mem = 1;
 800767a:	2301      	movs	r3, #1
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e014      	b.n	80076aa <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d110      	bne.n	80076aa <osMessageQueueNew+0x8e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10c      	bne.n	80076aa <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007694:	2b00      	cmp	r3, #0
 8007696:	d108      	bne.n	80076aa <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d104      	bne.n	80076aa <osMessageQueueNew+0x8e>
          mem = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	e001      	b.n	80076aa <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d10c      	bne.n	80076ca <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	2400      	movs	r4, #0
 80076be:	9400      	str	r4, [sp, #0]
 80076c0:	f000 f953 	bl	800796a <xQueueGenericCreateStatic>
 80076c4:	0003      	movs	r3, r0
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e00a      	b.n	80076e0 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d107      	bne.n	80076e0 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	0018      	movs	r0, r3
 80076d8:	f000 f993 	bl	8007a02 <xQueueGenericCreate>
 80076dc:	0003      	movs	r3, r0
 80076de:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00e      	beq.n	8007704 <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <osMessageQueueNew+0xd8>
        name = attr->name;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	e001      	b.n	80076f8 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	0011      	movs	r1, r2
 80076fe:	0018      	movs	r0, r3
 8007700:	f000 fce2 	bl	80080c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007704:	69fb      	ldr	r3, [r7, #28]
}
 8007706:	0018      	movs	r0, r3
 8007708:	46bd      	mov	sp, r7
 800770a:	b009      	add	sp, #36	; 0x24
 800770c:	bd90      	pop	{r4, r7, pc}
	...

08007710 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a06      	ldr	r2, [pc, #24]	; (8007738 <vApplicationGetIdleTaskMemory+0x28>)
 8007720:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4a05      	ldr	r2, [pc, #20]	; (800773c <vApplicationGetIdleTaskMemory+0x2c>)
 8007726:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2280      	movs	r2, #128	; 0x80
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b004      	add	sp, #16
 8007734:	bd80      	pop	{r7, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	200006f0 	.word	0x200006f0
 800773c:	20000798 	.word	0x20000798

08007740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a06      	ldr	r2, [pc, #24]	; (8007768 <vApplicationGetTimerTaskMemory+0x28>)
 8007750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4a05      	ldr	r2, [pc, #20]	; (800776c <vApplicationGetTimerTaskMemory+0x2c>)
 8007756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2280      	movs	r2, #128	; 0x80
 800775c:	0052      	lsls	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
}
 8007760:	46c0      	nop			; (mov r8, r8)
 8007762:	46bd      	mov	sp, r7
 8007764:	b004      	add	sp, #16
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20000998 	.word	0x20000998
 800776c:	20000a40 	.word	0x20000a40

08007770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3308      	adds	r3, #8
 800777c:	001a      	movs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	4252      	negs	r2, r2
 8007788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3308      	adds	r3, #8
 800778e:	001a      	movs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3308      	adds	r3, #8
 8007798:	001a      	movs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077a4:	46c0      	nop			; (mov r8, r8)
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b002      	add	sp, #8
 80077aa:	bd80      	pop	{r7, pc}

080077ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	46bd      	mov	sp, r7
 80077be:	b002      	add	sp, #8
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	601a      	str	r2, [r3, #0]
}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	46bd      	mov	sp, r7
 8007802:	b004      	add	sp, #16
 8007804:	bd80      	pop	{r7, pc}

08007806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3301      	adds	r3, #1
 800781a:	d103      	bne.n	8007824 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	e00c      	b.n	800783e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3308      	adds	r3, #8
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e002      	b.n	8007832 <vListInsert+0x2c>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	429a      	cmp	r2, r3
 800783c:	d2f6      	bcs.n	800782c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	46bd      	mov	sp, r7
 800786e:	b004      	add	sp, #16
 8007870:	bd80      	pop	{r7, pc}

08007872 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6892      	ldr	r2, [r2, #8]
 8007888:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6852      	ldr	r2, [r2, #4]
 8007892:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	429a      	cmp	r2, r3
 800789c:	d103      	bne.n	80078a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	1e5a      	subs	r2, r3, #1
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
}
 80078ba:	0018      	movs	r0, r3
 80078bc:	46bd      	mov	sp, r7
 80078be:	b004      	add	sp, #16
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <xQueueGenericReset+0x18>
 80078d6:	b672      	cpsid	i
 80078d8:	e7fe      	b.n	80078d8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80078da:	f001 fe71 	bl	80095c0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	434b      	muls	r3, r1
 80078ec:	18d2      	adds	r2, r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007908:	1e59      	subs	r1, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	434b      	muls	r3, r1
 8007910:	18d2      	adds	r2, r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2244      	movs	r2, #68	; 0x44
 800791a:	21ff      	movs	r1, #255	; 0xff
 800791c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2245      	movs	r2, #69	; 0x45
 8007922:	21ff      	movs	r1, #255	; 0xff
 8007924:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d013      	beq.n	800795c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3310      	adds	r3, #16
 8007938:	0018      	movs	r0, r3
 800793a:	f001 f831 	bl	80089a0 <xTaskRemoveFromEventList>
 800793e:	1e03      	subs	r3, r0, #0
 8007940:	d00c      	beq.n	800795c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007942:	f001 fe2d 	bl	80095a0 <vPortYield>
 8007946:	e009      	b.n	800795c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3310      	adds	r3, #16
 800794c:	0018      	movs	r0, r3
 800794e:	f7ff ff0f 	bl	8007770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3324      	adds	r3, #36	; 0x24
 8007956:	0018      	movs	r0, r3
 8007958:	f7ff ff0a 	bl	8007770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800795c:	f001 fe42 	bl	80095e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007960:	2301      	movs	r3, #1
}
 8007962:	0018      	movs	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	b004      	add	sp, #16
 8007968:	bd80      	pop	{r7, pc}

0800796a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800796a:	b590      	push	{r4, r7, lr}
 800796c:	b089      	sub	sp, #36	; 0x24
 800796e:	af02      	add	r7, sp, #8
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
 8007976:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <xQueueGenericCreateStatic+0x18>
 800797e:	b672      	cpsid	i
 8007980:	e7fe      	b.n	8007980 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <xQueueGenericCreateStatic+0x22>
 8007988:	b672      	cpsid	i
 800798a:	e7fe      	b.n	800798a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <xQueueGenericCreateStatic+0x2e>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <xQueueGenericCreateStatic+0x32>
 8007998:	2301      	movs	r3, #1
 800799a:	e000      	b.n	800799e <xQueueGenericCreateStatic+0x34>
 800799c:	2300      	movs	r3, #0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <xQueueGenericCreateStatic+0x3c>
 80079a2:	b672      	cpsid	i
 80079a4:	e7fe      	b.n	80079a4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <xQueueGenericCreateStatic+0x48>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <xQueueGenericCreateStatic+0x4c>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <xQueueGenericCreateStatic+0x4e>
 80079b6:	2300      	movs	r3, #0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <xQueueGenericCreateStatic+0x56>
 80079bc:	b672      	cpsid	i
 80079be:	e7fe      	b.n	80079be <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079c0:	2350      	movs	r3, #80	; 0x50
 80079c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b50      	cmp	r3, #80	; 0x50
 80079c8:	d001      	beq.n	80079ce <xQueueGenericCreateStatic+0x64>
 80079ca:	b672      	cpsid	i
 80079cc:	e7fe      	b.n	80079cc <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079ce:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00e      	beq.n	80079f8 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2246      	movs	r2, #70	; 0x46
 80079de:	2101      	movs	r1, #1
 80079e0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079e2:	2328      	movs	r3, #40	; 0x28
 80079e4:	18fb      	adds	r3, r7, r3
 80079e6:	781c      	ldrb	r4, [r3, #0]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	0023      	movs	r3, r4
 80079f4:	f000 f837 	bl	8007a66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079f8:	697b      	ldr	r3, [r7, #20]
	}
 80079fa:	0018      	movs	r0, r3
 80079fc:	46bd      	mov	sp, r7
 80079fe:	b007      	add	sp, #28
 8007a00:	bd90      	pop	{r4, r7, pc}

08007a02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a02:	b590      	push	{r4, r7, lr}
 8007a04:	b08b      	sub	sp, #44	; 0x2c
 8007a06:	af02      	add	r7, sp, #8
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	1dfb      	adds	r3, r7, #7
 8007a0e:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <xQueueGenericCreate+0x18>
 8007a16:	b672      	cpsid	i
 8007a18:	e7fe      	b.n	8007a18 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	4353      	muls	r3, r2
 8007a20:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	3350      	adds	r3, #80	; 0x50
 8007a26:	0018      	movs	r0, r3
 8007a28:	f001 fe62 	bl	80096f0 <pvPortMalloc>
 8007a2c:	0003      	movs	r3, r0
 8007a2e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d012      	beq.n	8007a5c <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	3350      	adds	r3, #80	; 0x50
 8007a3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	2246      	movs	r2, #70	; 0x46
 8007a44:	2100      	movs	r1, #0
 8007a46:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a48:	1dfb      	adds	r3, r7, #7
 8007a4a:	781c      	ldrb	r4, [r3, #0]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	0023      	movs	r3, r4
 8007a58:	f000 f805 	bl	8007a66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8007a5e:	0018      	movs	r0, r3
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b009      	add	sp, #36	; 0x24
 8007a64:	bd90      	pop	{r4, r7, pc}

08007a66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	001a      	movs	r2, r3
 8007a74:	1cfb      	adds	r3, r7, #3
 8007a76:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d103      	bne.n	8007a86 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e002      	b.n	8007a8c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f7ff ff10 	bl	80078c2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	1cfa      	adds	r2, r7, #3
 8007aa6:	214c      	movs	r1, #76	; 0x4c
 8007aa8:	7812      	ldrb	r2, [r2, #0]
 8007aaa:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007aac:	46c0      	nop			; (mov r8, r8)
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	b004      	add	sp, #16
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	; 0x28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <xQueueGenericSend+0x20>
 8007ad0:	b672      	cpsid	i
 8007ad2:	e7fe      	b.n	8007ad2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <xQueueGenericSend+0x2e>
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <xQueueGenericSend+0x32>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e000      	b.n	8007ae8 <xQueueGenericSend+0x34>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <xQueueGenericSend+0x3c>
 8007aec:	b672      	cpsid	i
 8007aee:	e7fe      	b.n	8007aee <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d103      	bne.n	8007afe <xQueueGenericSend+0x4a>
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <xQueueGenericSend+0x4e>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <xQueueGenericSend+0x50>
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <xQueueGenericSend+0x58>
 8007b08:	b672      	cpsid	i
 8007b0a:	e7fe      	b.n	8007b0a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b0c:	f001 f8e0 	bl	8008cd0 <xTaskGetSchedulerState>
 8007b10:	1e03      	subs	r3, r0, #0
 8007b12:	d102      	bne.n	8007b1a <xQueueGenericSend+0x66>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <xQueueGenericSend+0x6a>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <xQueueGenericSend+0x6c>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <xQueueGenericSend+0x74>
 8007b24:	b672      	cpsid	i
 8007b26:	e7fe      	b.n	8007b26 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b28:	f001 fd4a 	bl	80095c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d302      	bcc.n	8007b3e <xQueueGenericSend+0x8a>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d11e      	bne.n	8007b7c <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f000 f9a2 	bl	8007e8e <prvCopyDataToQueue>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d009      	beq.n	8007b6a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	3324      	adds	r3, #36	; 0x24
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 ff20 	bl	80089a0 <xTaskRemoveFromEventList>
 8007b60:	1e03      	subs	r3, r0, #0
 8007b62:	d007      	beq.n	8007b74 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b64:	f001 fd1c 	bl	80095a0 <vPortYield>
 8007b68:	e004      	b.n	8007b74 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b70:	f001 fd16 	bl	80095a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b74:	f001 fd36 	bl	80095e4 <vPortExitCritical>
				return pdPASS;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e05b      	b.n	8007c34 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b82:	f001 fd2f 	bl	80095e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e054      	b.n	8007c34 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d106      	bne.n	8007b9e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b90:	2314      	movs	r3, #20
 8007b92:	18fb      	adds	r3, r7, r3
 8007b94:	0018      	movs	r0, r3
 8007b96:	f000 ff5f 	bl	8008a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b9e:	f001 fd21 	bl	80095e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ba2:	f000 fd09 	bl	80085b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ba6:	f001 fd0b 	bl	80095c0 <vPortEnterCritical>
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	2244      	movs	r2, #68	; 0x44
 8007bae:	5c9b      	ldrb	r3, [r3, r2]
 8007bb0:	b25b      	sxtb	r3, r3
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	d103      	bne.n	8007bbe <xQueueGenericSend+0x10a>
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	2244      	movs	r2, #68	; 0x44
 8007bba:	2100      	movs	r1, #0
 8007bbc:	5499      	strb	r1, [r3, r2]
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	2245      	movs	r2, #69	; 0x45
 8007bc2:	5c9b      	ldrb	r3, [r3, r2]
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	d103      	bne.n	8007bd2 <xQueueGenericSend+0x11e>
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	2245      	movs	r2, #69	; 0x45
 8007bce:	2100      	movs	r1, #0
 8007bd0:	5499      	strb	r1, [r3, r2]
 8007bd2:	f001 fd07 	bl	80095e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bd6:	1d3a      	adds	r2, r7, #4
 8007bd8:	2314      	movs	r3, #20
 8007bda:	18fb      	adds	r3, r7, r3
 8007bdc:	0011      	movs	r1, r2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f000 ff4e 	bl	8008a80 <xTaskCheckForTimeOut>
 8007be4:	1e03      	subs	r3, r0, #0
 8007be6:	d11e      	bne.n	8007c26 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	0018      	movs	r0, r3
 8007bec:	f000 fa54 	bl	8008098 <prvIsQueueFull>
 8007bf0:	1e03      	subs	r3, r0, #0
 8007bf2:	d011      	beq.n	8007c18 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	3310      	adds	r3, #16
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	0011      	movs	r1, r2
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f000 fe8b 	bl	8008918 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f000 f9d3 	bl	8007fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c0a:	f000 fce1 	bl	80085d0 <xTaskResumeAll>
 8007c0e:	1e03      	subs	r3, r0, #0
 8007c10:	d18a      	bne.n	8007b28 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007c12:	f001 fcc5 	bl	80095a0 <vPortYield>
 8007c16:	e787      	b.n	8007b28 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f000 f9c8 	bl	8007fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c20:	f000 fcd6 	bl	80085d0 <xTaskResumeAll>
 8007c24:	e780      	b.n	8007b28 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	0018      	movs	r0, r3
 8007c2a:	f000 f9c1 	bl	8007fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c2e:	f000 fccf 	bl	80085d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c34:	0018      	movs	r0, r3
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b00a      	add	sp, #40	; 0x28
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c3c:	b590      	push	{r4, r7, lr}
 8007c3e:	b08b      	sub	sp, #44	; 0x2c
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <xQueueGenericSendFromISR+0x1c>
 8007c54:	b672      	cpsid	i
 8007c56:	e7fe      	b.n	8007c56 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <xQueueGenericSendFromISR+0x2a>
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <xQueueGenericSendFromISR+0x2e>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <xQueueGenericSendFromISR+0x30>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <xQueueGenericSendFromISR+0x38>
 8007c70:	b672      	cpsid	i
 8007c72:	e7fe      	b.n	8007c72 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d103      	bne.n	8007c82 <xQueueGenericSendFromISR+0x46>
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <xQueueGenericSendFromISR+0x4a>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueGenericSendFromISR+0x4c>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <xQueueGenericSendFromISR+0x54>
 8007c8c:	b672      	cpsid	i
 8007c8e:	e7fe      	b.n	8007c8e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c90:	f001 fcc0 	bl	8009614 <ulSetInterruptMaskFromISR>
 8007c94:	0003      	movs	r3, r0
 8007c96:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d302      	bcc.n	8007caa <xQueueGenericSendFromISR+0x6e>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d131      	bne.n	8007d0e <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007caa:	241b      	movs	r4, #27
 8007cac:	193b      	adds	r3, r7, r4
 8007cae:	6a3a      	ldr	r2, [r7, #32]
 8007cb0:	2145      	movs	r1, #69	; 0x45
 8007cb2:	5c52      	ldrb	r2, [r2, r1]
 8007cb4:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f000 f8e3 	bl	8007e8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cc8:	193b      	adds	r3, r7, r4
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b25b      	sxtb	r3, r3
 8007cce:	3301      	adds	r3, #1
 8007cd0:	d111      	bne.n	8007cf6 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d016      	beq.n	8007d08 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	3324      	adds	r3, #36	; 0x24
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f000 fe5e 	bl	80089a0 <xTaskRemoveFromEventList>
 8007ce4:	1e03      	subs	r3, r0, #0
 8007ce6:	d00f      	beq.n	8007d08 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e008      	b.n	8007d08 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cf6:	231b      	movs	r3, #27
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	b259      	sxtb	r1, r3
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	2245      	movs	r2, #69	; 0x45
 8007d06:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8007d0c:	e001      	b.n	8007d12 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	0018      	movs	r0, r3
 8007d16:	f001 fc83 	bl	8009620 <vClearInterruptMaskFromISR>

	return xReturn;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b00b      	add	sp, #44	; 0x2c
 8007d22:	bd90      	pop	{r4, r7, pc}

08007d24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <xQueueReceive+0x1e>
 8007d3e:	b672      	cpsid	i
 8007d40:	e7fe      	b.n	8007d40 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <xQueueReceive+0x2c>
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <xQueueReceive+0x30>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <xQueueReceive+0x32>
 8007d54:	2300      	movs	r3, #0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <xQueueReceive+0x3a>
 8007d5a:	b672      	cpsid	i
 8007d5c:	e7fe      	b.n	8007d5c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d5e:	f000 ffb7 	bl	8008cd0 <xTaskGetSchedulerState>
 8007d62:	1e03      	subs	r3, r0, #0
 8007d64:	d102      	bne.n	8007d6c <xQueueReceive+0x48>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <xQueueReceive+0x4c>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <xQueueReceive+0x4e>
 8007d70:	2300      	movs	r3, #0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <xQueueReceive+0x56>
 8007d76:	b672      	cpsid	i
 8007d78:	e7fe      	b.n	8007d78 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d7a:	f001 fc21 	bl	80095c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d01a      	beq.n	8007dc0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	0011      	movs	r1, r2
 8007d90:	0018      	movs	r0, r3
 8007d92:	f000 f8e7 	bl	8007f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	1e5a      	subs	r2, r3, #1
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	3310      	adds	r3, #16
 8007daa:	0018      	movs	r0, r3
 8007dac:	f000 fdf8 	bl	80089a0 <xTaskRemoveFromEventList>
 8007db0:	1e03      	subs	r3, r0, #0
 8007db2:	d001      	beq.n	8007db8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007db4:	f001 fbf4 	bl	80095a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007db8:	f001 fc14 	bl	80095e4 <vPortExitCritical>
				return pdPASS;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e062      	b.n	8007e86 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc6:	f001 fc0d 	bl	80095e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e05b      	b.n	8007e86 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd4:	2314      	movs	r3, #20
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f000 fe3d 	bl	8008a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de2:	f001 fbff 	bl	80095e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de6:	f000 fbe7 	bl	80085b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dea:	f001 fbe9 	bl	80095c0 <vPortEnterCritical>
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	2244      	movs	r2, #68	; 0x44
 8007df2:	5c9b      	ldrb	r3, [r3, r2]
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	3301      	adds	r3, #1
 8007df8:	d103      	bne.n	8007e02 <xQueueReceive+0xde>
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	2244      	movs	r2, #68	; 0x44
 8007dfe:	2100      	movs	r1, #0
 8007e00:	5499      	strb	r1, [r3, r2]
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	2245      	movs	r2, #69	; 0x45
 8007e06:	5c9b      	ldrb	r3, [r3, r2]
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	d103      	bne.n	8007e16 <xQueueReceive+0xf2>
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	2245      	movs	r2, #69	; 0x45
 8007e12:	2100      	movs	r1, #0
 8007e14:	5499      	strb	r1, [r3, r2]
 8007e16:	f001 fbe5 	bl	80095e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e1a:	1d3a      	adds	r2, r7, #4
 8007e1c:	2314      	movs	r3, #20
 8007e1e:	18fb      	adds	r3, r7, r3
 8007e20:	0011      	movs	r1, r2
 8007e22:	0018      	movs	r0, r3
 8007e24:	f000 fe2c 	bl	8008a80 <xTaskCheckForTimeOut>
 8007e28:	1e03      	subs	r3, r0, #0
 8007e2a:	d11e      	bne.n	8007e6a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f000 f91c 	bl	800806c <prvIsQueueEmpty>
 8007e34:	1e03      	subs	r3, r0, #0
 8007e36:	d011      	beq.n	8007e5c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	3324      	adds	r3, #36	; 0x24
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	0011      	movs	r1, r2
 8007e40:	0018      	movs	r0, r3
 8007e42:	f000 fd69 	bl	8008918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f000 f8b1 	bl	8007fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e4e:	f000 fbbf 	bl	80085d0 <xTaskResumeAll>
 8007e52:	1e03      	subs	r3, r0, #0
 8007e54:	d191      	bne.n	8007d7a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8007e56:	f001 fba3 	bl	80095a0 <vPortYield>
 8007e5a:	e78e      	b.n	8007d7a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f000 f8a6 	bl	8007fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e64:	f000 fbb4 	bl	80085d0 <xTaskResumeAll>
 8007e68:	e787      	b.n	8007d7a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f000 f89f 	bl	8007fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e72:	f000 fbad 	bl	80085d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f000 f8f7 	bl	800806c <prvIsQueueEmpty>
 8007e7e:	1e03      	subs	r3, r0, #0
 8007e80:	d100      	bne.n	8007e84 <xQueueReceive+0x160>
 8007e82:	e77a      	b.n	8007d7a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e86:	0018      	movs	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b00a      	add	sp, #40	; 0x28
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b086      	sub	sp, #24
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10e      	bne.n	8007eca <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d14e      	bne.n	8007f52 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	0018      	movs	r0, r3
 8007eba:	f000 ff25 	bl	8008d08 <xTaskPriorityDisinherit>
 8007ebe:	0003      	movs	r3, r0
 8007ec0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	609a      	str	r2, [r3, #8]
 8007ec8:	e043      	b.n	8007f52 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d119      	bne.n	8007f04 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6858      	ldr	r0, [r3, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	0019      	movs	r1, r3
 8007edc:	f002 fe60 	bl	800aba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	18d2      	adds	r2, r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d32b      	bcc.n	8007f52 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	e026      	b.n	8007f52 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68d8      	ldr	r0, [r3, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	0019      	movs	r1, r3
 8007f10:	f002 fe46 	bl	800aba0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1c:	425b      	negs	r3, r3
 8007f1e:	18d2      	adds	r2, r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d207      	bcs.n	8007f40 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	425b      	negs	r3, r3
 8007f3a:	18d2      	adds	r2, r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d105      	bne.n	8007f52 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f5a:	697b      	ldr	r3, [r7, #20]
}
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	b006      	add	sp, #24
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d018      	beq.n	8007fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	18d2      	adds	r2, r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d303      	bcc.n	8007f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68d9      	ldr	r1, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	f002 fdfc 	bl	800aba0 <memcpy>
	}
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b002      	add	sp, #8
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fb8:	f001 fb02 	bl	80095c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fbc:	230f      	movs	r3, #15
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	2145      	movs	r1, #69	; 0x45
 8007fc4:	5c52      	ldrb	r2, [r2, r1]
 8007fc6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fc8:	e013      	b.n	8007ff2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d016      	beq.n	8008000 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3324      	adds	r3, #36	; 0x24
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f000 fce2 	bl	80089a0 <xTaskRemoveFromEventList>
 8007fdc:	1e03      	subs	r3, r0, #0
 8007fde:	d001      	beq.n	8007fe4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fe0:	f000 fd9e 	bl	8008b20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fe4:	210f      	movs	r1, #15
 8007fe6:	187b      	adds	r3, r7, r1
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	187b      	adds	r3, r7, r1
 8007ff0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ff2:	230f      	movs	r3, #15
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dce5      	bgt.n	8007fca <prvUnlockQueue+0x1a>
 8007ffe:	e000      	b.n	8008002 <prvUnlockQueue+0x52>
					break;
 8008000:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2245      	movs	r2, #69	; 0x45
 8008006:	21ff      	movs	r1, #255	; 0xff
 8008008:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800800a:	f001 faeb 	bl	80095e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800800e:	f001 fad7 	bl	80095c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008012:	230e      	movs	r3, #14
 8008014:	18fb      	adds	r3, r7, r3
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	2144      	movs	r1, #68	; 0x44
 800801a:	5c52      	ldrb	r2, [r2, r1]
 800801c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800801e:	e013      	b.n	8008048 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d016      	beq.n	8008056 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3310      	adds	r3, #16
 800802c:	0018      	movs	r0, r3
 800802e:	f000 fcb7 	bl	80089a0 <xTaskRemoveFromEventList>
 8008032:	1e03      	subs	r3, r0, #0
 8008034:	d001      	beq.n	800803a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008036:	f000 fd73 	bl	8008b20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800803a:	210e      	movs	r1, #14
 800803c:	187b      	adds	r3, r7, r1
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	3b01      	subs	r3, #1
 8008042:	b2da      	uxtb	r2, r3
 8008044:	187b      	adds	r3, r7, r1
 8008046:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008048:	230e      	movs	r3, #14
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b25b      	sxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	dce5      	bgt.n	8008020 <prvUnlockQueue+0x70>
 8008054:	e000      	b.n	8008058 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008056:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2244      	movs	r2, #68	; 0x44
 800805c:	21ff      	movs	r1, #255	; 0xff
 800805e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008060:	f001 fac0 	bl	80095e4 <vPortExitCritical>
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	46bd      	mov	sp, r7
 8008068:	b004      	add	sp, #16
 800806a:	bd80      	pop	{r7, pc}

0800806c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008074:	f001 faa4 	bl	80095c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008080:	2301      	movs	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	e001      	b.n	800808a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800808a:	f001 faab 	bl	80095e4 <vPortExitCritical>

	return xReturn;
 800808e:	68fb      	ldr	r3, [r7, #12]
}
 8008090:	0018      	movs	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	b004      	add	sp, #16
 8008096:	bd80      	pop	{r7, pc}

08008098 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080a0:	f001 fa8e 	bl	80095c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d102      	bne.n	80080b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080b0:	2301      	movs	r3, #1
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e001      	b.n	80080ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080ba:	f001 fa93 	bl	80095e4 <vPortExitCritical>

	return xReturn;
 80080be:	68fb      	ldr	r3, [r7, #12]
}
 80080c0:	0018      	movs	r0, r3
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b004      	add	sp, #16
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	e015      	b.n	8008104 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <vQueueAddToRegistry+0x4c>)
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	00d2      	lsls	r2, r2, #3
 80080de:	58d3      	ldr	r3, [r2, r3]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10c      	bne.n	80080fe <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080e4:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <vQueueAddToRegistry+0x4c>)
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	00d2      	lsls	r2, r2, #3
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <vQueueAddToRegistry+0x4c>)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	18d3      	adds	r3, r2, r3
 80080f6:	3304      	adds	r3, #4
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080fc:	e006      	b.n	800810c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b07      	cmp	r3, #7
 8008108:	d9e6      	bls.n	80080d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	46c0      	nop			; (mov r8, r8)
 800810e:	46bd      	mov	sp, r7
 8008110:	b004      	add	sp, #16
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000e40 	.word	0x20000e40

08008118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008128:	f001 fa4a 	bl	80095c0 <vPortEnterCritical>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2244      	movs	r2, #68	; 0x44
 8008130:	5c9b      	ldrb	r3, [r3, r2]
 8008132:	b25b      	sxtb	r3, r3
 8008134:	3301      	adds	r3, #1
 8008136:	d103      	bne.n	8008140 <vQueueWaitForMessageRestricted+0x28>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2244      	movs	r2, #68	; 0x44
 800813c:	2100      	movs	r1, #0
 800813e:	5499      	strb	r1, [r3, r2]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2245      	movs	r2, #69	; 0x45
 8008144:	5c9b      	ldrb	r3, [r3, r2]
 8008146:	b25b      	sxtb	r3, r3
 8008148:	3301      	adds	r3, #1
 800814a:	d103      	bne.n	8008154 <vQueueWaitForMessageRestricted+0x3c>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2245      	movs	r2, #69	; 0x45
 8008150:	2100      	movs	r1, #0
 8008152:	5499      	strb	r1, [r3, r2]
 8008154:	f001 fa46 	bl	80095e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3324      	adds	r3, #36	; 0x24
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	0018      	movs	r0, r3
 800816a:	f000 fbf3 	bl	8008954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	0018      	movs	r0, r3
 8008172:	f7ff ff1d 	bl	8007fb0 <prvUnlockQueue>
	}
 8008176:	46c0      	nop			; (mov r8, r8)
 8008178:	46bd      	mov	sp, r7
 800817a:	b006      	add	sp, #24
 800817c:	bd80      	pop	{r7, pc}

0800817e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800817e:	b590      	push	{r4, r7, lr}
 8008180:	b08d      	sub	sp, #52	; 0x34
 8008182:	af04      	add	r7, sp, #16
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800818c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <xTaskCreateStatic+0x18>
 8008192:	b672      	cpsid	i
 8008194:	e7fe      	b.n	8008194 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <xTaskCreateStatic+0x22>
 800819c:	b672      	cpsid	i
 800819e:	e7fe      	b.n	800819e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081a0:	23a8      	movs	r3, #168	; 0xa8
 80081a2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2ba8      	cmp	r3, #168	; 0xa8
 80081a8:	d001      	beq.n	80081ae <xTaskCreateStatic+0x30>
 80081aa:	b672      	cpsid	i
 80081ac:	e7fe      	b.n	80081ac <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081ae:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d020      	beq.n	80081f8 <xTaskCreateStatic+0x7a>
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01d      	beq.n	80081f8 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	22a5      	movs	r2, #165	; 0xa5
 80081ca:	2102      	movs	r1, #2
 80081cc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80081ce:	683c      	ldr	r4, [r7, #0]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	2300      	movs	r3, #0
 80081d8:	9303      	str	r3, [sp, #12]
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	2318      	movs	r3, #24
 80081e0:	18fb      	adds	r3, r7, r3
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	0023      	movs	r3, r4
 80081ea:	f000 f859 	bl	80082a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	0018      	movs	r0, r3
 80081f2:	f000 f8f5 	bl	80083e0 <prvAddNewTaskToReadyList>
 80081f6:	e001      	b.n	80081fc <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081fc:	69bb      	ldr	r3, [r7, #24]
	}
 80081fe:	0018      	movs	r0, r3
 8008200:	46bd      	mov	sp, r7
 8008202:	b009      	add	sp, #36	; 0x24
 8008204:	bd90      	pop	{r4, r7, pc}

08008206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008206:	b590      	push	{r4, r7, lr}
 8008208:	b08d      	sub	sp, #52	; 0x34
 800820a:	af04      	add	r7, sp, #16
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	1dbb      	adds	r3, r7, #6
 8008214:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008216:	1dbb      	adds	r3, r7, #6
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	0018      	movs	r0, r3
 800821e:	f001 fa67 	bl	80096f0 <pvPortMalloc>
 8008222:	0003      	movs	r3, r0
 8008224:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d010      	beq.n	800824e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800822c:	20a8      	movs	r0, #168	; 0xa8
 800822e:	f001 fa5f 	bl	80096f0 <pvPortMalloc>
 8008232:	0003      	movs	r3, r0
 8008234:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	631a      	str	r2, [r3, #48]	; 0x30
 8008242:	e006      	b.n	8008252 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	0018      	movs	r0, r3
 8008248:	f001 fafe 	bl	8009848 <vPortFree>
 800824c:	e001      	b.n	8008252 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01a      	beq.n	800828e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	22a5      	movs	r2, #165	; 0xa5
 800825c:	2100      	movs	r1, #0
 800825e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008260:	1dbb      	adds	r3, r7, #6
 8008262:	881a      	ldrh	r2, [r3, #0]
 8008264:	683c      	ldr	r4, [r7, #0]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	2300      	movs	r3, #0
 800826c:	9303      	str	r3, [sp, #12]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	9302      	str	r3, [sp, #8]
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	0023      	movs	r3, r4
 800827c:	f000 f810 	bl	80082a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	0018      	movs	r0, r3
 8008284:	f000 f8ac 	bl	80083e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008288:	2301      	movs	r3, #1
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	e002      	b.n	8008294 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800828e:	2301      	movs	r3, #1
 8008290:	425b      	negs	r3, r3
 8008292:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008294:	69bb      	ldr	r3, [r7, #24]
	}
 8008296:	0018      	movs	r0, r3
 8008298:	46bd      	mov	sp, r7
 800829a:	b009      	add	sp, #36	; 0x24
 800829c:	bd90      	pop	{r4, r7, pc}
	...

080082a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	001a      	movs	r2, r3
 80082b8:	21a5      	movs	r1, #165	; 0xa5
 80082ba:	f002 fb81 	bl	800a9c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4942      	ldr	r1, [pc, #264]	; (80083d0 <prvInitialiseNewTask+0x130>)
 80082c6:	468c      	mov	ip, r1
 80082c8:	4463      	add	r3, ip
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	18d3      	adds	r3, r2, r3
 80082ce:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2207      	movs	r2, #7
 80082d4:	4393      	bics	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	2207      	movs	r2, #7
 80082dc:	4013      	ands	r3, r2
 80082de:	d001      	beq.n	80082e4 <prvInitialiseNewTask+0x44>
 80082e0:	b672      	cpsid	i
 80082e2:	e7fe      	b.n	80082e2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d020      	beq.n	800832c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e013      	b.n	8008318 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	18d3      	adds	r3, r2, r3
 80082f6:	7818      	ldrb	r0, [r3, #0]
 80082f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082fa:	2134      	movs	r1, #52	; 0x34
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	18d3      	adds	r3, r2, r3
 8008300:	185b      	adds	r3, r3, r1
 8008302:	1c02      	adds	r2, r0, #0
 8008304:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	18d3      	adds	r3, r2, r3
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d006      	beq.n	8008320 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	3301      	adds	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2b0f      	cmp	r3, #15
 800831c:	d9e8      	bls.n	80082f0 <prvInitialiseNewTask+0x50>
 800831e:	e000      	b.n	8008322 <prvInitialiseNewTask+0x82>
			{
				break;
 8008320:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	2243      	movs	r2, #67	; 0x43
 8008326:	2100      	movs	r1, #0
 8008328:	5499      	strb	r1, [r3, r2]
 800832a:	e003      	b.n	8008334 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	2234      	movs	r2, #52	; 0x34
 8008330:	2100      	movs	r1, #0
 8008332:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2b37      	cmp	r3, #55	; 0x37
 8008338:	d901      	bls.n	800833e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800833a:	2337      	movs	r3, #55	; 0x37
 800833c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	6a3a      	ldr	r2, [r7, #32]
 8008342:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	6a3a      	ldr	r2, [r7, #32]
 8008348:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	2200      	movs	r2, #0
 800834e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	3304      	adds	r3, #4
 8008354:	0018      	movs	r0, r3
 8008356:	f7ff fa29 	bl	80077ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	3318      	adds	r3, #24
 800835e:	0018      	movs	r0, r3
 8008360:	f7ff fa24 	bl	80077ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008368:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	2238      	movs	r2, #56	; 0x38
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008378:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	22a0      	movs	r2, #160	; 0xa0
 800837e:	2100      	movs	r1, #0
 8008380:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	22a4      	movs	r2, #164	; 0xa4
 8008386:	2100      	movs	r1, #0
 8008388:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	3354      	adds	r3, #84	; 0x54
 800838e:	224c      	movs	r2, #76	; 0x4c
 8008390:	2100      	movs	r1, #0
 8008392:	0018      	movs	r0, r3
 8008394:	f002 fb14 	bl	800a9c0 <memset>
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	4a0e      	ldr	r2, [pc, #56]	; (80083d4 <prvInitialiseNewTask+0x134>)
 800839c:	659a      	str	r2, [r3, #88]	; 0x58
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	4a0d      	ldr	r2, [pc, #52]	; (80083d8 <prvInitialiseNewTask+0x138>)
 80083a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	4a0d      	ldr	r2, [pc, #52]	; (80083dc <prvInitialiseNewTask+0x13c>)
 80083a8:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	68f9      	ldr	r1, [r7, #12]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	0018      	movs	r0, r3
 80083b2:	f001 f86b 	bl	800948c <pxPortInitialiseStack>
 80083b6:	0002      	movs	r2, r0
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083c8:	46c0      	nop			; (mov r8, r8)
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b006      	add	sp, #24
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	3fffffff 	.word	0x3fffffff
 80083d4:	200020cc 	.word	0x200020cc
 80083d8:	20002134 	.word	0x20002134
 80083dc:	2000219c 	.word	0x2000219c

080083e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083e8:	f001 f8ea 	bl	80095c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083ec:	4b2a      	ldr	r3, [pc, #168]	; (8008498 <prvAddNewTaskToReadyList+0xb8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	4b29      	ldr	r3, [pc, #164]	; (8008498 <prvAddNewTaskToReadyList+0xb8>)
 80083f4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80083f6:	4b29      	ldr	r3, [pc, #164]	; (800849c <prvAddNewTaskToReadyList+0xbc>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083fe:	4b27      	ldr	r3, [pc, #156]	; (800849c <prvAddNewTaskToReadyList+0xbc>)
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008404:	4b24      	ldr	r3, [pc, #144]	; (8008498 <prvAddNewTaskToReadyList+0xb8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d110      	bne.n	800842e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800840c:	f000 fba2 	bl	8008b54 <prvInitialiseTaskLists>
 8008410:	e00d      	b.n	800842e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008412:	4b23      	ldr	r3, [pc, #140]	; (80084a0 <prvAddNewTaskToReadyList+0xc0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800841a:	4b20      	ldr	r3, [pc, #128]	; (800849c <prvAddNewTaskToReadyList+0xbc>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	429a      	cmp	r2, r3
 8008426:	d802      	bhi.n	800842e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008428:	4b1c      	ldr	r3, [pc, #112]	; (800849c <prvAddNewTaskToReadyList+0xbc>)
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800842e:	4b1d      	ldr	r3, [pc, #116]	; (80084a4 <prvAddNewTaskToReadyList+0xc4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <prvAddNewTaskToReadyList+0xc4>)
 8008436:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <prvAddNewTaskToReadyList+0xc4>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	4b18      	ldr	r3, [pc, #96]	; (80084a8 <prvAddNewTaskToReadyList+0xc8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d903      	bls.n	8008454 <prvAddNewTaskToReadyList+0x74>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008450:	4b15      	ldr	r3, [pc, #84]	; (80084a8 <prvAddNewTaskToReadyList+0xc8>)
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008458:	0013      	movs	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	189b      	adds	r3, r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4a12      	ldr	r2, [pc, #72]	; (80084ac <prvAddNewTaskToReadyList+0xcc>)
 8008462:	189a      	adds	r2, r3, r2
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3304      	adds	r3, #4
 8008468:	0019      	movs	r1, r3
 800846a:	0010      	movs	r0, r2
 800846c:	f7ff f9a9 	bl	80077c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008470:	f001 f8b8 	bl	80095e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008474:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <prvAddNewTaskToReadyList+0xc0>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800847c:	4b07      	ldr	r3, [pc, #28]	; (800849c <prvAddNewTaskToReadyList+0xbc>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	429a      	cmp	r2, r3
 8008488:	d201      	bcs.n	800848e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800848a:	f001 f889 	bl	80095a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	46bd      	mov	sp, r7
 8008492:	b002      	add	sp, #8
 8008494:	bd80      	pop	{r7, pc}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	20001354 	.word	0x20001354
 800849c:	20000e80 	.word	0x20000e80
 80084a0:	20001360 	.word	0x20001360
 80084a4:	20001370 	.word	0x20001370
 80084a8:	2000135c 	.word	0x2000135c
 80084ac:	20000e84 	.word	0x20000e84

080084b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d010      	beq.n	80084e4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <vTaskDelay+0x48>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <vTaskDelay+0x1e>
 80084ca:	b672      	cpsid	i
 80084cc:	e7fe      	b.n	80084cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80084ce:	f000 f873 	bl	80085b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2100      	movs	r1, #0
 80084d6:	0018      	movs	r0, r3
 80084d8:	f000 fc72 	bl	8008dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80084dc:	f000 f878 	bl	80085d0 <xTaskResumeAll>
 80084e0:	0003      	movs	r3, r0
 80084e2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80084ea:	f001 f859 	bl	80095a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	46bd      	mov	sp, r7
 80084f2:	b004      	add	sp, #16
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	2000137c 	.word	0x2000137c

080084fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b089      	sub	sp, #36	; 0x24
 8008500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800850a:	003a      	movs	r2, r7
 800850c:	1d39      	adds	r1, r7, #4
 800850e:	2308      	movs	r3, #8
 8008510:	18fb      	adds	r3, r7, r3
 8008512:	0018      	movs	r0, r3
 8008514:	f7ff f8fc 	bl	8007710 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008518:	683c      	ldr	r4, [r7, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	491e      	ldr	r1, [pc, #120]	; (8008598 <vTaskStartScheduler+0x9c>)
 8008520:	481e      	ldr	r0, [pc, #120]	; (800859c <vTaskStartScheduler+0xa0>)
 8008522:	9202      	str	r2, [sp, #8]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	2300      	movs	r3, #0
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	0022      	movs	r2, r4
 800852e:	f7ff fe26 	bl	800817e <xTaskCreateStatic>
 8008532:	0002      	movs	r2, r0
 8008534:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <vTaskStartScheduler+0xa4>)
 8008536:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008538:	4b19      	ldr	r3, [pc, #100]	; (80085a0 <vTaskStartScheduler+0xa4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008540:	2301      	movs	r3, #1
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e001      	b.n	800854a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d103      	bne.n	8008558 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8008550:	f000 fc8a 	bl	8008e68 <xTimerCreateTimerTask>
 8008554:	0003      	movs	r3, r0
 8008556:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d113      	bne.n	8008586 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800855e:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008560:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <vTaskStartScheduler+0xa8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3354      	adds	r3, #84	; 0x54
 8008566:	001a      	movs	r2, r3
 8008568:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <vTaskStartScheduler+0xac>)
 800856a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <vTaskStartScheduler+0xb0>)
 800856e:	2201      	movs	r2, #1
 8008570:	4252      	negs	r2, r2
 8008572:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <vTaskStartScheduler+0xb4>)
 8008576:	2201      	movs	r2, #1
 8008578:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800857a:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <vTaskStartScheduler+0xb8>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008580:	f000 ffea 	bl	8009558 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008584:	e004      	b.n	8008590 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3301      	adds	r3, #1
 800858a:	d101      	bne.n	8008590 <vTaskStartScheduler+0x94>
 800858c:	b672      	cpsid	i
 800858e:	e7fe      	b.n	800858e <vTaskStartScheduler+0x92>
}
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	46bd      	mov	sp, r7
 8008594:	b005      	add	sp, #20
 8008596:	bd90      	pop	{r4, r7, pc}
 8008598:	0800e484 	.word	0x0800e484
 800859c:	08008b35 	.word	0x08008b35
 80085a0:	20001378 	.word	0x20001378
 80085a4:	20000e80 	.word	0x20000e80
 80085a8:	20000068 	.word	0x20000068
 80085ac:	20001374 	.word	0x20001374
 80085b0:	20001360 	.word	0x20001360
 80085b4:	20001358 	.word	0x20001358

080085b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085bc:	4b03      	ldr	r3, [pc, #12]	; (80085cc <vTaskSuspendAll+0x14>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	4b02      	ldr	r3, [pc, #8]	; (80085cc <vTaskSuspendAll+0x14>)
 80085c4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	2000137c 	.word	0x2000137c

080085d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085de:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <xTaskResumeAll+0xf8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <xTaskResumeAll+0x1a>
 80085e6:	b672      	cpsid	i
 80085e8:	e7fe      	b.n	80085e8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085ea:	f000 ffe9 	bl	80095c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085ee:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <xTaskResumeAll+0xf8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	1e5a      	subs	r2, r3, #1
 80085f4:	4b34      	ldr	r3, [pc, #208]	; (80086c8 <xTaskResumeAll+0xf8>)
 80085f6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f8:	4b33      	ldr	r3, [pc, #204]	; (80086c8 <xTaskResumeAll+0xf8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d15b      	bne.n	80086b8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008600:	4b32      	ldr	r3, [pc, #200]	; (80086cc <xTaskResumeAll+0xfc>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d057      	beq.n	80086b8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008608:	e02f      	b.n	800866a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860a:	4b31      	ldr	r3, [pc, #196]	; (80086d0 <xTaskResumeAll+0x100>)
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3318      	adds	r3, #24
 8008616:	0018      	movs	r0, r3
 8008618:	f7ff f92b 	bl	8007872 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3304      	adds	r3, #4
 8008620:	0018      	movs	r0, r3
 8008622:	f7ff f926 	bl	8007872 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862a:	4b2a      	ldr	r3, [pc, #168]	; (80086d4 <xTaskResumeAll+0x104>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d903      	bls.n	800863a <xTaskResumeAll+0x6a>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008636:	4b27      	ldr	r3, [pc, #156]	; (80086d4 <xTaskResumeAll+0x104>)
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863e:	0013      	movs	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	189b      	adds	r3, r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4a24      	ldr	r2, [pc, #144]	; (80086d8 <xTaskResumeAll+0x108>)
 8008648:	189a      	adds	r2, r3, r2
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3304      	adds	r3, #4
 800864e:	0019      	movs	r1, r3
 8008650:	0010      	movs	r0, r2
 8008652:	f7ff f8b6 	bl	80077c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	4b20      	ldr	r3, [pc, #128]	; (80086dc <xTaskResumeAll+0x10c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	429a      	cmp	r2, r3
 8008662:	d302      	bcc.n	800866a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008664:	4b1e      	ldr	r3, [pc, #120]	; (80086e0 <xTaskResumeAll+0x110>)
 8008666:	2201      	movs	r2, #1
 8008668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800866a:	4b19      	ldr	r3, [pc, #100]	; (80086d0 <xTaskResumeAll+0x100>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1cb      	bne.n	800860a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008678:	f000 fb0c 	bl	8008c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800867c:	4b19      	ldr	r3, [pc, #100]	; (80086e4 <xTaskResumeAll+0x114>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00f      	beq.n	80086a8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008688:	f000 f83c 	bl	8008704 <xTaskIncrementTick>
 800868c:	1e03      	subs	r3, r0, #0
 800868e:	d002      	beq.n	8008696 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008690:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <xTaskResumeAll+0x110>)
 8008692:	2201      	movs	r2, #1
 8008694:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f2      	bne.n	8008688 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80086a2:	4b10      	ldr	r3, [pc, #64]	; (80086e4 <xTaskResumeAll+0x114>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086a8:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <xTaskResumeAll+0x110>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086b4:	f000 ff74 	bl	80095a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086b8:	f000 ff94 	bl	80095e4 <vPortExitCritical>

	return xAlreadyYielded;
 80086bc:	68bb      	ldr	r3, [r7, #8]
}
 80086be:	0018      	movs	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b004      	add	sp, #16
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	2000137c 	.word	0x2000137c
 80086cc:	20001354 	.word	0x20001354
 80086d0:	20001314 	.word	0x20001314
 80086d4:	2000135c 	.word	0x2000135c
 80086d8:	20000e84 	.word	0x20000e84
 80086dc:	20000e80 	.word	0x20000e80
 80086e0:	20001368 	.word	0x20001368
 80086e4:	20001364 	.word	0x20001364

080086e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ee:	4b04      	ldr	r3, [pc, #16]	; (8008700 <xTaskGetTickCount+0x18>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086f4:	687b      	ldr	r3, [r7, #4]
}
 80086f6:	0018      	movs	r0, r3
 80086f8:	46bd      	mov	sp, r7
 80086fa:	b002      	add	sp, #8
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	20001358 	.word	0x20001358

08008704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800870e:	4b4a      	ldr	r3, [pc, #296]	; (8008838 <xTaskIncrementTick+0x134>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d000      	beq.n	8008718 <xTaskIncrementTick+0x14>
 8008716:	e084      	b.n	8008822 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008718:	4b48      	ldr	r3, [pc, #288]	; (800883c <xTaskIncrementTick+0x138>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008720:	4b46      	ldr	r3, [pc, #280]	; (800883c <xTaskIncrementTick+0x138>)
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d117      	bne.n	800875c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800872c:	4b44      	ldr	r3, [pc, #272]	; (8008840 <xTaskIncrementTick+0x13c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <xTaskIncrementTick+0x36>
 8008736:	b672      	cpsid	i
 8008738:	e7fe      	b.n	8008738 <xTaskIncrementTick+0x34>
 800873a:	4b41      	ldr	r3, [pc, #260]	; (8008840 <xTaskIncrementTick+0x13c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	4b40      	ldr	r3, [pc, #256]	; (8008844 <xTaskIncrementTick+0x140>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	4b3e      	ldr	r3, [pc, #248]	; (8008840 <xTaskIncrementTick+0x13c>)
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	4b3e      	ldr	r3, [pc, #248]	; (8008844 <xTaskIncrementTick+0x140>)
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	4b3e      	ldr	r3, [pc, #248]	; (8008848 <xTaskIncrementTick+0x144>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	4b3c      	ldr	r3, [pc, #240]	; (8008848 <xTaskIncrementTick+0x144>)
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	f000 fa9c 	bl	8008c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800875c:	4b3b      	ldr	r3, [pc, #236]	; (800884c <xTaskIncrementTick+0x148>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	429a      	cmp	r2, r3
 8008764:	d349      	bcc.n	80087fa <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008766:	4b36      	ldr	r3, [pc, #216]	; (8008840 <xTaskIncrementTick+0x13c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d104      	bne.n	800877a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008770:	4b36      	ldr	r3, [pc, #216]	; (800884c <xTaskIncrementTick+0x148>)
 8008772:	2201      	movs	r2, #1
 8008774:	4252      	negs	r2, r2
 8008776:	601a      	str	r2, [r3, #0]
					break;
 8008778:	e03f      	b.n	80087fa <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877a:	4b31      	ldr	r3, [pc, #196]	; (8008840 <xTaskIncrementTick+0x13c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	429a      	cmp	r2, r3
 8008790:	d203      	bcs.n	800879a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008792:	4b2e      	ldr	r3, [pc, #184]	; (800884c <xTaskIncrementTick+0x148>)
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008798:	e02f      	b.n	80087fa <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	3304      	adds	r3, #4
 800879e:	0018      	movs	r0, r3
 80087a0:	f7ff f867 	bl	8007872 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	3318      	adds	r3, #24
 80087b0:	0018      	movs	r0, r3
 80087b2:	f7ff f85e 	bl	8007872 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ba:	4b25      	ldr	r3, [pc, #148]	; (8008850 <xTaskIncrementTick+0x14c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d903      	bls.n	80087ca <xTaskIncrementTick+0xc6>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	4b22      	ldr	r3, [pc, #136]	; (8008850 <xTaskIncrementTick+0x14c>)
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ce:	0013      	movs	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	189b      	adds	r3, r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4a1f      	ldr	r2, [pc, #124]	; (8008854 <xTaskIncrementTick+0x150>)
 80087d8:	189a      	adds	r2, r3, r2
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	3304      	adds	r3, #4
 80087de:	0019      	movs	r1, r3
 80087e0:	0010      	movs	r0, r2
 80087e2:	f7fe ffee 	bl	80077c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	4b1b      	ldr	r3, [pc, #108]	; (8008858 <xTaskIncrementTick+0x154>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d3b8      	bcc.n	8008766 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f8:	e7b5      	b.n	8008766 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087fa:	4b17      	ldr	r3, [pc, #92]	; (8008858 <xTaskIncrementTick+0x154>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008800:	4914      	ldr	r1, [pc, #80]	; (8008854 <xTaskIncrementTick+0x150>)
 8008802:	0013      	movs	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	189b      	adds	r3, r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	585b      	ldr	r3, [r3, r1]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d901      	bls.n	8008814 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008814:	4b11      	ldr	r3, [pc, #68]	; (800885c <xTaskIncrementTick+0x158>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800881c:	2301      	movs	r3, #1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e004      	b.n	800882c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <xTaskIncrementTick+0x15c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	4b0d      	ldr	r3, [pc, #52]	; (8008860 <xTaskIncrementTick+0x15c>)
 800882a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800882c:	697b      	ldr	r3, [r7, #20]
}
 800882e:	0018      	movs	r0, r3
 8008830:	46bd      	mov	sp, r7
 8008832:	b006      	add	sp, #24
 8008834:	bd80      	pop	{r7, pc}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	2000137c 	.word	0x2000137c
 800883c:	20001358 	.word	0x20001358
 8008840:	2000130c 	.word	0x2000130c
 8008844:	20001310 	.word	0x20001310
 8008848:	2000136c 	.word	0x2000136c
 800884c:	20001374 	.word	0x20001374
 8008850:	2000135c 	.word	0x2000135c
 8008854:	20000e84 	.word	0x20000e84
 8008858:	20000e80 	.word	0x20000e80
 800885c:	20001368 	.word	0x20001368
 8008860:	20001364 	.word	0x20001364

08008864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800886a:	4b25      	ldr	r3, [pc, #148]	; (8008900 <vTaskSwitchContext+0x9c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008872:	4b24      	ldr	r3, [pc, #144]	; (8008904 <vTaskSwitchContext+0xa0>)
 8008874:	2201      	movs	r2, #1
 8008876:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008878:	e03d      	b.n	80088f6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800887a:	4b22      	ldr	r3, [pc, #136]	; (8008904 <vTaskSwitchContext+0xa0>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008880:	4b21      	ldr	r3, [pc, #132]	; (8008908 <vTaskSwitchContext+0xa4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	607b      	str	r3, [r7, #4]
 8008886:	e007      	b.n	8008898 <vTaskSwitchContext+0x34>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <vTaskSwitchContext+0x2e>
 800888e:	b672      	cpsid	i
 8008890:	e7fe      	b.n	8008890 <vTaskSwitchContext+0x2c>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3b01      	subs	r3, #1
 8008896:	607b      	str	r3, [r7, #4]
 8008898:	491c      	ldr	r1, [pc, #112]	; (800890c <vTaskSwitchContext+0xa8>)
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	0013      	movs	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	189b      	adds	r3, r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	585b      	ldr	r3, [r3, r1]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0ee      	beq.n	8008888 <vTaskSwitchContext+0x24>
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	0013      	movs	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	189b      	adds	r3, r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4a15      	ldr	r2, [pc, #84]	; (800890c <vTaskSwitchContext+0xa8>)
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d104      	bne.n	80088da <vTaskSwitchContext+0x76>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <vTaskSwitchContext+0xac>)
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	4b08      	ldr	r3, [pc, #32]	; (8008908 <vTaskSwitchContext+0xa4>)
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <vTaskSwitchContext+0xac>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3354      	adds	r3, #84	; 0x54
 80088f0:	001a      	movs	r2, r3
 80088f2:	4b08      	ldr	r3, [pc, #32]	; (8008914 <vTaskSwitchContext+0xb0>)
 80088f4:	601a      	str	r2, [r3, #0]
}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	46bd      	mov	sp, r7
 80088fa:	b002      	add	sp, #8
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	2000137c 	.word	0x2000137c
 8008904:	20001368 	.word	0x20001368
 8008908:	2000135c 	.word	0x2000135c
 800890c:	20000e84 	.word	0x20000e84
 8008910:	20000e80 	.word	0x20000e80
 8008914:	20000068 	.word	0x20000068

08008918 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <vTaskPlaceOnEventList+0x14>
 8008928:	b672      	cpsid	i
 800892a:	e7fe      	b.n	800892a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <vTaskPlaceOnEventList+0x38>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3318      	adds	r3, #24
 8008932:	001a      	movs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	0011      	movs	r1, r2
 8008938:	0018      	movs	r0, r3
 800893a:	f7fe ff64 	bl	8007806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2101      	movs	r1, #1
 8008942:	0018      	movs	r0, r3
 8008944:	f000 fa3c 	bl	8008dc0 <prvAddCurrentTaskToDelayedList>
}
 8008948:	46c0      	nop			; (mov r8, r8)
 800894a:	46bd      	mov	sp, r7
 800894c:	b002      	add	sp, #8
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20000e80 	.word	0x20000e80

08008954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <vTaskPlaceOnEventListRestricted+0x16>
 8008966:	b672      	cpsid	i
 8008968:	e7fe      	b.n	8008968 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800896a:	4b0c      	ldr	r3, [pc, #48]	; (800899c <vTaskPlaceOnEventListRestricted+0x48>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3318      	adds	r3, #24
 8008970:	001a      	movs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	0011      	movs	r1, r2
 8008976:	0018      	movs	r0, r3
 8008978:	f7fe ff23 	bl	80077c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8008982:	2301      	movs	r3, #1
 8008984:	425b      	negs	r3, r3
 8008986:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	0011      	movs	r1, r2
 800898e:	0018      	movs	r0, r3
 8008990:	f000 fa16 	bl	8008dc0 <prvAddCurrentTaskToDelayedList>
	}
 8008994:	46c0      	nop			; (mov r8, r8)
 8008996:	46bd      	mov	sp, r7
 8008998:	b004      	add	sp, #16
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20000e80 	.word	0x20000e80

080089a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <xTaskRemoveFromEventList+0x1a>
 80089b6:	b672      	cpsid	i
 80089b8:	e7fe      	b.n	80089b8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	3318      	adds	r3, #24
 80089be:	0018      	movs	r0, r3
 80089c0:	f7fe ff57 	bl	8007872 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089c4:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <xTaskRemoveFromEventList+0xa0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11d      	bne.n	8008a08 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3304      	adds	r3, #4
 80089d0:	0018      	movs	r0, r3
 80089d2:	f7fe ff4e 	bl	8007872 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <xTaskRemoveFromEventList+0xa4>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d903      	bls.n	80089ea <xTaskRemoveFromEventList+0x4a>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	4b17      	ldr	r3, [pc, #92]	; (8008a44 <xTaskRemoveFromEventList+0xa4>)
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ee:	0013      	movs	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	189b      	adds	r3, r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4a14      	ldr	r2, [pc, #80]	; (8008a48 <xTaskRemoveFromEventList+0xa8>)
 80089f8:	189a      	adds	r2, r3, r2
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	3304      	adds	r3, #4
 80089fe:	0019      	movs	r1, r3
 8008a00:	0010      	movs	r0, r2
 8008a02:	f7fe fede 	bl	80077c2 <vListInsertEnd>
 8008a06:	e007      	b.n	8008a18 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	3318      	adds	r3, #24
 8008a0c:	001a      	movs	r2, r3
 8008a0e:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <xTaskRemoveFromEventList+0xac>)
 8008a10:	0011      	movs	r1, r2
 8008a12:	0018      	movs	r0, r3
 8008a14:	f7fe fed5 	bl	80077c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1c:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <xTaskRemoveFromEventList+0xb0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d905      	bls.n	8008a32 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a26:	2301      	movs	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a2a:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <xTaskRemoveFromEventList+0xb4>)
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e001      	b.n	8008a36 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008a36:	68fb      	ldr	r3, [r7, #12]
}
 8008a38:	0018      	movs	r0, r3
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b004      	add	sp, #16
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	2000137c 	.word	0x2000137c
 8008a44:	2000135c 	.word	0x2000135c
 8008a48:	20000e84 	.word	0x20000e84
 8008a4c:	20001314 	.word	0x20001314
 8008a50:	20000e80 	.word	0x20000e80
 8008a54:	20001368 	.word	0x20001368

08008a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a60:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <vTaskInternalSetTimeOutState+0x20>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a68:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <vTaskInternalSetTimeOutState+0x24>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	605a      	str	r2, [r3, #4]
}
 8008a70:	46c0      	nop			; (mov r8, r8)
 8008a72:	46bd      	mov	sp, r7
 8008a74:	b002      	add	sp, #8
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	2000136c 	.word	0x2000136c
 8008a7c:	20001358 	.word	0x20001358

08008a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <xTaskCheckForTimeOut+0x14>
 8008a90:	b672      	cpsid	i
 8008a92:	e7fe      	b.n	8008a92 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <xTaskCheckForTimeOut+0x1e>
 8008a9a:	b672      	cpsid	i
 8008a9c:	e7fe      	b.n	8008a9c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008a9e:	f000 fd8f 	bl	80095c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008aa2:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <xTaskCheckForTimeOut+0x98>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	d102      	bne.n	8008ac0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e024      	b.n	8008b0a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4b15      	ldr	r3, [pc, #84]	; (8008b1c <xTaskCheckForTimeOut+0x9c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d007      	beq.n	8008adc <xTaskCheckForTimeOut+0x5c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d302      	bcc.n	8008adc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	e016      	b.n	8008b0a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d20c      	bcs.n	8008b00 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	1ad2      	subs	r2, r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	0018      	movs	r0, r3
 8008af6:	f7ff ffaf 	bl	8008a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]
 8008afe:	e004      	b.n	8008b0a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008b0a:	f000 fd6b 	bl	80095e4 <vPortExitCritical>

	return xReturn;
 8008b0e:	697b      	ldr	r3, [r7, #20]
}
 8008b10:	0018      	movs	r0, r3
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b006      	add	sp, #24
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20001358 	.word	0x20001358
 8008b1c:	2000136c 	.word	0x2000136c

08008b20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b24:	4b02      	ldr	r3, [pc, #8]	; (8008b30 <vTaskMissedYield+0x10>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20001368 	.word	0x20001368

08008b34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b3c:	f000 f84e 	bl	8008bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b40:	4b03      	ldr	r3, [pc, #12]	; (8008b50 <prvIdleTask+0x1c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d9f9      	bls.n	8008b3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b48:	f000 fd2a 	bl	80095a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008b4c:	e7f6      	b.n	8008b3c <prvIdleTask+0x8>
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	20000e84 	.word	0x20000e84

08008b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	607b      	str	r3, [r7, #4]
 8008b5e:	e00c      	b.n	8008b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	0013      	movs	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	189b      	adds	r3, r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <prvInitialiseTaskLists+0x68>)
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f7fe fdfe 	bl	8007770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3301      	adds	r3, #1
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b37      	cmp	r3, #55	; 0x37
 8008b7e:	d9ef      	bls.n	8008b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b80:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <prvInitialiseTaskLists+0x6c>)
 8008b82:	0018      	movs	r0, r3
 8008b84:	f7fe fdf4 	bl	8007770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b88:	4b0e      	ldr	r3, [pc, #56]	; (8008bc4 <prvInitialiseTaskLists+0x70>)
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7fe fdf0 	bl	8007770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b90:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <prvInitialiseTaskLists+0x74>)
 8008b92:	0018      	movs	r0, r3
 8008b94:	f7fe fdec 	bl	8007770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <prvInitialiseTaskLists+0x78>)
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f7fe fde8 	bl	8007770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <prvInitialiseTaskLists+0x7c>)
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7fe fde4 	bl	8007770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <prvInitialiseTaskLists+0x80>)
 8008baa:	4a05      	ldr	r2, [pc, #20]	; (8008bc0 <prvInitialiseTaskLists+0x6c>)
 8008bac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bae:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <prvInitialiseTaskLists+0x84>)
 8008bb0:	4a04      	ldr	r2, [pc, #16]	; (8008bc4 <prvInitialiseTaskLists+0x70>)
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	46c0      	nop			; (mov r8, r8)
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b002      	add	sp, #8
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000e84 	.word	0x20000e84
 8008bc0:	200012e4 	.word	0x200012e4
 8008bc4:	200012f8 	.word	0x200012f8
 8008bc8:	20001314 	.word	0x20001314
 8008bcc:	20001328 	.word	0x20001328
 8008bd0:	20001340 	.word	0x20001340
 8008bd4:	2000130c 	.word	0x2000130c
 8008bd8:	20001310 	.word	0x20001310

08008bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008be2:	e01a      	b.n	8008c1a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008be4:	f000 fcec 	bl	80095c0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be8:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <prvCheckTasksWaitingTermination+0x50>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	f7fe fe3c 	bl	8007872 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bfa:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <prvCheckTasksWaitingTermination+0x54>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	1e5a      	subs	r2, r3, #1
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <prvCheckTasksWaitingTermination+0x54>)
 8008c02:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c04:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <prvCheckTasksWaitingTermination+0x58>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	1e5a      	subs	r2, r3, #1
 8008c0a:	4b0a      	ldr	r3, [pc, #40]	; (8008c34 <prvCheckTasksWaitingTermination+0x58>)
 8008c0c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008c0e:	f000 fce9 	bl	80095e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	0018      	movs	r0, r3
 8008c16:	f000 f80f 	bl	8008c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c1a:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <prvCheckTasksWaitingTermination+0x58>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e0      	bne.n	8008be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	46c0      	nop			; (mov r8, r8)
 8008c26:	46bd      	mov	sp, r7
 8008c28:	b002      	add	sp, #8
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20001328 	.word	0x20001328
 8008c30:	20001354 	.word	0x20001354
 8008c34:	2000133c 	.word	0x2000133c

08008c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3354      	adds	r3, #84	; 0x54
 8008c44:	0018      	movs	r0, r3
 8008c46:	f001 fed9 	bl	800a9fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	22a5      	movs	r2, #165	; 0xa5
 8008c4e:	5c9b      	ldrb	r3, [r3, r2]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d109      	bne.n	8008c68 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	0018      	movs	r0, r3
 8008c5a:	f000 fdf5 	bl	8009848 <vPortFree>
				vPortFree( pxTCB );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	0018      	movs	r0, r3
 8008c62:	f000 fdf1 	bl	8009848 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c66:	e010      	b.n	8008c8a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	22a5      	movs	r2, #165	; 0xa5
 8008c6c:	5c9b      	ldrb	r3, [r3, r2]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d104      	bne.n	8008c7c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	0018      	movs	r0, r3
 8008c76:	f000 fde7 	bl	8009848 <vPortFree>
	}
 8008c7a:	e006      	b.n	8008c8a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	22a5      	movs	r2, #165	; 0xa5
 8008c80:	5c9b      	ldrb	r3, [r3, r2]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d001      	beq.n	8008c8a <prvDeleteTCB+0x52>
 8008c86:	b672      	cpsid	i
 8008c88:	e7fe      	b.n	8008c88 <prvDeleteTCB+0x50>
	}
 8008c8a:	46c0      	nop			; (mov r8, r8)
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	b002      	add	sp, #8
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <prvResetNextTaskUnblockTime+0x34>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <prvResetNextTaskUnblockTime+0x38>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4252      	negs	r2, r2
 8008caa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cac:	e008      	b.n	8008cc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cae:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <prvResetNextTaskUnblockTime+0x34>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <prvResetNextTaskUnblockTime+0x38>)
 8008cbe:	601a      	str	r2, [r3, #0]
}
 8008cc0:	46c0      	nop			; (mov r8, r8)
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	b002      	add	sp, #8
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	2000130c 	.word	0x2000130c
 8008ccc:	20001374 	.word	0x20001374

08008cd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cd6:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <xTaskGetSchedulerState+0x30>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	607b      	str	r3, [r7, #4]
 8008ce2:	e008      	b.n	8008cf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce4:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <xTaskGetSchedulerState+0x34>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d102      	bne.n	8008cf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cec:	2302      	movs	r3, #2
 8008cee:	607b      	str	r3, [r7, #4]
 8008cf0:	e001      	b.n	8008cf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cf6:	687b      	ldr	r3, [r7, #4]
	}
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20001360 	.word	0x20001360
 8008d04:	2000137c 	.word	0x2000137c

08008d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d044      	beq.n	8008da8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d1e:	4b25      	ldr	r3, [pc, #148]	; (8008db4 <xTaskPriorityDisinherit+0xac>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d001      	beq.n	8008d2c <xTaskPriorityDisinherit+0x24>
 8008d28:	b672      	cpsid	i
 8008d2a:	e7fe      	b.n	8008d2a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <xTaskPriorityDisinherit+0x30>
 8008d34:	b672      	cpsid	i
 8008d36:	e7fe      	b.n	8008d36 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3c:	1e5a      	subs	r2, r3, #1
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d02c      	beq.n	8008da8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d128      	bne.n	8008da8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f7fe fd89 	bl	8007872 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	2238      	movs	r2, #56	; 0x38
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d78:	4b0f      	ldr	r3, [pc, #60]	; (8008db8 <xTaskPriorityDisinherit+0xb0>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d903      	bls.n	8008d88 <xTaskPriorityDisinherit+0x80>
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d84:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <xTaskPriorityDisinherit+0xb0>)
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	0013      	movs	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	189b      	adds	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4a09      	ldr	r2, [pc, #36]	; (8008dbc <xTaskPriorityDisinherit+0xb4>)
 8008d96:	189a      	adds	r2, r3, r2
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	0019      	movs	r1, r3
 8008d9e:	0010      	movs	r0, r2
 8008da0:	f7fe fd0f 	bl	80077c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008da8:	68fb      	ldr	r3, [r7, #12]
	}
 8008daa:	0018      	movs	r0, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b004      	add	sp, #16
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	20000e80 	.word	0x20000e80
 8008db8:	2000135c 	.word	0x2000135c
 8008dbc:	20000e84 	.word	0x20000e84

08008dc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dca:	4b21      	ldr	r3, [pc, #132]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x90>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd0:	4b20      	ldr	r3, [pc, #128]	; (8008e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f7fe fd4b 	bl	8007872 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3301      	adds	r3, #1
 8008de0:	d10b      	bne.n	8008dfa <prvAddCurrentTaskToDelayedList+0x3a>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d008      	beq.n	8008dfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de8:	4b1a      	ldr	r3, [pc, #104]	; (8008e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	1d1a      	adds	r2, r3, #4
 8008dee:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <prvAddCurrentTaskToDelayedList+0x98>)
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7fe fce5 	bl	80077c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008df8:	e026      	b.n	8008e48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	18d3      	adds	r3, r2, r3
 8008e00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d209      	bcs.n	8008e26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	0019      	movs	r1, r3
 8008e1e:	0010      	movs	r0, r2
 8008e20:	f7fe fcf1 	bl	8007806 <vListInsert>
}
 8008e24:	e010      	b.n	8008e48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e26:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	0019      	movs	r1, r3
 8008e32:	0010      	movs	r0, r2
 8008e34:	f7fe fce7 	bl	8007806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e38:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d202      	bcs.n	8008e48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e42:	4b08      	ldr	r3, [pc, #32]	; (8008e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	601a      	str	r2, [r3, #0]
}
 8008e48:	46c0      	nop			; (mov r8, r8)
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	b004      	add	sp, #16
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20001358 	.word	0x20001358
 8008e54:	20000e80 	.word	0x20000e80
 8008e58:	20001340 	.word	0x20001340
 8008e5c:	20001310 	.word	0x20001310
 8008e60:	2000130c 	.word	0x2000130c
 8008e64:	20001374 	.word	0x20001374

08008e68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e68:	b590      	push	{r4, r7, lr}
 8008e6a:	b089      	sub	sp, #36	; 0x24
 8008e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e72:	f000 fac9 	bl	8009408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e76:	4b17      	ldr	r3, [pc, #92]	; (8008ed4 <xTimerCreateTimerTask+0x6c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d020      	beq.n	8008ec0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e86:	003a      	movs	r2, r7
 8008e88:	1d39      	adds	r1, r7, #4
 8008e8a:	2308      	movs	r3, #8
 8008e8c:	18fb      	adds	r3, r7, r3
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7fe fc56 	bl	8007740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e94:	683c      	ldr	r4, [r7, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	490f      	ldr	r1, [pc, #60]	; (8008ed8 <xTimerCreateTimerTask+0x70>)
 8008e9c:	480f      	ldr	r0, [pc, #60]	; (8008edc <xTimerCreateTimerTask+0x74>)
 8008e9e:	9202      	str	r2, [sp, #8]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	0022      	movs	r2, r4
 8008eaa:	f7ff f968 	bl	800817e <xTaskCreateStatic>
 8008eae:	0002      	movs	r2, r0
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <xTimerCreateTimerTask+0x78>)
 8008eb2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <xTimerCreateTimerTask+0x78>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <xTimerCreateTimerTask+0x62>
 8008ec6:	b672      	cpsid	i
 8008ec8:	e7fe      	b.n	8008ec8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8008eca:	68fb      	ldr	r3, [r7, #12]
}
 8008ecc:	0018      	movs	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b005      	add	sp, #20
 8008ed2:	bd90      	pop	{r4, r7, pc}
 8008ed4:	200013b0 	.word	0x200013b0
 8008ed8:	0800e48c 	.word	0x0800e48c
 8008edc:	08009001 	.word	0x08009001
 8008ee0:	200013b4 	.word	0x200013b4

08008ee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b08b      	sub	sp, #44	; 0x2c
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <xTimerGenericCommand+0x1c>
 8008efc:	b672      	cpsid	i
 8008efe:	e7fe      	b.n	8008efe <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f00:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <xTimerGenericCommand+0x90>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d030      	beq.n	8008f6a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f08:	2414      	movs	r4, #20
 8008f0a:	193b      	adds	r3, r7, r4
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f10:	193b      	adds	r3, r7, r4
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f16:	193b      	adds	r3, r7, r4
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	dc19      	bgt.n	8008f56 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f22:	f7ff fed5 	bl	8008cd0 <xTaskGetSchedulerState>
 8008f26:	0003      	movs	r3, r0
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d109      	bne.n	8008f40 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f2c:	4b11      	ldr	r3, [pc, #68]	; (8008f74 <xTimerGenericCommand+0x90>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f32:	1939      	adds	r1, r7, r4
 8008f34:	2300      	movs	r3, #0
 8008f36:	f7fe fdbd 	bl	8007ab4 <xQueueGenericSend>
 8008f3a:	0003      	movs	r3, r0
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3e:	e014      	b.n	8008f6a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f40:	4b0c      	ldr	r3, [pc, #48]	; (8008f74 <xTimerGenericCommand+0x90>)
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	2314      	movs	r3, #20
 8008f46:	18f9      	adds	r1, r7, r3
 8008f48:	2300      	movs	r3, #0
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f7fe fdb2 	bl	8007ab4 <xQueueGenericSend>
 8008f50:	0003      	movs	r3, r0
 8008f52:	627b      	str	r3, [r7, #36]	; 0x24
 8008f54:	e009      	b.n	8008f6a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f56:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <xTimerGenericCommand+0x90>)
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	2314      	movs	r3, #20
 8008f5e:	18f9      	adds	r1, r7, r3
 8008f60:	2300      	movs	r3, #0
 8008f62:	f7fe fe6b 	bl	8007c3c <xQueueGenericSendFromISR>
 8008f66:	0003      	movs	r3, r0
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	b00b      	add	sp, #44	; 0x2c
 8008f72:	bd90      	pop	{r4, r7, pc}
 8008f74:	200013b0 	.word	0x200013b0

08008f78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f82:	4b1e      	ldr	r3, [pc, #120]	; (8008ffc <prvProcessExpiredTimer+0x84>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7fe fc6e 	bl	8007872 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2228      	movs	r2, #40	; 0x28
 8008f9a:	5c9b      	ldrb	r3, [r3, r2]
 8008f9c:	001a      	movs	r2, r3
 8008f9e:	2304      	movs	r3, #4
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	d019      	beq.n	8008fd8 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	18d1      	adds	r1, r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f8c3 	bl	800913c <prvInsertTimerInActiveList>
 8008fb6:	1e03      	subs	r3, r0, #0
 8008fb8:	d017      	beq.n	8008fea <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	f7ff ff8d 	bl	8008ee4 <xTimerGenericCommand>
 8008fca:	0003      	movs	r3, r0
 8008fcc:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <prvProcessExpiredTimer+0x72>
 8008fd4:	b672      	cpsid	i
 8008fd6:	e7fe      	b.n	8008fd6 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2228      	movs	r2, #40	; 0x28
 8008fdc:	5c9b      	ldrb	r3, [r3, r2]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4393      	bics	r3, r2
 8008fe2:	b2d9      	uxtb	r1, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2228      	movs	r2, #40	; 0x28
 8008fe8:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	0010      	movs	r0, r2
 8008ff2:	4798      	blx	r3
}
 8008ff4:	46c0      	nop			; (mov r8, r8)
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b004      	add	sp, #16
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	200013a8 	.word	0x200013a8

08009000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009008:	2308      	movs	r3, #8
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	0018      	movs	r0, r3
 800900e:	f000 f853 	bl	80090b8 <prvGetNextExpireTime>
 8009012:	0003      	movs	r3, r0
 8009014:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	0011      	movs	r1, r2
 800901c:	0018      	movs	r0, r3
 800901e:	f000 f803 	bl	8009028 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009022:	f000 f8cd 	bl	80091c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009026:	e7ef      	b.n	8009008 <prvTimerTask+0x8>

08009028 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009032:	f7ff fac1 	bl	80085b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009036:	2308      	movs	r3, #8
 8009038:	18fb      	adds	r3, r7, r3
 800903a:	0018      	movs	r0, r3
 800903c:	f000 f85e 	bl	80090fc <prvSampleTimeNow>
 8009040:	0003      	movs	r3, r0
 8009042:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d12b      	bne.n	80090a2 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10c      	bne.n	800906a <prvProcessTimerOrBlockTask+0x42>
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	429a      	cmp	r2, r3
 8009056:	d808      	bhi.n	800906a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8009058:	f7ff faba 	bl	80085d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	0011      	movs	r1, r2
 8009062:	0018      	movs	r0, r3
 8009064:	f7ff ff88 	bl	8008f78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009068:	e01d      	b.n	80090a6 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d008      	beq.n	8009082 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009070:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <prvProcessTimerOrBlockTask+0x88>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <prvProcessTimerOrBlockTask+0x56>
 800907a:	2301      	movs	r3, #1
 800907c:	e000      	b.n	8009080 <prvProcessTimerOrBlockTask+0x58>
 800907e:	2300      	movs	r3, #0
 8009080:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009082:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <prvProcessTimerOrBlockTask+0x8c>)
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	0019      	movs	r1, r3
 8009090:	f7ff f842 	bl	8008118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009094:	f7ff fa9c 	bl	80085d0 <xTaskResumeAll>
 8009098:	1e03      	subs	r3, r0, #0
 800909a:	d104      	bne.n	80090a6 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800909c:	f000 fa80 	bl	80095a0 <vPortYield>
}
 80090a0:	e001      	b.n	80090a6 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80090a2:	f7ff fa95 	bl	80085d0 <xTaskResumeAll>
}
 80090a6:	46c0      	nop			; (mov r8, r8)
 80090a8:	46bd      	mov	sp, r7
 80090aa:	b004      	add	sp, #16
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	46c0      	nop			; (mov r8, r8)
 80090b0:	200013ac 	.word	0x200013ac
 80090b4:	200013b0 	.word	0x200013b0

080090b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090c0:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <prvGetNextExpireTime+0x40>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <prvGetNextExpireTime+0x16>
 80090ca:	2201      	movs	r2, #1
 80090cc:	e000      	b.n	80090d0 <prvGetNextExpireTime+0x18>
 80090ce:	2200      	movs	r2, #0
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d105      	bne.n	80090e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090dc:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <prvGetNextExpireTime+0x40>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e001      	b.n	80090ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090ec:	68fb      	ldr	r3, [r7, #12]
}
 80090ee:	0018      	movs	r0, r3
 80090f0:	46bd      	mov	sp, r7
 80090f2:	b004      	add	sp, #16
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	200013a8 	.word	0x200013a8

080090fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009104:	f7ff faf0 	bl	80086e8 <xTaskGetTickCount>
 8009108:	0003      	movs	r3, r0
 800910a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800910c:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <prvSampleTimeNow+0x3c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	429a      	cmp	r2, r3
 8009114:	d205      	bcs.n	8009122 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8009116:	f000 f919 	bl	800934c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	e002      	b.n	8009128 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009128:	4b03      	ldr	r3, [pc, #12]	; (8009138 <prvSampleTimeNow+0x3c>)
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800912e:	68fb      	ldr	r3, [r7, #12]
}
 8009130:	0018      	movs	r0, r3
 8009132:	46bd      	mov	sp, r7
 8009134:	b004      	add	sp, #16
 8009136:	bd80      	pop	{r7, pc}
 8009138:	200013b8 	.word	0x200013b8

0800913c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800914a:	2300      	movs	r3, #0
 800914c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	429a      	cmp	r2, r3
 8009160:	d812      	bhi.n	8009188 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	1ad2      	subs	r2, r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	429a      	cmp	r2, r3
 800916e:	d302      	bcc.n	8009176 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	e01b      	b.n	80091ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <prvInsertTimerInActiveList+0x7c>)
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3304      	adds	r3, #4
 800917e:	0019      	movs	r1, r3
 8009180:	0010      	movs	r0, r2
 8009182:	f7fe fb40 	bl	8007806 <vListInsert>
 8009186:	e012      	b.n	80091ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	429a      	cmp	r2, r3
 800918e:	d206      	bcs.n	800919e <prvInsertTimerInActiveList+0x62>
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	429a      	cmp	r2, r3
 8009196:	d302      	bcc.n	800919e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009198:	2301      	movs	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e007      	b.n	80091ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800919e:	4b07      	ldr	r3, [pc, #28]	; (80091bc <prvInsertTimerInActiveList+0x80>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3304      	adds	r3, #4
 80091a6:	0019      	movs	r1, r3
 80091a8:	0010      	movs	r0, r2
 80091aa:	f7fe fb2c 	bl	8007806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091ae:	697b      	ldr	r3, [r7, #20]
}
 80091b0:	0018      	movs	r0, r3
 80091b2:	46bd      	mov	sp, r7
 80091b4:	b006      	add	sp, #24
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	200013ac 	.word	0x200013ac
 80091bc:	200013a8 	.word	0x200013a8

080091c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b08d      	sub	sp, #52	; 0x34
 80091c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091c6:	e0ac      	b.n	8009322 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091c8:	2208      	movs	r2, #8
 80091ca:	18bb      	adds	r3, r7, r2
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da0f      	bge.n	80091f2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091d2:	18bb      	adds	r3, r7, r2
 80091d4:	3304      	adds	r3, #4
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <prvProcessReceivedCommands+0x22>
 80091de:	b672      	cpsid	i
 80091e0:	e7fe      	b.n	80091e0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	6858      	ldr	r0, [r3, #4]
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	0019      	movs	r1, r3
 80091f0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091f2:	2208      	movs	r2, #8
 80091f4:	18bb      	adds	r3, r7, r2
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da00      	bge.n	80091fe <prvProcessReceivedCommands+0x3e>
 80091fc:	e091      	b.n	8009322 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091fe:	18bb      	adds	r3, r7, r2
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	3304      	adds	r3, #4
 8009210:	0018      	movs	r0, r3
 8009212:	f7fe fb2e 	bl	8007872 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009216:	1d3b      	adds	r3, r7, #4
 8009218:	0018      	movs	r0, r3
 800921a:	f7ff ff6f 	bl	80090fc <prvSampleTimeNow>
 800921e:	0003      	movs	r3, r0
 8009220:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8009222:	2308      	movs	r3, #8
 8009224:	18fb      	adds	r3, r7, r3
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b09      	cmp	r3, #9
 800922a:	d900      	bls.n	800922e <prvProcessReceivedCommands+0x6e>
 800922c:	e078      	b.n	8009320 <prvProcessReceivedCommands+0x160>
 800922e:	009a      	lsls	r2, r3, #2
 8009230:	4b44      	ldr	r3, [pc, #272]	; (8009344 <prvProcessReceivedCommands+0x184>)
 8009232:	18d3      	adds	r3, r2, r3
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	2228      	movs	r2, #40	; 0x28
 800923c:	5c9b      	ldrb	r3, [r3, r2]
 800923e:	2201      	movs	r2, #1
 8009240:	4313      	orrs	r3, r2
 8009242:	b2d9      	uxtb	r1, r3
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	2228      	movs	r2, #40	; 0x28
 8009248:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800924a:	2408      	movs	r4, #8
 800924c:	193b      	adds	r3, r7, r4
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	18d1      	adds	r1, r2, r3
 8009256:	193b      	adds	r3, r7, r4
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	6a38      	ldr	r0, [r7, #32]
 800925e:	f7ff ff6d 	bl	800913c <prvInsertTimerInActiveList>
 8009262:	1e03      	subs	r3, r0, #0
 8009264:	d05d      	beq.n	8009322 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	6a3a      	ldr	r2, [r7, #32]
 800926c:	0010      	movs	r0, r2
 800926e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	2228      	movs	r2, #40	; 0x28
 8009274:	5c9b      	ldrb	r3, [r3, r2]
 8009276:	001a      	movs	r2, r3
 8009278:	2304      	movs	r3, #4
 800927a:	4013      	ands	r3, r2
 800927c:	d051      	beq.n	8009322 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800927e:	193b      	adds	r3, r7, r4
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	18d2      	adds	r2, r2, r3
 8009288:	6a38      	ldr	r0, [r7, #32]
 800928a:	2300      	movs	r3, #0
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	2100      	movs	r1, #0
 8009292:	f7ff fe27 	bl	8008ee4 <xTimerGenericCommand>
 8009296:	0003      	movs	r3, r0
 8009298:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d140      	bne.n	8009322 <prvProcessReceivedCommands+0x162>
 80092a0:	b672      	cpsid	i
 80092a2:	e7fe      	b.n	80092a2 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	2228      	movs	r2, #40	; 0x28
 80092a8:	5c9b      	ldrb	r3, [r3, r2]
 80092aa:	2201      	movs	r2, #1
 80092ac:	4393      	bics	r3, r2
 80092ae:	b2d9      	uxtb	r1, r3
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	2228      	movs	r2, #40	; 0x28
 80092b4:	5499      	strb	r1, [r3, r2]
					break;
 80092b6:	e034      	b.n	8009322 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	2228      	movs	r2, #40	; 0x28
 80092bc:	5c9b      	ldrb	r3, [r3, r2]
 80092be:	2201      	movs	r2, #1
 80092c0:	4313      	orrs	r3, r2
 80092c2:	b2d9      	uxtb	r1, r3
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	2228      	movs	r2, #40	; 0x28
 80092c8:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092ca:	2308      	movs	r3, #8
 80092cc:	18fb      	adds	r3, r7, r3
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <prvProcessReceivedCommands+0x120>
 80092dc:	b672      	cpsid	i
 80092de:	e7fe      	b.n	80092de <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	18d1      	adds	r1, r2, r3
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	6a38      	ldr	r0, [r7, #32]
 80092ee:	f7ff ff25 	bl	800913c <prvInsertTimerInActiveList>
					break;
 80092f2:	e016      	b.n	8009322 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	2228      	movs	r2, #40	; 0x28
 80092f8:	5c9b      	ldrb	r3, [r3, r2]
 80092fa:	001a      	movs	r2, r3
 80092fc:	2302      	movs	r3, #2
 80092fe:	4013      	ands	r3, r2
 8009300:	d104      	bne.n	800930c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	0018      	movs	r0, r3
 8009306:	f000 fa9f 	bl	8009848 <vPortFree>
 800930a:	e00a      	b.n	8009322 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	2228      	movs	r2, #40	; 0x28
 8009310:	5c9b      	ldrb	r3, [r3, r2]
 8009312:	2201      	movs	r2, #1
 8009314:	4393      	bics	r3, r2
 8009316:	b2d9      	uxtb	r1, r3
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	2228      	movs	r2, #40	; 0x28
 800931c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800931e:	e000      	b.n	8009322 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8009320:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <prvProcessReceivedCommands+0x188>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2208      	movs	r2, #8
 8009328:	18b9      	adds	r1, r7, r2
 800932a:	2200      	movs	r2, #0
 800932c:	0018      	movs	r0, r3
 800932e:	f7fe fcf9 	bl	8007d24 <xQueueReceive>
 8009332:	1e03      	subs	r3, r0, #0
 8009334:	d000      	beq.n	8009338 <prvProcessReceivedCommands+0x178>
 8009336:	e747      	b.n	80091c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009338:	46c0      	nop			; (mov r8, r8)
 800933a:	46c0      	nop			; (mov r8, r8)
 800933c:	46bd      	mov	sp, r7
 800933e:	b00b      	add	sp, #44	; 0x2c
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	46c0      	nop			; (mov r8, r8)
 8009344:	0800e5e8 	.word	0x0800e5e8
 8009348:	200013b0 	.word	0x200013b0

0800934c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009352:	e041      	b.n	80093d8 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009354:	4b2a      	ldr	r3, [pc, #168]	; (8009400 <prvSwitchTimerLists+0xb4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935e:	4b28      	ldr	r3, [pc, #160]	; (8009400 <prvSwitchTimerLists+0xb4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3304      	adds	r3, #4
 800936c:	0018      	movs	r0, r3
 800936e:	f7fe fa80 	bl	8007872 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	0010      	movs	r0, r2
 800937a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2228      	movs	r2, #40	; 0x28
 8009380:	5c9b      	ldrb	r3, [r3, r2]
 8009382:	001a      	movs	r2, r3
 8009384:	2304      	movs	r3, #4
 8009386:	4013      	ands	r3, r2
 8009388:	d026      	beq.n	80093d8 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	429a      	cmp	r2, r3
 800939a:	d90e      	bls.n	80093ba <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093a8:	4b15      	ldr	r3, [pc, #84]	; (8009400 <prvSwitchTimerLists+0xb4>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3304      	adds	r3, #4
 80093b0:	0019      	movs	r1, r3
 80093b2:	0010      	movs	r0, r2
 80093b4:	f7fe fa27 	bl	8007806 <vListInsert>
 80093b8:	e00e      	b.n	80093d8 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	2300      	movs	r3, #0
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	2100      	movs	r1, #0
 80093c6:	f7ff fd8d 	bl	8008ee4 <xTimerGenericCommand>
 80093ca:	0003      	movs	r3, r0
 80093cc:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <prvSwitchTimerLists+0x8c>
 80093d4:	b672      	cpsid	i
 80093d6:	e7fe      	b.n	80093d6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d8:	4b09      	ldr	r3, [pc, #36]	; (8009400 <prvSwitchTimerLists+0xb4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1b8      	bne.n	8009354 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <prvSwitchTimerLists+0xb4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093e8:	4b06      	ldr	r3, [pc, #24]	; (8009404 <prvSwitchTimerLists+0xb8>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <prvSwitchTimerLists+0xb4>)
 80093ee:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <prvSwitchTimerLists+0xb8>)
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	601a      	str	r2, [r3, #0]
}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	46bd      	mov	sp, r7
 80093fa:	b006      	add	sp, #24
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	200013a8 	.word	0x200013a8
 8009404:	200013ac 	.word	0x200013ac

08009408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800940e:	f000 f8d7 	bl	80095c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009412:	4b16      	ldr	r3, [pc, #88]	; (800946c <prvCheckForValidListAndQueue+0x64>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d123      	bne.n	8009462 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800941a:	4b15      	ldr	r3, [pc, #84]	; (8009470 <prvCheckForValidListAndQueue+0x68>)
 800941c:	0018      	movs	r0, r3
 800941e:	f7fe f9a7 	bl	8007770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009422:	4b14      	ldr	r3, [pc, #80]	; (8009474 <prvCheckForValidListAndQueue+0x6c>)
 8009424:	0018      	movs	r0, r3
 8009426:	f7fe f9a3 	bl	8007770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <prvCheckForValidListAndQueue+0x70>)
 800942c:	4a10      	ldr	r2, [pc, #64]	; (8009470 <prvCheckForValidListAndQueue+0x68>)
 800942e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009430:	4b12      	ldr	r3, [pc, #72]	; (800947c <prvCheckForValidListAndQueue+0x74>)
 8009432:	4a10      	ldr	r2, [pc, #64]	; (8009474 <prvCheckForValidListAndQueue+0x6c>)
 8009434:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009436:	4b12      	ldr	r3, [pc, #72]	; (8009480 <prvCheckForValidListAndQueue+0x78>)
 8009438:	4a12      	ldr	r2, [pc, #72]	; (8009484 <prvCheckForValidListAndQueue+0x7c>)
 800943a:	2100      	movs	r1, #0
 800943c:	9100      	str	r1, [sp, #0]
 800943e:	2110      	movs	r1, #16
 8009440:	200a      	movs	r0, #10
 8009442:	f7fe fa92 	bl	800796a <xQueueGenericCreateStatic>
 8009446:	0002      	movs	r2, r0
 8009448:	4b08      	ldr	r3, [pc, #32]	; (800946c <prvCheckForValidListAndQueue+0x64>)
 800944a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800944c:	4b07      	ldr	r3, [pc, #28]	; (800946c <prvCheckForValidListAndQueue+0x64>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <prvCheckForValidListAndQueue+0x64>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a0b      	ldr	r2, [pc, #44]	; (8009488 <prvCheckForValidListAndQueue+0x80>)
 800945a:	0011      	movs	r1, r2
 800945c:	0018      	movs	r0, r3
 800945e:	f7fe fe33 	bl	80080c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009462:	f000 f8bf 	bl	80095e4 <vPortExitCritical>
}
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	200013b0 	.word	0x200013b0
 8009470:	20001380 	.word	0x20001380
 8009474:	20001394 	.word	0x20001394
 8009478:	200013a8 	.word	0x200013a8
 800947c:	200013ac 	.word	0x200013ac
 8009480:	2000145c 	.word	0x2000145c
 8009484:	200013bc 	.word	0x200013bc
 8009488:	0800e494 	.word	0x0800e494

0800948c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3b04      	subs	r3, #4
 800949c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2280      	movs	r2, #128	; 0x80
 80094a2:	0452      	lsls	r2, r2, #17
 80094a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3b04      	subs	r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3b04      	subs	r3, #4
 80094b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094b8:	4a08      	ldr	r2, [pc, #32]	; (80094dc <pxPortInitialiseStack+0x50>)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3b14      	subs	r3, #20
 80094c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3b20      	subs	r3, #32
 80094ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094d0:	68fb      	ldr	r3, [r7, #12]
}
 80094d2:	0018      	movs	r0, r3
 80094d4:	46bd      	mov	sp, r7
 80094d6:	b004      	add	sp, #16
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	080094e1 	.word	0x080094e1

080094e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094ea:	4b08      	ldr	r3, [pc, #32]	; (800950c <prvTaskExitError+0x2c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	d001      	beq.n	80094f6 <prvTaskExitError+0x16>
 80094f2:	b672      	cpsid	i
 80094f4:	e7fe      	b.n	80094f4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80094f6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80094f8:	46c0      	nop			; (mov r8, r8)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0fc      	beq.n	80094fa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009500:	46c0      	nop			; (mov r8, r8)
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	46bd      	mov	sp, r7
 8009506:	b002      	add	sp, #8
 8009508:	bd80      	pop	{r7, pc}
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	2000000c 	.word	0x2000000c

08009510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009514:	46c0      	nop			; (mov r8, r8)
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	0000      	movs	r0, r0
 800951c:	0000      	movs	r0, r0
	...

08009520 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009520:	4a0b      	ldr	r2, [pc, #44]	; (8009550 <pxCurrentTCBConst2>)
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	3020      	adds	r0, #32
 8009528:	f380 8809 	msr	PSP, r0
 800952c:	2002      	movs	r0, #2
 800952e:	f380 8814 	msr	CONTROL, r0
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009538:	46ae      	mov	lr, r5
 800953a:	bc08      	pop	{r3}
 800953c:	bc04      	pop	{r2}
 800953e:	b662      	cpsie	i
 8009540:	4718      	bx	r3
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	46c0      	nop			; (mov r8, r8)
 8009546:	46c0      	nop			; (mov r8, r8)
 8009548:	46c0      	nop			; (mov r8, r8)
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	46c0      	nop			; (mov r8, r8)
 800954e:	46c0      	nop			; (mov r8, r8)

08009550 <pxCurrentTCBConst2>:
 8009550:	20000e80 	.word	0x20000e80
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009554:	46c0      	nop			; (mov r8, r8)
 8009556:	46c0      	nop			; (mov r8, r8)

08009558 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800955c:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <xPortStartScheduler+0x40>)
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	4b0d      	ldr	r3, [pc, #52]	; (8009598 <xPortStartScheduler+0x40>)
 8009562:	21ff      	movs	r1, #255	; 0xff
 8009564:	0409      	lsls	r1, r1, #16
 8009566:	430a      	orrs	r2, r1
 8009568:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800956a:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <xPortStartScheduler+0x40>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <xPortStartScheduler+0x40>)
 8009570:	21ff      	movs	r1, #255	; 0xff
 8009572:	0609      	lsls	r1, r1, #24
 8009574:	430a      	orrs	r2, r1
 8009576:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009578:	f000 f898 	bl	80096ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800957c:	4b07      	ldr	r3, [pc, #28]	; (800959c <xPortStartScheduler+0x44>)
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009582:	f7ff ffcd 	bl	8009520 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009586:	f7ff f96d 	bl	8008864 <vTaskSwitchContext>
	prvTaskExitError();
 800958a:	f7ff ffa9 	bl	80094e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800958e:	2300      	movs	r3, #0
}
 8009590:	0018      	movs	r0, r3
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	46c0      	nop			; (mov r8, r8)
 8009598:	e000ed20 	.word	0xe000ed20
 800959c:	2000000c 	.word	0x2000000c

080095a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095a4:	4b05      	ldr	r3, [pc, #20]	; (80095bc <vPortYield+0x1c>)
 80095a6:	2280      	movs	r2, #128	; 0x80
 80095a8:	0552      	lsls	r2, r2, #21
 80095aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80095ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80095b0:	f3bf 8f6f 	isb	sy
}
 80095b4:	46c0      	nop			; (mov r8, r8)
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80095c4:	b672      	cpsid	i
	uxCriticalNesting++;
 80095c6:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <vPortEnterCritical+0x20>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <vPortEnterCritical+0x20>)
 80095ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80095d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80095d4:	f3bf 8f6f 	isb	sy
}
 80095d8:	46c0      	nop			; (mov r8, r8)
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	46c0      	nop			; (mov r8, r8)
 80095e0:	2000000c 	.word	0x2000000c

080095e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095e8:	4b09      	ldr	r3, [pc, #36]	; (8009610 <vPortExitCritical+0x2c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <vPortExitCritical+0x10>
 80095f0:	b672      	cpsid	i
 80095f2:	e7fe      	b.n	80095f2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80095f4:	4b06      	ldr	r3, [pc, #24]	; (8009610 <vPortExitCritical+0x2c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	1e5a      	subs	r2, r3, #1
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <vPortExitCritical+0x2c>)
 80095fc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80095fe:	4b04      	ldr	r3, [pc, #16]	; (8009610 <vPortExitCritical+0x2c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d100      	bne.n	8009608 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8009606:	b662      	cpsie	i
	}
}
 8009608:	46c0      	nop			; (mov r8, r8)
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	2000000c 	.word	0x2000000c

08009614 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009614:	f3ef 8010 	mrs	r0, PRIMASK
 8009618:	b672      	cpsid	i
 800961a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800961c:	46c0      	nop			; (mov r8, r8)
 800961e:	0018      	movs	r0, r3

08009620 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009620:	f380 8810 	msr	PRIMASK, r0
 8009624:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8009626:	46c0      	nop			; (mov r8, r8)
	...

08009630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009630:	f3ef 8009 	mrs	r0, PSP
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <pxCurrentTCBConst>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	3820      	subs	r0, #32
 800963a:	6010      	str	r0, [r2, #0]
 800963c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800963e:	4644      	mov	r4, r8
 8009640:	464d      	mov	r5, r9
 8009642:	4656      	mov	r6, sl
 8009644:	465f      	mov	r7, fp
 8009646:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009648:	b508      	push	{r3, lr}
 800964a:	b672      	cpsid	i
 800964c:	f7ff f90a 	bl	8008864 <vTaskSwitchContext>
 8009650:	b662      	cpsie	i
 8009652:	bc0c      	pop	{r2, r3}
 8009654:	6811      	ldr	r1, [r2, #0]
 8009656:	6808      	ldr	r0, [r1, #0]
 8009658:	3010      	adds	r0, #16
 800965a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800965c:	46a0      	mov	r8, r4
 800965e:	46a9      	mov	r9, r5
 8009660:	46b2      	mov	sl, r6
 8009662:	46bb      	mov	fp, r7
 8009664:	f380 8809 	msr	PSP, r0
 8009668:	3820      	subs	r0, #32
 800966a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800966c:	4718      	bx	r3
 800966e:	46c0      	nop			; (mov r8, r8)

08009670 <pxCurrentTCBConst>:
 8009670:	20000e80 	.word	0x20000e80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009674:	46c0      	nop			; (mov r8, r8)
 8009676:	46c0      	nop			; (mov r8, r8)

08009678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800967e:	f7ff ffc9 	bl	8009614 <ulSetInterruptMaskFromISR>
 8009682:	0003      	movs	r3, r0
 8009684:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009686:	f7ff f83d 	bl	8008704 <xTaskIncrementTick>
 800968a:	1e03      	subs	r3, r0, #0
 800968c:	d003      	beq.n	8009696 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <xPortSysTickHandler+0x30>)
 8009690:	2280      	movs	r2, #128	; 0x80
 8009692:	0552      	lsls	r2, r2, #21
 8009694:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	0018      	movs	r0, r3
 800969a:	f7ff ffc1 	bl	8009620 <vClearInterruptMaskFromISR>
}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b002      	add	sp, #8
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	46c0      	nop			; (mov r8, r8)
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <vPortSetupTimerInterrupt+0x34>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096b6:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <vPortSetupTimerInterrupt+0x38>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <vPortSetupTimerInterrupt+0x3c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	22fa      	movs	r2, #250	; 0xfa
 80096c2:	0091      	lsls	r1, r2, #2
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7f6 fd3b 	bl	8000140 <__udivsi3>
 80096ca:	0003      	movs	r3, r0
 80096cc:	001a      	movs	r2, r3
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <vPortSetupTimerInterrupt+0x40>)
 80096d0:	3a01      	subs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <vPortSetupTimerInterrupt+0x34>)
 80096d6:	2207      	movs	r2, #7
 80096d8:	601a      	str	r2, [r3, #0]
}
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	e000e010 	.word	0xe000e010
 80096e4:	e000e018 	.word	0xe000e018
 80096e8:	20000000 	.word	0x20000000
 80096ec:	e000e014 	.word	0xe000e014

080096f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80096fc:	f7fe ff5c 	bl	80085b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009700:	4b4b      	ldr	r3, [pc, #300]	; (8009830 <pvPortMalloc+0x140>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009708:	f000 f8ec 	bl	80098e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800970c:	4b49      	ldr	r3, [pc, #292]	; (8009834 <pvPortMalloc+0x144>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	4013      	ands	r3, r2
 8009714:	d000      	beq.n	8009718 <pvPortMalloc+0x28>
 8009716:	e07e      	b.n	8009816 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d012      	beq.n	8009744 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800971e:	2208      	movs	r2, #8
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	189b      	adds	r3, r3, r2
 8009724:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2207      	movs	r2, #7
 800972a:	4013      	ands	r3, r2
 800972c:	d00a      	beq.n	8009744 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2207      	movs	r2, #7
 8009732:	4393      	bics	r3, r2
 8009734:	3308      	adds	r3, #8
 8009736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2207      	movs	r2, #7
 800973c:	4013      	ands	r3, r2
 800973e:	d001      	beq.n	8009744 <pvPortMalloc+0x54>
 8009740:	b672      	cpsid	i
 8009742:	e7fe      	b.n	8009742 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d065      	beq.n	8009816 <pvPortMalloc+0x126>
 800974a:	4b3b      	ldr	r3, [pc, #236]	; (8009838 <pvPortMalloc+0x148>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d860      	bhi.n	8009816 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009754:	4b39      	ldr	r3, [pc, #228]	; (800983c <pvPortMalloc+0x14c>)
 8009756:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009758:	4b38      	ldr	r3, [pc, #224]	; (800983c <pvPortMalloc+0x14c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800975e:	e004      	b.n	800976a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d903      	bls.n	800977c <pvPortMalloc+0x8c>
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f1      	bne.n	8009760 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800977c:	4b2c      	ldr	r3, [pc, #176]	; (8009830 <pvPortMalloc+0x140>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	429a      	cmp	r2, r3
 8009784:	d047      	beq.n	8009816 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2208      	movs	r2, #8
 800978c:	189b      	adds	r3, r3, r2
 800978e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	2308      	movs	r3, #8
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d916      	bls.n	80097d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	18d3      	adds	r3, r2, r3
 80097ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2207      	movs	r2, #7
 80097b4:	4013      	ands	r3, r2
 80097b6:	d001      	beq.n	80097bc <pvPortMalloc+0xcc>
 80097b8:	b672      	cpsid	i
 80097ba:	e7fe      	b.n	80097ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	1ad2      	subs	r2, r2, r3
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f000 f8e7 	bl	80099a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097d6:	4b18      	ldr	r3, [pc, #96]	; (8009838 <pvPortMalloc+0x148>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	4b15      	ldr	r3, [pc, #84]	; (8009838 <pvPortMalloc+0x148>)
 80097e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097e4:	4b14      	ldr	r3, [pc, #80]	; (8009838 <pvPortMalloc+0x148>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	4b15      	ldr	r3, [pc, #84]	; (8009840 <pvPortMalloc+0x150>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d203      	bcs.n	80097f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097f0:	4b11      	ldr	r3, [pc, #68]	; (8009838 <pvPortMalloc+0x148>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	4b12      	ldr	r3, [pc, #72]	; (8009840 <pvPortMalloc+0x150>)
 80097f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <pvPortMalloc+0x144>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	431a      	orrs	r2, r3
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800980c:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <pvPortMalloc+0x154>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <pvPortMalloc+0x154>)
 8009814:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009816:	f7fe fedb 	bl	80085d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2207      	movs	r2, #7
 800981e:	4013      	ands	r3, r2
 8009820:	d001      	beq.n	8009826 <pvPortMalloc+0x136>
 8009822:	b672      	cpsid	i
 8009824:	e7fe      	b.n	8009824 <pvPortMalloc+0x134>
	return pvReturn;
 8009826:	68fb      	ldr	r3, [r7, #12]
}
 8009828:	0018      	movs	r0, r3
 800982a:	46bd      	mov	sp, r7
 800982c:	b006      	add	sp, #24
 800982e:	bd80      	pop	{r7, pc}
 8009830:	200020b4 	.word	0x200020b4
 8009834:	200020c8 	.word	0x200020c8
 8009838:	200020b8 	.word	0x200020b8
 800983c:	200020ac 	.word	0x200020ac
 8009840:	200020bc 	.word	0x200020bc
 8009844:	200020c0 	.word	0x200020c0

08009848 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d03a      	beq.n	80098d0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800985a:	2308      	movs	r3, #8
 800985c:	425b      	negs	r3, r3
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	18d3      	adds	r3, r2, r3
 8009862:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	4b1a      	ldr	r3, [pc, #104]	; (80098d8 <vPortFree+0x90>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4013      	ands	r3, r2
 8009872:	d101      	bne.n	8009878 <vPortFree+0x30>
 8009874:	b672      	cpsid	i
 8009876:	e7fe      	b.n	8009876 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <vPortFree+0x3c>
 8009880:	b672      	cpsid	i
 8009882:	e7fe      	b.n	8009882 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <vPortFree+0x90>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4013      	ands	r3, r2
 800988e:	d01f      	beq.n	80098d0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d11b      	bne.n	80098d0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <vPortFree+0x90>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	43db      	mvns	r3, r3
 80098a2:	401a      	ands	r2, r3
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098a8:	f7fe fe86 	bl	80085b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <vPortFree+0x94>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	18d2      	adds	r2, r2, r3
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <vPortFree+0x94>)
 80098b8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	0018      	movs	r0, r3
 80098be:	f000 f871 	bl	80099a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098c2:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <vPortFree+0x98>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <vPortFree+0x98>)
 80098ca:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80098cc:	f7fe fe80 	bl	80085d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098d0:	46c0      	nop			; (mov r8, r8)
 80098d2:	46bd      	mov	sp, r7
 80098d4:	b004      	add	sp, #16
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	200020c8 	.word	0x200020c8
 80098dc:	200020b8 	.word	0x200020b8
 80098e0:	200020c4 	.word	0x200020c4

080098e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098ea:	23c0      	movs	r3, #192	; 0xc0
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098f0:	4b26      	ldr	r3, [pc, #152]	; (800998c <prvHeapInit+0xa8>)
 80098f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2207      	movs	r2, #7
 80098f8:	4013      	ands	r3, r2
 80098fa:	d00c      	beq.n	8009916 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3307      	adds	r3, #7
 8009900:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2207      	movs	r2, #7
 8009906:	4393      	bics	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	4b1e      	ldr	r3, [pc, #120]	; (800998c <prvHeapInit+0xa8>)
 8009912:	18d3      	adds	r3, r2, r3
 8009914:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800991a:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <prvHeapInit+0xac>)
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009920:	4b1b      	ldr	r3, [pc, #108]	; (8009990 <prvHeapInit+0xac>)
 8009922:	2200      	movs	r2, #0
 8009924:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	18d3      	adds	r3, r2, r3
 800992c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800992e:	2208      	movs	r2, #8
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2207      	movs	r2, #7
 800993a:	4393      	bics	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4b14      	ldr	r3, [pc, #80]	; (8009994 <prvHeapInit+0xb0>)
 8009942:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009944:	4b13      	ldr	r3, [pc, #76]	; (8009994 <prvHeapInit+0xb0>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2200      	movs	r2, #0
 800994a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800994c:	4b11      	ldr	r3, [pc, #68]	; (8009994 <prvHeapInit+0xb0>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	1ad2      	subs	r2, r2, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009962:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <prvHeapInit+0xb0>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <prvHeapInit+0xb4>)
 8009970:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	4b09      	ldr	r3, [pc, #36]	; (800999c <prvHeapInit+0xb8>)
 8009978:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <prvHeapInit+0xbc>)
 800997c:	2280      	movs	r2, #128	; 0x80
 800997e:	0612      	lsls	r2, r2, #24
 8009980:	601a      	str	r2, [r3, #0]
}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	46bd      	mov	sp, r7
 8009986:	b004      	add	sp, #16
 8009988:	bd80      	pop	{r7, pc}
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	200014ac 	.word	0x200014ac
 8009990:	200020ac 	.word	0x200020ac
 8009994:	200020b4 	.word	0x200020b4
 8009998:	200020bc 	.word	0x200020bc
 800999c:	200020b8 	.word	0x200020b8
 80099a0:	200020c8 	.word	0x200020c8

080099a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099ac:	4b27      	ldr	r3, [pc, #156]	; (8009a4c <prvInsertBlockIntoFreeList+0xa8>)
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e002      	b.n	80099b8 <prvInsertBlockIntoFreeList+0x14>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d8f7      	bhi.n	80099b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	18d3      	adds	r3, r2, r3
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d108      	bne.n	80099e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	18d2      	adds	r2, r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	18d2      	adds	r2, r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d118      	bne.n	8009a2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4b14      	ldr	r3, [pc, #80]	; (8009a50 <prvInsertBlockIntoFreeList+0xac>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d00d      	beq.n	8009a22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	18d2      	adds	r2, r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	e008      	b.n	8009a34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a22:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <prvInsertBlockIntoFreeList+0xac>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e003      	b.n	8009a34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d002      	beq.n	8009a42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a42:	46c0      	nop			; (mov r8, r8)
 8009a44:	46bd      	mov	sp, r7
 8009a46:	b004      	add	sp, #16
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	46c0      	nop			; (mov r8, r8)
 8009a4c:	200020ac 	.word	0x200020ac
 8009a50:	200020b4 	.word	0x200020b4

08009a54 <__cvt>:
 8009a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a56:	001e      	movs	r6, r3
 8009a58:	2300      	movs	r3, #0
 8009a5a:	0014      	movs	r4, r2
 8009a5c:	b08b      	sub	sp, #44	; 0x2c
 8009a5e:	429e      	cmp	r6, r3
 8009a60:	da04      	bge.n	8009a6c <__cvt+0x18>
 8009a62:	2180      	movs	r1, #128	; 0x80
 8009a64:	0609      	lsls	r1, r1, #24
 8009a66:	1873      	adds	r3, r6, r1
 8009a68:	001e      	movs	r6, r3
 8009a6a:	232d      	movs	r3, #45	; 0x2d
 8009a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a6e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a70:	7013      	strb	r3, [r2, #0]
 8009a72:	2320      	movs	r3, #32
 8009a74:	2203      	movs	r2, #3
 8009a76:	439f      	bics	r7, r3
 8009a78:	2f46      	cmp	r7, #70	; 0x46
 8009a7a:	d007      	beq.n	8009a8c <__cvt+0x38>
 8009a7c:	003b      	movs	r3, r7
 8009a7e:	3b45      	subs	r3, #69	; 0x45
 8009a80:	4259      	negs	r1, r3
 8009a82:	414b      	adcs	r3, r1
 8009a84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009a86:	3a01      	subs	r2, #1
 8009a88:	18cb      	adds	r3, r1, r3
 8009a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8009a8c:	ab09      	add	r3, sp, #36	; 0x24
 8009a8e:	9304      	str	r3, [sp, #16]
 8009a90:	ab08      	add	r3, sp, #32
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a96:	9200      	str	r2, [sp, #0]
 8009a98:	9302      	str	r3, [sp, #8]
 8009a9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a9c:	0022      	movs	r2, r4
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	0033      	movs	r3, r6
 8009aa2:	f001 f91b 	bl	800acdc <_dtoa_r>
 8009aa6:	0005      	movs	r5, r0
 8009aa8:	2f47      	cmp	r7, #71	; 0x47
 8009aaa:	d102      	bne.n	8009ab2 <__cvt+0x5e>
 8009aac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aae:	07db      	lsls	r3, r3, #31
 8009ab0:	d528      	bpl.n	8009b04 <__cvt+0xb0>
 8009ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ab4:	18eb      	adds	r3, r5, r3
 8009ab6:	9307      	str	r3, [sp, #28]
 8009ab8:	2f46      	cmp	r7, #70	; 0x46
 8009aba:	d114      	bne.n	8009ae6 <__cvt+0x92>
 8009abc:	782b      	ldrb	r3, [r5, #0]
 8009abe:	2b30      	cmp	r3, #48	; 0x30
 8009ac0:	d10c      	bne.n	8009adc <__cvt+0x88>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	0020      	movs	r0, r4
 8009ac8:	0031      	movs	r1, r6
 8009aca:	f7f6 fcbf 	bl	800044c <__aeabi_dcmpeq>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d104      	bne.n	8009adc <__cvt+0x88>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ade:	9a07      	ldr	r2, [sp, #28]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	18d3      	adds	r3, r2, r3
 8009ae4:	9307      	str	r3, [sp, #28]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	2300      	movs	r3, #0
 8009aea:	0020      	movs	r0, r4
 8009aec:	0031      	movs	r1, r6
 8009aee:	f7f6 fcad 	bl	800044c <__aeabi_dcmpeq>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d001      	beq.n	8009afa <__cvt+0xa6>
 8009af6:	9b07      	ldr	r3, [sp, #28]
 8009af8:	9309      	str	r3, [sp, #36]	; 0x24
 8009afa:	2230      	movs	r2, #48	; 0x30
 8009afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afe:	9907      	ldr	r1, [sp, #28]
 8009b00:	428b      	cmp	r3, r1
 8009b02:	d306      	bcc.n	8009b12 <__cvt+0xbe>
 8009b04:	0028      	movs	r0, r5
 8009b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b0a:	1b5b      	subs	r3, r3, r5
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	b00b      	add	sp, #44	; 0x2c
 8009b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b12:	1c59      	adds	r1, r3, #1
 8009b14:	9109      	str	r1, [sp, #36]	; 0x24
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e7f0      	b.n	8009afc <__cvt+0xa8>

08009b1a <__exponent>:
 8009b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1c:	1c83      	adds	r3, r0, #2
 8009b1e:	b087      	sub	sp, #28
 8009b20:	9303      	str	r3, [sp, #12]
 8009b22:	0005      	movs	r5, r0
 8009b24:	000c      	movs	r4, r1
 8009b26:	232b      	movs	r3, #43	; 0x2b
 8009b28:	7002      	strb	r2, [r0, #0]
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	da01      	bge.n	8009b32 <__exponent+0x18>
 8009b2e:	424c      	negs	r4, r1
 8009b30:	3302      	adds	r3, #2
 8009b32:	706b      	strb	r3, [r5, #1]
 8009b34:	2c09      	cmp	r4, #9
 8009b36:	dd2f      	ble.n	8009b98 <__exponent+0x7e>
 8009b38:	270a      	movs	r7, #10
 8009b3a:	ab04      	add	r3, sp, #16
 8009b3c:	1dde      	adds	r6, r3, #7
 8009b3e:	0020      	movs	r0, r4
 8009b40:	0039      	movs	r1, r7
 8009b42:	9601      	str	r6, [sp, #4]
 8009b44:	f7f6 fc6c 	bl	8000420 <__aeabi_idivmod>
 8009b48:	3e01      	subs	r6, #1
 8009b4a:	3130      	adds	r1, #48	; 0x30
 8009b4c:	0020      	movs	r0, r4
 8009b4e:	7031      	strb	r1, [r6, #0]
 8009b50:	0039      	movs	r1, r7
 8009b52:	9402      	str	r4, [sp, #8]
 8009b54:	f7f6 fb7e 	bl	8000254 <__divsi3>
 8009b58:	9b02      	ldr	r3, [sp, #8]
 8009b5a:	0004      	movs	r4, r0
 8009b5c:	2b63      	cmp	r3, #99	; 0x63
 8009b5e:	dcee      	bgt.n	8009b3e <__exponent+0x24>
 8009b60:	9b01      	ldr	r3, [sp, #4]
 8009b62:	3430      	adds	r4, #48	; 0x30
 8009b64:	1e9a      	subs	r2, r3, #2
 8009b66:	0013      	movs	r3, r2
 8009b68:	9903      	ldr	r1, [sp, #12]
 8009b6a:	7014      	strb	r4, [r2, #0]
 8009b6c:	a804      	add	r0, sp, #16
 8009b6e:	3007      	adds	r0, #7
 8009b70:	4298      	cmp	r0, r3
 8009b72:	d80c      	bhi.n	8009b8e <__exponent+0x74>
 8009b74:	2300      	movs	r3, #0
 8009b76:	4282      	cmp	r2, r0
 8009b78:	d804      	bhi.n	8009b84 <__exponent+0x6a>
 8009b7a:	aa04      	add	r2, sp, #16
 8009b7c:	3309      	adds	r3, #9
 8009b7e:	189b      	adds	r3, r3, r2
 8009b80:	9a01      	ldr	r2, [sp, #4]
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	9a03      	ldr	r2, [sp, #12]
 8009b86:	18d3      	adds	r3, r2, r3
 8009b88:	1b58      	subs	r0, r3, r5
 8009b8a:	b007      	add	sp, #28
 8009b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b8e:	7818      	ldrb	r0, [r3, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	7008      	strb	r0, [r1, #0]
 8009b94:	3101      	adds	r1, #1
 8009b96:	e7e9      	b.n	8009b6c <__exponent+0x52>
 8009b98:	2330      	movs	r3, #48	; 0x30
 8009b9a:	3430      	adds	r4, #48	; 0x30
 8009b9c:	70ab      	strb	r3, [r5, #2]
 8009b9e:	70ec      	strb	r4, [r5, #3]
 8009ba0:	1d2b      	adds	r3, r5, #4
 8009ba2:	e7f1      	b.n	8009b88 <__exponent+0x6e>

08009ba4 <_printf_float>:
 8009ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba6:	b095      	sub	sp, #84	; 0x54
 8009ba8:	000c      	movs	r4, r1
 8009baa:	9208      	str	r2, [sp, #32]
 8009bac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009bae:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb0:	0007      	movs	r7, r0
 8009bb2:	f000 ff0d 	bl	800a9d0 <_localeconv_r>
 8009bb6:	6803      	ldr	r3, [r0, #0]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	930c      	str	r3, [sp, #48]	; 0x30
 8009bbc:	f7f6 faa4 	bl	8000108 <strlen>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8009bc4:	7e23      	ldrb	r3, [r4, #24]
 8009bc6:	2207      	movs	r2, #7
 8009bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	900d      	str	r0, [sp, #52]	; 0x34
 8009bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bd2:	682b      	ldr	r3, [r5, #0]
 8009bd4:	05c9      	lsls	r1, r1, #23
 8009bd6:	d547      	bpl.n	8009c68 <_printf_float+0xc4>
 8009bd8:	189b      	adds	r3, r3, r2
 8009bda:	4393      	bics	r3, r2
 8009bdc:	001a      	movs	r2, r3
 8009bde:	3208      	adds	r2, #8
 8009be0:	602a      	str	r2, [r5, #0]
 8009be2:	681e      	ldr	r6, [r3, #0]
 8009be4:	685d      	ldr	r5, [r3, #4]
 8009be6:	0032      	movs	r2, r6
 8009be8:	002b      	movs	r3, r5
 8009bea:	64a2      	str	r2, [r4, #72]	; 0x48
 8009bec:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009bee:	2201      	movs	r2, #1
 8009bf0:	006b      	lsls	r3, r5, #1
 8009bf2:	085b      	lsrs	r3, r3, #1
 8009bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf6:	0030      	movs	r0, r6
 8009bf8:	4bab      	ldr	r3, [pc, #684]	; (8009ea8 <_printf_float+0x304>)
 8009bfa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009bfc:	4252      	negs	r2, r2
 8009bfe:	f7f8 fa61 	bl	80020c4 <__aeabi_dcmpun>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d132      	bne.n	8009c6c <_printf_float+0xc8>
 8009c06:	2201      	movs	r2, #1
 8009c08:	0030      	movs	r0, r6
 8009c0a:	4ba7      	ldr	r3, [pc, #668]	; (8009ea8 <_printf_float+0x304>)
 8009c0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c0e:	4252      	negs	r2, r2
 8009c10:	f7f6 fc2c 	bl	800046c <__aeabi_dcmple>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d129      	bne.n	8009c6c <_printf_float+0xc8>
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	0030      	movs	r0, r6
 8009c1e:	0029      	movs	r1, r5
 8009c20:	f7f6 fc1a 	bl	8000458 <__aeabi_dcmplt>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d003      	beq.n	8009c30 <_printf_float+0x8c>
 8009c28:	0023      	movs	r3, r4
 8009c2a:	222d      	movs	r2, #45	; 0x2d
 8009c2c:	3343      	adds	r3, #67	; 0x43
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c32:	4d9e      	ldr	r5, [pc, #632]	; (8009eac <_printf_float+0x308>)
 8009c34:	2b47      	cmp	r3, #71	; 0x47
 8009c36:	d900      	bls.n	8009c3a <_printf_float+0x96>
 8009c38:	4d9d      	ldr	r5, [pc, #628]	; (8009eb0 <_printf_float+0x30c>)
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	3301      	adds	r3, #1
 8009c42:	439a      	bics	r2, r3
 8009c44:	2300      	movs	r3, #0
 8009c46:	6022      	str	r2, [r4, #0]
 8009c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c4c:	0021      	movs	r1, r4
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	0038      	movs	r0, r7
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	aa13      	add	r2, sp, #76	; 0x4c
 8009c56:	f000 f9fb 	bl	800a050 <_printf_common>
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d000      	beq.n	8009c60 <_printf_float+0xbc>
 8009c5e:	e0a3      	b.n	8009da8 <_printf_float+0x204>
 8009c60:	2001      	movs	r0, #1
 8009c62:	4240      	negs	r0, r0
 8009c64:	b015      	add	sp, #84	; 0x54
 8009c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c68:	3307      	adds	r3, #7
 8009c6a:	e7b6      	b.n	8009bda <_printf_float+0x36>
 8009c6c:	0032      	movs	r2, r6
 8009c6e:	002b      	movs	r3, r5
 8009c70:	0030      	movs	r0, r6
 8009c72:	0029      	movs	r1, r5
 8009c74:	f7f8 fa26 	bl	80020c4 <__aeabi_dcmpun>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d00b      	beq.n	8009c94 <_printf_float+0xf0>
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	da03      	bge.n	8009c88 <_printf_float+0xe4>
 8009c80:	0023      	movs	r3, r4
 8009c82:	222d      	movs	r2, #45	; 0x2d
 8009c84:	3343      	adds	r3, #67	; 0x43
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c8a:	4d8a      	ldr	r5, [pc, #552]	; (8009eb4 <_printf_float+0x310>)
 8009c8c:	2b47      	cmp	r3, #71	; 0x47
 8009c8e:	d9d4      	bls.n	8009c3a <_printf_float+0x96>
 8009c90:	4d89      	ldr	r5, [pc, #548]	; (8009eb8 <_printf_float+0x314>)
 8009c92:	e7d2      	b.n	8009c3a <_printf_float+0x96>
 8009c94:	2220      	movs	r2, #32
 8009c96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c98:	6863      	ldr	r3, [r4, #4]
 8009c9a:	4391      	bics	r1, r2
 8009c9c:	910e      	str	r1, [sp, #56]	; 0x38
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	d14a      	bne.n	8009d38 <_printf_float+0x194>
 8009ca2:	3307      	adds	r3, #7
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	2380      	movs	r3, #128	; 0x80
 8009ca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	4313      	orrs	r3, r2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	9206      	str	r2, [sp, #24]
 8009cb2:	aa12      	add	r2, sp, #72	; 0x48
 8009cb4:	9205      	str	r2, [sp, #20]
 8009cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	9204      	str	r2, [sp, #16]
 8009cbc:	aa11      	add	r2, sp, #68	; 0x44
 8009cbe:	9203      	str	r2, [sp, #12]
 8009cc0:	2223      	movs	r2, #35	; 0x23
 8009cc2:	a908      	add	r1, sp, #32
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	6863      	ldr	r3, [r4, #4]
 8009cc8:	1852      	adds	r2, r2, r1
 8009cca:	9202      	str	r2, [sp, #8]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	0032      	movs	r2, r6
 8009cd0:	002b      	movs	r3, r5
 8009cd2:	0038      	movs	r0, r7
 8009cd4:	f7ff febe 	bl	8009a54 <__cvt>
 8009cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cda:	0005      	movs	r5, r0
 8009cdc:	2b47      	cmp	r3, #71	; 0x47
 8009cde:	d109      	bne.n	8009cf4 <_printf_float+0x150>
 8009ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ce2:	1cda      	adds	r2, r3, #3
 8009ce4:	db02      	blt.n	8009cec <_printf_float+0x148>
 8009ce6:	6862      	ldr	r2, [r4, #4]
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	dd49      	ble.n	8009d80 <_printf_float+0x1dc>
 8009cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cee:	3b02      	subs	r3, #2
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009cf8:	2b65      	cmp	r3, #101	; 0x65
 8009cfa:	d824      	bhi.n	8009d46 <_printf_float+0x1a2>
 8009cfc:	0020      	movs	r0, r4
 8009cfe:	001a      	movs	r2, r3
 8009d00:	3901      	subs	r1, #1
 8009d02:	3050      	adds	r0, #80	; 0x50
 8009d04:	9111      	str	r1, [sp, #68]	; 0x44
 8009d06:	f7ff ff08 	bl	8009b1a <__exponent>
 8009d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d0e:	1813      	adds	r3, r2, r0
 8009d10:	6123      	str	r3, [r4, #16]
 8009d12:	2a01      	cmp	r2, #1
 8009d14:	dc02      	bgt.n	8009d1c <_printf_float+0x178>
 8009d16:	6822      	ldr	r2, [r4, #0]
 8009d18:	07d2      	lsls	r2, r2, #31
 8009d1a:	d501      	bpl.n	8009d20 <_printf_float+0x17c>
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	2323      	movs	r3, #35	; 0x23
 8009d22:	aa08      	add	r2, sp, #32
 8009d24:	189b      	adds	r3, r3, r2
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d100      	bne.n	8009d2e <_printf_float+0x18a>
 8009d2c:	e78d      	b.n	8009c4a <_printf_float+0xa6>
 8009d2e:	0023      	movs	r3, r4
 8009d30:	222d      	movs	r2, #45	; 0x2d
 8009d32:	3343      	adds	r3, #67	; 0x43
 8009d34:	701a      	strb	r2, [r3, #0]
 8009d36:	e788      	b.n	8009c4a <_printf_float+0xa6>
 8009d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d3a:	2a47      	cmp	r2, #71	; 0x47
 8009d3c:	d1b3      	bne.n	8009ca6 <_printf_float+0x102>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1b1      	bne.n	8009ca6 <_printf_float+0x102>
 8009d42:	3301      	adds	r3, #1
 8009d44:	e7ae      	b.n	8009ca4 <_printf_float+0x100>
 8009d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d48:	2b66      	cmp	r3, #102	; 0x66
 8009d4a:	d11b      	bne.n	8009d84 <_printf_float+0x1e0>
 8009d4c:	6863      	ldr	r3, [r4, #4]
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	dd09      	ble.n	8009d66 <_printf_float+0x1c2>
 8009d52:	6121      	str	r1, [r4, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <_printf_float+0x1ba>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	07d2      	lsls	r2, r2, #31
 8009d5c:	d50b      	bpl.n	8009d76 <_printf_float+0x1d2>
 8009d5e:	3301      	adds	r3, #1
 8009d60:	185b      	adds	r3, r3, r1
 8009d62:	6123      	str	r3, [r4, #16]
 8009d64:	e007      	b.n	8009d76 <_printf_float+0x1d2>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d103      	bne.n	8009d72 <_printf_float+0x1ce>
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	6821      	ldr	r1, [r4, #0]
 8009d6e:	4211      	tst	r1, r2
 8009d70:	d000      	beq.n	8009d74 <_printf_float+0x1d0>
 8009d72:	1c9a      	adds	r2, r3, #2
 8009d74:	6122      	str	r2, [r4, #16]
 8009d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d78:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d7e:	e7cf      	b.n	8009d20 <_printf_float+0x17c>
 8009d80:	2367      	movs	r3, #103	; 0x67
 8009d82:	930a      	str	r3, [sp, #40]	; 0x28
 8009d84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	db06      	blt.n	8009d9a <_printf_float+0x1f6>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	6121      	str	r1, [r4, #16]
 8009d90:	07db      	lsls	r3, r3, #31
 8009d92:	d5f0      	bpl.n	8009d76 <_printf_float+0x1d2>
 8009d94:	3101      	adds	r1, #1
 8009d96:	6121      	str	r1, [r4, #16]
 8009d98:	e7ed      	b.n	8009d76 <_printf_float+0x1d2>
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	dc01      	bgt.n	8009da4 <_printf_float+0x200>
 8009da0:	1892      	adds	r2, r2, r2
 8009da2:	1a52      	subs	r2, r2, r1
 8009da4:	189b      	adds	r3, r3, r2
 8009da6:	e7dc      	b.n	8009d62 <_printf_float+0x1be>
 8009da8:	6822      	ldr	r2, [r4, #0]
 8009daa:	0553      	lsls	r3, r2, #21
 8009dac:	d408      	bmi.n	8009dc0 <_printf_float+0x21c>
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	002a      	movs	r2, r5
 8009db2:	0038      	movs	r0, r7
 8009db4:	9908      	ldr	r1, [sp, #32]
 8009db6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009db8:	47a8      	blx	r5
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d12a      	bne.n	8009e14 <_printf_float+0x270>
 8009dbe:	e74f      	b.n	8009c60 <_printf_float+0xbc>
 8009dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc2:	2b65      	cmp	r3, #101	; 0x65
 8009dc4:	d800      	bhi.n	8009dc8 <_printf_float+0x224>
 8009dc6:	e0ec      	b.n	8009fa2 <_printf_float+0x3fe>
 8009dc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009dca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f7f6 fb3c 	bl	800044c <__aeabi_dcmpeq>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d034      	beq.n	8009e42 <_printf_float+0x29e>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	0038      	movs	r0, r7
 8009ddc:	4a37      	ldr	r2, [pc, #220]	; (8009ebc <_printf_float+0x318>)
 8009dde:	9908      	ldr	r1, [sp, #32]
 8009de0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009de2:	47a8      	blx	r5
 8009de4:	3001      	adds	r0, #1
 8009de6:	d100      	bne.n	8009dea <_printf_float+0x246>
 8009de8:	e73a      	b.n	8009c60 <_printf_float+0xbc>
 8009dea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009dec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dee:	429a      	cmp	r2, r3
 8009df0:	db02      	blt.n	8009df8 <_printf_float+0x254>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	07db      	lsls	r3, r3, #31
 8009df6:	d50d      	bpl.n	8009e14 <_printf_float+0x270>
 8009df8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009dfa:	0038      	movs	r0, r7
 8009dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e00:	9908      	ldr	r1, [sp, #32]
 8009e02:	47a8      	blx	r5
 8009e04:	2500      	movs	r5, #0
 8009e06:	3001      	adds	r0, #1
 8009e08:	d100      	bne.n	8009e0c <_printf_float+0x268>
 8009e0a:	e729      	b.n	8009c60 <_printf_float+0xbc>
 8009e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	42ab      	cmp	r3, r5
 8009e12:	dc0a      	bgt.n	8009e2a <_printf_float+0x286>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	079b      	lsls	r3, r3, #30
 8009e18:	d500      	bpl.n	8009e1c <_printf_float+0x278>
 8009e1a:	e116      	b.n	800a04a <_printf_float+0x4a6>
 8009e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e1e:	68e0      	ldr	r0, [r4, #12]
 8009e20:	4298      	cmp	r0, r3
 8009e22:	db00      	blt.n	8009e26 <_printf_float+0x282>
 8009e24:	e71e      	b.n	8009c64 <_printf_float+0xc0>
 8009e26:	0018      	movs	r0, r3
 8009e28:	e71c      	b.n	8009c64 <_printf_float+0xc0>
 8009e2a:	0022      	movs	r2, r4
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	0038      	movs	r0, r7
 8009e30:	9908      	ldr	r1, [sp, #32]
 8009e32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e34:	321a      	adds	r2, #26
 8009e36:	47b0      	blx	r6
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d100      	bne.n	8009e3e <_printf_float+0x29a>
 8009e3c:	e710      	b.n	8009c60 <_printf_float+0xbc>
 8009e3e:	3501      	adds	r5, #1
 8009e40:	e7e4      	b.n	8009e0c <_printf_float+0x268>
 8009e42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dc3b      	bgt.n	8009ec0 <_printf_float+0x31c>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	0038      	movs	r0, r7
 8009e4c:	4a1b      	ldr	r2, [pc, #108]	; (8009ebc <_printf_float+0x318>)
 8009e4e:	9908      	ldr	r1, [sp, #32]
 8009e50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e52:	47b0      	blx	r6
 8009e54:	3001      	adds	r0, #1
 8009e56:	d100      	bne.n	8009e5a <_printf_float+0x2b6>
 8009e58:	e702      	b.n	8009c60 <_printf_float+0xbc>
 8009e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	d102      	bne.n	8009e68 <_printf_float+0x2c4>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	07db      	lsls	r3, r3, #31
 8009e66:	d5d5      	bpl.n	8009e14 <_printf_float+0x270>
 8009e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e6a:	0038      	movs	r0, r7
 8009e6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e6e:	9908      	ldr	r1, [sp, #32]
 8009e70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e72:	47b0      	blx	r6
 8009e74:	2300      	movs	r3, #0
 8009e76:	3001      	adds	r0, #1
 8009e78:	d100      	bne.n	8009e7c <_printf_float+0x2d8>
 8009e7a:	e6f1      	b.n	8009c60 <_printf_float+0xbc>
 8009e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e82:	425b      	negs	r3, r3
 8009e84:	4293      	cmp	r3, r2
 8009e86:	dc01      	bgt.n	8009e8c <_printf_float+0x2e8>
 8009e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e8a:	e791      	b.n	8009db0 <_printf_float+0x20c>
 8009e8c:	0022      	movs	r2, r4
 8009e8e:	2301      	movs	r3, #1
 8009e90:	0038      	movs	r0, r7
 8009e92:	9908      	ldr	r1, [sp, #32]
 8009e94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e96:	321a      	adds	r2, #26
 8009e98:	47b0      	blx	r6
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d100      	bne.n	8009ea0 <_printf_float+0x2fc>
 8009e9e:	e6df      	b.n	8009c60 <_printf_float+0xbc>
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	e7ea      	b.n	8009e7c <_printf_float+0x2d8>
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	7fefffff 	.word	0x7fefffff
 8009eac:	0800e610 	.word	0x0800e610
 8009eb0:	0800e614 	.word	0x0800e614
 8009eb4:	0800e618 	.word	0x0800e618
 8009eb8:	0800e61c 	.word	0x0800e61c
 8009ebc:	0800e620 	.word	0x0800e620
 8009ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	dd00      	ble.n	8009ecc <_printf_float+0x328>
 8009eca:	930a      	str	r3, [sp, #40]	; 0x28
 8009ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	dc3d      	bgt.n	8009f4e <_printf_float+0x3aa>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed8:	43db      	mvns	r3, r3
 8009eda:	17db      	asrs	r3, r3, #31
 8009edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	dc36      	bgt.n	8009f60 <_printf_float+0x3bc>
 8009ef2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	db40      	blt.n	8009f7c <_printf_float+0x3d8>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	07db      	lsls	r3, r3, #31
 8009efe:	d43d      	bmi.n	8009f7c <_printf_float+0x3d8>
 8009f00:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009f02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f06:	1af3      	subs	r3, r6, r3
 8009f08:	1ab6      	subs	r6, r6, r2
 8009f0a:	429e      	cmp	r6, r3
 8009f0c:	dd00      	ble.n	8009f10 <_printf_float+0x36c>
 8009f0e:	001e      	movs	r6, r3
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	dc3c      	bgt.n	8009f8e <_printf_float+0x3ea>
 8009f14:	2300      	movs	r3, #0
 8009f16:	930a      	str	r3, [sp, #40]	; 0x28
 8009f18:	43f3      	mvns	r3, r6
 8009f1a:	17db      	asrs	r3, r3, #31
 8009f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f22:	1a9b      	subs	r3, r3, r2
 8009f24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f26:	4032      	ands	r2, r6
 8009f28:	1a9b      	subs	r3, r3, r2
 8009f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	dc00      	bgt.n	8009f32 <_printf_float+0x38e>
 8009f30:	e770      	b.n	8009e14 <_printf_float+0x270>
 8009f32:	0022      	movs	r2, r4
 8009f34:	2301      	movs	r3, #1
 8009f36:	0038      	movs	r0, r7
 8009f38:	9908      	ldr	r1, [sp, #32]
 8009f3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f3c:	321a      	adds	r2, #26
 8009f3e:	47a8      	blx	r5
 8009f40:	3001      	adds	r0, #1
 8009f42:	d100      	bne.n	8009f46 <_printf_float+0x3a2>
 8009f44:	e68c      	b.n	8009c60 <_printf_float+0xbc>
 8009f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f48:	3301      	adds	r3, #1
 8009f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f4c:	e7e7      	b.n	8009f1e <_printf_float+0x37a>
 8009f4e:	002a      	movs	r2, r5
 8009f50:	0038      	movs	r0, r7
 8009f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f54:	9908      	ldr	r1, [sp, #32]
 8009f56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f58:	47b0      	blx	r6
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d1b9      	bne.n	8009ed2 <_printf_float+0x32e>
 8009f5e:	e67f      	b.n	8009c60 <_printf_float+0xbc>
 8009f60:	0022      	movs	r2, r4
 8009f62:	2301      	movs	r3, #1
 8009f64:	0038      	movs	r0, r7
 8009f66:	9908      	ldr	r1, [sp, #32]
 8009f68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f6a:	321a      	adds	r2, #26
 8009f6c:	47b0      	blx	r6
 8009f6e:	3001      	adds	r0, #1
 8009f70:	d100      	bne.n	8009f74 <_printf_float+0x3d0>
 8009f72:	e675      	b.n	8009c60 <_printf_float+0xbc>
 8009f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f76:	3301      	adds	r3, #1
 8009f78:	930e      	str	r3, [sp, #56]	; 0x38
 8009f7a:	e7b0      	b.n	8009ede <_printf_float+0x33a>
 8009f7c:	0038      	movs	r0, r7
 8009f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f82:	9908      	ldr	r1, [sp, #32]
 8009f84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f86:	47b0      	blx	r6
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d1b9      	bne.n	8009f00 <_printf_float+0x35c>
 8009f8c:	e668      	b.n	8009c60 <_printf_float+0xbc>
 8009f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f90:	0038      	movs	r0, r7
 8009f92:	18ea      	adds	r2, r5, r3
 8009f94:	9908      	ldr	r1, [sp, #32]
 8009f96:	0033      	movs	r3, r6
 8009f98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f9a:	47a8      	blx	r5
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d1b9      	bne.n	8009f14 <_printf_float+0x370>
 8009fa0:	e65e      	b.n	8009c60 <_printf_float+0xbc>
 8009fa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	dc02      	bgt.n	8009fae <_printf_float+0x40a>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	421a      	tst	r2, r3
 8009fac:	d03a      	beq.n	800a024 <_printf_float+0x480>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	002a      	movs	r2, r5
 8009fb2:	0038      	movs	r0, r7
 8009fb4:	9908      	ldr	r1, [sp, #32]
 8009fb6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009fb8:	47b0      	blx	r6
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d100      	bne.n	8009fc0 <_printf_float+0x41c>
 8009fbe:	e64f      	b.n	8009c60 <_printf_float+0xbc>
 8009fc0:	0038      	movs	r0, r7
 8009fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fc6:	9908      	ldr	r1, [sp, #32]
 8009fc8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009fca:	47b0      	blx	r6
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d100      	bne.n	8009fd2 <_printf_float+0x42e>
 8009fd0:	e646      	b.n	8009c60 <_printf_float+0xbc>
 8009fd2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009fd4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009fd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fd8:	2200      	movs	r2, #0
 8009fda:	001e      	movs	r6, r3
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f7f6 fa35 	bl	800044c <__aeabi_dcmpeq>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d11c      	bne.n	800a020 <_printf_float+0x47c>
 8009fe6:	0033      	movs	r3, r6
 8009fe8:	1c6a      	adds	r2, r5, #1
 8009fea:	3b01      	subs	r3, #1
 8009fec:	0038      	movs	r0, r7
 8009fee:	9908      	ldr	r1, [sp, #32]
 8009ff0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ff2:	47a8      	blx	r5
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	d10f      	bne.n	800a018 <_printf_float+0x474>
 8009ff8:	e632      	b.n	8009c60 <_printf_float+0xbc>
 8009ffa:	0022      	movs	r2, r4
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	0038      	movs	r0, r7
 800a000:	9908      	ldr	r1, [sp, #32]
 800a002:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a004:	321a      	adds	r2, #26
 800a006:	47b0      	blx	r6
 800a008:	3001      	adds	r0, #1
 800a00a:	d100      	bne.n	800a00e <_printf_float+0x46a>
 800a00c:	e628      	b.n	8009c60 <_printf_float+0xbc>
 800a00e:	3501      	adds	r5, #1
 800a010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a012:	3b01      	subs	r3, #1
 800a014:	42ab      	cmp	r3, r5
 800a016:	dcf0      	bgt.n	8009ffa <_printf_float+0x456>
 800a018:	0022      	movs	r2, r4
 800a01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01c:	3250      	adds	r2, #80	; 0x50
 800a01e:	e6c8      	b.n	8009db2 <_printf_float+0x20e>
 800a020:	2500      	movs	r5, #0
 800a022:	e7f5      	b.n	800a010 <_printf_float+0x46c>
 800a024:	002a      	movs	r2, r5
 800a026:	e7e1      	b.n	8009fec <_printf_float+0x448>
 800a028:	0022      	movs	r2, r4
 800a02a:	2301      	movs	r3, #1
 800a02c:	0038      	movs	r0, r7
 800a02e:	9908      	ldr	r1, [sp, #32]
 800a030:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a032:	3219      	adds	r2, #25
 800a034:	47b0      	blx	r6
 800a036:	3001      	adds	r0, #1
 800a038:	d100      	bne.n	800a03c <_printf_float+0x498>
 800a03a:	e611      	b.n	8009c60 <_printf_float+0xbc>
 800a03c:	3501      	adds	r5, #1
 800a03e:	68e3      	ldr	r3, [r4, #12]
 800a040:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a042:	1a9b      	subs	r3, r3, r2
 800a044:	42ab      	cmp	r3, r5
 800a046:	dcef      	bgt.n	800a028 <_printf_float+0x484>
 800a048:	e6e8      	b.n	8009e1c <_printf_float+0x278>
 800a04a:	2500      	movs	r5, #0
 800a04c:	e7f7      	b.n	800a03e <_printf_float+0x49a>
 800a04e:	46c0      	nop			; (mov r8, r8)

0800a050 <_printf_common>:
 800a050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a052:	0016      	movs	r6, r2
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	688a      	ldr	r2, [r1, #8]
 800a058:	690b      	ldr	r3, [r1, #16]
 800a05a:	000c      	movs	r4, r1
 800a05c:	9000      	str	r0, [sp, #0]
 800a05e:	4293      	cmp	r3, r2
 800a060:	da00      	bge.n	800a064 <_printf_common+0x14>
 800a062:	0013      	movs	r3, r2
 800a064:	0022      	movs	r2, r4
 800a066:	6033      	str	r3, [r6, #0]
 800a068:	3243      	adds	r2, #67	; 0x43
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	d001      	beq.n	800a074 <_printf_common+0x24>
 800a070:	3301      	adds	r3, #1
 800a072:	6033      	str	r3, [r6, #0]
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	069b      	lsls	r3, r3, #26
 800a078:	d502      	bpl.n	800a080 <_printf_common+0x30>
 800a07a:	6833      	ldr	r3, [r6, #0]
 800a07c:	3302      	adds	r3, #2
 800a07e:	6033      	str	r3, [r6, #0]
 800a080:	6822      	ldr	r2, [r4, #0]
 800a082:	2306      	movs	r3, #6
 800a084:	0015      	movs	r5, r2
 800a086:	401d      	ands	r5, r3
 800a088:	421a      	tst	r2, r3
 800a08a:	d027      	beq.n	800a0dc <_printf_common+0x8c>
 800a08c:	0023      	movs	r3, r4
 800a08e:	3343      	adds	r3, #67	; 0x43
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	1e5a      	subs	r2, r3, #1
 800a094:	4193      	sbcs	r3, r2
 800a096:	6822      	ldr	r2, [r4, #0]
 800a098:	0692      	lsls	r2, r2, #26
 800a09a:	d430      	bmi.n	800a0fe <_printf_common+0xae>
 800a09c:	0022      	movs	r2, r4
 800a09e:	9901      	ldr	r1, [sp, #4]
 800a0a0:	9800      	ldr	r0, [sp, #0]
 800a0a2:	9d08      	ldr	r5, [sp, #32]
 800a0a4:	3243      	adds	r2, #67	; 0x43
 800a0a6:	47a8      	blx	r5
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d025      	beq.n	800a0f8 <_printf_common+0xa8>
 800a0ac:	2206      	movs	r2, #6
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	d105      	bne.n	800a0c4 <_printf_common+0x74>
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	68e5      	ldr	r5, [r4, #12]
 800a0bc:	1aed      	subs	r5, r5, r3
 800a0be:	43eb      	mvns	r3, r5
 800a0c0:	17db      	asrs	r3, r3, #31
 800a0c2:	401d      	ands	r5, r3
 800a0c4:	68a3      	ldr	r3, [r4, #8]
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	dd01      	ble.n	800a0d0 <_printf_common+0x80>
 800a0cc:	1a9b      	subs	r3, r3, r2
 800a0ce:	18ed      	adds	r5, r5, r3
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	42b5      	cmp	r5, r6
 800a0d4:	d120      	bne.n	800a118 <_printf_common+0xc8>
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	e010      	b.n	800a0fc <_printf_common+0xac>
 800a0da:	3501      	adds	r5, #1
 800a0dc:	68e3      	ldr	r3, [r4, #12]
 800a0de:	6832      	ldr	r2, [r6, #0]
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	42ab      	cmp	r3, r5
 800a0e4:	ddd2      	ble.n	800a08c <_printf_common+0x3c>
 800a0e6:	0022      	movs	r2, r4
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	9901      	ldr	r1, [sp, #4]
 800a0ec:	9800      	ldr	r0, [sp, #0]
 800a0ee:	9f08      	ldr	r7, [sp, #32]
 800a0f0:	3219      	adds	r2, #25
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d1f0      	bne.n	800a0da <_printf_common+0x8a>
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	4240      	negs	r0, r0
 800a0fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0fe:	2030      	movs	r0, #48	; 0x30
 800a100:	18e1      	adds	r1, r4, r3
 800a102:	3143      	adds	r1, #67	; 0x43
 800a104:	7008      	strb	r0, [r1, #0]
 800a106:	0021      	movs	r1, r4
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	3145      	adds	r1, #69	; 0x45
 800a10c:	7809      	ldrb	r1, [r1, #0]
 800a10e:	18a2      	adds	r2, r4, r2
 800a110:	3243      	adds	r2, #67	; 0x43
 800a112:	3302      	adds	r3, #2
 800a114:	7011      	strb	r1, [r2, #0]
 800a116:	e7c1      	b.n	800a09c <_printf_common+0x4c>
 800a118:	0022      	movs	r2, r4
 800a11a:	2301      	movs	r3, #1
 800a11c:	9901      	ldr	r1, [sp, #4]
 800a11e:	9800      	ldr	r0, [sp, #0]
 800a120:	9f08      	ldr	r7, [sp, #32]
 800a122:	321a      	adds	r2, #26
 800a124:	47b8      	blx	r7
 800a126:	3001      	adds	r0, #1
 800a128:	d0e6      	beq.n	800a0f8 <_printf_common+0xa8>
 800a12a:	3601      	adds	r6, #1
 800a12c:	e7d1      	b.n	800a0d2 <_printf_common+0x82>
	...

0800a130 <_printf_i>:
 800a130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a132:	b08b      	sub	sp, #44	; 0x2c
 800a134:	9206      	str	r2, [sp, #24]
 800a136:	000a      	movs	r2, r1
 800a138:	3243      	adds	r2, #67	; 0x43
 800a13a:	9307      	str	r3, [sp, #28]
 800a13c:	9005      	str	r0, [sp, #20]
 800a13e:	9204      	str	r2, [sp, #16]
 800a140:	7e0a      	ldrb	r2, [r1, #24]
 800a142:	000c      	movs	r4, r1
 800a144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a146:	2a78      	cmp	r2, #120	; 0x78
 800a148:	d809      	bhi.n	800a15e <_printf_i+0x2e>
 800a14a:	2a62      	cmp	r2, #98	; 0x62
 800a14c:	d80b      	bhi.n	800a166 <_printf_i+0x36>
 800a14e:	2a00      	cmp	r2, #0
 800a150:	d100      	bne.n	800a154 <_printf_i+0x24>
 800a152:	e0be      	b.n	800a2d2 <_printf_i+0x1a2>
 800a154:	497c      	ldr	r1, [pc, #496]	; (800a348 <_printf_i+0x218>)
 800a156:	9103      	str	r1, [sp, #12]
 800a158:	2a58      	cmp	r2, #88	; 0x58
 800a15a:	d100      	bne.n	800a15e <_printf_i+0x2e>
 800a15c:	e093      	b.n	800a286 <_printf_i+0x156>
 800a15e:	0026      	movs	r6, r4
 800a160:	3642      	adds	r6, #66	; 0x42
 800a162:	7032      	strb	r2, [r6, #0]
 800a164:	e022      	b.n	800a1ac <_printf_i+0x7c>
 800a166:	0010      	movs	r0, r2
 800a168:	3863      	subs	r0, #99	; 0x63
 800a16a:	2815      	cmp	r0, #21
 800a16c:	d8f7      	bhi.n	800a15e <_printf_i+0x2e>
 800a16e:	f7f5 ffdd 	bl	800012c <__gnu_thumb1_case_shi>
 800a172:	0016      	.short	0x0016
 800a174:	fff6001f 	.word	0xfff6001f
 800a178:	fff6fff6 	.word	0xfff6fff6
 800a17c:	001ffff6 	.word	0x001ffff6
 800a180:	fff6fff6 	.word	0xfff6fff6
 800a184:	fff6fff6 	.word	0xfff6fff6
 800a188:	003600a3 	.word	0x003600a3
 800a18c:	fff60083 	.word	0xfff60083
 800a190:	00b4fff6 	.word	0x00b4fff6
 800a194:	0036fff6 	.word	0x0036fff6
 800a198:	fff6fff6 	.word	0xfff6fff6
 800a19c:	0087      	.short	0x0087
 800a19e:	0026      	movs	r6, r4
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	3642      	adds	r6, #66	; 0x42
 800a1a4:	1d11      	adds	r1, r2, #4
 800a1a6:	6019      	str	r1, [r3, #0]
 800a1a8:	6813      	ldr	r3, [r2, #0]
 800a1aa:	7033      	strb	r3, [r6, #0]
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e0a2      	b.n	800a2f6 <_printf_i+0x1c6>
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	6809      	ldr	r1, [r1, #0]
 800a1b4:	1d02      	adds	r2, r0, #4
 800a1b6:	060d      	lsls	r5, r1, #24
 800a1b8:	d50b      	bpl.n	800a1d2 <_printf_i+0xa2>
 800a1ba:	6805      	ldr	r5, [r0, #0]
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	2d00      	cmp	r5, #0
 800a1c0:	da03      	bge.n	800a1ca <_printf_i+0x9a>
 800a1c2:	232d      	movs	r3, #45	; 0x2d
 800a1c4:	9a04      	ldr	r2, [sp, #16]
 800a1c6:	426d      	negs	r5, r5
 800a1c8:	7013      	strb	r3, [r2, #0]
 800a1ca:	4b5f      	ldr	r3, [pc, #380]	; (800a348 <_printf_i+0x218>)
 800a1cc:	270a      	movs	r7, #10
 800a1ce:	9303      	str	r3, [sp, #12]
 800a1d0:	e01b      	b.n	800a20a <_printf_i+0xda>
 800a1d2:	6805      	ldr	r5, [r0, #0]
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	0649      	lsls	r1, r1, #25
 800a1d8:	d5f1      	bpl.n	800a1be <_printf_i+0x8e>
 800a1da:	b22d      	sxth	r5, r5
 800a1dc:	e7ef      	b.n	800a1be <_printf_i+0x8e>
 800a1de:	680d      	ldr	r5, [r1, #0]
 800a1e0:	6819      	ldr	r1, [r3, #0]
 800a1e2:	1d08      	adds	r0, r1, #4
 800a1e4:	6018      	str	r0, [r3, #0]
 800a1e6:	062e      	lsls	r6, r5, #24
 800a1e8:	d501      	bpl.n	800a1ee <_printf_i+0xbe>
 800a1ea:	680d      	ldr	r5, [r1, #0]
 800a1ec:	e003      	b.n	800a1f6 <_printf_i+0xc6>
 800a1ee:	066d      	lsls	r5, r5, #25
 800a1f0:	d5fb      	bpl.n	800a1ea <_printf_i+0xba>
 800a1f2:	680d      	ldr	r5, [r1, #0]
 800a1f4:	b2ad      	uxth	r5, r5
 800a1f6:	4b54      	ldr	r3, [pc, #336]	; (800a348 <_printf_i+0x218>)
 800a1f8:	2708      	movs	r7, #8
 800a1fa:	9303      	str	r3, [sp, #12]
 800a1fc:	2a6f      	cmp	r2, #111	; 0x6f
 800a1fe:	d000      	beq.n	800a202 <_printf_i+0xd2>
 800a200:	3702      	adds	r7, #2
 800a202:	0023      	movs	r3, r4
 800a204:	2200      	movs	r2, #0
 800a206:	3343      	adds	r3, #67	; 0x43
 800a208:	701a      	strb	r2, [r3, #0]
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	60a3      	str	r3, [r4, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	db03      	blt.n	800a21a <_printf_i+0xea>
 800a212:	2104      	movs	r1, #4
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	438a      	bics	r2, r1
 800a218:	6022      	str	r2, [r4, #0]
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	d102      	bne.n	800a224 <_printf_i+0xf4>
 800a21e:	9e04      	ldr	r6, [sp, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00c      	beq.n	800a23e <_printf_i+0x10e>
 800a224:	9e04      	ldr	r6, [sp, #16]
 800a226:	0028      	movs	r0, r5
 800a228:	0039      	movs	r1, r7
 800a22a:	f7f6 f80f 	bl	800024c <__aeabi_uidivmod>
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	3e01      	subs	r6, #1
 800a232:	5c5b      	ldrb	r3, [r3, r1]
 800a234:	7033      	strb	r3, [r6, #0]
 800a236:	002b      	movs	r3, r5
 800a238:	0005      	movs	r5, r0
 800a23a:	429f      	cmp	r7, r3
 800a23c:	d9f3      	bls.n	800a226 <_printf_i+0xf6>
 800a23e:	2f08      	cmp	r7, #8
 800a240:	d109      	bne.n	800a256 <_printf_i+0x126>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	07db      	lsls	r3, r3, #31
 800a246:	d506      	bpl.n	800a256 <_printf_i+0x126>
 800a248:	6862      	ldr	r2, [r4, #4]
 800a24a:	6923      	ldr	r3, [r4, #16]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	dc02      	bgt.n	800a256 <_printf_i+0x126>
 800a250:	2330      	movs	r3, #48	; 0x30
 800a252:	3e01      	subs	r6, #1
 800a254:	7033      	strb	r3, [r6, #0]
 800a256:	9b04      	ldr	r3, [sp, #16]
 800a258:	1b9b      	subs	r3, r3, r6
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	9b07      	ldr	r3, [sp, #28]
 800a25e:	0021      	movs	r1, r4
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	9805      	ldr	r0, [sp, #20]
 800a264:	9b06      	ldr	r3, [sp, #24]
 800a266:	aa09      	add	r2, sp, #36	; 0x24
 800a268:	f7ff fef2 	bl	800a050 <_printf_common>
 800a26c:	3001      	adds	r0, #1
 800a26e:	d147      	bne.n	800a300 <_printf_i+0x1d0>
 800a270:	2001      	movs	r0, #1
 800a272:	4240      	negs	r0, r0
 800a274:	b00b      	add	sp, #44	; 0x2c
 800a276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a278:	2220      	movs	r2, #32
 800a27a:	6809      	ldr	r1, [r1, #0]
 800a27c:	430a      	orrs	r2, r1
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	2278      	movs	r2, #120	; 0x78
 800a282:	4932      	ldr	r1, [pc, #200]	; (800a34c <_printf_i+0x21c>)
 800a284:	9103      	str	r1, [sp, #12]
 800a286:	0021      	movs	r1, r4
 800a288:	3145      	adds	r1, #69	; 0x45
 800a28a:	700a      	strb	r2, [r1, #0]
 800a28c:	6819      	ldr	r1, [r3, #0]
 800a28e:	6822      	ldr	r2, [r4, #0]
 800a290:	c920      	ldmia	r1!, {r5}
 800a292:	0610      	lsls	r0, r2, #24
 800a294:	d402      	bmi.n	800a29c <_printf_i+0x16c>
 800a296:	0650      	lsls	r0, r2, #25
 800a298:	d500      	bpl.n	800a29c <_printf_i+0x16c>
 800a29a:	b2ad      	uxth	r5, r5
 800a29c:	6019      	str	r1, [r3, #0]
 800a29e:	07d3      	lsls	r3, r2, #31
 800a2a0:	d502      	bpl.n	800a2a8 <_printf_i+0x178>
 800a2a2:	2320      	movs	r3, #32
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	2710      	movs	r7, #16
 800a2aa:	2d00      	cmp	r5, #0
 800a2ac:	d1a9      	bne.n	800a202 <_printf_i+0xd2>
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	4393      	bics	r3, r2
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	e7a4      	b.n	800a202 <_printf_i+0xd2>
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	680d      	ldr	r5, [r1, #0]
 800a2bc:	1d10      	adds	r0, r2, #4
 800a2be:	6949      	ldr	r1, [r1, #20]
 800a2c0:	6018      	str	r0, [r3, #0]
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	062e      	lsls	r6, r5, #24
 800a2c6:	d501      	bpl.n	800a2cc <_printf_i+0x19c>
 800a2c8:	6019      	str	r1, [r3, #0]
 800a2ca:	e002      	b.n	800a2d2 <_printf_i+0x1a2>
 800a2cc:	066d      	lsls	r5, r5, #25
 800a2ce:	d5fb      	bpl.n	800a2c8 <_printf_i+0x198>
 800a2d0:	8019      	strh	r1, [r3, #0]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	9e04      	ldr	r6, [sp, #16]
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	e7c0      	b.n	800a25c <_printf_i+0x12c>
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	1d11      	adds	r1, r2, #4
 800a2de:	6019      	str	r1, [r3, #0]
 800a2e0:	6816      	ldr	r6, [r2, #0]
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	0030      	movs	r0, r6
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	f000 fc4f 	bl	800ab8a <memchr>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d001      	beq.n	800a2f4 <_printf_i+0x1c4>
 800a2f0:	1b80      	subs	r0, r0, r6
 800a2f2:	6060      	str	r0, [r4, #4]
 800a2f4:	6863      	ldr	r3, [r4, #4]
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9a04      	ldr	r2, [sp, #16]
 800a2fc:	7013      	strb	r3, [r2, #0]
 800a2fe:	e7ad      	b.n	800a25c <_printf_i+0x12c>
 800a300:	0032      	movs	r2, r6
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	9906      	ldr	r1, [sp, #24]
 800a306:	9805      	ldr	r0, [sp, #20]
 800a308:	9d07      	ldr	r5, [sp, #28]
 800a30a:	47a8      	blx	r5
 800a30c:	3001      	adds	r0, #1
 800a30e:	d0af      	beq.n	800a270 <_printf_i+0x140>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	079b      	lsls	r3, r3, #30
 800a314:	d415      	bmi.n	800a342 <_printf_i+0x212>
 800a316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a318:	68e0      	ldr	r0, [r4, #12]
 800a31a:	4298      	cmp	r0, r3
 800a31c:	daaa      	bge.n	800a274 <_printf_i+0x144>
 800a31e:	0018      	movs	r0, r3
 800a320:	e7a8      	b.n	800a274 <_printf_i+0x144>
 800a322:	0022      	movs	r2, r4
 800a324:	2301      	movs	r3, #1
 800a326:	9906      	ldr	r1, [sp, #24]
 800a328:	9805      	ldr	r0, [sp, #20]
 800a32a:	9e07      	ldr	r6, [sp, #28]
 800a32c:	3219      	adds	r2, #25
 800a32e:	47b0      	blx	r6
 800a330:	3001      	adds	r0, #1
 800a332:	d09d      	beq.n	800a270 <_printf_i+0x140>
 800a334:	3501      	adds	r5, #1
 800a336:	68e3      	ldr	r3, [r4, #12]
 800a338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a33a:	1a9b      	subs	r3, r3, r2
 800a33c:	42ab      	cmp	r3, r5
 800a33e:	dcf0      	bgt.n	800a322 <_printf_i+0x1f2>
 800a340:	e7e9      	b.n	800a316 <_printf_i+0x1e6>
 800a342:	2500      	movs	r5, #0
 800a344:	e7f7      	b.n	800a336 <_printf_i+0x206>
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	0800e622 	.word	0x0800e622
 800a34c:	0800e633 	.word	0x0800e633

0800a350 <_scanf_float>:
 800a350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a352:	b08b      	sub	sp, #44	; 0x2c
 800a354:	0016      	movs	r6, r2
 800a356:	9002      	str	r0, [sp, #8]
 800a358:	22ae      	movs	r2, #174	; 0xae
 800a35a:	2000      	movs	r0, #0
 800a35c:	9307      	str	r3, [sp, #28]
 800a35e:	688b      	ldr	r3, [r1, #8]
 800a360:	000f      	movs	r7, r1
 800a362:	1e59      	subs	r1, r3, #1
 800a364:	0052      	lsls	r2, r2, #1
 800a366:	9006      	str	r0, [sp, #24]
 800a368:	4291      	cmp	r1, r2
 800a36a:	d905      	bls.n	800a378 <_scanf_float+0x28>
 800a36c:	3b5e      	subs	r3, #94	; 0x5e
 800a36e:	3bff      	subs	r3, #255	; 0xff
 800a370:	9306      	str	r3, [sp, #24]
 800a372:	235e      	movs	r3, #94	; 0x5e
 800a374:	33ff      	adds	r3, #255	; 0xff
 800a376:	60bb      	str	r3, [r7, #8]
 800a378:	23f0      	movs	r3, #240	; 0xf0
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	4313      	orrs	r3, r2
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	003b      	movs	r3, r7
 800a384:	2400      	movs	r4, #0
 800a386:	331c      	adds	r3, #28
 800a388:	001d      	movs	r5, r3
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	9403      	str	r4, [sp, #12]
 800a38e:	9409      	str	r4, [sp, #36]	; 0x24
 800a390:	9408      	str	r4, [sp, #32]
 800a392:	9401      	str	r4, [sp, #4]
 800a394:	9405      	str	r4, [sp, #20]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	2a00      	cmp	r2, #0
 800a39a:	d00a      	beq.n	800a3b2 <_scanf_float+0x62>
 800a39c:	6833      	ldr	r3, [r6, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b4e      	cmp	r3, #78	; 0x4e
 800a3a2:	d844      	bhi.n	800a42e <_scanf_float+0xde>
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	2b40      	cmp	r3, #64	; 0x40
 800a3a8:	d82c      	bhi.n	800a404 <_scanf_float+0xb4>
 800a3aa:	382b      	subs	r0, #43	; 0x2b
 800a3ac:	b2c1      	uxtb	r1, r0
 800a3ae:	290e      	cmp	r1, #14
 800a3b0:	d92a      	bls.n	800a408 <_scanf_float+0xb8>
 800a3b2:	9b01      	ldr	r3, [sp, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <_scanf_float+0x70>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	4aa3      	ldr	r2, [pc, #652]	; (800a648 <_scanf_float+0x2f8>)
 800a3bc:	4013      	ands	r3, r2
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d900      	bls.n	800a3ca <_scanf_float+0x7a>
 800a3c8:	e0f9      	b.n	800a5be <_scanf_float+0x26e>
 800a3ca:	24be      	movs	r4, #190	; 0xbe
 800a3cc:	0064      	lsls	r4, r4, #1
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	429d      	cmp	r5, r3
 800a3d2:	d900      	bls.n	800a3d6 <_scanf_float+0x86>
 800a3d4:	e0e9      	b.n	800a5aa <_scanf_float+0x25a>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	9303      	str	r3, [sp, #12]
 800a3da:	e183      	b.n	800a6e4 <_scanf_float+0x394>
 800a3dc:	0018      	movs	r0, r3
 800a3de:	3861      	subs	r0, #97	; 0x61
 800a3e0:	280d      	cmp	r0, #13
 800a3e2:	d8e6      	bhi.n	800a3b2 <_scanf_float+0x62>
 800a3e4:	f7f5 fea2 	bl	800012c <__gnu_thumb1_case_shi>
 800a3e8:	ffe50083 	.word	0xffe50083
 800a3ec:	ffe5ffe5 	.word	0xffe5ffe5
 800a3f0:	00a200b6 	.word	0x00a200b6
 800a3f4:	ffe5ffe5 	.word	0xffe5ffe5
 800a3f8:	ffe50089 	.word	0xffe50089
 800a3fc:	ffe5ffe5 	.word	0xffe5ffe5
 800a400:	0065ffe5 	.word	0x0065ffe5
 800a404:	3841      	subs	r0, #65	; 0x41
 800a406:	e7eb      	b.n	800a3e0 <_scanf_float+0x90>
 800a408:	280e      	cmp	r0, #14
 800a40a:	d8d2      	bhi.n	800a3b2 <_scanf_float+0x62>
 800a40c:	f7f5 fe8e 	bl	800012c <__gnu_thumb1_case_shi>
 800a410:	ffd1004b 	.word	0xffd1004b
 800a414:	0098004b 	.word	0x0098004b
 800a418:	0020ffd1 	.word	0x0020ffd1
 800a41c:	00400040 	.word	0x00400040
 800a420:	00400040 	.word	0x00400040
 800a424:	00400040 	.word	0x00400040
 800a428:	00400040 	.word	0x00400040
 800a42c:	0040      	.short	0x0040
 800a42e:	2b6e      	cmp	r3, #110	; 0x6e
 800a430:	d809      	bhi.n	800a446 <_scanf_float+0xf6>
 800a432:	2b60      	cmp	r3, #96	; 0x60
 800a434:	d8d2      	bhi.n	800a3dc <_scanf_float+0x8c>
 800a436:	2b54      	cmp	r3, #84	; 0x54
 800a438:	d07d      	beq.n	800a536 <_scanf_float+0x1e6>
 800a43a:	2b59      	cmp	r3, #89	; 0x59
 800a43c:	d1b9      	bne.n	800a3b2 <_scanf_float+0x62>
 800a43e:	2c07      	cmp	r4, #7
 800a440:	d1b7      	bne.n	800a3b2 <_scanf_float+0x62>
 800a442:	2408      	movs	r4, #8
 800a444:	e02c      	b.n	800a4a0 <_scanf_float+0x150>
 800a446:	2b74      	cmp	r3, #116	; 0x74
 800a448:	d075      	beq.n	800a536 <_scanf_float+0x1e6>
 800a44a:	2b79      	cmp	r3, #121	; 0x79
 800a44c:	d0f7      	beq.n	800a43e <_scanf_float+0xee>
 800a44e:	e7b0      	b.n	800a3b2 <_scanf_float+0x62>
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	05c8      	lsls	r0, r1, #23
 800a454:	d51c      	bpl.n	800a490 <_scanf_float+0x140>
 800a456:	2380      	movs	r3, #128	; 0x80
 800a458:	4399      	bics	r1, r3
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	9b06      	ldr	r3, [sp, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <_scanf_float+0x120>
 800a468:	3b01      	subs	r3, #1
 800a46a:	3201      	adds	r2, #1
 800a46c:	9306      	str	r3, [sp, #24]
 800a46e:	60ba      	str	r2, [r7, #8]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	3b01      	subs	r3, #1
 800a474:	60bb      	str	r3, [r7, #8]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	3301      	adds	r3, #1
 800a47a:	613b      	str	r3, [r7, #16]
 800a47c:	6873      	ldr	r3, [r6, #4]
 800a47e:	3b01      	subs	r3, #1
 800a480:	6073      	str	r3, [r6, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	dc00      	bgt.n	800a488 <_scanf_float+0x138>
 800a486:	e086      	b.n	800a596 <_scanf_float+0x246>
 800a488:	6833      	ldr	r3, [r6, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	6033      	str	r3, [r6, #0]
 800a48e:	e782      	b.n	800a396 <_scanf_float+0x46>
 800a490:	9a03      	ldr	r2, [sp, #12]
 800a492:	1912      	adds	r2, r2, r4
 800a494:	2a00      	cmp	r2, #0
 800a496:	d18c      	bne.n	800a3b2 <_scanf_float+0x62>
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	496c      	ldr	r1, [pc, #432]	; (800a64c <_scanf_float+0x2fc>)
 800a49c:	400a      	ands	r2, r1
 800a49e:	603a      	str	r2, [r7, #0]
 800a4a0:	702b      	strb	r3, [r5, #0]
 800a4a2:	3501      	adds	r5, #1
 800a4a4:	e7e4      	b.n	800a470 <_scanf_float+0x120>
 800a4a6:	2180      	movs	r1, #128	; 0x80
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	420a      	tst	r2, r1
 800a4ac:	d081      	beq.n	800a3b2 <_scanf_float+0x62>
 800a4ae:	438a      	bics	r2, r1
 800a4b0:	e7f5      	b.n	800a49e <_scanf_float+0x14e>
 800a4b2:	9a03      	ldr	r2, [sp, #12]
 800a4b4:	2a00      	cmp	r2, #0
 800a4b6:	d10f      	bne.n	800a4d8 <_scanf_float+0x188>
 800a4b8:	9a01      	ldr	r2, [sp, #4]
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	d10f      	bne.n	800a4de <_scanf_float+0x18e>
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	21e0      	movs	r1, #224	; 0xe0
 800a4c2:	0010      	movs	r0, r2
 800a4c4:	00c9      	lsls	r1, r1, #3
 800a4c6:	4008      	ands	r0, r1
 800a4c8:	4288      	cmp	r0, r1
 800a4ca:	d108      	bne.n	800a4de <_scanf_float+0x18e>
 800a4cc:	4960      	ldr	r1, [pc, #384]	; (800a650 <_scanf_float+0x300>)
 800a4ce:	400a      	ands	r2, r1
 800a4d0:	603a      	str	r2, [r7, #0]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	9203      	str	r2, [sp, #12]
 800a4d6:	e7e3      	b.n	800a4a0 <_scanf_float+0x150>
 800a4d8:	9a03      	ldr	r2, [sp, #12]
 800a4da:	2a02      	cmp	r2, #2
 800a4dc:	d059      	beq.n	800a592 <_scanf_float+0x242>
 800a4de:	2c01      	cmp	r4, #1
 800a4e0:	d002      	beq.n	800a4e8 <_scanf_float+0x198>
 800a4e2:	2c04      	cmp	r4, #4
 800a4e4:	d000      	beq.n	800a4e8 <_scanf_float+0x198>
 800a4e6:	e764      	b.n	800a3b2 <_scanf_float+0x62>
 800a4e8:	3401      	adds	r4, #1
 800a4ea:	b2e4      	uxtb	r4, r4
 800a4ec:	e7d8      	b.n	800a4a0 <_scanf_float+0x150>
 800a4ee:	9a03      	ldr	r2, [sp, #12]
 800a4f0:	2a01      	cmp	r2, #1
 800a4f2:	d000      	beq.n	800a4f6 <_scanf_float+0x1a6>
 800a4f4:	e75d      	b.n	800a3b2 <_scanf_float+0x62>
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	e7ec      	b.n	800a4d4 <_scanf_float+0x184>
 800a4fa:	2c00      	cmp	r4, #0
 800a4fc:	d110      	bne.n	800a520 <_scanf_float+0x1d0>
 800a4fe:	9a01      	ldr	r2, [sp, #4]
 800a500:	2a00      	cmp	r2, #0
 800a502:	d000      	beq.n	800a506 <_scanf_float+0x1b6>
 800a504:	e758      	b.n	800a3b8 <_scanf_float+0x68>
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	21e0      	movs	r1, #224	; 0xe0
 800a50a:	0010      	movs	r0, r2
 800a50c:	00c9      	lsls	r1, r1, #3
 800a50e:	4008      	ands	r0, r1
 800a510:	4288      	cmp	r0, r1
 800a512:	d000      	beq.n	800a516 <_scanf_float+0x1c6>
 800a514:	e754      	b.n	800a3c0 <_scanf_float+0x70>
 800a516:	494e      	ldr	r1, [pc, #312]	; (800a650 <_scanf_float+0x300>)
 800a518:	3401      	adds	r4, #1
 800a51a:	400a      	ands	r2, r1
 800a51c:	603a      	str	r2, [r7, #0]
 800a51e:	e7bf      	b.n	800a4a0 <_scanf_float+0x150>
 800a520:	21fd      	movs	r1, #253	; 0xfd
 800a522:	1ee2      	subs	r2, r4, #3
 800a524:	420a      	tst	r2, r1
 800a526:	d000      	beq.n	800a52a <_scanf_float+0x1da>
 800a528:	e743      	b.n	800a3b2 <_scanf_float+0x62>
 800a52a:	e7dd      	b.n	800a4e8 <_scanf_float+0x198>
 800a52c:	2c02      	cmp	r4, #2
 800a52e:	d000      	beq.n	800a532 <_scanf_float+0x1e2>
 800a530:	e73f      	b.n	800a3b2 <_scanf_float+0x62>
 800a532:	2403      	movs	r4, #3
 800a534:	e7b4      	b.n	800a4a0 <_scanf_float+0x150>
 800a536:	2c06      	cmp	r4, #6
 800a538:	d000      	beq.n	800a53c <_scanf_float+0x1ec>
 800a53a:	e73a      	b.n	800a3b2 <_scanf_float+0x62>
 800a53c:	2407      	movs	r4, #7
 800a53e:	e7af      	b.n	800a4a0 <_scanf_float+0x150>
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	0591      	lsls	r1, r2, #22
 800a544:	d400      	bmi.n	800a548 <_scanf_float+0x1f8>
 800a546:	e734      	b.n	800a3b2 <_scanf_float+0x62>
 800a548:	4942      	ldr	r1, [pc, #264]	; (800a654 <_scanf_float+0x304>)
 800a54a:	400a      	ands	r2, r1
 800a54c:	603a      	str	r2, [r7, #0]
 800a54e:	9a01      	ldr	r2, [sp, #4]
 800a550:	9205      	str	r2, [sp, #20]
 800a552:	e7a5      	b.n	800a4a0 <_scanf_float+0x150>
 800a554:	21a0      	movs	r1, #160	; 0xa0
 800a556:	2080      	movs	r0, #128	; 0x80
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	00c9      	lsls	r1, r1, #3
 800a55c:	4011      	ands	r1, r2
 800a55e:	00c0      	lsls	r0, r0, #3
 800a560:	4281      	cmp	r1, r0
 800a562:	d006      	beq.n	800a572 <_scanf_float+0x222>
 800a564:	4202      	tst	r2, r0
 800a566:	d100      	bne.n	800a56a <_scanf_float+0x21a>
 800a568:	e723      	b.n	800a3b2 <_scanf_float+0x62>
 800a56a:	9901      	ldr	r1, [sp, #4]
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d100      	bne.n	800a572 <_scanf_float+0x222>
 800a570:	e726      	b.n	800a3c0 <_scanf_float+0x70>
 800a572:	0591      	lsls	r1, r2, #22
 800a574:	d404      	bmi.n	800a580 <_scanf_float+0x230>
 800a576:	9901      	ldr	r1, [sp, #4]
 800a578:	9805      	ldr	r0, [sp, #20]
 800a57a:	9509      	str	r5, [sp, #36]	; 0x24
 800a57c:	1a09      	subs	r1, r1, r0
 800a57e:	9108      	str	r1, [sp, #32]
 800a580:	4933      	ldr	r1, [pc, #204]	; (800a650 <_scanf_float+0x300>)
 800a582:	400a      	ands	r2, r1
 800a584:	21c0      	movs	r1, #192	; 0xc0
 800a586:	0049      	lsls	r1, r1, #1
 800a588:	430a      	orrs	r2, r1
 800a58a:	603a      	str	r2, [r7, #0]
 800a58c:	2200      	movs	r2, #0
 800a58e:	9201      	str	r2, [sp, #4]
 800a590:	e786      	b.n	800a4a0 <_scanf_float+0x150>
 800a592:	2203      	movs	r2, #3
 800a594:	e79e      	b.n	800a4d4 <_scanf_float+0x184>
 800a596:	23c0      	movs	r3, #192	; 0xc0
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	0031      	movs	r1, r6
 800a59c:	58fb      	ldr	r3, [r7, r3]
 800a59e:	9802      	ldr	r0, [sp, #8]
 800a5a0:	4798      	blx	r3
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d100      	bne.n	800a5a8 <_scanf_float+0x258>
 800a5a6:	e6f6      	b.n	800a396 <_scanf_float+0x46>
 800a5a8:	e703      	b.n	800a3b2 <_scanf_float+0x62>
 800a5aa:	3d01      	subs	r5, #1
 800a5ac:	593b      	ldr	r3, [r7, r4]
 800a5ae:	0032      	movs	r2, r6
 800a5b0:	7829      	ldrb	r1, [r5, #0]
 800a5b2:	9802      	ldr	r0, [sp, #8]
 800a5b4:	4798      	blx	r3
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	e707      	b.n	800a3ce <_scanf_float+0x7e>
 800a5be:	1e63      	subs	r3, r4, #1
 800a5c0:	2b06      	cmp	r3, #6
 800a5c2:	d80e      	bhi.n	800a5e2 <_scanf_float+0x292>
 800a5c4:	9503      	str	r5, [sp, #12]
 800a5c6:	2c02      	cmp	r4, #2
 800a5c8:	d920      	bls.n	800a60c <_scanf_float+0x2bc>
 800a5ca:	1b63      	subs	r3, r4, r5
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	9306      	str	r3, [sp, #24]
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	9a06      	ldr	r2, [sp, #24]
 800a5d4:	189b      	adds	r3, r3, r2
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d827      	bhi.n	800a62c <_scanf_float+0x2dc>
 800a5dc:	3c03      	subs	r4, #3
 800a5de:	b2e4      	uxtb	r4, r4
 800a5e0:	1b2d      	subs	r5, r5, r4
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	05da      	lsls	r2, r3, #23
 800a5e6:	d552      	bpl.n	800a68e <_scanf_float+0x33e>
 800a5e8:	055b      	lsls	r3, r3, #21
 800a5ea:	d535      	bpl.n	800a658 <_scanf_float+0x308>
 800a5ec:	24be      	movs	r4, #190	; 0xbe
 800a5ee:	0064      	lsls	r4, r4, #1
 800a5f0:	9b04      	ldr	r3, [sp, #16]
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	d800      	bhi.n	800a5f8 <_scanf_float+0x2a8>
 800a5f6:	e6ee      	b.n	800a3d6 <_scanf_float+0x86>
 800a5f8:	3d01      	subs	r5, #1
 800a5fa:	593b      	ldr	r3, [r7, r4]
 800a5fc:	0032      	movs	r2, r6
 800a5fe:	7829      	ldrb	r1, [r5, #0]
 800a600:	9802      	ldr	r0, [sp, #8]
 800a602:	4798      	blx	r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	3b01      	subs	r3, #1
 800a608:	613b      	str	r3, [r7, #16]
 800a60a:	e7f1      	b.n	800a5f0 <_scanf_float+0x2a0>
 800a60c:	24be      	movs	r4, #190	; 0xbe
 800a60e:	0064      	lsls	r4, r4, #1
 800a610:	9b04      	ldr	r3, [sp, #16]
 800a612:	429d      	cmp	r5, r3
 800a614:	d800      	bhi.n	800a618 <_scanf_float+0x2c8>
 800a616:	e6de      	b.n	800a3d6 <_scanf_float+0x86>
 800a618:	3d01      	subs	r5, #1
 800a61a:	593b      	ldr	r3, [r7, r4]
 800a61c:	0032      	movs	r2, r6
 800a61e:	7829      	ldrb	r1, [r5, #0]
 800a620:	9802      	ldr	r0, [sp, #8]
 800a622:	4798      	blx	r3
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	3b01      	subs	r3, #1
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	e7f1      	b.n	800a610 <_scanf_float+0x2c0>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	0032      	movs	r2, r6
 800a630:	3b01      	subs	r3, #1
 800a632:	7819      	ldrb	r1, [r3, #0]
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	23be      	movs	r3, #190	; 0xbe
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	58fb      	ldr	r3, [r7, r3]
 800a63c:	9802      	ldr	r0, [sp, #8]
 800a63e:	4798      	blx	r3
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	3b01      	subs	r3, #1
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	e7c3      	b.n	800a5d0 <_scanf_float+0x280>
 800a648:	fffffeff 	.word	0xfffffeff
 800a64c:	fffffe7f 	.word	0xfffffe7f
 800a650:	fffff87f 	.word	0xfffff87f
 800a654:	fffffd7f 	.word	0xfffffd7f
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	1e6c      	subs	r4, r5, #1
 800a65c:	7821      	ldrb	r1, [r4, #0]
 800a65e:	3b01      	subs	r3, #1
 800a660:	613b      	str	r3, [r7, #16]
 800a662:	2965      	cmp	r1, #101	; 0x65
 800a664:	d00c      	beq.n	800a680 <_scanf_float+0x330>
 800a666:	2945      	cmp	r1, #69	; 0x45
 800a668:	d00a      	beq.n	800a680 <_scanf_float+0x330>
 800a66a:	23be      	movs	r3, #190	; 0xbe
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	58fb      	ldr	r3, [r7, r3]
 800a670:	0032      	movs	r2, r6
 800a672:	9802      	ldr	r0, [sp, #8]
 800a674:	4798      	blx	r3
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	1eac      	subs	r4, r5, #2
 800a67a:	3b01      	subs	r3, #1
 800a67c:	7821      	ldrb	r1, [r4, #0]
 800a67e:	613b      	str	r3, [r7, #16]
 800a680:	23be      	movs	r3, #190	; 0xbe
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	0032      	movs	r2, r6
 800a686:	58fb      	ldr	r3, [r7, r3]
 800a688:	9802      	ldr	r0, [sp, #8]
 800a68a:	4798      	blx	r3
 800a68c:	0025      	movs	r5, r4
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	2310      	movs	r3, #16
 800a692:	0011      	movs	r1, r2
 800a694:	4019      	ands	r1, r3
 800a696:	9103      	str	r1, [sp, #12]
 800a698:	421a      	tst	r2, r3
 800a69a:	d15b      	bne.n	800a754 <_scanf_float+0x404>
 800a69c:	22c0      	movs	r2, #192	; 0xc0
 800a69e:	7029      	strb	r1, [r5, #0]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	00d2      	lsls	r2, r2, #3
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2280      	movs	r2, #128	; 0x80
 800a6a8:	00d2      	lsls	r2, r2, #3
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d11d      	bne.n	800a6ea <_scanf_float+0x39a>
 800a6ae:	9b05      	ldr	r3, [sp, #20]
 800a6b0:	9a01      	ldr	r2, [sp, #4]
 800a6b2:	9901      	ldr	r1, [sp, #4]
 800a6b4:	1a9a      	subs	r2, r3, r2
 800a6b6:	428b      	cmp	r3, r1
 800a6b8:	d124      	bne.n	800a704 <_scanf_float+0x3b4>
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	9904      	ldr	r1, [sp, #16]
 800a6be:	9802      	ldr	r0, [sp, #8]
 800a6c0:	f002 fd00 	bl	800d0c4 <_strtod_r>
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	0004      	movs	r4, r0
 800a6ca:	000d      	movs	r5, r1
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	0791      	lsls	r1, r2, #30
 800a6d0:	d525      	bpl.n	800a71e <_scanf_float+0x3ce>
 800a6d2:	9907      	ldr	r1, [sp, #28]
 800a6d4:	1d1a      	adds	r2, r3, #4
 800a6d6:	600a      	str	r2, [r1, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	601c      	str	r4, [r3, #0]
 800a6dc:	605d      	str	r5, [r3, #4]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	9803      	ldr	r0, [sp, #12]
 800a6e6:	b00b      	add	sp, #44	; 0x2c
 800a6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ea:	9b08      	ldr	r3, [sp, #32]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0e4      	beq.n	800a6ba <_scanf_float+0x36a>
 800a6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f2:	9a03      	ldr	r2, [sp, #12]
 800a6f4:	1c59      	adds	r1, r3, #1
 800a6f6:	9802      	ldr	r0, [sp, #8]
 800a6f8:	230a      	movs	r3, #10
 800a6fa:	f002 fd71 	bl	800d1e0 <_strtol_r>
 800a6fe:	9b08      	ldr	r3, [sp, #32]
 800a700:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a702:	1ac2      	subs	r2, r0, r3
 800a704:	003b      	movs	r3, r7
 800a706:	3370      	adds	r3, #112	; 0x70
 800a708:	33ff      	adds	r3, #255	; 0xff
 800a70a:	429d      	cmp	r5, r3
 800a70c:	d302      	bcc.n	800a714 <_scanf_float+0x3c4>
 800a70e:	003d      	movs	r5, r7
 800a710:	356f      	adds	r5, #111	; 0x6f
 800a712:	35ff      	adds	r5, #255	; 0xff
 800a714:	0028      	movs	r0, r5
 800a716:	4910      	ldr	r1, [pc, #64]	; (800a758 <_scanf_float+0x408>)
 800a718:	f000 f8e6 	bl	800a8e8 <siprintf>
 800a71c:	e7cd      	b.n	800a6ba <_scanf_float+0x36a>
 800a71e:	1d19      	adds	r1, r3, #4
 800a720:	0752      	lsls	r2, r2, #29
 800a722:	d502      	bpl.n	800a72a <_scanf_float+0x3da>
 800a724:	9a07      	ldr	r2, [sp, #28]
 800a726:	6011      	str	r1, [r2, #0]
 800a728:	e7d6      	b.n	800a6d8 <_scanf_float+0x388>
 800a72a:	9a07      	ldr	r2, [sp, #28]
 800a72c:	0020      	movs	r0, r4
 800a72e:	6011      	str	r1, [r2, #0]
 800a730:	681e      	ldr	r6, [r3, #0]
 800a732:	0022      	movs	r2, r4
 800a734:	002b      	movs	r3, r5
 800a736:	0029      	movs	r1, r5
 800a738:	f7f7 fcc4 	bl	80020c4 <__aeabi_dcmpun>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d004      	beq.n	800a74a <_scanf_float+0x3fa>
 800a740:	4806      	ldr	r0, [pc, #24]	; (800a75c <_scanf_float+0x40c>)
 800a742:	f000 fa37 	bl	800abb4 <nanf>
 800a746:	6030      	str	r0, [r6, #0]
 800a748:	e7c9      	b.n	800a6de <_scanf_float+0x38e>
 800a74a:	0020      	movs	r0, r4
 800a74c:	0029      	movs	r1, r5
 800a74e:	f7f7 fd63 	bl	8002218 <__aeabi_d2f>
 800a752:	e7f8      	b.n	800a746 <_scanf_float+0x3f6>
 800a754:	2300      	movs	r3, #0
 800a756:	e63f      	b.n	800a3d8 <_scanf_float+0x88>
 800a758:	0800e644 	.word	0x0800e644
 800a75c:	0800e9d5 	.word	0x0800e9d5

0800a760 <std>:
 800a760:	2300      	movs	r3, #0
 800a762:	b510      	push	{r4, lr}
 800a764:	0004      	movs	r4, r0
 800a766:	6003      	str	r3, [r0, #0]
 800a768:	6043      	str	r3, [r0, #4]
 800a76a:	6083      	str	r3, [r0, #8]
 800a76c:	8181      	strh	r1, [r0, #12]
 800a76e:	6643      	str	r3, [r0, #100]	; 0x64
 800a770:	81c2      	strh	r2, [r0, #14]
 800a772:	6103      	str	r3, [r0, #16]
 800a774:	6143      	str	r3, [r0, #20]
 800a776:	6183      	str	r3, [r0, #24]
 800a778:	0019      	movs	r1, r3
 800a77a:	2208      	movs	r2, #8
 800a77c:	305c      	adds	r0, #92	; 0x5c
 800a77e:	f000 f91f 	bl	800a9c0 <memset>
 800a782:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <std+0x50>)
 800a784:	6224      	str	r4, [r4, #32]
 800a786:	6263      	str	r3, [r4, #36]	; 0x24
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <std+0x54>)
 800a78a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <std+0x58>)
 800a78e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a790:	4b0a      	ldr	r3, [pc, #40]	; (800a7bc <std+0x5c>)
 800a792:	6323      	str	r3, [r4, #48]	; 0x30
 800a794:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <std+0x60>)
 800a796:	429c      	cmp	r4, r3
 800a798:	d005      	beq.n	800a7a6 <std+0x46>
 800a79a:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <std+0x64>)
 800a79c:	429c      	cmp	r4, r3
 800a79e:	d002      	beq.n	800a7a6 <std+0x46>
 800a7a0:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <std+0x68>)
 800a7a2:	429c      	cmp	r4, r3
 800a7a4:	d103      	bne.n	800a7ae <std+0x4e>
 800a7a6:	0020      	movs	r0, r4
 800a7a8:	3058      	adds	r0, #88	; 0x58
 800a7aa:	f000 f9eb 	bl	800ab84 <__retarget_lock_init_recursive>
 800a7ae:	bd10      	pop	{r4, pc}
 800a7b0:	0800a929 	.word	0x0800a929
 800a7b4:	0800a951 	.word	0x0800a951
 800a7b8:	0800a989 	.word	0x0800a989
 800a7bc:	0800a9b5 	.word	0x0800a9b5
 800a7c0:	200020cc 	.word	0x200020cc
 800a7c4:	20002134 	.word	0x20002134
 800a7c8:	2000219c 	.word	0x2000219c

0800a7cc <stdio_exit_handler>:
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	4a03      	ldr	r2, [pc, #12]	; (800a7dc <stdio_exit_handler+0x10>)
 800a7d0:	4903      	ldr	r1, [pc, #12]	; (800a7e0 <stdio_exit_handler+0x14>)
 800a7d2:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <stdio_exit_handler+0x18>)
 800a7d4:	f000 f86c 	bl	800a8b0 <_fwalk_sglue>
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	20000010 	.word	0x20000010
 800a7e0:	0800d5c1 	.word	0x0800d5c1
 800a7e4:	2000001c 	.word	0x2000001c

0800a7e8 <cleanup_stdio>:
 800a7e8:	6841      	ldr	r1, [r0, #4]
 800a7ea:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <cleanup_stdio+0x30>)
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	0004      	movs	r4, r0
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	d001      	beq.n	800a7f8 <cleanup_stdio+0x10>
 800a7f4:	f002 fee4 	bl	800d5c0 <_fflush_r>
 800a7f8:	68a1      	ldr	r1, [r4, #8]
 800a7fa:	4b08      	ldr	r3, [pc, #32]	; (800a81c <cleanup_stdio+0x34>)
 800a7fc:	4299      	cmp	r1, r3
 800a7fe:	d002      	beq.n	800a806 <cleanup_stdio+0x1e>
 800a800:	0020      	movs	r0, r4
 800a802:	f002 fedd 	bl	800d5c0 <_fflush_r>
 800a806:	68e1      	ldr	r1, [r4, #12]
 800a808:	4b05      	ldr	r3, [pc, #20]	; (800a820 <cleanup_stdio+0x38>)
 800a80a:	4299      	cmp	r1, r3
 800a80c:	d002      	beq.n	800a814 <cleanup_stdio+0x2c>
 800a80e:	0020      	movs	r0, r4
 800a810:	f002 fed6 	bl	800d5c0 <_fflush_r>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	46c0      	nop			; (mov r8, r8)
 800a818:	200020cc 	.word	0x200020cc
 800a81c:	20002134 	.word	0x20002134
 800a820:	2000219c 	.word	0x2000219c

0800a824 <global_stdio_init.part.0>:
 800a824:	b510      	push	{r4, lr}
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <global_stdio_init.part.0+0x28>)
 800a828:	4a09      	ldr	r2, [pc, #36]	; (800a850 <global_stdio_init.part.0+0x2c>)
 800a82a:	2104      	movs	r1, #4
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	4809      	ldr	r0, [pc, #36]	; (800a854 <global_stdio_init.part.0+0x30>)
 800a830:	2200      	movs	r2, #0
 800a832:	f7ff ff95 	bl	800a760 <std>
 800a836:	2201      	movs	r2, #1
 800a838:	2109      	movs	r1, #9
 800a83a:	4807      	ldr	r0, [pc, #28]	; (800a858 <global_stdio_init.part.0+0x34>)
 800a83c:	f7ff ff90 	bl	800a760 <std>
 800a840:	2202      	movs	r2, #2
 800a842:	2112      	movs	r1, #18
 800a844:	4805      	ldr	r0, [pc, #20]	; (800a85c <global_stdio_init.part.0+0x38>)
 800a846:	f7ff ff8b 	bl	800a760 <std>
 800a84a:	bd10      	pop	{r4, pc}
 800a84c:	20002204 	.word	0x20002204
 800a850:	0800a7cd 	.word	0x0800a7cd
 800a854:	200020cc 	.word	0x200020cc
 800a858:	20002134 	.word	0x20002134
 800a85c:	2000219c 	.word	0x2000219c

0800a860 <__sfp_lock_acquire>:
 800a860:	b510      	push	{r4, lr}
 800a862:	4802      	ldr	r0, [pc, #8]	; (800a86c <__sfp_lock_acquire+0xc>)
 800a864:	f000 f98f 	bl	800ab86 <__retarget_lock_acquire_recursive>
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	2000220d 	.word	0x2000220d

0800a870 <__sfp_lock_release>:
 800a870:	b510      	push	{r4, lr}
 800a872:	4802      	ldr	r0, [pc, #8]	; (800a87c <__sfp_lock_release+0xc>)
 800a874:	f000 f988 	bl	800ab88 <__retarget_lock_release_recursive>
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	2000220d 	.word	0x2000220d

0800a880 <__sinit>:
 800a880:	b510      	push	{r4, lr}
 800a882:	0004      	movs	r4, r0
 800a884:	f7ff ffec 	bl	800a860 <__sfp_lock_acquire>
 800a888:	6a23      	ldr	r3, [r4, #32]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <__sinit+0x14>
 800a88e:	f7ff ffef 	bl	800a870 <__sfp_lock_release>
 800a892:	bd10      	pop	{r4, pc}
 800a894:	4b04      	ldr	r3, [pc, #16]	; (800a8a8 <__sinit+0x28>)
 800a896:	6223      	str	r3, [r4, #32]
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <__sinit+0x2c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1f6      	bne.n	800a88e <__sinit+0xe>
 800a8a0:	f7ff ffc0 	bl	800a824 <global_stdio_init.part.0>
 800a8a4:	e7f3      	b.n	800a88e <__sinit+0xe>
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	0800a7e9 	.word	0x0800a7e9
 800a8ac:	20002204 	.word	0x20002204

0800a8b0 <_fwalk_sglue>:
 800a8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8b2:	0014      	movs	r4, r2
 800a8b4:	2600      	movs	r6, #0
 800a8b6:	9000      	str	r0, [sp, #0]
 800a8b8:	9101      	str	r1, [sp, #4]
 800a8ba:	68a5      	ldr	r5, [r4, #8]
 800a8bc:	6867      	ldr	r7, [r4, #4]
 800a8be:	3f01      	subs	r7, #1
 800a8c0:	d504      	bpl.n	800a8cc <_fwalk_sglue+0x1c>
 800a8c2:	6824      	ldr	r4, [r4, #0]
 800a8c4:	2c00      	cmp	r4, #0
 800a8c6:	d1f8      	bne.n	800a8ba <_fwalk_sglue+0xa>
 800a8c8:	0030      	movs	r0, r6
 800a8ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8cc:	89ab      	ldrh	r3, [r5, #12]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d908      	bls.n	800a8e4 <_fwalk_sglue+0x34>
 800a8d2:	220e      	movs	r2, #14
 800a8d4:	5eab      	ldrsh	r3, [r5, r2]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	d004      	beq.n	800a8e4 <_fwalk_sglue+0x34>
 800a8da:	0029      	movs	r1, r5
 800a8dc:	9800      	ldr	r0, [sp, #0]
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	4798      	blx	r3
 800a8e2:	4306      	orrs	r6, r0
 800a8e4:	3568      	adds	r5, #104	; 0x68
 800a8e6:	e7ea      	b.n	800a8be <_fwalk_sglue+0xe>

0800a8e8 <siprintf>:
 800a8e8:	b40e      	push	{r1, r2, r3}
 800a8ea:	b500      	push	{lr}
 800a8ec:	490b      	ldr	r1, [pc, #44]	; (800a91c <siprintf+0x34>)
 800a8ee:	b09c      	sub	sp, #112	; 0x70
 800a8f0:	ab1d      	add	r3, sp, #116	; 0x74
 800a8f2:	9002      	str	r0, [sp, #8]
 800a8f4:	9006      	str	r0, [sp, #24]
 800a8f6:	9107      	str	r1, [sp, #28]
 800a8f8:	9104      	str	r1, [sp, #16]
 800a8fa:	4809      	ldr	r0, [pc, #36]	; (800a920 <siprintf+0x38>)
 800a8fc:	4909      	ldr	r1, [pc, #36]	; (800a924 <siprintf+0x3c>)
 800a8fe:	cb04      	ldmia	r3!, {r2}
 800a900:	9105      	str	r1, [sp, #20]
 800a902:	6800      	ldr	r0, [r0, #0]
 800a904:	a902      	add	r1, sp, #8
 800a906:	9301      	str	r3, [sp, #4]
 800a908:	f002 fcd0 	bl	800d2ac <_svfiprintf_r>
 800a90c:	2200      	movs	r2, #0
 800a90e:	9b02      	ldr	r3, [sp, #8]
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	b01c      	add	sp, #112	; 0x70
 800a914:	bc08      	pop	{r3}
 800a916:	b003      	add	sp, #12
 800a918:	4718      	bx	r3
 800a91a:	46c0      	nop			; (mov r8, r8)
 800a91c:	7fffffff 	.word	0x7fffffff
 800a920:	20000068 	.word	0x20000068
 800a924:	ffff0208 	.word	0xffff0208

0800a928 <__sread>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	000c      	movs	r4, r1
 800a92c:	250e      	movs	r5, #14
 800a92e:	5f49      	ldrsh	r1, [r1, r5]
 800a930:	f000 f8d6 	bl	800aae0 <_read_r>
 800a934:	2800      	cmp	r0, #0
 800a936:	db03      	blt.n	800a940 <__sread+0x18>
 800a938:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a93a:	181b      	adds	r3, r3, r0
 800a93c:	6563      	str	r3, [r4, #84]	; 0x54
 800a93e:	bd70      	pop	{r4, r5, r6, pc}
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	4a02      	ldr	r2, [pc, #8]	; (800a94c <__sread+0x24>)
 800a944:	4013      	ands	r3, r2
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	e7f9      	b.n	800a93e <__sread+0x16>
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	ffffefff 	.word	0xffffefff

0800a950 <__swrite>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	001f      	movs	r7, r3
 800a954:	898b      	ldrh	r3, [r1, #12]
 800a956:	0005      	movs	r5, r0
 800a958:	000c      	movs	r4, r1
 800a95a:	0016      	movs	r6, r2
 800a95c:	05db      	lsls	r3, r3, #23
 800a95e:	d505      	bpl.n	800a96c <__swrite+0x1c>
 800a960:	230e      	movs	r3, #14
 800a962:	5ec9      	ldrsh	r1, [r1, r3]
 800a964:	2200      	movs	r2, #0
 800a966:	2302      	movs	r3, #2
 800a968:	f000 f8a6 	bl	800aab8 <_lseek_r>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	4a05      	ldr	r2, [pc, #20]	; (800a984 <__swrite+0x34>)
 800a970:	0028      	movs	r0, r5
 800a972:	4013      	ands	r3, r2
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	0032      	movs	r2, r6
 800a978:	230e      	movs	r3, #14
 800a97a:	5ee1      	ldrsh	r1, [r4, r3]
 800a97c:	003b      	movs	r3, r7
 800a97e:	f000 f8c3 	bl	800ab08 <_write_r>
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a984:	ffffefff 	.word	0xffffefff

0800a988 <__sseek>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	000c      	movs	r4, r1
 800a98c:	250e      	movs	r5, #14
 800a98e:	5f49      	ldrsh	r1, [r1, r5]
 800a990:	f000 f892 	bl	800aab8 <_lseek_r>
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	1c42      	adds	r2, r0, #1
 800a998:	d103      	bne.n	800a9a2 <__sseek+0x1a>
 800a99a:	4a05      	ldr	r2, [pc, #20]	; (800a9b0 <__sseek+0x28>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	81a3      	strh	r3, [r4, #12]
 800a9a0:	bd70      	pop	{r4, r5, r6, pc}
 800a9a2:	2280      	movs	r2, #128	; 0x80
 800a9a4:	0152      	lsls	r2, r2, #5
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	81a3      	strh	r3, [r4, #12]
 800a9aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a9ac:	e7f8      	b.n	800a9a0 <__sseek+0x18>
 800a9ae:	46c0      	nop			; (mov r8, r8)
 800a9b0:	ffffefff 	.word	0xffffefff

0800a9b4 <__sclose>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	230e      	movs	r3, #14
 800a9b8:	5ec9      	ldrsh	r1, [r1, r3]
 800a9ba:	f000 f80d 	bl	800a9d8 <_close_r>
 800a9be:	bd10      	pop	{r4, pc}

0800a9c0 <memset>:
 800a9c0:	0003      	movs	r3, r0
 800a9c2:	1882      	adds	r2, r0, r2
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d100      	bne.n	800a9ca <memset+0xa>
 800a9c8:	4770      	bx	lr
 800a9ca:	7019      	strb	r1, [r3, #0]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	e7f9      	b.n	800a9c4 <memset+0x4>

0800a9d0 <_localeconv_r>:
 800a9d0:	4800      	ldr	r0, [pc, #0]	; (800a9d4 <_localeconv_r+0x4>)
 800a9d2:	4770      	bx	lr
 800a9d4:	2000015c 	.word	0x2000015c

0800a9d8 <_close_r>:
 800a9d8:	2300      	movs	r3, #0
 800a9da:	b570      	push	{r4, r5, r6, lr}
 800a9dc:	4d06      	ldr	r5, [pc, #24]	; (800a9f8 <_close_r+0x20>)
 800a9de:	0004      	movs	r4, r0
 800a9e0:	0008      	movs	r0, r1
 800a9e2:	602b      	str	r3, [r5, #0]
 800a9e4:	f7f8 fd83 	bl	80034ee <_close>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d103      	bne.n	800a9f4 <_close_r+0x1c>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d000      	beq.n	800a9f4 <_close_r+0x1c>
 800a9f2:	6023      	str	r3, [r4, #0]
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}
 800a9f6:	46c0      	nop			; (mov r8, r8)
 800a9f8:	20002208 	.word	0x20002208

0800a9fc <_reclaim_reent>:
 800a9fc:	4b2d      	ldr	r3, [pc, #180]	; (800aab4 <_reclaim_reent+0xb8>)
 800a9fe:	b570      	push	{r4, r5, r6, lr}
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	0004      	movs	r4, r0
 800aa04:	4283      	cmp	r3, r0
 800aa06:	d042      	beq.n	800aa8e <_reclaim_reent+0x92>
 800aa08:	69c3      	ldr	r3, [r0, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00a      	beq.n	800aa24 <_reclaim_reent+0x28>
 800aa0e:	2500      	movs	r5, #0
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	42ab      	cmp	r3, r5
 800aa14:	d140      	bne.n	800aa98 <_reclaim_reent+0x9c>
 800aa16:	69e3      	ldr	r3, [r4, #28]
 800aa18:	6819      	ldr	r1, [r3, #0]
 800aa1a:	2900      	cmp	r1, #0
 800aa1c:	d002      	beq.n	800aa24 <_reclaim_reent+0x28>
 800aa1e:	0020      	movs	r0, r4
 800aa20:	f000 ff6a 	bl	800b8f8 <_free_r>
 800aa24:	6961      	ldr	r1, [r4, #20]
 800aa26:	2900      	cmp	r1, #0
 800aa28:	d002      	beq.n	800aa30 <_reclaim_reent+0x34>
 800aa2a:	0020      	movs	r0, r4
 800aa2c:	f000 ff64 	bl	800b8f8 <_free_r>
 800aa30:	69e1      	ldr	r1, [r4, #28]
 800aa32:	2900      	cmp	r1, #0
 800aa34:	d002      	beq.n	800aa3c <_reclaim_reent+0x40>
 800aa36:	0020      	movs	r0, r4
 800aa38:	f000 ff5e 	bl	800b8f8 <_free_r>
 800aa3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa3e:	2900      	cmp	r1, #0
 800aa40:	d002      	beq.n	800aa48 <_reclaim_reent+0x4c>
 800aa42:	0020      	movs	r0, r4
 800aa44:	f000 ff58 	bl	800b8f8 <_free_r>
 800aa48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	d002      	beq.n	800aa54 <_reclaim_reent+0x58>
 800aa4e:	0020      	movs	r0, r4
 800aa50:	f000 ff52 	bl	800b8f8 <_free_r>
 800aa54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa56:	2900      	cmp	r1, #0
 800aa58:	d002      	beq.n	800aa60 <_reclaim_reent+0x64>
 800aa5a:	0020      	movs	r0, r4
 800aa5c:	f000 ff4c 	bl	800b8f8 <_free_r>
 800aa60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d002      	beq.n	800aa6c <_reclaim_reent+0x70>
 800aa66:	0020      	movs	r0, r4
 800aa68:	f000 ff46 	bl	800b8f8 <_free_r>
 800aa6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	d002      	beq.n	800aa78 <_reclaim_reent+0x7c>
 800aa72:	0020      	movs	r0, r4
 800aa74:	f000 ff40 	bl	800b8f8 <_free_r>
 800aa78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	d002      	beq.n	800aa84 <_reclaim_reent+0x88>
 800aa7e:	0020      	movs	r0, r4
 800aa80:	f000 ff3a 	bl	800b8f8 <_free_r>
 800aa84:	6a23      	ldr	r3, [r4, #32]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <_reclaim_reent+0x92>
 800aa8a:	0020      	movs	r0, r4
 800aa8c:	4798      	blx	r3
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	5949      	ldr	r1, [r1, r5]
 800aa92:	2900      	cmp	r1, #0
 800aa94:	d108      	bne.n	800aaa8 <_reclaim_reent+0xac>
 800aa96:	3504      	adds	r5, #4
 800aa98:	69e3      	ldr	r3, [r4, #28]
 800aa9a:	68d9      	ldr	r1, [r3, #12]
 800aa9c:	2d80      	cmp	r5, #128	; 0x80
 800aa9e:	d1f7      	bne.n	800aa90 <_reclaim_reent+0x94>
 800aaa0:	0020      	movs	r0, r4
 800aaa2:	f000 ff29 	bl	800b8f8 <_free_r>
 800aaa6:	e7b6      	b.n	800aa16 <_reclaim_reent+0x1a>
 800aaa8:	680e      	ldr	r6, [r1, #0]
 800aaaa:	0020      	movs	r0, r4
 800aaac:	f000 ff24 	bl	800b8f8 <_free_r>
 800aab0:	0031      	movs	r1, r6
 800aab2:	e7ee      	b.n	800aa92 <_reclaim_reent+0x96>
 800aab4:	20000068 	.word	0x20000068

0800aab8 <_lseek_r>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	0004      	movs	r4, r0
 800aabc:	0008      	movs	r0, r1
 800aabe:	0011      	movs	r1, r2
 800aac0:	001a      	movs	r2, r3
 800aac2:	2300      	movs	r3, #0
 800aac4:	4d05      	ldr	r5, [pc, #20]	; (800aadc <_lseek_r+0x24>)
 800aac6:	602b      	str	r3, [r5, #0]
 800aac8:	f7f8 fd32 	bl	8003530 <_lseek>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d103      	bne.n	800aad8 <_lseek_r+0x20>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d000      	beq.n	800aad8 <_lseek_r+0x20>
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	bd70      	pop	{r4, r5, r6, pc}
 800aada:	46c0      	nop			; (mov r8, r8)
 800aadc:	20002208 	.word	0x20002208

0800aae0 <_read_r>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	0004      	movs	r4, r0
 800aae4:	0008      	movs	r0, r1
 800aae6:	0011      	movs	r1, r2
 800aae8:	001a      	movs	r2, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	4d05      	ldr	r5, [pc, #20]	; (800ab04 <_read_r+0x24>)
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	f7f8 fcc4 	bl	800347c <_read>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d103      	bne.n	800ab00 <_read_r+0x20>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d000      	beq.n	800ab00 <_read_r+0x20>
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	bd70      	pop	{r4, r5, r6, pc}
 800ab02:	46c0      	nop			; (mov r8, r8)
 800ab04:	20002208 	.word	0x20002208

0800ab08 <_write_r>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	0004      	movs	r4, r0
 800ab0c:	0008      	movs	r0, r1
 800ab0e:	0011      	movs	r1, r2
 800ab10:	001a      	movs	r2, r3
 800ab12:	2300      	movs	r3, #0
 800ab14:	4d05      	ldr	r5, [pc, #20]	; (800ab2c <_write_r+0x24>)
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	f7f8 fccd 	bl	80034b6 <_write>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d103      	bne.n	800ab28 <_write_r+0x20>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d000      	beq.n	800ab28 <_write_r+0x20>
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	bd70      	pop	{r4, r5, r6, pc}
 800ab2a:	46c0      	nop			; (mov r8, r8)
 800ab2c:	20002208 	.word	0x20002208

0800ab30 <__errno>:
 800ab30:	4b01      	ldr	r3, [pc, #4]	; (800ab38 <__errno+0x8>)
 800ab32:	6818      	ldr	r0, [r3, #0]
 800ab34:	4770      	bx	lr
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	20000068 	.word	0x20000068

0800ab3c <__libc_init_array>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	2600      	movs	r6, #0
 800ab40:	4c0c      	ldr	r4, [pc, #48]	; (800ab74 <__libc_init_array+0x38>)
 800ab42:	4d0d      	ldr	r5, [pc, #52]	; (800ab78 <__libc_init_array+0x3c>)
 800ab44:	1b64      	subs	r4, r4, r5
 800ab46:	10a4      	asrs	r4, r4, #2
 800ab48:	42a6      	cmp	r6, r4
 800ab4a:	d109      	bne.n	800ab60 <__libc_init_array+0x24>
 800ab4c:	2600      	movs	r6, #0
 800ab4e:	f003 fc71 	bl	800e434 <_init>
 800ab52:	4c0a      	ldr	r4, [pc, #40]	; (800ab7c <__libc_init_array+0x40>)
 800ab54:	4d0a      	ldr	r5, [pc, #40]	; (800ab80 <__libc_init_array+0x44>)
 800ab56:	1b64      	subs	r4, r4, r5
 800ab58:	10a4      	asrs	r4, r4, #2
 800ab5a:	42a6      	cmp	r6, r4
 800ab5c:	d105      	bne.n	800ab6a <__libc_init_array+0x2e>
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}
 800ab60:	00b3      	lsls	r3, r6, #2
 800ab62:	58eb      	ldr	r3, [r5, r3]
 800ab64:	4798      	blx	r3
 800ab66:	3601      	adds	r6, #1
 800ab68:	e7ee      	b.n	800ab48 <__libc_init_array+0xc>
 800ab6a:	00b3      	lsls	r3, r6, #2
 800ab6c:	58eb      	ldr	r3, [r5, r3]
 800ab6e:	4798      	blx	r3
 800ab70:	3601      	adds	r6, #1
 800ab72:	e7f2      	b.n	800ab5a <__libc_init_array+0x1e>
 800ab74:	0800ea38 	.word	0x0800ea38
 800ab78:	0800ea38 	.word	0x0800ea38
 800ab7c:	0800ea3c 	.word	0x0800ea3c
 800ab80:	0800ea38 	.word	0x0800ea38

0800ab84 <__retarget_lock_init_recursive>:
 800ab84:	4770      	bx	lr

0800ab86 <__retarget_lock_acquire_recursive>:
 800ab86:	4770      	bx	lr

0800ab88 <__retarget_lock_release_recursive>:
 800ab88:	4770      	bx	lr

0800ab8a <memchr>:
 800ab8a:	b2c9      	uxtb	r1, r1
 800ab8c:	1882      	adds	r2, r0, r2
 800ab8e:	4290      	cmp	r0, r2
 800ab90:	d101      	bne.n	800ab96 <memchr+0xc>
 800ab92:	2000      	movs	r0, #0
 800ab94:	4770      	bx	lr
 800ab96:	7803      	ldrb	r3, [r0, #0]
 800ab98:	428b      	cmp	r3, r1
 800ab9a:	d0fb      	beq.n	800ab94 <memchr+0xa>
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	e7f6      	b.n	800ab8e <memchr+0x4>

0800aba0 <memcpy>:
 800aba0:	2300      	movs	r3, #0
 800aba2:	b510      	push	{r4, lr}
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d100      	bne.n	800abaa <memcpy+0xa>
 800aba8:	bd10      	pop	{r4, pc}
 800abaa:	5ccc      	ldrb	r4, [r1, r3]
 800abac:	54c4      	strb	r4, [r0, r3]
 800abae:	3301      	adds	r3, #1
 800abb0:	e7f8      	b.n	800aba4 <memcpy+0x4>
	...

0800abb4 <nanf>:
 800abb4:	4800      	ldr	r0, [pc, #0]	; (800abb8 <nanf+0x4>)
 800abb6:	4770      	bx	lr
 800abb8:	7fc00000 	.word	0x7fc00000

0800abbc <quorem>:
 800abbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abbe:	6902      	ldr	r2, [r0, #16]
 800abc0:	690b      	ldr	r3, [r1, #16]
 800abc2:	b089      	sub	sp, #36	; 0x24
 800abc4:	0007      	movs	r7, r0
 800abc6:	9104      	str	r1, [sp, #16]
 800abc8:	2000      	movs	r0, #0
 800abca:	429a      	cmp	r2, r3
 800abcc:	db69      	blt.n	800aca2 <quorem+0xe6>
 800abce:	3b01      	subs	r3, #1
 800abd0:	009c      	lsls	r4, r3, #2
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	000b      	movs	r3, r1
 800abd6:	3314      	adds	r3, #20
 800abd8:	9306      	str	r3, [sp, #24]
 800abda:	191b      	adds	r3, r3, r4
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	003b      	movs	r3, r7
 800abe0:	3314      	adds	r3, #20
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	191c      	adds	r4, r3, r4
 800abe6:	9b05      	ldr	r3, [sp, #20]
 800abe8:	6826      	ldr	r6, [r4, #0]
 800abea:	681d      	ldr	r5, [r3, #0]
 800abec:	0030      	movs	r0, r6
 800abee:	3501      	adds	r5, #1
 800abf0:	0029      	movs	r1, r5
 800abf2:	f7f5 faa5 	bl	8000140 <__udivsi3>
 800abf6:	9002      	str	r0, [sp, #8]
 800abf8:	42ae      	cmp	r6, r5
 800abfa:	d329      	bcc.n	800ac50 <quorem+0x94>
 800abfc:	9b06      	ldr	r3, [sp, #24]
 800abfe:	2600      	movs	r6, #0
 800ac00:	469c      	mov	ip, r3
 800ac02:	9d03      	ldr	r5, [sp, #12]
 800ac04:	9606      	str	r6, [sp, #24]
 800ac06:	4662      	mov	r2, ip
 800ac08:	ca08      	ldmia	r2!, {r3}
 800ac0a:	6828      	ldr	r0, [r5, #0]
 800ac0c:	4694      	mov	ip, r2
 800ac0e:	9a02      	ldr	r2, [sp, #8]
 800ac10:	b299      	uxth	r1, r3
 800ac12:	4351      	muls	r1, r2
 800ac14:	0c1b      	lsrs	r3, r3, #16
 800ac16:	4353      	muls	r3, r2
 800ac18:	1989      	adds	r1, r1, r6
 800ac1a:	0c0a      	lsrs	r2, r1, #16
 800ac1c:	189b      	adds	r3, r3, r2
 800ac1e:	9307      	str	r3, [sp, #28]
 800ac20:	0c1e      	lsrs	r6, r3, #16
 800ac22:	9b06      	ldr	r3, [sp, #24]
 800ac24:	b282      	uxth	r2, r0
 800ac26:	18d2      	adds	r2, r2, r3
 800ac28:	466b      	mov	r3, sp
 800ac2a:	b289      	uxth	r1, r1
 800ac2c:	8b9b      	ldrh	r3, [r3, #28]
 800ac2e:	1a52      	subs	r2, r2, r1
 800ac30:	0c01      	lsrs	r1, r0, #16
 800ac32:	1ac9      	subs	r1, r1, r3
 800ac34:	1413      	asrs	r3, r2, #16
 800ac36:	18cb      	adds	r3, r1, r3
 800ac38:	1419      	asrs	r1, r3, #16
 800ac3a:	b292      	uxth	r2, r2
 800ac3c:	041b      	lsls	r3, r3, #16
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	c508      	stmia	r5!, {r3}
 800ac42:	9b05      	ldr	r3, [sp, #20]
 800ac44:	9106      	str	r1, [sp, #24]
 800ac46:	4563      	cmp	r3, ip
 800ac48:	d2dd      	bcs.n	800ac06 <quorem+0x4a>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d030      	beq.n	800acb2 <quorem+0xf6>
 800ac50:	0038      	movs	r0, r7
 800ac52:	9904      	ldr	r1, [sp, #16]
 800ac54:	f001 fa2a 	bl	800c0ac <__mcmp>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	db21      	blt.n	800aca0 <quorem+0xe4>
 800ac5c:	0038      	movs	r0, r7
 800ac5e:	2600      	movs	r6, #0
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	9c04      	ldr	r4, [sp, #16]
 800ac64:	3301      	adds	r3, #1
 800ac66:	9302      	str	r3, [sp, #8]
 800ac68:	3014      	adds	r0, #20
 800ac6a:	3414      	adds	r4, #20
 800ac6c:	6803      	ldr	r3, [r0, #0]
 800ac6e:	cc02      	ldmia	r4!, {r1}
 800ac70:	b29d      	uxth	r5, r3
 800ac72:	19ad      	adds	r5, r5, r6
 800ac74:	b28a      	uxth	r2, r1
 800ac76:	1aaa      	subs	r2, r5, r2
 800ac78:	0c09      	lsrs	r1, r1, #16
 800ac7a:	0c1b      	lsrs	r3, r3, #16
 800ac7c:	1a5b      	subs	r3, r3, r1
 800ac7e:	1411      	asrs	r1, r2, #16
 800ac80:	185b      	adds	r3, r3, r1
 800ac82:	141e      	asrs	r6, r3, #16
 800ac84:	b292      	uxth	r2, r2
 800ac86:	041b      	lsls	r3, r3, #16
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	c008      	stmia	r0!, {r3}
 800ac8c:	9b05      	ldr	r3, [sp, #20]
 800ac8e:	42a3      	cmp	r3, r4
 800ac90:	d2ec      	bcs.n	800ac6c <quorem+0xb0>
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	9a03      	ldr	r2, [sp, #12]
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	18d3      	adds	r3, r2, r3
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	2a00      	cmp	r2, #0
 800ac9e:	d015      	beq.n	800accc <quorem+0x110>
 800aca0:	9802      	ldr	r0, [sp, #8]
 800aca2:	b009      	add	sp, #36	; 0x24
 800aca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <quorem+0xfe>
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	3b01      	subs	r3, #1
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	3c04      	subs	r4, #4
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	d3f5      	bcc.n	800aca6 <quorem+0xea>
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	e7c7      	b.n	800ac50 <quorem+0x94>
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	2a00      	cmp	r2, #0
 800acc4:	d106      	bne.n	800acd4 <quorem+0x118>
 800acc6:	9a01      	ldr	r2, [sp, #4]
 800acc8:	3a01      	subs	r2, #1
 800acca:	9201      	str	r2, [sp, #4]
 800accc:	9a03      	ldr	r2, [sp, #12]
 800acce:	3b04      	subs	r3, #4
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d3f5      	bcc.n	800acc0 <quorem+0x104>
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	613b      	str	r3, [r7, #16]
 800acd8:	e7e2      	b.n	800aca0 <quorem+0xe4>
	...

0800acdc <_dtoa_r>:
 800acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acde:	0014      	movs	r4, r2
 800ace0:	001d      	movs	r5, r3
 800ace2:	69c6      	ldr	r6, [r0, #28]
 800ace4:	b09d      	sub	sp, #116	; 0x74
 800ace6:	9408      	str	r4, [sp, #32]
 800ace8:	9509      	str	r5, [sp, #36]	; 0x24
 800acea:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800acec:	9004      	str	r0, [sp, #16]
 800acee:	2e00      	cmp	r6, #0
 800acf0:	d10f      	bne.n	800ad12 <_dtoa_r+0x36>
 800acf2:	2010      	movs	r0, #16
 800acf4:	f000 fe4a 	bl	800b98c <malloc>
 800acf8:	9b04      	ldr	r3, [sp, #16]
 800acfa:	1e02      	subs	r2, r0, #0
 800acfc:	61d8      	str	r0, [r3, #28]
 800acfe:	d104      	bne.n	800ad0a <_dtoa_r+0x2e>
 800ad00:	21ef      	movs	r1, #239	; 0xef
 800ad02:	4bc6      	ldr	r3, [pc, #792]	; (800b01c <_dtoa_r+0x340>)
 800ad04:	48c6      	ldr	r0, [pc, #792]	; (800b020 <_dtoa_r+0x344>)
 800ad06:	f002 fcc3 	bl	800d690 <__assert_func>
 800ad0a:	6046      	str	r6, [r0, #4]
 800ad0c:	6086      	str	r6, [r0, #8]
 800ad0e:	6006      	str	r6, [r0, #0]
 800ad10:	60c6      	str	r6, [r0, #12]
 800ad12:	9b04      	ldr	r3, [sp, #16]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	6819      	ldr	r1, [r3, #0]
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	d00b      	beq.n	800ad34 <_dtoa_r+0x58>
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4093      	lsls	r3, r2
 800ad22:	604a      	str	r2, [r1, #4]
 800ad24:	608b      	str	r3, [r1, #8]
 800ad26:	9804      	ldr	r0, [sp, #16]
 800ad28:	f000 ff32 	bl	800bb90 <_Bfree>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	9b04      	ldr	r3, [sp, #16]
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	da1e      	bge.n	800ad76 <_dtoa_r+0x9a>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	006b      	lsls	r3, r5, #1
 800ad3e:	085b      	lsrs	r3, r3, #1
 800ad40:	9309      	str	r3, [sp, #36]	; 0x24
 800ad42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad44:	4bb7      	ldr	r3, [pc, #732]	; (800b024 <_dtoa_r+0x348>)
 800ad46:	4ab7      	ldr	r2, [pc, #732]	; (800b024 <_dtoa_r+0x348>)
 800ad48:	403b      	ands	r3, r7
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d116      	bne.n	800ad7c <_dtoa_r+0xa0>
 800ad4e:	4bb6      	ldr	r3, [pc, #728]	; (800b028 <_dtoa_r+0x34c>)
 800ad50:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	033b      	lsls	r3, r7, #12
 800ad56:	0b1b      	lsrs	r3, r3, #12
 800ad58:	4323      	orrs	r3, r4
 800ad5a:	d101      	bne.n	800ad60 <_dtoa_r+0x84>
 800ad5c:	f000 fdb5 	bl	800b8ca <_dtoa_r+0xbee>
 800ad60:	4bb2      	ldr	r3, [pc, #712]	; (800b02c <_dtoa_r+0x350>)
 800ad62:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad64:	9306      	str	r3, [sp, #24]
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	d002      	beq.n	800ad70 <_dtoa_r+0x94>
 800ad6a:	4bb1      	ldr	r3, [pc, #708]	; (800b030 <_dtoa_r+0x354>)
 800ad6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad6e:	6013      	str	r3, [r2, #0]
 800ad70:	9806      	ldr	r0, [sp, #24]
 800ad72:	b01d      	add	sp, #116	; 0x74
 800ad74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad76:	2300      	movs	r3, #0
 800ad78:	603b      	str	r3, [r7, #0]
 800ad7a:	e7e2      	b.n	800ad42 <_dtoa_r+0x66>
 800ad7c:	9a08      	ldr	r2, [sp, #32]
 800ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad80:	9210      	str	r2, [sp, #64]	; 0x40
 800ad82:	9311      	str	r3, [sp, #68]	; 0x44
 800ad84:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad86:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f7f5 fb5e 	bl	800044c <__aeabi_dcmpeq>
 800ad90:	1e06      	subs	r6, r0, #0
 800ad92:	d009      	beq.n	800ada8 <_dtoa_r+0xcc>
 800ad94:	2301      	movs	r3, #1
 800ad96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	4ba6      	ldr	r3, [pc, #664]	; (800b034 <_dtoa_r+0x358>)
 800ad9c:	9306      	str	r3, [sp, #24]
 800ad9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0e5      	beq.n	800ad70 <_dtoa_r+0x94>
 800ada4:	4ba4      	ldr	r3, [pc, #656]	; (800b038 <_dtoa_r+0x35c>)
 800ada6:	e7e1      	b.n	800ad6c <_dtoa_r+0x90>
 800ada8:	ab1a      	add	r3, sp, #104	; 0x68
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	ab1b      	add	r3, sp, #108	; 0x6c
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	9804      	ldr	r0, [sp, #16]
 800adb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adb6:	f001 fa95 	bl	800c2e4 <__d2b>
 800adba:	007a      	lsls	r2, r7, #1
 800adbc:	9005      	str	r0, [sp, #20]
 800adbe:	0d52      	lsrs	r2, r2, #21
 800adc0:	d100      	bne.n	800adc4 <_dtoa_r+0xe8>
 800adc2:	e07b      	b.n	800aebc <_dtoa_r+0x1e0>
 800adc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adc6:	9617      	str	r6, [sp, #92]	; 0x5c
 800adc8:	0319      	lsls	r1, r3, #12
 800adca:	4b9c      	ldr	r3, [pc, #624]	; (800b03c <_dtoa_r+0x360>)
 800adcc:	0b09      	lsrs	r1, r1, #12
 800adce:	430b      	orrs	r3, r1
 800add0:	499b      	ldr	r1, [pc, #620]	; (800b040 <_dtoa_r+0x364>)
 800add2:	1857      	adds	r7, r2, r1
 800add4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800add6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800add8:	0019      	movs	r1, r3
 800adda:	2200      	movs	r2, #0
 800addc:	4b99      	ldr	r3, [pc, #612]	; (800b044 <_dtoa_r+0x368>)
 800adde:	f7f6 fdef 	bl	80019c0 <__aeabi_dsub>
 800ade2:	4a99      	ldr	r2, [pc, #612]	; (800b048 <_dtoa_r+0x36c>)
 800ade4:	4b99      	ldr	r3, [pc, #612]	; (800b04c <_dtoa_r+0x370>)
 800ade6:	f7f6 fb29 	bl	800143c <__aeabi_dmul>
 800adea:	4a99      	ldr	r2, [pc, #612]	; (800b050 <_dtoa_r+0x374>)
 800adec:	4b99      	ldr	r3, [pc, #612]	; (800b054 <_dtoa_r+0x378>)
 800adee:	f7f5 fbcb 	bl	8000588 <__aeabi_dadd>
 800adf2:	0004      	movs	r4, r0
 800adf4:	0038      	movs	r0, r7
 800adf6:	000d      	movs	r5, r1
 800adf8:	f7f7 f9b8 	bl	800216c <__aeabi_i2d>
 800adfc:	4a96      	ldr	r2, [pc, #600]	; (800b058 <_dtoa_r+0x37c>)
 800adfe:	4b97      	ldr	r3, [pc, #604]	; (800b05c <_dtoa_r+0x380>)
 800ae00:	f7f6 fb1c 	bl	800143c <__aeabi_dmul>
 800ae04:	0002      	movs	r2, r0
 800ae06:	000b      	movs	r3, r1
 800ae08:	0020      	movs	r0, r4
 800ae0a:	0029      	movs	r1, r5
 800ae0c:	f7f5 fbbc 	bl	8000588 <__aeabi_dadd>
 800ae10:	0004      	movs	r4, r0
 800ae12:	000d      	movs	r5, r1
 800ae14:	f7f7 f974 	bl	8002100 <__aeabi_d2iz>
 800ae18:	2200      	movs	r2, #0
 800ae1a:	9003      	str	r0, [sp, #12]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	0020      	movs	r0, r4
 800ae20:	0029      	movs	r1, r5
 800ae22:	f7f5 fb19 	bl	8000458 <__aeabi_dcmplt>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d00b      	beq.n	800ae42 <_dtoa_r+0x166>
 800ae2a:	9803      	ldr	r0, [sp, #12]
 800ae2c:	f7f7 f99e 	bl	800216c <__aeabi_i2d>
 800ae30:	002b      	movs	r3, r5
 800ae32:	0022      	movs	r2, r4
 800ae34:	f7f5 fb0a 	bl	800044c <__aeabi_dcmpeq>
 800ae38:	4243      	negs	r3, r0
 800ae3a:	4158      	adcs	r0, r3
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	1a1b      	subs	r3, r3, r0
 800ae40:	9303      	str	r3, [sp, #12]
 800ae42:	2301      	movs	r3, #1
 800ae44:	9316      	str	r3, [sp, #88]	; 0x58
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	2b16      	cmp	r3, #22
 800ae4a:	d810      	bhi.n	800ae6e <_dtoa_r+0x192>
 800ae4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae50:	9a03      	ldr	r2, [sp, #12]
 800ae52:	4b83      	ldr	r3, [pc, #524]	; (800b060 <_dtoa_r+0x384>)
 800ae54:	00d2      	lsls	r2, r2, #3
 800ae56:	189b      	adds	r3, r3, r2
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f7f5 fafc 	bl	8000458 <__aeabi_dcmplt>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d047      	beq.n	800aef4 <_dtoa_r+0x218>
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	9303      	str	r3, [sp, #12]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	9316      	str	r3, [sp, #88]	; 0x58
 800ae6e:	2200      	movs	r2, #0
 800ae70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ae72:	920a      	str	r2, [sp, #40]	; 0x28
 800ae74:	1bdb      	subs	r3, r3, r7
 800ae76:	1e5a      	subs	r2, r3, #1
 800ae78:	d53e      	bpl.n	800aef8 <_dtoa_r+0x21c>
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae80:	2300      	movs	r3, #0
 800ae82:	930c      	str	r3, [sp, #48]	; 0x30
 800ae84:	9b03      	ldr	r3, [sp, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	db38      	blt.n	800aefc <_dtoa_r+0x220>
 800ae8a:	9a03      	ldr	r2, [sp, #12]
 800ae8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae8e:	4694      	mov	ip, r2
 800ae90:	4463      	add	r3, ip
 800ae92:	930c      	str	r3, [sp, #48]	; 0x30
 800ae94:	2300      	movs	r3, #0
 800ae96:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae98:	930d      	str	r3, [sp, #52]	; 0x34
 800ae9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae9c:	2401      	movs	r4, #1
 800ae9e:	2b09      	cmp	r3, #9
 800aea0:	d867      	bhi.n	800af72 <_dtoa_r+0x296>
 800aea2:	2b05      	cmp	r3, #5
 800aea4:	dd02      	ble.n	800aeac <_dtoa_r+0x1d0>
 800aea6:	2400      	movs	r4, #0
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	9322      	str	r3, [sp, #136]	; 0x88
 800aeac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aeae:	1e98      	subs	r0, r3, #2
 800aeb0:	2803      	cmp	r0, #3
 800aeb2:	d867      	bhi.n	800af84 <_dtoa_r+0x2a8>
 800aeb4:	f7f5 f930 	bl	8000118 <__gnu_thumb1_case_uqi>
 800aeb8:	5b383a2b 	.word	0x5b383a2b
 800aebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aebe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800aec0:	18f6      	adds	r6, r6, r3
 800aec2:	4b68      	ldr	r3, [pc, #416]	; (800b064 <_dtoa_r+0x388>)
 800aec4:	18f2      	adds	r2, r6, r3
 800aec6:	2a20      	cmp	r2, #32
 800aec8:	dd0f      	ble.n	800aeea <_dtoa_r+0x20e>
 800aeca:	2340      	movs	r3, #64	; 0x40
 800aecc:	1a9b      	subs	r3, r3, r2
 800aece:	409f      	lsls	r7, r3
 800aed0:	4b65      	ldr	r3, [pc, #404]	; (800b068 <_dtoa_r+0x38c>)
 800aed2:	0038      	movs	r0, r7
 800aed4:	18f3      	adds	r3, r6, r3
 800aed6:	40dc      	lsrs	r4, r3
 800aed8:	4320      	orrs	r0, r4
 800aeda:	f7f7 f977 	bl	80021cc <__aeabi_ui2d>
 800aede:	2201      	movs	r2, #1
 800aee0:	4b62      	ldr	r3, [pc, #392]	; (800b06c <_dtoa_r+0x390>)
 800aee2:	1e77      	subs	r7, r6, #1
 800aee4:	18cb      	adds	r3, r1, r3
 800aee6:	9217      	str	r2, [sp, #92]	; 0x5c
 800aee8:	e776      	b.n	800add8 <_dtoa_r+0xfc>
 800aeea:	2320      	movs	r3, #32
 800aeec:	0020      	movs	r0, r4
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	4098      	lsls	r0, r3
 800aef2:	e7f2      	b.n	800aeda <_dtoa_r+0x1fe>
 800aef4:	9016      	str	r0, [sp, #88]	; 0x58
 800aef6:	e7ba      	b.n	800ae6e <_dtoa_r+0x192>
 800aef8:	920c      	str	r2, [sp, #48]	; 0x30
 800aefa:	e7c3      	b.n	800ae84 <_dtoa_r+0x1a8>
 800aefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefe:	9a03      	ldr	r2, [sp, #12]
 800af00:	1a9b      	subs	r3, r3, r2
 800af02:	930a      	str	r3, [sp, #40]	; 0x28
 800af04:	4253      	negs	r3, r2
 800af06:	930d      	str	r3, [sp, #52]	; 0x34
 800af08:	2300      	movs	r3, #0
 800af0a:	9313      	str	r3, [sp, #76]	; 0x4c
 800af0c:	e7c5      	b.n	800ae9a <_dtoa_r+0x1be>
 800af0e:	2300      	movs	r3, #0
 800af10:	930f      	str	r3, [sp, #60]	; 0x3c
 800af12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af14:	930b      	str	r3, [sp, #44]	; 0x2c
 800af16:	9307      	str	r3, [sp, #28]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dc13      	bgt.n	800af44 <_dtoa_r+0x268>
 800af1c:	2301      	movs	r3, #1
 800af1e:	001a      	movs	r2, r3
 800af20:	930b      	str	r3, [sp, #44]	; 0x2c
 800af22:	9307      	str	r3, [sp, #28]
 800af24:	9223      	str	r2, [sp, #140]	; 0x8c
 800af26:	e00d      	b.n	800af44 <_dtoa_r+0x268>
 800af28:	2301      	movs	r3, #1
 800af2a:	e7f1      	b.n	800af10 <_dtoa_r+0x234>
 800af2c:	2300      	movs	r3, #0
 800af2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800af30:	930f      	str	r3, [sp, #60]	; 0x3c
 800af32:	4694      	mov	ip, r2
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	4463      	add	r3, ip
 800af38:	930b      	str	r3, [sp, #44]	; 0x2c
 800af3a:	3301      	adds	r3, #1
 800af3c:	9307      	str	r3, [sp, #28]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dc00      	bgt.n	800af44 <_dtoa_r+0x268>
 800af42:	2301      	movs	r3, #1
 800af44:	9a04      	ldr	r2, [sp, #16]
 800af46:	2100      	movs	r1, #0
 800af48:	69d0      	ldr	r0, [r2, #28]
 800af4a:	2204      	movs	r2, #4
 800af4c:	0015      	movs	r5, r2
 800af4e:	3514      	adds	r5, #20
 800af50:	429d      	cmp	r5, r3
 800af52:	d91b      	bls.n	800af8c <_dtoa_r+0x2b0>
 800af54:	6041      	str	r1, [r0, #4]
 800af56:	9804      	ldr	r0, [sp, #16]
 800af58:	f000 fdd6 	bl	800bb08 <_Balloc>
 800af5c:	9006      	str	r0, [sp, #24]
 800af5e:	2800      	cmp	r0, #0
 800af60:	d117      	bne.n	800af92 <_dtoa_r+0x2b6>
 800af62:	21b0      	movs	r1, #176	; 0xb0
 800af64:	4b42      	ldr	r3, [pc, #264]	; (800b070 <_dtoa_r+0x394>)
 800af66:	482e      	ldr	r0, [pc, #184]	; (800b020 <_dtoa_r+0x344>)
 800af68:	9a06      	ldr	r2, [sp, #24]
 800af6a:	31ff      	adds	r1, #255	; 0xff
 800af6c:	e6cb      	b.n	800ad06 <_dtoa_r+0x2a>
 800af6e:	2301      	movs	r3, #1
 800af70:	e7dd      	b.n	800af2e <_dtoa_r+0x252>
 800af72:	2300      	movs	r3, #0
 800af74:	940f      	str	r4, [sp, #60]	; 0x3c
 800af76:	9322      	str	r3, [sp, #136]	; 0x88
 800af78:	3b01      	subs	r3, #1
 800af7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af7c:	9307      	str	r3, [sp, #28]
 800af7e:	2200      	movs	r2, #0
 800af80:	3313      	adds	r3, #19
 800af82:	e7cf      	b.n	800af24 <_dtoa_r+0x248>
 800af84:	2301      	movs	r3, #1
 800af86:	930f      	str	r3, [sp, #60]	; 0x3c
 800af88:	3b02      	subs	r3, #2
 800af8a:	e7f6      	b.n	800af7a <_dtoa_r+0x29e>
 800af8c:	3101      	adds	r1, #1
 800af8e:	0052      	lsls	r2, r2, #1
 800af90:	e7dc      	b.n	800af4c <_dtoa_r+0x270>
 800af92:	9b04      	ldr	r3, [sp, #16]
 800af94:	9a06      	ldr	r2, [sp, #24]
 800af96:	69db      	ldr	r3, [r3, #28]
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	2b0e      	cmp	r3, #14
 800af9e:	d900      	bls.n	800afa2 <_dtoa_r+0x2c6>
 800afa0:	e0e5      	b.n	800b16e <_dtoa_r+0x492>
 800afa2:	2c00      	cmp	r4, #0
 800afa4:	d100      	bne.n	800afa8 <_dtoa_r+0x2cc>
 800afa6:	e0e2      	b.n	800b16e <_dtoa_r+0x492>
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dd64      	ble.n	800b078 <_dtoa_r+0x39c>
 800afae:	210f      	movs	r1, #15
 800afb0:	9a03      	ldr	r2, [sp, #12]
 800afb2:	4b2b      	ldr	r3, [pc, #172]	; (800b060 <_dtoa_r+0x384>)
 800afb4:	400a      	ands	r2, r1
 800afb6:	00d2      	lsls	r2, r2, #3
 800afb8:	189b      	adds	r3, r3, r2
 800afba:	681e      	ldr	r6, [r3, #0]
 800afbc:	685f      	ldr	r7, [r3, #4]
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	2402      	movs	r4, #2
 800afc2:	111d      	asrs	r5, r3, #4
 800afc4:	05db      	lsls	r3, r3, #23
 800afc6:	d50a      	bpl.n	800afde <_dtoa_r+0x302>
 800afc8:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <_dtoa_r+0x398>)
 800afca:	400d      	ands	r5, r1
 800afcc:	6a1a      	ldr	r2, [r3, #32]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800afd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afd4:	f7f5 fe38 	bl	8000c48 <__aeabi_ddiv>
 800afd8:	9008      	str	r0, [sp, #32]
 800afda:	9109      	str	r1, [sp, #36]	; 0x24
 800afdc:	3401      	adds	r4, #1
 800afde:	4b25      	ldr	r3, [pc, #148]	; (800b074 <_dtoa_r+0x398>)
 800afe0:	930e      	str	r3, [sp, #56]	; 0x38
 800afe2:	2d00      	cmp	r5, #0
 800afe4:	d108      	bne.n	800aff8 <_dtoa_r+0x31c>
 800afe6:	9808      	ldr	r0, [sp, #32]
 800afe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afea:	0032      	movs	r2, r6
 800afec:	003b      	movs	r3, r7
 800afee:	f7f5 fe2b 	bl	8000c48 <__aeabi_ddiv>
 800aff2:	9008      	str	r0, [sp, #32]
 800aff4:	9109      	str	r1, [sp, #36]	; 0x24
 800aff6:	e05a      	b.n	800b0ae <_dtoa_r+0x3d2>
 800aff8:	2301      	movs	r3, #1
 800affa:	421d      	tst	r5, r3
 800affc:	d009      	beq.n	800b012 <_dtoa_r+0x336>
 800affe:	18e4      	adds	r4, r4, r3
 800b000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b002:	0030      	movs	r0, r6
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	0039      	movs	r1, r7
 800b00a:	f7f6 fa17 	bl	800143c <__aeabi_dmul>
 800b00e:	0006      	movs	r6, r0
 800b010:	000f      	movs	r7, r1
 800b012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b014:	106d      	asrs	r5, r5, #1
 800b016:	3308      	adds	r3, #8
 800b018:	e7e2      	b.n	800afe0 <_dtoa_r+0x304>
 800b01a:	46c0      	nop			; (mov r8, r8)
 800b01c:	0800e656 	.word	0x0800e656
 800b020:	0800e66d 	.word	0x0800e66d
 800b024:	7ff00000 	.word	0x7ff00000
 800b028:	0000270f 	.word	0x0000270f
 800b02c:	0800e652 	.word	0x0800e652
 800b030:	0800e655 	.word	0x0800e655
 800b034:	0800e620 	.word	0x0800e620
 800b038:	0800e621 	.word	0x0800e621
 800b03c:	3ff00000 	.word	0x3ff00000
 800b040:	fffffc01 	.word	0xfffffc01
 800b044:	3ff80000 	.word	0x3ff80000
 800b048:	636f4361 	.word	0x636f4361
 800b04c:	3fd287a7 	.word	0x3fd287a7
 800b050:	8b60c8b3 	.word	0x8b60c8b3
 800b054:	3fc68a28 	.word	0x3fc68a28
 800b058:	509f79fb 	.word	0x509f79fb
 800b05c:	3fd34413 	.word	0x3fd34413
 800b060:	0800e758 	.word	0x0800e758
 800b064:	00000432 	.word	0x00000432
 800b068:	00000412 	.word	0x00000412
 800b06c:	fe100000 	.word	0xfe100000
 800b070:	0800e6c5 	.word	0x0800e6c5
 800b074:	0800e730 	.word	0x0800e730
 800b078:	9b03      	ldr	r3, [sp, #12]
 800b07a:	2402      	movs	r4, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d016      	beq.n	800b0ae <_dtoa_r+0x3d2>
 800b080:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b082:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b084:	220f      	movs	r2, #15
 800b086:	425d      	negs	r5, r3
 800b088:	402a      	ands	r2, r5
 800b08a:	4bdd      	ldr	r3, [pc, #884]	; (800b400 <_dtoa_r+0x724>)
 800b08c:	00d2      	lsls	r2, r2, #3
 800b08e:	189b      	adds	r3, r3, r2
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	f7f6 f9d2 	bl	800143c <__aeabi_dmul>
 800b098:	2701      	movs	r7, #1
 800b09a:	2300      	movs	r3, #0
 800b09c:	9008      	str	r0, [sp, #32]
 800b09e:	9109      	str	r1, [sp, #36]	; 0x24
 800b0a0:	4ed8      	ldr	r6, [pc, #864]	; (800b404 <_dtoa_r+0x728>)
 800b0a2:	112d      	asrs	r5, r5, #4
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	d000      	beq.n	800b0aa <_dtoa_r+0x3ce>
 800b0a8:	e091      	b.n	800b1ce <_dtoa_r+0x4f2>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1a1      	bne.n	800aff2 <_dtoa_r+0x316>
 800b0ae:	9e08      	ldr	r6, [sp, #32]
 800b0b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d100      	bne.n	800b0ba <_dtoa_r+0x3de>
 800b0b8:	e094      	b.n	800b1e4 <_dtoa_r+0x508>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	0030      	movs	r0, r6
 800b0be:	0039      	movs	r1, r7
 800b0c0:	4bd1      	ldr	r3, [pc, #836]	; (800b408 <_dtoa_r+0x72c>)
 800b0c2:	f7f5 f9c9 	bl	8000458 <__aeabi_dcmplt>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d100      	bne.n	800b0cc <_dtoa_r+0x3f0>
 800b0ca:	e08b      	b.n	800b1e4 <_dtoa_r+0x508>
 800b0cc:	9b07      	ldr	r3, [sp, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d100      	bne.n	800b0d4 <_dtoa_r+0x3f8>
 800b0d2:	e087      	b.n	800b1e4 <_dtoa_r+0x508>
 800b0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dd45      	ble.n	800b166 <_dtoa_r+0x48a>
 800b0da:	9b03      	ldr	r3, [sp, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	930e      	str	r3, [sp, #56]	; 0x38
 800b0e2:	0030      	movs	r0, r6
 800b0e4:	4bc9      	ldr	r3, [pc, #804]	; (800b40c <_dtoa_r+0x730>)
 800b0e6:	0039      	movs	r1, r7
 800b0e8:	f7f6 f9a8 	bl	800143c <__aeabi_dmul>
 800b0ec:	9008      	str	r0, [sp, #32]
 800b0ee:	9109      	str	r1, [sp, #36]	; 0x24
 800b0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f2:	3401      	adds	r4, #1
 800b0f4:	0020      	movs	r0, r4
 800b0f6:	9e08      	ldr	r6, [sp, #32]
 800b0f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0fa:	9312      	str	r3, [sp, #72]	; 0x48
 800b0fc:	f7f7 f836 	bl	800216c <__aeabi_i2d>
 800b100:	0032      	movs	r2, r6
 800b102:	003b      	movs	r3, r7
 800b104:	f7f6 f99a 	bl	800143c <__aeabi_dmul>
 800b108:	2200      	movs	r2, #0
 800b10a:	4bc1      	ldr	r3, [pc, #772]	; (800b410 <_dtoa_r+0x734>)
 800b10c:	f7f5 fa3c 	bl	8000588 <__aeabi_dadd>
 800b110:	4ac0      	ldr	r2, [pc, #768]	; (800b414 <_dtoa_r+0x738>)
 800b112:	9014      	str	r0, [sp, #80]	; 0x50
 800b114:	9115      	str	r1, [sp, #84]	; 0x54
 800b116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b118:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b11a:	4694      	mov	ip, r2
 800b11c:	9308      	str	r3, [sp, #32]
 800b11e:	9409      	str	r4, [sp, #36]	; 0x24
 800b120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b122:	4463      	add	r3, ip
 800b124:	9318      	str	r3, [sp, #96]	; 0x60
 800b126:	9309      	str	r3, [sp, #36]	; 0x24
 800b128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d15e      	bne.n	800b1ec <_dtoa_r+0x510>
 800b12e:	2200      	movs	r2, #0
 800b130:	4bb9      	ldr	r3, [pc, #740]	; (800b418 <_dtoa_r+0x73c>)
 800b132:	0030      	movs	r0, r6
 800b134:	0039      	movs	r1, r7
 800b136:	f7f6 fc43 	bl	80019c0 <__aeabi_dsub>
 800b13a:	9a08      	ldr	r2, [sp, #32]
 800b13c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b13e:	0004      	movs	r4, r0
 800b140:	000d      	movs	r5, r1
 800b142:	f7f5 f99d 	bl	8000480 <__aeabi_dcmpgt>
 800b146:	2800      	cmp	r0, #0
 800b148:	d000      	beq.n	800b14c <_dtoa_r+0x470>
 800b14a:	e2b3      	b.n	800b6b4 <_dtoa_r+0x9d8>
 800b14c:	48b3      	ldr	r0, [pc, #716]	; (800b41c <_dtoa_r+0x740>)
 800b14e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b150:	4684      	mov	ip, r0
 800b152:	4461      	add	r1, ip
 800b154:	000b      	movs	r3, r1
 800b156:	0020      	movs	r0, r4
 800b158:	0029      	movs	r1, r5
 800b15a:	9a08      	ldr	r2, [sp, #32]
 800b15c:	f7f5 f97c 	bl	8000458 <__aeabi_dcmplt>
 800b160:	2800      	cmp	r0, #0
 800b162:	d000      	beq.n	800b166 <_dtoa_r+0x48a>
 800b164:	e2a3      	b.n	800b6ae <_dtoa_r+0x9d2>
 800b166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b168:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b16a:	9308      	str	r3, [sp, #32]
 800b16c:	9409      	str	r4, [sp, #36]	; 0x24
 800b16e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b170:	2b00      	cmp	r3, #0
 800b172:	da00      	bge.n	800b176 <_dtoa_r+0x49a>
 800b174:	e179      	b.n	800b46a <_dtoa_r+0x78e>
 800b176:	9a03      	ldr	r2, [sp, #12]
 800b178:	2a0e      	cmp	r2, #14
 800b17a:	dd00      	ble.n	800b17e <_dtoa_r+0x4a2>
 800b17c:	e175      	b.n	800b46a <_dtoa_r+0x78e>
 800b17e:	4ba0      	ldr	r3, [pc, #640]	; (800b400 <_dtoa_r+0x724>)
 800b180:	00d2      	lsls	r2, r2, #3
 800b182:	189b      	adds	r3, r3, r2
 800b184:	681e      	ldr	r6, [r3, #0]
 800b186:	685f      	ldr	r7, [r3, #4]
 800b188:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	db00      	blt.n	800b190 <_dtoa_r+0x4b4>
 800b18e:	e0e5      	b.n	800b35c <_dtoa_r+0x680>
 800b190:	9b07      	ldr	r3, [sp, #28]
 800b192:	2b00      	cmp	r3, #0
 800b194:	dd00      	ble.n	800b198 <_dtoa_r+0x4bc>
 800b196:	e0e1      	b.n	800b35c <_dtoa_r+0x680>
 800b198:	d000      	beq.n	800b19c <_dtoa_r+0x4c0>
 800b19a:	e288      	b.n	800b6ae <_dtoa_r+0x9d2>
 800b19c:	2200      	movs	r2, #0
 800b19e:	0030      	movs	r0, r6
 800b1a0:	0039      	movs	r1, r7
 800b1a2:	4b9d      	ldr	r3, [pc, #628]	; (800b418 <_dtoa_r+0x73c>)
 800b1a4:	f7f6 f94a 	bl	800143c <__aeabi_dmul>
 800b1a8:	9a08      	ldr	r2, [sp, #32]
 800b1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ac:	f7f5 f972 	bl	8000494 <__aeabi_dcmpge>
 800b1b0:	9e07      	ldr	r6, [sp, #28]
 800b1b2:	0037      	movs	r7, r6
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d000      	beq.n	800b1ba <_dtoa_r+0x4de>
 800b1b8:	e25f      	b.n	800b67a <_dtoa_r+0x99e>
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	9a06      	ldr	r2, [sp, #24]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	9308      	str	r3, [sp, #32]
 800b1c2:	2331      	movs	r3, #49	; 0x31
 800b1c4:	7013      	strb	r3, [r2, #0]
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	9303      	str	r3, [sp, #12]
 800b1cc:	e25a      	b.n	800b684 <_dtoa_r+0x9a8>
 800b1ce:	423d      	tst	r5, r7
 800b1d0:	d005      	beq.n	800b1de <_dtoa_r+0x502>
 800b1d2:	6832      	ldr	r2, [r6, #0]
 800b1d4:	6873      	ldr	r3, [r6, #4]
 800b1d6:	f7f6 f931 	bl	800143c <__aeabi_dmul>
 800b1da:	003b      	movs	r3, r7
 800b1dc:	3401      	adds	r4, #1
 800b1de:	106d      	asrs	r5, r5, #1
 800b1e0:	3608      	adds	r6, #8
 800b1e2:	e75f      	b.n	800b0a4 <_dtoa_r+0x3c8>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b1e8:	9b07      	ldr	r3, [sp, #28]
 800b1ea:	e783      	b.n	800b0f4 <_dtoa_r+0x418>
 800b1ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1ee:	4b84      	ldr	r3, [pc, #528]	; (800b400 <_dtoa_r+0x724>)
 800b1f0:	3a01      	subs	r2, #1
 800b1f2:	00d2      	lsls	r2, r2, #3
 800b1f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b1f6:	189b      	adds	r3, r3, r2
 800b1f8:	9c08      	ldr	r4, [sp, #32]
 800b1fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	2900      	cmp	r1, #0
 800b202:	d051      	beq.n	800b2a8 <_dtoa_r+0x5cc>
 800b204:	2000      	movs	r0, #0
 800b206:	4986      	ldr	r1, [pc, #536]	; (800b420 <_dtoa_r+0x744>)
 800b208:	f7f5 fd1e 	bl	8000c48 <__aeabi_ddiv>
 800b20c:	0022      	movs	r2, r4
 800b20e:	002b      	movs	r3, r5
 800b210:	f7f6 fbd6 	bl	80019c0 <__aeabi_dsub>
 800b214:	9a06      	ldr	r2, [sp, #24]
 800b216:	0004      	movs	r4, r0
 800b218:	4694      	mov	ip, r2
 800b21a:	000d      	movs	r5, r1
 800b21c:	9b06      	ldr	r3, [sp, #24]
 800b21e:	9314      	str	r3, [sp, #80]	; 0x50
 800b220:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b222:	4463      	add	r3, ip
 800b224:	9318      	str	r3, [sp, #96]	; 0x60
 800b226:	0039      	movs	r1, r7
 800b228:	0030      	movs	r0, r6
 800b22a:	f7f6 ff69 	bl	8002100 <__aeabi_d2iz>
 800b22e:	9012      	str	r0, [sp, #72]	; 0x48
 800b230:	f7f6 ff9c 	bl	800216c <__aeabi_i2d>
 800b234:	0002      	movs	r2, r0
 800b236:	000b      	movs	r3, r1
 800b238:	0030      	movs	r0, r6
 800b23a:	0039      	movs	r1, r7
 800b23c:	f7f6 fbc0 	bl	80019c0 <__aeabi_dsub>
 800b240:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b242:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b244:	3301      	adds	r3, #1
 800b246:	9308      	str	r3, [sp, #32]
 800b248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b24a:	0006      	movs	r6, r0
 800b24c:	3330      	adds	r3, #48	; 0x30
 800b24e:	7013      	strb	r3, [r2, #0]
 800b250:	0022      	movs	r2, r4
 800b252:	002b      	movs	r3, r5
 800b254:	000f      	movs	r7, r1
 800b256:	f7f5 f8ff 	bl	8000458 <__aeabi_dcmplt>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d174      	bne.n	800b348 <_dtoa_r+0x66c>
 800b25e:	0032      	movs	r2, r6
 800b260:	003b      	movs	r3, r7
 800b262:	2000      	movs	r0, #0
 800b264:	4968      	ldr	r1, [pc, #416]	; (800b408 <_dtoa_r+0x72c>)
 800b266:	f7f6 fbab 	bl	80019c0 <__aeabi_dsub>
 800b26a:	0022      	movs	r2, r4
 800b26c:	002b      	movs	r3, r5
 800b26e:	f7f5 f8f3 	bl	8000458 <__aeabi_dcmplt>
 800b272:	2800      	cmp	r0, #0
 800b274:	d000      	beq.n	800b278 <_dtoa_r+0x59c>
 800b276:	e0d7      	b.n	800b428 <_dtoa_r+0x74c>
 800b278:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b27a:	9a08      	ldr	r2, [sp, #32]
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d100      	bne.n	800b282 <_dtoa_r+0x5a6>
 800b280:	e771      	b.n	800b166 <_dtoa_r+0x48a>
 800b282:	2200      	movs	r2, #0
 800b284:	0020      	movs	r0, r4
 800b286:	0029      	movs	r1, r5
 800b288:	4b60      	ldr	r3, [pc, #384]	; (800b40c <_dtoa_r+0x730>)
 800b28a:	f7f6 f8d7 	bl	800143c <__aeabi_dmul>
 800b28e:	4b5f      	ldr	r3, [pc, #380]	; (800b40c <_dtoa_r+0x730>)
 800b290:	0004      	movs	r4, r0
 800b292:	000d      	movs	r5, r1
 800b294:	0030      	movs	r0, r6
 800b296:	0039      	movs	r1, r7
 800b298:	2200      	movs	r2, #0
 800b29a:	f7f6 f8cf 	bl	800143c <__aeabi_dmul>
 800b29e:	9b08      	ldr	r3, [sp, #32]
 800b2a0:	0006      	movs	r6, r0
 800b2a2:	000f      	movs	r7, r1
 800b2a4:	9314      	str	r3, [sp, #80]	; 0x50
 800b2a6:	e7be      	b.n	800b226 <_dtoa_r+0x54a>
 800b2a8:	0020      	movs	r0, r4
 800b2aa:	0029      	movs	r1, r5
 800b2ac:	f7f6 f8c6 	bl	800143c <__aeabi_dmul>
 800b2b0:	9a06      	ldr	r2, [sp, #24]
 800b2b2:	9b06      	ldr	r3, [sp, #24]
 800b2b4:	4694      	mov	ip, r2
 800b2b6:	9308      	str	r3, [sp, #32]
 800b2b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2ba:	9014      	str	r0, [sp, #80]	; 0x50
 800b2bc:	9115      	str	r1, [sp, #84]	; 0x54
 800b2be:	4463      	add	r3, ip
 800b2c0:	9319      	str	r3, [sp, #100]	; 0x64
 800b2c2:	0030      	movs	r0, r6
 800b2c4:	0039      	movs	r1, r7
 800b2c6:	f7f6 ff1b 	bl	8002100 <__aeabi_d2iz>
 800b2ca:	9018      	str	r0, [sp, #96]	; 0x60
 800b2cc:	f7f6 ff4e 	bl	800216c <__aeabi_i2d>
 800b2d0:	0002      	movs	r2, r0
 800b2d2:	000b      	movs	r3, r1
 800b2d4:	0030      	movs	r0, r6
 800b2d6:	0039      	movs	r1, r7
 800b2d8:	f7f6 fb72 	bl	80019c0 <__aeabi_dsub>
 800b2dc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b2de:	9b08      	ldr	r3, [sp, #32]
 800b2e0:	3630      	adds	r6, #48	; 0x30
 800b2e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2e4:	701e      	strb	r6, [r3, #0]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	0004      	movs	r4, r0
 800b2ea:	000d      	movs	r5, r1
 800b2ec:	9308      	str	r3, [sp, #32]
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d12d      	bne.n	800b34e <_dtoa_r+0x672>
 800b2f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b2f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b2f6:	9a06      	ldr	r2, [sp, #24]
 800b2f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2fa:	4694      	mov	ip, r2
 800b2fc:	4463      	add	r3, ip
 800b2fe:	2200      	movs	r2, #0
 800b300:	9308      	str	r3, [sp, #32]
 800b302:	4b47      	ldr	r3, [pc, #284]	; (800b420 <_dtoa_r+0x744>)
 800b304:	f7f5 f940 	bl	8000588 <__aeabi_dadd>
 800b308:	0002      	movs	r2, r0
 800b30a:	000b      	movs	r3, r1
 800b30c:	0020      	movs	r0, r4
 800b30e:	0029      	movs	r1, r5
 800b310:	f7f5 f8b6 	bl	8000480 <__aeabi_dcmpgt>
 800b314:	2800      	cmp	r0, #0
 800b316:	d000      	beq.n	800b31a <_dtoa_r+0x63e>
 800b318:	e086      	b.n	800b428 <_dtoa_r+0x74c>
 800b31a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b31c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b31e:	2000      	movs	r0, #0
 800b320:	493f      	ldr	r1, [pc, #252]	; (800b420 <_dtoa_r+0x744>)
 800b322:	f7f6 fb4d 	bl	80019c0 <__aeabi_dsub>
 800b326:	0002      	movs	r2, r0
 800b328:	000b      	movs	r3, r1
 800b32a:	0020      	movs	r0, r4
 800b32c:	0029      	movs	r1, r5
 800b32e:	f7f5 f893 	bl	8000458 <__aeabi_dcmplt>
 800b332:	2800      	cmp	r0, #0
 800b334:	d100      	bne.n	800b338 <_dtoa_r+0x65c>
 800b336:	e716      	b.n	800b166 <_dtoa_r+0x48a>
 800b338:	9b08      	ldr	r3, [sp, #32]
 800b33a:	001a      	movs	r2, r3
 800b33c:	3a01      	subs	r2, #1
 800b33e:	9208      	str	r2, [sp, #32]
 800b340:	7812      	ldrb	r2, [r2, #0]
 800b342:	2a30      	cmp	r2, #48	; 0x30
 800b344:	d0f8      	beq.n	800b338 <_dtoa_r+0x65c>
 800b346:	9308      	str	r3, [sp, #32]
 800b348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b34a:	9303      	str	r3, [sp, #12]
 800b34c:	e046      	b.n	800b3dc <_dtoa_r+0x700>
 800b34e:	2200      	movs	r2, #0
 800b350:	4b2e      	ldr	r3, [pc, #184]	; (800b40c <_dtoa_r+0x730>)
 800b352:	f7f6 f873 	bl	800143c <__aeabi_dmul>
 800b356:	0006      	movs	r6, r0
 800b358:	000f      	movs	r7, r1
 800b35a:	e7b2      	b.n	800b2c2 <_dtoa_r+0x5e6>
 800b35c:	9b06      	ldr	r3, [sp, #24]
 800b35e:	9a06      	ldr	r2, [sp, #24]
 800b360:	930a      	str	r3, [sp, #40]	; 0x28
 800b362:	9b07      	ldr	r3, [sp, #28]
 800b364:	9c08      	ldr	r4, [sp, #32]
 800b366:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b368:	3b01      	subs	r3, #1
 800b36a:	189b      	adds	r3, r3, r2
 800b36c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b36e:	0032      	movs	r2, r6
 800b370:	003b      	movs	r3, r7
 800b372:	0020      	movs	r0, r4
 800b374:	0029      	movs	r1, r5
 800b376:	f7f5 fc67 	bl	8000c48 <__aeabi_ddiv>
 800b37a:	f7f6 fec1 	bl	8002100 <__aeabi_d2iz>
 800b37e:	9007      	str	r0, [sp, #28]
 800b380:	f7f6 fef4 	bl	800216c <__aeabi_i2d>
 800b384:	0032      	movs	r2, r6
 800b386:	003b      	movs	r3, r7
 800b388:	f7f6 f858 	bl	800143c <__aeabi_dmul>
 800b38c:	0002      	movs	r2, r0
 800b38e:	000b      	movs	r3, r1
 800b390:	0020      	movs	r0, r4
 800b392:	0029      	movs	r1, r5
 800b394:	f7f6 fb14 	bl	80019c0 <__aeabi_dsub>
 800b398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39a:	001a      	movs	r2, r3
 800b39c:	3201      	adds	r2, #1
 800b39e:	920a      	str	r2, [sp, #40]	; 0x28
 800b3a0:	9208      	str	r2, [sp, #32]
 800b3a2:	9a07      	ldr	r2, [sp, #28]
 800b3a4:	3230      	adds	r2, #48	; 0x30
 800b3a6:	701a      	strb	r2, [r3, #0]
 800b3a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d14f      	bne.n	800b44e <_dtoa_r+0x772>
 800b3ae:	0002      	movs	r2, r0
 800b3b0:	000b      	movs	r3, r1
 800b3b2:	f7f5 f8e9 	bl	8000588 <__aeabi_dadd>
 800b3b6:	0032      	movs	r2, r6
 800b3b8:	003b      	movs	r3, r7
 800b3ba:	0004      	movs	r4, r0
 800b3bc:	000d      	movs	r5, r1
 800b3be:	f7f5 f85f 	bl	8000480 <__aeabi_dcmpgt>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d12e      	bne.n	800b424 <_dtoa_r+0x748>
 800b3c6:	0032      	movs	r2, r6
 800b3c8:	003b      	movs	r3, r7
 800b3ca:	0020      	movs	r0, r4
 800b3cc:	0029      	movs	r1, r5
 800b3ce:	f7f5 f83d 	bl	800044c <__aeabi_dcmpeq>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d002      	beq.n	800b3dc <_dtoa_r+0x700>
 800b3d6:	9b07      	ldr	r3, [sp, #28]
 800b3d8:	07de      	lsls	r6, r3, #31
 800b3da:	d423      	bmi.n	800b424 <_dtoa_r+0x748>
 800b3dc:	9905      	ldr	r1, [sp, #20]
 800b3de:	9804      	ldr	r0, [sp, #16]
 800b3e0:	f000 fbd6 	bl	800bb90 <_Bfree>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9a08      	ldr	r2, [sp, #32]
 800b3e8:	7013      	strb	r3, [r2, #0]
 800b3ea:	9b03      	ldr	r3, [sp, #12]
 800b3ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d100      	bne.n	800b3fa <_dtoa_r+0x71e>
 800b3f8:	e4ba      	b.n	800ad70 <_dtoa_r+0x94>
 800b3fa:	9a08      	ldr	r2, [sp, #32]
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e4b7      	b.n	800ad70 <_dtoa_r+0x94>
 800b400:	0800e758 	.word	0x0800e758
 800b404:	0800e730 	.word	0x0800e730
 800b408:	3ff00000 	.word	0x3ff00000
 800b40c:	40240000 	.word	0x40240000
 800b410:	401c0000 	.word	0x401c0000
 800b414:	fcc00000 	.word	0xfcc00000
 800b418:	40140000 	.word	0x40140000
 800b41c:	7cc00000 	.word	0x7cc00000
 800b420:	3fe00000 	.word	0x3fe00000
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	930e      	str	r3, [sp, #56]	; 0x38
 800b428:	9b08      	ldr	r3, [sp, #32]
 800b42a:	9308      	str	r3, [sp, #32]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	781a      	ldrb	r2, [r3, #0]
 800b430:	2a39      	cmp	r2, #57	; 0x39
 800b432:	d108      	bne.n	800b446 <_dtoa_r+0x76a>
 800b434:	9a06      	ldr	r2, [sp, #24]
 800b436:	429a      	cmp	r2, r3
 800b438:	d1f7      	bne.n	800b42a <_dtoa_r+0x74e>
 800b43a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b43c:	9906      	ldr	r1, [sp, #24]
 800b43e:	3201      	adds	r2, #1
 800b440:	920e      	str	r2, [sp, #56]	; 0x38
 800b442:	2230      	movs	r2, #48	; 0x30
 800b444:	700a      	strb	r2, [r1, #0]
 800b446:	781a      	ldrb	r2, [r3, #0]
 800b448:	3201      	adds	r2, #1
 800b44a:	701a      	strb	r2, [r3, #0]
 800b44c:	e77c      	b.n	800b348 <_dtoa_r+0x66c>
 800b44e:	2200      	movs	r2, #0
 800b450:	4ba9      	ldr	r3, [pc, #676]	; (800b6f8 <_dtoa_r+0xa1c>)
 800b452:	f7f5 fff3 	bl	800143c <__aeabi_dmul>
 800b456:	2200      	movs	r2, #0
 800b458:	2300      	movs	r3, #0
 800b45a:	0004      	movs	r4, r0
 800b45c:	000d      	movs	r5, r1
 800b45e:	f7f4 fff5 	bl	800044c <__aeabi_dcmpeq>
 800b462:	2800      	cmp	r0, #0
 800b464:	d100      	bne.n	800b468 <_dtoa_r+0x78c>
 800b466:	e782      	b.n	800b36e <_dtoa_r+0x692>
 800b468:	e7b8      	b.n	800b3dc <_dtoa_r+0x700>
 800b46a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b46c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b46e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b470:	2f00      	cmp	r7, #0
 800b472:	d012      	beq.n	800b49a <_dtoa_r+0x7be>
 800b474:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b476:	2a01      	cmp	r2, #1
 800b478:	dc6e      	bgt.n	800b558 <_dtoa_r+0x87c>
 800b47a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	d065      	beq.n	800b54c <_dtoa_r+0x870>
 800b480:	4a9e      	ldr	r2, [pc, #632]	; (800b6fc <_dtoa_r+0xa20>)
 800b482:	189b      	adds	r3, r3, r2
 800b484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b486:	2101      	movs	r1, #1
 800b488:	18d2      	adds	r2, r2, r3
 800b48a:	920a      	str	r2, [sp, #40]	; 0x28
 800b48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b48e:	9804      	ldr	r0, [sp, #16]
 800b490:	18d3      	adds	r3, r2, r3
 800b492:	930c      	str	r3, [sp, #48]	; 0x30
 800b494:	f000 fc78 	bl	800bd88 <__i2b>
 800b498:	0007      	movs	r7, r0
 800b49a:	2c00      	cmp	r4, #0
 800b49c:	d00e      	beq.n	800b4bc <_dtoa_r+0x7e0>
 800b49e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	dd0b      	ble.n	800b4bc <_dtoa_r+0x7e0>
 800b4a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4a6:	0023      	movs	r3, r4
 800b4a8:	4294      	cmp	r4, r2
 800b4aa:	dd00      	ble.n	800b4ae <_dtoa_r+0x7d2>
 800b4ac:	0013      	movs	r3, r2
 800b4ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4b0:	1ae4      	subs	r4, r4, r3
 800b4b2:	1ad2      	subs	r2, r2, r3
 800b4b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b4b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d01e      	beq.n	800b500 <_dtoa_r+0x824>
 800b4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d05c      	beq.n	800b582 <_dtoa_r+0x8a6>
 800b4c8:	2d00      	cmp	r5, #0
 800b4ca:	dd10      	ble.n	800b4ee <_dtoa_r+0x812>
 800b4cc:	0039      	movs	r1, r7
 800b4ce:	002a      	movs	r2, r5
 800b4d0:	9804      	ldr	r0, [sp, #16]
 800b4d2:	f000 fd21 	bl	800bf18 <__pow5mult>
 800b4d6:	9a05      	ldr	r2, [sp, #20]
 800b4d8:	0001      	movs	r1, r0
 800b4da:	0007      	movs	r7, r0
 800b4dc:	9804      	ldr	r0, [sp, #16]
 800b4de:	f000 fc6b 	bl	800bdb8 <__multiply>
 800b4e2:	0006      	movs	r6, r0
 800b4e4:	9905      	ldr	r1, [sp, #20]
 800b4e6:	9804      	ldr	r0, [sp, #16]
 800b4e8:	f000 fb52 	bl	800bb90 <_Bfree>
 800b4ec:	9605      	str	r6, [sp, #20]
 800b4ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4f0:	1b5a      	subs	r2, r3, r5
 800b4f2:	42ab      	cmp	r3, r5
 800b4f4:	d004      	beq.n	800b500 <_dtoa_r+0x824>
 800b4f6:	9905      	ldr	r1, [sp, #20]
 800b4f8:	9804      	ldr	r0, [sp, #16]
 800b4fa:	f000 fd0d 	bl	800bf18 <__pow5mult>
 800b4fe:	9005      	str	r0, [sp, #20]
 800b500:	2101      	movs	r1, #1
 800b502:	9804      	ldr	r0, [sp, #16]
 800b504:	f000 fc40 	bl	800bd88 <__i2b>
 800b508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b50a:	0006      	movs	r6, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	dd3a      	ble.n	800b586 <_dtoa_r+0x8aa>
 800b510:	001a      	movs	r2, r3
 800b512:	0001      	movs	r1, r0
 800b514:	9804      	ldr	r0, [sp, #16]
 800b516:	f000 fcff 	bl	800bf18 <__pow5mult>
 800b51a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b51c:	0006      	movs	r6, r0
 800b51e:	2500      	movs	r5, #0
 800b520:	2b01      	cmp	r3, #1
 800b522:	dc38      	bgt.n	800b596 <_dtoa_r+0x8ba>
 800b524:	2500      	movs	r5, #0
 800b526:	9b08      	ldr	r3, [sp, #32]
 800b528:	42ab      	cmp	r3, r5
 800b52a:	d130      	bne.n	800b58e <_dtoa_r+0x8b2>
 800b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52e:	031b      	lsls	r3, r3, #12
 800b530:	42ab      	cmp	r3, r5
 800b532:	d12c      	bne.n	800b58e <_dtoa_r+0x8b2>
 800b534:	4b72      	ldr	r3, [pc, #456]	; (800b700 <_dtoa_r+0xa24>)
 800b536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b538:	4213      	tst	r3, r2
 800b53a:	d028      	beq.n	800b58e <_dtoa_r+0x8b2>
 800b53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b53e:	3501      	adds	r5, #1
 800b540:	3301      	adds	r3, #1
 800b542:	930a      	str	r3, [sp, #40]	; 0x28
 800b544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b546:	3301      	adds	r3, #1
 800b548:	930c      	str	r3, [sp, #48]	; 0x30
 800b54a:	e020      	b.n	800b58e <_dtoa_r+0x8b2>
 800b54c:	2336      	movs	r3, #54	; 0x36
 800b54e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b550:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b552:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b554:	1a9b      	subs	r3, r3, r2
 800b556:	e795      	b.n	800b484 <_dtoa_r+0x7a8>
 800b558:	9b07      	ldr	r3, [sp, #28]
 800b55a:	1e5d      	subs	r5, r3, #1
 800b55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b55e:	42ab      	cmp	r3, r5
 800b560:	db07      	blt.n	800b572 <_dtoa_r+0x896>
 800b562:	1b5d      	subs	r5, r3, r5
 800b564:	9b07      	ldr	r3, [sp, #28]
 800b566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b568:	2b00      	cmp	r3, #0
 800b56a:	da8b      	bge.n	800b484 <_dtoa_r+0x7a8>
 800b56c:	1ae4      	subs	r4, r4, r3
 800b56e:	2300      	movs	r3, #0
 800b570:	e788      	b.n	800b484 <_dtoa_r+0x7a8>
 800b572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b576:	1aeb      	subs	r3, r5, r3
 800b578:	18d3      	adds	r3, r2, r3
 800b57a:	950d      	str	r5, [sp, #52]	; 0x34
 800b57c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b57e:	2500      	movs	r5, #0
 800b580:	e7f0      	b.n	800b564 <_dtoa_r+0x888>
 800b582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b584:	e7b7      	b.n	800b4f6 <_dtoa_r+0x81a>
 800b586:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b588:	2500      	movs	r5, #0
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	ddca      	ble.n	800b524 <_dtoa_r+0x848>
 800b58e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b590:	2001      	movs	r0, #1
 800b592:	2b00      	cmp	r3, #0
 800b594:	d008      	beq.n	800b5a8 <_dtoa_r+0x8cc>
 800b596:	6933      	ldr	r3, [r6, #16]
 800b598:	3303      	adds	r3, #3
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	18f3      	adds	r3, r6, r3
 800b59e:	6858      	ldr	r0, [r3, #4]
 800b5a0:	f000 fbaa 	bl	800bcf8 <__hi0bits>
 800b5a4:	2320      	movs	r3, #32
 800b5a6:	1a18      	subs	r0, r3, r0
 800b5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5aa:	1818      	adds	r0, r3, r0
 800b5ac:	0002      	movs	r2, r0
 800b5ae:	231f      	movs	r3, #31
 800b5b0:	401a      	ands	r2, r3
 800b5b2:	4218      	tst	r0, r3
 800b5b4:	d047      	beq.n	800b646 <_dtoa_r+0x96a>
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	dd3f      	ble.n	800b63e <_dtoa_r+0x962>
 800b5be:	231c      	movs	r3, #28
 800b5c0:	1a9b      	subs	r3, r3, r2
 800b5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5c4:	18e4      	adds	r4, r4, r3
 800b5c6:	18d2      	adds	r2, r2, r3
 800b5c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b5ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5cc:	18d3      	adds	r3, r2, r3
 800b5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dd05      	ble.n	800b5e2 <_dtoa_r+0x906>
 800b5d6:	001a      	movs	r2, r3
 800b5d8:	9905      	ldr	r1, [sp, #20]
 800b5da:	9804      	ldr	r0, [sp, #16]
 800b5dc:	f000 fcf8 	bl	800bfd0 <__lshift>
 800b5e0:	9005      	str	r0, [sp, #20]
 800b5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dd05      	ble.n	800b5f4 <_dtoa_r+0x918>
 800b5e8:	0031      	movs	r1, r6
 800b5ea:	001a      	movs	r2, r3
 800b5ec:	9804      	ldr	r0, [sp, #16]
 800b5ee:	f000 fcef 	bl	800bfd0 <__lshift>
 800b5f2:	0006      	movs	r6, r0
 800b5f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d027      	beq.n	800b64a <_dtoa_r+0x96e>
 800b5fa:	0031      	movs	r1, r6
 800b5fc:	9805      	ldr	r0, [sp, #20]
 800b5fe:	f000 fd55 	bl	800c0ac <__mcmp>
 800b602:	2800      	cmp	r0, #0
 800b604:	da21      	bge.n	800b64a <_dtoa_r+0x96e>
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	220a      	movs	r2, #10
 800b60a:	3b01      	subs	r3, #1
 800b60c:	9303      	str	r3, [sp, #12]
 800b60e:	9905      	ldr	r1, [sp, #20]
 800b610:	2300      	movs	r3, #0
 800b612:	9804      	ldr	r0, [sp, #16]
 800b614:	f000 fae0 	bl	800bbd8 <__multadd>
 800b618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b61a:	9005      	str	r0, [sp, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d100      	bne.n	800b622 <_dtoa_r+0x946>
 800b620:	e15d      	b.n	800b8de <_dtoa_r+0xc02>
 800b622:	2300      	movs	r3, #0
 800b624:	0039      	movs	r1, r7
 800b626:	220a      	movs	r2, #10
 800b628:	9804      	ldr	r0, [sp, #16]
 800b62a:	f000 fad5 	bl	800bbd8 <__multadd>
 800b62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b630:	0007      	movs	r7, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	dc49      	bgt.n	800b6ca <_dtoa_r+0x9ee>
 800b636:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b638:	2b02      	cmp	r3, #2
 800b63a:	dc0e      	bgt.n	800b65a <_dtoa_r+0x97e>
 800b63c:	e045      	b.n	800b6ca <_dtoa_r+0x9ee>
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d0c6      	beq.n	800b5d0 <_dtoa_r+0x8f4>
 800b642:	331c      	adds	r3, #28
 800b644:	e7bd      	b.n	800b5c2 <_dtoa_r+0x8e6>
 800b646:	0013      	movs	r3, r2
 800b648:	e7fb      	b.n	800b642 <_dtoa_r+0x966>
 800b64a:	9b07      	ldr	r3, [sp, #28]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	dc36      	bgt.n	800b6be <_dtoa_r+0x9e2>
 800b650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b652:	2b02      	cmp	r3, #2
 800b654:	dd33      	ble.n	800b6be <_dtoa_r+0x9e2>
 800b656:	9b07      	ldr	r3, [sp, #28]
 800b658:	930b      	str	r3, [sp, #44]	; 0x2c
 800b65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10c      	bne.n	800b67a <_dtoa_r+0x99e>
 800b660:	0031      	movs	r1, r6
 800b662:	2205      	movs	r2, #5
 800b664:	9804      	ldr	r0, [sp, #16]
 800b666:	f000 fab7 	bl	800bbd8 <__multadd>
 800b66a:	0006      	movs	r6, r0
 800b66c:	0001      	movs	r1, r0
 800b66e:	9805      	ldr	r0, [sp, #20]
 800b670:	f000 fd1c 	bl	800c0ac <__mcmp>
 800b674:	2800      	cmp	r0, #0
 800b676:	dd00      	ble.n	800b67a <_dtoa_r+0x99e>
 800b678:	e59f      	b.n	800b1ba <_dtoa_r+0x4de>
 800b67a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b67c:	43db      	mvns	r3, r3
 800b67e:	9303      	str	r3, [sp, #12]
 800b680:	9b06      	ldr	r3, [sp, #24]
 800b682:	9308      	str	r3, [sp, #32]
 800b684:	2500      	movs	r5, #0
 800b686:	0031      	movs	r1, r6
 800b688:	9804      	ldr	r0, [sp, #16]
 800b68a:	f000 fa81 	bl	800bb90 <_Bfree>
 800b68e:	2f00      	cmp	r7, #0
 800b690:	d100      	bne.n	800b694 <_dtoa_r+0x9b8>
 800b692:	e6a3      	b.n	800b3dc <_dtoa_r+0x700>
 800b694:	2d00      	cmp	r5, #0
 800b696:	d005      	beq.n	800b6a4 <_dtoa_r+0x9c8>
 800b698:	42bd      	cmp	r5, r7
 800b69a:	d003      	beq.n	800b6a4 <_dtoa_r+0x9c8>
 800b69c:	0029      	movs	r1, r5
 800b69e:	9804      	ldr	r0, [sp, #16]
 800b6a0:	f000 fa76 	bl	800bb90 <_Bfree>
 800b6a4:	0039      	movs	r1, r7
 800b6a6:	9804      	ldr	r0, [sp, #16]
 800b6a8:	f000 fa72 	bl	800bb90 <_Bfree>
 800b6ac:	e696      	b.n	800b3dc <_dtoa_r+0x700>
 800b6ae:	2600      	movs	r6, #0
 800b6b0:	0037      	movs	r7, r6
 800b6b2:	e7e2      	b.n	800b67a <_dtoa_r+0x99e>
 800b6b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6b6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	0037      	movs	r7, r6
 800b6bc:	e57d      	b.n	800b1ba <_dtoa_r+0x4de>
 800b6be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d100      	bne.n	800b6c6 <_dtoa_r+0x9ea>
 800b6c4:	e0c3      	b.n	800b84e <_dtoa_r+0xb72>
 800b6c6:	9b07      	ldr	r3, [sp, #28]
 800b6c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6ca:	2c00      	cmp	r4, #0
 800b6cc:	dd05      	ble.n	800b6da <_dtoa_r+0x9fe>
 800b6ce:	0039      	movs	r1, r7
 800b6d0:	0022      	movs	r2, r4
 800b6d2:	9804      	ldr	r0, [sp, #16]
 800b6d4:	f000 fc7c 	bl	800bfd0 <__lshift>
 800b6d8:	0007      	movs	r7, r0
 800b6da:	0038      	movs	r0, r7
 800b6dc:	2d00      	cmp	r5, #0
 800b6de:	d024      	beq.n	800b72a <_dtoa_r+0xa4e>
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	9804      	ldr	r0, [sp, #16]
 800b6e4:	f000 fa10 	bl	800bb08 <_Balloc>
 800b6e8:	1e04      	subs	r4, r0, #0
 800b6ea:	d111      	bne.n	800b710 <_dtoa_r+0xa34>
 800b6ec:	0022      	movs	r2, r4
 800b6ee:	4b05      	ldr	r3, [pc, #20]	; (800b704 <_dtoa_r+0xa28>)
 800b6f0:	4805      	ldr	r0, [pc, #20]	; (800b708 <_dtoa_r+0xa2c>)
 800b6f2:	4906      	ldr	r1, [pc, #24]	; (800b70c <_dtoa_r+0xa30>)
 800b6f4:	f7ff fb07 	bl	800ad06 <_dtoa_r+0x2a>
 800b6f8:	40240000 	.word	0x40240000
 800b6fc:	00000433 	.word	0x00000433
 800b700:	7ff00000 	.word	0x7ff00000
 800b704:	0800e6c5 	.word	0x0800e6c5
 800b708:	0800e66d 	.word	0x0800e66d
 800b70c:	000002ef 	.word	0x000002ef
 800b710:	0039      	movs	r1, r7
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	310c      	adds	r1, #12
 800b716:	3202      	adds	r2, #2
 800b718:	0092      	lsls	r2, r2, #2
 800b71a:	300c      	adds	r0, #12
 800b71c:	f7ff fa40 	bl	800aba0 <memcpy>
 800b720:	2201      	movs	r2, #1
 800b722:	0021      	movs	r1, r4
 800b724:	9804      	ldr	r0, [sp, #16]
 800b726:	f000 fc53 	bl	800bfd0 <__lshift>
 800b72a:	9b06      	ldr	r3, [sp, #24]
 800b72c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b72e:	9307      	str	r3, [sp, #28]
 800b730:	3b01      	subs	r3, #1
 800b732:	189b      	adds	r3, r3, r2
 800b734:	2201      	movs	r2, #1
 800b736:	003d      	movs	r5, r7
 800b738:	0007      	movs	r7, r0
 800b73a:	930e      	str	r3, [sp, #56]	; 0x38
 800b73c:	9b08      	ldr	r3, [sp, #32]
 800b73e:	4013      	ands	r3, r2
 800b740:	930d      	str	r3, [sp, #52]	; 0x34
 800b742:	0031      	movs	r1, r6
 800b744:	9805      	ldr	r0, [sp, #20]
 800b746:	f7ff fa39 	bl	800abbc <quorem>
 800b74a:	0029      	movs	r1, r5
 800b74c:	0004      	movs	r4, r0
 800b74e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b750:	9805      	ldr	r0, [sp, #20]
 800b752:	f000 fcab 	bl	800c0ac <__mcmp>
 800b756:	003a      	movs	r2, r7
 800b758:	900c      	str	r0, [sp, #48]	; 0x30
 800b75a:	0031      	movs	r1, r6
 800b75c:	9804      	ldr	r0, [sp, #16]
 800b75e:	f000 fcc1 	bl	800c0e4 <__mdiff>
 800b762:	2201      	movs	r2, #1
 800b764:	68c3      	ldr	r3, [r0, #12]
 800b766:	3430      	adds	r4, #48	; 0x30
 800b768:	9008      	str	r0, [sp, #32]
 800b76a:	920a      	str	r2, [sp, #40]	; 0x28
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <_dtoa_r+0xa9e>
 800b770:	0001      	movs	r1, r0
 800b772:	9805      	ldr	r0, [sp, #20]
 800b774:	f000 fc9a 	bl	800c0ac <__mcmp>
 800b778:	900a      	str	r0, [sp, #40]	; 0x28
 800b77a:	9908      	ldr	r1, [sp, #32]
 800b77c:	9804      	ldr	r0, [sp, #16]
 800b77e:	f000 fa07 	bl	800bb90 <_Bfree>
 800b782:	9b07      	ldr	r3, [sp, #28]
 800b784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b786:	3301      	adds	r3, #1
 800b788:	9308      	str	r3, [sp, #32]
 800b78a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b78c:	4313      	orrs	r3, r2
 800b78e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b790:	4313      	orrs	r3, r2
 800b792:	d109      	bne.n	800b7a8 <_dtoa_r+0xacc>
 800b794:	2c39      	cmp	r4, #57	; 0x39
 800b796:	d022      	beq.n	800b7de <_dtoa_r+0xb02>
 800b798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dd01      	ble.n	800b7a2 <_dtoa_r+0xac6>
 800b79e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b7a0:	3431      	adds	r4, #49	; 0x31
 800b7a2:	9b07      	ldr	r3, [sp, #28]
 800b7a4:	701c      	strb	r4, [r3, #0]
 800b7a6:	e76e      	b.n	800b686 <_dtoa_r+0x9aa>
 800b7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	db04      	blt.n	800b7b8 <_dtoa_r+0xadc>
 800b7ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	d11e      	bne.n	800b7f6 <_dtoa_r+0xb1a>
 800b7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	ddf1      	ble.n	800b7a2 <_dtoa_r+0xac6>
 800b7be:	9905      	ldr	r1, [sp, #20]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	9804      	ldr	r0, [sp, #16]
 800b7c4:	f000 fc04 	bl	800bfd0 <__lshift>
 800b7c8:	0031      	movs	r1, r6
 800b7ca:	9005      	str	r0, [sp, #20]
 800b7cc:	f000 fc6e 	bl	800c0ac <__mcmp>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	dc02      	bgt.n	800b7da <_dtoa_r+0xafe>
 800b7d4:	d1e5      	bne.n	800b7a2 <_dtoa_r+0xac6>
 800b7d6:	07e3      	lsls	r3, r4, #31
 800b7d8:	d5e3      	bpl.n	800b7a2 <_dtoa_r+0xac6>
 800b7da:	2c39      	cmp	r4, #57	; 0x39
 800b7dc:	d1df      	bne.n	800b79e <_dtoa_r+0xac2>
 800b7de:	2339      	movs	r3, #57	; 0x39
 800b7e0:	9a07      	ldr	r2, [sp, #28]
 800b7e2:	7013      	strb	r3, [r2, #0]
 800b7e4:	9b08      	ldr	r3, [sp, #32]
 800b7e6:	9308      	str	r3, [sp, #32]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	781a      	ldrb	r2, [r3, #0]
 800b7ec:	2a39      	cmp	r2, #57	; 0x39
 800b7ee:	d063      	beq.n	800b8b8 <_dtoa_r+0xbdc>
 800b7f0:	3201      	adds	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	e747      	b.n	800b686 <_dtoa_r+0x9aa>
 800b7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dd03      	ble.n	800b804 <_dtoa_r+0xb28>
 800b7fc:	2c39      	cmp	r4, #57	; 0x39
 800b7fe:	d0ee      	beq.n	800b7de <_dtoa_r+0xb02>
 800b800:	3401      	adds	r4, #1
 800b802:	e7ce      	b.n	800b7a2 <_dtoa_r+0xac6>
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	9a07      	ldr	r2, [sp, #28]
 800b808:	701c      	strb	r4, [r3, #0]
 800b80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d03e      	beq.n	800b88e <_dtoa_r+0xbb2>
 800b810:	2300      	movs	r3, #0
 800b812:	220a      	movs	r2, #10
 800b814:	9905      	ldr	r1, [sp, #20]
 800b816:	9804      	ldr	r0, [sp, #16]
 800b818:	f000 f9de 	bl	800bbd8 <__multadd>
 800b81c:	2300      	movs	r3, #0
 800b81e:	9005      	str	r0, [sp, #20]
 800b820:	220a      	movs	r2, #10
 800b822:	0029      	movs	r1, r5
 800b824:	9804      	ldr	r0, [sp, #16]
 800b826:	42bd      	cmp	r5, r7
 800b828:	d106      	bne.n	800b838 <_dtoa_r+0xb5c>
 800b82a:	f000 f9d5 	bl	800bbd8 <__multadd>
 800b82e:	0005      	movs	r5, r0
 800b830:	0007      	movs	r7, r0
 800b832:	9b08      	ldr	r3, [sp, #32]
 800b834:	9307      	str	r3, [sp, #28]
 800b836:	e784      	b.n	800b742 <_dtoa_r+0xa66>
 800b838:	f000 f9ce 	bl	800bbd8 <__multadd>
 800b83c:	0039      	movs	r1, r7
 800b83e:	0005      	movs	r5, r0
 800b840:	2300      	movs	r3, #0
 800b842:	220a      	movs	r2, #10
 800b844:	9804      	ldr	r0, [sp, #16]
 800b846:	f000 f9c7 	bl	800bbd8 <__multadd>
 800b84a:	0007      	movs	r7, r0
 800b84c:	e7f1      	b.n	800b832 <_dtoa_r+0xb56>
 800b84e:	9b07      	ldr	r3, [sp, #28]
 800b850:	930b      	str	r3, [sp, #44]	; 0x2c
 800b852:	2500      	movs	r5, #0
 800b854:	0031      	movs	r1, r6
 800b856:	9805      	ldr	r0, [sp, #20]
 800b858:	f7ff f9b0 	bl	800abbc <quorem>
 800b85c:	9b06      	ldr	r3, [sp, #24]
 800b85e:	3030      	adds	r0, #48	; 0x30
 800b860:	5558      	strb	r0, [r3, r5]
 800b862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b864:	3501      	adds	r5, #1
 800b866:	0004      	movs	r4, r0
 800b868:	42ab      	cmp	r3, r5
 800b86a:	dd07      	ble.n	800b87c <_dtoa_r+0xba0>
 800b86c:	2300      	movs	r3, #0
 800b86e:	220a      	movs	r2, #10
 800b870:	9905      	ldr	r1, [sp, #20]
 800b872:	9804      	ldr	r0, [sp, #16]
 800b874:	f000 f9b0 	bl	800bbd8 <__multadd>
 800b878:	9005      	str	r0, [sp, #20]
 800b87a:	e7eb      	b.n	800b854 <_dtoa_r+0xb78>
 800b87c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b87e:	2301      	movs	r3, #1
 800b880:	2a00      	cmp	r2, #0
 800b882:	dd00      	ble.n	800b886 <_dtoa_r+0xbaa>
 800b884:	0013      	movs	r3, r2
 800b886:	2500      	movs	r5, #0
 800b888:	9a06      	ldr	r2, [sp, #24]
 800b88a:	18d3      	adds	r3, r2, r3
 800b88c:	9308      	str	r3, [sp, #32]
 800b88e:	9905      	ldr	r1, [sp, #20]
 800b890:	2201      	movs	r2, #1
 800b892:	9804      	ldr	r0, [sp, #16]
 800b894:	f000 fb9c 	bl	800bfd0 <__lshift>
 800b898:	0031      	movs	r1, r6
 800b89a:	9005      	str	r0, [sp, #20]
 800b89c:	f000 fc06 	bl	800c0ac <__mcmp>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	dc9f      	bgt.n	800b7e4 <_dtoa_r+0xb08>
 800b8a4:	d101      	bne.n	800b8aa <_dtoa_r+0xbce>
 800b8a6:	07e4      	lsls	r4, r4, #31
 800b8a8:	d49c      	bmi.n	800b7e4 <_dtoa_r+0xb08>
 800b8aa:	9b08      	ldr	r3, [sp, #32]
 800b8ac:	9308      	str	r3, [sp, #32]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	781a      	ldrb	r2, [r3, #0]
 800b8b2:	2a30      	cmp	r2, #48	; 0x30
 800b8b4:	d0fa      	beq.n	800b8ac <_dtoa_r+0xbd0>
 800b8b6:	e6e6      	b.n	800b686 <_dtoa_r+0x9aa>
 800b8b8:	9a06      	ldr	r2, [sp, #24]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d193      	bne.n	800b7e6 <_dtoa_r+0xb0a>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	2331      	movs	r3, #49	; 0x31
 800b8c6:	7013      	strb	r3, [r2, #0]
 800b8c8:	e6dd      	b.n	800b686 <_dtoa_r+0x9aa>
 800b8ca:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <_dtoa_r+0xc14>)
 800b8cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b8ce:	9306      	str	r3, [sp, #24]
 800b8d0:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <_dtoa_r+0xc18>)
 800b8d2:	2a00      	cmp	r2, #0
 800b8d4:	d001      	beq.n	800b8da <_dtoa_r+0xbfe>
 800b8d6:	f7ff fa49 	bl	800ad6c <_dtoa_r+0x90>
 800b8da:	f7ff fa49 	bl	800ad70 <_dtoa_r+0x94>
 800b8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dcb6      	bgt.n	800b852 <_dtoa_r+0xb76>
 800b8e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	dd00      	ble.n	800b8ec <_dtoa_r+0xc10>
 800b8ea:	e6b6      	b.n	800b65a <_dtoa_r+0x97e>
 800b8ec:	e7b1      	b.n	800b852 <_dtoa_r+0xb76>
 800b8ee:	46c0      	nop			; (mov r8, r8)
 800b8f0:	0800e649 	.word	0x0800e649
 800b8f4:	0800e651 	.word	0x0800e651

0800b8f8 <_free_r>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	0005      	movs	r5, r0
 800b8fc:	2900      	cmp	r1, #0
 800b8fe:	d010      	beq.n	800b922 <_free_r+0x2a>
 800b900:	1f0c      	subs	r4, r1, #4
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	da00      	bge.n	800b90a <_free_r+0x12>
 800b908:	18e4      	adds	r4, r4, r3
 800b90a:	0028      	movs	r0, r5
 800b90c:	f000 f8ec 	bl	800bae8 <__malloc_lock>
 800b910:	4a1d      	ldr	r2, [pc, #116]	; (800b988 <_free_r+0x90>)
 800b912:	6813      	ldr	r3, [r2, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d105      	bne.n	800b924 <_free_r+0x2c>
 800b918:	6063      	str	r3, [r4, #4]
 800b91a:	6014      	str	r4, [r2, #0]
 800b91c:	0028      	movs	r0, r5
 800b91e:	f000 f8eb 	bl	800baf8 <__malloc_unlock>
 800b922:	bd70      	pop	{r4, r5, r6, pc}
 800b924:	42a3      	cmp	r3, r4
 800b926:	d908      	bls.n	800b93a <_free_r+0x42>
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	1821      	adds	r1, r4, r0
 800b92c:	428b      	cmp	r3, r1
 800b92e:	d1f3      	bne.n	800b918 <_free_r+0x20>
 800b930:	6819      	ldr	r1, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	1809      	adds	r1, r1, r0
 800b936:	6021      	str	r1, [r4, #0]
 800b938:	e7ee      	b.n	800b918 <_free_r+0x20>
 800b93a:	001a      	movs	r2, r3
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <_free_r+0x4e>
 800b942:	42a3      	cmp	r3, r4
 800b944:	d9f9      	bls.n	800b93a <_free_r+0x42>
 800b946:	6811      	ldr	r1, [r2, #0]
 800b948:	1850      	adds	r0, r2, r1
 800b94a:	42a0      	cmp	r0, r4
 800b94c:	d10b      	bne.n	800b966 <_free_r+0x6e>
 800b94e:	6820      	ldr	r0, [r4, #0]
 800b950:	1809      	adds	r1, r1, r0
 800b952:	1850      	adds	r0, r2, r1
 800b954:	6011      	str	r1, [r2, #0]
 800b956:	4283      	cmp	r3, r0
 800b958:	d1e0      	bne.n	800b91c <_free_r+0x24>
 800b95a:	6818      	ldr	r0, [r3, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	1841      	adds	r1, r0, r1
 800b960:	6011      	str	r1, [r2, #0]
 800b962:	6053      	str	r3, [r2, #4]
 800b964:	e7da      	b.n	800b91c <_free_r+0x24>
 800b966:	42a0      	cmp	r0, r4
 800b968:	d902      	bls.n	800b970 <_free_r+0x78>
 800b96a:	230c      	movs	r3, #12
 800b96c:	602b      	str	r3, [r5, #0]
 800b96e:	e7d5      	b.n	800b91c <_free_r+0x24>
 800b970:	6820      	ldr	r0, [r4, #0]
 800b972:	1821      	adds	r1, r4, r0
 800b974:	428b      	cmp	r3, r1
 800b976:	d103      	bne.n	800b980 <_free_r+0x88>
 800b978:	6819      	ldr	r1, [r3, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	1809      	adds	r1, r1, r0
 800b97e:	6021      	str	r1, [r4, #0]
 800b980:	6063      	str	r3, [r4, #4]
 800b982:	6054      	str	r4, [r2, #4]
 800b984:	e7ca      	b.n	800b91c <_free_r+0x24>
 800b986:	46c0      	nop			; (mov r8, r8)
 800b988:	20002210 	.word	0x20002210

0800b98c <malloc>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	4b03      	ldr	r3, [pc, #12]	; (800b99c <malloc+0x10>)
 800b990:	0001      	movs	r1, r0
 800b992:	6818      	ldr	r0, [r3, #0]
 800b994:	f000 f826 	bl	800b9e4 <_malloc_r>
 800b998:	bd10      	pop	{r4, pc}
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	20000068 	.word	0x20000068

0800b9a0 <sbrk_aligned>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	4e0f      	ldr	r6, [pc, #60]	; (800b9e0 <sbrk_aligned+0x40>)
 800b9a4:	000d      	movs	r5, r1
 800b9a6:	6831      	ldr	r1, [r6, #0]
 800b9a8:	0004      	movs	r4, r0
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	d102      	bne.n	800b9b4 <sbrk_aligned+0x14>
 800b9ae:	f001 fe57 	bl	800d660 <_sbrk_r>
 800b9b2:	6030      	str	r0, [r6, #0]
 800b9b4:	0029      	movs	r1, r5
 800b9b6:	0020      	movs	r0, r4
 800b9b8:	f001 fe52 	bl	800d660 <_sbrk_r>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d00a      	beq.n	800b9d6 <sbrk_aligned+0x36>
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	1cc5      	adds	r5, r0, #3
 800b9c4:	439d      	bics	r5, r3
 800b9c6:	42a8      	cmp	r0, r5
 800b9c8:	d007      	beq.n	800b9da <sbrk_aligned+0x3a>
 800b9ca:	1a29      	subs	r1, r5, r0
 800b9cc:	0020      	movs	r0, r4
 800b9ce:	f001 fe47 	bl	800d660 <_sbrk_r>
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d101      	bne.n	800b9da <sbrk_aligned+0x3a>
 800b9d6:	2501      	movs	r5, #1
 800b9d8:	426d      	negs	r5, r5
 800b9da:	0028      	movs	r0, r5
 800b9dc:	bd70      	pop	{r4, r5, r6, pc}
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	20002214 	.word	0x20002214

0800b9e4 <_malloc_r>:
 800b9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9e6:	2203      	movs	r2, #3
 800b9e8:	1ccb      	adds	r3, r1, #3
 800b9ea:	4393      	bics	r3, r2
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	0006      	movs	r6, r0
 800b9f0:	001f      	movs	r7, r3
 800b9f2:	2b0c      	cmp	r3, #12
 800b9f4:	d238      	bcs.n	800ba68 <_malloc_r+0x84>
 800b9f6:	270c      	movs	r7, #12
 800b9f8:	42b9      	cmp	r1, r7
 800b9fa:	d837      	bhi.n	800ba6c <_malloc_r+0x88>
 800b9fc:	0030      	movs	r0, r6
 800b9fe:	f000 f873 	bl	800bae8 <__malloc_lock>
 800ba02:	4b38      	ldr	r3, [pc, #224]	; (800bae4 <_malloc_r+0x100>)
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	001c      	movs	r4, r3
 800ba0a:	2c00      	cmp	r4, #0
 800ba0c:	d133      	bne.n	800ba76 <_malloc_r+0x92>
 800ba0e:	0039      	movs	r1, r7
 800ba10:	0030      	movs	r0, r6
 800ba12:	f7ff ffc5 	bl	800b9a0 <sbrk_aligned>
 800ba16:	0004      	movs	r4, r0
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d15e      	bne.n	800bada <_malloc_r+0xf6>
 800ba1c:	9b00      	ldr	r3, [sp, #0]
 800ba1e:	681c      	ldr	r4, [r3, #0]
 800ba20:	0025      	movs	r5, r4
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	d14e      	bne.n	800bac4 <_malloc_r+0xe0>
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	d051      	beq.n	800bace <_malloc_r+0xea>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	0029      	movs	r1, r5
 800ba2e:	18e3      	adds	r3, r4, r3
 800ba30:	0030      	movs	r0, r6
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	f001 fe14 	bl	800d660 <_sbrk_r>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	d147      	bne.n	800bace <_malloc_r+0xea>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	0030      	movs	r0, r6
 800ba42:	1aff      	subs	r7, r7, r3
 800ba44:	0039      	movs	r1, r7
 800ba46:	f7ff ffab 	bl	800b9a0 <sbrk_aligned>
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	d03f      	beq.n	800bace <_malloc_r+0xea>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	19db      	adds	r3, r3, r7
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d040      	beq.n	800bade <_malloc_r+0xfa>
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	42a2      	cmp	r2, r4
 800ba60:	d133      	bne.n	800baca <_malloc_r+0xe6>
 800ba62:	2200      	movs	r2, #0
 800ba64:	605a      	str	r2, [r3, #4]
 800ba66:	e014      	b.n	800ba92 <_malloc_r+0xae>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dac5      	bge.n	800b9f8 <_malloc_r+0x14>
 800ba6c:	230c      	movs	r3, #12
 800ba6e:	2500      	movs	r5, #0
 800ba70:	6033      	str	r3, [r6, #0]
 800ba72:	0028      	movs	r0, r5
 800ba74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba76:	6821      	ldr	r1, [r4, #0]
 800ba78:	1bc9      	subs	r1, r1, r7
 800ba7a:	d420      	bmi.n	800babe <_malloc_r+0xda>
 800ba7c:	290b      	cmp	r1, #11
 800ba7e:	d918      	bls.n	800bab2 <_malloc_r+0xce>
 800ba80:	19e2      	adds	r2, r4, r7
 800ba82:	6027      	str	r7, [r4, #0]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d112      	bne.n	800baae <_malloc_r+0xca>
 800ba88:	9b00      	ldr	r3, [sp, #0]
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	6863      	ldr	r3, [r4, #4]
 800ba8e:	6011      	str	r1, [r2, #0]
 800ba90:	6053      	str	r3, [r2, #4]
 800ba92:	0030      	movs	r0, r6
 800ba94:	0025      	movs	r5, r4
 800ba96:	f000 f82f 	bl	800baf8 <__malloc_unlock>
 800ba9a:	2207      	movs	r2, #7
 800ba9c:	350b      	adds	r5, #11
 800ba9e:	1d23      	adds	r3, r4, #4
 800baa0:	4395      	bics	r5, r2
 800baa2:	1aea      	subs	r2, r5, r3
 800baa4:	429d      	cmp	r5, r3
 800baa6:	d0e4      	beq.n	800ba72 <_malloc_r+0x8e>
 800baa8:	1b5b      	subs	r3, r3, r5
 800baaa:	50a3      	str	r3, [r4, r2]
 800baac:	e7e1      	b.n	800ba72 <_malloc_r+0x8e>
 800baae:	605a      	str	r2, [r3, #4]
 800bab0:	e7ec      	b.n	800ba8c <_malloc_r+0xa8>
 800bab2:	6862      	ldr	r2, [r4, #4]
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	d1d5      	bne.n	800ba64 <_malloc_r+0x80>
 800bab8:	9b00      	ldr	r3, [sp, #0]
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	e7e9      	b.n	800ba92 <_malloc_r+0xae>
 800babe:	0023      	movs	r3, r4
 800bac0:	6864      	ldr	r4, [r4, #4]
 800bac2:	e7a2      	b.n	800ba0a <_malloc_r+0x26>
 800bac4:	002c      	movs	r4, r5
 800bac6:	686d      	ldr	r5, [r5, #4]
 800bac8:	e7ab      	b.n	800ba22 <_malloc_r+0x3e>
 800baca:	0013      	movs	r3, r2
 800bacc:	e7c4      	b.n	800ba58 <_malloc_r+0x74>
 800bace:	230c      	movs	r3, #12
 800bad0:	0030      	movs	r0, r6
 800bad2:	6033      	str	r3, [r6, #0]
 800bad4:	f000 f810 	bl	800baf8 <__malloc_unlock>
 800bad8:	e7cb      	b.n	800ba72 <_malloc_r+0x8e>
 800bada:	6027      	str	r7, [r4, #0]
 800badc:	e7d9      	b.n	800ba92 <_malloc_r+0xae>
 800bade:	605b      	str	r3, [r3, #4]
 800bae0:	deff      	udf	#255	; 0xff
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	20002210 	.word	0x20002210

0800bae8 <__malloc_lock>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	4802      	ldr	r0, [pc, #8]	; (800baf4 <__malloc_lock+0xc>)
 800baec:	f7ff f84b 	bl	800ab86 <__retarget_lock_acquire_recursive>
 800baf0:	bd10      	pop	{r4, pc}
 800baf2:	46c0      	nop			; (mov r8, r8)
 800baf4:	2000220c 	.word	0x2000220c

0800baf8 <__malloc_unlock>:
 800baf8:	b510      	push	{r4, lr}
 800bafa:	4802      	ldr	r0, [pc, #8]	; (800bb04 <__malloc_unlock+0xc>)
 800bafc:	f7ff f844 	bl	800ab88 <__retarget_lock_release_recursive>
 800bb00:	bd10      	pop	{r4, pc}
 800bb02:	46c0      	nop			; (mov r8, r8)
 800bb04:	2000220c 	.word	0x2000220c

0800bb08 <_Balloc>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	69c5      	ldr	r5, [r0, #28]
 800bb0c:	0006      	movs	r6, r0
 800bb0e:	000c      	movs	r4, r1
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	d10e      	bne.n	800bb32 <_Balloc+0x2a>
 800bb14:	2010      	movs	r0, #16
 800bb16:	f7ff ff39 	bl	800b98c <malloc>
 800bb1a:	1e02      	subs	r2, r0, #0
 800bb1c:	61f0      	str	r0, [r6, #28]
 800bb1e:	d104      	bne.n	800bb2a <_Balloc+0x22>
 800bb20:	216b      	movs	r1, #107	; 0x6b
 800bb22:	4b19      	ldr	r3, [pc, #100]	; (800bb88 <_Balloc+0x80>)
 800bb24:	4819      	ldr	r0, [pc, #100]	; (800bb8c <_Balloc+0x84>)
 800bb26:	f001 fdb3 	bl	800d690 <__assert_func>
 800bb2a:	6045      	str	r5, [r0, #4]
 800bb2c:	6085      	str	r5, [r0, #8]
 800bb2e:	6005      	str	r5, [r0, #0]
 800bb30:	60c5      	str	r5, [r0, #12]
 800bb32:	69f5      	ldr	r5, [r6, #28]
 800bb34:	68eb      	ldr	r3, [r5, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d013      	beq.n	800bb62 <_Balloc+0x5a>
 800bb3a:	69f3      	ldr	r3, [r6, #28]
 800bb3c:	00a2      	lsls	r2, r4, #2
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	189b      	adds	r3, r3, r2
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d118      	bne.n	800bb7a <_Balloc+0x72>
 800bb48:	2101      	movs	r1, #1
 800bb4a:	000d      	movs	r5, r1
 800bb4c:	40a5      	lsls	r5, r4
 800bb4e:	1d6a      	adds	r2, r5, #5
 800bb50:	0030      	movs	r0, r6
 800bb52:	0092      	lsls	r2, r2, #2
 800bb54:	f001 fdba 	bl	800d6cc <_calloc_r>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d00c      	beq.n	800bb76 <_Balloc+0x6e>
 800bb5c:	6044      	str	r4, [r0, #4]
 800bb5e:	6085      	str	r5, [r0, #8]
 800bb60:	e00d      	b.n	800bb7e <_Balloc+0x76>
 800bb62:	2221      	movs	r2, #33	; 0x21
 800bb64:	2104      	movs	r1, #4
 800bb66:	0030      	movs	r0, r6
 800bb68:	f001 fdb0 	bl	800d6cc <_calloc_r>
 800bb6c:	69f3      	ldr	r3, [r6, #28]
 800bb6e:	60e8      	str	r0, [r5, #12]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e1      	bne.n	800bb3a <_Balloc+0x32>
 800bb76:	2000      	movs	r0, #0
 800bb78:	bd70      	pop	{r4, r5, r6, pc}
 800bb7a:	6802      	ldr	r2, [r0, #0]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6103      	str	r3, [r0, #16]
 800bb82:	60c3      	str	r3, [r0, #12]
 800bb84:	e7f8      	b.n	800bb78 <_Balloc+0x70>
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	0800e656 	.word	0x0800e656
 800bb8c:	0800e6d6 	.word	0x0800e6d6

0800bb90 <_Bfree>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	69c6      	ldr	r6, [r0, #28]
 800bb94:	0005      	movs	r5, r0
 800bb96:	000c      	movs	r4, r1
 800bb98:	2e00      	cmp	r6, #0
 800bb9a:	d10e      	bne.n	800bbba <_Bfree+0x2a>
 800bb9c:	2010      	movs	r0, #16
 800bb9e:	f7ff fef5 	bl	800b98c <malloc>
 800bba2:	1e02      	subs	r2, r0, #0
 800bba4:	61e8      	str	r0, [r5, #28]
 800bba6:	d104      	bne.n	800bbb2 <_Bfree+0x22>
 800bba8:	218f      	movs	r1, #143	; 0x8f
 800bbaa:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <_Bfree+0x40>)
 800bbac:	4809      	ldr	r0, [pc, #36]	; (800bbd4 <_Bfree+0x44>)
 800bbae:	f001 fd6f 	bl	800d690 <__assert_func>
 800bbb2:	6046      	str	r6, [r0, #4]
 800bbb4:	6086      	str	r6, [r0, #8]
 800bbb6:	6006      	str	r6, [r0, #0]
 800bbb8:	60c6      	str	r6, [r0, #12]
 800bbba:	2c00      	cmp	r4, #0
 800bbbc:	d007      	beq.n	800bbce <_Bfree+0x3e>
 800bbbe:	69eb      	ldr	r3, [r5, #28]
 800bbc0:	6862      	ldr	r2, [r4, #4]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	0092      	lsls	r2, r2, #2
 800bbc6:	189b      	adds	r3, r3, r2
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	6022      	str	r2, [r4, #0]
 800bbcc:	601c      	str	r4, [r3, #0]
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	0800e656 	.word	0x0800e656
 800bbd4:	0800e6d6 	.word	0x0800e6d6

0800bbd8 <__multadd>:
 800bbd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbda:	000e      	movs	r6, r1
 800bbdc:	9001      	str	r0, [sp, #4]
 800bbde:	000c      	movs	r4, r1
 800bbe0:	001d      	movs	r5, r3
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	690f      	ldr	r7, [r1, #16]
 800bbe6:	3614      	adds	r6, #20
 800bbe8:	6833      	ldr	r3, [r6, #0]
 800bbea:	3001      	adds	r0, #1
 800bbec:	b299      	uxth	r1, r3
 800bbee:	4351      	muls	r1, r2
 800bbf0:	0c1b      	lsrs	r3, r3, #16
 800bbf2:	4353      	muls	r3, r2
 800bbf4:	1949      	adds	r1, r1, r5
 800bbf6:	0c0d      	lsrs	r5, r1, #16
 800bbf8:	195b      	adds	r3, r3, r5
 800bbfa:	0c1d      	lsrs	r5, r3, #16
 800bbfc:	b289      	uxth	r1, r1
 800bbfe:	041b      	lsls	r3, r3, #16
 800bc00:	185b      	adds	r3, r3, r1
 800bc02:	c608      	stmia	r6!, {r3}
 800bc04:	4287      	cmp	r7, r0
 800bc06:	dcef      	bgt.n	800bbe8 <__multadd+0x10>
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	d022      	beq.n	800bc52 <__multadd+0x7a>
 800bc0c:	68a3      	ldr	r3, [r4, #8]
 800bc0e:	42bb      	cmp	r3, r7
 800bc10:	dc19      	bgt.n	800bc46 <__multadd+0x6e>
 800bc12:	6861      	ldr	r1, [r4, #4]
 800bc14:	9801      	ldr	r0, [sp, #4]
 800bc16:	3101      	adds	r1, #1
 800bc18:	f7ff ff76 	bl	800bb08 <_Balloc>
 800bc1c:	1e06      	subs	r6, r0, #0
 800bc1e:	d105      	bne.n	800bc2c <__multadd+0x54>
 800bc20:	0032      	movs	r2, r6
 800bc22:	21ba      	movs	r1, #186	; 0xba
 800bc24:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <__multadd+0x80>)
 800bc26:	480d      	ldr	r0, [pc, #52]	; (800bc5c <__multadd+0x84>)
 800bc28:	f001 fd32 	bl	800d690 <__assert_func>
 800bc2c:	0021      	movs	r1, r4
 800bc2e:	6922      	ldr	r2, [r4, #16]
 800bc30:	310c      	adds	r1, #12
 800bc32:	3202      	adds	r2, #2
 800bc34:	0092      	lsls	r2, r2, #2
 800bc36:	300c      	adds	r0, #12
 800bc38:	f7fe ffb2 	bl	800aba0 <memcpy>
 800bc3c:	0021      	movs	r1, r4
 800bc3e:	9801      	ldr	r0, [sp, #4]
 800bc40:	f7ff ffa6 	bl	800bb90 <_Bfree>
 800bc44:	0034      	movs	r4, r6
 800bc46:	1d3b      	adds	r3, r7, #4
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	18e3      	adds	r3, r4, r3
 800bc4c:	605d      	str	r5, [r3, #4]
 800bc4e:	1c7b      	adds	r3, r7, #1
 800bc50:	6123      	str	r3, [r4, #16]
 800bc52:	0020      	movs	r0, r4
 800bc54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	0800e6c5 	.word	0x0800e6c5
 800bc5c:	0800e6d6 	.word	0x0800e6d6

0800bc60 <__s2b>:
 800bc60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc62:	0006      	movs	r6, r0
 800bc64:	0018      	movs	r0, r3
 800bc66:	000c      	movs	r4, r1
 800bc68:	3008      	adds	r0, #8
 800bc6a:	2109      	movs	r1, #9
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	0015      	movs	r5, r2
 800bc70:	f7f4 faf0 	bl	8000254 <__divsi3>
 800bc74:	2301      	movs	r3, #1
 800bc76:	2100      	movs	r1, #0
 800bc78:	4283      	cmp	r3, r0
 800bc7a:	db0a      	blt.n	800bc92 <__s2b+0x32>
 800bc7c:	0030      	movs	r0, r6
 800bc7e:	f7ff ff43 	bl	800bb08 <_Balloc>
 800bc82:	1e01      	subs	r1, r0, #0
 800bc84:	d108      	bne.n	800bc98 <__s2b+0x38>
 800bc86:	000a      	movs	r2, r1
 800bc88:	4b19      	ldr	r3, [pc, #100]	; (800bcf0 <__s2b+0x90>)
 800bc8a:	481a      	ldr	r0, [pc, #104]	; (800bcf4 <__s2b+0x94>)
 800bc8c:	31d3      	adds	r1, #211	; 0xd3
 800bc8e:	f001 fcff 	bl	800d690 <__assert_func>
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	3101      	adds	r1, #1
 800bc96:	e7ef      	b.n	800bc78 <__s2b+0x18>
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	6143      	str	r3, [r0, #20]
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	6103      	str	r3, [r0, #16]
 800bca0:	2d09      	cmp	r5, #9
 800bca2:	dd18      	ble.n	800bcd6 <__s2b+0x76>
 800bca4:	0023      	movs	r3, r4
 800bca6:	3309      	adds	r3, #9
 800bca8:	001f      	movs	r7, r3
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	1964      	adds	r4, r4, r5
 800bcae:	783b      	ldrb	r3, [r7, #0]
 800bcb0:	220a      	movs	r2, #10
 800bcb2:	0030      	movs	r0, r6
 800bcb4:	3b30      	subs	r3, #48	; 0x30
 800bcb6:	f7ff ff8f 	bl	800bbd8 <__multadd>
 800bcba:	3701      	adds	r7, #1
 800bcbc:	0001      	movs	r1, r0
 800bcbe:	42a7      	cmp	r7, r4
 800bcc0:	d1f5      	bne.n	800bcae <__s2b+0x4e>
 800bcc2:	002c      	movs	r4, r5
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	3c08      	subs	r4, #8
 800bcc8:	191c      	adds	r4, r3, r4
 800bcca:	002f      	movs	r7, r5
 800bccc:	9b01      	ldr	r3, [sp, #4]
 800bcce:	429f      	cmp	r7, r3
 800bcd0:	db04      	blt.n	800bcdc <__s2b+0x7c>
 800bcd2:	0008      	movs	r0, r1
 800bcd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcd6:	2509      	movs	r5, #9
 800bcd8:	340a      	adds	r4, #10
 800bcda:	e7f6      	b.n	800bcca <__s2b+0x6a>
 800bcdc:	1b63      	subs	r3, r4, r5
 800bcde:	5ddb      	ldrb	r3, [r3, r7]
 800bce0:	220a      	movs	r2, #10
 800bce2:	0030      	movs	r0, r6
 800bce4:	3b30      	subs	r3, #48	; 0x30
 800bce6:	f7ff ff77 	bl	800bbd8 <__multadd>
 800bcea:	3701      	adds	r7, #1
 800bcec:	0001      	movs	r1, r0
 800bcee:	e7ed      	b.n	800bccc <__s2b+0x6c>
 800bcf0:	0800e6c5 	.word	0x0800e6c5
 800bcf4:	0800e6d6 	.word	0x0800e6d6

0800bcf8 <__hi0bits>:
 800bcf8:	0003      	movs	r3, r0
 800bcfa:	0c02      	lsrs	r2, r0, #16
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	4282      	cmp	r2, r0
 800bd00:	d101      	bne.n	800bd06 <__hi0bits+0xe>
 800bd02:	041b      	lsls	r3, r3, #16
 800bd04:	3010      	adds	r0, #16
 800bd06:	0e1a      	lsrs	r2, r3, #24
 800bd08:	d101      	bne.n	800bd0e <__hi0bits+0x16>
 800bd0a:	3008      	adds	r0, #8
 800bd0c:	021b      	lsls	r3, r3, #8
 800bd0e:	0f1a      	lsrs	r2, r3, #28
 800bd10:	d101      	bne.n	800bd16 <__hi0bits+0x1e>
 800bd12:	3004      	adds	r0, #4
 800bd14:	011b      	lsls	r3, r3, #4
 800bd16:	0f9a      	lsrs	r2, r3, #30
 800bd18:	d101      	bne.n	800bd1e <__hi0bits+0x26>
 800bd1a:	3002      	adds	r0, #2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	db03      	blt.n	800bd2a <__hi0bits+0x32>
 800bd22:	3001      	adds	r0, #1
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	d400      	bmi.n	800bd2a <__hi0bits+0x32>
 800bd28:	2020      	movs	r0, #32
 800bd2a:	4770      	bx	lr

0800bd2c <__lo0bits>:
 800bd2c:	6803      	ldr	r3, [r0, #0]
 800bd2e:	0001      	movs	r1, r0
 800bd30:	2207      	movs	r2, #7
 800bd32:	0018      	movs	r0, r3
 800bd34:	4010      	ands	r0, r2
 800bd36:	4213      	tst	r3, r2
 800bd38:	d00d      	beq.n	800bd56 <__lo0bits+0x2a>
 800bd3a:	3a06      	subs	r2, #6
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	4213      	tst	r3, r2
 800bd40:	d105      	bne.n	800bd4e <__lo0bits+0x22>
 800bd42:	3002      	adds	r0, #2
 800bd44:	4203      	tst	r3, r0
 800bd46:	d003      	beq.n	800bd50 <__lo0bits+0x24>
 800bd48:	40d3      	lsrs	r3, r2
 800bd4a:	0010      	movs	r0, r2
 800bd4c:	600b      	str	r3, [r1, #0]
 800bd4e:	4770      	bx	lr
 800bd50:	089b      	lsrs	r3, r3, #2
 800bd52:	600b      	str	r3, [r1, #0]
 800bd54:	e7fb      	b.n	800bd4e <__lo0bits+0x22>
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	d101      	bne.n	800bd60 <__lo0bits+0x34>
 800bd5c:	2010      	movs	r0, #16
 800bd5e:	0c1b      	lsrs	r3, r3, #16
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	d101      	bne.n	800bd6a <__lo0bits+0x3e>
 800bd66:	3008      	adds	r0, #8
 800bd68:	0a1b      	lsrs	r3, r3, #8
 800bd6a:	071a      	lsls	r2, r3, #28
 800bd6c:	d101      	bne.n	800bd72 <__lo0bits+0x46>
 800bd6e:	3004      	adds	r0, #4
 800bd70:	091b      	lsrs	r3, r3, #4
 800bd72:	079a      	lsls	r2, r3, #30
 800bd74:	d101      	bne.n	800bd7a <__lo0bits+0x4e>
 800bd76:	3002      	adds	r0, #2
 800bd78:	089b      	lsrs	r3, r3, #2
 800bd7a:	07da      	lsls	r2, r3, #31
 800bd7c:	d4e9      	bmi.n	800bd52 <__lo0bits+0x26>
 800bd7e:	3001      	adds	r0, #1
 800bd80:	085b      	lsrs	r3, r3, #1
 800bd82:	d1e6      	bne.n	800bd52 <__lo0bits+0x26>
 800bd84:	2020      	movs	r0, #32
 800bd86:	e7e2      	b.n	800bd4e <__lo0bits+0x22>

0800bd88 <__i2b>:
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	000c      	movs	r4, r1
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	f7ff febb 	bl	800bb08 <_Balloc>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d107      	bne.n	800bda6 <__i2b+0x1e>
 800bd96:	2146      	movs	r1, #70	; 0x46
 800bd98:	4c05      	ldr	r4, [pc, #20]	; (800bdb0 <__i2b+0x28>)
 800bd9a:	0002      	movs	r2, r0
 800bd9c:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <__i2b+0x2c>)
 800bd9e:	0020      	movs	r0, r4
 800bda0:	31ff      	adds	r1, #255	; 0xff
 800bda2:	f001 fc75 	bl	800d690 <__assert_func>
 800bda6:	2301      	movs	r3, #1
 800bda8:	6144      	str	r4, [r0, #20]
 800bdaa:	6103      	str	r3, [r0, #16]
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	0800e6d6 	.word	0x0800e6d6
 800bdb4:	0800e6c5 	.word	0x0800e6c5

0800bdb8 <__multiply>:
 800bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdba:	0015      	movs	r5, r2
 800bdbc:	690a      	ldr	r2, [r1, #16]
 800bdbe:	692b      	ldr	r3, [r5, #16]
 800bdc0:	000c      	movs	r4, r1
 800bdc2:	b08b      	sub	sp, #44	; 0x2c
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	da01      	bge.n	800bdcc <__multiply+0x14>
 800bdc8:	002c      	movs	r4, r5
 800bdca:	000d      	movs	r5, r1
 800bdcc:	6927      	ldr	r7, [r4, #16]
 800bdce:	692e      	ldr	r6, [r5, #16]
 800bdd0:	6861      	ldr	r1, [r4, #4]
 800bdd2:	19bb      	adds	r3, r7, r6
 800bdd4:	9303      	str	r3, [sp, #12]
 800bdd6:	68a3      	ldr	r3, [r4, #8]
 800bdd8:	19ba      	adds	r2, r7, r6
 800bdda:	4293      	cmp	r3, r2
 800bddc:	da00      	bge.n	800bde0 <__multiply+0x28>
 800bdde:	3101      	adds	r1, #1
 800bde0:	f7ff fe92 	bl	800bb08 <_Balloc>
 800bde4:	9002      	str	r0, [sp, #8]
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d106      	bne.n	800bdf8 <__multiply+0x40>
 800bdea:	21b1      	movs	r1, #177	; 0xb1
 800bdec:	4b48      	ldr	r3, [pc, #288]	; (800bf10 <__multiply+0x158>)
 800bdee:	4849      	ldr	r0, [pc, #292]	; (800bf14 <__multiply+0x15c>)
 800bdf0:	9a02      	ldr	r2, [sp, #8]
 800bdf2:	0049      	lsls	r1, r1, #1
 800bdf4:	f001 fc4c 	bl	800d690 <__assert_func>
 800bdf8:	9b02      	ldr	r3, [sp, #8]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	3314      	adds	r3, #20
 800bdfe:	469c      	mov	ip, r3
 800be00:	19bb      	adds	r3, r7, r6
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	4463      	add	r3, ip
 800be06:	9304      	str	r3, [sp, #16]
 800be08:	4663      	mov	r3, ip
 800be0a:	9904      	ldr	r1, [sp, #16]
 800be0c:	428b      	cmp	r3, r1
 800be0e:	d32a      	bcc.n	800be66 <__multiply+0xae>
 800be10:	0023      	movs	r3, r4
 800be12:	00bf      	lsls	r7, r7, #2
 800be14:	3314      	adds	r3, #20
 800be16:	3514      	adds	r5, #20
 800be18:	9308      	str	r3, [sp, #32]
 800be1a:	00b6      	lsls	r6, r6, #2
 800be1c:	19db      	adds	r3, r3, r7
 800be1e:	9305      	str	r3, [sp, #20]
 800be20:	19ab      	adds	r3, r5, r6
 800be22:	9309      	str	r3, [sp, #36]	; 0x24
 800be24:	2304      	movs	r3, #4
 800be26:	9306      	str	r3, [sp, #24]
 800be28:	0023      	movs	r3, r4
 800be2a:	9a05      	ldr	r2, [sp, #20]
 800be2c:	3315      	adds	r3, #21
 800be2e:	9501      	str	r5, [sp, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d305      	bcc.n	800be40 <__multiply+0x88>
 800be34:	1b13      	subs	r3, r2, r4
 800be36:	3b15      	subs	r3, #21
 800be38:	089b      	lsrs	r3, r3, #2
 800be3a:	3301      	adds	r3, #1
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	9306      	str	r3, [sp, #24]
 800be40:	9b01      	ldr	r3, [sp, #4]
 800be42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be44:	4293      	cmp	r3, r2
 800be46:	d310      	bcc.n	800be6a <__multiply+0xb2>
 800be48:	9b03      	ldr	r3, [sp, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	dd05      	ble.n	800be5a <__multiply+0xa2>
 800be4e:	9b04      	ldr	r3, [sp, #16]
 800be50:	3b04      	subs	r3, #4
 800be52:	9304      	str	r3, [sp, #16]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d056      	beq.n	800bf08 <__multiply+0x150>
 800be5a:	9b02      	ldr	r3, [sp, #8]
 800be5c:	9a03      	ldr	r2, [sp, #12]
 800be5e:	0018      	movs	r0, r3
 800be60:	611a      	str	r2, [r3, #16]
 800be62:	b00b      	add	sp, #44	; 0x2c
 800be64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be66:	c304      	stmia	r3!, {r2}
 800be68:	e7cf      	b.n	800be0a <__multiply+0x52>
 800be6a:	9b01      	ldr	r3, [sp, #4]
 800be6c:	6818      	ldr	r0, [r3, #0]
 800be6e:	b280      	uxth	r0, r0
 800be70:	2800      	cmp	r0, #0
 800be72:	d01e      	beq.n	800beb2 <__multiply+0xfa>
 800be74:	4667      	mov	r7, ip
 800be76:	2500      	movs	r5, #0
 800be78:	9e08      	ldr	r6, [sp, #32]
 800be7a:	ce02      	ldmia	r6!, {r1}
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	9307      	str	r3, [sp, #28]
 800be80:	b28b      	uxth	r3, r1
 800be82:	4343      	muls	r3, r0
 800be84:	001a      	movs	r2, r3
 800be86:	466b      	mov	r3, sp
 800be88:	8b9b      	ldrh	r3, [r3, #28]
 800be8a:	18d3      	adds	r3, r2, r3
 800be8c:	195b      	adds	r3, r3, r5
 800be8e:	0c0d      	lsrs	r5, r1, #16
 800be90:	4345      	muls	r5, r0
 800be92:	9a07      	ldr	r2, [sp, #28]
 800be94:	0c11      	lsrs	r1, r2, #16
 800be96:	1869      	adds	r1, r5, r1
 800be98:	0c1a      	lsrs	r2, r3, #16
 800be9a:	188a      	adds	r2, r1, r2
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	0c15      	lsrs	r5, r2, #16
 800bea0:	0412      	lsls	r2, r2, #16
 800bea2:	431a      	orrs	r2, r3
 800bea4:	9b05      	ldr	r3, [sp, #20]
 800bea6:	c704      	stmia	r7!, {r2}
 800bea8:	42b3      	cmp	r3, r6
 800beaa:	d8e6      	bhi.n	800be7a <__multiply+0xc2>
 800beac:	4663      	mov	r3, ip
 800beae:	9a06      	ldr	r2, [sp, #24]
 800beb0:	509d      	str	r5, [r3, r2]
 800beb2:	9b01      	ldr	r3, [sp, #4]
 800beb4:	6818      	ldr	r0, [r3, #0]
 800beb6:	0c00      	lsrs	r0, r0, #16
 800beb8:	d020      	beq.n	800befc <__multiply+0x144>
 800beba:	4663      	mov	r3, ip
 800bebc:	0025      	movs	r5, r4
 800bebe:	4661      	mov	r1, ip
 800bec0:	2700      	movs	r7, #0
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3514      	adds	r5, #20
 800bec6:	682a      	ldr	r2, [r5, #0]
 800bec8:	680e      	ldr	r6, [r1, #0]
 800beca:	b292      	uxth	r2, r2
 800becc:	4342      	muls	r2, r0
 800bece:	0c36      	lsrs	r6, r6, #16
 800bed0:	1992      	adds	r2, r2, r6
 800bed2:	19d2      	adds	r2, r2, r7
 800bed4:	0416      	lsls	r6, r2, #16
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	431e      	orrs	r6, r3
 800beda:	600e      	str	r6, [r1, #0]
 800bedc:	cd40      	ldmia	r5!, {r6}
 800bede:	684b      	ldr	r3, [r1, #4]
 800bee0:	0c36      	lsrs	r6, r6, #16
 800bee2:	4346      	muls	r6, r0
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	0c12      	lsrs	r2, r2, #16
 800bee8:	18f3      	adds	r3, r6, r3
 800beea:	189b      	adds	r3, r3, r2
 800beec:	9a05      	ldr	r2, [sp, #20]
 800beee:	0c1f      	lsrs	r7, r3, #16
 800bef0:	3104      	adds	r1, #4
 800bef2:	42aa      	cmp	r2, r5
 800bef4:	d8e7      	bhi.n	800bec6 <__multiply+0x10e>
 800bef6:	4662      	mov	r2, ip
 800bef8:	9906      	ldr	r1, [sp, #24]
 800befa:	5053      	str	r3, [r2, r1]
 800befc:	9b01      	ldr	r3, [sp, #4]
 800befe:	3304      	adds	r3, #4
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	2304      	movs	r3, #4
 800bf04:	449c      	add	ip, r3
 800bf06:	e79b      	b.n	800be40 <__multiply+0x88>
 800bf08:	9b03      	ldr	r3, [sp, #12]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	e79b      	b.n	800be48 <__multiply+0x90>
 800bf10:	0800e6c5 	.word	0x0800e6c5
 800bf14:	0800e6d6 	.word	0x0800e6d6

0800bf18 <__pow5mult>:
 800bf18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	0015      	movs	r5, r2
 800bf1e:	0007      	movs	r7, r0
 800bf20:	000e      	movs	r6, r1
 800bf22:	401a      	ands	r2, r3
 800bf24:	421d      	tst	r5, r3
 800bf26:	d008      	beq.n	800bf3a <__pow5mult+0x22>
 800bf28:	4925      	ldr	r1, [pc, #148]	; (800bfc0 <__pow5mult+0xa8>)
 800bf2a:	3a01      	subs	r2, #1
 800bf2c:	0092      	lsls	r2, r2, #2
 800bf2e:	5852      	ldr	r2, [r2, r1]
 800bf30:	2300      	movs	r3, #0
 800bf32:	0031      	movs	r1, r6
 800bf34:	f7ff fe50 	bl	800bbd8 <__multadd>
 800bf38:	0006      	movs	r6, r0
 800bf3a:	10ad      	asrs	r5, r5, #2
 800bf3c:	d03d      	beq.n	800bfba <__pow5mult+0xa2>
 800bf3e:	69fc      	ldr	r4, [r7, #28]
 800bf40:	2c00      	cmp	r4, #0
 800bf42:	d10f      	bne.n	800bf64 <__pow5mult+0x4c>
 800bf44:	2010      	movs	r0, #16
 800bf46:	f7ff fd21 	bl	800b98c <malloc>
 800bf4a:	1e02      	subs	r2, r0, #0
 800bf4c:	61f8      	str	r0, [r7, #28]
 800bf4e:	d105      	bne.n	800bf5c <__pow5mult+0x44>
 800bf50:	21b4      	movs	r1, #180	; 0xb4
 800bf52:	4b1c      	ldr	r3, [pc, #112]	; (800bfc4 <__pow5mult+0xac>)
 800bf54:	481c      	ldr	r0, [pc, #112]	; (800bfc8 <__pow5mult+0xb0>)
 800bf56:	31ff      	adds	r1, #255	; 0xff
 800bf58:	f001 fb9a 	bl	800d690 <__assert_func>
 800bf5c:	6044      	str	r4, [r0, #4]
 800bf5e:	6084      	str	r4, [r0, #8]
 800bf60:	6004      	str	r4, [r0, #0]
 800bf62:	60c4      	str	r4, [r0, #12]
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	689c      	ldr	r4, [r3, #8]
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	2c00      	cmp	r4, #0
 800bf6c:	d108      	bne.n	800bf80 <__pow5mult+0x68>
 800bf6e:	0038      	movs	r0, r7
 800bf70:	4916      	ldr	r1, [pc, #88]	; (800bfcc <__pow5mult+0xb4>)
 800bf72:	f7ff ff09 	bl	800bd88 <__i2b>
 800bf76:	9b01      	ldr	r3, [sp, #4]
 800bf78:	0004      	movs	r4, r0
 800bf7a:	6098      	str	r0, [r3, #8]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	6003      	str	r3, [r0, #0]
 800bf80:	2301      	movs	r3, #1
 800bf82:	421d      	tst	r5, r3
 800bf84:	d00a      	beq.n	800bf9c <__pow5mult+0x84>
 800bf86:	0031      	movs	r1, r6
 800bf88:	0022      	movs	r2, r4
 800bf8a:	0038      	movs	r0, r7
 800bf8c:	f7ff ff14 	bl	800bdb8 <__multiply>
 800bf90:	0031      	movs	r1, r6
 800bf92:	9001      	str	r0, [sp, #4]
 800bf94:	0038      	movs	r0, r7
 800bf96:	f7ff fdfb 	bl	800bb90 <_Bfree>
 800bf9a:	9e01      	ldr	r6, [sp, #4]
 800bf9c:	106d      	asrs	r5, r5, #1
 800bf9e:	d00c      	beq.n	800bfba <__pow5mult+0xa2>
 800bfa0:	6820      	ldr	r0, [r4, #0]
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d107      	bne.n	800bfb6 <__pow5mult+0x9e>
 800bfa6:	0022      	movs	r2, r4
 800bfa8:	0021      	movs	r1, r4
 800bfaa:	0038      	movs	r0, r7
 800bfac:	f7ff ff04 	bl	800bdb8 <__multiply>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6020      	str	r0, [r4, #0]
 800bfb4:	6003      	str	r3, [r0, #0]
 800bfb6:	0004      	movs	r4, r0
 800bfb8:	e7e2      	b.n	800bf80 <__pow5mult+0x68>
 800bfba:	0030      	movs	r0, r6
 800bfbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	0800e820 	.word	0x0800e820
 800bfc4:	0800e656 	.word	0x0800e656
 800bfc8:	0800e6d6 	.word	0x0800e6d6
 800bfcc:	00000271 	.word	0x00000271

0800bfd0 <__lshift>:
 800bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd2:	000c      	movs	r4, r1
 800bfd4:	0017      	movs	r7, r2
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	1155      	asrs	r5, r2, #5
 800bfda:	b087      	sub	sp, #28
 800bfdc:	18eb      	adds	r3, r5, r3
 800bfde:	9302      	str	r3, [sp, #8]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	6849      	ldr	r1, [r1, #4]
 800bfe6:	68a3      	ldr	r3, [r4, #8]
 800bfe8:	9004      	str	r0, [sp, #16]
 800bfea:	9a01      	ldr	r2, [sp, #4]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	db10      	blt.n	800c012 <__lshift+0x42>
 800bff0:	9804      	ldr	r0, [sp, #16]
 800bff2:	f7ff fd89 	bl	800bb08 <_Balloc>
 800bff6:	2300      	movs	r3, #0
 800bff8:	0002      	movs	r2, r0
 800bffa:	0006      	movs	r6, r0
 800bffc:	0019      	movs	r1, r3
 800bffe:	3214      	adds	r2, #20
 800c000:	4298      	cmp	r0, r3
 800c002:	d10c      	bne.n	800c01e <__lshift+0x4e>
 800c004:	31df      	adds	r1, #223	; 0xdf
 800c006:	0032      	movs	r2, r6
 800c008:	4b26      	ldr	r3, [pc, #152]	; (800c0a4 <__lshift+0xd4>)
 800c00a:	4827      	ldr	r0, [pc, #156]	; (800c0a8 <__lshift+0xd8>)
 800c00c:	31ff      	adds	r1, #255	; 0xff
 800c00e:	f001 fb3f 	bl	800d690 <__assert_func>
 800c012:	3101      	adds	r1, #1
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	e7e8      	b.n	800bfea <__lshift+0x1a>
 800c018:	0098      	lsls	r0, r3, #2
 800c01a:	5011      	str	r1, [r2, r0]
 800c01c:	3301      	adds	r3, #1
 800c01e:	42ab      	cmp	r3, r5
 800c020:	dbfa      	blt.n	800c018 <__lshift+0x48>
 800c022:	43eb      	mvns	r3, r5
 800c024:	17db      	asrs	r3, r3, #31
 800c026:	401d      	ands	r5, r3
 800c028:	211f      	movs	r1, #31
 800c02a:	0023      	movs	r3, r4
 800c02c:	0038      	movs	r0, r7
 800c02e:	00ad      	lsls	r5, r5, #2
 800c030:	1955      	adds	r5, r2, r5
 800c032:	6922      	ldr	r2, [r4, #16]
 800c034:	3314      	adds	r3, #20
 800c036:	0092      	lsls	r2, r2, #2
 800c038:	4008      	ands	r0, r1
 800c03a:	4684      	mov	ip, r0
 800c03c:	189a      	adds	r2, r3, r2
 800c03e:	420f      	tst	r7, r1
 800c040:	d02a      	beq.n	800c098 <__lshift+0xc8>
 800c042:	3101      	adds	r1, #1
 800c044:	1a09      	subs	r1, r1, r0
 800c046:	9105      	str	r1, [sp, #20]
 800c048:	2100      	movs	r1, #0
 800c04a:	9503      	str	r5, [sp, #12]
 800c04c:	4667      	mov	r7, ip
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	40b8      	lsls	r0, r7
 800c052:	4308      	orrs	r0, r1
 800c054:	9903      	ldr	r1, [sp, #12]
 800c056:	c101      	stmia	r1!, {r0}
 800c058:	9103      	str	r1, [sp, #12]
 800c05a:	9805      	ldr	r0, [sp, #20]
 800c05c:	cb02      	ldmia	r3!, {r1}
 800c05e:	40c1      	lsrs	r1, r0
 800c060:	429a      	cmp	r2, r3
 800c062:	d8f3      	bhi.n	800c04c <__lshift+0x7c>
 800c064:	0020      	movs	r0, r4
 800c066:	3015      	adds	r0, #21
 800c068:	2304      	movs	r3, #4
 800c06a:	4282      	cmp	r2, r0
 800c06c:	d304      	bcc.n	800c078 <__lshift+0xa8>
 800c06e:	1b13      	subs	r3, r2, r4
 800c070:	3b15      	subs	r3, #21
 800c072:	089b      	lsrs	r3, r3, #2
 800c074:	3301      	adds	r3, #1
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	50e9      	str	r1, [r5, r3]
 800c07a:	2900      	cmp	r1, #0
 800c07c:	d002      	beq.n	800c084 <__lshift+0xb4>
 800c07e:	9b02      	ldr	r3, [sp, #8]
 800c080:	3302      	adds	r3, #2
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	9b01      	ldr	r3, [sp, #4]
 800c086:	9804      	ldr	r0, [sp, #16]
 800c088:	3b01      	subs	r3, #1
 800c08a:	0021      	movs	r1, r4
 800c08c:	6133      	str	r3, [r6, #16]
 800c08e:	f7ff fd7f 	bl	800bb90 <_Bfree>
 800c092:	0030      	movs	r0, r6
 800c094:	b007      	add	sp, #28
 800c096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c098:	cb02      	ldmia	r3!, {r1}
 800c09a:	c502      	stmia	r5!, {r1}
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d8fb      	bhi.n	800c098 <__lshift+0xc8>
 800c0a0:	e7f0      	b.n	800c084 <__lshift+0xb4>
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	0800e6c5 	.word	0x0800e6c5
 800c0a8:	0800e6d6 	.word	0x0800e6d6

0800c0ac <__mcmp>:
 800c0ac:	b530      	push	{r4, r5, lr}
 800c0ae:	690b      	ldr	r3, [r1, #16]
 800c0b0:	6904      	ldr	r4, [r0, #16]
 800c0b2:	0002      	movs	r2, r0
 800c0b4:	1ae0      	subs	r0, r4, r3
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d10e      	bne.n	800c0d8 <__mcmp+0x2c>
 800c0ba:	3214      	adds	r2, #20
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	3114      	adds	r1, #20
 800c0c0:	0014      	movs	r4, r2
 800c0c2:	18c9      	adds	r1, r1, r3
 800c0c4:	18d2      	adds	r2, r2, r3
 800c0c6:	3a04      	subs	r2, #4
 800c0c8:	3904      	subs	r1, #4
 800c0ca:	6815      	ldr	r5, [r2, #0]
 800c0cc:	680b      	ldr	r3, [r1, #0]
 800c0ce:	429d      	cmp	r5, r3
 800c0d0:	d003      	beq.n	800c0da <__mcmp+0x2e>
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	429d      	cmp	r5, r3
 800c0d6:	d303      	bcc.n	800c0e0 <__mcmp+0x34>
 800c0d8:	bd30      	pop	{r4, r5, pc}
 800c0da:	4294      	cmp	r4, r2
 800c0dc:	d3f3      	bcc.n	800c0c6 <__mcmp+0x1a>
 800c0de:	e7fb      	b.n	800c0d8 <__mcmp+0x2c>
 800c0e0:	4240      	negs	r0, r0
 800c0e2:	e7f9      	b.n	800c0d8 <__mcmp+0x2c>

0800c0e4 <__mdiff>:
 800c0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e6:	000e      	movs	r6, r1
 800c0e8:	0007      	movs	r7, r0
 800c0ea:	0011      	movs	r1, r2
 800c0ec:	0030      	movs	r0, r6
 800c0ee:	b087      	sub	sp, #28
 800c0f0:	0014      	movs	r4, r2
 800c0f2:	f7ff ffdb 	bl	800c0ac <__mcmp>
 800c0f6:	1e05      	subs	r5, r0, #0
 800c0f8:	d110      	bne.n	800c11c <__mdiff+0x38>
 800c0fa:	0001      	movs	r1, r0
 800c0fc:	0038      	movs	r0, r7
 800c0fe:	f7ff fd03 	bl	800bb08 <_Balloc>
 800c102:	1e02      	subs	r2, r0, #0
 800c104:	d104      	bne.n	800c110 <__mdiff+0x2c>
 800c106:	4b3f      	ldr	r3, [pc, #252]	; (800c204 <__mdiff+0x120>)
 800c108:	483f      	ldr	r0, [pc, #252]	; (800c208 <__mdiff+0x124>)
 800c10a:	4940      	ldr	r1, [pc, #256]	; (800c20c <__mdiff+0x128>)
 800c10c:	f001 fac0 	bl	800d690 <__assert_func>
 800c110:	2301      	movs	r3, #1
 800c112:	6145      	str	r5, [r0, #20]
 800c114:	6103      	str	r3, [r0, #16]
 800c116:	0010      	movs	r0, r2
 800c118:	b007      	add	sp, #28
 800c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c11c:	2301      	movs	r3, #1
 800c11e:	9301      	str	r3, [sp, #4]
 800c120:	2800      	cmp	r0, #0
 800c122:	db04      	blt.n	800c12e <__mdiff+0x4a>
 800c124:	0023      	movs	r3, r4
 800c126:	0034      	movs	r4, r6
 800c128:	001e      	movs	r6, r3
 800c12a:	2300      	movs	r3, #0
 800c12c:	9301      	str	r3, [sp, #4]
 800c12e:	0038      	movs	r0, r7
 800c130:	6861      	ldr	r1, [r4, #4]
 800c132:	f7ff fce9 	bl	800bb08 <_Balloc>
 800c136:	1e02      	subs	r2, r0, #0
 800c138:	d103      	bne.n	800c142 <__mdiff+0x5e>
 800c13a:	4b32      	ldr	r3, [pc, #200]	; (800c204 <__mdiff+0x120>)
 800c13c:	4832      	ldr	r0, [pc, #200]	; (800c208 <__mdiff+0x124>)
 800c13e:	4934      	ldr	r1, [pc, #208]	; (800c210 <__mdiff+0x12c>)
 800c140:	e7e4      	b.n	800c10c <__mdiff+0x28>
 800c142:	9b01      	ldr	r3, [sp, #4]
 800c144:	2700      	movs	r7, #0
 800c146:	60c3      	str	r3, [r0, #12]
 800c148:	6920      	ldr	r0, [r4, #16]
 800c14a:	3414      	adds	r4, #20
 800c14c:	0083      	lsls	r3, r0, #2
 800c14e:	18e3      	adds	r3, r4, r3
 800c150:	0021      	movs	r1, r4
 800c152:	9401      	str	r4, [sp, #4]
 800c154:	0034      	movs	r4, r6
 800c156:	9302      	str	r3, [sp, #8]
 800c158:	6933      	ldr	r3, [r6, #16]
 800c15a:	3414      	adds	r4, #20
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	18e3      	adds	r3, r4, r3
 800c160:	9303      	str	r3, [sp, #12]
 800c162:	0013      	movs	r3, r2
 800c164:	3314      	adds	r3, #20
 800c166:	469c      	mov	ip, r3
 800c168:	9305      	str	r3, [sp, #20]
 800c16a:	9104      	str	r1, [sp, #16]
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	cc02      	ldmia	r4!, {r1}
 800c170:	cb20      	ldmia	r3!, {r5}
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	b2ab      	uxth	r3, r5
 800c176:	19df      	adds	r7, r3, r7
 800c178:	b28b      	uxth	r3, r1
 800c17a:	1afb      	subs	r3, r7, r3
 800c17c:	0c09      	lsrs	r1, r1, #16
 800c17e:	0c2d      	lsrs	r5, r5, #16
 800c180:	1a6d      	subs	r5, r5, r1
 800c182:	1419      	asrs	r1, r3, #16
 800c184:	1869      	adds	r1, r5, r1
 800c186:	b29b      	uxth	r3, r3
 800c188:	140f      	asrs	r7, r1, #16
 800c18a:	0409      	lsls	r1, r1, #16
 800c18c:	4319      	orrs	r1, r3
 800c18e:	4663      	mov	r3, ip
 800c190:	c302      	stmia	r3!, {r1}
 800c192:	469c      	mov	ip, r3
 800c194:	9b03      	ldr	r3, [sp, #12]
 800c196:	42a3      	cmp	r3, r4
 800c198:	d8e8      	bhi.n	800c16c <__mdiff+0x88>
 800c19a:	0031      	movs	r1, r6
 800c19c:	9c03      	ldr	r4, [sp, #12]
 800c19e:	3115      	adds	r1, #21
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	428c      	cmp	r4, r1
 800c1a4:	d304      	bcc.n	800c1b0 <__mdiff+0xcc>
 800c1a6:	1ba3      	subs	r3, r4, r6
 800c1a8:	3b15      	subs	r3, #21
 800c1aa:	089b      	lsrs	r3, r3, #2
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	9901      	ldr	r1, [sp, #4]
 800c1b2:	18cd      	adds	r5, r1, r3
 800c1b4:	9905      	ldr	r1, [sp, #20]
 800c1b6:	002e      	movs	r6, r5
 800c1b8:	18cb      	adds	r3, r1, r3
 800c1ba:	469c      	mov	ip, r3
 800c1bc:	9902      	ldr	r1, [sp, #8]
 800c1be:	428e      	cmp	r6, r1
 800c1c0:	d310      	bcc.n	800c1e4 <__mdiff+0x100>
 800c1c2:	9e02      	ldr	r6, [sp, #8]
 800c1c4:	1ee9      	subs	r1, r5, #3
 800c1c6:	2400      	movs	r4, #0
 800c1c8:	428e      	cmp	r6, r1
 800c1ca:	d304      	bcc.n	800c1d6 <__mdiff+0xf2>
 800c1cc:	0031      	movs	r1, r6
 800c1ce:	3103      	adds	r1, #3
 800c1d0:	1b49      	subs	r1, r1, r5
 800c1d2:	0889      	lsrs	r1, r1, #2
 800c1d4:	008c      	lsls	r4, r1, #2
 800c1d6:	191b      	adds	r3, r3, r4
 800c1d8:	3b04      	subs	r3, #4
 800c1da:	6819      	ldr	r1, [r3, #0]
 800c1dc:	2900      	cmp	r1, #0
 800c1de:	d00f      	beq.n	800c200 <__mdiff+0x11c>
 800c1e0:	6110      	str	r0, [r2, #16]
 800c1e2:	e798      	b.n	800c116 <__mdiff+0x32>
 800c1e4:	ce02      	ldmia	r6!, {r1}
 800c1e6:	b28c      	uxth	r4, r1
 800c1e8:	19e4      	adds	r4, r4, r7
 800c1ea:	0c0f      	lsrs	r7, r1, #16
 800c1ec:	1421      	asrs	r1, r4, #16
 800c1ee:	1879      	adds	r1, r7, r1
 800c1f0:	b2a4      	uxth	r4, r4
 800c1f2:	140f      	asrs	r7, r1, #16
 800c1f4:	0409      	lsls	r1, r1, #16
 800c1f6:	4321      	orrs	r1, r4
 800c1f8:	4664      	mov	r4, ip
 800c1fa:	c402      	stmia	r4!, {r1}
 800c1fc:	46a4      	mov	ip, r4
 800c1fe:	e7dd      	b.n	800c1bc <__mdiff+0xd8>
 800c200:	3801      	subs	r0, #1
 800c202:	e7e9      	b.n	800c1d8 <__mdiff+0xf4>
 800c204:	0800e6c5 	.word	0x0800e6c5
 800c208:	0800e6d6 	.word	0x0800e6d6
 800c20c:	00000237 	.word	0x00000237
 800c210:	00000245 	.word	0x00000245

0800c214 <__ulp>:
 800c214:	2000      	movs	r0, #0
 800c216:	4b0b      	ldr	r3, [pc, #44]	; (800c244 <__ulp+0x30>)
 800c218:	4019      	ands	r1, r3
 800c21a:	4b0b      	ldr	r3, [pc, #44]	; (800c248 <__ulp+0x34>)
 800c21c:	18c9      	adds	r1, r1, r3
 800c21e:	4281      	cmp	r1, r0
 800c220:	dc06      	bgt.n	800c230 <__ulp+0x1c>
 800c222:	4249      	negs	r1, r1
 800c224:	150b      	asrs	r3, r1, #20
 800c226:	2b13      	cmp	r3, #19
 800c228:	dc03      	bgt.n	800c232 <__ulp+0x1e>
 800c22a:	2180      	movs	r1, #128	; 0x80
 800c22c:	0309      	lsls	r1, r1, #12
 800c22e:	4119      	asrs	r1, r3
 800c230:	4770      	bx	lr
 800c232:	3b14      	subs	r3, #20
 800c234:	2001      	movs	r0, #1
 800c236:	2b1e      	cmp	r3, #30
 800c238:	dc02      	bgt.n	800c240 <__ulp+0x2c>
 800c23a:	2080      	movs	r0, #128	; 0x80
 800c23c:	0600      	lsls	r0, r0, #24
 800c23e:	40d8      	lsrs	r0, r3
 800c240:	2100      	movs	r1, #0
 800c242:	e7f5      	b.n	800c230 <__ulp+0x1c>
 800c244:	7ff00000 	.word	0x7ff00000
 800c248:	fcc00000 	.word	0xfcc00000

0800c24c <__b2d>:
 800c24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c24e:	0006      	movs	r6, r0
 800c250:	6903      	ldr	r3, [r0, #16]
 800c252:	3614      	adds	r6, #20
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	18f3      	adds	r3, r6, r3
 800c258:	1f1d      	subs	r5, r3, #4
 800c25a:	682c      	ldr	r4, [r5, #0]
 800c25c:	000f      	movs	r7, r1
 800c25e:	0020      	movs	r0, r4
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	f7ff fd49 	bl	800bcf8 <__hi0bits>
 800c266:	2220      	movs	r2, #32
 800c268:	1a12      	subs	r2, r2, r0
 800c26a:	603a      	str	r2, [r7, #0]
 800c26c:	0003      	movs	r3, r0
 800c26e:	4a1c      	ldr	r2, [pc, #112]	; (800c2e0 <__b2d+0x94>)
 800c270:	280a      	cmp	r0, #10
 800c272:	dc15      	bgt.n	800c2a0 <__b2d+0x54>
 800c274:	210b      	movs	r1, #11
 800c276:	0027      	movs	r7, r4
 800c278:	1a09      	subs	r1, r1, r0
 800c27a:	40cf      	lsrs	r7, r1
 800c27c:	433a      	orrs	r2, r7
 800c27e:	468c      	mov	ip, r1
 800c280:	0011      	movs	r1, r2
 800c282:	2200      	movs	r2, #0
 800c284:	42ae      	cmp	r6, r5
 800c286:	d202      	bcs.n	800c28e <__b2d+0x42>
 800c288:	9a01      	ldr	r2, [sp, #4]
 800c28a:	3a08      	subs	r2, #8
 800c28c:	6812      	ldr	r2, [r2, #0]
 800c28e:	3315      	adds	r3, #21
 800c290:	409c      	lsls	r4, r3
 800c292:	4663      	mov	r3, ip
 800c294:	0027      	movs	r7, r4
 800c296:	40da      	lsrs	r2, r3
 800c298:	4317      	orrs	r7, r2
 800c29a:	0038      	movs	r0, r7
 800c29c:	b003      	add	sp, #12
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a0:	2700      	movs	r7, #0
 800c2a2:	42ae      	cmp	r6, r5
 800c2a4:	d202      	bcs.n	800c2ac <__b2d+0x60>
 800c2a6:	9d01      	ldr	r5, [sp, #4]
 800c2a8:	3d08      	subs	r5, #8
 800c2aa:	682f      	ldr	r7, [r5, #0]
 800c2ac:	210b      	movs	r1, #11
 800c2ae:	4249      	negs	r1, r1
 800c2b0:	468c      	mov	ip, r1
 800c2b2:	449c      	add	ip, r3
 800c2b4:	2b0b      	cmp	r3, #11
 800c2b6:	d010      	beq.n	800c2da <__b2d+0x8e>
 800c2b8:	4661      	mov	r1, ip
 800c2ba:	2320      	movs	r3, #32
 800c2bc:	408c      	lsls	r4, r1
 800c2be:	1a5b      	subs	r3, r3, r1
 800c2c0:	0039      	movs	r1, r7
 800c2c2:	40d9      	lsrs	r1, r3
 800c2c4:	430c      	orrs	r4, r1
 800c2c6:	4322      	orrs	r2, r4
 800c2c8:	0011      	movs	r1, r2
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	42b5      	cmp	r5, r6
 800c2ce:	d901      	bls.n	800c2d4 <__b2d+0x88>
 800c2d0:	3d04      	subs	r5, #4
 800c2d2:	682a      	ldr	r2, [r5, #0]
 800c2d4:	4664      	mov	r4, ip
 800c2d6:	40a7      	lsls	r7, r4
 800c2d8:	e7dd      	b.n	800c296 <__b2d+0x4a>
 800c2da:	4322      	orrs	r2, r4
 800c2dc:	0011      	movs	r1, r2
 800c2de:	e7dc      	b.n	800c29a <__b2d+0x4e>
 800c2e0:	3ff00000 	.word	0x3ff00000

0800c2e4 <__d2b>:
 800c2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	0014      	movs	r4, r2
 800c2ea:	001d      	movs	r5, r3
 800c2ec:	9f08      	ldr	r7, [sp, #32]
 800c2ee:	f7ff fc0b 	bl	800bb08 <_Balloc>
 800c2f2:	1e06      	subs	r6, r0, #0
 800c2f4:	d105      	bne.n	800c302 <__d2b+0x1e>
 800c2f6:	0032      	movs	r2, r6
 800c2f8:	4b24      	ldr	r3, [pc, #144]	; (800c38c <__d2b+0xa8>)
 800c2fa:	4825      	ldr	r0, [pc, #148]	; (800c390 <__d2b+0xac>)
 800c2fc:	4925      	ldr	r1, [pc, #148]	; (800c394 <__d2b+0xb0>)
 800c2fe:	f001 f9c7 	bl	800d690 <__assert_func>
 800c302:	032b      	lsls	r3, r5, #12
 800c304:	006d      	lsls	r5, r5, #1
 800c306:	0b1b      	lsrs	r3, r3, #12
 800c308:	0d6d      	lsrs	r5, r5, #21
 800c30a:	d125      	bne.n	800c358 <__d2b+0x74>
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	2c00      	cmp	r4, #0
 800c310:	d028      	beq.n	800c364 <__d2b+0x80>
 800c312:	4668      	mov	r0, sp
 800c314:	9400      	str	r4, [sp, #0]
 800c316:	f7ff fd09 	bl	800bd2c <__lo0bits>
 800c31a:	9b01      	ldr	r3, [sp, #4]
 800c31c:	9900      	ldr	r1, [sp, #0]
 800c31e:	2800      	cmp	r0, #0
 800c320:	d01e      	beq.n	800c360 <__d2b+0x7c>
 800c322:	2220      	movs	r2, #32
 800c324:	001c      	movs	r4, r3
 800c326:	1a12      	subs	r2, r2, r0
 800c328:	4094      	lsls	r4, r2
 800c32a:	0022      	movs	r2, r4
 800c32c:	40c3      	lsrs	r3, r0
 800c32e:	430a      	orrs	r2, r1
 800c330:	6172      	str	r2, [r6, #20]
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	9c01      	ldr	r4, [sp, #4]
 800c336:	61b4      	str	r4, [r6, #24]
 800c338:	1e63      	subs	r3, r4, #1
 800c33a:	419c      	sbcs	r4, r3
 800c33c:	3401      	adds	r4, #1
 800c33e:	6134      	str	r4, [r6, #16]
 800c340:	2d00      	cmp	r5, #0
 800c342:	d017      	beq.n	800c374 <__d2b+0x90>
 800c344:	2435      	movs	r4, #53	; 0x35
 800c346:	4b14      	ldr	r3, [pc, #80]	; (800c398 <__d2b+0xb4>)
 800c348:	18ed      	adds	r5, r5, r3
 800c34a:	182d      	adds	r5, r5, r0
 800c34c:	603d      	str	r5, [r7, #0]
 800c34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c350:	1a24      	subs	r4, r4, r0
 800c352:	601c      	str	r4, [r3, #0]
 800c354:	0030      	movs	r0, r6
 800c356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c358:	2280      	movs	r2, #128	; 0x80
 800c35a:	0352      	lsls	r2, r2, #13
 800c35c:	4313      	orrs	r3, r2
 800c35e:	e7d5      	b.n	800c30c <__d2b+0x28>
 800c360:	6171      	str	r1, [r6, #20]
 800c362:	e7e7      	b.n	800c334 <__d2b+0x50>
 800c364:	a801      	add	r0, sp, #4
 800c366:	f7ff fce1 	bl	800bd2c <__lo0bits>
 800c36a:	9b01      	ldr	r3, [sp, #4]
 800c36c:	2401      	movs	r4, #1
 800c36e:	6173      	str	r3, [r6, #20]
 800c370:	3020      	adds	r0, #32
 800c372:	e7e4      	b.n	800c33e <__d2b+0x5a>
 800c374:	4b09      	ldr	r3, [pc, #36]	; (800c39c <__d2b+0xb8>)
 800c376:	18c0      	adds	r0, r0, r3
 800c378:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <__d2b+0xbc>)
 800c37a:	6038      	str	r0, [r7, #0]
 800c37c:	18e3      	adds	r3, r4, r3
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	18f3      	adds	r3, r6, r3
 800c382:	6958      	ldr	r0, [r3, #20]
 800c384:	f7ff fcb8 	bl	800bcf8 <__hi0bits>
 800c388:	0164      	lsls	r4, r4, #5
 800c38a:	e7e0      	b.n	800c34e <__d2b+0x6a>
 800c38c:	0800e6c5 	.word	0x0800e6c5
 800c390:	0800e6d6 	.word	0x0800e6d6
 800c394:	0000030f 	.word	0x0000030f
 800c398:	fffffbcd 	.word	0xfffffbcd
 800c39c:	fffffbce 	.word	0xfffffbce
 800c3a0:	3fffffff 	.word	0x3fffffff

0800c3a4 <__ratio>:
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	000f      	movs	r7, r1
 800c3aa:	a904      	add	r1, sp, #16
 800c3ac:	0006      	movs	r6, r0
 800c3ae:	f7ff ff4d 	bl	800c24c <__b2d>
 800c3b2:	9000      	str	r0, [sp, #0]
 800c3b4:	9101      	str	r1, [sp, #4]
 800c3b6:	9c00      	ldr	r4, [sp, #0]
 800c3b8:	9d01      	ldr	r5, [sp, #4]
 800c3ba:	0038      	movs	r0, r7
 800c3bc:	a905      	add	r1, sp, #20
 800c3be:	f7ff ff45 	bl	800c24c <__b2d>
 800c3c2:	9002      	str	r0, [sp, #8]
 800c3c4:	9103      	str	r1, [sp, #12]
 800c3c6:	9a02      	ldr	r2, [sp, #8]
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	6930      	ldr	r0, [r6, #16]
 800c3cc:	6939      	ldr	r1, [r7, #16]
 800c3ce:	9e04      	ldr	r6, [sp, #16]
 800c3d0:	1a40      	subs	r0, r0, r1
 800c3d2:	9905      	ldr	r1, [sp, #20]
 800c3d4:	0140      	lsls	r0, r0, #5
 800c3d6:	1a71      	subs	r1, r6, r1
 800c3d8:	1841      	adds	r1, r0, r1
 800c3da:	0508      	lsls	r0, r1, #20
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	dd07      	ble.n	800c3f0 <__ratio+0x4c>
 800c3e0:	9901      	ldr	r1, [sp, #4]
 800c3e2:	1845      	adds	r5, r0, r1
 800c3e4:	0020      	movs	r0, r4
 800c3e6:	0029      	movs	r1, r5
 800c3e8:	f7f4 fc2e 	bl	8000c48 <__aeabi_ddiv>
 800c3ec:	b007      	add	sp, #28
 800c3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f0:	9903      	ldr	r1, [sp, #12]
 800c3f2:	1a0b      	subs	r3, r1, r0
 800c3f4:	e7f6      	b.n	800c3e4 <__ratio+0x40>

0800c3f6 <__copybits>:
 800c3f6:	b570      	push	{r4, r5, r6, lr}
 800c3f8:	0014      	movs	r4, r2
 800c3fa:	0005      	movs	r5, r0
 800c3fc:	3901      	subs	r1, #1
 800c3fe:	6913      	ldr	r3, [r2, #16]
 800c400:	1149      	asrs	r1, r1, #5
 800c402:	3101      	adds	r1, #1
 800c404:	0089      	lsls	r1, r1, #2
 800c406:	3414      	adds	r4, #20
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	1841      	adds	r1, r0, r1
 800c40c:	18e3      	adds	r3, r4, r3
 800c40e:	42a3      	cmp	r3, r4
 800c410:	d80d      	bhi.n	800c42e <__copybits+0x38>
 800c412:	0014      	movs	r4, r2
 800c414:	3411      	adds	r4, #17
 800c416:	2500      	movs	r5, #0
 800c418:	429c      	cmp	r4, r3
 800c41a:	d803      	bhi.n	800c424 <__copybits+0x2e>
 800c41c:	1a9b      	subs	r3, r3, r2
 800c41e:	3b11      	subs	r3, #17
 800c420:	089b      	lsrs	r3, r3, #2
 800c422:	009d      	lsls	r5, r3, #2
 800c424:	2300      	movs	r3, #0
 800c426:	1940      	adds	r0, r0, r5
 800c428:	4281      	cmp	r1, r0
 800c42a:	d803      	bhi.n	800c434 <__copybits+0x3e>
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
 800c42e:	cc40      	ldmia	r4!, {r6}
 800c430:	c540      	stmia	r5!, {r6}
 800c432:	e7ec      	b.n	800c40e <__copybits+0x18>
 800c434:	c008      	stmia	r0!, {r3}
 800c436:	e7f7      	b.n	800c428 <__copybits+0x32>

0800c438 <__any_on>:
 800c438:	0002      	movs	r2, r0
 800c43a:	6900      	ldr	r0, [r0, #16]
 800c43c:	b510      	push	{r4, lr}
 800c43e:	3214      	adds	r2, #20
 800c440:	114b      	asrs	r3, r1, #5
 800c442:	4298      	cmp	r0, r3
 800c444:	db13      	blt.n	800c46e <__any_on+0x36>
 800c446:	dd0c      	ble.n	800c462 <__any_on+0x2a>
 800c448:	241f      	movs	r4, #31
 800c44a:	0008      	movs	r0, r1
 800c44c:	4020      	ands	r0, r4
 800c44e:	4221      	tst	r1, r4
 800c450:	d007      	beq.n	800c462 <__any_on+0x2a>
 800c452:	0099      	lsls	r1, r3, #2
 800c454:	588c      	ldr	r4, [r1, r2]
 800c456:	0021      	movs	r1, r4
 800c458:	40c1      	lsrs	r1, r0
 800c45a:	4081      	lsls	r1, r0
 800c45c:	2001      	movs	r0, #1
 800c45e:	428c      	cmp	r4, r1
 800c460:	d104      	bne.n	800c46c <__any_on+0x34>
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	18d3      	adds	r3, r2, r3
 800c466:	4293      	cmp	r3, r2
 800c468:	d803      	bhi.n	800c472 <__any_on+0x3a>
 800c46a:	2000      	movs	r0, #0
 800c46c:	bd10      	pop	{r4, pc}
 800c46e:	0003      	movs	r3, r0
 800c470:	e7f7      	b.n	800c462 <__any_on+0x2a>
 800c472:	3b04      	subs	r3, #4
 800c474:	6819      	ldr	r1, [r3, #0]
 800c476:	2900      	cmp	r1, #0
 800c478:	d0f5      	beq.n	800c466 <__any_on+0x2e>
 800c47a:	2001      	movs	r0, #1
 800c47c:	e7f6      	b.n	800c46c <__any_on+0x34>
	...

0800c480 <sulp>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	0016      	movs	r6, r2
 800c484:	000d      	movs	r5, r1
 800c486:	f7ff fec5 	bl	800c214 <__ulp>
 800c48a:	2e00      	cmp	r6, #0
 800c48c:	d00d      	beq.n	800c4aa <sulp+0x2a>
 800c48e:	236b      	movs	r3, #107	; 0x6b
 800c490:	006a      	lsls	r2, r5, #1
 800c492:	0d52      	lsrs	r2, r2, #21
 800c494:	1a9b      	subs	r3, r3, r2
 800c496:	2b00      	cmp	r3, #0
 800c498:	dd07      	ble.n	800c4aa <sulp+0x2a>
 800c49a:	2400      	movs	r4, #0
 800c49c:	4a03      	ldr	r2, [pc, #12]	; (800c4ac <sulp+0x2c>)
 800c49e:	051b      	lsls	r3, r3, #20
 800c4a0:	189d      	adds	r5, r3, r2
 800c4a2:	002b      	movs	r3, r5
 800c4a4:	0022      	movs	r2, r4
 800c4a6:	f7f4 ffc9 	bl	800143c <__aeabi_dmul>
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	3ff00000 	.word	0x3ff00000

0800c4b0 <_strtod_l>:
 800c4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4b2:	b0a1      	sub	sp, #132	; 0x84
 800c4b4:	9219      	str	r2, [sp, #100]	; 0x64
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	2600      	movs	r6, #0
 800c4ba:	2700      	movs	r7, #0
 800c4bc:	9004      	str	r0, [sp, #16]
 800c4be:	9107      	str	r1, [sp, #28]
 800c4c0:	921c      	str	r2, [sp, #112]	; 0x70
 800c4c2:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4c4:	780a      	ldrb	r2, [r1, #0]
 800c4c6:	2a2b      	cmp	r2, #43	; 0x2b
 800c4c8:	d055      	beq.n	800c576 <_strtod_l+0xc6>
 800c4ca:	d841      	bhi.n	800c550 <_strtod_l+0xa0>
 800c4cc:	2a0d      	cmp	r2, #13
 800c4ce:	d83b      	bhi.n	800c548 <_strtod_l+0x98>
 800c4d0:	2a08      	cmp	r2, #8
 800c4d2:	d83b      	bhi.n	800c54c <_strtod_l+0x9c>
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	d044      	beq.n	800c562 <_strtod_l+0xb2>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	920f      	str	r2, [sp, #60]	; 0x3c
 800c4dc:	2100      	movs	r1, #0
 800c4de:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c4e0:	9109      	str	r1, [sp, #36]	; 0x24
 800c4e2:	782a      	ldrb	r2, [r5, #0]
 800c4e4:	2a30      	cmp	r2, #48	; 0x30
 800c4e6:	d000      	beq.n	800c4ea <_strtod_l+0x3a>
 800c4e8:	e085      	b.n	800c5f6 <_strtod_l+0x146>
 800c4ea:	786a      	ldrb	r2, [r5, #1]
 800c4ec:	3120      	adds	r1, #32
 800c4ee:	438a      	bics	r2, r1
 800c4f0:	2a58      	cmp	r2, #88	; 0x58
 800c4f2:	d000      	beq.n	800c4f6 <_strtod_l+0x46>
 800c4f4:	e075      	b.n	800c5e2 <_strtod_l+0x132>
 800c4f6:	9302      	str	r3, [sp, #8]
 800c4f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4fa:	4a97      	ldr	r2, [pc, #604]	; (800c758 <_strtod_l+0x2a8>)
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	ab1c      	add	r3, sp, #112	; 0x70
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	9804      	ldr	r0, [sp, #16]
 800c504:	ab1d      	add	r3, sp, #116	; 0x74
 800c506:	a91b      	add	r1, sp, #108	; 0x6c
 800c508:	f001 f978 	bl	800d7fc <__gethex>
 800c50c:	230f      	movs	r3, #15
 800c50e:	0002      	movs	r2, r0
 800c510:	401a      	ands	r2, r3
 800c512:	0004      	movs	r4, r0
 800c514:	9205      	str	r2, [sp, #20]
 800c516:	4218      	tst	r0, r3
 800c518:	d005      	beq.n	800c526 <_strtod_l+0x76>
 800c51a:	2a06      	cmp	r2, #6
 800c51c:	d12d      	bne.n	800c57a <_strtod_l+0xca>
 800c51e:	1c6b      	adds	r3, r5, #1
 800c520:	931b      	str	r3, [sp, #108]	; 0x6c
 800c522:	2300      	movs	r3, #0
 800c524:	930f      	str	r3, [sp, #60]	; 0x3c
 800c526:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <_strtod_l+0x82>
 800c52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c52e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c530:	6013      	str	r3, [r2, #0]
 800c532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c534:	2b00      	cmp	r3, #0
 800c536:	d01b      	beq.n	800c570 <_strtod_l+0xc0>
 800c538:	2380      	movs	r3, #128	; 0x80
 800c53a:	0032      	movs	r2, r6
 800c53c:	061b      	lsls	r3, r3, #24
 800c53e:	18fb      	adds	r3, r7, r3
 800c540:	0010      	movs	r0, r2
 800c542:	0019      	movs	r1, r3
 800c544:	b021      	add	sp, #132	; 0x84
 800c546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c548:	2a20      	cmp	r2, #32
 800c54a:	d1c5      	bne.n	800c4d8 <_strtod_l+0x28>
 800c54c:	3101      	adds	r1, #1
 800c54e:	e7b8      	b.n	800c4c2 <_strtod_l+0x12>
 800c550:	2a2d      	cmp	r2, #45	; 0x2d
 800c552:	d1c1      	bne.n	800c4d8 <_strtod_l+0x28>
 800c554:	3a2c      	subs	r2, #44	; 0x2c
 800c556:	920f      	str	r2, [sp, #60]	; 0x3c
 800c558:	1c4a      	adds	r2, r1, #1
 800c55a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c55c:	784a      	ldrb	r2, [r1, #1]
 800c55e:	2a00      	cmp	r2, #0
 800c560:	d1bc      	bne.n	800c4dc <_strtod_l+0x2c>
 800c562:	9b07      	ldr	r3, [sp, #28]
 800c564:	931b      	str	r3, [sp, #108]	; 0x6c
 800c566:	2300      	movs	r3, #0
 800c568:	930f      	str	r3, [sp, #60]	; 0x3c
 800c56a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1dd      	bne.n	800c52c <_strtod_l+0x7c>
 800c570:	0032      	movs	r2, r6
 800c572:	003b      	movs	r3, r7
 800c574:	e7e4      	b.n	800c540 <_strtod_l+0x90>
 800c576:	2200      	movs	r2, #0
 800c578:	e7ed      	b.n	800c556 <_strtod_l+0xa6>
 800c57a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c57c:	2a00      	cmp	r2, #0
 800c57e:	d007      	beq.n	800c590 <_strtod_l+0xe0>
 800c580:	2135      	movs	r1, #53	; 0x35
 800c582:	a81e      	add	r0, sp, #120	; 0x78
 800c584:	f7ff ff37 	bl	800c3f6 <__copybits>
 800c588:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c58a:	9804      	ldr	r0, [sp, #16]
 800c58c:	f7ff fb00 	bl	800bb90 <_Bfree>
 800c590:	9805      	ldr	r0, [sp, #20]
 800c592:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c594:	3801      	subs	r0, #1
 800c596:	2804      	cmp	r0, #4
 800c598:	d806      	bhi.n	800c5a8 <_strtod_l+0xf8>
 800c59a:	f7f3 fdbd 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c59e:	0312      	.short	0x0312
 800c5a0:	1e1c      	.short	0x1e1c
 800c5a2:	12          	.byte	0x12
 800c5a3:	00          	.byte	0x00
 800c5a4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5a6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c5a8:	05e4      	lsls	r4, r4, #23
 800c5aa:	d502      	bpl.n	800c5b2 <_strtod_l+0x102>
 800c5ac:	2380      	movs	r3, #128	; 0x80
 800c5ae:	061b      	lsls	r3, r3, #24
 800c5b0:	431f      	orrs	r7, r3
 800c5b2:	4b6a      	ldr	r3, [pc, #424]	; (800c75c <_strtod_l+0x2ac>)
 800c5b4:	423b      	tst	r3, r7
 800c5b6:	d1b6      	bne.n	800c526 <_strtod_l+0x76>
 800c5b8:	f7fe faba 	bl	800ab30 <__errno>
 800c5bc:	2322      	movs	r3, #34	; 0x22
 800c5be:	6003      	str	r3, [r0, #0]
 800c5c0:	e7b1      	b.n	800c526 <_strtod_l+0x76>
 800c5c2:	4967      	ldr	r1, [pc, #412]	; (800c760 <_strtod_l+0x2b0>)
 800c5c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c5c6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5c8:	400a      	ands	r2, r1
 800c5ca:	4966      	ldr	r1, [pc, #408]	; (800c764 <_strtod_l+0x2b4>)
 800c5cc:	185b      	adds	r3, r3, r1
 800c5ce:	051b      	lsls	r3, r3, #20
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	0017      	movs	r7, r2
 800c5d4:	e7e8      	b.n	800c5a8 <_strtod_l+0xf8>
 800c5d6:	4f61      	ldr	r7, [pc, #388]	; (800c75c <_strtod_l+0x2ac>)
 800c5d8:	e7e6      	b.n	800c5a8 <_strtod_l+0xf8>
 800c5da:	2601      	movs	r6, #1
 800c5dc:	4f62      	ldr	r7, [pc, #392]	; (800c768 <_strtod_l+0x2b8>)
 800c5de:	4276      	negs	r6, r6
 800c5e0:	e7e2      	b.n	800c5a8 <_strtod_l+0xf8>
 800c5e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5e8:	785b      	ldrb	r3, [r3, #1]
 800c5ea:	2b30      	cmp	r3, #48	; 0x30
 800c5ec:	d0f9      	beq.n	800c5e2 <_strtod_l+0x132>
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d099      	beq.n	800c526 <_strtod_l+0x76>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f6:	2500      	movs	r5, #0
 800c5f8:	220a      	movs	r2, #10
 800c5fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5fc:	950d      	str	r5, [sp, #52]	; 0x34
 800c5fe:	9310      	str	r3, [sp, #64]	; 0x40
 800c600:	9508      	str	r5, [sp, #32]
 800c602:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c604:	7804      	ldrb	r4, [r0, #0]
 800c606:	0023      	movs	r3, r4
 800c608:	3b30      	subs	r3, #48	; 0x30
 800c60a:	b2d9      	uxtb	r1, r3
 800c60c:	2909      	cmp	r1, #9
 800c60e:	d927      	bls.n	800c660 <_strtod_l+0x1b0>
 800c610:	2201      	movs	r2, #1
 800c612:	4956      	ldr	r1, [pc, #344]	; (800c76c <_strtod_l+0x2bc>)
 800c614:	f001 f812 	bl	800d63c <strncmp>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d031      	beq.n	800c680 <_strtod_l+0x1d0>
 800c61c:	2000      	movs	r0, #0
 800c61e:	0023      	movs	r3, r4
 800c620:	4684      	mov	ip, r0
 800c622:	9a08      	ldr	r2, [sp, #32]
 800c624:	900c      	str	r0, [sp, #48]	; 0x30
 800c626:	9205      	str	r2, [sp, #20]
 800c628:	2220      	movs	r2, #32
 800c62a:	0019      	movs	r1, r3
 800c62c:	4391      	bics	r1, r2
 800c62e:	000a      	movs	r2, r1
 800c630:	2100      	movs	r1, #0
 800c632:	9106      	str	r1, [sp, #24]
 800c634:	2a45      	cmp	r2, #69	; 0x45
 800c636:	d000      	beq.n	800c63a <_strtod_l+0x18a>
 800c638:	e0c2      	b.n	800c7c0 <_strtod_l+0x310>
 800c63a:	9b05      	ldr	r3, [sp, #20]
 800c63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c63e:	4303      	orrs	r3, r0
 800c640:	4313      	orrs	r3, r2
 800c642:	428b      	cmp	r3, r1
 800c644:	d08d      	beq.n	800c562 <_strtod_l+0xb2>
 800c646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c648:	9307      	str	r3, [sp, #28]
 800c64a:	3301      	adds	r3, #1
 800c64c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c64e:	9b07      	ldr	r3, [sp, #28]
 800c650:	785b      	ldrb	r3, [r3, #1]
 800c652:	2b2b      	cmp	r3, #43	; 0x2b
 800c654:	d071      	beq.n	800c73a <_strtod_l+0x28a>
 800c656:	000c      	movs	r4, r1
 800c658:	2b2d      	cmp	r3, #45	; 0x2d
 800c65a:	d174      	bne.n	800c746 <_strtod_l+0x296>
 800c65c:	2401      	movs	r4, #1
 800c65e:	e06d      	b.n	800c73c <_strtod_l+0x28c>
 800c660:	9908      	ldr	r1, [sp, #32]
 800c662:	2908      	cmp	r1, #8
 800c664:	dc09      	bgt.n	800c67a <_strtod_l+0x1ca>
 800c666:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c668:	4351      	muls	r1, r2
 800c66a:	185b      	adds	r3, r3, r1
 800c66c:	930d      	str	r3, [sp, #52]	; 0x34
 800c66e:	9b08      	ldr	r3, [sp, #32]
 800c670:	3001      	adds	r0, #1
 800c672:	3301      	adds	r3, #1
 800c674:	9308      	str	r3, [sp, #32]
 800c676:	901b      	str	r0, [sp, #108]	; 0x6c
 800c678:	e7c3      	b.n	800c602 <_strtod_l+0x152>
 800c67a:	4355      	muls	r5, r2
 800c67c:	195d      	adds	r5, r3, r5
 800c67e:	e7f6      	b.n	800c66e <_strtod_l+0x1be>
 800c680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c682:	1c5a      	adds	r2, r3, #1
 800c684:	921b      	str	r2, [sp, #108]	; 0x6c
 800c686:	9a08      	ldr	r2, [sp, #32]
 800c688:	785b      	ldrb	r3, [r3, #1]
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	d03a      	beq.n	800c704 <_strtod_l+0x254>
 800c68e:	900c      	str	r0, [sp, #48]	; 0x30
 800c690:	9205      	str	r2, [sp, #20]
 800c692:	001a      	movs	r2, r3
 800c694:	3a30      	subs	r2, #48	; 0x30
 800c696:	2a09      	cmp	r2, #9
 800c698:	d912      	bls.n	800c6c0 <_strtod_l+0x210>
 800c69a:	2201      	movs	r2, #1
 800c69c:	4694      	mov	ip, r2
 800c69e:	e7c3      	b.n	800c628 <_strtod_l+0x178>
 800c6a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6a8:	785b      	ldrb	r3, [r3, #1]
 800c6aa:	2b30      	cmp	r3, #48	; 0x30
 800c6ac:	d0f8      	beq.n	800c6a0 <_strtod_l+0x1f0>
 800c6ae:	001a      	movs	r2, r3
 800c6b0:	3a31      	subs	r2, #49	; 0x31
 800c6b2:	2a08      	cmp	r2, #8
 800c6b4:	d83c      	bhi.n	800c730 <_strtod_l+0x280>
 800c6b6:	900c      	str	r0, [sp, #48]	; 0x30
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c6bc:	9005      	str	r0, [sp, #20]
 800c6be:	9210      	str	r2, [sp, #64]	; 0x40
 800c6c0:	001a      	movs	r2, r3
 800c6c2:	1c41      	adds	r1, r0, #1
 800c6c4:	3a30      	subs	r2, #48	; 0x30
 800c6c6:	2b30      	cmp	r3, #48	; 0x30
 800c6c8:	d016      	beq.n	800c6f8 <_strtod_l+0x248>
 800c6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6cc:	185b      	adds	r3, r3, r1
 800c6ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c6d0:	9b05      	ldr	r3, [sp, #20]
 800c6d2:	210a      	movs	r1, #10
 800c6d4:	469c      	mov	ip, r3
 800c6d6:	4484      	add	ip, r0
 800c6d8:	4563      	cmp	r3, ip
 800c6da:	d115      	bne.n	800c708 <_strtod_l+0x258>
 800c6dc:	9905      	ldr	r1, [sp, #20]
 800c6de:	9b05      	ldr	r3, [sp, #20]
 800c6e0:	3101      	adds	r1, #1
 800c6e2:	1809      	adds	r1, r1, r0
 800c6e4:	181b      	adds	r3, r3, r0
 800c6e6:	9105      	str	r1, [sp, #20]
 800c6e8:	2b08      	cmp	r3, #8
 800c6ea:	dc19      	bgt.n	800c720 <_strtod_l+0x270>
 800c6ec:	230a      	movs	r3, #10
 800c6ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c6f0:	434b      	muls	r3, r1
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	18d3      	adds	r3, r2, r3
 800c6f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c6f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6fa:	0008      	movs	r0, r1
 800c6fc:	1c5a      	adds	r2, r3, #1
 800c6fe:	921b      	str	r2, [sp, #108]	; 0x6c
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	e7c6      	b.n	800c692 <_strtod_l+0x1e2>
 800c704:	9808      	ldr	r0, [sp, #32]
 800c706:	e7d0      	b.n	800c6aa <_strtod_l+0x1fa>
 800c708:	1c5c      	adds	r4, r3, #1
 800c70a:	2b08      	cmp	r3, #8
 800c70c:	dc04      	bgt.n	800c718 <_strtod_l+0x268>
 800c70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c710:	434b      	muls	r3, r1
 800c712:	930d      	str	r3, [sp, #52]	; 0x34
 800c714:	0023      	movs	r3, r4
 800c716:	e7df      	b.n	800c6d8 <_strtod_l+0x228>
 800c718:	2c10      	cmp	r4, #16
 800c71a:	dcfb      	bgt.n	800c714 <_strtod_l+0x264>
 800c71c:	434d      	muls	r5, r1
 800c71e:	e7f9      	b.n	800c714 <_strtod_l+0x264>
 800c720:	9b05      	ldr	r3, [sp, #20]
 800c722:	2100      	movs	r1, #0
 800c724:	2b10      	cmp	r3, #16
 800c726:	dce7      	bgt.n	800c6f8 <_strtod_l+0x248>
 800c728:	230a      	movs	r3, #10
 800c72a:	435d      	muls	r5, r3
 800c72c:	1955      	adds	r5, r2, r5
 800c72e:	e7e3      	b.n	800c6f8 <_strtod_l+0x248>
 800c730:	2200      	movs	r2, #0
 800c732:	920c      	str	r2, [sp, #48]	; 0x30
 800c734:	9205      	str	r2, [sp, #20]
 800c736:	3201      	adds	r2, #1
 800c738:	e7b0      	b.n	800c69c <_strtod_l+0x1ec>
 800c73a:	2400      	movs	r4, #0
 800c73c:	9b07      	ldr	r3, [sp, #28]
 800c73e:	3302      	adds	r3, #2
 800c740:	931b      	str	r3, [sp, #108]	; 0x6c
 800c742:	9b07      	ldr	r3, [sp, #28]
 800c744:	789b      	ldrb	r3, [r3, #2]
 800c746:	001a      	movs	r2, r3
 800c748:	3a30      	subs	r2, #48	; 0x30
 800c74a:	2a09      	cmp	r2, #9
 800c74c:	d914      	bls.n	800c778 <_strtod_l+0x2c8>
 800c74e:	9a07      	ldr	r2, [sp, #28]
 800c750:	921b      	str	r2, [sp, #108]	; 0x6c
 800c752:	2200      	movs	r2, #0
 800c754:	e033      	b.n	800c7be <_strtod_l+0x30e>
 800c756:	46c0      	nop			; (mov r8, r8)
 800c758:	0800e830 	.word	0x0800e830
 800c75c:	7ff00000 	.word	0x7ff00000
 800c760:	ffefffff 	.word	0xffefffff
 800c764:	00000433 	.word	0x00000433
 800c768:	7fffffff 	.word	0x7fffffff
 800c76c:	0800e82c 	.word	0x0800e82c
 800c770:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	921b      	str	r2, [sp, #108]	; 0x6c
 800c776:	785b      	ldrb	r3, [r3, #1]
 800c778:	2b30      	cmp	r3, #48	; 0x30
 800c77a:	d0f9      	beq.n	800c770 <_strtod_l+0x2c0>
 800c77c:	2200      	movs	r2, #0
 800c77e:	9206      	str	r2, [sp, #24]
 800c780:	001a      	movs	r2, r3
 800c782:	3a31      	subs	r2, #49	; 0x31
 800c784:	2a08      	cmp	r2, #8
 800c786:	d81b      	bhi.n	800c7c0 <_strtod_l+0x310>
 800c788:	3b30      	subs	r3, #48	; 0x30
 800c78a:	930e      	str	r3, [sp, #56]	; 0x38
 800c78c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c78e:	9306      	str	r3, [sp, #24]
 800c790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c792:	1c59      	adds	r1, r3, #1
 800c794:	911b      	str	r1, [sp, #108]	; 0x6c
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	001a      	movs	r2, r3
 800c79a:	3a30      	subs	r2, #48	; 0x30
 800c79c:	2a09      	cmp	r2, #9
 800c79e:	d93a      	bls.n	800c816 <_strtod_l+0x366>
 800c7a0:	9a06      	ldr	r2, [sp, #24]
 800c7a2:	1a8a      	subs	r2, r1, r2
 800c7a4:	49b2      	ldr	r1, [pc, #712]	; (800ca70 <_strtod_l+0x5c0>)
 800c7a6:	9106      	str	r1, [sp, #24]
 800c7a8:	2a08      	cmp	r2, #8
 800c7aa:	dc04      	bgt.n	800c7b6 <_strtod_l+0x306>
 800c7ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7ae:	9206      	str	r2, [sp, #24]
 800c7b0:	428a      	cmp	r2, r1
 800c7b2:	dd00      	ble.n	800c7b6 <_strtod_l+0x306>
 800c7b4:	9106      	str	r1, [sp, #24]
 800c7b6:	2c00      	cmp	r4, #0
 800c7b8:	d002      	beq.n	800c7c0 <_strtod_l+0x310>
 800c7ba:	9a06      	ldr	r2, [sp, #24]
 800c7bc:	4252      	negs	r2, r2
 800c7be:	9206      	str	r2, [sp, #24]
 800c7c0:	9a05      	ldr	r2, [sp, #20]
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	d14d      	bne.n	800c862 <_strtod_l+0x3b2>
 800c7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c8:	4310      	orrs	r0, r2
 800c7ca:	d000      	beq.n	800c7ce <_strtod_l+0x31e>
 800c7cc:	e6ab      	b.n	800c526 <_strtod_l+0x76>
 800c7ce:	4662      	mov	r2, ip
 800c7d0:	2a00      	cmp	r2, #0
 800c7d2:	d000      	beq.n	800c7d6 <_strtod_l+0x326>
 800c7d4:	e6c5      	b.n	800c562 <_strtod_l+0xb2>
 800c7d6:	2b69      	cmp	r3, #105	; 0x69
 800c7d8:	d027      	beq.n	800c82a <_strtod_l+0x37a>
 800c7da:	dc23      	bgt.n	800c824 <_strtod_l+0x374>
 800c7dc:	2b49      	cmp	r3, #73	; 0x49
 800c7de:	d024      	beq.n	800c82a <_strtod_l+0x37a>
 800c7e0:	2b4e      	cmp	r3, #78	; 0x4e
 800c7e2:	d000      	beq.n	800c7e6 <_strtod_l+0x336>
 800c7e4:	e6bd      	b.n	800c562 <_strtod_l+0xb2>
 800c7e6:	49a3      	ldr	r1, [pc, #652]	; (800ca74 <_strtod_l+0x5c4>)
 800c7e8:	a81b      	add	r0, sp, #108	; 0x6c
 800c7ea:	f001 fa3d 	bl	800dc68 <__match>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d100      	bne.n	800c7f4 <_strtod_l+0x344>
 800c7f2:	e6b6      	b.n	800c562 <_strtod_l+0xb2>
 800c7f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	2b28      	cmp	r3, #40	; 0x28
 800c7fa:	d12c      	bne.n	800c856 <_strtod_l+0x3a6>
 800c7fc:	499e      	ldr	r1, [pc, #632]	; (800ca78 <_strtod_l+0x5c8>)
 800c7fe:	aa1e      	add	r2, sp, #120	; 0x78
 800c800:	a81b      	add	r0, sp, #108	; 0x6c
 800c802:	f001 fa45 	bl	800dc90 <__hexnan>
 800c806:	2805      	cmp	r0, #5
 800c808:	d125      	bne.n	800c856 <_strtod_l+0x3a6>
 800c80a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c80c:	4a9b      	ldr	r2, [pc, #620]	; (800ca7c <_strtod_l+0x5cc>)
 800c80e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c810:	431a      	orrs	r2, r3
 800c812:	0017      	movs	r7, r2
 800c814:	e687      	b.n	800c526 <_strtod_l+0x76>
 800c816:	220a      	movs	r2, #10
 800c818:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c81a:	434a      	muls	r2, r1
 800c81c:	18d2      	adds	r2, r2, r3
 800c81e:	3a30      	subs	r2, #48	; 0x30
 800c820:	920e      	str	r2, [sp, #56]	; 0x38
 800c822:	e7b5      	b.n	800c790 <_strtod_l+0x2e0>
 800c824:	2b6e      	cmp	r3, #110	; 0x6e
 800c826:	d0de      	beq.n	800c7e6 <_strtod_l+0x336>
 800c828:	e69b      	b.n	800c562 <_strtod_l+0xb2>
 800c82a:	4995      	ldr	r1, [pc, #596]	; (800ca80 <_strtod_l+0x5d0>)
 800c82c:	a81b      	add	r0, sp, #108	; 0x6c
 800c82e:	f001 fa1b 	bl	800dc68 <__match>
 800c832:	2800      	cmp	r0, #0
 800c834:	d100      	bne.n	800c838 <_strtod_l+0x388>
 800c836:	e694      	b.n	800c562 <_strtod_l+0xb2>
 800c838:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c83a:	4992      	ldr	r1, [pc, #584]	; (800ca84 <_strtod_l+0x5d4>)
 800c83c:	3b01      	subs	r3, #1
 800c83e:	a81b      	add	r0, sp, #108	; 0x6c
 800c840:	931b      	str	r3, [sp, #108]	; 0x6c
 800c842:	f001 fa11 	bl	800dc68 <__match>
 800c846:	2800      	cmp	r0, #0
 800c848:	d102      	bne.n	800c850 <_strtod_l+0x3a0>
 800c84a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c84c:	3301      	adds	r3, #1
 800c84e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c850:	2600      	movs	r6, #0
 800c852:	4f8a      	ldr	r7, [pc, #552]	; (800ca7c <_strtod_l+0x5cc>)
 800c854:	e667      	b.n	800c526 <_strtod_l+0x76>
 800c856:	488c      	ldr	r0, [pc, #560]	; (800ca88 <_strtod_l+0x5d8>)
 800c858:	f000 ff14 	bl	800d684 <nan>
 800c85c:	0006      	movs	r6, r0
 800c85e:	000f      	movs	r7, r1
 800c860:	e661      	b.n	800c526 <_strtod_l+0x76>
 800c862:	9b06      	ldr	r3, [sp, #24]
 800c864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c866:	1a9b      	subs	r3, r3, r2
 800c868:	9309      	str	r3, [sp, #36]	; 0x24
 800c86a:	9b08      	ldr	r3, [sp, #32]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <_strtod_l+0x3c4>
 800c870:	9b05      	ldr	r3, [sp, #20]
 800c872:	9308      	str	r3, [sp, #32]
 800c874:	9c05      	ldr	r4, [sp, #20]
 800c876:	2c10      	cmp	r4, #16
 800c878:	dd00      	ble.n	800c87c <_strtod_l+0x3cc>
 800c87a:	2410      	movs	r4, #16
 800c87c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c87e:	f7f5 fca5 	bl	80021cc <__aeabi_ui2d>
 800c882:	9b05      	ldr	r3, [sp, #20]
 800c884:	0006      	movs	r6, r0
 800c886:	000f      	movs	r7, r1
 800c888:	2b09      	cmp	r3, #9
 800c88a:	dd15      	ble.n	800c8b8 <_strtod_l+0x408>
 800c88c:	0022      	movs	r2, r4
 800c88e:	4b7f      	ldr	r3, [pc, #508]	; (800ca8c <_strtod_l+0x5dc>)
 800c890:	3a09      	subs	r2, #9
 800c892:	00d2      	lsls	r2, r2, #3
 800c894:	189b      	adds	r3, r3, r2
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f7f4 fdcf 	bl	800143c <__aeabi_dmul>
 800c89e:	0006      	movs	r6, r0
 800c8a0:	0028      	movs	r0, r5
 800c8a2:	000f      	movs	r7, r1
 800c8a4:	f7f5 fc92 	bl	80021cc <__aeabi_ui2d>
 800c8a8:	0002      	movs	r2, r0
 800c8aa:	000b      	movs	r3, r1
 800c8ac:	0030      	movs	r0, r6
 800c8ae:	0039      	movs	r1, r7
 800c8b0:	f7f3 fe6a 	bl	8000588 <__aeabi_dadd>
 800c8b4:	0006      	movs	r6, r0
 800c8b6:	000f      	movs	r7, r1
 800c8b8:	9b05      	ldr	r3, [sp, #20]
 800c8ba:	2b0f      	cmp	r3, #15
 800c8bc:	dc39      	bgt.n	800c932 <_strtod_l+0x482>
 800c8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d100      	bne.n	800c8c6 <_strtod_l+0x416>
 800c8c4:	e62f      	b.n	800c526 <_strtod_l+0x76>
 800c8c6:	dd24      	ble.n	800c912 <_strtod_l+0x462>
 800c8c8:	2b16      	cmp	r3, #22
 800c8ca:	dc09      	bgt.n	800c8e0 <_strtod_l+0x430>
 800c8cc:	496f      	ldr	r1, [pc, #444]	; (800ca8c <_strtod_l+0x5dc>)
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	18c9      	adds	r1, r1, r3
 800c8d2:	0032      	movs	r2, r6
 800c8d4:	6808      	ldr	r0, [r1, #0]
 800c8d6:	6849      	ldr	r1, [r1, #4]
 800c8d8:	003b      	movs	r3, r7
 800c8da:	f7f4 fdaf 	bl	800143c <__aeabi_dmul>
 800c8de:	e7bd      	b.n	800c85c <_strtod_l+0x3ac>
 800c8e0:	2325      	movs	r3, #37	; 0x25
 800c8e2:	9a05      	ldr	r2, [sp, #20]
 800c8e4:	1a9b      	subs	r3, r3, r2
 800c8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	db22      	blt.n	800c932 <_strtod_l+0x482>
 800c8ec:	240f      	movs	r4, #15
 800c8ee:	9b05      	ldr	r3, [sp, #20]
 800c8f0:	4d66      	ldr	r5, [pc, #408]	; (800ca8c <_strtod_l+0x5dc>)
 800c8f2:	1ae4      	subs	r4, r4, r3
 800c8f4:	00e1      	lsls	r1, r4, #3
 800c8f6:	1869      	adds	r1, r5, r1
 800c8f8:	0032      	movs	r2, r6
 800c8fa:	6808      	ldr	r0, [r1, #0]
 800c8fc:	6849      	ldr	r1, [r1, #4]
 800c8fe:	003b      	movs	r3, r7
 800c900:	f7f4 fd9c 	bl	800143c <__aeabi_dmul>
 800c904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c906:	1b1c      	subs	r4, r3, r4
 800c908:	00e4      	lsls	r4, r4, #3
 800c90a:	192d      	adds	r5, r5, r4
 800c90c:	682a      	ldr	r2, [r5, #0]
 800c90e:	686b      	ldr	r3, [r5, #4]
 800c910:	e7e3      	b.n	800c8da <_strtod_l+0x42a>
 800c912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c914:	3316      	adds	r3, #22
 800c916:	db0c      	blt.n	800c932 <_strtod_l+0x482>
 800c918:	9906      	ldr	r1, [sp, #24]
 800c91a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c91c:	4b5b      	ldr	r3, [pc, #364]	; (800ca8c <_strtod_l+0x5dc>)
 800c91e:	1a52      	subs	r2, r2, r1
 800c920:	00d2      	lsls	r2, r2, #3
 800c922:	189b      	adds	r3, r3, r2
 800c924:	0030      	movs	r0, r6
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	0039      	movs	r1, r7
 800c92c:	f7f4 f98c 	bl	8000c48 <__aeabi_ddiv>
 800c930:	e794      	b.n	800c85c <_strtod_l+0x3ac>
 800c932:	9b05      	ldr	r3, [sp, #20]
 800c934:	1b1c      	subs	r4, r3, r4
 800c936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c938:	18e4      	adds	r4, r4, r3
 800c93a:	2c00      	cmp	r4, #0
 800c93c:	dd72      	ble.n	800ca24 <_strtod_l+0x574>
 800c93e:	220f      	movs	r2, #15
 800c940:	0023      	movs	r3, r4
 800c942:	4013      	ands	r3, r2
 800c944:	4214      	tst	r4, r2
 800c946:	d00a      	beq.n	800c95e <_strtod_l+0x4ae>
 800c948:	4950      	ldr	r1, [pc, #320]	; (800ca8c <_strtod_l+0x5dc>)
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	18c9      	adds	r1, r1, r3
 800c94e:	0032      	movs	r2, r6
 800c950:	6808      	ldr	r0, [r1, #0]
 800c952:	6849      	ldr	r1, [r1, #4]
 800c954:	003b      	movs	r3, r7
 800c956:	f7f4 fd71 	bl	800143c <__aeabi_dmul>
 800c95a:	0006      	movs	r6, r0
 800c95c:	000f      	movs	r7, r1
 800c95e:	230f      	movs	r3, #15
 800c960:	439c      	bics	r4, r3
 800c962:	d04a      	beq.n	800c9fa <_strtod_l+0x54a>
 800c964:	3326      	adds	r3, #38	; 0x26
 800c966:	33ff      	adds	r3, #255	; 0xff
 800c968:	429c      	cmp	r4, r3
 800c96a:	dd22      	ble.n	800c9b2 <_strtod_l+0x502>
 800c96c:	2300      	movs	r3, #0
 800c96e:	9305      	str	r3, [sp, #20]
 800c970:	9306      	str	r3, [sp, #24]
 800c972:	930d      	str	r3, [sp, #52]	; 0x34
 800c974:	9308      	str	r3, [sp, #32]
 800c976:	2322      	movs	r3, #34	; 0x22
 800c978:	2600      	movs	r6, #0
 800c97a:	9a04      	ldr	r2, [sp, #16]
 800c97c:	4f3f      	ldr	r7, [pc, #252]	; (800ca7c <_strtod_l+0x5cc>)
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c982:	42b3      	cmp	r3, r6
 800c984:	d100      	bne.n	800c988 <_strtod_l+0x4d8>
 800c986:	e5ce      	b.n	800c526 <_strtod_l+0x76>
 800c988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c98a:	9804      	ldr	r0, [sp, #16]
 800c98c:	f7ff f900 	bl	800bb90 <_Bfree>
 800c990:	9908      	ldr	r1, [sp, #32]
 800c992:	9804      	ldr	r0, [sp, #16]
 800c994:	f7ff f8fc 	bl	800bb90 <_Bfree>
 800c998:	9906      	ldr	r1, [sp, #24]
 800c99a:	9804      	ldr	r0, [sp, #16]
 800c99c:	f7ff f8f8 	bl	800bb90 <_Bfree>
 800c9a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9a2:	9804      	ldr	r0, [sp, #16]
 800c9a4:	f7ff f8f4 	bl	800bb90 <_Bfree>
 800c9a8:	9905      	ldr	r1, [sp, #20]
 800c9aa:	9804      	ldr	r0, [sp, #16]
 800c9ac:	f7ff f8f0 	bl	800bb90 <_Bfree>
 800c9b0:	e5b9      	b.n	800c526 <_strtod_l+0x76>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	0030      	movs	r0, r6
 800c9b6:	0039      	movs	r1, r7
 800c9b8:	4d35      	ldr	r5, [pc, #212]	; (800ca90 <_strtod_l+0x5e0>)
 800c9ba:	1124      	asrs	r4, r4, #4
 800c9bc:	9307      	str	r3, [sp, #28]
 800c9be:	2c01      	cmp	r4, #1
 800c9c0:	dc1e      	bgt.n	800ca00 <_strtod_l+0x550>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <_strtod_l+0x51a>
 800c9c6:	0006      	movs	r6, r0
 800c9c8:	000f      	movs	r7, r1
 800c9ca:	4b32      	ldr	r3, [pc, #200]	; (800ca94 <_strtod_l+0x5e4>)
 800c9cc:	9a07      	ldr	r2, [sp, #28]
 800c9ce:	18ff      	adds	r7, r7, r3
 800c9d0:	4b2f      	ldr	r3, [pc, #188]	; (800ca90 <_strtod_l+0x5e0>)
 800c9d2:	00d2      	lsls	r2, r2, #3
 800c9d4:	189d      	adds	r5, r3, r2
 800c9d6:	6828      	ldr	r0, [r5, #0]
 800c9d8:	6869      	ldr	r1, [r5, #4]
 800c9da:	0032      	movs	r2, r6
 800c9dc:	003b      	movs	r3, r7
 800c9de:	f7f4 fd2d 	bl	800143c <__aeabi_dmul>
 800c9e2:	4b26      	ldr	r3, [pc, #152]	; (800ca7c <_strtod_l+0x5cc>)
 800c9e4:	4a2c      	ldr	r2, [pc, #176]	; (800ca98 <_strtod_l+0x5e8>)
 800c9e6:	0006      	movs	r6, r0
 800c9e8:	400b      	ands	r3, r1
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d8be      	bhi.n	800c96c <_strtod_l+0x4bc>
 800c9ee:	4a2b      	ldr	r2, [pc, #172]	; (800ca9c <_strtod_l+0x5ec>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d913      	bls.n	800ca1c <_strtod_l+0x56c>
 800c9f4:	2601      	movs	r6, #1
 800c9f6:	4f2a      	ldr	r7, [pc, #168]	; (800caa0 <_strtod_l+0x5f0>)
 800c9f8:	4276      	negs	r6, r6
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	9307      	str	r3, [sp, #28]
 800c9fe:	e088      	b.n	800cb12 <_strtod_l+0x662>
 800ca00:	2201      	movs	r2, #1
 800ca02:	4214      	tst	r4, r2
 800ca04:	d004      	beq.n	800ca10 <_strtod_l+0x560>
 800ca06:	682a      	ldr	r2, [r5, #0]
 800ca08:	686b      	ldr	r3, [r5, #4]
 800ca0a:	f7f4 fd17 	bl	800143c <__aeabi_dmul>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	9a07      	ldr	r2, [sp, #28]
 800ca12:	1064      	asrs	r4, r4, #1
 800ca14:	3201      	adds	r2, #1
 800ca16:	9207      	str	r2, [sp, #28]
 800ca18:	3508      	adds	r5, #8
 800ca1a:	e7d0      	b.n	800c9be <_strtod_l+0x50e>
 800ca1c:	23d4      	movs	r3, #212	; 0xd4
 800ca1e:	049b      	lsls	r3, r3, #18
 800ca20:	18cf      	adds	r7, r1, r3
 800ca22:	e7ea      	b.n	800c9fa <_strtod_l+0x54a>
 800ca24:	2c00      	cmp	r4, #0
 800ca26:	d0e8      	beq.n	800c9fa <_strtod_l+0x54a>
 800ca28:	4264      	negs	r4, r4
 800ca2a:	230f      	movs	r3, #15
 800ca2c:	0022      	movs	r2, r4
 800ca2e:	401a      	ands	r2, r3
 800ca30:	421c      	tst	r4, r3
 800ca32:	d00a      	beq.n	800ca4a <_strtod_l+0x59a>
 800ca34:	4b15      	ldr	r3, [pc, #84]	; (800ca8c <_strtod_l+0x5dc>)
 800ca36:	00d2      	lsls	r2, r2, #3
 800ca38:	189b      	adds	r3, r3, r2
 800ca3a:	0030      	movs	r0, r6
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	0039      	movs	r1, r7
 800ca42:	f7f4 f901 	bl	8000c48 <__aeabi_ddiv>
 800ca46:	0006      	movs	r6, r0
 800ca48:	000f      	movs	r7, r1
 800ca4a:	1124      	asrs	r4, r4, #4
 800ca4c:	d0d5      	beq.n	800c9fa <_strtod_l+0x54a>
 800ca4e:	2c1f      	cmp	r4, #31
 800ca50:	dd28      	ble.n	800caa4 <_strtod_l+0x5f4>
 800ca52:	2300      	movs	r3, #0
 800ca54:	9305      	str	r3, [sp, #20]
 800ca56:	9306      	str	r3, [sp, #24]
 800ca58:	930d      	str	r3, [sp, #52]	; 0x34
 800ca5a:	9308      	str	r3, [sp, #32]
 800ca5c:	2322      	movs	r3, #34	; 0x22
 800ca5e:	9a04      	ldr	r2, [sp, #16]
 800ca60:	2600      	movs	r6, #0
 800ca62:	6013      	str	r3, [r2, #0]
 800ca64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca66:	2700      	movs	r7, #0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d18d      	bne.n	800c988 <_strtod_l+0x4d8>
 800ca6c:	e55b      	b.n	800c526 <_strtod_l+0x76>
 800ca6e:	46c0      	nop			; (mov r8, r8)
 800ca70:	00004e1f 	.word	0x00004e1f
 800ca74:	0800e61d 	.word	0x0800e61d
 800ca78:	0800e844 	.word	0x0800e844
 800ca7c:	7ff00000 	.word	0x7ff00000
 800ca80:	0800e615 	.word	0x0800e615
 800ca84:	0800e64c 	.word	0x0800e64c
 800ca88:	0800e9d5 	.word	0x0800e9d5
 800ca8c:	0800e758 	.word	0x0800e758
 800ca90:	0800e730 	.word	0x0800e730
 800ca94:	fcb00000 	.word	0xfcb00000
 800ca98:	7ca00000 	.word	0x7ca00000
 800ca9c:	7c900000 	.word	0x7c900000
 800caa0:	7fefffff 	.word	0x7fefffff
 800caa4:	2310      	movs	r3, #16
 800caa6:	0022      	movs	r2, r4
 800caa8:	401a      	ands	r2, r3
 800caaa:	9207      	str	r2, [sp, #28]
 800caac:	421c      	tst	r4, r3
 800caae:	d001      	beq.n	800cab4 <_strtod_l+0x604>
 800cab0:	335a      	adds	r3, #90	; 0x5a
 800cab2:	9307      	str	r3, [sp, #28]
 800cab4:	0030      	movs	r0, r6
 800cab6:	0039      	movs	r1, r7
 800cab8:	2300      	movs	r3, #0
 800caba:	4dc4      	ldr	r5, [pc, #784]	; (800cdcc <_strtod_l+0x91c>)
 800cabc:	2201      	movs	r2, #1
 800cabe:	4214      	tst	r4, r2
 800cac0:	d004      	beq.n	800cacc <_strtod_l+0x61c>
 800cac2:	682a      	ldr	r2, [r5, #0]
 800cac4:	686b      	ldr	r3, [r5, #4]
 800cac6:	f7f4 fcb9 	bl	800143c <__aeabi_dmul>
 800caca:	2301      	movs	r3, #1
 800cacc:	1064      	asrs	r4, r4, #1
 800cace:	3508      	adds	r5, #8
 800cad0:	2c00      	cmp	r4, #0
 800cad2:	d1f3      	bne.n	800cabc <_strtod_l+0x60c>
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <_strtod_l+0x62c>
 800cad8:	0006      	movs	r6, r0
 800cada:	000f      	movs	r7, r1
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00f      	beq.n	800cb02 <_strtod_l+0x652>
 800cae2:	236b      	movs	r3, #107	; 0x6b
 800cae4:	007a      	lsls	r2, r7, #1
 800cae6:	0d52      	lsrs	r2, r2, #21
 800cae8:	0039      	movs	r1, r7
 800caea:	1a9b      	subs	r3, r3, r2
 800caec:	2b00      	cmp	r3, #0
 800caee:	dd08      	ble.n	800cb02 <_strtod_l+0x652>
 800caf0:	2b1f      	cmp	r3, #31
 800caf2:	dc00      	bgt.n	800caf6 <_strtod_l+0x646>
 800caf4:	e121      	b.n	800cd3a <_strtod_l+0x88a>
 800caf6:	2600      	movs	r6, #0
 800caf8:	2b34      	cmp	r3, #52	; 0x34
 800cafa:	dc00      	bgt.n	800cafe <_strtod_l+0x64e>
 800cafc:	e116      	b.n	800cd2c <_strtod_l+0x87c>
 800cafe:	27dc      	movs	r7, #220	; 0xdc
 800cb00:	04bf      	lsls	r7, r7, #18
 800cb02:	2200      	movs	r2, #0
 800cb04:	2300      	movs	r3, #0
 800cb06:	0030      	movs	r0, r6
 800cb08:	0039      	movs	r1, r7
 800cb0a:	f7f3 fc9f 	bl	800044c <__aeabi_dcmpeq>
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d19f      	bne.n	800ca52 <_strtod_l+0x5a2>
 800cb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb14:	9a08      	ldr	r2, [sp, #32]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cb1a:	9b05      	ldr	r3, [sp, #20]
 800cb1c:	9804      	ldr	r0, [sp, #16]
 800cb1e:	f7ff f89f 	bl	800bc60 <__s2b>
 800cb22:	900d      	str	r0, [sp, #52]	; 0x34
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d100      	bne.n	800cb2a <_strtod_l+0x67a>
 800cb28:	e720      	b.n	800c96c <_strtod_l+0x4bc>
 800cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2c:	9906      	ldr	r1, [sp, #24]
 800cb2e:	17da      	asrs	r2, r3, #31
 800cb30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb32:	1a5b      	subs	r3, r3, r1
 800cb34:	401a      	ands	r2, r3
 800cb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb38:	9215      	str	r2, [sp, #84]	; 0x54
 800cb3a:	43db      	mvns	r3, r3
 800cb3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb3e:	17db      	asrs	r3, r3, #31
 800cb40:	401a      	ands	r2, r3
 800cb42:	2300      	movs	r3, #0
 800cb44:	9218      	str	r2, [sp, #96]	; 0x60
 800cb46:	9305      	str	r3, [sp, #20]
 800cb48:	9306      	str	r3, [sp, #24]
 800cb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb4c:	9804      	ldr	r0, [sp, #16]
 800cb4e:	6859      	ldr	r1, [r3, #4]
 800cb50:	f7fe ffda 	bl	800bb08 <_Balloc>
 800cb54:	9008      	str	r0, [sp, #32]
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d100      	bne.n	800cb5c <_strtod_l+0x6ac>
 800cb5a:	e70c      	b.n	800c976 <_strtod_l+0x4c6>
 800cb5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb5e:	300c      	adds	r0, #12
 800cb60:	0019      	movs	r1, r3
 800cb62:	691a      	ldr	r2, [r3, #16]
 800cb64:	310c      	adds	r1, #12
 800cb66:	3202      	adds	r2, #2
 800cb68:	0092      	lsls	r2, r2, #2
 800cb6a:	f7fe f819 	bl	800aba0 <memcpy>
 800cb6e:	ab1e      	add	r3, sp, #120	; 0x78
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	ab1d      	add	r3, sp, #116	; 0x74
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	0032      	movs	r2, r6
 800cb78:	003b      	movs	r3, r7
 800cb7a:	9804      	ldr	r0, [sp, #16]
 800cb7c:	9610      	str	r6, [sp, #64]	; 0x40
 800cb7e:	9711      	str	r7, [sp, #68]	; 0x44
 800cb80:	f7ff fbb0 	bl	800c2e4 <__d2b>
 800cb84:	901c      	str	r0, [sp, #112]	; 0x70
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d100      	bne.n	800cb8c <_strtod_l+0x6dc>
 800cb8a:	e6f4      	b.n	800c976 <_strtod_l+0x4c6>
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	9804      	ldr	r0, [sp, #16]
 800cb90:	f7ff f8fa 	bl	800bd88 <__i2b>
 800cb94:	9006      	str	r0, [sp, #24]
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d100      	bne.n	800cb9c <_strtod_l+0x6ec>
 800cb9a:	e6ec      	b.n	800c976 <_strtod_l+0x4c6>
 800cb9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cba0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cba2:	1ad4      	subs	r4, r2, r3
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	db01      	blt.n	800cbac <_strtod_l+0x6fc>
 800cba8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cbaa:	195d      	adds	r5, r3, r5
 800cbac:	9907      	ldr	r1, [sp, #28]
 800cbae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cbb0:	1a5b      	subs	r3, r3, r1
 800cbb2:	2136      	movs	r1, #54	; 0x36
 800cbb4:	189b      	adds	r3, r3, r2
 800cbb6:	1a8a      	subs	r2, r1, r2
 800cbb8:	4985      	ldr	r1, [pc, #532]	; (800cdd0 <_strtod_l+0x920>)
 800cbba:	2001      	movs	r0, #1
 800cbbc:	468c      	mov	ip, r1
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	9114      	str	r1, [sp, #80]	; 0x50
 800cbc4:	9012      	str	r0, [sp, #72]	; 0x48
 800cbc6:	4563      	cmp	r3, ip
 800cbc8:	da07      	bge.n	800cbda <_strtod_l+0x72a>
 800cbca:	4661      	mov	r1, ip
 800cbcc:	1ac9      	subs	r1, r1, r3
 800cbce:	1a52      	subs	r2, r2, r1
 800cbd0:	291f      	cmp	r1, #31
 800cbd2:	dd00      	ble.n	800cbd6 <_strtod_l+0x726>
 800cbd4:	e0b6      	b.n	800cd44 <_strtod_l+0x894>
 800cbd6:	4088      	lsls	r0, r1
 800cbd8:	9012      	str	r0, [sp, #72]	; 0x48
 800cbda:	18ab      	adds	r3, r5, r2
 800cbdc:	930c      	str	r3, [sp, #48]	; 0x30
 800cbde:	18a4      	adds	r4, r4, r2
 800cbe0:	9b07      	ldr	r3, [sp, #28]
 800cbe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbe4:	191c      	adds	r4, r3, r4
 800cbe6:	002b      	movs	r3, r5
 800cbe8:	4295      	cmp	r5, r2
 800cbea:	dd00      	ble.n	800cbee <_strtod_l+0x73e>
 800cbec:	0013      	movs	r3, r2
 800cbee:	42a3      	cmp	r3, r4
 800cbf0:	dd00      	ble.n	800cbf4 <_strtod_l+0x744>
 800cbf2:	0023      	movs	r3, r4
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dd04      	ble.n	800cc02 <_strtod_l+0x752>
 800cbf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbfa:	1ae4      	subs	r4, r4, r3
 800cbfc:	1ad2      	subs	r2, r2, r3
 800cbfe:	920c      	str	r2, [sp, #48]	; 0x30
 800cc00:	1aed      	subs	r5, r5, r3
 800cc02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dd17      	ble.n	800cc38 <_strtod_l+0x788>
 800cc08:	001a      	movs	r2, r3
 800cc0a:	9906      	ldr	r1, [sp, #24]
 800cc0c:	9804      	ldr	r0, [sp, #16]
 800cc0e:	f7ff f983 	bl	800bf18 <__pow5mult>
 800cc12:	9006      	str	r0, [sp, #24]
 800cc14:	2800      	cmp	r0, #0
 800cc16:	d100      	bne.n	800cc1a <_strtod_l+0x76a>
 800cc18:	e6ad      	b.n	800c976 <_strtod_l+0x4c6>
 800cc1a:	0001      	movs	r1, r0
 800cc1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cc1e:	9804      	ldr	r0, [sp, #16]
 800cc20:	f7ff f8ca 	bl	800bdb8 <__multiply>
 800cc24:	900e      	str	r0, [sp, #56]	; 0x38
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d100      	bne.n	800cc2c <_strtod_l+0x77c>
 800cc2a:	e6a4      	b.n	800c976 <_strtod_l+0x4c6>
 800cc2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc2e:	9804      	ldr	r0, [sp, #16]
 800cc30:	f7fe ffae 	bl	800bb90 <_Bfree>
 800cc34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc36:	931c      	str	r3, [sp, #112]	; 0x70
 800cc38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dd00      	ble.n	800cc40 <_strtod_l+0x790>
 800cc3e:	e087      	b.n	800cd50 <_strtod_l+0x8a0>
 800cc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	dd08      	ble.n	800cc58 <_strtod_l+0x7a8>
 800cc46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc48:	9908      	ldr	r1, [sp, #32]
 800cc4a:	9804      	ldr	r0, [sp, #16]
 800cc4c:	f7ff f964 	bl	800bf18 <__pow5mult>
 800cc50:	9008      	str	r0, [sp, #32]
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d100      	bne.n	800cc58 <_strtod_l+0x7a8>
 800cc56:	e68e      	b.n	800c976 <_strtod_l+0x4c6>
 800cc58:	2c00      	cmp	r4, #0
 800cc5a:	dd08      	ble.n	800cc6e <_strtod_l+0x7be>
 800cc5c:	0022      	movs	r2, r4
 800cc5e:	9908      	ldr	r1, [sp, #32]
 800cc60:	9804      	ldr	r0, [sp, #16]
 800cc62:	f7ff f9b5 	bl	800bfd0 <__lshift>
 800cc66:	9008      	str	r0, [sp, #32]
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d100      	bne.n	800cc6e <_strtod_l+0x7be>
 800cc6c:	e683      	b.n	800c976 <_strtod_l+0x4c6>
 800cc6e:	2d00      	cmp	r5, #0
 800cc70:	dd08      	ble.n	800cc84 <_strtod_l+0x7d4>
 800cc72:	002a      	movs	r2, r5
 800cc74:	9906      	ldr	r1, [sp, #24]
 800cc76:	9804      	ldr	r0, [sp, #16]
 800cc78:	f7ff f9aa 	bl	800bfd0 <__lshift>
 800cc7c:	9006      	str	r0, [sp, #24]
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d100      	bne.n	800cc84 <_strtod_l+0x7d4>
 800cc82:	e678      	b.n	800c976 <_strtod_l+0x4c6>
 800cc84:	9a08      	ldr	r2, [sp, #32]
 800cc86:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc88:	9804      	ldr	r0, [sp, #16]
 800cc8a:	f7ff fa2b 	bl	800c0e4 <__mdiff>
 800cc8e:	9005      	str	r0, [sp, #20]
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d100      	bne.n	800cc96 <_strtod_l+0x7e6>
 800cc94:	e66f      	b.n	800c976 <_strtod_l+0x4c6>
 800cc96:	2200      	movs	r2, #0
 800cc98:	68c3      	ldr	r3, [r0, #12]
 800cc9a:	9906      	ldr	r1, [sp, #24]
 800cc9c:	60c2      	str	r2, [r0, #12]
 800cc9e:	930c      	str	r3, [sp, #48]	; 0x30
 800cca0:	f7ff fa04 	bl	800c0ac <__mcmp>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	da5d      	bge.n	800cd64 <_strtod_l+0x8b4>
 800cca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccaa:	4333      	orrs	r3, r6
 800ccac:	d000      	beq.n	800ccb0 <_strtod_l+0x800>
 800ccae:	e088      	b.n	800cdc2 <_strtod_l+0x912>
 800ccb0:	033b      	lsls	r3, r7, #12
 800ccb2:	d000      	beq.n	800ccb6 <_strtod_l+0x806>
 800ccb4:	e085      	b.n	800cdc2 <_strtod_l+0x912>
 800ccb6:	22d6      	movs	r2, #214	; 0xd6
 800ccb8:	4b46      	ldr	r3, [pc, #280]	; (800cdd4 <_strtod_l+0x924>)
 800ccba:	04d2      	lsls	r2, r2, #19
 800ccbc:	403b      	ands	r3, r7
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d97f      	bls.n	800cdc2 <_strtod_l+0x912>
 800ccc2:	9b05      	ldr	r3, [sp, #20]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d103      	bne.n	800ccd2 <_strtod_l+0x822>
 800ccca:	9b05      	ldr	r3, [sp, #20]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	dd77      	ble.n	800cdc2 <_strtod_l+0x912>
 800ccd2:	9905      	ldr	r1, [sp, #20]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	9804      	ldr	r0, [sp, #16]
 800ccd8:	f7ff f97a 	bl	800bfd0 <__lshift>
 800ccdc:	9906      	ldr	r1, [sp, #24]
 800ccde:	9005      	str	r0, [sp, #20]
 800cce0:	f7ff f9e4 	bl	800c0ac <__mcmp>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	dd6c      	ble.n	800cdc2 <_strtod_l+0x912>
 800cce8:	9907      	ldr	r1, [sp, #28]
 800ccea:	003b      	movs	r3, r7
 800ccec:	4a39      	ldr	r2, [pc, #228]	; (800cdd4 <_strtod_l+0x924>)
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	d100      	bne.n	800ccf4 <_strtod_l+0x844>
 800ccf2:	e094      	b.n	800ce1e <_strtod_l+0x96e>
 800ccf4:	0011      	movs	r1, r2
 800ccf6:	20d6      	movs	r0, #214	; 0xd6
 800ccf8:	4039      	ands	r1, r7
 800ccfa:	04c0      	lsls	r0, r0, #19
 800ccfc:	4281      	cmp	r1, r0
 800ccfe:	dd00      	ble.n	800cd02 <_strtod_l+0x852>
 800cd00:	e08d      	b.n	800ce1e <_strtod_l+0x96e>
 800cd02:	23dc      	movs	r3, #220	; 0xdc
 800cd04:	049b      	lsls	r3, r3, #18
 800cd06:	4299      	cmp	r1, r3
 800cd08:	dc00      	bgt.n	800cd0c <_strtod_l+0x85c>
 800cd0a:	e6a7      	b.n	800ca5c <_strtod_l+0x5ac>
 800cd0c:	0030      	movs	r0, r6
 800cd0e:	0039      	movs	r1, r7
 800cd10:	4b31      	ldr	r3, [pc, #196]	; (800cdd8 <_strtod_l+0x928>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	f7f4 fb92 	bl	800143c <__aeabi_dmul>
 800cd18:	4b2e      	ldr	r3, [pc, #184]	; (800cdd4 <_strtod_l+0x924>)
 800cd1a:	0006      	movs	r6, r0
 800cd1c:	000f      	movs	r7, r1
 800cd1e:	420b      	tst	r3, r1
 800cd20:	d000      	beq.n	800cd24 <_strtod_l+0x874>
 800cd22:	e631      	b.n	800c988 <_strtod_l+0x4d8>
 800cd24:	2322      	movs	r3, #34	; 0x22
 800cd26:	9a04      	ldr	r2, [sp, #16]
 800cd28:	6013      	str	r3, [r2, #0]
 800cd2a:	e62d      	b.n	800c988 <_strtod_l+0x4d8>
 800cd2c:	234b      	movs	r3, #75	; 0x4b
 800cd2e:	1a9a      	subs	r2, r3, r2
 800cd30:	3b4c      	subs	r3, #76	; 0x4c
 800cd32:	4093      	lsls	r3, r2
 800cd34:	4019      	ands	r1, r3
 800cd36:	000f      	movs	r7, r1
 800cd38:	e6e3      	b.n	800cb02 <_strtod_l+0x652>
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	4252      	negs	r2, r2
 800cd3e:	409a      	lsls	r2, r3
 800cd40:	4016      	ands	r6, r2
 800cd42:	e6de      	b.n	800cb02 <_strtod_l+0x652>
 800cd44:	4925      	ldr	r1, [pc, #148]	; (800cddc <_strtod_l+0x92c>)
 800cd46:	1acb      	subs	r3, r1, r3
 800cd48:	0001      	movs	r1, r0
 800cd4a:	4099      	lsls	r1, r3
 800cd4c:	9114      	str	r1, [sp, #80]	; 0x50
 800cd4e:	e743      	b.n	800cbd8 <_strtod_l+0x728>
 800cd50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd52:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd54:	9804      	ldr	r0, [sp, #16]
 800cd56:	f7ff f93b 	bl	800bfd0 <__lshift>
 800cd5a:	901c      	str	r0, [sp, #112]	; 0x70
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d000      	beq.n	800cd62 <_strtod_l+0x8b2>
 800cd60:	e76e      	b.n	800cc40 <_strtod_l+0x790>
 800cd62:	e608      	b.n	800c976 <_strtod_l+0x4c6>
 800cd64:	970e      	str	r7, [sp, #56]	; 0x38
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d177      	bne.n	800ce5a <_strtod_l+0x9aa>
 800cd6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd6c:	033b      	lsls	r3, r7, #12
 800cd6e:	0b1b      	lsrs	r3, r3, #12
 800cd70:	2a00      	cmp	r2, #0
 800cd72:	d039      	beq.n	800cde8 <_strtod_l+0x938>
 800cd74:	4a1a      	ldr	r2, [pc, #104]	; (800cde0 <_strtod_l+0x930>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d139      	bne.n	800cdee <_strtod_l+0x93e>
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	9b07      	ldr	r3, [sp, #28]
 800cd7e:	4249      	negs	r1, r1
 800cd80:	0032      	movs	r2, r6
 800cd82:	0008      	movs	r0, r1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00b      	beq.n	800cda0 <_strtod_l+0x8f0>
 800cd88:	24d4      	movs	r4, #212	; 0xd4
 800cd8a:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <_strtod_l+0x924>)
 800cd8c:	0008      	movs	r0, r1
 800cd8e:	403b      	ands	r3, r7
 800cd90:	04e4      	lsls	r4, r4, #19
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	d804      	bhi.n	800cda0 <_strtod_l+0x8f0>
 800cd96:	306c      	adds	r0, #108	; 0x6c
 800cd98:	0d1b      	lsrs	r3, r3, #20
 800cd9a:	1ac3      	subs	r3, r0, r3
 800cd9c:	4099      	lsls	r1, r3
 800cd9e:	0008      	movs	r0, r1
 800cda0:	4282      	cmp	r2, r0
 800cda2:	d124      	bne.n	800cdee <_strtod_l+0x93e>
 800cda4:	4b0f      	ldr	r3, [pc, #60]	; (800cde4 <_strtod_l+0x934>)
 800cda6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cda8:	4299      	cmp	r1, r3
 800cdaa:	d102      	bne.n	800cdb2 <_strtod_l+0x902>
 800cdac:	3201      	adds	r2, #1
 800cdae:	d100      	bne.n	800cdb2 <_strtod_l+0x902>
 800cdb0:	e5e1      	b.n	800c976 <_strtod_l+0x4c6>
 800cdb2:	4b08      	ldr	r3, [pc, #32]	; (800cdd4 <_strtod_l+0x924>)
 800cdb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdb6:	2600      	movs	r6, #0
 800cdb8:	401a      	ands	r2, r3
 800cdba:	0013      	movs	r3, r2
 800cdbc:	2280      	movs	r2, #128	; 0x80
 800cdbe:	0352      	lsls	r2, r2, #13
 800cdc0:	189f      	adds	r7, r3, r2
 800cdc2:	9b07      	ldr	r3, [sp, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1a1      	bne.n	800cd0c <_strtod_l+0x85c>
 800cdc8:	e5de      	b.n	800c988 <_strtod_l+0x4d8>
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	0800e858 	.word	0x0800e858
 800cdd0:	fffffc02 	.word	0xfffffc02
 800cdd4:	7ff00000 	.word	0x7ff00000
 800cdd8:	39500000 	.word	0x39500000
 800cddc:	fffffbe2 	.word	0xfffffbe2
 800cde0:	000fffff 	.word	0x000fffff
 800cde4:	7fefffff 	.word	0x7fefffff
 800cde8:	4333      	orrs	r3, r6
 800cdea:	d100      	bne.n	800cdee <_strtod_l+0x93e>
 800cdec:	e77c      	b.n	800cce8 <_strtod_l+0x838>
 800cdee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d01d      	beq.n	800ce30 <_strtod_l+0x980>
 800cdf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdf8:	4213      	tst	r3, r2
 800cdfa:	d0e2      	beq.n	800cdc2 <_strtod_l+0x912>
 800cdfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdfe:	0030      	movs	r0, r6
 800ce00:	0039      	movs	r1, r7
 800ce02:	9a07      	ldr	r2, [sp, #28]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d017      	beq.n	800ce38 <_strtod_l+0x988>
 800ce08:	f7ff fb3a 	bl	800c480 <sulp>
 800ce0c:	0002      	movs	r2, r0
 800ce0e:	000b      	movs	r3, r1
 800ce10:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce12:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce14:	f7f3 fbb8 	bl	8000588 <__aeabi_dadd>
 800ce18:	0006      	movs	r6, r0
 800ce1a:	000f      	movs	r7, r1
 800ce1c:	e7d1      	b.n	800cdc2 <_strtod_l+0x912>
 800ce1e:	2601      	movs	r6, #1
 800ce20:	4013      	ands	r3, r2
 800ce22:	4a98      	ldr	r2, [pc, #608]	; (800d084 <_strtod_l+0xbd4>)
 800ce24:	4276      	negs	r6, r6
 800ce26:	189b      	adds	r3, r3, r2
 800ce28:	4a97      	ldr	r2, [pc, #604]	; (800d088 <_strtod_l+0xbd8>)
 800ce2a:	431a      	orrs	r2, r3
 800ce2c:	0017      	movs	r7, r2
 800ce2e:	e7c8      	b.n	800cdc2 <_strtod_l+0x912>
 800ce30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce32:	4233      	tst	r3, r6
 800ce34:	d0c5      	beq.n	800cdc2 <_strtod_l+0x912>
 800ce36:	e7e1      	b.n	800cdfc <_strtod_l+0x94c>
 800ce38:	f7ff fb22 	bl	800c480 <sulp>
 800ce3c:	0002      	movs	r2, r0
 800ce3e:	000b      	movs	r3, r1
 800ce40:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce42:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce44:	f7f4 fdbc 	bl	80019c0 <__aeabi_dsub>
 800ce48:	2200      	movs	r2, #0
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	0006      	movs	r6, r0
 800ce4e:	000f      	movs	r7, r1
 800ce50:	f7f3 fafc 	bl	800044c <__aeabi_dcmpeq>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d0b4      	beq.n	800cdc2 <_strtod_l+0x912>
 800ce58:	e600      	b.n	800ca5c <_strtod_l+0x5ac>
 800ce5a:	9906      	ldr	r1, [sp, #24]
 800ce5c:	9805      	ldr	r0, [sp, #20]
 800ce5e:	f7ff faa1 	bl	800c3a4 <__ratio>
 800ce62:	2380      	movs	r3, #128	; 0x80
 800ce64:	2200      	movs	r2, #0
 800ce66:	05db      	lsls	r3, r3, #23
 800ce68:	0004      	movs	r4, r0
 800ce6a:	000d      	movs	r5, r1
 800ce6c:	f7f3 fafe 	bl	800046c <__aeabi_dcmple>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d06d      	beq.n	800cf50 <_strtod_l+0xaa0>
 800ce74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d000      	beq.n	800ce7c <_strtod_l+0x9cc>
 800ce7a:	e07e      	b.n	800cf7a <_strtod_l+0xaca>
 800ce7c:	2e00      	cmp	r6, #0
 800ce7e:	d158      	bne.n	800cf32 <_strtod_l+0xa82>
 800ce80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce82:	031b      	lsls	r3, r3, #12
 800ce84:	d000      	beq.n	800ce88 <_strtod_l+0x9d8>
 800ce86:	e07f      	b.n	800cf88 <_strtod_l+0xad8>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	0020      	movs	r0, r4
 800ce8c:	0029      	movs	r1, r5
 800ce8e:	4b7f      	ldr	r3, [pc, #508]	; (800d08c <_strtod_l+0xbdc>)
 800ce90:	f7f3 fae2 	bl	8000458 <__aeabi_dcmplt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d158      	bne.n	800cf4a <_strtod_l+0xa9a>
 800ce98:	0020      	movs	r0, r4
 800ce9a:	0029      	movs	r1, r5
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4b7c      	ldr	r3, [pc, #496]	; (800d090 <_strtod_l+0xbe0>)
 800cea0:	f7f4 facc 	bl	800143c <__aeabi_dmul>
 800cea4:	0004      	movs	r4, r0
 800cea6:	000d      	movs	r5, r1
 800cea8:	2380      	movs	r3, #128	; 0x80
 800ceaa:	061b      	lsls	r3, r3, #24
 800ceac:	940a      	str	r4, [sp, #40]	; 0x28
 800ceae:	18eb      	adds	r3, r5, r3
 800ceb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb6:	9212      	str	r2, [sp, #72]	; 0x48
 800ceb8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ceba:	4a76      	ldr	r2, [pc, #472]	; (800d094 <_strtod_l+0xbe4>)
 800cebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cebe:	4013      	ands	r3, r2
 800cec0:	9314      	str	r3, [sp, #80]	; 0x50
 800cec2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cec4:	4b74      	ldr	r3, [pc, #464]	; (800d098 <_strtod_l+0xbe8>)
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d000      	beq.n	800cecc <_strtod_l+0xa1c>
 800ceca:	e091      	b.n	800cff0 <_strtod_l+0xb40>
 800cecc:	4a73      	ldr	r2, [pc, #460]	; (800d09c <_strtod_l+0xbec>)
 800cece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ced0:	4694      	mov	ip, r2
 800ced2:	4463      	add	r3, ip
 800ced4:	001f      	movs	r7, r3
 800ced6:	0030      	movs	r0, r6
 800ced8:	0019      	movs	r1, r3
 800ceda:	f7ff f99b 	bl	800c214 <__ulp>
 800cede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cee2:	f7f4 faab 	bl	800143c <__aeabi_dmul>
 800cee6:	0032      	movs	r2, r6
 800cee8:	003b      	movs	r3, r7
 800ceea:	f7f3 fb4d 	bl	8000588 <__aeabi_dadd>
 800ceee:	4a69      	ldr	r2, [pc, #420]	; (800d094 <_strtod_l+0xbe4>)
 800cef0:	4b6b      	ldr	r3, [pc, #428]	; (800d0a0 <_strtod_l+0xbf0>)
 800cef2:	0006      	movs	r6, r0
 800cef4:	400a      	ands	r2, r1
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d949      	bls.n	800cf8e <_strtod_l+0xade>
 800cefa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cefc:	4b69      	ldr	r3, [pc, #420]	; (800d0a4 <_strtod_l+0xbf4>)
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d103      	bne.n	800cf0a <_strtod_l+0xa5a>
 800cf02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf04:	3301      	adds	r3, #1
 800cf06:	d100      	bne.n	800cf0a <_strtod_l+0xa5a>
 800cf08:	e535      	b.n	800c976 <_strtod_l+0x4c6>
 800cf0a:	2601      	movs	r6, #1
 800cf0c:	4f65      	ldr	r7, [pc, #404]	; (800d0a4 <_strtod_l+0xbf4>)
 800cf0e:	4276      	negs	r6, r6
 800cf10:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf12:	9804      	ldr	r0, [sp, #16]
 800cf14:	f7fe fe3c 	bl	800bb90 <_Bfree>
 800cf18:	9908      	ldr	r1, [sp, #32]
 800cf1a:	9804      	ldr	r0, [sp, #16]
 800cf1c:	f7fe fe38 	bl	800bb90 <_Bfree>
 800cf20:	9906      	ldr	r1, [sp, #24]
 800cf22:	9804      	ldr	r0, [sp, #16]
 800cf24:	f7fe fe34 	bl	800bb90 <_Bfree>
 800cf28:	9905      	ldr	r1, [sp, #20]
 800cf2a:	9804      	ldr	r0, [sp, #16]
 800cf2c:	f7fe fe30 	bl	800bb90 <_Bfree>
 800cf30:	e60b      	b.n	800cb4a <_strtod_l+0x69a>
 800cf32:	2e01      	cmp	r6, #1
 800cf34:	d103      	bne.n	800cf3e <_strtod_l+0xa8e>
 800cf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d100      	bne.n	800cf3e <_strtod_l+0xa8e>
 800cf3c:	e58e      	b.n	800ca5c <_strtod_l+0x5ac>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	4c59      	ldr	r4, [pc, #356]	; (800d0a8 <_strtod_l+0xbf8>)
 800cf42:	930a      	str	r3, [sp, #40]	; 0x28
 800cf44:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf48:	e01c      	b.n	800cf84 <_strtod_l+0xad4>
 800cf4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf4c:	4d50      	ldr	r5, [pc, #320]	; (800d090 <_strtod_l+0xbe0>)
 800cf4e:	e7ab      	b.n	800cea8 <_strtod_l+0x9f8>
 800cf50:	2200      	movs	r2, #0
 800cf52:	0020      	movs	r0, r4
 800cf54:	0029      	movs	r1, r5
 800cf56:	4b4e      	ldr	r3, [pc, #312]	; (800d090 <_strtod_l+0xbe0>)
 800cf58:	f7f4 fa70 	bl	800143c <__aeabi_dmul>
 800cf5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf5e:	0004      	movs	r4, r0
 800cf60:	000b      	movs	r3, r1
 800cf62:	000d      	movs	r5, r1
 800cf64:	2a00      	cmp	r2, #0
 800cf66:	d104      	bne.n	800cf72 <_strtod_l+0xac2>
 800cf68:	2280      	movs	r2, #128	; 0x80
 800cf6a:	0612      	lsls	r2, r2, #24
 800cf6c:	900a      	str	r0, [sp, #40]	; 0x28
 800cf6e:	188b      	adds	r3, r1, r2
 800cf70:	e79e      	b.n	800ceb0 <_strtod_l+0xa00>
 800cf72:	0002      	movs	r2, r0
 800cf74:	920a      	str	r2, [sp, #40]	; 0x28
 800cf76:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf78:	e79b      	b.n	800ceb2 <_strtod_l+0xa02>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	4c43      	ldr	r4, [pc, #268]	; (800d08c <_strtod_l+0xbdc>)
 800cf7e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf80:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf82:	2400      	movs	r4, #0
 800cf84:	4d41      	ldr	r5, [pc, #260]	; (800d08c <_strtod_l+0xbdc>)
 800cf86:	e794      	b.n	800ceb2 <_strtod_l+0xa02>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4c47      	ldr	r4, [pc, #284]	; (800d0a8 <_strtod_l+0xbf8>)
 800cf8c:	e7f7      	b.n	800cf7e <_strtod_l+0xace>
 800cf8e:	23d4      	movs	r3, #212	; 0xd4
 800cf90:	049b      	lsls	r3, r3, #18
 800cf92:	18cf      	adds	r7, r1, r3
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	970e      	str	r7, [sp, #56]	; 0x38
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1b9      	bne.n	800cf10 <_strtod_l+0xa60>
 800cf9c:	4b3d      	ldr	r3, [pc, #244]	; (800d094 <_strtod_l+0xbe4>)
 800cf9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfa0:	403b      	ands	r3, r7
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d1b4      	bne.n	800cf10 <_strtod_l+0xa60>
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	0029      	movs	r1, r5
 800cfaa:	f7f3 fa9b 	bl	80004e4 <__aeabi_d2lz>
 800cfae:	f7f3 fad5 	bl	800055c <__aeabi_l2d>
 800cfb2:	0002      	movs	r2, r0
 800cfb4:	000b      	movs	r3, r1
 800cfb6:	0020      	movs	r0, r4
 800cfb8:	0029      	movs	r1, r5
 800cfba:	f7f4 fd01 	bl	80019c0 <__aeabi_dsub>
 800cfbe:	033b      	lsls	r3, r7, #12
 800cfc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfc2:	0b1b      	lsrs	r3, r3, #12
 800cfc4:	4333      	orrs	r3, r6
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	0004      	movs	r4, r0
 800cfca:	000d      	movs	r5, r1
 800cfcc:	4a37      	ldr	r2, [pc, #220]	; (800d0ac <_strtod_l+0xbfc>)
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d054      	beq.n	800d07c <_strtod_l+0xbcc>
 800cfd2:	4b37      	ldr	r3, [pc, #220]	; (800d0b0 <_strtod_l+0xc00>)
 800cfd4:	f7f3 fa40 	bl	8000458 <__aeabi_dcmplt>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d000      	beq.n	800cfde <_strtod_l+0xb2e>
 800cfdc:	e4d4      	b.n	800c988 <_strtod_l+0x4d8>
 800cfde:	0020      	movs	r0, r4
 800cfe0:	0029      	movs	r1, r5
 800cfe2:	4a34      	ldr	r2, [pc, #208]	; (800d0b4 <_strtod_l+0xc04>)
 800cfe4:	4b2a      	ldr	r3, [pc, #168]	; (800d090 <_strtod_l+0xbe0>)
 800cfe6:	f7f3 fa4b 	bl	8000480 <__aeabi_dcmpgt>
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d090      	beq.n	800cf10 <_strtod_l+0xa60>
 800cfee:	e4cb      	b.n	800c988 <_strtod_l+0x4d8>
 800cff0:	9b07      	ldr	r3, [sp, #28]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d02b      	beq.n	800d04e <_strtod_l+0xb9e>
 800cff6:	23d4      	movs	r3, #212	; 0xd4
 800cff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cffa:	04db      	lsls	r3, r3, #19
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d826      	bhi.n	800d04e <_strtod_l+0xb9e>
 800d000:	0020      	movs	r0, r4
 800d002:	0029      	movs	r1, r5
 800d004:	4a2c      	ldr	r2, [pc, #176]	; (800d0b8 <_strtod_l+0xc08>)
 800d006:	4b2d      	ldr	r3, [pc, #180]	; (800d0bc <_strtod_l+0xc0c>)
 800d008:	f7f3 fa30 	bl	800046c <__aeabi_dcmple>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d017      	beq.n	800d040 <_strtod_l+0xb90>
 800d010:	0020      	movs	r0, r4
 800d012:	0029      	movs	r1, r5
 800d014:	f7f3 fa48 	bl	80004a8 <__aeabi_d2uiz>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d100      	bne.n	800d01e <_strtod_l+0xb6e>
 800d01c:	3001      	adds	r0, #1
 800d01e:	f7f5 f8d5 	bl	80021cc <__aeabi_ui2d>
 800d022:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d024:	0004      	movs	r4, r0
 800d026:	000b      	movs	r3, r1
 800d028:	000d      	movs	r5, r1
 800d02a:	2a00      	cmp	r2, #0
 800d02c:	d122      	bne.n	800d074 <_strtod_l+0xbc4>
 800d02e:	2280      	movs	r2, #128	; 0x80
 800d030:	0612      	lsls	r2, r2, #24
 800d032:	188b      	adds	r3, r1, r2
 800d034:	9016      	str	r0, [sp, #88]	; 0x58
 800d036:	9317      	str	r3, [sp, #92]	; 0x5c
 800d038:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d03a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d03c:	9212      	str	r2, [sp, #72]	; 0x48
 800d03e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d040:	22d6      	movs	r2, #214	; 0xd6
 800d042:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d044:	04d2      	lsls	r2, r2, #19
 800d046:	189b      	adds	r3, r3, r2
 800d048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d04a:	1a9b      	subs	r3, r3, r2
 800d04c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d04e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d050:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d052:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d054:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d056:	f7ff f8dd 	bl	800c214 <__ulp>
 800d05a:	0002      	movs	r2, r0
 800d05c:	000b      	movs	r3, r1
 800d05e:	0030      	movs	r0, r6
 800d060:	0039      	movs	r1, r7
 800d062:	f7f4 f9eb 	bl	800143c <__aeabi_dmul>
 800d066:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d06a:	f7f3 fa8d 	bl	8000588 <__aeabi_dadd>
 800d06e:	0006      	movs	r6, r0
 800d070:	000f      	movs	r7, r1
 800d072:	e78f      	b.n	800cf94 <_strtod_l+0xae4>
 800d074:	0002      	movs	r2, r0
 800d076:	9216      	str	r2, [sp, #88]	; 0x58
 800d078:	9317      	str	r3, [sp, #92]	; 0x5c
 800d07a:	e7dd      	b.n	800d038 <_strtod_l+0xb88>
 800d07c:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <_strtod_l+0xc10>)
 800d07e:	f7f3 f9eb 	bl	8000458 <__aeabi_dcmplt>
 800d082:	e7b2      	b.n	800cfea <_strtod_l+0xb3a>
 800d084:	fff00000 	.word	0xfff00000
 800d088:	000fffff 	.word	0x000fffff
 800d08c:	3ff00000 	.word	0x3ff00000
 800d090:	3fe00000 	.word	0x3fe00000
 800d094:	7ff00000 	.word	0x7ff00000
 800d098:	7fe00000 	.word	0x7fe00000
 800d09c:	fcb00000 	.word	0xfcb00000
 800d0a0:	7c9fffff 	.word	0x7c9fffff
 800d0a4:	7fefffff 	.word	0x7fefffff
 800d0a8:	bff00000 	.word	0xbff00000
 800d0ac:	94a03595 	.word	0x94a03595
 800d0b0:	3fdfffff 	.word	0x3fdfffff
 800d0b4:	35afe535 	.word	0x35afe535
 800d0b8:	ffc00000 	.word	0xffc00000
 800d0bc:	41dfffff 	.word	0x41dfffff
 800d0c0:	3fcfffff 	.word	0x3fcfffff

0800d0c4 <_strtod_r>:
 800d0c4:	b510      	push	{r4, lr}
 800d0c6:	4b02      	ldr	r3, [pc, #8]	; (800d0d0 <_strtod_r+0xc>)
 800d0c8:	f7ff f9f2 	bl	800c4b0 <_strtod_l>
 800d0cc:	bd10      	pop	{r4, pc}
 800d0ce:	46c0      	nop			; (mov r8, r8)
 800d0d0:	2000006c 	.word	0x2000006c

0800d0d4 <_strtol_l.constprop.0>:
 800d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d6:	b087      	sub	sp, #28
 800d0d8:	001e      	movs	r6, r3
 800d0da:	9005      	str	r0, [sp, #20]
 800d0dc:	9101      	str	r1, [sp, #4]
 800d0de:	9202      	str	r2, [sp, #8]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d048      	beq.n	800d176 <_strtol_l.constprop.0+0xa2>
 800d0e4:	000b      	movs	r3, r1
 800d0e6:	2e24      	cmp	r6, #36	; 0x24
 800d0e8:	d845      	bhi.n	800d176 <_strtol_l.constprop.0+0xa2>
 800d0ea:	4a3b      	ldr	r2, [pc, #236]	; (800d1d8 <_strtol_l.constprop.0+0x104>)
 800d0ec:	2108      	movs	r1, #8
 800d0ee:	4694      	mov	ip, r2
 800d0f0:	001a      	movs	r2, r3
 800d0f2:	4660      	mov	r0, ip
 800d0f4:	7814      	ldrb	r4, [r2, #0]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	5d00      	ldrb	r0, [r0, r4]
 800d0fa:	001d      	movs	r5, r3
 800d0fc:	0007      	movs	r7, r0
 800d0fe:	400f      	ands	r7, r1
 800d100:	4208      	tst	r0, r1
 800d102:	d1f5      	bne.n	800d0f0 <_strtol_l.constprop.0+0x1c>
 800d104:	2c2d      	cmp	r4, #45	; 0x2d
 800d106:	d13d      	bne.n	800d184 <_strtol_l.constprop.0+0xb0>
 800d108:	2701      	movs	r7, #1
 800d10a:	781c      	ldrb	r4, [r3, #0]
 800d10c:	1c95      	adds	r5, r2, #2
 800d10e:	2e00      	cmp	r6, #0
 800d110:	d05e      	beq.n	800d1d0 <_strtol_l.constprop.0+0xfc>
 800d112:	2e10      	cmp	r6, #16
 800d114:	d109      	bne.n	800d12a <_strtol_l.constprop.0+0x56>
 800d116:	2c30      	cmp	r4, #48	; 0x30
 800d118:	d107      	bne.n	800d12a <_strtol_l.constprop.0+0x56>
 800d11a:	2220      	movs	r2, #32
 800d11c:	782b      	ldrb	r3, [r5, #0]
 800d11e:	4393      	bics	r3, r2
 800d120:	2b58      	cmp	r3, #88	; 0x58
 800d122:	d150      	bne.n	800d1c6 <_strtol_l.constprop.0+0xf2>
 800d124:	2610      	movs	r6, #16
 800d126:	786c      	ldrb	r4, [r5, #1]
 800d128:	3502      	adds	r5, #2
 800d12a:	4b2c      	ldr	r3, [pc, #176]	; (800d1dc <_strtol_l.constprop.0+0x108>)
 800d12c:	0031      	movs	r1, r6
 800d12e:	18fb      	adds	r3, r7, r3
 800d130:	0018      	movs	r0, r3
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	f7f3 f88a 	bl	800024c <__aeabi_uidivmod>
 800d138:	2200      	movs	r2, #0
 800d13a:	9104      	str	r1, [sp, #16]
 800d13c:	2101      	movs	r1, #1
 800d13e:	4684      	mov	ip, r0
 800d140:	0010      	movs	r0, r2
 800d142:	4249      	negs	r1, r1
 800d144:	0023      	movs	r3, r4
 800d146:	3b30      	subs	r3, #48	; 0x30
 800d148:	2b09      	cmp	r3, #9
 800d14a:	d903      	bls.n	800d154 <_strtol_l.constprop.0+0x80>
 800d14c:	3b11      	subs	r3, #17
 800d14e:	2b19      	cmp	r3, #25
 800d150:	d81d      	bhi.n	800d18e <_strtol_l.constprop.0+0xba>
 800d152:	330a      	adds	r3, #10
 800d154:	429e      	cmp	r6, r3
 800d156:	dd1e      	ble.n	800d196 <_strtol_l.constprop.0+0xc2>
 800d158:	1c54      	adds	r4, r2, #1
 800d15a:	d009      	beq.n	800d170 <_strtol_l.constprop.0+0x9c>
 800d15c:	000a      	movs	r2, r1
 800d15e:	4584      	cmp	ip, r0
 800d160:	d306      	bcc.n	800d170 <_strtol_l.constprop.0+0x9c>
 800d162:	d102      	bne.n	800d16a <_strtol_l.constprop.0+0x96>
 800d164:	9c04      	ldr	r4, [sp, #16]
 800d166:	429c      	cmp	r4, r3
 800d168:	db02      	blt.n	800d170 <_strtol_l.constprop.0+0x9c>
 800d16a:	2201      	movs	r2, #1
 800d16c:	4370      	muls	r0, r6
 800d16e:	1818      	adds	r0, r3, r0
 800d170:	782c      	ldrb	r4, [r5, #0]
 800d172:	3501      	adds	r5, #1
 800d174:	e7e6      	b.n	800d144 <_strtol_l.constprop.0+0x70>
 800d176:	f7fd fcdb 	bl	800ab30 <__errno>
 800d17a:	2316      	movs	r3, #22
 800d17c:	6003      	str	r3, [r0, #0]
 800d17e:	2000      	movs	r0, #0
 800d180:	b007      	add	sp, #28
 800d182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d184:	2c2b      	cmp	r4, #43	; 0x2b
 800d186:	d1c2      	bne.n	800d10e <_strtol_l.constprop.0+0x3a>
 800d188:	781c      	ldrb	r4, [r3, #0]
 800d18a:	1c95      	adds	r5, r2, #2
 800d18c:	e7bf      	b.n	800d10e <_strtol_l.constprop.0+0x3a>
 800d18e:	0023      	movs	r3, r4
 800d190:	3b61      	subs	r3, #97	; 0x61
 800d192:	2b19      	cmp	r3, #25
 800d194:	d9dd      	bls.n	800d152 <_strtol_l.constprop.0+0x7e>
 800d196:	1c53      	adds	r3, r2, #1
 800d198:	d109      	bne.n	800d1ae <_strtol_l.constprop.0+0xda>
 800d19a:	2322      	movs	r3, #34	; 0x22
 800d19c:	9a05      	ldr	r2, [sp, #20]
 800d19e:	9803      	ldr	r0, [sp, #12]
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	9b02      	ldr	r3, [sp, #8]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d0eb      	beq.n	800d180 <_strtol_l.constprop.0+0xac>
 800d1a8:	1e6b      	subs	r3, r5, #1
 800d1aa:	9301      	str	r3, [sp, #4]
 800d1ac:	e007      	b.n	800d1be <_strtol_l.constprop.0+0xea>
 800d1ae:	2f00      	cmp	r7, #0
 800d1b0:	d000      	beq.n	800d1b4 <_strtol_l.constprop.0+0xe0>
 800d1b2:	4240      	negs	r0, r0
 800d1b4:	9b02      	ldr	r3, [sp, #8]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d0e2      	beq.n	800d180 <_strtol_l.constprop.0+0xac>
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	d1f4      	bne.n	800d1a8 <_strtol_l.constprop.0+0xd4>
 800d1be:	9b02      	ldr	r3, [sp, #8]
 800d1c0:	9a01      	ldr	r2, [sp, #4]
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e7dc      	b.n	800d180 <_strtol_l.constprop.0+0xac>
 800d1c6:	2430      	movs	r4, #48	; 0x30
 800d1c8:	2e00      	cmp	r6, #0
 800d1ca:	d1ae      	bne.n	800d12a <_strtol_l.constprop.0+0x56>
 800d1cc:	3608      	adds	r6, #8
 800d1ce:	e7ac      	b.n	800d12a <_strtol_l.constprop.0+0x56>
 800d1d0:	2c30      	cmp	r4, #48	; 0x30
 800d1d2:	d0a2      	beq.n	800d11a <_strtol_l.constprop.0+0x46>
 800d1d4:	260a      	movs	r6, #10
 800d1d6:	e7a8      	b.n	800d12a <_strtol_l.constprop.0+0x56>
 800d1d8:	0800e881 	.word	0x0800e881
 800d1dc:	7fffffff 	.word	0x7fffffff

0800d1e0 <_strtol_r>:
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	f7ff ff77 	bl	800d0d4 <_strtol_l.constprop.0>
 800d1e6:	bd10      	pop	{r4, pc}

0800d1e8 <__ssputs_r>:
 800d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	9301      	str	r3, [sp, #4]
 800d1ee:	9203      	str	r2, [sp, #12]
 800d1f0:	688e      	ldr	r6, [r1, #8]
 800d1f2:	9a01      	ldr	r2, [sp, #4]
 800d1f4:	0007      	movs	r7, r0
 800d1f6:	000c      	movs	r4, r1
 800d1f8:	680b      	ldr	r3, [r1, #0]
 800d1fa:	4296      	cmp	r6, r2
 800d1fc:	d831      	bhi.n	800d262 <__ssputs_r+0x7a>
 800d1fe:	898a      	ldrh	r2, [r1, #12]
 800d200:	2190      	movs	r1, #144	; 0x90
 800d202:	00c9      	lsls	r1, r1, #3
 800d204:	420a      	tst	r2, r1
 800d206:	d029      	beq.n	800d25c <__ssputs_r+0x74>
 800d208:	2003      	movs	r0, #3
 800d20a:	6921      	ldr	r1, [r4, #16]
 800d20c:	1a5b      	subs	r3, r3, r1
 800d20e:	9302      	str	r3, [sp, #8]
 800d210:	6963      	ldr	r3, [r4, #20]
 800d212:	4343      	muls	r3, r0
 800d214:	0fdd      	lsrs	r5, r3, #31
 800d216:	18ed      	adds	r5, r5, r3
 800d218:	9b01      	ldr	r3, [sp, #4]
 800d21a:	9802      	ldr	r0, [sp, #8]
 800d21c:	3301      	adds	r3, #1
 800d21e:	181b      	adds	r3, r3, r0
 800d220:	106d      	asrs	r5, r5, #1
 800d222:	42ab      	cmp	r3, r5
 800d224:	d900      	bls.n	800d228 <__ssputs_r+0x40>
 800d226:	001d      	movs	r5, r3
 800d228:	0552      	lsls	r2, r2, #21
 800d22a:	d529      	bpl.n	800d280 <__ssputs_r+0x98>
 800d22c:	0029      	movs	r1, r5
 800d22e:	0038      	movs	r0, r7
 800d230:	f7fe fbd8 	bl	800b9e4 <_malloc_r>
 800d234:	1e06      	subs	r6, r0, #0
 800d236:	d02d      	beq.n	800d294 <__ssputs_r+0xac>
 800d238:	9a02      	ldr	r2, [sp, #8]
 800d23a:	6921      	ldr	r1, [r4, #16]
 800d23c:	f7fd fcb0 	bl	800aba0 <memcpy>
 800d240:	89a2      	ldrh	r2, [r4, #12]
 800d242:	4b19      	ldr	r3, [pc, #100]	; (800d2a8 <__ssputs_r+0xc0>)
 800d244:	401a      	ands	r2, r3
 800d246:	2380      	movs	r3, #128	; 0x80
 800d248:	4313      	orrs	r3, r2
 800d24a:	81a3      	strh	r3, [r4, #12]
 800d24c:	9b02      	ldr	r3, [sp, #8]
 800d24e:	6126      	str	r6, [r4, #16]
 800d250:	18f6      	adds	r6, r6, r3
 800d252:	6026      	str	r6, [r4, #0]
 800d254:	6165      	str	r5, [r4, #20]
 800d256:	9e01      	ldr	r6, [sp, #4]
 800d258:	1aed      	subs	r5, r5, r3
 800d25a:	60a5      	str	r5, [r4, #8]
 800d25c:	9b01      	ldr	r3, [sp, #4]
 800d25e:	429e      	cmp	r6, r3
 800d260:	d900      	bls.n	800d264 <__ssputs_r+0x7c>
 800d262:	9e01      	ldr	r6, [sp, #4]
 800d264:	0032      	movs	r2, r6
 800d266:	9903      	ldr	r1, [sp, #12]
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	f000 f9d4 	bl	800d616 <memmove>
 800d26e:	2000      	movs	r0, #0
 800d270:	68a3      	ldr	r3, [r4, #8]
 800d272:	1b9b      	subs	r3, r3, r6
 800d274:	60a3      	str	r3, [r4, #8]
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	199b      	adds	r3, r3, r6
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	b005      	add	sp, #20
 800d27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d280:	002a      	movs	r2, r5
 800d282:	0038      	movs	r0, r7
 800d284:	f000 fdbe 	bl	800de04 <_realloc_r>
 800d288:	1e06      	subs	r6, r0, #0
 800d28a:	d1df      	bne.n	800d24c <__ssputs_r+0x64>
 800d28c:	0038      	movs	r0, r7
 800d28e:	6921      	ldr	r1, [r4, #16]
 800d290:	f7fe fb32 	bl	800b8f8 <_free_r>
 800d294:	230c      	movs	r3, #12
 800d296:	2001      	movs	r0, #1
 800d298:	603b      	str	r3, [r7, #0]
 800d29a:	89a2      	ldrh	r2, [r4, #12]
 800d29c:	3334      	adds	r3, #52	; 0x34
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	81a3      	strh	r3, [r4, #12]
 800d2a2:	4240      	negs	r0, r0
 800d2a4:	e7ea      	b.n	800d27c <__ssputs_r+0x94>
 800d2a6:	46c0      	nop			; (mov r8, r8)
 800d2a8:	fffffb7f 	.word	0xfffffb7f

0800d2ac <_svfiprintf_r>:
 800d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ae:	b0a1      	sub	sp, #132	; 0x84
 800d2b0:	9003      	str	r0, [sp, #12]
 800d2b2:	001d      	movs	r5, r3
 800d2b4:	898b      	ldrh	r3, [r1, #12]
 800d2b6:	000f      	movs	r7, r1
 800d2b8:	0016      	movs	r6, r2
 800d2ba:	061b      	lsls	r3, r3, #24
 800d2bc:	d511      	bpl.n	800d2e2 <_svfiprintf_r+0x36>
 800d2be:	690b      	ldr	r3, [r1, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10e      	bne.n	800d2e2 <_svfiprintf_r+0x36>
 800d2c4:	2140      	movs	r1, #64	; 0x40
 800d2c6:	f7fe fb8d 	bl	800b9e4 <_malloc_r>
 800d2ca:	6038      	str	r0, [r7, #0]
 800d2cc:	6138      	str	r0, [r7, #16]
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d105      	bne.n	800d2de <_svfiprintf_r+0x32>
 800d2d2:	230c      	movs	r3, #12
 800d2d4:	9a03      	ldr	r2, [sp, #12]
 800d2d6:	3801      	subs	r0, #1
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	b021      	add	sp, #132	; 0x84
 800d2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2de:	2340      	movs	r3, #64	; 0x40
 800d2e0:	617b      	str	r3, [r7, #20]
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	ac08      	add	r4, sp, #32
 800d2e6:	6163      	str	r3, [r4, #20]
 800d2e8:	3320      	adds	r3, #32
 800d2ea:	7663      	strb	r3, [r4, #25]
 800d2ec:	3310      	adds	r3, #16
 800d2ee:	76a3      	strb	r3, [r4, #26]
 800d2f0:	9507      	str	r5, [sp, #28]
 800d2f2:	0035      	movs	r5, r6
 800d2f4:	782b      	ldrb	r3, [r5, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <_svfiprintf_r+0x52>
 800d2fa:	2b25      	cmp	r3, #37	; 0x25
 800d2fc:	d148      	bne.n	800d390 <_svfiprintf_r+0xe4>
 800d2fe:	1bab      	subs	r3, r5, r6
 800d300:	9305      	str	r3, [sp, #20]
 800d302:	42b5      	cmp	r5, r6
 800d304:	d00b      	beq.n	800d31e <_svfiprintf_r+0x72>
 800d306:	0032      	movs	r2, r6
 800d308:	0039      	movs	r1, r7
 800d30a:	9803      	ldr	r0, [sp, #12]
 800d30c:	f7ff ff6c 	bl	800d1e8 <__ssputs_r>
 800d310:	3001      	adds	r0, #1
 800d312:	d100      	bne.n	800d316 <_svfiprintf_r+0x6a>
 800d314:	e0af      	b.n	800d476 <_svfiprintf_r+0x1ca>
 800d316:	6963      	ldr	r3, [r4, #20]
 800d318:	9a05      	ldr	r2, [sp, #20]
 800d31a:	189b      	adds	r3, r3, r2
 800d31c:	6163      	str	r3, [r4, #20]
 800d31e:	782b      	ldrb	r3, [r5, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d100      	bne.n	800d326 <_svfiprintf_r+0x7a>
 800d324:	e0a7      	b.n	800d476 <_svfiprintf_r+0x1ca>
 800d326:	2201      	movs	r2, #1
 800d328:	2300      	movs	r3, #0
 800d32a:	4252      	negs	r2, r2
 800d32c:	6062      	str	r2, [r4, #4]
 800d32e:	a904      	add	r1, sp, #16
 800d330:	3254      	adds	r2, #84	; 0x54
 800d332:	1852      	adds	r2, r2, r1
 800d334:	1c6e      	adds	r6, r5, #1
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	60e3      	str	r3, [r4, #12]
 800d33a:	60a3      	str	r3, [r4, #8]
 800d33c:	7013      	strb	r3, [r2, #0]
 800d33e:	65a3      	str	r3, [r4, #88]	; 0x58
 800d340:	4b55      	ldr	r3, [pc, #340]	; (800d498 <_svfiprintf_r+0x1ec>)
 800d342:	2205      	movs	r2, #5
 800d344:	0018      	movs	r0, r3
 800d346:	7831      	ldrb	r1, [r6, #0]
 800d348:	9305      	str	r3, [sp, #20]
 800d34a:	f7fd fc1e 	bl	800ab8a <memchr>
 800d34e:	1c75      	adds	r5, r6, #1
 800d350:	2800      	cmp	r0, #0
 800d352:	d11f      	bne.n	800d394 <_svfiprintf_r+0xe8>
 800d354:	6822      	ldr	r2, [r4, #0]
 800d356:	06d3      	lsls	r3, r2, #27
 800d358:	d504      	bpl.n	800d364 <_svfiprintf_r+0xb8>
 800d35a:	2353      	movs	r3, #83	; 0x53
 800d35c:	a904      	add	r1, sp, #16
 800d35e:	185b      	adds	r3, r3, r1
 800d360:	2120      	movs	r1, #32
 800d362:	7019      	strb	r1, [r3, #0]
 800d364:	0713      	lsls	r3, r2, #28
 800d366:	d504      	bpl.n	800d372 <_svfiprintf_r+0xc6>
 800d368:	2353      	movs	r3, #83	; 0x53
 800d36a:	a904      	add	r1, sp, #16
 800d36c:	185b      	adds	r3, r3, r1
 800d36e:	212b      	movs	r1, #43	; 0x2b
 800d370:	7019      	strb	r1, [r3, #0]
 800d372:	7833      	ldrb	r3, [r6, #0]
 800d374:	2b2a      	cmp	r3, #42	; 0x2a
 800d376:	d016      	beq.n	800d3a6 <_svfiprintf_r+0xfa>
 800d378:	0035      	movs	r5, r6
 800d37a:	2100      	movs	r1, #0
 800d37c:	200a      	movs	r0, #10
 800d37e:	68e3      	ldr	r3, [r4, #12]
 800d380:	782a      	ldrb	r2, [r5, #0]
 800d382:	1c6e      	adds	r6, r5, #1
 800d384:	3a30      	subs	r2, #48	; 0x30
 800d386:	2a09      	cmp	r2, #9
 800d388:	d94e      	bls.n	800d428 <_svfiprintf_r+0x17c>
 800d38a:	2900      	cmp	r1, #0
 800d38c:	d111      	bne.n	800d3b2 <_svfiprintf_r+0x106>
 800d38e:	e017      	b.n	800d3c0 <_svfiprintf_r+0x114>
 800d390:	3501      	adds	r5, #1
 800d392:	e7af      	b.n	800d2f4 <_svfiprintf_r+0x48>
 800d394:	9b05      	ldr	r3, [sp, #20]
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	1ac0      	subs	r0, r0, r3
 800d39a:	2301      	movs	r3, #1
 800d39c:	4083      	lsls	r3, r0
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	002e      	movs	r6, r5
 800d3a2:	6023      	str	r3, [r4, #0]
 800d3a4:	e7cc      	b.n	800d340 <_svfiprintf_r+0x94>
 800d3a6:	9b07      	ldr	r3, [sp, #28]
 800d3a8:	1d19      	adds	r1, r3, #4
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	9107      	str	r1, [sp, #28]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	db01      	blt.n	800d3b6 <_svfiprintf_r+0x10a>
 800d3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3b4:	e004      	b.n	800d3c0 <_svfiprintf_r+0x114>
 800d3b6:	425b      	negs	r3, r3
 800d3b8:	60e3      	str	r3, [r4, #12]
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	6023      	str	r3, [r4, #0]
 800d3c0:	782b      	ldrb	r3, [r5, #0]
 800d3c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d3c4:	d10a      	bne.n	800d3dc <_svfiprintf_r+0x130>
 800d3c6:	786b      	ldrb	r3, [r5, #1]
 800d3c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ca:	d135      	bne.n	800d438 <_svfiprintf_r+0x18c>
 800d3cc:	9b07      	ldr	r3, [sp, #28]
 800d3ce:	3502      	adds	r5, #2
 800d3d0:	1d1a      	adds	r2, r3, #4
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	9207      	str	r2, [sp, #28]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	db2b      	blt.n	800d432 <_svfiprintf_r+0x186>
 800d3da:	9309      	str	r3, [sp, #36]	; 0x24
 800d3dc:	4e2f      	ldr	r6, [pc, #188]	; (800d49c <_svfiprintf_r+0x1f0>)
 800d3de:	2203      	movs	r2, #3
 800d3e0:	0030      	movs	r0, r6
 800d3e2:	7829      	ldrb	r1, [r5, #0]
 800d3e4:	f7fd fbd1 	bl	800ab8a <memchr>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d006      	beq.n	800d3fa <_svfiprintf_r+0x14e>
 800d3ec:	2340      	movs	r3, #64	; 0x40
 800d3ee:	1b80      	subs	r0, r0, r6
 800d3f0:	4083      	lsls	r3, r0
 800d3f2:	6822      	ldr	r2, [r4, #0]
 800d3f4:	3501      	adds	r5, #1
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	7829      	ldrb	r1, [r5, #0]
 800d3fc:	2206      	movs	r2, #6
 800d3fe:	4828      	ldr	r0, [pc, #160]	; (800d4a0 <_svfiprintf_r+0x1f4>)
 800d400:	1c6e      	adds	r6, r5, #1
 800d402:	7621      	strb	r1, [r4, #24]
 800d404:	f7fd fbc1 	bl	800ab8a <memchr>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d03c      	beq.n	800d486 <_svfiprintf_r+0x1da>
 800d40c:	4b25      	ldr	r3, [pc, #148]	; (800d4a4 <_svfiprintf_r+0x1f8>)
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d125      	bne.n	800d45e <_svfiprintf_r+0x1b2>
 800d412:	2207      	movs	r2, #7
 800d414:	9b07      	ldr	r3, [sp, #28]
 800d416:	3307      	adds	r3, #7
 800d418:	4393      	bics	r3, r2
 800d41a:	3308      	adds	r3, #8
 800d41c:	9307      	str	r3, [sp, #28]
 800d41e:	6963      	ldr	r3, [r4, #20]
 800d420:	9a04      	ldr	r2, [sp, #16]
 800d422:	189b      	adds	r3, r3, r2
 800d424:	6163      	str	r3, [r4, #20]
 800d426:	e764      	b.n	800d2f2 <_svfiprintf_r+0x46>
 800d428:	4343      	muls	r3, r0
 800d42a:	0035      	movs	r5, r6
 800d42c:	2101      	movs	r1, #1
 800d42e:	189b      	adds	r3, r3, r2
 800d430:	e7a6      	b.n	800d380 <_svfiprintf_r+0xd4>
 800d432:	2301      	movs	r3, #1
 800d434:	425b      	negs	r3, r3
 800d436:	e7d0      	b.n	800d3da <_svfiprintf_r+0x12e>
 800d438:	2300      	movs	r3, #0
 800d43a:	200a      	movs	r0, #10
 800d43c:	001a      	movs	r2, r3
 800d43e:	3501      	adds	r5, #1
 800d440:	6063      	str	r3, [r4, #4]
 800d442:	7829      	ldrb	r1, [r5, #0]
 800d444:	1c6e      	adds	r6, r5, #1
 800d446:	3930      	subs	r1, #48	; 0x30
 800d448:	2909      	cmp	r1, #9
 800d44a:	d903      	bls.n	800d454 <_svfiprintf_r+0x1a8>
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d0c5      	beq.n	800d3dc <_svfiprintf_r+0x130>
 800d450:	9209      	str	r2, [sp, #36]	; 0x24
 800d452:	e7c3      	b.n	800d3dc <_svfiprintf_r+0x130>
 800d454:	4342      	muls	r2, r0
 800d456:	0035      	movs	r5, r6
 800d458:	2301      	movs	r3, #1
 800d45a:	1852      	adds	r2, r2, r1
 800d45c:	e7f1      	b.n	800d442 <_svfiprintf_r+0x196>
 800d45e:	aa07      	add	r2, sp, #28
 800d460:	9200      	str	r2, [sp, #0]
 800d462:	0021      	movs	r1, r4
 800d464:	003a      	movs	r2, r7
 800d466:	4b10      	ldr	r3, [pc, #64]	; (800d4a8 <_svfiprintf_r+0x1fc>)
 800d468:	9803      	ldr	r0, [sp, #12]
 800d46a:	f7fc fb9b 	bl	8009ba4 <_printf_float>
 800d46e:	9004      	str	r0, [sp, #16]
 800d470:	9b04      	ldr	r3, [sp, #16]
 800d472:	3301      	adds	r3, #1
 800d474:	d1d3      	bne.n	800d41e <_svfiprintf_r+0x172>
 800d476:	89bb      	ldrh	r3, [r7, #12]
 800d478:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d47a:	065b      	lsls	r3, r3, #25
 800d47c:	d400      	bmi.n	800d480 <_svfiprintf_r+0x1d4>
 800d47e:	e72c      	b.n	800d2da <_svfiprintf_r+0x2e>
 800d480:	2001      	movs	r0, #1
 800d482:	4240      	negs	r0, r0
 800d484:	e729      	b.n	800d2da <_svfiprintf_r+0x2e>
 800d486:	aa07      	add	r2, sp, #28
 800d488:	9200      	str	r2, [sp, #0]
 800d48a:	0021      	movs	r1, r4
 800d48c:	003a      	movs	r2, r7
 800d48e:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <_svfiprintf_r+0x1fc>)
 800d490:	9803      	ldr	r0, [sp, #12]
 800d492:	f7fc fe4d 	bl	800a130 <_printf_i>
 800d496:	e7ea      	b.n	800d46e <_svfiprintf_r+0x1c2>
 800d498:	0800e981 	.word	0x0800e981
 800d49c:	0800e987 	.word	0x0800e987
 800d4a0:	0800e98b 	.word	0x0800e98b
 800d4a4:	08009ba5 	.word	0x08009ba5
 800d4a8:	0800d1e9 	.word	0x0800d1e9

0800d4ac <__sflush_r>:
 800d4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4ae:	898b      	ldrh	r3, [r1, #12]
 800d4b0:	0005      	movs	r5, r0
 800d4b2:	000c      	movs	r4, r1
 800d4b4:	071a      	lsls	r2, r3, #28
 800d4b6:	d45c      	bmi.n	800d572 <__sflush_r+0xc6>
 800d4b8:	684a      	ldr	r2, [r1, #4]
 800d4ba:	2a00      	cmp	r2, #0
 800d4bc:	dc04      	bgt.n	800d4c8 <__sflush_r+0x1c>
 800d4be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d4c0:	2a00      	cmp	r2, #0
 800d4c2:	dc01      	bgt.n	800d4c8 <__sflush_r+0x1c>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d4ca:	2f00      	cmp	r7, #0
 800d4cc:	d0fa      	beq.n	800d4c4 <__sflush_r+0x18>
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	2080      	movs	r0, #128	; 0x80
 800d4d2:	682e      	ldr	r6, [r5, #0]
 800d4d4:	602a      	str	r2, [r5, #0]
 800d4d6:	001a      	movs	r2, r3
 800d4d8:	0140      	lsls	r0, r0, #5
 800d4da:	6a21      	ldr	r1, [r4, #32]
 800d4dc:	4002      	ands	r2, r0
 800d4de:	4203      	tst	r3, r0
 800d4e0:	d034      	beq.n	800d54c <__sflush_r+0xa0>
 800d4e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4e4:	89a3      	ldrh	r3, [r4, #12]
 800d4e6:	075b      	lsls	r3, r3, #29
 800d4e8:	d506      	bpl.n	800d4f8 <__sflush_r+0x4c>
 800d4ea:	6863      	ldr	r3, [r4, #4]
 800d4ec:	1ac0      	subs	r0, r0, r3
 800d4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <__sflush_r+0x4c>
 800d4f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4f6:	1ac0      	subs	r0, r0, r3
 800d4f8:	0002      	movs	r2, r0
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	0028      	movs	r0, r5
 800d4fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d500:	6a21      	ldr	r1, [r4, #32]
 800d502:	47b8      	blx	r7
 800d504:	89a2      	ldrh	r2, [r4, #12]
 800d506:	1c43      	adds	r3, r0, #1
 800d508:	d106      	bne.n	800d518 <__sflush_r+0x6c>
 800d50a:	6829      	ldr	r1, [r5, #0]
 800d50c:	291d      	cmp	r1, #29
 800d50e:	d82c      	bhi.n	800d56a <__sflush_r+0xbe>
 800d510:	4b2a      	ldr	r3, [pc, #168]	; (800d5bc <__sflush_r+0x110>)
 800d512:	410b      	asrs	r3, r1
 800d514:	07db      	lsls	r3, r3, #31
 800d516:	d428      	bmi.n	800d56a <__sflush_r+0xbe>
 800d518:	2300      	movs	r3, #0
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	6023      	str	r3, [r4, #0]
 800d520:	04d2      	lsls	r2, r2, #19
 800d522:	d505      	bpl.n	800d530 <__sflush_r+0x84>
 800d524:	1c43      	adds	r3, r0, #1
 800d526:	d102      	bne.n	800d52e <__sflush_r+0x82>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d100      	bne.n	800d530 <__sflush_r+0x84>
 800d52e:	6560      	str	r0, [r4, #84]	; 0x54
 800d530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d532:	602e      	str	r6, [r5, #0]
 800d534:	2900      	cmp	r1, #0
 800d536:	d0c5      	beq.n	800d4c4 <__sflush_r+0x18>
 800d538:	0023      	movs	r3, r4
 800d53a:	3344      	adds	r3, #68	; 0x44
 800d53c:	4299      	cmp	r1, r3
 800d53e:	d002      	beq.n	800d546 <__sflush_r+0x9a>
 800d540:	0028      	movs	r0, r5
 800d542:	f7fe f9d9 	bl	800b8f8 <_free_r>
 800d546:	2000      	movs	r0, #0
 800d548:	6360      	str	r0, [r4, #52]	; 0x34
 800d54a:	e7bc      	b.n	800d4c6 <__sflush_r+0x1a>
 800d54c:	2301      	movs	r3, #1
 800d54e:	0028      	movs	r0, r5
 800d550:	47b8      	blx	r7
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	d1c6      	bne.n	800d4e4 <__sflush_r+0x38>
 800d556:	682b      	ldr	r3, [r5, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d0c3      	beq.n	800d4e4 <__sflush_r+0x38>
 800d55c:	2b1d      	cmp	r3, #29
 800d55e:	d001      	beq.n	800d564 <__sflush_r+0xb8>
 800d560:	2b16      	cmp	r3, #22
 800d562:	d101      	bne.n	800d568 <__sflush_r+0xbc>
 800d564:	602e      	str	r6, [r5, #0]
 800d566:	e7ad      	b.n	800d4c4 <__sflush_r+0x18>
 800d568:	89a2      	ldrh	r2, [r4, #12]
 800d56a:	2340      	movs	r3, #64	; 0x40
 800d56c:	4313      	orrs	r3, r2
 800d56e:	81a3      	strh	r3, [r4, #12]
 800d570:	e7a9      	b.n	800d4c6 <__sflush_r+0x1a>
 800d572:	690e      	ldr	r6, [r1, #16]
 800d574:	2e00      	cmp	r6, #0
 800d576:	d0a5      	beq.n	800d4c4 <__sflush_r+0x18>
 800d578:	680f      	ldr	r7, [r1, #0]
 800d57a:	600e      	str	r6, [r1, #0]
 800d57c:	1bba      	subs	r2, r7, r6
 800d57e:	9201      	str	r2, [sp, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	079b      	lsls	r3, r3, #30
 800d584:	d100      	bne.n	800d588 <__sflush_r+0xdc>
 800d586:	694a      	ldr	r2, [r1, #20]
 800d588:	60a2      	str	r2, [r4, #8]
 800d58a:	9b01      	ldr	r3, [sp, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dd99      	ble.n	800d4c4 <__sflush_r+0x18>
 800d590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d592:	0032      	movs	r2, r6
 800d594:	001f      	movs	r7, r3
 800d596:	0028      	movs	r0, r5
 800d598:	9b01      	ldr	r3, [sp, #4]
 800d59a:	6a21      	ldr	r1, [r4, #32]
 800d59c:	47b8      	blx	r7
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	dc06      	bgt.n	800d5b0 <__sflush_r+0x104>
 800d5a2:	2340      	movs	r3, #64	; 0x40
 800d5a4:	2001      	movs	r0, #1
 800d5a6:	89a2      	ldrh	r2, [r4, #12]
 800d5a8:	4240      	negs	r0, r0
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	e78a      	b.n	800d4c6 <__sflush_r+0x1a>
 800d5b0:	9b01      	ldr	r3, [sp, #4]
 800d5b2:	1836      	adds	r6, r6, r0
 800d5b4:	1a1b      	subs	r3, r3, r0
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	e7e7      	b.n	800d58a <__sflush_r+0xde>
 800d5ba:	46c0      	nop			; (mov r8, r8)
 800d5bc:	dfbffffe 	.word	0xdfbffffe

0800d5c0 <_fflush_r>:
 800d5c0:	690b      	ldr	r3, [r1, #16]
 800d5c2:	b570      	push	{r4, r5, r6, lr}
 800d5c4:	0005      	movs	r5, r0
 800d5c6:	000c      	movs	r4, r1
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d102      	bne.n	800d5d2 <_fflush_r+0x12>
 800d5cc:	2500      	movs	r5, #0
 800d5ce:	0028      	movs	r0, r5
 800d5d0:	bd70      	pop	{r4, r5, r6, pc}
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d004      	beq.n	800d5e0 <_fflush_r+0x20>
 800d5d6:	6a03      	ldr	r3, [r0, #32]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d101      	bne.n	800d5e0 <_fflush_r+0x20>
 800d5dc:	f7fd f950 	bl	800a880 <__sinit>
 800d5e0:	220c      	movs	r2, #12
 800d5e2:	5ea3      	ldrsh	r3, [r4, r2]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d0f1      	beq.n	800d5cc <_fflush_r+0xc>
 800d5e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5ea:	07d2      	lsls	r2, r2, #31
 800d5ec:	d404      	bmi.n	800d5f8 <_fflush_r+0x38>
 800d5ee:	059b      	lsls	r3, r3, #22
 800d5f0:	d402      	bmi.n	800d5f8 <_fflush_r+0x38>
 800d5f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5f4:	f7fd fac7 	bl	800ab86 <__retarget_lock_acquire_recursive>
 800d5f8:	0028      	movs	r0, r5
 800d5fa:	0021      	movs	r1, r4
 800d5fc:	f7ff ff56 	bl	800d4ac <__sflush_r>
 800d600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d602:	0005      	movs	r5, r0
 800d604:	07db      	lsls	r3, r3, #31
 800d606:	d4e2      	bmi.n	800d5ce <_fflush_r+0xe>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	059b      	lsls	r3, r3, #22
 800d60c:	d4df      	bmi.n	800d5ce <_fflush_r+0xe>
 800d60e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d610:	f7fd faba 	bl	800ab88 <__retarget_lock_release_recursive>
 800d614:	e7db      	b.n	800d5ce <_fflush_r+0xe>

0800d616 <memmove>:
 800d616:	b510      	push	{r4, lr}
 800d618:	4288      	cmp	r0, r1
 800d61a:	d902      	bls.n	800d622 <memmove+0xc>
 800d61c:	188b      	adds	r3, r1, r2
 800d61e:	4298      	cmp	r0, r3
 800d620:	d303      	bcc.n	800d62a <memmove+0x14>
 800d622:	2300      	movs	r3, #0
 800d624:	e007      	b.n	800d636 <memmove+0x20>
 800d626:	5c8b      	ldrb	r3, [r1, r2]
 800d628:	5483      	strb	r3, [r0, r2]
 800d62a:	3a01      	subs	r2, #1
 800d62c:	d2fb      	bcs.n	800d626 <memmove+0x10>
 800d62e:	bd10      	pop	{r4, pc}
 800d630:	5ccc      	ldrb	r4, [r1, r3]
 800d632:	54c4      	strb	r4, [r0, r3]
 800d634:	3301      	adds	r3, #1
 800d636:	429a      	cmp	r2, r3
 800d638:	d1fa      	bne.n	800d630 <memmove+0x1a>
 800d63a:	e7f8      	b.n	800d62e <memmove+0x18>

0800d63c <strncmp>:
 800d63c:	b530      	push	{r4, r5, lr}
 800d63e:	0005      	movs	r5, r0
 800d640:	1e10      	subs	r0, r2, #0
 800d642:	d00b      	beq.n	800d65c <strncmp+0x20>
 800d644:	2400      	movs	r4, #0
 800d646:	3a01      	subs	r2, #1
 800d648:	5d2b      	ldrb	r3, [r5, r4]
 800d64a:	5d08      	ldrb	r0, [r1, r4]
 800d64c:	4283      	cmp	r3, r0
 800d64e:	d104      	bne.n	800d65a <strncmp+0x1e>
 800d650:	42a2      	cmp	r2, r4
 800d652:	d002      	beq.n	800d65a <strncmp+0x1e>
 800d654:	3401      	adds	r4, #1
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1f6      	bne.n	800d648 <strncmp+0xc>
 800d65a:	1a18      	subs	r0, r3, r0
 800d65c:	bd30      	pop	{r4, r5, pc}
	...

0800d660 <_sbrk_r>:
 800d660:	2300      	movs	r3, #0
 800d662:	b570      	push	{r4, r5, r6, lr}
 800d664:	4d06      	ldr	r5, [pc, #24]	; (800d680 <_sbrk_r+0x20>)
 800d666:	0004      	movs	r4, r0
 800d668:	0008      	movs	r0, r1
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	f7f5 ff6c 	bl	8003548 <_sbrk>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d103      	bne.n	800d67c <_sbrk_r+0x1c>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d000      	beq.n	800d67c <_sbrk_r+0x1c>
 800d67a:	6023      	str	r3, [r4, #0]
 800d67c:	bd70      	pop	{r4, r5, r6, pc}
 800d67e:	46c0      	nop			; (mov r8, r8)
 800d680:	20002208 	.word	0x20002208

0800d684 <nan>:
 800d684:	2000      	movs	r0, #0
 800d686:	4901      	ldr	r1, [pc, #4]	; (800d68c <nan+0x8>)
 800d688:	4770      	bx	lr
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	7ff80000 	.word	0x7ff80000

0800d690 <__assert_func>:
 800d690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d692:	0014      	movs	r4, r2
 800d694:	001a      	movs	r2, r3
 800d696:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <__assert_func+0x2c>)
 800d698:	0005      	movs	r5, r0
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	000e      	movs	r6, r1
 800d69e:	68d8      	ldr	r0, [r3, #12]
 800d6a0:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <__assert_func+0x30>)
 800d6a2:	2c00      	cmp	r4, #0
 800d6a4:	d101      	bne.n	800d6aa <__assert_func+0x1a>
 800d6a6:	4b07      	ldr	r3, [pc, #28]	; (800d6c4 <__assert_func+0x34>)
 800d6a8:	001c      	movs	r4, r3
 800d6aa:	4907      	ldr	r1, [pc, #28]	; (800d6c8 <__assert_func+0x38>)
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	9402      	str	r4, [sp, #8]
 800d6b0:	002b      	movs	r3, r5
 800d6b2:	9600      	str	r6, [sp, #0]
 800d6b4:	f000 fbe2 	bl	800de7c <fiprintf>
 800d6b8:	f000 fbf0 	bl	800de9c <abort>
 800d6bc:	20000068 	.word	0x20000068
 800d6c0:	0800e99a 	.word	0x0800e99a
 800d6c4:	0800e9d5 	.word	0x0800e9d5
 800d6c8:	0800e9a7 	.word	0x0800e9a7

0800d6cc <_calloc_r>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	0c0b      	lsrs	r3, r1, #16
 800d6d0:	0c15      	lsrs	r5, r2, #16
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d11e      	bne.n	800d714 <_calloc_r+0x48>
 800d6d6:	2d00      	cmp	r5, #0
 800d6d8:	d10c      	bne.n	800d6f4 <_calloc_r+0x28>
 800d6da:	b289      	uxth	r1, r1
 800d6dc:	b294      	uxth	r4, r2
 800d6de:	434c      	muls	r4, r1
 800d6e0:	0021      	movs	r1, r4
 800d6e2:	f7fe f97f 	bl	800b9e4 <_malloc_r>
 800d6e6:	1e05      	subs	r5, r0, #0
 800d6e8:	d01b      	beq.n	800d722 <_calloc_r+0x56>
 800d6ea:	0022      	movs	r2, r4
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	f7fd f967 	bl	800a9c0 <memset>
 800d6f2:	e016      	b.n	800d722 <_calloc_r+0x56>
 800d6f4:	1c2b      	adds	r3, r5, #0
 800d6f6:	1c0c      	adds	r4, r1, #0
 800d6f8:	b289      	uxth	r1, r1
 800d6fa:	b292      	uxth	r2, r2
 800d6fc:	434a      	muls	r2, r1
 800d6fe:	b2a1      	uxth	r1, r4
 800d700:	b29c      	uxth	r4, r3
 800d702:	434c      	muls	r4, r1
 800d704:	0c13      	lsrs	r3, r2, #16
 800d706:	18e4      	adds	r4, r4, r3
 800d708:	0c23      	lsrs	r3, r4, #16
 800d70a:	d107      	bne.n	800d71c <_calloc_r+0x50>
 800d70c:	0424      	lsls	r4, r4, #16
 800d70e:	b292      	uxth	r2, r2
 800d710:	4314      	orrs	r4, r2
 800d712:	e7e5      	b.n	800d6e0 <_calloc_r+0x14>
 800d714:	2d00      	cmp	r5, #0
 800d716:	d101      	bne.n	800d71c <_calloc_r+0x50>
 800d718:	1c14      	adds	r4, r2, #0
 800d71a:	e7ed      	b.n	800d6f8 <_calloc_r+0x2c>
 800d71c:	230c      	movs	r3, #12
 800d71e:	2500      	movs	r5, #0
 800d720:	6003      	str	r3, [r0, #0]
 800d722:	0028      	movs	r0, r5
 800d724:	bd70      	pop	{r4, r5, r6, pc}

0800d726 <rshift>:
 800d726:	0002      	movs	r2, r0
 800d728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72a:	6904      	ldr	r4, [r0, #16]
 800d72c:	114b      	asrs	r3, r1, #5
 800d72e:	b085      	sub	sp, #20
 800d730:	3214      	adds	r2, #20
 800d732:	9302      	str	r3, [sp, #8]
 800d734:	114d      	asrs	r5, r1, #5
 800d736:	0013      	movs	r3, r2
 800d738:	42ac      	cmp	r4, r5
 800d73a:	dd32      	ble.n	800d7a2 <rshift+0x7c>
 800d73c:	261f      	movs	r6, #31
 800d73e:	000f      	movs	r7, r1
 800d740:	114b      	asrs	r3, r1, #5
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	00a5      	lsls	r5, r4, #2
 800d746:	18d3      	adds	r3, r2, r3
 800d748:	4037      	ands	r7, r6
 800d74a:	1955      	adds	r5, r2, r5
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	9701      	str	r7, [sp, #4]
 800d750:	4231      	tst	r1, r6
 800d752:	d10d      	bne.n	800d770 <rshift+0x4a>
 800d754:	0016      	movs	r6, r2
 800d756:	0019      	movs	r1, r3
 800d758:	428d      	cmp	r5, r1
 800d75a:	d836      	bhi.n	800d7ca <rshift+0xa4>
 800d75c:	9900      	ldr	r1, [sp, #0]
 800d75e:	2300      	movs	r3, #0
 800d760:	3903      	subs	r1, #3
 800d762:	428d      	cmp	r5, r1
 800d764:	d302      	bcc.n	800d76c <rshift+0x46>
 800d766:	9b02      	ldr	r3, [sp, #8]
 800d768:	1ae4      	subs	r4, r4, r3
 800d76a:	00a3      	lsls	r3, r4, #2
 800d76c:	18d3      	adds	r3, r2, r3
 800d76e:	e018      	b.n	800d7a2 <rshift+0x7c>
 800d770:	2120      	movs	r1, #32
 800d772:	9e01      	ldr	r6, [sp, #4]
 800d774:	9f01      	ldr	r7, [sp, #4]
 800d776:	1b89      	subs	r1, r1, r6
 800d778:	9e00      	ldr	r6, [sp, #0]
 800d77a:	9103      	str	r1, [sp, #12]
 800d77c:	ce02      	ldmia	r6!, {r1}
 800d77e:	4694      	mov	ip, r2
 800d780:	40f9      	lsrs	r1, r7
 800d782:	42b5      	cmp	r5, r6
 800d784:	d816      	bhi.n	800d7b4 <rshift+0x8e>
 800d786:	9e00      	ldr	r6, [sp, #0]
 800d788:	2300      	movs	r3, #0
 800d78a:	3601      	adds	r6, #1
 800d78c:	42b5      	cmp	r5, r6
 800d78e:	d303      	bcc.n	800d798 <rshift+0x72>
 800d790:	9b02      	ldr	r3, [sp, #8]
 800d792:	1ae3      	subs	r3, r4, r3
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	3b04      	subs	r3, #4
 800d798:	18d3      	adds	r3, r2, r3
 800d79a:	6019      	str	r1, [r3, #0]
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d000      	beq.n	800d7a2 <rshift+0x7c>
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	1a99      	subs	r1, r3, r2
 800d7a4:	1089      	asrs	r1, r1, #2
 800d7a6:	6101      	str	r1, [r0, #16]
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d101      	bne.n	800d7b0 <rshift+0x8a>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	6143      	str	r3, [r0, #20]
 800d7b0:	b005      	add	sp, #20
 800d7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b4:	6837      	ldr	r7, [r6, #0]
 800d7b6:	9b03      	ldr	r3, [sp, #12]
 800d7b8:	409f      	lsls	r7, r3
 800d7ba:	430f      	orrs	r7, r1
 800d7bc:	4661      	mov	r1, ip
 800d7be:	c180      	stmia	r1!, {r7}
 800d7c0:	468c      	mov	ip, r1
 800d7c2:	9b01      	ldr	r3, [sp, #4]
 800d7c4:	ce02      	ldmia	r6!, {r1}
 800d7c6:	40d9      	lsrs	r1, r3
 800d7c8:	e7db      	b.n	800d782 <rshift+0x5c>
 800d7ca:	c980      	ldmia	r1!, {r7}
 800d7cc:	c680      	stmia	r6!, {r7}
 800d7ce:	e7c3      	b.n	800d758 <rshift+0x32>

0800d7d0 <__hexdig_fun>:
 800d7d0:	0002      	movs	r2, r0
 800d7d2:	3a30      	subs	r2, #48	; 0x30
 800d7d4:	0003      	movs	r3, r0
 800d7d6:	2a09      	cmp	r2, #9
 800d7d8:	d802      	bhi.n	800d7e0 <__hexdig_fun+0x10>
 800d7da:	3b20      	subs	r3, #32
 800d7dc:	b2d8      	uxtb	r0, r3
 800d7de:	4770      	bx	lr
 800d7e0:	0002      	movs	r2, r0
 800d7e2:	3a61      	subs	r2, #97	; 0x61
 800d7e4:	2a05      	cmp	r2, #5
 800d7e6:	d801      	bhi.n	800d7ec <__hexdig_fun+0x1c>
 800d7e8:	3b47      	subs	r3, #71	; 0x47
 800d7ea:	e7f7      	b.n	800d7dc <__hexdig_fun+0xc>
 800d7ec:	001a      	movs	r2, r3
 800d7ee:	3a41      	subs	r2, #65	; 0x41
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	2a05      	cmp	r2, #5
 800d7f4:	d8f3      	bhi.n	800d7de <__hexdig_fun+0xe>
 800d7f6:	3b27      	subs	r3, #39	; 0x27
 800d7f8:	e7f0      	b.n	800d7dc <__hexdig_fun+0xc>
	...

0800d7fc <__gethex>:
 800d7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7fe:	b089      	sub	sp, #36	; 0x24
 800d800:	9307      	str	r3, [sp, #28]
 800d802:	2302      	movs	r3, #2
 800d804:	9201      	str	r2, [sp, #4]
 800d806:	680a      	ldr	r2, [r1, #0]
 800d808:	425b      	negs	r3, r3
 800d80a:	9003      	str	r0, [sp, #12]
 800d80c:	9106      	str	r1, [sp, #24]
 800d80e:	1c96      	adds	r6, r2, #2
 800d810:	1a9b      	subs	r3, r3, r2
 800d812:	199a      	adds	r2, r3, r6
 800d814:	9600      	str	r6, [sp, #0]
 800d816:	9205      	str	r2, [sp, #20]
 800d818:	9a00      	ldr	r2, [sp, #0]
 800d81a:	3601      	adds	r6, #1
 800d81c:	7810      	ldrb	r0, [r2, #0]
 800d81e:	2830      	cmp	r0, #48	; 0x30
 800d820:	d0f7      	beq.n	800d812 <__gethex+0x16>
 800d822:	f7ff ffd5 	bl	800d7d0 <__hexdig_fun>
 800d826:	2300      	movs	r3, #0
 800d828:	001d      	movs	r5, r3
 800d82a:	9302      	str	r3, [sp, #8]
 800d82c:	4298      	cmp	r0, r3
 800d82e:	d11d      	bne.n	800d86c <__gethex+0x70>
 800d830:	2201      	movs	r2, #1
 800d832:	49a6      	ldr	r1, [pc, #664]	; (800dacc <__gethex+0x2d0>)
 800d834:	9800      	ldr	r0, [sp, #0]
 800d836:	f7ff ff01 	bl	800d63c <strncmp>
 800d83a:	0007      	movs	r7, r0
 800d83c:	42a8      	cmp	r0, r5
 800d83e:	d169      	bne.n	800d914 <__gethex+0x118>
 800d840:	9b00      	ldr	r3, [sp, #0]
 800d842:	0034      	movs	r4, r6
 800d844:	7858      	ldrb	r0, [r3, #1]
 800d846:	f7ff ffc3 	bl	800d7d0 <__hexdig_fun>
 800d84a:	2301      	movs	r3, #1
 800d84c:	9302      	str	r3, [sp, #8]
 800d84e:	42a8      	cmp	r0, r5
 800d850:	d02f      	beq.n	800d8b2 <__gethex+0xb6>
 800d852:	9600      	str	r6, [sp, #0]
 800d854:	9b00      	ldr	r3, [sp, #0]
 800d856:	7818      	ldrb	r0, [r3, #0]
 800d858:	2830      	cmp	r0, #48	; 0x30
 800d85a:	d009      	beq.n	800d870 <__gethex+0x74>
 800d85c:	f7ff ffb8 	bl	800d7d0 <__hexdig_fun>
 800d860:	4242      	negs	r2, r0
 800d862:	4142      	adcs	r2, r0
 800d864:	2301      	movs	r3, #1
 800d866:	0035      	movs	r5, r6
 800d868:	9202      	str	r2, [sp, #8]
 800d86a:	9305      	str	r3, [sp, #20]
 800d86c:	9c00      	ldr	r4, [sp, #0]
 800d86e:	e004      	b.n	800d87a <__gethex+0x7e>
 800d870:	9b00      	ldr	r3, [sp, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	e7ed      	b.n	800d854 <__gethex+0x58>
 800d878:	3401      	adds	r4, #1
 800d87a:	7820      	ldrb	r0, [r4, #0]
 800d87c:	f7ff ffa8 	bl	800d7d0 <__hexdig_fun>
 800d880:	1e07      	subs	r7, r0, #0
 800d882:	d1f9      	bne.n	800d878 <__gethex+0x7c>
 800d884:	2201      	movs	r2, #1
 800d886:	0020      	movs	r0, r4
 800d888:	4990      	ldr	r1, [pc, #576]	; (800dacc <__gethex+0x2d0>)
 800d88a:	f7ff fed7 	bl	800d63c <strncmp>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d10d      	bne.n	800d8ae <__gethex+0xb2>
 800d892:	2d00      	cmp	r5, #0
 800d894:	d106      	bne.n	800d8a4 <__gethex+0xa8>
 800d896:	3401      	adds	r4, #1
 800d898:	0025      	movs	r5, r4
 800d89a:	7820      	ldrb	r0, [r4, #0]
 800d89c:	f7ff ff98 	bl	800d7d0 <__hexdig_fun>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d102      	bne.n	800d8aa <__gethex+0xae>
 800d8a4:	1b2d      	subs	r5, r5, r4
 800d8a6:	00af      	lsls	r7, r5, #2
 800d8a8:	e003      	b.n	800d8b2 <__gethex+0xb6>
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	e7f5      	b.n	800d89a <__gethex+0x9e>
 800d8ae:	2d00      	cmp	r5, #0
 800d8b0:	d1f8      	bne.n	800d8a4 <__gethex+0xa8>
 800d8b2:	2220      	movs	r2, #32
 800d8b4:	7823      	ldrb	r3, [r4, #0]
 800d8b6:	0026      	movs	r6, r4
 800d8b8:	4393      	bics	r3, r2
 800d8ba:	2b50      	cmp	r3, #80	; 0x50
 800d8bc:	d11d      	bne.n	800d8fa <__gethex+0xfe>
 800d8be:	7863      	ldrb	r3, [r4, #1]
 800d8c0:	2b2b      	cmp	r3, #43	; 0x2b
 800d8c2:	d02c      	beq.n	800d91e <__gethex+0x122>
 800d8c4:	2b2d      	cmp	r3, #45	; 0x2d
 800d8c6:	d02e      	beq.n	800d926 <__gethex+0x12a>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	1c66      	adds	r6, r4, #1
 800d8cc:	9304      	str	r3, [sp, #16]
 800d8ce:	7830      	ldrb	r0, [r6, #0]
 800d8d0:	f7ff ff7e 	bl	800d7d0 <__hexdig_fun>
 800d8d4:	1e43      	subs	r3, r0, #1
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	2b18      	cmp	r3, #24
 800d8da:	d82b      	bhi.n	800d934 <__gethex+0x138>
 800d8dc:	3810      	subs	r0, #16
 800d8de:	0005      	movs	r5, r0
 800d8e0:	7870      	ldrb	r0, [r6, #1]
 800d8e2:	f7ff ff75 	bl	800d7d0 <__hexdig_fun>
 800d8e6:	1e43      	subs	r3, r0, #1
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	3601      	adds	r6, #1
 800d8ec:	2b18      	cmp	r3, #24
 800d8ee:	d91c      	bls.n	800d92a <__gethex+0x12e>
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d000      	beq.n	800d8f8 <__gethex+0xfc>
 800d8f6:	426d      	negs	r5, r5
 800d8f8:	197f      	adds	r7, r7, r5
 800d8fa:	9b06      	ldr	r3, [sp, #24]
 800d8fc:	601e      	str	r6, [r3, #0]
 800d8fe:	9b02      	ldr	r3, [sp, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d019      	beq.n	800d938 <__gethex+0x13c>
 800d904:	2600      	movs	r6, #0
 800d906:	9b05      	ldr	r3, [sp, #20]
 800d908:	42b3      	cmp	r3, r6
 800d90a:	d100      	bne.n	800d90e <__gethex+0x112>
 800d90c:	3606      	adds	r6, #6
 800d90e:	0030      	movs	r0, r6
 800d910:	b009      	add	sp, #36	; 0x24
 800d912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d914:	2301      	movs	r3, #1
 800d916:	2700      	movs	r7, #0
 800d918:	9c00      	ldr	r4, [sp, #0]
 800d91a:	9302      	str	r3, [sp, #8]
 800d91c:	e7c9      	b.n	800d8b2 <__gethex+0xb6>
 800d91e:	2300      	movs	r3, #0
 800d920:	9304      	str	r3, [sp, #16]
 800d922:	1ca6      	adds	r6, r4, #2
 800d924:	e7d3      	b.n	800d8ce <__gethex+0xd2>
 800d926:	2301      	movs	r3, #1
 800d928:	e7fa      	b.n	800d920 <__gethex+0x124>
 800d92a:	230a      	movs	r3, #10
 800d92c:	435d      	muls	r5, r3
 800d92e:	182d      	adds	r5, r5, r0
 800d930:	3d10      	subs	r5, #16
 800d932:	e7d5      	b.n	800d8e0 <__gethex+0xe4>
 800d934:	0026      	movs	r6, r4
 800d936:	e7e0      	b.n	800d8fa <__gethex+0xfe>
 800d938:	9b00      	ldr	r3, [sp, #0]
 800d93a:	9902      	ldr	r1, [sp, #8]
 800d93c:	1ae3      	subs	r3, r4, r3
 800d93e:	3b01      	subs	r3, #1
 800d940:	2b07      	cmp	r3, #7
 800d942:	dc0a      	bgt.n	800d95a <__gethex+0x15e>
 800d944:	9803      	ldr	r0, [sp, #12]
 800d946:	f7fe f8df 	bl	800bb08 <_Balloc>
 800d94a:	1e05      	subs	r5, r0, #0
 800d94c:	d108      	bne.n	800d960 <__gethex+0x164>
 800d94e:	002a      	movs	r2, r5
 800d950:	21e4      	movs	r1, #228	; 0xe4
 800d952:	4b5f      	ldr	r3, [pc, #380]	; (800dad0 <__gethex+0x2d4>)
 800d954:	485f      	ldr	r0, [pc, #380]	; (800dad4 <__gethex+0x2d8>)
 800d956:	f7ff fe9b 	bl	800d690 <__assert_func>
 800d95a:	3101      	adds	r1, #1
 800d95c:	105b      	asrs	r3, r3, #1
 800d95e:	e7ef      	b.n	800d940 <__gethex+0x144>
 800d960:	0003      	movs	r3, r0
 800d962:	3314      	adds	r3, #20
 800d964:	9302      	str	r3, [sp, #8]
 800d966:	9305      	str	r3, [sp, #20]
 800d968:	2300      	movs	r3, #0
 800d96a:	001e      	movs	r6, r3
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	9b00      	ldr	r3, [sp, #0]
 800d970:	42a3      	cmp	r3, r4
 800d972:	d33f      	bcc.n	800d9f4 <__gethex+0x1f8>
 800d974:	9c05      	ldr	r4, [sp, #20]
 800d976:	9b02      	ldr	r3, [sp, #8]
 800d978:	c440      	stmia	r4!, {r6}
 800d97a:	1ae4      	subs	r4, r4, r3
 800d97c:	10a4      	asrs	r4, r4, #2
 800d97e:	0030      	movs	r0, r6
 800d980:	612c      	str	r4, [r5, #16]
 800d982:	f7fe f9b9 	bl	800bcf8 <__hi0bits>
 800d986:	9b01      	ldr	r3, [sp, #4]
 800d988:	0164      	lsls	r4, r4, #5
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	1a26      	subs	r6, r4, r0
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	429e      	cmp	r6, r3
 800d992:	dd51      	ble.n	800da38 <__gethex+0x23c>
 800d994:	1af6      	subs	r6, r6, r3
 800d996:	0031      	movs	r1, r6
 800d998:	0028      	movs	r0, r5
 800d99a:	f7fe fd4d 	bl	800c438 <__any_on>
 800d99e:	1e04      	subs	r4, r0, #0
 800d9a0:	d016      	beq.n	800d9d0 <__gethex+0x1d4>
 800d9a2:	2401      	movs	r4, #1
 800d9a4:	231f      	movs	r3, #31
 800d9a6:	0020      	movs	r0, r4
 800d9a8:	1e72      	subs	r2, r6, #1
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	4098      	lsls	r0, r3
 800d9ae:	0003      	movs	r3, r0
 800d9b0:	1151      	asrs	r1, r2, #5
 800d9b2:	9802      	ldr	r0, [sp, #8]
 800d9b4:	0089      	lsls	r1, r1, #2
 800d9b6:	5809      	ldr	r1, [r1, r0]
 800d9b8:	4219      	tst	r1, r3
 800d9ba:	d009      	beq.n	800d9d0 <__gethex+0x1d4>
 800d9bc:	42a2      	cmp	r2, r4
 800d9be:	dd06      	ble.n	800d9ce <__gethex+0x1d2>
 800d9c0:	0028      	movs	r0, r5
 800d9c2:	1eb1      	subs	r1, r6, #2
 800d9c4:	f7fe fd38 	bl	800c438 <__any_on>
 800d9c8:	3402      	adds	r4, #2
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d100      	bne.n	800d9d0 <__gethex+0x1d4>
 800d9ce:	2402      	movs	r4, #2
 800d9d0:	0031      	movs	r1, r6
 800d9d2:	0028      	movs	r0, r5
 800d9d4:	f7ff fea7 	bl	800d726 <rshift>
 800d9d8:	19bf      	adds	r7, r7, r6
 800d9da:	9b01      	ldr	r3, [sp, #4]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	42bb      	cmp	r3, r7
 800d9e0:	da3a      	bge.n	800da58 <__gethex+0x25c>
 800d9e2:	0029      	movs	r1, r5
 800d9e4:	9803      	ldr	r0, [sp, #12]
 800d9e6:	f7fe f8d3 	bl	800bb90 <_Bfree>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9ee:	26a3      	movs	r6, #163	; 0xa3
 800d9f0:	6013      	str	r3, [r2, #0]
 800d9f2:	e78c      	b.n	800d90e <__gethex+0x112>
 800d9f4:	3c01      	subs	r4, #1
 800d9f6:	7823      	ldrb	r3, [r4, #0]
 800d9f8:	2b2e      	cmp	r3, #46	; 0x2e
 800d9fa:	d012      	beq.n	800da22 <__gethex+0x226>
 800d9fc:	9b04      	ldr	r3, [sp, #16]
 800d9fe:	2b20      	cmp	r3, #32
 800da00:	d104      	bne.n	800da0c <__gethex+0x210>
 800da02:	9b05      	ldr	r3, [sp, #20]
 800da04:	c340      	stmia	r3!, {r6}
 800da06:	2600      	movs	r6, #0
 800da08:	9305      	str	r3, [sp, #20]
 800da0a:	9604      	str	r6, [sp, #16]
 800da0c:	7820      	ldrb	r0, [r4, #0]
 800da0e:	f7ff fedf 	bl	800d7d0 <__hexdig_fun>
 800da12:	230f      	movs	r3, #15
 800da14:	4018      	ands	r0, r3
 800da16:	9b04      	ldr	r3, [sp, #16]
 800da18:	4098      	lsls	r0, r3
 800da1a:	3304      	adds	r3, #4
 800da1c:	4306      	orrs	r6, r0
 800da1e:	9304      	str	r3, [sp, #16]
 800da20:	e7a5      	b.n	800d96e <__gethex+0x172>
 800da22:	9b00      	ldr	r3, [sp, #0]
 800da24:	42a3      	cmp	r3, r4
 800da26:	d8e9      	bhi.n	800d9fc <__gethex+0x200>
 800da28:	2201      	movs	r2, #1
 800da2a:	0020      	movs	r0, r4
 800da2c:	4927      	ldr	r1, [pc, #156]	; (800dacc <__gethex+0x2d0>)
 800da2e:	f7ff fe05 	bl	800d63c <strncmp>
 800da32:	2800      	cmp	r0, #0
 800da34:	d1e2      	bne.n	800d9fc <__gethex+0x200>
 800da36:	e79a      	b.n	800d96e <__gethex+0x172>
 800da38:	9b00      	ldr	r3, [sp, #0]
 800da3a:	2400      	movs	r4, #0
 800da3c:	429e      	cmp	r6, r3
 800da3e:	dacc      	bge.n	800d9da <__gethex+0x1de>
 800da40:	1b9e      	subs	r6, r3, r6
 800da42:	0029      	movs	r1, r5
 800da44:	0032      	movs	r2, r6
 800da46:	9803      	ldr	r0, [sp, #12]
 800da48:	f7fe fac2 	bl	800bfd0 <__lshift>
 800da4c:	0003      	movs	r3, r0
 800da4e:	3314      	adds	r3, #20
 800da50:	0005      	movs	r5, r0
 800da52:	1bbf      	subs	r7, r7, r6
 800da54:	9302      	str	r3, [sp, #8]
 800da56:	e7c0      	b.n	800d9da <__gethex+0x1de>
 800da58:	9b01      	ldr	r3, [sp, #4]
 800da5a:	685e      	ldr	r6, [r3, #4]
 800da5c:	42be      	cmp	r6, r7
 800da5e:	dd70      	ble.n	800db42 <__gethex+0x346>
 800da60:	9b00      	ldr	r3, [sp, #0]
 800da62:	1bf6      	subs	r6, r6, r7
 800da64:	42b3      	cmp	r3, r6
 800da66:	dc37      	bgt.n	800dad8 <__gethex+0x2dc>
 800da68:	9b01      	ldr	r3, [sp, #4]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	d024      	beq.n	800daba <__gethex+0x2be>
 800da70:	2b03      	cmp	r3, #3
 800da72:	d026      	beq.n	800dac2 <__gethex+0x2c6>
 800da74:	2b01      	cmp	r3, #1
 800da76:	d117      	bne.n	800daa8 <__gethex+0x2ac>
 800da78:	9b00      	ldr	r3, [sp, #0]
 800da7a:	42b3      	cmp	r3, r6
 800da7c:	d114      	bne.n	800daa8 <__gethex+0x2ac>
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d10b      	bne.n	800da9a <__gethex+0x29e>
 800da82:	9b01      	ldr	r3, [sp, #4]
 800da84:	9a07      	ldr	r2, [sp, #28]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	2662      	movs	r6, #98	; 0x62
 800da8a:	6013      	str	r3, [r2, #0]
 800da8c:	2301      	movs	r3, #1
 800da8e:	9a02      	ldr	r2, [sp, #8]
 800da90:	612b      	str	r3, [r5, #16]
 800da92:	6013      	str	r3, [r2, #0]
 800da94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da96:	601d      	str	r5, [r3, #0]
 800da98:	e739      	b.n	800d90e <__gethex+0x112>
 800da9a:	9900      	ldr	r1, [sp, #0]
 800da9c:	0028      	movs	r0, r5
 800da9e:	3901      	subs	r1, #1
 800daa0:	f7fe fcca 	bl	800c438 <__any_on>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d1ec      	bne.n	800da82 <__gethex+0x286>
 800daa8:	0029      	movs	r1, r5
 800daaa:	9803      	ldr	r0, [sp, #12]
 800daac:	f7fe f870 	bl	800bb90 <_Bfree>
 800dab0:	2300      	movs	r3, #0
 800dab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dab4:	2650      	movs	r6, #80	; 0x50
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	e729      	b.n	800d90e <__gethex+0x112>
 800daba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1f3      	bne.n	800daa8 <__gethex+0x2ac>
 800dac0:	e7df      	b.n	800da82 <__gethex+0x286>
 800dac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1dc      	bne.n	800da82 <__gethex+0x286>
 800dac8:	e7ee      	b.n	800daa8 <__gethex+0x2ac>
 800daca:	46c0      	nop			; (mov r8, r8)
 800dacc:	0800e82c 	.word	0x0800e82c
 800dad0:	0800e6c5 	.word	0x0800e6c5
 800dad4:	0800e9d6 	.word	0x0800e9d6
 800dad8:	1e77      	subs	r7, r6, #1
 800dada:	2c00      	cmp	r4, #0
 800dadc:	d12f      	bne.n	800db3e <__gethex+0x342>
 800dade:	2f00      	cmp	r7, #0
 800dae0:	d004      	beq.n	800daec <__gethex+0x2f0>
 800dae2:	0039      	movs	r1, r7
 800dae4:	0028      	movs	r0, r5
 800dae6:	f7fe fca7 	bl	800c438 <__any_on>
 800daea:	0004      	movs	r4, r0
 800daec:	231f      	movs	r3, #31
 800daee:	117a      	asrs	r2, r7, #5
 800daf0:	401f      	ands	r7, r3
 800daf2:	3b1e      	subs	r3, #30
 800daf4:	40bb      	lsls	r3, r7
 800daf6:	9902      	ldr	r1, [sp, #8]
 800daf8:	0092      	lsls	r2, r2, #2
 800dafa:	5852      	ldr	r2, [r2, r1]
 800dafc:	421a      	tst	r2, r3
 800dafe:	d001      	beq.n	800db04 <__gethex+0x308>
 800db00:	2302      	movs	r3, #2
 800db02:	431c      	orrs	r4, r3
 800db04:	9b00      	ldr	r3, [sp, #0]
 800db06:	0031      	movs	r1, r6
 800db08:	1b9b      	subs	r3, r3, r6
 800db0a:	2602      	movs	r6, #2
 800db0c:	0028      	movs	r0, r5
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	f7ff fe09 	bl	800d726 <rshift>
 800db14:	9b01      	ldr	r3, [sp, #4]
 800db16:	685f      	ldr	r7, [r3, #4]
 800db18:	2c00      	cmp	r4, #0
 800db1a:	d041      	beq.n	800dba0 <__gethex+0x3a4>
 800db1c:	9b01      	ldr	r3, [sp, #4]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	2b02      	cmp	r3, #2
 800db22:	d010      	beq.n	800db46 <__gethex+0x34a>
 800db24:	2b03      	cmp	r3, #3
 800db26:	d012      	beq.n	800db4e <__gethex+0x352>
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d106      	bne.n	800db3a <__gethex+0x33e>
 800db2c:	07a2      	lsls	r2, r4, #30
 800db2e:	d504      	bpl.n	800db3a <__gethex+0x33e>
 800db30:	9a02      	ldr	r2, [sp, #8]
 800db32:	6812      	ldr	r2, [r2, #0]
 800db34:	4314      	orrs	r4, r2
 800db36:	421c      	tst	r4, r3
 800db38:	d10c      	bne.n	800db54 <__gethex+0x358>
 800db3a:	2310      	movs	r3, #16
 800db3c:	e02f      	b.n	800db9e <__gethex+0x3a2>
 800db3e:	2401      	movs	r4, #1
 800db40:	e7d4      	b.n	800daec <__gethex+0x2f0>
 800db42:	2601      	movs	r6, #1
 800db44:	e7e8      	b.n	800db18 <__gethex+0x31c>
 800db46:	2301      	movs	r3, #1
 800db48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800db4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0f2      	beq.n	800db3a <__gethex+0x33e>
 800db54:	692b      	ldr	r3, [r5, #16]
 800db56:	2000      	movs	r0, #0
 800db58:	9302      	str	r3, [sp, #8]
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	9304      	str	r3, [sp, #16]
 800db5e:	002b      	movs	r3, r5
 800db60:	9a04      	ldr	r2, [sp, #16]
 800db62:	3314      	adds	r3, #20
 800db64:	1899      	adds	r1, r3, r2
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	1c54      	adds	r4, r2, #1
 800db6a:	d01e      	beq.n	800dbaa <__gethex+0x3ae>
 800db6c:	3201      	adds	r2, #1
 800db6e:	601a      	str	r2, [r3, #0]
 800db70:	002b      	movs	r3, r5
 800db72:	3314      	adds	r3, #20
 800db74:	2e02      	cmp	r6, #2
 800db76:	d141      	bne.n	800dbfc <__gethex+0x400>
 800db78:	9a01      	ldr	r2, [sp, #4]
 800db7a:	9900      	ldr	r1, [sp, #0]
 800db7c:	6812      	ldr	r2, [r2, #0]
 800db7e:	3a01      	subs	r2, #1
 800db80:	428a      	cmp	r2, r1
 800db82:	d10b      	bne.n	800db9c <__gethex+0x3a0>
 800db84:	221f      	movs	r2, #31
 800db86:	9800      	ldr	r0, [sp, #0]
 800db88:	1149      	asrs	r1, r1, #5
 800db8a:	4002      	ands	r2, r0
 800db8c:	2001      	movs	r0, #1
 800db8e:	0004      	movs	r4, r0
 800db90:	4094      	lsls	r4, r2
 800db92:	0089      	lsls	r1, r1, #2
 800db94:	58cb      	ldr	r3, [r1, r3]
 800db96:	4223      	tst	r3, r4
 800db98:	d000      	beq.n	800db9c <__gethex+0x3a0>
 800db9a:	2601      	movs	r6, #1
 800db9c:	2320      	movs	r3, #32
 800db9e:	431e      	orrs	r6, r3
 800dba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dba2:	601d      	str	r5, [r3, #0]
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	601f      	str	r7, [r3, #0]
 800dba8:	e6b1      	b.n	800d90e <__gethex+0x112>
 800dbaa:	c301      	stmia	r3!, {r0}
 800dbac:	4299      	cmp	r1, r3
 800dbae:	d8da      	bhi.n	800db66 <__gethex+0x36a>
 800dbb0:	68ab      	ldr	r3, [r5, #8]
 800dbb2:	9a02      	ldr	r2, [sp, #8]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	db18      	blt.n	800dbea <__gethex+0x3ee>
 800dbb8:	6869      	ldr	r1, [r5, #4]
 800dbba:	9803      	ldr	r0, [sp, #12]
 800dbbc:	3101      	adds	r1, #1
 800dbbe:	f7fd ffa3 	bl	800bb08 <_Balloc>
 800dbc2:	1e04      	subs	r4, r0, #0
 800dbc4:	d104      	bne.n	800dbd0 <__gethex+0x3d4>
 800dbc6:	0022      	movs	r2, r4
 800dbc8:	2184      	movs	r1, #132	; 0x84
 800dbca:	4b1c      	ldr	r3, [pc, #112]	; (800dc3c <__gethex+0x440>)
 800dbcc:	481c      	ldr	r0, [pc, #112]	; (800dc40 <__gethex+0x444>)
 800dbce:	e6c2      	b.n	800d956 <__gethex+0x15a>
 800dbd0:	0029      	movs	r1, r5
 800dbd2:	692a      	ldr	r2, [r5, #16]
 800dbd4:	310c      	adds	r1, #12
 800dbd6:	3202      	adds	r2, #2
 800dbd8:	0092      	lsls	r2, r2, #2
 800dbda:	300c      	adds	r0, #12
 800dbdc:	f7fc ffe0 	bl	800aba0 <memcpy>
 800dbe0:	0029      	movs	r1, r5
 800dbe2:	9803      	ldr	r0, [sp, #12]
 800dbe4:	f7fd ffd4 	bl	800bb90 <_Bfree>
 800dbe8:	0025      	movs	r5, r4
 800dbea:	692b      	ldr	r3, [r5, #16]
 800dbec:	1c5a      	adds	r2, r3, #1
 800dbee:	612a      	str	r2, [r5, #16]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	18eb      	adds	r3, r5, r3
 800dbf8:	605a      	str	r2, [r3, #4]
 800dbfa:	e7b9      	b.n	800db70 <__gethex+0x374>
 800dbfc:	692a      	ldr	r2, [r5, #16]
 800dbfe:	9902      	ldr	r1, [sp, #8]
 800dc00:	428a      	cmp	r2, r1
 800dc02:	dd09      	ble.n	800dc18 <__gethex+0x41c>
 800dc04:	2101      	movs	r1, #1
 800dc06:	0028      	movs	r0, r5
 800dc08:	f7ff fd8d 	bl	800d726 <rshift>
 800dc0c:	9b01      	ldr	r3, [sp, #4]
 800dc0e:	3701      	adds	r7, #1
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	42bb      	cmp	r3, r7
 800dc14:	dac1      	bge.n	800db9a <__gethex+0x39e>
 800dc16:	e6e4      	b.n	800d9e2 <__gethex+0x1e6>
 800dc18:	221f      	movs	r2, #31
 800dc1a:	9c00      	ldr	r4, [sp, #0]
 800dc1c:	9900      	ldr	r1, [sp, #0]
 800dc1e:	2601      	movs	r6, #1
 800dc20:	4014      	ands	r4, r2
 800dc22:	4211      	tst	r1, r2
 800dc24:	d0ba      	beq.n	800db9c <__gethex+0x3a0>
 800dc26:	9a04      	ldr	r2, [sp, #16]
 800dc28:	189b      	adds	r3, r3, r2
 800dc2a:	3b04      	subs	r3, #4
 800dc2c:	6818      	ldr	r0, [r3, #0]
 800dc2e:	f7fe f863 	bl	800bcf8 <__hi0bits>
 800dc32:	2320      	movs	r3, #32
 800dc34:	1b1b      	subs	r3, r3, r4
 800dc36:	4298      	cmp	r0, r3
 800dc38:	dbe4      	blt.n	800dc04 <__gethex+0x408>
 800dc3a:	e7af      	b.n	800db9c <__gethex+0x3a0>
 800dc3c:	0800e6c5 	.word	0x0800e6c5
 800dc40:	0800e9d6 	.word	0x0800e9d6

0800dc44 <L_shift>:
 800dc44:	2308      	movs	r3, #8
 800dc46:	b570      	push	{r4, r5, r6, lr}
 800dc48:	2520      	movs	r5, #32
 800dc4a:	1a9a      	subs	r2, r3, r2
 800dc4c:	0092      	lsls	r2, r2, #2
 800dc4e:	1aad      	subs	r5, r5, r2
 800dc50:	6843      	ldr	r3, [r0, #4]
 800dc52:	6804      	ldr	r4, [r0, #0]
 800dc54:	001e      	movs	r6, r3
 800dc56:	40ae      	lsls	r6, r5
 800dc58:	40d3      	lsrs	r3, r2
 800dc5a:	4334      	orrs	r4, r6
 800dc5c:	6004      	str	r4, [r0, #0]
 800dc5e:	6043      	str	r3, [r0, #4]
 800dc60:	3004      	adds	r0, #4
 800dc62:	4288      	cmp	r0, r1
 800dc64:	d3f4      	bcc.n	800dc50 <L_shift+0xc>
 800dc66:	bd70      	pop	{r4, r5, r6, pc}

0800dc68 <__match>:
 800dc68:	b530      	push	{r4, r5, lr}
 800dc6a:	6803      	ldr	r3, [r0, #0]
 800dc6c:	780c      	ldrb	r4, [r1, #0]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	2c00      	cmp	r4, #0
 800dc72:	d102      	bne.n	800dc7a <__match+0x12>
 800dc74:	6003      	str	r3, [r0, #0]
 800dc76:	2001      	movs	r0, #1
 800dc78:	bd30      	pop	{r4, r5, pc}
 800dc7a:	781a      	ldrb	r2, [r3, #0]
 800dc7c:	0015      	movs	r5, r2
 800dc7e:	3d41      	subs	r5, #65	; 0x41
 800dc80:	2d19      	cmp	r5, #25
 800dc82:	d800      	bhi.n	800dc86 <__match+0x1e>
 800dc84:	3220      	adds	r2, #32
 800dc86:	3101      	adds	r1, #1
 800dc88:	42a2      	cmp	r2, r4
 800dc8a:	d0ef      	beq.n	800dc6c <__match+0x4>
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e7f3      	b.n	800dc78 <__match+0x10>

0800dc90 <__hexnan>:
 800dc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc92:	680b      	ldr	r3, [r1, #0]
 800dc94:	b08b      	sub	sp, #44	; 0x2c
 800dc96:	9201      	str	r2, [sp, #4]
 800dc98:	9901      	ldr	r1, [sp, #4]
 800dc9a:	115a      	asrs	r2, r3, #5
 800dc9c:	0092      	lsls	r2, r2, #2
 800dc9e:	188a      	adds	r2, r1, r2
 800dca0:	9202      	str	r2, [sp, #8]
 800dca2:	0019      	movs	r1, r3
 800dca4:	221f      	movs	r2, #31
 800dca6:	4011      	ands	r1, r2
 800dca8:	9008      	str	r0, [sp, #32]
 800dcaa:	9106      	str	r1, [sp, #24]
 800dcac:	4213      	tst	r3, r2
 800dcae:	d002      	beq.n	800dcb6 <__hexnan+0x26>
 800dcb0:	9b02      	ldr	r3, [sp, #8]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	9302      	str	r3, [sp, #8]
 800dcb6:	9b02      	ldr	r3, [sp, #8]
 800dcb8:	2500      	movs	r5, #0
 800dcba:	1f1f      	subs	r7, r3, #4
 800dcbc:	003e      	movs	r6, r7
 800dcbe:	003c      	movs	r4, r7
 800dcc0:	9b08      	ldr	r3, [sp, #32]
 800dcc2:	603d      	str	r5, [r7, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	9507      	str	r5, [sp, #28]
 800dcc8:	9305      	str	r3, [sp, #20]
 800dcca:	9503      	str	r5, [sp, #12]
 800dccc:	9b05      	ldr	r3, [sp, #20]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd2:	9b05      	ldr	r3, [sp, #20]
 800dcd4:	785b      	ldrb	r3, [r3, #1]
 800dcd6:	9304      	str	r3, [sp, #16]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d028      	beq.n	800dd2e <__hexnan+0x9e>
 800dcdc:	9804      	ldr	r0, [sp, #16]
 800dcde:	f7ff fd77 	bl	800d7d0 <__hexdig_fun>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d154      	bne.n	800dd90 <__hexnan+0x100>
 800dce6:	9b04      	ldr	r3, [sp, #16]
 800dce8:	2b20      	cmp	r3, #32
 800dcea:	d819      	bhi.n	800dd20 <__hexnan+0x90>
 800dcec:	9b03      	ldr	r3, [sp, #12]
 800dcee:	9a07      	ldr	r2, [sp, #28]
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	dd12      	ble.n	800dd1a <__hexnan+0x8a>
 800dcf4:	42b4      	cmp	r4, r6
 800dcf6:	d206      	bcs.n	800dd06 <__hexnan+0x76>
 800dcf8:	2d07      	cmp	r5, #7
 800dcfa:	dc04      	bgt.n	800dd06 <__hexnan+0x76>
 800dcfc:	002a      	movs	r2, r5
 800dcfe:	0031      	movs	r1, r6
 800dd00:	0020      	movs	r0, r4
 800dd02:	f7ff ff9f 	bl	800dc44 <L_shift>
 800dd06:	9b01      	ldr	r3, [sp, #4]
 800dd08:	2508      	movs	r5, #8
 800dd0a:	429c      	cmp	r4, r3
 800dd0c:	d905      	bls.n	800dd1a <__hexnan+0x8a>
 800dd0e:	1f26      	subs	r6, r4, #4
 800dd10:	2500      	movs	r5, #0
 800dd12:	0034      	movs	r4, r6
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	6035      	str	r5, [r6, #0]
 800dd18:	9307      	str	r3, [sp, #28]
 800dd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1c:	9305      	str	r3, [sp, #20]
 800dd1e:	e7d5      	b.n	800dccc <__hexnan+0x3c>
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	2b29      	cmp	r3, #41	; 0x29
 800dd24:	d159      	bne.n	800ddda <__hexnan+0x14a>
 800dd26:	9b05      	ldr	r3, [sp, #20]
 800dd28:	9a08      	ldr	r2, [sp, #32]
 800dd2a:	3302      	adds	r3, #2
 800dd2c:	6013      	str	r3, [r2, #0]
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d052      	beq.n	800ddda <__hexnan+0x14a>
 800dd34:	42b4      	cmp	r4, r6
 800dd36:	d206      	bcs.n	800dd46 <__hexnan+0xb6>
 800dd38:	2d07      	cmp	r5, #7
 800dd3a:	dc04      	bgt.n	800dd46 <__hexnan+0xb6>
 800dd3c:	002a      	movs	r2, r5
 800dd3e:	0031      	movs	r1, r6
 800dd40:	0020      	movs	r0, r4
 800dd42:	f7ff ff7f 	bl	800dc44 <L_shift>
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	429c      	cmp	r4, r3
 800dd4a:	d935      	bls.n	800ddb8 <__hexnan+0x128>
 800dd4c:	001a      	movs	r2, r3
 800dd4e:	0023      	movs	r3, r4
 800dd50:	cb02      	ldmia	r3!, {r1}
 800dd52:	c202      	stmia	r2!, {r1}
 800dd54:	429f      	cmp	r7, r3
 800dd56:	d2fb      	bcs.n	800dd50 <__hexnan+0xc0>
 800dd58:	9b02      	ldr	r3, [sp, #8]
 800dd5a:	1c62      	adds	r2, r4, #1
 800dd5c:	1ed9      	subs	r1, r3, #3
 800dd5e:	2304      	movs	r3, #4
 800dd60:	4291      	cmp	r1, r2
 800dd62:	d305      	bcc.n	800dd70 <__hexnan+0xe0>
 800dd64:	9b02      	ldr	r3, [sp, #8]
 800dd66:	3b04      	subs	r3, #4
 800dd68:	1b1b      	subs	r3, r3, r4
 800dd6a:	089b      	lsrs	r3, r3, #2
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	9a01      	ldr	r2, [sp, #4]
 800dd72:	18d3      	adds	r3, r2, r3
 800dd74:	2200      	movs	r2, #0
 800dd76:	c304      	stmia	r3!, {r2}
 800dd78:	429f      	cmp	r7, r3
 800dd7a:	d2fc      	bcs.n	800dd76 <__hexnan+0xe6>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d104      	bne.n	800dd8c <__hexnan+0xfc>
 800dd82:	9b01      	ldr	r3, [sp, #4]
 800dd84:	429f      	cmp	r7, r3
 800dd86:	d126      	bne.n	800ddd6 <__hexnan+0x146>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	603b      	str	r3, [r7, #0]
 800dd8c:	2005      	movs	r0, #5
 800dd8e:	e025      	b.n	800dddc <__hexnan+0x14c>
 800dd90:	9b03      	ldr	r3, [sp, #12]
 800dd92:	3501      	adds	r5, #1
 800dd94:	3301      	adds	r3, #1
 800dd96:	9303      	str	r3, [sp, #12]
 800dd98:	2d08      	cmp	r5, #8
 800dd9a:	dd06      	ble.n	800ddaa <__hexnan+0x11a>
 800dd9c:	9b01      	ldr	r3, [sp, #4]
 800dd9e:	429c      	cmp	r4, r3
 800dda0:	d9bb      	bls.n	800dd1a <__hexnan+0x8a>
 800dda2:	2300      	movs	r3, #0
 800dda4:	2501      	movs	r5, #1
 800dda6:	3c04      	subs	r4, #4
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	220f      	movs	r2, #15
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	4010      	ands	r0, r2
 800ddb0:	011b      	lsls	r3, r3, #4
 800ddb2:	4303      	orrs	r3, r0
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	e7b0      	b.n	800dd1a <__hexnan+0x8a>
 800ddb8:	9b06      	ldr	r3, [sp, #24]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0de      	beq.n	800dd7c <__hexnan+0xec>
 800ddbe:	2320      	movs	r3, #32
 800ddc0:	9a06      	ldr	r2, [sp, #24]
 800ddc2:	9902      	ldr	r1, [sp, #8]
 800ddc4:	1a9b      	subs	r3, r3, r2
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	4252      	negs	r2, r2
 800ddca:	40da      	lsrs	r2, r3
 800ddcc:	3904      	subs	r1, #4
 800ddce:	680b      	ldr	r3, [r1, #0]
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	600b      	str	r3, [r1, #0]
 800ddd4:	e7d2      	b.n	800dd7c <__hexnan+0xec>
 800ddd6:	3f04      	subs	r7, #4
 800ddd8:	e7d0      	b.n	800dd7c <__hexnan+0xec>
 800ddda:	2004      	movs	r0, #4
 800dddc:	b00b      	add	sp, #44	; 0x2c
 800ddde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dde0 <__ascii_mbtowc>:
 800dde0:	b082      	sub	sp, #8
 800dde2:	2900      	cmp	r1, #0
 800dde4:	d100      	bne.n	800dde8 <__ascii_mbtowc+0x8>
 800dde6:	a901      	add	r1, sp, #4
 800dde8:	1e10      	subs	r0, r2, #0
 800ddea:	d006      	beq.n	800ddfa <__ascii_mbtowc+0x1a>
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d006      	beq.n	800ddfe <__ascii_mbtowc+0x1e>
 800ddf0:	7813      	ldrb	r3, [r2, #0]
 800ddf2:	600b      	str	r3, [r1, #0]
 800ddf4:	7810      	ldrb	r0, [r2, #0]
 800ddf6:	1e43      	subs	r3, r0, #1
 800ddf8:	4198      	sbcs	r0, r3
 800ddfa:	b002      	add	sp, #8
 800ddfc:	4770      	bx	lr
 800ddfe:	2002      	movs	r0, #2
 800de00:	4240      	negs	r0, r0
 800de02:	e7fa      	b.n	800ddfa <__ascii_mbtowc+0x1a>

0800de04 <_realloc_r>:
 800de04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de06:	0007      	movs	r7, r0
 800de08:	000e      	movs	r6, r1
 800de0a:	0014      	movs	r4, r2
 800de0c:	2900      	cmp	r1, #0
 800de0e:	d105      	bne.n	800de1c <_realloc_r+0x18>
 800de10:	0011      	movs	r1, r2
 800de12:	f7fd fde7 	bl	800b9e4 <_malloc_r>
 800de16:	0005      	movs	r5, r0
 800de18:	0028      	movs	r0, r5
 800de1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de1c:	2a00      	cmp	r2, #0
 800de1e:	d103      	bne.n	800de28 <_realloc_r+0x24>
 800de20:	f7fd fd6a 	bl	800b8f8 <_free_r>
 800de24:	0025      	movs	r5, r4
 800de26:	e7f7      	b.n	800de18 <_realloc_r+0x14>
 800de28:	f000 f83f 	bl	800deaa <_malloc_usable_size_r>
 800de2c:	9001      	str	r0, [sp, #4]
 800de2e:	4284      	cmp	r4, r0
 800de30:	d803      	bhi.n	800de3a <_realloc_r+0x36>
 800de32:	0035      	movs	r5, r6
 800de34:	0843      	lsrs	r3, r0, #1
 800de36:	42a3      	cmp	r3, r4
 800de38:	d3ee      	bcc.n	800de18 <_realloc_r+0x14>
 800de3a:	0021      	movs	r1, r4
 800de3c:	0038      	movs	r0, r7
 800de3e:	f7fd fdd1 	bl	800b9e4 <_malloc_r>
 800de42:	1e05      	subs	r5, r0, #0
 800de44:	d0e8      	beq.n	800de18 <_realloc_r+0x14>
 800de46:	9b01      	ldr	r3, [sp, #4]
 800de48:	0022      	movs	r2, r4
 800de4a:	429c      	cmp	r4, r3
 800de4c:	d900      	bls.n	800de50 <_realloc_r+0x4c>
 800de4e:	001a      	movs	r2, r3
 800de50:	0031      	movs	r1, r6
 800de52:	0028      	movs	r0, r5
 800de54:	f7fc fea4 	bl	800aba0 <memcpy>
 800de58:	0031      	movs	r1, r6
 800de5a:	0038      	movs	r0, r7
 800de5c:	f7fd fd4c 	bl	800b8f8 <_free_r>
 800de60:	e7da      	b.n	800de18 <_realloc_r+0x14>

0800de62 <__ascii_wctomb>:
 800de62:	0003      	movs	r3, r0
 800de64:	1e08      	subs	r0, r1, #0
 800de66:	d005      	beq.n	800de74 <__ascii_wctomb+0x12>
 800de68:	2aff      	cmp	r2, #255	; 0xff
 800de6a:	d904      	bls.n	800de76 <__ascii_wctomb+0x14>
 800de6c:	228a      	movs	r2, #138	; 0x8a
 800de6e:	2001      	movs	r0, #1
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	4240      	negs	r0, r0
 800de74:	4770      	bx	lr
 800de76:	2001      	movs	r0, #1
 800de78:	700a      	strb	r2, [r1, #0]
 800de7a:	e7fb      	b.n	800de74 <__ascii_wctomb+0x12>

0800de7c <fiprintf>:
 800de7c:	b40e      	push	{r1, r2, r3}
 800de7e:	b517      	push	{r0, r1, r2, r4, lr}
 800de80:	4c05      	ldr	r4, [pc, #20]	; (800de98 <fiprintf+0x1c>)
 800de82:	ab05      	add	r3, sp, #20
 800de84:	cb04      	ldmia	r3!, {r2}
 800de86:	0001      	movs	r1, r0
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	9301      	str	r3, [sp, #4]
 800de8c:	f000 f83c 	bl	800df08 <_vfiprintf_r>
 800de90:	bc1e      	pop	{r1, r2, r3, r4}
 800de92:	bc08      	pop	{r3}
 800de94:	b003      	add	sp, #12
 800de96:	4718      	bx	r3
 800de98:	20000068 	.word	0x20000068

0800de9c <abort>:
 800de9c:	2006      	movs	r0, #6
 800de9e:	b510      	push	{r4, lr}
 800dea0:	f000 fa1e 	bl	800e2e0 <raise>
 800dea4:	2001      	movs	r0, #1
 800dea6:	f7f5 fadd 	bl	8003464 <_exit>

0800deaa <_malloc_usable_size_r>:
 800deaa:	1f0b      	subs	r3, r1, #4
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	1f18      	subs	r0, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	da01      	bge.n	800deb8 <_malloc_usable_size_r+0xe>
 800deb4:	580b      	ldr	r3, [r1, r0]
 800deb6:	18c0      	adds	r0, r0, r3
 800deb8:	4770      	bx	lr

0800deba <__sfputc_r>:
 800deba:	6893      	ldr	r3, [r2, #8]
 800debc:	b510      	push	{r4, lr}
 800debe:	3b01      	subs	r3, #1
 800dec0:	6093      	str	r3, [r2, #8]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	da04      	bge.n	800ded0 <__sfputc_r+0x16>
 800dec6:	6994      	ldr	r4, [r2, #24]
 800dec8:	42a3      	cmp	r3, r4
 800deca:	db07      	blt.n	800dedc <__sfputc_r+0x22>
 800decc:	290a      	cmp	r1, #10
 800dece:	d005      	beq.n	800dedc <__sfputc_r+0x22>
 800ded0:	6813      	ldr	r3, [r2, #0]
 800ded2:	1c58      	adds	r0, r3, #1
 800ded4:	6010      	str	r0, [r2, #0]
 800ded6:	7019      	strb	r1, [r3, #0]
 800ded8:	0008      	movs	r0, r1
 800deda:	bd10      	pop	{r4, pc}
 800dedc:	f000 f930 	bl	800e140 <__swbuf_r>
 800dee0:	0001      	movs	r1, r0
 800dee2:	e7f9      	b.n	800ded8 <__sfputc_r+0x1e>

0800dee4 <__sfputs_r>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	0006      	movs	r6, r0
 800dee8:	000f      	movs	r7, r1
 800deea:	0014      	movs	r4, r2
 800deec:	18d5      	adds	r5, r2, r3
 800deee:	42ac      	cmp	r4, r5
 800def0:	d101      	bne.n	800def6 <__sfputs_r+0x12>
 800def2:	2000      	movs	r0, #0
 800def4:	e007      	b.n	800df06 <__sfputs_r+0x22>
 800def6:	7821      	ldrb	r1, [r4, #0]
 800def8:	003a      	movs	r2, r7
 800defa:	0030      	movs	r0, r6
 800defc:	f7ff ffdd 	bl	800deba <__sfputc_r>
 800df00:	3401      	adds	r4, #1
 800df02:	1c43      	adds	r3, r0, #1
 800df04:	d1f3      	bne.n	800deee <__sfputs_r+0xa>
 800df06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df08 <_vfiprintf_r>:
 800df08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df0a:	b0a1      	sub	sp, #132	; 0x84
 800df0c:	000f      	movs	r7, r1
 800df0e:	0015      	movs	r5, r2
 800df10:	001e      	movs	r6, r3
 800df12:	9003      	str	r0, [sp, #12]
 800df14:	2800      	cmp	r0, #0
 800df16:	d004      	beq.n	800df22 <_vfiprintf_r+0x1a>
 800df18:	6a03      	ldr	r3, [r0, #32]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <_vfiprintf_r+0x1a>
 800df1e:	f7fc fcaf 	bl	800a880 <__sinit>
 800df22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df24:	07db      	lsls	r3, r3, #31
 800df26:	d405      	bmi.n	800df34 <_vfiprintf_r+0x2c>
 800df28:	89bb      	ldrh	r3, [r7, #12]
 800df2a:	059b      	lsls	r3, r3, #22
 800df2c:	d402      	bmi.n	800df34 <_vfiprintf_r+0x2c>
 800df2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800df30:	f7fc fe29 	bl	800ab86 <__retarget_lock_acquire_recursive>
 800df34:	89bb      	ldrh	r3, [r7, #12]
 800df36:	071b      	lsls	r3, r3, #28
 800df38:	d502      	bpl.n	800df40 <_vfiprintf_r+0x38>
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d113      	bne.n	800df68 <_vfiprintf_r+0x60>
 800df40:	0039      	movs	r1, r7
 800df42:	9803      	ldr	r0, [sp, #12]
 800df44:	f000 f93e 	bl	800e1c4 <__swsetup_r>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d00d      	beq.n	800df68 <_vfiprintf_r+0x60>
 800df4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df4e:	07db      	lsls	r3, r3, #31
 800df50:	d503      	bpl.n	800df5a <_vfiprintf_r+0x52>
 800df52:	2001      	movs	r0, #1
 800df54:	4240      	negs	r0, r0
 800df56:	b021      	add	sp, #132	; 0x84
 800df58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df5a:	89bb      	ldrh	r3, [r7, #12]
 800df5c:	059b      	lsls	r3, r3, #22
 800df5e:	d4f8      	bmi.n	800df52 <_vfiprintf_r+0x4a>
 800df60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800df62:	f7fc fe11 	bl	800ab88 <__retarget_lock_release_recursive>
 800df66:	e7f4      	b.n	800df52 <_vfiprintf_r+0x4a>
 800df68:	2300      	movs	r3, #0
 800df6a:	ac08      	add	r4, sp, #32
 800df6c:	6163      	str	r3, [r4, #20]
 800df6e:	3320      	adds	r3, #32
 800df70:	7663      	strb	r3, [r4, #25]
 800df72:	3310      	adds	r3, #16
 800df74:	76a3      	strb	r3, [r4, #26]
 800df76:	9607      	str	r6, [sp, #28]
 800df78:	002e      	movs	r6, r5
 800df7a:	7833      	ldrb	r3, [r6, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <_vfiprintf_r+0x7c>
 800df80:	2b25      	cmp	r3, #37	; 0x25
 800df82:	d148      	bne.n	800e016 <_vfiprintf_r+0x10e>
 800df84:	1b73      	subs	r3, r6, r5
 800df86:	9305      	str	r3, [sp, #20]
 800df88:	42ae      	cmp	r6, r5
 800df8a:	d00b      	beq.n	800dfa4 <_vfiprintf_r+0x9c>
 800df8c:	002a      	movs	r2, r5
 800df8e:	0039      	movs	r1, r7
 800df90:	9803      	ldr	r0, [sp, #12]
 800df92:	f7ff ffa7 	bl	800dee4 <__sfputs_r>
 800df96:	3001      	adds	r0, #1
 800df98:	d100      	bne.n	800df9c <_vfiprintf_r+0x94>
 800df9a:	e0af      	b.n	800e0fc <_vfiprintf_r+0x1f4>
 800df9c:	6963      	ldr	r3, [r4, #20]
 800df9e:	9a05      	ldr	r2, [sp, #20]
 800dfa0:	189b      	adds	r3, r3, r2
 800dfa2:	6163      	str	r3, [r4, #20]
 800dfa4:	7833      	ldrb	r3, [r6, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d100      	bne.n	800dfac <_vfiprintf_r+0xa4>
 800dfaa:	e0a7      	b.n	800e0fc <_vfiprintf_r+0x1f4>
 800dfac:	2201      	movs	r2, #1
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4252      	negs	r2, r2
 800dfb2:	6062      	str	r2, [r4, #4]
 800dfb4:	a904      	add	r1, sp, #16
 800dfb6:	3254      	adds	r2, #84	; 0x54
 800dfb8:	1852      	adds	r2, r2, r1
 800dfba:	1c75      	adds	r5, r6, #1
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	60e3      	str	r3, [r4, #12]
 800dfc0:	60a3      	str	r3, [r4, #8]
 800dfc2:	7013      	strb	r3, [r2, #0]
 800dfc4:	65a3      	str	r3, [r4, #88]	; 0x58
 800dfc6:	4b59      	ldr	r3, [pc, #356]	; (800e12c <_vfiprintf_r+0x224>)
 800dfc8:	2205      	movs	r2, #5
 800dfca:	0018      	movs	r0, r3
 800dfcc:	7829      	ldrb	r1, [r5, #0]
 800dfce:	9305      	str	r3, [sp, #20]
 800dfd0:	f7fc fddb 	bl	800ab8a <memchr>
 800dfd4:	1c6e      	adds	r6, r5, #1
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d11f      	bne.n	800e01a <_vfiprintf_r+0x112>
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	06d3      	lsls	r3, r2, #27
 800dfde:	d504      	bpl.n	800dfea <_vfiprintf_r+0xe2>
 800dfe0:	2353      	movs	r3, #83	; 0x53
 800dfe2:	a904      	add	r1, sp, #16
 800dfe4:	185b      	adds	r3, r3, r1
 800dfe6:	2120      	movs	r1, #32
 800dfe8:	7019      	strb	r1, [r3, #0]
 800dfea:	0713      	lsls	r3, r2, #28
 800dfec:	d504      	bpl.n	800dff8 <_vfiprintf_r+0xf0>
 800dfee:	2353      	movs	r3, #83	; 0x53
 800dff0:	a904      	add	r1, sp, #16
 800dff2:	185b      	adds	r3, r3, r1
 800dff4:	212b      	movs	r1, #43	; 0x2b
 800dff6:	7019      	strb	r1, [r3, #0]
 800dff8:	782b      	ldrb	r3, [r5, #0]
 800dffa:	2b2a      	cmp	r3, #42	; 0x2a
 800dffc:	d016      	beq.n	800e02c <_vfiprintf_r+0x124>
 800dffe:	002e      	movs	r6, r5
 800e000:	2100      	movs	r1, #0
 800e002:	200a      	movs	r0, #10
 800e004:	68e3      	ldr	r3, [r4, #12]
 800e006:	7832      	ldrb	r2, [r6, #0]
 800e008:	1c75      	adds	r5, r6, #1
 800e00a:	3a30      	subs	r2, #48	; 0x30
 800e00c:	2a09      	cmp	r2, #9
 800e00e:	d94e      	bls.n	800e0ae <_vfiprintf_r+0x1a6>
 800e010:	2900      	cmp	r1, #0
 800e012:	d111      	bne.n	800e038 <_vfiprintf_r+0x130>
 800e014:	e017      	b.n	800e046 <_vfiprintf_r+0x13e>
 800e016:	3601      	adds	r6, #1
 800e018:	e7af      	b.n	800df7a <_vfiprintf_r+0x72>
 800e01a:	9b05      	ldr	r3, [sp, #20]
 800e01c:	6822      	ldr	r2, [r4, #0]
 800e01e:	1ac0      	subs	r0, r0, r3
 800e020:	2301      	movs	r3, #1
 800e022:	4083      	lsls	r3, r0
 800e024:	4313      	orrs	r3, r2
 800e026:	0035      	movs	r5, r6
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	e7cc      	b.n	800dfc6 <_vfiprintf_r+0xbe>
 800e02c:	9b07      	ldr	r3, [sp, #28]
 800e02e:	1d19      	adds	r1, r3, #4
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	9107      	str	r1, [sp, #28]
 800e034:	2b00      	cmp	r3, #0
 800e036:	db01      	blt.n	800e03c <_vfiprintf_r+0x134>
 800e038:	930b      	str	r3, [sp, #44]	; 0x2c
 800e03a:	e004      	b.n	800e046 <_vfiprintf_r+0x13e>
 800e03c:	425b      	negs	r3, r3
 800e03e:	60e3      	str	r3, [r4, #12]
 800e040:	2302      	movs	r3, #2
 800e042:	4313      	orrs	r3, r2
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	7833      	ldrb	r3, [r6, #0]
 800e048:	2b2e      	cmp	r3, #46	; 0x2e
 800e04a:	d10a      	bne.n	800e062 <_vfiprintf_r+0x15a>
 800e04c:	7873      	ldrb	r3, [r6, #1]
 800e04e:	2b2a      	cmp	r3, #42	; 0x2a
 800e050:	d135      	bne.n	800e0be <_vfiprintf_r+0x1b6>
 800e052:	9b07      	ldr	r3, [sp, #28]
 800e054:	3602      	adds	r6, #2
 800e056:	1d1a      	adds	r2, r3, #4
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	9207      	str	r2, [sp, #28]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	db2b      	blt.n	800e0b8 <_vfiprintf_r+0x1b0>
 800e060:	9309      	str	r3, [sp, #36]	; 0x24
 800e062:	4d33      	ldr	r5, [pc, #204]	; (800e130 <_vfiprintf_r+0x228>)
 800e064:	2203      	movs	r2, #3
 800e066:	0028      	movs	r0, r5
 800e068:	7831      	ldrb	r1, [r6, #0]
 800e06a:	f7fc fd8e 	bl	800ab8a <memchr>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d006      	beq.n	800e080 <_vfiprintf_r+0x178>
 800e072:	2340      	movs	r3, #64	; 0x40
 800e074:	1b40      	subs	r0, r0, r5
 800e076:	4083      	lsls	r3, r0
 800e078:	6822      	ldr	r2, [r4, #0]
 800e07a:	3601      	adds	r6, #1
 800e07c:	4313      	orrs	r3, r2
 800e07e:	6023      	str	r3, [r4, #0]
 800e080:	7831      	ldrb	r1, [r6, #0]
 800e082:	2206      	movs	r2, #6
 800e084:	482b      	ldr	r0, [pc, #172]	; (800e134 <_vfiprintf_r+0x22c>)
 800e086:	1c75      	adds	r5, r6, #1
 800e088:	7621      	strb	r1, [r4, #24]
 800e08a:	f7fc fd7e 	bl	800ab8a <memchr>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d043      	beq.n	800e11a <_vfiprintf_r+0x212>
 800e092:	4b29      	ldr	r3, [pc, #164]	; (800e138 <_vfiprintf_r+0x230>)
 800e094:	2b00      	cmp	r3, #0
 800e096:	d125      	bne.n	800e0e4 <_vfiprintf_r+0x1dc>
 800e098:	2207      	movs	r2, #7
 800e09a:	9b07      	ldr	r3, [sp, #28]
 800e09c:	3307      	adds	r3, #7
 800e09e:	4393      	bics	r3, r2
 800e0a0:	3308      	adds	r3, #8
 800e0a2:	9307      	str	r3, [sp, #28]
 800e0a4:	6963      	ldr	r3, [r4, #20]
 800e0a6:	9a04      	ldr	r2, [sp, #16]
 800e0a8:	189b      	adds	r3, r3, r2
 800e0aa:	6163      	str	r3, [r4, #20]
 800e0ac:	e764      	b.n	800df78 <_vfiprintf_r+0x70>
 800e0ae:	4343      	muls	r3, r0
 800e0b0:	002e      	movs	r6, r5
 800e0b2:	2101      	movs	r1, #1
 800e0b4:	189b      	adds	r3, r3, r2
 800e0b6:	e7a6      	b.n	800e006 <_vfiprintf_r+0xfe>
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	425b      	negs	r3, r3
 800e0bc:	e7d0      	b.n	800e060 <_vfiprintf_r+0x158>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	200a      	movs	r0, #10
 800e0c2:	001a      	movs	r2, r3
 800e0c4:	3601      	adds	r6, #1
 800e0c6:	6063      	str	r3, [r4, #4]
 800e0c8:	7831      	ldrb	r1, [r6, #0]
 800e0ca:	1c75      	adds	r5, r6, #1
 800e0cc:	3930      	subs	r1, #48	; 0x30
 800e0ce:	2909      	cmp	r1, #9
 800e0d0:	d903      	bls.n	800e0da <_vfiprintf_r+0x1d2>
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0c5      	beq.n	800e062 <_vfiprintf_r+0x15a>
 800e0d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0d8:	e7c3      	b.n	800e062 <_vfiprintf_r+0x15a>
 800e0da:	4342      	muls	r2, r0
 800e0dc:	002e      	movs	r6, r5
 800e0de:	2301      	movs	r3, #1
 800e0e0:	1852      	adds	r2, r2, r1
 800e0e2:	e7f1      	b.n	800e0c8 <_vfiprintf_r+0x1c0>
 800e0e4:	aa07      	add	r2, sp, #28
 800e0e6:	9200      	str	r2, [sp, #0]
 800e0e8:	0021      	movs	r1, r4
 800e0ea:	003a      	movs	r2, r7
 800e0ec:	4b13      	ldr	r3, [pc, #76]	; (800e13c <_vfiprintf_r+0x234>)
 800e0ee:	9803      	ldr	r0, [sp, #12]
 800e0f0:	f7fb fd58 	bl	8009ba4 <_printf_float>
 800e0f4:	9004      	str	r0, [sp, #16]
 800e0f6:	9b04      	ldr	r3, [sp, #16]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	d1d3      	bne.n	800e0a4 <_vfiprintf_r+0x19c>
 800e0fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0fe:	07db      	lsls	r3, r3, #31
 800e100:	d405      	bmi.n	800e10e <_vfiprintf_r+0x206>
 800e102:	89bb      	ldrh	r3, [r7, #12]
 800e104:	059b      	lsls	r3, r3, #22
 800e106:	d402      	bmi.n	800e10e <_vfiprintf_r+0x206>
 800e108:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e10a:	f7fc fd3d 	bl	800ab88 <__retarget_lock_release_recursive>
 800e10e:	89bb      	ldrh	r3, [r7, #12]
 800e110:	065b      	lsls	r3, r3, #25
 800e112:	d500      	bpl.n	800e116 <_vfiprintf_r+0x20e>
 800e114:	e71d      	b.n	800df52 <_vfiprintf_r+0x4a>
 800e116:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e118:	e71d      	b.n	800df56 <_vfiprintf_r+0x4e>
 800e11a:	aa07      	add	r2, sp, #28
 800e11c:	9200      	str	r2, [sp, #0]
 800e11e:	0021      	movs	r1, r4
 800e120:	003a      	movs	r2, r7
 800e122:	4b06      	ldr	r3, [pc, #24]	; (800e13c <_vfiprintf_r+0x234>)
 800e124:	9803      	ldr	r0, [sp, #12]
 800e126:	f7fc f803 	bl	800a130 <_printf_i>
 800e12a:	e7e3      	b.n	800e0f4 <_vfiprintf_r+0x1ec>
 800e12c:	0800e981 	.word	0x0800e981
 800e130:	0800e987 	.word	0x0800e987
 800e134:	0800e98b 	.word	0x0800e98b
 800e138:	08009ba5 	.word	0x08009ba5
 800e13c:	0800dee5 	.word	0x0800dee5

0800e140 <__swbuf_r>:
 800e140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e142:	0006      	movs	r6, r0
 800e144:	000d      	movs	r5, r1
 800e146:	0014      	movs	r4, r2
 800e148:	2800      	cmp	r0, #0
 800e14a:	d004      	beq.n	800e156 <__swbuf_r+0x16>
 800e14c:	6a03      	ldr	r3, [r0, #32]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <__swbuf_r+0x16>
 800e152:	f7fc fb95 	bl	800a880 <__sinit>
 800e156:	69a3      	ldr	r3, [r4, #24]
 800e158:	60a3      	str	r3, [r4, #8]
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	071b      	lsls	r3, r3, #28
 800e15e:	d528      	bpl.n	800e1b2 <__swbuf_r+0x72>
 800e160:	6923      	ldr	r3, [r4, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d025      	beq.n	800e1b2 <__swbuf_r+0x72>
 800e166:	6923      	ldr	r3, [r4, #16]
 800e168:	6820      	ldr	r0, [r4, #0]
 800e16a:	b2ef      	uxtb	r7, r5
 800e16c:	1ac0      	subs	r0, r0, r3
 800e16e:	6963      	ldr	r3, [r4, #20]
 800e170:	b2ed      	uxtb	r5, r5
 800e172:	4283      	cmp	r3, r0
 800e174:	dc05      	bgt.n	800e182 <__swbuf_r+0x42>
 800e176:	0021      	movs	r1, r4
 800e178:	0030      	movs	r0, r6
 800e17a:	f7ff fa21 	bl	800d5c0 <_fflush_r>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d11d      	bne.n	800e1be <__swbuf_r+0x7e>
 800e182:	68a3      	ldr	r3, [r4, #8]
 800e184:	3001      	adds	r0, #1
 800e186:	3b01      	subs	r3, #1
 800e188:	60a3      	str	r3, [r4, #8]
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	1c5a      	adds	r2, r3, #1
 800e18e:	6022      	str	r2, [r4, #0]
 800e190:	701f      	strb	r7, [r3, #0]
 800e192:	6963      	ldr	r3, [r4, #20]
 800e194:	4283      	cmp	r3, r0
 800e196:	d004      	beq.n	800e1a2 <__swbuf_r+0x62>
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	07db      	lsls	r3, r3, #31
 800e19c:	d507      	bpl.n	800e1ae <__swbuf_r+0x6e>
 800e19e:	2d0a      	cmp	r5, #10
 800e1a0:	d105      	bne.n	800e1ae <__swbuf_r+0x6e>
 800e1a2:	0021      	movs	r1, r4
 800e1a4:	0030      	movs	r0, r6
 800e1a6:	f7ff fa0b 	bl	800d5c0 <_fflush_r>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d107      	bne.n	800e1be <__swbuf_r+0x7e>
 800e1ae:	0028      	movs	r0, r5
 800e1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b2:	0021      	movs	r1, r4
 800e1b4:	0030      	movs	r0, r6
 800e1b6:	f000 f805 	bl	800e1c4 <__swsetup_r>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d0d3      	beq.n	800e166 <__swbuf_r+0x26>
 800e1be:	2501      	movs	r5, #1
 800e1c0:	426d      	negs	r5, r5
 800e1c2:	e7f4      	b.n	800e1ae <__swbuf_r+0x6e>

0800e1c4 <__swsetup_r>:
 800e1c4:	4b30      	ldr	r3, [pc, #192]	; (800e288 <__swsetup_r+0xc4>)
 800e1c6:	b570      	push	{r4, r5, r6, lr}
 800e1c8:	0005      	movs	r5, r0
 800e1ca:	6818      	ldr	r0, [r3, #0]
 800e1cc:	000c      	movs	r4, r1
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d004      	beq.n	800e1dc <__swsetup_r+0x18>
 800e1d2:	6a03      	ldr	r3, [r0, #32]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <__swsetup_r+0x18>
 800e1d8:	f7fc fb52 	bl	800a880 <__sinit>
 800e1dc:	230c      	movs	r3, #12
 800e1de:	5ee2      	ldrsh	r2, [r4, r3]
 800e1e0:	b293      	uxth	r3, r2
 800e1e2:	0711      	lsls	r1, r2, #28
 800e1e4:	d423      	bmi.n	800e22e <__swsetup_r+0x6a>
 800e1e6:	06d9      	lsls	r1, r3, #27
 800e1e8:	d407      	bmi.n	800e1fa <__swsetup_r+0x36>
 800e1ea:	2309      	movs	r3, #9
 800e1ec:	2001      	movs	r0, #1
 800e1ee:	602b      	str	r3, [r5, #0]
 800e1f0:	3337      	adds	r3, #55	; 0x37
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	81a3      	strh	r3, [r4, #12]
 800e1f6:	4240      	negs	r0, r0
 800e1f8:	bd70      	pop	{r4, r5, r6, pc}
 800e1fa:	075b      	lsls	r3, r3, #29
 800e1fc:	d513      	bpl.n	800e226 <__swsetup_r+0x62>
 800e1fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e200:	2900      	cmp	r1, #0
 800e202:	d008      	beq.n	800e216 <__swsetup_r+0x52>
 800e204:	0023      	movs	r3, r4
 800e206:	3344      	adds	r3, #68	; 0x44
 800e208:	4299      	cmp	r1, r3
 800e20a:	d002      	beq.n	800e212 <__swsetup_r+0x4e>
 800e20c:	0028      	movs	r0, r5
 800e20e:	f7fd fb73 	bl	800b8f8 <_free_r>
 800e212:	2300      	movs	r3, #0
 800e214:	6363      	str	r3, [r4, #52]	; 0x34
 800e216:	2224      	movs	r2, #36	; 0x24
 800e218:	89a3      	ldrh	r3, [r4, #12]
 800e21a:	4393      	bics	r3, r2
 800e21c:	81a3      	strh	r3, [r4, #12]
 800e21e:	2300      	movs	r3, #0
 800e220:	6063      	str	r3, [r4, #4]
 800e222:	6923      	ldr	r3, [r4, #16]
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	2308      	movs	r3, #8
 800e228:	89a2      	ldrh	r2, [r4, #12]
 800e22a:	4313      	orrs	r3, r2
 800e22c:	81a3      	strh	r3, [r4, #12]
 800e22e:	6923      	ldr	r3, [r4, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10b      	bne.n	800e24c <__swsetup_r+0x88>
 800e234:	21a0      	movs	r1, #160	; 0xa0
 800e236:	2280      	movs	r2, #128	; 0x80
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	0089      	lsls	r1, r1, #2
 800e23c:	0092      	lsls	r2, r2, #2
 800e23e:	400b      	ands	r3, r1
 800e240:	4293      	cmp	r3, r2
 800e242:	d003      	beq.n	800e24c <__swsetup_r+0x88>
 800e244:	0021      	movs	r1, r4
 800e246:	0028      	movs	r0, r5
 800e248:	f000 f892 	bl	800e370 <__smakebuf_r>
 800e24c:	220c      	movs	r2, #12
 800e24e:	5ea3      	ldrsh	r3, [r4, r2]
 800e250:	2001      	movs	r0, #1
 800e252:	001a      	movs	r2, r3
 800e254:	b299      	uxth	r1, r3
 800e256:	4002      	ands	r2, r0
 800e258:	4203      	tst	r3, r0
 800e25a:	d00f      	beq.n	800e27c <__swsetup_r+0xb8>
 800e25c:	2200      	movs	r2, #0
 800e25e:	60a2      	str	r2, [r4, #8]
 800e260:	6962      	ldr	r2, [r4, #20]
 800e262:	4252      	negs	r2, r2
 800e264:	61a2      	str	r2, [r4, #24]
 800e266:	2000      	movs	r0, #0
 800e268:	6922      	ldr	r2, [r4, #16]
 800e26a:	4282      	cmp	r2, r0
 800e26c:	d1c4      	bne.n	800e1f8 <__swsetup_r+0x34>
 800e26e:	0609      	lsls	r1, r1, #24
 800e270:	d5c2      	bpl.n	800e1f8 <__swsetup_r+0x34>
 800e272:	2240      	movs	r2, #64	; 0x40
 800e274:	4313      	orrs	r3, r2
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	3801      	subs	r0, #1
 800e27a:	e7bd      	b.n	800e1f8 <__swsetup_r+0x34>
 800e27c:	0788      	lsls	r0, r1, #30
 800e27e:	d400      	bmi.n	800e282 <__swsetup_r+0xbe>
 800e280:	6962      	ldr	r2, [r4, #20]
 800e282:	60a2      	str	r2, [r4, #8]
 800e284:	e7ef      	b.n	800e266 <__swsetup_r+0xa2>
 800e286:	46c0      	nop			; (mov r8, r8)
 800e288:	20000068 	.word	0x20000068

0800e28c <_raise_r>:
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	0004      	movs	r4, r0
 800e290:	000d      	movs	r5, r1
 800e292:	291f      	cmp	r1, #31
 800e294:	d904      	bls.n	800e2a0 <_raise_r+0x14>
 800e296:	2316      	movs	r3, #22
 800e298:	6003      	str	r3, [r0, #0]
 800e29a:	2001      	movs	r0, #1
 800e29c:	4240      	negs	r0, r0
 800e29e:	bd70      	pop	{r4, r5, r6, pc}
 800e2a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d004      	beq.n	800e2b0 <_raise_r+0x24>
 800e2a6:	008a      	lsls	r2, r1, #2
 800e2a8:	189b      	adds	r3, r3, r2
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	2a00      	cmp	r2, #0
 800e2ae:	d108      	bne.n	800e2c2 <_raise_r+0x36>
 800e2b0:	0020      	movs	r0, r4
 800e2b2:	f000 f831 	bl	800e318 <_getpid_r>
 800e2b6:	002a      	movs	r2, r5
 800e2b8:	0001      	movs	r1, r0
 800e2ba:	0020      	movs	r0, r4
 800e2bc:	f000 f81a 	bl	800e2f4 <_kill_r>
 800e2c0:	e7ed      	b.n	800e29e <_raise_r+0x12>
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	2a01      	cmp	r2, #1
 800e2c6:	d0ea      	beq.n	800e29e <_raise_r+0x12>
 800e2c8:	1c51      	adds	r1, r2, #1
 800e2ca:	d103      	bne.n	800e2d4 <_raise_r+0x48>
 800e2cc:	2316      	movs	r3, #22
 800e2ce:	3001      	adds	r0, #1
 800e2d0:	6023      	str	r3, [r4, #0]
 800e2d2:	e7e4      	b.n	800e29e <_raise_r+0x12>
 800e2d4:	2400      	movs	r4, #0
 800e2d6:	0028      	movs	r0, r5
 800e2d8:	601c      	str	r4, [r3, #0]
 800e2da:	4790      	blx	r2
 800e2dc:	0020      	movs	r0, r4
 800e2de:	e7de      	b.n	800e29e <_raise_r+0x12>

0800e2e0 <raise>:
 800e2e0:	b510      	push	{r4, lr}
 800e2e2:	4b03      	ldr	r3, [pc, #12]	; (800e2f0 <raise+0x10>)
 800e2e4:	0001      	movs	r1, r0
 800e2e6:	6818      	ldr	r0, [r3, #0]
 800e2e8:	f7ff ffd0 	bl	800e28c <_raise_r>
 800e2ec:	bd10      	pop	{r4, pc}
 800e2ee:	46c0      	nop			; (mov r8, r8)
 800e2f0:	20000068 	.word	0x20000068

0800e2f4 <_kill_r>:
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	b570      	push	{r4, r5, r6, lr}
 800e2f8:	4d06      	ldr	r5, [pc, #24]	; (800e314 <_kill_r+0x20>)
 800e2fa:	0004      	movs	r4, r0
 800e2fc:	0008      	movs	r0, r1
 800e2fe:	0011      	movs	r1, r2
 800e300:	602b      	str	r3, [r5, #0]
 800e302:	f7f5 f89f 	bl	8003444 <_kill>
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	d103      	bne.n	800e312 <_kill_r+0x1e>
 800e30a:	682b      	ldr	r3, [r5, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d000      	beq.n	800e312 <_kill_r+0x1e>
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	bd70      	pop	{r4, r5, r6, pc}
 800e314:	20002208 	.word	0x20002208

0800e318 <_getpid_r>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	f7f5 f88d 	bl	8003438 <_getpid>
 800e31e:	bd10      	pop	{r4, pc}

0800e320 <__swhatbuf_r>:
 800e320:	b570      	push	{r4, r5, r6, lr}
 800e322:	000e      	movs	r6, r1
 800e324:	001d      	movs	r5, r3
 800e326:	230e      	movs	r3, #14
 800e328:	5ec9      	ldrsh	r1, [r1, r3]
 800e32a:	0014      	movs	r4, r2
 800e32c:	b096      	sub	sp, #88	; 0x58
 800e32e:	2900      	cmp	r1, #0
 800e330:	da0c      	bge.n	800e34c <__swhatbuf_r+0x2c>
 800e332:	89b2      	ldrh	r2, [r6, #12]
 800e334:	2380      	movs	r3, #128	; 0x80
 800e336:	0011      	movs	r1, r2
 800e338:	4019      	ands	r1, r3
 800e33a:	421a      	tst	r2, r3
 800e33c:	d013      	beq.n	800e366 <__swhatbuf_r+0x46>
 800e33e:	2100      	movs	r1, #0
 800e340:	3b40      	subs	r3, #64	; 0x40
 800e342:	2000      	movs	r0, #0
 800e344:	6029      	str	r1, [r5, #0]
 800e346:	6023      	str	r3, [r4, #0]
 800e348:	b016      	add	sp, #88	; 0x58
 800e34a:	bd70      	pop	{r4, r5, r6, pc}
 800e34c:	466a      	mov	r2, sp
 800e34e:	f000 f84d 	bl	800e3ec <_fstat_r>
 800e352:	2800      	cmp	r0, #0
 800e354:	dbed      	blt.n	800e332 <__swhatbuf_r+0x12>
 800e356:	23f0      	movs	r3, #240	; 0xf0
 800e358:	9901      	ldr	r1, [sp, #4]
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	4019      	ands	r1, r3
 800e35e:	4b03      	ldr	r3, [pc, #12]	; (800e36c <__swhatbuf_r+0x4c>)
 800e360:	18c9      	adds	r1, r1, r3
 800e362:	424b      	negs	r3, r1
 800e364:	4159      	adcs	r1, r3
 800e366:	2380      	movs	r3, #128	; 0x80
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	e7ea      	b.n	800e342 <__swhatbuf_r+0x22>
 800e36c:	ffffe000 	.word	0xffffe000

0800e370 <__smakebuf_r>:
 800e370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e372:	2602      	movs	r6, #2
 800e374:	898b      	ldrh	r3, [r1, #12]
 800e376:	0005      	movs	r5, r0
 800e378:	000c      	movs	r4, r1
 800e37a:	4233      	tst	r3, r6
 800e37c:	d006      	beq.n	800e38c <__smakebuf_r+0x1c>
 800e37e:	0023      	movs	r3, r4
 800e380:	3347      	adds	r3, #71	; 0x47
 800e382:	6023      	str	r3, [r4, #0]
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	2301      	movs	r3, #1
 800e388:	6163      	str	r3, [r4, #20]
 800e38a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e38c:	466a      	mov	r2, sp
 800e38e:	ab01      	add	r3, sp, #4
 800e390:	f7ff ffc6 	bl	800e320 <__swhatbuf_r>
 800e394:	9900      	ldr	r1, [sp, #0]
 800e396:	0007      	movs	r7, r0
 800e398:	0028      	movs	r0, r5
 800e39a:	f7fd fb23 	bl	800b9e4 <_malloc_r>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d108      	bne.n	800e3b4 <__smakebuf_r+0x44>
 800e3a2:	220c      	movs	r2, #12
 800e3a4:	5ea3      	ldrsh	r3, [r4, r2]
 800e3a6:	059a      	lsls	r2, r3, #22
 800e3a8:	d4ef      	bmi.n	800e38a <__smakebuf_r+0x1a>
 800e3aa:	2203      	movs	r2, #3
 800e3ac:	4393      	bics	r3, r2
 800e3ae:	431e      	orrs	r6, r3
 800e3b0:	81a6      	strh	r6, [r4, #12]
 800e3b2:	e7e4      	b.n	800e37e <__smakebuf_r+0xe>
 800e3b4:	2380      	movs	r3, #128	; 0x80
 800e3b6:	89a2      	ldrh	r2, [r4, #12]
 800e3b8:	6020      	str	r0, [r4, #0]
 800e3ba:	4313      	orrs	r3, r2
 800e3bc:	81a3      	strh	r3, [r4, #12]
 800e3be:	9b00      	ldr	r3, [sp, #0]
 800e3c0:	6120      	str	r0, [r4, #16]
 800e3c2:	6163      	str	r3, [r4, #20]
 800e3c4:	9b01      	ldr	r3, [sp, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00c      	beq.n	800e3e4 <__smakebuf_r+0x74>
 800e3ca:	0028      	movs	r0, r5
 800e3cc:	230e      	movs	r3, #14
 800e3ce:	5ee1      	ldrsh	r1, [r4, r3]
 800e3d0:	f000 f81e 	bl	800e410 <_isatty_r>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d005      	beq.n	800e3e4 <__smakebuf_r+0x74>
 800e3d8:	2303      	movs	r3, #3
 800e3da:	89a2      	ldrh	r2, [r4, #12]
 800e3dc:	439a      	bics	r2, r3
 800e3de:	3b02      	subs	r3, #2
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	81a3      	strh	r3, [r4, #12]
 800e3e4:	89a3      	ldrh	r3, [r4, #12]
 800e3e6:	433b      	orrs	r3, r7
 800e3e8:	81a3      	strh	r3, [r4, #12]
 800e3ea:	e7ce      	b.n	800e38a <__smakebuf_r+0x1a>

0800e3ec <_fstat_r>:
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	b570      	push	{r4, r5, r6, lr}
 800e3f0:	4d06      	ldr	r5, [pc, #24]	; (800e40c <_fstat_r+0x20>)
 800e3f2:	0004      	movs	r4, r0
 800e3f4:	0008      	movs	r0, r1
 800e3f6:	0011      	movs	r1, r2
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	f7f5 f882 	bl	8003502 <_fstat>
 800e3fe:	1c43      	adds	r3, r0, #1
 800e400:	d103      	bne.n	800e40a <_fstat_r+0x1e>
 800e402:	682b      	ldr	r3, [r5, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d000      	beq.n	800e40a <_fstat_r+0x1e>
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
 800e40c:	20002208 	.word	0x20002208

0800e410 <_isatty_r>:
 800e410:	2300      	movs	r3, #0
 800e412:	b570      	push	{r4, r5, r6, lr}
 800e414:	4d06      	ldr	r5, [pc, #24]	; (800e430 <_isatty_r+0x20>)
 800e416:	0004      	movs	r4, r0
 800e418:	0008      	movs	r0, r1
 800e41a:	602b      	str	r3, [r5, #0]
 800e41c:	f7f5 f87f 	bl	800351e <_isatty>
 800e420:	1c43      	adds	r3, r0, #1
 800e422:	d103      	bne.n	800e42c <_isatty_r+0x1c>
 800e424:	682b      	ldr	r3, [r5, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d000      	beq.n	800e42c <_isatty_r+0x1c>
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	bd70      	pop	{r4, r5, r6, pc}
 800e42e:	46c0      	nop			; (mov r8, r8)
 800e430:	20002208 	.word	0x20002208

0800e434 <_init>:
 800e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e436:	46c0      	nop			; (mov r8, r8)
 800e438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e43a:	bc08      	pop	{r3}
 800e43c:	469e      	mov	lr, r3
 800e43e:	4770      	bx	lr

0800e440 <_fini>:
 800e440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e442:	46c0      	nop			; (mov r8, r8)
 800e444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e446:	bc08      	pop	{r3}
 800e448:	469e      	mov	lr, r3
 800e44a:	4770      	bx	lr
