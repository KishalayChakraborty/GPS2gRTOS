
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166bc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d80  08016780  08016780  00026780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018500  08018500  000302e0  2**0
                  CONTENTS
  4 .ARM          00000000  08018500  08018500  000302e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018500  08018500  000302e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018500  08018500  00028500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018504  08018504  00028504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08018508  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055a0  200002e0  080187e8  000302e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005880  080187e8  00035880  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 13 .debug_info   000255ff  00000000  00000000  0003034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b5  00000000  00000000  0005594a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002270  00000000  00000000  0005a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b0f  00000000  00000000  0005c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000621f  00000000  00000000  0005e07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026833  00000000  00000000  0006429e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abddc  00000000  00000000  0008aad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009980  00000000  00000000  001368b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00140230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e0 	.word	0x200002e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08016764 	.word	0x08016764

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e4 	.word	0x200002e4
 8000104:	08016764 	.word	0x08016764

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	08017e50 	.word	0x08017e50
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	08017e90 	.word	0x08017e90

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	08017ed0 	.word	0x08017ed0
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800328c:	f3bf 8f4f 	dsb	sy
}
 8003290:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <__NVIC_SystemReset+0x1c>)
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <__NVIC_SystemReset+0x20>)
 8003296:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003298:	f3bf 8f4f 	dsb	sy
}
 800329c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	e7fd      	b.n	800329e <__NVIC_SystemReset+0x16>
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	05fa0004 	.word	0x05fa0004

080032ac <Read_DI_IN1>:

/* Digital Output Function Prototypes-----------------*/


/* Digital Status Read Function Definition-----------------*/
static int Read_DI_IN1(){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	23a0      	movs	r3, #160	; 0xa0
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	0011      	movs	r1, r2
 80032bc:	0018      	movs	r0, r3
 80032be:	f006 ffdd 	bl	800a27c <HAL_GPIO_ReadPin>
 80032c2:	0003      	movs	r3, r0
 80032c4:	607b      	str	r3, [r7, #4]
	return val;
 80032c6:	687b      	ldr	r3, [r7, #4]
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <Read_DI_IN2>:
static int Read_DI_IN2(){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <Read_DI_IN2+0x24>)
 80032dc:	0019      	movs	r1, r3
 80032de:	0010      	movs	r0, r2
 80032e0:	f006 ffcc 	bl	800a27c <HAL_GPIO_ReadPin>
 80032e4:	0003      	movs	r3, r0
 80032e6:	607b      	str	r3, [r7, #4]
	return val;
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	50000400 	.word	0x50000400

080032f8 <Read_DI_IN3>:
static int Read_DI_IN3(){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <Read_DI_IN3+0x24>)
 8003304:	0019      	movs	r1, r3
 8003306:	0010      	movs	r0, r2
 8003308:	f006 ffb8 	bl	800a27c <HAL_GPIO_ReadPin>
 800330c:	0003      	movs	r3, r0
 800330e:	607b      	str	r3, [r7, #4]
	return val;
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	50000400 	.word	0x50000400

08003320 <Read_DI_MAINS_STATE>:
static int Read_DI_MAINS_STATE(){
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	4a06      	ldr	r2, [pc, #24]	; (8003344 <Read_DI_MAINS_STATE+0x24>)
 800332c:	0019      	movs	r1, r3
 800332e:	0010      	movs	r0, r2
 8003330:	f006 ffa4 	bl	800a27c <HAL_GPIO_ReadPin>
 8003334:	0003      	movs	r3, r0
 8003336:	607b      	str	r3, [r7, #4]
	return val;
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	50000400 	.word	0x50000400

08003348 <Read_DI_ACC_STATE>:
static int Read_DI_ACC_STATE(){
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	01db      	lsls	r3, r3, #7
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <Read_DI_ACC_STATE+0x24>)
 8003354:	0019      	movs	r1, r3
 8003356:	0010      	movs	r0, r2
 8003358:	f006 ff90 	bl	800a27c <HAL_GPIO_ReadPin>
 800335c:	0003      	movs	r3, r0
 800335e:	607b      	str	r3, [r7, #4]
	return val;
 8003360:	687b      	ldr	r3, [r7, #4]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	50000400 	.word	0x50000400

08003370 <Read_DI_BOX_STATE>:
static char Read_DI_BOX_STATE(){
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <Read_DI_BOX_STATE+0x40>)
 800337c:	0019      	movs	r1, r3
 800337e:	0010      	movs	r0, r2
 8003380:	f006 ff7c 	bl	800a27c <HAL_GPIO_ReadPin>
 8003384:	0003      	movs	r3, r0
 8003386:	603b      	str	r3, [r7, #0]
	char box='O';
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	224f      	movs	r2, #79	; 0x4f
 800338c:	701a      	strb	r2, [r3, #0]
	if(val==1)box='O';
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d103      	bne.n	800339c <Read_DI_BOX_STATE+0x2c>
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	224f      	movs	r2, #79	; 0x4f
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e002      	b.n	80033a2 <Read_DI_BOX_STATE+0x32>
		else box='C';
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	2243      	movs	r2, #67	; 0x43
 80033a0:	701a      	strb	r2, [r3, #0]

	return box;
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	781b      	ldrb	r3, [r3, #0]
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	50000400 	.word	0x50000400

080033b4 <Read_DI_SOS_STATE>:
static int Read_DI_SOS_STATE(){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	005a      	lsls	r2, r3, #1
 80033be:	23a0      	movs	r3, #160	; 0xa0
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f006 ff59 	bl	800a27c <HAL_GPIO_ReadPin>
 80033ca:	0003      	movs	r3, r0
 80033cc:	607b      	str	r3, [r7, #4]
	return val;
 80033ce:	687b      	ldr	r3, [r7, #4]
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <Init_ADC>:


/* Analog Value Read Function Definition-----------------*/


static void Init_ADC(){
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <Init_ADC+0x18>)
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <Init_ADC+0x1c>)
 80033e0:	2204      	movs	r2, #4
 80033e2:	0018      	movs	r0, r3
 80033e4:	f005 fe32 	bl	800904c <HAL_ADC_Start_DMA>
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	200009f4 	.word	0x200009f4
 80033f4:	20000560 	.word	0x20000560

080033f8 <Read_ADC1>:

static float Read_ADC1(){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
	float val=(float)ADCvalue[0];
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <Read_ADC1+0x34>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0018      	movs	r0, r3
 8003404:	f7fd ffc4 	bl	8001390 <__aeabi_ui2f>
 8003408:	1c03      	adds	r3, r0, #0
 800340a:	607b      	str	r3, [r7, #4]

	return ((float)(val*VSENSE*11));
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <Read_ADC1+0x38>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	1c18      	adds	r0, r3, #0
 8003414:	f7fd fc5c 	bl	8000cd0 <__aeabi_fmul>
 8003418:	1c03      	adds	r3, r0, #0
 800341a:	4906      	ldr	r1, [pc, #24]	; (8003434 <Read_ADC1+0x3c>)
 800341c:	1c18      	adds	r0, r3, #0
 800341e:	f7fd fc57 	bl	8000cd0 <__aeabi_fmul>
 8003422:	1c03      	adds	r3, r0, #0
    	//HAL_Delay(1);
}
 8003424:	1c18      	adds	r0, r3, #0
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200009f4 	.word	0x200009f4
 8003430:	20000008 	.word	0x20000008
 8003434:	41300000 	.word	0x41300000

08003438 <Read_ADC2>:

static float Read_ADC2(){
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	return (ADCvalue[1]*VSENSE*11);
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <Read_ADC2+0x30>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd ffa5 	bl	8001390 <__aeabi_ui2f>
 8003446:	1c02      	adds	r2, r0, #0
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <Read_ADC2+0x34>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c19      	adds	r1, r3, #0
 800344e:	1c10      	adds	r0, r2, #0
 8003450:	f7fd fc3e 	bl	8000cd0 <__aeabi_fmul>
 8003454:	1c03      	adds	r3, r0, #0
 8003456:	4906      	ldr	r1, [pc, #24]	; (8003470 <Read_ADC2+0x38>)
 8003458:	1c18      	adds	r0, r3, #0
 800345a:	f7fd fc39 	bl	8000cd0 <__aeabi_fmul>
 800345e:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 8003460:	1c18      	adds	r0, r3, #0
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	200009f4 	.word	0x200009f4
 800346c:	20000008 	.word	0x20000008
 8003470:	41300000 	.word	0x41300000

08003474 <Read_EXT_B_SENSE>:
static float Read_EXT_B_SENSE(){
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	return (ADCvalue[2]*VSENSE*16);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <Read_EXT_B_SENSE+0x30>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	0018      	movs	r0, r3
 800347e:	f7fd ff87 	bl	8001390 <__aeabi_ui2f>
 8003482:	1c02      	adds	r2, r0, #0
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <Read_EXT_B_SENSE+0x34>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c19      	adds	r1, r3, #0
 800348a:	1c10      	adds	r0, r2, #0
 800348c:	f7fd fc20 	bl	8000cd0 <__aeabi_fmul>
 8003490:	1c03      	adds	r3, r0, #0
 8003492:	2183      	movs	r1, #131	; 0x83
 8003494:	05c9      	lsls	r1, r1, #23
 8003496:	1c18      	adds	r0, r3, #0
 8003498:	f7fd fc1a 	bl	8000cd0 <__aeabi_fmul>
 800349c:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 800349e:	1c18      	adds	r0, r3, #0
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200009f4 	.word	0x200009f4
 80034a8:	20000008 	.word	0x20000008

080034ac <Read_INT_B_SENSE>:
static float Read_INT_B_SENSE(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	return (ADCvalue[3]*VSENSE*2);
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <Read_INT_B_SENSE+0x30>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7fd ff6b 	bl	8001390 <__aeabi_ui2f>
 80034ba:	1c02      	adds	r2, r0, #0
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <Read_INT_B_SENSE+0x34>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c19      	adds	r1, r3, #0
 80034c2:	1c10      	adds	r0, r2, #0
 80034c4:	f7fd fc04 	bl	8000cd0 <__aeabi_fmul>
 80034c8:	1c03      	adds	r3, r0, #0
 80034ca:	1c19      	adds	r1, r3, #0
 80034cc:	1c18      	adds	r0, r3, #0
 80034ce:	f7fd f895 	bl	80005fc <__aeabi_fadd>
 80034d2:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 80034d4:	1c18      	adds	r0, r3, #0
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	200009f4 	.word	0x200009f4
 80034e0:	20000008 	.word	0x20000008

080034e4 <SET_5V_OUT_EN>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_OUT3_P_LED_GPIO_Port, DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
	}

}
static void SET_5V_OUT_EN(int val){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	if(val==1){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <SET_5V_OUT_EN+0x1c>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <SET_5V_OUT_EN+0x38>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	2120      	movs	r1, #32
 80034f8:	0018      	movs	r0, r3
 80034fa:	f006 fedc 	bl	800a2b6 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_RESET);
	}
}
 80034fe:	e008      	b.n	8003512 <SET_5V_OUT_EN+0x2e>
	else if(val==0){
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <SET_5V_OUT_EN+0x2e>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_RESET);
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <SET_5V_OUT_EN+0x38>)
 8003508:	2200      	movs	r2, #0
 800350a:	2120      	movs	r1, #32
 800350c:	0018      	movs	r0, r3
 800350e:	f006 fed2 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	50000400 	.word	0x50000400

08003520 <SET_LED_GPS>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_OUT1_GPIO_Port, DO_OUT1_Pin, GPIO_PIN_RESET);
	}
}

static void SET_LED_GPS(int val){
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	if(val==1){
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d106      	bne.n	800353c <SET_LED_GPS+0x1c>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <SET_LED_GPS+0x38>)
 8003530:	2201      	movs	r2, #1
 8003532:	2104      	movs	r1, #4
 8003534:	0018      	movs	r0, r3
 8003536:	f006 febe 	bl	800a2b6 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
	}
}
 800353a:	e008      	b.n	800354e <SET_LED_GPS+0x2e>
	else if(val==0){
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <SET_LED_GPS+0x2e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SET_LED_GPS+0x38>)
 8003544:	2200      	movs	r2, #0
 8003546:	2104      	movs	r1, #4
 8003548:	0018      	movs	r0, r3
 800354a:	f006 feb4 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	50000c00 	.word	0x50000c00

0800355c <SET_LED_NET>:

static void SET_LED_NET(int val){
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	if(val==1){
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <SET_LED_NET+0x1c>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <SET_LED_NET+0x38>)
 800356c:	2201      	movs	r2, #1
 800356e:	2102      	movs	r1, #2
 8003570:	0018      	movs	r0, r3
 8003572:	f006 fea0 	bl	800a2b6 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
	}
}
 8003576:	e008      	b.n	800358a <SET_LED_NET+0x2e>
	else if(val==0){
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <SET_LED_NET+0x2e>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SET_LED_NET+0x38>)
 8003580:	2200      	movs	r2, #0
 8003582:	2102      	movs	r1, #2
 8003584:	0018      	movs	r0, r3
 8003586:	f006 fe96 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	50000c00 	.word	0x50000c00

08003598 <SET_GPS_VCC_EN>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
	}
}

static void SET_GPS_VCC_EN(int val){
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	if(val==1){
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d108      	bne.n	80035b8 <SET_GPS_VCC_EN+0x20>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	0219      	lsls	r1, r3, #8
 80035aa:	23a0      	movs	r3, #160	; 0xa0
 80035ac:	05db      	lsls	r3, r3, #23
 80035ae:	2201      	movs	r2, #1
 80035b0:	0018      	movs	r0, r3
 80035b2:	f006 fe80 	bl	800a2b6 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
	}
}
 80035b6:	e00a      	b.n	80035ce <SET_GPS_VCC_EN+0x36>
	else if(val==0){
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <SET_GPS_VCC_EN+0x36>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	0219      	lsls	r1, r3, #8
 80035c2:	23a0      	movs	r3, #160	; 0xa0
 80035c4:	05db      	lsls	r3, r3, #23
 80035c6:	2200      	movs	r2, #0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f006 fe74 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <SET_PWRKEY>:

static void SET_PWRKEY(int val){
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	if(val==1){
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d106      	bne.n	80035f4 <SET_PWRKEY+0x1c>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <SET_PWRKEY+0x38>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	0018      	movs	r0, r3
 80035ee:	f006 fe62 	bl	800a2b6 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
	}
}
 80035f2:	e008      	b.n	8003606 <SET_PWRKEY+0x2e>
	else if(val==0){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <SET_PWRKEY+0x2e>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <SET_PWRKEY+0x38>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	0018      	movs	r0, r3
 8003602:	f006 fe58 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	50000800 	.word	0x50000800

08003614 <SET_GSM_VCC_EN>:

static void SET_GSM_VCC_EN(int val){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	if(val==1){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d106      	bne.n	8003630 <SET_GSM_VCC_EN+0x1c>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <SET_GSM_VCC_EN+0x38>)
 8003624:	2201      	movs	r2, #1
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	0018      	movs	r0, r3
 800362a:	f006 fe44 	bl	800a2b6 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
	}
}
 800362e:	e008      	b.n	8003642 <SET_GSM_VCC_EN+0x2e>
	else if(val==0){
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <SET_GSM_VCC_EN+0x2e>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <SET_GSM_VCC_EN+0x38>)
 8003638:	2200      	movs	r2, #0
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	0018      	movs	r0, r3
 800363e:	f006 fe3a 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	50000800 	.word	0x50000800

08003650 <SendGSMCode>:
	HAL_Delay(200);
	SET_PWRKEY(0);

}

void SendGSMCode(const char cmd[]){
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	memset(GSMData,0,990);
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <SendGSMCode+0xa0>)
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <SendGSMCode+0xa4>)
 800365c:	2100      	movs	r1, #0
 800365e:	0018      	movs	r0, r3
 8003660:	f00f faf8 	bl	8012c54 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <SendGSMCode+0xa8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	220c      	movs	r2, #12
 800366a:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800366c:	4923      	ldr	r1, [pc, #140]	; (80036fc <SendGSMCode+0xac>)
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <SendGSMCode+0xb0>)
 8003670:	2201      	movs	r2, #1
 8003672:	0018      	movs	r0, r3
 8003674:	f009 fd4a 	bl	800d10c <HAL_UART_Receive_DMA>
	memset(GSMTXC,0,100);
 8003678:	4b22      	ldr	r3, [pc, #136]	; (8003704 <SendGSMCode+0xb4>)
 800367a:	2264      	movs	r2, #100	; 0x64
 800367c:	2100      	movs	r1, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f00f fae8 	bl	8012c54 <memset>
	if((strlen(cmd)>90) &(debug==1)){Debug_Tx("Error:GSM Code Length Exceed");}
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0018      	movs	r0, r3
 8003688:	f7fc fd3e 	bl	8000108 <strlen>
 800368c:	0003      	movs	r3, r0
 800368e:	225a      	movs	r2, #90	; 0x5a
 8003690:	429a      	cmp	r2, r3
 8003692:	419b      	sbcs	r3, r3
 8003694:	425b      	negs	r3, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <SendGSMCode+0xb8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	4259      	negs	r1, r3
 80036a0:	414b      	adcs	r3, r1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4013      	ands	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <SendGSMCode+0x64>
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <SendGSMCode+0xbc>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f004 fbee 	bl	8007e90 <Debug_Tx>
	strcpy(GSMTXC,cmd);
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <SendGSMCode+0xb4>)
 80036b8:	0011      	movs	r1, r2
 80036ba:	0018      	movs	r0, r3
 80036bc:	f00f fc7f 	bl	8012fbe <strcpy>
	strcat(GSMTXC,"\r\n");
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <SendGSMCode+0xb4>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fc fd20 	bl	8000108 <strlen>
 80036c8:	0003      	movs	r3, r0
 80036ca:	001a      	movs	r2, r3
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <SendGSMCode+0xb4>)
 80036ce:	18d2      	adds	r2, r2, r3
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <SendGSMCode+0xc0>)
 80036d2:	0010      	movs	r0, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	2303      	movs	r3, #3
 80036d8:	001a      	movs	r2, r3
 80036da:	f00f fc83 	bl	8012fe4 <memcpy>

	//Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <SendGSMCode+0xb4>)
 80036e0:	0018      	movs	r0, r3
 80036e2:	f004 fc13 	bl	8007f0c <GSM_Tx>
	//return GSM_Rx();

}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	000003de 	.word	0x000003de
 80036f4:	20000dec 	.word	0x20000dec
 80036f8:	200007b8 	.word	0x200007b8
 80036fc:	200013c8 	.word	0x200013c8
 8003700:	20000724 	.word	0x20000724
 8003704:	20001498 	.word	0x20001498
 8003708:	2000000c 	.word	0x2000000c
 800370c:	080167a4 	.word	0x080167a4
 8003710:	080167c4 	.word	0x080167c4

08003714 <SendGSMCodeL>:
	GSM_Tx(cmd);
	//return GSM_Rx();

}

void SendGSMCodeL(const char cmd[]){
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <SendGSMCodeL+0xa0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	220c      	movs	r2, #12
 8003722:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003724:	4924      	ldr	r1, [pc, #144]	; (80037b8 <SendGSMCodeL+0xa4>)
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <SendGSMCodeL+0xa8>)
 8003728:	2201      	movs	r2, #1
 800372a:	0018      	movs	r0, r3
 800372c:	f009 fcee 	bl	800d10c <HAL_UART_Receive_DMA>

	memset(GSMData,0,990);
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <SendGSMCodeL+0xac>)
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <SendGSMCodeL+0xb0>)
 8003734:	2100      	movs	r1, #0
 8003736:	0018      	movs	r0, r3
 8003738:	f00f fa8c 	bl	8012c54 <memset>
	memset(GSMTXC,0,100);
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <SendGSMCodeL+0xb4>)
 800373e:	2264      	movs	r2, #100	; 0x64
 8003740:	2100      	movs	r1, #0
 8003742:	0018      	movs	r0, r3
 8003744:	f00f fa86 	bl	8012c54 <memset>
	if((strlen(cmd)>90) &(debug==1)){Debug_Tx("Error:GSM Code Length Exceed");}
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f7fc fcdc 	bl	8000108 <strlen>
 8003750:	0003      	movs	r3, r0
 8003752:	225a      	movs	r2, #90	; 0x5a
 8003754:	429a      	cmp	r2, r3
 8003756:	419b      	sbcs	r3, r3
 8003758:	425b      	negs	r3, r3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <SendGSMCodeL+0xb8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3b01      	subs	r3, #1
 8003762:	4259      	negs	r1, r3
 8003764:	414b      	adcs	r3, r1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4013      	ands	r3, r2
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <SendGSMCodeL+0x64>
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <SendGSMCodeL+0xbc>)
 8003772:	0018      	movs	r0, r3
 8003774:	f004 fb8c 	bl	8007e90 <Debug_Tx>
	strcpy(GSMTXC,cmd);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <SendGSMCodeL+0xb4>)
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f00f fc1d 	bl	8012fbe <strcpy>
	strcat(GSMTXC,"\r\n");
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <SendGSMCodeL+0xb4>)
 8003786:	0018      	movs	r0, r3
 8003788:	f7fc fcbe 	bl	8000108 <strlen>
 800378c:	0003      	movs	r3, r0
 800378e:	001a      	movs	r2, r3
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <SendGSMCodeL+0xb4>)
 8003792:	18d2      	adds	r2, r2, r3
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <SendGSMCodeL+0xc0>)
 8003796:	0010      	movs	r0, r2
 8003798:	0019      	movs	r1, r3
 800379a:	2303      	movs	r3, #3
 800379c:	001a      	movs	r2, r3
 800379e:	f00f fc21 	bl	8012fe4 <memcpy>
	//Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <SendGSMCodeL+0xb4>)
 80037a4:	0018      	movs	r0, r3
 80037a6:	f004 fbb1 	bl	8007f0c <GSM_Tx>


	//return GSM_RxL();


}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	200007b8 	.word	0x200007b8
 80037b8:	200013c8 	.word	0x200013c8
 80037bc:	20000724 	.word	0x20000724
 80037c0:	000003de 	.word	0x000003de
 80037c4:	20000dec 	.word	0x20000dec
 80037c8:	20001498 	.word	0x20001498
 80037cc:	2000000c 	.word	0x2000000c
 80037d0:	080167a4 	.word	0x080167a4
 80037d4:	080167c4 	.word	0x080167c4

080037d8 <SendGSMData>:


void SendGSMData(const char data[]){
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <SendGSMData+0x54>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	220c      	movs	r2, #12
 80037e6:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80037e8:	4911      	ldr	r1, [pc, #68]	; (8003830 <SendGSMData+0x58>)
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <SendGSMData+0x5c>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	0018      	movs	r0, r3
 80037f0:	f009 fc8c 	bl	800d10c <HAL_UART_Receive_DMA>

	memset(GSMData,0,990);
 80037f4:	4a10      	ldr	r2, [pc, #64]	; (8003838 <SendGSMData+0x60>)
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <SendGSMData+0x64>)
 80037f8:	2100      	movs	r1, #0
 80037fa:	0018      	movs	r0, r3
 80037fc:	f00f fa2a 	bl	8012c54 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 8003800:	240c      	movs	r4, #12
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2203      	movs	r2, #3
 8003806:	2100      	movs	r1, #0
 8003808:	0018      	movs	r0, r3
 800380a:	f00f fa23 	bl	8012c54 <memset>
	end[0]=0x1A;
 800380e:	193b      	adds	r3, r7, r4
 8003810:	221a      	movs	r2, #26
 8003812:	701a      	strb	r2, [r3, #0]
	//memset(GSMTXD,0,300);
	//if((strlen(data)>) &(debug==1)){Debug_Tx("Error:GSM Data Length Exceed");}
	//strcpy(GSMTXD,data);
	//strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0018      	movs	r0, r3
 8003818:	f004 fb92 	bl	8007f40 <GSM_TxL>
	GSM_Tx((char*)end);
 800381c:	193b      	adds	r3, r7, r4
 800381e:	0018      	movs	r0, r3
 8003820:	f004 fb74 	bl	8007f0c <GSM_Tx>


	//return GSM_Rx();

}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b005      	add	sp, #20
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	200007b8 	.word	0x200007b8
 8003830:	200013c8 	.word	0x200013c8
 8003834:	20000724 	.word	0x20000724
 8003838:	000003de 	.word	0x000003de
 800383c:	20000dec 	.word	0x20000dec

08003840 <GetGSMReply>:





char * GetGSMReply(int extra,const char* find,int gap,const char* LineEnd,const char* ErrorMsg, int timeout,const char* finChar){
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
	memset(GSMReply,0,100);
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <GetGSMReply+0x168>)
 8003850:	2264      	movs	r2, #100	; 0x64
 8003852:	2100      	movs	r1, #0
 8003854:	0018      	movs	r0, r3
 8003856:	f00f f9fd 	bl	8012c54 <memset>
	memset(GSMInData,0,1000);
 800385a:	23fa      	movs	r3, #250	; 0xfa
 800385c:	009a      	lsls	r2, r3, #2
 800385e:	4b53      	ldr	r3, [pc, #332]	; (80039ac <GetGSMReply+0x16c>)
 8003860:	2100      	movs	r1, #0
 8003862:	0018      	movs	r0, r3
 8003864:	f00f f9f6 	bl	8012c54 <memset>
	int stT=HAL_GetTick();
 8003868:	f005 f8bc 	bl	80089e4 <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	61fb      	str	r3, [r7, #28]
	while(((HAL_GetTick()-stT)<=timeout)){
 8003870:	e079      	b.n	8003966 <GetGSMReply+0x126>
		HAL_Delay(70);
 8003872:	2046      	movs	r0, #70	; 0x46
 8003874:	f005 f8c0 	bl	80089f8 <HAL_Delay>
		if(strlen(GSMData)>0){
 8003878:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <GetGSMReply+0x170>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d100      	bne.n	8003882 <GetGSMReply+0x42>
 8003880:	e071      	b.n	8003966 <GetGSMReply+0x126>
			strcpy(GSMInData, GSMData);
 8003882:	4a4b      	ldr	r2, [pc, #300]	; (80039b0 <GetGSMReply+0x170>)
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <GetGSMReply+0x16c>)
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f00f fb98 	bl	8012fbe <strcpy>
			char *pq=strstr(GSMInData,finChar) ;
 800388e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <GetGSMReply+0x16c>)
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f00f fa8d 	bl	8012db4 <strstr>
 800389a:	0003      	movs	r3, r0
 800389c:	61bb      	str	r3, [r7, #24]
			if ((pq!= NULL)){// && (strlen(strstr(GSMInData,find))>gap)){
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d04b      	beq.n	800393c <GetGSMReply+0xfc>

				if((strlen(find)<1)){ //Return for
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <GetGSMReply+0x7a>
					strcpy(GSMReply,pq);
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <GetGSMReply+0x168>)
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f00f fb83 	bl	8012fbe <strcpy>
					break;
 80038b8:	e05e      	b.n	8003978 <GetGSMReply+0x138>
				}
				char *p=strstr(GSMInData,find) ;
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <GetGSMReply+0x16c>)
 80038be:	0011      	movs	r1, r2
 80038c0:	0018      	movs	r0, r3
 80038c2:	f00f fa77 	bl	8012db4 <strstr>
 80038c6:	0003      	movs	r3, r0
 80038c8:	617b      	str	r3, [r7, #20]
				if((strlen(LineEnd)<1)){ //Return for
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <GetGSMReply+0xa0>
					strcpy(GSMReply,p);
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <GetGSMReply+0x168>)
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f00f fb70 	bl	8012fbe <strcpy>
					break;
 80038de:	e04b      	b.n	8003978 <GetGSMReply+0x138>
				}
				else{
					if ((strstr(GSMInData,LineEnd)!= NULL)){
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	4b32      	ldr	r3, [pc, #200]	; (80039ac <GetGSMReply+0x16c>)
 80038e4:	0011      	movs	r1, r2
 80038e6:	0018      	movs	r0, r3
 80038e8:	f00f fa64 	bl	8012db4 <strstr>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d03a      	beq.n	8003966 <GetGSMReply+0x126>
						if((strlen(p+gap)>strlen(LineEnd))){
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	18d3      	adds	r3, r2, r3
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fc fc06 	bl	8000108 <strlen>
 80038fc:	0004      	movs	r4, r0
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	0018      	movs	r0, r3
 8003902:	f7fc fc01 	bl	8000108 <strlen>
 8003906:	0003      	movs	r3, r0
 8003908:	429c      	cmp	r4, r3
 800390a:	d92c      	bls.n	8003966 <GetGSMReply+0x126>
							char * p1=strtok_r(p+gap,LineEnd,NULL);//strtok(GSMData, "\n");strtok(p+gap, );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	2200      	movs	r2, #0
 8003916:	0018      	movs	r0, r3
 8003918:	f00f fa47 	bl	8012daa <strtok_r>
 800391c:	0003      	movs	r3, r0
 800391e:	613b      	str	r3, [r7, #16]
							if(strlen(p1)<88){
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	0018      	movs	r0, r3
 8003924:	f7fc fbf0 	bl	8000108 <strlen>
 8003928:	0003      	movs	r3, r0
 800392a:	2b57      	cmp	r3, #87	; 0x57
 800392c:	d81b      	bhi.n	8003966 <GetGSMReply+0x126>
								strcpy(GSMReply,p1);
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <GetGSMReply+0x168>)
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f00f fb42 	bl	8012fbe <strcpy>
								break;
 800393a:	e01d      	b.n	8003978 <GetGSMReply+0x138>
						}
					}
				}
			}
			else{
				if ((strstr(GSMInData,"ERROR")!= NULL)||(strstr(GSMInData,"FAIL")!= NULL)){
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <GetGSMReply+0x174>)
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <GetGSMReply+0x16c>)
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f00f fa36 	bl	8012db4 <strstr>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d107      	bne.n	800395c <GetGSMReply+0x11c>
 800394c:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <GetGSMReply+0x178>)
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <GetGSMReply+0x16c>)
 8003950:	0011      	movs	r1, r2
 8003952:	0018      	movs	r0, r3
 8003954:	f00f fa2e 	bl	8012db4 <strstr>
 8003958:	1e03      	subs	r3, r0, #0
 800395a:	d004      	beq.n	8003966 <GetGSMReply+0x126>

					Debug_Tx("Err Found");
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <GetGSMReply+0x17c>)
 800395e:	0018      	movs	r0, r3
 8003960:	f004 fa96 	bl	8007e90 <Debug_Tx>
					break;
 8003964:	e008      	b.n	8003978 <GetGSMReply+0x138>
	while(((HAL_GetTick()-stT)<=timeout)){
 8003966:	f005 f83d 	bl	80089e4 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	429a      	cmp	r2, r3
 8003974:	d800      	bhi.n	8003978 <GetGSMReply+0x138>
 8003976:	e77c      	b.n	8003872 <GetGSMReply+0x32>


	}

	//Debug_Tx(GSMInData);
	if (strlen(GSMReply)<1){
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <GetGSMReply+0x168>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <GetGSMReply+0x158>
		Debug_Tx("****");
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <GetGSMReply+0x180>)
 8003982:	0018      	movs	r0, r3
 8003984:	f004 fa84 	bl	8007e90 <Debug_Tx>
		Debug_Tx(GSMInData);
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <GetGSMReply+0x16c>)
 800398a:	0018      	movs	r0, r3
 800398c:	f004 fa80 	bl	8007e90 <Debug_Tx>
		Debug_Tx((char*)ErrorMsg);
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	0018      	movs	r0, r3
 8003994:	f004 fa7c 	bl	8007e90 <Debug_Tx>
		//Debug_Tx(GSMData);
		//Debug_Tx("****");
		//Debug_Tx(GSMReply);
		//Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 8003998:	2064      	movs	r0, #100	; 0x64
 800399a:	f005 f82d 	bl	80089f8 <HAL_Delay>
	//if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
 800399e:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <GetGSMReply+0x168>)
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b009      	add	sp, #36	; 0x24
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	20001550 	.word	0x20001550
 80039ac:	20000a04 	.word	0x20000a04
 80039b0:	20000dec 	.word	0x20000dec
 80039b4:	0801684c 	.word	0x0801684c
 80039b8:	08016854 	.word	0x08016854
 80039bc:	0801685c 	.word	0x0801685c
 80039c0:	08016868 	.word	0x08016868

080039c4 <GSMSigQuality>:


int GSMSigQuality(){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af04      	add	r7, sp, #16
	GSMSignal=0;
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <GSMSigQuality+0xb0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
	SendGSMCode(" AT+CSQ");HAL_Delay(100);
 80039d0:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <GSMSigQuality+0xb4>)
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7ff fe3c 	bl	8003650 <SendGSMCode>
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	f005 f80d 	bl	80089f8 <HAL_Delay>
	GSMSignal=strtod(GetGSMReply(0,"+CSQ:",5,",","Error: AT+CSQ GSM Sig Quality",gpsto_dev,",0"),NULL);
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <GSMSigQuality+0xb8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4827      	ldr	r0, [pc, #156]	; (8003a80 <GSMSigQuality+0xbc>)
 80039e4:	4927      	ldr	r1, [pc, #156]	; (8003a84 <GSMSigQuality+0xc0>)
 80039e6:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <GSMSigQuality+0xc4>)
 80039e8:	9202      	str	r2, [sp, #8]
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <GSMSigQuality+0xc8>)
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	0003      	movs	r3, r0
 80039f2:	2205      	movs	r2, #5
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7ff ff23 	bl	8003840 <GetGSMReply>
 80039fa:	0003      	movs	r3, r0
 80039fc:	2100      	movs	r1, #0
 80039fe:	0018      	movs	r0, r3
 8003a00:	f00e f8ce 	bl	8011ba0 <strtod>
 8003a04:	0002      	movs	r2, r0
 8003a06:	000b      	movs	r3, r1
 8003a08:	0010      	movs	r0, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	f7ff fb98 	bl	8003140 <__aeabi_d2f>
 8003a10:	1c02      	adds	r2, r0, #0
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <GSMSigQuality+0xb0>)
 8003a14:	601a      	str	r2, [r3, #0]

	if(GSMSignal>5){
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <GSMSigQuality+0xb0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	491d      	ldr	r1, [pc, #116]	; (8003a90 <GSMSigQuality+0xcc>)
 8003a1c:	1c18      	adds	r0, r3, #0
 8003a1e:	f7fc fd69 	bl	80004f4 <__aeabi_fcmpgt>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d00a      	beq.n	8003a3c <GSMSigQuality+0x78>
		SET_LED_NET(1);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f7ff fd98 	bl	800355c <SET_LED_NET>
		ServerConnected=1;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <GSMSigQuality+0xd0>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
		Debug_Tx("GSM HIGH");
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <GSMSigQuality+0xd4>)
 8003a34:	0018      	movs	r0, r3
 8003a36:	f004 fa2b 	bl	8007e90 <Debug_Tx>
 8003a3a:	e011      	b.n	8003a60 <GSMSigQuality+0x9c>
	}
	else{
		Debug_Tx("GSM low");
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <GSMSigQuality+0xd8>)
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f004 fa26 	bl	8007e90 <Debug_Tx>
		Debug_Tx("GSM No Signal");
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <GSMSigQuality+0xdc>)
 8003a46:	0018      	movs	r0, r3
 8003a48:	f004 fa22 	bl	8007e90 <Debug_Tx>

		Debug_Tx(GSMData);
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <GSMSigQuality+0xe0>)
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f004 fa1e 	bl	8007e90 <Debug_Tx>
		ServerConnected=0;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <GSMSigQuality+0xd0>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
		SET_LED_NET(0);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7ff fd7e 	bl	800355c <SET_LED_NET>
	}
	return(GSMSignal);//must be higher than 5 ,range 0-33
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <GSMSigQuality+0xb0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	1c18      	adds	r0, r3, #0
 8003a66:	f7fd fc21 	bl	80012ac <__aeabi_f2iz>
 8003a6a:	0003      	movs	r3, r0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	200015b8 	.word	0x200015b8
 8003a78:	08016870 	.word	0x08016870
 8003a7c:	20000014 	.word	0x20000014
 8003a80:	08016878 	.word	0x08016878
 8003a84:	0801687c 	.word	0x0801687c
 8003a88:	08016884 	.word	0x08016884
 8003a8c:	08016888 	.word	0x08016888
 8003a90:	40a00000 	.word	0x40a00000
 8003a94:	20001630 	.word	0x20001630
 8003a98:	080168a8 	.word	0x080168a8
 8003a9c:	080168b4 	.word	0x080168b4
 8003aa0:	080168bc 	.word	0x080168bc
 8003aa4:	20000dec 	.word	0x20000dec

08003aa8 <GSMSimOperator>:



char* GSMSimOperator(){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af04      	add	r7, sp, #16

	SendGSMCode("  AT+COPS?");
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <GSMSimOperator+0x34>)
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7ff fdcd 	bl	8003650 <SendGSMCode>
	return(GetGSMReply(0,"+COPS:",12,"\"","Error: AT+COPS? sim operator error",gpsto_net,"OK"));
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <GSMSimOperator+0x38>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	480a      	ldr	r0, [pc, #40]	; (8003ae4 <GSMSimOperator+0x3c>)
 8003abc:	490a      	ldr	r1, [pc, #40]	; (8003ae8 <GSMSimOperator+0x40>)
 8003abe:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <GSMSimOperator+0x44>)
 8003ac0:	9202      	str	r2, [sp, #8]
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <GSMSimOperator+0x48>)
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	0003      	movs	r3, r0
 8003aca:	220c      	movs	r2, #12
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff feb7 	bl	8003840 <GetGSMReply>
 8003ad2:	0003      	movs	r3, r0

}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	080168cc 	.word	0x080168cc
 8003ae0:	20000010 	.word	0x20000010
 8003ae4:	080168d8 	.word	0x080168d8
 8003ae8:	080168dc 	.word	0x080168dc
 8003aec:	080168e4 	.word	0x080168e4
 8003af0:	080168e8 	.word	0x080168e8

08003af4 <GSMIMEI>:

	return(0);

}

char* GSMIMEI(){
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af04      	add	r7, sp, #16
	SendGSMCode(" AT+QGSN");
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <GSMIMEI+0x34>)
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7ff fda7 	bl	8003650 <SendGSMCode>
	return(GetGSMReply(0,"+QGSN:",8,"\"","Error: AT+QGSN IMEI Read error",gpsto_dev,"OK"));
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <GSMIMEI+0x38>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	480a      	ldr	r0, [pc, #40]	; (8003b30 <GSMIMEI+0x3c>)
 8003b08:	490a      	ldr	r1, [pc, #40]	; (8003b34 <GSMIMEI+0x40>)
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <GSMIMEI+0x44>)
 8003b0c:	9202      	str	r2, [sp, #8]
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <GSMIMEI+0x48>)
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	0003      	movs	r3, r0
 8003b16:	2208      	movs	r2, #8
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7ff fe91 	bl	8003840 <GetGSMReply>
 8003b1e:	0003      	movs	r3, r0
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	08016968 	.word	0x08016968
 8003b2c:	20000014 	.word	0x20000014
 8003b30:	080168d8 	.word	0x080168d8
 8003b34:	08016974 	.word	0x08016974
 8003b38:	080168e4 	.word	0x080168e4
 8003b3c:	0801697c 	.word	0x0801697c

08003b40 <StartTCPConnection>:
*/
return 0;
}


void StartTCPConnection(){
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af04      	add	r7, sp, #16
	int ck=1;
 8003b46:	2301      	movs	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
	if(strlen(ip)>4){
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <StartTCPConnection+0xc8>)
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7fc fadb 	bl	8000108 <strlen>
 8003b52:	0003      	movs	r3, r0
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d93b      	bls.n	8003bd0 <StartTCPConnection+0x90>
		memset(GSMDataC,0,100);
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <StartTCPConnection+0xcc>)
 8003b5a:	2264      	movs	r2, #100	; 0x64
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f00f f878 	bl	8012c54 <memset>
		strcpy(GSMDataC,(char*)" AT+QIOPEN=0,\"TCP\",\"");
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <StartTCPConnection+0xcc>)
 8003b66:	4a2a      	ldr	r2, [pc, #168]	; (8003c10 <StartTCPConnection+0xd0>)
 8003b68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b6a:	c313      	stmia	r3!, {r0, r1, r4}
 8003b6c:	ca03      	ldmia	r2!, {r0, r1}
 8003b6e:	c303      	stmia	r3!, {r0, r1}
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	701a      	strb	r2, [r3, #0]
		strcat(GSMDataC,ip);
 8003b74:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <StartTCPConnection+0xc8>)
 8003b76:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <StartTCPConnection+0xcc>)
 8003b78:	0011      	movs	r1, r2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f00f f872 	bl	8012c64 <strcat>
		gprsok=0;
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <StartTCPConnection+0xd4>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003b86:	e01c      	b.n	8003bc2 <StartTCPConnection+0x82>
			ck=ck-1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	607b      	str	r3, [r7, #4]
			SendGSMCode(GSMDataC);
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <StartTCPConnection+0xcc>)
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7ff fd5d 	bl	8003650 <SendGSMCode>
			//Debug_Tx(GetGSMReply(0,"",0,"","Error: AT+QIOPEN 0 TCP Connection open ",gpsto_net,"CONNECT OK"));

			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QIOPEN 0 TCP Connection open ",gpsto_net,"CONNECT OK"));
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <StartTCPConnection+0xd8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4820      	ldr	r0, [pc, #128]	; (8003c1c <StartTCPConnection+0xdc>)
 8003b9c:	491f      	ldr	r1, [pc, #124]	; (8003c1c <StartTCPConnection+0xdc>)
 8003b9e:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <StartTCPConnection+0xe0>)
 8003ba0:	9202      	str	r2, [sp, #8]
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <StartTCPConnection+0xe4>)
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0003      	movs	r3, r0
 8003baa:	2200      	movs	r2, #0
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7ff fe47 	bl	8003840 <GetGSMReply>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7fc faa7 	bl	8000108 <strlen>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	001a      	movs	r2, r3
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <StartTCPConnection+0xd4>)
 8003bc0:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	dd03      	ble.n	8003bd0 <StartTCPConnection+0x90>
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <StartTCPConnection+0xd4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	dddb      	ble.n	8003b88 <StartTCPConnection+0x48>
		}

	}
	HAL_Delay(1500);
 8003bd0:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <StartTCPConnection+0xe8>)
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f004 ff10 	bl	80089f8 <HAL_Delay>
			ck=ck-1;
			SendGSMCode(GSMDataC);
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QIOPEN 1 TCP Connection open ",gpsto_net,"CONNECT OK"));
		}
	}*/
	if (gprsok)	{Debug_Tx("connected ");ServerConnected=1;}
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <StartTCPConnection+0xd4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <StartTCPConnection+0xb0>
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <StartTCPConnection+0xec>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f004 f954 	bl	8007e90 <Debug_Tx>
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <StartTCPConnection+0xf0>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e002      	b.n	8003bf6 <StartTCPConnection+0xb6>
	else ServerConnected=0;
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <StartTCPConnection+0xf0>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8003bf6:	23fa      	movs	r3, #250	; 0xfa
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f004 fefc 	bl	80089f8 <HAL_Delay>
}
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b003      	add	sp, #12
 8003c06:	bd90      	pop	{r4, r7, pc}
 8003c08:	2000001c 	.word	0x2000001c
 8003c0c:	200013cc 	.word	0x200013cc
 8003c10:	08016c58 	.word	0x08016c58
 8003c14:	20001494 	.word	0x20001494
 8003c18:	20000010 	.word	0x20000010
 8003c1c:	080169e4 	.word	0x080169e4
 8003c20:	08016c70 	.word	0x08016c70
 8003c24:	08016c7c 	.word	0x08016c7c
 8003c28:	000005dc 	.word	0x000005dc
 8003c2c:	08016ca4 	.word	0x08016ca4
 8003c30:	20001630 	.word	0x20001630

08003c34 <StopTCPConnection>:
void StopTCPConnection(){
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af04      	add	r7, sp, #16
	int ck=1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	607b      	str	r3, [r7, #4]
	gprsok=0;
 8003c3e:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <StopTCPConnection+0xb8>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
	while((ck>0) && (gprsok<1)){
 8003c44:	e044      	b.n	8003cd0 <StopTCPConnection+0x9c>
		ck=ck-1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
		if(strlen(ip)>4){
 8003c4c:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <StopTCPConnection+0xbc>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fc fa5a 	bl	8000108 <strlen>
 8003c54:	0003      	movs	r3, r0
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d919      	bls.n	8003c8e <StopTCPConnection+0x5a>
		SendGSMCode(" AT+QICLOSE=0");
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <StopTCPConnection+0xc0>)
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff fcf7 	bl	8003650 <SendGSMCode>
		gprsok=strlen(GetGSMReply(5,"",0,"","Error: AT+QICLOSE TCP Send Close",gpsto_dev,"CLOSE OK"));
 8003c62:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <StopTCPConnection+0xc4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4825      	ldr	r0, [pc, #148]	; (8003cfc <StopTCPConnection+0xc8>)
 8003c68:	4924      	ldr	r1, [pc, #144]	; (8003cfc <StopTCPConnection+0xc8>)
 8003c6a:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <StopTCPConnection+0xcc>)
 8003c6c:	9202      	str	r2, [sp, #8]
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <StopTCPConnection+0xd0>)
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	0003      	movs	r3, r0
 8003c76:	2200      	movs	r2, #0
 8003c78:	2005      	movs	r0, #5
 8003c7a:	f7ff fde1 	bl	8003840 <GetGSMReply>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7fc fa41 	bl	8000108 <strlen>
 8003c86:	0003      	movs	r3, r0
 8003c88:	001a      	movs	r2, r3
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <StopTCPConnection+0xb8>)
 8003c8c:	601a      	str	r2, [r3, #0]
		}
		if(strlen(ip2)>4){
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <StopTCPConnection+0xd4>)
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7fc fa39 	bl	8000108 <strlen>
 8003c96:	0003      	movs	r3, r0
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d919      	bls.n	8003cd0 <StopTCPConnection+0x9c>
		SendGSMCode(" AT+QICLOSE=1");
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <StopTCPConnection+0xd8>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7ff fcd6 	bl	8003650 <SendGSMCode>
		gprsok=strlen(GetGSMReply(5,"",0,"","Error: AT+QICLOSE TCP Send Close",gpsto_dev,"CLOSE OK"));
 8003ca4:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <StopTCPConnection+0xc4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4814      	ldr	r0, [pc, #80]	; (8003cfc <StopTCPConnection+0xc8>)
 8003caa:	4914      	ldr	r1, [pc, #80]	; (8003cfc <StopTCPConnection+0xc8>)
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <StopTCPConnection+0xcc>)
 8003cae:	9202      	str	r2, [sp, #8]
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <StopTCPConnection+0xd0>)
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2005      	movs	r0, #5
 8003cbc:	f7ff fdc0 	bl	8003840 <GetGSMReply>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fc fa20 	bl	8000108 <strlen>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	001a      	movs	r2, r3
 8003ccc:	4b07      	ldr	r3, [pc, #28]	; (8003cec <StopTCPConnection+0xb8>)
 8003cce:	601a      	str	r2, [r3, #0]
	while((ck>0) && (gprsok<1)){
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dd03      	ble.n	8003cde <StopTCPConnection+0xaa>
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <StopTCPConnection+0xb8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	ddb3      	ble.n	8003c46 <StopTCPConnection+0x12>
		}
	}
	ServerConnected=0;
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <StopTCPConnection+0xdc>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20001494 	.word	0x20001494
 8003cf0:	2000001c 	.word	0x2000001c
 8003cf4:	08016cb0 	.word	0x08016cb0
 8003cf8:	20000014 	.word	0x20000014
 8003cfc:	080169e4 	.word	0x080169e4
 8003d00:	08016cc0 	.word	0x08016cc0
 8003d04:	08016ccc 	.word	0x08016ccc
 8003d08:	20000030 	.word	0x20000030
 8003d0c:	08016cf0 	.word	0x08016cf0
 8003d10:	20001630 	.word	0x20001630

08003d14 <SendTCPdata>:
void SendTCPdata(char* data){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af04      	add	r7, sp, #16
 8003d1a:	6078      	str	r0, [r7, #4]
	int ck=1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
	if(gprsok>0){
 8003d20:	4b6d      	ldr	r3, [pc, #436]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	dc00      	bgt.n	8003d2a <SendTCPdata+0x16>
 8003d28:	e0d1      	b.n	8003ece <SendTCPdata+0x1ba>
		Debug_Tx("GPRSOK");
 8003d2a:	4b6c      	ldr	r3, [pc, #432]	; (8003edc <SendTCPdata+0x1c8>)
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f004 f8af 	bl	8007e90 <Debug_Tx>
		if(strlen(ip)>4)
 8003d32:	4b6b      	ldr	r3, [pc, #428]	; (8003ee0 <SendTCPdata+0x1cc>)
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fc f9e7 	bl	8000108 <strlen>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d967      	bls.n	8003e10 <SendTCPdata+0xfc>
		{

			Debug_Tx("IPOK");
 8003d40:	4b68      	ldr	r3, [pc, #416]	; (8003ee4 <SendTCPdata+0x1d0>)
 8003d42:	0018      	movs	r0, r3
 8003d44:	f004 f8a4 	bl	8007e90 <Debug_Tx>
		ck=1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
		gprsok=0;
 8003d4c:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003d52:	e020      	b.n	8003d96 <SendTCPdata+0x82>

			Debug_Tx("CONNECTING TO SEND");
 8003d54:	4b64      	ldr	r3, [pc, #400]	; (8003ee8 <SendTCPdata+0x1d4>)
 8003d56:	0018      	movs	r0, r3
 8003d58:	f004 f89a 	bl	8007e90 <Debug_Tx>
			ck=ck-1;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
			SendGSMCode(" AT+QISEND=0");
 8003d62:	4b62      	ldr	r3, [pc, #392]	; (8003eec <SendTCPdata+0x1d8>)
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff fc73 	bl	8003650 <SendGSMCode>
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data input",gpsto_dev,">"));
 8003d6a:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <SendTCPdata+0x1dc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4861      	ldr	r0, [pc, #388]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003d70:	4960      	ldr	r1, [pc, #384]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003d72:	4a61      	ldr	r2, [pc, #388]	; (8003ef8 <SendTCPdata+0x1e4>)
 8003d74:	9202      	str	r2, [sp, #8]
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	4b60      	ldr	r3, [pc, #384]	; (8003efc <SendTCPdata+0x1e8>)
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2000      	movs	r0, #0
 8003d82:	f7ff fd5d 	bl	8003840 <GetGSMReply>
 8003d86:	0003      	movs	r3, r0
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7fc f9bd 	bl	8000108 <strlen>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	001a      	movs	r2, r3
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003d94:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	dd03      	ble.n	8003da4 <SendTCPdata+0x90>
 8003d9c:	4b4e      	ldr	r3, [pc, #312]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	ddd7      	ble.n	8003d54 <SendTCPdata+0x40>
		}
		if(gprsok>0){
 8003da4:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dd31      	ble.n	8003e10 <SendTCPdata+0xfc>
			ck=1;
 8003dac:	2301      	movs	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
			gprsok=0;
 8003db0:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003db6:	e024      	b.n	8003e02 <SendTCPdata+0xee>
				ck=ck-1;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
				Debug_Tx("SENDINGDATA");
 8003dbe:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <SendTCPdata+0x1ec>)
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f004 f865 	bl	8007e90 <Debug_Tx>
				Debug_Tx(data);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f004 f861 	bl	8007e90 <Debug_Tx>
				SendGSMData(data);//Debug_Tx(GSMData);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff fd01 	bl	80037d8 <SendGSMData>
				gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data",gpsto_dev,"SEND OK"));
 8003dd6:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <SendTCPdata+0x1dc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4846      	ldr	r0, [pc, #280]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003ddc:	4945      	ldr	r1, [pc, #276]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003dde:	4a49      	ldr	r2, [pc, #292]	; (8003f04 <SendTCPdata+0x1f0>)
 8003de0:	9202      	str	r2, [sp, #8]
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	4b48      	ldr	r3, [pc, #288]	; (8003f08 <SendTCPdata+0x1f4>)
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	0003      	movs	r3, r0
 8003dea:	2200      	movs	r2, #0
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7ff fd27 	bl	8003840 <GetGSMReply>
 8003df2:	0003      	movs	r3, r0
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7fc f987 	bl	8000108 <strlen>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	001a      	movs	r2, r3
 8003dfe:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003e00:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	dd03      	ble.n	8003e10 <SendTCPdata+0xfc>
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	ddd3      	ble.n	8003db8 <SendTCPdata+0xa4>

			}
		}
		}
		if(strlen(ip2)>44)
 8003e10:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <SendTCPdata+0x1f8>)
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fc f978 	bl	8000108 <strlen>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	2b2c      	cmp	r3, #44	; 0x2c
 8003e1c:	d957      	bls.n	8003ece <SendTCPdata+0x1ba>
		{
		ck=1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
		gprsok=0;
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003e28:	e01c      	b.n	8003e64 <SendTCPdata+0x150>
			ck=ck-1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
			SendGSMCode(" AT+QISEND=1");
 8003e30:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <SendTCPdata+0x1fc>)
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7ff fc0c 	bl	8003650 <SendGSMCode>
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data input",gpsto_dev,">"));
 8003e38:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <SendTCPdata+0x1dc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	482d      	ldr	r0, [pc, #180]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003e3e:	492d      	ldr	r1, [pc, #180]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003e40:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <SendTCPdata+0x1e4>)
 8003e42:	9202      	str	r2, [sp, #8]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <SendTCPdata+0x1e8>)
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7ff fcf6 	bl	8003840 <GetGSMReply>
 8003e54:	0003      	movs	r3, r0
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fc f956 	bl	8000108 <strlen>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	001a      	movs	r2, r3
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003e62:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	dd03      	ble.n	8003e72 <SendTCPdata+0x15e>
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	dddb      	ble.n	8003e2a <SendTCPdata+0x116>
		}
		if(gprsok>0){
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	dd29      	ble.n	8003ece <SendTCPdata+0x1ba>
			ck=1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
			gprsok=0;
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003e84:	e01c      	b.n	8003ec0 <SendTCPdata+0x1ac>
				ck=ck-1;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
				SendGSMData(data);//Debug_Tx(GSMData);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7ff fca2 	bl	80037d8 <SendGSMData>
				gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data",gpsto_dev,"SEND OK"));
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <SendTCPdata+0x1dc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4816      	ldr	r0, [pc, #88]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003e9a:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <SendTCPdata+0x1e0>)
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <SendTCPdata+0x1f0>)
 8003e9e:	9202      	str	r2, [sp, #8]
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <SendTCPdata+0x1f4>)
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f7ff fcc8 	bl	8003840 <GetGSMReply>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f928 	bl	8000108 <strlen>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	001a      	movs	r2, r3
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003ebe:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dd03      	ble.n	8003ece <SendTCPdata+0x1ba>
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <SendTCPdata+0x1c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	dddb      	ble.n	8003e86 <SendTCPdata+0x172>

			}
		}
		}
	}
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b004      	add	sp, #16
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	20001494 	.word	0x20001494
 8003edc:	08016d00 	.word	0x08016d00
 8003ee0:	2000001c 	.word	0x2000001c
 8003ee4:	08016d08 	.word	0x08016d08
 8003ee8:	08016d10 	.word	0x08016d10
 8003eec:	08016d24 	.word	0x08016d24
 8003ef0:	20000014 	.word	0x20000014
 8003ef4:	080169e4 	.word	0x080169e4
 8003ef8:	08016d34 	.word	0x08016d34
 8003efc:	08016d38 	.word	0x08016d38
 8003f00:	08016d60 	.word	0x08016d60
 8003f04:	08016d6c 	.word	0x08016d6c
 8003f08:	08016d74 	.word	0x08016d74
 8003f0c:	20000030 	.word	0x20000030
 8003f10:	08016d94 	.word	0x08016d94

08003f14 <GSMCellInfo>:



char* GSMCellInfo(){
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b097      	sub	sp, #92	; 0x5c
 8003f18:	af10      	add	r7, sp, #64	; 0x40


	memset(SS0,0,4);
 8003f1a:	4bcb      	ldr	r3, [pc, #812]	; (8004248 <GSMCellInfo+0x334>)
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	2100      	movs	r1, #0
 8003f20:	0018      	movs	r0, r3
 8003f22:	f00e fe97 	bl	8012c54 <memset>
	memset(SS1,0,4);
 8003f26:	4bc9      	ldr	r3, [pc, #804]	; (800424c <GSMCellInfo+0x338>)
 8003f28:	2204      	movs	r2, #4
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f00e fe91 	bl	8012c54 <memset>
	memset(SS2,0,4);
 8003f32:	4bc7      	ldr	r3, [pc, #796]	; (8004250 <GSMCellInfo+0x33c>)
 8003f34:	2204      	movs	r2, #4
 8003f36:	2100      	movs	r1, #0
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f00e fe8b 	bl	8012c54 <memset>
	memset(SS3,0,4);
 8003f3e:	4bc5      	ldr	r3, [pc, #788]	; (8004254 <GSMCellInfo+0x340>)
 8003f40:	2204      	movs	r2, #4
 8003f42:	2100      	movs	r1, #0
 8003f44:	0018      	movs	r0, r3
 8003f46:	f00e fe85 	bl	8012c54 <memset>
	memset(SS4,0,4);
 8003f4a:	4bc3      	ldr	r3, [pc, #780]	; (8004258 <GSMCellInfo+0x344>)
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	2100      	movs	r1, #0
 8003f50:	0018      	movs	r0, r3
 8003f52:	f00e fe7f 	bl	8012c54 <memset>
	memset(MCC0,0,5);
 8003f56:	4bc1      	ldr	r3, [pc, #772]	; (800425c <GSMCellInfo+0x348>)
 8003f58:	2205      	movs	r2, #5
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f00e fe79 	bl	8012c54 <memset>
	memset(MNC0,0,5);
 8003f62:	4bbf      	ldr	r3, [pc, #764]	; (8004260 <GSMCellInfo+0x34c>)
 8003f64:	2205      	movs	r2, #5
 8003f66:	2100      	movs	r1, #0
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f00e fe73 	bl	8012c54 <memset>
	memset(LAC0,0,6);
 8003f6e:	4bbd      	ldr	r3, [pc, #756]	; (8004264 <GSMCellInfo+0x350>)
 8003f70:	2206      	movs	r2, #6
 8003f72:	2100      	movs	r1, #0
 8003f74:	0018      	movs	r0, r3
 8003f76:	f00e fe6d 	bl	8012c54 <memset>
	memset(LAC1,0,6);
 8003f7a:	4bbb      	ldr	r3, [pc, #748]	; (8004268 <GSMCellInfo+0x354>)
 8003f7c:	2206      	movs	r2, #6
 8003f7e:	2100      	movs	r1, #0
 8003f80:	0018      	movs	r0, r3
 8003f82:	f00e fe67 	bl	8012c54 <memset>
	memset(LAC2,0,6);
 8003f86:	4bb9      	ldr	r3, [pc, #740]	; (800426c <GSMCellInfo+0x358>)
 8003f88:	2206      	movs	r2, #6
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f00e fe61 	bl	8012c54 <memset>
	memset(LAC3,0,6);
 8003f92:	4bb7      	ldr	r3, [pc, #732]	; (8004270 <GSMCellInfo+0x35c>)
 8003f94:	2206      	movs	r2, #6
 8003f96:	2100      	movs	r1, #0
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f00e fe5b 	bl	8012c54 <memset>
	memset(LAC4,0,6);
 8003f9e:	4bb5      	ldr	r3, [pc, #724]	; (8004274 <GSMCellInfo+0x360>)
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f00e fe55 	bl	8012c54 <memset>
	memset(CID4,0,6);
 8003faa:	4bb3      	ldr	r3, [pc, #716]	; (8004278 <GSMCellInfo+0x364>)
 8003fac:	2206      	movs	r2, #6
 8003fae:	2100      	movs	r1, #0
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f00e fe4f 	bl	8012c54 <memset>
	memset(CID3,0,6);
 8003fb6:	4bb1      	ldr	r3, [pc, #708]	; (800427c <GSMCellInfo+0x368>)
 8003fb8:	2206      	movs	r2, #6
 8003fba:	2100      	movs	r1, #0
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f00e fe49 	bl	8012c54 <memset>
	memset(CID2,0,6);
 8003fc2:	4baf      	ldr	r3, [pc, #700]	; (8004280 <GSMCellInfo+0x36c>)
 8003fc4:	2206      	movs	r2, #6
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f00e fe43 	bl	8012c54 <memset>
	memset(CID1,0,6);
 8003fce:	4bad      	ldr	r3, [pc, #692]	; (8004284 <GSMCellInfo+0x370>)
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f00e fe3d 	bl	8012c54 <memset>
	memset(CID0,0,6);
 8003fda:	4bab      	ldr	r3, [pc, #684]	; (8004288 <GSMCellInfo+0x374>)
 8003fdc:	2206      	movs	r2, #6
 8003fde:	2100      	movs	r1, #0
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f00e fe37 	bl	8012c54 <memset>
	strcpy(MCC0,"x\0");
 8003fe6:	4b9d      	ldr	r3, [pc, #628]	; (800425c <GSMCellInfo+0x348>)
 8003fe8:	2278      	movs	r2, #120	; 0x78
 8003fea:	801a      	strh	r2, [r3, #0]
	strcpy(MNC0,"x\0");
 8003fec:	4b9c      	ldr	r3, [pc, #624]	; (8004260 <GSMCellInfo+0x34c>)
 8003fee:	2278      	movs	r2, #120	; 0x78
 8003ff0:	801a      	strh	r2, [r3, #0]
	strcpy(LAC0,"x\0");
 8003ff2:	4b9c      	ldr	r3, [pc, #624]	; (8004264 <GSMCellInfo+0x350>)
 8003ff4:	2278      	movs	r2, #120	; 0x78
 8003ff6:	801a      	strh	r2, [r3, #0]
	strcpy(CID0,"x\0");
 8003ff8:	4ba3      	ldr	r3, [pc, #652]	; (8004288 <GSMCellInfo+0x374>)
 8003ffa:	2278      	movs	r2, #120	; 0x78
 8003ffc:	801a      	strh	r2, [r3, #0]
	strcpy(SS0,"x\0");
 8003ffe:	4b92      	ldr	r3, [pc, #584]	; (8004248 <GSMCellInfo+0x334>)
 8004000:	2278      	movs	r2, #120	; 0x78
 8004002:	801a      	strh	r2, [r3, #0]
	strcpy(SS1,"x\0");
 8004004:	4b91      	ldr	r3, [pc, #580]	; (800424c <GSMCellInfo+0x338>)
 8004006:	2278      	movs	r2, #120	; 0x78
 8004008:	801a      	strh	r2, [r3, #0]
	strcpy(CID1,"x\0");
 800400a:	4b9e      	ldr	r3, [pc, #632]	; (8004284 <GSMCellInfo+0x370>)
 800400c:	2278      	movs	r2, #120	; 0x78
 800400e:	801a      	strh	r2, [r3, #0]
	strcpy(LAC1,"x\0");
 8004010:	4b95      	ldr	r3, [pc, #596]	; (8004268 <GSMCellInfo+0x354>)
 8004012:	2278      	movs	r2, #120	; 0x78
 8004014:	801a      	strh	r2, [r3, #0]

	strcpy(SS2,"x\0");
 8004016:	4b8e      	ldr	r3, [pc, #568]	; (8004250 <GSMCellInfo+0x33c>)
 8004018:	2278      	movs	r2, #120	; 0x78
 800401a:	801a      	strh	r2, [r3, #0]
	strcpy(CID2,"x\0");
 800401c:	4b98      	ldr	r3, [pc, #608]	; (8004280 <GSMCellInfo+0x36c>)
 800401e:	2278      	movs	r2, #120	; 0x78
 8004020:	801a      	strh	r2, [r3, #0]
	strcpy(LAC2,"x\0");
 8004022:	4b92      	ldr	r3, [pc, #584]	; (800426c <GSMCellInfo+0x358>)
 8004024:	2278      	movs	r2, #120	; 0x78
 8004026:	801a      	strh	r2, [r3, #0]

	strcpy(SS3,"x\0");
 8004028:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <GSMCellInfo+0x340>)
 800402a:	2278      	movs	r2, #120	; 0x78
 800402c:	801a      	strh	r2, [r3, #0]
	strcpy(CID3,"x\0");
 800402e:	4b93      	ldr	r3, [pc, #588]	; (800427c <GSMCellInfo+0x368>)
 8004030:	2278      	movs	r2, #120	; 0x78
 8004032:	801a      	strh	r2, [r3, #0]
	strcpy(LAC3,"x\0");
 8004034:	4b8e      	ldr	r3, [pc, #568]	; (8004270 <GSMCellInfo+0x35c>)
 8004036:	2278      	movs	r2, #120	; 0x78
 8004038:	801a      	strh	r2, [r3, #0]

	strcpy(SS4,"x\0");
 800403a:	4b87      	ldr	r3, [pc, #540]	; (8004258 <GSMCellInfo+0x344>)
 800403c:	2278      	movs	r2, #120	; 0x78
 800403e:	801a      	strh	r2, [r3, #0]
	strcpy(CID4,"x\0");
 8004040:	4b8d      	ldr	r3, [pc, #564]	; (8004278 <GSMCellInfo+0x364>)
 8004042:	2278      	movs	r2, #120	; 0x78
 8004044:	801a      	strh	r2, [r3, #0]
	strcpy(LAC4,"x\0");
 8004046:	4b8b      	ldr	r3, [pc, #556]	; (8004274 <GSMCellInfo+0x360>)
 8004048:	2278      	movs	r2, #120	; 0x78
 800404a:	801a      	strh	r2, [r3, #0]

	memset(GSMData,0,800);
 800404c:	23c8      	movs	r3, #200	; 0xc8
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	4b8e      	ldr	r3, [pc, #568]	; (800428c <GSMCellInfo+0x378>)
 8004052:	2100      	movs	r1, #0
 8004054:	0018      	movs	r0, r3
 8004056:	f00e fdfd 	bl	8012c54 <memset>

	SendGSMCodeL(" AT+QENG?");
 800405a:	4b8d      	ldr	r3, [pc, #564]	; (8004290 <GSMCellInfo+0x37c>)
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fb59 	bl	8003714 <SendGSMCodeL>
	//Debug_Tx(GSMData);

	HAL_Delay(500);
 8004062:	23fa      	movs	r3, #250	; 0xfa
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	0018      	movs	r0, r3
 8004068:	f004 fcc6 	bl	80089f8 <HAL_Delay>

	char* m0=strstr(GSMData, "+QENG: 0");
 800406c:	4a89      	ldr	r2, [pc, #548]	; (8004294 <GSMCellInfo+0x380>)
 800406e:	4b87      	ldr	r3, [pc, #540]	; (800428c <GSMCellInfo+0x378>)
 8004070:	0011      	movs	r1, r2
 8004072:	0018      	movs	r0, r3
 8004074:	f00e fe9e 	bl	8012db4 <strstr>
 8004078:	0003      	movs	r3, r0
 800407a:	607b      	str	r3, [r7, #4]
	if((m0 != NULL) &(strlen(m0)>1)){
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	4193      	sbcs	r3, r2
 8004082:	b2dc      	uxtb	r4, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f7fc f83e 	bl	8000108 <strlen>
 800408c:	0003      	movs	r3, r0
 800408e:	2201      	movs	r2, #1
 8004090:	429a      	cmp	r2, r3
 8004092:	419b      	sbcs	r3, r3
 8004094:	425b      	negs	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4023      	ands	r3, r4
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d042      	beq.n	8004126 <GSMCellInfo+0x212>

		//Debug_Tx(m0);
		int k=0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
		char* part;
		while ((part = strtok_r(m0, ",", &m0))){
 80040a4:	e033      	b.n	800410e <GSMCellInfo+0x1fa>
			if(k==1)strcpy(MCC0,part);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <GSMCellInfo+0x1a6>
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4b6b      	ldr	r3, [pc, #428]	; (800425c <GSMCellInfo+0x348>)
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f00e ff83 	bl	8012fbe <strcpy>
 80040b8:	e026      	b.n	8004108 <GSMCellInfo+0x1f4>
			else if(k==2)strcpy(MNC0,part);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d106      	bne.n	80040ce <GSMCellInfo+0x1ba>
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4b67      	ldr	r3, [pc, #412]	; (8004260 <GSMCellInfo+0x34c>)
 80040c4:	0011      	movs	r1, r2
 80040c6:	0018      	movs	r0, r3
 80040c8:	f00e ff79 	bl	8012fbe <strcpy>
 80040cc:	e01c      	b.n	8004108 <GSMCellInfo+0x1f4>
			else if(k==3)strcpy(LAC0,part);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d106      	bne.n	80040e2 <GSMCellInfo+0x1ce>
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <GSMCellInfo+0x350>)
 80040d8:	0011      	movs	r1, r2
 80040da:	0018      	movs	r0, r3
 80040dc:	f00e ff6f 	bl	8012fbe <strcpy>
 80040e0:	e012      	b.n	8004108 <GSMCellInfo+0x1f4>
			else if(k==4)strcpy(CID0,part);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d106      	bne.n	80040f6 <GSMCellInfo+0x1e2>
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4b67      	ldr	r3, [pc, #412]	; (8004288 <GSMCellInfo+0x374>)
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f00e ff65 	bl	8012fbe <strcpy>
 80040f4:	e008      	b.n	8004108 <GSMCellInfo+0x1f4>
			else if(k==7)strcpy(SS0,part);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b07      	cmp	r3, #7
 80040fa:	d105      	bne.n	8004108 <GSMCellInfo+0x1f4>
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4b52      	ldr	r3, [pc, #328]	; (8004248 <GSMCellInfo+0x334>)
 8004100:	0011      	movs	r1, r2
 8004102:	0018      	movs	r0, r3
 8004104:	f00e ff5b 	bl	8012fbe <strcpy>
			k++;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
		while ((part = strtok_r(m0, ",", &m0))){
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	1d3a      	adds	r2, r7, #4
 8004112:	4961      	ldr	r1, [pc, #388]	; (8004298 <GSMCellInfo+0x384>)
 8004114:	0018      	movs	r0, r3
 8004116:	f00e fe48 	bl	8012daa <strtok_r>
 800411a:	0003      	movs	r3, r0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1c0      	bne.n	80040a6 <GSMCellInfo+0x192>
 8004124:	e003      	b.n	800412e <GSMCellInfo+0x21a>
		}
	}
	else{
		Debug_Tx("GSM tower data  Signal");}
 8004126:	4b5d      	ldr	r3, [pc, #372]	; (800429c <GSMCellInfo+0x388>)
 8004128:	0018      	movs	r0, r3
 800412a:	f003 feb1 	bl	8007e90 <Debug_Tx>
	char* m1=strstr(GSMData, "+QENG: 1");
 800412e:	4a5c      	ldr	r2, [pc, #368]	; (80042a0 <GSMCellInfo+0x38c>)
 8004130:	4b56      	ldr	r3, [pc, #344]	; (800428c <GSMCellInfo+0x378>)
 8004132:	0011      	movs	r1, r2
 8004134:	0018      	movs	r0, r3
 8004136:	f00e fe3d 	bl	8012db4 <strstr>
 800413a:	0003      	movs	r3, r0
 800413c:	603b      	str	r3, [r7, #0]
	if((m1 != NULL) &(strlen(m1)>1)){
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1e5a      	subs	r2, r3, #1
 8004142:	4193      	sbcs	r3, r2
 8004144:	b2dc      	uxtb	r4, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	0018      	movs	r0, r3
 800414a:	f7fb ffdd 	bl	8000108 <strlen>
 800414e:	0003      	movs	r3, r0
 8004150:	2201      	movs	r2, #1
 8004152:	429a      	cmp	r2, r3
 8004154:	419b      	sbcs	r3, r3
 8004156:	425b      	negs	r3, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4023      	ands	r3, r4
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d100      	bne.n	8004164 <GSMCellInfo+0x250>
 8004162:	e0b7      	b.n	80042d4 <GSMCellInfo+0x3c0>
		//Debug_Tx(m1);
		int k=0;
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
		char* part;
		while ((part = strtok_r(m1, ",", &m1))){
 8004168:	e0a8      	b.n	80042bc <GSMCellInfo+0x3a8>
			if(k==3)strcpy(SS1,part);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d106      	bne.n	800417e <GSMCellInfo+0x26a>
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4b36      	ldr	r3, [pc, #216]	; (800424c <GSMCellInfo+0x338>)
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f00e ff21 	bl	8012fbe <strcpy>
 800417c:	e09b      	b.n	80042b6 <GSMCellInfo+0x3a2>
			else if(k==10)strcpy(CID1,part);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b0a      	cmp	r3, #10
 8004182:	d106      	bne.n	8004192 <GSMCellInfo+0x27e>
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <GSMCellInfo+0x370>)
 8004188:	0011      	movs	r1, r2
 800418a:	0018      	movs	r0, r3
 800418c:	f00e ff17 	bl	8012fbe <strcpy>
 8004190:	e091      	b.n	80042b6 <GSMCellInfo+0x3a2>
			else if(k==9)strcpy(LAC1,part);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b09      	cmp	r3, #9
 8004196:	d106      	bne.n	80041a6 <GSMCellInfo+0x292>
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <GSMCellInfo+0x354>)
 800419c:	0011      	movs	r1, r2
 800419e:	0018      	movs	r0, r3
 80041a0:	f00e ff0d 	bl	8012fbe <strcpy>
 80041a4:	e087      	b.n	80042b6 <GSMCellInfo+0x3a2>

			else if(k==13)strcpy(SS2,part);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b0d      	cmp	r3, #13
 80041aa:	d106      	bne.n	80041ba <GSMCellInfo+0x2a6>
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	4b28      	ldr	r3, [pc, #160]	; (8004250 <GSMCellInfo+0x33c>)
 80041b0:	0011      	movs	r1, r2
 80041b2:	0018      	movs	r0, r3
 80041b4:	f00e ff03 	bl	8012fbe <strcpy>
 80041b8:	e07d      	b.n	80042b6 <GSMCellInfo+0x3a2>
			else if(k==20)strcpy(CID2,part);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b14      	cmp	r3, #20
 80041be:	d106      	bne.n	80041ce <GSMCellInfo+0x2ba>
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <GSMCellInfo+0x36c>)
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f00e fef9 	bl	8012fbe <strcpy>
 80041cc:	e073      	b.n	80042b6 <GSMCellInfo+0x3a2>
			else if(k==19)strcpy(LAC2,part);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b13      	cmp	r3, #19
 80041d2:	d106      	bne.n	80041e2 <GSMCellInfo+0x2ce>
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	4b25      	ldr	r3, [pc, #148]	; (800426c <GSMCellInfo+0x358>)
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f00e feef 	bl	8012fbe <strcpy>
 80041e0:	e069      	b.n	80042b6 <GSMCellInfo+0x3a2>

			else if(k==23)strcpy(SS3,part);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b17      	cmp	r3, #23
 80041e6:	d106      	bne.n	80041f6 <GSMCellInfo+0x2e2>
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <GSMCellInfo+0x340>)
 80041ec:	0011      	movs	r1, r2
 80041ee:	0018      	movs	r0, r3
 80041f0:	f00e fee5 	bl	8012fbe <strcpy>
 80041f4:	e05f      	b.n	80042b6 <GSMCellInfo+0x3a2>
			else if(k==30)strcpy(CID3,part);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b1e      	cmp	r3, #30
 80041fa:	d106      	bne.n	800420a <GSMCellInfo+0x2f6>
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	4b1f      	ldr	r3, [pc, #124]	; (800427c <GSMCellInfo+0x368>)
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f00e fedb 	bl	8012fbe <strcpy>
 8004208:	e055      	b.n	80042b6 <GSMCellInfo+0x3a2>
			else if(k==29)strcpy(LAC3,part);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b1d      	cmp	r3, #29
 800420e:	d106      	bne.n	800421e <GSMCellInfo+0x30a>
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <GSMCellInfo+0x35c>)
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f00e fed1 	bl	8012fbe <strcpy>
 800421c:	e04b      	b.n	80042b6 <GSMCellInfo+0x3a2>

			else if(k==33)strcpy(SS4,part);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d106      	bne.n	8004232 <GSMCellInfo+0x31e>
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <GSMCellInfo+0x344>)
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f00e fec7 	bl	8012fbe <strcpy>
 8004230:	e041      	b.n	80042b6 <GSMCellInfo+0x3a2>
			else if(k==40)strcpy(CID4,part);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b28      	cmp	r3, #40	; 0x28
 8004236:	d135      	bne.n	80042a4 <GSMCellInfo+0x390>
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <GSMCellInfo+0x364>)
 800423c:	0011      	movs	r1, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f00e febd 	bl	8012fbe <strcpy>
 8004244:	e037      	b.n	80042b6 <GSMCellInfo+0x3a2>
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	200015bc 	.word	0x200015bc
 800424c:	200015e0 	.word	0x200015e0
 8004250:	200015f4 	.word	0x200015f4
 8004254:	20001608 	.word	0x20001608
 8004258:	2000161c 	.word	0x2000161c
 800425c:	200015c0 	.word	0x200015c0
 8004260:	200015c8 	.word	0x200015c8
 8004264:	200015d0 	.word	0x200015d0
 8004268:	200015e4 	.word	0x200015e4
 800426c:	200015f8 	.word	0x200015f8
 8004270:	2000160c 	.word	0x2000160c
 8004274:	20001620 	.word	0x20001620
 8004278:	20001628 	.word	0x20001628
 800427c:	20001614 	.word	0x20001614
 8004280:	20001600 	.word	0x20001600
 8004284:	200015ec 	.word	0x200015ec
 8004288:	200015d8 	.word	0x200015d8
 800428c:	20000dec 	.word	0x20000dec
 8004290:	08016da4 	.word	0x08016da4
 8004294:	08016db0 	.word	0x08016db0
 8004298:	08016878 	.word	0x08016878
 800429c:	08016dbc 	.word	0x08016dbc
 80042a0:	08016dd4 	.word	0x08016dd4
			else if(k==39)strcpy(LAC4,part);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b27      	cmp	r3, #39	; 0x27
 80042a8:	d105      	bne.n	80042b6 <GSMCellInfo+0x3a2>
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4b24      	ldr	r3, [pc, #144]	; (8004340 <GSMCellInfo+0x42c>)
 80042ae:	0011      	movs	r1, r2
 80042b0:	0018      	movs	r0, r3
 80042b2:	f00e fe84 	bl	8012fbe <strcpy>
			k++;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	3301      	adds	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
		while ((part = strtok_r(m1, ",", &m1))){
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	003a      	movs	r2, r7
 80042c0:	4920      	ldr	r1, [pc, #128]	; (8004344 <GSMCellInfo+0x430>)
 80042c2:	0018      	movs	r0, r3
 80042c4:	f00e fd71 	bl	8012daa <strtok_r>
 80042c8:	0003      	movs	r3, r0
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d000      	beq.n	80042d4 <GSMCellInfo+0x3c0>
 80042d2:	e74a      	b.n	800416a <GSMCellInfo+0x256>





	memset(gsminfo,0,80);
 80042d4:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <GSMCellInfo+0x434>)
 80042d6:	2250      	movs	r2, #80	; 0x50
 80042d8:	2100      	movs	r1, #0
 80042da:	0018      	movs	r0, r3
 80042dc:	f00e fcba 	bl	8012c54 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",(int)GSMSignal,MCC0,MNC0,LAC0,CID0,CID1,LAC1,SS1,CID2,LAC2,SS2,CID3,LAC3,SS3,CID4,LAC4,SS4);
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <GSMCellInfo+0x438>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1c18      	adds	r0, r3, #0
 80042e6:	f7fc ffe1 	bl	80012ac <__aeabi_f2iz>
 80042ea:	0004      	movs	r4, r0
 80042ec:	4a18      	ldr	r2, [pc, #96]	; (8004350 <GSMCellInfo+0x43c>)
 80042ee:	4919      	ldr	r1, [pc, #100]	; (8004354 <GSMCellInfo+0x440>)
 80042f0:	4815      	ldr	r0, [pc, #84]	; (8004348 <GSMCellInfo+0x434>)
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <GSMCellInfo+0x444>)
 80042f4:	930e      	str	r3, [sp, #56]	; 0x38
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <GSMCellInfo+0x42c>)
 80042f8:	930d      	str	r3, [sp, #52]	; 0x34
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <GSMCellInfo+0x448>)
 80042fc:	930c      	str	r3, [sp, #48]	; 0x30
 80042fe:	4b18      	ldr	r3, [pc, #96]	; (8004360 <GSMCellInfo+0x44c>)
 8004300:	930b      	str	r3, [sp, #44]	; 0x2c
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <GSMCellInfo+0x450>)
 8004304:	930a      	str	r3, [sp, #40]	; 0x28
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <GSMCellInfo+0x454>)
 8004308:	9309      	str	r3, [sp, #36]	; 0x24
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <GSMCellInfo+0x458>)
 800430c:	9308      	str	r3, [sp, #32]
 800430e:	4b18      	ldr	r3, [pc, #96]	; (8004370 <GSMCellInfo+0x45c>)
 8004310:	9307      	str	r3, [sp, #28]
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <GSMCellInfo+0x460>)
 8004314:	9306      	str	r3, [sp, #24]
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <GSMCellInfo+0x464>)
 8004318:	9305      	str	r3, [sp, #20]
 800431a:	4b18      	ldr	r3, [pc, #96]	; (800437c <GSMCellInfo+0x468>)
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <GSMCellInfo+0x46c>)
 8004320:	9303      	str	r3, [sp, #12]
 8004322:	4b18      	ldr	r3, [pc, #96]	; (8004384 <GSMCellInfo+0x470>)
 8004324:	9302      	str	r3, [sp, #8]
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <GSMCellInfo+0x474>)
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <GSMCellInfo+0x478>)
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	0013      	movs	r3, r2
 8004330:	0022      	movs	r2, r4
 8004332:	f00e fc23 	bl	8012b7c <siprintf>
	//Debug_Tx(gsminfo);

	return(gsminfo);
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <GSMCellInfo+0x434>)

}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b007      	add	sp, #28
 800433e:	bd90      	pop	{r4, r7, pc}
 8004340:	20001620 	.word	0x20001620
 8004344:	08016878 	.word	0x08016878
 8004348:	20001500 	.word	0x20001500
 800434c:	200015b8 	.word	0x200015b8
 8004350:	200015c0 	.word	0x200015c0
 8004354:	08016de0 	.word	0x08016de0
 8004358:	2000161c 	.word	0x2000161c
 800435c:	20001628 	.word	0x20001628
 8004360:	20001608 	.word	0x20001608
 8004364:	2000160c 	.word	0x2000160c
 8004368:	20001614 	.word	0x20001614
 800436c:	200015f4 	.word	0x200015f4
 8004370:	200015f8 	.word	0x200015f8
 8004374:	20001600 	.word	0x20001600
 8004378:	200015e0 	.word	0x200015e0
 800437c:	200015e4 	.word	0x200015e4
 8004380:	200015ec 	.word	0x200015ec
 8004384:	200015d8 	.word	0x200015d8
 8004388:	200015d0 	.word	0x200015d0
 800438c:	200015c8 	.word	0x200015c8

08004390 <SetTCPMux>:
	strcpy(GSMData,SendGSMCode(" AT+CCED"));
	return(GSMData);
}
*/

char* SetTCPMux(){
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af04      	add	r7, sp, #16
	SendGSMCode(" AT+QIMUX=1");
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <SetTCPMux+0x34>)
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff f959 	bl	8003650 <SendGSMCode>
	return(GetGSMReply(0,"",0,"","Error: AT+QIMUX=1 set tcpMux",gpsto_dev,"OK"));
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <SetTCPMux+0x38>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	480a      	ldr	r0, [pc, #40]	; (80043cc <SetTCPMux+0x3c>)
 80043a4:	4909      	ldr	r1, [pc, #36]	; (80043cc <SetTCPMux+0x3c>)
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <SetTCPMux+0x40>)
 80043a8:	9202      	str	r2, [sp, #8]
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <SetTCPMux+0x44>)
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	0003      	movs	r3, r0
 80043b2:	2200      	movs	r2, #0
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7ff fa43 	bl	8003840 <GetGSMReply>
 80043ba:	0003      	movs	r3, r0
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	08016e14 	.word	0x08016e14
 80043c8:	20000014 	.word	0x20000014
 80043cc:	080169e4 	.word	0x080169e4
 80043d0:	080168e4 	.word	0x080168e4
 80043d4:	08016e20 	.word	0x08016e20

080043d8 <ResetTCP>:



void ResetTCP(){
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
	//EndTransfer();
	StopTCPConnection();
 80043dc:	f7ff fc2a 	bl	8003c34 <StopTCPConnection>
	StartTCPConnection();
 80043e0:	f7ff fbae 	bl	8003b40 <StartTCPConnection>

}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <ProcessTCPAll>:

void ProcessTCPAll( char* data){
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	int tcpSENDDATA=tic();
 80043f4:	f001 ffd6 	bl	80063a4 <tic>
 80043f8:	0003      	movs	r3, r0
 80043fa:	60fb      	str	r3, [r7, #12]



	if(ServerConnected>0){
 80043fc:	4b16      	ldr	r3, [pc, #88]	; (8004458 <ProcessTCPAll+0x6c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	dd0c      	ble.n	800441e <ProcessTCPAll+0x32>
		//$AS01FFA0138,$123456789012345,$1.0.4,$1.0.0,28.609803N077.103198E,F7,*

		Debug_Tx("sending data to ip ");
 8004404:	4b15      	ldr	r3, [pc, #84]	; (800445c <ProcessTCPAll+0x70>)
 8004406:	0018      	movs	r0, r3
 8004408:	f003 fd42 	bl	8007e90 <Debug_Tx>
		Debug_Tx(ip2);
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <ProcessTCPAll+0x74>)
 800440e:	0018      	movs	r0, r3
 8004410:	f003 fd3e 	bl	8007e90 <Debug_Tx>
		//SendTCPdata(data_LOGIN);
		SendTCPdata(data);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff fc7c 	bl	8003d14 <SendTCPdata>
 800441c:	e011      	b.n	8004442 <ProcessTCPAll+0x56>
	}else{
		if (debug==1){Debug_Tx("Error: ServerSession disconnected ");}
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <ProcessTCPAll+0x78>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d103      	bne.n	800442e <ProcessTCPAll+0x42>
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <ProcessTCPAll+0x7c>)
 8004428:	0018      	movs	r0, r3
 800442a:	f003 fd31 	bl	8007e90 <Debug_Tx>

		Debug_Tx("error insending data to ip ");
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <ProcessTCPAll+0x80>)
 8004430:	0018      	movs	r0, r3
 8004432:	f003 fd2d 	bl	8007e90 <Debug_Tx>
		Debug_Tx(ip2);
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <ProcessTCPAll+0x74>)
 8004438:	0018      	movs	r0, r3
 800443a:	f003 fd29 	bl	8007e90 <Debug_Tx>
		ResetTCP();
 800443e:	f7ff ffcb 	bl	80043d8 <ResetTCP>

}



 	toc( tcpSENDDATA,"_________________________TCP SEND DATA");
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <ProcessTCPAll+0x84>)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	0011      	movs	r1, r2
 8004448:	0018      	movs	r0, r3
 800444a:	f001 ffb3 	bl	80063b4 <toc>


}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	20001630 	.word	0x20001630
 800445c:	08016e40 	.word	0x08016e40
 8004460:	20000030 	.word	0x20000030
 8004464:	2000000c 	.word	0x2000000c
 8004468:	08016e54 	.word	0x08016e54
 800446c:	08016e78 	.word	0x08016e78
 8004470:	08016e94 	.word	0x08016e94

08004474 <SetupGPRS>:
	return smsok;
}



void SetupGPRS(char* apn){
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af04      	add	r7, sp, #16
 800447a:	6078      	str	r0, [r7, #4]

	int ck=5;
 800447c:	2305      	movs	r3, #5
 800447e:	60fb      	str	r3, [r7, #12]

	gprsok=0;
 8004480:	4b39      	ldr	r3, [pc, #228]	; (8004568 <SetupGPRS+0xf4>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	while((ck>0) && (gprsok<1)){
 8004486:	e064      	b.n	8004552 <SetupGPRS+0xde>
		HAL_Delay(2000);
 8004488:	23fa      	movs	r3, #250	; 0xfa
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	0018      	movs	r0, r3
 800448e:	f004 fab3 	bl	80089f8 <HAL_Delay>
		ck=ck-1;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b01      	subs	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
		//SendGSMCode(" AT+CGACT=0,1");
		//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",500));
		memset(GSMDataC,0,100);
 8004498:	4b34      	ldr	r3, [pc, #208]	; (800456c <SetupGPRS+0xf8>)
 800449a:	2264      	movs	r2, #100	; 0x64
 800449c:	2100      	movs	r1, #0
 800449e:	0018      	movs	r0, r3
 80044a0:	f00e fbd8 	bl	8012c54 <memset>
		strcpy(GSMDataC,(char*)" AT+QICSGP=1,\"");
 80044a4:	4b31      	ldr	r3, [pc, #196]	; (800456c <SetupGPRS+0xf8>)
 80044a6:	4a32      	ldr	r2, [pc, #200]	; (8004570 <SetupGPRS+0xfc>)
 80044a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044aa:	c313      	stmia	r3!, {r0, r1, r4}
 80044ac:	8811      	ldrh	r1, [r2, #0]
 80044ae:	8019      	strh	r1, [r3, #0]
 80044b0:	7892      	ldrb	r2, [r2, #2]
 80044b2:	709a      	strb	r2, [r3, #2]
		strcat(GSMDataC,apn);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4b2d      	ldr	r3, [pc, #180]	; (800456c <SetupGPRS+0xf8>)
 80044b8:	0011      	movs	r1, r2
 80044ba:	0018      	movs	r0, r3
 80044bc:	f00e fbd2 	bl	8012c64 <strcat>
		strcat(GSMDataC,"\",\"\",\"\",0");
 80044c0:	4b2a      	ldr	r3, [pc, #168]	; (800456c <SetupGPRS+0xf8>)
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7fb fe20 	bl	8000108 <strlen>
 80044c8:	0003      	movs	r3, r0
 80044ca:	001a      	movs	r2, r3
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <SetupGPRS+0xf8>)
 80044ce:	18d2      	adds	r2, r2, r3
 80044d0:	4b28      	ldr	r3, [pc, #160]	; (8004574 <SetupGPRS+0x100>)
 80044d2:	0010      	movs	r0, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	230a      	movs	r3, #10
 80044d8:	001a      	movs	r2, r3
 80044da:	f00e fd83 	bl	8012fe4 <memcpy>
		SendGSMCode(GSMDataC);
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <SetupGPRS+0xf8>)
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7ff f8b5 	bl	8003650 <SendGSMCode>
		gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QICSGP=1 APN Setup",gpsto_dev,"OK"));
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <SetupGPRS+0x104>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4824      	ldr	r0, [pc, #144]	; (800457c <SetupGPRS+0x108>)
 80044ec:	4923      	ldr	r1, [pc, #140]	; (800457c <SetupGPRS+0x108>)
 80044ee:	4a24      	ldr	r2, [pc, #144]	; (8004580 <SetupGPRS+0x10c>)
 80044f0:	9202      	str	r2, [sp, #8]
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <SetupGPRS+0x110>)
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	0003      	movs	r3, r0
 80044fa:	2200      	movs	r2, #0
 80044fc:	2000      	movs	r0, #0
 80044fe:	f7ff f99f 	bl	8003840 <GetGSMReply>
 8004502:	0003      	movs	r3, r0
 8004504:	0018      	movs	r0, r3
 8004506:	f7fb fdff 	bl	8000108 <strlen>
 800450a:	0003      	movs	r3, r0
 800450c:	001a      	movs	r2, r3
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <SetupGPRS+0xf4>)
 8004510:	601a      	str	r2, [r3, #0]

		//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",10));
		if(gprsok>0){
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <SetupGPRS+0xf4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	dd1b      	ble.n	8004552 <SetupGPRS+0xde>
			//gprsok=0;
			//HAL_Delay(4000);

					SendGSMCode(" AT+QIMODE=0");
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <SetupGPRS+0x114>)
 800451c:	0018      	movs	r0, r3
 800451e:	f7ff f897 	bl	8003650 <SendGSMCode>
					gprsok=strlen(GetGSMReply(0,"",0,"","Error: QIMODE non transperent mode",gpsto_dev,"OK"));
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <SetupGPRS+0x104>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4815      	ldr	r0, [pc, #84]	; (800457c <SetupGPRS+0x108>)
 8004528:	4914      	ldr	r1, [pc, #80]	; (800457c <SetupGPRS+0x108>)
 800452a:	4a15      	ldr	r2, [pc, #84]	; (8004580 <SetupGPRS+0x10c>)
 800452c:	9202      	str	r2, [sp, #8]
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <SetupGPRS+0x118>)
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	0003      	movs	r3, r0
 8004536:	2200      	movs	r2, #0
 8004538:	2000      	movs	r0, #0
 800453a:	f7ff f981 	bl	8003840 <GetGSMReply>
 800453e:	0003      	movs	r3, r0
 8004540:	0018      	movs	r0, r3
 8004542:	f7fb fde1 	bl	8000108 <strlen>
 8004546:	0003      	movs	r3, r0
 8004548:	001a      	movs	r2, r3
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <SetupGPRS+0xf4>)
 800454c:	601a      	str	r2, [r3, #0]
			//SendGSMCode(" AT+CGATT=0");
			//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGATT=1 GPRS Setup",100));

			//SendGSMCode(" AT+CGATT=1");
			//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGATT=1 GPRS Setup",200));
			if(gprsok>0){
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <SetupGPRS+0xf4>)
 8004550:	681b      	ldr	r3, [r3, #0]
	while((ck>0) && (gprsok<1)){
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	dd03      	ble.n	8004560 <SetupGPRS+0xec>
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <SetupGPRS+0xf4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	dd93      	ble.n	8004488 <SetupGPRS+0x14>

				}
			}
		}
	}
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b005      	add	sp, #20
 8004566:	bd90      	pop	{r4, r7, pc}
 8004568:	20001494 	.word	0x20001494
 800456c:	200013cc 	.word	0x200013cc
 8004570:	08016ee8 	.word	0x08016ee8
 8004574:	08016ef8 	.word	0x08016ef8
 8004578:	20000014 	.word	0x20000014
 800457c:	080169e4 	.word	0x080169e4
 8004580:	080168e4 	.word	0x080168e4
 8004584:	08016f04 	.word	0x08016f04
 8004588:	08016f24 	.word	0x08016f24
 800458c:	08016f34 	.word	0x08016f34

08004590 <ShiftGSMProfile>:




void ShiftGSMProfile(){
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af04      	add	r7, sp, #16
	//RestartGSM();
	int ook;
	Debug_Tx("______________Begin_____________________________");
 8004596:	4b8c      	ldr	r3, [pc, #560]	; (80047c8 <ShiftGSMProfile+0x238>)
 8004598:	0018      	movs	r0, r3
 800459a:	f003 fc79 	bl	8007e90 <Debug_Tx>
	//Debug_Tx(GSMSimOperator());



	//Debug_Tx("______________setup stk_____________________________");
	int ck=10;
 800459e:	230a      	movs	r3, #10
 80045a0:	603b      	str	r3, [r7, #0]
	ook=0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 80045a6:	e0d5      	b.n	8004754 <ShiftGSMProfile+0x1c4>
		HAL_Delay(3000);
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <ShiftGSMProfile+0x23c>)
 80045aa:	0018      	movs	r0, r3
 80045ac:	f004 fa24 	bl	80089f8 <HAL_Delay>
		ck=ck-1;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+QSTK=1");
 80045b6:	4b86      	ldr	r3, [pc, #536]	; (80047d0 <ShiftGSMProfile+0x240>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff f849 	bl	8003650 <SendGSMCode>
		ook=strlen(GetGSMReply(0,"",0,"","Error: AT+QSTK=1 Setup STK",gpsto_net,"OK"));
 80045be:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <ShiftGSMProfile+0x244>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4885      	ldr	r0, [pc, #532]	; (80047d8 <ShiftGSMProfile+0x248>)
 80045c4:	4984      	ldr	r1, [pc, #528]	; (80047d8 <ShiftGSMProfile+0x248>)
 80045c6:	4a85      	ldr	r2, [pc, #532]	; (80047dc <ShiftGSMProfile+0x24c>)
 80045c8:	9202      	str	r2, [sp, #8]
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	4b84      	ldr	r3, [pc, #528]	; (80047e0 <ShiftGSMProfile+0x250>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	0003      	movs	r3, r0
 80045d2:	2200      	movs	r2, #0
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7ff f933 	bl	8003840 <GetGSMReply>
 80045da:	0003      	movs	r3, r0
 80045dc:	0018      	movs	r0, r3
 80045de:	f7fb fd93 	bl	8000108 <strlen>
 80045e2:	0003      	movs	r3, r0
 80045e4:	607b      	str	r3, [r7, #4]
		if(ook>0){
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dc00      	bgt.n	80045ee <ShiftGSMProfile+0x5e>
 80045ec:	e0b2      	b.n	8004754 <ShiftGSMProfile+0x1c4>
			Debug_Tx("______________Setup Menu_____________________________");
 80045ee:	4b7d      	ldr	r3, [pc, #500]	; (80047e4 <ShiftGSMProfile+0x254>)
 80045f0:	0018      	movs	r0, r3
 80045f2:	f003 fc4d 	bl	8007e90 <Debug_Tx>
			ook=0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	607b      	str	r3, [r7, #4]
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 80045fa:	4b7b      	ldr	r3, [pc, #492]	; (80047e8 <ShiftGSMProfile+0x258>)
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff f827 	bl	8003650 <SendGSMCode>
			ook=strlen(GetGSMReply(0,"",0,"","Error: AT+STKTR= Setup Menue",gpsto_net,"OK"));
 8004602:	4b74      	ldr	r3, [pc, #464]	; (80047d4 <ShiftGSMProfile+0x244>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4874      	ldr	r0, [pc, #464]	; (80047d8 <ShiftGSMProfile+0x248>)
 8004608:	4973      	ldr	r1, [pc, #460]	; (80047d8 <ShiftGSMProfile+0x248>)
 800460a:	4a74      	ldr	r2, [pc, #464]	; (80047dc <ShiftGSMProfile+0x24c>)
 800460c:	9202      	str	r2, [sp, #8]
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <ShiftGSMProfile+0x25c>)
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	0003      	movs	r3, r0
 8004616:	2200      	movs	r2, #0
 8004618:	2000      	movs	r0, #0
 800461a:	f7ff f911 	bl	8003840 <GetGSMReply>
 800461e:	0003      	movs	r3, r0
 8004620:	0018      	movs	r0, r3
 8004622:	f7fb fd71 	bl	8000108 <strlen>
 8004626:	0003      	movs	r3, r0
 8004628:	607b      	str	r3, [r7, #4]
			HAL_Delay(3000);
 800462a:	4b68      	ldr	r3, [pc, #416]	; (80047cc <ShiftGSMProfile+0x23c>)
 800462c:	0018      	movs	r0, r3
 800462e:	f004 f9e3 	bl	80089f8 <HAL_Delay>
			if(ook>0){
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	dc00      	bgt.n	800463a <ShiftGSMProfile+0xaa>
 8004638:	e08c      	b.n	8004754 <ShiftGSMProfile+0x1c4>
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
 800463a:	4b6d      	ldr	r3, [pc, #436]	; (80047f0 <ShiftGSMProfile+0x260>)
 800463c:	0018      	movs	r0, r3
 800463e:	f003 fc27 	bl	8007e90 <Debug_Tx>
				ook=0;
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 8004646:	4b6b      	ldr	r3, [pc, #428]	; (80047f4 <ShiftGSMProfile+0x264>)
 8004648:	0018      	movs	r0, r3
 800464a:	f7ff f801 	bl	8003650 <SendGSMCode>
				ook=strlen(GetGSMReply(0,"",0,"","Error: AT+STKENV= Profile COnfig",gpsto_net,"OK"));
 800464e:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <ShiftGSMProfile+0x244>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4861      	ldr	r0, [pc, #388]	; (80047d8 <ShiftGSMProfile+0x248>)
 8004654:	4960      	ldr	r1, [pc, #384]	; (80047d8 <ShiftGSMProfile+0x248>)
 8004656:	4a61      	ldr	r2, [pc, #388]	; (80047dc <ShiftGSMProfile+0x24c>)
 8004658:	9202      	str	r2, [sp, #8]
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <ShiftGSMProfile+0x268>)
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	0003      	movs	r3, r0
 8004662:	2200      	movs	r2, #0
 8004664:	2000      	movs	r0, #0
 8004666:	f7ff f8eb 	bl	8003840 <GetGSMReply>
 800466a:	0003      	movs	r3, r0
 800466c:	0018      	movs	r0, r3
 800466e:	f7fb fd4b 	bl	8000108 <strlen>
 8004672:	0003      	movs	r3, r0
 8004674:	607b      	str	r3, [r7, #4]
				if(ook>0){
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	dd6b      	ble.n	8004754 <ShiftGSMProfile+0x1c4>

					if(GSMProf==0){
 800467c:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <ShiftGSMProfile+0x26c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d121      	bne.n	80046c8 <ShiftGSMProfile+0x138>
						Debug_Tx("_____________BSNL profile Selection_____________________________");
 8004684:	4b5e      	ldr	r3, [pc, #376]	; (8004800 <ShiftGSMProfile+0x270>)
 8004686:	0018      	movs	r0, r3
 8004688:	f003 fc02 	bl	8007e90 <Debug_Tx>
						ook=0;
 800468c:	2300      	movs	r3, #0
 800468e:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 8004690:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <ShiftGSMProfile+0x274>)
 8004692:	0018      	movs	r0, r3
 8004694:	f7fe ffdc 	bl	8003650 <SendGSMCode>
						ook=strlen(GetGSMReply(0,"",0,"","Error:  AT+STKTR=BSNL Config",gpsto_net,"OK"));
 8004698:	4b4e      	ldr	r3, [pc, #312]	; (80047d4 <ShiftGSMProfile+0x244>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	484e      	ldr	r0, [pc, #312]	; (80047d8 <ShiftGSMProfile+0x248>)
 800469e:	494e      	ldr	r1, [pc, #312]	; (80047d8 <ShiftGSMProfile+0x248>)
 80046a0:	4a4e      	ldr	r2, [pc, #312]	; (80047dc <ShiftGSMProfile+0x24c>)
 80046a2:	9202      	str	r2, [sp, #8]
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	4b58      	ldr	r3, [pc, #352]	; (8004808 <ShiftGSMProfile+0x278>)
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	0003      	movs	r3, r0
 80046ac:	2200      	movs	r2, #0
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7ff f8c6 	bl	8003840 <GetGSMReply>
 80046b4:	0003      	movs	r3, r0
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7fb fd26 	bl	8000108 <strlen>
 80046bc:	0003      	movs	r3, r0
 80046be:	607b      	str	r3, [r7, #4]
						GSMProf=1;
 80046c0:	4b4e      	ldr	r3, [pc, #312]	; (80047fc <ShiftGSMProfile+0x26c>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e024      	b.n	8004712 <ShiftGSMProfile+0x182>
					}
					else if(GSMProf==1){
 80046c8:	4b4c      	ldr	r3, [pc, #304]	; (80047fc <ShiftGSMProfile+0x26c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d120      	bne.n	8004712 <ShiftGSMProfile+0x182>
						Debug_Tx("_____________Airtel profile Selection_____________________________");
 80046d0:	4b4e      	ldr	r3, [pc, #312]	; (800480c <ShiftGSMProfile+0x27c>)
 80046d2:	0018      	movs	r0, r3
 80046d4:	f003 fbdc 	bl	8007e90 <Debug_Tx>

						ook=0;
 80046d8:	2300      	movs	r3, #0
 80046da:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 80046dc:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <ShiftGSMProfile+0x280>)
 80046de:	0018      	movs	r0, r3
 80046e0:	f7fe ffb6 	bl	8003650 <SendGSMCode>
						ook=strlen(GetGSMReply(0,"",0,"","Error:  AT+STKTR=AIRTEL Config",gpsto_net,"OK"));
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <ShiftGSMProfile+0x244>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	483b      	ldr	r0, [pc, #236]	; (80047d8 <ShiftGSMProfile+0x248>)
 80046ea:	493b      	ldr	r1, [pc, #236]	; (80047d8 <ShiftGSMProfile+0x248>)
 80046ec:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <ShiftGSMProfile+0x24c>)
 80046ee:	9202      	str	r2, [sp, #8]
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	4b48      	ldr	r3, [pc, #288]	; (8004814 <ShiftGSMProfile+0x284>)
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	0003      	movs	r3, r0
 80046f8:	2200      	movs	r2, #0
 80046fa:	2000      	movs	r0, #0
 80046fc:	f7ff f8a0 	bl	8003840 <GetGSMReply>
 8004700:	0003      	movs	r3, r0
 8004702:	0018      	movs	r0, r3
 8004704:	f7fb fd00 	bl	8000108 <strlen>
 8004708:	0003      	movs	r3, r0
 800470a:	607b      	str	r3, [r7, #4]
						GSMProf=0;
 800470c:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <ShiftGSMProfile+0x26c>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

					}
					if(ook>0){
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	dd1d      	ble.n	8004754 <ShiftGSMProfile+0x1c4>
						Debug_Tx("_____________Refresh_____________________________");
 8004718:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <ShiftGSMProfile+0x288>)
 800471a:	0018      	movs	r0, r3
 800471c:	f003 fbb8 	bl	8007e90 <Debug_Tx>
						ook=0;
 8004720:	2300      	movs	r3, #0
 8004722:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 8004724:	4b3d      	ldr	r3, [pc, #244]	; (800481c <ShiftGSMProfile+0x28c>)
 8004726:	0018      	movs	r0, r3
 8004728:	f7fe ff92 	bl	8003650 <SendGSMCode>
						ook=strlen(GetGSMReply(0,"",0,"","Error:  AT+STKTR Refresh",gpsto_net,"OK"));
 800472c:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <ShiftGSMProfile+0x244>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4829      	ldr	r0, [pc, #164]	; (80047d8 <ShiftGSMProfile+0x248>)
 8004732:	4929      	ldr	r1, [pc, #164]	; (80047d8 <ShiftGSMProfile+0x248>)
 8004734:	4a29      	ldr	r2, [pc, #164]	; (80047dc <ShiftGSMProfile+0x24c>)
 8004736:	9202      	str	r2, [sp, #8]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <ShiftGSMProfile+0x290>)
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	0003      	movs	r3, r0
 8004740:	2200      	movs	r2, #0
 8004742:	2000      	movs	r0, #0
 8004744:	f7ff f87c 	bl	8003840 <GetGSMReply>
 8004748:	0003      	movs	r3, r0
 800474a:	0018      	movs	r0, r3
 800474c:	f7fb fcdc 	bl	8000108 <strlen>
 8004750:	0003      	movs	r3, r0
 8004752:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	dd03      	ble.n	8004762 <ShiftGSMProfile+0x1d2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	dc00      	bgt.n	8004762 <ShiftGSMProfile+0x1d2>
 8004760:	e722      	b.n	80045a8 <ShiftGSMProfile+0x18>





	Debug_Tx("_____________Restart_____________________________");
 8004762:	4b30      	ldr	r3, [pc, #192]	; (8004824 <ShiftGSMProfile+0x294>)
 8004764:	0018      	movs	r0, r3
 8004766:	f003 fb93 	bl	8007e90 <Debug_Tx>


	ck=2;
 800476a:	2302      	movs	r3, #2
 800476c:	603b      	str	r3, [r7, #0]
	ook=0;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 8004772:	e01a      	b.n	80047aa <ShiftGSMProfile+0x21a>
		ck=ck-1;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	3b01      	subs	r3, #1
 8004778:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+QPOWD=1");
 800477a:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <ShiftGSMProfile+0x298>)
 800477c:	0018      	movs	r0, r3
 800477e:	f7fe ff67 	bl	8003650 <SendGSMCode>
		ook=strlen(GetGSMReply(15,"",0,"","Error:  AT+QPOWD=1 Restart",gpsto_dev,"NORMAL POWER DOWN"));
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <ShiftGSMProfile+0x29c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4814      	ldr	r0, [pc, #80]	; (80047d8 <ShiftGSMProfile+0x248>)
 8004788:	4913      	ldr	r1, [pc, #76]	; (80047d8 <ShiftGSMProfile+0x248>)
 800478a:	4a29      	ldr	r2, [pc, #164]	; (8004830 <ShiftGSMProfile+0x2a0>)
 800478c:	9202      	str	r2, [sp, #8]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <ShiftGSMProfile+0x2a4>)
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	0003      	movs	r3, r0
 8004796:	2200      	movs	r2, #0
 8004798:	200f      	movs	r0, #15
 800479a:	f7ff f851 	bl	8003840 <GetGSMReply>
 800479e:	0003      	movs	r3, r0
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7fb fcb1 	bl	8000108 <strlen>
 80047a6:	0003      	movs	r3, r0
 80047a8:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	dd02      	ble.n	80047b6 <ShiftGSMProfile+0x226>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	ddde      	ble.n	8004774 <ShiftGSMProfile+0x1e4>
	}
	HAL_Delay(6000);
 80047b6:	4b20      	ldr	r3, [pc, #128]	; (8004838 <ShiftGSMProfile+0x2a8>)
 80047b8:	0018      	movs	r0, r3
 80047ba:	f004 f91d 	bl	80089f8 <HAL_Delay>
	//HAL_Delay(5000);




}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b002      	add	sp, #8
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	08016f58 	.word	0x08016f58
 80047cc:	00000bb8 	.word	0x00000bb8
 80047d0:	08016f8c 	.word	0x08016f8c
 80047d4:	20000010 	.word	0x20000010
 80047d8:	080169e4 	.word	0x080169e4
 80047dc:	080168e4 	.word	0x080168e4
 80047e0:	08016f98 	.word	0x08016f98
 80047e4:	08016fb4 	.word	0x08016fb4
 80047e8:	08016fec 	.word	0x08016fec
 80047ec:	08017014 	.word	0x08017014
 80047f0:	08017034 	.word	0x08017034
 80047f4:	08017074 	.word	0x08017074
 80047f8:	08017094 	.word	0x08017094
 80047fc:	20000018 	.word	0x20000018
 8004800:	080170b8 	.word	0x080170b8
 8004804:	080170fc 	.word	0x080170fc
 8004808:	08017128 	.word	0x08017128
 800480c:	08017148 	.word	0x08017148
 8004810:	0801718c 	.word	0x0801718c
 8004814:	080171b8 	.word	0x080171b8
 8004818:	080171d8 	.word	0x080171d8
 800481c:	0801720c 	.word	0x0801720c
 8004820:	08017234 	.word	0x08017234
 8004824:	08017250 	.word	0x08017250
 8004828:	08017284 	.word	0x08017284
 800482c:	20000014 	.word	0x20000014
 8004830:	08017290 	.word	0x08017290
 8004834:	080172a4 	.word	0x080172a4
 8004838:	00001770 	.word	0x00001770

0800483c <InitGSM>:



void InitGSM(){
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af04      	add	r7, sp, #16
	//RestartGSM();
	HAL_Delay(5000);
 8004842:	4bd0      	ldr	r3, [pc, #832]	; (8004b84 <InitGSM+0x348>)
 8004844:	0018      	movs	r0, r3
 8004846:	f004 f8d7 	bl	80089f8 <HAL_Delay>

	int i=0;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
	int ck=10;
 800484e:	230a      	movs	r3, #10
 8004850:	603b      	str	r3, [r7, #0]
		//SendGSMCode(" AT+QPOWD=1");
		//i=strlen(GetGSMReply(0,"NORMAL POWER DOWN",0,"","Error:  AT+QPOWD=1 Restart",20));

	//HAL_Delay(10000);
	ck=2;
 8004852:	2302      	movs	r3, #2
 8004854:	603b      	str	r3, [r7, #0]
	i=0;
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 800485a:	e01a      	b.n	8004892 <InitGSM+0x56>
		ck=ck-1;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	3b01      	subs	r3, #1
 8004860:	603b      	str	r3, [r7, #0]
		SendGSMCode(" ATE0");
 8004862:	4bc9      	ldr	r3, [pc, #804]	; (8004b88 <InitGSM+0x34c>)
 8004864:	0018      	movs	r0, r3
 8004866:	f7fe fef3 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(15,"",0,"","Error: ATE no Resp",gpsto_dev,"OK"));
 800486a:	4bc8      	ldr	r3, [pc, #800]	; (8004b8c <InitGSM+0x350>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	48c8      	ldr	r0, [pc, #800]	; (8004b90 <InitGSM+0x354>)
 8004870:	49c7      	ldr	r1, [pc, #796]	; (8004b90 <InitGSM+0x354>)
 8004872:	4ac8      	ldr	r2, [pc, #800]	; (8004b94 <InitGSM+0x358>)
 8004874:	9202      	str	r2, [sp, #8]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	4bc7      	ldr	r3, [pc, #796]	; (8004b98 <InitGSM+0x35c>)
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	0003      	movs	r3, r0
 800487e:	2200      	movs	r2, #0
 8004880:	200f      	movs	r0, #15
 8004882:	f7fe ffdd 	bl	8003840 <GetGSMReply>
 8004886:	0003      	movs	r3, r0
 8004888:	0018      	movs	r0, r3
 800488a:	f7fb fc3d 	bl	8000108 <strlen>
 800488e:	0003      	movs	r3, r0
 8004890:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	dd02      	ble.n	800489e <InitGSM+0x62>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	ddde      	ble.n	800485c <InitGSM+0x20>
	}
	ck=2;
 800489e:	2302      	movs	r3, #2
 80048a0:	603b      	str	r3, [r7, #0]
	i=0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 80048a6:	e01a      	b.n	80048de <InitGSM+0xa2>
		ck=ck-1;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT");
 80048ae:	4bbb      	ldr	r3, [pc, #748]	; (8004b9c <InitGSM+0x360>)
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fe fecd 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(15,"",0,"","Error: AT no Resp",gpsto_dev,"OK"));
 80048b6:	4bb5      	ldr	r3, [pc, #724]	; (8004b8c <InitGSM+0x350>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	48b5      	ldr	r0, [pc, #724]	; (8004b90 <InitGSM+0x354>)
 80048bc:	49b4      	ldr	r1, [pc, #720]	; (8004b90 <InitGSM+0x354>)
 80048be:	4ab5      	ldr	r2, [pc, #724]	; (8004b94 <InitGSM+0x358>)
 80048c0:	9202      	str	r2, [sp, #8]
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	4bb6      	ldr	r3, [pc, #728]	; (8004ba0 <InitGSM+0x364>)
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	0003      	movs	r3, r0
 80048ca:	2200      	movs	r2, #0
 80048cc:	200f      	movs	r0, #15
 80048ce:	f7fe ffb7 	bl	8003840 <GetGSMReply>
 80048d2:	0003      	movs	r3, r0
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7fb fc17 	bl	8000108 <strlen>
 80048da:	0003      	movs	r3, r0
 80048dc:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dd02      	ble.n	80048ea <InitGSM+0xae>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	ddde      	ble.n	80048a8 <InitGSM+0x6c>
	}

	HAL_Delay(2000);
 80048ea:	23fa      	movs	r3, #250	; 0xfa
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	0018      	movs	r0, r3
 80048f0:	f004 f882 	bl	80089f8 <HAL_Delay>
	ShiftGSMProfile();
 80048f4:	f7ff fe4c 	bl	8004590 <ShiftGSMProfile>


	//HAL_Delay(5000);
	ck=2;
 80048f8:	2302      	movs	r3, #2
 80048fa:	603b      	str	r3, [r7, #0]
	i=0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004900:	e01a      	b.n	8004938 <InitGSM+0xfc>
		ck=ck-1;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	3b01      	subs	r3, #1
 8004906:	603b      	str	r3, [r7, #0]
		SendGSMCode(" ATE0");
 8004908:	4b9f      	ldr	r3, [pc, #636]	; (8004b88 <InitGSM+0x34c>)
 800490a:	0018      	movs	r0, r3
 800490c:	f7fe fea0 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(10,"",0,"","Error: ATe no Resp",gpsto_dev,"OK"));
 8004910:	4b9e      	ldr	r3, [pc, #632]	; (8004b8c <InitGSM+0x350>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	489e      	ldr	r0, [pc, #632]	; (8004b90 <InitGSM+0x354>)
 8004916:	499e      	ldr	r1, [pc, #632]	; (8004b90 <InitGSM+0x354>)
 8004918:	4a9e      	ldr	r2, [pc, #632]	; (8004b94 <InitGSM+0x358>)
 800491a:	9202      	str	r2, [sp, #8]
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	4ba1      	ldr	r3, [pc, #644]	; (8004ba4 <InitGSM+0x368>)
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	0003      	movs	r3, r0
 8004924:	2200      	movs	r2, #0
 8004926:	200a      	movs	r0, #10
 8004928:	f7fe ff8a 	bl	8003840 <GetGSMReply>
 800492c:	0003      	movs	r3, r0
 800492e:	0018      	movs	r0, r3
 8004930:	f7fb fbea 	bl	8000108 <strlen>
 8004934:	0003      	movs	r3, r0
 8004936:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	dd02      	ble.n	8004944 <InitGSM+0x108>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	ddde      	ble.n	8004902 <InitGSM+0xc6>
	}
	ck=2;
 8004944:	2302      	movs	r3, #2
 8004946:	603b      	str	r3, [r7, #0]
	i=0;
 8004948:	2300      	movs	r3, #0
 800494a:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 800494c:	e01a      	b.n	8004984 <InitGSM+0x148>
		ck=ck-1;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT");
 8004954:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <InitGSM+0x360>)
 8004956:	0018      	movs	r0, r3
 8004958:	f7fe fe7a 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(10,"",0,"","Error: AT no Resp",gpsto_dev,"OK"));
 800495c:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <InitGSM+0x350>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	488b      	ldr	r0, [pc, #556]	; (8004b90 <InitGSM+0x354>)
 8004962:	498b      	ldr	r1, [pc, #556]	; (8004b90 <InitGSM+0x354>)
 8004964:	4a8b      	ldr	r2, [pc, #556]	; (8004b94 <InitGSM+0x358>)
 8004966:	9202      	str	r2, [sp, #8]
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <InitGSM+0x364>)
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	0003      	movs	r3, r0
 8004970:	2200      	movs	r2, #0
 8004972:	200a      	movs	r0, #10
 8004974:	f7fe ff64 	bl	8003840 <GetGSMReply>
 8004978:	0003      	movs	r3, r0
 800497a:	0018      	movs	r0, r3
 800497c:	f7fb fbc4 	bl	8000108 <strlen>
 8004980:	0003      	movs	r3, r0
 8004982:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	dd02      	ble.n	8004990 <InitGSM+0x154>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	ddde      	ble.n	800494e <InitGSM+0x112>
	//SendGSMCode(" AT+COLP=1"); //Connected Line Identification Presentation
			//i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+COLP=1 Connected  Line Identification ",10));
	//SendGSMCode(" AT+CSCA=\"+919810051914\",145");	//+CSCA: "+919810051914",145 //+919818023015


	ck=10;
 8004990:	230a      	movs	r3, #10
 8004992:	603b      	str	r3, [r7, #0]
	i=0;
 8004994:	2300      	movs	r3, #0
 8004996:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004998:	e0e8      	b.n	8004b6c <InitGSM+0x330>
		ck=ck-1;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	3b01      	subs	r3, #1
 800499e:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 80049a0:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <InitGSM+0x36c>)
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fe fe54 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(5,"",0,"","Error: AT+IFC=1,1 Software Flow COntrol",gpsto_dev,"OK"));
 80049a8:	4b78      	ldr	r3, [pc, #480]	; (8004b8c <InitGSM+0x350>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4878      	ldr	r0, [pc, #480]	; (8004b90 <InitGSM+0x354>)
 80049ae:	4978      	ldr	r1, [pc, #480]	; (8004b90 <InitGSM+0x354>)
 80049b0:	4a78      	ldr	r2, [pc, #480]	; (8004b94 <InitGSM+0x358>)
 80049b2:	9202      	str	r2, [sp, #8]
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	4b7d      	ldr	r3, [pc, #500]	; (8004bac <InitGSM+0x370>)
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	0003      	movs	r3, r0
 80049bc:	2200      	movs	r2, #0
 80049be:	2005      	movs	r0, #5
 80049c0:	f7fe ff3e 	bl	8003840 <GetGSMReply>
 80049c4:	0003      	movs	r3, r0
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fb fb9e 	bl	8000108 <strlen>
 80049cc:	0003      	movs	r3, r0
 80049ce:	607b      	str	r3, [r7, #4]
		//i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
 80049d0:	23fa      	movs	r3, #250	; 0xfa
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	0018      	movs	r0, r3
 80049d6:	f004 f80f 	bl	80089f8 <HAL_Delay>
		if(i>0){
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dc00      	bgt.n	80049e2 <InitGSM+0x1a6>
 80049e0:	e0c4      	b.n	8004b6c <InitGSM+0x330>
			SendGSMCode(" AT+CFUN=1"); //Select sms format
 80049e2:	4b73      	ldr	r3, [pc, #460]	; (8004bb0 <InitGSM+0x374>)
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fe fe33 	bl	8003650 <SendGSMCode>
			i=strlen(GetGSMReply(0,"",0,"","Error: AT+CFUN=1 set gsm full function",gpsto_dev,"OK"));
 80049ea:	4b68      	ldr	r3, [pc, #416]	; (8004b8c <InitGSM+0x350>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4868      	ldr	r0, [pc, #416]	; (8004b90 <InitGSM+0x354>)
 80049f0:	4967      	ldr	r1, [pc, #412]	; (8004b90 <InitGSM+0x354>)
 80049f2:	4a68      	ldr	r2, [pc, #416]	; (8004b94 <InitGSM+0x358>)
 80049f4:	9202      	str	r2, [sp, #8]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	4b6e      	ldr	r3, [pc, #440]	; (8004bb4 <InitGSM+0x378>)
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	0003      	movs	r3, r0
 80049fe:	2200      	movs	r2, #0
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7fe ff1d 	bl	8003840 <GetGSMReply>
 8004a06:	0003      	movs	r3, r0
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f7fb fb7d 	bl	8000108 <strlen>
 8004a0e:	0003      	movs	r3, r0
 8004a10:	607b      	str	r3, [r7, #4]

			if(i>0){
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dc00      	bgt.n	8004a1a <InitGSM+0x1de>
 8004a18:	e0a8      	b.n	8004b6c <InitGSM+0x330>
				SendGSMCode(" AT+CMGF=1"); //Select sms format
 8004a1a:	4b67      	ldr	r3, [pc, #412]	; (8004bb8 <InitGSM+0x37c>)
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fe fe17 	bl	8003650 <SendGSMCode>
				i=strlen(GetGSMReply(0,"",0,"","Error: AT+CMGF=1 SMS Mode",gpsto_dev,"OK"));
 8004a22:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <InitGSM+0x350>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	485a      	ldr	r0, [pc, #360]	; (8004b90 <InitGSM+0x354>)
 8004a28:	4959      	ldr	r1, [pc, #356]	; (8004b90 <InitGSM+0x354>)
 8004a2a:	4a5a      	ldr	r2, [pc, #360]	; (8004b94 <InitGSM+0x358>)
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	4b62      	ldr	r3, [pc, #392]	; (8004bbc <InitGSM+0x380>)
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	0003      	movs	r3, r0
 8004a36:	2200      	movs	r2, #0
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f7fe ff01 	bl	8003840 <GetGSMReply>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7fb fb61 	bl	8000108 <strlen>
 8004a46:	0003      	movs	r3, r0
 8004a48:	607b      	str	r3, [r7, #4]

			if(i>0){
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	dc00      	bgt.n	8004a52 <InitGSM+0x216>
 8004a50:	e08c      	b.n	8004b6c <InitGSM+0x330>
				SendGSMCode(" AT+CLIP=1"); //Calling Line Identification Presantation
 8004a52:	4b5b      	ldr	r3, [pc, #364]	; (8004bc0 <InitGSM+0x384>)
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7fe fdfb 	bl	8003650 <SendGSMCode>
				i=strlen(GetGSMReply(0,"",0,"","Error: AT+CLIP=1 Calling Line Identification",gpsto_dev,"OK"));
 8004a5a:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <InitGSM+0x350>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	484c      	ldr	r0, [pc, #304]	; (8004b90 <InitGSM+0x354>)
 8004a60:	494b      	ldr	r1, [pc, #300]	; (8004b90 <InitGSM+0x354>)
 8004a62:	4a4c      	ldr	r2, [pc, #304]	; (8004b94 <InitGSM+0x358>)
 8004a64:	9202      	str	r2, [sp, #8]
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <InitGSM+0x388>)
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2000      	movs	r0, #0
 8004a72:	f7fe fee5 	bl	8003840 <GetGSMReply>
 8004a76:	0003      	movs	r3, r0
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fb fb45 	bl	8000108 <strlen>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	607b      	str	r3, [r7, #4]
				if(i>0){
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dd71      	ble.n	8004b6c <InitGSM+0x330>
					SendGSMCode(" AT+CSCS=\"GSM\""); //Select TE Character Set
 8004a88:	4b4f      	ldr	r3, [pc, #316]	; (8004bc8 <InitGSM+0x38c>)
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f7fe fde0 	bl	8003650 <SendGSMCode>
					i=strlen(GetGSMReply(0,"",0,"","Error: AT+CSCS=\"GSM\"  SMS TE charecter set ",gpsto_dev,"OK"));
 8004a90:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <InitGSM+0x350>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	483e      	ldr	r0, [pc, #248]	; (8004b90 <InitGSM+0x354>)
 8004a96:	493e      	ldr	r1, [pc, #248]	; (8004b90 <InitGSM+0x354>)
 8004a98:	4a3e      	ldr	r2, [pc, #248]	; (8004b94 <InitGSM+0x358>)
 8004a9a:	9202      	str	r2, [sp, #8]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <InitGSM+0x390>)
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7fe feca 	bl	8003840 <GetGSMReply>
 8004aac:	0003      	movs	r3, r0
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7fb fb2a 	bl	8000108 <strlen>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	607b      	str	r3, [r7, #4]
					if(i>0){
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	dd56      	ble.n	8004b6c <InitGSM+0x330>
						HAL_Delay(3000);
 8004abe:	4b44      	ldr	r3, [pc, #272]	; (8004bd0 <InitGSM+0x394>)
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f003 ff99 	bl	80089f8 <HAL_Delay>
						//SendGSMCode(" AT+CSMP=17,167,0,16");
						//i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
						if(i>0){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dd4f      	ble.n	8004b6c <InitGSM+0x330>
							SendGSMCode(" AT+QENG=1,4");
 8004acc:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <InitGSM+0x398>)
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7fe fdbe 	bl	8003650 <SendGSMCode>
							i=strlen(GetGSMReply(0,"",0,"","Error: QENG=1,4 set eng mode for info ",gpsto_dev,"OK"));
 8004ad4:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <InitGSM+0x350>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	482d      	ldr	r0, [pc, #180]	; (8004b90 <InitGSM+0x354>)
 8004ada:	492d      	ldr	r1, [pc, #180]	; (8004b90 <InitGSM+0x354>)
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <InitGSM+0x358>)
 8004ade:	9202      	str	r2, [sp, #8]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <InitGSM+0x39c>)
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2000      	movs	r0, #0
 8004aec:	f7fe fea8 	bl	8003840 <GetGSMReply>
 8004af0:	0003      	movs	r3, r0
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fb fb08 	bl	8000108 <strlen>
 8004af8:	0003      	movs	r3, r0
 8004afa:	607b      	str	r3, [r7, #4]

							if(i>0){
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	dd34      	ble.n	8004b6c <InitGSM+0x330>

								HAL_Delay(1000);
 8004b02:	23fa      	movs	r3, #250	; 0xfa
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	0018      	movs	r0, r3
 8004b08:	f003 ff76 	bl	80089f8 <HAL_Delay>
									if(GSMProf==0){
 8004b0c:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <InitGSM+0x3a0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d108      	bne.n	8004b26 <InitGSM+0x2ea>
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
 8004b14:	4b32      	ldr	r3, [pc, #200]	; (8004be0 <InitGSM+0x3a4>)
 8004b16:	0018      	movs	r0, r3
 8004b18:	f003 f9ba 	bl	8007e90 <Debug_Tx>
										SetupGPRS("taisysnet");//taisysnet");
 8004b1c:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <InitGSM+0x3a8>)
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7ff fca8 	bl	8004474 <SetupGPRS>
 8004b24:	e00b      	b.n	8004b3e <InitGSM+0x302>

									}else if(GSMProf==1){
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <InitGSM+0x3a0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <InitGSM+0x302>
										Debug_Tx("_____________BSNL APN SET_____________________________");
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <InitGSM+0x3ac>)
 8004b30:	0018      	movs	r0, r3
 8004b32:	f003 f9ad 	bl	8007e90 <Debug_Tx>
										  SetupGPRS("bsnlnet");//taisysnet");
 8004b36:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <InitGSM+0x3b0>)
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fc9b 	bl	8004474 <SetupGPRS>
									}
									HAL_Delay(1000);
 8004b3e:	23fa      	movs	r3, #250	; 0xfa
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	0018      	movs	r0, r3
 8004b44:	f003 ff58 	bl	80089f8 <HAL_Delay>


									Debug_Tx("_____________Operator again_____________________________");
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <InitGSM+0x3b4>)
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f003 f9a0 	bl	8007e90 <Debug_Tx>
									//Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8004b50:	23fa      	movs	r3, #250	; 0xfa
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	0018      	movs	r0, r3
 8004b56:	f003 ff4f 	bl	80089f8 <HAL_Delay>
									SetTCPMux();
 8004b5a:	f7ff fc19 	bl	8004390 <SetTCPMux>
									HAL_Delay(1000);
 8004b5e:	23fa      	movs	r3, #250	; 0xfa
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	0018      	movs	r0, r3
 8004b64:	f003 ff48 	bl	80089f8 <HAL_Delay>
									SetTCPMux();
 8004b68:	f7ff fc12 	bl	8004390 <SetTCPMux>
	while((ck>0) && (i<1)){
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dd03      	ble.n	8004b7a <InitGSM+0x33e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	dc00      	bgt.n	8004b7a <InitGSM+0x33e>
 8004b78:	e70f      	b.n	800499a <InitGSM+0x15e>
				}
			}
		}
	}
	}
}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b002      	add	sp, #8
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	00001388 	.word	0x00001388
 8004b88:	080172c0 	.word	0x080172c0
 8004b8c:	20000014 	.word	0x20000014
 8004b90:	080169e4 	.word	0x080169e4
 8004b94:	080168e4 	.word	0x080168e4
 8004b98:	080172c8 	.word	0x080172c8
 8004b9c:	08016848 	.word	0x08016848
 8004ba0:	080172dc 	.word	0x080172dc
 8004ba4:	080172f0 	.word	0x080172f0
 8004ba8:	08017304 	.word	0x08017304
 8004bac:	08017310 	.word	0x08017310
 8004bb0:	08017338 	.word	0x08017338
 8004bb4:	08017344 	.word	0x08017344
 8004bb8:	0801736c 	.word	0x0801736c
 8004bbc:	08017378 	.word	0x08017378
 8004bc0:	08017394 	.word	0x08017394
 8004bc4:	080173a0 	.word	0x080173a0
 8004bc8:	080173d0 	.word	0x080173d0
 8004bcc:	080173e0 	.word	0x080173e0
 8004bd0:	00000bb8 	.word	0x00000bb8
 8004bd4:	0801740c 	.word	0x0801740c
 8004bd8:	0801741c 	.word	0x0801741c
 8004bdc:	20000018 	.word	0x20000018
 8004be0:	08017444 	.word	0x08017444
 8004be4:	08017480 	.word	0x08017480
 8004be8:	0801748c 	.word	0x0801748c
 8004bec:	080174c4 	.word	0x080174c4
 8004bf0:	080174cc 	.word	0x080174cc

08004bf4 <SPI_flash_sent_byte>:
uint8_t buffer_SPI_Recive[30];
//The data you want to receive

//This is the definition of an array

void SPI_flash_sent_byte(uint8_t data){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	1dfb      	adds	r3, r7, #7
 8004bfe:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004c00:	23fa      	movs	r3, #250	; 0xfa
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	1df9      	adds	r1, r7, #7
 8004c06:	4804      	ldr	r0, [pc, #16]	; (8004c18 <SPI_flash_sent_byte+0x24>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f007 f915 	bl	800be38 <HAL_SPI_Transmit>
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b002      	add	sp, #8
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	20000674 	.word	0x20000674

08004c1c <SPI_flash_Write_Enable>:

void SPI_flash_Write_Enable() {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
    SPI_flash_cs_low;
 8004c20:	23a0      	movs	r3, #160	; 0xa0
 8004c22:	05db      	lsls	r3, r3, #23
 8004c24:	2200      	movs	r2, #0
 8004c26:	2110      	movs	r1, #16
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f005 fb44 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004c2e:	2006      	movs	r0, #6
 8004c30:	f7ff ffe0 	bl	8004bf4 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8004c34:	23a0      	movs	r3, #160	; 0xa0
 8004c36:	05db      	lsls	r3, r3, #23
 8004c38:	2201      	movs	r2, #1
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f005 fb3a 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SPI_flash_Write_Disable>:

void SPI_flash_Write_Disable() {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
    SPI_flash_cs_low;
 8004c4c:	23a0      	movs	r3, #160	; 0xa0
 8004c4e:	05db      	lsls	r3, r3, #23
 8004c50:	2200      	movs	r2, #0
 8004c52:	2110      	movs	r1, #16
 8004c54:	0018      	movs	r0, r3
 8004c56:	f005 fb2e 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004c5a:	2004      	movs	r0, #4
 8004c5c:	f7ff ffca 	bl	8004bf4 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8004c60:	23a0      	movs	r3, #160	; 0xa0
 8004c62:	05db      	lsls	r3, r3, #23
 8004c64:	2201      	movs	r2, #1
 8004c66:	2110      	movs	r1, #16
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f005 fb24 	bl	800a2b6 <HAL_GPIO_WritePin>
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <SPI_flash_sent_address>:

void SPI_flash_sent_address(uint8_t* Sent){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004c7c:	23fa      	movs	r3, #250	; 0xfa
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4804      	ldr	r0, [pc, #16]	; (8004c94 <SPI_flash_sent_address+0x20>)
 8004c84:	2203      	movs	r2, #3
 8004c86:	f007 f8d7 	bl	800be38 <HAL_SPI_Transmit>
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	20000674 	.word	0x20000674

08004c98 <SPI_flash_TransmitReceive>:



void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	000a      	movs	r2, r1
 8004ca2:	1cbb      	adds	r3, r7, #2
 8004ca4:	801a      	strh	r2, [r3, #0]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004ca6:	1cbb      	adds	r3, r7, #2
 8004ca8:	881c      	ldrh	r4, [r3, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <SPI_flash_TransmitReceive+0x2c>)
 8004cb0:	23fa      	movs	r3, #250	; 0xfa
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	0023      	movs	r3, r4
 8004cb8:	f007 fa16 	bl	800c0e8 <HAL_SPI_TransmitReceive>
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b003      	add	sp, #12
 8004cc2:	bd90      	pop	{r4, r7, pc}
 8004cc4:	20000674 	.word	0x20000674

08004cc8 <SPI_flash_get_device_ID>:

void SPI_flash_get_device_ID( ) {
 8004cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cca:	b0a1      	sub	sp, #132	; 0x84
 8004ccc:	af04      	add	r7, sp, #16
    SPI_flash_cs_low;
 8004cce:	23a0      	movs	r3, #160	; 0xa0
 8004cd0:	05db      	lsls	r3, r3, #23
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2110      	movs	r1, #16
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f005 faed 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8004cdc:	2090      	movs	r0, #144	; 0x90
 8004cde:	f7ff ff89 	bl	8004bf4 <SPI_flash_sent_byte>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8004ce2:	2464      	movs	r4, #100	; 0x64
 8004ce4:	193b      	adds	r3, r7, r4
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
    aa[1]=0;
 8004cea:	193b      	adds	r3, r7, r4
 8004cec:	2200      	movs	r2, #0
 8004cee:	705a      	strb	r2, [r3, #1]
    aa[2]=0;
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	709a      	strb	r2, [r3, #2]
    aa[3]=0;
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	70da      	strb	r2, [r3, #3]
    aa[4]=0;
 8004cfc:	193b      	adds	r3, r7, r4
 8004cfe:	2200      	movs	r2, #0
 8004d00:	711a      	strb	r2, [r3, #4]
    aa[5]=0;
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	2200      	movs	r2, #0
 8004d06:	715a      	strb	r2, [r3, #5]
    SPI_flash_sent_address (aa);
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7ff ffb2 	bl	8004c74 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(aa, 2);
 8004d10:	193b      	adds	r3, r7, r4
 8004d12:	2102      	movs	r1, #2
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff ffbf 	bl	8004c98 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8004d1a:	23a0      	movs	r3, #160	; 0xa0
 8004d1c:	05db      	lsls	r3, r3, #23
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2110      	movs	r1, #16
 8004d22:	0018      	movs	r0, r3
 8004d24:	f005 fac7 	bl	800a2b6 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	494c      	ldr	r1, [pc, #304]	; (8004e64 <SPI_flash_get_device_ID+0x19c>)
 8004d34:	0038      	movs	r0, r7
 8004d36:	f00d ff21 	bl	8012b7c <siprintf>
    Debug_Tx((char*)bufd);
 8004d3a:	003b      	movs	r3, r7
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f003 f8a7 	bl	8007e90 <Debug_Tx>

    SPI_flash_cs_low;
 8004d42:	23a0      	movs	r3, #160	; 0xa0
 8004d44:	05db      	lsls	r3, r3, #23
 8004d46:	2200      	movs	r2, #0
 8004d48:	2110      	movs	r1, #16
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f005 fab3 	bl	800a2b6 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8004d50:	209f      	movs	r0, #159	; 0x9f
 8004d52:	f7ff ff4f 	bl	8004bf4 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004d56:	0025      	movs	r5, r4
 8004d58:	197b      	adds	r3, r7, r5
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
       aa[1]=0;
 8004d5e:	197b      	adds	r3, r7, r5
 8004d60:	2200      	movs	r2, #0
 8004d62:	705a      	strb	r2, [r3, #1]
       aa[2]=0;
 8004d64:	197b      	adds	r3, r7, r5
 8004d66:	2200      	movs	r2, #0
 8004d68:	709a      	strb	r2, [r3, #2]
       aa[3]=0;
 8004d6a:	197b      	adds	r3, r7, r5
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	70da      	strb	r2, [r3, #3]
       aa[4]=0;
 8004d70:	197b      	adds	r3, r7, r5
 8004d72:	2200      	movs	r2, #0
 8004d74:	711a      	strb	r2, [r3, #4]
       aa[5]=0;
 8004d76:	197b      	adds	r3, r7, r5
 8004d78:	2200      	movs	r2, #0
 8004d7a:	715a      	strb	r2, [r3, #5]
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
 8004d7c:	197b      	adds	r3, r7, r5
 8004d7e:	2103      	movs	r1, #3
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7ff ff89 	bl	8004c98 <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8004d86:	23a0      	movs	r3, #160	; 0xa0
 8004d88:	05db      	lsls	r3, r3, #23
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	2110      	movs	r1, #16
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f005 fa91 	bl	800a2b6 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8004d94:	197b      	adds	r3, r7, r5
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	001a      	movs	r2, r3
 8004d9a:	197b      	adds	r3, r7, r5
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	001c      	movs	r4, r3
 8004da0:	197b      	adds	r3, r7, r5
 8004da2:	789b      	ldrb	r3, [r3, #2]
 8004da4:	4930      	ldr	r1, [pc, #192]	; (8004e68 <SPI_flash_get_device_ID+0x1a0>)
 8004da6:	0038      	movs	r0, r7
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	0023      	movs	r3, r4
 8004dac:	f00d fee6 	bl	8012b7c <siprintf>
       Debug_Tx((char*)bufd);
 8004db0:	003b      	movs	r3, r7
 8004db2:	0018      	movs	r0, r3
 8004db4:	f003 f86c 	bl	8007e90 <Debug_Tx>



       SPI_flash_cs_low;
 8004db8:	23a0      	movs	r3, #160	; 0xa0
 8004dba:	05db      	lsls	r3, r3, #23
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2110      	movs	r1, #16
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f005 fa78 	bl	800a2b6 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8004dc6:	204b      	movs	r0, #75	; 0x4b
 8004dc8:	f7ff ff14 	bl	8004bf4 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004dcc:	0029      	movs	r1, r5
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
       aa[1]=0;
 8004dd4:	187b      	adds	r3, r7, r1
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	705a      	strb	r2, [r3, #1]
       aa[2]=0;
 8004dda:	187b      	adds	r3, r7, r1
 8004ddc:	2200      	movs	r2, #0
 8004dde:	709a      	strb	r2, [r3, #2]
       aa[3]=0;
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	2200      	movs	r2, #0
 8004de4:	70da      	strb	r2, [r3, #3]
       aa[4]=0;
 8004de6:	187b      	adds	r3, r7, r1
 8004de8:	2200      	movs	r2, #0
 8004dea:	711a      	strb	r2, [r3, #4]
       aa[5]=0;
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	2200      	movs	r2, #0
 8004df0:	715a      	strb	r2, [r3, #5]
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8004df2:	23fa      	movs	r3, #250	; 0xfa
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	000c      	movs	r4, r1
 8004df8:	1939      	adds	r1, r7, r4
 8004dfa:	481c      	ldr	r0, [pc, #112]	; (8004e6c <SPI_flash_get_device_ID+0x1a4>)
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	f007 f81b 	bl	800be38 <HAL_SPI_Transmit>
       SPI_flash_TransmitReceive(aa, 6);
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	2106      	movs	r1, #6
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7ff ff46 	bl	8004c98 <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8004e0c:	23a0      	movs	r3, #160	; 0xa0
 8004e0e:	05db      	lsls	r3, r3, #23
 8004e10:	2201      	movs	r2, #1
 8004e12:	2110      	movs	r1, #16
 8004e14:	0018      	movs	r0, r3
 8004e16:	f005 fa4e 	bl	800a2b6 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 8004e1a:	0021      	movs	r1, r4
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	001e      	movs	r6, r3
 8004e22:	187b      	adds	r3, r7, r1
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	469c      	mov	ip, r3
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	789b      	ldrb	r3, [r3, #2]
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	001c      	movs	r4, r3
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	791b      	ldrb	r3, [r3, #4]
 8004e38:	001d      	movs	r5, r3
 8004e3a:	187b      	adds	r3, r7, r1
 8004e3c:	795b      	ldrb	r3, [r3, #5]
 8004e3e:	490c      	ldr	r1, [pc, #48]	; (8004e70 <SPI_flash_get_device_ID+0x1a8>)
 8004e40:	0038      	movs	r0, r7
 8004e42:	9303      	str	r3, [sp, #12]
 8004e44:	9502      	str	r5, [sp, #8]
 8004e46:	9401      	str	r4, [sp, #4]
 8004e48:	9200      	str	r2, [sp, #0]
 8004e4a:	4663      	mov	r3, ip
 8004e4c:	0032      	movs	r2, r6
 8004e4e:	f00d fe95 	bl	8012b7c <siprintf>
       Debug_Tx((char*)bufd);
 8004e52:	003b      	movs	r3, r7
 8004e54:	0018      	movs	r0, r3
 8004e56:	f003 f81b 	bl	8007e90 <Debug_Tx>
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b01d      	add	sp, #116	; 0x74
 8004e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	08017508 	.word	0x08017508
 8004e68:	08017528 	.word	0x08017528
 8004e6c:	20000674 	.word	0x20000674
 8004e70:	08017544 	.word	0x08017544

08004e74 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
    SPI_flash_Write_Enable();
 8004e7c:	f7ff fece 	bl	8004c1c <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8004e80:	23a0      	movs	r3, #160	; 0xa0
 8004e82:	05db      	lsls	r3, r3, #23
 8004e84:	2200      	movs	r2, #0
 8004e86:	2110      	movs	r1, #16
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f005 fa14 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8004e8e:	2020      	movs	r0, #32
 8004e90:	f7ff feb0 	bl	8004bf4 <SPI_flash_sent_byte>
    SPI_flash_sent_address (address);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7ff feec 	bl	8004c74 <SPI_flash_sent_address>
    SPI_flash_cs_high;
 8004e9c:	23a0      	movs	r3, #160	; 0xa0
 8004e9e:	05db      	lsls	r3, r3, #23
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2110      	movs	r1, #16
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f005 fa06 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8004eaa:	f7ff fecd 	bl	8004c48 <SPI_flash_Write_Disable>
    //HAL_Delay(100);
	Debug_Rx();
 8004eae:	f003 f817 	bl	8007ee0 <Debug_Rx>
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b002      	add	sp, #8
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	af00      	add	r7, sp, #0
    SPI_flash_Write_Enable();
 8004ebe:	f7ff fead 	bl	8004c1c <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8004ec2:	23a0      	movs	r3, #160	; 0xa0
 8004ec4:	05db      	lsls	r3, r3, #23
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2110      	movs	r1, #16
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f005 f9f3 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8004ed0:	20c7      	movs	r0, #199	; 0xc7
 8004ed2:	f7ff fe8f 	bl	8004bf4 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8004ed6:	23a0      	movs	r3, #160	; 0xa0
 8004ed8:	05db      	lsls	r3, r3, #23
 8004eda:	2201      	movs	r2, #1
 8004edc:	2110      	movs	r1, #16
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f005 f9e9 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8004ee4:	f7ff feb0 	bl	8004c48 <SPI_flash_Write_Disable>
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	1dbb      	adds	r3, r7, #6
 8004efa:	801a      	strh	r2, [r3, #0]
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
 8004efc:	f7ff fe8e 	bl	8004c1c <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8004f00:	23a0      	movs	r3, #160	; 0xa0
 8004f02:	05db      	lsls	r3, r3, #23
 8004f04:	2200      	movs	r2, #0
 8004f06:	2110      	movs	r1, #16
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f005 f9d4 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8004f0e:	2002      	movs	r0, #2
 8004f10:	f7ff fe70 	bl	8004bf4 <SPI_flash_sent_byte>
    SPI_flash_sent_address (data_address);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7ff feac 	bl	8004c74 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8004f1c:	1dbb      	adds	r3, r7, #6
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	0011      	movs	r1, r2
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7ff feb7 	bl	8004c98 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8004f2a:	23a0      	movs	r3, #160	; 0xa0
 8004f2c:	05db      	lsls	r3, r3, #23
 8004f2e:	2201      	movs	r2, #1
 8004f30:	2110      	movs	r1, #16
 8004f32:	0018      	movs	r0, r3
 8004f34:	f005 f9bf 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8004f38:	f7ff fe86 	bl	8004c48 <SPI_flash_Write_Disable>

	Debug_Rx();
 8004f3c:	f002 ffd0 	bl	8007ee0 <Debug_Rx>
    //HAL_Delay(1);
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b004      	add	sp, #16
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	1dbb      	adds	r3, r7, #6
 8004f54:	801a      	strh	r2, [r3, #0]
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 8004f56:	23a0      	movs	r3, #160	; 0xa0
 8004f58:	05db      	lsls	r3, r3, #23
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2110      	movs	r1, #16
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f005 f9a9 	bl	800a2b6 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8004f64:	2003      	movs	r0, #3
 8004f66:	f7ff fe45 	bl	8004bf4 <SPI_flash_sent_byte>
    SPI_flash_sent_address(data_address);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7ff fe81 	bl	8004c74 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8004f72:	1dbb      	adds	r3, r7, #6
 8004f74:	881a      	ldrh	r2, [r3, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	0011      	movs	r1, r2
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f7ff fe8c 	bl	8004c98 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8004f80:	23a0      	movs	r3, #160	; 0xa0
 8004f82:	05db      	lsls	r3, r3, #23
 8004f84:	2201      	movs	r2, #1
 8004f86:	2110      	movs	r1, #16
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f005 f994 	bl	800a2b6 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <incrimentAddress2>:


	return add;
}

void incrimentAddress2(int inc){
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	; (800500c <incrimentAddress2+0x74>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	4a19      	ldr	r2, [pc, #100]	; (800500c <incrimentAddress2+0x74>)
 8004fa8:	7852      	ldrb	r2, [r2, #1]
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <incrimentAddress2+0x74>)
 8004fb0:	7892      	ldrb	r2, [r2, #2]
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	18d3      	adds	r3, r2, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
	WrtAdd[0]=addi/(256*256);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	da02      	bge.n	8004fc6 <incrimentAddress2+0x2e>
 8004fc0:	4a13      	ldr	r2, [pc, #76]	; (8005010 <incrimentAddress2+0x78>)
 8004fc2:	4694      	mov	ip, r2
 8004fc4:	4463      	add	r3, ip
 8004fc6:	141b      	asrs	r3, r3, #16
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <incrimentAddress2+0x74>)
 8004fcc:	701a      	strb	r2, [r3, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a10      	ldr	r2, [pc, #64]	; (8005014 <incrimentAddress2+0x7c>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d503      	bpl.n	8004fde <incrimentAddress2+0x46>
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	4a0f      	ldr	r2, [pc, #60]	; (8005018 <incrimentAddress2+0x80>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	3301      	adds	r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da00      	bge.n	8004fe4 <incrimentAddress2+0x4c>
 8004fe2:	33ff      	adds	r3, #255	; 0xff
 8004fe4:	121b      	asrs	r3, r3, #8
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <incrimentAddress2+0x74>)
 8004fea:	705a      	strb	r2, [r3, #1]
	WrtAdd[2]=(addi)%256;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a0b      	ldr	r2, [pc, #44]	; (800501c <incrimentAddress2+0x84>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d503      	bpl.n	8004ffc <incrimentAddress2+0x64>
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <incrimentAddress2+0x88>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4b03      	ldr	r3, [pc, #12]	; (800500c <incrimentAddress2+0x74>)
 8005000:	709a      	strb	r2, [r3, #2]


}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b004      	add	sp, #16
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	20000044 	.word	0x20000044
 8005010:	0000ffff 	.word	0x0000ffff
 8005014:	8000ffff 	.word	0x8000ffff
 8005018:	ffff0000 	.word	0xffff0000
 800501c:	800000ff 	.word	0x800000ff
 8005020:	ffffff00 	.word	0xffffff00

08005024 <WriteQdata>:
	memset(str,0,20);
	sprintf(str, "MemoryAdd:%X-%X-%X",WrtAdd[0],WrtAdd[1],WrtAdd[2]);
	Debug_Tx(str);
}

void WriteQdata(uint8_t* data, uint16_t len) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	000a      	movs	r2, r1
 800502e:	1cbb      	adds	r3, r7, #2
 8005030:	801a      	strh	r2, [r3, #0]
	//Writes data at the end of queue
	if (len<255){
 8005032:	1cbb      	adds	r3, r7, #2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	2bfe      	cmp	r3, #254	; 0xfe
 8005038:	d80b      	bhi.n	8005052 <WriteQdata+0x2e>
		//Debug_Tx("---------------------\nWriting  Data");
		//printAdd();
		SPI_flash_Page_Program(WrtAdd, data,len);
 800503a:	1cbb      	adds	r3, r7, #2
 800503c:	881a      	ldrh	r2, [r3, #0]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <WriteQdata+0x38>)
 8005042:	0018      	movs	r0, r3
 8005044:	f7ff ff53 	bl	8004eee <SPI_flash_Page_Program>
		incrimentAddress2(256);
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	0018      	movs	r0, r3
 800504e:	f7ff ffa3 	bl	8004f98 <incrimentAddress2>
	}
}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	46bd      	mov	sp, r7
 8005056:	b002      	add	sp, #8
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	20000044 	.word	0x20000044

08005060 <isQempty>:

int isQempty() {
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8005066:	4b09      	ldr	r3, [pc, #36]	; (800508c <isQempty+0x2c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	4a07      	ldr	r2, [pc, #28]	; (800508c <isQempty+0x2c>)
 800506e:	7852      	ldrb	r2, [r2, #1]
 8005070:	189b      	adds	r3, r3, r2
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	607b      	str	r3, [r7, #4]
	if(addi<(256*256*3)+256){
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a05      	ldr	r2, [pc, #20]	; (8005090 <isQempty+0x30>)
 800507a:	4293      	cmp	r3, r2
 800507c:	dc01      	bgt.n	8005082 <isQempty+0x22>
		return 1;
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <isQempty+0x24>
	}
	return 0;
 8005082:	2300      	movs	r3, #0

}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000044 	.word	0x20000044
 8005090:	000300ff 	.word	0x000300ff

08005094 <ReadQdata>:

}



int ReadQdata() {
 8005094:	b590      	push	{r4, r7, lr}
 8005096:	b0c5      	sub	sp, #276	; 0x114
 8005098:	af00      	add	r7, sp, #0
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 800509a:	2380      	movs	r3, #128	; 0x80
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	4b64      	ldr	r3, [pc, #400]	; (8005230 <ReadQdata+0x19c>)
 80050a0:	2100      	movs	r1, #0
 80050a2:	0018      	movs	r0, r3
 80050a4:	f00d fdd6 	bl	8012c54 <memset>
	memset(ReadMDataS,0,4096);
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	4b61      	ldr	r3, [pc, #388]	; (8005234 <ReadQdata+0x1a0>)
 80050ae:	2100      	movs	r1, #0
 80050b0:	0018      	movs	r0, r3
 80050b2:	f00d fdcf 	bl	8012c54 <memset>
	if(isQempty()==1){
 80050b6:	f7ff ffd3 	bl	8005060 <isQempty>
 80050ba:	0003      	movs	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <ReadQdata+0x38>
		Debug_Tx("Memory Empty");
 80050c0:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <ReadQdata+0x1a4>)
 80050c2:	0018      	movs	r0, r3
 80050c4:	f002 fee4 	bl	8007e90 <Debug_Tx>
		return 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e0ac      	b.n	8005226 <ReadQdata+0x192>
	}
	incrimentAddress2(-1);
 80050cc:	2301      	movs	r3, #1
 80050ce:	425b      	negs	r3, r3
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7ff ff61 	bl	8004f98 <incrimentAddress2>
	int len=WrtAdd[1]%16;
 80050d6:	4b59      	ldr	r3, [pc, #356]	; (800523c <ReadQdata+0x1a8>)
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	001a      	movs	r2, r3
 80050dc:	230f      	movs	r3, #15
 80050de:	4013      	ands	r3, r2
 80050e0:	1d7a      	adds	r2, r7, #5
 80050e2:	32ff      	adds	r2, #255	; 0xff
 80050e4:	6013      	str	r3, [r2, #0]
	len=len+1;
 80050e6:	1d7b      	adds	r3, r7, #5
 80050e8:	33ff      	adds	r3, #255	; 0xff
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	1d7a      	adds	r2, r7, #5
 80050f0:	32ff      	adds	r2, #255	; 0xff
 80050f2:	6013      	str	r3, [r2, #0]
	WrtAdd[1]=WrtAdd[1]/16;
 80050f4:	4b51      	ldr	r3, [pc, #324]	; (800523c <ReadQdata+0x1a8>)
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	4b4f      	ldr	r3, [pc, #316]	; (800523c <ReadQdata+0x1a8>)
 80050fe:	705a      	strb	r2, [r3, #1]
	WrtAdd[1]=WrtAdd[1]*16;
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <ReadQdata+0x1a8>)
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	b2da      	uxtb	r2, r3
 8005108:	4b4c      	ldr	r3, [pc, #304]	; (800523c <ReadQdata+0x1a8>)
 800510a:	705a      	strb	r2, [r3, #1]
	WrtAdd[2]=0;
 800510c:	4b4b      	ldr	r3, [pc, #300]	; (800523c <ReadQdata+0x1a8>)
 800510e:	2200      	movs	r2, #0
 8005110:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005112:	1d7b      	adds	r3, r7, #5
 8005114:	33ff      	adds	r3, #255	; 0xff
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	b29a      	uxth	r2, r3
 800511e:	4944      	ldr	r1, [pc, #272]	; (8005230 <ReadQdata+0x19c>)
 8005120:	4b46      	ldr	r3, [pc, #280]	; (800523c <ReadQdata+0x1a8>)
 8005122:	0018      	movs	r0, r3
 8005124:	f7ff ff10 	bl	8004f48 <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 8005128:	2301      	movs	r3, #1
 800512a:	2286      	movs	r2, #134	; 0x86
 800512c:	0052      	lsls	r2, r2, #1
 800512e:	18ba      	adds	r2, r7, r2
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e06a      	b.n	800520a <ReadQdata+0x176>
		memset(temp,0,256);
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	005a      	lsls	r2, r3, #1
 8005138:	1d3b      	adds	r3, r7, #4
 800513a:	2100      	movs	r1, #0
 800513c:	0018      	movs	r0, r3
 800513e:	f00d fd89 	bl	8012c54 <memset>
		for (int j=0;j<256;j++){
 8005142:	2300      	movs	r3, #0
 8005144:	2284      	movs	r2, #132	; 0x84
 8005146:	0052      	lsls	r2, r2, #1
 8005148:	18ba      	adds	r2, r7, r2
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e033      	b.n	80051b6 <ReadQdata+0x122>
			temp[j]=ReadMData[(len-i)*256+j];
 800514e:	1d7b      	adds	r3, r7, #5
 8005150:	33ff      	adds	r3, #255	; 0xff
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2386      	movs	r3, #134	; 0x86
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	2084      	movs	r0, #132	; 0x84
 8005162:	0040      	lsls	r0, r0, #1
 8005164:	183b      	adds	r3, r7, r0
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	4a31      	ldr	r2, [pc, #196]	; (8005230 <ReadQdata+0x19c>)
 800516c:	5cd1      	ldrb	r1, [r2, r3]
 800516e:	4b34      	ldr	r3, [pc, #208]	; (8005240 <ReadQdata+0x1ac>)
 8005170:	2488      	movs	r4, #136	; 0x88
 8005172:	0064      	lsls	r4, r4, #1
 8005174:	191b      	adds	r3, r3, r4
 8005176:	19da      	adds	r2, r3, r7
 8005178:	183b      	adds	r3, r7, r0
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	18d3      	adds	r3, r2, r3
 800517e:	1c0a      	adds	r2, r1, #0
 8005180:	701a      	strb	r2, [r3, #0]
			if (temp[j]==255){
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <ReadQdata+0x1ac>)
 8005184:	191b      	adds	r3, r3, r4
 8005186:	19da      	adds	r2, r3, r7
 8005188:	0001      	movs	r1, r0
 800518a:	187b      	adds	r3, r7, r1
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2bff      	cmp	r3, #255	; 0xff
 8005194:	d108      	bne.n	80051a8 <ReadQdata+0x114>
				temp[j]=0;
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <ReadQdata+0x1ac>)
 8005198:	191b      	adds	r3, r3, r4
 800519a:	19da      	adds	r2, r3, r7
 800519c:	187b      	adds	r3, r7, r1
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	18d3      	adds	r3, r2, r3
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
				break;
 80051a6:	e00c      	b.n	80051c2 <ReadQdata+0x12e>
		for (int j=0;j<256;j++){
 80051a8:	2284      	movs	r2, #132	; 0x84
 80051aa:	0052      	lsls	r2, r2, #1
 80051ac:	18bb      	adds	r3, r7, r2
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	18ba      	adds	r2, r7, r2
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	2384      	movs	r3, #132	; 0x84
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2bff      	cmp	r3, #255	; 0xff
 80051c0:	ddc5      	ble.n	800514e <ReadQdata+0xba>
			}
		}
		temp[255]=0;
 80051c2:	4b1f      	ldr	r3, [pc, #124]	; (8005240 <ReadQdata+0x1ac>)
 80051c4:	2288      	movs	r2, #136	; 0x88
 80051c6:	0052      	lsls	r2, r2, #1
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	19db      	adds	r3, r3, r7
 80051cc:	22ff      	movs	r2, #255	; 0xff
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]
		strcat(ReadMDataS,temp);
 80051d2:	1d3a      	adds	r2, r7, #4
 80051d4:	4b17      	ldr	r3, [pc, #92]	; (8005234 <ReadQdata+0x1a0>)
 80051d6:	0011      	movs	r1, r2
 80051d8:	0018      	movs	r0, r3
 80051da:	f00d fd43 	bl	8012c64 <strcat>
		strcat(ReadMDataS,"\r\n");
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <ReadQdata+0x1a0>)
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7fa ff91 	bl	8000108 <strlen>
 80051e6:	0003      	movs	r3, r0
 80051e8:	001a      	movs	r2, r3
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <ReadQdata+0x1a0>)
 80051ec:	18d2      	adds	r2, r2, r3
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <ReadQdata+0x1b0>)
 80051f0:	0010      	movs	r0, r2
 80051f2:	0019      	movs	r1, r3
 80051f4:	2303      	movs	r3, #3
 80051f6:	001a      	movs	r2, r3
 80051f8:	f00d fef4 	bl	8012fe4 <memcpy>
	for (int i=1;i<=len;i++){
 80051fc:	2286      	movs	r2, #134	; 0x86
 80051fe:	0052      	lsls	r2, r2, #1
 8005200:	18bb      	adds	r3, r7, r2
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	18ba      	adds	r2, r7, r2
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	2386      	movs	r3, #134	; 0x86
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	1d7b      	adds	r3, r7, #5
 8005214:	33ff      	adds	r3, #255	; 0xff
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	dd8b      	ble.n	8005134 <ReadQdata+0xa0>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <ReadQdata+0x1a8>)
 800521e:	0018      	movs	r0, r3
 8005220:	f7ff fe28 	bl	8004e74 <SPI_flash_Sector_Erase>
	return 1;
 8005224:	2301      	movs	r3, #1
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b045      	add	sp, #276	; 0x114
 800522c:	bd90      	pop	{r4, r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	20001734 	.word	0x20001734
 8005234:	20002734 	.word	0x20002734
 8005238:	08017598 	.word	0x08017598
 800523c:	20000044 	.word	0x20000044
 8005240:	fffffef4 	.word	0xfffffef4
 8005244:	080167c4 	.word	0x080167c4

08005248 <InitMEMQ>:

void InitMEMQ(){
 8005248:	b580      	push	{r7, lr}
 800524a:	b0c2      	sub	sp, #264	; 0x108
 800524c:	af00      	add	r7, sp, #0
	if(isQempty()==1){
 800524e:	f7ff ff07 	bl	8005060 <isQempty>
 8005252:	0003      	movs	r3, r0
 8005254:	2b01      	cmp	r3, #1
 8005256:	d142      	bne.n	80052de <InitMEMQ+0x96>
		int i=0;
 8005258:	2300      	movs	r3, #0
 800525a:	1d7a      	adds	r2, r7, #5
 800525c:	32ff      	adds	r2, #255	; 0xff
 800525e:	6013      	str	r3, [r2, #0]
		Debug_Tx("------------------Init Mem:");
 8005260:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <InitMEMQ+0xa0>)
 8005262:	0018      	movs	r0, r3
 8005264:	f002 fe14 	bl	8007e90 <Debug_Tx>
		char str[256];
		for(i=0;i<5;i++){
 8005268:	2300      	movs	r3, #0
 800526a:	1d7a      	adds	r2, r7, #5
 800526c:	32ff      	adds	r2, #255	; 0xff
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e01d      	b.n	80052ae <InitMEMQ+0x66>
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 8005272:	1d7b      	adds	r3, r7, #5
 8005274:	33ff      	adds	r3, #255	; 0xff
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	1d7a      	adds	r2, r7, #5
 800527a:	32ff      	adds	r2, #255	; 0xff
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	491b      	ldr	r1, [pc, #108]	; (80052ec <InitMEMQ+0xa4>)
 8005280:	1d38      	adds	r0, r7, #4
 8005282:	f00d fc7b 	bl	8012b7c <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	0018      	movs	r0, r3
 800528a:	f7fa ff3d 	bl	8000108 <strlen>
 800528e:	0003      	movs	r3, r0
 8005290:	b29b      	uxth	r3, r3
 8005292:	3301      	adds	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	0011      	movs	r1, r2
 800529a:	0018      	movs	r0, r3
 800529c:	f7ff fec2 	bl	8005024 <WriteQdata>
		for(i=0;i<5;i++){
 80052a0:	1d7b      	adds	r3, r7, #5
 80052a2:	33ff      	adds	r3, #255	; 0xff
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	1d7a      	adds	r2, r7, #5
 80052aa:	32ff      	adds	r2, #255	; 0xff
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	1d7b      	adds	r3, r7, #5
 80052b0:	33ff      	adds	r3, #255	; 0xff
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	dddc      	ble.n	8005272 <InitMEMQ+0x2a>
		}
		for(i=0;i<2;i++){
 80052b8:	2300      	movs	r3, #0
 80052ba:	1d7a      	adds	r2, r7, #5
 80052bc:	32ff      	adds	r2, #255	; 0xff
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e008      	b.n	80052d4 <InitMEMQ+0x8c>
			ReadQdata();
 80052c2:	f7ff fee7 	bl	8005094 <ReadQdata>
		for(i=0;i<2;i++){
 80052c6:	1d7b      	adds	r3, r7, #5
 80052c8:	33ff      	adds	r3, #255	; 0xff
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	1d7a      	adds	r2, r7, #5
 80052d0:	32ff      	adds	r2, #255	; 0xff
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	1d7b      	adds	r3, r7, #5
 80052d6:	33ff      	adds	r3, #255	; 0xff
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	ddf1      	ble.n	80052c2 <InitMEMQ+0x7a>
		}
	}

}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b042      	add	sp, #264	; 0x108
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	080175a8 	.word	0x080175a8
 80052ec:	080175c4 	.word	0x080175c4

080052f0 <ClearQueue>:





void ClearQueue(){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
	//uint8_t dat[]={0x01, 0x00,0x00,0x01, 0x00,0x00,0x00,0x00,0x00,0x00,0x01};
	//uint8_t add[]={0x00,0x10,0x00};

	//SPI_flash_Sector_Erase(add);
	SPI_flash_Chip_Erase();
 80052f4:	f7ff fde1 	bl	8004eba <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <ClearQueue+0x18>)
 80052fa:	0018      	movs	r0, r3
 80052fc:	f003 fb7c 	bl	80089f8 <HAL_Delay>

	//SPI_flash_Page_Program(add,dat,11);
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	00007530 	.word	0x00007530

0800530c <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	4cc9      	ldr	r4, [pc, #804]	; (8005634 <writeConfig+0x328>)
 8005310:	44a5      	add	sp, r4
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 800531c:	4bc6      	ldr	r3, [pc, #792]	; (8005638 <writeConfig+0x32c>)
 800531e:	24c8      	movs	r4, #200	; 0xc8
 8005320:	00a4      	lsls	r4, r4, #2
 8005322:	191b      	adds	r3, r3, r4
 8005324:	19db      	adds	r3, r3, r7
 8005326:	4ac5      	ldr	r2, [pc, #788]	; (800563c <writeConfig+0x330>)
 8005328:	8811      	ldrh	r1, [r2, #0]
 800532a:	8019      	strh	r1, [r3, #0]
 800532c:	7892      	ldrb	r2, [r2, #2]
 800532e:	709a      	strb	r2, [r3, #2]

	SPI_flash_Read_Data(add , data1 , 256);
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	005a      	lsls	r2, r3, #1
 8005334:	2386      	movs	r3, #134	; 0x86
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	18f9      	adds	r1, r7, r3
 800533a:	2514      	movs	r5, #20
 800533c:	197b      	adds	r3, r7, r5
 800533e:	0018      	movs	r0, r3
 8005340:	f7ff fe02 	bl	8004f48 <SPI_flash_Read_Data>
	add[1]=0x01;
 8005344:	4bbc      	ldr	r3, [pc, #752]	; (8005638 <writeConfig+0x32c>)
 8005346:	191b      	adds	r3, r3, r4
 8005348:	19db      	adds	r3, r3, r7
 800534a:	2201      	movs	r2, #1
 800534c:	705a      	strb	r2, [r3, #1]
	SPI_flash_Read_Data(add , data2 , 256);
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	005a      	lsls	r2, r3, #1
 8005352:	238c      	movs	r3, #140	; 0x8c
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	18f9      	adds	r1, r7, r3
 8005358:	197b      	adds	r3, r7, r5
 800535a:	0018      	movs	r0, r3
 800535c:	f7ff fdf4 	bl	8004f48 <SPI_flash_Read_Data>
	add[1]=0x02;
 8005360:	4bb5      	ldr	r3, [pc, #724]	; (8005638 <writeConfig+0x32c>)
 8005362:	191b      	adds	r3, r3, r4
 8005364:	19db      	adds	r3, r3, r7
 8005366:	2202      	movs	r2, #2
 8005368:	705a      	strb	r2, [r3, #1]
	SPI_flash_Read_Data(add , data3 , 256);
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	005a      	lsls	r2, r3, #1
 800536e:	2318      	movs	r3, #24
 8005370:	18f9      	adds	r1, r7, r3
 8005372:	197b      	adds	r3, r7, r5
 8005374:	0018      	movs	r0, r3
 8005376:	f7ff fde7 	bl	8004f48 <SPI_flash_Read_Data>



	int i=0;
 800537a:	2300      	movs	r3, #0
 800537c:	22c7      	movs	r2, #199	; 0xc7
 800537e:	0092      	lsls	r2, r2, #2
 8005380:	18b9      	adds	r1, r7, r2
 8005382:	600b      	str	r3, [r1, #0]
	int j=0;
 8005384:	2300      	movs	r3, #0
 8005386:	21c6      	movs	r1, #198	; 0xc6
 8005388:	0089      	lsls	r1, r1, #2
 800538a:	1879      	adds	r1, r7, r1
 800538c:	600b      	str	r3, [r1, #0]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 800538e:	2300      	movs	r3, #0
 8005390:	18ba      	adds	r2, r7, r2
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	e018      	b.n	80053c8 <writeConfig+0xbc>
		data1[j+i]=RegNo[i];
 8005396:	20c7      	movs	r0, #199	; 0xc7
 8005398:	0080      	lsls	r0, r0, #2
 800539a:	183b      	adds	r3, r7, r0
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	18d2      	adds	r2, r2, r3
 80053a2:	23c6      	movs	r3, #198	; 0xc6
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	6819      	ldr	r1, [r3, #0]
 80053aa:	183b      	adds	r3, r7, r0
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	18cb      	adds	r3, r1, r3
 80053b0:	7811      	ldrb	r1, [r2, #0]
 80053b2:	4aa3      	ldr	r2, [pc, #652]	; (8005640 <writeConfig+0x334>)
 80053b4:	24c8      	movs	r4, #200	; 0xc8
 80053b6:	00a4      	lsls	r4, r4, #2
 80053b8:	1912      	adds	r2, r2, r4
 80053ba:	19d2      	adds	r2, r2, r7
 80053bc:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80053be:	183b      	adds	r3, r7, r0
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	183a      	adds	r2, r7, r0
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	0018      	movs	r0, r3
 80053cc:	f7fa fe9c 	bl	8000108 <strlen>
 80053d0:	0002      	movs	r2, r0
 80053d2:	21c7      	movs	r1, #199	; 0xc7
 80053d4:	0089      	lsls	r1, r1, #2
 80053d6:	187b      	adds	r3, r7, r1
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d303      	bcc.n	80053e6 <writeConfig+0xda>
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b0f      	cmp	r3, #15
 80053e4:	ddd7      	ble.n	8005396 <writeConfig+0x8a>
	}
	j=j+RegNoLen;
 80053e6:	22c6      	movs	r2, #198	; 0xc6
 80053e8:	0092      	lsls	r2, r2, #2
 80053ea:	18bb      	adds	r3, r7, r2
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3310      	adds	r3, #16
 80053f0:	18ba      	adds	r2, r7, r2
 80053f2:	6013      	str	r3, [r2, #0]

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 80053f4:	2300      	movs	r3, #0
 80053f6:	22c7      	movs	r2, #199	; 0xc7
 80053f8:	0092      	lsls	r2, r2, #2
 80053fa:	18ba      	adds	r2, r7, r2
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e018      	b.n	8005432 <writeConfig+0x126>
		data1[j+i]=INSMS[i];
 8005400:	20c7      	movs	r0, #199	; 0xc7
 8005402:	0080      	lsls	r0, r0, #2
 8005404:	183b      	adds	r3, r7, r0
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	18d2      	adds	r2, r2, r3
 800540c:	23c6      	movs	r3, #198	; 0xc6
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	183b      	adds	r3, r7, r0
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	18cb      	adds	r3, r1, r3
 800541a:	7811      	ldrb	r1, [r2, #0]
 800541c:	4a88      	ldr	r2, [pc, #544]	; (8005640 <writeConfig+0x334>)
 800541e:	24c8      	movs	r4, #200	; 0xc8
 8005420:	00a4      	lsls	r4, r4, #2
 8005422:	1912      	adds	r2, r2, r4
 8005424:	19d2      	adds	r2, r2, r7
 8005426:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005428:	183b      	adds	r3, r7, r0
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	183a      	adds	r2, r7, r0
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0018      	movs	r0, r3
 8005436:	f7fa fe67 	bl	8000108 <strlen>
 800543a:	0002      	movs	r2, r0
 800543c:	21c7      	movs	r1, #199	; 0xc7
 800543e:	0089      	lsls	r1, r1, #2
 8005440:	187b      	adds	r3, r7, r1
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d303      	bcc.n	8005450 <writeConfig+0x144>
 8005448:	187b      	adds	r3, r7, r1
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b63      	cmp	r3, #99	; 0x63
 800544e:	ddd7      	ble.n	8005400 <writeConfig+0xf4>
	}
	j=j+INSMSLen;
 8005450:	22c6      	movs	r2, #198	; 0xc6
 8005452:	0092      	lsls	r2, r2, #2
 8005454:	18bb      	adds	r3, r7, r2
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3364      	adds	r3, #100	; 0x64
 800545a:	18ba      	adds	r2, r7, r2
 800545c:	6013      	str	r3, [r2, #0]

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 800545e:	2300      	movs	r3, #0
 8005460:	22c7      	movs	r2, #199	; 0xc7
 8005462:	0092      	lsls	r2, r2, #2
 8005464:	18ba      	adds	r2, r7, r2
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e018      	b.n	800549c <writeConfig+0x190>
		data1[j+i]=OUTSMS[i];
 800546a:	20c7      	movs	r0, #199	; 0xc7
 800546c:	0080      	lsls	r0, r0, #2
 800546e:	183b      	adds	r3, r7, r0
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	18d2      	adds	r2, r2, r3
 8005476:	23c6      	movs	r3, #198	; 0xc6
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	6819      	ldr	r1, [r3, #0]
 800547e:	183b      	adds	r3, r7, r0
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	18cb      	adds	r3, r1, r3
 8005484:	7811      	ldrb	r1, [r2, #0]
 8005486:	4a6e      	ldr	r2, [pc, #440]	; (8005640 <writeConfig+0x334>)
 8005488:	24c8      	movs	r4, #200	; 0xc8
 800548a:	00a4      	lsls	r4, r4, #2
 800548c:	1912      	adds	r2, r2, r4
 800548e:	19d2      	adds	r2, r2, r7
 8005490:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8005492:	183b      	adds	r3, r7, r0
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	183a      	adds	r2, r7, r0
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	0018      	movs	r0, r3
 80054a0:	f7fa fe32 	bl	8000108 <strlen>
 80054a4:	0002      	movs	r2, r0
 80054a6:	21c7      	movs	r1, #199	; 0xc7
 80054a8:	0089      	lsls	r1, r1, #2
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d303      	bcc.n	80054ba <writeConfig+0x1ae>
 80054b2:	187b      	adds	r3, r7, r1
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b3b      	cmp	r3, #59	; 0x3b
 80054b8:	ddd7      	ble.n	800546a <writeConfig+0x15e>
	}
	j=0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	22c6      	movs	r2, #198	; 0xc6
 80054be:	0092      	lsls	r2, r2, #2
 80054c0:	18ba      	adds	r2, r7, r2
 80054c2:	6013      	str	r3, [r2, #0]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80054c4:	2300      	movs	r3, #0
 80054c6:	22c7      	movs	r2, #199	; 0xc7
 80054c8:	0092      	lsls	r2, r2, #2
 80054ca:	18ba      	adds	r2, r7, r2
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e018      	b.n	8005502 <writeConfig+0x1f6>
		data2[j+i]=EmgIP[i];
 80054d0:	20c7      	movs	r0, #199	; 0xc7
 80054d2:	0080      	lsls	r0, r0, #2
 80054d4:	183b      	adds	r3, r7, r0
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	18d2      	adds	r2, r2, r3
 80054dc:	23c6      	movs	r3, #198	; 0xc6
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	183b      	adds	r3, r7, r0
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	18cb      	adds	r3, r1, r3
 80054ea:	7811      	ldrb	r1, [r2, #0]
 80054ec:	4a55      	ldr	r2, [pc, #340]	; (8005644 <writeConfig+0x338>)
 80054ee:	24c8      	movs	r4, #200	; 0xc8
 80054f0:	00a4      	lsls	r4, r4, #2
 80054f2:	1912      	adds	r2, r2, r4
 80054f4:	19d2      	adds	r2, r2, r7
 80054f6:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80054f8:	183b      	adds	r3, r7, r0
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	183a      	adds	r2, r7, r0
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	f7fa fdff 	bl	8000108 <strlen>
 800550a:	0002      	movs	r2, r0
 800550c:	21c7      	movs	r1, #199	; 0xc7
 800550e:	0089      	lsls	r1, r1, #2
 8005510:	187b      	adds	r3, r7, r1
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d303      	bcc.n	8005520 <writeConfig+0x214>
 8005518:	187b      	adds	r3, r7, r1
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b27      	cmp	r3, #39	; 0x27
 800551e:	ddd7      	ble.n	80054d0 <writeConfig+0x1c4>
	}
	j=j+EmgIPLen;
 8005520:	22c6      	movs	r2, #198	; 0xc6
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	18bb      	adds	r3, r7, r2
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3328      	adds	r3, #40	; 0x28
 800552a:	18ba      	adds	r2, r7, r2
 800552c:	6013      	str	r3, [r2, #0]

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 800552e:	2300      	movs	r3, #0
 8005530:	22c7      	movs	r2, #199	; 0xc7
 8005532:	0092      	lsls	r2, r2, #2
 8005534:	18ba      	adds	r2, r7, r2
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e01d      	b.n	8005576 <writeConfig+0x26a>
		data2[j+i]=RegIP[i];
 800553a:	20c7      	movs	r0, #199	; 0xc7
 800553c:	0080      	lsls	r0, r0, #2
 800553e:	183b      	adds	r3, r7, r0
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	22ca      	movs	r2, #202	; 0xca
 8005544:	0092      	lsls	r2, r2, #2
 8005546:	2108      	movs	r1, #8
 8005548:	1852      	adds	r2, r2, r1
 800554a:	19d2      	adds	r2, r2, r7
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	18d2      	adds	r2, r2, r3
 8005550:	23c6      	movs	r3, #198	; 0xc6
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	6819      	ldr	r1, [r3, #0]
 8005558:	183b      	adds	r3, r7, r0
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	18cb      	adds	r3, r1, r3
 800555e:	7811      	ldrb	r1, [r2, #0]
 8005560:	4a38      	ldr	r2, [pc, #224]	; (8005644 <writeConfig+0x338>)
 8005562:	24c8      	movs	r4, #200	; 0xc8
 8005564:	00a4      	lsls	r4, r4, #2
 8005566:	1912      	adds	r2, r2, r4
 8005568:	19d2      	adds	r2, r2, r7
 800556a:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 800556c:	183b      	adds	r3, r7, r0
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	183a      	adds	r2, r7, r0
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	23ca      	movs	r3, #202	; 0xca
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	2208      	movs	r2, #8
 800557c:	189b      	adds	r3, r3, r2
 800557e:	19db      	adds	r3, r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	0018      	movs	r0, r3
 8005584:	f7fa fdc0 	bl	8000108 <strlen>
 8005588:	0002      	movs	r2, r0
 800558a:	21c7      	movs	r1, #199	; 0xc7
 800558c:	0089      	lsls	r1, r1, #2
 800558e:	187b      	adds	r3, r7, r1
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d303      	bcc.n	800559e <writeConfig+0x292>
 8005596:	187b      	adds	r3, r7, r1
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b27      	cmp	r3, #39	; 0x27
 800559c:	ddcd      	ble.n	800553a <writeConfig+0x22e>
	}
	j=j+RegIPLen;
 800559e:	22c6      	movs	r2, #198	; 0xc6
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	18bb      	adds	r3, r7, r2
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3328      	adds	r3, #40	; 0x28
 80055a8:	18ba      	adds	r2, r7, r2
 80055aa:	6013      	str	r3, [r2, #0]


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80055ac:	2300      	movs	r3, #0
 80055ae:	22c7      	movs	r2, #199	; 0xc7
 80055b0:	0092      	lsls	r2, r2, #2
 80055b2:	18ba      	adds	r2, r7, r2
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e01d      	b.n	80055f4 <writeConfig+0x2e8>
		data2[j+i]=TrackIP[i];
 80055b8:	20c7      	movs	r0, #199	; 0xc7
 80055ba:	0080      	lsls	r0, r0, #2
 80055bc:	183b      	adds	r3, r7, r0
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	22cb      	movs	r2, #203	; 0xcb
 80055c2:	0092      	lsls	r2, r2, #2
 80055c4:	2108      	movs	r1, #8
 80055c6:	1852      	adds	r2, r2, r1
 80055c8:	19d2      	adds	r2, r2, r7
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	18d2      	adds	r2, r2, r3
 80055ce:	23c6      	movs	r3, #198	; 0xc6
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	6819      	ldr	r1, [r3, #0]
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	18cb      	adds	r3, r1, r3
 80055dc:	7811      	ldrb	r1, [r2, #0]
 80055de:	4a19      	ldr	r2, [pc, #100]	; (8005644 <writeConfig+0x338>)
 80055e0:	24c8      	movs	r4, #200	; 0xc8
 80055e2:	00a4      	lsls	r4, r4, #2
 80055e4:	1912      	adds	r2, r2, r4
 80055e6:	19d2      	adds	r2, r2, r7
 80055e8:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80055ea:	183b      	adds	r3, r7, r0
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3301      	adds	r3, #1
 80055f0:	183a      	adds	r2, r7, r0
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	23cb      	movs	r3, #203	; 0xcb
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	2208      	movs	r2, #8
 80055fa:	189b      	adds	r3, r3, r2
 80055fc:	19db      	adds	r3, r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0018      	movs	r0, r3
 8005602:	f7fa fd81 	bl	8000108 <strlen>
 8005606:	0002      	movs	r2, r0
 8005608:	21c7      	movs	r1, #199	; 0xc7
 800560a:	0089      	lsls	r1, r1, #2
 800560c:	187b      	adds	r3, r7, r1
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d303      	bcc.n	800561c <writeConfig+0x310>
 8005614:	187b      	adds	r3, r7, r1
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b27      	cmp	r3, #39	; 0x27
 800561a:	ddcd      	ble.n	80055b8 <writeConfig+0x2ac>
	}
	j=0;
 800561c:	2300      	movs	r3, #0
 800561e:	22c6      	movs	r2, #198	; 0xc6
 8005620:	0092      	lsls	r2, r2, #2
 8005622:	18ba      	adds	r2, r7, r2
 8005624:	6013      	str	r3, [r2, #0]


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 8005626:	2300      	movs	r3, #0
 8005628:	22c7      	movs	r2, #199	; 0xc7
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	18ba      	adds	r2, r7, r2
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	e028      	b.n	8005684 <writeConfig+0x378>
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	fffffce0 	.word	0xfffffce0
 8005638:	fffffcf4 	.word	0xfffffcf4
 800563c:	0801769c 	.word	0x0801769c
 8005640:	fffffef8 	.word	0xfffffef8
 8005644:	fffffdf8 	.word	0xfffffdf8
		data3[j+i]=OtherData[i];
 8005648:	20c7      	movs	r0, #199	; 0xc7
 800564a:	0080      	lsls	r0, r0, #2
 800564c:	183b      	adds	r3, r7, r0
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	22cc      	movs	r2, #204	; 0xcc
 8005652:	0092      	lsls	r2, r2, #2
 8005654:	2108      	movs	r1, #8
 8005656:	1852      	adds	r2, r2, r1
 8005658:	19d2      	adds	r2, r2, r7
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	18d2      	adds	r2, r2, r3
 800565e:	23c6      	movs	r3, #198	; 0xc6
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	183b      	adds	r3, r7, r0
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	18cb      	adds	r3, r1, r3
 800566c:	7811      	ldrb	r1, [r2, #0]
 800566e:	4a2f      	ldr	r2, [pc, #188]	; (800572c <writeConfig+0x420>)
 8005670:	24c8      	movs	r4, #200	; 0xc8
 8005672:	00a4      	lsls	r4, r4, #2
 8005674:	1912      	adds	r2, r2, r4
 8005676:	19d2      	adds	r2, r2, r7
 8005678:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 800567a:	183b      	adds	r3, r7, r0
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	183a      	adds	r2, r7, r0
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	23cc      	movs	r3, #204	; 0xcc
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	2208      	movs	r2, #8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	19db      	adds	r3, r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	0018      	movs	r0, r3
 8005692:	f7fa fd39 	bl	8000108 <strlen>
 8005696:	0002      	movs	r2, r0
 8005698:	21c7      	movs	r1, #199	; 0xc7
 800569a:	0089      	lsls	r1, r1, #2
 800569c:	187b      	adds	r3, r7, r1
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d303      	bcc.n	80056ac <writeConfig+0x3a0>
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2bff      	cmp	r3, #255	; 0xff
 80056aa:	ddcd      	ble.n	8005648 <writeConfig+0x33c>
	}
	j=j+OtherDataLen;
 80056ac:	22c6      	movs	r2, #198	; 0xc6
 80056ae:	0092      	lsls	r2, r2, #2
 80056b0:	18bb      	adds	r3, r7, r2
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	33ff      	adds	r3, #255	; 0xff
 80056b8:	18ba      	adds	r2, r7, r2
 80056ba:	6013      	str	r3, [r2, #0]


	add[1]=0x00;
 80056bc:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <writeConfig+0x424>)
 80056be:	25c8      	movs	r5, #200	; 0xc8
 80056c0:	00ad      	lsls	r5, r5, #2
 80056c2:	195b      	adds	r3, r3, r5
 80056c4:	19db      	adds	r3, r3, r7
 80056c6:	2200      	movs	r2, #0
 80056c8:	705a      	strb	r2, [r3, #1]

	SPI_flash_Sector_Erase(add);
 80056ca:	2414      	movs	r4, #20
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7ff fbd0 	bl	8004e74 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	005a      	lsls	r2, r3, #1
 80056d8:	2386      	movs	r3, #134	; 0x86
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	18f9      	adds	r1, r7, r3
 80056de:	193b      	adds	r3, r7, r4
 80056e0:	0018      	movs	r0, r3
 80056e2:	f7ff fc04 	bl	8004eee <SPI_flash_Page_Program>
	add[1]=0x01;
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <writeConfig+0x424>)
 80056e8:	195b      	adds	r3, r3, r5
 80056ea:	19db      	adds	r3, r3, r7
 80056ec:	2201      	movs	r2, #1
 80056ee:	705a      	strb	r2, [r3, #1]
	SPI_flash_Page_Program(add, data2,256);
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	005a      	lsls	r2, r3, #1
 80056f4:	238c      	movs	r3, #140	; 0x8c
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	18f9      	adds	r1, r7, r3
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff fbf6 	bl	8004eee <SPI_flash_Page_Program>
	add[1]=0x02;
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <writeConfig+0x424>)
 8005704:	195b      	adds	r3, r3, r5
 8005706:	19db      	adds	r3, r3, r7
 8005708:	2202      	movs	r2, #2
 800570a:	705a      	strb	r2, [r3, #1]
	SPI_flash_Page_Program(add, data3,256);
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	005a      	lsls	r2, r3, #1
 8005710:	2318      	movs	r3, #24
 8005712:	18f9      	adds	r1, r7, r3
 8005714:	193b      	adds	r3, r7, r4
 8005716:	0018      	movs	r0, r3
 8005718:	f7ff fbe9 	bl	8004eee <SPI_flash_Page_Program>
	return 1;
 800571c:	2301      	movs	r3, #1

}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	23c8      	movs	r3, #200	; 0xc8
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	449d      	add	sp, r3
 8005728:	bdb0      	pop	{r4, r5, r7, pc}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	fffffcf8 	.word	0xfffffcf8
 8005730:	fffffcf4 	.word	0xfffffcf4

08005734 <readRegNo>:



char* readRegNo(){
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	4a0f      	ldr	r2, [pc, #60]	; (800577c <readRegNo+0x48>)
 800573e:	8811      	ldrh	r1, [r2, #0]
 8005740:	8019      	strh	r1, [r3, #0]
 8005742:	7892      	ldrb	r2, [r2, #2]
 8005744:	709a      	strb	r2, [r3, #2]

    memset(dataR,0,256);
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	005a      	lsls	r2, r3, #1
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <readRegNo+0x4c>)
 800574c:	2100      	movs	r1, #0
 800574e:	0018      	movs	r0, r3
 8005750:	f00d fa80 	bl	8012c54 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 8005754:	490a      	ldr	r1, [pc, #40]	; (8005780 <readRegNo+0x4c>)
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	2210      	movs	r2, #16
 800575a:	0018      	movs	r0, r3
 800575c:	f7ff fbf4 	bl	8004f48 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <readRegNo+0x4c>)
 8005762:	0018      	movs	r0, r3
 8005764:	f7fa fcd0 	bl	8000108 <strlen>
 8005768:	0003      	movs	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d901      	bls.n	8005772 <readRegNo+0x3e>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
 800576e:	4b04      	ldr	r3, [pc, #16]	; (8005780 <readRegNo+0x4c>)
 8005770:	e000      	b.n	8005774 <readRegNo+0x40>
	}
	else{
		return "--Err RegNo--";
 8005772:	4b04      	ldr	r3, [pc, #16]	; (8005784 <readRegNo+0x50>)
	}

}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}
 800577c:	0801769c 	.word	0x0801769c
 8005780:	20001634 	.word	0x20001634
 8005784:	080176a0 	.word	0x080176a0

08005788 <readINSMSno>:

char* readINSMSno(){
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 800578e:	1d3b      	adds	r3, r7, #4
 8005790:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <readINSMSno+0x30>)
 8005792:	8811      	ldrh	r1, [r2, #0]
 8005794:	8019      	strh	r1, [r3, #0]
 8005796:	7892      	ldrb	r2, [r2, #2]
 8005798:	709a      	strb	r2, [r3, #2]
	add4[2]=RegNoLen;
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	2210      	movs	r2, #16
 800579e:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 80057a0:	4906      	ldr	r1, [pc, #24]	; (80057bc <readINSMSno+0x34>)
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	2264      	movs	r2, #100	; 0x64
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7ff fbce 	bl	8004f48 <SPI_flash_Read_Data>
	return (char*) dataR;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <readINSMSno+0x34>)
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b002      	add	sp, #8
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	0801769c 	.word	0x0801769c
 80057bc:	20001634 	.word	0x20001634

080057c0 <readOUTSMSno>:

char* readOUTSMSno(){
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0

	uint8_t  add4[]={0x00, 0x00,0x00};
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <readOUTSMSno+0x30>)
 80057ca:	8811      	ldrh	r1, [r2, #0]
 80057cc:	8019      	strh	r1, [r3, #0]
 80057ce:	7892      	ldrb	r2, [r2, #2]
 80057d0:	709a      	strb	r2, [r3, #2]
	add4[2]=RegNoLen+INSMSLen;
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	2274      	movs	r2, #116	; 0x74
 80057d6:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 80057d8:	4906      	ldr	r1, [pc, #24]	; (80057f4 <readOUTSMSno+0x34>)
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	223c      	movs	r2, #60	; 0x3c
 80057de:	0018      	movs	r0, r3
 80057e0:	f7ff fbb2 	bl	8004f48 <SPI_flash_Read_Data>
	return (char*) dataR;
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <readOUTSMSno+0x34>)
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b002      	add	sp, #8
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	0801769c 	.word	0x0801769c
 80057f4:	20001634 	.word	0x20001634

080057f8 <readEmgIP>:

char* readEmgIP(){
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
	uint8_t  add4[]={0x00, 0x01,0x00};
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4a07      	ldr	r2, [pc, #28]	; (8005820 <readEmgIP+0x28>)
 8005802:	8811      	ldrh	r1, [r2, #0]
 8005804:	8019      	strh	r1, [r3, #0]
 8005806:	7892      	ldrb	r2, [r2, #2]
 8005808:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 800580a:	4906      	ldr	r1, [pc, #24]	; (8005824 <readEmgIP+0x2c>)
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	2228      	movs	r2, #40	; 0x28
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff fb99 	bl	8004f48 <SPI_flash_Read_Data>
	return (char*) dataR;
 8005816:	4b03      	ldr	r3, [pc, #12]	; (8005824 <readEmgIP+0x2c>)
}
 8005818:	0018      	movs	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}
 8005820:	080176b0 	.word	0x080176b0
 8005824:	20001634 	.word	0x20001634

08005828 <readRegIP>:

char* readRegIP(){
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
	uint8_t  add4[]={0x00, 0x01,0x00};
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	4a09      	ldr	r2, [pc, #36]	; (8005858 <readRegIP+0x30>)
 8005832:	8811      	ldrh	r1, [r2, #0]
 8005834:	8019      	strh	r1, [r3, #0]
 8005836:	7892      	ldrb	r2, [r2, #2]
 8005838:	709a      	strb	r2, [r3, #2]
	add4[2]=EmgIPLen;
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	2228      	movs	r2, #40	; 0x28
 800583e:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8005840:	4906      	ldr	r1, [pc, #24]	; (800585c <readRegIP+0x34>)
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	2228      	movs	r2, #40	; 0x28
 8005846:	0018      	movs	r0, r3
 8005848:	f7ff fb7e 	bl	8004f48 <SPI_flash_Read_Data>
	return (char*) dataR;
 800584c:	4b03      	ldr	r3, [pc, #12]	; (800585c <readRegIP+0x34>)
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b002      	add	sp, #8
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	080176b0 	.word	0x080176b0
 800585c:	20001634 	.word	0x20001634

08005860 <readTracIP>:

char* readTracIP(){
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
	uint8_t  add4[]={0x00, 0x01,0x00};
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <readTracIP+0x30>)
 800586a:	8811      	ldrh	r1, [r2, #0]
 800586c:	8019      	strh	r1, [r3, #0]
 800586e:	7892      	ldrb	r2, [r2, #2]
 8005870:	709a      	strb	r2, [r3, #2]
	add4[2]=EmgIPLen+RegIPLen;
 8005872:	1d3b      	adds	r3, r7, #4
 8005874:	2250      	movs	r2, #80	; 0x50
 8005876:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8005878:	4906      	ldr	r1, [pc, #24]	; (8005894 <readTracIP+0x34>)
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	2228      	movs	r2, #40	; 0x28
 800587e:	0018      	movs	r0, r3
 8005880:	f7ff fb62 	bl	8004f48 <SPI_flash_Read_Data>
	return (char*) dataR;
 8005884:	4b03      	ldr	r3, [pc, #12]	; (8005894 <readTracIP+0x34>)
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	080176b0 	.word	0x080176b0
 8005894:	20001634 	.word	0x20001634

08005898 <initAcc>:
#define WHO_AM_I_REG 0x75

/* Constants for Acc*/


static void initAcc(){
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800589e:	4858      	ldr	r0, [pc, #352]	; (8005a00 <initAcc+0x168>)
 80058a0:	23fa      	movs	r3, #250	; 0xfa
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	9302      	str	r3, [sp, #8]
 80058a6:	2301      	movs	r3, #1
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	1dfb      	adds	r3, r7, #7
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	2301      	movs	r3, #1
 80058b0:	2275      	movs	r2, #117	; 0x75
 80058b2:	21d0      	movs	r1, #208	; 0xd0
 80058b4:	f004 fefc 	bl	800a6b0 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80058b8:	1dfb      	adds	r3, r7, #7
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b68      	cmp	r3, #104	; 0x68
 80058be:	d144      	bne.n	800594a <initAcc+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80058c0:	1dbb      	adds	r3, r7, #6
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80058c6:	484e      	ldr	r0, [pc, #312]	; (8005a00 <initAcc+0x168>)
 80058c8:	23fa      	movs	r3, #250	; 0xfa
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	9302      	str	r3, [sp, #8]
 80058ce:	2301      	movs	r3, #1
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	1dbb      	adds	r3, r7, #6
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	2301      	movs	r3, #1
 80058d8:	226b      	movs	r2, #107	; 0x6b
 80058da:	21d0      	movs	r1, #208	; 0xd0
 80058dc:	f004 fdba 	bl	800a454 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80058e0:	1dbb      	adds	r3, r7, #6
 80058e2:	2207      	movs	r2, #7
 80058e4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80058e6:	4846      	ldr	r0, [pc, #280]	; (8005a00 <initAcc+0x168>)
 80058e8:	23fa      	movs	r3, #250	; 0xfa
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	9302      	str	r3, [sp, #8]
 80058ee:	2301      	movs	r3, #1
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	1dbb      	adds	r3, r7, #6
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2301      	movs	r3, #1
 80058f8:	2219      	movs	r2, #25
 80058fa:	21d0      	movs	r1, #208	; 0xd0
 80058fc:	f004 fdaa 	bl	800a454 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g
		Data = 0x00;
 8005900:	1dbb      	adds	r3, r7, #6
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8005906:	483e      	ldr	r0, [pc, #248]	; (8005a00 <initAcc+0x168>)
 8005908:	23fa      	movs	r3, #250	; 0xfa
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	9302      	str	r3, [sp, #8]
 800590e:	2301      	movs	r3, #1
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	1dbb      	adds	r3, r7, #6
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2301      	movs	r3, #1
 8005918:	221c      	movs	r2, #28
 800591a:	21d0      	movs	r1, #208	; 0xd0
 800591c:	f004 fd9a 	bl	800a454 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 /s
		Data = 0x00;
 8005920:	1dbb      	adds	r3, r7, #6
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8005926:	4836      	ldr	r0, [pc, #216]	; (8005a00 <initAcc+0x168>)
 8005928:	23fa      	movs	r3, #250	; 0xfa
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	9302      	str	r3, [sp, #8]
 800592e:	2301      	movs	r3, #1
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	1dbb      	adds	r3, r7, #6
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	2301      	movs	r3, #1
 8005938:	221b      	movs	r2, #27
 800593a:	21d0      	movs	r1, #208	; 0xd0
 800593c:	f004 fd8a 	bl	800a454 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8005940:	4b30      	ldr	r3, [pc, #192]	; (8005a04 <initAcc+0x16c>)
 8005942:	0018      	movs	r0, r3
 8005944:	f002 faa4 	bl	8007e90 <Debug_Tx>
 8005948:	e043      	b.n	80059d2 <initAcc+0x13a>
	}
	else{
		Data = 0;
 800594a:	1dbb      	adds	r3, r7, #6
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8005950:	482b      	ldr	r0, [pc, #172]	; (8005a00 <initAcc+0x168>)
 8005952:	23fa      	movs	r3, #250	; 0xfa
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	9302      	str	r3, [sp, #8]
 8005958:	2301      	movs	r3, #1
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	1dbb      	adds	r3, r7, #6
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2301      	movs	r3, #1
 8005962:	226b      	movs	r2, #107	; 0x6b
 8005964:	21d0      	movs	r1, #208	; 0xd0
 8005966:	f004 fd75 	bl	800a454 <HAL_I2C_Mem_Write>

				// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
				Data = 0x07;
 800596a:	1dbb      	adds	r3, r7, #6
 800596c:	2207      	movs	r2, #7
 800596e:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8005970:	4823      	ldr	r0, [pc, #140]	; (8005a00 <initAcc+0x168>)
 8005972:	23fa      	movs	r3, #250	; 0xfa
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	9302      	str	r3, [sp, #8]
 8005978:	2301      	movs	r3, #1
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	1dbb      	adds	r3, r7, #6
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	2301      	movs	r3, #1
 8005982:	2219      	movs	r2, #25
 8005984:	21d0      	movs	r1, #208	; 0xd0
 8005986:	f004 fd65 	bl	800a454 <HAL_I2C_Mem_Write>

				// Set accelerometer configuration in ACCEL_CONFIG Register
				// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g
				Data = 0x00;
 800598a:	1dbb      	adds	r3, r7, #6
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8005990:	481b      	ldr	r0, [pc, #108]	; (8005a00 <initAcc+0x168>)
 8005992:	23fa      	movs	r3, #250	; 0xfa
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	9302      	str	r3, [sp, #8]
 8005998:	2301      	movs	r3, #1
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	1dbb      	adds	r3, r7, #6
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2301      	movs	r3, #1
 80059a2:	221c      	movs	r2, #28
 80059a4:	21d0      	movs	r1, #208	; 0xd0
 80059a6:	f004 fd55 	bl	800a454 <HAL_I2C_Mem_Write>

				// Set Gyroscopic configuration in GYRO_CONFIG Register
				// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 /s
				Data = 0x00;
 80059aa:	1dbb      	adds	r3, r7, #6
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80059b0:	4813      	ldr	r0, [pc, #76]	; (8005a00 <initAcc+0x168>)
 80059b2:	23fa      	movs	r3, #250	; 0xfa
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	2301      	movs	r3, #1
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	1dbb      	adds	r3, r7, #6
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2301      	movs	r3, #1
 80059c2:	221b      	movs	r2, #27
 80059c4:	21d0      	movs	r1, #208	; 0xd0
 80059c6:	f004 fd45 	bl	800a454 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <initAcc+0x170>)
 80059cc:	0018      	movs	r0, r3
 80059ce:	f002 fa5f 	bl	8007e90 <Debug_Tx>
	}

	ACC_GYRO_data[0]=0;
 80059d2:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <initAcc+0x174>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <initAcc+0x174>)
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 80059de:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <initAcc+0x174>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 80059e4:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <initAcc+0x174>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <initAcc+0x174>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <initAcc+0x174>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	615a      	str	r2, [r3, #20]

}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	20000620 	.word	0x20000620
 8005a04:	080176b8 	.word	0x080176b8
 8005a08:	080176cc 	.word	0x080176cc
 8005a0c:	20003758 	.word	0x20003758

08005a10 <readAcc>:





static float* readAcc(){
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af04      	add	r7, sp, #16

	ACC_GYRO_data[0]=0;
 8005a16:	4b7e      	ldr	r3, [pc, #504]	; (8005c10 <readAcc+0x200>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 8005a1c:	4b7c      	ldr	r3, [pc, #496]	; (8005c10 <readAcc+0x200>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 8005a22:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <readAcc+0x200>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 8005a28:	4b79      	ldr	r3, [pc, #484]	; (8005c10 <readAcc+0x200>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 8005a2e:	4b78      	ldr	r3, [pc, #480]	; (8005c10 <readAcc+0x200>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8005a34:	4b76      	ldr	r3, [pc, #472]	; (8005c10 <readAcc+0x200>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	615a      	str	r2, [r3, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005a3a:	4876      	ldr	r0, [pc, #472]	; (8005c14 <readAcc+0x204>)
 8005a3c:	23fa      	movs	r3, #250	; 0xfa
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	2306      	movs	r3, #6
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	003b      	movs	r3, r7
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	223b      	movs	r2, #59	; 0x3b
 8005a4e:	21d0      	movs	r1, #208	; 0xd0
 8005a50:	f004 fe2e 	bl	800a6b0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005a54:	003b      	movs	r3, r7
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	b21a      	sxth	r2, r3
 8005a5c:	003b      	movs	r3, r7
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b21a      	sxth	r2, r3
 8005a66:	4b6c      	ldr	r3, [pc, #432]	; (8005c18 <readAcc+0x208>)
 8005a68:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8005a6a:	003b      	movs	r3, r7
 8005a6c:	789b      	ldrb	r3, [r3, #2]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	b21a      	sxth	r2, r3
 8005a72:	003b      	movs	r3, r7
 8005a74:	78db      	ldrb	r3, [r3, #3]
 8005a76:	b21b      	sxth	r3, r3
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	b21a      	sxth	r2, r3
 8005a7c:	4b67      	ldr	r3, [pc, #412]	; (8005c1c <readAcc+0x20c>)
 8005a7e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8005a80:	003b      	movs	r3, r7
 8005a82:	791b      	ldrb	r3, [r3, #4]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	b21a      	sxth	r2, r3
 8005a88:	003b      	movs	r3, r7
 8005a8a:	795b      	ldrb	r3, [r3, #5]
 8005a8c:	b21b      	sxth	r3, r3
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	b21a      	sxth	r2, r3
 8005a92:	4b63      	ldr	r3, [pc, #396]	; (8005c20 <readAcc+0x210>)
 8005a94:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8005a96:	4b60      	ldr	r3, [pc, #384]	; (8005c18 <readAcc+0x208>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	5e9b      	ldrsh	r3, [r3, r2]
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f7fd fab1 	bl	8003004 <__aeabi_i2d>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4b5f      	ldr	r3, [pc, #380]	; (8005c24 <readAcc+0x214>)
 8005aa6:	f7fc f81b 	bl	8001ae0 <__aeabi_ddiv>
 8005aaa:	0002      	movs	r2, r0
 8005aac:	000b      	movs	r3, r1
 8005aae:	0010      	movs	r0, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	f7fd fb45 	bl	8003140 <__aeabi_d2f>
 8005ab6:	1c02      	adds	r2, r0, #0
 8005ab8:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <readAcc+0x218>)
 8005aba:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 8005abc:	4b57      	ldr	r3, [pc, #348]	; (8005c1c <readAcc+0x20c>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	5e9b      	ldrsh	r3, [r3, r2]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7fd fa9e 	bl	8003004 <__aeabi_i2d>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4b56      	ldr	r3, [pc, #344]	; (8005c24 <readAcc+0x214>)
 8005acc:	f7fc f808 	bl	8001ae0 <__aeabi_ddiv>
 8005ad0:	0002      	movs	r2, r0
 8005ad2:	000b      	movs	r3, r1
 8005ad4:	0010      	movs	r0, r2
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	f7fd fb32 	bl	8003140 <__aeabi_d2f>
 8005adc:	1c02      	adds	r2, r0, #0
 8005ade:	4b53      	ldr	r3, [pc, #332]	; (8005c2c <readAcc+0x21c>)
 8005ae0:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8005ae2:	4b4f      	ldr	r3, [pc, #316]	; (8005c20 <readAcc+0x210>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	5e9b      	ldrsh	r3, [r3, r2]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7fd fa8b 	bl	8003004 <__aeabi_i2d>
 8005aee:	2200      	movs	r2, #0
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <readAcc+0x214>)
 8005af2:	f7fb fff5 	bl	8001ae0 <__aeabi_ddiv>
 8005af6:	0002      	movs	r2, r0
 8005af8:	000b      	movs	r3, r1
 8005afa:	0010      	movs	r0, r2
 8005afc:	0019      	movs	r1, r3
 8005afe:	f7fd fb1f 	bl	8003140 <__aeabi_d2f>
 8005b02:	1c02      	adds	r2, r0, #0
 8005b04:	4b4a      	ldr	r3, [pc, #296]	; (8005c30 <readAcc+0x220>)
 8005b06:	601a      	str	r2, [r3, #0]


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005b08:	4842      	ldr	r0, [pc, #264]	; (8005c14 <readAcc+0x204>)
 8005b0a:	23fa      	movs	r3, #250	; 0xfa
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	9302      	str	r3, [sp, #8]
 8005b10:	2306      	movs	r3, #6
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	003b      	movs	r3, r7
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	2301      	movs	r3, #1
 8005b1a:	2243      	movs	r2, #67	; 0x43
 8005b1c:	21d0      	movs	r1, #208	; 0xd0
 8005b1e:	f004 fdc7 	bl	800a6b0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005b22:	003b      	movs	r3, r7
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	b21a      	sxth	r2, r3
 8005b2a:	003b      	movs	r3, r7
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	b21b      	sxth	r3, r3
 8005b30:	4313      	orrs	r3, r2
 8005b32:	b21a      	sxth	r2, r3
 8005b34:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <readAcc+0x224>)
 8005b36:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8005b38:	003b      	movs	r3, r7
 8005b3a:	789b      	ldrb	r3, [r3, #2]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	b21a      	sxth	r2, r3
 8005b40:	003b      	movs	r3, r7
 8005b42:	78db      	ldrb	r3, [r3, #3]
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	4313      	orrs	r3, r2
 8005b48:	b21a      	sxth	r2, r3
 8005b4a:	4b3b      	ldr	r3, [pc, #236]	; (8005c38 <readAcc+0x228>)
 8005b4c:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8005b4e:	003b      	movs	r3, r7
 8005b50:	791b      	ldrb	r3, [r3, #4]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	b21a      	sxth	r2, r3
 8005b56:	003b      	movs	r3, r7
 8005b58:	795b      	ldrb	r3, [r3, #5]
 8005b5a:	b21b      	sxth	r3, r3
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b21a      	sxth	r2, r3
 8005b60:	4b36      	ldr	r3, [pc, #216]	; (8005c3c <readAcc+0x22c>)
 8005b62:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8005b64:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <readAcc+0x224>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	5e9b      	ldrsh	r3, [r3, r2]
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f7fd fa4a 	bl	8003004 <__aeabi_i2d>
 8005b70:	2200      	movs	r2, #0
 8005b72:	4b33      	ldr	r3, [pc, #204]	; (8005c40 <readAcc+0x230>)
 8005b74:	f7fb ffb4 	bl	8001ae0 <__aeabi_ddiv>
 8005b78:	0002      	movs	r2, r0
 8005b7a:	000b      	movs	r3, r1
 8005b7c:	0010      	movs	r0, r2
 8005b7e:	0019      	movs	r1, r3
 8005b80:	f7fd fade 	bl	8003140 <__aeabi_d2f>
 8005b84:	1c02      	adds	r2, r0, #0
 8005b86:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <readAcc+0x234>)
 8005b88:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <readAcc+0x228>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	5e9b      	ldrsh	r3, [r3, r2]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7fd fa37 	bl	8003004 <__aeabi_i2d>
 8005b96:	2200      	movs	r2, #0
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <readAcc+0x230>)
 8005b9a:	f7fb ffa1 	bl	8001ae0 <__aeabi_ddiv>
 8005b9e:	0002      	movs	r2, r0
 8005ba0:	000b      	movs	r3, r1
 8005ba2:	0010      	movs	r0, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	f7fd facb 	bl	8003140 <__aeabi_d2f>
 8005baa:	1c02      	adds	r2, r0, #0
 8005bac:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <readAcc+0x238>)
 8005bae:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8005bb0:	4b22      	ldr	r3, [pc, #136]	; (8005c3c <readAcc+0x22c>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	5e9b      	ldrsh	r3, [r3, r2]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7fd fa24 	bl	8003004 <__aeabi_i2d>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <readAcc+0x230>)
 8005bc0:	f7fb ff8e 	bl	8001ae0 <__aeabi_ddiv>
 8005bc4:	0002      	movs	r2, r0
 8005bc6:	000b      	movs	r3, r1
 8005bc8:	0010      	movs	r0, r2
 8005bca:	0019      	movs	r1, r3
 8005bcc:	f7fd fab8 	bl	8003140 <__aeabi_d2f>
 8005bd0:	1c02      	adds	r2, r0, #0
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <readAcc+0x23c>)
 8005bd4:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <readAcc+0x218>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <readAcc+0x200>)
 8005bdc:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=Ay;
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <readAcc+0x21c>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <readAcc+0x200>)
 8005be4:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=Az;
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <readAcc+0x220>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <readAcc+0x200>)
 8005bec:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=Gx;
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <readAcc+0x234>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <readAcc+0x200>)
 8005bf4:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=Gy;
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <readAcc+0x238>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <readAcc+0x200>)
 8005bfc:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=Gz;
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <readAcc+0x23c>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <readAcc+0x200>)
 8005c04:	615a      	str	r2, [r3, #20]
	return(ACC_GYRO_data);
 8005c06:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <readAcc+0x200>)

	//sprintf (buf, "%.2f", Ax);
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b002      	add	sp, #8
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20003758 	.word	0x20003758
 8005c14:	20000620 	.word	0x20000620
 8005c18:	20003734 	.word	0x20003734
 8005c1c:	20003736 	.word	0x20003736
 8005c20:	20003738 	.word	0x20003738
 8005c24:	40d00000 	.word	0x40d00000
 8005c28:	20003740 	.word	0x20003740
 8005c2c:	20003744 	.word	0x20003744
 8005c30:	20003748 	.word	0x20003748
 8005c34:	2000373a 	.word	0x2000373a
 8005c38:	2000373c 	.word	0x2000373c
 8005c3c:	2000373e 	.word	0x2000373e
 8005c40:	40606000 	.word	0x40606000
 8005c44:	2000374c 	.word	0x2000374c
 8005c48:	20003750 	.word	0x20003750
 8005c4c:	20003754 	.word	0x20003754

08005c50 <detectAcc>:


int detectAcc(){
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
	readAcc();
 8005c54:	f7ff fedc 	bl	8005a10 <readAcc>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8005c58:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <detectAcc+0xa8>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b26      	ldr	r3, [pc, #152]	; (8005cf8 <detectAcc+0xa8>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	1c19      	adds	r1, r3, #0
 8005c62:	1c10      	adds	r0, r2, #0
 8005c64:	f7fa fcca 	bl	80005fc <__aeabi_fadd>
 8005c68:	1c03      	adds	r3, r0, #0
 8005c6a:	1c1a      	adds	r2, r3, #0
 8005c6c:	4b22      	ldr	r3, [pc, #136]	; (8005cf8 <detectAcc+0xa8>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	1c19      	adds	r1, r3, #0
 8005c72:	1c10      	adds	r0, r2, #0
 8005c74:	f7fa fcc2 	bl	80005fc <__aeabi_fadd>
 8005c78:	1c03      	adds	r3, r0, #0
 8005c7a:	4920      	ldr	r1, [pc, #128]	; (8005cfc <detectAcc+0xac>)
 8005c7c:	1c18      	adds	r0, r3, #0
 8005c7e:	f7fa fc39 	bl	80004f4 <__aeabi_fcmpgt>
 8005c82:	1e03      	subs	r3, r0, #0
 8005c84:	d001      	beq.n	8005c8a <detectAcc+0x3a>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e032      	b.n	8005cf0 <detectAcc+0xa0>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <detectAcc+0xa8>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <detectAcc+0xa8>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	1c19      	adds	r1, r3, #0
 8005c94:	1c10      	adds	r0, r2, #0
 8005c96:	f7fa fcb1 	bl	80005fc <__aeabi_fadd>
 8005c9a:	1c03      	adds	r3, r0, #0
 8005c9c:	1c1a      	adds	r2, r3, #0
 8005c9e:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <detectAcc+0xa8>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	1c19      	adds	r1, r3, #0
 8005ca4:	1c10      	adds	r0, r2, #0
 8005ca6:	f7fa fca9 	bl	80005fc <__aeabi_fadd>
 8005caa:	1c03      	adds	r3, r0, #0
 8005cac:	4914      	ldr	r1, [pc, #80]	; (8005d00 <detectAcc+0xb0>)
 8005cae:	1c18      	adds	r0, r3, #0
 8005cb0:	f7fa fc0c 	bl	80004cc <__aeabi_fcmplt>
 8005cb4:	1e03      	subs	r3, r0, #0
 8005cb6:	d001      	beq.n	8005cbc <detectAcc+0x6c>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e019      	b.n	8005cf0 <detectAcc+0xa0>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <detectAcc+0xa8>)
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <detectAcc+0xa8>)
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	1c19      	adds	r1, r3, #0
 8005cc6:	1c10      	adds	r0, r2, #0
 8005cc8:	f7fa fc98 	bl	80005fc <__aeabi_fadd>
 8005ccc:	1c03      	adds	r3, r0, #0
 8005cce:	1c1a      	adds	r2, r3, #0
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <detectAcc+0xa8>)
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	1c19      	adds	r1, r3, #0
 8005cd6:	1c10      	adds	r0, r2, #0
 8005cd8:	f7fa fc90 	bl	80005fc <__aeabi_fadd>
 8005cdc:	1c03      	adds	r3, r0, #0
 8005cde:	4907      	ldr	r1, [pc, #28]	; (8005cfc <detectAcc+0xac>)
 8005ce0:	1c18      	adds	r0, r3, #0
 8005ce2:	f7fa fc07 	bl	80004f4 <__aeabi_fcmpgt>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d001      	beq.n	8005cee <detectAcc+0x9e>
 8005cea:	2303      	movs	r3, #3
 8005cec:	e000      	b.n	8005cf0 <detectAcc+0xa0>


	return 0;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	20003758 	.word	0x20003758
 8005cfc:	44fa0000 	.word	0x44fa0000
 8005d00:	c4fa0000 	.word	0xc4fa0000

08005d04 <initGPS>:
char printBuf[50];

//char* buffer
//int ProcessRunning_GPS=0;

void initGPS(){
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <initGPS+0x6c>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
	GPSInfo.lon=0.0;
 8005d0e:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <initGPS+0x6c>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
	GPSInfo.alt=0.0;
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <initGPS+0x6c>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
	GPSInfo.hdop=0.0;
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <initGPS+0x6c>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	60da      	str	r2, [r3, #12]
	GPSInfo.pdop=0.0;
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <initGPS+0x6c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	611a      	str	r2, [r3, #16]
	GPSInfo.head=0.0;
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <initGPS+0x6c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	615a      	str	r2, [r3, #20]
	GPSInfo.speed=0.0;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <initGPS+0x6c>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	619a      	str	r2, [r3, #24]
	GPSInfo.fix=0;
 8005d32:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <initGPS+0x6c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	61da      	str	r2, [r3, #28]
	GPSInfo.sat=0;
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <initGPS+0x6c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	621a      	str	r2, [r3, #32]
	strcpy(GPSInfo.latD,"x");
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <initGPS+0x70>)
 8005d40:	2278      	movs	r2, #120	; 0x78
 8005d42:	801a      	strh	r2, [r3, #0]
	strcpy(GPSInfo.lonD,"x");
 8005d44:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <initGPS+0x74>)
 8005d46:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <initGPS+0x78>)
 8005d48:	0010      	movs	r0, r2
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	001a      	movs	r2, r3
 8005d50:	f00d f948 	bl	8012fe4 <memcpy>
	strcpy(GPSInfo.time,"x");
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <initGPS+0x7c>)
 8005d56:	2278      	movs	r2, #120	; 0x78
 8005d58:	801a      	strh	r2, [r3, #0]
	strcpy(GPSInfo.date,"x");
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <initGPS+0x80>)
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <initGPS+0x78>)
 8005d5e:	0010      	movs	r0, r2
 8005d60:	0019      	movs	r1, r3
 8005d62:	2302      	movs	r3, #2
 8005d64:	001a      	movs	r2, r3
 8005d66:	f00d f93d 	bl	8012fe4 <memcpy>
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20003770 	.word	0x20003770
 8005d74:	20003798 	.word	0x20003798
 8005d78:	2000379b 	.word	0x2000379b
 8005d7c:	08017708 	.word	0x08017708
 8005d80:	2000379e 	.word	0x2000379e
 8005d84:	200037ad 	.word	0x200037ad

08005d88 <getGPSString>:
void getGPSString(){
 8005d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8a:	46ce      	mov	lr, r9
 8005d8c:	4647      	mov	r7, r8
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b0a1      	sub	sp, #132	; 0x84
 8005d92:	af16      	add	r7, sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 8005d94:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <getGPSString+0xf8>)
 8005d96:	2246      	movs	r2, #70	; 0x46
 8005d98:	2100      	movs	r1, #0
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f00c ff5a 	bl	8012c54 <memset>

	if(GPSInfo.fix==1){
 8005da0:	4b38      	ldr	r3, [pc, #224]	; (8005e84 <getGPSString+0xfc>)
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d103      	bne.n	8005db0 <getGPSString+0x28>
		SET_LED_GPS(1);
 8005da8:	2001      	movs	r0, #1
 8005daa:	f7fd fbb9 	bl	8003520 <SET_LED_GPS>
 8005dae:	e002      	b.n	8005db6 <getGPSString+0x2e>
	}
	else{
		SET_LED_GPS(0);
 8005db0:	2000      	movs	r0, #0
 8005db2:	f7fd fbb5 	bl	8003520 <SET_LED_GPS>
	}




	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005db6:	4b33      	ldr	r3, [pc, #204]	; (8005e84 <getGPSString+0xfc>)
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	4699      	mov	r9, r3
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005dbc:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <getGPSString+0xfc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005dc0:	1c18      	adds	r0, r3, #0
 8005dc2:	f7fd f975 	bl	80030b0 <__aeabi_f2d>
 8005dc6:	6238      	str	r0, [r7, #32]
 8005dc8:	6279      	str	r1, [r7, #36]	; 0x24
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005dca:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <getGPSString+0xfc>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005dce:	1c18      	adds	r0, r3, #0
 8005dd0:	f7fd f96e 	bl	80030b0 <__aeabi_f2d>
 8005dd4:	61b8      	str	r0, [r7, #24]
 8005dd6:	61f9      	str	r1, [r7, #28]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005dd8:	4b2a      	ldr	r3, [pc, #168]	; (8005e84 <getGPSString+0xfc>)
 8005dda:	699b      	ldr	r3, [r3, #24]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005ddc:	1c18      	adds	r0, r3, #0
 8005dde:	f7fd f967 	bl	80030b0 <__aeabi_f2d>
 8005de2:	6138      	str	r0, [r7, #16]
 8005de4:	6179      	str	r1, [r7, #20]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005de6:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <getGPSString+0xfc>)
 8005de8:	695b      	ldr	r3, [r3, #20]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005dea:	1c18      	adds	r0, r3, #0
 8005dec:	f7fd f960 	bl	80030b0 <__aeabi_f2d>
 8005df0:	60b8      	str	r0, [r7, #8]
 8005df2:	60f9      	str	r1, [r7, #12]
 8005df4:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <getGPSString+0xfc>)
 8005df6:	6a1a      	ldr	r2, [r3, #32]
 8005df8:	4690      	mov	r8, r2
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005dfa:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <getGPSString+0xfc>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005dfe:	1c18      	adds	r0, r3, #0
 8005e00:	f7fd f956 	bl	80030b0 <__aeabi_f2d>
 8005e04:	6038      	str	r0, [r7, #0]
 8005e06:	6079      	str	r1, [r7, #4]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <getGPSString+0xfc>)
 8005e0a:	691b      	ldr	r3, [r3, #16]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005e0c:	1c18      	adds	r0, r3, #0
 8005e0e:	f7fd f94f 	bl	80030b0 <__aeabi_f2d>
 8005e12:	0004      	movs	r4, r0
 8005e14:	000d      	movs	r5, r1
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005e16:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <getGPSString+0xfc>)
 8005e18:	68db      	ldr	r3, [r3, #12]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005e1a:	1c18      	adds	r0, r3, #0
 8005e1c:	f7fd f948 	bl	80030b0 <__aeabi_f2d>
 8005e20:	0002      	movs	r2, r0
 8005e22:	000b      	movs	r3, r1
 8005e24:	4e18      	ldr	r6, [pc, #96]	; (8005e88 <getGPSString+0x100>)
 8005e26:	4919      	ldr	r1, [pc, #100]	; (8005e8c <getGPSString+0x104>)
 8005e28:	4815      	ldr	r0, [pc, #84]	; (8005e80 <getGPSString+0xf8>)
 8005e2a:	9214      	str	r2, [sp, #80]	; 0x50
 8005e2c:	9315      	str	r3, [sp, #84]	; 0x54
 8005e2e:	9412      	str	r4, [sp, #72]	; 0x48
 8005e30:	9513      	str	r5, [sp, #76]	; 0x4c
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	687c      	ldr	r4, [r7, #4]
 8005e36:	9310      	str	r3, [sp, #64]	; 0x40
 8005e38:	9411      	str	r4, [sp, #68]	; 0x44
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	920e      	str	r2, [sp, #56]	; 0x38
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	68fc      	ldr	r4, [r7, #12]
 8005e42:	930c      	str	r3, [sp, #48]	; 0x30
 8005e44:	940d      	str	r4, [sp, #52]	; 0x34
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	697c      	ldr	r4, [r7, #20]
 8005e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e4e:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <getGPSString+0x108>)
 8005e50:	9308      	str	r3, [sp, #32]
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	69fc      	ldr	r4, [r7, #28]
 8005e56:	9306      	str	r3, [sp, #24]
 8005e58:	9407      	str	r4, [sp, #28]
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <getGPSString+0x10c>)
 8005e5c:	9304      	str	r3, [sp, #16]
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005e62:	9302      	str	r3, [sp, #8]
 8005e64:	9403      	str	r4, [sp, #12]
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <getGPSString+0x110>)
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	0033      	movs	r3, r6
 8005e6c:	464a      	mov	r2, r9
 8005e6e:	f00c fe85 	bl	8012b7c <siprintf>
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b00b      	add	sp, #44	; 0x2c
 8005e78:	bcc0      	pop	{r6, r7}
 8005e7a:	46b9      	mov	r9, r7
 8005e7c:	46b0      	mov	r8, r6
 8005e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e80:	20003ba4 	.word	0x20003ba4
 8005e84:	20003770 	.word	0x20003770
 8005e88:	200037ad 	.word	0x200037ad
 8005e8c:	0801770c 	.word	0x0801770c
 8005e90:	2000379b 	.word	0x2000379b
 8005e94:	20003798 	.word	0x20003798
 8005e98:	2000379e 	.word	0x2000379e

08005e9c <DegreeDecimalConvert>:



float DegreeDecimalConvert(float ddmmmm){
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
    // printf("insfunction2 %f",ddmmmm);
    int dd1= ddmmmm/100;
 8005ea4:	4915      	ldr	r1, [pc, #84]	; (8005efc <DegreeDecimalConvert+0x60>)
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fa fd48 	bl	800093c <__aeabi_fdiv>
 8005eac:	1c03      	adds	r3, r0, #0
 8005eae:	1c18      	adds	r0, r3, #0
 8005eb0:	f7fb f9fc 	bl	80012ac <__aeabi_f2iz>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	60fb      	str	r3, [r7, #12]
    float mm=ddmmmm -(dd1*100);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2264      	movs	r2, #100	; 0x64
 8005ebc:	4353      	muls	r3, r2
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7fb fa14 	bl	80012ec <__aeabi_i2f>
 8005ec4:	1c03      	adds	r3, r0, #0
 8005ec6:	1c19      	adds	r1, r3, #0
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fb f84f 	bl	8000f6c <__aeabi_fsub>
 8005ece:	1c03      	adds	r3, r0, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
    mm=mm/60;
 8005ed2:	490b      	ldr	r1, [pc, #44]	; (8005f00 <DegreeDecimalConvert+0x64>)
 8005ed4:	68b8      	ldr	r0, [r7, #8]
 8005ed6:	f7fa fd31 	bl	800093c <__aeabi_fdiv>
 8005eda:	1c03      	adds	r3, r0, #0
 8005edc:	60bb      	str	r3, [r7, #8]
    mm=(float)dd1+mm;
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7fb fa04 	bl	80012ec <__aeabi_i2f>
 8005ee4:	1c03      	adds	r3, r0, #0
 8005ee6:	1c19      	adds	r1, r3, #0
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f7fa fb87 	bl	80005fc <__aeabi_fadd>
 8005eee:	1c03      	adds	r3, r0, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
    return(mm);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
}
 8005ef4:	1c18      	adds	r0, r3, #0
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b004      	add	sp, #16
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	42c80000 	.word	0x42c80000
 8005f00:	42700000 	.word	0x42700000

08005f04 <nmea0183_checksum>:
	snprintf(printBuf, 6, "%d", x);
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);

}
int nmea0183_checksum(char *s){//one extra blank char was found so last 4 char had to remove
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
    int c = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
    while (*s)
 8005f10:	e007      	b.n	8005f22 <nmea0183_checksum+0x1e>
        c ^= *s++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	001a      	movs	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4053      	eors	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
    while (*s)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f3      	bne.n	8005f12 <nmea0183_checksum+0xe>

    return c;
 8005f2a:	68fb      	ldr	r3, [r7, #12]

}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b004      	add	sp, #16
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <getGNRMC>:
        }
    }
}
*/

void getGNRMC(const char * ptra){
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);
	int i=0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
    char *token = strtok((char *)ptra, ",");
 8005f40:	4a5a      	ldr	r2, [pc, #360]	; (80060ac <getGNRMC+0x178>)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0011      	movs	r1, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f00c fecc 	bl	8012ce4 <strtok>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	613b      	str	r3, [r7, #16]
    while( token != NULL ) {
 8005f50:	e0a2      	b.n	8006098 <getGNRMC+0x164>
  	    if(i==1){ //Getting time
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <getGNRMC+0x30>
  	    	strncpy(GPSInfo.time,token,6);
 8005f58:	6939      	ldr	r1, [r7, #16]
 8005f5a:	4b55      	ldr	r3, [pc, #340]	; (80060b0 <getGNRMC+0x17c>)
 8005f5c:	2206      	movs	r2, #6
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f00c feac 	bl	8012cbc <strncpy>
  	    }
  	    if(i==10){ //Getting GPS status
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b0a      	cmp	r3, #10
 8005f68:	d10d      	bne.n	8005f86 <getGNRMC+0x52>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	214e      	movs	r1, #78	; 0x4e
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f00c fe85 	bl	8012c7e <strchr>
 8005f74:	1e03      	subs	r3, r0, #0
 8005f76:	d003      	beq.n	8005f80 <getGNRMC+0x4c>
 8005f78:	4b4e      	ldr	r3, [pc, #312]	; (80060b4 <getGNRMC+0x180>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	61da      	str	r2, [r3, #28]
 8005f7e:	e002      	b.n	8005f86 <getGNRMC+0x52>
  	        else{GPSInfo.fix=1;}
 8005f80:	4b4c      	ldr	r3, [pc, #304]	; (80060b4 <getGNRMC+0x180>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	61da      	str	r2, [r3, #28]
  	    }
  	    if(i==10){ //Getting GPS status
  	        //if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
  	    }
  	    if(i==3){ //Getting Latitude
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d10a      	bne.n	8005fa2 <getGNRMC+0x6e>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	0018      	movs	r0, r3
 8005f90:	f000 fe6c 	bl	8006c6c <stor>
 8005f94:	1c03      	adds	r3, r0, #0
 8005f96:	1c18      	adds	r0, r3, #0
 8005f98:	f7ff ff80 	bl	8005e9c <DegreeDecimalConvert>
 8005f9c:	1c02      	adds	r2, r0, #0
 8005f9e:	4b45      	ldr	r3, [pc, #276]	; (80060b4 <getGNRMC+0x180>)
 8005fa0:	601a      	str	r2, [r3, #0]
  	    }
  	    if(i==4){ //Getting Latitude ind
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d105      	bne.n	8005fb4 <getGNRMC+0x80>
  	        strcpy(GPSInfo.latD,token);
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4b43      	ldr	r3, [pc, #268]	; (80060b8 <getGNRMC+0x184>)
 8005fac:	0011      	movs	r1, r2
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f00d f805 	bl	8012fbe <strcpy>
  	    }
  	    if(i==5){ //Getting Longitude
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d10a      	bne.n	8005fd0 <getGNRMC+0x9c>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 fe55 	bl	8006c6c <stor>
 8005fc2:	1c03      	adds	r3, r0, #0
 8005fc4:	1c18      	adds	r0, r3, #0
 8005fc6:	f7ff ff69 	bl	8005e9c <DegreeDecimalConvert>
 8005fca:	1c02      	adds	r2, r0, #0
 8005fcc:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <getGNRMC+0x180>)
 8005fce:	605a      	str	r2, [r3, #4]
  	    }
  	    if(i==6){ //Getting Longitude ind
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b06      	cmp	r3, #6
 8005fd4:	d105      	bne.n	8005fe2 <getGNRMC+0xae>
  	    	strcpy(GPSInfo.lonD,token);
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4b38      	ldr	r3, [pc, #224]	; (80060bc <getGNRMC+0x188>)
 8005fda:	0011      	movs	r1, r2
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f00c ffee 	bl	8012fbe <strcpy>
  	    }
  	    if(i==9){ //Getting Date
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b09      	cmp	r3, #9
 8005fe6:	d139      	bne.n	800605c <getGNRMC+0x128>
  			memset(dd,0,10);
 8005fe8:	4b35      	ldr	r3, [pc, #212]	; (80060c0 <getGNRMC+0x18c>)
 8005fea:	220a      	movs	r2, #10
 8005fec:	2100      	movs	r1, #0
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f00c fe30 	bl	8012c54 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e00b      	b.n	8006012 <getGNRMC+0xde>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	18d3      	adds	r3, r2, r3
 8006000:	7819      	ldrb	r1, [r3, #0]
 8006002:	4a2f      	ldr	r2, [pc, #188]	; (80060c0 <getGNRMC+0x18c>)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	18d3      	adds	r3, r2, r3
 8006008:	1c0a      	adds	r2, r1, #0
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b03      	cmp	r3, #3
 8006016:	ddf0      	ble.n	8005ffa <getGNRMC+0xc6>
  	        dd[4]='2';
 8006018:	4b29      	ldr	r3, [pc, #164]	; (80060c0 <getGNRMC+0x18c>)
 800601a:	2232      	movs	r2, #50	; 0x32
 800601c:	711a      	strb	r2, [r3, #4]
  	        dd[5]='0';
 800601e:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <getGNRMC+0x18c>)
 8006020:	2230      	movs	r2, #48	; 0x30
 8006022:	715a      	strb	r2, [r3, #5]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8006024:	2306      	movs	r3, #6
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	e00c      	b.n	8006044 <getGNRMC+0x110>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3b02      	subs	r3, #2
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	18d3      	adds	r3, r2, r3
 8006032:	7819      	ldrb	r1, [r3, #0]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <getGNRMC+0x18c>)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	1c0a      	adds	r2, r1, #0
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3301      	adds	r3, #1
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b07      	cmp	r3, #7
 8006048:	ddef      	ble.n	800602a <getGNRMC+0xf6>
  	        dd[8]='\0';
 800604a:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <getGNRMC+0x18c>)
 800604c:	2200      	movs	r2, #0
 800604e:	721a      	strb	r2, [r3, #8]
  	        strcpy(GPSInfo.date,dd);
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <getGNRMC+0x18c>)
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <getGNRMC+0x190>)
 8006054:	0011      	movs	r1, r2
 8006056:	0018      	movs	r0, r3
 8006058:	f00c ffb1 	bl	8012fbe <strcpy>
  	    }
  	    if(i==7){ //Getting Speed
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b07      	cmp	r3, #7
 8006060:	d106      	bne.n	8006070 <getGNRMC+0x13c>
  	        GPSInfo.speed=stor(token);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	0018      	movs	r0, r3
 8006066:	f000 fe01 	bl	8006c6c <stor>
 800606a:	1c02      	adds	r2, r0, #0
 800606c:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <getGNRMC+0x180>)
 800606e:	619a      	str	r2, [r3, #24]
  	    }
  	    if(i==8){ //Getting Course
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d106      	bne.n	8006084 <getGNRMC+0x150>
  	        GPSInfo.head=stor(token);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	0018      	movs	r0, r3
 800607a:	f000 fdf7 	bl	8006c6c <stor>
 800607e:	1c02      	adds	r2, r0, #0
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <getGNRMC+0x180>)
 8006082:	615a      	str	r2, [r3, #20]
  	    }
  	    token = strtok(NULL,",");
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <getGNRMC+0x178>)
 8006086:	0019      	movs	r1, r3
 8006088:	2000      	movs	r0, #0
 800608a:	f00c fe2b 	bl	8012ce4 <strtok>
 800608e:	0003      	movs	r3, r0
 8006090:	613b      	str	r3, [r7, #16]
        i++;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	3301      	adds	r3, #1
 8006096:	617b      	str	r3, [r7, #20]
    while( token != NULL ) {
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d000      	beq.n	80060a0 <getGNRMC+0x16c>
 800609e:	e758      	b.n	8005f52 <getGNRMC+0x1e>
    }
	//free(token);
}
 80060a0:	46c0      	nop			; (mov r8, r8)
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b006      	add	sp, #24
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	08016878 	.word	0x08016878
 80060b0:	2000379e 	.word	0x2000379e
 80060b4:	20003770 	.word	0x20003770
 80060b8:	20003798 	.word	0x20003798
 80060bc:	2000379b 	.word	0x2000379b
 80060c0:	20003bec 	.word	0x20003bec
 80060c4:	200037ad 	.word	0x200037ad

080060c8 <getGNGSA>:
void getGNGSA(const  char * ptra){
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);
	int i=0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
    char *token = strtok((char *)ptra, ",");
 80060d4:	4a17      	ldr	r2, [pc, #92]	; (8006134 <getGNGSA+0x6c>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	0011      	movs	r1, r2
 80060da:	0018      	movs	r0, r3
 80060dc:	f00c fe02 	bl	8012ce4 <strtok>
 80060e0:	0003      	movs	r3, r0
 80060e2:	60bb      	str	r3, [r7, #8]
    while( token != NULL ) {
 80060e4:	e01d      	b.n	8006122 <getGNGSA+0x5a>

        if(i==15){ //Getting PDOP
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b0f      	cmp	r3, #15
 80060ea:	d106      	bne.n	80060fa <getGNGSA+0x32>
    	    GPSInfo.pdop=stor(token);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	0018      	movs	r0, r3
 80060f0:	f000 fdbc 	bl	8006c6c <stor>
 80060f4:	1c02      	adds	r2, r0, #0
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <getGNGSA+0x70>)
 80060f8:	611a      	str	r2, [r3, #16]
    	}
    	if(i==16){ //Getting HDOP
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d106      	bne.n	800610e <getGNGSA+0x46>
    	    GPSInfo.hdop=stor(token);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 fdb2 	bl	8006c6c <stor>
 8006108:	1c02      	adds	r2, r0, #0
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <getGNGSA+0x70>)
 800610c:	60da      	str	r2, [r3, #12]
        }
  	    token = strtok(NULL,",");
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <getGNGSA+0x6c>)
 8006110:	0019      	movs	r1, r3
 8006112:	2000      	movs	r0, #0
 8006114:	f00c fde6 	bl	8012ce4 <strtok>
 8006118:	0003      	movs	r3, r0
 800611a:	60bb      	str	r3, [r7, #8]
        i++;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3301      	adds	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
    while( token != NULL ) {
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1de      	bne.n	80060e6 <getGNGSA+0x1e>
    }
	//free(token);
}
 8006128:	46c0      	nop			; (mov r8, r8)
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	b004      	add	sp, #16
 8006130:	bd80      	pop	{r7, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	08016878 	.word	0x08016878
 8006138:	20003770 	.word	0x20003770

0800613c <getGNGGA>:



void getGNGGA(const  char * ptra){
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);

	int i=0;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
    char *token = strtok((char *)ptra, ",");
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <getGNGGA+0x6c>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0011      	movs	r1, r2
 800614e:	0018      	movs	r0, r3
 8006150:	f00c fdc8 	bl	8012ce4 <strtok>
 8006154:	0003      	movs	r3, r0
 8006156:	60bb      	str	r3, [r7, #8]
    while( token != NULL ) {
 8006158:	e01d      	b.n	8006196 <getGNGGA+0x5a>
    	if(i==7){ //Getting Satellites no
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b07      	cmp	r3, #7
 800615e:	d106      	bne.n	800616e <getGNGGA+0x32>
            GPSInfo.sat = atoi(token);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	0018      	movs	r0, r3
 8006164:	f00a fe2e 	bl	8010dc4 <atoi>
 8006168:	0002      	movs	r2, r0
 800616a:	4b10      	ldr	r3, [pc, #64]	; (80061ac <getGNGGA+0x70>)
 800616c:	621a      	str	r2, [r3, #32]
        }

    	if(i==9){ //Getting Saltitute
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b09      	cmp	r3, #9
 8006172:	d106      	bne.n	8006182 <getGNGGA+0x46>
            GPSInfo.alt = stor(token);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	0018      	movs	r0, r3
 8006178:	f000 fd78 	bl	8006c6c <stor>
 800617c:	1c02      	adds	r2, r0, #0
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <getGNGGA+0x70>)
 8006180:	609a      	str	r2, [r3, #8]

  	    if(i==6){ //Getting GPS status
  	        //if(strstr(token,"0") != NULL){GPSInfo.fix=0;}
  	        //else{GPSInfo.fix=1;}
  	    }
  	    token = strtok(NULL,",");
 8006182:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <getGNGGA+0x6c>)
 8006184:	0019      	movs	r1, r3
 8006186:	2000      	movs	r0, #0
 8006188:	f00c fdac 	bl	8012ce4 <strtok>
 800618c:	0003      	movs	r3, r0
 800618e:	60bb      	str	r3, [r7, #8]
        i++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
    while( token != NULL ) {
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1de      	bne.n	800615a <getGNGGA+0x1e>
    }
	//free(token);
}
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b004      	add	sp, #16
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	08016878 	.word	0x08016878
 80061ac:	20003770 	.word	0x20003770

080061b0 <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	212a      	movs	r1, #42	; 0x2a
 80061bc:	0018      	movs	r0, r3
 80061be:	f00c fd5e 	bl	8012c7e <strchr>
 80061c2:	0003      	movs	r3, r0
 80061c4:	3301      	adds	r3, #1
 80061c6:	2210      	movs	r2, #16
 80061c8:	2100      	movs	r1, #0
 80061ca:	0018      	movs	r0, r3
 80061cc:	f00b fd80 	bl	8011cd0 <strtol>
 80061d0:	0002      	movs	r2, r0
 80061d2:	230e      	movs	r3, #14
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	701a      	strb	r2, [r3, #0]

    char p;
    uint8_t sum = 0;
 80061d8:	230f      	movs	r3, #15
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	2200      	movs	r2, #0
 80061de:	701a      	strb	r2, [r3, #0]
    ++message;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3301      	adds	r3, #1
 80061e4:	607b      	str	r3, [r7, #4]
    while ((p = *message++) != '*') {
 80061e6:	e008      	b.n	80061fa <nmea_valid_checksum+0x4a>
        sum ^= p;
 80061e8:	220f      	movs	r2, #15
 80061ea:	18bb      	adds	r3, r7, r2
 80061ec:	18b9      	adds	r1, r7, r2
 80061ee:	220d      	movs	r2, #13
 80061f0:	18ba      	adds	r2, r7, r2
 80061f2:	7809      	ldrb	r1, [r1, #0]
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	404a      	eors	r2, r1
 80061f8:	701a      	strb	r2, [r3, #0]
    while ((p = *message++) != '*') {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	210d      	movs	r1, #13
 8006202:	187a      	adds	r2, r7, r1
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	7013      	strb	r3, [r2, #0]
 8006208:	187b      	adds	r3, r7, r1
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b2a      	cmp	r3, #42	; 0x2a
 800620e:	d1eb      	bne.n	80061e8 <nmea_valid_checksum+0x38>
    }

    if (sum != checksum) {
 8006210:	230f      	movs	r3, #15
 8006212:	18fa      	adds	r2, r7, r3
 8006214:	230e      	movs	r3, #14
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <nmea_valid_checksum+0x74>
        return 0;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <nmea_valid_checksum+0x76>
    }

    return 1;
 8006224:	2301      	movs	r3, #1
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <validateGPS>:
int validateGPS(const char * str){
 8006230:	b5b0      	push	{r4, r5, r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	int GPStyp=0;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]

	uint8_t checksum = 0;
 800623c:	250b      	movs	r5, #11
 800623e:	197b      	adds	r3, r7, r5
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8006244:	197c      	adds	r4, r7, r5
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff ffb1 	bl	80061b0 <nmea_valid_checksum>
 800624e:	0003      	movs	r3, r0
 8006250:	7023      	strb	r3, [r4, #0]
 8006252:	197b      	adds	r3, r7, r5
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d001      	beq.n	800625e <validateGPS+0x2e>
	        return 0;
 800625a:	2300      	movs	r3, #0
 800625c:	e056      	b.n	800630c <validateGPS+0xdc>
	    }
	    if(strlen(str)<4){return 0;}
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0018      	movs	r0, r3
 8006262:	f7f9 ff51 	bl	8000108 <strlen>
 8006266:	0003      	movs	r3, r0
 8006268:	2b03      	cmp	r3, #3
 800626a:	d801      	bhi.n	8006270 <validateGPS+0x40>
 800626c:	2300      	movs	r3, #0
 800626e:	e04d      	b.n	800630c <validateGPS+0xdc>

	    if (strstr(str, "GNRMC") != NULL) {
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <validateGPS+0xe4>)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0011      	movs	r1, r2
 8006276:	0018      	movs	r0, r3
 8006278:	f00c fd9c 	bl	8012db4 <strstr>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d006      	beq.n	800628e <validateGPS+0x5e>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8006280:	2301      	movs	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	0018      	movs	r0, r3
 8006288:	f7ff fe54 	bl	8005f34 <getGNRMC>
 800628c:	e03d      	b.n	800630a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGGA") != NULL) {
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <validateGPS+0xe8>)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	0011      	movs	r1, r2
 8006294:	0018      	movs	r0, r3
 8006296:	f00c fd8d 	bl	8012db4 <strstr>
 800629a:	1e03      	subs	r3, r0, #0
 800629c:	d006      	beq.n	80062ac <validateGPS+0x7c>
	    	//Debug_Tx(str);
	    	GPStyp=2; getGNGGA(str);
 800629e:	2302      	movs	r3, #2
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7ff ff49 	bl	800613c <getGNGGA>
 80062aa:	e02e      	b.n	800630a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGSA") != NULL) {
 80062ac:	4a1b      	ldr	r2, [pc, #108]	; (800631c <validateGPS+0xec>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	0011      	movs	r1, r2
 80062b2:	0018      	movs	r0, r3
 80062b4:	f00c fd7e 	bl	8012db4 <strstr>
 80062b8:	1e03      	subs	r3, r0, #0
 80062ba:	d006      	beq.n	80062ca <validateGPS+0x9a>
	    	//Debug_Tx(str);
	    	GPStyp=3;getGNGSA(str);
 80062bc:	2303      	movs	r3, #3
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7ff ff00 	bl	80060c8 <getGNGSA>
 80062c8:	e01f      	b.n	800630a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGSV") != NULL) {
 80062ca:	4a15      	ldr	r2, [pc, #84]	; (8006320 <validateGPS+0xf0>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0011      	movs	r1, r2
 80062d0:	0018      	movs	r0, r3
 80062d2:	f00c fd6f 	bl	8012db4 <strstr>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d002      	beq.n	80062e0 <validateGPS+0xb0>
	    	GPStyp=4;
 80062da:	2304      	movs	r3, #4
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	e014      	b.n	800630a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGLL") != NULL) {
 80062e0:	4a10      	ldr	r2, [pc, #64]	; (8006324 <validateGPS+0xf4>)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0011      	movs	r1, r2
 80062e6:	0018      	movs	r0, r3
 80062e8:	f00c fd64 	bl	8012db4 <strstr>
 80062ec:	1e03      	subs	r3, r0, #0
 80062ee:	d002      	beq.n	80062f6 <validateGPS+0xc6>
	    	GPStyp=5;
 80062f0:	2305      	movs	r3, #5
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e009      	b.n	800630a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
 80062f6:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <validateGPS+0xf8>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0011      	movs	r1, r2
 80062fc:	0018      	movs	r0, r3
 80062fe:	f00c fd59 	bl	8012db4 <strstr>
 8006302:	1e03      	subs	r3, r0, #0
 8006304:	d001      	beq.n	800630a <validateGPS+0xda>
	    	GPStyp=6;
 8006306:	2306      	movs	r3, #6
 8006308:	60fb      	str	r3, [r7, #12]
	    }
    return(GPStyp);
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	0018      	movs	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	b004      	add	sp, #16
 8006312:	bdb0      	pop	{r4, r5, r7, pc}
 8006314:	08017744 	.word	0x08017744
 8006318:	0801774c 	.word	0x0801774c
 800631c:	08017754 	.word	0x08017754
 8006320:	0801775c 	.word	0x0801775c
 8006324:	08017764 	.word	0x08017764
 8006328:	0801776c 	.word	0x0801776c

0800632c <getSpeed>:

float getSpeed(){
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
	return GPSInfo.speed;
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <getSpeed+0x10>)
 8006332:	699b      	ldr	r3, [r3, #24]
}
 8006334:	1c18      	adds	r0, r3, #0
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	20003770 	.word	0x20003770

08006340 <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
	    //Debug_Tx(gpsData);
		int valid=0 ;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
		if(strlen((char*)gpsData)>5){
 800634a:	4b14      	ldr	r3, [pc, #80]	; (800639c <ProcessGPS+0x5c>)
 800634c:	0018      	movs	r0, r3
 800634e:	f7f9 fedb 	bl	8000108 <strlen>
 8006352:	0003      	movs	r3, r0
 8006354:	2b05      	cmp	r3, #5
 8006356:	d91d      	bls.n	8006394 <ProcessGPS+0x54>

			char *tk= NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	607b      	str	r3, [r7, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 800635c:	1d3a      	adds	r2, r7, #4
 800635e:	4910      	ldr	r1, [pc, #64]	; (80063a0 <ProcessGPS+0x60>)
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <ProcessGPS+0x5c>)
 8006362:	0018      	movs	r0, r3
 8006364:	f00c fd21 	bl	8012daa <strtok_r>
 8006368:	0003      	movs	r3, r0
 800636a:	60bb      	str	r3, [r7, #8]
			while( token != NULL ) {
 800636c:	e00f      	b.n	800638e <ProcessGPS+0x4e>
				valid=valid+validateGPS(token);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	0018      	movs	r0, r3
 8006372:	f7ff ff5d 	bl	8006230 <validateGPS>
 8006376:	0002      	movs	r2, r0
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	189b      	adds	r3, r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 800637e:	1d3a      	adds	r2, r7, #4
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <ProcessGPS+0x60>)
 8006382:	0019      	movs	r1, r3
 8006384:	2000      	movs	r0, #0
 8006386:	f00c fd10 	bl	8012daa <strtok_r>
 800638a:	0003      	movs	r3, r0
 800638c:	60bb      	str	r3, [r7, #8]
			while( token != NULL ) {
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1ec      	bne.n	800636e <ProcessGPS+0x2e>
			}
			//free(token);
		}
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	46bd      	mov	sp, r7
 8006398:	b004      	add	sp, #16
 800639a:	bd80      	pop	{r7, pc}
 800639c:	200037bc 	.word	0x200037bc
 80063a0:	080167c4 	.word	0x080167c4

080063a4 <tic>:

int ticT;
int tocT;
char tocTxt[30];
char time1[10];
int tic(){
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80063a8:	f002 fb1c 	bl	80089e4 <HAL_GetTick>
 80063ac:	0003      	movs	r3, r0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <toc>:
void toc(int tc, char Message[]){
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	strcat(tocTxt,time1);
	Debug_Tx(tocTxt);
	*/


}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b002      	add	sp, #8
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af04      	add	r7, sp, #16
	int i=0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
	Debug_Tx("------------------Testing Memory:");
 80063d2:	4b18      	ldr	r3, [pc, #96]	; (8006434 <TestMEM+0x6c>)
 80063d4:	0018      	movs	r0, r3
 80063d6:	f001 fd5b 	bl	8007e90 <Debug_Tx>
	for(i=0;i<1;i++){
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
 80063de:	e020      	b.n	8006422 <TestMEM+0x5a>
		SPI_flash_get_device_ID( );
 80063e0:	f7fe fc72 	bl	8004cc8 <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9191\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 80063e4:	4c14      	ldr	r4, [pc, #80]	; (8006438 <TestMEM+0x70>)
 80063e6:	4a15      	ldr	r2, [pc, #84]	; (800643c <TestMEM+0x74>)
 80063e8:	4915      	ldr	r1, [pc, #84]	; (8006440 <TestMEM+0x78>)
 80063ea:	4816      	ldr	r0, [pc, #88]	; (8006444 <TestMEM+0x7c>)
 80063ec:	4b16      	ldr	r3, [pc, #88]	; (8006448 <TestMEM+0x80>)
 80063ee:	9302      	str	r3, [sp, #8]
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <TestMEM+0x70>)
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <TestMEM+0x70>)
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	0023      	movs	r3, r4
 80063fa:	f7fe ff87 	bl	800530c <writeConfig>
		 	  				  "216.10.243.86","216.10.243.86","216.10.243.86",
			  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");


		Debug_Tx("Reading RegNo--");
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <TestMEM+0x84>)
 8006400:	0018      	movs	r0, r3
 8006402:	f001 fd45 	bl	8007e90 <Debug_Tx>
		Debug_Tx(readRegNo());
 8006406:	f7ff f995 	bl	8005734 <readRegNo>
 800640a:	0003      	movs	r3, r0
 800640c:	0018      	movs	r0, r3
 800640e:	f001 fd3f 	bl	8007e90 <Debug_Tx>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 8006412:	23fa      	movs	r3, #250	; 0xfa
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	0018      	movs	r0, r3
 8006418:	f002 faee 	bl	80089f8 <HAL_Delay>
	for(i=0;i<1;i++){
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3301      	adds	r3, #1
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	dddb      	ble.n	80063e0 <TestMEM+0x18>

	}


}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	46bd      	mov	sp, r7
 800642e:	b003      	add	sp, #12
 8006430:	bd90      	pop	{r4, r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	08017a10 	.word	0x08017a10
 8006438:	08017a34 	.word	0x08017a34
 800643c:	08017a44 	.word	0x08017a44
 8006440:	08017a6c 	.word	0x08017a6c
 8006444:	08017a90 	.word	0x08017a90
 8006448:	08017aa0 	.word	0x08017aa0
 800644c:	08017adc 	.word	0x08017adc

08006450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006454:	f002 fa94 	bl	8008980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006458:	f000 f852 	bl	8006500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800645c:	f000 fae4 	bl	8006a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8006460:	f000 fab4 	bl	80069cc <MX_DMA_Init>
  MX_ADC1_Init();
 8006464:	f000 f896 	bl	8006594 <MX_ADC1_Init>
  MX_I2C1_Init();
 8006468:	f000 f926 	bl	80066b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800646c:	f000 f964 	bl	8006738 <MX_SPI1_Init>
  MX_TIM6_Init();
 8006470:	f000 f9a0 	bl	80067b4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8006474:	f000 f9da 	bl	800682c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006478:	f000 fa26 	bl	80068c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800647c:	f000 fa72 	bl	8006964 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006480:	f008 f98c 	bl	800e79c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testQ */
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8006484:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <main+0x84>)
 8006486:	001a      	movs	r2, r3
 8006488:	2102      	movs	r1, #2
 800648a:	2010      	movs	r0, #16
 800648c:	f008 fa80 	bl	800e990 <osMessageQueueNew>
 8006490:	0002      	movs	r2, r0
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <main+0x88>)
 8006494:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006496:	4a11      	ldr	r2, [pc, #68]	; (80064dc <main+0x8c>)
 8006498:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <main+0x90>)
 800649a:	2100      	movs	r1, #0
 800649c:	0018      	movs	r0, r3
 800649e:	f008 f9c5 	bl	800e82c <osThreadNew>
 80064a2:	0002      	movs	r2, r0
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <main+0x94>)
 80064a6:	601a      	str	r2, [r3, #0]

  /* creation of GPS_read */
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 80064a8:	4a0f      	ldr	r2, [pc, #60]	; (80064e8 <main+0x98>)
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <main+0x9c>)
 80064ac:	2100      	movs	r1, #0
 80064ae:	0018      	movs	r0, r3
 80064b0:	f008 f9bc 	bl	800e82c <osThreadNew>
 80064b4:	0002      	movs	r2, r0
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <main+0xa0>)
 80064b8:	601a      	str	r2, [r3, #0]

  /* creation of StatusLED */
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 80064ba:	4a0e      	ldr	r2, [pc, #56]	; (80064f4 <main+0xa4>)
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <main+0xa8>)
 80064be:	2100      	movs	r1, #0
 80064c0:	0018      	movs	r0, r3
 80064c2:	f008 f9b3 	bl	800e82c <osThreadNew>
 80064c6:	0002      	movs	r2, r0
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <main+0xac>)
 80064ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80064cc:	f008 f988 	bl	800e7e0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80064d0:	e7fe      	b.n	80064d0 <main+0x80>
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	08017f80 	.word	0x08017f80
 80064d8:	20003cfc 	.word	0x20003cfc
 80064dc:	08017f14 	.word	0x08017f14
 80064e0:	08006f91 	.word	0x08006f91
 80064e4:	20003cf0 	.word	0x20003cf0
 80064e8:	08017f38 	.word	0x08017f38
 80064ec:	08007049 	.word	0x08007049
 80064f0:	20003cf4 	.word	0x20003cf4
 80064f4:	08017f5c 	.word	0x08017f5c
 80064f8:	08007059 	.word	0x08007059
 80064fc:	20003cf8 	.word	0x20003cf8

08006500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b093      	sub	sp, #76	; 0x4c
 8006504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006506:	2414      	movs	r4, #20
 8006508:	193b      	adds	r3, r7, r4
 800650a:	0018      	movs	r0, r3
 800650c:	2334      	movs	r3, #52	; 0x34
 800650e:	001a      	movs	r2, r3
 8006510:	2100      	movs	r1, #0
 8006512:	f00c fb9f 	bl	8012c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	0018      	movs	r0, r3
 800651a:	2310      	movs	r3, #16
 800651c:	001a      	movs	r2, r3
 800651e:	2100      	movs	r1, #0
 8006520:	f00c fb98 	bl	8012c54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	0018      	movs	r0, r3
 800652a:	f004 fd69 	bl	800b000 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800652e:	193b      	adds	r3, r7, r4
 8006530:	2202      	movs	r2, #2
 8006532:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006534:	193b      	adds	r3, r7, r4
 8006536:	2280      	movs	r2, #128	; 0x80
 8006538:	0052      	lsls	r2, r2, #1
 800653a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800653c:	193b      	adds	r3, r7, r4
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006542:	193b      	adds	r3, r7, r4
 8006544:	2240      	movs	r2, #64	; 0x40
 8006546:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006548:	193b      	adds	r3, r7, r4
 800654a:	2200      	movs	r2, #0
 800654c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800654e:	193b      	adds	r3, r7, r4
 8006550:	0018      	movs	r0, r3
 8006552:	f004 fda1 	bl	800b098 <HAL_RCC_OscConfig>
 8006556:	1e03      	subs	r3, r0, #0
 8006558:	d001      	beq.n	800655e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800655a:	f001 fd0d 	bl	8007f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	2207      	movs	r2, #7
 8006562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006564:	1d3b      	adds	r3, r7, #4
 8006566:	2200      	movs	r2, #0
 8006568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	2200      	movs	r2, #0
 800656e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	22a0      	movs	r2, #160	; 0xa0
 8006574:	01d2      	lsls	r2, r2, #7
 8006576:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	2100      	movs	r1, #0
 800657c:	0018      	movs	r0, r3
 800657e:	f005 f89b 	bl	800b6b8 <HAL_RCC_ClockConfig>
 8006582:	1e03      	subs	r3, r0, #0
 8006584:	d001      	beq.n	800658a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8006586:	f001 fcf7 	bl	8007f78 <Error_Handler>
  }
}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	46bd      	mov	sp, r7
 800658e:	b013      	add	sp, #76	; 0x4c
 8006590:	bd90      	pop	{r4, r7, pc}
	...

08006594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	0018      	movs	r0, r3
 800659e:	230c      	movs	r3, #12
 80065a0:	001a      	movs	r2, r3
 80065a2:	2100      	movs	r1, #0
 80065a4:	f00c fb56 	bl	8012c54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80065a8:	4b3e      	ldr	r3, [pc, #248]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065aa:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <MX_ADC1_Init+0x114>)
 80065ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80065ae:	4b3d      	ldr	r3, [pc, #244]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065b0:	2280      	movs	r2, #128	; 0x80
 80065b2:	05d2      	lsls	r2, r2, #23
 80065b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80065b6:	4b3b      	ldr	r3, [pc, #236]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80065bc:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065be:	2200      	movs	r2, #0
 80065c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065c4:	2280      	movs	r2, #128	; 0x80
 80065c6:	0392      	lsls	r2, r2, #14
 80065c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80065ca:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065cc:	2204      	movs	r2, #4
 80065ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80065d0:	4b34      	ldr	r3, [pc, #208]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80065d6:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065d8:	2200      	movs	r2, #0
 80065da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80065dc:	4b31      	ldr	r3, [pc, #196]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065de:	2200      	movs	r2, #0
 80065e0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80065e2:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065e4:	2204      	movs	r2, #4
 80065e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80065e8:	4b2e      	ldr	r3, [pc, #184]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065ea:	2220      	movs	r2, #32
 80065ec:	2100      	movs	r1, #0
 80065ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80065f0:	4b2c      	ldr	r3, [pc, #176]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80065f6:	4b2b      	ldr	r3, [pc, #172]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80065fc:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <MX_ADC1_Init+0x110>)
 80065fe:	222c      	movs	r2, #44	; 0x2c
 8006600:	2100      	movs	r1, #0
 8006602:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006604:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <MX_ADC1_Init+0x110>)
 8006606:	2200      	movs	r2, #0
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800660a:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <MX_ADC1_Init+0x110>)
 800660c:	2200      	movs	r2, #0
 800660e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8006610:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <MX_ADC1_Init+0x110>)
 8006612:	2200      	movs	r2, #0
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8006616:	4b23      	ldr	r3, [pc, #140]	; (80066a4 <MX_ADC1_Init+0x110>)
 8006618:	223c      	movs	r2, #60	; 0x3c
 800661a:	2100      	movs	r1, #0
 800661c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800661e:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <MX_ADC1_Init+0x110>)
 8006620:	2200      	movs	r2, #0
 8006622:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006624:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <MX_ADC1_Init+0x110>)
 8006626:	0018      	movs	r0, r3
 8006628:	f002 fb68 	bl	8008cfc <HAL_ADC_Init>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d001      	beq.n	8006634 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8006630:	f001 fca2 	bl	8007f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <MX_ADC1_Init+0x118>)
 8006638:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	2204      	movs	r2, #4
 800663e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	2200      	movs	r2, #0
 8006644:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006646:	1d3a      	adds	r2, r7, #4
 8006648:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <MX_ADC1_Init+0x110>)
 800664a:	0011      	movs	r1, r2
 800664c:	0018      	movs	r0, r3
 800664e:	f002 fda3 	bl	8009198 <HAL_ADC_ConfigChannel>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d001      	beq.n	800665a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8006656:	f001 fc8f 	bl	8007f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800665a:	1d3b      	adds	r3, r7, #4
 800665c:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <MX_ADC1_Init+0x11c>)
 800665e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	2208      	movs	r2, #8
 8006664:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006666:	1d3a      	adds	r2, r7, #4
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <MX_ADC1_Init+0x110>)
 800666a:	0011      	movs	r1, r2
 800666c:	0018      	movs	r0, r3
 800666e:	f002 fd93 	bl	8009198 <HAL_ADC_ConfigChannel>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d001      	beq.n	800667a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8006676:	f001 fc7f 	bl	8007f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	4a0d      	ldr	r2, [pc, #52]	; (80066b4 <MX_ADC1_Init+0x120>)
 800667e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	220c      	movs	r2, #12
 8006684:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006686:	1d3a      	adds	r2, r7, #4
 8006688:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <MX_ADC1_Init+0x110>)
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f002 fd83 	bl	8009198 <HAL_ADC_ConfigChannel>
 8006692:	1e03      	subs	r3, r0, #0
 8006694:	d001      	beq.n	800669a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8006696:	f001 fc6f 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	46bd      	mov	sp, r7
 800669e:	b004      	add	sp, #16
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	20000560 	.word	0x20000560
 80066a8:	40012400 	.word	0x40012400
 80066ac:	04000002 	.word	0x04000002
 80066b0:	24000200 	.word	0x24000200
 80066b4:	2c000800 	.word	0x2c000800

080066b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80066bc:	4b1b      	ldr	r3, [pc, #108]	; (800672c <MX_I2C1_Init+0x74>)
 80066be:	4a1c      	ldr	r2, [pc, #112]	; (8006730 <MX_I2C1_Init+0x78>)
 80066c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80066c2:	4b1a      	ldr	r3, [pc, #104]	; (800672c <MX_I2C1_Init+0x74>)
 80066c4:	4a1b      	ldr	r2, [pc, #108]	; (8006734 <MX_I2C1_Init+0x7c>)
 80066c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80066c8:	4b18      	ldr	r3, [pc, #96]	; (800672c <MX_I2C1_Init+0x74>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <MX_I2C1_Init+0x74>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80066d4:	4b15      	ldr	r3, [pc, #84]	; (800672c <MX_I2C1_Init+0x74>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80066da:	4b14      	ldr	r3, [pc, #80]	; (800672c <MX_I2C1_Init+0x74>)
 80066dc:	2200      	movs	r2, #0
 80066de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <MX_I2C1_Init+0x74>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80066e6:	4b11      	ldr	r3, [pc, #68]	; (800672c <MX_I2C1_Init+0x74>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <MX_I2C1_Init+0x74>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <MX_I2C1_Init+0x74>)
 80066f4:	0018      	movs	r0, r3
 80066f6:	f003 fe17 	bl	800a328 <HAL_I2C_Init>
 80066fa:	1e03      	subs	r3, r0, #0
 80066fc:	d001      	beq.n	8006702 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80066fe:	f001 fc3b 	bl	8007f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <MX_I2C1_Init+0x74>)
 8006704:	2100      	movs	r1, #0
 8006706:	0018      	movs	r0, r3
 8006708:	f004 fbe2 	bl	800aed0 <HAL_I2CEx_ConfigAnalogFilter>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d001      	beq.n	8006714 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006710:	f001 fc32 	bl	8007f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006714:	4b05      	ldr	r3, [pc, #20]	; (800672c <MX_I2C1_Init+0x74>)
 8006716:	2100      	movs	r1, #0
 8006718:	0018      	movs	r0, r3
 800671a:	f004 fc25 	bl	800af68 <HAL_I2CEx_ConfigDigitalFilter>
 800671e:	1e03      	subs	r3, r0, #0
 8006720:	d001      	beq.n	8006726 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006722:	f001 fc29 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000620 	.word	0x20000620
 8006730:	40005400 	.word	0x40005400
 8006734:	00000e14 	.word	0x00000e14

08006738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <MX_SPI1_Init+0x74>)
 800673e:	4a1c      	ldr	r2, [pc, #112]	; (80067b0 <MX_SPI1_Init+0x78>)
 8006740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006742:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <MX_SPI1_Init+0x74>)
 8006744:	2282      	movs	r2, #130	; 0x82
 8006746:	0052      	lsls	r2, r2, #1
 8006748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <MX_SPI1_Init+0x74>)
 800674c:	2200      	movs	r2, #0
 800674e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006750:	4b16      	ldr	r3, [pc, #88]	; (80067ac <MX_SPI1_Init+0x74>)
 8006752:	22e0      	movs	r2, #224	; 0xe0
 8006754:	00d2      	lsls	r2, r2, #3
 8006756:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006758:	4b14      	ldr	r3, [pc, #80]	; (80067ac <MX_SPI1_Init+0x74>)
 800675a:	2200      	movs	r2, #0
 800675c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <MX_SPI1_Init+0x74>)
 8006760:	2200      	movs	r2, #0
 8006762:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006764:	4b11      	ldr	r3, [pc, #68]	; (80067ac <MX_SPI1_Init+0x74>)
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	0092      	lsls	r2, r2, #2
 800676a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <MX_SPI1_Init+0x74>)
 800676e:	2208      	movs	r2, #8
 8006770:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <MX_SPI1_Init+0x74>)
 8006774:	2200      	movs	r2, #0
 8006776:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <MX_SPI1_Init+0x74>)
 800677a:	2200      	movs	r2, #0
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <MX_SPI1_Init+0x74>)
 8006780:	2200      	movs	r2, #0
 8006782:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <MX_SPI1_Init+0x74>)
 8006786:	2207      	movs	r2, #7
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <MX_SPI1_Init+0x74>)
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006790:	4b06      	ldr	r3, [pc, #24]	; (80067ac <MX_SPI1_Init+0x74>)
 8006792:	2208      	movs	r2, #8
 8006794:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <MX_SPI1_Init+0x74>)
 8006798:	0018      	movs	r0, r3
 800679a:	f005 fa95 	bl	800bcc8 <HAL_SPI_Init>
 800679e:	1e03      	subs	r3, r0, #0
 80067a0:	d001      	beq.n	80067a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80067a2:	f001 fbe9 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000674 	.word	0x20000674
 80067b0:	40013000 	.word	0x40013000

080067b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067ba:	1d3b      	adds	r3, r7, #4
 80067bc:	0018      	movs	r0, r3
 80067be:	230c      	movs	r3, #12
 80067c0:	001a      	movs	r2, r3
 80067c2:	2100      	movs	r1, #0
 80067c4:	f00c fa46 	bl	8012c54 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <MX_TIM6_Init+0x6c>)
 80067ca:	4a16      	ldr	r2, [pc, #88]	; (8006824 <MX_TIM6_Init+0x70>)
 80067cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 80067ce:	4b14      	ldr	r3, [pc, #80]	; (8006820 <MX_TIM6_Init+0x6c>)
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <MX_TIM6_Init+0x74>)
 80067d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067d4:	4b12      	ldr	r3, [pc, #72]	; (8006820 <MX_TIM6_Init+0x6c>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 80067da:	4b11      	ldr	r3, [pc, #68]	; (8006820 <MX_TIM6_Init+0x6c>)
 80067dc:	22f4      	movs	r2, #244	; 0xf4
 80067de:	32ff      	adds	r2, #255	; 0xff
 80067e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067e2:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <MX_TIM6_Init+0x6c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <MX_TIM6_Init+0x6c>)
 80067ea:	0018      	movs	r0, r3
 80067ec:	f005 ffc4 	bl	800c778 <HAL_TIM_Base_Init>
 80067f0:	1e03      	subs	r3, r0, #0
 80067f2:	d001      	beq.n	80067f8 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80067f4:	f001 fbc0 	bl	8007f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	2200      	movs	r2, #0
 8006802:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006804:	1d3a      	adds	r2, r7, #4
 8006806:	4b06      	ldr	r3, [pc, #24]	; (8006820 <MX_TIM6_Init+0x6c>)
 8006808:	0011      	movs	r1, r2
 800680a:	0018      	movs	r0, r3
 800680c:	f006 fa2a 	bl	800cc64 <HAL_TIMEx_MasterConfigSynchronization>
 8006810:	1e03      	subs	r3, r0, #0
 8006812:	d001      	beq.n	8006818 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8006814:	f001 fbb0 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006818:	46c0      	nop			; (mov r8, r8)
 800681a:	46bd      	mov	sp, r7
 800681c:	b004      	add	sp, #16
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200006d8 	.word	0x200006d8
 8006824:	40001000 	.word	0x40001000
 8006828:	00001f3f 	.word	0x00001f3f

0800682c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006830:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006832:	4a24      	ldr	r2, [pc, #144]	; (80068c4 <MX_USART1_UART_Init+0x98>)
 8006834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006836:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006838:	2296      	movs	r2, #150	; 0x96
 800683a:	0192      	lsls	r2, r2, #6
 800683c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800683e:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006840:	2200      	movs	r2, #0
 8006842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006844:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006846:	2200      	movs	r2, #0
 8006848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800684a:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 800684c:	2200      	movs	r2, #0
 800684e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006852:	220c      	movs	r2, #12
 8006854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006856:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006858:	2200      	movs	r2, #0
 800685a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800685c:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 800685e:	2200      	movs	r2, #0
 8006860:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006862:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006864:	2200      	movs	r2, #0
 8006866:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006868:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 800686a:	2200      	movs	r2, #0
 800686c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006870:	2200      	movs	r2, #0
 8006872:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006874:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006876:	0018      	movs	r0, r3
 8006878:	f006 fa74 	bl	800cd64 <HAL_UART_Init>
 800687c:	1e03      	subs	r3, r0, #0
 800687e:	d001      	beq.n	8006884 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006880:	f001 fb7a 	bl	8007f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006884:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006886:	2100      	movs	r1, #0
 8006888:	0018      	movs	r0, r3
 800688a:	f007 fe1d 	bl	800e4c8 <HAL_UARTEx_SetTxFifoThreshold>
 800688e:	1e03      	subs	r3, r0, #0
 8006890:	d001      	beq.n	8006896 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006892:	f001 fb71 	bl	8007f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 8006898:	2100      	movs	r1, #0
 800689a:	0018      	movs	r0, r3
 800689c:	f007 fe54 	bl	800e548 <HAL_UARTEx_SetRxFifoThreshold>
 80068a0:	1e03      	subs	r3, r0, #0
 80068a2:	d001      	beq.n	80068a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80068a4:	f001 fb68 	bl	8007f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <MX_USART1_UART_Init+0x94>)
 80068aa:	0018      	movs	r0, r3
 80068ac:	f007 fdd2 	bl	800e454 <HAL_UARTEx_DisableFifoMode>
 80068b0:	1e03      	subs	r3, r0, #0
 80068b2:	d001      	beq.n	80068b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80068b4:	f001 fb60 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	20000724 	.word	0x20000724
 80068c4:	40013800 	.word	0x40013800

080068c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80068cc:	4b23      	ldr	r3, [pc, #140]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068ce:	4a24      	ldr	r2, [pc, #144]	; (8006960 <MX_USART2_UART_Init+0x98>)
 80068d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068d4:	2296      	movs	r2, #150	; 0x96
 80068d6:	0192      	lsls	r2, r2, #6
 80068d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068da:	4b20      	ldr	r3, [pc, #128]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068dc:	2200      	movs	r2, #0
 80068de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068e0:	4b1e      	ldr	r3, [pc, #120]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068ee:	220c      	movs	r2, #12
 80068f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068f2:	4b1a      	ldr	r3, [pc, #104]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068f8:	4b18      	ldr	r3, [pc, #96]	; (800695c <MX_USART2_UART_Init+0x94>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068fe:	4b17      	ldr	r3, [pc, #92]	; (800695c <MX_USART2_UART_Init+0x94>)
 8006900:	2200      	movs	r2, #0
 8006902:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <MX_USART2_UART_Init+0x94>)
 8006906:	2200      	movs	r2, #0
 8006908:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800690a:	4b14      	ldr	r3, [pc, #80]	; (800695c <MX_USART2_UART_Init+0x94>)
 800690c:	2200      	movs	r2, #0
 800690e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006910:	4b12      	ldr	r3, [pc, #72]	; (800695c <MX_USART2_UART_Init+0x94>)
 8006912:	0018      	movs	r0, r3
 8006914:	f006 fa26 	bl	800cd64 <HAL_UART_Init>
 8006918:	1e03      	subs	r3, r0, #0
 800691a:	d001      	beq.n	8006920 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800691c:	f001 fb2c 	bl	8007f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006920:	4b0e      	ldr	r3, [pc, #56]	; (800695c <MX_USART2_UART_Init+0x94>)
 8006922:	2100      	movs	r1, #0
 8006924:	0018      	movs	r0, r3
 8006926:	f007 fdcf 	bl	800e4c8 <HAL_UARTEx_SetTxFifoThreshold>
 800692a:	1e03      	subs	r3, r0, #0
 800692c:	d001      	beq.n	8006932 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800692e:	f001 fb23 	bl	8007f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006932:	4b0a      	ldr	r3, [pc, #40]	; (800695c <MX_USART2_UART_Init+0x94>)
 8006934:	2100      	movs	r1, #0
 8006936:	0018      	movs	r0, r3
 8006938:	f007 fe06 	bl	800e548 <HAL_UARTEx_SetRxFifoThreshold>
 800693c:	1e03      	subs	r3, r0, #0
 800693e:	d001      	beq.n	8006944 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006940:	f001 fb1a 	bl	8007f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006944:	4b05      	ldr	r3, [pc, #20]	; (800695c <MX_USART2_UART_Init+0x94>)
 8006946:	0018      	movs	r0, r3
 8006948:	f007 fd84 	bl	800e454 <HAL_UARTEx_DisableFifoMode>
 800694c:	1e03      	subs	r3, r0, #0
 800694e:	d001      	beq.n	8006954 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006950:	f001 fb12 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006954:	46c0      	nop			; (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	200007b8 	.word	0x200007b8
 8006960:	40004400 	.word	0x40004400

08006964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006968:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <MX_USART3_UART_Init+0x64>)
 800696c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 8006970:	2296      	movs	r2, #150	; 0x96
 8006972:	0192      	lsls	r2, r2, #6
 8006974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006976:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 8006978:	2200      	movs	r2, #0
 800697a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800697c:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 800697e:	2200      	movs	r2, #0
 8006980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 8006984:	2200      	movs	r2, #0
 8006986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 800698a:	220c      	movs	r2, #12
 800698c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 8006990:	2200      	movs	r2, #0
 8006992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 8006996:	2200      	movs	r2, #0
 8006998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 800699c:	2200      	movs	r2, #0
 800699e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80069a0:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <MX_USART3_UART_Init+0x60>)
 80069ae:	0018      	movs	r0, r3
 80069b0:	f006 f9d8 	bl	800cd64 <HAL_UART_Init>
 80069b4:	1e03      	subs	r3, r0, #0
 80069b6:	d001      	beq.n	80069bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80069b8:	f001 fade 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80069bc:	46c0      	nop			; (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	2000084c 	.word	0x2000084c
 80069c8:	40004800 	.word	0x40004800

080069cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80069d2:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <MX_DMA_Init+0x58>)
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <MX_DMA_Init+0x58>)
 80069d8:	2101      	movs	r1, #1
 80069da:	430a      	orrs	r2, r1
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <MX_DMA_Init+0x58>)
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	2201      	movs	r2, #1
 80069e4:	4013      	ands	r3, r2
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80069ea:	2200      	movs	r2, #0
 80069ec:	2103      	movs	r1, #3
 80069ee:	2009      	movs	r0, #9
 80069f0:	f002 ff46 	bl	8009880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80069f4:	2009      	movs	r0, #9
 80069f6:	f002 ff58 	bl	80098aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80069fa:	2200      	movs	r2, #0
 80069fc:	2103      	movs	r1, #3
 80069fe:	200a      	movs	r0, #10
 8006a00:	f002 ff3e 	bl	8009880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006a04:	200a      	movs	r0, #10
 8006a06:	f002 ff50 	bl	80098aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2103      	movs	r1, #3
 8006a0e:	200b      	movs	r0, #11
 8006a10:	f002 ff36 	bl	8009880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8006a14:	200b      	movs	r0, #11
 8006a16:	f002 ff48 	bl	80098aa <HAL_NVIC_EnableIRQ>

}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b002      	add	sp, #8
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	40021000 	.word	0x40021000

08006a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a28:	b590      	push	{r4, r7, lr}
 8006a2a:	b08b      	sub	sp, #44	; 0x2c
 8006a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a2e:	2414      	movs	r4, #20
 8006a30:	193b      	adds	r3, r7, r4
 8006a32:	0018      	movs	r0, r3
 8006a34:	2314      	movs	r3, #20
 8006a36:	001a      	movs	r2, r3
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f00c f90b 	bl	8012c54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a3e:	4b75      	ldr	r3, [pc, #468]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a42:	4b74      	ldr	r3, [pc, #464]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a44:	2104      	movs	r1, #4
 8006a46:	430a      	orrs	r2, r1
 8006a48:	635a      	str	r2, [r3, #52]	; 0x34
 8006a4a:	4b72      	ldr	r3, [pc, #456]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	2204      	movs	r2, #4
 8006a50:	4013      	ands	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a56:	4b6f      	ldr	r3, [pc, #444]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5a:	4b6e      	ldr	r3, [pc, #440]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a5c:	2120      	movs	r1, #32
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	635a      	str	r2, [r3, #52]	; 0x34
 8006a62:	4b6c      	ldr	r3, [pc, #432]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a66:	2220      	movs	r2, #32
 8006a68:	4013      	ands	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a6e:	4b69      	ldr	r3, [pc, #420]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a72:	4b68      	ldr	r3, [pc, #416]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a74:	2101      	movs	r1, #1
 8006a76:	430a      	orrs	r2, r1
 8006a78:	635a      	str	r2, [r3, #52]	; 0x34
 8006a7a:	4b66      	ldr	r3, [pc, #408]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4013      	ands	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a86:	4b63      	ldr	r3, [pc, #396]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8a:	4b62      	ldr	r3, [pc, #392]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	635a      	str	r2, [r3, #52]	; 0x34
 8006a92:	4b60      	ldr	r3, [pc, #384]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a96:	2202      	movs	r2, #2
 8006a98:	4013      	ands	r3, r2
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a9e:	4b5d      	ldr	r3, [pc, #372]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa2:	4b5c      	ldr	r3, [pc, #368]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006aa4:	2108      	movs	r1, #8
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8006aaa:	4b5a      	ldr	r3, [pc, #360]	; (8006c14 <MX_GPIO_Init+0x1ec>)
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	2208      	movs	r2, #8
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8006ab6:	4958      	ldr	r1, [pc, #352]	; (8006c18 <MX_GPIO_Init+0x1f0>)
 8006ab8:	23a0      	movs	r3, #160	; 0xa0
 8006aba:	05db      	lsls	r3, r3, #23
 8006abc:	2200      	movs	r2, #0
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f003 fbf9 	bl	800a2b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8006ac4:	4b55      	ldr	r3, [pc, #340]	; (8006c1c <MX_GPIO_Init+0x1f4>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	21c0      	movs	r1, #192	; 0xc0
 8006aca:	0018      	movs	r0, r3
 8006acc:	f003 fbf3 	bl	800a2b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8006ad0:	4b53      	ldr	r3, [pc, #332]	; (8006c20 <MX_GPIO_Init+0x1f8>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2107      	movs	r1, #7
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f003 fbed 	bl	800a2b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8006adc:	238e      	movs	r3, #142	; 0x8e
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4850      	ldr	r0, [pc, #320]	; (8006c24 <MX_GPIO_Init+0x1fc>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	f003 fbe6 	bl	800a2b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_MEM_Pin DO_GPS_VCC_EN_Pin */
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 8006aea:	193b      	adds	r3, r7, r4
 8006aec:	4a4a      	ldr	r2, [pc, #296]	; (8006c18 <MX_GPIO_Init+0x1f0>)
 8006aee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006af0:	193b      	adds	r3, r7, r4
 8006af2:	2201      	movs	r2, #1
 8006af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af6:	193b      	adds	r3, r7, r4
 8006af8:	2200      	movs	r2, #0
 8006afa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006afc:	193b      	adds	r3, r7, r4
 8006afe:	2200      	movs	r2, #0
 8006b00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b02:	193a      	adds	r2, r7, r4
 8006b04:	23a0      	movs	r3, #160	; 0xa0
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	0011      	movs	r1, r2
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f003 fa52 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_IN2_Pin DI_IN3_Pin DI_MAINS_STATE_Pin DI_ACC_STATE_Pin
                            DI_INT1_ACCEL_Pin */
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8006b10:	0021      	movs	r1, r4
 8006b12:	187b      	adds	r3, r7, r1
 8006b14:	22f2      	movs	r2, #242	; 0xf2
 8006b16:	01d2      	lsls	r2, r2, #7
 8006b18:	601a      	str	r2, [r3, #0]
                          | DI_INT1_ACCEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b1a:	000c      	movs	r4, r1
 8006b1c:	193b      	adds	r3, r7, r4
 8006b1e:	2200      	movs	r2, #0
 8006b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b22:	193b      	adds	r3, r7, r4
 8006b24:	2200      	movs	r2, #0
 8006b26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b28:	193b      	adds	r3, r7, r4
 8006b2a:	4a3e      	ldr	r2, [pc, #248]	; (8006c24 <MX_GPIO_Init+0x1fc>)
 8006b2c:	0019      	movs	r1, r3
 8006b2e:	0010      	movs	r0, r2
 8006b30:	f003 fa40 	bl	8009fb4 <HAL_GPIO_Init>


  /*Configure GPIO pins :  DI_BOX_STATE_Pin  */
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8006b34:	0021      	movs	r1, r4
 8006b36:	187b      	adds	r3, r7, r1
 8006b38:	2280      	movs	r2, #128	; 0x80
 8006b3a:	0212      	lsls	r2, r2, #8
 8006b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b3e:	000c      	movs	r4, r1
 8006b40:	193b      	adds	r3, r7, r4
 8006b42:	2200      	movs	r2, #0
 8006b44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8006b46:	193b      	adds	r3, r7, r4
 8006b48:	2201      	movs	r2, #1
 8006b4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b4c:	193b      	adds	r3, r7, r4
 8006b4e:	4a35      	ldr	r2, [pc, #212]	; (8006c24 <MX_GPIO_Init+0x1fc>)
 8006b50:	0019      	movs	r1, r3
 8006b52:	0010      	movs	r0, r2
 8006b54:	f003 fa2e 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_SOS_STATE_Pin  */
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8006b58:	193b      	adds	r3, r7, r4
 8006b5a:	2280      	movs	r2, #128	; 0x80
 8006b5c:	0052      	lsls	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b60:	193b      	adds	r3, r7, r4
 8006b62:	2200      	movs	r2, #0
 8006b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8006b66:	193b      	adds	r3, r7, r4
 8006b68:	2201      	movs	r2, #1
 8006b6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b6c:	193a      	adds	r2, r7, r4
 8006b6e:	23a0      	movs	r3, #160	; 0xa0
 8006b70:	05db      	lsls	r3, r3, #23
 8006b72:	0011      	movs	r1, r2
 8006b74:	0018      	movs	r0, r3
 8006b76:	f003 fa1d 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins :  DI_IN1_Pin */
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8006b7a:	193b      	adds	r3, r7, r4
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	0152      	lsls	r2, r2, #5
 8006b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b82:	193b      	adds	r3, r7, r4
 8006b84:	2200      	movs	r2, #0
 8006b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	193b      	adds	r3, r7, r4
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8e:	193a      	adds	r2, r7, r4
 8006b90:	23a0      	movs	r3, #160	; 0xa0
 8006b92:	05db      	lsls	r3, r3, #23
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f003 fa0c 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_GSM_VCC_EN_Pin DO_PWRKEY_Pin */
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8006b9c:	193b      	adds	r3, r7, r4
 8006b9e:	22c0      	movs	r2, #192	; 0xc0
 8006ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ba2:	193b      	adds	r3, r7, r4
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba8:	193b      	adds	r3, r7, r4
 8006baa:	2200      	movs	r2, #0
 8006bac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bae:	193b      	adds	r3, r7, r4
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bb4:	193b      	adds	r3, r7, r4
 8006bb6:	4a19      	ldr	r2, [pc, #100]	; (8006c1c <MX_GPIO_Init+0x1f4>)
 8006bb8:	0019      	movs	r1, r3
 8006bba:	0010      	movs	r0, r2
 8006bbc:	f003 f9fa 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_LED_PWR_Pin DO_LED_NET_Pin DO_LED_GPS_Pin */
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8006bc0:	193b      	adds	r3, r7, r4
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc6:	193b      	adds	r3, r7, r4
 8006bc8:	2201      	movs	r2, #1
 8006bca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bcc:	193b      	adds	r3, r7, r4
 8006bce:	2200      	movs	r2, #0
 8006bd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd2:	193b      	adds	r3, r7, r4
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bd8:	193b      	adds	r3, r7, r4
 8006bda:	4a11      	ldr	r2, [pc, #68]	; (8006c20 <MX_GPIO_Init+0x1f8>)
 8006bdc:	0019      	movs	r1, r3
 8006bde:	0010      	movs	r0, r2
 8006be0:	f003 f9e8 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_OUT1_Pin DO_OUT2_Pin DO_5V_OUT_EN_Pin DO_OUT3_P_LED_Pin */
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8006be4:	0021      	movs	r1, r4
 8006be6:	187b      	adds	r3, r7, r1
 8006be8:	228e      	movs	r2, #142	; 0x8e
 8006bea:	0092      	lsls	r2, r2, #2
 8006bec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bee:	187b      	adds	r3, r7, r1
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf4:	187b      	adds	r3, r7, r1
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bfa:	187b      	adds	r3, r7, r1
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c00:	187b      	adds	r3, r7, r1
 8006c02:	4a08      	ldr	r2, [pc, #32]	; (8006c24 <MX_GPIO_Init+0x1fc>)
 8006c04:	0019      	movs	r1, r3
 8006c06:	0010      	movs	r0, r2
 8006c08:	f003 f9d4 	bl	8009fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006c0c:	46c0      	nop			; (mov r8, r8)
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b00b      	add	sp, #44	; 0x2c
 8006c12:	bd90      	pop	{r4, r7, pc}
 8006c14:	40021000 	.word	0x40021000
 8006c18:	00008010 	.word	0x00008010
 8006c1c:	50000800 	.word	0x50000800
 8006c20:	50000c00 	.word	0x50000c00
 8006c24:	50000400 	.word	0x50000400

08006c28 <timedWork>:
/* USER CODE END 4 */




void timedWork(){
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <timedWork+0x38>)
 8006c2e:	2104      	movs	r1, #4
 8006c30:	0018      	movs	r0, r3
 8006c32:	f003 fb5d 	bl	800a2f0 <HAL_GPIO_TogglePin>

		//%%%%%%%    AccGyro Rest    %%%%%%
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8006c36:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <timedWork+0x3c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <timedWork+0x20>
 8006c3e:	f7ff f807 	bl	8005c50 <detectAcc>
 8006c42:	0002      	movs	r2, r0
 8006c44:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <timedWork+0x40>)
 8006c46:	601a      	str	r2, [r3, #0]
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <timedWork+0x40>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd03      	ble.n	8006c58 <timedWork+0x30>
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <timedWork+0x40>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <timedWork+0x3c>)
 8006c56:	601a      	str	r2, [r3, #0]

}
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	50000c00 	.word	0x50000c00
 8006c64:	20000538 	.word	0x20000538
 8006c68:	20000534 	.word	0x20000534

08006c6c <stor>:

float stor(const char* str) {
 8006c6c:	b5b0      	push	{r4, r5, r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
    float result = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
    float sign = *str == '-' ? str++, -1 : 1;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8006c7e:	d104      	bne.n	8006c8a <stor+0x1e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3301      	adds	r3, #1
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	4b5c      	ldr	r3, [pc, #368]	; (8006df8 <stor+0x18c>)
 8006c88:	e001      	b.n	8006c8e <stor+0x22>
 8006c8a:	23fe      	movs	r3, #254	; 0xfe
 8006c8c:	059b      	lsls	r3, r3, #22
 8006c8e:	613b      	str	r3, [r7, #16]
    while (*str >= '0' && *str <= '9') {
 8006c90:	e015      	b.n	8006cbe <stor+0x52>
        result *= 10;
 8006c92:	495a      	ldr	r1, [pc, #360]	; (8006dfc <stor+0x190>)
 8006c94:	69f8      	ldr	r0, [r7, #28]
 8006c96:	f7fa f81b 	bl	8000cd0 <__aeabi_fmul>
 8006c9a:	1c03      	adds	r3, r0, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
        result += *str - '0';
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	3b30      	subs	r3, #48	; 0x30
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7fa fb21 	bl	80012ec <__aeabi_i2f>
 8006caa:	1c03      	adds	r3, r0, #0
 8006cac:	1c19      	adds	r1, r3, #0
 8006cae:	69f8      	ldr	r0, [r7, #28]
 8006cb0:	f7f9 fca4 	bl	80005fc <__aeabi_fadd>
 8006cb4:	1c03      	adds	r3, r0, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
        str++;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b2f      	cmp	r3, #47	; 0x2f
 8006cc4:	d903      	bls.n	8006cce <stor+0x62>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b39      	cmp	r3, #57	; 0x39
 8006ccc:	d9e1      	bls.n	8006c92 <stor+0x26>
    }
    if (*str == ',' || *str == '.') {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b2c      	cmp	r3, #44	; 0x2c
 8006cd4:	d003      	beq.n	8006cde <stor+0x72>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b2e      	cmp	r3, #46	; 0x2e
 8006cdc:	d128      	bne.n	8006d30 <stor+0xc4>
        str++;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	607b      	str	r3, [r7, #4]
        float multiplier = 0.1;
 8006ce4:	4b46      	ldr	r3, [pc, #280]	; (8006e00 <stor+0x194>)
 8006ce6:	61bb      	str	r3, [r7, #24]
        while (*str >= '0' && *str <= '9') {
 8006ce8:	e01a      	b.n	8006d20 <stor+0xb4>
            result += (*str - '0') * multiplier;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	3b30      	subs	r3, #48	; 0x30
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7fa fafb 	bl	80012ec <__aeabi_i2f>
 8006cf6:	1c03      	adds	r3, r0, #0
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	1c18      	adds	r0, r3, #0
 8006cfc:	f7f9 ffe8 	bl	8000cd0 <__aeabi_fmul>
 8006d00:	1c03      	adds	r3, r0, #0
 8006d02:	1c19      	adds	r1, r3, #0
 8006d04:	69f8      	ldr	r0, [r7, #28]
 8006d06:	f7f9 fc79 	bl	80005fc <__aeabi_fadd>
 8006d0a:	1c03      	adds	r3, r0, #0
 8006d0c:	61fb      	str	r3, [r7, #28]
            multiplier /= 10;
 8006d0e:	493b      	ldr	r1, [pc, #236]	; (8006dfc <stor+0x190>)
 8006d10:	69b8      	ldr	r0, [r7, #24]
 8006d12:	f7f9 fe13 	bl	800093c <__aeabi_fdiv>
 8006d16:	1c03      	adds	r3, r0, #0
 8006d18:	61bb      	str	r3, [r7, #24]
            str++;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	607b      	str	r3, [r7, #4]
        while (*str >= '0' && *str <= '9') {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b2f      	cmp	r3, #47	; 0x2f
 8006d26:	d903      	bls.n	8006d30 <stor+0xc4>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b39      	cmp	r3, #57	; 0x39
 8006d2e:	d9dc      	bls.n	8006cea <stor+0x7e>
        }
    }
    result *= sign;
 8006d30:	6939      	ldr	r1, [r7, #16]
 8006d32:	69f8      	ldr	r0, [r7, #28]
 8006d34:	f7f9 ffcc 	bl	8000cd0 <__aeabi_fmul>
 8006d38:	1c03      	adds	r3, r0, #0
 8006d3a:	61fb      	str	r3, [r7, #28]
    if (*str == 'e' || *str == 'E') {
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b65      	cmp	r3, #101	; 0x65
 8006d42:	d003      	beq.n	8006d4c <stor+0xe0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b45      	cmp	r3, #69	; 0x45
 8006d4a:	d14f      	bne.n	8006dec <stor+0x180>
        str++;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	607b      	str	r3, [r7, #4]
        float powerer = *str == '-'? str++, 0.1 : 10;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b2d      	cmp	r3, #45	; 0x2d
 8006d58:	d104      	bne.n	8006d64 <stor+0xf8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <stor+0x194>)
 8006d62:	e000      	b.n	8006d66 <stor+0xfa>
 8006d64:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <stor+0x190>)
 8006d66:	60fb      	str	r3, [r7, #12]
        float power = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
        while (*str >= '0' && *str <= '9') {
 8006d6c:	e015      	b.n	8006d9a <stor+0x12e>
            power *= 10;
 8006d6e:	4923      	ldr	r1, [pc, #140]	; (8006dfc <stor+0x190>)
 8006d70:	6978      	ldr	r0, [r7, #20]
 8006d72:	f7f9 ffad 	bl	8000cd0 <__aeabi_fmul>
 8006d76:	1c03      	adds	r3, r0, #0
 8006d78:	617b      	str	r3, [r7, #20]
            power += *str - '0';
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	3b30      	subs	r3, #48	; 0x30
 8006d80:	0018      	movs	r0, r3
 8006d82:	f7fa fab3 	bl	80012ec <__aeabi_i2f>
 8006d86:	1c03      	adds	r3, r0, #0
 8006d88:	1c19      	adds	r1, r3, #0
 8006d8a:	6978      	ldr	r0, [r7, #20]
 8006d8c:	f7f9 fc36 	bl	80005fc <__aeabi_fadd>
 8006d90:	1c03      	adds	r3, r0, #0
 8006d92:	617b      	str	r3, [r7, #20]
            str++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3301      	adds	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
        while (*str >= '0' && *str <= '9') {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b2f      	cmp	r3, #47	; 0x2f
 8006da0:	d903      	bls.n	8006daa <stor+0x13e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b39      	cmp	r3, #57	; 0x39
 8006da8:	d9e1      	bls.n	8006d6e <stor+0x102>
        }
        result *= pow(powerer, power);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7fc f980 	bl	80030b0 <__aeabi_f2d>
 8006db0:	0004      	movs	r4, r0
 8006db2:	000d      	movs	r5, r1
 8006db4:	6978      	ldr	r0, [r7, #20]
 8006db6:	f7fc f97b 	bl	80030b0 <__aeabi_f2d>
 8006dba:	0002      	movs	r2, r0
 8006dbc:	000b      	movs	r3, r1
 8006dbe:	0020      	movs	r0, r4
 8006dc0:	0029      	movs	r1, r5
 8006dc2:	f00e fdc3 	bl	801594c <pow>
 8006dc6:	0004      	movs	r4, r0
 8006dc8:	000d      	movs	r5, r1
 8006dca:	69f8      	ldr	r0, [r7, #28]
 8006dcc:	f7fc f970 	bl	80030b0 <__aeabi_f2d>
 8006dd0:	0002      	movs	r2, r0
 8006dd2:	000b      	movs	r3, r1
 8006dd4:	0020      	movs	r0, r4
 8006dd6:	0029      	movs	r1, r5
 8006dd8:	f7fb fa7c 	bl	80022d4 <__aeabi_dmul>
 8006ddc:	0002      	movs	r2, r0
 8006dde:	000b      	movs	r3, r1
 8006de0:	0010      	movs	r0, r2
 8006de2:	0019      	movs	r1, r3
 8006de4:	f7fc f9ac 	bl	8003140 <__aeabi_d2f>
 8006de8:	1c03      	adds	r3, r0, #0
 8006dea:	61fb      	str	r3, [r7, #28]
    }
    return result;
 8006dec:	69fb      	ldr	r3, [r7, #28]
}
 8006dee:	1c18      	adds	r0, r3, #0
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b008      	add	sp, #32
 8006df4:	bdb0      	pop	{r4, r5, r7, pc}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	bf800000 	.word	0xbf800000
 8006dfc:	41200000 	.word	0x41200000
 8006e00:	3dcccccd 	.word	0x3dcccccd

08006e04 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]


}
 8006e0c:	46c0      	nop			; (mov r8, r8)
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	b002      	add	sp, #8
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	{

	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8006e1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ed4 <HAL_UART_RxCpltCallback+0xc0>)
 8006e1e:	2104      	movs	r1, #4
 8006e20:	0018      	movs	r0, r3
 8006e22:	f003 fa65 	bl	800a2f0 <HAL_GPIO_TogglePin>
	//Debug_Tx("V");
	if(huart==&huart2){
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <HAL_UART_RxCpltCallback+0xc4>)
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d129      	bne.n	8006e82 <HAL_UART_RxCpltCallback+0x6e>
		if(dnlfile==0){
 8006e2e:	4b2b      	ldr	r3, [pc, #172]	; (8006edc <HAL_UART_RxCpltCallback+0xc8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d125      	bne.n	8006e82 <HAL_UART_RxCpltCallback+0x6e>
		if(strlen((char*)gpsData)>10){
 8006e36:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <HAL_UART_RxCpltCallback+0xcc>)
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7f9 f965 	bl	8000108 <strlen>
 8006e3e:	0003      	movs	r3, r0
 8006e40:	2b0a      	cmp	r3, #10
 8006e42:	d909      	bls.n	8006e58 <HAL_UART_RxCpltCallback+0x44>

	  		//Debug_Tx((char*)gpsData);
			ProcessGPS((char*)gpsData);
 8006e44:	4b26      	ldr	r3, [pc, #152]	; (8006ee0 <HAL_UART_RxCpltCallback+0xcc>)
 8006e46:	0018      	movs	r0, r3
 8006e48:	f7ff fa7a 	bl	8006340 <ProcessGPS>
			getGPSString();
 8006e4c:	f7fe ff9c 	bl	8005d88 <getGPSString>
			timedWork();
 8006e50:	f7ff feea 	bl	8006c28 <timedWork>
			ReadAllGPIO();
 8006e54:	f000 f93a 	bl	80070cc <ReadAllGPIO>
		}
		if(DMAon==1){
 8006e58:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <HAL_UART_RxCpltCallback+0xd0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d110      	bne.n	8006e82 <HAL_UART_RxCpltCallback+0x6e>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8006e60:	4b1f      	ldr	r3, [pc, #124]	; (8006ee0 <HAL_UART_RxCpltCallback+0xcc>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_UART_RxCpltCallback+0x60>
 8006e68:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <HAL_UART_RxCpltCallback+0xd4>)
 8006e6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <HAL_UART_RxCpltCallback+0xcc>)
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f00b fef0 	bl	8012c54 <memset>
		//__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 8006e74:	23e1      	movs	r3, #225	; 0xe1
 8006e76:	009a      	lsls	r2, r3, #2
 8006e78:	4919      	ldr	r1, [pc, #100]	; (8006ee0 <HAL_UART_RxCpltCallback+0xcc>)
 8006e7a:	4b17      	ldr	r3, [pc, #92]	; (8006ed8 <HAL_UART_RxCpltCallback+0xc4>)
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f006 f945 	bl	800d10c <HAL_UART_Receive_DMA>
		}
	}
	if(huart==&huart1){
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <HAL_UART_RxCpltCallback+0xd8>)
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d11f      	bne.n	8006eca <HAL_UART_RxCpltCallback+0xb6>
		if(strlen((char*)GSMData)<900){
 8006e8a:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <HAL_UART_RxCpltCallback+0xdc>)
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f7f9 f93b 	bl	8000108 <strlen>
 8006e92:	0002      	movs	r2, r0
 8006e94:	23e1      	movs	r3, #225	; 0xe1
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d209      	bcs.n	8006eb0 <HAL_UART_RxCpltCallback+0x9c>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8006e9c:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <HAL_UART_RxCpltCallback+0xe0>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_UART_RxCpltCallback+0x9c>
 8006ea4:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <HAL_UART_RxCpltCallback+0xe0>)
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <HAL_UART_RxCpltCallback+0xdc>)
 8006ea8:	0011      	movs	r1, r2
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f00b feda 	bl	8012c64 <strcat>
		}


		if(DMAon==1){
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <HAL_UART_RxCpltCallback+0xd0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d108      	bne.n	8006eca <HAL_UART_RxCpltCallback+0xb6>
		GSMBuff[0]=0;
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <HAL_UART_RxCpltCallback+0xe0>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
		//__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006ebe:	490d      	ldr	r1, [pc, #52]	; (8006ef4 <HAL_UART_RxCpltCallback+0xe0>)
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <HAL_UART_RxCpltCallback+0xd8>)
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f006 f921 	bl	800d10c <HAL_UART_Receive_DMA>
		}
	}
	}

}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	50000c00 	.word	0x50000c00
 8006ed8:	200007b8 	.word	0x200007b8
 8006edc:	200014fc 	.word	0x200014fc
 8006ee0:	200037bc 	.word	0x200037bc
 8006ee4:	20000004 	.word	0x20000004
 8006ee8:	000003e7 	.word	0x000003e7
 8006eec:	20000724 	.word	0x20000724
 8006ef0:	20000dec 	.word	0x20000dec
 8006ef4:	200013c8 	.word	0x200013c8

08006ef8 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <HAL_UART_ErrorCallback+0x7c>)
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d11c      	bne.n	8006f42 <HAL_UART_ErrorCallback+0x4a>

		if(dnlfile==0){
 8006f08:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <HAL_UART_ErrorCallback+0x80>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d118      	bne.n	8006f42 <HAL_UART_ErrorCallback+0x4a>
		if(DMAon==1){
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <HAL_UART_ErrorCallback+0x84>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d114      	bne.n	8006f42 <HAL_UART_ErrorCallback+0x4a>
		//Debug_Tx("GPSErr");
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8006f18:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <HAL_UART_ErrorCallback+0x88>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_UART_ErrorCallback+0x34>
 8006f20:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <HAL_UART_ErrorCallback+0x8c>)
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <HAL_UART_ErrorCallback+0x88>)
 8006f24:	2100      	movs	r1, #0
 8006f26:	0018      	movs	r0, r3
 8006f28:	f00b fe94 	bl	8012c54 <memset>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006f2c:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <HAL_UART_ErrorCallback+0x7c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	220c      	movs	r2, #12
 8006f32:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006f34:	23e1      	movs	r3, #225	; 0xe1
 8006f36:	009a      	lsls	r2, r3, #2
 8006f38:	4911      	ldr	r1, [pc, #68]	; (8006f80 <HAL_UART_ErrorCallback+0x88>)
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <HAL_UART_ErrorCallback+0x7c>)
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f006 f8e5 	bl	800d10c <HAL_UART_Receive_DMA>
		}
		}
	}
	if(huart==&huart1){
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_UART_ErrorCallback+0x90>)
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d110      	bne.n	8006f6c <HAL_UART_ErrorCallback+0x74>

		if(DMAon==1){
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <HAL_UART_ErrorCallback+0x84>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d10c      	bne.n	8006f6c <HAL_UART_ErrorCallback+0x74>
		//Debug_Tx("GSMErr");
		GSMBuff[0]=0;
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_UART_ErrorCallback+0x94>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <HAL_UART_ErrorCallback+0x7c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	220c      	movs	r2, #12
 8006f5e:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006f60:	490a      	ldr	r1, [pc, #40]	; (8006f8c <HAL_UART_ErrorCallback+0x94>)
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <HAL_UART_ErrorCallback+0x90>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	0018      	movs	r0, r3
 8006f68:	f006 f8d0 	bl	800d10c <HAL_UART_Receive_DMA>





}
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b002      	add	sp, #8
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	200007b8 	.word	0x200007b8
 8006f78:	200014fc 	.word	0x200014fc
 8006f7c:	20000004 	.word	0x20000004
 8006f80:	200037bc 	.word	0x200037bc
 8006f84:	000003e7 	.word	0x000003e7
 8006f88:	20000724 	.word	0x20000724
 8006f8c:	200013c8 	.word	0x200013c8

08006f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]

	 // TestDigitalOutput();



 	  initAcc();
 8006f98:	f7fe fc7e 	bl	8005898 <initAcc>
	//TestDigitalOutput();
	 SET_GPS_VCC_EN(1);
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7fc fafb 	bl	8003598 <SET_GPS_VCC_EN>
		  	 	  SET_GSM_VCC_EN(1);
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	f7fc fb36 	bl	8003614 <SET_GSM_VCC_EN>
		  	 	  SET_PWRKEY(1);
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f7fc fb15 	bl	80035d8 <SET_PWRKEY>
		  	  Init_ADC();
 8006fae:	f7fc fa13 	bl	80033d8 <Init_ADC>


		  	  SET_5V_OUT_EN(1);
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f7fc fa96 	bl	80034e4 <SET_5V_OUT_EN>
		  	  SET_GPS_VCC_EN(1);
 8006fb8:	2001      	movs	r0, #1
 8006fba:	f7fc faed 	bl	8003598 <SET_GPS_VCC_EN>
		  	  SET_GSM_VCC_EN(1);
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	f7fc fb28 	bl	8003614 <SET_GSM_VCC_EN>
		  	  SET_PWRKEY(1);
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	f7fc fb07 	bl	80035d8 <SET_PWRKEY>
		  	GSMBuff[0]=0;
 8006fca:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <StartDefaultTask+0xa4>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
		      memset((char*)gpsData,0,1000);
 8006fd0:	23fa      	movs	r3, #250	; 0xfa
 8006fd2:	009a      	lsls	r2, r3, #2
 8006fd4:	4b18      	ldr	r3, [pc, #96]	; (8007038 <StartDefaultTask+0xa8>)
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f00b fe3b 	bl	8012c54 <memset>
		  	  __HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006fde:	4b17      	ldr	r3, [pc, #92]	; (800703c <StartDefaultTask+0xac>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	220c      	movs	r2, #12
 8006fe4:	621a      	str	r2, [r3, #32]
		  	  HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006fe6:	23e1      	movs	r3, #225	; 0xe1
 8006fe8:	009a      	lsls	r2, r3, #2
 8006fea:	4913      	ldr	r1, [pc, #76]	; (8007038 <StartDefaultTask+0xa8>)
 8006fec:	4b13      	ldr	r3, [pc, #76]	; (800703c <StartDefaultTask+0xac>)
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f006 f88c 	bl	800d10c <HAL_UART_Receive_DMA>

		  	__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ff4:	4b12      	ldr	r3, [pc, #72]	; (8007040 <StartDefaultTask+0xb0>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	220c      	movs	r2, #12
 8006ffa:	621a      	str	r2, [r3, #32]
		  	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006ffc:	490d      	ldr	r1, [pc, #52]	; (8007034 <StartDefaultTask+0xa4>)
 8006ffe:	4b10      	ldr	r3, [pc, #64]	; (8007040 <StartDefaultTask+0xb0>)
 8007000:	2201      	movs	r2, #1
 8007002:	0018      	movs	r0, r3
 8007004:	f006 f882 	bl	800d10c <HAL_UART_Receive_DMA>
		  	initGPS();
 8007008:	f7fe fe7c 	bl	8005d04 <initGPS>
		  	HAL_Delay(10000);
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <StartDefaultTask+0xb4>)
 800700e:	0018      	movs	r0, r3
 8007010:	f001 fcf2 	bl	80089f8 <HAL_Delay>


		  //		  		   int nn=tic();
		  		  			//HAL_Delay(3000);
		  		  InitGSM();
 8007014:	f7fd fc12 	bl	800483c <InitGSM>
		    	//	ProcessTCPAll( "TEST DATA 111111111111111111111111");
		  		//  }
		//  		  		   toc(nn,"_________________________GSM INIT");


		  	initFirstRun();
 8007018:	f000 f838 	bl	800708c <initFirstRun>
		  	InitMEMQ();
 800701c:	f7fe f914 	bl	8005248 <InitMEMQ>
		  	/* GetLastAddress();

		  	 initAcc();
		  	 */
		  	TestMEM();
 8007020:	f7ff f9d2 	bl	80063c8 <TestMEM>
		  	StartTCPConnection();
 8007024:	f7fc fd8c 	bl	8003b40 <StartTCPConnection>
			 		  //HAL_UART_Receive_DMA(&huart2, gpsData, 900);
			 			//HAL_GPIO_TogglePin(GPIOD, DO_LED_PWR_Pin);
			 		 // int whiletotal=tic();
				  //TestGPS();
				  	  	// TestGSM();
			 		  GSMSigQuality();
 8007028:	f7fc fccc 	bl	80039c4 <GSMSigQuality>
			 			 TestRun();
 800702c:	f000 fb92 	bl	8007754 <TestRun>
			 		  GSMSigQuality();
 8007030:	e7fa      	b.n	8007028 <StartDefaultTask+0x98>
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	200013c8 	.word	0x200013c8
 8007038:	200037bc 	.word	0x200037bc
 800703c:	200007b8 	.word	0x200007b8
 8007040:	20000724 	.word	0x20000724
 8007044:	00002710 	.word	0x00002710

08007048 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

while(1){osDelay(1);
 8007050:	2001      	movs	r0, #1
 8007052:	f007 fc81 	bl	800e958 <osDelay>
 8007056:	e7fb      	b.n	8007050 <StartTask02+0x8>

08007058 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007060:	2001      	movs	r0, #1
 8007062:	f007 fc79 	bl	800e958 <osDelay>
 8007066:	e7fb      	b.n	8007060 <StartTask03+0x8>

08007068 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a04      	ldr	r2, [pc, #16]	; (8007088 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d101      	bne.n	800707e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800707a:	f001 fca1 	bl	80089c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	46bd      	mov	sp, r7
 8007082:	b002      	add	sp, #8
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	40012c00 	.word	0x40012c00

0800708c <initFirstRun>:
void restartGSMuart(){GSMBuff[0]=0;
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);

}
void initFirstRun(){//20.210.207.21\",5001
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b085      	sub	sp, #20
 8007090:	af04      	add	r7, sp, #16
	ClearQueue();
 8007092:	f7fe f92d 	bl	80052f0 <ClearQueue>
	writeConfig("AS-o1-A-9191\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8007096:	4c08      	ldr	r4, [pc, #32]	; (80070b8 <initFirstRun+0x2c>)
 8007098:	4a08      	ldr	r2, [pc, #32]	; (80070bc <initFirstRun+0x30>)
 800709a:	4909      	ldr	r1, [pc, #36]	; (80070c0 <initFirstRun+0x34>)
 800709c:	4809      	ldr	r0, [pc, #36]	; (80070c4 <initFirstRun+0x38>)
 800709e:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <initFirstRun+0x3c>)
 80070a0:	9302      	str	r3, [sp, #8]
 80070a2:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <initFirstRun+0x2c>)
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <initFirstRun+0x2c>)
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	0023      	movs	r3, r4
 80070ac:	f7fe f92e 	bl	800530c <writeConfig>
 	  				  "20.210.207.21","20.210.207.21","20.210.207.21",
	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");

}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b001      	add	sp, #4
 80070b6:	bd90      	pop	{r4, r7, pc}
 80070b8:	08017c94 	.word	0x08017c94
 80070bc:	08017a44 	.word	0x08017a44
 80070c0:	08017a6c 	.word	0x08017a6c
 80070c4:	08017a90 	.word	0x08017a90
 80070c8:	08017aa0 	.word	0x08017aa0

080070cc <ReadAllGPIO>:




void ReadAllGPIO(){
 80070cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ce:	46de      	mov	lr, fp
 80070d0:	4657      	mov	r7, sl
 80070d2:	464e      	mov	r6, r9
 80070d4:	4645      	mov	r5, r8
 80070d6:	b5e0      	push	{r5, r6, r7, lr}
 80070d8:	b08b      	sub	sp, #44	; 0x2c
 80070da:	af08      	add	r7, sp, #32
	memset(StatusStrng,0,20);
 80070dc:	4b58      	ldr	r3, [pc, #352]	; (8007240 <ReadAllGPIO+0x174>)
 80070de:	2214      	movs	r2, #20
 80070e0:	2100      	movs	r1, #0
 80070e2:	0018      	movs	r0, r3
 80070e4:	f00b fdb6 	bl	8012c54 <memset>
	memset(Dig_io,0,30);
 80070e8:	4b56      	ldr	r3, [pc, #344]	; (8007244 <ReadAllGPIO+0x178>)
 80070ea:	221e      	movs	r2, #30
 80070ec:	2100      	movs	r1, #0
 80070ee:	0018      	movs	r0, r3
 80070f0:	f00b fdb0 	bl	8012c54 <memset>

	//%%%%%%%    GPIO Read    %%%%%%
	Dig_in[0]=Read_DI_IN1();
 80070f4:	f7fc f8da 	bl	80032ac <Read_DI_IN1>
 80070f8:	0002      	movs	r2, r0
 80070fa:	4b53      	ldr	r3, [pc, #332]	; (8007248 <ReadAllGPIO+0x17c>)
 80070fc:	601a      	str	r2, [r3, #0]
	Dig_in[1]=Read_DI_IN2();
 80070fe:	f7fc f8e7 	bl	80032d0 <Read_DI_IN2>
 8007102:	0002      	movs	r2, r0
 8007104:	4b50      	ldr	r3, [pc, #320]	; (8007248 <ReadAllGPIO+0x17c>)
 8007106:	605a      	str	r2, [r3, #4]
	Dig_in[2]=Read_DI_IN3();
 8007108:	f7fc f8f6 	bl	80032f8 <Read_DI_IN3>
 800710c:	0002      	movs	r2, r0
 800710e:	4b4e      	ldr	r3, [pc, #312]	; (8007248 <ReadAllGPIO+0x17c>)
 8007110:	609a      	str	r2, [r3, #8]

	MAINS_STATE=Read_DI_MAINS_STATE();
 8007112:	f7fc f905 	bl	8003320 <Read_DI_MAINS_STATE>
 8007116:	0002      	movs	r2, r0
 8007118:	4b4c      	ldr	r3, [pc, #304]	; (800724c <ReadAllGPIO+0x180>)
 800711a:	601a      	str	r2, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 800711c:	f7fc f914 	bl	8003348 <Read_DI_ACC_STATE>
 8007120:	0002      	movs	r2, r0
 8007122:	4b4b      	ldr	r3, [pc, #300]	; (8007250 <ReadAllGPIO+0x184>)
 8007124:	601a      	str	r2, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 8007126:	f7fc f923 	bl	8003370 <Read_DI_BOX_STATE>
 800712a:	0003      	movs	r3, r0
 800712c:	001a      	movs	r2, r3
 800712e:	4b49      	ldr	r3, [pc, #292]	; (8007254 <ReadAllGPIO+0x188>)
 8007130:	701a      	strb	r2, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 8007132:	f7fc f93f 	bl	80033b4 <Read_DI_SOS_STATE>
 8007136:	0002      	movs	r2, r0
 8007138:	4b47      	ldr	r3, [pc, #284]	; (8007258 <ReadAllGPIO+0x18c>)
 800713a:	601a      	str	r2, [r3, #0]
	EXT_B=Read_EXT_B_SENSE();
 800713c:	f7fc f99a 	bl	8003474 <Read_EXT_B_SENSE>
 8007140:	1c02      	adds	r2, r0, #0
 8007142:	4b46      	ldr	r3, [pc, #280]	; (800725c <ReadAllGPIO+0x190>)
 8007144:	601a      	str	r2, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 8007146:	f7fc f9b1 	bl	80034ac <Read_INT_B_SENSE>
 800714a:	1c02      	adds	r2, r0, #0
 800714c:	4b44      	ldr	r3, [pc, #272]	; (8007260 <ReadAllGPIO+0x194>)
 800714e:	601a      	str	r2, [r3, #0]


	adc[0]=Read_ADC1();
 8007150:	f7fc f952 	bl	80033f8 <Read_ADC1>
 8007154:	1c02      	adds	r2, r0, #0
 8007156:	4b43      	ldr	r3, [pc, #268]	; (8007264 <ReadAllGPIO+0x198>)
 8007158:	601a      	str	r2, [r3, #0]
	adc[1]=Read_ADC2();
 800715a:	f7fc f96d 	bl	8003438 <Read_ADC2>
 800715e:	1c02      	adds	r2, r0, #0
 8007160:	4b40      	ldr	r3, [pc, #256]	; (8007264 <ReadAllGPIO+0x198>)
 8007162:	605a      	str	r2, [r3, #4]

	memset(StatusStrng,0,20);
 8007164:	4b36      	ldr	r3, [pc, #216]	; (8007240 <ReadAllGPIO+0x174>)
 8007166:	2214      	movs	r2, #20
 8007168:	2100      	movs	r1, #0
 800716a:	0018      	movs	r0, r3
 800716c:	f00b fd72 	bl	8012c54 <memset>
	memset(Dig_io,0,30);
 8007170:	4b34      	ldr	r3, [pc, #208]	; (8007244 <ReadAllGPIO+0x178>)
 8007172:	221e      	movs	r2, #30
 8007174:	2100      	movs	r1, #0
 8007176:	0018      	movs	r0, r3
 8007178:	f00b fd6c 	bl	8012c54 <memset>

    sprintf(Dig_io, "%d%d%d0,%d%d,%d,%.1f,%.1f,,()",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo,adc[0],adc[1]);
 800717c:	4b32      	ldr	r3, [pc, #200]	; (8007248 <ReadAllGPIO+0x17c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	469b      	mov	fp, r3
 8007182:	4b31      	ldr	r3, [pc, #196]	; (8007248 <ReadAllGPIO+0x17c>)
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4b2f      	ldr	r3, [pc, #188]	; (8007248 <ReadAllGPIO+0x17c>)
 800718a:	689e      	ldr	r6, [r3, #8]
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <ReadAllGPIO+0x19c>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4690      	mov	r8, r2
 8007192:	4b36      	ldr	r3, [pc, #216]	; (800726c <ReadAllGPIO+0x1a0>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4691      	mov	r9, r2
 8007198:	4b35      	ldr	r3, [pc, #212]	; (8007270 <ReadAllGPIO+0x1a4>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4692      	mov	sl, r2
 800719e:	4b31      	ldr	r3, [pc, #196]	; (8007264 <ReadAllGPIO+0x198>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	1c18      	adds	r0, r3, #0
 80071a4:	f7fb ff84 	bl	80030b0 <__aeabi_f2d>
 80071a8:	0004      	movs	r4, r0
 80071aa:	000d      	movs	r5, r1
 80071ac:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <ReadAllGPIO+0x198>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	1c18      	adds	r0, r3, #0
 80071b2:	f7fb ff7d 	bl	80030b0 <__aeabi_f2d>
 80071b6:	0002      	movs	r2, r0
 80071b8:	000b      	movs	r3, r1
 80071ba:	492e      	ldr	r1, [pc, #184]	; (8007274 <ReadAllGPIO+0x1a8>)
 80071bc:	4821      	ldr	r0, [pc, #132]	; (8007244 <ReadAllGPIO+0x178>)
 80071be:	9206      	str	r2, [sp, #24]
 80071c0:	9307      	str	r3, [sp, #28]
 80071c2:	9404      	str	r4, [sp, #16]
 80071c4:	9505      	str	r5, [sp, #20]
 80071c6:	4652      	mov	r2, sl
 80071c8:	9203      	str	r2, [sp, #12]
 80071ca:	464a      	mov	r2, r9
 80071cc:	9202      	str	r2, [sp, #8]
 80071ce:	4642      	mov	r2, r8
 80071d0:	9201      	str	r2, [sp, #4]
 80071d2:	9600      	str	r6, [sp, #0]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	465a      	mov	r2, fp
 80071d8:	f00b fcd0 	bl	8012b7c <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80071dc:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <ReadAllGPIO+0x184>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4698      	mov	r8, r3
 80071e2:	4b1a      	ldr	r3, [pc, #104]	; (800724c <ReadAllGPIO+0x180>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4699      	mov	r9, r3
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <ReadAllGPIO+0x190>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	1c18      	adds	r0, r3, #0
 80071ee:	f7fb ff5f 	bl	80030b0 <__aeabi_f2d>
 80071f2:	0004      	movs	r4, r0
 80071f4:	000d      	movs	r5, r1
 80071f6:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <ReadAllGPIO+0x194>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	1c18      	adds	r0, r3, #0
 80071fc:	f7fb ff58 	bl	80030b0 <__aeabi_f2d>
 8007200:	6038      	str	r0, [r7, #0]
 8007202:	6079      	str	r1, [r7, #4]
 8007204:	4914      	ldr	r1, [pc, #80]	; (8007258 <ReadAllGPIO+0x18c>)
 8007206:	6809      	ldr	r1, [r1, #0]
 8007208:	4812      	ldr	r0, [pc, #72]	; (8007254 <ReadAllGPIO+0x188>)
 800720a:	7800      	ldrb	r0, [r0, #0]
 800720c:	4684      	mov	ip, r0
 800720e:	4e1a      	ldr	r6, [pc, #104]	; (8007278 <ReadAllGPIO+0x1ac>)
 8007210:	480b      	ldr	r0, [pc, #44]	; (8007240 <ReadAllGPIO+0x174>)
 8007212:	4663      	mov	r3, ip
 8007214:	9305      	str	r3, [sp, #20]
 8007216:	9104      	str	r1, [sp, #16]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	9202      	str	r2, [sp, #8]
 800721e:	9303      	str	r3, [sp, #12]
 8007220:	9400      	str	r4, [sp, #0]
 8007222:	9501      	str	r5, [sp, #4]
 8007224:	464b      	mov	r3, r9
 8007226:	4642      	mov	r2, r8
 8007228:	0031      	movs	r1, r6
 800722a:	f00b fca7 	bl	8012b7c <siprintf>


}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b003      	add	sp, #12
 8007234:	bcf0      	pop	{r4, r5, r6, r7}
 8007236:	46bb      	mov	fp, r7
 8007238:	46b2      	mov	sl, r6
 800723a:	46a9      	mov	r9, r5
 800723c:	46a0      	mov	r8, r4
 800723e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007240:	20003cac 	.word	0x20003cac
 8007244:	20003c04 	.word	0x20003c04
 8007248:	20003bf8 	.word	0x20003bf8
 800724c:	20003c2c 	.word	0x20003c2c
 8007250:	20003c30 	.word	0x20003c30
 8007254:	20000047 	.word	0x20000047
 8007258:	20003c34 	.word	0x20003c34
 800725c:	20003c40 	.word	0x20003c40
 8007260:	20003c44 	.word	0x20003c44
 8007264:	20003c38 	.word	0x20003c38
 8007268:	20003c24 	.word	0x20003c24
 800726c:	20003c28 	.word	0x20003c28
 8007270:	20000428 	.word	0x20000428
 8007274:	08017ca4 	.word	0x08017ca4
 8007278:	08017cc4 	.word	0x08017cc4

0800727c <GetHead>:


void GetHead(){
 800727c:	b5b0      	push	{r4, r5, r7, lr}
 800727e:	af00      	add	r7, sp, #0

	memset(Head,0,100);
 8007280:	4bd7      	ldr	r3, [pc, #860]	; (80075e0 <GetHead+0x364>)
 8007282:	2264      	movs	r2, #100	; 0x64
 8007284:	2100      	movs	r1, #0
 8007286:	0018      	movs	r0, r3
 8007288:	f00b fce4 	bl	8012c54 <memset>
	strcpy(Head,InitStr);
 800728c:	4ad5      	ldr	r2, [pc, #852]	; (80075e4 <GetHead+0x368>)
 800728e:	4bd4      	ldr	r3, [pc, #848]	; (80075e0 <GetHead+0x364>)
 8007290:	0011      	movs	r1, r2
 8007292:	0018      	movs	r0, r3
 8007294:	f00b fe93 	bl	8012fbe <strcpy>
	strcat(Head,VerStr);
 8007298:	4ad3      	ldr	r2, [pc, #844]	; (80075e8 <GetHead+0x36c>)
 800729a:	4bd1      	ldr	r3, [pc, #836]	; (80075e0 <GetHead+0x364>)
 800729c:	0011      	movs	r1, r2
 800729e:	0018      	movs	r0, r3
 80072a0:	f00b fce0 	bl	8012c64 <strcat>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 80072a4:	4bd1      	ldr	r3, [pc, #836]	; (80075ec <GetHead+0x370>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3301      	adds	r3, #1
 80072aa:	425a      	negs	r2, r3
 80072ac:	4153      	adcs	r3, r2
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	4bcf      	ldr	r3, [pc, #828]	; (80075f0 <GetHead+0x374>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	4259      	negs	r1, r3
 80072b8:	414b      	adcs	r3, r1
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	4013      	ands	r3, r2
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <GetHead+0x56>
 80072c4:	4bc9      	ldr	r3, [pc, #804]	; (80075ec <GetHead+0x370>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	4bca      	ldr	r3, [pc, #808]	; (80075f4 <GetHead+0x378>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	4252      	negs	r2, r2
 80072d0:	601a      	str	r2, [r3, #0]
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 80072d2:	4bc8      	ldr	r3, [pc, #800]	; (80075f4 <GetHead+0x378>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3301      	adds	r3, #1
 80072d8:	425a      	negs	r2, r3
 80072da:	4153      	adcs	r3, r2
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	4bc4      	ldr	r3, [pc, #784]	; (80075f0 <GetHead+0x374>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4259      	negs	r1, r3
 80072e4:	414b      	adcs	r3, r1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4013      	ands	r3, r2
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d006      	beq.n	80072fe <GetHead+0x82>
 80072f0:	4bc0      	ldr	r3, [pc, #768]	; (80075f4 <GetHead+0x378>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	4bbd      	ldr	r3, [pc, #756]	; (80075ec <GetHead+0x370>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	4252      	negs	r2, r2
 80072fc:	601a      	str	r2, [r3, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 80072fe:	4bbe      	ldr	r3, [pc, #760]	; (80075f8 <GetHead+0x37c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	425a      	negs	r2, r3
 8007306:	4153      	adcs	r3, r2
 8007308:	b2da      	uxtb	r2, r3
 800730a:	4bbc      	ldr	r3, [pc, #752]	; (80075fc <GetHead+0x380>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3b01      	subs	r3, #1
 8007310:	4259      	negs	r1, r3
 8007312:	414b      	adcs	r3, r1
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4013      	ands	r3, r2
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <GetHead+0xb0>
 800731e:	4bb6      	ldr	r3, [pc, #728]	; (80075f8 <GetHead+0x37c>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	4bb6      	ldr	r3, [pc, #728]	; (8007600 <GetHead+0x384>)
 8007326:	2201      	movs	r2, #1
 8007328:	4252      	negs	r2, r2
 800732a:	601a      	str	r2, [r3, #0]
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 800732c:	4bb4      	ldr	r3, [pc, #720]	; (8007600 <GetHead+0x384>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	425a      	negs	r2, r3
 8007334:	4153      	adcs	r3, r2
 8007336:	b2da      	uxtb	r2, r3
 8007338:	4bb0      	ldr	r3, [pc, #704]	; (80075fc <GetHead+0x380>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4259      	negs	r1, r3
 800733e:	414b      	adcs	r3, r1
 8007340:	b2db      	uxtb	r3, r3
 8007342:	4013      	ands	r3, r2
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <GetHead+0xdc>
 800734a:	4bad      	ldr	r3, [pc, #692]	; (8007600 <GetHead+0x384>)
 800734c:	2201      	movs	r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	4ba9      	ldr	r3, [pc, #676]	; (80075f8 <GetHead+0x37c>)
 8007352:	2201      	movs	r2, #1
 8007354:	4252      	negs	r2, r2
 8007356:	601a      	str	r2, [r3, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8007358:	4baa      	ldr	r3, [pc, #680]	; (8007604 <GetHead+0x388>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3301      	adds	r3, #1
 800735e:	425a      	negs	r2, r3
 8007360:	4153      	adcs	r3, r2
 8007362:	b2dc      	uxtb	r4, r3
 8007364:	4ba8      	ldr	r3, [pc, #672]	; (8007608 <GetHead+0x38c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2201      	movs	r2, #1
 800736a:	1c15      	adds	r5, r2, #0
 800736c:	49a7      	ldr	r1, [pc, #668]	; (800760c <GetHead+0x390>)
 800736e:	1c18      	adds	r0, r3, #0
 8007370:	f7f9 f8ac 	bl	80004cc <__aeabi_fcmplt>
 8007374:	1e03      	subs	r3, r0, #0
 8007376:	d101      	bne.n	800737c <GetHead+0x100>
 8007378:	2300      	movs	r3, #0
 800737a:	1c1d      	adds	r5, r3, #0
 800737c:	b2eb      	uxtb	r3, r5
 800737e:	4023      	ands	r3, r4
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d006      	beq.n	8007394 <GetHead+0x118>
 8007386:	4b9f      	ldr	r3, [pc, #636]	; (8007604 <GetHead+0x388>)
 8007388:	2201      	movs	r2, #1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	4ba0      	ldr	r3, [pc, #640]	; (8007610 <GetHead+0x394>)
 800738e:	2201      	movs	r2, #1
 8007390:	4252      	negs	r2, r2
 8007392:	601a      	str	r2, [r3, #0]
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 8007394:	4b9e      	ldr	r3, [pc, #632]	; (8007610 <GetHead+0x394>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	425a      	negs	r2, r3
 800739c:	4153      	adcs	r3, r2
 800739e:	b2dc      	uxtb	r4, r3
 80073a0:	4b99      	ldr	r3, [pc, #612]	; (8007608 <GetHead+0x38c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2201      	movs	r2, #1
 80073a6:	1c15      	adds	r5, r2, #0
 80073a8:	4998      	ldr	r1, [pc, #608]	; (800760c <GetHead+0x390>)
 80073aa:	1c18      	adds	r0, r3, #0
 80073ac:	f7f9 f8ac 	bl	8000508 <__aeabi_fcmpge>
 80073b0:	1e03      	subs	r3, r0, #0
 80073b2:	d101      	bne.n	80073b8 <GetHead+0x13c>
 80073b4:	2300      	movs	r3, #0
 80073b6:	1c1d      	adds	r5, r3, #0
 80073b8:	b2eb      	uxtb	r3, r5
 80073ba:	4023      	ands	r3, r4
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d006      	beq.n	80073d0 <GetHead+0x154>
 80073c2:	4b93      	ldr	r3, [pc, #588]	; (8007610 <GetHead+0x394>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	4b8e      	ldr	r3, [pc, #568]	; (8007604 <GetHead+0x388>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	4252      	negs	r2, r2
 80073ce:	601a      	str	r2, [r3, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 80073d0:	4b90      	ldr	r3, [pc, #576]	; (8007614 <GetHead+0x398>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	425a      	negs	r2, r3
 80073d8:	4153      	adcs	r3, r2
 80073da:	b2dc      	uxtb	r4, r3
 80073dc:	4b8a      	ldr	r3, [pc, #552]	; (8007608 <GetHead+0x38c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2201      	movs	r2, #1
 80073e2:	1c15      	adds	r5, r2, #0
 80073e4:	4989      	ldr	r1, [pc, #548]	; (800760c <GetHead+0x390>)
 80073e6:	1c18      	adds	r0, r3, #0
 80073e8:	f7f9 f870 	bl	80004cc <__aeabi_fcmplt>
 80073ec:	1e03      	subs	r3, r0, #0
 80073ee:	d101      	bne.n	80073f4 <GetHead+0x178>
 80073f0:	2300      	movs	r3, #0
 80073f2:	1c1d      	adds	r5, r3, #0
 80073f4:	b2eb      	uxtb	r3, r5
 80073f6:	4023      	ands	r3, r4
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d006      	beq.n	800740c <GetHead+0x190>
 80073fe:	4b85      	ldr	r3, [pc, #532]	; (8007614 <GetHead+0x398>)
 8007400:	2201      	movs	r2, #1
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	4b84      	ldr	r3, [pc, #528]	; (8007618 <GetHead+0x39c>)
 8007406:	2201      	movs	r2, #1
 8007408:	4252      	negs	r2, r2
 800740a:	601a      	str	r2, [r3, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 800740c:	4b82      	ldr	r3, [pc, #520]	; (8007618 <GetHead+0x39c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	425a      	negs	r2, r3
 8007414:	4153      	adcs	r3, r2
 8007416:	b2dc      	uxtb	r4, r3
 8007418:	4b7b      	ldr	r3, [pc, #492]	; (8007608 <GetHead+0x38c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2201      	movs	r2, #1
 800741e:	1c15      	adds	r5, r2, #0
 8007420:	497a      	ldr	r1, [pc, #488]	; (800760c <GetHead+0x390>)
 8007422:	1c18      	adds	r0, r3, #0
 8007424:	f7f9 f870 	bl	8000508 <__aeabi_fcmpge>
 8007428:	1e03      	subs	r3, r0, #0
 800742a:	d101      	bne.n	8007430 <GetHead+0x1b4>
 800742c:	2300      	movs	r3, #0
 800742e:	1c1d      	adds	r5, r3, #0
 8007430:	b2eb      	uxtb	r3, r5
 8007432:	4023      	ands	r3, r4
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d006      	beq.n	8007448 <GetHead+0x1cc>
 800743a:	4b77      	ldr	r3, [pc, #476]	; (8007618 <GetHead+0x39c>)
 800743c:	2201      	movs	r2, #1
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	4b74      	ldr	r3, [pc, #464]	; (8007614 <GetHead+0x398>)
 8007442:	2201      	movs	r2, #1
 8007444:	4252      	negs	r2, r2
 8007446:	601a      	str	r2, [r3, #0]
	if(GSMSignal<=10){
 8007448:	4b74      	ldr	r3, [pc, #464]	; (800761c <GetHead+0x3a0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4974      	ldr	r1, [pc, #464]	; (8007620 <GetHead+0x3a4>)
 800744e:	1c18      	adds	r0, r3, #0
 8007450:	f7f9 f846 	bl	80004e0 <__aeabi_fcmple>
 8007454:	1e03      	subs	r3, r0, #0
 8007456:	d006      	beq.n	8007466 <GetHead+0x1ea>
		strcat(Head,AlartStr_HistoryPVTData);
 8007458:	4a72      	ldr	r2, [pc, #456]	; (8007624 <GetHead+0x3a8>)
 800745a:	4b61      	ldr	r3, [pc, #388]	; (80075e0 <GetHead+0x364>)
 800745c:	0011      	movs	r1, r2
 800745e:	0018      	movs	r0, r3
 8007460:	f00b fc00 	bl	8012c64 <strcat>
 8007464:	e134      	b.n	80076d0 <GetHead+0x454>
	}
	else if(getSpeed()>SpeedThr){
 8007466:	f7fe ff61 	bl	800632c <getSpeed>
 800746a:	1c02      	adds	r2, r0, #0
 800746c:	4b6e      	ldr	r3, [pc, #440]	; (8007628 <GetHead+0x3ac>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	1c19      	adds	r1, r3, #0
 8007472:	1c10      	adds	r0, r2, #0
 8007474:	f7f9 f83e 	bl	80004f4 <__aeabi_fcmpgt>
 8007478:	1e03      	subs	r3, r0, #0
 800747a:	d006      	beq.n	800748a <GetHead+0x20e>
		strcat(Head,AlartStr_OverSpeed);
 800747c:	4a6b      	ldr	r2, [pc, #428]	; (800762c <GetHead+0x3b0>)
 800747e:	4b58      	ldr	r3, [pc, #352]	; (80075e0 <GetHead+0x364>)
 8007480:	0011      	movs	r1, r2
 8007482:	0018      	movs	r0, r3
 8007484:	f00b fbee 	bl	8012c64 <strcat>
 8007488:	e122      	b.n	80076d0 <GetHead+0x454>
	}
	else if(EmergencyWireBreak>0){
 800748a:	4b69      	ldr	r3, [pc, #420]	; (8007630 <GetHead+0x3b4>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dd09      	ble.n	80074a6 <GetHead+0x22a>
		strcat(Head,AlartStr_EmergencyWireBreak);
 8007492:	4a68      	ldr	r2, [pc, #416]	; (8007634 <GetHead+0x3b8>)
 8007494:	4b52      	ldr	r3, [pc, #328]	; (80075e0 <GetHead+0x364>)
 8007496:	0011      	movs	r1, r2
 8007498:	0018      	movs	r0, r3
 800749a:	f00b fbe3 	bl	8012c64 <strcat>
		EmergencyWireBreak=0;
 800749e:	4b64      	ldr	r3, [pc, #400]	; (8007630 <GetHead+0x3b4>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	e114      	b.n	80076d0 <GetHead+0x454>
	}
	else if(AccGyroStatus==1){
 80074a6:	4b64      	ldr	r3, [pc, #400]	; (8007638 <GetHead+0x3bc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d106      	bne.n	80074bc <GetHead+0x240>
		strcat(Head,AlartStr_HarshAcceleration);
 80074ae:	4a63      	ldr	r2, [pc, #396]	; (800763c <GetHead+0x3c0>)
 80074b0:	4b4b      	ldr	r3, [pc, #300]	; (80075e0 <GetHead+0x364>)
 80074b2:	0011      	movs	r1, r2
 80074b4:	0018      	movs	r0, r3
 80074b6:	f00b fbd5 	bl	8012c64 <strcat>
 80074ba:	e109      	b.n	80076d0 <GetHead+0x454>
	}

	else if(AccGyroStatus==2){
 80074bc:	4b5e      	ldr	r3, [pc, #376]	; (8007638 <GetHead+0x3bc>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d106      	bne.n	80074d2 <GetHead+0x256>
		strcat(Head,AlartStr_HarshBreaking);
 80074c4:	4a5e      	ldr	r2, [pc, #376]	; (8007640 <GetHead+0x3c4>)
 80074c6:	4b46      	ldr	r3, [pc, #280]	; (80075e0 <GetHead+0x364>)
 80074c8:	0011      	movs	r1, r2
 80074ca:	0018      	movs	r0, r3
 80074cc:	f00b fbca 	bl	8012c64 <strcat>
 80074d0:	e0fe      	b.n	80076d0 <GetHead+0x454>
	}
	else if(AccGyroStatus==3){
 80074d2:	4b59      	ldr	r3, [pc, #356]	; (8007638 <GetHead+0x3bc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d106      	bne.n	80074e8 <GetHead+0x26c>
		strcat(Head,AlartStr_RashTurning);
 80074da:	4a5a      	ldr	r2, [pc, #360]	; (8007644 <GetHead+0x3c8>)
 80074dc:	4b40      	ldr	r3, [pc, #256]	; (80075e0 <GetHead+0x364>)
 80074de:	0011      	movs	r1, r2
 80074e0:	0018      	movs	r0, r3
 80074e2:	f00b fbbf 	bl	8012c64 <strcat>
 80074e6:	e0f3      	b.n	80076d0 <GetHead+0x454>
	}
	else if(EmergencyStateON>0){
 80074e8:	4b40      	ldr	r3, [pc, #256]	; (80075ec <GetHead+0x370>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dd09      	ble.n	8007504 <GetHead+0x288>
		strcat(Head,AlartStr_EmergencyStateON);
 80074f0:	4a55      	ldr	r2, [pc, #340]	; (8007648 <GetHead+0x3cc>)
 80074f2:	4b3b      	ldr	r3, [pc, #236]	; (80075e0 <GetHead+0x364>)
 80074f4:	0011      	movs	r1, r2
 80074f6:	0018      	movs	r0, r3
 80074f8:	f00b fbb4 	bl	8012c64 <strcat>
		EmergencyStateON=0;
 80074fc:	4b3b      	ldr	r3, [pc, #236]	; (80075ec <GetHead+0x370>)
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	e0e5      	b.n	80076d0 <GetHead+0x454>
	}
	else if(EmergencyStateOFF>0){
 8007504:	4b3b      	ldr	r3, [pc, #236]	; (80075f4 <GetHead+0x378>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	dd09      	ble.n	8007520 <GetHead+0x2a4>
		strcat(Head,AlartStr_EmergencyStateOFF);
 800750c:	4a4f      	ldr	r2, [pc, #316]	; (800764c <GetHead+0x3d0>)
 800750e:	4b34      	ldr	r3, [pc, #208]	; (80075e0 <GetHead+0x364>)
 8007510:	0011      	movs	r1, r2
 8007512:	0018      	movs	r0, r3
 8007514:	f00b fba6 	bl	8012c64 <strcat>
		EmergencyStateOFF=0;
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <GetHead+0x378>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e0d7      	b.n	80076d0 <GetHead+0x454>
	}
	else if(IgnitionTurnedON>0){
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <GetHead+0x37c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	dd09      	ble.n	800753c <GetHead+0x2c0>
		strcat(Head,AlartStr_IgnitionTurnedON);
 8007528:	4a49      	ldr	r2, [pc, #292]	; (8007650 <GetHead+0x3d4>)
 800752a:	4b2d      	ldr	r3, [pc, #180]	; (80075e0 <GetHead+0x364>)
 800752c:	0011      	movs	r1, r2
 800752e:	0018      	movs	r0, r3
 8007530:	f00b fb98 	bl	8012c64 <strcat>
		IgnitionTurnedON=0;
 8007534:	4b30      	ldr	r3, [pc, #192]	; (80075f8 <GetHead+0x37c>)
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e0c9      	b.n	80076d0 <GetHead+0x454>
	}
	else if(IgnitionTurnedOFF>0){
 800753c:	4b30      	ldr	r3, [pc, #192]	; (8007600 <GetHead+0x384>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	dd09      	ble.n	8007558 <GetHead+0x2dc>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 8007544:	4a43      	ldr	r2, [pc, #268]	; (8007654 <GetHead+0x3d8>)
 8007546:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <GetHead+0x364>)
 8007548:	0011      	movs	r1, r2
 800754a:	0018      	movs	r0, r3
 800754c:	f00b fb8a 	bl	8012c64 <strcat>
		IgnitionTurnedOFF=0;
 8007550:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <GetHead+0x384>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e0bb      	b.n	80076d0 <GetHead+0x454>
	}
	else if(BOX_STATE=='C'){
 8007558:	4b3f      	ldr	r3, [pc, #252]	; (8007658 <GetHead+0x3dc>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b43      	cmp	r3, #67	; 0x43
 800755e:	d106      	bne.n	800756e <GetHead+0x2f2>
		strcat(Head,AlartStr_BoxTemper);
 8007560:	4a3e      	ldr	r2, [pc, #248]	; (800765c <GetHead+0x3e0>)
 8007562:	4b1f      	ldr	r3, [pc, #124]	; (80075e0 <GetHead+0x364>)
 8007564:	0011      	movs	r1, r2
 8007566:	0018      	movs	r0, r3
 8007568:	f00b fb7c 	bl	8012c64 <strcat>
 800756c:	e0b0      	b.n	80076d0 <GetHead+0x454>
	}
	else if(InternalBatterLow>0){
 800756e:	4b25      	ldr	r3, [pc, #148]	; (8007604 <GetHead+0x388>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	dd09      	ble.n	800758a <GetHead+0x30e>
		strcat(Head,AlartStr_InternalBatterLow);
 8007576:	4a3a      	ldr	r2, [pc, #232]	; (8007660 <GetHead+0x3e4>)
 8007578:	4b19      	ldr	r3, [pc, #100]	; (80075e0 <GetHead+0x364>)
 800757a:	0011      	movs	r1, r2
 800757c:	0018      	movs	r0, r3
 800757e:	f00b fb71 	bl	8012c64 <strcat>
		InternalBatterLow=0;
 8007582:	4b20      	ldr	r3, [pc, #128]	; (8007604 <GetHead+0x388>)
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e0a2      	b.n	80076d0 <GetHead+0x454>
	}
	else if(InternalBatteryChargedAgain>0){
 800758a:	4b21      	ldr	r3, [pc, #132]	; (8007610 <GetHead+0x394>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	dd09      	ble.n	80075a6 <GetHead+0x32a>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 8007592:	4a34      	ldr	r2, [pc, #208]	; (8007664 <GetHead+0x3e8>)
 8007594:	4b12      	ldr	r3, [pc, #72]	; (80075e0 <GetHead+0x364>)
 8007596:	0011      	movs	r1, r2
 8007598:	0018      	movs	r0, r3
 800759a:	f00b fb63 	bl	8012c64 <strcat>
		InternalBatteryChargedAgain=0;
 800759e:	4b1c      	ldr	r3, [pc, #112]	; (8007610 <GetHead+0x394>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e094      	b.n	80076d0 <GetHead+0x454>
	}
	else if(MainBatteryDisconnect>0){
 80075a6:	4b1b      	ldr	r3, [pc, #108]	; (8007614 <GetHead+0x398>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dd09      	ble.n	80075c2 <GetHead+0x346>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 80075ae:	4a2e      	ldr	r2, [pc, #184]	; (8007668 <GetHead+0x3ec>)
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <GetHead+0x364>)
 80075b2:	0011      	movs	r1, r2
 80075b4:	0018      	movs	r0, r3
 80075b6:	f00b fb55 	bl	8012c64 <strcat>
		MainBatteryDisconnect=0;
 80075ba:	4b16      	ldr	r3, [pc, #88]	; (8007614 <GetHead+0x398>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e086      	b.n	80076d0 <GetHead+0x454>

	}
	else if(MainBatteryReconnect>0){
 80075c2:	4b15      	ldr	r3, [pc, #84]	; (8007618 <GetHead+0x39c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	dd52      	ble.n	8007670 <GetHead+0x3f4>
		strcat(Head,AlartStr_MainBatteryReconnect);
 80075ca:	4a28      	ldr	r2, [pc, #160]	; (800766c <GetHead+0x3f0>)
 80075cc:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <GetHead+0x364>)
 80075ce:	0011      	movs	r1, r2
 80075d0:	0018      	movs	r0, r3
 80075d2:	f00b fb47 	bl	8012c64 <strcat>
		MainBatteryReconnect=0;
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <GetHead+0x39c>)
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e078      	b.n	80076d0 <GetHead+0x454>
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	20003c48 	.word	0x20003c48
 80075e4:	20000048 	.word	0x20000048
 80075e8:	20000054 	.word	0x20000054
 80075ec:	200000f0 	.word	0x200000f0
 80075f0:	20003c34 	.word	0x20003c34
 80075f4:	20003ccc 	.word	0x20003ccc
 80075f8:	20003cd0 	.word	0x20003cd0
 80075fc:	20003c2c 	.word	0x20003c2c
 8007600:	20003cd4 	.word	0x20003cd4
 8007604:	20003cd8 	.word	0x20003cd8
 8007608:	20003c44 	.word	0x20003c44
 800760c:	40400000 	.word	0x40400000
 8007610:	20003cdc 	.word	0x20003cdc
 8007614:	20003ce0 	.word	0x20003ce0
 8007618:	20003ce4 	.word	0x20003ce4
 800761c:	200015b8 	.word	0x200015b8
 8007620:	41200000 	.word	0x41200000
 8007624:	20000064 	.word	0x20000064
 8007628:	20000000 	.word	0x20000000
 800762c:	200000e4 	.word	0x200000e4
 8007630:	20003ce8 	.word	0x20003ce8
 8007634:	200000dc 	.word	0x200000dc
 8007638:	20000534 	.word	0x20000534
 800763c:	200000b4 	.word	0x200000b4
 8007640:	200000bc 	.word	0x200000bc
 8007644:	200000c4 	.word	0x200000c4
 8007648:	200000a4 	.word	0x200000a4
 800764c:	200000ac 	.word	0x200000ac
 8007650:	20000094 	.word	0x20000094
 8007654:	2000009c 	.word	0x2000009c
 8007658:	20000047 	.word	0x20000047
 800765c:	2000008c 	.word	0x2000008c
 8007660:	2000007c 	.word	0x2000007c
 8007664:	20000084 	.word	0x20000084
 8007668:	2000006c 	.word	0x2000006c
 800766c:	20000074 	.word	0x20000074
	}
	else if(HistoryPVTData>0){
 8007670:	4b2b      	ldr	r3, [pc, #172]	; (8007720 <GetHead+0x4a4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	dd09      	ble.n	800768c <GetHead+0x410>
		strcat(Head,AlartStr_HistoryPVTData);
 8007678:	4a2a      	ldr	r2, [pc, #168]	; (8007724 <GetHead+0x4a8>)
 800767a:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <GetHead+0x4ac>)
 800767c:	0011      	movs	r1, r2
 800767e:	0018      	movs	r0, r3
 8007680:	f00b faf0 	bl	8012c64 <strcat>
		HistoryPVTData=0;
 8007684:	4b26      	ldr	r3, [pc, #152]	; (8007720 <GetHead+0x4a4>)
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e021      	b.n	80076d0 <GetHead+0x454>
	}
	else if(HealthPacket>0){
 800768c:	4b27      	ldr	r3, [pc, #156]	; (800772c <GetHead+0x4b0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	dd09      	ble.n	80076a8 <GetHead+0x42c>
		strcat(Head,AlartStr_HealthPacket);
 8007694:	4a26      	ldr	r2, [pc, #152]	; (8007730 <GetHead+0x4b4>)
 8007696:	4b24      	ldr	r3, [pc, #144]	; (8007728 <GetHead+0x4ac>)
 8007698:	0011      	movs	r1, r2
 800769a:	0018      	movs	r0, r3
 800769c:	f00b fae2 	bl	8012c64 <strcat>
		HealthPacket=0;
 80076a0:	4b22      	ldr	r3, [pc, #136]	; (800772c <GetHead+0x4b0>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e013      	b.n	80076d0 <GetHead+0x454>
	}
	else if(OTAParameterChange>0){
 80076a8:	4b22      	ldr	r3, [pc, #136]	; (8007734 <GetHead+0x4b8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	dd09      	ble.n	80076c4 <GetHead+0x448>
		strcat(Head,AlartStr_OTAParameterChange);
 80076b0:	4a21      	ldr	r2, [pc, #132]	; (8007738 <GetHead+0x4bc>)
 80076b2:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <GetHead+0x4ac>)
 80076b4:	0011      	movs	r1, r2
 80076b6:	0018      	movs	r0, r3
 80076b8:	f00b fad4 	bl	8012c64 <strcat>
		OTAParameterChange=0;
 80076bc:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <GetHead+0x4b8>)
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	e005      	b.n	80076d0 <GetHead+0x454>
	}
	else{
		strcat(Head,AlartStr_NormalPkt);
 80076c4:	4a1d      	ldr	r2, [pc, #116]	; (800773c <GetHead+0x4c0>)
 80076c6:	4b18      	ldr	r3, [pc, #96]	; (8007728 <GetHead+0x4ac>)
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f00b faca 	bl	8012c64 <strcat>
	}


	if(GSMSignal<=10){
 80076d0:	4b1b      	ldr	r3, [pc, #108]	; (8007740 <GetHead+0x4c4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	491b      	ldr	r1, [pc, #108]	; (8007744 <GetHead+0x4c8>)
 80076d6:	1c18      	adds	r0, r3, #0
 80076d8:	f7f8 ff02 	bl	80004e0 <__aeabi_fcmple>
 80076dc:	1e03      	subs	r3, r0, #0
 80076de:	d00f      	beq.n	8007700 <GetHead+0x484>
			strcat(Head,PacketStatusStrHist);
 80076e0:	4b11      	ldr	r3, [pc, #68]	; (8007728 <GetHead+0x4ac>)
 80076e2:	0018      	movs	r0, r3
 80076e4:	f7f8 fd10 	bl	8000108 <strlen>
 80076e8:	0003      	movs	r3, r0
 80076ea:	001a      	movs	r2, r3
 80076ec:	4b0e      	ldr	r3, [pc, #56]	; (8007728 <GetHead+0x4ac>)
 80076ee:	18d2      	adds	r2, r2, r3
 80076f0:	4b15      	ldr	r3, [pc, #84]	; (8007748 <GetHead+0x4cc>)
 80076f2:	0010      	movs	r0, r2
 80076f4:	0019      	movs	r1, r3
 80076f6:	2303      	movs	r3, #3
 80076f8:	001a      	movs	r2, r3
 80076fa:	f00b fc73 	bl	8012fe4 <memcpy>
 80076fe:	e005      	b.n	800770c <GetHead+0x490>
	}else{
		strcat(Head,PacketStatusStrLive);
 8007700:	4a12      	ldr	r2, [pc, #72]	; (800774c <GetHead+0x4d0>)
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <GetHead+0x4ac>)
 8007704:	0011      	movs	r1, r2
 8007706:	0018      	movs	r0, r3
 8007708:	f00b faac 	bl	8012c64 <strcat>
	}

	//%%%%%%%    AccGyro Rest    %%%%%%
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <GetHead+0x4d4>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	dd02      	ble.n	800771a <GetHead+0x49e>
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <GetHead+0x4d4>)
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]


}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	46bd      	mov	sp, r7
 800771e:	bdb0      	pop	{r4, r5, r7, pc}
 8007720:	20003cc0 	.word	0x20003cc0
 8007724:	20000064 	.word	0x20000064
 8007728:	20003c48 	.word	0x20003c48
 800772c:	20003cc4 	.word	0x20003cc4
 8007730:	200000d4 	.word	0x200000d4
 8007734:	20003cc8 	.word	0x20003cc8
 8007738:	200000cc 	.word	0x200000cc
 800773c:	2000005c 	.word	0x2000005c
 8007740:	200015b8 	.word	0x200015b8
 8007744:	41200000 	.word	0x41200000
 8007748:	08017f10 	.word	0x08017f10
 800774c:	200000ec 	.word	0x200000ec
 8007750:	20000538 	.word	0x20000538

08007754 <TestRun>:

void TestRun(){
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0



	if(errorlen>10){
 800775a:	4b05      	ldr	r3, [pc, #20]	; (8007770 <TestRun+0x1c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b0a      	cmp	r3, #10
 8007760:	dd0a      	ble.n	8007778 <TestRun+0x24>
		Debug_Tx("GSMUART error rebooting device");
 8007762:	4b04      	ldr	r3, [pc, #16]	; (8007774 <TestRun+0x20>)
 8007764:	0018      	movs	r0, r3
 8007766:	f000 fb93 	bl	8007e90 <Debug_Tx>
		NVIC_SystemReset();
 800776a:	f7fb fd8d 	bl	8003288 <__NVIC_SystemReset>
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	200015b4 	.word	0x200015b4
 8007774:	08017cdc 	.word	0x08017cdc
	//printInt(seqNo);




	  memset(IMEI,0,20);
 8007778:	4bfd      	ldr	r3, [pc, #1012]	; (8007b70 <TestRun+0x41c>)
 800777a:	2214      	movs	r2, #20
 800777c:	2100      	movs	r1, #0
 800777e:	0018      	movs	r0, r3
 8007780:	f00b fa68 	bl	8012c54 <memset>
	  memset(Regno,0,20);
 8007784:	4bfb      	ldr	r3, [pc, #1004]	; (8007b74 <TestRun+0x420>)
 8007786:	2214      	movs	r2, #20
 8007788:	2100      	movs	r1, #0
 800778a:	0018      	movs	r0, r3
 800778c:	f00b fa62 	bl	8012c54 <memset>
	  strcpy(IMEI,GSMIMEI());
 8007790:	f7fc f9b0 	bl	8003af4 <GSMIMEI>
 8007794:	0002      	movs	r2, r0
 8007796:	4bf6      	ldr	r3, [pc, #984]	; (8007b70 <TestRun+0x41c>)
 8007798:	0011      	movs	r1, r2
 800779a:	0018      	movs	r0, r3
 800779c:	f00b fc0f 	bl	8012fbe <strcpy>
	  strcpy(Regno,readRegNo());
 80077a0:	f7fd ffc8 	bl	8005734 <readRegNo>
 80077a4:	0002      	movs	r2, r0
 80077a6:	4bf3      	ldr	r3, [pc, #972]	; (8007b74 <TestRun+0x420>)
 80077a8:	0011      	movs	r1, r2
 80077aa:	0018      	movs	r0, r3
 80077ac:	f00b fc07 	bl	8012fbe <strcpy>

memset(INSMSno,0,30);
 80077b0:	4bf1      	ldr	r3, [pc, #964]	; (8007b78 <TestRun+0x424>)
 80077b2:	221e      	movs	r2, #30
 80077b4:	2100      	movs	r1, #0
 80077b6:	0018      	movs	r0, r3
 80077b8:	f00b fa4c 	bl	8012c54 <memset>
memset(OUTSMSno,0,30);
 80077bc:	4bef      	ldr	r3, [pc, #956]	; (8007b7c <TestRun+0x428>)
 80077be:	221e      	movs	r2, #30
 80077c0:	2100      	movs	r1, #0
 80077c2:	0018      	movs	r0, r3
 80077c4:	f00b fa46 	bl	8012c54 <memset>
memset(EmgIP,0,50);
 80077c8:	4bed      	ldr	r3, [pc, #948]	; (8007b80 <TestRun+0x42c>)
 80077ca:	2232      	movs	r2, #50	; 0x32
 80077cc:	2100      	movs	r1, #0
 80077ce:	0018      	movs	r0, r3
 80077d0:	f00b fa40 	bl	8012c54 <memset>
memset(RegIP,0,50);
 80077d4:	4beb      	ldr	r3, [pc, #940]	; (8007b84 <TestRun+0x430>)
 80077d6:	2232      	movs	r2, #50	; 0x32
 80077d8:	2100      	movs	r1, #0
 80077da:	0018      	movs	r0, r3
 80077dc:	f00b fa3a 	bl	8012c54 <memset>
memset(TracIP,0,50);
 80077e0:	4be9      	ldr	r3, [pc, #932]	; (8007b88 <TestRun+0x434>)
 80077e2:	2232      	movs	r2, #50	; 0x32
 80077e4:	2100      	movs	r1, #0
 80077e6:	0018      	movs	r0, r3
 80077e8:	f00b fa34 	bl	8012c54 <memset>
memset(simop,0,25);
 80077ec:	4be7      	ldr	r3, [pc, #924]	; (8007b8c <TestRun+0x438>)
 80077ee:	2219      	movs	r2, #25
 80077f0:	2100      	movs	r1, #0
 80077f2:	0018      	movs	r0, r3
 80077f4:	f00b fa2e 	bl	8012c54 <memset>

strcpy(INSMSno,readINSMSno());
 80077f8:	f7fd ffc6 	bl	8005788 <readINSMSno>
 80077fc:	0002      	movs	r2, r0
 80077fe:	4bde      	ldr	r3, [pc, #888]	; (8007b78 <TestRun+0x424>)
 8007800:	0011      	movs	r1, r2
 8007802:	0018      	movs	r0, r3
 8007804:	f00b fbdb 	bl	8012fbe <strcpy>
strcpy(OUTSMSno,readOUTSMSno());
 8007808:	f7fd ffda 	bl	80057c0 <readOUTSMSno>
 800780c:	0002      	movs	r2, r0
 800780e:	4bdb      	ldr	r3, [pc, #876]	; (8007b7c <TestRun+0x428>)
 8007810:	0011      	movs	r1, r2
 8007812:	0018      	movs	r0, r3
 8007814:	f00b fbd3 	bl	8012fbe <strcpy>
strcpy(EmgIP,readEmgIP());
 8007818:	f7fd ffee 	bl	80057f8 <readEmgIP>
 800781c:	0002      	movs	r2, r0
 800781e:	4bd8      	ldr	r3, [pc, #864]	; (8007b80 <TestRun+0x42c>)
 8007820:	0011      	movs	r1, r2
 8007822:	0018      	movs	r0, r3
 8007824:	f00b fbcb 	bl	8012fbe <strcpy>
strcpy(RegIP,readRegIP());
 8007828:	f7fd fffe 	bl	8005828 <readRegIP>
 800782c:	0002      	movs	r2, r0
 800782e:	4bd5      	ldr	r3, [pc, #852]	; (8007b84 <TestRun+0x430>)
 8007830:	0011      	movs	r1, r2
 8007832:	0018      	movs	r0, r3
 8007834:	f00b fbc3 	bl	8012fbe <strcpy>
strcpy(TracIP,readTracIP());
 8007838:	f7fe f812 	bl	8005860 <readTracIP>
 800783c:	0002      	movs	r2, r0
 800783e:	4bd2      	ldr	r3, [pc, #840]	; (8007b88 <TestRun+0x434>)
 8007840:	0011      	movs	r1, r2
 8007842:	0018      	movs	r0, r3
 8007844:	f00b fbbb 	bl	8012fbe <strcpy>
strcpy(simop, GSMSimOperator());
 8007848:	f7fc f92e 	bl	8003aa8 <GSMSimOperator>
 800784c:	0002      	movs	r2, r0
 800784e:	4bcf      	ldr	r3, [pc, #828]	; (8007b8c <TestRun+0x438>)
 8007850:	0011      	movs	r1, r2
 8007852:	0018      	movs	r0, r3
 8007854:	f00b fbb3 	bl	8012fbe <strcpy>
strcpy(simop, GSMSimOperator());
 8007858:	f7fc f926 	bl	8003aa8 <GSMSimOperator>
 800785c:	0002      	movs	r2, r0
 800785e:	4bcb      	ldr	r3, [pc, #812]	; (8007b8c <TestRun+0x438>)
 8007860:	0011      	movs	r1, r2
 8007862:	0018      	movs	r0, r3
 8007864:	f00b fbab 	bl	8012fbe <strcpy>
strcpy(simop, GSMSimOperator());
 8007868:	f7fc f91e 	bl	8003aa8 <GSMSimOperator>
 800786c:	0002      	movs	r2, r0
 800786e:	4bc7      	ldr	r3, [pc, #796]	; (8007b8c <TestRun+0x438>)
 8007870:	0011      	movs	r1, r2
 8007872:	0018      	movs	r0, r3
 8007874:	f00b fba3 	bl	8012fbe <strcpy>


	//%%%%%%%    GSM Info Read    %%%%%%
	int GSMinfoT=tic();
 8007878:	f7fe fd94 	bl	80063a4 <tic>
 800787c:	0003      	movs	r3, r0
 800787e:	607b      	str	r3, [r7, #4]
	GSMCellInfo();
 8007880:	f7fc fb48 	bl	8003f14 <GSMCellInfo>

	toc(GSMinfoT,"_________________________While loop GSMinfo");
 8007884:	4ac2      	ldr	r2, [pc, #776]	; (8007b90 <TestRun+0x43c>)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	0011      	movs	r1, r2
 800788a:	0018      	movs	r0, r3
 800788c:	f7fe fd92 	bl	80063b4 <toc>
	//%%%%%%%    Convert Numbers to string    %%%%%%



	// %%%%%%%%%%%%%%%%%%%%%%%%%Create Protocall %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	GetHead();
 8007890:	f7ff fcf4 	bl	800727c <GetHead>
	//Debug_Tx(Head);



	if (debug==1){
 8007894:	4bbf      	ldr	r3, [pc, #764]	; (8007b94 <TestRun+0x440>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d000      	beq.n	800789e <TestRun+0x14a>
 800789c:	e0c1      	b.n	8007a22 <TestRun+0x2ce>
		memset(DataString,0,300);
 800789e:	2396      	movs	r3, #150	; 0x96
 80078a0:	005a      	lsls	r2, r3, #1
 80078a2:	4bbd      	ldr	r3, [pc, #756]	; (8007b98 <TestRun+0x444>)
 80078a4:	2100      	movs	r1, #0
 80078a6:	0018      	movs	r0, r3
 80078a8:	f00b f9d4 	bl	8012c54 <memset>
		strcat(DataString,"Head:");
 80078ac:	4bba      	ldr	r3, [pc, #744]	; (8007b98 <TestRun+0x444>)
 80078ae:	0018      	movs	r0, r3
 80078b0:	f7f8 fc2a 	bl	8000108 <strlen>
 80078b4:	0003      	movs	r3, r0
 80078b6:	001a      	movs	r2, r3
 80078b8:	4bb7      	ldr	r3, [pc, #732]	; (8007b98 <TestRun+0x444>)
 80078ba:	18d2      	adds	r2, r2, r3
 80078bc:	4bb7      	ldr	r3, [pc, #732]	; (8007b9c <TestRun+0x448>)
 80078be:	0010      	movs	r0, r2
 80078c0:	0019      	movs	r1, r3
 80078c2:	2306      	movs	r3, #6
 80078c4:	001a      	movs	r2, r3
 80078c6:	f00b fb8d 	bl	8012fe4 <memcpy>
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 80078ca:	4ab5      	ldr	r2, [pc, #724]	; (8007ba0 <TestRun+0x44c>)
 80078cc:	4bb2      	ldr	r3, [pc, #712]	; (8007b98 <TestRun+0x444>)
 80078ce:	0011      	movs	r1, r2
 80078d0:	0018      	movs	r0, r3
 80078d2:	f00b f9c7 	bl	8012c64 <strcat>
 80078d6:	4bb0      	ldr	r3, [pc, #704]	; (8007b98 <TestRun+0x444>)
 80078d8:	0018      	movs	r0, r3
 80078da:	f7f8 fc15 	bl	8000108 <strlen>
 80078de:	0003      	movs	r3, r0
 80078e0:	001a      	movs	r2, r3
 80078e2:	4bad      	ldr	r3, [pc, #692]	; (8007b98 <TestRun+0x444>)
 80078e4:	18d2      	adds	r2, r2, r3
 80078e6:	4baf      	ldr	r3, [pc, #700]	; (8007ba4 <TestRun+0x450>)
 80078e8:	0010      	movs	r0, r2
 80078ea:	0019      	movs	r1, r3
 80078ec:	2308      	movs	r3, #8
 80078ee:	001a      	movs	r2, r3
 80078f0:	f00b fb78 	bl	8012fe4 <memcpy>
		strcat(DataString,Regno);strcat(DataString,"\nGPSDS:");
 80078f4:	4a9f      	ldr	r2, [pc, #636]	; (8007b74 <TestRun+0x420>)
 80078f6:	4ba8      	ldr	r3, [pc, #672]	; (8007b98 <TestRun+0x444>)
 80078f8:	0011      	movs	r1, r2
 80078fa:	0018      	movs	r0, r3
 80078fc:	f00b f9b2 	bl	8012c64 <strcat>
 8007900:	4ba5      	ldr	r3, [pc, #660]	; (8007b98 <TestRun+0x444>)
 8007902:	0018      	movs	r0, r3
 8007904:	f7f8 fc00 	bl	8000108 <strlen>
 8007908:	0003      	movs	r3, r0
 800790a:	001a      	movs	r2, r3
 800790c:	4ba2      	ldr	r3, [pc, #648]	; (8007b98 <TestRun+0x444>)
 800790e:	18d2      	adds	r2, r2, r3
 8007910:	4ba5      	ldr	r3, [pc, #660]	; (8007ba8 <TestRun+0x454>)
 8007912:	0010      	movs	r0, r2
 8007914:	0019      	movs	r1, r3
 8007916:	2308      	movs	r3, #8
 8007918:	001a      	movs	r2, r3
 800791a:	f00b fb63 	bl	8012fe4 <memcpy>
		strcat(DataString,gpsDataRet);strcat(DataString,"\nIMEI:");
 800791e:	4aa3      	ldr	r2, [pc, #652]	; (8007bac <TestRun+0x458>)
 8007920:	4b9d      	ldr	r3, [pc, #628]	; (8007b98 <TestRun+0x444>)
 8007922:	0011      	movs	r1, r2
 8007924:	0018      	movs	r0, r3
 8007926:	f00b f99d 	bl	8012c64 <strcat>
 800792a:	4b9b      	ldr	r3, [pc, #620]	; (8007b98 <TestRun+0x444>)
 800792c:	0018      	movs	r0, r3
 800792e:	f7f8 fbeb 	bl	8000108 <strlen>
 8007932:	0003      	movs	r3, r0
 8007934:	001a      	movs	r2, r3
 8007936:	4b98      	ldr	r3, [pc, #608]	; (8007b98 <TestRun+0x444>)
 8007938:	18d2      	adds	r2, r2, r3
 800793a:	4b9d      	ldr	r3, [pc, #628]	; (8007bb0 <TestRun+0x45c>)
 800793c:	0010      	movs	r0, r2
 800793e:	0019      	movs	r1, r3
 8007940:	2307      	movs	r3, #7
 8007942:	001a      	movs	r2, r3
 8007944:	f00b fb4e 	bl	8012fe4 <memcpy>
		strcat(DataString,IMEI);strcat(DataString,"\nSIMOP:");
 8007948:	4a89      	ldr	r2, [pc, #548]	; (8007b70 <TestRun+0x41c>)
 800794a:	4b93      	ldr	r3, [pc, #588]	; (8007b98 <TestRun+0x444>)
 800794c:	0011      	movs	r1, r2
 800794e:	0018      	movs	r0, r3
 8007950:	f00b f988 	bl	8012c64 <strcat>
 8007954:	4b90      	ldr	r3, [pc, #576]	; (8007b98 <TestRun+0x444>)
 8007956:	0018      	movs	r0, r3
 8007958:	f7f8 fbd6 	bl	8000108 <strlen>
 800795c:	0003      	movs	r3, r0
 800795e:	001a      	movs	r2, r3
 8007960:	4b8d      	ldr	r3, [pc, #564]	; (8007b98 <TestRun+0x444>)
 8007962:	18d2      	adds	r2, r2, r3
 8007964:	4b93      	ldr	r3, [pc, #588]	; (8007bb4 <TestRun+0x460>)
 8007966:	0010      	movs	r0, r2
 8007968:	0019      	movs	r1, r3
 800796a:	2308      	movs	r3, #8
 800796c:	001a      	movs	r2, r3
 800796e:	f00b fb39 	bl	8012fe4 <memcpy>
		strcat(DataString,simop);strcat(DataString,"\nStratusString:");
 8007972:	4a86      	ldr	r2, [pc, #536]	; (8007b8c <TestRun+0x438>)
 8007974:	4b88      	ldr	r3, [pc, #544]	; (8007b98 <TestRun+0x444>)
 8007976:	0011      	movs	r1, r2
 8007978:	0018      	movs	r0, r3
 800797a:	f00b f973 	bl	8012c64 <strcat>
 800797e:	4b86      	ldr	r3, [pc, #536]	; (8007b98 <TestRun+0x444>)
 8007980:	0018      	movs	r0, r3
 8007982:	f7f8 fbc1 	bl	8000108 <strlen>
 8007986:	0003      	movs	r3, r0
 8007988:	001a      	movs	r2, r3
 800798a:	4b83      	ldr	r3, [pc, #524]	; (8007b98 <TestRun+0x444>)
 800798c:	18d2      	adds	r2, r2, r3
 800798e:	4b8a      	ldr	r3, [pc, #552]	; (8007bb8 <TestRun+0x464>)
 8007990:	0010      	movs	r0, r2
 8007992:	0019      	movs	r1, r3
 8007994:	2310      	movs	r3, #16
 8007996:	001a      	movs	r2, r3
 8007998:	f00b fb24 	bl	8012fe4 <memcpy>
		strcat(DataString,StatusStrng);strcat(DataString,"\nGsminfo:");
 800799c:	4a87      	ldr	r2, [pc, #540]	; (8007bbc <TestRun+0x468>)
 800799e:	4b7e      	ldr	r3, [pc, #504]	; (8007b98 <TestRun+0x444>)
 80079a0:	0011      	movs	r1, r2
 80079a2:	0018      	movs	r0, r3
 80079a4:	f00b f95e 	bl	8012c64 <strcat>
 80079a8:	4b7b      	ldr	r3, [pc, #492]	; (8007b98 <TestRun+0x444>)
 80079aa:	0018      	movs	r0, r3
 80079ac:	f7f8 fbac 	bl	8000108 <strlen>
 80079b0:	0003      	movs	r3, r0
 80079b2:	001a      	movs	r2, r3
 80079b4:	4b78      	ldr	r3, [pc, #480]	; (8007b98 <TestRun+0x444>)
 80079b6:	18d2      	adds	r2, r2, r3
 80079b8:	4b81      	ldr	r3, [pc, #516]	; (8007bc0 <TestRun+0x46c>)
 80079ba:	0010      	movs	r0, r2
 80079bc:	0019      	movs	r1, r3
 80079be:	230a      	movs	r3, #10
 80079c0:	001a      	movs	r2, r3
 80079c2:	f00b fb0f 	bl	8012fe4 <memcpy>
		strcat(DataString,gsminfo);strcat(DataString,"\nDig_io:");
 80079c6:	4a7f      	ldr	r2, [pc, #508]	; (8007bc4 <TestRun+0x470>)
 80079c8:	4b73      	ldr	r3, [pc, #460]	; (8007b98 <TestRun+0x444>)
 80079ca:	0011      	movs	r1, r2
 80079cc:	0018      	movs	r0, r3
 80079ce:	f00b f949 	bl	8012c64 <strcat>
 80079d2:	4b71      	ldr	r3, [pc, #452]	; (8007b98 <TestRun+0x444>)
 80079d4:	0018      	movs	r0, r3
 80079d6:	f7f8 fb97 	bl	8000108 <strlen>
 80079da:	0003      	movs	r3, r0
 80079dc:	001a      	movs	r2, r3
 80079de:	4b6e      	ldr	r3, [pc, #440]	; (8007b98 <TestRun+0x444>)
 80079e0:	18d2      	adds	r2, r2, r3
 80079e2:	4b79      	ldr	r3, [pc, #484]	; (8007bc8 <TestRun+0x474>)
 80079e4:	0010      	movs	r0, r2
 80079e6:	0019      	movs	r1, r3
 80079e8:	2309      	movs	r3, #9
 80079ea:	001a      	movs	r2, r3
 80079ec:	f00b fafa 	bl	8012fe4 <memcpy>
		strcat(DataString,Dig_io);strcat(DataString,",\n\0");
 80079f0:	4a76      	ldr	r2, [pc, #472]	; (8007bcc <TestRun+0x478>)
 80079f2:	4b69      	ldr	r3, [pc, #420]	; (8007b98 <TestRun+0x444>)
 80079f4:	0011      	movs	r1, r2
 80079f6:	0018      	movs	r0, r3
 80079f8:	f00b f934 	bl	8012c64 <strcat>
 80079fc:	4b66      	ldr	r3, [pc, #408]	; (8007b98 <TestRun+0x444>)
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7f8 fb82 	bl	8000108 <strlen>
 8007a04:	0003      	movs	r3, r0
 8007a06:	001a      	movs	r2, r3
 8007a08:	4b63      	ldr	r3, [pc, #396]	; (8007b98 <TestRun+0x444>)
 8007a0a:	18d2      	adds	r2, r2, r3
 8007a0c:	4b70      	ldr	r3, [pc, #448]	; (8007bd0 <TestRun+0x47c>)
 8007a0e:	0010      	movs	r0, r2
 8007a10:	0019      	movs	r1, r3
 8007a12:	2303      	movs	r3, #3
 8007a14:	001a      	movs	r2, r3
 8007a16:	f00b fae5 	bl	8012fe4 <memcpy>
		Debug_Tx(DataString);
 8007a1a:	4b5f      	ldr	r3, [pc, #380]	; (8007b98 <TestRun+0x444>)
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f000 fa37 	bl	8007e90 <Debug_Tx>
	}
	memset(data_LOGIN,0,100);
 8007a22:	4b6c      	ldr	r3, [pc, #432]	; (8007bd4 <TestRun+0x480>)
 8007a24:	2264      	movs	r2, #100	; 0x64
 8007a26:	2100      	movs	r1, #0
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f00b f913 	bl	8012c54 <memset>
	strcat(data_LOGIN,"$");
 8007a2e:	4b69      	ldr	r3, [pc, #420]	; (8007bd4 <TestRun+0x480>)
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7f8 fb69 	bl	8000108 <strlen>
 8007a36:	0003      	movs	r3, r0
 8007a38:	001a      	movs	r2, r3
 8007a3a:	4b66      	ldr	r3, [pc, #408]	; (8007bd4 <TestRun+0x480>)
 8007a3c:	18d2      	adds	r2, r2, r3
 8007a3e:	4b66      	ldr	r3, [pc, #408]	; (8007bd8 <TestRun+0x484>)
 8007a40:	0010      	movs	r0, r2
 8007a42:	0019      	movs	r1, r3
 8007a44:	2302      	movs	r3, #2
 8007a46:	001a      	movs	r2, r3
 8007a48:	f00b facc 	bl	8012fe4 <memcpy>
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8007a4c:	4a49      	ldr	r2, [pc, #292]	; (8007b74 <TestRun+0x420>)
 8007a4e:	4b61      	ldr	r3, [pc, #388]	; (8007bd4 <TestRun+0x480>)
 8007a50:	0011      	movs	r1, r2
 8007a52:	0018      	movs	r0, r3
 8007a54:	f00b f906 	bl	8012c64 <strcat>
 8007a58:	4b5e      	ldr	r3, [pc, #376]	; (8007bd4 <TestRun+0x480>)
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7f8 fb54 	bl	8000108 <strlen>
 8007a60:	0003      	movs	r3, r0
 8007a62:	001a      	movs	r2, r3
 8007a64:	4b5b      	ldr	r3, [pc, #364]	; (8007bd4 <TestRun+0x480>)
 8007a66:	18d2      	adds	r2, r2, r3
 8007a68:	4b5c      	ldr	r3, [pc, #368]	; (8007bdc <TestRun+0x488>)
 8007a6a:	0010      	movs	r0, r2
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	2302      	movs	r3, #2
 8007a70:	001a      	movs	r2, r3
 8007a72:	f00b fab7 	bl	8012fe4 <memcpy>
	strcat(data_LOGIN,"$");
 8007a76:	4b57      	ldr	r3, [pc, #348]	; (8007bd4 <TestRun+0x480>)
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7f8 fb45 	bl	8000108 <strlen>
 8007a7e:	0003      	movs	r3, r0
 8007a80:	001a      	movs	r2, r3
 8007a82:	4b54      	ldr	r3, [pc, #336]	; (8007bd4 <TestRun+0x480>)
 8007a84:	18d2      	adds	r2, r2, r3
 8007a86:	4b54      	ldr	r3, [pc, #336]	; (8007bd8 <TestRun+0x484>)
 8007a88:	0010      	movs	r0, r2
 8007a8a:	0019      	movs	r1, r3
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	001a      	movs	r2, r3
 8007a90:	f00b faa8 	bl	8012fe4 <memcpy>
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8007a94:	4a36      	ldr	r2, [pc, #216]	; (8007b70 <TestRun+0x41c>)
 8007a96:	4b4f      	ldr	r3, [pc, #316]	; (8007bd4 <TestRun+0x480>)
 8007a98:	0011      	movs	r1, r2
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f00b f8e2 	bl	8012c64 <strcat>
 8007aa0:	4b4c      	ldr	r3, [pc, #304]	; (8007bd4 <TestRun+0x480>)
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f7f8 fb30 	bl	8000108 <strlen>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	001a      	movs	r2, r3
 8007aac:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <TestRun+0x480>)
 8007aae:	18d2      	adds	r2, r2, r3
 8007ab0:	4b4a      	ldr	r3, [pc, #296]	; (8007bdc <TestRun+0x488>)
 8007ab2:	0010      	movs	r0, r2
 8007ab4:	0019      	movs	r1, r3
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	001a      	movs	r2, r3
 8007aba:	f00b fa93 	bl	8012fe4 <memcpy>
	strcat(data_LOGIN,"$");
 8007abe:	4b45      	ldr	r3, [pc, #276]	; (8007bd4 <TestRun+0x480>)
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f7f8 fb21 	bl	8000108 <strlen>
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	001a      	movs	r2, r3
 8007aca:	4b42      	ldr	r3, [pc, #264]	; (8007bd4 <TestRun+0x480>)
 8007acc:	18d2      	adds	r2, r2, r3
 8007ace:	4b42      	ldr	r3, [pc, #264]	; (8007bd8 <TestRun+0x484>)
 8007ad0:	0010      	movs	r0, r2
 8007ad2:	0019      	movs	r1, r3
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	f00b fa84 	bl	8012fe4 <memcpy>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8007adc:	4a40      	ldr	r2, [pc, #256]	; (8007be0 <TestRun+0x48c>)
 8007ade:	4b3d      	ldr	r3, [pc, #244]	; (8007bd4 <TestRun+0x480>)
 8007ae0:	0011      	movs	r1, r2
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f00b f8be 	bl	8012c64 <strcat>
 8007ae8:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <TestRun+0x480>)
 8007aea:	0018      	movs	r0, r3
 8007aec:	f7f8 fb0c 	bl	8000108 <strlen>
 8007af0:	0003      	movs	r3, r0
 8007af2:	001a      	movs	r2, r3
 8007af4:	4b37      	ldr	r3, [pc, #220]	; (8007bd4 <TestRun+0x480>)
 8007af6:	18d2      	adds	r2, r2, r3
 8007af8:	4b38      	ldr	r3, [pc, #224]	; (8007bdc <TestRun+0x488>)
 8007afa:	0010      	movs	r0, r2
 8007afc:	0019      	movs	r1, r3
 8007afe:	2302      	movs	r3, #2
 8007b00:	001a      	movs	r2, r3
 8007b02:	f00b fa6f 	bl	8012fe4 <memcpy>
	strcat(data_LOGIN,"$");
 8007b06:	4b33      	ldr	r3, [pc, #204]	; (8007bd4 <TestRun+0x480>)
 8007b08:	0018      	movs	r0, r3
 8007b0a:	f7f8 fafd 	bl	8000108 <strlen>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	001a      	movs	r2, r3
 8007b12:	4b30      	ldr	r3, [pc, #192]	; (8007bd4 <TestRun+0x480>)
 8007b14:	18d2      	adds	r2, r2, r3
 8007b16:	4b30      	ldr	r3, [pc, #192]	; (8007bd8 <TestRun+0x484>)
 8007b18:	0010      	movs	r0, r2
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	001a      	movs	r2, r3
 8007b20:	f00b fa60 	bl	8012fe4 <memcpy>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0E0W,");
 8007b24:	4a2e      	ldr	r2, [pc, #184]	; (8007be0 <TestRun+0x48c>)
 8007b26:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <TestRun+0x480>)
 8007b28:	0011      	movs	r1, r2
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f00b f89a 	bl	8012c64 <strcat>
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <TestRun+0x480>)
 8007b32:	0018      	movs	r0, r3
 8007b34:	f7f8 fae8 	bl	8000108 <strlen>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	001a      	movs	r2, r3
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <TestRun+0x480>)
 8007b3e:	18d2      	adds	r2, r2, r3
 8007b40:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <TestRun+0x490>)
 8007b42:	0010      	movs	r0, r2
 8007b44:	0019      	movs	r1, r3
 8007b46:	2307      	movs	r3, #7
 8007b48:	001a      	movs	r2, r3
 8007b4a:	f00b fa4b 	bl	8012fe4 <memcpy>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <TestRun+0x480>)
 8007b50:	0018      	movs	r0, r3
 8007b52:	f7fe f9d7 	bl	8005f04 <nmea0183_checksum>
 8007b56:	0002      	movs	r2, r0
 8007b58:	4923      	ldr	r1, [pc, #140]	; (8007be8 <TestRun+0x494>)
 8007b5a:	4b24      	ldr	r3, [pc, #144]	; (8007bec <TestRun+0x498>)
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f00b f80d 	bl	8012b7c <siprintf>
	strcat(data_LOGIN,checksum);
 8007b62:	4a22      	ldr	r2, [pc, #136]	; (8007bec <TestRun+0x498>)
 8007b64:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <TestRun+0x480>)
 8007b66:	0011      	movs	r1, r2
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f00b f87b 	bl	8012c64 <strcat>
 8007b6e:	e03f      	b.n	8007bf0 <TestRun+0x49c>
 8007b70:	20000440 	.word	0x20000440
 8007b74:	2000042c 	.word	0x2000042c
 8007b78:	20000458 	.word	0x20000458
 8007b7c:	20000478 	.word	0x20000478
 8007b80:	20000498 	.word	0x20000498
 8007b84:	200004cc 	.word	0x200004cc
 8007b88:	20000500 	.word	0x20000500
 8007b8c:	2000053c 	.word	0x2000053c
 8007b90:	08017cfc 	.word	0x08017cfc
 8007b94:	2000000c 	.word	0x2000000c
 8007b98:	200002fc 	.word	0x200002fc
 8007b9c:	08017d28 	.word	0x08017d28
 8007ba0:	20003c48 	.word	0x20003c48
 8007ba4:	08017d30 	.word	0x08017d30
 8007ba8:	08017d38 	.word	0x08017d38
 8007bac:	20003ba4 	.word	0x20003ba4
 8007bb0:	08017d40 	.word	0x08017d40
 8007bb4:	08017d48 	.word	0x08017d48
 8007bb8:	08017d50 	.word	0x08017d50
 8007bbc:	20003cac 	.word	0x20003cac
 8007bc0:	08017d60 	.word	0x08017d60
 8007bc4:	20001500 	.word	0x20001500
 8007bc8:	08017d6c 	.word	0x08017d6c
 8007bcc:	20003c04 	.word	0x20003c04
 8007bd0:	08017d78 	.word	0x08017d78
 8007bd4:	20001430 	.word	0x20001430
 8007bd8:	08017d7c 	.word	0x08017d7c
 8007bdc:	08016878 	.word	0x08016878
 8007be0:	20000054 	.word	0x20000054
 8007be4:	08017d80 	.word	0x08017d80
 8007be8:	08017d88 	.word	0x08017d88
 8007bec:	20003cec 	.word	0x20003cec
	strcat(data_LOGIN,",*\0");
 8007bf0:	4b90      	ldr	r3, [pc, #576]	; (8007e34 <TestRun+0x6e0>)
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f7f8 fa88 	bl	8000108 <strlen>
 8007bf8:	0003      	movs	r3, r0
 8007bfa:	001a      	movs	r2, r3
 8007bfc:	4b8d      	ldr	r3, [pc, #564]	; (8007e34 <TestRun+0x6e0>)
 8007bfe:	18d2      	adds	r2, r2, r3
 8007c00:	4b8d      	ldr	r3, [pc, #564]	; (8007e38 <TestRun+0x6e4>)
 8007c02:	0010      	movs	r0, r2
 8007c04:	0019      	movs	r1, r3
 8007c06:	2303      	movs	r3, #3
 8007c08:	001a      	movs	r2, r3
 8007c0a:	f00b f9eb 	bl	8012fe4 <memcpy>

    memset(checksum,0,3);
 8007c0e:	4b8b      	ldr	r3, [pc, #556]	; (8007e3c <TestRun+0x6e8>)
 8007c10:	2203      	movs	r2, #3
 8007c12:	2100      	movs	r1, #0
 8007c14:	0018      	movs	r0, r3
 8007c16:	f00b f81d 	bl	8012c54 <memset>
    memset(DataString,0,300);
 8007c1a:	2396      	movs	r3, #150	; 0x96
 8007c1c:	005a      	lsls	r2, r3, #1
 8007c1e:	4b88      	ldr	r3, [pc, #544]	; (8007e40 <TestRun+0x6ec>)
 8007c20:	2100      	movs	r1, #0
 8007c22:	0018      	movs	r0, r3
 8007c24:	f00b f816 	bl	8012c54 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8007c28:	4a86      	ldr	r2, [pc, #536]	; (8007e44 <TestRun+0x6f0>)
 8007c2a:	4b85      	ldr	r3, [pc, #532]	; (8007e40 <TestRun+0x6ec>)
 8007c2c:	0011      	movs	r1, r2
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f00b f818 	bl	8012c64 <strcat>
 8007c34:	4b82      	ldr	r3, [pc, #520]	; (8007e40 <TestRun+0x6ec>)
 8007c36:	0018      	movs	r0, r3
 8007c38:	f7f8 fa66 	bl	8000108 <strlen>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	001a      	movs	r2, r3
 8007c40:	4b7f      	ldr	r3, [pc, #508]	; (8007e40 <TestRun+0x6ec>)
 8007c42:	18d2      	adds	r2, r2, r3
 8007c44:	4b80      	ldr	r3, [pc, #512]	; (8007e48 <TestRun+0x6f4>)
 8007c46:	0010      	movs	r0, r2
 8007c48:	0019      	movs	r1, r3
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	001a      	movs	r2, r3
 8007c4e:	f00b f9c9 	bl	8012fe4 <memcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8007c52:	4a7e      	ldr	r2, [pc, #504]	; (8007e4c <TestRun+0x6f8>)
 8007c54:	4b7a      	ldr	r3, [pc, #488]	; (8007e40 <TestRun+0x6ec>)
 8007c56:	0011      	movs	r1, r2
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f00b f803 	bl	8012c64 <strcat>
 8007c5e:	4b78      	ldr	r3, [pc, #480]	; (8007e40 <TestRun+0x6ec>)
 8007c60:	0018      	movs	r0, r3
 8007c62:	f7f8 fa51 	bl	8000108 <strlen>
 8007c66:	0003      	movs	r3, r0
 8007c68:	001a      	movs	r2, r3
 8007c6a:	4b75      	ldr	r3, [pc, #468]	; (8007e40 <TestRun+0x6ec>)
 8007c6c:	18d2      	adds	r2, r2, r3
 8007c6e:	4b76      	ldr	r3, [pc, #472]	; (8007e48 <TestRun+0x6f4>)
 8007c70:	0010      	movs	r0, r2
 8007c72:	0019      	movs	r1, r3
 8007c74:	2302      	movs	r3, #2
 8007c76:	001a      	movs	r2, r3
 8007c78:	f00b f9b4 	bl	8012fe4 <memcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 8007c7c:	4a74      	ldr	r2, [pc, #464]	; (8007e50 <TestRun+0x6fc>)
 8007c7e:	4b70      	ldr	r3, [pc, #448]	; (8007e40 <TestRun+0x6ec>)
 8007c80:	0011      	movs	r1, r2
 8007c82:	0018      	movs	r0, r3
 8007c84:	f00a ffee 	bl	8012c64 <strcat>
 8007c88:	4b6d      	ldr	r3, [pc, #436]	; (8007e40 <TestRun+0x6ec>)
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	f7f8 fa3c 	bl	8000108 <strlen>
 8007c90:	0003      	movs	r3, r0
 8007c92:	001a      	movs	r2, r3
 8007c94:	4b6a      	ldr	r3, [pc, #424]	; (8007e40 <TestRun+0x6ec>)
 8007c96:	18d2      	adds	r2, r2, r3
 8007c98:	4b6b      	ldr	r3, [pc, #428]	; (8007e48 <TestRun+0x6f4>)
 8007c9a:	0010      	movs	r0, r2
 8007c9c:	0019      	movs	r1, r3
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	001a      	movs	r2, r3
 8007ca2:	f00b f99f 	bl	8012fe4 <memcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8007ca6:	4a6b      	ldr	r2, [pc, #428]	; (8007e54 <TestRun+0x700>)
 8007ca8:	4b65      	ldr	r3, [pc, #404]	; (8007e40 <TestRun+0x6ec>)
 8007caa:	0011      	movs	r1, r2
 8007cac:	0018      	movs	r0, r3
 8007cae:	f00a ffd9 	bl	8012c64 <strcat>
 8007cb2:	4b63      	ldr	r3, [pc, #396]	; (8007e40 <TestRun+0x6ec>)
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7f8 fa27 	bl	8000108 <strlen>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	001a      	movs	r2, r3
 8007cbe:	4b60      	ldr	r3, [pc, #384]	; (8007e40 <TestRun+0x6ec>)
 8007cc0:	18d2      	adds	r2, r2, r3
 8007cc2:	4b61      	ldr	r3, [pc, #388]	; (8007e48 <TestRun+0x6f4>)
 8007cc4:	0010      	movs	r0, r2
 8007cc6:	0019      	movs	r1, r3
 8007cc8:	2302      	movs	r3, #2
 8007cca:	001a      	movs	r2, r3
 8007ccc:	f00b f98a 	bl	8012fe4 <memcpy>
	strcat(DataString,simop);strcat(DataString,",");
 8007cd0:	4a61      	ldr	r2, [pc, #388]	; (8007e58 <TestRun+0x704>)
 8007cd2:	4b5b      	ldr	r3, [pc, #364]	; (8007e40 <TestRun+0x6ec>)
 8007cd4:	0011      	movs	r1, r2
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f00a ffc4 	bl	8012c64 <strcat>
 8007cdc:	4b58      	ldr	r3, [pc, #352]	; (8007e40 <TestRun+0x6ec>)
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f7f8 fa12 	bl	8000108 <strlen>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	001a      	movs	r2, r3
 8007ce8:	4b55      	ldr	r3, [pc, #340]	; (8007e40 <TestRun+0x6ec>)
 8007cea:	18d2      	adds	r2, r2, r3
 8007cec:	4b56      	ldr	r3, [pc, #344]	; (8007e48 <TestRun+0x6f4>)
 8007cee:	0010      	movs	r0, r2
 8007cf0:	0019      	movs	r1, r3
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	001a      	movs	r2, r3
 8007cf6:	f00b f975 	bl	8012fe4 <memcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8007cfa:	4a58      	ldr	r2, [pc, #352]	; (8007e5c <TestRun+0x708>)
 8007cfc:	4b50      	ldr	r3, [pc, #320]	; (8007e40 <TestRun+0x6ec>)
 8007cfe:	0011      	movs	r1, r2
 8007d00:	0018      	movs	r0, r3
 8007d02:	f00a ffaf 	bl	8012c64 <strcat>
 8007d06:	4b4e      	ldr	r3, [pc, #312]	; (8007e40 <TestRun+0x6ec>)
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f7f8 f9fd 	bl	8000108 <strlen>
 8007d0e:	0003      	movs	r3, r0
 8007d10:	001a      	movs	r2, r3
 8007d12:	4b4b      	ldr	r3, [pc, #300]	; (8007e40 <TestRun+0x6ec>)
 8007d14:	18d2      	adds	r2, r2, r3
 8007d16:	4b4c      	ldr	r3, [pc, #304]	; (8007e48 <TestRun+0x6f4>)
 8007d18:	0010      	movs	r0, r2
 8007d1a:	0019      	movs	r1, r3
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	001a      	movs	r2, r3
 8007d20:	f00b f960 	bl	8012fe4 <memcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8007d24:	4a4e      	ldr	r2, [pc, #312]	; (8007e60 <TestRun+0x70c>)
 8007d26:	4b46      	ldr	r3, [pc, #280]	; (8007e40 <TestRun+0x6ec>)
 8007d28:	0011      	movs	r1, r2
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f00a ff9a 	bl	8012c64 <strcat>
 8007d30:	4b43      	ldr	r3, [pc, #268]	; (8007e40 <TestRun+0x6ec>)
 8007d32:	0018      	movs	r0, r3
 8007d34:	f7f8 f9e8 	bl	8000108 <strlen>
 8007d38:	0003      	movs	r3, r0
 8007d3a:	001a      	movs	r2, r3
 8007d3c:	4b40      	ldr	r3, [pc, #256]	; (8007e40 <TestRun+0x6ec>)
 8007d3e:	18d2      	adds	r2, r2, r3
 8007d40:	4b41      	ldr	r3, [pc, #260]	; (8007e48 <TestRun+0x6f4>)
 8007d42:	0010      	movs	r0, r2
 8007d44:	0019      	movs	r1, r3
 8007d46:	2302      	movs	r3, #2
 8007d48:	001a      	movs	r2, r3
 8007d4a:	f00b f94b 	bl	8012fe4 <memcpy>
 	strcat(DataString,Dig_io);strcat(DataString,"\0");
 8007d4e:	4a45      	ldr	r2, [pc, #276]	; (8007e64 <TestRun+0x710>)
 8007d50:	4b3b      	ldr	r3, [pc, #236]	; (8007e40 <TestRun+0x6ec>)
 8007d52:	0011      	movs	r1, r2
 8007d54:	0018      	movs	r0, r3
 8007d56:	f00a ff85 	bl	8012c64 <strcat>
 	// %%%%%%%%%%%%%%%%%%%%%%%%%Add Checksum %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 8007d5a:	4b39      	ldr	r3, [pc, #228]	; (8007e40 <TestRun+0x6ec>)
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f7fe f8d1 	bl	8005f04 <nmea0183_checksum>
 8007d62:	0002      	movs	r2, r0
 8007d64:	4940      	ldr	r1, [pc, #256]	; (8007e68 <TestRun+0x714>)
 8007d66:	4b35      	ldr	r3, [pc, #212]	; (8007e3c <TestRun+0x6e8>)
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f00a ff07 	bl	8012b7c <siprintf>
    strcat(DataString,"*\0");
 8007d6e:	4b34      	ldr	r3, [pc, #208]	; (8007e40 <TestRun+0x6ec>)
 8007d70:	0018      	movs	r0, r3
 8007d72:	f7f8 f9c9 	bl	8000108 <strlen>
 8007d76:	0003      	movs	r3, r0
 8007d78:	001a      	movs	r2, r3
 8007d7a:	4b31      	ldr	r3, [pc, #196]	; (8007e40 <TestRun+0x6ec>)
 8007d7c:	18d2      	adds	r2, r2, r3
 8007d7e:	4b3b      	ldr	r3, [pc, #236]	; (8007e6c <TestRun+0x718>)
 8007d80:	0010      	movs	r0, r2
 8007d82:	0019      	movs	r1, r3
 8007d84:	2302      	movs	r3, #2
 8007d86:	001a      	movs	r2, r3
 8007d88:	f00b f92c 	bl	8012fe4 <memcpy>
    strcat(DataString,checksum);
 8007d8c:	4a2b      	ldr	r2, [pc, #172]	; (8007e3c <TestRun+0x6e8>)
 8007d8e:	4b2c      	ldr	r3, [pc, #176]	; (8007e40 <TestRun+0x6ec>)
 8007d90:	0011      	movs	r1, r2
 8007d92:	0018      	movs	r0, r3
 8007d94:	f00a ff66 	bl	8012c64 <strcat>



    if (debug==1){
    }
    if(ServerConnected==1){
 8007d98:	4b35      	ldr	r3, [pc, #212]	; (8007e70 <TestRun+0x71c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d11a      	bne.n	8007dd6 <TestRun+0x682>
    	while(ReadQdata()>0){
 8007da0:	e003      	b.n	8007daa <TestRun+0x656>
			//
    		ProcessTCPAll( ReadMDataS);
 8007da2:	4b34      	ldr	r3, [pc, #208]	; (8007e74 <TestRun+0x720>)
 8007da4:	0018      	movs	r0, r3
 8007da6:	f7fc fb21 	bl	80043ec <ProcessTCPAll>
    	while(ReadQdata()>0){
 8007daa:	f7fd f973 	bl	8005094 <ReadQdata>
 8007dae:	1e03      	subs	r3, r0, #0
 8007db0:	dcf7      	bgt.n	8007da2 <TestRun+0x64e>
    	}
    	// %%%%%%%%%%%%%%%%%%%%%%%%Send Protocall %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    	int tcpsendT=tic();
 8007db2:	f7fe faf7 	bl	80063a4 <tic>
 8007db6:	0003      	movs	r3, r0
 8007db8:	603b      	str	r3, [r7, #0]

     	ProcessTCPAll(DataString);
 8007dba:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <TestRun+0x6ec>)
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f7fc fb15 	bl	80043ec <ProcessTCPAll>
     	toc( tcpsendT,"_________________________While loop tcp send data");
 8007dc2:	4a2d      	ldr	r2, [pc, #180]	; (8007e78 <TestRun+0x724>)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	0011      	movs	r1, r2
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f7fe faf3 	bl	80063b4 <toc>
     	RunCnt=0;
 8007dce:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <TestRun+0x728>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e020      	b.n	8007e18 <TestRun+0x6c4>
    }
    else{
    	if (debug==1){
 8007dd6:	4b2a      	ldr	r3, [pc, #168]	; (8007e80 <TestRun+0x72c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d103      	bne.n	8007de6 <TestRun+0x692>
    		Debug_Tx("No GSM Signal Saving Data to Memory----");
 8007dde:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <TestRun+0x730>)
 8007de0:	0018      	movs	r0, r3
 8007de2:	f000 f855 	bl	8007e90 <Debug_Tx>
    	}
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 8007de6:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <TestRun+0x6ec>)
 8007de8:	0018      	movs	r0, r3
 8007dea:	f7f8 f98d 	bl	8000108 <strlen>
 8007dee:	0003      	movs	r3, r0
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3301      	adds	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	4b12      	ldr	r3, [pc, #72]	; (8007e40 <TestRun+0x6ec>)
 8007df8:	0011      	movs	r1, r2
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f7fd f912 	bl	8005024 <WriteQdata>
    	RunCnt++;
 8007e00:	4b1e      	ldr	r3, [pc, #120]	; (8007e7c <TestRun+0x728>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	4b1d      	ldr	r3, [pc, #116]	; (8007e7c <TestRun+0x728>)
 8007e08:	601a      	str	r2, [r3, #0]
    	if(RunCnt>10){
 8007e0a:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <TestRun+0x728>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b0a      	cmp	r3, #10
 8007e10:	dd02      	ble.n	8007e18 <TestRun+0x6c4>
    		//InitGSM();
    		RunCnt=0;
 8007e12:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <TestRun+0x728>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
		timedWork();

	}
	*/
	TimeCount=tic();
 8007e18:	f7fe fac4 	bl	80063a4 <tic>
 8007e1c:	0002      	movs	r2, r0
 8007e1e:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <TestRun+0x734>)
 8007e20:	601a      	str	r2, [r3, #0]

 	//ProcessTCPAll(TracIP,"6055", DataString);
 	//ProcessTCPAll("34.74.249.18","300", DataString);
 	//ProcessTCPAll("34.74.249.18","300", DataString, "taisysnet");

 	seqNo=seqNo+1;
 8007e22:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <TestRun+0x738>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <TestRun+0x738>)
 8007e2a:	601a      	str	r2, [r3, #0]


}
 8007e2c:	46c0      	nop			; (mov r8, r8)
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b002      	add	sp, #8
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20001430 	.word	0x20001430
 8007e38:	08017d90 	.word	0x08017d90
 8007e3c:	20003cec 	.word	0x20003cec
 8007e40:	200002fc 	.word	0x200002fc
 8007e44:	20003c48 	.word	0x20003c48
 8007e48:	08016878 	.word	0x08016878
 8007e4c:	20000440 	.word	0x20000440
 8007e50:	2000042c 	.word	0x2000042c
 8007e54:	20003ba4 	.word	0x20003ba4
 8007e58:	2000053c 	.word	0x2000053c
 8007e5c:	20003cac 	.word	0x20003cac
 8007e60:	20001500 	.word	0x20001500
 8007e64:	20003c04 	.word	0x20003c04
 8007e68:	08017d88 	.word	0x08017d88
 8007e6c:	08017d94 	.word	0x08017d94
 8007e70:	20001630 	.word	0x20001630
 8007e74:	20002734 	.word	0x20002734
 8007e78:	08017d98 	.word	0x08017d98
 8007e7c:	2000055c 	.word	0x2000055c
 8007e80:	2000000c 	.word	0x2000000c
 8007e84:	08017dcc 	.word	0x08017dcc
 8007e88:	20000558 	.word	0x20000558
 8007e8c:	20000428 	.word	0x20000428

08007e90 <Debug_Tx>:




static void Debug_Tx(char _out[]){
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <Debug_Tx+0x44>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	220c      	movs	r2, #12
 8007e9e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f7f8 f930 	bl	8000108 <strlen>
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <Debug_Tx+0x48>)
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4808      	ldr	r0, [pc, #32]	; (8007ed4 <Debug_Tx+0x44>)
 8007eb2:	f004 ffad 	bl	800ce10 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8007eb6:	210c      	movs	r1, #12
 8007eb8:	187b      	adds	r3, r7, r1
 8007eba:	4a08      	ldr	r2, [pc, #32]	; (8007edc <Debug_Tx+0x4c>)
 8007ebc:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007ebe:	1879      	adds	r1, r7, r1
 8007ec0:	4804      	ldr	r0, [pc, #16]	; (8007ed4 <Debug_Tx+0x44>)
 8007ec2:	230a      	movs	r3, #10
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f004 ffa3 	bl	800ce10 <HAL_UART_Transmit>


}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b004      	add	sp, #16
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	2000084c 	.word	0x2000084c
 8007ed8:	00001388 	.word	0x00001388
 8007edc:	00000a0d 	.word	0x00000a0d

08007ee0 <Debug_Rx>:


static char* Debug_Rx(){
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007ee4:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <Debug_Rx+0x24>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	220c      	movs	r2, #12
 8007eea:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8007eec:	2396      	movs	r3, #150	; 0x96
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	22fa      	movs	r2, #250	; 0xfa
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	4904      	ldr	r1, [pc, #16]	; (8007f08 <Debug_Rx+0x28>)
 8007ef6:	4803      	ldr	r0, [pc, #12]	; (8007f04 <Debug_Rx+0x24>)
 8007ef8:	f005 f826 	bl	800cf48 <HAL_UART_Receive>
	return(inn);
 8007efc:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <Debug_Rx+0x28>)

}
 8007efe:	0018      	movs	r0, r3
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	2000084c 	.word	0x2000084c
 8007f08:	20000454 	.word	0x20000454

08007f0c <GSM_Tx>:




static void GSM_Tx(const char _out[]){
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007f14:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <GSM_Tx+0x30>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	220c      	movs	r2, #12
 8007f1a:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f7f8 f8f2 	bl	8000108 <strlen>
 8007f24:	0003      	movs	r3, r0
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	2396      	movs	r3, #150	; 0x96
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	4803      	ldr	r0, [pc, #12]	; (8007f3c <GSM_Tx+0x30>)
 8007f30:	f004 ff6e 	bl	800ce10 <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 8007f34:	46c0      	nop			; (mov r8, r8)
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b002      	add	sp, #8
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000724 	.word	0x20000724

08007f40 <GSM_TxL>:

static void GSM_TxL(const char _out[]){
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007f48:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <GSM_TxL+0x30>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	220c      	movs	r2, #12
 8007f4e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	0018      	movs	r0, r3
 8007f54:	f7f8 f8d8 	bl	8000108 <strlen>
 8007f58:	0003      	movs	r3, r0
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <GSM_TxL+0x34>)
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4803      	ldr	r0, [pc, #12]	; (8007f70 <GSM_TxL+0x30>)
 8007f62:	f004 ff55 	bl	800ce10 <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	b002      	add	sp, #8
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	20000724 	.word	0x20000724
 8007f74:	00001388 	.word	0x00001388

08007f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007f7c:	b672      	cpsid	i
}
 8007f7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007f80:	e7fe      	b.n	8007f80 <Error_Handler+0x8>
	...

08007f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <HAL_MspInit+0x5c>)
 8007f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f8e:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <HAL_MspInit+0x5c>)
 8007f90:	2101      	movs	r1, #1
 8007f92:	430a      	orrs	r2, r1
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <HAL_MspInit+0x5c>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	607b      	str	r3, [r7, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <HAL_MspInit+0x5c>)
 8007fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fa6:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <HAL_MspInit+0x5c>)
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	0549      	lsls	r1, r1, #21
 8007fac:	430a      	orrs	r2, r1
 8007fae:	63da      	str	r2, [r3, #60]	; 0x3c
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <HAL_MspInit+0x5c>)
 8007fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb4:	2380      	movs	r3, #128	; 0x80
 8007fb6:	055b      	lsls	r3, r3, #21
 8007fb8:	4013      	ands	r3, r2
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	425b      	negs	r3, r3
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2103      	movs	r1, #3
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f001 fc5a 	bl	8009880 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007fcc:	23c0      	movs	r3, #192	; 0xc0
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f000 fd35 	bl	8008a40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	b002      	add	sp, #8
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	40021000 	.word	0x40021000

08007fe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007fe4:	b590      	push	{r4, r7, lr}
 8007fe6:	b08b      	sub	sp, #44	; 0x2c
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fec:	2414      	movs	r4, #20
 8007fee:	193b      	adds	r3, r7, r4
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	2314      	movs	r3, #20
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	f00a fe2c 	bl	8012c54 <memset>
  if(hadc->Instance==ADC1)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a3b      	ldr	r2, [pc, #236]	; (80080f0 <HAL_ADC_MspInit+0x10c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d16f      	bne.n	80080e6 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008006:	4b3b      	ldr	r3, [pc, #236]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 8008008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800800a:	4b3a      	ldr	r3, [pc, #232]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 800800c:	2180      	movs	r1, #128	; 0x80
 800800e:	0349      	lsls	r1, r1, #13
 8008010:	430a      	orrs	r2, r1
 8008012:	641a      	str	r2, [r3, #64]	; 0x40
 8008014:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 8008016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	035b      	lsls	r3, r3, #13
 800801c:	4013      	ands	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008022:	4b34      	ldr	r3, [pc, #208]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 8008024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008026:	4b33      	ldr	r3, [pc, #204]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 8008028:	2101      	movs	r1, #1
 800802a:	430a      	orrs	r2, r1
 800802c:	635a      	str	r2, [r3, #52]	; 0x34
 800802e:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	2201      	movs	r2, #1
 8008034:	4013      	ands	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800803a:	4b2e      	ldr	r3, [pc, #184]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 800803c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800803e:	4b2d      	ldr	r3, [pc, #180]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 8008040:	2102      	movs	r1, #2
 8008042:	430a      	orrs	r2, r1
 8008044:	635a      	str	r2, [r3, #52]	; 0x34
 8008046:	4b2b      	ldr	r3, [pc, #172]	; (80080f4 <HAL_ADC_MspInit+0x110>)
 8008048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804a:	2202      	movs	r2, #2
 800804c:	4013      	ands	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]
 8008050:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 8008052:	193b      	adds	r3, r7, r4
 8008054:	2203      	movs	r2, #3
 8008056:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008058:	193b      	adds	r3, r7, r4
 800805a:	2203      	movs	r2, #3
 800805c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805e:	193b      	adds	r3, r7, r4
 8008060:	2200      	movs	r2, #0
 8008062:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008064:	193a      	adds	r2, r7, r4
 8008066:	23a0      	movs	r3, #160	; 0xa0
 8008068:	05db      	lsls	r3, r3, #23
 800806a:	0011      	movs	r1, r2
 800806c:	0018      	movs	r0, r3
 800806e:	f001 ffa1 	bl	8009fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8008072:	193b      	adds	r3, r7, r4
 8008074:	4a20      	ldr	r2, [pc, #128]	; (80080f8 <HAL_ADC_MspInit+0x114>)
 8008076:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008078:	193b      	adds	r3, r7, r4
 800807a:	2203      	movs	r2, #3
 800807c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807e:	193b      	adds	r3, r7, r4
 8008080:	2200      	movs	r2, #0
 8008082:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008084:	193b      	adds	r3, r7, r4
 8008086:	4a1d      	ldr	r2, [pc, #116]	; (80080fc <HAL_ADC_MspInit+0x118>)
 8008088:	0019      	movs	r1, r3
 800808a:	0010      	movs	r0, r2
 800808c:	f001 ff92 	bl	8009fb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008090:	4b1b      	ldr	r3, [pc, #108]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 8008092:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <HAL_ADC_MspInit+0x120>)
 8008094:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 8008098:	2205      	movs	r2, #5
 800809a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800809c:	4b18      	ldr	r3, [pc, #96]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 800809e:	2200      	movs	r2, #0
 80080a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80080a2:	4b17      	ldr	r3, [pc, #92]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080aa:	2280      	movs	r2, #128	; 0x80
 80080ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80080ae:	4b14      	ldr	r3, [pc, #80]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080b0:	2280      	movs	r2, #128	; 0x80
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80080b6:	4b12      	ldr	r3, [pc, #72]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080b8:	2280      	movs	r2, #128	; 0x80
 80080ba:	0112      	lsls	r2, r2, #4
 80080bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80080be:	4b10      	ldr	r3, [pc, #64]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080c0:	2220      	movs	r2, #32
 80080c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80080c4:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80080ca:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080cc:	0018      	movs	r0, r3
 80080ce:	f001 fbfd 	bl	80098cc <HAL_DMA_Init>
 80080d2:	1e03      	subs	r3, r0, #0
 80080d4:	d001      	beq.n	80080da <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80080d6:	f7ff ff4f 	bl	8007f78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a08      	ldr	r2, [pc, #32]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080de:	651a      	str	r2, [r3, #80]	; 0x50
 80080e0:	4b07      	ldr	r3, [pc, #28]	; (8008100 <HAL_ADC_MspInit+0x11c>)
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b00b      	add	sp, #44	; 0x2c
 80080ec:	bd90      	pop	{r4, r7, pc}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	40012400 	.word	0x40012400
 80080f4:	40021000 	.word	0x40021000
 80080f8:	00000402 	.word	0x00000402
 80080fc:	50000400 	.word	0x50000400
 8008100:	200005c4 	.word	0x200005c4
 8008104:	40020008 	.word	0x40020008

08008108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008108:	b590      	push	{r4, r7, lr}
 800810a:	b091      	sub	sp, #68	; 0x44
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008110:	232c      	movs	r3, #44	; 0x2c
 8008112:	18fb      	adds	r3, r7, r3
 8008114:	0018      	movs	r0, r3
 8008116:	2314      	movs	r3, #20
 8008118:	001a      	movs	r2, r3
 800811a:	2100      	movs	r1, #0
 800811c:	f00a fd9a 	bl	8012c54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008120:	2410      	movs	r4, #16
 8008122:	193b      	adds	r3, r7, r4
 8008124:	0018      	movs	r0, r3
 8008126:	231c      	movs	r3, #28
 8008128:	001a      	movs	r2, r3
 800812a:	2100      	movs	r1, #0
 800812c:	f00a fd92 	bl	8012c54 <memset>
  if(hi2c->Instance==I2C1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a22      	ldr	r2, [pc, #136]	; (80081c0 <HAL_I2C_MspInit+0xb8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d13d      	bne.n	80081b6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800813a:	193b      	adds	r3, r7, r4
 800813c:	2220      	movs	r2, #32
 800813e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008140:	193b      	adds	r3, r7, r4
 8008142:	2200      	movs	r2, #0
 8008144:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008146:	193b      	adds	r3, r7, r4
 8008148:	0018      	movs	r0, r3
 800814a:	f003 fc89 	bl	800ba60 <HAL_RCCEx_PeriphCLKConfig>
 800814e:	1e03      	subs	r3, r0, #0
 8008150:	d001      	beq.n	8008156 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8008152:	f7ff ff11 	bl	8007f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008156:	4b1b      	ldr	r3, [pc, #108]	; (80081c4 <HAL_I2C_MspInit+0xbc>)
 8008158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800815a:	4b1a      	ldr	r3, [pc, #104]	; (80081c4 <HAL_I2C_MspInit+0xbc>)
 800815c:	2102      	movs	r1, #2
 800815e:	430a      	orrs	r2, r1
 8008160:	635a      	str	r2, [r3, #52]	; 0x34
 8008162:	4b18      	ldr	r3, [pc, #96]	; (80081c4 <HAL_I2C_MspInit+0xbc>)
 8008164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008166:	2202      	movs	r2, #2
 8008168:	4013      	ands	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800816e:	212c      	movs	r1, #44	; 0x2c
 8008170:	187b      	adds	r3, r7, r1
 8008172:	22c0      	movs	r2, #192	; 0xc0
 8008174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008176:	187b      	adds	r3, r7, r1
 8008178:	2212      	movs	r2, #18
 800817a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800817c:	187b      	adds	r3, r7, r1
 800817e:	2201      	movs	r2, #1
 8008180:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008182:	187b      	adds	r3, r7, r1
 8008184:	2200      	movs	r2, #0
 8008186:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8008188:	187b      	adds	r3, r7, r1
 800818a:	2206      	movs	r2, #6
 800818c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800818e:	187b      	adds	r3, r7, r1
 8008190:	4a0d      	ldr	r2, [pc, #52]	; (80081c8 <HAL_I2C_MspInit+0xc0>)
 8008192:	0019      	movs	r1, r3
 8008194:	0010      	movs	r0, r2
 8008196:	f001 ff0d 	bl	8009fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800819a:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <HAL_I2C_MspInit+0xbc>)
 800819c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <HAL_I2C_MspInit+0xbc>)
 80081a0:	2180      	movs	r1, #128	; 0x80
 80081a2:	0389      	lsls	r1, r1, #14
 80081a4:	430a      	orrs	r2, r1
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80081a8:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <HAL_I2C_MspInit+0xbc>)
 80081aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081ac:	2380      	movs	r3, #128	; 0x80
 80081ae:	039b      	lsls	r3, r3, #14
 80081b0:	4013      	ands	r3, r2
 80081b2:	60bb      	str	r3, [r7, #8]
 80081b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b011      	add	sp, #68	; 0x44
 80081bc:	bd90      	pop	{r4, r7, pc}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	40005400 	.word	0x40005400
 80081c4:	40021000 	.word	0x40021000
 80081c8:	50000400 	.word	0x50000400

080081cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80081cc:	b590      	push	{r4, r7, lr}
 80081ce:	b08b      	sub	sp, #44	; 0x2c
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d4:	2414      	movs	r4, #20
 80081d6:	193b      	adds	r3, r7, r4
 80081d8:	0018      	movs	r0, r3
 80081da:	2314      	movs	r3, #20
 80081dc:	001a      	movs	r2, r3
 80081de:	2100      	movs	r1, #0
 80081e0:	f00a fd38 	bl	8012c54 <memset>
  if(hspi->Instance==SPI1)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <HAL_SPI_MspInit+0x8c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d130      	bne.n	8008250 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80081ee:	4b1b      	ldr	r3, [pc, #108]	; (800825c <HAL_SPI_MspInit+0x90>)
 80081f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <HAL_SPI_MspInit+0x90>)
 80081f4:	2180      	movs	r1, #128	; 0x80
 80081f6:	0149      	lsls	r1, r1, #5
 80081f8:	430a      	orrs	r2, r1
 80081fa:	641a      	str	r2, [r3, #64]	; 0x40
 80081fc:	4b17      	ldr	r3, [pc, #92]	; (800825c <HAL_SPI_MspInit+0x90>)
 80081fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008200:	2380      	movs	r3, #128	; 0x80
 8008202:	015b      	lsls	r3, r3, #5
 8008204:	4013      	ands	r3, r2
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800820a:	4b14      	ldr	r3, [pc, #80]	; (800825c <HAL_SPI_MspInit+0x90>)
 800820c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820e:	4b13      	ldr	r3, [pc, #76]	; (800825c <HAL_SPI_MspInit+0x90>)
 8008210:	2101      	movs	r1, #1
 8008212:	430a      	orrs	r2, r1
 8008214:	635a      	str	r2, [r3, #52]	; 0x34
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <HAL_SPI_MspInit+0x90>)
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	2201      	movs	r2, #1
 800821c:	4013      	ands	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8008222:	0021      	movs	r1, r4
 8008224:	187b      	adds	r3, r7, r1
 8008226:	22e0      	movs	r2, #224	; 0xe0
 8008228:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822a:	187b      	adds	r3, r7, r1
 800822c:	2202      	movs	r2, #2
 800822e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008230:	187b      	adds	r3, r7, r1
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008236:	187b      	adds	r3, r7, r1
 8008238:	2200      	movs	r2, #0
 800823a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800823c:	187b      	adds	r3, r7, r1
 800823e:	2200      	movs	r2, #0
 8008240:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008242:	187a      	adds	r2, r7, r1
 8008244:	23a0      	movs	r3, #160	; 0xa0
 8008246:	05db      	lsls	r3, r3, #23
 8008248:	0011      	movs	r1, r2
 800824a:	0018      	movs	r0, r3
 800824c:	f001 feb2 	bl	8009fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008250:	46c0      	nop			; (mov r8, r8)
 8008252:	46bd      	mov	sp, r7
 8008254:	b00b      	add	sp, #44	; 0x2c
 8008256:	bd90      	pop	{r4, r7, pc}
 8008258:	40013000 	.word	0x40013000
 800825c:	40021000 	.word	0x40021000

08008260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a0d      	ldr	r2, [pc, #52]	; (80082a4 <HAL_TIM_Base_MspInit+0x44>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d113      	bne.n	800829a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008272:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <HAL_TIM_Base_MspInit+0x48>)
 8008274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <HAL_TIM_Base_MspInit+0x48>)
 8008278:	2110      	movs	r1, #16
 800827a:	430a      	orrs	r2, r1
 800827c:	63da      	str	r2, [r3, #60]	; 0x3c
 800827e:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <HAL_TIM_Base_MspInit+0x48>)
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	2210      	movs	r2, #16
 8008284:	4013      	ands	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 800828a:	2200      	movs	r2, #0
 800828c:	2103      	movs	r1, #3
 800828e:	2011      	movs	r0, #17
 8008290:	f001 faf6 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8008294:	2011      	movs	r0, #17
 8008296:	f001 fb08 	bl	80098aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800829a:	46c0      	nop			; (mov r8, r8)
 800829c:	46bd      	mov	sp, r7
 800829e:	b004      	add	sp, #16
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	40001000 	.word	0x40001000
 80082a8:	40021000 	.word	0x40021000

080082ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b095      	sub	sp, #84	; 0x54
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b4:	233c      	movs	r3, #60	; 0x3c
 80082b6:	18fb      	adds	r3, r7, r3
 80082b8:	0018      	movs	r0, r3
 80082ba:	2314      	movs	r3, #20
 80082bc:	001a      	movs	r2, r3
 80082be:	2100      	movs	r1, #0
 80082c0:	f00a fcc8 	bl	8012c54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082c4:	2420      	movs	r4, #32
 80082c6:	193b      	adds	r3, r7, r4
 80082c8:	0018      	movs	r0, r3
 80082ca:	231c      	movs	r3, #28
 80082cc:	001a      	movs	r2, r3
 80082ce:	2100      	movs	r1, #0
 80082d0:	f00a fcc0 	bl	8012c54 <memset>
  if(huart->Instance==USART1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4aab      	ldr	r2, [pc, #684]	; (8008588 <HAL_UART_MspInit+0x2dc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d172      	bne.n	80083c4 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80082de:	193b      	adds	r3, r7, r4
 80082e0:	2201      	movs	r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80082e4:	193b      	adds	r3, r7, r4
 80082e6:	2200      	movs	r2, #0
 80082e8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082ea:	193b      	adds	r3, r7, r4
 80082ec:	0018      	movs	r0, r3
 80082ee:	f003 fbb7 	bl	800ba60 <HAL_RCCEx_PeriphCLKConfig>
 80082f2:	1e03      	subs	r3, r0, #0
 80082f4:	d001      	beq.n	80082fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80082f6:	f7ff fe3f 	bl	8007f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082fa:	4ba4      	ldr	r3, [pc, #656]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80082fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082fe:	4ba3      	ldr	r3, [pc, #652]	; (800858c <HAL_UART_MspInit+0x2e0>)
 8008300:	2180      	movs	r1, #128	; 0x80
 8008302:	01c9      	lsls	r1, r1, #7
 8008304:	430a      	orrs	r2, r1
 8008306:	641a      	str	r2, [r3, #64]	; 0x40
 8008308:	4ba0      	ldr	r3, [pc, #640]	; (800858c <HAL_UART_MspInit+0x2e0>)
 800830a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800830c:	2380      	movs	r3, #128	; 0x80
 800830e:	01db      	lsls	r3, r3, #7
 8008310:	4013      	ands	r3, r2
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008316:	4b9d      	ldr	r3, [pc, #628]	; (800858c <HAL_UART_MspInit+0x2e0>)
 8008318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800831a:	4b9c      	ldr	r3, [pc, #624]	; (800858c <HAL_UART_MspInit+0x2e0>)
 800831c:	2101      	movs	r1, #1
 800831e:	430a      	orrs	r2, r1
 8008320:	635a      	str	r2, [r3, #52]	; 0x34
 8008322:	4b9a      	ldr	r3, [pc, #616]	; (800858c <HAL_UART_MspInit+0x2e0>)
 8008324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008326:	2201      	movs	r2, #1
 8008328:	4013      	ands	r3, r2
 800832a:	61bb      	str	r3, [r7, #24]
 800832c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 800832e:	213c      	movs	r1, #60	; 0x3c
 8008330:	187b      	adds	r3, r7, r1
 8008332:	22c0      	movs	r2, #192	; 0xc0
 8008334:	00d2      	lsls	r2, r2, #3
 8008336:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008338:	187b      	adds	r3, r7, r1
 800833a:	2202      	movs	r2, #2
 800833c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833e:	187b      	adds	r3, r7, r1
 8008340:	2200      	movs	r2, #0
 8008342:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008344:	187b      	adds	r3, r7, r1
 8008346:	2200      	movs	r2, #0
 8008348:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800834a:	187b      	adds	r3, r7, r1
 800834c:	2201      	movs	r2, #1
 800834e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008350:	187a      	adds	r2, r7, r1
 8008352:	23a0      	movs	r3, #160	; 0xa0
 8008354:	05db      	lsls	r3, r3, #23
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f001 fe2b 	bl	8009fb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800835e:	4b8c      	ldr	r3, [pc, #560]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 8008360:	4a8c      	ldr	r2, [pc, #560]	; (8008594 <HAL_UART_MspInit+0x2e8>)
 8008362:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8008364:	4b8a      	ldr	r3, [pc, #552]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 8008366:	2232      	movs	r2, #50	; 0x32
 8008368:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800836a:	4b89      	ldr	r3, [pc, #548]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 800836c:	2200      	movs	r2, #0
 800836e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008370:	4b87      	ldr	r3, [pc, #540]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 8008372:	2200      	movs	r2, #0
 8008374:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008376:	4b86      	ldr	r3, [pc, #536]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 8008378:	2280      	movs	r2, #128	; 0x80
 800837a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800837c:	4b84      	ldr	r3, [pc, #528]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 800837e:	2200      	movs	r2, #0
 8008380:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008382:	4b83      	ldr	r3, [pc, #524]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 8008384:	2200      	movs	r2, #0
 8008386:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008388:	4b81      	ldr	r3, [pc, #516]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 800838a:	2200      	movs	r2, #0
 800838c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800838e:	4b80      	ldr	r3, [pc, #512]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 8008390:	2200      	movs	r2, #0
 8008392:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008394:	4b7e      	ldr	r3, [pc, #504]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 8008396:	0018      	movs	r0, r3
 8008398:	f001 fa98 	bl	80098cc <HAL_DMA_Init>
 800839c:	1e03      	subs	r3, r0, #0
 800839e:	d001      	beq.n	80083a4 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80083a0:	f7ff fdea 	bl	8007f78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	4a79      	ldr	r2, [pc, #484]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 80083aa:	505a      	str	r2, [r3, r1]
 80083ac:	4b78      	ldr	r3, [pc, #480]	; (8008590 <HAL_UART_MspInit+0x2e4>)
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80083b2:	2200      	movs	r2, #0
 80083b4:	2103      	movs	r1, #3
 80083b6:	201b      	movs	r0, #27
 80083b8:	f001 fa62 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80083bc:	201b      	movs	r0, #27
 80083be:	f001 fa74 	bl	80098aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80083c2:	e0dd      	b.n	8008580 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART2)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a73      	ldr	r2, [pc, #460]	; (8008598 <HAL_UART_MspInit+0x2ec>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d172      	bne.n	80084b4 <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80083ce:	2120      	movs	r1, #32
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	2202      	movs	r2, #2
 80083d4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80083d6:	187b      	adds	r3, r7, r1
 80083d8:	2200      	movs	r2, #0
 80083da:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083dc:	187b      	adds	r3, r7, r1
 80083de:	0018      	movs	r0, r3
 80083e0:	f003 fb3e 	bl	800ba60 <HAL_RCCEx_PeriphCLKConfig>
 80083e4:	1e03      	subs	r3, r0, #0
 80083e6:	d001      	beq.n	80083ec <HAL_UART_MspInit+0x140>
      Error_Handler();
 80083e8:	f7ff fdc6 	bl	8007f78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80083ec:	4b67      	ldr	r3, [pc, #412]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80083ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083f0:	4b66      	ldr	r3, [pc, #408]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80083f2:	2180      	movs	r1, #128	; 0x80
 80083f4:	0289      	lsls	r1, r1, #10
 80083f6:	430a      	orrs	r2, r1
 80083f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80083fa:	4b64      	ldr	r3, [pc, #400]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80083fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	029b      	lsls	r3, r3, #10
 8008402:	4013      	ands	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008408:	4b60      	ldr	r3, [pc, #384]	; (800858c <HAL_UART_MspInit+0x2e0>)
 800840a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840c:	4b5f      	ldr	r3, [pc, #380]	; (800858c <HAL_UART_MspInit+0x2e0>)
 800840e:	2101      	movs	r1, #1
 8008410:	430a      	orrs	r2, r1
 8008412:	635a      	str	r2, [r3, #52]	; 0x34
 8008414:	4b5d      	ldr	r3, [pc, #372]	; (800858c <HAL_UART_MspInit+0x2e0>)
 8008416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008418:	2201      	movs	r2, #1
 800841a:	4013      	ands	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8008420:	213c      	movs	r1, #60	; 0x3c
 8008422:	187b      	adds	r3, r7, r1
 8008424:	220c      	movs	r2, #12
 8008426:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008428:	187b      	adds	r3, r7, r1
 800842a:	2202      	movs	r2, #2
 800842c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800842e:	187b      	adds	r3, r7, r1
 8008430:	2200      	movs	r2, #0
 8008432:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008434:	187b      	adds	r3, r7, r1
 8008436:	2200      	movs	r2, #0
 8008438:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800843a:	187b      	adds	r3, r7, r1
 800843c:	2201      	movs	r2, #1
 800843e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008440:	187a      	adds	r2, r7, r1
 8008442:	23a0      	movs	r3, #160	; 0xa0
 8008444:	05db      	lsls	r3, r3, #23
 8008446:	0011      	movs	r1, r2
 8008448:	0018      	movs	r0, r3
 800844a:	f001 fdb3 	bl	8009fb4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800844e:	4b53      	ldr	r3, [pc, #332]	; (800859c <HAL_UART_MspInit+0x2f0>)
 8008450:	4a53      	ldr	r2, [pc, #332]	; (80085a0 <HAL_UART_MspInit+0x2f4>)
 8008452:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008454:	4b51      	ldr	r3, [pc, #324]	; (800859c <HAL_UART_MspInit+0x2f0>)
 8008456:	2234      	movs	r2, #52	; 0x34
 8008458:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800845a:	4b50      	ldr	r3, [pc, #320]	; (800859c <HAL_UART_MspInit+0x2f0>)
 800845c:	2200      	movs	r2, #0
 800845e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008460:	4b4e      	ldr	r3, [pc, #312]	; (800859c <HAL_UART_MspInit+0x2f0>)
 8008462:	2200      	movs	r2, #0
 8008464:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008466:	4b4d      	ldr	r3, [pc, #308]	; (800859c <HAL_UART_MspInit+0x2f0>)
 8008468:	2280      	movs	r2, #128	; 0x80
 800846a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800846c:	4b4b      	ldr	r3, [pc, #300]	; (800859c <HAL_UART_MspInit+0x2f0>)
 800846e:	2200      	movs	r2, #0
 8008470:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008472:	4b4a      	ldr	r3, [pc, #296]	; (800859c <HAL_UART_MspInit+0x2f0>)
 8008474:	2200      	movs	r2, #0
 8008476:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008478:	4b48      	ldr	r3, [pc, #288]	; (800859c <HAL_UART_MspInit+0x2f0>)
 800847a:	2200      	movs	r2, #0
 800847c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800847e:	4b47      	ldr	r3, [pc, #284]	; (800859c <HAL_UART_MspInit+0x2f0>)
 8008480:	2200      	movs	r2, #0
 8008482:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008484:	4b45      	ldr	r3, [pc, #276]	; (800859c <HAL_UART_MspInit+0x2f0>)
 8008486:	0018      	movs	r0, r3
 8008488:	f001 fa20 	bl	80098cc <HAL_DMA_Init>
 800848c:	1e03      	subs	r3, r0, #0
 800848e:	d001      	beq.n	8008494 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8008490:	f7ff fd72 	bl	8007f78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2180      	movs	r1, #128	; 0x80
 8008498:	4a40      	ldr	r2, [pc, #256]	; (800859c <HAL_UART_MspInit+0x2f0>)
 800849a:	505a      	str	r2, [r3, r1]
 800849c:	4b3f      	ldr	r3, [pc, #252]	; (800859c <HAL_UART_MspInit+0x2f0>)
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80084a2:	2200      	movs	r2, #0
 80084a4:	2103      	movs	r1, #3
 80084a6:	201c      	movs	r0, #28
 80084a8:	f001 f9ea 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80084ac:	201c      	movs	r0, #28
 80084ae:	f001 f9fc 	bl	80098aa <HAL_NVIC_EnableIRQ>
}
 80084b2:	e065      	b.n	8008580 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a3a      	ldr	r2, [pc, #232]	; (80085a4 <HAL_UART_MspInit+0x2f8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d160      	bne.n	8008580 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80084be:	4b33      	ldr	r3, [pc, #204]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80084c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c2:	4b32      	ldr	r3, [pc, #200]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80084c4:	2180      	movs	r1, #128	; 0x80
 80084c6:	02c9      	lsls	r1, r1, #11
 80084c8:	430a      	orrs	r2, r1
 80084ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80084cc:	4b2f      	ldr	r3, [pc, #188]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80084ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	02db      	lsls	r3, r3, #11
 80084d4:	4013      	ands	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084da:	4b2c      	ldr	r3, [pc, #176]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80084dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084de:	4b2b      	ldr	r3, [pc, #172]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80084e0:	2102      	movs	r1, #2
 80084e2:	430a      	orrs	r2, r1
 80084e4:	635a      	str	r2, [r3, #52]	; 0x34
 80084e6:	4b29      	ldr	r3, [pc, #164]	; (800858c <HAL_UART_MspInit+0x2e0>)
 80084e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ea:	2202      	movs	r2, #2
 80084ec:	4013      	ands	r3, r2
 80084ee:	60bb      	str	r3, [r7, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 80084f2:	213c      	movs	r1, #60	; 0x3c
 80084f4:	187b      	adds	r3, r7, r1
 80084f6:	2205      	movs	r2, #5
 80084f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fa:	187b      	adds	r3, r7, r1
 80084fc:	2202      	movs	r2, #2
 80084fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008500:	187b      	adds	r3, r7, r1
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008506:	187b      	adds	r3, r7, r1
 8008508:	2200      	movs	r2, #0
 800850a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800850c:	187b      	adds	r3, r7, r1
 800850e:	2204      	movs	r2, #4
 8008510:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008512:	187b      	adds	r3, r7, r1
 8008514:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <HAL_UART_MspInit+0x2fc>)
 8008516:	0019      	movs	r1, r3
 8008518:	0010      	movs	r0, r2
 800851a:	f001 fd4b 	bl	8009fb4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 800851e:	4b23      	ldr	r3, [pc, #140]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008520:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <HAL_UART_MspInit+0x304>)
 8008522:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8008524:	4b21      	ldr	r3, [pc, #132]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008526:	2237      	movs	r2, #55	; 0x37
 8008528:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800852a:	4b20      	ldr	r3, [pc, #128]	; (80085ac <HAL_UART_MspInit+0x300>)
 800852c:	2210      	movs	r2, #16
 800852e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008530:	4b1e      	ldr	r3, [pc, #120]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008532:	2200      	movs	r2, #0
 8008534:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008536:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008538:	2280      	movs	r2, #128	; 0x80
 800853a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800853c:	4b1b      	ldr	r3, [pc, #108]	; (80085ac <HAL_UART_MspInit+0x300>)
 800853e:	2200      	movs	r2, #0
 8008540:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008542:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008544:	2200      	movs	r2, #0
 8008546:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008548:	4b18      	ldr	r3, [pc, #96]	; (80085ac <HAL_UART_MspInit+0x300>)
 800854a:	2200      	movs	r2, #0
 800854c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800854e:	4b17      	ldr	r3, [pc, #92]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008550:	2200      	movs	r2, #0
 8008552:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8008554:	4b15      	ldr	r3, [pc, #84]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008556:	0018      	movs	r0, r3
 8008558:	f001 f9b8 	bl	80098cc <HAL_DMA_Init>
 800855c:	1e03      	subs	r3, r0, #0
 800855e:	d001      	beq.n	8008564 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8008560:	f7ff fd0a 	bl	8007f78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a11      	ldr	r2, [pc, #68]	; (80085ac <HAL_UART_MspInit+0x300>)
 8008568:	67da      	str	r2, [r3, #124]	; 0x7c
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <HAL_UART_MspInit+0x300>)
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008570:	2200      	movs	r2, #0
 8008572:	2103      	movs	r1, #3
 8008574:	201d      	movs	r0, #29
 8008576:	f001 f983 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800857a:	201d      	movs	r0, #29
 800857c:	f001 f995 	bl	80098aa <HAL_NVIC_EnableIRQ>
}
 8008580:	46c0      	nop			; (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	b015      	add	sp, #84	; 0x54
 8008586:	bd90      	pop	{r4, r7, pc}
 8008588:	40013800 	.word	0x40013800
 800858c:	40021000 	.word	0x40021000
 8008590:	200008e0 	.word	0x200008e0
 8008594:	4002001c 	.word	0x4002001c
 8008598:	40004400 	.word	0x40004400
 800859c:	2000093c 	.word	0x2000093c
 80085a0:	40020030 	.word	0x40020030
 80085a4:	40004800 	.word	0x40004800
 80085a8:	50000400 	.word	0x50000400
 80085ac:	20000998 	.word	0x20000998
 80085b0:	40020044 	.word	0x40020044

080085b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085b4:	b5b0      	push	{r4, r5, r7, lr}
 80085b6:	b08c      	sub	sp, #48	; 0x30
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80085bc:	232b      	movs	r3, #43	; 0x2b
 80085be:	18fb      	adds	r3, r7, r3
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80085c4:	4b38      	ldr	r3, [pc, #224]	; (80086a8 <HAL_InitTick+0xf4>)
 80085c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085c8:	4b37      	ldr	r3, [pc, #220]	; (80086a8 <HAL_InitTick+0xf4>)
 80085ca:	2180      	movs	r1, #128	; 0x80
 80085cc:	0109      	lsls	r1, r1, #4
 80085ce:	430a      	orrs	r2, r1
 80085d0:	641a      	str	r2, [r3, #64]	; 0x40
 80085d2:	4b35      	ldr	r3, [pc, #212]	; (80086a8 <HAL_InitTick+0xf4>)
 80085d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	4013      	ands	r3, r2
 80085dc:	60bb      	str	r3, [r7, #8]
 80085de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80085e0:	230c      	movs	r3, #12
 80085e2:	18fa      	adds	r2, r7, r3
 80085e4:	2410      	movs	r4, #16
 80085e6:	193b      	adds	r3, r7, r4
 80085e8:	0011      	movs	r1, r2
 80085ea:	0018      	movs	r0, r3
 80085ec:	f003 fa0e 	bl	800ba0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80085f0:	193b      	adds	r3, r7, r4
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80085fc:	f003 f9f0 	bl	800b9e0 <HAL_RCC_GetPCLK1Freq>
 8008600:	0003      	movs	r3, r0
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008604:	e004      	b.n	8008610 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008606:	f003 f9eb 	bl	800b9e0 <HAL_RCC_GetPCLK1Freq>
 800860a:	0003      	movs	r3, r0
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008612:	4926      	ldr	r1, [pc, #152]	; (80086ac <HAL_InitTick+0xf8>)
 8008614:	0018      	movs	r0, r3
 8008616:	f7f7 fd93 	bl	8000140 <__udivsi3>
 800861a:	0003      	movs	r3, r0
 800861c:	3b01      	subs	r3, #1
 800861e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008620:	4b23      	ldr	r3, [pc, #140]	; (80086b0 <HAL_InitTick+0xfc>)
 8008622:	4a24      	ldr	r2, [pc, #144]	; (80086b4 <HAL_InitTick+0x100>)
 8008624:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8008626:	4b22      	ldr	r3, [pc, #136]	; (80086b0 <HAL_InitTick+0xfc>)
 8008628:	4a23      	ldr	r2, [pc, #140]	; (80086b8 <HAL_InitTick+0x104>)
 800862a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800862c:	4b20      	ldr	r3, [pc, #128]	; (80086b0 <HAL_InitTick+0xfc>)
 800862e:	6a3a      	ldr	r2, [r7, #32]
 8008630:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8008632:	4b1f      	ldr	r3, [pc, #124]	; (80086b0 <HAL_InitTick+0xfc>)
 8008634:	2200      	movs	r2, #0
 8008636:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008638:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <HAL_InitTick+0xfc>)
 800863a:	2200      	movs	r2, #0
 800863c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800863e:	4b1c      	ldr	r3, [pc, #112]	; (80086b0 <HAL_InitTick+0xfc>)
 8008640:	2200      	movs	r2, #0
 8008642:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8008644:	252b      	movs	r5, #43	; 0x2b
 8008646:	197c      	adds	r4, r7, r5
 8008648:	4b19      	ldr	r3, [pc, #100]	; (80086b0 <HAL_InitTick+0xfc>)
 800864a:	0018      	movs	r0, r3
 800864c:	f004 f894 	bl	800c778 <HAL_TIM_Base_Init>
 8008650:	0003      	movs	r3, r0
 8008652:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8008654:	197b      	adds	r3, r7, r5
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d11e      	bne.n	800869a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800865c:	197c      	adds	r4, r7, r5
 800865e:	4b14      	ldr	r3, [pc, #80]	; (80086b0 <HAL_InitTick+0xfc>)
 8008660:	0018      	movs	r0, r3
 8008662:	f004 f8e1 	bl	800c828 <HAL_TIM_Base_Start_IT>
 8008666:	0003      	movs	r3, r0
 8008668:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800866a:	197b      	adds	r3, r7, r5
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d113      	bne.n	800869a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8008672:	200d      	movs	r0, #13
 8008674:	f001 f919 	bl	80098aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b03      	cmp	r3, #3
 800867c:	d809      	bhi.n	8008692 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	0019      	movs	r1, r3
 8008684:	200d      	movs	r0, #13
 8008686:	f001 f8fb 	bl	8009880 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <HAL_InitTick+0x108>)
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e003      	b.n	800869a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8008692:	232b      	movs	r3, #43	; 0x2b
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	2201      	movs	r2, #1
 8008698:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800869a:	232b      	movs	r3, #43	; 0x2b
 800869c:	18fb      	adds	r3, r7, r3
 800869e:	781b      	ldrb	r3, [r3, #0]
}
 80086a0:	0018      	movs	r0, r3
 80086a2:	46bd      	mov	sp, r7
 80086a4:	b00c      	add	sp, #48	; 0x30
 80086a6:	bdb0      	pop	{r4, r5, r7, pc}
 80086a8:	40021000 	.word	0x40021000
 80086ac:	000f4240 	.word	0x000f4240
 80086b0:	20003d00 	.word	0x20003d00
 80086b4:	40012c00 	.word	0x40012c00
 80086b8:	000003e7 	.word	0x000003e7
 80086bc:	200000f8 	.word	0x200000f8

080086c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80086c4:	e7fe      	b.n	80086c4 <NMI_Handler+0x4>

080086c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086ca:	e7fe      	b.n	80086ca <HardFault_Handler+0x4>

080086cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80086d0:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <DMA1_Channel1_IRQHandler+0x14>)
 80086d2:	0018      	movs	r0, r3
 80086d4:	f001 fad6 	bl	8009c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80086d8:	46c0      	nop			; (mov r8, r8)
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	200005c4 	.word	0x200005c4

080086e4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80086ea:	0018      	movs	r0, r3
 80086ec:	f001 faca 	bl	8009c84 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80086f0:	4b04      	ldr	r3, [pc, #16]	; (8008704 <DMA1_Channel2_3_IRQHandler+0x20>)
 80086f2:	0018      	movs	r0, r3
 80086f4:	f001 fac6 	bl	8009c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80086f8:	46c0      	nop			; (mov r8, r8)
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	200008e0 	.word	0x200008e0
 8008704:	2000093c 	.word	0x2000093c

08008708 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 800870e:	0018      	movs	r0, r3
 8008710:	f001 fab8 	bl	8009c84 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8008714:	4b04      	ldr	r3, [pc, #16]	; (8008728 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8008716:	0018      	movs	r0, r3
 8008718:	f001 fbf6 	bl	8009f08 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800871c:	46c0      	nop			; (mov r8, r8)
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	46c0      	nop			; (mov r8, r8)
 8008724:	20000998 	.word	0x20000998
 8008728:	200005c4 	.word	0x200005c4

0800872c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008730:	4b03      	ldr	r3, [pc, #12]	; (8008740 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8008732:	0018      	movs	r0, r3
 8008734:	f004 f8ce 	bl	800c8d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8008738:	46c0      	nop			; (mov r8, r8)
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	20003d00 	.word	0x20003d00

08008744 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008748:	4b03      	ldr	r3, [pc, #12]	; (8008758 <TIM6_IRQHandler+0x14>)
 800874a:	0018      	movs	r0, r3
 800874c:	f004 f8c2 	bl	800c8d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8008750:	46c0      	nop			; (mov r8, r8)
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	200006d8 	.word	0x200006d8

0800875c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008760:	4b03      	ldr	r3, [pc, #12]	; (8008770 <USART1_IRQHandler+0x14>)
 8008762:	0018      	movs	r0, r3
 8008764:	f004 fd2a 	bl	800d1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008768:	46c0      	nop			; (mov r8, r8)
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	20000724 	.word	0x20000724

08008774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008778:	4b03      	ldr	r3, [pc, #12]	; (8008788 <USART2_IRQHandler+0x14>)
 800877a:	0018      	movs	r0, r3
 800877c:	f004 fd1e 	bl	800d1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008780:	46c0      	nop			; (mov r8, r8)
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	200007b8 	.word	0x200007b8

0800878c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008790:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <USART3_4_IRQHandler+0x14>)
 8008792:	0018      	movs	r0, r3
 8008794:	f004 fd12 	bl	800d1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8008798:	46c0      	nop			; (mov r8, r8)
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	2000084c 	.word	0x2000084c

080087a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  return 1;
 80087a8:	2301      	movs	r3, #1
}
 80087aa:	0018      	movs	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <_kill>:

int _kill(int pid, int sig)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80087ba:	f00a fbd3 	bl	8012f64 <__errno>
 80087be:	0003      	movs	r3, r0
 80087c0:	2216      	movs	r2, #22
 80087c2:	601a      	str	r2, [r3, #0]
  return -1;
 80087c4:	2301      	movs	r3, #1
 80087c6:	425b      	negs	r3, r3
}
 80087c8:	0018      	movs	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	b002      	add	sp, #8
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <_exit>:

void _exit (int status)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80087d8:	2301      	movs	r3, #1
 80087da:	425a      	negs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	0011      	movs	r1, r2
 80087e0:	0018      	movs	r0, r3
 80087e2:	f7ff ffe5 	bl	80087b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80087e6:	e7fe      	b.n	80087e6 <_exit+0x16>

080087e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e00a      	b.n	8008810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80087fa:	e000      	b.n	80087fe <_read+0x16>
 80087fc:	bf00      	nop
 80087fe:	0001      	movs	r1, r0
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	60ba      	str	r2, [r7, #8]
 8008806:	b2ca      	uxtb	r2, r1
 8008808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3301      	adds	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	429a      	cmp	r2, r3
 8008816:	dbf0      	blt.n	80087fa <_read+0x12>
  }

  return len;
 8008818:	687b      	ldr	r3, [r7, #4]
}
 800881a:	0018      	movs	r0, r3
 800881c:	46bd      	mov	sp, r7
 800881e:	b006      	add	sp, #24
 8008820:	bd80      	pop	{r7, pc}

08008822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b086      	sub	sp, #24
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e009      	b.n	8008848 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	60ba      	str	r2, [r7, #8]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	0018      	movs	r0, r3
 800883e:	e000      	b.n	8008842 <_write+0x20>
 8008840:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	3301      	adds	r3, #1
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	dbf1      	blt.n	8008834 <_write+0x12>
  }
  return len;
 8008850:	687b      	ldr	r3, [r7, #4]
}
 8008852:	0018      	movs	r0, r3
 8008854:	46bd      	mov	sp, r7
 8008856:	b006      	add	sp, #24
 8008858:	bd80      	pop	{r7, pc}

0800885a <_close>:

int _close(int file)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008862:	2301      	movs	r3, #1
 8008864:	425b      	negs	r3, r3
}
 8008866:	0018      	movs	r0, r3
 8008868:	46bd      	mov	sp, r7
 800886a:	b002      	add	sp, #8
 800886c:	bd80      	pop	{r7, pc}

0800886e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2280      	movs	r2, #128	; 0x80
 800887c:	0192      	lsls	r2, r2, #6
 800887e:	605a      	str	r2, [r3, #4]
  return 0;
 8008880:	2300      	movs	r3, #0
}
 8008882:	0018      	movs	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	b002      	add	sp, #8
 8008888:	bd80      	pop	{r7, pc}

0800888a <_isatty>:

int _isatty(int file)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008892:	2301      	movs	r3, #1
}
 8008894:	0018      	movs	r0, r3
 8008896:	46bd      	mov	sp, r7
 8008898:	b002      	add	sp, #8
 800889a:	bd80      	pop	{r7, pc}

0800889c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	0018      	movs	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	b004      	add	sp, #16
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80088bc:	4a14      	ldr	r2, [pc, #80]	; (8008910 <_sbrk+0x5c>)
 80088be:	4b15      	ldr	r3, [pc, #84]	; (8008914 <_sbrk+0x60>)
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80088c8:	4b13      	ldr	r3, [pc, #76]	; (8008918 <_sbrk+0x64>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80088d0:	4b11      	ldr	r3, [pc, #68]	; (8008918 <_sbrk+0x64>)
 80088d2:	4a12      	ldr	r2, [pc, #72]	; (800891c <_sbrk+0x68>)
 80088d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80088d6:	4b10      	ldr	r3, [pc, #64]	; (8008918 <_sbrk+0x64>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	18d3      	adds	r3, r2, r3
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d207      	bcs.n	80088f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80088e4:	f00a fb3e 	bl	8012f64 <__errno>
 80088e8:	0003      	movs	r3, r0
 80088ea:	220c      	movs	r2, #12
 80088ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80088ee:	2301      	movs	r3, #1
 80088f0:	425b      	negs	r3, r3
 80088f2:	e009      	b.n	8008908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80088f4:	4b08      	ldr	r3, [pc, #32]	; (8008918 <_sbrk+0x64>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <_sbrk+0x64>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	18d2      	adds	r2, r2, r3
 8008902:	4b05      	ldr	r3, [pc, #20]	; (8008918 <_sbrk+0x64>)
 8008904:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008906:	68fb      	ldr	r3, [r7, #12]
}
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b006      	add	sp, #24
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20009000 	.word	0x20009000
 8008914:	00000400 	.word	0x00000400
 8008918:	20003d4c 	.word	0x20003d4c
 800891c:	20005880 	.word	0x20005880

08008920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008924:	46c0      	nop			; (mov r8, r8)
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800892c:	480d      	ldr	r0, [pc, #52]	; (8008964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800892e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008930:	f7ff fff6 	bl	8008920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008934:	480c      	ldr	r0, [pc, #48]	; (8008968 <LoopForever+0x6>)
  ldr r1, =_edata
 8008936:	490d      	ldr	r1, [pc, #52]	; (800896c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008938:	4a0d      	ldr	r2, [pc, #52]	; (8008970 <LoopForever+0xe>)
  movs r3, #0
 800893a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800893c:	e002      	b.n	8008944 <LoopCopyDataInit>

0800893e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800893e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008942:	3304      	adds	r3, #4

08008944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008948:	d3f9      	bcc.n	800893e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800894a:	4a0a      	ldr	r2, [pc, #40]	; (8008974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800894c:	4c0a      	ldr	r4, [pc, #40]	; (8008978 <LoopForever+0x16>)
  movs r3, #0
 800894e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008950:	e001      	b.n	8008956 <LoopFillZerobss>

08008952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008954:	3204      	adds	r2, #4

08008956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008958:	d3fb      	bcc.n	8008952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800895a:	f00a fb09 	bl	8012f70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800895e:	f7fd fd77 	bl	8006450 <main>

08008962 <LoopForever>:

LoopForever:
  b LoopForever
 8008962:	e7fe      	b.n	8008962 <LoopForever>
  ldr   r0, =_estack
 8008964:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800896c:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8008970:	08018508 	.word	0x08018508
  ldr r2, =_sbss
 8008974:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8008978:	20005880 	.word	0x20005880

0800897c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800897c:	e7fe      	b.n	800897c <ADC1_IRQHandler>
	...

08008980 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008986:	1dfb      	adds	r3, r7, #7
 8008988:	2200      	movs	r2, #0
 800898a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <HAL_Init+0x3c>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <HAL_Init+0x3c>)
 8008992:	2180      	movs	r1, #128	; 0x80
 8008994:	0049      	lsls	r1, r1, #1
 8008996:	430a      	orrs	r2, r1
 8008998:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800899a:	2003      	movs	r0, #3
 800899c:	f7ff fe0a 	bl	80085b4 <HAL_InitTick>
 80089a0:	1e03      	subs	r3, r0, #0
 80089a2:	d003      	beq.n	80089ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80089a4:	1dfb      	adds	r3, r7, #7
 80089a6:	2201      	movs	r2, #1
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e001      	b.n	80089b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80089ac:	f7ff faea 	bl	8007f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80089b0:	1dfb      	adds	r3, r7, #7
 80089b2:	781b      	ldrb	r3, [r3, #0]
}
 80089b4:	0018      	movs	r0, r3
 80089b6:	46bd      	mov	sp, r7
 80089b8:	b002      	add	sp, #8
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40022000 	.word	0x40022000

080089c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <HAL_IncTick+0x1c>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	001a      	movs	r2, r3
 80089ca:	4b05      	ldr	r3, [pc, #20]	; (80089e0 <HAL_IncTick+0x20>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	18d2      	adds	r2, r2, r3
 80089d0:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <HAL_IncTick+0x20>)
 80089d2:	601a      	str	r2, [r3, #0]
}
 80089d4:	46c0      	nop			; (mov r8, r8)
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	200000fc 	.word	0x200000fc
 80089e0:	20003d50 	.word	0x20003d50

080089e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  return uwTick;
 80089e8:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <HAL_GetTick+0x10>)
 80089ea:	681b      	ldr	r3, [r3, #0]
}
 80089ec:	0018      	movs	r0, r3
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	20003d50 	.word	0x20003d50

080089f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a00:	f7ff fff0 	bl	80089e4 <HAL_GetTick>
 8008a04:	0003      	movs	r3, r0
 8008a06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	d005      	beq.n	8008a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a12:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <HAL_Delay+0x44>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	001a      	movs	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	189b      	adds	r3, r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	f7ff ffe0 	bl	80089e4 <HAL_GetTick>
 8008a24:	0002      	movs	r2, r0
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d8f7      	bhi.n	8008a20 <HAL_Delay+0x28>
  {
  }
}
 8008a30:	46c0      	nop			; (mov r8, r8)
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b004      	add	sp, #16
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	200000fc 	.word	0x200000fc

08008a40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a06      	ldr	r2, [pc, #24]	; (8008a68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008a4e:	4013      	ands	r3, r2
 8008a50:	0019      	movs	r1, r3
 8008a52:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	601a      	str	r2, [r3, #0]
}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	b002      	add	sp, #8
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	40010000 	.word	0x40010000
 8008a68:	fffff9ff 	.word	0xfffff9ff

08008a6c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8008a7c:	401a      	ands	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	601a      	str	r2, [r3, #0]
}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	b002      	add	sp, #8
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	46c0      	nop			; (mov r8, r8)
 8008a90:	fe3fffff 	.word	0xfe3fffff

08008a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	23e0      	movs	r3, #224	; 0xe0
 8008aa2:	045b      	lsls	r3, r3, #17
 8008aa4:	4013      	ands	r3, r2
}
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b002      	add	sp, #8
 8008aac:	bd80      	pop	{r7, pc}

08008aae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	2104      	movs	r1, #4
 8008ac2:	400a      	ands	r2, r1
 8008ac4:	2107      	movs	r1, #7
 8008ac6:	4091      	lsls	r1, r2
 8008ac8:	000a      	movs	r2, r1
 8008aca:	43d2      	mvns	r2, r2
 8008acc:	401a      	ands	r2, r3
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2104      	movs	r1, #4
 8008ad2:	400b      	ands	r3, r1
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4099      	lsls	r1, r3
 8008ad8:	000b      	movs	r3, r1
 8008ada:	431a      	orrs	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8008ae0:	46c0      	nop			; (mov r8, r8)
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b004      	add	sp, #16
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	2104      	movs	r1, #4
 8008afa:	400a      	ands	r2, r1
 8008afc:	2107      	movs	r1, #7
 8008afe:	4091      	lsls	r1, r2
 8008b00:	000a      	movs	r2, r1
 8008b02:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2104      	movs	r1, #4
 8008b08:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008b0a:	40da      	lsrs	r2, r3
 8008b0c:	0013      	movs	r3, r2
}
 8008b0e:	0018      	movs	r0, r3
 8008b10:	46bd      	mov	sp, r7
 8008b12:	b002      	add	sp, #8
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	23c0      	movs	r3, #192	; 0xc0
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	4013      	ands	r3, r2
 8008b28:	d101      	bne.n	8008b2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	0018      	movs	r0, r3
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b002      	add	sp, #8
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	211f      	movs	r1, #31
 8008b4c:	400a      	ands	r2, r1
 8008b4e:	210f      	movs	r1, #15
 8008b50:	4091      	lsls	r1, r2
 8008b52:	000a      	movs	r2, r1
 8008b54:	43d2      	mvns	r2, r2
 8008b56:	401a      	ands	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	0e9b      	lsrs	r3, r3, #26
 8008b5c:	210f      	movs	r1, #15
 8008b5e:	4019      	ands	r1, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	201f      	movs	r0, #31
 8008b64:	4003      	ands	r3, r0
 8008b66:	4099      	lsls	r1, r3
 8008b68:	000b      	movs	r3, r1
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008b70:	46c0      	nop			; (mov r8, r8)
 8008b72:	46bd      	mov	sp, r7
 8008b74:	b004      	add	sp, #16
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	035b      	lsls	r3, r3, #13
 8008b8a:	0b5b      	lsrs	r3, r3, #13
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b002      	add	sp, #8
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	0352      	lsls	r2, r2, #13
 8008bac:	0b52      	lsrs	r2, r2, #13
 8008bae:	43d2      	mvns	r2, r2
 8008bb0:	401a      	ands	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008bb6:	46c0      	nop			; (mov r8, r8)
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b002      	add	sp, #8
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	0212      	lsls	r2, r2, #8
 8008bd4:	43d2      	mvns	r2, r2
 8008bd6:	401a      	ands	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	400b      	ands	r3, r1
 8008be0:	4904      	ldr	r1, [pc, #16]	; (8008bf4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8008be2:	400b      	ands	r3, r1
 8008be4:	431a      	orrs	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	46bd      	mov	sp, r7
 8008bee:	b004      	add	sp, #16
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	07ffff00 	.word	0x07ffff00

08008bf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	4a05      	ldr	r2, [pc, #20]	; (8008c1c <LL_ADC_EnableInternalRegulator+0x24>)
 8008c06:	4013      	ands	r3, r2
 8008c08:	2280      	movs	r2, #128	; 0x80
 8008c0a:	0552      	lsls	r2, r2, #21
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	46bd      	mov	sp, r7
 8008c16:	b002      	add	sp, #8
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	6fffffe8 	.word	0x6fffffe8

08008c20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	2380      	movs	r3, #128	; 0x80
 8008c2e:	055b      	lsls	r3, r3, #21
 8008c30:	401a      	ands	r2, r3
 8008c32:	2380      	movs	r3, #128	; 0x80
 8008c34:	055b      	lsls	r3, r3, #21
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d101      	bne.n	8008c3e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	0018      	movs	r0, r3
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b002      	add	sp, #8
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	4a04      	ldr	r2, [pc, #16]	; (8008c68 <LL_ADC_Enable+0x20>)
 8008c56:	4013      	ands	r3, r2
 8008c58:	2201      	movs	r2, #1
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008c60:	46c0      	nop			; (mov r8, r8)
 8008c62:	46bd      	mov	sp, r7
 8008c64:	b002      	add	sp, #8
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	7fffffe8 	.word	0x7fffffe8

08008c6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	4a04      	ldr	r2, [pc, #16]	; (8008c8c <LL_ADC_Disable+0x20>)
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008c84:	46c0      	nop			; (mov r8, r8)
 8008c86:	46bd      	mov	sp, r7
 8008c88:	b002      	add	sp, #8
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	7fffffe8 	.word	0x7fffffe8

08008c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <LL_ADC_IsEnabled+0x18>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e000      	b.n	8008caa <LL_ADC_IsEnabled+0x1a>
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	0018      	movs	r0, r3
 8008cac:	46bd      	mov	sp, r7
 8008cae:	b002      	add	sp, #8
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	4a04      	ldr	r2, [pc, #16]	; (8008cd4 <LL_ADC_REG_StartConversion+0x20>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2204      	movs	r2, #4
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008ccc:	46c0      	nop			; (mov r8, r8)
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b002      	add	sp, #8
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	7fffffe8 	.word	0x7fffffe8

08008cd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d101      	bne.n	8008cf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008cec:	2301      	movs	r3, #1
 8008cee:	e000      	b.n	8008cf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b002      	add	sp, #8
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d04:	231f      	movs	r3, #31
 8008d06:	18fb      	adds	r3, r7, r3
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e17f      	b.n	8009022 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f7ff f959 	bl	8007fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2254      	movs	r2, #84	; 0x54
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f7ff ff6b 	bl	8008c20 <LL_ADC_IsInternalRegulatorEnabled>
 8008d4a:	1e03      	subs	r3, r0, #0
 8008d4c:	d115      	bne.n	8008d7a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7ff ff50 	bl	8008bf8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008d58:	4bb4      	ldr	r3, [pc, #720]	; (800902c <HAL_ADC_Init+0x330>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	49b4      	ldr	r1, [pc, #720]	; (8009030 <HAL_ADC_Init+0x334>)
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f7f7 f9ee 	bl	8000140 <__udivsi3>
 8008d64:	0003      	movs	r3, r0
 8008d66:	3301      	adds	r3, #1
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008d6c:	e002      	b.n	8008d74 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1f9      	bne.n	8008d6e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f7ff ff4e 	bl	8008c20 <LL_ADC_IsInternalRegulatorEnabled>
 8008d84:	1e03      	subs	r3, r0, #0
 8008d86:	d10f      	bne.n	8008da8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8c:	2210      	movs	r2, #16
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d98:	2201      	movs	r2, #1
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008da0:	231f      	movs	r3, #31
 8008da2:	18fb      	adds	r3, r7, r3
 8008da4:	2201      	movs	r2, #1
 8008da6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7ff ff93 	bl	8008cd8 <LL_ADC_REG_IsConversionOngoing>
 8008db2:	0003      	movs	r3, r0
 8008db4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dba:	2210      	movs	r2, #16
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	d000      	beq.n	8008dc2 <HAL_ADC_Init+0xc6>
 8008dc0:	e122      	b.n	8009008 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d000      	beq.n	8008dca <HAL_ADC_Init+0xce>
 8008dc8:	e11e      	b.n	8009008 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dce:	4a99      	ldr	r2, [pc, #612]	; (8009034 <HAL_ADC_Init+0x338>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	0018      	movs	r0, r3
 8008de0:	f7ff ff56 	bl	8008c90 <LL_ADC_IsEnabled>
 8008de4:	1e03      	subs	r3, r0, #0
 8008de6:	d000      	beq.n	8008dea <HAL_ADC_Init+0xee>
 8008de8:	e0ad      	b.n	8008f46 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7e1b      	ldrb	r3, [r3, #24]
 8008df2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8008df4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	7e5b      	ldrb	r3, [r3, #25]
 8008dfa:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008dfc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	7e9b      	ldrb	r3, [r3, #26]
 8008e02:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008e04:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <HAL_ADC_Init+0x118>
 8008e0e:	2380      	movs	r3, #128	; 0x80
 8008e10:	015b      	lsls	r3, r3, #5
 8008e12:	e000      	b.n	8008e16 <HAL_ADC_Init+0x11a>
 8008e14:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008e16:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008e1c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da04      	bge.n	8008e30 <HAL_ADC_Init+0x134>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	085b      	lsrs	r3, r3, #1
 8008e2e:	e001      	b.n	8008e34 <HAL_ADC_Init+0x138>
 8008e30:	2380      	movs	r3, #128	; 0x80
 8008e32:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8008e34:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	212c      	movs	r1, #44	; 0x2c
 8008e3a:	5c5b      	ldrb	r3, [r3, r1]
 8008e3c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008e3e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	5c9b      	ldrb	r3, [r3, r2]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d115      	bne.n	8008e7c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7e9b      	ldrb	r3, [r3, #26]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d105      	bne.n	8008e64 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	2280      	movs	r2, #128	; 0x80
 8008e5c:	0252      	lsls	r2, r2, #9
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	e00b      	b.n	8008e7c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e68:	2220      	movs	r2, #32
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e74:	2201      	movs	r2, #1
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e88:	23e0      	movs	r3, #224	; 0xe0
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008e92:	4313      	orrs	r3, r2
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	4a65      	ldr	r2, [pc, #404]	; (8009038 <HAL_ADC_Init+0x33c>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	0f9b      	lsrs	r3, r3, #30
 8008eb6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	223c      	movs	r2, #60	; 0x3c
 8008ec8:	5c9b      	ldrb	r3, [r3, r2]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d111      	bne.n	8008ef2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	0f9b      	lsrs	r3, r3, #30
 8008ed4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008eda:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8008ee0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8008ee6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	2201      	movs	r2, #1
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	4a50      	ldr	r2, [pc, #320]	; (800903c <HAL_ADC_Init+0x340>)
 8008efa:	4013      	ands	r3, r2
 8008efc:	0019      	movs	r1, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	23c0      	movs	r3, #192	; 0xc0
 8008f0e:	061b      	lsls	r3, r3, #24
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d018      	beq.n	8008f46 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8008f18:	2380      	movs	r3, #128	; 0x80
 8008f1a:	05db      	lsls	r3, r3, #23
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d012      	beq.n	8008f46 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	061b      	lsls	r3, r3, #24
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d00c      	beq.n	8008f46 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8008f2c:	4b44      	ldr	r3, [pc, #272]	; (8009040 <HAL_ADC_Init+0x344>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a44      	ldr	r2, [pc, #272]	; (8009044 <HAL_ADC_Init+0x348>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	0019      	movs	r1, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	23f0      	movs	r3, #240	; 0xf0
 8008f3c:	039b      	lsls	r3, r3, #14
 8008f3e:	401a      	ands	r2, r3
 8008f40:	4b3f      	ldr	r3, [pc, #252]	; (8009040 <HAL_ADC_Init+0x344>)
 8008f42:	430a      	orrs	r2, r1
 8008f44:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4e:	001a      	movs	r2, r3
 8008f50:	2100      	movs	r1, #0
 8008f52:	f7ff fdac 	bl	8008aae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	493a      	ldr	r1, [pc, #232]	; (8009048 <HAL_ADC_Init+0x34c>)
 8008f60:	001a      	movs	r2, r3
 8008f62:	f7ff fda4 	bl	8008aae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2110      	movs	r1, #16
 8008f7a:	4249      	negs	r1, r1
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8008f80:	e018      	b.n	8008fb4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	2380      	movs	r3, #128	; 0x80
 8008f88:	039b      	lsls	r3, r3, #14
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d112      	bne.n	8008fb4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	221c      	movs	r2, #28
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2210      	movs	r2, #16
 8008fa2:	4252      	negs	r2, r2
 8008fa4:	409a      	lsls	r2, r3
 8008fa6:	0011      	movs	r1, r2
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7ff fd94 	bl	8008ae8 <LL_ADC_GetSamplingTimeCommonChannels>
 8008fc0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d10b      	bne.n	8008fe2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	4393      	bics	r3, r2
 8008fd8:	2201      	movs	r2, #1
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008fe0:	e01c      	b.n	800901c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe6:	2212      	movs	r2, #18
 8008fe8:	4393      	bics	r3, r2
 8008fea:	2210      	movs	r2, #16
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8008ffe:	231f      	movs	r3, #31
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	2201      	movs	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009006:	e009      	b.n	800901c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900c:	2210      	movs	r2, #16
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009014:	231f      	movs	r3, #31
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	2201      	movs	r2, #1
 800901a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800901c:	231f      	movs	r3, #31
 800901e:	18fb      	adds	r3, r7, r3
 8009020:	781b      	ldrb	r3, [r3, #0]
}
 8009022:	0018      	movs	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	b008      	add	sp, #32
 8009028:	bd80      	pop	{r7, pc}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	200000f4 	.word	0x200000f4
 8009030:	00030d40 	.word	0x00030d40
 8009034:	fffffefd 	.word	0xfffffefd
 8009038:	fffe0201 	.word	0xfffe0201
 800903c:	1ffffc02 	.word	0x1ffffc02
 8009040:	40012708 	.word	0x40012708
 8009044:	ffc3ffff 	.word	0xffc3ffff
 8009048:	07ffff04 	.word	0x07ffff04

0800904c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800904c:	b5b0      	push	{r4, r5, r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	0018      	movs	r0, r3
 800905e:	f7ff fe3b 	bl	8008cd8 <LL_ADC_REG_IsConversionOngoing>
 8009062:	1e03      	subs	r3, r0, #0
 8009064:	d16c      	bne.n	8009140 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2254      	movs	r2, #84	; 0x54
 800906a:	5c9b      	ldrb	r3, [r3, r2]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_ADC_Start_DMA+0x28>
 8009070:	2302      	movs	r3, #2
 8009072:	e06c      	b.n	800914e <HAL_ADC_Start_DMA+0x102>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2254      	movs	r2, #84	; 0x54
 8009078:	2101      	movs	r1, #1
 800907a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	4013      	ands	r3, r2
 8009086:	d113      	bne.n	80090b0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	0018      	movs	r0, r3
 800908e:	f7ff fdff 	bl	8008c90 <LL_ADC_IsEnabled>
 8009092:	1e03      	subs	r3, r0, #0
 8009094:	d004      	beq.n	80090a0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	0018      	movs	r0, r3
 800909c:	f7ff fde6 	bl	8008c6c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2101      	movs	r1, #1
 80090ac:	430a      	orrs	r2, r1
 80090ae:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80090b0:	2517      	movs	r5, #23
 80090b2:	197c      	adds	r4, r7, r5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	0018      	movs	r0, r3
 80090b8:	f000 fa46 	bl	8009548 <ADC_Enable>
 80090bc:	0003      	movs	r3, r0
 80090be:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80090c0:	002c      	movs	r4, r5
 80090c2:	193b      	adds	r3, r7, r4
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d13e      	bne.n	8009148 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ce:	4a22      	ldr	r2, [pc, #136]	; (8009158 <HAL_ADC_Start_DMA+0x10c>)
 80090d0:	4013      	ands	r3, r2
 80090d2:	2280      	movs	r2, #128	; 0x80
 80090d4:	0052      	lsls	r2, r2, #1
 80090d6:	431a      	orrs	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e6:	4a1d      	ldr	r2, [pc, #116]	; (800915c <HAL_ADC_Start_DMA+0x110>)
 80090e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ee:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <HAL_ADC_Start_DMA+0x114>)
 80090f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f6:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <HAL_ADC_Start_DMA+0x118>)
 80090f8:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	221c      	movs	r2, #28
 8009100:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2254      	movs	r2, #84	; 0x54
 8009106:	2100      	movs	r1, #0
 8009108:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2110      	movs	r1, #16
 8009116:	430a      	orrs	r2, r1
 8009118:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3340      	adds	r3, #64	; 0x40
 8009124:	0019      	movs	r1, r3
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	193c      	adds	r4, r7, r4
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f000 fc58 	bl	80099e0 <HAL_DMA_Start_IT>
 8009130:	0003      	movs	r3, r0
 8009132:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	0018      	movs	r0, r3
 800913a:	f7ff fdbb 	bl	8008cb4 <LL_ADC_REG_StartConversion>
 800913e:	e003      	b.n	8009148 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009140:	2317      	movs	r3, #23
 8009142:	18fb      	adds	r3, r7, r3
 8009144:	2202      	movs	r2, #2
 8009146:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009148:	2317      	movs	r3, #23
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	781b      	ldrb	r3, [r3, #0]
}
 800914e:	0018      	movs	r0, r3
 8009150:	46bd      	mov	sp, r7
 8009152:	b006      	add	sp, #24
 8009154:	bdb0      	pop	{r4, r5, r7, pc}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	fffff0fe 	.word	0xfffff0fe
 800915c:	08009655 	.word	0x08009655
 8009160:	0800971d 	.word	0x0800971d
 8009164:	0800973b 	.word	0x0800973b

08009168 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	46bd      	mov	sp, r7
 8009174:	b002      	add	sp, #8
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009180:	46c0      	nop			; (mov r8, r8)
 8009182:	46bd      	mov	sp, r7
 8009184:	b002      	add	sp, #8
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	b002      	add	sp, #8
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80091a2:	2317      	movs	r3, #23
 80091a4:	18fb      	adds	r3, r7, r3
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2254      	movs	r2, #84	; 0x54
 80091b2:	5c9b      	ldrb	r3, [r3, r2]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_ADC_ConfigChannel+0x24>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e1c0      	b.n	800953e <HAL_ADC_ConfigChannel+0x3a6>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2254      	movs	r2, #84	; 0x54
 80091c0:	2101      	movs	r1, #1
 80091c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	0018      	movs	r0, r3
 80091ca:	f7ff fd85 	bl	8008cd8 <LL_ADC_REG_IsConversionOngoing>
 80091ce:	1e03      	subs	r3, r0, #0
 80091d0:	d000      	beq.n	80091d4 <HAL_ADC_ConfigChannel+0x3c>
 80091d2:	e1a3      	b.n	800951c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d100      	bne.n	80091de <HAL_ADC_ConfigChannel+0x46>
 80091dc:	e143      	b.n	8009466 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	2380      	movs	r3, #128	; 0x80
 80091e4:	061b      	lsls	r3, r3, #24
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d004      	beq.n	80091f4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80091ee:	4ac1      	ldr	r2, [pc, #772]	; (80094f4 <HAL_ADC_ConfigChannel+0x35c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d108      	bne.n	8009206 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	0019      	movs	r1, r3
 80091fe:	0010      	movs	r0, r2
 8009200:	f7ff fcba 	bl	8008b78 <LL_ADC_REG_SetSequencerChAdd>
 8009204:	e0c9      	b.n	800939a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	211f      	movs	r1, #31
 8009210:	400b      	ands	r3, r1
 8009212:	210f      	movs	r1, #15
 8009214:	4099      	lsls	r1, r3
 8009216:	000b      	movs	r3, r1
 8009218:	43db      	mvns	r3, r3
 800921a:	4013      	ands	r3, r2
 800921c:	0019      	movs	r1, r3
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	035b      	lsls	r3, r3, #13
 8009224:	0b5b      	lsrs	r3, r3, #13
 8009226:	d105      	bne.n	8009234 <HAL_ADC_ConfigChannel+0x9c>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	0e9b      	lsrs	r3, r3, #26
 800922e:	221f      	movs	r2, #31
 8009230:	4013      	ands	r3, r2
 8009232:	e098      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2201      	movs	r2, #1
 800923a:	4013      	ands	r3, r2
 800923c:	d000      	beq.n	8009240 <HAL_ADC_ConfigChannel+0xa8>
 800923e:	e091      	b.n	8009364 <HAL_ADC_ConfigChannel+0x1cc>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2202      	movs	r2, #2
 8009246:	4013      	ands	r3, r2
 8009248:	d000      	beq.n	800924c <HAL_ADC_ConfigChannel+0xb4>
 800924a:	e089      	b.n	8009360 <HAL_ADC_ConfigChannel+0x1c8>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2204      	movs	r2, #4
 8009252:	4013      	ands	r3, r2
 8009254:	d000      	beq.n	8009258 <HAL_ADC_ConfigChannel+0xc0>
 8009256:	e081      	b.n	800935c <HAL_ADC_ConfigChannel+0x1c4>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2208      	movs	r2, #8
 800925e:	4013      	ands	r3, r2
 8009260:	d000      	beq.n	8009264 <HAL_ADC_ConfigChannel+0xcc>
 8009262:	e079      	b.n	8009358 <HAL_ADC_ConfigChannel+0x1c0>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2210      	movs	r2, #16
 800926a:	4013      	ands	r3, r2
 800926c:	d000      	beq.n	8009270 <HAL_ADC_ConfigChannel+0xd8>
 800926e:	e071      	b.n	8009354 <HAL_ADC_ConfigChannel+0x1bc>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2220      	movs	r2, #32
 8009276:	4013      	ands	r3, r2
 8009278:	d000      	beq.n	800927c <HAL_ADC_ConfigChannel+0xe4>
 800927a:	e069      	b.n	8009350 <HAL_ADC_ConfigChannel+0x1b8>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2240      	movs	r2, #64	; 0x40
 8009282:	4013      	ands	r3, r2
 8009284:	d000      	beq.n	8009288 <HAL_ADC_ConfigChannel+0xf0>
 8009286:	e061      	b.n	800934c <HAL_ADC_ConfigChannel+0x1b4>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2280      	movs	r2, #128	; 0x80
 800928e:	4013      	ands	r3, r2
 8009290:	d000      	beq.n	8009294 <HAL_ADC_ConfigChannel+0xfc>
 8009292:	e059      	b.n	8009348 <HAL_ADC_ConfigChannel+0x1b0>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	2380      	movs	r3, #128	; 0x80
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	4013      	ands	r3, r2
 800929e:	d151      	bne.n	8009344 <HAL_ADC_ConfigChannel+0x1ac>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2380      	movs	r3, #128	; 0x80
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4013      	ands	r3, r2
 80092aa:	d149      	bne.n	8009340 <HAL_ADC_ConfigChannel+0x1a8>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	2380      	movs	r3, #128	; 0x80
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4013      	ands	r3, r2
 80092b6:	d141      	bne.n	800933c <HAL_ADC_ConfigChannel+0x1a4>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	2380      	movs	r3, #128	; 0x80
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	4013      	ands	r3, r2
 80092c2:	d139      	bne.n	8009338 <HAL_ADC_ConfigChannel+0x1a0>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	2380      	movs	r3, #128	; 0x80
 80092ca:	015b      	lsls	r3, r3, #5
 80092cc:	4013      	ands	r3, r2
 80092ce:	d131      	bne.n	8009334 <HAL_ADC_ConfigChannel+0x19c>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	2380      	movs	r3, #128	; 0x80
 80092d6:	019b      	lsls	r3, r3, #6
 80092d8:	4013      	ands	r3, r2
 80092da:	d129      	bne.n	8009330 <HAL_ADC_ConfigChannel+0x198>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	2380      	movs	r3, #128	; 0x80
 80092e2:	01db      	lsls	r3, r3, #7
 80092e4:	4013      	ands	r3, r2
 80092e6:	d121      	bne.n	800932c <HAL_ADC_ConfigChannel+0x194>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	2380      	movs	r3, #128	; 0x80
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	4013      	ands	r3, r2
 80092f2:	d119      	bne.n	8009328 <HAL_ADC_ConfigChannel+0x190>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	2380      	movs	r3, #128	; 0x80
 80092fa:	025b      	lsls	r3, r3, #9
 80092fc:	4013      	ands	r3, r2
 80092fe:	d111      	bne.n	8009324 <HAL_ADC_ConfigChannel+0x18c>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	029b      	lsls	r3, r3, #10
 8009308:	4013      	ands	r3, r2
 800930a:	d109      	bne.n	8009320 <HAL_ADC_ConfigChannel+0x188>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	2380      	movs	r3, #128	; 0x80
 8009312:	02db      	lsls	r3, r3, #11
 8009314:	4013      	ands	r3, r2
 8009316:	d001      	beq.n	800931c <HAL_ADC_ConfigChannel+0x184>
 8009318:	2312      	movs	r3, #18
 800931a:	e024      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 800931c:	2300      	movs	r3, #0
 800931e:	e022      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009320:	2311      	movs	r3, #17
 8009322:	e020      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009324:	2310      	movs	r3, #16
 8009326:	e01e      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009328:	230f      	movs	r3, #15
 800932a:	e01c      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 800932c:	230e      	movs	r3, #14
 800932e:	e01a      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009330:	230d      	movs	r3, #13
 8009332:	e018      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009334:	230c      	movs	r3, #12
 8009336:	e016      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009338:	230b      	movs	r3, #11
 800933a:	e014      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 800933c:	230a      	movs	r3, #10
 800933e:	e012      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009340:	2309      	movs	r3, #9
 8009342:	e010      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009344:	2308      	movs	r3, #8
 8009346:	e00e      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009348:	2307      	movs	r3, #7
 800934a:	e00c      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 800934c:	2306      	movs	r3, #6
 800934e:	e00a      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009350:	2305      	movs	r3, #5
 8009352:	e008      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009354:	2304      	movs	r3, #4
 8009356:	e006      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009358:	2303      	movs	r3, #3
 800935a:	e004      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 800935c:	2302      	movs	r3, #2
 800935e:	e002      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009360:	2301      	movs	r3, #1
 8009362:	e000      	b.n	8009366 <HAL_ADC_ConfigChannel+0x1ce>
 8009364:	2300      	movs	r3, #0
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	6852      	ldr	r2, [r2, #4]
 800936a:	201f      	movs	r0, #31
 800936c:	4002      	ands	r2, r0
 800936e:	4093      	lsls	r3, r2
 8009370:	000a      	movs	r2, r1
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	089b      	lsrs	r3, r3, #2
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	429a      	cmp	r2, r3
 8009386:	d808      	bhi.n	800939a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	6859      	ldr	r1, [r3, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	001a      	movs	r2, r3
 8009396:	f7ff fbcf 	bl	8008b38 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6819      	ldr	r1, [r3, #0]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	001a      	movs	r2, r3
 80093a8:	f7ff fc0a 	bl	8008bc0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	db00      	blt.n	80093b6 <HAL_ADC_ConfigChannel+0x21e>
 80093b4:	e0bc      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80093b6:	4b50      	ldr	r3, [pc, #320]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7ff fb6b 	bl	8008a94 <LL_ADC_GetCommonPathInternalCh>
 80093be:	0003      	movs	r3, r0
 80093c0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a4d      	ldr	r2, [pc, #308]	; (80094fc <HAL_ADC_ConfigChannel+0x364>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d122      	bne.n	8009412 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	2380      	movs	r3, #128	; 0x80
 80093d0:	041b      	lsls	r3, r3, #16
 80093d2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80093d4:	d11d      	bne.n	8009412 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2280      	movs	r2, #128	; 0x80
 80093da:	0412      	lsls	r2, r2, #16
 80093dc:	4313      	orrs	r3, r2
 80093de:	4a46      	ldr	r2, [pc, #280]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 80093e0:	0019      	movs	r1, r3
 80093e2:	0010      	movs	r0, r2
 80093e4:	f7ff fb42 	bl	8008a6c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80093e8:	4b45      	ldr	r3, [pc, #276]	; (8009500 <HAL_ADC_ConfigChannel+0x368>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4945      	ldr	r1, [pc, #276]	; (8009504 <HAL_ADC_ConfigChannel+0x36c>)
 80093ee:	0018      	movs	r0, r3
 80093f0:	f7f6 fea6 	bl	8000140 <__udivsi3>
 80093f4:	0003      	movs	r3, r0
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	0013      	movs	r3, r2
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	189b      	adds	r3, r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009402:	e002      	b.n	800940a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3b01      	subs	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1f9      	bne.n	8009404 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009410:	e08e      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a3c      	ldr	r2, [pc, #240]	; (8009508 <HAL_ADC_ConfigChannel+0x370>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d10e      	bne.n	800943a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	2380      	movs	r3, #128	; 0x80
 8009420:	045b      	lsls	r3, r3, #17
 8009422:	4013      	ands	r3, r2
 8009424:	d109      	bne.n	800943a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2280      	movs	r2, #128	; 0x80
 800942a:	0452      	lsls	r2, r2, #17
 800942c:	4313      	orrs	r3, r2
 800942e:	4a32      	ldr	r2, [pc, #200]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 8009430:	0019      	movs	r1, r3
 8009432:	0010      	movs	r0, r2
 8009434:	f7ff fb1a 	bl	8008a6c <LL_ADC_SetCommonPathInternalCh>
 8009438:	e07a      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a33      	ldr	r2, [pc, #204]	; (800950c <HAL_ADC_ConfigChannel+0x374>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d000      	beq.n	8009446 <HAL_ADC_ConfigChannel+0x2ae>
 8009444:	e074      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	2380      	movs	r3, #128	; 0x80
 800944a:	03db      	lsls	r3, r3, #15
 800944c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800944e:	d000      	beq.n	8009452 <HAL_ADC_ConfigChannel+0x2ba>
 8009450:	e06e      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	2280      	movs	r2, #128	; 0x80
 8009456:	03d2      	lsls	r2, r2, #15
 8009458:	4313      	orrs	r3, r2
 800945a:	4a27      	ldr	r2, [pc, #156]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 800945c:	0019      	movs	r1, r3
 800945e:	0010      	movs	r0, r2
 8009460:	f7ff fb04 	bl	8008a6c <LL_ADC_SetCommonPathInternalCh>
 8009464:	e064      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691a      	ldr	r2, [r3, #16]
 800946a:	2380      	movs	r3, #128	; 0x80
 800946c:	061b      	lsls	r3, r3, #24
 800946e:	429a      	cmp	r2, r3
 8009470:	d004      	beq.n	800947c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009476:	4a1f      	ldr	r2, [pc, #124]	; (80094f4 <HAL_ADC_ConfigChannel+0x35c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d107      	bne.n	800948c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	0019      	movs	r1, r3
 8009486:	0010      	movs	r0, r2
 8009488:	f7ff fb87 	bl	8008b9a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	da4d      	bge.n	8009530 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009494:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 8009496:	0018      	movs	r0, r3
 8009498:	f7ff fafc 	bl	8008a94 <LL_ADC_GetCommonPathInternalCh>
 800949c:	0003      	movs	r3, r0
 800949e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a15      	ldr	r2, [pc, #84]	; (80094fc <HAL_ADC_ConfigChannel+0x364>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4a18      	ldr	r2, [pc, #96]	; (8009510 <HAL_ADC_ConfigChannel+0x378>)
 80094ae:	4013      	ands	r3, r2
 80094b0:	4a11      	ldr	r2, [pc, #68]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 80094b2:	0019      	movs	r1, r3
 80094b4:	0010      	movs	r0, r2
 80094b6:	f7ff fad9 	bl	8008a6c <LL_ADC_SetCommonPathInternalCh>
 80094ba:	e039      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a11      	ldr	r2, [pc, #68]	; (8009508 <HAL_ADC_ConfigChannel+0x370>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d108      	bne.n	80094d8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	4a12      	ldr	r2, [pc, #72]	; (8009514 <HAL_ADC_ConfigChannel+0x37c>)
 80094ca:	4013      	ands	r3, r2
 80094cc:	4a0a      	ldr	r2, [pc, #40]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 80094ce:	0019      	movs	r1, r3
 80094d0:	0010      	movs	r0, r2
 80094d2:	f7ff facb 	bl	8008a6c <LL_ADC_SetCommonPathInternalCh>
 80094d6:	e02b      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a0b      	ldr	r2, [pc, #44]	; (800950c <HAL_ADC_ConfigChannel+0x374>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d126      	bne.n	8009530 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	4a0c      	ldr	r2, [pc, #48]	; (8009518 <HAL_ADC_ConfigChannel+0x380>)
 80094e6:	4013      	ands	r3, r2
 80094e8:	4a03      	ldr	r2, [pc, #12]	; (80094f8 <HAL_ADC_ConfigChannel+0x360>)
 80094ea:	0019      	movs	r1, r3
 80094ec:	0010      	movs	r0, r2
 80094ee:	f7ff fabd 	bl	8008a6c <LL_ADC_SetCommonPathInternalCh>
 80094f2:	e01d      	b.n	8009530 <HAL_ADC_ConfigChannel+0x398>
 80094f4:	80000004 	.word	0x80000004
 80094f8:	40012708 	.word	0x40012708
 80094fc:	b0001000 	.word	0xb0001000
 8009500:	200000f4 	.word	0x200000f4
 8009504:	00030d40 	.word	0x00030d40
 8009508:	b8004000 	.word	0xb8004000
 800950c:	b4002000 	.word	0xb4002000
 8009510:	ff7fffff 	.word	0xff7fffff
 8009514:	feffffff 	.word	0xfeffffff
 8009518:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009520:	2220      	movs	r2, #32
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009528:	2317      	movs	r3, #23
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	2201      	movs	r2, #1
 800952e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2254      	movs	r2, #84	; 0x54
 8009534:	2100      	movs	r1, #0
 8009536:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8009538:	2317      	movs	r3, #23
 800953a:	18fb      	adds	r3, r7, r3
 800953c:	781b      	ldrb	r3, [r3, #0]
}
 800953e:	0018      	movs	r0, r3
 8009540:	46bd      	mov	sp, r7
 8009542:	b006      	add	sp, #24
 8009544:	bd80      	pop	{r7, pc}
 8009546:	46c0      	nop			; (mov r8, r8)

08009548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009550:	2300      	movs	r3, #0
 8009552:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	0018      	movs	r0, r3
 800955a:	f7ff fb99 	bl	8008c90 <LL_ADC_IsEnabled>
 800955e:	1e03      	subs	r3, r0, #0
 8009560:	d000      	beq.n	8009564 <ADC_Enable+0x1c>
 8009562:	e069      	b.n	8009638 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	4a36      	ldr	r2, [pc, #216]	; (8009644 <ADC_Enable+0xfc>)
 800956c:	4013      	ands	r3, r2
 800956e:	d00d      	beq.n	800958c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009574:	2210      	movs	r2, #16
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009580:	2201      	movs	r2, #1
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e056      	b.n	800963a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	0018      	movs	r0, r3
 8009592:	f7ff fb59 	bl	8008c48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8009596:	4b2c      	ldr	r3, [pc, #176]	; (8009648 <ADC_Enable+0x100>)
 8009598:	0018      	movs	r0, r3
 800959a:	f7ff fa7b 	bl	8008a94 <LL_ADC_GetCommonPathInternalCh>
 800959e:	0002      	movs	r2, r0
 80095a0:	2380      	movs	r3, #128	; 0x80
 80095a2:	041b      	lsls	r3, r3, #16
 80095a4:	4013      	ands	r3, r2
 80095a6:	d00f      	beq.n	80095c8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80095a8:	4b28      	ldr	r3, [pc, #160]	; (800964c <ADC_Enable+0x104>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4928      	ldr	r1, [pc, #160]	; (8009650 <ADC_Enable+0x108>)
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7f6 fdc6 	bl	8000140 <__udivsi3>
 80095b4:	0003      	movs	r3, r0
 80095b6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80095b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80095ba:	e002      	b.n	80095c2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	3b01      	subs	r3, #1
 80095c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1f9      	bne.n	80095bc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	7e5b      	ldrb	r3, [r3, #25]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d033      	beq.n	8009638 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80095d0:	f7ff fa08 	bl	80089e4 <HAL_GetTick>
 80095d4:	0003      	movs	r3, r0
 80095d6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80095d8:	e027      	b.n	800962a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	0018      	movs	r0, r3
 80095e0:	f7ff fb56 	bl	8008c90 <LL_ADC_IsEnabled>
 80095e4:	1e03      	subs	r3, r0, #0
 80095e6:	d104      	bne.n	80095f2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	0018      	movs	r0, r3
 80095ee:	f7ff fb2b 	bl	8008c48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80095f2:	f7ff f9f7 	bl	80089e4 <HAL_GetTick>
 80095f6:	0002      	movs	r2, r0
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d914      	bls.n	800962a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2201      	movs	r2, #1
 8009608:	4013      	ands	r3, r2
 800960a:	2b01      	cmp	r3, #1
 800960c:	d00d      	beq.n	800962a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009612:	2210      	movs	r2, #16
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800961e:	2201      	movs	r2, #1
 8009620:	431a      	orrs	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e007      	b.n	800963a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2201      	movs	r2, #1
 8009632:	4013      	ands	r3, r2
 8009634:	2b01      	cmp	r3, #1
 8009636:	d1d0      	bne.n	80095da <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	0018      	movs	r0, r3
 800963c:	46bd      	mov	sp, r7
 800963e:	b004      	add	sp, #16
 8009640:	bd80      	pop	{r7, pc}
 8009642:	46c0      	nop			; (mov r8, r8)
 8009644:	80000017 	.word	0x80000017
 8009648:	40012708 	.word	0x40012708
 800964c:	200000f4 	.word	0x200000f4
 8009650:	00030d40 	.word	0x00030d40

08009654 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009666:	2250      	movs	r2, #80	; 0x50
 8009668:	4013      	ands	r3, r2
 800966a:	d141      	bne.n	80096f0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009670:	2280      	movs	r2, #128	; 0x80
 8009672:	0092      	lsls	r2, r2, #2
 8009674:	431a      	orrs	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	0018      	movs	r0, r3
 8009680:	f7ff fa49 	bl	8008b16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009684:	1e03      	subs	r3, r0, #0
 8009686:	d02e      	beq.n	80096e6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	7e9b      	ldrb	r3, [r3, #26]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d12a      	bne.n	80096e6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2208      	movs	r2, #8
 8009698:	4013      	ands	r3, r2
 800969a:	2b08      	cmp	r3, #8
 800969c:	d123      	bne.n	80096e6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	0018      	movs	r0, r3
 80096a4:	f7ff fb18 	bl	8008cd8 <LL_ADC_REG_IsConversionOngoing>
 80096a8:	1e03      	subs	r3, r0, #0
 80096aa:	d110      	bne.n	80096ce <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	210c      	movs	r1, #12
 80096b8:	438a      	bics	r2, r1
 80096ba:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c0:	4a15      	ldr	r2, [pc, #84]	; (8009718 <ADC_DMAConvCplt+0xc4>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	2201      	movs	r2, #1
 80096c6:	431a      	orrs	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	659a      	str	r2, [r3, #88]	; 0x58
 80096cc:	e00b      	b.n	80096e6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d2:	2220      	movs	r2, #32
 80096d4:	431a      	orrs	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096de:	2201      	movs	r2, #1
 80096e0:	431a      	orrs	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	0018      	movs	r0, r3
 80096ea:	f7ff fd3d 	bl	8009168 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80096ee:	e00f      	b.n	8009710 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f4:	2210      	movs	r2, #16
 80096f6:	4013      	ands	r3, r2
 80096f8:	d004      	beq.n	8009704 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	0018      	movs	r0, r3
 80096fe:	f7ff fd43 	bl	8009188 <HAL_ADC_ErrorCallback>
}
 8009702:	e005      	b.n	8009710 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	0010      	movs	r0, r2
 800970e:	4798      	blx	r3
}
 8009710:	46c0      	nop			; (mov r8, r8)
 8009712:	46bd      	mov	sp, r7
 8009714:	b004      	add	sp, #16
 8009716:	bd80      	pop	{r7, pc}
 8009718:	fffffefe 	.word	0xfffffefe

0800971c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009728:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	0018      	movs	r0, r3
 800972e:	f7ff fd23 	bl	8009178 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	46bd      	mov	sp, r7
 8009736:	b004      	add	sp, #16
 8009738:	bd80      	pop	{r7, pc}

0800973a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800974c:	2240      	movs	r2, #64	; 0x40
 800974e:	431a      	orrs	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009758:	2204      	movs	r2, #4
 800975a:	431a      	orrs	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	0018      	movs	r0, r3
 8009764:	f7ff fd10 	bl	8009188 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009768:	46c0      	nop			; (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	b004      	add	sp, #16
 800976e:	bd80      	pop	{r7, pc}

08009770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	0002      	movs	r2, r0
 8009778:	1dfb      	adds	r3, r7, #7
 800977a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800977c:	1dfb      	adds	r3, r7, #7
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b7f      	cmp	r3, #127	; 0x7f
 8009782:	d809      	bhi.n	8009798 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009784:	1dfb      	adds	r3, r7, #7
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	001a      	movs	r2, r3
 800978a:	231f      	movs	r3, #31
 800978c:	401a      	ands	r2, r3
 800978e:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <__NVIC_EnableIRQ+0x30>)
 8009790:	2101      	movs	r1, #1
 8009792:	4091      	lsls	r1, r2
 8009794:	000a      	movs	r2, r1
 8009796:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8009798:	46c0      	nop			; (mov r8, r8)
 800979a:	46bd      	mov	sp, r7
 800979c:	b002      	add	sp, #8
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000e100 	.word	0xe000e100

080097a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	0002      	movs	r2, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	1dfb      	adds	r3, r7, #7
 80097b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80097b2:	1dfb      	adds	r3, r7, #7
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b7f      	cmp	r3, #127	; 0x7f
 80097b8:	d828      	bhi.n	800980c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097ba:	4a2f      	ldr	r2, [pc, #188]	; (8009878 <__NVIC_SetPriority+0xd4>)
 80097bc:	1dfb      	adds	r3, r7, #7
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	b25b      	sxtb	r3, r3
 80097c2:	089b      	lsrs	r3, r3, #2
 80097c4:	33c0      	adds	r3, #192	; 0xc0
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	589b      	ldr	r3, [r3, r2]
 80097ca:	1dfa      	adds	r2, r7, #7
 80097cc:	7812      	ldrb	r2, [r2, #0]
 80097ce:	0011      	movs	r1, r2
 80097d0:	2203      	movs	r2, #3
 80097d2:	400a      	ands	r2, r1
 80097d4:	00d2      	lsls	r2, r2, #3
 80097d6:	21ff      	movs	r1, #255	; 0xff
 80097d8:	4091      	lsls	r1, r2
 80097da:	000a      	movs	r2, r1
 80097dc:	43d2      	mvns	r2, r2
 80097de:	401a      	ands	r2, r3
 80097e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	019b      	lsls	r3, r3, #6
 80097e6:	22ff      	movs	r2, #255	; 0xff
 80097e8:	401a      	ands	r2, r3
 80097ea:	1dfb      	adds	r3, r7, #7
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	0018      	movs	r0, r3
 80097f0:	2303      	movs	r3, #3
 80097f2:	4003      	ands	r3, r0
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097f8:	481f      	ldr	r0, [pc, #124]	; (8009878 <__NVIC_SetPriority+0xd4>)
 80097fa:	1dfb      	adds	r3, r7, #7
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b25b      	sxtb	r3, r3
 8009800:	089b      	lsrs	r3, r3, #2
 8009802:	430a      	orrs	r2, r1
 8009804:	33c0      	adds	r3, #192	; 0xc0
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800980a:	e031      	b.n	8009870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800980c:	4a1b      	ldr	r2, [pc, #108]	; (800987c <__NVIC_SetPriority+0xd8>)
 800980e:	1dfb      	adds	r3, r7, #7
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	0019      	movs	r1, r3
 8009814:	230f      	movs	r3, #15
 8009816:	400b      	ands	r3, r1
 8009818:	3b08      	subs	r3, #8
 800981a:	089b      	lsrs	r3, r3, #2
 800981c:	3306      	adds	r3, #6
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	18d3      	adds	r3, r2, r3
 8009822:	3304      	adds	r3, #4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1dfa      	adds	r2, r7, #7
 8009828:	7812      	ldrb	r2, [r2, #0]
 800982a:	0011      	movs	r1, r2
 800982c:	2203      	movs	r2, #3
 800982e:	400a      	ands	r2, r1
 8009830:	00d2      	lsls	r2, r2, #3
 8009832:	21ff      	movs	r1, #255	; 0xff
 8009834:	4091      	lsls	r1, r2
 8009836:	000a      	movs	r2, r1
 8009838:	43d2      	mvns	r2, r2
 800983a:	401a      	ands	r2, r3
 800983c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	019b      	lsls	r3, r3, #6
 8009842:	22ff      	movs	r2, #255	; 0xff
 8009844:	401a      	ands	r2, r3
 8009846:	1dfb      	adds	r3, r7, #7
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	0018      	movs	r0, r3
 800984c:	2303      	movs	r3, #3
 800984e:	4003      	ands	r3, r0
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009854:	4809      	ldr	r0, [pc, #36]	; (800987c <__NVIC_SetPriority+0xd8>)
 8009856:	1dfb      	adds	r3, r7, #7
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	001c      	movs	r4, r3
 800985c:	230f      	movs	r3, #15
 800985e:	4023      	ands	r3, r4
 8009860:	3b08      	subs	r3, #8
 8009862:	089b      	lsrs	r3, r3, #2
 8009864:	430a      	orrs	r2, r1
 8009866:	3306      	adds	r3, #6
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	18c3      	adds	r3, r0, r3
 800986c:	3304      	adds	r3, #4
 800986e:	601a      	str	r2, [r3, #0]
}
 8009870:	46c0      	nop			; (mov r8, r8)
 8009872:	46bd      	mov	sp, r7
 8009874:	b003      	add	sp, #12
 8009876:	bd90      	pop	{r4, r7, pc}
 8009878:	e000e100 	.word	0xe000e100
 800987c:	e000ed00 	.word	0xe000ed00

08009880 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
 800988a:	210f      	movs	r1, #15
 800988c:	187b      	adds	r3, r7, r1
 800988e:	1c02      	adds	r2, r0, #0
 8009890:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	187b      	adds	r3, r7, r1
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	b25b      	sxtb	r3, r3
 800989a:	0011      	movs	r1, r2
 800989c:	0018      	movs	r0, r3
 800989e:	f7ff ff81 	bl	80097a4 <__NVIC_SetPriority>
}
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b004      	add	sp, #16
 80098a8:	bd80      	pop	{r7, pc}

080098aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	0002      	movs	r2, r0
 80098b2:	1dfb      	adds	r3, r7, #7
 80098b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098b6:	1dfb      	adds	r3, r7, #7
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	0018      	movs	r0, r3
 80098be:	f7ff ff57 	bl	8009770 <__NVIC_EnableIRQ>
}
 80098c2:	46c0      	nop			; (mov r8, r8)
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b002      	add	sp, #8
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e077      	b.n	80099ce <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a3d      	ldr	r2, [pc, #244]	; (80099d8 <HAL_DMA_Init+0x10c>)
 80098e4:	4694      	mov	ip, r2
 80098e6:	4463      	add	r3, ip
 80098e8:	2114      	movs	r1, #20
 80098ea:	0018      	movs	r0, r3
 80098ec:	f7f6 fc28 	bl	8000140 <__udivsi3>
 80098f0:	0003      	movs	r3, r0
 80098f2:	009a      	lsls	r2, r3, #2
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2225      	movs	r2, #37	; 0x25
 80098fc:	2102      	movs	r1, #2
 80098fe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4934      	ldr	r1, [pc, #208]	; (80099dc <HAL_DMA_Init+0x110>)
 800990c:	400a      	ands	r2, r1
 800990e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6819      	ldr	r1, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	431a      	orrs	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	431a      	orrs	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	0018      	movs	r0, r3
 800994a:	f000 fa8d 	bl	8009e68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	2380      	movs	r3, #128	; 0x80
 8009954:	01db      	lsls	r3, r3, #7
 8009956:	429a      	cmp	r2, r3
 8009958:	d102      	bne.n	8009960 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009968:	213f      	movs	r1, #63	; 0x3f
 800996a:	400a      	ands	r2, r1
 800996c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009976:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d011      	beq.n	80099a4 <HAL_DMA_Init+0xd8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d80d      	bhi.n	80099a4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	0018      	movs	r0, r3
 800998c:	f000 fa98 	bl	8009ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	e008      	b.n	80099b6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2225      	movs	r2, #37	; 0x25
 80099c0:	2101      	movs	r1, #1
 80099c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2224      	movs	r2, #36	; 0x24
 80099c8:	2100      	movs	r1, #0
 80099ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	0018      	movs	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b002      	add	sp, #8
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	bffdfff8 	.word	0xbffdfff8
 80099dc:	ffff800f 	.word	0xffff800f

080099e0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099ee:	2317      	movs	r3, #23
 80099f0:	18fb      	adds	r3, r7, r3
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2224      	movs	r2, #36	; 0x24
 80099fa:	5c9b      	ldrb	r3, [r3, r2]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d101      	bne.n	8009a04 <HAL_DMA_Start_IT+0x24>
 8009a00:	2302      	movs	r3, #2
 8009a02:	e06f      	b.n	8009ae4 <HAL_DMA_Start_IT+0x104>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2224      	movs	r2, #36	; 0x24
 8009a08:	2101      	movs	r1, #1
 8009a0a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2225      	movs	r2, #37	; 0x25
 8009a10:	5c9b      	ldrb	r3, [r3, r2]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d157      	bne.n	8009ac8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2225      	movs	r2, #37	; 0x25
 8009a1c:	2102      	movs	r1, #2
 8009a1e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2101      	movs	r1, #1
 8009a32:	438a      	bics	r2, r1
 8009a34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f9d3 	bl	8009de8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d008      	beq.n	8009a5c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	210e      	movs	r1, #14
 8009a56:	430a      	orrs	r2, r1
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	e00f      	b.n	8009a7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2104      	movs	r1, #4
 8009a68:	438a      	bics	r2, r1
 8009a6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	210a      	movs	r1, #10
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	2380      	movs	r3, #128	; 0x80
 8009a84:	025b      	lsls	r3, r3, #9
 8009a86:	4013      	ands	r3, r2
 8009a88:	d008      	beq.n	8009a9c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a94:	2180      	movs	r1, #128	; 0x80
 8009a96:	0049      	lsls	r1, r1, #1
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d008      	beq.n	8009ab6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aae:	2180      	movs	r1, #128	; 0x80
 8009ab0:	0049      	lsls	r1, r1, #1
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	e00a      	b.n	8009ade <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2280      	movs	r2, #128	; 0x80
 8009acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2224      	movs	r2, #36	; 0x24
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8009ad6:	2317      	movs	r3, #23
 8009ad8:	18fb      	adds	r3, r7, r3
 8009ada:	2201      	movs	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009ade:	2317      	movs	r3, #23
 8009ae0:	18fb      	adds	r3, r7, r3
 8009ae2:	781b      	ldrb	r3, [r3, #0]
}
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b006      	add	sp, #24
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e050      	b.n	8009ba0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2225      	movs	r2, #37	; 0x25
 8009b02:	5c9b      	ldrb	r3, [r3, r2]
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d008      	beq.n	8009b1c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2224      	movs	r2, #36	; 0x24
 8009b14:	2100      	movs	r1, #0
 8009b16:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e041      	b.n	8009ba0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	210e      	movs	r1, #14
 8009b28:	438a      	bics	r2, r1
 8009b2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	491c      	ldr	r1, [pc, #112]	; (8009ba8 <HAL_DMA_Abort+0xbc>)
 8009b38:	400a      	ands	r2, r1
 8009b3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2101      	movs	r1, #1
 8009b48:	438a      	bics	r2, r1
 8009b4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8009b4c:	4b17      	ldr	r3, [pc, #92]	; (8009bac <HAL_DMA_Abort+0xc0>)
 8009b4e:	6859      	ldr	r1, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	221c      	movs	r2, #28
 8009b56:	4013      	ands	r3, r2
 8009b58:	2201      	movs	r2, #1
 8009b5a:	409a      	lsls	r2, r3
 8009b5c:	4b13      	ldr	r3, [pc, #76]	; (8009bac <HAL_DMA_Abort+0xc0>)
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009b6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7e:	490a      	ldr	r1, [pc, #40]	; (8009ba8 <HAL_DMA_Abort+0xbc>)
 8009b80:	400a      	ands	r2, r1
 8009b82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009b8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2225      	movs	r2, #37	; 0x25
 8009b92:	2101      	movs	r1, #1
 8009b94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2224      	movs	r2, #36	; 0x24
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	b002      	add	sp, #8
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	fffffeff 	.word	0xfffffeff
 8009bac:	40020000 	.word	0x40020000

08009bb0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bb8:	210f      	movs	r1, #15
 8009bba:	187b      	adds	r3, r7, r1
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2225      	movs	r2, #37	; 0x25
 8009bc4:	5c9b      	ldrb	r3, [r3, r2]
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d006      	beq.n	8009bda <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2204      	movs	r2, #4
 8009bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009bd2:	187b      	adds	r3, r7, r1
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	701a      	strb	r2, [r3, #0]
 8009bd8:	e049      	b.n	8009c6e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	210e      	movs	r1, #14
 8009be6:	438a      	bics	r2, r1
 8009be8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	438a      	bics	r2, r1
 8009bf8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c04:	491d      	ldr	r1, [pc, #116]	; (8009c7c <HAL_DMA_Abort_IT+0xcc>)
 8009c06:	400a      	ands	r2, r1
 8009c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8009c0a:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <HAL_DMA_Abort_IT+0xd0>)
 8009c0c:	6859      	ldr	r1, [r3, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	221c      	movs	r2, #28
 8009c14:	4013      	ands	r3, r2
 8009c16:	2201      	movs	r2, #1
 8009c18:	409a      	lsls	r2, r3
 8009c1a:	4b19      	ldr	r3, [pc, #100]	; (8009c80 <HAL_DMA_Abort_IT+0xd0>)
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009c28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00c      	beq.n	8009c4c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3c:	490f      	ldr	r1, [pc, #60]	; (8009c7c <HAL_DMA_Abort_IT+0xcc>)
 8009c3e:	400a      	ands	r2, r1
 8009c40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009c4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2225      	movs	r2, #37	; 0x25
 8009c50:	2101      	movs	r1, #1
 8009c52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2224      	movs	r2, #36	; 0x24
 8009c58:	2100      	movs	r1, #0
 8009c5a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	0010      	movs	r0, r2
 8009c6c:	4798      	blx	r3
    }
  }
  return status;
 8009c6e:	230f      	movs	r3, #15
 8009c70:	18fb      	adds	r3, r7, r3
 8009c72:	781b      	ldrb	r3, [r3, #0]
}
 8009c74:	0018      	movs	r0, r3
 8009c76:	46bd      	mov	sp, r7
 8009c78:	b004      	add	sp, #16
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	fffffeff 	.word	0xfffffeff
 8009c80:	40020000 	.word	0x40020000

08009c84 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8009c8c:	4b55      	ldr	r3, [pc, #340]	; (8009de4 <HAL_DMA_IRQHandler+0x160>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	221c      	movs	r2, #28
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	2204      	movs	r2, #4
 8009ca4:	409a      	lsls	r2, r3
 8009ca6:	0013      	movs	r3, r2
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4013      	ands	r3, r2
 8009cac:	d027      	beq.n	8009cfe <HAL_DMA_IRQHandler+0x7a>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2204      	movs	r2, #4
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	d023      	beq.n	8009cfe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	d107      	bne.n	8009cd2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2104      	movs	r1, #4
 8009cce:	438a      	bics	r2, r1
 8009cd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8009cd2:	4b44      	ldr	r3, [pc, #272]	; (8009de4 <HAL_DMA_IRQHandler+0x160>)
 8009cd4:	6859      	ldr	r1, [r3, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cda:	221c      	movs	r2, #28
 8009cdc:	4013      	ands	r3, r2
 8009cde:	2204      	movs	r2, #4
 8009ce0:	409a      	lsls	r2, r3
 8009ce2:	4b40      	ldr	r3, [pc, #256]	; (8009de4 <HAL_DMA_IRQHandler+0x160>)
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d100      	bne.n	8009cf2 <HAL_DMA_IRQHandler+0x6e>
 8009cf0:	e073      	b.n	8009dda <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	0010      	movs	r0, r2
 8009cfa:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8009cfc:	e06d      	b.n	8009dda <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	221c      	movs	r2, #28
 8009d04:	4013      	ands	r3, r2
 8009d06:	2202      	movs	r2, #2
 8009d08:	409a      	lsls	r2, r3
 8009d0a:	0013      	movs	r3, r2
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	d02e      	beq.n	8009d70 <HAL_DMA_IRQHandler+0xec>
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2202      	movs	r2, #2
 8009d16:	4013      	ands	r3, r2
 8009d18:	d02a      	beq.n	8009d70 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2220      	movs	r2, #32
 8009d22:	4013      	ands	r3, r2
 8009d24:	d10b      	bne.n	8009d3e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	210a      	movs	r1, #10
 8009d32:	438a      	bics	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2225      	movs	r2, #37	; 0x25
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8009d3e:	4b29      	ldr	r3, [pc, #164]	; (8009de4 <HAL_DMA_IRQHandler+0x160>)
 8009d40:	6859      	ldr	r1, [r3, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	221c      	movs	r2, #28
 8009d48:	4013      	ands	r3, r2
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	409a      	lsls	r2, r3
 8009d4e:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <HAL_DMA_IRQHandler+0x160>)
 8009d50:	430a      	orrs	r2, r1
 8009d52:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2224      	movs	r2, #36	; 0x24
 8009d58:	2100      	movs	r1, #0
 8009d5a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d03a      	beq.n	8009dda <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	0010      	movs	r0, r2
 8009d6c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8009d6e:	e034      	b.n	8009dda <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d74:	221c      	movs	r2, #28
 8009d76:	4013      	ands	r3, r2
 8009d78:	2208      	movs	r2, #8
 8009d7a:	409a      	lsls	r2, r3
 8009d7c:	0013      	movs	r3, r2
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4013      	ands	r3, r2
 8009d82:	d02b      	beq.n	8009ddc <HAL_DMA_IRQHandler+0x158>
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2208      	movs	r2, #8
 8009d88:	4013      	ands	r3, r2
 8009d8a:	d027      	beq.n	8009ddc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	210e      	movs	r1, #14
 8009d98:	438a      	bics	r2, r1
 8009d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8009d9c:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <HAL_DMA_IRQHandler+0x160>)
 8009d9e:	6859      	ldr	r1, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da4:	221c      	movs	r2, #28
 8009da6:	4013      	ands	r3, r2
 8009da8:	2201      	movs	r2, #1
 8009daa:	409a      	lsls	r2, r3
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <HAL_DMA_IRQHandler+0x160>)
 8009dae:	430a      	orrs	r2, r1
 8009db0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2225      	movs	r2, #37	; 0x25
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2224      	movs	r2, #36	; 0x24
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	0010      	movs	r0, r2
 8009dd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	46c0      	nop			; (mov r8, r8)
}
 8009dde:	46bd      	mov	sp, r7
 8009de0:	b004      	add	sp, #16
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	40020000 	.word	0x40020000

08009de8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009dfe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009e10:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8009e12:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <DMA_SetConfig+0x7c>)
 8009e14:	6859      	ldr	r1, [r3, #4]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	221c      	movs	r2, #28
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	2201      	movs	r2, #1
 8009e20:	409a      	lsls	r2, r3
 8009e22:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <DMA_SetConfig+0x7c>)
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	2b10      	cmp	r3, #16
 8009e36:	d108      	bne.n	8009e4a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e48:	e007      	b.n	8009e5a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	60da      	str	r2, [r3, #12]
}
 8009e5a:	46c0      	nop			; (mov r8, r8)
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	b004      	add	sp, #16
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	46c0      	nop			; (mov r8, r8)
 8009e64:	40020000 	.word	0x40020000

08009e68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e74:	089b      	lsrs	r3, r3, #2
 8009e76:	4a10      	ldr	r2, [pc, #64]	; (8009eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8009e78:	4694      	mov	ip, r2
 8009e7a:	4463      	add	r3, ip
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	001a      	movs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	001a      	movs	r2, r3
 8009e8a:	23ff      	movs	r3, #255	; 0xff
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	3b08      	subs	r3, #8
 8009e90:	2114      	movs	r1, #20
 8009e92:	0018      	movs	r0, r3
 8009e94:	f7f6 f954 	bl	8000140 <__udivsi3>
 8009e98:	0003      	movs	r3, r0
 8009e9a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a07      	ldr	r2, [pc, #28]	; (8009ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8009ea0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	221f      	movs	r2, #31
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	409a      	lsls	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009eb0:	46c0      	nop			; (mov r8, r8)
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	b004      	add	sp, #16
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	10008200 	.word	0x10008200
 8009ebc:	40020880 	.word	0x40020880

08009ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	223f      	movs	r2, #63	; 0x3f
 8009ece:	4013      	ands	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4a0a      	ldr	r2, [pc, #40]	; (8009f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009ed6:	4694      	mov	ip, r2
 8009ed8:	4463      	add	r3, ip
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	001a      	movs	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a07      	ldr	r2, [pc, #28]	; (8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009ee6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	2203      	movs	r2, #3
 8009eee:	4013      	ands	r3, r2
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	409a      	lsls	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8009ef8:	46c0      	nop			; (mov r8, r8)
 8009efa:	46bd      	mov	sp, r7
 8009efc:	b004      	add	sp, #16
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	1000823f 	.word	0x1000823f
 8009f04:	40020940 	.word	0x40020940

08009f08 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	d01c      	beq.n	8009f58 <HAL_DMAEx_MUX_IRQHandler+0x50>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f28:	4921      	ldr	r1, [pc, #132]	; (8009fb0 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 8009f2a:	400a      	ands	r2, r1
 8009f2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009f36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3c:	2280      	movs	r2, #128	; 0x80
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	431a      	orrs	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <HAL_DMAEx_MUX_IRQHandler+0x50>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	0010      	movs	r0, r2
 8009f56:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d023      	beq.n	8009fa8 <HAL_DMAEx_MUX_IRQHandler+0xa0>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	d01c      	beq.n	8009fa8 <HAL_DMAEx_MUX_IRQHandler+0xa0>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f78:	490d      	ldr	r1, [pc, #52]	; (8009fb0 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 8009f7a:	400a      	ands	r2, r1
 8009f7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009f86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8c:	2280      	movs	r2, #128	; 0x80
 8009f8e:	00d2      	lsls	r2, r2, #3
 8009f90:	431a      	orrs	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d004      	beq.n	8009fa8 <HAL_DMAEx_MUX_IRQHandler+0xa0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	0010      	movs	r0, r2
 8009fa6:	4798      	blx	r3
      }
    }
  }
}
 8009fa8:	46c0      	nop			; (mov r8, r8)
 8009faa:	46bd      	mov	sp, r7
 8009fac:	b002      	add	sp, #8
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	fffffeff 	.word	0xfffffeff

08009fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009fc2:	e147      	b.n	800a254 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2101      	movs	r1, #1
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4091      	lsls	r1, r2
 8009fce:	000a      	movs	r2, r1
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d100      	bne.n	8009fdc <HAL_GPIO_Init+0x28>
 8009fda:	e138      	b.n	800a24e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d005      	beq.n	8009ff4 <HAL_GPIO_Init+0x40>
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	2203      	movs	r2, #3
 8009fee:	4013      	ands	r3, r2
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d130      	bne.n	800a056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	2203      	movs	r2, #3
 800a000:	409a      	lsls	r2, r3
 800a002:	0013      	movs	r3, r2
 800a004:	43da      	mvns	r2, r3
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	4013      	ands	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	409a      	lsls	r2, r3
 800a016:	0013      	movs	r3, r2
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a02a:	2201      	movs	r2, #1
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	409a      	lsls	r2, r3
 800a030:	0013      	movs	r3, r2
 800a032:	43da      	mvns	r2, r3
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4013      	ands	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	091b      	lsrs	r3, r3, #4
 800a040:	2201      	movs	r2, #1
 800a042:	401a      	ands	r2, r3
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	409a      	lsls	r2, r3
 800a048:	0013      	movs	r3, r2
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	2203      	movs	r2, #3
 800a05c:	4013      	ands	r3, r2
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d017      	beq.n	800a092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	2203      	movs	r2, #3
 800a06e:	409a      	lsls	r2, r3
 800a070:	0013      	movs	r3, r2
 800a072:	43da      	mvns	r2, r3
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	4013      	ands	r3, r2
 800a078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	409a      	lsls	r2, r3
 800a084:	0013      	movs	r3, r2
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4313      	orrs	r3, r2
 800a08a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	2203      	movs	r2, #3
 800a098:	4013      	ands	r3, r2
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d123      	bne.n	800a0e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	08da      	lsrs	r2, r3, #3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3208      	adds	r2, #8
 800a0a6:	0092      	lsls	r2, r2, #2
 800a0a8:	58d3      	ldr	r3, [r2, r3]
 800a0aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2207      	movs	r2, #7
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	220f      	movs	r2, #15
 800a0b6:	409a      	lsls	r2, r3
 800a0b8:	0013      	movs	r3, r2
 800a0ba:	43da      	mvns	r2, r3
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	691a      	ldr	r2, [r3, #16]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	2107      	movs	r1, #7
 800a0ca:	400b      	ands	r3, r1
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	409a      	lsls	r2, r3
 800a0d0:	0013      	movs	r3, r2
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	08da      	lsrs	r2, r3, #3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3208      	adds	r2, #8
 800a0e0:	0092      	lsls	r2, r2, #2
 800a0e2:	6939      	ldr	r1, [r7, #16]
 800a0e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	409a      	lsls	r2, r3
 800a0f4:	0013      	movs	r3, r2
 800a0f6:	43da      	mvns	r2, r3
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	2203      	movs	r2, #3
 800a104:	401a      	ands	r2, r3
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	409a      	lsls	r2, r3
 800a10c:	0013      	movs	r3, r2
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	4313      	orrs	r3, r2
 800a112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	23c0      	movs	r3, #192	; 0xc0
 800a120:	029b      	lsls	r3, r3, #10
 800a122:	4013      	ands	r3, r2
 800a124:	d100      	bne.n	800a128 <HAL_GPIO_Init+0x174>
 800a126:	e092      	b.n	800a24e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a128:	4a50      	ldr	r2, [pc, #320]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	089b      	lsrs	r3, r3, #2
 800a12e:	3318      	adds	r3, #24
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	589b      	ldr	r3, [r3, r2]
 800a134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2203      	movs	r2, #3
 800a13a:	4013      	ands	r3, r2
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	220f      	movs	r2, #15
 800a140:	409a      	lsls	r2, r3
 800a142:	0013      	movs	r3, r2
 800a144:	43da      	mvns	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	4013      	ands	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	23a0      	movs	r3, #160	; 0xa0
 800a150:	05db      	lsls	r3, r3, #23
 800a152:	429a      	cmp	r2, r3
 800a154:	d013      	beq.n	800a17e <HAL_GPIO_Init+0x1ca>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a45      	ldr	r2, [pc, #276]	; (800a270 <HAL_GPIO_Init+0x2bc>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00d      	beq.n	800a17a <HAL_GPIO_Init+0x1c6>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a44      	ldr	r2, [pc, #272]	; (800a274 <HAL_GPIO_Init+0x2c0>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d007      	beq.n	800a176 <HAL_GPIO_Init+0x1c2>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a43      	ldr	r2, [pc, #268]	; (800a278 <HAL_GPIO_Init+0x2c4>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d101      	bne.n	800a172 <HAL_GPIO_Init+0x1be>
 800a16e:	2303      	movs	r3, #3
 800a170:	e006      	b.n	800a180 <HAL_GPIO_Init+0x1cc>
 800a172:	2305      	movs	r3, #5
 800a174:	e004      	b.n	800a180 <HAL_GPIO_Init+0x1cc>
 800a176:	2302      	movs	r3, #2
 800a178:	e002      	b.n	800a180 <HAL_GPIO_Init+0x1cc>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e000      	b.n	800a180 <HAL_GPIO_Init+0x1cc>
 800a17e:	2300      	movs	r3, #0
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	2103      	movs	r1, #3
 800a184:	400a      	ands	r2, r1
 800a186:	00d2      	lsls	r2, r2, #3
 800a188:	4093      	lsls	r3, r2
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a190:	4936      	ldr	r1, [pc, #216]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	089b      	lsrs	r3, r3, #2
 800a196:	3318      	adds	r3, #24
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a19e:	4b33      	ldr	r3, [pc, #204]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	43da      	mvns	r2, r3
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	2380      	movs	r3, #128	; 0x80
 800a1b4:	035b      	lsls	r3, r3, #13
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	d003      	beq.n	800a1c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a1c2:	4b2a      	ldr	r3, [pc, #168]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a1c8:	4b28      	ldr	r3, [pc, #160]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	43da      	mvns	r2, r3
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	039b      	lsls	r3, r3, #14
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	d003      	beq.n	800a1ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1ec:	4b1f      	ldr	r3, [pc, #124]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a1f2:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a1f4:	2384      	movs	r3, #132	; 0x84
 800a1f6:	58d3      	ldr	r3, [r2, r3]
 800a1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	43da      	mvns	r2, r3
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	4013      	ands	r3, r2
 800a202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	2380      	movs	r3, #128	; 0x80
 800a20a:	029b      	lsls	r3, r3, #10
 800a20c:	4013      	ands	r3, r2
 800a20e:	d003      	beq.n	800a218 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a218:	4914      	ldr	r1, [pc, #80]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a21a:	2284      	movs	r2, #132	; 0x84
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a220:	4a12      	ldr	r2, [pc, #72]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a222:	2380      	movs	r3, #128	; 0x80
 800a224:	58d3      	ldr	r3, [r2, r3]
 800a226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	43da      	mvns	r2, r3
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	4013      	ands	r3, r2
 800a230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	2380      	movs	r3, #128	; 0x80
 800a238:	025b      	lsls	r3, r3, #9
 800a23a:	4013      	ands	r3, r2
 800a23c:	d003      	beq.n	800a246 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4313      	orrs	r3, r2
 800a244:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a246:	4909      	ldr	r1, [pc, #36]	; (800a26c <HAL_GPIO_Init+0x2b8>)
 800a248:	2280      	movs	r2, #128	; 0x80
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	3301      	adds	r3, #1
 800a252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	40da      	lsrs	r2, r3
 800a25c:	1e13      	subs	r3, r2, #0
 800a25e:	d000      	beq.n	800a262 <HAL_GPIO_Init+0x2ae>
 800a260:	e6b0      	b.n	8009fc4 <HAL_GPIO_Init+0x10>
  }
}
 800a262:	46c0      	nop			; (mov r8, r8)
 800a264:	46c0      	nop			; (mov r8, r8)
 800a266:	46bd      	mov	sp, r7
 800a268:	b006      	add	sp, #24
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40021800 	.word	0x40021800
 800a270:	50000400 	.word	0x50000400
 800a274:	50000800 	.word	0x50000800
 800a278:	50000c00 	.word	0x50000c00

0800a27c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	000a      	movs	r2, r1
 800a286:	1cbb      	adds	r3, r7, #2
 800a288:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	1cba      	adds	r2, r7, #2
 800a290:	8812      	ldrh	r2, [r2, #0]
 800a292:	4013      	ands	r3, r2
 800a294:	d004      	beq.n	800a2a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a296:	230f      	movs	r3, #15
 800a298:	18fb      	adds	r3, r7, r3
 800a29a:	2201      	movs	r2, #1
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	e003      	b.n	800a2a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a2a0:	230f      	movs	r3, #15
 800a2a2:	18fb      	adds	r3, r7, r3
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a2a8:	230f      	movs	r3, #15
 800a2aa:	18fb      	adds	r3, r7, r3
 800a2ac:	781b      	ldrb	r3, [r3, #0]
}
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	b004      	add	sp, #16
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	0008      	movs	r0, r1
 800a2c0:	0011      	movs	r1, r2
 800a2c2:	1cbb      	adds	r3, r7, #2
 800a2c4:	1c02      	adds	r2, r0, #0
 800a2c6:	801a      	strh	r2, [r3, #0]
 800a2c8:	1c7b      	adds	r3, r7, #1
 800a2ca:	1c0a      	adds	r2, r1, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2ce:	1c7b      	adds	r3, r7, #1
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d004      	beq.n	800a2e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a2d6:	1cbb      	adds	r3, r7, #2
 800a2d8:	881a      	ldrh	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a2de:	e003      	b.n	800a2e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a2e0:	1cbb      	adds	r3, r7, #2
 800a2e2:	881a      	ldrh	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a2e8:	46c0      	nop			; (mov r8, r8)
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	b002      	add	sp, #8
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	000a      	movs	r2, r1
 800a2fa:	1cbb      	adds	r3, r7, #2
 800a2fc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a304:	1cbb      	adds	r3, r7, #2
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	4013      	ands	r3, r2
 800a30c:	041a      	lsls	r2, r3, #16
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	43db      	mvns	r3, r3
 800a312:	1cb9      	adds	r1, r7, #2
 800a314:	8809      	ldrh	r1, [r1, #0]
 800a316:	400b      	ands	r3, r1
 800a318:	431a      	orrs	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	619a      	str	r2, [r3, #24]
}
 800a31e:	46c0      	nop			; (mov r8, r8)
 800a320:	46bd      	mov	sp, r7
 800a322:	b004      	add	sp, #16
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e082      	b.n	800a440 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2241      	movs	r2, #65	; 0x41
 800a33e:	5c9b      	ldrb	r3, [r3, r2]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d107      	bne.n	800a356 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2240      	movs	r2, #64	; 0x40
 800a34a:	2100      	movs	r1, #0
 800a34c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	0018      	movs	r0, r3
 800a352:	f7fd fed9 	bl	8008108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2241      	movs	r2, #65	; 0x41
 800a35a:	2124      	movs	r1, #36	; 0x24
 800a35c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2101      	movs	r1, #1
 800a36a:	438a      	bics	r2, r1
 800a36c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4934      	ldr	r1, [pc, #208]	; (800a448 <HAL_I2C_Init+0x120>)
 800a378:	400a      	ands	r2, r1
 800a37a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4931      	ldr	r1, [pc, #196]	; (800a44c <HAL_I2C_Init+0x124>)
 800a388:	400a      	ands	r2, r1
 800a38a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d108      	bne.n	800a3a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2180      	movs	r1, #128	; 0x80
 800a39e:	0209      	lsls	r1, r1, #8
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	609a      	str	r2, [r3, #8]
 800a3a4:	e007      	b.n	800a3b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2184      	movs	r1, #132	; 0x84
 800a3b0:	0209      	lsls	r1, r1, #8
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d104      	bne.n	800a3c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2280      	movs	r2, #128	; 0x80
 800a3c4:	0112      	lsls	r2, r2, #4
 800a3c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	491f      	ldr	r1, [pc, #124]	; (800a450 <HAL_I2C_Init+0x128>)
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	491a      	ldr	r1, [pc, #104]	; (800a44c <HAL_I2C_Init+0x124>)
 800a3e4:	400a      	ands	r2, r1
 800a3e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	69d9      	ldr	r1, [r3, #28]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1a      	ldr	r2, [r3, #32]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2101      	movs	r1, #1
 800a41e:	430a      	orrs	r2, r1
 800a420:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2241      	movs	r2, #65	; 0x41
 800a42c:	2120      	movs	r1, #32
 800a42e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2242      	movs	r2, #66	; 0x42
 800a43a:	2100      	movs	r1, #0
 800a43c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	0018      	movs	r0, r3
 800a442:	46bd      	mov	sp, r7
 800a444:	b002      	add	sp, #8
 800a446:	bd80      	pop	{r7, pc}
 800a448:	f0ffffff 	.word	0xf0ffffff
 800a44c:	ffff7fff 	.word	0xffff7fff
 800a450:	02008000 	.word	0x02008000

0800a454 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b089      	sub	sp, #36	; 0x24
 800a458:	af02      	add	r7, sp, #8
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	000c      	movs	r4, r1
 800a45e:	0010      	movs	r0, r2
 800a460:	0019      	movs	r1, r3
 800a462:	230a      	movs	r3, #10
 800a464:	18fb      	adds	r3, r7, r3
 800a466:	1c22      	adds	r2, r4, #0
 800a468:	801a      	strh	r2, [r3, #0]
 800a46a:	2308      	movs	r3, #8
 800a46c:	18fb      	adds	r3, r7, r3
 800a46e:	1c02      	adds	r2, r0, #0
 800a470:	801a      	strh	r2, [r3, #0]
 800a472:	1dbb      	adds	r3, r7, #6
 800a474:	1c0a      	adds	r2, r1, #0
 800a476:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2241      	movs	r2, #65	; 0x41
 800a47c:	5c9b      	ldrb	r3, [r3, r2]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b20      	cmp	r3, #32
 800a482:	d000      	beq.n	800a486 <HAL_I2C_Mem_Write+0x32>
 800a484:	e10c      	b.n	800a6a0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <HAL_I2C_Mem_Write+0x42>
 800a48c:	232c      	movs	r3, #44	; 0x2c
 800a48e:	18fb      	adds	r3, r7, r3
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d105      	bne.n	800a4a2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2280      	movs	r2, #128	; 0x80
 800a49a:	0092      	lsls	r2, r2, #2
 800a49c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e0ff      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2240      	movs	r2, #64	; 0x40
 800a4a6:	5c9b      	ldrb	r3, [r3, r2]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d101      	bne.n	800a4b0 <HAL_I2C_Mem_Write+0x5c>
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	e0f8      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2240      	movs	r2, #64	; 0x40
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4b8:	f7fe fa94 	bl	80089e4 <HAL_GetTick>
 800a4bc:	0003      	movs	r3, r0
 800a4be:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4c0:	2380      	movs	r3, #128	; 0x80
 800a4c2:	0219      	lsls	r1, r3, #8
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	2319      	movs	r3, #25
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f000 fb0b 	bl	800aae8 <I2C_WaitOnFlagUntilTimeout>
 800a4d2:	1e03      	subs	r3, r0, #0
 800a4d4:	d001      	beq.n	800a4da <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e0e3      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2241      	movs	r2, #65	; 0x41
 800a4de:	2121      	movs	r1, #33	; 0x21
 800a4e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2242      	movs	r2, #66	; 0x42
 800a4e6:	2140      	movs	r1, #64	; 0x40
 800a4e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	222c      	movs	r2, #44	; 0x2c
 800a4fa:	18ba      	adds	r2, r7, r2
 800a4fc:	8812      	ldrh	r2, [r2, #0]
 800a4fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a506:	1dbb      	adds	r3, r7, #6
 800a508:	881c      	ldrh	r4, [r3, #0]
 800a50a:	2308      	movs	r3, #8
 800a50c:	18fb      	adds	r3, r7, r3
 800a50e:	881a      	ldrh	r2, [r3, #0]
 800a510:	230a      	movs	r3, #10
 800a512:	18fb      	adds	r3, r7, r3
 800a514:	8819      	ldrh	r1, [r3, #0]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	9301      	str	r3, [sp, #4]
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	0023      	movs	r3, r4
 800a522:	f000 f9f9 	bl	800a918 <I2C_RequestMemoryWrite>
 800a526:	1e03      	subs	r3, r0, #0
 800a528:	d005      	beq.n	800a536 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2240      	movs	r2, #64	; 0x40
 800a52e:	2100      	movs	r1, #0
 800a530:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e0b5      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2bff      	cmp	r3, #255	; 0xff
 800a53e:	d911      	bls.n	800a564 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	22ff      	movs	r2, #255	; 0xff
 800a544:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	2380      	movs	r3, #128	; 0x80
 800a54e:	045c      	lsls	r4, r3, #17
 800a550:	230a      	movs	r3, #10
 800a552:	18fb      	adds	r3, r7, r3
 800a554:	8819      	ldrh	r1, [r3, #0]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	2300      	movs	r3, #0
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	0023      	movs	r3, r4
 800a55e:	f000 fc7d 	bl	800ae5c <I2C_TransferConfig>
 800a562:	e012      	b.n	800a58a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a572:	b2da      	uxtb	r2, r3
 800a574:	2380      	movs	r3, #128	; 0x80
 800a576:	049c      	lsls	r4, r3, #18
 800a578:	230a      	movs	r3, #10
 800a57a:	18fb      	adds	r3, r7, r3
 800a57c:	8819      	ldrh	r1, [r3, #0]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	2300      	movs	r3, #0
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	0023      	movs	r3, r4
 800a586:	f000 fc69 	bl	800ae5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	0018      	movs	r0, r3
 800a592:	f000 fae8 	bl	800ab66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a596:	1e03      	subs	r3, r0, #0
 800a598:	d001      	beq.n	800a59e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e081      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	781a      	ldrb	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	1c5a      	adds	r2, r3, #1
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d03a      	beq.n	800a64e <HAL_I2C_Mem_Write+0x1fa>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d136      	bne.n	800a64e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	0013      	movs	r3, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2180      	movs	r1, #128	; 0x80
 800a5ee:	f000 fa7b 	bl	800aae8 <I2C_WaitOnFlagUntilTimeout>
 800a5f2:	1e03      	subs	r3, r0, #0
 800a5f4:	d001      	beq.n	800a5fa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e053      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	2bff      	cmp	r3, #255	; 0xff
 800a602:	d911      	bls.n	800a628 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	22ff      	movs	r2, #255	; 0xff
 800a608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	2380      	movs	r3, #128	; 0x80
 800a612:	045c      	lsls	r4, r3, #17
 800a614:	230a      	movs	r3, #10
 800a616:	18fb      	adds	r3, r7, r3
 800a618:	8819      	ldrh	r1, [r3, #0]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	2300      	movs	r3, #0
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	0023      	movs	r3, r4
 800a622:	f000 fc1b 	bl	800ae5c <I2C_TransferConfig>
 800a626:	e012      	b.n	800a64e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a636:	b2da      	uxtb	r2, r3
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	049c      	lsls	r4, r3, #18
 800a63c:	230a      	movs	r3, #10
 800a63e:	18fb      	adds	r3, r7, r3
 800a640:	8819      	ldrh	r1, [r3, #0]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	2300      	movs	r3, #0
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	0023      	movs	r3, r4
 800a64a:	f000 fc07 	bl	800ae5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d198      	bne.n	800a58a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	0018      	movs	r0, r3
 800a660:	f000 fac0 	bl	800abe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a664:	1e03      	subs	r3, r0, #0
 800a666:	d001      	beq.n	800a66c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e01a      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2220      	movs	r2, #32
 800a672:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	490b      	ldr	r1, [pc, #44]	; (800a6ac <HAL_I2C_Mem_Write+0x258>)
 800a680:	400a      	ands	r2, r1
 800a682:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2241      	movs	r2, #65	; 0x41
 800a688:	2120      	movs	r1, #32
 800a68a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2242      	movs	r2, #66	; 0x42
 800a690:	2100      	movs	r1, #0
 800a692:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2240      	movs	r2, #64	; 0x40
 800a698:	2100      	movs	r1, #0
 800a69a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	e000      	b.n	800a6a2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800a6a0:	2302      	movs	r3, #2
  }
}
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	b007      	add	sp, #28
 800a6a8:	bd90      	pop	{r4, r7, pc}
 800a6aa:	46c0      	nop			; (mov r8, r8)
 800a6ac:	fe00e800 	.word	0xfe00e800

0800a6b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b0:	b590      	push	{r4, r7, lr}
 800a6b2:	b089      	sub	sp, #36	; 0x24
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	000c      	movs	r4, r1
 800a6ba:	0010      	movs	r0, r2
 800a6bc:	0019      	movs	r1, r3
 800a6be:	230a      	movs	r3, #10
 800a6c0:	18fb      	adds	r3, r7, r3
 800a6c2:	1c22      	adds	r2, r4, #0
 800a6c4:	801a      	strh	r2, [r3, #0]
 800a6c6:	2308      	movs	r3, #8
 800a6c8:	18fb      	adds	r3, r7, r3
 800a6ca:	1c02      	adds	r2, r0, #0
 800a6cc:	801a      	strh	r2, [r3, #0]
 800a6ce:	1dbb      	adds	r3, r7, #6
 800a6d0:	1c0a      	adds	r2, r1, #0
 800a6d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2241      	movs	r2, #65	; 0x41
 800a6d8:	5c9b      	ldrb	r3, [r3, r2]
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d000      	beq.n	800a6e2 <HAL_I2C_Mem_Read+0x32>
 800a6e0:	e110      	b.n	800a904 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d004      	beq.n	800a6f2 <HAL_I2C_Mem_Read+0x42>
 800a6e8:	232c      	movs	r3, #44	; 0x2c
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d105      	bne.n	800a6fe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2280      	movs	r2, #128	; 0x80
 800a6f6:	0092      	lsls	r2, r2, #2
 800a6f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e103      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2240      	movs	r2, #64	; 0x40
 800a702:	5c9b      	ldrb	r3, [r3, r2]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d101      	bne.n	800a70c <HAL_I2C_Mem_Read+0x5c>
 800a708:	2302      	movs	r3, #2
 800a70a:	e0fc      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2240      	movs	r2, #64	; 0x40
 800a710:	2101      	movs	r1, #1
 800a712:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a714:	f7fe f966 	bl	80089e4 <HAL_GetTick>
 800a718:	0003      	movs	r3, r0
 800a71a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a71c:	2380      	movs	r3, #128	; 0x80
 800a71e:	0219      	lsls	r1, r3, #8
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2319      	movs	r3, #25
 800a728:	2201      	movs	r2, #1
 800a72a:	f000 f9dd 	bl	800aae8 <I2C_WaitOnFlagUntilTimeout>
 800a72e:	1e03      	subs	r3, r0, #0
 800a730:	d001      	beq.n	800a736 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e0e7      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2241      	movs	r2, #65	; 0x41
 800a73a:	2122      	movs	r1, #34	; 0x22
 800a73c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2242      	movs	r2, #66	; 0x42
 800a742:	2140      	movs	r1, #64	; 0x40
 800a744:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	222c      	movs	r2, #44	; 0x2c
 800a756:	18ba      	adds	r2, r7, r2
 800a758:	8812      	ldrh	r2, [r2, #0]
 800a75a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a762:	1dbb      	adds	r3, r7, #6
 800a764:	881c      	ldrh	r4, [r3, #0]
 800a766:	2308      	movs	r3, #8
 800a768:	18fb      	adds	r3, r7, r3
 800a76a:	881a      	ldrh	r2, [r3, #0]
 800a76c:	230a      	movs	r3, #10
 800a76e:	18fb      	adds	r3, r7, r3
 800a770:	8819      	ldrh	r1, [r3, #0]
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	0023      	movs	r3, r4
 800a77e:	f000 f92f 	bl	800a9e0 <I2C_RequestMemoryRead>
 800a782:	1e03      	subs	r3, r0, #0
 800a784:	d005      	beq.n	800a792 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2240      	movs	r2, #64	; 0x40
 800a78a:	2100      	movs	r1, #0
 800a78c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e0b9      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a796:	b29b      	uxth	r3, r3
 800a798:	2bff      	cmp	r3, #255	; 0xff
 800a79a:	d911      	bls.n	800a7c0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	22ff      	movs	r2, #255	; 0xff
 800a7a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	2380      	movs	r3, #128	; 0x80
 800a7aa:	045c      	lsls	r4, r3, #17
 800a7ac:	230a      	movs	r3, #10
 800a7ae:	18fb      	adds	r3, r7, r3
 800a7b0:	8819      	ldrh	r1, [r3, #0]
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	4b56      	ldr	r3, [pc, #344]	; (800a910 <HAL_I2C_Mem_Read+0x260>)
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	0023      	movs	r3, r4
 800a7ba:	f000 fb4f 	bl	800ae5c <I2C_TransferConfig>
 800a7be:	e012      	b.n	800a7e6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	2380      	movs	r3, #128	; 0x80
 800a7d2:	049c      	lsls	r4, r3, #18
 800a7d4:	230a      	movs	r3, #10
 800a7d6:	18fb      	adds	r3, r7, r3
 800a7d8:	8819      	ldrh	r1, [r3, #0]
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	4b4c      	ldr	r3, [pc, #304]	; (800a910 <HAL_I2C_Mem_Read+0x260>)
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	0023      	movs	r3, r4
 800a7e2:	f000 fb3b 	bl	800ae5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	0013      	movs	r3, r2
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2104      	movs	r1, #4
 800a7f4:	f000 f978 	bl	800aae8 <I2C_WaitOnFlagUntilTimeout>
 800a7f8:	1e03      	subs	r3, r0, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e082      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	b2d2      	uxtb	r2, r2
 800a80c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a81c:	3b01      	subs	r3, #1
 800a81e:	b29a      	uxth	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a828:	b29b      	uxth	r3, r3
 800a82a:	3b01      	subs	r3, #1
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d03a      	beq.n	800a8b2 <HAL_I2C_Mem_Read+0x202>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a840:	2b00      	cmp	r3, #0
 800a842:	d136      	bne.n	800a8b2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	0013      	movs	r3, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	2180      	movs	r1, #128	; 0x80
 800a852:	f000 f949 	bl	800aae8 <I2C_WaitOnFlagUntilTimeout>
 800a856:	1e03      	subs	r3, r0, #0
 800a858:	d001      	beq.n	800a85e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e053      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a862:	b29b      	uxth	r3, r3
 800a864:	2bff      	cmp	r3, #255	; 0xff
 800a866:	d911      	bls.n	800a88c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	22ff      	movs	r2, #255	; 0xff
 800a86c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a872:	b2da      	uxtb	r2, r3
 800a874:	2380      	movs	r3, #128	; 0x80
 800a876:	045c      	lsls	r4, r3, #17
 800a878:	230a      	movs	r3, #10
 800a87a:	18fb      	adds	r3, r7, r3
 800a87c:	8819      	ldrh	r1, [r3, #0]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	2300      	movs	r3, #0
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	0023      	movs	r3, r4
 800a886:	f000 fae9 	bl	800ae5c <I2C_TransferConfig>
 800a88a:	e012      	b.n	800a8b2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a890:	b29a      	uxth	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	2380      	movs	r3, #128	; 0x80
 800a89e:	049c      	lsls	r4, r3, #18
 800a8a0:	230a      	movs	r3, #10
 800a8a2:	18fb      	adds	r3, r7, r3
 800a8a4:	8819      	ldrh	r1, [r3, #0]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	0023      	movs	r3, r4
 800a8ae:	f000 fad5 	bl	800ae5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d194      	bne.n	800a7e6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	f000 f98e 	bl	800abe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a8c8:	1e03      	subs	r3, r0, #0
 800a8ca:	d001      	beq.n	800a8d0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e01a      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	490c      	ldr	r1, [pc, #48]	; (800a914 <HAL_I2C_Mem_Read+0x264>)
 800a8e4:	400a      	ands	r2, r1
 800a8e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2241      	movs	r2, #65	; 0x41
 800a8ec:	2120      	movs	r1, #32
 800a8ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2242      	movs	r2, #66	; 0x42
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2240      	movs	r2, #64	; 0x40
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	e000      	b.n	800a906 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800a904:	2302      	movs	r3, #2
  }
}
 800a906:	0018      	movs	r0, r3
 800a908:	46bd      	mov	sp, r7
 800a90a:	b007      	add	sp, #28
 800a90c:	bd90      	pop	{r4, r7, pc}
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	80002400 	.word	0x80002400
 800a914:	fe00e800 	.word	0xfe00e800

0800a918 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a918:	b5b0      	push	{r4, r5, r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	000c      	movs	r4, r1
 800a922:	0010      	movs	r0, r2
 800a924:	0019      	movs	r1, r3
 800a926:	250a      	movs	r5, #10
 800a928:	197b      	adds	r3, r7, r5
 800a92a:	1c22      	adds	r2, r4, #0
 800a92c:	801a      	strh	r2, [r3, #0]
 800a92e:	2308      	movs	r3, #8
 800a930:	18fb      	adds	r3, r7, r3
 800a932:	1c02      	adds	r2, r0, #0
 800a934:	801a      	strh	r2, [r3, #0]
 800a936:	1dbb      	adds	r3, r7, #6
 800a938:	1c0a      	adds	r2, r1, #0
 800a93a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a93c:	1dbb      	adds	r3, r7, #6
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	b2da      	uxtb	r2, r3
 800a942:	2380      	movs	r3, #128	; 0x80
 800a944:	045c      	lsls	r4, r3, #17
 800a946:	197b      	adds	r3, r7, r5
 800a948:	8819      	ldrh	r1, [r3, #0]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	4b23      	ldr	r3, [pc, #140]	; (800a9dc <I2C_RequestMemoryWrite+0xc4>)
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	0023      	movs	r3, r4
 800a952:	f000 fa83 	bl	800ae5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a958:	6a39      	ldr	r1, [r7, #32]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	0018      	movs	r0, r3
 800a95e:	f000 f902 	bl	800ab66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a962:	1e03      	subs	r3, r0, #0
 800a964:	d001      	beq.n	800a96a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e033      	b.n	800a9d2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a96a:	1dbb      	adds	r3, r7, #6
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d107      	bne.n	800a982 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a972:	2308      	movs	r3, #8
 800a974:	18fb      	adds	r3, r7, r3
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28
 800a980:	e019      	b.n	800a9b6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a982:	2308      	movs	r3, #8
 800a984:	18fb      	adds	r3, r7, r3
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	0a1b      	lsrs	r3, r3, #8
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a996:	6a39      	ldr	r1, [r7, #32]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	0018      	movs	r0, r3
 800a99c:	f000 f8e3 	bl	800ab66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a9a0:	1e03      	subs	r3, r0, #0
 800a9a2:	d001      	beq.n	800a9a8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e014      	b.n	800a9d2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	18fb      	adds	r3, r7, r3
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a9b6:	6a3a      	ldr	r2, [r7, #32]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	0013      	movs	r3, r2
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2180      	movs	r1, #128	; 0x80
 800a9c4:	f000 f890 	bl	800aae8 <I2C_WaitOnFlagUntilTimeout>
 800a9c8:	1e03      	subs	r3, r0, #0
 800a9ca:	d001      	beq.n	800a9d0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e000      	b.n	800a9d2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	b004      	add	sp, #16
 800a9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a9da:	46c0      	nop			; (mov r8, r8)
 800a9dc:	80002000 	.word	0x80002000

0800a9e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a9e0:	b5b0      	push	{r4, r5, r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	000c      	movs	r4, r1
 800a9ea:	0010      	movs	r0, r2
 800a9ec:	0019      	movs	r1, r3
 800a9ee:	250a      	movs	r5, #10
 800a9f0:	197b      	adds	r3, r7, r5
 800a9f2:	1c22      	adds	r2, r4, #0
 800a9f4:	801a      	strh	r2, [r3, #0]
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	18fb      	adds	r3, r7, r3
 800a9fa:	1c02      	adds	r2, r0, #0
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	1dbb      	adds	r3, r7, #6
 800aa00:	1c0a      	adds	r2, r1, #0
 800aa02:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800aa04:	1dbb      	adds	r3, r7, #6
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	197b      	adds	r3, r7, r5
 800aa0c:	8819      	ldrh	r1, [r3, #0]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	4b23      	ldr	r3, [pc, #140]	; (800aaa0 <I2C_RequestMemoryRead+0xc0>)
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	2300      	movs	r3, #0
 800aa16:	f000 fa21 	bl	800ae5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1c:	6a39      	ldr	r1, [r7, #32]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	0018      	movs	r0, r3
 800aa22:	f000 f8a0 	bl	800ab66 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa26:	1e03      	subs	r3, r0, #0
 800aa28:	d001      	beq.n	800aa2e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e033      	b.n	800aa96 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa2e:	1dbb      	adds	r3, r7, #6
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d107      	bne.n	800aa46 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa36:	2308      	movs	r3, #8
 800aa38:	18fb      	adds	r3, r7, r3
 800aa3a:	881b      	ldrh	r3, [r3, #0]
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	629a      	str	r2, [r3, #40]	; 0x28
 800aa44:	e019      	b.n	800aa7a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aa46:	2308      	movs	r3, #8
 800aa48:	18fb      	adds	r3, r7, r3
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	0a1b      	lsrs	r3, r3, #8
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa5a:	6a39      	ldr	r1, [r7, #32]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	0018      	movs	r0, r3
 800aa60:	f000 f881 	bl	800ab66 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa64:	1e03      	subs	r3, r0, #0
 800aa66:	d001      	beq.n	800aa6c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e014      	b.n	800aa96 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	18fb      	adds	r3, r7, r3
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aa7a:	6a3a      	ldr	r2, [r7, #32]
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	0013      	movs	r3, r2
 800aa84:	2200      	movs	r2, #0
 800aa86:	2140      	movs	r1, #64	; 0x40
 800aa88:	f000 f82e 	bl	800aae8 <I2C_WaitOnFlagUntilTimeout>
 800aa8c:	1e03      	subs	r3, r0, #0
 800aa8e:	d001      	beq.n	800aa94 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e000      	b.n	800aa96 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	0018      	movs	r0, r3
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	b004      	add	sp, #16
 800aa9c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa9e:	46c0      	nop			; (mov r8, r8)
 800aaa0:	80002000 	.word	0x80002000

0800aaa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	2202      	movs	r2, #2
 800aab4:	4013      	ands	r3, r2
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d103      	bne.n	800aac2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	2201      	movs	r2, #1
 800aaca:	4013      	ands	r3, r2
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d007      	beq.n	800aae0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	699a      	ldr	r2, [r3, #24]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2101      	movs	r1, #1
 800aadc:	430a      	orrs	r2, r1
 800aade:	619a      	str	r2, [r3, #24]
  }
}
 800aae0:	46c0      	nop			; (mov r8, r8)
 800aae2:	46bd      	mov	sp, r7
 800aae4:	b002      	add	sp, #8
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	1dfb      	adds	r3, r7, #7
 800aaf6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aaf8:	e021      	b.n	800ab3e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	3301      	adds	r3, #1
 800aafe:	d01e      	beq.n	800ab3e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab00:	f7fd ff70 	bl	80089e4 <HAL_GetTick>
 800ab04:	0002      	movs	r2, r0
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d302      	bcc.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d113      	bne.n	800ab3e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2241      	movs	r2, #65	; 0x41
 800ab26:	2120      	movs	r1, #32
 800ab28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2242      	movs	r2, #66	; 0x42
 800ab2e:	2100      	movs	r1, #0
 800ab30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2240      	movs	r2, #64	; 0x40
 800ab36:	2100      	movs	r1, #0
 800ab38:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e00f      	b.n	800ab5e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	4013      	ands	r3, r2
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	425a      	negs	r2, r3
 800ab4e:	4153      	adcs	r3, r2
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	001a      	movs	r2, r3
 800ab54:	1dfb      	adds	r3, r7, #7
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d0ce      	beq.n	800aafa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	0018      	movs	r0, r3
 800ab60:	46bd      	mov	sp, r7
 800ab62:	b004      	add	sp, #16
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab72:	e02b      	b.n	800abcc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	f000 f86e 	bl	800ac5c <I2C_IsErrorOccurred>
 800ab80:	1e03      	subs	r3, r0, #0
 800ab82:	d001      	beq.n	800ab88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e029      	b.n	800abdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	d01e      	beq.n	800abcc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab8e:	f7fd ff29 	bl	80089e4 <HAL_GetTick>
 800ab92:	0002      	movs	r2, r0
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d302      	bcc.n	800aba4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d113      	bne.n	800abcc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba8:	2220      	movs	r2, #32
 800abaa:	431a      	orrs	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2241      	movs	r2, #65	; 0x41
 800abb4:	2120      	movs	r1, #32
 800abb6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2242      	movs	r2, #66	; 0x42
 800abbc:	2100      	movs	r1, #0
 800abbe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2240      	movs	r2, #64	; 0x40
 800abc4:	2100      	movs	r1, #0
 800abc6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e007      	b.n	800abdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	2202      	movs	r2, #2
 800abd4:	4013      	ands	r3, r2
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d1cc      	bne.n	800ab74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	0018      	movs	r0, r3
 800abde:	46bd      	mov	sp, r7
 800abe0:	b004      	add	sp, #16
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abf0:	e028      	b.n	800ac44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	68b9      	ldr	r1, [r7, #8]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	0018      	movs	r0, r3
 800abfa:	f000 f82f 	bl	800ac5c <I2C_IsErrorOccurred>
 800abfe:	1e03      	subs	r3, r0, #0
 800ac00:	d001      	beq.n	800ac06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e026      	b.n	800ac54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac06:	f7fd feed 	bl	80089e4 <HAL_GetTick>
 800ac0a:	0002      	movs	r2, r0
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d302      	bcc.n	800ac1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d113      	bne.n	800ac44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac20:	2220      	movs	r2, #32
 800ac22:	431a      	orrs	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2241      	movs	r2, #65	; 0x41
 800ac2c:	2120      	movs	r1, #32
 800ac2e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2242      	movs	r2, #66	; 0x42
 800ac34:	2100      	movs	r1, #0
 800ac36:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2240      	movs	r2, #64	; 0x40
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e007      	b.n	800ac54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d1cf      	bne.n	800abf2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	0018      	movs	r0, r3
 800ac56:	46bd      	mov	sp, r7
 800ac58:	b004      	add	sp, #16
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac5c:	b590      	push	{r4, r7, lr}
 800ac5e:	b08b      	sub	sp, #44	; 0x2c
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac68:	2327      	movs	r3, #39	; 0x27
 800ac6a:	18fb      	adds	r3, r7, r3
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	2210      	movs	r2, #16
 800ac84:	4013      	ands	r3, r2
 800ac86:	d100      	bne.n	800ac8a <I2C_IsErrorOccurred+0x2e>
 800ac88:	e082      	b.n	800ad90 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2210      	movs	r2, #16
 800ac90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ac92:	e060      	b.n	800ad56 <I2C_IsErrorOccurred+0xfa>
 800ac94:	2427      	movs	r4, #39	; 0x27
 800ac96:	193b      	adds	r3, r7, r4
 800ac98:	193a      	adds	r2, r7, r4
 800ac9a:	7812      	ldrb	r2, [r2, #0]
 800ac9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	3301      	adds	r3, #1
 800aca2:	d058      	beq.n	800ad56 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aca4:	f7fd fe9e 	bl	80089e4 <HAL_GetTick>
 800aca8:	0002      	movs	r2, r0
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d306      	bcc.n	800acc2 <I2C_IsErrorOccurred+0x66>
 800acb4:	193b      	adds	r3, r7, r4
 800acb6:	193a      	adds	r2, r7, r4
 800acb8:	7812      	ldrb	r2, [r2, #0]
 800acba:	701a      	strb	r2, [r3, #0]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d149      	bne.n	800ad56 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	2380      	movs	r3, #128	; 0x80
 800acca:	01db      	lsls	r3, r3, #7
 800accc:	4013      	ands	r3, r2
 800acce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800acd0:	2013      	movs	r0, #19
 800acd2:	183b      	adds	r3, r7, r0
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	2142      	movs	r1, #66	; 0x42
 800acd8:	5c52      	ldrb	r2, [r2, r1]
 800acda:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	699a      	ldr	r2, [r3, #24]
 800ace2:	2380      	movs	r3, #128	; 0x80
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	401a      	ands	r2, r3
 800ace8:	2380      	movs	r3, #128	; 0x80
 800acea:	021b      	lsls	r3, r3, #8
 800acec:	429a      	cmp	r2, r3
 800acee:	d126      	bne.n	800ad3e <I2C_IsErrorOccurred+0xe2>
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	2380      	movs	r3, #128	; 0x80
 800acf4:	01db      	lsls	r3, r3, #7
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d021      	beq.n	800ad3e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800acfa:	183b      	adds	r3, r7, r0
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	d01d      	beq.n	800ad3e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2180      	movs	r1, #128	; 0x80
 800ad0e:	01c9      	lsls	r1, r1, #7
 800ad10:	430a      	orrs	r2, r1
 800ad12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ad14:	f7fd fe66 	bl	80089e4 <HAL_GetTick>
 800ad18:	0003      	movs	r3, r0
 800ad1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad1c:	e00f      	b.n	800ad3e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ad1e:	f7fd fe61 	bl	80089e4 <HAL_GetTick>
 800ad22:	0002      	movs	r2, r0
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	2b19      	cmp	r3, #25
 800ad2a:	d908      	bls.n	800ad3e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	4313      	orrs	r3, r2
 800ad32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ad34:	2327      	movs	r3, #39	; 0x27
 800ad36:	18fb      	adds	r3, r7, r3
 800ad38:	2201      	movs	r2, #1
 800ad3a:	701a      	strb	r2, [r3, #0]

              break;
 800ad3c:	e00b      	b.n	800ad56 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	2220      	movs	r2, #32
 800ad46:	4013      	ands	r3, r2
 800ad48:	2127      	movs	r1, #39	; 0x27
 800ad4a:	187a      	adds	r2, r7, r1
 800ad4c:	1879      	adds	r1, r7, r1
 800ad4e:	7809      	ldrb	r1, [r1, #0]
 800ad50:	7011      	strb	r1, [r2, #0]
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d1e3      	bne.n	800ad1e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	4013      	ands	r3, r2
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d004      	beq.n	800ad6e <I2C_IsErrorOccurred+0x112>
 800ad64:	2327      	movs	r3, #39	; 0x27
 800ad66:	18fb      	adds	r3, r7, r3
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d092      	beq.n	800ac94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ad6e:	2327      	movs	r3, #39	; 0x27
 800ad70:	18fb      	adds	r3, r7, r3
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d103      	bne.n	800ad80 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	2204      	movs	r2, #4
 800ad84:	4313      	orrs	r3, r2
 800ad86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ad88:	2327      	movs	r3, #39	; 0x27
 800ad8a:	18fb      	adds	r3, r7, r3
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ad98:	69ba      	ldr	r2, [r7, #24]
 800ad9a:	2380      	movs	r3, #128	; 0x80
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	4013      	ands	r3, r2
 800ada0:	d00c      	beq.n	800adbc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	2201      	movs	r2, #1
 800ada6:	4313      	orrs	r3, r2
 800ada8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2280      	movs	r2, #128	; 0x80
 800adb0:	0052      	lsls	r2, r2, #1
 800adb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800adb4:	2327      	movs	r3, #39	; 0x27
 800adb6:	18fb      	adds	r3, r7, r3
 800adb8:	2201      	movs	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	2380      	movs	r3, #128	; 0x80
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	4013      	ands	r3, r2
 800adc4:	d00c      	beq.n	800ade0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	2208      	movs	r2, #8
 800adca:	4313      	orrs	r3, r2
 800adcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2280      	movs	r2, #128	; 0x80
 800add4:	00d2      	lsls	r2, r2, #3
 800add6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800add8:	2327      	movs	r3, #39	; 0x27
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	2201      	movs	r2, #1
 800adde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	2380      	movs	r3, #128	; 0x80
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4013      	ands	r3, r2
 800ade8:	d00c      	beq.n	800ae04 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	2202      	movs	r2, #2
 800adee:	4313      	orrs	r3, r2
 800adf0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2280      	movs	r2, #128	; 0x80
 800adf8:	0092      	lsls	r2, r2, #2
 800adfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800adfc:	2327      	movs	r3, #39	; 0x27
 800adfe:	18fb      	adds	r3, r7, r3
 800ae00:	2201      	movs	r2, #1
 800ae02:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800ae04:	2327      	movs	r3, #39	; 0x27
 800ae06:	18fb      	adds	r3, r7, r3
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d01d      	beq.n	800ae4a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	0018      	movs	r0, r3
 800ae12:	f7ff fe47 	bl	800aaa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	490d      	ldr	r1, [pc, #52]	; (800ae58 <I2C_IsErrorOccurred+0x1fc>)
 800ae22:	400a      	ands	r2, r1
 800ae24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	431a      	orrs	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2241      	movs	r2, #65	; 0x41
 800ae36:	2120      	movs	r1, #32
 800ae38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2242      	movs	r2, #66	; 0x42
 800ae3e:	2100      	movs	r1, #0
 800ae40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2240      	movs	r2, #64	; 0x40
 800ae46:	2100      	movs	r1, #0
 800ae48:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800ae4a:	2327      	movs	r3, #39	; 0x27
 800ae4c:	18fb      	adds	r3, r7, r3
 800ae4e:	781b      	ldrb	r3, [r3, #0]
}
 800ae50:	0018      	movs	r0, r3
 800ae52:	46bd      	mov	sp, r7
 800ae54:	b00b      	add	sp, #44	; 0x2c
 800ae56:	bd90      	pop	{r4, r7, pc}
 800ae58:	fe00e800 	.word	0xfe00e800

0800ae5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ae5c:	b590      	push	{r4, r7, lr}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	0008      	movs	r0, r1
 800ae66:	0011      	movs	r1, r2
 800ae68:	607b      	str	r3, [r7, #4]
 800ae6a:	240a      	movs	r4, #10
 800ae6c:	193b      	adds	r3, r7, r4
 800ae6e:	1c02      	adds	r2, r0, #0
 800ae70:	801a      	strh	r2, [r3, #0]
 800ae72:	2009      	movs	r0, #9
 800ae74:	183b      	adds	r3, r7, r0
 800ae76:	1c0a      	adds	r2, r1, #0
 800ae78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae7a:	193b      	adds	r3, r7, r4
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	059b      	lsls	r3, r3, #22
 800ae80:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ae82:	183b      	adds	r3, r7, r0
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	0419      	lsls	r1, r3, #16
 800ae88:	23ff      	movs	r3, #255	; 0xff
 800ae8a:	041b      	lsls	r3, r3, #16
 800ae8c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae8e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	4313      	orrs	r3, r2
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	085b      	lsrs	r3, r3, #1
 800ae9c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aea6:	0d51      	lsrs	r1, r2, #21
 800aea8:	2280      	movs	r2, #128	; 0x80
 800aeaa:	00d2      	lsls	r2, r2, #3
 800aeac:	400a      	ands	r2, r1
 800aeae:	4907      	ldr	r1, [pc, #28]	; (800aecc <I2C_TransferConfig+0x70>)
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	43d2      	mvns	r2, r2
 800aeb4:	401a      	ands	r2, r3
 800aeb6:	0011      	movs	r1, r2
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	46bd      	mov	sp, r7
 800aec6:	b007      	add	sp, #28
 800aec8:	bd90      	pop	{r4, r7, pc}
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	03ff63ff 	.word	0x03ff63ff

0800aed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2241      	movs	r2, #65	; 0x41
 800aede:	5c9b      	ldrb	r3, [r3, r2]
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b20      	cmp	r3, #32
 800aee4:	d138      	bne.n	800af58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2240      	movs	r2, #64	; 0x40
 800aeea:	5c9b      	ldrb	r3, [r3, r2]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d101      	bne.n	800aef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aef0:	2302      	movs	r3, #2
 800aef2:	e032      	b.n	800af5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2240      	movs	r2, #64	; 0x40
 800aef8:	2101      	movs	r1, #1
 800aefa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2241      	movs	r2, #65	; 0x41
 800af00:	2124      	movs	r1, #36	; 0x24
 800af02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2101      	movs	r1, #1
 800af10:	438a      	bics	r2, r1
 800af12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4911      	ldr	r1, [pc, #68]	; (800af64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800af20:	400a      	ands	r2, r1
 800af22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6819      	ldr	r1, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	430a      	orrs	r2, r1
 800af32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2101      	movs	r1, #1
 800af40:	430a      	orrs	r2, r1
 800af42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2241      	movs	r2, #65	; 0x41
 800af48:	2120      	movs	r1, #32
 800af4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2240      	movs	r2, #64	; 0x40
 800af50:	2100      	movs	r1, #0
 800af52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	e000      	b.n	800af5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af58:	2302      	movs	r3, #2
  }
}
 800af5a:	0018      	movs	r0, r3
 800af5c:	46bd      	mov	sp, r7
 800af5e:	b002      	add	sp, #8
 800af60:	bd80      	pop	{r7, pc}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	ffffefff 	.word	0xffffefff

0800af68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2241      	movs	r2, #65	; 0x41
 800af76:	5c9b      	ldrb	r3, [r3, r2]
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	2b20      	cmp	r3, #32
 800af7c:	d139      	bne.n	800aff2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2240      	movs	r2, #64	; 0x40
 800af82:	5c9b      	ldrb	r3, [r3, r2]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d101      	bne.n	800af8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800af88:	2302      	movs	r3, #2
 800af8a:	e033      	b.n	800aff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2240      	movs	r2, #64	; 0x40
 800af90:	2101      	movs	r1, #1
 800af92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2241      	movs	r2, #65	; 0x41
 800af98:	2124      	movs	r1, #36	; 0x24
 800af9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2101      	movs	r1, #1
 800afa8:	438a      	bics	r2, r1
 800afaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4a11      	ldr	r2, [pc, #68]	; (800affc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800afb8:	4013      	ands	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2101      	movs	r1, #1
 800afda:	430a      	orrs	r2, r1
 800afdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2241      	movs	r2, #65	; 0x41
 800afe2:	2120      	movs	r1, #32
 800afe4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2240      	movs	r2, #64	; 0x40
 800afea:	2100      	movs	r1, #0
 800afec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	e000      	b.n	800aff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aff2:	2302      	movs	r3, #2
  }
}
 800aff4:	0018      	movs	r0, r3
 800aff6:	46bd      	mov	sp, r7
 800aff8:	b004      	add	sp, #16
 800affa:	bd80      	pop	{r7, pc}
 800affc:	fffff0ff 	.word	0xfffff0ff

0800b000 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b008:	4b19      	ldr	r3, [pc, #100]	; (800b070 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a19      	ldr	r2, [pc, #100]	; (800b074 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b00e:	4013      	ands	r3, r2
 800b010:	0019      	movs	r1, r3
 800b012:	4b17      	ldr	r3, [pc, #92]	; (800b070 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	430a      	orrs	r2, r1
 800b018:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	2380      	movs	r3, #128	; 0x80
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	429a      	cmp	r2, r3
 800b022:	d11f      	bne.n	800b064 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b024:	4b14      	ldr	r3, [pc, #80]	; (800b078 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	0013      	movs	r3, r2
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	189b      	adds	r3, r3, r2
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	4912      	ldr	r1, [pc, #72]	; (800b07c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b032:	0018      	movs	r0, r3
 800b034:	f7f5 f884 	bl	8000140 <__udivsi3>
 800b038:	0003      	movs	r3, r0
 800b03a:	3301      	adds	r3, #1
 800b03c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b03e:	e008      	b.n	800b052 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	3b01      	subs	r3, #1
 800b04a:	60fb      	str	r3, [r7, #12]
 800b04c:	e001      	b.n	800b052 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e009      	b.n	800b066 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b052:	4b07      	ldr	r3, [pc, #28]	; (800b070 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b054:	695a      	ldr	r2, [r3, #20]
 800b056:	2380      	movs	r3, #128	; 0x80
 800b058:	00db      	lsls	r3, r3, #3
 800b05a:	401a      	ands	r2, r3
 800b05c:	2380      	movs	r3, #128	; 0x80
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	429a      	cmp	r2, r3
 800b062:	d0ed      	beq.n	800b040 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	0018      	movs	r0, r3
 800b068:	46bd      	mov	sp, r7
 800b06a:	b004      	add	sp, #16
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	46c0      	nop			; (mov r8, r8)
 800b070:	40007000 	.word	0x40007000
 800b074:	fffff9ff 	.word	0xfffff9ff
 800b078:	200000f4 	.word	0x200000f4
 800b07c:	000f4240 	.word	0x000f4240

0800b080 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b084:	4b03      	ldr	r3, [pc, #12]	; (800b094 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	23e0      	movs	r3, #224	; 0xe0
 800b08a:	01db      	lsls	r3, r3, #7
 800b08c:	4013      	ands	r3, r2
}
 800b08e:	0018      	movs	r0, r3
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	40021000 	.word	0x40021000

0800b098 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e2f3      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	d100      	bne.n	800b0b6 <HAL_RCC_OscConfig+0x1e>
 800b0b4:	e07c      	b.n	800b1b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0b6:	4bc3      	ldr	r3, [pc, #780]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	2238      	movs	r2, #56	; 0x38
 800b0bc:	4013      	ands	r3, r2
 800b0be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0c0:	4bc0      	ldr	r3, [pc, #768]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	2203      	movs	r2, #3
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2b10      	cmp	r3, #16
 800b0ce:	d102      	bne.n	800b0d6 <HAL_RCC_OscConfig+0x3e>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d002      	beq.n	800b0dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	2b08      	cmp	r3, #8
 800b0da:	d10b      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0dc:	4bb9      	ldr	r3, [pc, #740]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	2380      	movs	r3, #128	; 0x80
 800b0e2:	029b      	lsls	r3, r3, #10
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	d062      	beq.n	800b1ae <HAL_RCC_OscConfig+0x116>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d15e      	bne.n	800b1ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e2ce      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	2380      	movs	r3, #128	; 0x80
 800b0fa:	025b      	lsls	r3, r3, #9
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d107      	bne.n	800b110 <HAL_RCC_OscConfig+0x78>
 800b100:	4bb0      	ldr	r3, [pc, #704]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	4baf      	ldr	r3, [pc, #700]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b106:	2180      	movs	r1, #128	; 0x80
 800b108:	0249      	lsls	r1, r1, #9
 800b10a:	430a      	orrs	r2, r1
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	e020      	b.n	800b152 <HAL_RCC_OscConfig+0xba>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	23a0      	movs	r3, #160	; 0xa0
 800b116:	02db      	lsls	r3, r3, #11
 800b118:	429a      	cmp	r2, r3
 800b11a:	d10e      	bne.n	800b13a <HAL_RCC_OscConfig+0xa2>
 800b11c:	4ba9      	ldr	r3, [pc, #676]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	4ba8      	ldr	r3, [pc, #672]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b122:	2180      	movs	r1, #128	; 0x80
 800b124:	02c9      	lsls	r1, r1, #11
 800b126:	430a      	orrs	r2, r1
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	4ba6      	ldr	r3, [pc, #664]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4ba5      	ldr	r3, [pc, #660]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b130:	2180      	movs	r1, #128	; 0x80
 800b132:	0249      	lsls	r1, r1, #9
 800b134:	430a      	orrs	r2, r1
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	e00b      	b.n	800b152 <HAL_RCC_OscConfig+0xba>
 800b13a:	4ba2      	ldr	r3, [pc, #648]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4ba1      	ldr	r3, [pc, #644]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b140:	49a1      	ldr	r1, [pc, #644]	; (800b3c8 <HAL_RCC_OscConfig+0x330>)
 800b142:	400a      	ands	r2, r1
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	4b9f      	ldr	r3, [pc, #636]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	4b9e      	ldr	r3, [pc, #632]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b14c:	499f      	ldr	r1, [pc, #636]	; (800b3cc <HAL_RCC_OscConfig+0x334>)
 800b14e:	400a      	ands	r2, r1
 800b150:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d014      	beq.n	800b184 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b15a:	f7fd fc43 	bl	80089e4 <HAL_GetTick>
 800b15e:	0003      	movs	r3, r0
 800b160:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b162:	e008      	b.n	800b176 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b164:	f7fd fc3e 	bl	80089e4 <HAL_GetTick>
 800b168:	0002      	movs	r2, r0
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	2b64      	cmp	r3, #100	; 0x64
 800b170:	d901      	bls.n	800b176 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e28d      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b176:	4b93      	ldr	r3, [pc, #588]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	2380      	movs	r3, #128	; 0x80
 800b17c:	029b      	lsls	r3, r3, #10
 800b17e:	4013      	ands	r3, r2
 800b180:	d0f0      	beq.n	800b164 <HAL_RCC_OscConfig+0xcc>
 800b182:	e015      	b.n	800b1b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b184:	f7fd fc2e 	bl	80089e4 <HAL_GetTick>
 800b188:	0003      	movs	r3, r0
 800b18a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b18c:	e008      	b.n	800b1a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b18e:	f7fd fc29 	bl	80089e4 <HAL_GetTick>
 800b192:	0002      	movs	r2, r0
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	2b64      	cmp	r3, #100	; 0x64
 800b19a:	d901      	bls.n	800b1a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e278      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b1a0:	4b88      	ldr	r3, [pc, #544]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	2380      	movs	r3, #128	; 0x80
 800b1a6:	029b      	lsls	r3, r3, #10
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	d1f0      	bne.n	800b18e <HAL_RCC_OscConfig+0xf6>
 800b1ac:	e000      	b.n	800b1b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	d100      	bne.n	800b1bc <HAL_RCC_OscConfig+0x124>
 800b1ba:	e099      	b.n	800b2f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1bc:	4b81      	ldr	r3, [pc, #516]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	2238      	movs	r2, #56	; 0x38
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1c6:	4b7f      	ldr	r3, [pc, #508]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	2203      	movs	r2, #3
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	2b10      	cmp	r3, #16
 800b1d4:	d102      	bne.n	800b1dc <HAL_RCC_OscConfig+0x144>
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d002      	beq.n	800b1e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d135      	bne.n	800b24e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1e2:	4b78      	ldr	r3, [pc, #480]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	2380      	movs	r3, #128	; 0x80
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	d005      	beq.n	800b1fa <HAL_RCC_OscConfig+0x162>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e24b      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1fa:	4b72      	ldr	r3, [pc, #456]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	4a74      	ldr	r2, [pc, #464]	; (800b3d0 <HAL_RCC_OscConfig+0x338>)
 800b200:	4013      	ands	r3, r2
 800b202:	0019      	movs	r1, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	021a      	lsls	r2, r3, #8
 800b20a:	4b6e      	ldr	r3, [pc, #440]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b20c:	430a      	orrs	r2, r1
 800b20e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d112      	bne.n	800b23c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b216:	4b6b      	ldr	r3, [pc, #428]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a6e      	ldr	r2, [pc, #440]	; (800b3d4 <HAL_RCC_OscConfig+0x33c>)
 800b21c:	4013      	ands	r3, r2
 800b21e:	0019      	movs	r1, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	691a      	ldr	r2, [r3, #16]
 800b224:	4b67      	ldr	r3, [pc, #412]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b226:	430a      	orrs	r2, r1
 800b228:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b22a:	4b66      	ldr	r3, [pc, #408]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	0adb      	lsrs	r3, r3, #11
 800b230:	2207      	movs	r2, #7
 800b232:	4013      	ands	r3, r2
 800b234:	4a68      	ldr	r2, [pc, #416]	; (800b3d8 <HAL_RCC_OscConfig+0x340>)
 800b236:	40da      	lsrs	r2, r3
 800b238:	4b68      	ldr	r3, [pc, #416]	; (800b3dc <HAL_RCC_OscConfig+0x344>)
 800b23a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b23c:	4b68      	ldr	r3, [pc, #416]	; (800b3e0 <HAL_RCC_OscConfig+0x348>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	0018      	movs	r0, r3
 800b242:	f7fd f9b7 	bl	80085b4 <HAL_InitTick>
 800b246:	1e03      	subs	r3, r0, #0
 800b248:	d051      	beq.n	800b2ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e221      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d030      	beq.n	800b2b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b256:	4b5b      	ldr	r3, [pc, #364]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a5e      	ldr	r2, [pc, #376]	; (800b3d4 <HAL_RCC_OscConfig+0x33c>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	0019      	movs	r1, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	4b57      	ldr	r3, [pc, #348]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b266:	430a      	orrs	r2, r1
 800b268:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b26a:	4b56      	ldr	r3, [pc, #344]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	4b55      	ldr	r3, [pc, #340]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b270:	2180      	movs	r1, #128	; 0x80
 800b272:	0049      	lsls	r1, r1, #1
 800b274:	430a      	orrs	r2, r1
 800b276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b278:	f7fd fbb4 	bl	80089e4 <HAL_GetTick>
 800b27c:	0003      	movs	r3, r0
 800b27e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b280:	e008      	b.n	800b294 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b282:	f7fd fbaf 	bl	80089e4 <HAL_GetTick>
 800b286:	0002      	movs	r2, r0
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d901      	bls.n	800b294 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b290:	2303      	movs	r3, #3
 800b292:	e1fe      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b294:	4b4b      	ldr	r3, [pc, #300]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	2380      	movs	r3, #128	; 0x80
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	4013      	ands	r3, r2
 800b29e:	d0f0      	beq.n	800b282 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2a0:	4b48      	ldr	r3, [pc, #288]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	4a4a      	ldr	r2, [pc, #296]	; (800b3d0 <HAL_RCC_OscConfig+0x338>)
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	0019      	movs	r1, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	021a      	lsls	r2, r3, #8
 800b2b0:	4b44      	ldr	r3, [pc, #272]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	605a      	str	r2, [r3, #4]
 800b2b6:	e01b      	b.n	800b2f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b2b8:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	4b41      	ldr	r3, [pc, #260]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b2be:	4949      	ldr	r1, [pc, #292]	; (800b3e4 <HAL_RCC_OscConfig+0x34c>)
 800b2c0:	400a      	ands	r2, r1
 800b2c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c4:	f7fd fb8e 	bl	80089e4 <HAL_GetTick>
 800b2c8:	0003      	movs	r3, r0
 800b2ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2ce:	f7fd fb89 	bl	80089e4 <HAL_GetTick>
 800b2d2:	0002      	movs	r2, r0
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d901      	bls.n	800b2e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e1d8      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b2e0:	4b38      	ldr	r3, [pc, #224]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	d1f0      	bne.n	800b2ce <HAL_RCC_OscConfig+0x236>
 800b2ec:	e000      	b.n	800b2f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2208      	movs	r2, #8
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	d047      	beq.n	800b38a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b2fa:	4b32      	ldr	r3, [pc, #200]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2238      	movs	r2, #56	; 0x38
 800b300:	4013      	ands	r3, r2
 800b302:	2b18      	cmp	r3, #24
 800b304:	d10a      	bne.n	800b31c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b306:	4b2f      	ldr	r3, [pc, #188]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b30a:	2202      	movs	r2, #2
 800b30c:	4013      	ands	r3, r2
 800b30e:	d03c      	beq.n	800b38a <HAL_RCC_OscConfig+0x2f2>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d138      	bne.n	800b38a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e1ba      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d019      	beq.n	800b358 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b324:	4b27      	ldr	r3, [pc, #156]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b326:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b328:	4b26      	ldr	r3, [pc, #152]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b32a:	2101      	movs	r1, #1
 800b32c:	430a      	orrs	r2, r1
 800b32e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b330:	f7fd fb58 	bl	80089e4 <HAL_GetTick>
 800b334:	0003      	movs	r3, r0
 800b336:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b338:	e008      	b.n	800b34c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b33a:	f7fd fb53 	bl	80089e4 <HAL_GetTick>
 800b33e:	0002      	movs	r2, r0
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	2b02      	cmp	r3, #2
 800b346:	d901      	bls.n	800b34c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800b348:	2303      	movs	r3, #3
 800b34a:	e1a2      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b34c:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b350:	2202      	movs	r2, #2
 800b352:	4013      	ands	r3, r2
 800b354:	d0f1      	beq.n	800b33a <HAL_RCC_OscConfig+0x2a2>
 800b356:	e018      	b.n	800b38a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b358:	4b1a      	ldr	r3, [pc, #104]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b35a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b35c:	4b19      	ldr	r3, [pc, #100]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b35e:	2101      	movs	r1, #1
 800b360:	438a      	bics	r2, r1
 800b362:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b364:	f7fd fb3e 	bl	80089e4 <HAL_GetTick>
 800b368:	0003      	movs	r3, r0
 800b36a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b36c:	e008      	b.n	800b380 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b36e:	f7fd fb39 	bl	80089e4 <HAL_GetTick>
 800b372:	0002      	movs	r2, r0
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d901      	bls.n	800b380 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e188      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b380:	4b10      	ldr	r3, [pc, #64]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b384:	2202      	movs	r2, #2
 800b386:	4013      	ands	r3, r2
 800b388:	d1f1      	bne.n	800b36e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2204      	movs	r2, #4
 800b390:	4013      	ands	r3, r2
 800b392:	d100      	bne.n	800b396 <HAL_RCC_OscConfig+0x2fe>
 800b394:	e0c6      	b.n	800b524 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b396:	231f      	movs	r3, #31
 800b398:	18fb      	adds	r3, r7, r3
 800b39a:	2200      	movs	r2, #0
 800b39c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b39e:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	2238      	movs	r2, #56	; 0x38
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	2b20      	cmp	r3, #32
 800b3a8:	d11e      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b3aa:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <HAL_RCC_OscConfig+0x32c>)
 800b3ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	d100      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x31e>
 800b3b4:	e0b6      	b.n	800b524 <HAL_RCC_OscConfig+0x48c>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d000      	beq.n	800b3c0 <HAL_RCC_OscConfig+0x328>
 800b3be:	e0b1      	b.n	800b524 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e166      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
 800b3c4:	40021000 	.word	0x40021000
 800b3c8:	fffeffff 	.word	0xfffeffff
 800b3cc:	fffbffff 	.word	0xfffbffff
 800b3d0:	ffff80ff 	.word	0xffff80ff
 800b3d4:	ffffc7ff 	.word	0xffffc7ff
 800b3d8:	00f42400 	.word	0x00f42400
 800b3dc:	200000f4 	.word	0x200000f4
 800b3e0:	200000f8 	.word	0x200000f8
 800b3e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b3e8:	4bac      	ldr	r3, [pc, #688]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b3ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3ec:	2380      	movs	r3, #128	; 0x80
 800b3ee:	055b      	lsls	r3, r3, #21
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	d101      	bne.n	800b3f8 <HAL_RCC_OscConfig+0x360>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e000      	b.n	800b3fa <HAL_RCC_OscConfig+0x362>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d011      	beq.n	800b422 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b3fe:	4ba7      	ldr	r3, [pc, #668]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b402:	4ba6      	ldr	r3, [pc, #664]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b404:	2180      	movs	r1, #128	; 0x80
 800b406:	0549      	lsls	r1, r1, #21
 800b408:	430a      	orrs	r2, r1
 800b40a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b40c:	4ba3      	ldr	r3, [pc, #652]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b40e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b410:	2380      	movs	r3, #128	; 0x80
 800b412:	055b      	lsls	r3, r3, #21
 800b414:	4013      	ands	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b41a:	231f      	movs	r3, #31
 800b41c:	18fb      	adds	r3, r7, r3
 800b41e:	2201      	movs	r2, #1
 800b420:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b422:	4b9f      	ldr	r3, [pc, #636]	; (800b6a0 <HAL_RCC_OscConfig+0x608>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	2380      	movs	r3, #128	; 0x80
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	4013      	ands	r3, r2
 800b42c:	d11a      	bne.n	800b464 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b42e:	4b9c      	ldr	r3, [pc, #624]	; (800b6a0 <HAL_RCC_OscConfig+0x608>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	4b9b      	ldr	r3, [pc, #620]	; (800b6a0 <HAL_RCC_OscConfig+0x608>)
 800b434:	2180      	movs	r1, #128	; 0x80
 800b436:	0049      	lsls	r1, r1, #1
 800b438:	430a      	orrs	r2, r1
 800b43a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b43c:	f7fd fad2 	bl	80089e4 <HAL_GetTick>
 800b440:	0003      	movs	r3, r0
 800b442:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b444:	e008      	b.n	800b458 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b446:	f7fd facd 	bl	80089e4 <HAL_GetTick>
 800b44a:	0002      	movs	r2, r0
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	2b02      	cmp	r3, #2
 800b452:	d901      	bls.n	800b458 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800b454:	2303      	movs	r3, #3
 800b456:	e11c      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b458:	4b91      	ldr	r3, [pc, #580]	; (800b6a0 <HAL_RCC_OscConfig+0x608>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	2380      	movs	r3, #128	; 0x80
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	4013      	ands	r3, r2
 800b462:	d0f0      	beq.n	800b446 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d106      	bne.n	800b47a <HAL_RCC_OscConfig+0x3e2>
 800b46c:	4b8b      	ldr	r3, [pc, #556]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b46e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b470:	4b8a      	ldr	r3, [pc, #552]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b472:	2101      	movs	r1, #1
 800b474:	430a      	orrs	r2, r1
 800b476:	65da      	str	r2, [r3, #92]	; 0x5c
 800b478:	e01c      	b.n	800b4b4 <HAL_RCC_OscConfig+0x41c>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	2b05      	cmp	r3, #5
 800b480:	d10c      	bne.n	800b49c <HAL_RCC_OscConfig+0x404>
 800b482:	4b86      	ldr	r3, [pc, #536]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b484:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b486:	4b85      	ldr	r3, [pc, #532]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b488:	2104      	movs	r1, #4
 800b48a:	430a      	orrs	r2, r1
 800b48c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b48e:	4b83      	ldr	r3, [pc, #524]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b492:	4b82      	ldr	r3, [pc, #520]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b494:	2101      	movs	r1, #1
 800b496:	430a      	orrs	r2, r1
 800b498:	65da      	str	r2, [r3, #92]	; 0x5c
 800b49a:	e00b      	b.n	800b4b4 <HAL_RCC_OscConfig+0x41c>
 800b49c:	4b7f      	ldr	r3, [pc, #508]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b49e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4a0:	4b7e      	ldr	r3, [pc, #504]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	438a      	bics	r2, r1
 800b4a6:	65da      	str	r2, [r3, #92]	; 0x5c
 800b4a8:	4b7c      	ldr	r3, [pc, #496]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b4aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4ac:	4b7b      	ldr	r3, [pc, #492]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b4ae:	2104      	movs	r1, #4
 800b4b0:	438a      	bics	r2, r1
 800b4b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d014      	beq.n	800b4e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4bc:	f7fd fa92 	bl	80089e4 <HAL_GetTick>
 800b4c0:	0003      	movs	r3, r0
 800b4c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b4c4:	e009      	b.n	800b4da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4c6:	f7fd fa8d 	bl	80089e4 <HAL_GetTick>
 800b4ca:	0002      	movs	r2, r0
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	4a74      	ldr	r2, [pc, #464]	; (800b6a4 <HAL_RCC_OscConfig+0x60c>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d901      	bls.n	800b4da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e0db      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b4da:	4b70      	ldr	r3, [pc, #448]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4de:	2202      	movs	r2, #2
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	d0f0      	beq.n	800b4c6 <HAL_RCC_OscConfig+0x42e>
 800b4e4:	e013      	b.n	800b50e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e6:	f7fd fa7d 	bl	80089e4 <HAL_GetTick>
 800b4ea:	0003      	movs	r3, r0
 800b4ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b4ee:	e009      	b.n	800b504 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4f0:	f7fd fa78 	bl	80089e4 <HAL_GetTick>
 800b4f4:	0002      	movs	r2, r0
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	4a6a      	ldr	r2, [pc, #424]	; (800b6a4 <HAL_RCC_OscConfig+0x60c>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d901      	bls.n	800b504 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e0c6      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b504:	4b65      	ldr	r3, [pc, #404]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b508:	2202      	movs	r2, #2
 800b50a:	4013      	ands	r3, r2
 800b50c:	d1f0      	bne.n	800b4f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b50e:	231f      	movs	r3, #31
 800b510:	18fb      	adds	r3, r7, r3
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d105      	bne.n	800b524 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b518:	4b60      	ldr	r3, [pc, #384]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b51a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b51c:	4b5f      	ldr	r3, [pc, #380]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b51e:	4962      	ldr	r1, [pc, #392]	; (800b6a8 <HAL_RCC_OscConfig+0x610>)
 800b520:	400a      	ands	r2, r1
 800b522:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	69db      	ldr	r3, [r3, #28]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d100      	bne.n	800b52e <HAL_RCC_OscConfig+0x496>
 800b52c:	e0b0      	b.n	800b690 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b52e:	4b5b      	ldr	r3, [pc, #364]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	2238      	movs	r2, #56	; 0x38
 800b534:	4013      	ands	r3, r2
 800b536:	2b10      	cmp	r3, #16
 800b538:	d100      	bne.n	800b53c <HAL_RCC_OscConfig+0x4a4>
 800b53a:	e078      	b.n	800b62e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	2b02      	cmp	r3, #2
 800b542:	d153      	bne.n	800b5ec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b544:	4b55      	ldr	r3, [pc, #340]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	4b54      	ldr	r3, [pc, #336]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b54a:	4958      	ldr	r1, [pc, #352]	; (800b6ac <HAL_RCC_OscConfig+0x614>)
 800b54c:	400a      	ands	r2, r1
 800b54e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b550:	f7fd fa48 	bl	80089e4 <HAL_GetTick>
 800b554:	0003      	movs	r3, r0
 800b556:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b558:	e008      	b.n	800b56c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b55a:	f7fd fa43 	bl	80089e4 <HAL_GetTick>
 800b55e:	0002      	movs	r2, r0
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	2b02      	cmp	r3, #2
 800b566:	d901      	bls.n	800b56c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	e092      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b56c:	4b4b      	ldr	r3, [pc, #300]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	2380      	movs	r3, #128	; 0x80
 800b572:	049b      	lsls	r3, r3, #18
 800b574:	4013      	ands	r3, r2
 800b576:	d1f0      	bne.n	800b55a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b578:	4b48      	ldr	r3, [pc, #288]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	4a4c      	ldr	r2, [pc, #304]	; (800b6b0 <HAL_RCC_OscConfig+0x618>)
 800b57e:	4013      	ands	r3, r2
 800b580:	0019      	movs	r1, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1a      	ldr	r2, [r3, #32]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	431a      	orrs	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b590:	021b      	lsls	r3, r3, #8
 800b592:	431a      	orrs	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	431a      	orrs	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	4b3e      	ldr	r3, [pc, #248]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5a6:	4b3d      	ldr	r3, [pc, #244]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4b3c      	ldr	r3, [pc, #240]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5ac:	2180      	movs	r1, #128	; 0x80
 800b5ae:	0449      	lsls	r1, r1, #17
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b5b4:	4b39      	ldr	r3, [pc, #228]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	4b38      	ldr	r3, [pc, #224]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5ba:	2180      	movs	r1, #128	; 0x80
 800b5bc:	0549      	lsls	r1, r1, #21
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5c2:	f7fd fa0f 	bl	80089e4 <HAL_GetTick>
 800b5c6:	0003      	movs	r3, r0
 800b5c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5ca:	e008      	b.n	800b5de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5cc:	f7fd fa0a 	bl	80089e4 <HAL_GetTick>
 800b5d0:	0002      	movs	r2, r0
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d901      	bls.n	800b5de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	e059      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5de:	4b2f      	ldr	r3, [pc, #188]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	2380      	movs	r3, #128	; 0x80
 800b5e4:	049b      	lsls	r3, r3, #18
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	d0f0      	beq.n	800b5cc <HAL_RCC_OscConfig+0x534>
 800b5ea:	e051      	b.n	800b690 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5ec:	4b2b      	ldr	r3, [pc, #172]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	4b2a      	ldr	r3, [pc, #168]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b5f2:	492e      	ldr	r1, [pc, #184]	; (800b6ac <HAL_RCC_OscConfig+0x614>)
 800b5f4:	400a      	ands	r2, r1
 800b5f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5f8:	f7fd f9f4 	bl	80089e4 <HAL_GetTick>
 800b5fc:	0003      	movs	r3, r0
 800b5fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b600:	e008      	b.n	800b614 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b602:	f7fd f9ef 	bl	80089e4 <HAL_GetTick>
 800b606:	0002      	movs	r2, r0
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d901      	bls.n	800b614 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800b610:	2303      	movs	r3, #3
 800b612:	e03e      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b614:	4b21      	ldr	r3, [pc, #132]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	049b      	lsls	r3, r3, #18
 800b61c:	4013      	ands	r3, r2
 800b61e:	d1f0      	bne.n	800b602 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800b620:	4b1e      	ldr	r3, [pc, #120]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	4b1d      	ldr	r3, [pc, #116]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b626:	4923      	ldr	r1, [pc, #140]	; (800b6b4 <HAL_RCC_OscConfig+0x61c>)
 800b628:	400a      	ands	r2, r1
 800b62a:	60da      	str	r2, [r3, #12]
 800b62c:	e030      	b.n	800b690 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d101      	bne.n	800b63a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e02b      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b63a:	4b18      	ldr	r3, [pc, #96]	; (800b69c <HAL_RCC_OscConfig+0x604>)
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2203      	movs	r2, #3
 800b644:	401a      	ands	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d11e      	bne.n	800b68c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2270      	movs	r2, #112	; 0x70
 800b652:	401a      	ands	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b658:	429a      	cmp	r2, r3
 800b65a:	d117      	bne.n	800b68c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	23fe      	movs	r3, #254	; 0xfe
 800b660:	01db      	lsls	r3, r3, #7
 800b662:	401a      	ands	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b668:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d10e      	bne.n	800b68c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	23f8      	movs	r3, #248	; 0xf8
 800b672:	039b      	lsls	r3, r3, #14
 800b674:	401a      	ands	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d106      	bne.n	800b68c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	0f5b      	lsrs	r3, r3, #29
 800b682:	075a      	lsls	r2, r3, #29
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b688:	429a      	cmp	r2, r3
 800b68a:	d001      	beq.n	800b690 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e000      	b.n	800b692 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	0018      	movs	r0, r3
 800b694:	46bd      	mov	sp, r7
 800b696:	b008      	add	sp, #32
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	46c0      	nop			; (mov r8, r8)
 800b69c:	40021000 	.word	0x40021000
 800b6a0:	40007000 	.word	0x40007000
 800b6a4:	00001388 	.word	0x00001388
 800b6a8:	efffffff 	.word	0xefffffff
 800b6ac:	feffffff 	.word	0xfeffffff
 800b6b0:	1fc1808c 	.word	0x1fc1808c
 800b6b4:	effefffc 	.word	0xeffefffc

0800b6b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e0e9      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b6cc:	4b76      	ldr	r3, [pc, #472]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2207      	movs	r2, #7
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d91e      	bls.n	800b718 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6da:	4b73      	ldr	r3, [pc, #460]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2207      	movs	r2, #7
 800b6e0:	4393      	bics	r3, r2
 800b6e2:	0019      	movs	r1, r3
 800b6e4:	4b70      	ldr	r3, [pc, #448]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b6ec:	f7fd f97a 	bl	80089e4 <HAL_GetTick>
 800b6f0:	0003      	movs	r3, r0
 800b6f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b6f4:	e009      	b.n	800b70a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6f6:	f7fd f975 	bl	80089e4 <HAL_GetTick>
 800b6fa:	0002      	movs	r2, r0
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	4a6a      	ldr	r2, [pc, #424]	; (800b8ac <HAL_RCC_ClockConfig+0x1f4>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d901      	bls.n	800b70a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	e0ca      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b70a:	4b67      	ldr	r3, [pc, #412]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2207      	movs	r2, #7
 800b710:	4013      	ands	r3, r2
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d1ee      	bne.n	800b6f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2202      	movs	r2, #2
 800b71e:	4013      	ands	r3, r2
 800b720:	d015      	beq.n	800b74e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2204      	movs	r2, #4
 800b728:	4013      	ands	r3, r2
 800b72a:	d006      	beq.n	800b73a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b72c:	4b60      	ldr	r3, [pc, #384]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	4b5f      	ldr	r3, [pc, #380]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b732:	21e0      	movs	r1, #224	; 0xe0
 800b734:	01c9      	lsls	r1, r1, #7
 800b736:	430a      	orrs	r2, r1
 800b738:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b73a:	4b5d      	ldr	r3, [pc, #372]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	4a5d      	ldr	r2, [pc, #372]	; (800b8b4 <HAL_RCC_ClockConfig+0x1fc>)
 800b740:	4013      	ands	r3, r2
 800b742:	0019      	movs	r1, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	4b59      	ldr	r3, [pc, #356]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b74a:	430a      	orrs	r2, r1
 800b74c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2201      	movs	r2, #1
 800b754:	4013      	ands	r3, r2
 800b756:	d057      	beq.n	800b808 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d107      	bne.n	800b770 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b760:	4b53      	ldr	r3, [pc, #332]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	2380      	movs	r3, #128	; 0x80
 800b766:	029b      	lsls	r3, r3, #10
 800b768:	4013      	ands	r3, r2
 800b76a:	d12b      	bne.n	800b7c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e097      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2b02      	cmp	r3, #2
 800b776:	d107      	bne.n	800b788 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b778:	4b4d      	ldr	r3, [pc, #308]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	2380      	movs	r3, #128	; 0x80
 800b77e:	049b      	lsls	r3, r3, #18
 800b780:	4013      	ands	r3, r2
 800b782:	d11f      	bne.n	800b7c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e08b      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d107      	bne.n	800b7a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b790:	4b47      	ldr	r3, [pc, #284]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	00db      	lsls	r3, r3, #3
 800b798:	4013      	ands	r3, r2
 800b79a:	d113      	bne.n	800b7c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e07f      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d106      	bne.n	800b7b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b7a8:	4b41      	ldr	r3, [pc, #260]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	d108      	bne.n	800b7c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e074      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7b6:	4b3e      	ldr	r3, [pc, #248]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	4013      	ands	r3, r2
 800b7be:	d101      	bne.n	800b7c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e06d      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b7c4:	4b3a      	ldr	r3, [pc, #232]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	2207      	movs	r2, #7
 800b7ca:	4393      	bics	r3, r2
 800b7cc:	0019      	movs	r1, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	4b37      	ldr	r3, [pc, #220]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7d8:	f7fd f904 	bl	80089e4 <HAL_GetTick>
 800b7dc:	0003      	movs	r3, r0
 800b7de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7e0:	e009      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7e2:	f7fd f8ff 	bl	80089e4 <HAL_GetTick>
 800b7e6:	0002      	movs	r2, r0
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	4a2f      	ldr	r2, [pc, #188]	; (800b8ac <HAL_RCC_ClockConfig+0x1f4>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d901      	bls.n	800b7f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e054      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7f6:	4b2e      	ldr	r3, [pc, #184]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	2238      	movs	r2, #56	; 0x38
 800b7fc:	401a      	ands	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	429a      	cmp	r2, r3
 800b806:	d1ec      	bne.n	800b7e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b808:	4b27      	ldr	r3, [pc, #156]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2207      	movs	r2, #7
 800b80e:	4013      	ands	r3, r2
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	d21e      	bcs.n	800b854 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b816:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2207      	movs	r2, #7
 800b81c:	4393      	bics	r3, r2
 800b81e:	0019      	movs	r1, r3
 800b820:	4b21      	ldr	r3, [pc, #132]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	430a      	orrs	r2, r1
 800b826:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b828:	f7fd f8dc 	bl	80089e4 <HAL_GetTick>
 800b82c:	0003      	movs	r3, r0
 800b82e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b830:	e009      	b.n	800b846 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b832:	f7fd f8d7 	bl	80089e4 <HAL_GetTick>
 800b836:	0002      	movs	r2, r0
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	4a1b      	ldr	r2, [pc, #108]	; (800b8ac <HAL_RCC_ClockConfig+0x1f4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d901      	bls.n	800b846 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	e02c      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b846:	4b18      	ldr	r3, [pc, #96]	; (800b8a8 <HAL_RCC_ClockConfig+0x1f0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2207      	movs	r2, #7
 800b84c:	4013      	ands	r3, r2
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d1ee      	bne.n	800b832 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2204      	movs	r2, #4
 800b85a:	4013      	ands	r3, r2
 800b85c:	d009      	beq.n	800b872 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800b85e:	4b14      	ldr	r3, [pc, #80]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <HAL_RCC_ClockConfig+0x200>)
 800b864:	4013      	ands	r3, r2
 800b866:	0019      	movs	r1, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68da      	ldr	r2, [r3, #12]
 800b86c:	4b10      	ldr	r3, [pc, #64]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b86e:	430a      	orrs	r2, r1
 800b870:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800b872:	f000 f829 	bl	800b8c8 <HAL_RCC_GetSysClockFreq>
 800b876:	0001      	movs	r1, r0
 800b878:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <HAL_RCC_ClockConfig+0x1f8>)
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	0a1b      	lsrs	r3, r3, #8
 800b87e:	220f      	movs	r2, #15
 800b880:	401a      	ands	r2, r3
 800b882:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <HAL_RCC_ClockConfig+0x204>)
 800b884:	0092      	lsls	r2, r2, #2
 800b886:	58d3      	ldr	r3, [r2, r3]
 800b888:	221f      	movs	r2, #31
 800b88a:	4013      	ands	r3, r2
 800b88c:	000a      	movs	r2, r1
 800b88e:	40da      	lsrs	r2, r3
 800b890:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <HAL_RCC_ClockConfig+0x208>)
 800b892:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b894:	4b0b      	ldr	r3, [pc, #44]	; (800b8c4 <HAL_RCC_ClockConfig+0x20c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	0018      	movs	r0, r3
 800b89a:	f7fc fe8b 	bl	80085b4 <HAL_InitTick>
 800b89e:	0003      	movs	r3, r0
}
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	b004      	add	sp, #16
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	40022000 	.word	0x40022000
 800b8ac:	00001388 	.word	0x00001388
 800b8b0:	40021000 	.word	0x40021000
 800b8b4:	fffff0ff 	.word	0xfffff0ff
 800b8b8:	ffff8fff 	.word	0xffff8fff
 800b8bc:	08017f98 	.word	0x08017f98
 800b8c0:	200000f4 	.word	0x200000f4
 800b8c4:	200000f8 	.word	0x200000f8

0800b8c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8ce:	4b3c      	ldr	r3, [pc, #240]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	2238      	movs	r2, #56	; 0x38
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	d10f      	bne.n	800b8f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800b8d8:	4b39      	ldr	r3, [pc, #228]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	0adb      	lsrs	r3, r3, #11
 800b8de:	2207      	movs	r2, #7
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	409a      	lsls	r2, r3
 800b8e6:	0013      	movs	r3, r2
 800b8e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	4835      	ldr	r0, [pc, #212]	; (800b9c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b8ee:	f7f4 fc27 	bl	8000140 <__udivsi3>
 800b8f2:	0003      	movs	r3, r0
 800b8f4:	613b      	str	r3, [r7, #16]
 800b8f6:	e05d      	b.n	800b9b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b8f8:	4b31      	ldr	r3, [pc, #196]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	2238      	movs	r2, #56	; 0x38
 800b8fe:	4013      	ands	r3, r2
 800b900:	2b08      	cmp	r3, #8
 800b902:	d102      	bne.n	800b90a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b904:	4b30      	ldr	r3, [pc, #192]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0x100>)
 800b906:	613b      	str	r3, [r7, #16]
 800b908:	e054      	b.n	800b9b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b90a:	4b2d      	ldr	r3, [pc, #180]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	2238      	movs	r2, #56	; 0x38
 800b910:	4013      	ands	r3, r2
 800b912:	2b10      	cmp	r3, #16
 800b914:	d138      	bne.n	800b988 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b916:	4b2a      	ldr	r3, [pc, #168]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	2203      	movs	r2, #3
 800b91c:	4013      	ands	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b920:	4b27      	ldr	r3, [pc, #156]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	091b      	lsrs	r3, r3, #4
 800b926:	2207      	movs	r2, #7
 800b928:	4013      	ands	r3, r2
 800b92a:	3301      	adds	r3, #1
 800b92c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2b03      	cmp	r3, #3
 800b932:	d10d      	bne.n	800b950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	4824      	ldr	r0, [pc, #144]	; (800b9c8 <HAL_RCC_GetSysClockFreq+0x100>)
 800b938:	f7f4 fc02 	bl	8000140 <__udivsi3>
 800b93c:	0003      	movs	r3, r0
 800b93e:	0019      	movs	r1, r3
 800b940:	4b1f      	ldr	r3, [pc, #124]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	0a1b      	lsrs	r3, r3, #8
 800b946:	227f      	movs	r2, #127	; 0x7f
 800b948:	4013      	ands	r3, r2
 800b94a:	434b      	muls	r3, r1
 800b94c:	617b      	str	r3, [r7, #20]
        break;
 800b94e:	e00d      	b.n	800b96c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800b950:	68b9      	ldr	r1, [r7, #8]
 800b952:	481c      	ldr	r0, [pc, #112]	; (800b9c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b954:	f7f4 fbf4 	bl	8000140 <__udivsi3>
 800b958:	0003      	movs	r3, r0
 800b95a:	0019      	movs	r1, r3
 800b95c:	4b18      	ldr	r3, [pc, #96]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	0a1b      	lsrs	r3, r3, #8
 800b962:	227f      	movs	r2, #127	; 0x7f
 800b964:	4013      	ands	r3, r2
 800b966:	434b      	muls	r3, r1
 800b968:	617b      	str	r3, [r7, #20]
        break;
 800b96a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800b96c:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	0f5b      	lsrs	r3, r3, #29
 800b972:	2207      	movs	r2, #7
 800b974:	4013      	ands	r3, r2
 800b976:	3301      	adds	r3, #1
 800b978:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800b97a:	6879      	ldr	r1, [r7, #4]
 800b97c:	6978      	ldr	r0, [r7, #20]
 800b97e:	f7f4 fbdf 	bl	8000140 <__udivsi3>
 800b982:	0003      	movs	r3, r0
 800b984:	613b      	str	r3, [r7, #16]
 800b986:	e015      	b.n	800b9b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b988:	4b0d      	ldr	r3, [pc, #52]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	2238      	movs	r2, #56	; 0x38
 800b98e:	4013      	ands	r3, r2
 800b990:	2b20      	cmp	r3, #32
 800b992:	d103      	bne.n	800b99c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800b994:	2380      	movs	r3, #128	; 0x80
 800b996:	021b      	lsls	r3, r3, #8
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	e00b      	b.n	800b9b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b99c:	4b08      	ldr	r3, [pc, #32]	; (800b9c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	2238      	movs	r2, #56	; 0x38
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	2b18      	cmp	r3, #24
 800b9a6:	d103      	bne.n	800b9b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800b9a8:	23fa      	movs	r3, #250	; 0xfa
 800b9aa:	01db      	lsls	r3, r3, #7
 800b9ac:	613b      	str	r3, [r7, #16]
 800b9ae:	e001      	b.n	800b9b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b9b4:	693b      	ldr	r3, [r7, #16]
}
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	b006      	add	sp, #24
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	46c0      	nop			; (mov r8, r8)
 800b9c0:	40021000 	.word	0x40021000
 800b9c4:	00f42400 	.word	0x00f42400
 800b9c8:	007a1200 	.word	0x007a1200

0800b9cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b9d0:	4b02      	ldr	r3, [pc, #8]	; (800b9dc <HAL_RCC_GetHCLKFreq+0x10>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
}
 800b9d4:	0018      	movs	r0, r3
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	200000f4 	.word	0x200000f4

0800b9e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9e0:	b5b0      	push	{r4, r5, r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b9e4:	f7ff fff2 	bl	800b9cc <HAL_RCC_GetHCLKFreq>
 800b9e8:	0004      	movs	r4, r0
 800b9ea:	f7ff fb49 	bl	800b080 <LL_RCC_GetAPB1Prescaler>
 800b9ee:	0003      	movs	r3, r0
 800b9f0:	0b1a      	lsrs	r2, r3, #12
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b9f4:	0092      	lsls	r2, r2, #2
 800b9f6:	58d3      	ldr	r3, [r2, r3]
 800b9f8:	221f      	movs	r2, #31
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	40dc      	lsrs	r4, r3
 800b9fe:	0023      	movs	r3, r4
}
 800ba00:	0018      	movs	r0, r3
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bdb0      	pop	{r4, r5, r7, pc}
 800ba06:	46c0      	nop			; (mov r8, r8)
 800ba08:	08017fd8 	.word	0x08017fd8

0800ba0c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2207      	movs	r2, #7
 800ba1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ba1c:	4b0e      	ldr	r3, [pc, #56]	; (800ba58 <HAL_RCC_GetClockConfig+0x4c>)
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	2207      	movs	r2, #7
 800ba22:	401a      	ands	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ba28:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <HAL_RCC_GetClockConfig+0x4c>)
 800ba2a:	689a      	ldr	r2, [r3, #8]
 800ba2c:	23f0      	movs	r3, #240	; 0xf0
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	401a      	ands	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800ba36:	4b08      	ldr	r3, [pc, #32]	; (800ba58 <HAL_RCC_GetClockConfig+0x4c>)
 800ba38:	689a      	ldr	r2, [r3, #8]
 800ba3a:	23e0      	movs	r3, #224	; 0xe0
 800ba3c:	01db      	lsls	r3, r3, #7
 800ba3e:	401a      	ands	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ba44:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <HAL_RCC_GetClockConfig+0x50>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2207      	movs	r2, #7
 800ba4a:	401a      	ands	r2, r3
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	601a      	str	r2, [r3, #0]
}
 800ba50:	46c0      	nop			; (mov r8, r8)
 800ba52:	46bd      	mov	sp, r7
 800ba54:	b002      	add	sp, #8
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	40021000 	.word	0x40021000
 800ba5c:	40022000 	.word	0x40022000

0800ba60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800ba68:	2313      	movs	r3, #19
 800ba6a:	18fb      	adds	r3, r7, r3
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba70:	2312      	movs	r3, #18
 800ba72:	18fb      	adds	r3, r7, r3
 800ba74:	2200      	movs	r2, #0
 800ba76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	2380      	movs	r3, #128	; 0x80
 800ba7e:	029b      	lsls	r3, r3, #10
 800ba80:	4013      	ands	r3, r2
 800ba82:	d100      	bne.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ba84:	e0a3      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba86:	2011      	movs	r0, #17
 800ba88:	183b      	adds	r3, r7, r0
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba8e:	4b86      	ldr	r3, [pc, #536]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ba90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba92:	2380      	movs	r3, #128	; 0x80
 800ba94:	055b      	lsls	r3, r3, #21
 800ba96:	4013      	ands	r3, r2
 800ba98:	d110      	bne.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba9a:	4b83      	ldr	r3, [pc, #524]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ba9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba9e:	4b82      	ldr	r3, [pc, #520]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800baa0:	2180      	movs	r1, #128	; 0x80
 800baa2:	0549      	lsls	r1, r1, #21
 800baa4:	430a      	orrs	r2, r1
 800baa6:	63da      	str	r2, [r3, #60]	; 0x3c
 800baa8:	4b7f      	ldr	r3, [pc, #508]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800baaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baac:	2380      	movs	r3, #128	; 0x80
 800baae:	055b      	lsls	r3, r3, #21
 800bab0:	4013      	ands	r3, r2
 800bab2:	60bb      	str	r3, [r7, #8]
 800bab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bab6:	183b      	adds	r3, r7, r0
 800bab8:	2201      	movs	r2, #1
 800baba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800babc:	4b7b      	ldr	r3, [pc, #492]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	4b7a      	ldr	r3, [pc, #488]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800bac2:	2180      	movs	r1, #128	; 0x80
 800bac4:	0049      	lsls	r1, r1, #1
 800bac6:	430a      	orrs	r2, r1
 800bac8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800baca:	f7fc ff8b 	bl	80089e4 <HAL_GetTick>
 800bace:	0003      	movs	r3, r0
 800bad0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bad2:	e00b      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bad4:	f7fc ff86 	bl	80089e4 <HAL_GetTick>
 800bad8:	0002      	movs	r2, r0
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d904      	bls.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800bae2:	2313      	movs	r3, #19
 800bae4:	18fb      	adds	r3, r7, r3
 800bae6:	2203      	movs	r2, #3
 800bae8:	701a      	strb	r2, [r3, #0]
        break;
 800baea:	e005      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baec:	4b6f      	ldr	r3, [pc, #444]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	2380      	movs	r3, #128	; 0x80
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	4013      	ands	r3, r2
 800baf6:	d0ed      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800baf8:	2313      	movs	r3, #19
 800bafa:	18fb      	adds	r3, r7, r3
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d154      	bne.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bb02:	4b69      	ldr	r3, [pc, #420]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb06:	23c0      	movs	r3, #192	; 0xc0
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d019      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d014      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bb1e:	4b62      	ldr	r3, [pc, #392]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb22:	4a63      	ldr	r2, [pc, #396]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800bb24:	4013      	ands	r3, r2
 800bb26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb28:	4b5f      	ldr	r3, [pc, #380]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb2c:	4b5e      	ldr	r3, [pc, #376]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb2e:	2180      	movs	r1, #128	; 0x80
 800bb30:	0249      	lsls	r1, r1, #9
 800bb32:	430a      	orrs	r2, r1
 800bb34:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb36:	4b5c      	ldr	r3, [pc, #368]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb3a:	4b5b      	ldr	r3, [pc, #364]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb3c:	495d      	ldr	r1, [pc, #372]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800bb3e:	400a      	ands	r2, r1
 800bb40:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bb42:	4b59      	ldr	r3, [pc, #356]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	d016      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb50:	f7fc ff48 	bl	80089e4 <HAL_GetTick>
 800bb54:	0003      	movs	r3, r0
 800bb56:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb58:	e00c      	b.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb5a:	f7fc ff43 	bl	80089e4 <HAL_GetTick>
 800bb5e:	0002      	movs	r2, r0
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	4a54      	ldr	r2, [pc, #336]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d904      	bls.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800bb6a:	2313      	movs	r3, #19
 800bb6c:	18fb      	adds	r3, r7, r3
 800bb6e:	2203      	movs	r2, #3
 800bb70:	701a      	strb	r2, [r3, #0]
            break;
 800bb72:	e004      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb74:	4b4c      	ldr	r3, [pc, #304]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb78:	2202      	movs	r2, #2
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	d0ed      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800bb7e:	2313      	movs	r3, #19
 800bb80:	18fb      	adds	r3, r7, r3
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10a      	bne.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb88:	4b47      	ldr	r3, [pc, #284]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb8c:	4a48      	ldr	r2, [pc, #288]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800bb8e:	4013      	ands	r3, r2
 800bb90:	0019      	movs	r1, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	699a      	ldr	r2, [r3, #24]
 800bb96:	4b44      	ldr	r3, [pc, #272]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bb98:	430a      	orrs	r2, r1
 800bb9a:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb9c:	e00c      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb9e:	2312      	movs	r3, #18
 800bba0:	18fb      	adds	r3, r7, r3
 800bba2:	2213      	movs	r2, #19
 800bba4:	18ba      	adds	r2, r7, r2
 800bba6:	7812      	ldrb	r2, [r2, #0]
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	e005      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbac:	2312      	movs	r3, #18
 800bbae:	18fb      	adds	r3, r7, r3
 800bbb0:	2213      	movs	r2, #19
 800bbb2:	18ba      	adds	r2, r7, r2
 800bbb4:	7812      	ldrb	r2, [r2, #0]
 800bbb6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bbb8:	2311      	movs	r3, #17
 800bbba:	18fb      	adds	r3, r7, r3
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d105      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbc2:	4b39      	ldr	r3, [pc, #228]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bbc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbc6:	4b38      	ldr	r3, [pc, #224]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bbc8:	493c      	ldr	r1, [pc, #240]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800bbca:	400a      	ands	r2, r1
 800bbcc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	d009      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bbd8:	4b33      	ldr	r3, [pc, #204]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bbda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbdc:	2203      	movs	r2, #3
 800bbde:	4393      	bics	r3, r2
 800bbe0:	0019      	movs	r1, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	4b30      	ldr	r3, [pc, #192]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	d009      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bbf6:	4b2c      	ldr	r3, [pc, #176]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bbf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbfa:	220c      	movs	r2, #12
 800bbfc:	4393      	bics	r3, r2
 800bbfe:	0019      	movs	r1, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689a      	ldr	r2, [r3, #8]
 800bc04:	4b28      	ldr	r3, [pc, #160]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc06:	430a      	orrs	r2, r1
 800bc08:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	4013      	ands	r3, r2
 800bc12:	d009      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc14:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc18:	4a29      	ldr	r2, [pc, #164]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68da      	ldr	r2, [r3, #12]
 800bc22:	4b21      	ldr	r3, [pc, #132]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc24:	430a      	orrs	r2, r1
 800bc26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	2380      	movs	r3, #128	; 0x80
 800bc2e:	01db      	lsls	r3, r3, #7
 800bc30:	4013      	ands	r3, r2
 800bc32:	d015      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc34:	4b1c      	ldr	r3, [pc, #112]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	0899      	lsrs	r1, r3, #2
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	695a      	ldr	r2, [r3, #20]
 800bc40:	4b19      	ldr	r3, [pc, #100]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc42:	430a      	orrs	r2, r1
 800bc44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	695a      	ldr	r2, [r3, #20]
 800bc4a:	2380      	movs	r3, #128	; 0x80
 800bc4c:	05db      	lsls	r3, r3, #23
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d106      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bc52:	4b15      	ldr	r3, [pc, #84]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc54:	68da      	ldr	r2, [r3, #12]
 800bc56:	4b14      	ldr	r3, [pc, #80]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc58:	2180      	movs	r1, #128	; 0x80
 800bc5a:	0249      	lsls	r1, r1, #9
 800bc5c:	430a      	orrs	r2, r1
 800bc5e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	2380      	movs	r3, #128	; 0x80
 800bc66:	011b      	lsls	r3, r3, #4
 800bc68:	4013      	ands	r3, r2
 800bc6a:	d016      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800bc6c:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc70:	4a14      	ldr	r2, [pc, #80]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bc72:	4013      	ands	r3, r2
 800bc74:	0019      	movs	r1, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691a      	ldr	r2, [r3, #16]
 800bc7a:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc7c:	430a      	orrs	r2, r1
 800bc7e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	2380      	movs	r3, #128	; 0x80
 800bc86:	01db      	lsls	r3, r3, #7
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d106      	bne.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bc8c:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc8e:	68da      	ldr	r2, [r3, #12]
 800bc90:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bc92:	2180      	movs	r1, #128	; 0x80
 800bc94:	0249      	lsls	r1, r1, #9
 800bc96:	430a      	orrs	r2, r1
 800bc98:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800bc9a:	2312      	movs	r3, #18
 800bc9c:	18fb      	adds	r3, r7, r3
 800bc9e:	781b      	ldrb	r3, [r3, #0]
}
 800bca0:	0018      	movs	r0, r3
 800bca2:	46bd      	mov	sp, r7
 800bca4:	b006      	add	sp, #24
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	40021000 	.word	0x40021000
 800bcac:	40007000 	.word	0x40007000
 800bcb0:	fffffcff 	.word	0xfffffcff
 800bcb4:	fffeffff 	.word	0xfffeffff
 800bcb8:	00001388 	.word	0x00001388
 800bcbc:	efffffff 	.word	0xefffffff
 800bcc0:	ffffcfff 	.word	0xffffcfff
 800bcc4:	ffff3fff 	.word	0xffff3fff

0800bcc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e0a8      	b.n	800be2c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d109      	bne.n	800bcf6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	2382      	movs	r3, #130	; 0x82
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d009      	beq.n	800bd02 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	61da      	str	r2, [r3, #28]
 800bcf4:	e005      	b.n	800bd02 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	225d      	movs	r2, #93	; 0x5d
 800bd0c:	5c9b      	ldrb	r3, [r3, r2]
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d107      	bne.n	800bd24 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	225c      	movs	r2, #92	; 0x5c
 800bd18:	2100      	movs	r1, #0
 800bd1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f7fc fa54 	bl	80081cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	225d      	movs	r2, #93	; 0x5d
 800bd28:	2102      	movs	r1, #2
 800bd2a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2140      	movs	r1, #64	; 0x40
 800bd38:	438a      	bics	r2, r1
 800bd3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68da      	ldr	r2, [r3, #12]
 800bd40:	23e0      	movs	r3, #224	; 0xe0
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d902      	bls.n	800bd4e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	e002      	b.n	800bd54 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd4e:	2380      	movs	r3, #128	; 0x80
 800bd50:	015b      	lsls	r3, r3, #5
 800bd52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68da      	ldr	r2, [r3, #12]
 800bd58:	23f0      	movs	r3, #240	; 0xf0
 800bd5a:	011b      	lsls	r3, r3, #4
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d008      	beq.n	800bd72 <HAL_SPI_Init+0xaa>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	23e0      	movs	r3, #224	; 0xe0
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d002      	beq.n	800bd72 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	2382      	movs	r3, #130	; 0x82
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	401a      	ands	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6899      	ldr	r1, [r3, #8]
 800bd80:	2384      	movs	r3, #132	; 0x84
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	400b      	ands	r3, r1
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	2102      	movs	r1, #2
 800bd8e:	400b      	ands	r3, r1
 800bd90:	431a      	orrs	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	2101      	movs	r1, #1
 800bd98:	400b      	ands	r3, r1
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6999      	ldr	r1, [r3, #24]
 800bda0:	2380      	movs	r3, #128	; 0x80
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	400b      	ands	r3, r1
 800bda6:	431a      	orrs	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	2138      	movs	r1, #56	; 0x38
 800bdae:	400b      	ands	r3, r1
 800bdb0:	431a      	orrs	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	2180      	movs	r1, #128	; 0x80
 800bdb8:	400b      	ands	r3, r1
 800bdba:	431a      	orrs	r2, r3
 800bdbc:	0011      	movs	r1, r2
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdc2:	2380      	movs	r3, #128	; 0x80
 800bdc4:	019b      	lsls	r3, r3, #6
 800bdc6:	401a      	ands	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	0c1b      	lsrs	r3, r3, #16
 800bdd6:	2204      	movs	r2, #4
 800bdd8:	401a      	ands	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	2110      	movs	r1, #16
 800bde0:	400b      	ands	r3, r1
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde8:	2108      	movs	r1, #8
 800bdea:	400b      	ands	r3, r1
 800bdec:	431a      	orrs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68d9      	ldr	r1, [r3, #12]
 800bdf2:	23f0      	movs	r3, #240	; 0xf0
 800bdf4:	011b      	lsls	r3, r3, #4
 800bdf6:	400b      	ands	r3, r1
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	0011      	movs	r1, r2
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	2380      	movs	r3, #128	; 0x80
 800be00:	015b      	lsls	r3, r3, #5
 800be02:	401a      	ands	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	430a      	orrs	r2, r1
 800be0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	69da      	ldr	r2, [r3, #28]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4907      	ldr	r1, [pc, #28]	; (800be34 <HAL_SPI_Init+0x16c>)
 800be18:	400a      	ands	r2, r1
 800be1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	225d      	movs	r2, #93	; 0x5d
 800be26:	2101      	movs	r1, #1
 800be28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	0018      	movs	r0, r3
 800be2e:	46bd      	mov	sp, r7
 800be30:	b004      	add	sp, #16
 800be32:	bd80      	pop	{r7, pc}
 800be34:	fffff7ff 	.word	0xfffff7ff

0800be38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	603b      	str	r3, [r7, #0]
 800be44:	1dbb      	adds	r3, r7, #6
 800be46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be48:	231f      	movs	r3, #31
 800be4a:	18fb      	adds	r3, r7, r3
 800be4c:	2200      	movs	r2, #0
 800be4e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	225c      	movs	r2, #92	; 0x5c
 800be54:	5c9b      	ldrb	r3, [r3, r2]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d101      	bne.n	800be5e <HAL_SPI_Transmit+0x26>
 800be5a:	2302      	movs	r3, #2
 800be5c:	e140      	b.n	800c0e0 <HAL_SPI_Transmit+0x2a8>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	225c      	movs	r2, #92	; 0x5c
 800be62:	2101      	movs	r1, #1
 800be64:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be66:	f7fc fdbd 	bl	80089e4 <HAL_GetTick>
 800be6a:	0003      	movs	r3, r0
 800be6c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800be6e:	2316      	movs	r3, #22
 800be70:	18fb      	adds	r3, r7, r3
 800be72:	1dba      	adds	r2, r7, #6
 800be74:	8812      	ldrh	r2, [r2, #0]
 800be76:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	225d      	movs	r2, #93	; 0x5d
 800be7c:	5c9b      	ldrb	r3, [r3, r2]
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b01      	cmp	r3, #1
 800be82:	d004      	beq.n	800be8e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800be84:	231f      	movs	r3, #31
 800be86:	18fb      	adds	r3, r7, r3
 800be88:	2202      	movs	r2, #2
 800be8a:	701a      	strb	r2, [r3, #0]
    goto error;
 800be8c:	e11d      	b.n	800c0ca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d003      	beq.n	800be9c <HAL_SPI_Transmit+0x64>
 800be94:	1dbb      	adds	r3, r7, #6
 800be96:	881b      	ldrh	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d104      	bne.n	800bea6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800be9c:	231f      	movs	r3, #31
 800be9e:	18fb      	adds	r3, r7, r3
 800bea0:	2201      	movs	r2, #1
 800bea2:	701a      	strb	r2, [r3, #0]
    goto error;
 800bea4:	e111      	b.n	800c0ca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	225d      	movs	r2, #93	; 0x5d
 800beaa:	2103      	movs	r1, #3
 800beac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	1dba      	adds	r2, r7, #6
 800bebe:	8812      	ldrh	r2, [r2, #0]
 800bec0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	1dba      	adds	r2, r7, #6
 800bec6:	8812      	ldrh	r2, [r2, #0]
 800bec8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2244      	movs	r2, #68	; 0x44
 800bed4:	2100      	movs	r1, #0
 800bed6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2246      	movs	r2, #70	; 0x46
 800bedc:	2100      	movs	r1, #0
 800bede:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	2380      	movs	r3, #128	; 0x80
 800bef2:	021b      	lsls	r3, r3, #8
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d110      	bne.n	800bf1a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2140      	movs	r1, #64	; 0x40
 800bf04:	438a      	bics	r2, r1
 800bf06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2180      	movs	r1, #128	; 0x80
 800bf14:	01c9      	lsls	r1, r1, #7
 800bf16:	430a      	orrs	r2, r1
 800bf18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2240      	movs	r2, #64	; 0x40
 800bf22:	4013      	ands	r3, r2
 800bf24:	2b40      	cmp	r3, #64	; 0x40
 800bf26:	d007      	beq.n	800bf38 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2140      	movs	r1, #64	; 0x40
 800bf34:	430a      	orrs	r2, r1
 800bf36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68da      	ldr	r2, [r3, #12]
 800bf3c:	23e0      	movs	r3, #224	; 0xe0
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d94e      	bls.n	800bfe2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d004      	beq.n	800bf56 <HAL_SPI_Transmit+0x11e>
 800bf4c:	2316      	movs	r3, #22
 800bf4e:	18fb      	adds	r3, r7, r3
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d13f      	bne.n	800bfd6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	881a      	ldrh	r2, [r3, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	1c9a      	adds	r2, r3, #2
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bf7a:	e02c      	b.n	800bfd6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	2202      	movs	r2, #2
 800bf84:	4013      	ands	r3, r2
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d112      	bne.n	800bfb0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	881a      	ldrh	r2, [r3, #0]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9a:	1c9a      	adds	r2, r3, #2
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfae:	e012      	b.n	800bfd6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfb0:	f7fc fd18 	bl	80089e4 <HAL_GetTick>
 800bfb4:	0002      	movs	r2, r0
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d802      	bhi.n	800bfc6 <HAL_SPI_Transmit+0x18e>
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	d102      	bne.n	800bfcc <HAL_SPI_Transmit+0x194>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d104      	bne.n	800bfd6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800bfcc:	231f      	movs	r3, #31
 800bfce:	18fb      	adds	r3, r7, r3
 800bfd0:	2203      	movs	r2, #3
 800bfd2:	701a      	strb	r2, [r3, #0]
          goto error;
 800bfd4:	e079      	b.n	800c0ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1cd      	bne.n	800bf7c <HAL_SPI_Transmit+0x144>
 800bfe0:	e04f      	b.n	800c082 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d004      	beq.n	800bff4 <HAL_SPI_Transmit+0x1bc>
 800bfea:	2316      	movs	r3, #22
 800bfec:	18fb      	adds	r3, r7, r3
 800bfee:	881b      	ldrh	r3, [r3, #0]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d141      	bne.n	800c078 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	330c      	adds	r3, #12
 800bffe:	7812      	ldrb	r2, [r2, #0]
 800c000:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800c01a:	e02d      	b.n	800c078 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	2202      	movs	r2, #2
 800c024:	4013      	ands	r3, r2
 800c026:	2b02      	cmp	r3, #2
 800c028:	d113      	bne.n	800c052 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	330c      	adds	r3, #12
 800c034:	7812      	ldrb	r2, [r2, #0]
 800c036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c046:	b29b      	uxth	r3, r3
 800c048:	3b01      	subs	r3, #1
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c050:	e012      	b.n	800c078 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c052:	f7fc fcc7 	bl	80089e4 <HAL_GetTick>
 800c056:	0002      	movs	r2, r0
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d802      	bhi.n	800c068 <HAL_SPI_Transmit+0x230>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	d102      	bne.n	800c06e <HAL_SPI_Transmit+0x236>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d104      	bne.n	800c078 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800c06e:	231f      	movs	r3, #31
 800c070:	18fb      	adds	r3, r7, r3
 800c072:	2203      	movs	r2, #3
 800c074:	701a      	strb	r2, [r3, #0]
          goto error;
 800c076:	e028      	b.n	800c0ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1cc      	bne.n	800c01c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	0018      	movs	r0, r3
 800c08a:	f000 fb2f 	bl	800c6ec <SPI_EndRxTxTransaction>
 800c08e:	1e03      	subs	r3, r0, #0
 800c090:	d002      	beq.n	800c098 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2220      	movs	r2, #32
 800c096:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10a      	bne.n	800c0b6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	613b      	str	r3, [r7, #16]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	613b      	str	r3, [r7, #16]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	613b      	str	r3, [r7, #16]
 800c0b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d004      	beq.n	800c0c8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800c0be:	231f      	movs	r3, #31
 800c0c0:	18fb      	adds	r3, r7, r3
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	e000      	b.n	800c0ca <HAL_SPI_Transmit+0x292>
  }

error:
 800c0c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	225d      	movs	r2, #93	; 0x5d
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	225c      	movs	r2, #92	; 0x5c
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c0da:	231f      	movs	r3, #31
 800c0dc:	18fb      	adds	r3, r7, r3
 800c0de:	781b      	ldrb	r3, [r3, #0]
}
 800c0e0:	0018      	movs	r0, r3
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	b008      	add	sp, #32
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08a      	sub	sp, #40	; 0x28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	001a      	movs	r2, r3
 800c0f6:	1cbb      	adds	r3, r7, #2
 800c0f8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c0fe:	2323      	movs	r3, #35	; 0x23
 800c100:	18fb      	adds	r3, r7, r3
 800c102:	2200      	movs	r2, #0
 800c104:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	225c      	movs	r2, #92	; 0x5c
 800c10a:	5c9b      	ldrb	r3, [r3, r2]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d101      	bne.n	800c114 <HAL_SPI_TransmitReceive+0x2c>
 800c110:	2302      	movs	r3, #2
 800c112:	e1b5      	b.n	800c480 <HAL_SPI_TransmitReceive+0x398>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	225c      	movs	r2, #92	; 0x5c
 800c118:	2101      	movs	r1, #1
 800c11a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c11c:	f7fc fc62 	bl	80089e4 <HAL_GetTick>
 800c120:	0003      	movs	r3, r0
 800c122:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c124:	201b      	movs	r0, #27
 800c126:	183b      	adds	r3, r7, r0
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	215d      	movs	r1, #93	; 0x5d
 800c12c:	5c52      	ldrb	r2, [r2, r1]
 800c12e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c136:	2312      	movs	r3, #18
 800c138:	18fb      	adds	r3, r7, r3
 800c13a:	1cba      	adds	r2, r7, #2
 800c13c:	8812      	ldrh	r2, [r2, #0]
 800c13e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c140:	183b      	adds	r3, r7, r0
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d011      	beq.n	800c16c <HAL_SPI_TransmitReceive+0x84>
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	2382      	movs	r3, #130	; 0x82
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	429a      	cmp	r2, r3
 800c150:	d107      	bne.n	800c162 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d103      	bne.n	800c162 <HAL_SPI_TransmitReceive+0x7a>
 800c15a:	183b      	adds	r3, r7, r0
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	2b04      	cmp	r3, #4
 800c160:	d004      	beq.n	800c16c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800c162:	2323      	movs	r3, #35	; 0x23
 800c164:	18fb      	adds	r3, r7, r3
 800c166:	2202      	movs	r2, #2
 800c168:	701a      	strb	r2, [r3, #0]
    goto error;
 800c16a:	e17e      	b.n	800c46a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d006      	beq.n	800c180 <HAL_SPI_TransmitReceive+0x98>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d003      	beq.n	800c180 <HAL_SPI_TransmitReceive+0x98>
 800c178:	1cbb      	adds	r3, r7, #2
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d104      	bne.n	800c18a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800c180:	2323      	movs	r3, #35	; 0x23
 800c182:	18fb      	adds	r3, r7, r3
 800c184:	2201      	movs	r2, #1
 800c186:	701a      	strb	r2, [r3, #0]
    goto error;
 800c188:	e16f      	b.n	800c46a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	225d      	movs	r2, #93	; 0x5d
 800c18e:	5c9b      	ldrb	r3, [r3, r2]
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b04      	cmp	r3, #4
 800c194:	d003      	beq.n	800c19e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	225d      	movs	r2, #93	; 0x5d
 800c19a:	2105      	movs	r1, #5
 800c19c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	1cba      	adds	r2, r7, #2
 800c1ae:	2146      	movs	r1, #70	; 0x46
 800c1b0:	8812      	ldrh	r2, [r2, #0]
 800c1b2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	1cba      	adds	r2, r7, #2
 800c1b8:	2144      	movs	r1, #68	; 0x44
 800c1ba:	8812      	ldrh	r2, [r2, #0]
 800c1bc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	1cba      	adds	r2, r7, #2
 800c1c8:	8812      	ldrh	r2, [r2, #0]
 800c1ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	1cba      	adds	r2, r7, #2
 800c1d0:	8812      	ldrh	r2, [r2, #0]
 800c1d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	68da      	ldr	r2, [r3, #12]
 800c1e4:	23e0      	movs	r3, #224	; 0xe0
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d908      	bls.n	800c1fe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	685a      	ldr	r2, [r3, #4]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	49a4      	ldr	r1, [pc, #656]	; (800c488 <HAL_SPI_TransmitReceive+0x3a0>)
 800c1f8:	400a      	ands	r2, r1
 800c1fa:	605a      	str	r2, [r3, #4]
 800c1fc:	e008      	b.n	800c210 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2180      	movs	r1, #128	; 0x80
 800c20a:	0149      	lsls	r1, r1, #5
 800c20c:	430a      	orrs	r2, r1
 800c20e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2240      	movs	r2, #64	; 0x40
 800c218:	4013      	ands	r3, r2
 800c21a:	2b40      	cmp	r3, #64	; 0x40
 800c21c:	d007      	beq.n	800c22e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2140      	movs	r1, #64	; 0x40
 800c22a:	430a      	orrs	r2, r1
 800c22c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68da      	ldr	r2, [r3, #12]
 800c232:	23e0      	movs	r3, #224	; 0xe0
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	429a      	cmp	r2, r3
 800c238:	d800      	bhi.n	800c23c <HAL_SPI_TransmitReceive+0x154>
 800c23a:	e07f      	b.n	800c33c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <HAL_SPI_TransmitReceive+0x168>
 800c244:	2312      	movs	r3, #18
 800c246:	18fb      	adds	r3, r7, r3
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d000      	beq.n	800c250 <HAL_SPI_TransmitReceive+0x168>
 800c24e:	e069      	b.n	800c324 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c254:	881a      	ldrh	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c260:	1c9a      	adds	r2, r3, #2
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	3b01      	subs	r3, #1
 800c26e:	b29a      	uxth	r2, r3
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c274:	e056      	b.n	800c324 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	2202      	movs	r2, #2
 800c27e:	4013      	ands	r3, r2
 800c280:	2b02      	cmp	r3, #2
 800c282:	d11b      	bne.n	800c2bc <HAL_SPI_TransmitReceive+0x1d4>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c288:	b29b      	uxth	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d016      	beq.n	800c2bc <HAL_SPI_TransmitReceive+0x1d4>
 800c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c290:	2b01      	cmp	r3, #1
 800c292:	d113      	bne.n	800c2bc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c298:	881a      	ldrh	r2, [r3, #0]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a4:	1c9a      	adds	r2, r3, #2
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d11c      	bne.n	800c304 <HAL_SPI_TransmitReceive+0x21c>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2246      	movs	r2, #70	; 0x46
 800c2ce:	5a9b      	ldrh	r3, [r3, r2]
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d016      	beq.n	800c304 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68da      	ldr	r2, [r3, #12]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e0:	b292      	uxth	r2, r2
 800c2e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e8:	1c9a      	adds	r2, r3, #2
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2246      	movs	r2, #70	; 0x46
 800c2f2:	5a9b      	ldrh	r3, [r3, r2]
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	b299      	uxth	r1, r3
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2246      	movs	r2, #70	; 0x46
 800c2fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c300:	2301      	movs	r3, #1
 800c302:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c304:	f7fc fb6e 	bl	80089e4 <HAL_GetTick>
 800c308:	0002      	movs	r2, r0
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c310:	429a      	cmp	r2, r3
 800c312:	d807      	bhi.n	800c324 <HAL_SPI_TransmitReceive+0x23c>
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	3301      	adds	r3, #1
 800c318:	d004      	beq.n	800c324 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800c31a:	2323      	movs	r3, #35	; 0x23
 800c31c:	18fb      	adds	r3, r7, r3
 800c31e:	2203      	movs	r2, #3
 800c320:	701a      	strb	r2, [r3, #0]
        goto error;
 800c322:	e0a2      	b.n	800c46a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c328:	b29b      	uxth	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1a3      	bne.n	800c276 <HAL_SPI_TransmitReceive+0x18e>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2246      	movs	r2, #70	; 0x46
 800c332:	5a9b      	ldrh	r3, [r3, r2]
 800c334:	b29b      	uxth	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d19d      	bne.n	800c276 <HAL_SPI_TransmitReceive+0x18e>
 800c33a:	e085      	b.n	800c448 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d005      	beq.n	800c350 <HAL_SPI_TransmitReceive+0x268>
 800c344:	2312      	movs	r3, #18
 800c346:	18fb      	adds	r3, r7, r3
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d000      	beq.n	800c350 <HAL_SPI_TransmitReceive+0x268>
 800c34e:	e070      	b.n	800c432 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	330c      	adds	r3, #12
 800c35a:	7812      	ldrb	r2, [r2, #0]
 800c35c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	3b01      	subs	r3, #1
 800c370:	b29a      	uxth	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c376:	e05c      	b.n	800c432 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	2202      	movs	r2, #2
 800c380:	4013      	ands	r3, r2
 800c382:	2b02      	cmp	r3, #2
 800c384:	d11c      	bne.n	800c3c0 <HAL_SPI_TransmitReceive+0x2d8>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d017      	beq.n	800c3c0 <HAL_SPI_TransmitReceive+0x2d8>
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	2b01      	cmp	r3, #1
 800c394:	d114      	bne.n	800c3c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	330c      	adds	r3, #12
 800c3a0:	7812      	ldrb	r2, [r2, #0]
 800c3a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	1c5a      	adds	r2, r3, #1
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d11e      	bne.n	800c40c <HAL_SPI_TransmitReceive+0x324>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2246      	movs	r2, #70	; 0x46
 800c3d2:	5a9b      	ldrh	r3, [r3, r2]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d018      	beq.n	800c40c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	330c      	adds	r3, #12
 800c3e0:	001a      	movs	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	7812      	ldrb	r2, [r2, #0]
 800c3e8:	b2d2      	uxtb	r2, r2
 800c3ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2246      	movs	r2, #70	; 0x46
 800c3fa:	5a9b      	ldrh	r3, [r3, r2]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	3b01      	subs	r3, #1
 800c400:	b299      	uxth	r1, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2246      	movs	r2, #70	; 0x46
 800c406:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c408:	2301      	movs	r3, #1
 800c40a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c40c:	f7fc faea 	bl	80089e4 <HAL_GetTick>
 800c410:	0002      	movs	r2, r0
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c418:	429a      	cmp	r2, r3
 800c41a:	d802      	bhi.n	800c422 <HAL_SPI_TransmitReceive+0x33a>
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	3301      	adds	r3, #1
 800c420:	d102      	bne.n	800c428 <HAL_SPI_TransmitReceive+0x340>
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	2b00      	cmp	r3, #0
 800c426:	d104      	bne.n	800c432 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800c428:	2323      	movs	r3, #35	; 0x23
 800c42a:	18fb      	adds	r3, r7, r3
 800c42c:	2203      	movs	r2, #3
 800c42e:	701a      	strb	r2, [r3, #0]
        goto error;
 800c430:	e01b      	b.n	800c46a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c436:	b29b      	uxth	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d19d      	bne.n	800c378 <HAL_SPI_TransmitReceive+0x290>
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2246      	movs	r2, #70	; 0x46
 800c440:	5a9b      	ldrh	r3, [r3, r2]
 800c442:	b29b      	uxth	r3, r3
 800c444:	2b00      	cmp	r3, #0
 800c446:	d197      	bne.n	800c378 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c448:	69fa      	ldr	r2, [r7, #28]
 800c44a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	0018      	movs	r0, r3
 800c450:	f000 f94c 	bl	800c6ec <SPI_EndRxTxTransaction>
 800c454:	1e03      	subs	r3, r0, #0
 800c456:	d007      	beq.n	800c468 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800c458:	2323      	movs	r3, #35	; 0x23
 800c45a:	18fb      	adds	r3, r7, r3
 800c45c:	2201      	movs	r2, #1
 800c45e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2220      	movs	r2, #32
 800c464:	661a      	str	r2, [r3, #96]	; 0x60
 800c466:	e000      	b.n	800c46a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800c468:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	225d      	movs	r2, #93	; 0x5d
 800c46e:	2101      	movs	r1, #1
 800c470:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	225c      	movs	r2, #92	; 0x5c
 800c476:	2100      	movs	r1, #0
 800c478:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c47a:	2323      	movs	r3, #35	; 0x23
 800c47c:	18fb      	adds	r3, r7, r3
 800c47e:	781b      	ldrb	r3, [r3, #0]
}
 800c480:	0018      	movs	r0, r3
 800c482:	46bd      	mov	sp, r7
 800c484:	b00a      	add	sp, #40	; 0x28
 800c486:	bd80      	pop	{r7, pc}
 800c488:	ffffefff 	.word	0xffffefff

0800c48c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	603b      	str	r3, [r7, #0]
 800c498:	1dfb      	adds	r3, r7, #7
 800c49a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c49c:	f7fc faa2 	bl	80089e4 <HAL_GetTick>
 800c4a0:	0002      	movs	r2, r0
 800c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a4:	1a9b      	subs	r3, r3, r2
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	18d3      	adds	r3, r2, r3
 800c4aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c4ac:	f7fc fa9a 	bl	80089e4 <HAL_GetTick>
 800c4b0:	0003      	movs	r3, r0
 800c4b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c4b4:	4b3a      	ldr	r3, [pc, #232]	; (800c5a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	015b      	lsls	r3, r3, #5
 800c4ba:	0d1b      	lsrs	r3, r3, #20
 800c4bc:	69fa      	ldr	r2, [r7, #28]
 800c4be:	4353      	muls	r3, r2
 800c4c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4c2:	e058      	b.n	800c576 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	d055      	beq.n	800c576 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c4ca:	f7fc fa8b 	bl	80089e4 <HAL_GetTick>
 800c4ce:	0002      	movs	r2, r0
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d902      	bls.n	800c4e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d142      	bne.n	800c566 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685a      	ldr	r2, [r3, #4]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	21e0      	movs	r1, #224	; 0xe0
 800c4ec:	438a      	bics	r2, r1
 800c4ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	2382      	movs	r3, #130	; 0x82
 800c4f6:	005b      	lsls	r3, r3, #1
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d113      	bne.n	800c524 <SPI_WaitFlagStateUntilTimeout+0x98>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	689a      	ldr	r2, [r3, #8]
 800c500:	2380      	movs	r3, #128	; 0x80
 800c502:	021b      	lsls	r3, r3, #8
 800c504:	429a      	cmp	r2, r3
 800c506:	d005      	beq.n	800c514 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	2380      	movs	r3, #128	; 0x80
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	429a      	cmp	r2, r3
 800c512:	d107      	bne.n	800c524 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2140      	movs	r1, #64	; 0x40
 800c520:	438a      	bics	r2, r1
 800c522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c528:	2380      	movs	r3, #128	; 0x80
 800c52a:	019b      	lsls	r3, r3, #6
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d110      	bne.n	800c552 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	491a      	ldr	r1, [pc, #104]	; (800c5a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800c53c:	400a      	ands	r2, r1
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2180      	movs	r1, #128	; 0x80
 800c54c:	0189      	lsls	r1, r1, #6
 800c54e:	430a      	orrs	r2, r1
 800c550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	225d      	movs	r2, #93	; 0x5d
 800c556:	2101      	movs	r1, #1
 800c558:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	225c      	movs	r2, #92	; 0x5c
 800c55e:	2100      	movs	r1, #0
 800c560:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e017      	b.n	800c596 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d101      	bne.n	800c570 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	3b01      	subs	r3, #1
 800c574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	4013      	ands	r3, r2
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	425a      	negs	r2, r3
 800c586:	4153      	adcs	r3, r2
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	001a      	movs	r2, r3
 800c58c:	1dfb      	adds	r3, r7, #7
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	429a      	cmp	r2, r3
 800c592:	d197      	bne.n	800c4c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	0018      	movs	r0, r3
 800c598:	46bd      	mov	sp, r7
 800c59a:	b008      	add	sp, #32
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	46c0      	nop			; (mov r8, r8)
 800c5a0:	200000f4 	.word	0x200000f4
 800c5a4:	ffffdfff 	.word	0xffffdfff

0800c5a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08a      	sub	sp, #40	; 0x28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	607a      	str	r2, [r7, #4]
 800c5b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c5b6:	2317      	movs	r3, #23
 800c5b8:	18fb      	adds	r3, r7, r3
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c5be:	f7fc fa11 	bl	80089e4 <HAL_GetTick>
 800c5c2:	0002      	movs	r2, r0
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	1a9b      	subs	r3, r3, r2
 800c5c8:	683a      	ldr	r2, [r7, #0]
 800c5ca:	18d3      	adds	r3, r2, r3
 800c5cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c5ce:	f7fc fa09 	bl	80089e4 <HAL_GetTick>
 800c5d2:	0003      	movs	r3, r0
 800c5d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	330c      	adds	r3, #12
 800c5dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c5de:	4b41      	ldr	r3, [pc, #260]	; (800c6e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	0013      	movs	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	189b      	adds	r3, r3, r2
 800c5e8:	00da      	lsls	r2, r3, #3
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	0d1b      	lsrs	r3, r3, #20
 800c5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5f0:	4353      	muls	r3, r2
 800c5f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c5f4:	e068      	b.n	800c6c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	23c0      	movs	r3, #192	; 0xc0
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d10a      	bne.n	800c616 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d107      	bne.n	800c616 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	2117      	movs	r1, #23
 800c60e:	187b      	adds	r3, r7, r1
 800c610:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c612:	187b      	adds	r3, r7, r1
 800c614:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	d055      	beq.n	800c6c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c61c:	f7fc f9e2 	bl	80089e4 <HAL_GetTick>
 800c620:	0002      	movs	r2, r0
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c628:	429a      	cmp	r2, r3
 800c62a:	d902      	bls.n	800c632 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d142      	bne.n	800c6b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	685a      	ldr	r2, [r3, #4]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	21e0      	movs	r1, #224	; 0xe0
 800c63e:	438a      	bics	r2, r1
 800c640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	2382      	movs	r3, #130	; 0x82
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d113      	bne.n	800c676 <SPI_WaitFifoStateUntilTimeout+0xce>
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	689a      	ldr	r2, [r3, #8]
 800c652:	2380      	movs	r3, #128	; 0x80
 800c654:	021b      	lsls	r3, r3, #8
 800c656:	429a      	cmp	r2, r3
 800c658:	d005      	beq.n	800c666 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	689a      	ldr	r2, [r3, #8]
 800c65e:	2380      	movs	r3, #128	; 0x80
 800c660:	00db      	lsls	r3, r3, #3
 800c662:	429a      	cmp	r2, r3
 800c664:	d107      	bne.n	800c676 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2140      	movs	r1, #64	; 0x40
 800c672:	438a      	bics	r2, r1
 800c674:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c67a:	2380      	movs	r3, #128	; 0x80
 800c67c:	019b      	lsls	r3, r3, #6
 800c67e:	429a      	cmp	r2, r3
 800c680:	d110      	bne.n	800c6a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4916      	ldr	r1, [pc, #88]	; (800c6e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800c68e:	400a      	ands	r2, r1
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2180      	movs	r1, #128	; 0x80
 800c69e:	0189      	lsls	r1, r1, #6
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	225d      	movs	r2, #93	; 0x5d
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	225c      	movs	r2, #92	; 0x5c
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e010      	b.n	800c6da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d18e      	bne.n	800c5f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	0018      	movs	r0, r3
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	b00a      	add	sp, #40	; 0x28
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	46c0      	nop			; (mov r8, r8)
 800c6e4:	200000f4 	.word	0x200000f4
 800c6e8:	ffffdfff 	.word	0xffffdfff

0800c6ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af02      	add	r7, sp, #8
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	23c0      	movs	r3, #192	; 0xc0
 800c6fc:	0159      	lsls	r1, r3, #5
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	0013      	movs	r3, r2
 800c706:	2200      	movs	r2, #0
 800c708:	f7ff ff4e 	bl	800c5a8 <SPI_WaitFifoStateUntilTimeout>
 800c70c:	1e03      	subs	r3, r0, #0
 800c70e:	d007      	beq.n	800c720 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c714:	2220      	movs	r2, #32
 800c716:	431a      	orrs	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e027      	b.n	800c770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	0013      	movs	r3, r2
 800c72a:	2200      	movs	r2, #0
 800c72c:	2180      	movs	r1, #128	; 0x80
 800c72e:	f7ff fead 	bl	800c48c <SPI_WaitFlagStateUntilTimeout>
 800c732:	1e03      	subs	r3, r0, #0
 800c734:	d007      	beq.n	800c746 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c73a:	2220      	movs	r2, #32
 800c73c:	431a      	orrs	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e014      	b.n	800c770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c746:	68ba      	ldr	r2, [r7, #8]
 800c748:	23c0      	movs	r3, #192	; 0xc0
 800c74a:	00d9      	lsls	r1, r3, #3
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	0013      	movs	r3, r2
 800c754:	2200      	movs	r2, #0
 800c756:	f7ff ff27 	bl	800c5a8 <SPI_WaitFifoStateUntilTimeout>
 800c75a:	1e03      	subs	r3, r0, #0
 800c75c:	d007      	beq.n	800c76e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c762:	2220      	movs	r2, #32
 800c764:	431a      	orrs	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c76a:	2303      	movs	r3, #3
 800c76c:	e000      	b.n	800c770 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	0018      	movs	r0, r3
 800c772:	46bd      	mov	sp, r7
 800c774:	b004      	add	sp, #16
 800c776:	bd80      	pop	{r7, pc}

0800c778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e04a      	b.n	800c820 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	223d      	movs	r2, #61	; 0x3d
 800c78e:	5c9b      	ldrb	r3, [r3, r2]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d107      	bne.n	800c7a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	223c      	movs	r2, #60	; 0x3c
 800c79a:	2100      	movs	r1, #0
 800c79c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	0018      	movs	r0, r3
 800c7a2:	f7fb fd5d 	bl	8008260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	223d      	movs	r2, #61	; 0x3d
 800c7aa:	2102      	movs	r1, #2
 800c7ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	0019      	movs	r1, r3
 800c7b8:	0010      	movs	r0, r2
 800c7ba:	f000 f9dd 	bl	800cb78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2248      	movs	r2, #72	; 0x48
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	223e      	movs	r2, #62	; 0x3e
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	5499      	strb	r1, [r3, r2]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	223f      	movs	r2, #63	; 0x3f
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	5499      	strb	r1, [r3, r2]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2240      	movs	r2, #64	; 0x40
 800c7da:	2101      	movs	r1, #1
 800c7dc:	5499      	strb	r1, [r3, r2]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2241      	movs	r2, #65	; 0x41
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	5499      	strb	r1, [r3, r2]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2242      	movs	r2, #66	; 0x42
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	5499      	strb	r1, [r3, r2]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2243      	movs	r2, #67	; 0x43
 800c7f2:	2101      	movs	r1, #1
 800c7f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2244      	movs	r2, #68	; 0x44
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	5499      	strb	r1, [r3, r2]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2245      	movs	r2, #69	; 0x45
 800c802:	2101      	movs	r1, #1
 800c804:	5499      	strb	r1, [r3, r2]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2246      	movs	r2, #70	; 0x46
 800c80a:	2101      	movs	r1, #1
 800c80c:	5499      	strb	r1, [r3, r2]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2247      	movs	r2, #71	; 0x47
 800c812:	2101      	movs	r1, #1
 800c814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	223d      	movs	r2, #61	; 0x3d
 800c81a:	2101      	movs	r1, #1
 800c81c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	0018      	movs	r0, r3
 800c822:	46bd      	mov	sp, r7
 800c824:	b002      	add	sp, #8
 800c826:	bd80      	pop	{r7, pc}

0800c828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	223d      	movs	r2, #61	; 0x3d
 800c834:	5c9b      	ldrb	r3, [r3, r2]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d001      	beq.n	800c840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	e03c      	b.n	800c8ba <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	223d      	movs	r2, #61	; 0x3d
 800c844:	2102      	movs	r1, #2
 800c846:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68da      	ldr	r2, [r3, #12]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2101      	movs	r1, #1
 800c854:	430a      	orrs	r2, r1
 800c856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a19      	ldr	r2, [pc, #100]	; (800c8c4 <HAL_TIM_Base_Start_IT+0x9c>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d009      	beq.n	800c876 <HAL_TIM_Base_Start_IT+0x4e>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a18      	ldr	r2, [pc, #96]	; (800c8c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d004      	beq.n	800c876 <HAL_TIM_Base_Start_IT+0x4e>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a16      	ldr	r2, [pc, #88]	; (800c8cc <HAL_TIM_Base_Start_IT+0xa4>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d116      	bne.n	800c8a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	4a14      	ldr	r2, [pc, #80]	; (800c8d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800c87e:	4013      	ands	r3, r2
 800c880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b06      	cmp	r3, #6
 800c886:	d016      	beq.n	800c8b6 <HAL_TIM_Base_Start_IT+0x8e>
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	2380      	movs	r3, #128	; 0x80
 800c88c:	025b      	lsls	r3, r3, #9
 800c88e:	429a      	cmp	r2, r3
 800c890:	d011      	beq.n	800c8b6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2101      	movs	r1, #1
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8a2:	e008      	b.n	800c8b6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	e000      	b.n	800c8b8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8b6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	0018      	movs	r0, r3
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	b004      	add	sp, #16
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	46c0      	nop			; (mov r8, r8)
 800c8c4:	40012c00 	.word	0x40012c00
 800c8c8:	40000400 	.word	0x40000400
 800c8cc:	40014000 	.word	0x40014000
 800c8d0:	00010007 	.word	0x00010007

0800c8d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	2202      	movs	r2, #2
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d124      	bne.n	800c934 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	2202      	movs	r2, #2
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d11d      	bne.n	800c934 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2203      	movs	r2, #3
 800c8fe:	4252      	negs	r2, r2
 800c900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	2203      	movs	r2, #3
 800c910:	4013      	ands	r3, r2
 800c912:	d004      	beq.n	800c91e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	0018      	movs	r0, r3
 800c918:	f000 f916 	bl	800cb48 <HAL_TIM_IC_CaptureCallback>
 800c91c:	e007      	b.n	800c92e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	0018      	movs	r0, r3
 800c922:	f000 f909 	bl	800cb38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	0018      	movs	r0, r3
 800c92a:	f000 f915 	bl	800cb58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	2204      	movs	r2, #4
 800c93c:	4013      	ands	r3, r2
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d125      	bne.n	800c98e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	2204      	movs	r2, #4
 800c94a:	4013      	ands	r3, r2
 800c94c:	2b04      	cmp	r3, #4
 800c94e:	d11e      	bne.n	800c98e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2205      	movs	r2, #5
 800c956:	4252      	negs	r2, r2
 800c958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2202      	movs	r2, #2
 800c95e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	699a      	ldr	r2, [r3, #24]
 800c966:	23c0      	movs	r3, #192	; 0xc0
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4013      	ands	r3, r2
 800c96c:	d004      	beq.n	800c978 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	0018      	movs	r0, r3
 800c972:	f000 f8e9 	bl	800cb48 <HAL_TIM_IC_CaptureCallback>
 800c976:	e007      	b.n	800c988 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	0018      	movs	r0, r3
 800c97c:	f000 f8dc 	bl	800cb38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	0018      	movs	r0, r3
 800c984:	f000 f8e8 	bl	800cb58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	2208      	movs	r2, #8
 800c996:	4013      	ands	r3, r2
 800c998:	2b08      	cmp	r3, #8
 800c99a:	d124      	bne.n	800c9e6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	2208      	movs	r2, #8
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	2b08      	cmp	r3, #8
 800c9a8:	d11d      	bne.n	800c9e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2209      	movs	r2, #9
 800c9b0:	4252      	negs	r2, r2
 800c9b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2204      	movs	r2, #4
 800c9b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	2203      	movs	r2, #3
 800c9c2:	4013      	ands	r3, r2
 800c9c4:	d004      	beq.n	800c9d0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	f000 f8bd 	bl	800cb48 <HAL_TIM_IC_CaptureCallback>
 800c9ce:	e007      	b.n	800c9e0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	f000 f8b0 	bl	800cb38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	0018      	movs	r0, r3
 800c9dc:	f000 f8bc 	bl	800cb58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	2210      	movs	r2, #16
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	2b10      	cmp	r3, #16
 800c9f2:	d125      	bne.n	800ca40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	2210      	movs	r2, #16
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	2b10      	cmp	r3, #16
 800ca00:	d11e      	bne.n	800ca40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2211      	movs	r2, #17
 800ca08:	4252      	negs	r2, r2
 800ca0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2208      	movs	r2, #8
 800ca10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69da      	ldr	r2, [r3, #28]
 800ca18:	23c0      	movs	r3, #192	; 0xc0
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	d004      	beq.n	800ca2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	0018      	movs	r0, r3
 800ca24:	f000 f890 	bl	800cb48 <HAL_TIM_IC_CaptureCallback>
 800ca28:	e007      	b.n	800ca3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f000 f883 	bl	800cb38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	0018      	movs	r0, r3
 800ca36:	f000 f88f 	bl	800cb58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	2201      	movs	r2, #1
 800ca48:	4013      	ands	r3, r2
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d10f      	bne.n	800ca6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	2201      	movs	r2, #1
 800ca56:	4013      	ands	r3, r2
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d108      	bne.n	800ca6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2202      	movs	r2, #2
 800ca62:	4252      	negs	r2, r2
 800ca64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	0018      	movs	r0, r3
 800ca6a:	f7fa fafd 	bl	8007068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	2280      	movs	r2, #128	; 0x80
 800ca76:	4013      	ands	r3, r2
 800ca78:	2b80      	cmp	r3, #128	; 0x80
 800ca7a:	d10f      	bne.n	800ca9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	2280      	movs	r2, #128	; 0x80
 800ca84:	4013      	ands	r3, r2
 800ca86:	2b80      	cmp	r3, #128	; 0x80
 800ca88:	d108      	bne.n	800ca9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2281      	movs	r2, #129	; 0x81
 800ca90:	4252      	negs	r2, r2
 800ca92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	0018      	movs	r0, r3
 800ca98:	f000 f954 	bl	800cd44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	691a      	ldr	r2, [r3, #16]
 800caa2:	2380      	movs	r3, #128	; 0x80
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	401a      	ands	r2, r3
 800caa8:	2380      	movs	r3, #128	; 0x80
 800caaa:	005b      	lsls	r3, r3, #1
 800caac:	429a      	cmp	r2, r3
 800caae:	d10e      	bne.n	800cace <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	2280      	movs	r2, #128	; 0x80
 800cab8:	4013      	ands	r3, r2
 800caba:	2b80      	cmp	r3, #128	; 0x80
 800cabc:	d107      	bne.n	800cace <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a1c      	ldr	r2, [pc, #112]	; (800cb34 <HAL_TIM_IRQHandler+0x260>)
 800cac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	0018      	movs	r0, r3
 800caca:	f000 f943 	bl	800cd54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	2240      	movs	r2, #64	; 0x40
 800cad6:	4013      	ands	r3, r2
 800cad8:	2b40      	cmp	r3, #64	; 0x40
 800cada:	d10f      	bne.n	800cafc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	2240      	movs	r2, #64	; 0x40
 800cae4:	4013      	ands	r3, r2
 800cae6:	2b40      	cmp	r3, #64	; 0x40
 800cae8:	d108      	bne.n	800cafc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2241      	movs	r2, #65	; 0x41
 800caf0:	4252      	negs	r2, r2
 800caf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	0018      	movs	r0, r3
 800caf8:	f000 f836 	bl	800cb68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	2220      	movs	r2, #32
 800cb04:	4013      	ands	r3, r2
 800cb06:	2b20      	cmp	r3, #32
 800cb08:	d10f      	bne.n	800cb2a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	2220      	movs	r2, #32
 800cb12:	4013      	ands	r3, r2
 800cb14:	2b20      	cmp	r3, #32
 800cb16:	d108      	bne.n	800cb2a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2221      	movs	r2, #33	; 0x21
 800cb1e:	4252      	negs	r2, r2
 800cb20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	0018      	movs	r0, r3
 800cb26:	f000 f905 	bl	800cd34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb2a:	46c0      	nop			; (mov r8, r8)
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	b002      	add	sp, #8
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	fffffeff 	.word	0xfffffeff

0800cb38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb40:	46c0      	nop			; (mov r8, r8)
 800cb42:	46bd      	mov	sp, r7
 800cb44:	b002      	add	sp, #8
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb50:	46c0      	nop			; (mov r8, r8)
 800cb52:	46bd      	mov	sp, r7
 800cb54:	b002      	add	sp, #8
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb60:	46c0      	nop			; (mov r8, r8)
 800cb62:	46bd      	mov	sp, r7
 800cb64:	b002      	add	sp, #8
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb70:	46c0      	nop			; (mov r8, r8)
 800cb72:	46bd      	mov	sp, r7
 800cb74:	b002      	add	sp, #8
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a2f      	ldr	r2, [pc, #188]	; (800cc48 <TIM_Base_SetConfig+0xd0>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d003      	beq.n	800cb98 <TIM_Base_SetConfig+0x20>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a2e      	ldr	r2, [pc, #184]	; (800cc4c <TIM_Base_SetConfig+0xd4>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d108      	bne.n	800cbaa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2270      	movs	r2, #112	; 0x70
 800cb9c:	4393      	bics	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a26      	ldr	r2, [pc, #152]	; (800cc48 <TIM_Base_SetConfig+0xd0>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d013      	beq.n	800cbda <TIM_Base_SetConfig+0x62>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a25      	ldr	r2, [pc, #148]	; (800cc4c <TIM_Base_SetConfig+0xd4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d00f      	beq.n	800cbda <TIM_Base_SetConfig+0x62>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a24      	ldr	r2, [pc, #144]	; (800cc50 <TIM_Base_SetConfig+0xd8>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d00b      	beq.n	800cbda <TIM_Base_SetConfig+0x62>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a23      	ldr	r2, [pc, #140]	; (800cc54 <TIM_Base_SetConfig+0xdc>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d007      	beq.n	800cbda <TIM_Base_SetConfig+0x62>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a22      	ldr	r2, [pc, #136]	; (800cc58 <TIM_Base_SetConfig+0xe0>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d003      	beq.n	800cbda <TIM_Base_SetConfig+0x62>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a21      	ldr	r2, [pc, #132]	; (800cc5c <TIM_Base_SetConfig+0xe4>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d108      	bne.n	800cbec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	4a20      	ldr	r2, [pc, #128]	; (800cc60 <TIM_Base_SetConfig+0xe8>)
 800cbde:	4013      	ands	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2280      	movs	r2, #128	; 0x80
 800cbf0:	4393      	bics	r3, r2
 800cbf2:	001a      	movs	r2, r3
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	689a      	ldr	r2, [r3, #8]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a0c      	ldr	r2, [pc, #48]	; (800cc48 <TIM_Base_SetConfig+0xd0>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00b      	beq.n	800cc32 <TIM_Base_SetConfig+0xba>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a0d      	ldr	r2, [pc, #52]	; (800cc54 <TIM_Base_SetConfig+0xdc>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d007      	beq.n	800cc32 <TIM_Base_SetConfig+0xba>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a0c      	ldr	r2, [pc, #48]	; (800cc58 <TIM_Base_SetConfig+0xe0>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d003      	beq.n	800cc32 <TIM_Base_SetConfig+0xba>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a0b      	ldr	r2, [pc, #44]	; (800cc5c <TIM_Base_SetConfig+0xe4>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d103      	bne.n	800cc3a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	691a      	ldr	r2, [r3, #16]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	615a      	str	r2, [r3, #20]
}
 800cc40:	46c0      	nop			; (mov r8, r8)
 800cc42:	46bd      	mov	sp, r7
 800cc44:	b004      	add	sp, #16
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	40012c00 	.word	0x40012c00
 800cc4c:	40000400 	.word	0x40000400
 800cc50:	40002000 	.word	0x40002000
 800cc54:	40014000 	.word	0x40014000
 800cc58:	40014400 	.word	0x40014400
 800cc5c:	40014800 	.word	0x40014800
 800cc60:	fffffcff 	.word	0xfffffcff

0800cc64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	223c      	movs	r2, #60	; 0x3c
 800cc72:	5c9b      	ldrb	r3, [r3, r2]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d101      	bne.n	800cc7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc78:	2302      	movs	r3, #2
 800cc7a:	e04f      	b.n	800cd1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	223c      	movs	r2, #60	; 0x3c
 800cc80:	2101      	movs	r1, #1
 800cc82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	223d      	movs	r2, #61	; 0x3d
 800cc88:	2102      	movs	r1, #2
 800cc8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a20      	ldr	r2, [pc, #128]	; (800cd24 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d108      	bne.n	800ccb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4a1f      	ldr	r2, [pc, #124]	; (800cd28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ccaa:	4013      	ands	r3, r2
 800ccac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2270      	movs	r2, #112	; 0x70
 800ccbc:	4393      	bics	r3, r2
 800ccbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a13      	ldr	r2, [pc, #76]	; (800cd24 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d009      	beq.n	800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a12      	ldr	r2, [pc, #72]	; (800cd2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d004      	beq.n	800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a11      	ldr	r2, [pc, #68]	; (800cd30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d10c      	bne.n	800cd0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2280      	movs	r2, #128	; 0x80
 800ccf4:	4393      	bics	r3, r2
 800ccf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	223d      	movs	r2, #61	; 0x3d
 800cd0e:	2101      	movs	r1, #1
 800cd10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	223c      	movs	r2, #60	; 0x3c
 800cd16:	2100      	movs	r1, #0
 800cd18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	0018      	movs	r0, r3
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	b004      	add	sp, #16
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	40012c00 	.word	0x40012c00
 800cd28:	ff0fffff 	.word	0xff0fffff
 800cd2c:	40000400 	.word	0x40000400
 800cd30:	40014000 	.word	0x40014000

0800cd34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd3c:	46c0      	nop			; (mov r8, r8)
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	b002      	add	sp, #8
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd4c:	46c0      	nop			; (mov r8, r8)
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	b002      	add	sp, #8
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd5c:	46c0      	nop			; (mov r8, r8)
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	b002      	add	sp, #8
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e046      	b.n	800ce04 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2288      	movs	r2, #136	; 0x88
 800cd7a:	589b      	ldr	r3, [r3, r2]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d107      	bne.n	800cd90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2284      	movs	r2, #132	; 0x84
 800cd84:	2100      	movs	r1, #0
 800cd86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	f7fb fa8e 	bl	80082ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2288      	movs	r2, #136	; 0x88
 800cd94:	2124      	movs	r1, #36	; 0x24
 800cd96:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2101      	movs	r1, #1
 800cda4:	438a      	bics	r2, r1
 800cda6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	0018      	movs	r0, r3
 800cdac:	f000 fd40 	bl	800d830 <UART_SetConfig>
 800cdb0:	0003      	movs	r3, r0
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e024      	b.n	800ce04 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	0018      	movs	r0, r3
 800cdc6:	f000 fed7 	bl	800db78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	685a      	ldr	r2, [r3, #4]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	490d      	ldr	r1, [pc, #52]	; (800ce0c <HAL_UART_Init+0xa8>)
 800cdd6:	400a      	ands	r2, r1
 800cdd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	689a      	ldr	r2, [r3, #8]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	212a      	movs	r1, #42	; 0x2a
 800cde6:	438a      	bics	r2, r1
 800cde8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	0018      	movs	r0, r3
 800cdfe:	f000 ff6f 	bl	800dce0 <UART_CheckIdleState>
 800ce02:	0003      	movs	r3, r0
}
 800ce04:	0018      	movs	r0, r3
 800ce06:	46bd      	mov	sp, r7
 800ce08:	b002      	add	sp, #8
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	ffffb7ff 	.word	0xffffb7ff

0800ce10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08a      	sub	sp, #40	; 0x28
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	1dbb      	adds	r3, r7, #6
 800ce1e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2288      	movs	r2, #136	; 0x88
 800ce24:	589b      	ldr	r3, [r3, r2]
 800ce26:	2b20      	cmp	r3, #32
 800ce28:	d000      	beq.n	800ce2c <HAL_UART_Transmit+0x1c>
 800ce2a:	e088      	b.n	800cf3e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <HAL_UART_Transmit+0x2a>
 800ce32:	1dbb      	adds	r3, r7, #6
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d101      	bne.n	800ce3e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e080      	b.n	800cf40 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	689a      	ldr	r2, [r3, #8]
 800ce42:	2380      	movs	r3, #128	; 0x80
 800ce44:	015b      	lsls	r3, r3, #5
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d109      	bne.n	800ce5e <HAL_UART_Transmit+0x4e>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d105      	bne.n	800ce5e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2201      	movs	r2, #1
 800ce56:	4013      	ands	r3, r2
 800ce58:	d001      	beq.n	800ce5e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e070      	b.n	800cf40 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2290      	movs	r2, #144	; 0x90
 800ce62:	2100      	movs	r1, #0
 800ce64:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2288      	movs	r2, #136	; 0x88
 800ce6a:	2121      	movs	r1, #33	; 0x21
 800ce6c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce6e:	f7fb fdb9 	bl	80089e4 <HAL_GetTick>
 800ce72:	0003      	movs	r3, r0
 800ce74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	1dba      	adds	r2, r7, #6
 800ce7a:	2154      	movs	r1, #84	; 0x54
 800ce7c:	8812      	ldrh	r2, [r2, #0]
 800ce7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	1dba      	adds	r2, r7, #6
 800ce84:	2156      	movs	r1, #86	; 0x56
 800ce86:	8812      	ldrh	r2, [r2, #0]
 800ce88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	689a      	ldr	r2, [r3, #8]
 800ce8e:	2380      	movs	r3, #128	; 0x80
 800ce90:	015b      	lsls	r3, r3, #5
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d108      	bne.n	800cea8 <HAL_UART_Transmit+0x98>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d104      	bne.n	800cea8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	e003      	b.n	800ceb0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ceac:	2300      	movs	r3, #0
 800ceae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ceb0:	e02c      	b.n	800cf0c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ceb2:	697a      	ldr	r2, [r7, #20]
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	0013      	movs	r3, r2
 800cebc:	2200      	movs	r2, #0
 800cebe:	2180      	movs	r1, #128	; 0x80
 800cec0:	f000 ff5c 	bl	800dd7c <UART_WaitOnFlagUntilTimeout>
 800cec4:	1e03      	subs	r3, r0, #0
 800cec6:	d001      	beq.n	800cecc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e039      	b.n	800cf40 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10b      	bne.n	800ceea <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	001a      	movs	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	05d2      	lsls	r2, r2, #23
 800cede:	0dd2      	lsrs	r2, r2, #23
 800cee0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	3302      	adds	r3, #2
 800cee6:	61bb      	str	r3, [r7, #24]
 800cee8:	e007      	b.n	800cefa <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	781a      	ldrb	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	3301      	adds	r3, #1
 800cef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2256      	movs	r2, #86	; 0x56
 800cefe:	5a9b      	ldrh	r3, [r3, r2]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	3b01      	subs	r3, #1
 800cf04:	b299      	uxth	r1, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2256      	movs	r2, #86	; 0x56
 800cf0a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2256      	movs	r2, #86	; 0x56
 800cf10:	5a9b      	ldrh	r3, [r3, r2]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1cc      	bne.n	800ceb2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	0013      	movs	r3, r2
 800cf22:	2200      	movs	r2, #0
 800cf24:	2140      	movs	r1, #64	; 0x40
 800cf26:	f000 ff29 	bl	800dd7c <UART_WaitOnFlagUntilTimeout>
 800cf2a:	1e03      	subs	r3, r0, #0
 800cf2c:	d001      	beq.n	800cf32 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e006      	b.n	800cf40 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2288      	movs	r2, #136	; 0x88
 800cf36:	2120      	movs	r1, #32
 800cf38:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e000      	b.n	800cf40 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800cf3e:	2302      	movs	r3, #2
  }
}
 800cf40:	0018      	movs	r0, r3
 800cf42:	46bd      	mov	sp, r7
 800cf44:	b008      	add	sp, #32
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08a      	sub	sp, #40	; 0x28
 800cf4c:	af02      	add	r7, sp, #8
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	603b      	str	r3, [r7, #0]
 800cf54:	1dbb      	adds	r3, r7, #6
 800cf56:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	228c      	movs	r2, #140	; 0x8c
 800cf5c:	589b      	ldr	r3, [r3, r2]
 800cf5e:	2b20      	cmp	r3, #32
 800cf60:	d000      	beq.n	800cf64 <HAL_UART_Receive+0x1c>
 800cf62:	e0cc      	b.n	800d0fe <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <HAL_UART_Receive+0x2a>
 800cf6a:	1dbb      	adds	r3, r7, #6
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e0c4      	b.n	800d100 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	2380      	movs	r3, #128	; 0x80
 800cf7c:	015b      	lsls	r3, r3, #5
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d109      	bne.n	800cf96 <HAL_UART_Receive+0x4e>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	4013      	ands	r3, r2
 800cf90:	d001      	beq.n	800cf96 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e0b4      	b.n	800d100 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2290      	movs	r2, #144	; 0x90
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	228c      	movs	r2, #140	; 0x8c
 800cfa2:	2122      	movs	r1, #34	; 0x22
 800cfa4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfac:	f7fb fd1a 	bl	80089e4 <HAL_GetTick>
 800cfb0:	0003      	movs	r3, r0
 800cfb2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	1dba      	adds	r2, r7, #6
 800cfb8:	215c      	movs	r1, #92	; 0x5c
 800cfba:	8812      	ldrh	r2, [r2, #0]
 800cfbc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	1dba      	adds	r2, r7, #6
 800cfc2:	215e      	movs	r1, #94	; 0x5e
 800cfc4:	8812      	ldrh	r2, [r2, #0]
 800cfc6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	2380      	movs	r3, #128	; 0x80
 800cfce:	015b      	lsls	r3, r3, #5
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d10d      	bne.n	800cff0 <HAL_UART_Receive+0xa8>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d104      	bne.n	800cfe6 <HAL_UART_Receive+0x9e>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2260      	movs	r2, #96	; 0x60
 800cfe0:	4949      	ldr	r1, [pc, #292]	; (800d108 <HAL_UART_Receive+0x1c0>)
 800cfe2:	5299      	strh	r1, [r3, r2]
 800cfe4:	e02e      	b.n	800d044 <HAL_UART_Receive+0xfc>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2260      	movs	r2, #96	; 0x60
 800cfea:	21ff      	movs	r1, #255	; 0xff
 800cfec:	5299      	strh	r1, [r3, r2]
 800cfee:	e029      	b.n	800d044 <HAL_UART_Receive+0xfc>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10d      	bne.n	800d014 <HAL_UART_Receive+0xcc>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d104      	bne.n	800d00a <HAL_UART_Receive+0xc2>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2260      	movs	r2, #96	; 0x60
 800d004:	21ff      	movs	r1, #255	; 0xff
 800d006:	5299      	strh	r1, [r3, r2]
 800d008:	e01c      	b.n	800d044 <HAL_UART_Receive+0xfc>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2260      	movs	r2, #96	; 0x60
 800d00e:	217f      	movs	r1, #127	; 0x7f
 800d010:	5299      	strh	r1, [r3, r2]
 800d012:	e017      	b.n	800d044 <HAL_UART_Receive+0xfc>
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	689a      	ldr	r2, [r3, #8]
 800d018:	2380      	movs	r3, #128	; 0x80
 800d01a:	055b      	lsls	r3, r3, #21
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d10d      	bne.n	800d03c <HAL_UART_Receive+0xf4>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d104      	bne.n	800d032 <HAL_UART_Receive+0xea>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2260      	movs	r2, #96	; 0x60
 800d02c:	217f      	movs	r1, #127	; 0x7f
 800d02e:	5299      	strh	r1, [r3, r2]
 800d030:	e008      	b.n	800d044 <HAL_UART_Receive+0xfc>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2260      	movs	r2, #96	; 0x60
 800d036:	213f      	movs	r1, #63	; 0x3f
 800d038:	5299      	strh	r1, [r3, r2]
 800d03a:	e003      	b.n	800d044 <HAL_UART_Receive+0xfc>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2260      	movs	r2, #96	; 0x60
 800d040:	2100      	movs	r1, #0
 800d042:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800d044:	2312      	movs	r3, #18
 800d046:	18fb      	adds	r3, r7, r3
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	2160      	movs	r1, #96	; 0x60
 800d04c:	5a52      	ldrh	r2, [r2, r1]
 800d04e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	689a      	ldr	r2, [r3, #8]
 800d054:	2380      	movs	r3, #128	; 0x80
 800d056:	015b      	lsls	r3, r3, #5
 800d058:	429a      	cmp	r2, r3
 800d05a:	d108      	bne.n	800d06e <HAL_UART_Receive+0x126>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d104      	bne.n	800d06e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800d064:	2300      	movs	r3, #0
 800d066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	61bb      	str	r3, [r7, #24]
 800d06c:	e003      	b.n	800d076 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d076:	e036      	b.n	800d0e6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	9300      	str	r3, [sp, #0]
 800d080:	0013      	movs	r3, r2
 800d082:	2200      	movs	r2, #0
 800d084:	2120      	movs	r1, #32
 800d086:	f000 fe79 	bl	800dd7c <UART_WaitOnFlagUntilTimeout>
 800d08a:	1e03      	subs	r3, r0, #0
 800d08c:	d001      	beq.n	800d092 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800d08e:	2303      	movs	r3, #3
 800d090:	e036      	b.n	800d100 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10e      	bne.n	800d0b6 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	2212      	movs	r2, #18
 800d0a2:	18ba      	adds	r2, r7, r2
 800d0a4:	8812      	ldrh	r2, [r2, #0]
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	3302      	adds	r3, #2
 800d0b2:	61bb      	str	r3, [r7, #24]
 800d0b4:	e00e      	b.n	800d0d4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2212      	movs	r2, #18
 800d0c0:	18ba      	adds	r2, r7, r2
 800d0c2:	8812      	ldrh	r2, [r2, #0]
 800d0c4:	b2d2      	uxtb	r2, r2
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	225e      	movs	r2, #94	; 0x5e
 800d0d8:	5a9b      	ldrh	r3, [r3, r2]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b299      	uxth	r1, r3
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	225e      	movs	r2, #94	; 0x5e
 800d0e4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	225e      	movs	r2, #94	; 0x5e
 800d0ea:	5a9b      	ldrh	r3, [r3, r2]
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1c2      	bne.n	800d078 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	228c      	movs	r2, #140	; 0x8c
 800d0f6:	2120      	movs	r1, #32
 800d0f8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e000      	b.n	800d100 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800d0fe:	2302      	movs	r3, #2
  }
}
 800d100:	0018      	movs	r0, r3
 800d102:	46bd      	mov	sp, r7
 800d104:	b008      	add	sp, #32
 800d106:	bd80      	pop	{r7, pc}
 800d108:	000001ff 	.word	0x000001ff

0800d10c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b088      	sub	sp, #32
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	1dbb      	adds	r3, r7, #6
 800d118:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	228c      	movs	r2, #140	; 0x8c
 800d11e:	589b      	ldr	r3, [r3, r2]
 800d120:	2b20      	cmp	r3, #32
 800d122:	d145      	bne.n	800d1b0 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <HAL_UART_Receive_DMA+0x26>
 800d12a:	1dbb      	adds	r3, r7, #6
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e03d      	b.n	800d1b2 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	689a      	ldr	r2, [r3, #8]
 800d13a:	2380      	movs	r3, #128	; 0x80
 800d13c:	015b      	lsls	r3, r3, #5
 800d13e:	429a      	cmp	r2, r3
 800d140:	d109      	bne.n	800d156 <HAL_UART_Receive_DMA+0x4a>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d105      	bne.n	800d156 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2201      	movs	r2, #1
 800d14e:	4013      	ands	r3, r2
 800d150:	d001      	beq.n	800d156 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e02d      	b.n	800d1b2 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	685a      	ldr	r2, [r3, #4]
 800d162:	2380      	movs	r3, #128	; 0x80
 800d164:	041b      	lsls	r3, r3, #16
 800d166:	4013      	ands	r3, r2
 800d168:	d019      	beq.n	800d19e <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16a:	f3ef 8310 	mrs	r3, PRIMASK
 800d16e:	613b      	str	r3, [r7, #16]
  return(result);
 800d170:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	2301      	movs	r3, #1
 800d176:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	f383 8810 	msr	PRIMASK, r3
}
 800d17e:	46c0      	nop			; (mov r8, r8)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2180      	movs	r1, #128	; 0x80
 800d18c:	04c9      	lsls	r1, r1, #19
 800d18e:	430a      	orrs	r2, r1
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	f383 8810 	msr	PRIMASK, r3
}
 800d19c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d19e:	1dbb      	adds	r3, r7, #6
 800d1a0:	881a      	ldrh	r2, [r3, #0]
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	f000 feb0 	bl	800df0c <UART_Start_Receive_DMA>
 800d1ac:	0003      	movs	r3, r0
 800d1ae:	e000      	b.n	800d1b2 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800d1b0:	2302      	movs	r3, #2
  }
}
 800d1b2:	0018      	movs	r0, r3
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	b008      	add	sp, #32
 800d1b8:	bd80      	pop	{r7, pc}
	...

0800d1bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1bc:	b5b0      	push	{r4, r5, r7, lr}
 800d1be:	b0aa      	sub	sp, #168	; 0xa8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	22a4      	movs	r2, #164	; 0xa4
 800d1cc:	18b9      	adds	r1, r7, r2
 800d1ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	20a0      	movs	r0, #160	; 0xa0
 800d1d8:	1839      	adds	r1, r7, r0
 800d1da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	249c      	movs	r4, #156	; 0x9c
 800d1e4:	1939      	adds	r1, r7, r4
 800d1e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d1e8:	0011      	movs	r1, r2
 800d1ea:	18bb      	adds	r3, r7, r2
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4aa2      	ldr	r2, [pc, #648]	; (800d478 <HAL_UART_IRQHandler+0x2bc>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	2298      	movs	r2, #152	; 0x98
 800d1f4:	18bd      	adds	r5, r7, r2
 800d1f6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800d1f8:	18bb      	adds	r3, r7, r2
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d11a      	bne.n	800d236 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d200:	187b      	adds	r3, r7, r1
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2220      	movs	r2, #32
 800d206:	4013      	ands	r3, r2
 800d208:	d015      	beq.n	800d236 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d20a:	183b      	adds	r3, r7, r0
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2220      	movs	r2, #32
 800d210:	4013      	ands	r3, r2
 800d212:	d105      	bne.n	800d220 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d214:	193b      	adds	r3, r7, r4
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	2380      	movs	r3, #128	; 0x80
 800d21a:	055b      	lsls	r3, r3, #21
 800d21c:	4013      	ands	r3, r2
 800d21e:	d00a      	beq.n	800d236 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d224:	2b00      	cmp	r3, #0
 800d226:	d100      	bne.n	800d22a <HAL_UART_IRQHandler+0x6e>
 800d228:	e2dc      	b.n	800d7e4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	0010      	movs	r0, r2
 800d232:	4798      	blx	r3
      }
      return;
 800d234:	e2d6      	b.n	800d7e4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d236:	2398      	movs	r3, #152	; 0x98
 800d238:	18fb      	adds	r3, r7, r3
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d100      	bne.n	800d242 <HAL_UART_IRQHandler+0x86>
 800d240:	e122      	b.n	800d488 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d242:	239c      	movs	r3, #156	; 0x9c
 800d244:	18fb      	adds	r3, r7, r3
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a8c      	ldr	r2, [pc, #560]	; (800d47c <HAL_UART_IRQHandler+0x2c0>)
 800d24a:	4013      	ands	r3, r2
 800d24c:	d106      	bne.n	800d25c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d24e:	23a0      	movs	r3, #160	; 0xa0
 800d250:	18fb      	adds	r3, r7, r3
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a8a      	ldr	r2, [pc, #552]	; (800d480 <HAL_UART_IRQHandler+0x2c4>)
 800d256:	4013      	ands	r3, r2
 800d258:	d100      	bne.n	800d25c <HAL_UART_IRQHandler+0xa0>
 800d25a:	e115      	b.n	800d488 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d25c:	23a4      	movs	r3, #164	; 0xa4
 800d25e:	18fb      	adds	r3, r7, r3
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2201      	movs	r2, #1
 800d264:	4013      	ands	r3, r2
 800d266:	d012      	beq.n	800d28e <HAL_UART_IRQHandler+0xd2>
 800d268:	23a0      	movs	r3, #160	; 0xa0
 800d26a:	18fb      	adds	r3, r7, r3
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	2380      	movs	r3, #128	; 0x80
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4013      	ands	r3, r2
 800d274:	d00b      	beq.n	800d28e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2201      	movs	r2, #1
 800d27c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2290      	movs	r2, #144	; 0x90
 800d282:	589b      	ldr	r3, [r3, r2]
 800d284:	2201      	movs	r2, #1
 800d286:	431a      	orrs	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2190      	movs	r1, #144	; 0x90
 800d28c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d28e:	23a4      	movs	r3, #164	; 0xa4
 800d290:	18fb      	adds	r3, r7, r3
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2202      	movs	r2, #2
 800d296:	4013      	ands	r3, r2
 800d298:	d011      	beq.n	800d2be <HAL_UART_IRQHandler+0x102>
 800d29a:	239c      	movs	r3, #156	; 0x9c
 800d29c:	18fb      	adds	r3, r7, r3
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	d00b      	beq.n	800d2be <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2202      	movs	r2, #2
 800d2ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2290      	movs	r2, #144	; 0x90
 800d2b2:	589b      	ldr	r3, [r3, r2]
 800d2b4:	2204      	movs	r2, #4
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2190      	movs	r1, #144	; 0x90
 800d2bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2be:	23a4      	movs	r3, #164	; 0xa4
 800d2c0:	18fb      	adds	r3, r7, r3
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2204      	movs	r2, #4
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	d011      	beq.n	800d2ee <HAL_UART_IRQHandler+0x132>
 800d2ca:	239c      	movs	r3, #156	; 0x9c
 800d2cc:	18fb      	adds	r3, r7, r3
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	d00b      	beq.n	800d2ee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2204      	movs	r2, #4
 800d2dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2290      	movs	r2, #144	; 0x90
 800d2e2:	589b      	ldr	r3, [r3, r2]
 800d2e4:	2202      	movs	r2, #2
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2190      	movs	r1, #144	; 0x90
 800d2ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2ee:	23a4      	movs	r3, #164	; 0xa4
 800d2f0:	18fb      	adds	r3, r7, r3
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2208      	movs	r2, #8
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	d017      	beq.n	800d32a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2fa:	23a0      	movs	r3, #160	; 0xa0
 800d2fc:	18fb      	adds	r3, r7, r3
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2220      	movs	r2, #32
 800d302:	4013      	ands	r3, r2
 800d304:	d105      	bne.n	800d312 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d306:	239c      	movs	r3, #156	; 0x9c
 800d308:	18fb      	adds	r3, r7, r3
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a5b      	ldr	r2, [pc, #364]	; (800d47c <HAL_UART_IRQHandler+0x2c0>)
 800d30e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d310:	d00b      	beq.n	800d32a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2208      	movs	r2, #8
 800d318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2290      	movs	r2, #144	; 0x90
 800d31e:	589b      	ldr	r3, [r3, r2]
 800d320:	2208      	movs	r2, #8
 800d322:	431a      	orrs	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2190      	movs	r1, #144	; 0x90
 800d328:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d32a:	23a4      	movs	r3, #164	; 0xa4
 800d32c:	18fb      	adds	r3, r7, r3
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	2380      	movs	r3, #128	; 0x80
 800d332:	011b      	lsls	r3, r3, #4
 800d334:	4013      	ands	r3, r2
 800d336:	d013      	beq.n	800d360 <HAL_UART_IRQHandler+0x1a4>
 800d338:	23a0      	movs	r3, #160	; 0xa0
 800d33a:	18fb      	adds	r3, r7, r3
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	2380      	movs	r3, #128	; 0x80
 800d340:	04db      	lsls	r3, r3, #19
 800d342:	4013      	ands	r3, r2
 800d344:	d00c      	beq.n	800d360 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2280      	movs	r2, #128	; 0x80
 800d34c:	0112      	lsls	r2, r2, #4
 800d34e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2290      	movs	r2, #144	; 0x90
 800d354:	589b      	ldr	r3, [r3, r2]
 800d356:	2220      	movs	r2, #32
 800d358:	431a      	orrs	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2190      	movs	r1, #144	; 0x90
 800d35e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2290      	movs	r2, #144	; 0x90
 800d364:	589b      	ldr	r3, [r3, r2]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d100      	bne.n	800d36c <HAL_UART_IRQHandler+0x1b0>
 800d36a:	e23d      	b.n	800d7e8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d36c:	23a4      	movs	r3, #164	; 0xa4
 800d36e:	18fb      	adds	r3, r7, r3
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2220      	movs	r2, #32
 800d374:	4013      	ands	r3, r2
 800d376:	d015      	beq.n	800d3a4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d378:	23a0      	movs	r3, #160	; 0xa0
 800d37a:	18fb      	adds	r3, r7, r3
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2220      	movs	r2, #32
 800d380:	4013      	ands	r3, r2
 800d382:	d106      	bne.n	800d392 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d384:	239c      	movs	r3, #156	; 0x9c
 800d386:	18fb      	adds	r3, r7, r3
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	2380      	movs	r3, #128	; 0x80
 800d38c:	055b      	lsls	r3, r3, #21
 800d38e:	4013      	ands	r3, r2
 800d390:	d008      	beq.n	800d3a4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d396:	2b00      	cmp	r3, #0
 800d398:	d004      	beq.n	800d3a4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	0010      	movs	r0, r2
 800d3a2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2290      	movs	r2, #144	; 0x90
 800d3a8:	589b      	ldr	r3, [r3, r2]
 800d3aa:	2194      	movs	r1, #148	; 0x94
 800d3ac:	187a      	adds	r2, r7, r1
 800d3ae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	2240      	movs	r2, #64	; 0x40
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	2b40      	cmp	r3, #64	; 0x40
 800d3bc:	d004      	beq.n	800d3c8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d3be:	187b      	adds	r3, r7, r1
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2228      	movs	r2, #40	; 0x28
 800d3c4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3c6:	d04c      	beq.n	800d462 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	0018      	movs	r0, r3
 800d3cc:	f000 fe84 	bl	800e0d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	2240      	movs	r2, #64	; 0x40
 800d3d8:	4013      	ands	r3, r2
 800d3da:	2b40      	cmp	r3, #64	; 0x40
 800d3dc:	d13c      	bne.n	800d458 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3de:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800d3e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3e6:	2090      	movs	r0, #144	; 0x90
 800d3e8:	183a      	adds	r2, r7, r0
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3f2:	f383 8810 	msr	PRIMASK, r3
}
 800d3f6:	46c0      	nop			; (mov r8, r8)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	689a      	ldr	r2, [r3, #8]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2140      	movs	r1, #64	; 0x40
 800d404:	438a      	bics	r2, r1
 800d406:	609a      	str	r2, [r3, #8]
 800d408:	183b      	adds	r3, r7, r0
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d40e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d410:	f383 8810 	msr	PRIMASK, r3
}
 800d414:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2280      	movs	r2, #128	; 0x80
 800d41a:	589b      	ldr	r3, [r3, r2]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d016      	beq.n	800d44e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2280      	movs	r2, #128	; 0x80
 800d424:	589b      	ldr	r3, [r3, r2]
 800d426:	4a17      	ldr	r2, [pc, #92]	; (800d484 <HAL_UART_IRQHandler+0x2c8>)
 800d428:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2280      	movs	r2, #128	; 0x80
 800d42e:	589b      	ldr	r3, [r3, r2]
 800d430:	0018      	movs	r0, r3
 800d432:	f7fc fbbd 	bl	8009bb0 <HAL_DMA_Abort_IT>
 800d436:	1e03      	subs	r3, r0, #0
 800d438:	d01c      	beq.n	800d474 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2280      	movs	r2, #128	; 0x80
 800d43e:	589b      	ldr	r3, [r3, r2]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	2180      	movs	r1, #128	; 0x80
 800d446:	5852      	ldr	r2, [r2, r1]
 800d448:	0010      	movs	r0, r2
 800d44a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d44c:	e012      	b.n	800d474 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	0018      	movs	r0, r3
 800d452:	f7f9 fd51 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d456:	e00d      	b.n	800d474 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	0018      	movs	r0, r3
 800d45c:	f7f9 fd4c 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d460:	e008      	b.n	800d474 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	0018      	movs	r0, r3
 800d466:	f7f9 fd47 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2290      	movs	r2, #144	; 0x90
 800d46e:	2100      	movs	r1, #0
 800d470:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800d472:	e1b9      	b.n	800d7e8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d474:	46c0      	nop			; (mov r8, r8)
    return;
 800d476:	e1b7      	b.n	800d7e8 <HAL_UART_IRQHandler+0x62c>
 800d478:	0000080f 	.word	0x0000080f
 800d47c:	10000001 	.word	0x10000001
 800d480:	04000120 	.word	0x04000120
 800d484:	0800e39d 	.word	0x0800e39d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d000      	beq.n	800d492 <HAL_UART_IRQHandler+0x2d6>
 800d490:	e13e      	b.n	800d710 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d492:	23a4      	movs	r3, #164	; 0xa4
 800d494:	18fb      	adds	r3, r7, r3
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2210      	movs	r2, #16
 800d49a:	4013      	ands	r3, r2
 800d49c:	d100      	bne.n	800d4a0 <HAL_UART_IRQHandler+0x2e4>
 800d49e:	e137      	b.n	800d710 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d4a0:	23a0      	movs	r3, #160	; 0xa0
 800d4a2:	18fb      	adds	r3, r7, r3
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2210      	movs	r2, #16
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	d100      	bne.n	800d4ae <HAL_UART_IRQHandler+0x2f2>
 800d4ac:	e130      	b.n	800d710 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2210      	movs	r2, #16
 800d4b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	2240      	movs	r2, #64	; 0x40
 800d4be:	4013      	ands	r3, r2
 800d4c0:	2b40      	cmp	r3, #64	; 0x40
 800d4c2:	d000      	beq.n	800d4c6 <HAL_UART_IRQHandler+0x30a>
 800d4c4:	e0a4      	b.n	800d610 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2280      	movs	r2, #128	; 0x80
 800d4ca:	589b      	ldr	r3, [r3, r2]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	217e      	movs	r1, #126	; 0x7e
 800d4d2:	187b      	adds	r3, r7, r1
 800d4d4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d4d6:	187b      	adds	r3, r7, r1
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d100      	bne.n	800d4e0 <HAL_UART_IRQHandler+0x324>
 800d4de:	e185      	b.n	800d7ec <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	225c      	movs	r2, #92	; 0x5c
 800d4e4:	5a9b      	ldrh	r3, [r3, r2]
 800d4e6:	187a      	adds	r2, r7, r1
 800d4e8:	8812      	ldrh	r2, [r2, #0]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d300      	bcc.n	800d4f0 <HAL_UART_IRQHandler+0x334>
 800d4ee:	e17d      	b.n	800d7ec <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	187a      	adds	r2, r7, r1
 800d4f4:	215e      	movs	r1, #94	; 0x5e
 800d4f6:	8812      	ldrh	r2, [r2, #0]
 800d4f8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2280      	movs	r2, #128	; 0x80
 800d4fe:	589b      	ldr	r3, [r3, r2]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2220      	movs	r2, #32
 800d506:	4013      	ands	r3, r2
 800d508:	d170      	bne.n	800d5ec <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d50a:	f3ef 8310 	mrs	r3, PRIMASK
 800d50e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800d510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d512:	67bb      	str	r3, [r7, #120]	; 0x78
 800d514:	2301      	movs	r3, #1
 800d516:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d51a:	f383 8810 	msr	PRIMASK, r3
}
 800d51e:	46c0      	nop			; (mov r8, r8)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	49b4      	ldr	r1, [pc, #720]	; (800d7fc <HAL_UART_IRQHandler+0x640>)
 800d52c:	400a      	ands	r2, r1
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d532:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	f383 8810 	msr	PRIMASK, r3
}
 800d53a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d53c:	f3ef 8310 	mrs	r3, PRIMASK
 800d540:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800d542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d544:	677b      	str	r3, [r7, #116]	; 0x74
 800d546:	2301      	movs	r3, #1
 800d548:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54c:	f383 8810 	msr	PRIMASK, r3
}
 800d550:	46c0      	nop			; (mov r8, r8)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	689a      	ldr	r2, [r3, #8]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2101      	movs	r1, #1
 800d55e:	438a      	bics	r2, r1
 800d560:	609a      	str	r2, [r3, #8]
 800d562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d564:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d568:	f383 8810 	msr	PRIMASK, r3
}
 800d56c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d56e:	f3ef 8310 	mrs	r3, PRIMASK
 800d572:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800d574:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d576:	673b      	str	r3, [r7, #112]	; 0x70
 800d578:	2301      	movs	r3, #1
 800d57a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d57e:	f383 8810 	msr	PRIMASK, r3
}
 800d582:	46c0      	nop			; (mov r8, r8)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689a      	ldr	r2, [r3, #8]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2140      	movs	r1, #64	; 0x40
 800d590:	438a      	bics	r2, r1
 800d592:	609a      	str	r2, [r3, #8]
 800d594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d596:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d59a:	f383 8810 	msr	PRIMASK, r3
}
 800d59e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	228c      	movs	r2, #140	; 0x8c
 800d5a4:	2120      	movs	r1, #32
 800d5a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d5b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800d5b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5be:	f383 8810 	msr	PRIMASK, r3
}
 800d5c2:	46c0      	nop			; (mov r8, r8)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2110      	movs	r1, #16
 800d5d0:	438a      	bics	r2, r1
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5da:	f383 8810 	msr	PRIMASK, r3
}
 800d5de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2280      	movs	r2, #128	; 0x80
 800d5e4:	589b      	ldr	r3, [r3, r2]
 800d5e6:	0018      	movs	r0, r3
 800d5e8:	f7fc fa80 	bl	8009aec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	225c      	movs	r2, #92	; 0x5c
 800d5f6:	5a9a      	ldrh	r2, [r3, r2]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	215e      	movs	r1, #94	; 0x5e
 800d5fc:	5a5b      	ldrh	r3, [r3, r1]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	b29a      	uxth	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	0011      	movs	r1, r2
 800d608:	0018      	movs	r0, r3
 800d60a:	f000 f905 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d60e:	e0ed      	b.n	800d7ec <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	225c      	movs	r2, #92	; 0x5c
 800d614:	5a99      	ldrh	r1, [r3, r2]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	225e      	movs	r2, #94	; 0x5e
 800d61a:	5a9b      	ldrh	r3, [r3, r2]
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	208e      	movs	r0, #142	; 0x8e
 800d620:	183b      	adds	r3, r7, r0
 800d622:	1a8a      	subs	r2, r1, r2
 800d624:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	225e      	movs	r2, #94	; 0x5e
 800d62a:	5a9b      	ldrh	r3, [r3, r2]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d100      	bne.n	800d634 <HAL_UART_IRQHandler+0x478>
 800d632:	e0dd      	b.n	800d7f0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d634:	183b      	adds	r3, r7, r0
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d100      	bne.n	800d63e <HAL_UART_IRQHandler+0x482>
 800d63c:	e0d8      	b.n	800d7f0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d63e:	f3ef 8310 	mrs	r3, PRIMASK
 800d642:	60fb      	str	r3, [r7, #12]
  return(result);
 800d644:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d646:	2488      	movs	r4, #136	; 0x88
 800d648:	193a      	adds	r2, r7, r4
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	2301      	movs	r3, #1
 800d64e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	f383 8810 	msr	PRIMASK, r3
}
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4967      	ldr	r1, [pc, #412]	; (800d800 <HAL_UART_IRQHandler+0x644>)
 800d664:	400a      	ands	r2, r1
 800d666:	601a      	str	r2, [r3, #0]
 800d668:	193b      	adds	r3, r7, r4
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f383 8810 	msr	PRIMASK, r3
}
 800d674:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d676:	f3ef 8310 	mrs	r3, PRIMASK
 800d67a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d67c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d67e:	2484      	movs	r4, #132	; 0x84
 800d680:	193a      	adds	r2, r7, r4
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	2301      	movs	r3, #1
 800d686:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	f383 8810 	msr	PRIMASK, r3
}
 800d68e:	46c0      	nop			; (mov r8, r8)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689a      	ldr	r2, [r3, #8]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	495a      	ldr	r1, [pc, #360]	; (800d804 <HAL_UART_IRQHandler+0x648>)
 800d69c:	400a      	ands	r2, r1
 800d69e:	609a      	str	r2, [r3, #8]
 800d6a0:	193b      	adds	r3, r7, r4
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	f383 8810 	msr	PRIMASK, r3
}
 800d6ac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	228c      	movs	r2, #140	; 0x8c
 800d6b2:	2120      	movs	r1, #32
 800d6b4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6ca:	2480      	movs	r4, #128	; 0x80
 800d6cc:	193a      	adds	r2, r7, r4
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	f383 8810 	msr	PRIMASK, r3
}
 800d6da:	46c0      	nop			; (mov r8, r8)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2110      	movs	r1, #16
 800d6e8:	438a      	bics	r2, r1
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	193b      	adds	r3, r7, r4
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f4:	f383 8810 	msr	PRIMASK, r3
}
 800d6f8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d700:	183b      	adds	r3, r7, r0
 800d702:	881a      	ldrh	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	0011      	movs	r1, r2
 800d708:	0018      	movs	r0, r3
 800d70a:	f000 f885 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d70e:	e06f      	b.n	800d7f0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d710:	23a4      	movs	r3, #164	; 0xa4
 800d712:	18fb      	adds	r3, r7, r3
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	2380      	movs	r3, #128	; 0x80
 800d718:	035b      	lsls	r3, r3, #13
 800d71a:	4013      	ands	r3, r2
 800d71c:	d010      	beq.n	800d740 <HAL_UART_IRQHandler+0x584>
 800d71e:	239c      	movs	r3, #156	; 0x9c
 800d720:	18fb      	adds	r3, r7, r3
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	2380      	movs	r3, #128	; 0x80
 800d726:	03db      	lsls	r3, r3, #15
 800d728:	4013      	ands	r3, r2
 800d72a:	d009      	beq.n	800d740 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2280      	movs	r2, #128	; 0x80
 800d732:	0352      	lsls	r2, r2, #13
 800d734:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	0018      	movs	r0, r3
 800d73a:	f000 fe72 	bl	800e422 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d73e:	e05a      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d740:	23a4      	movs	r3, #164	; 0xa4
 800d742:	18fb      	adds	r3, r7, r3
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2280      	movs	r2, #128	; 0x80
 800d748:	4013      	ands	r3, r2
 800d74a:	d016      	beq.n	800d77a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d74c:	23a0      	movs	r3, #160	; 0xa0
 800d74e:	18fb      	adds	r3, r7, r3
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2280      	movs	r2, #128	; 0x80
 800d754:	4013      	ands	r3, r2
 800d756:	d106      	bne.n	800d766 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d758:	239c      	movs	r3, #156	; 0x9c
 800d75a:	18fb      	adds	r3, r7, r3
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	2380      	movs	r3, #128	; 0x80
 800d760:	041b      	lsls	r3, r3, #16
 800d762:	4013      	ands	r3, r2
 800d764:	d009      	beq.n	800d77a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d042      	beq.n	800d7f4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	0010      	movs	r0, r2
 800d776:	4798      	blx	r3
    }
    return;
 800d778:	e03c      	b.n	800d7f4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d77a:	23a4      	movs	r3, #164	; 0xa4
 800d77c:	18fb      	adds	r3, r7, r3
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2240      	movs	r2, #64	; 0x40
 800d782:	4013      	ands	r3, r2
 800d784:	d00a      	beq.n	800d79c <HAL_UART_IRQHandler+0x5e0>
 800d786:	23a0      	movs	r3, #160	; 0xa0
 800d788:	18fb      	adds	r3, r7, r3
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2240      	movs	r2, #64	; 0x40
 800d78e:	4013      	ands	r3, r2
 800d790:	d004      	beq.n	800d79c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	0018      	movs	r0, r3
 800d796:	f000 fe18 	bl	800e3ca <UART_EndTransmit_IT>
    return;
 800d79a:	e02c      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d79c:	23a4      	movs	r3, #164	; 0xa4
 800d79e:	18fb      	adds	r3, r7, r3
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	2380      	movs	r3, #128	; 0x80
 800d7a4:	041b      	lsls	r3, r3, #16
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	d00b      	beq.n	800d7c2 <HAL_UART_IRQHandler+0x606>
 800d7aa:	23a0      	movs	r3, #160	; 0xa0
 800d7ac:	18fb      	adds	r3, r7, r3
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	2380      	movs	r3, #128	; 0x80
 800d7b2:	05db      	lsls	r3, r3, #23
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	d004      	beq.n	800d7c2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	0018      	movs	r0, r3
 800d7bc:	f000 fe41 	bl	800e442 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7c0:	e019      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d7c2:	23a4      	movs	r3, #164	; 0xa4
 800d7c4:	18fb      	adds	r3, r7, r3
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	2380      	movs	r3, #128	; 0x80
 800d7ca:	045b      	lsls	r3, r3, #17
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	d012      	beq.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
 800d7d0:	23a0      	movs	r3, #160	; 0xa0
 800d7d2:	18fb      	adds	r3, r7, r3
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	da0d      	bge.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	0018      	movs	r0, r3
 800d7de:	f000 fe28 	bl	800e432 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7e2:	e008      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
      return;
 800d7e4:	46c0      	nop			; (mov r8, r8)
 800d7e6:	e006      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
    return;
 800d7e8:	46c0      	nop			; (mov r8, r8)
 800d7ea:	e004      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
      return;
 800d7ec:	46c0      	nop			; (mov r8, r8)
 800d7ee:	e002      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
      return;
 800d7f0:	46c0      	nop			; (mov r8, r8)
 800d7f2:	e000      	b.n	800d7f6 <HAL_UART_IRQHandler+0x63a>
    return;
 800d7f4:	46c0      	nop			; (mov r8, r8)
  }
}
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	b02a      	add	sp, #168	; 0xa8
 800d7fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d7fc:	fffffeff 	.word	0xfffffeff
 800d800:	fffffedf 	.word	0xfffffedf
 800d804:	effffffe 	.word	0xeffffffe

0800d808 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d810:	46c0      	nop			; (mov r8, r8)
 800d812:	46bd      	mov	sp, r7
 800d814:	b002      	add	sp, #8
 800d816:	bd80      	pop	{r7, pc}

0800d818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	000a      	movs	r2, r1
 800d822:	1cbb      	adds	r3, r7, #2
 800d824:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d826:	46c0      	nop			; (mov r8, r8)
 800d828:	46bd      	mov	sp, r7
 800d82a:	b002      	add	sp, #8
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d838:	231a      	movs	r3, #26
 800d83a:	18fb      	adds	r3, r7, r3
 800d83c:	2200      	movs	r2, #0
 800d83e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	689a      	ldr	r2, [r3, #8]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	431a      	orrs	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	431a      	orrs	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	4313      	orrs	r3, r2
 800d856:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4abc      	ldr	r2, [pc, #752]	; (800db50 <UART_SetConfig+0x320>)
 800d860:	4013      	ands	r3, r2
 800d862:	0019      	movs	r1, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	69fa      	ldr	r2, [r7, #28]
 800d86a:	430a      	orrs	r2, r1
 800d86c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	4ab7      	ldr	r2, [pc, #732]	; (800db54 <UART_SetConfig+0x324>)
 800d876:	4013      	ands	r3, r2
 800d878:	0019      	movs	r1, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	430a      	orrs	r2, r1
 800d884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6a1b      	ldr	r3, [r3, #32]
 800d890:	69fa      	ldr	r2, [r7, #28]
 800d892:	4313      	orrs	r3, r2
 800d894:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	4aae      	ldr	r2, [pc, #696]	; (800db58 <UART_SetConfig+0x328>)
 800d89e:	4013      	ands	r3, r2
 800d8a0:	0019      	movs	r1, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	69fa      	ldr	r2, [r7, #28]
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	220f      	movs	r2, #15
 800d8b4:	4393      	bics	r3, r2
 800d8b6:	0019      	movs	r1, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4aa4      	ldr	r2, [pc, #656]	; (800db5c <UART_SetConfig+0x32c>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d127      	bne.n	800d91e <UART_SetConfig+0xee>
 800d8ce:	4ba4      	ldr	r3, [pc, #656]	; (800db60 <UART_SetConfig+0x330>)
 800d8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d2:	2203      	movs	r2, #3
 800d8d4:	4013      	ands	r3, r2
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d017      	beq.n	800d90a <UART_SetConfig+0xda>
 800d8da:	d81b      	bhi.n	800d914 <UART_SetConfig+0xe4>
 800d8dc:	2b02      	cmp	r3, #2
 800d8de:	d00a      	beq.n	800d8f6 <UART_SetConfig+0xc6>
 800d8e0:	d818      	bhi.n	800d914 <UART_SetConfig+0xe4>
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <UART_SetConfig+0xbc>
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d00a      	beq.n	800d900 <UART_SetConfig+0xd0>
 800d8ea:	e013      	b.n	800d914 <UART_SetConfig+0xe4>
 800d8ec:	231b      	movs	r3, #27
 800d8ee:	18fb      	adds	r3, r7, r3
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	701a      	strb	r2, [r3, #0]
 800d8f4:	e058      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d8f6:	231b      	movs	r3, #27
 800d8f8:	18fb      	adds	r3, r7, r3
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	e053      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d900:	231b      	movs	r3, #27
 800d902:	18fb      	adds	r3, r7, r3
 800d904:	2204      	movs	r2, #4
 800d906:	701a      	strb	r2, [r3, #0]
 800d908:	e04e      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d90a:	231b      	movs	r3, #27
 800d90c:	18fb      	adds	r3, r7, r3
 800d90e:	2208      	movs	r2, #8
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	e049      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d914:	231b      	movs	r3, #27
 800d916:	18fb      	adds	r3, r7, r3
 800d918:	2210      	movs	r2, #16
 800d91a:	701a      	strb	r2, [r3, #0]
 800d91c:	e044      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a90      	ldr	r2, [pc, #576]	; (800db64 <UART_SetConfig+0x334>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d127      	bne.n	800d978 <UART_SetConfig+0x148>
 800d928:	4b8d      	ldr	r3, [pc, #564]	; (800db60 <UART_SetConfig+0x330>)
 800d92a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d92c:	220c      	movs	r2, #12
 800d92e:	4013      	ands	r3, r2
 800d930:	2b0c      	cmp	r3, #12
 800d932:	d017      	beq.n	800d964 <UART_SetConfig+0x134>
 800d934:	d81b      	bhi.n	800d96e <UART_SetConfig+0x13e>
 800d936:	2b08      	cmp	r3, #8
 800d938:	d00a      	beq.n	800d950 <UART_SetConfig+0x120>
 800d93a:	d818      	bhi.n	800d96e <UART_SetConfig+0x13e>
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <UART_SetConfig+0x116>
 800d940:	2b04      	cmp	r3, #4
 800d942:	d00a      	beq.n	800d95a <UART_SetConfig+0x12a>
 800d944:	e013      	b.n	800d96e <UART_SetConfig+0x13e>
 800d946:	231b      	movs	r3, #27
 800d948:	18fb      	adds	r3, r7, r3
 800d94a:	2200      	movs	r2, #0
 800d94c:	701a      	strb	r2, [r3, #0]
 800d94e:	e02b      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d950:	231b      	movs	r3, #27
 800d952:	18fb      	adds	r3, r7, r3
 800d954:	2202      	movs	r2, #2
 800d956:	701a      	strb	r2, [r3, #0]
 800d958:	e026      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d95a:	231b      	movs	r3, #27
 800d95c:	18fb      	adds	r3, r7, r3
 800d95e:	2204      	movs	r2, #4
 800d960:	701a      	strb	r2, [r3, #0]
 800d962:	e021      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d964:	231b      	movs	r3, #27
 800d966:	18fb      	adds	r3, r7, r3
 800d968:	2208      	movs	r2, #8
 800d96a:	701a      	strb	r2, [r3, #0]
 800d96c:	e01c      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d96e:	231b      	movs	r3, #27
 800d970:	18fb      	adds	r3, r7, r3
 800d972:	2210      	movs	r2, #16
 800d974:	701a      	strb	r2, [r3, #0]
 800d976:	e017      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a7a      	ldr	r2, [pc, #488]	; (800db68 <UART_SetConfig+0x338>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d104      	bne.n	800d98c <UART_SetConfig+0x15c>
 800d982:	231b      	movs	r3, #27
 800d984:	18fb      	adds	r3, r7, r3
 800d986:	2200      	movs	r2, #0
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	e00d      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a76      	ldr	r2, [pc, #472]	; (800db6c <UART_SetConfig+0x33c>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d104      	bne.n	800d9a0 <UART_SetConfig+0x170>
 800d996:	231b      	movs	r3, #27
 800d998:	18fb      	adds	r3, r7, r3
 800d99a:	2200      	movs	r2, #0
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	e003      	b.n	800d9a8 <UART_SetConfig+0x178>
 800d9a0:	231b      	movs	r3, #27
 800d9a2:	18fb      	adds	r3, r7, r3
 800d9a4:	2210      	movs	r2, #16
 800d9a6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	69da      	ldr	r2, [r3, #28]
 800d9ac:	2380      	movs	r3, #128	; 0x80
 800d9ae:	021b      	lsls	r3, r3, #8
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d000      	beq.n	800d9b6 <UART_SetConfig+0x186>
 800d9b4:	e065      	b.n	800da82 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800d9b6:	231b      	movs	r3, #27
 800d9b8:	18fb      	adds	r3, r7, r3
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b08      	cmp	r3, #8
 800d9be:	d015      	beq.n	800d9ec <UART_SetConfig+0x1bc>
 800d9c0:	dc18      	bgt.n	800d9f4 <UART_SetConfig+0x1c4>
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d00d      	beq.n	800d9e2 <UART_SetConfig+0x1b2>
 800d9c6:	dc15      	bgt.n	800d9f4 <UART_SetConfig+0x1c4>
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <UART_SetConfig+0x1a2>
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d005      	beq.n	800d9dc <UART_SetConfig+0x1ac>
 800d9d0:	e010      	b.n	800d9f4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9d2:	f7fe f805 	bl	800b9e0 <HAL_RCC_GetPCLK1Freq>
 800d9d6:	0003      	movs	r3, r0
 800d9d8:	617b      	str	r3, [r7, #20]
        break;
 800d9da:	e012      	b.n	800da02 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9dc:	4b64      	ldr	r3, [pc, #400]	; (800db70 <UART_SetConfig+0x340>)
 800d9de:	617b      	str	r3, [r7, #20]
        break;
 800d9e0:	e00f      	b.n	800da02 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9e2:	f7fd ff71 	bl	800b8c8 <HAL_RCC_GetSysClockFreq>
 800d9e6:	0003      	movs	r3, r0
 800d9e8:	617b      	str	r3, [r7, #20]
        break;
 800d9ea:	e00a      	b.n	800da02 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9ec:	2380      	movs	r3, #128	; 0x80
 800d9ee:	021b      	lsls	r3, r3, #8
 800d9f0:	617b      	str	r3, [r7, #20]
        break;
 800d9f2:	e006      	b.n	800da02 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d9f8:	231a      	movs	r3, #26
 800d9fa:	18fb      	adds	r3, r7, r3
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	701a      	strb	r2, [r3, #0]
        break;
 800da00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d100      	bne.n	800da0a <UART_SetConfig+0x1da>
 800da08:	e08d      	b.n	800db26 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da0e:	4b59      	ldr	r3, [pc, #356]	; (800db74 <UART_SetConfig+0x344>)
 800da10:	0052      	lsls	r2, r2, #1
 800da12:	5ad3      	ldrh	r3, [r2, r3]
 800da14:	0019      	movs	r1, r3
 800da16:	6978      	ldr	r0, [r7, #20]
 800da18:	f7f2 fb92 	bl	8000140 <__udivsi3>
 800da1c:	0003      	movs	r3, r0
 800da1e:	005a      	lsls	r2, r3, #1
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	085b      	lsrs	r3, r3, #1
 800da26:	18d2      	adds	r2, r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	0019      	movs	r1, r3
 800da2e:	0010      	movs	r0, r2
 800da30:	f7f2 fb86 	bl	8000140 <__udivsi3>
 800da34:	0003      	movs	r3, r0
 800da36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2b0f      	cmp	r3, #15
 800da3c:	d91c      	bls.n	800da78 <UART_SetConfig+0x248>
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	2380      	movs	r3, #128	; 0x80
 800da42:	025b      	lsls	r3, r3, #9
 800da44:	429a      	cmp	r2, r3
 800da46:	d217      	bcs.n	800da78 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	200e      	movs	r0, #14
 800da4e:	183b      	adds	r3, r7, r0
 800da50:	210f      	movs	r1, #15
 800da52:	438a      	bics	r2, r1
 800da54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	085b      	lsrs	r3, r3, #1
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	2207      	movs	r2, #7
 800da5e:	4013      	ands	r3, r2
 800da60:	b299      	uxth	r1, r3
 800da62:	183b      	adds	r3, r7, r0
 800da64:	183a      	adds	r2, r7, r0
 800da66:	8812      	ldrh	r2, [r2, #0]
 800da68:	430a      	orrs	r2, r1
 800da6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	183a      	adds	r2, r7, r0
 800da72:	8812      	ldrh	r2, [r2, #0]
 800da74:	60da      	str	r2, [r3, #12]
 800da76:	e056      	b.n	800db26 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800da78:	231a      	movs	r3, #26
 800da7a:	18fb      	adds	r3, r7, r3
 800da7c:	2201      	movs	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
 800da80:	e051      	b.n	800db26 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da82:	231b      	movs	r3, #27
 800da84:	18fb      	adds	r3, r7, r3
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	2b08      	cmp	r3, #8
 800da8a:	d015      	beq.n	800dab8 <UART_SetConfig+0x288>
 800da8c:	dc18      	bgt.n	800dac0 <UART_SetConfig+0x290>
 800da8e:	2b04      	cmp	r3, #4
 800da90:	d00d      	beq.n	800daae <UART_SetConfig+0x27e>
 800da92:	dc15      	bgt.n	800dac0 <UART_SetConfig+0x290>
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <UART_SetConfig+0x26e>
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d005      	beq.n	800daa8 <UART_SetConfig+0x278>
 800da9c:	e010      	b.n	800dac0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da9e:	f7fd ff9f 	bl	800b9e0 <HAL_RCC_GetPCLK1Freq>
 800daa2:	0003      	movs	r3, r0
 800daa4:	617b      	str	r3, [r7, #20]
        break;
 800daa6:	e012      	b.n	800dace <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800daa8:	4b31      	ldr	r3, [pc, #196]	; (800db70 <UART_SetConfig+0x340>)
 800daaa:	617b      	str	r3, [r7, #20]
        break;
 800daac:	e00f      	b.n	800dace <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800daae:	f7fd ff0b 	bl	800b8c8 <HAL_RCC_GetSysClockFreq>
 800dab2:	0003      	movs	r3, r0
 800dab4:	617b      	str	r3, [r7, #20]
        break;
 800dab6:	e00a      	b.n	800dace <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dab8:	2380      	movs	r3, #128	; 0x80
 800daba:	021b      	lsls	r3, r3, #8
 800dabc:	617b      	str	r3, [r7, #20]
        break;
 800dabe:	e006      	b.n	800dace <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800dac0:	2300      	movs	r3, #0
 800dac2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800dac4:	231a      	movs	r3, #26
 800dac6:	18fb      	adds	r3, r7, r3
 800dac8:	2201      	movs	r2, #1
 800daca:	701a      	strb	r2, [r3, #0]
        break;
 800dacc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d028      	beq.n	800db26 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dad8:	4b26      	ldr	r3, [pc, #152]	; (800db74 <UART_SetConfig+0x344>)
 800dada:	0052      	lsls	r2, r2, #1
 800dadc:	5ad3      	ldrh	r3, [r2, r3]
 800dade:	0019      	movs	r1, r3
 800dae0:	6978      	ldr	r0, [r7, #20]
 800dae2:	f7f2 fb2d 	bl	8000140 <__udivsi3>
 800dae6:	0003      	movs	r3, r0
 800dae8:	001a      	movs	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	085b      	lsrs	r3, r3, #1
 800daf0:	18d2      	adds	r2, r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	0019      	movs	r1, r3
 800daf8:	0010      	movs	r0, r2
 800dafa:	f7f2 fb21 	bl	8000140 <__udivsi3>
 800dafe:	0003      	movs	r3, r0
 800db00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2b0f      	cmp	r3, #15
 800db06:	d90a      	bls.n	800db1e <UART_SetConfig+0x2ee>
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	2380      	movs	r3, #128	; 0x80
 800db0c:	025b      	lsls	r3, r3, #9
 800db0e:	429a      	cmp	r2, r3
 800db10:	d205      	bcs.n	800db1e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	60da      	str	r2, [r3, #12]
 800db1c:	e003      	b.n	800db26 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800db1e:	231a      	movs	r3, #26
 800db20:	18fb      	adds	r3, r7, r3
 800db22:	2201      	movs	r2, #1
 800db24:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	226a      	movs	r2, #106	; 0x6a
 800db2a:	2101      	movs	r1, #1
 800db2c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2268      	movs	r2, #104	; 0x68
 800db32:	2101      	movs	r1, #1
 800db34:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800db42:	231a      	movs	r3, #26
 800db44:	18fb      	adds	r3, r7, r3
 800db46:	781b      	ldrb	r3, [r3, #0]
}
 800db48:	0018      	movs	r0, r3
 800db4a:	46bd      	mov	sp, r7
 800db4c:	b008      	add	sp, #32
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	cfff69f3 	.word	0xcfff69f3
 800db54:	ffffcfff 	.word	0xffffcfff
 800db58:	11fff4ff 	.word	0x11fff4ff
 800db5c:	40013800 	.word	0x40013800
 800db60:	40021000 	.word	0x40021000
 800db64:	40004400 	.word	0x40004400
 800db68:	40004800 	.word	0x40004800
 800db6c:	40004c00 	.word	0x40004c00
 800db70:	00f42400 	.word	0x00f42400
 800db74:	08017ff8 	.word	0x08017ff8

0800db78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db84:	2201      	movs	r2, #1
 800db86:	4013      	ands	r3, r2
 800db88:	d00b      	beq.n	800dba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	4a4a      	ldr	r2, [pc, #296]	; (800dcbc <UART_AdvFeatureConfig+0x144>)
 800db92:	4013      	ands	r3, r2
 800db94:	0019      	movs	r1, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	430a      	orrs	r2, r1
 800dba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba6:	2202      	movs	r2, #2
 800dba8:	4013      	ands	r3, r2
 800dbaa:	d00b      	beq.n	800dbc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	4a43      	ldr	r2, [pc, #268]	; (800dcc0 <UART_AdvFeatureConfig+0x148>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	0019      	movs	r1, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	430a      	orrs	r2, r1
 800dbc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc8:	2204      	movs	r2, #4
 800dbca:	4013      	ands	r3, r2
 800dbcc:	d00b      	beq.n	800dbe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	4a3b      	ldr	r2, [pc, #236]	; (800dcc4 <UART_AdvFeatureConfig+0x14c>)
 800dbd6:	4013      	ands	r3, r2
 800dbd8:	0019      	movs	r1, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	430a      	orrs	r2, r1
 800dbe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbea:	2208      	movs	r2, #8
 800dbec:	4013      	ands	r3, r2
 800dbee:	d00b      	beq.n	800dc08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	4a34      	ldr	r2, [pc, #208]	; (800dcc8 <UART_AdvFeatureConfig+0x150>)
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	0019      	movs	r1, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	430a      	orrs	r2, r1
 800dc06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0c:	2210      	movs	r2, #16
 800dc0e:	4013      	ands	r3, r2
 800dc10:	d00b      	beq.n	800dc2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	4a2c      	ldr	r2, [pc, #176]	; (800dccc <UART_AdvFeatureConfig+0x154>)
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	0019      	movs	r1, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	430a      	orrs	r2, r1
 800dc28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	2220      	movs	r2, #32
 800dc30:	4013      	ands	r3, r2
 800dc32:	d00b      	beq.n	800dc4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	4a25      	ldr	r2, [pc, #148]	; (800dcd0 <UART_AdvFeatureConfig+0x158>)
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	0019      	movs	r1, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc50:	2240      	movs	r2, #64	; 0x40
 800dc52:	4013      	ands	r3, r2
 800dc54:	d01d      	beq.n	800dc92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	4a1d      	ldr	r2, [pc, #116]	; (800dcd4 <UART_AdvFeatureConfig+0x15c>)
 800dc5e:	4013      	ands	r3, r2
 800dc60:	0019      	movs	r1, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc72:	2380      	movs	r3, #128	; 0x80
 800dc74:	035b      	lsls	r3, r3, #13
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d10b      	bne.n	800dc92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	4a15      	ldr	r2, [pc, #84]	; (800dcd8 <UART_AdvFeatureConfig+0x160>)
 800dc82:	4013      	ands	r3, r2
 800dc84:	0019      	movs	r1, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc96:	2280      	movs	r2, #128	; 0x80
 800dc98:	4013      	ands	r3, r2
 800dc9a:	d00b      	beq.n	800dcb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	4a0e      	ldr	r2, [pc, #56]	; (800dcdc <UART_AdvFeatureConfig+0x164>)
 800dca4:	4013      	ands	r3, r2
 800dca6:	0019      	movs	r1, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	430a      	orrs	r2, r1
 800dcb2:	605a      	str	r2, [r3, #4]
  }
}
 800dcb4:	46c0      	nop			; (mov r8, r8)
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	b002      	add	sp, #8
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	fffdffff 	.word	0xfffdffff
 800dcc0:	fffeffff 	.word	0xfffeffff
 800dcc4:	fffbffff 	.word	0xfffbffff
 800dcc8:	ffff7fff 	.word	0xffff7fff
 800dccc:	ffffefff 	.word	0xffffefff
 800dcd0:	ffffdfff 	.word	0xffffdfff
 800dcd4:	ffefffff 	.word	0xffefffff
 800dcd8:	ff9fffff 	.word	0xff9fffff
 800dcdc:	fff7ffff 	.word	0xfff7ffff

0800dce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af02      	add	r7, sp, #8
 800dce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2290      	movs	r2, #144	; 0x90
 800dcec:	2100      	movs	r1, #0
 800dcee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dcf0:	f7fa fe78 	bl	80089e4 <HAL_GetTick>
 800dcf4:	0003      	movs	r3, r0
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2208      	movs	r2, #8
 800dd00:	4013      	ands	r3, r2
 800dd02:	2b08      	cmp	r3, #8
 800dd04:	d10c      	bne.n	800dd20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2280      	movs	r2, #128	; 0x80
 800dd0a:	0391      	lsls	r1, r2, #14
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	4a1a      	ldr	r2, [pc, #104]	; (800dd78 <UART_CheckIdleState+0x98>)
 800dd10:	9200      	str	r2, [sp, #0]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f000 f832 	bl	800dd7c <UART_WaitOnFlagUntilTimeout>
 800dd18:	1e03      	subs	r3, r0, #0
 800dd1a:	d001      	beq.n	800dd20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd1c:	2303      	movs	r3, #3
 800dd1e:	e026      	b.n	800dd6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2204      	movs	r2, #4
 800dd28:	4013      	ands	r3, r2
 800dd2a:	2b04      	cmp	r3, #4
 800dd2c:	d10c      	bne.n	800dd48 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2280      	movs	r2, #128	; 0x80
 800dd32:	03d1      	lsls	r1, r2, #15
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	4a10      	ldr	r2, [pc, #64]	; (800dd78 <UART_CheckIdleState+0x98>)
 800dd38:	9200      	str	r2, [sp, #0]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f000 f81e 	bl	800dd7c <UART_WaitOnFlagUntilTimeout>
 800dd40:	1e03      	subs	r3, r0, #0
 800dd42:	d001      	beq.n	800dd48 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd44:	2303      	movs	r3, #3
 800dd46:	e012      	b.n	800dd6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2288      	movs	r2, #136	; 0x88
 800dd4c:	2120      	movs	r1, #32
 800dd4e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	228c      	movs	r2, #140	; 0x8c
 800dd54:	2120      	movs	r1, #32
 800dd56:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2284      	movs	r2, #132	; 0x84
 800dd68:	2100      	movs	r1, #0
 800dd6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	0018      	movs	r0, r3
 800dd70:	46bd      	mov	sp, r7
 800dd72:	b004      	add	sp, #16
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	46c0      	nop			; (mov r8, r8)
 800dd78:	01ffffff 	.word	0x01ffffff

0800dd7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b094      	sub	sp, #80	; 0x50
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	603b      	str	r3, [r7, #0]
 800dd88:	1dfb      	adds	r3, r7, #7
 800dd8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd8c:	e0a7      	b.n	800dede <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd90:	3301      	adds	r3, #1
 800dd92:	d100      	bne.n	800dd96 <UART_WaitOnFlagUntilTimeout+0x1a>
 800dd94:	e0a3      	b.n	800dede <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd96:	f7fa fe25 	bl	80089e4 <HAL_GetTick>
 800dd9a:	0002      	movs	r2, r0
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d302      	bcc.n	800ddac <UART_WaitOnFlagUntilTimeout+0x30>
 800dda6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d13f      	bne.n	800de2c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddac:	f3ef 8310 	mrs	r3, PRIMASK
 800ddb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ddb4:	647b      	str	r3, [r7, #68]	; 0x44
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbc:	f383 8810 	msr	PRIMASK, r3
}
 800ddc0:	46c0      	nop			; (mov r8, r8)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	494e      	ldr	r1, [pc, #312]	; (800df08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800ddce:	400a      	ands	r2, r1
 800ddd0:	601a      	str	r2, [r3, #0]
 800ddd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddd4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	f383 8810 	msr	PRIMASK, r3
}
 800dddc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddde:	f3ef 8310 	mrs	r3, PRIMASK
 800dde2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800dde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde6:	643b      	str	r3, [r7, #64]	; 0x40
 800dde8:	2301      	movs	r3, #1
 800ddea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddee:	f383 8810 	msr	PRIMASK, r3
}
 800ddf2:	46c0      	nop			; (mov r8, r8)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	689a      	ldr	r2, [r3, #8]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2101      	movs	r1, #1
 800de00:	438a      	bics	r2, r1
 800de02:	609a      	str	r2, [r3, #8]
 800de04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0a:	f383 8810 	msr	PRIMASK, r3
}
 800de0e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2288      	movs	r2, #136	; 0x88
 800de14:	2120      	movs	r1, #32
 800de16:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	228c      	movs	r2, #140	; 0x8c
 800de1c:	2120      	movs	r1, #32
 800de1e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2284      	movs	r2, #132	; 0x84
 800de24:	2100      	movs	r1, #0
 800de26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800de28:	2303      	movs	r3, #3
 800de2a:	e069      	b.n	800df00 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2204      	movs	r2, #4
 800de34:	4013      	ands	r3, r2
 800de36:	d052      	beq.n	800dede <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	69da      	ldr	r2, [r3, #28]
 800de3e:	2380      	movs	r3, #128	; 0x80
 800de40:	011b      	lsls	r3, r3, #4
 800de42:	401a      	ands	r2, r3
 800de44:	2380      	movs	r3, #128	; 0x80
 800de46:	011b      	lsls	r3, r3, #4
 800de48:	429a      	cmp	r2, r3
 800de4a:	d148      	bne.n	800dede <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2280      	movs	r2, #128	; 0x80
 800de52:	0112      	lsls	r2, r2, #4
 800de54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de56:	f3ef 8310 	mrs	r3, PRIMASK
 800de5a:	613b      	str	r3, [r7, #16]
  return(result);
 800de5c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de60:	2301      	movs	r3, #1
 800de62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	f383 8810 	msr	PRIMASK, r3
}
 800de6a:	46c0      	nop			; (mov r8, r8)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4924      	ldr	r1, [pc, #144]	; (800df08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800de78:	400a      	ands	r2, r1
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	f383 8810 	msr	PRIMASK, r3
}
 800de86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de88:	f3ef 8310 	mrs	r3, PRIMASK
 800de8c:	61fb      	str	r3, [r7, #28]
  return(result);
 800de8e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de90:	64bb      	str	r3, [r7, #72]	; 0x48
 800de92:	2301      	movs	r3, #1
 800de94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	f383 8810 	msr	PRIMASK, r3
}
 800de9c:	46c0      	nop			; (mov r8, r8)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	689a      	ldr	r2, [r3, #8]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2101      	movs	r1, #1
 800deaa:	438a      	bics	r2, r1
 800deac:	609a      	str	r2, [r3, #8]
 800deae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deb0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb4:	f383 8810 	msr	PRIMASK, r3
}
 800deb8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2288      	movs	r2, #136	; 0x88
 800debe:	2120      	movs	r1, #32
 800dec0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	228c      	movs	r2, #140	; 0x8c
 800dec6:	2120      	movs	r1, #32
 800dec8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2290      	movs	r2, #144	; 0x90
 800dece:	2120      	movs	r1, #32
 800ded0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2284      	movs	r2, #132	; 0x84
 800ded6:	2100      	movs	r1, #0
 800ded8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800deda:	2303      	movs	r3, #3
 800dedc:	e010      	b.n	800df00 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	69db      	ldr	r3, [r3, #28]
 800dee4:	68ba      	ldr	r2, [r7, #8]
 800dee6:	4013      	ands	r3, r2
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	425a      	negs	r2, r3
 800deee:	4153      	adcs	r3, r2
 800def0:	b2db      	uxtb	r3, r3
 800def2:	001a      	movs	r2, r3
 800def4:	1dfb      	adds	r3, r7, #7
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	429a      	cmp	r2, r3
 800defa:	d100      	bne.n	800defe <UART_WaitOnFlagUntilTimeout+0x182>
 800defc:	e747      	b.n	800dd8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	0018      	movs	r0, r3
 800df02:	46bd      	mov	sp, r7
 800df04:	b014      	add	sp, #80	; 0x50
 800df06:	bd80      	pop	{r7, pc}
 800df08:	fffffe5f 	.word	0xfffffe5f

0800df0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b090      	sub	sp, #64	; 0x40
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	1dbb      	adds	r3, r7, #6
 800df18:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	1dba      	adds	r2, r7, #6
 800df24:	215c      	movs	r1, #92	; 0x5c
 800df26:	8812      	ldrh	r2, [r2, #0]
 800df28:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2290      	movs	r2, #144	; 0x90
 800df2e:	2100      	movs	r1, #0
 800df30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	228c      	movs	r2, #140	; 0x8c
 800df36:	2122      	movs	r1, #34	; 0x22
 800df38:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2280      	movs	r2, #128	; 0x80
 800df3e:	589b      	ldr	r3, [r3, r2]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d02d      	beq.n	800dfa0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2280      	movs	r2, #128	; 0x80
 800df48:	589b      	ldr	r3, [r3, r2]
 800df4a:	4a40      	ldr	r2, [pc, #256]	; (800e04c <UART_Start_Receive_DMA+0x140>)
 800df4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2280      	movs	r2, #128	; 0x80
 800df52:	589b      	ldr	r3, [r3, r2]
 800df54:	4a3e      	ldr	r2, [pc, #248]	; (800e050 <UART_Start_Receive_DMA+0x144>)
 800df56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2280      	movs	r2, #128	; 0x80
 800df5c:	589b      	ldr	r3, [r3, r2]
 800df5e:	4a3d      	ldr	r2, [pc, #244]	; (800e054 <UART_Start_Receive_DMA+0x148>)
 800df60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2280      	movs	r2, #128	; 0x80
 800df66:	589b      	ldr	r3, [r3, r2]
 800df68:	2200      	movs	r2, #0
 800df6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2280      	movs	r2, #128	; 0x80
 800df70:	5898      	ldr	r0, [r3, r2]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3324      	adds	r3, #36	; 0x24
 800df78:	0019      	movs	r1, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df7e:	001a      	movs	r2, r3
 800df80:	1dbb      	adds	r3, r7, #6
 800df82:	881b      	ldrh	r3, [r3, #0]
 800df84:	f7fb fd2c 	bl	80099e0 <HAL_DMA_Start_IT>
 800df88:	1e03      	subs	r3, r0, #0
 800df8a:	d009      	beq.n	800dfa0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2290      	movs	r2, #144	; 0x90
 800df90:	2110      	movs	r1, #16
 800df92:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	228c      	movs	r2, #140	; 0x8c
 800df98:	2120      	movs	r1, #32
 800df9a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800df9c:	2301      	movs	r3, #1
 800df9e:	e050      	b.n	800e042 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d019      	beq.n	800dfdc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfa8:	f3ef 8310 	mrs	r3, PRIMASK
 800dfac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	f383 8810 	msr	PRIMASK, r3
}
 800dfbc:	46c0      	nop			; (mov r8, r8)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2180      	movs	r1, #128	; 0x80
 800dfca:	0049      	lsls	r1, r1, #1
 800dfcc:	430a      	orrs	r2, r1
 800dfce:	601a      	str	r2, [r3, #0]
 800dfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	f383 8810 	msr	PRIMASK, r3
}
 800dfda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfdc:	f3ef 8310 	mrs	r3, PRIMASK
 800dfe0:	613b      	str	r3, [r7, #16]
  return(result);
 800dfe2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f383 8810 	msr	PRIMASK, r3
}
 800dff0:	46c0      	nop			; (mov r8, r8)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	689a      	ldr	r2, [r3, #8]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2101      	movs	r1, #1
 800dffe:	430a      	orrs	r2, r1
 800e000:	609a      	str	r2, [r3, #8]
 800e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e004:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	f383 8810 	msr	PRIMASK, r3
}
 800e00c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e00e:	f3ef 8310 	mrs	r3, PRIMASK
 800e012:	61fb      	str	r3, [r7, #28]
  return(result);
 800e014:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e016:	637b      	str	r3, [r7, #52]	; 0x34
 800e018:	2301      	movs	r3, #1
 800e01a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	f383 8810 	msr	PRIMASK, r3
}
 800e022:	46c0      	nop			; (mov r8, r8)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	689a      	ldr	r2, [r3, #8]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2140      	movs	r1, #64	; 0x40
 800e030:	430a      	orrs	r2, r1
 800e032:	609a      	str	r2, [r3, #8]
 800e034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	f383 8810 	msr	PRIMASK, r3
}
 800e03e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	0018      	movs	r0, r3
 800e044:	46bd      	mov	sp, r7
 800e046:	b010      	add	sp, #64	; 0x40
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	46c0      	nop			; (mov r8, r8)
 800e04c:	0800e1a5 	.word	0x0800e1a5
 800e050:	0800e2d5 	.word	0x0800e2d5
 800e054:	0800e317 	.word	0x0800e317

0800e058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08a      	sub	sp, #40	; 0x28
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e060:	f3ef 8310 	mrs	r3, PRIMASK
 800e064:	60bb      	str	r3, [r7, #8]
  return(result);
 800e066:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e068:	627b      	str	r3, [r7, #36]	; 0x24
 800e06a:	2301      	movs	r3, #1
 800e06c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f383 8810 	msr	PRIMASK, r3
}
 800e074:	46c0      	nop			; (mov r8, r8)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	21c0      	movs	r1, #192	; 0xc0
 800e082:	438a      	bics	r2, r1
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	f383 8810 	msr	PRIMASK, r3
}
 800e090:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e092:	f3ef 8310 	mrs	r3, PRIMASK
 800e096:	617b      	str	r3, [r7, #20]
  return(result);
 800e098:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e09a:	623b      	str	r3, [r7, #32]
 800e09c:	2301      	movs	r3, #1
 800e09e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	f383 8810 	msr	PRIMASK, r3
}
 800e0a6:	46c0      	nop			; (mov r8, r8)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	689a      	ldr	r2, [r3, #8]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4908      	ldr	r1, [pc, #32]	; (800e0d4 <UART_EndTxTransfer+0x7c>)
 800e0b4:	400a      	ands	r2, r1
 800e0b6:	609a      	str	r2, [r3, #8]
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	f383 8810 	msr	PRIMASK, r3
}
 800e0c2:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2288      	movs	r2, #136	; 0x88
 800e0c8:	2120      	movs	r1, #32
 800e0ca:	5099      	str	r1, [r3, r2]
}
 800e0cc:	46c0      	nop			; (mov r8, r8)
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	b00a      	add	sp, #40	; 0x28
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	ff7fffff 	.word	0xff7fffff

0800e0d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08e      	sub	sp, #56	; 0x38
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e0e4:	617b      	str	r3, [r7, #20]
  return(result);
 800e0e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	f383 8810 	msr	PRIMASK, r3
}
 800e0f4:	46c0      	nop			; (mov r8, r8)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4926      	ldr	r1, [pc, #152]	; (800e19c <UART_EndRxTransfer+0xc4>)
 800e102:	400a      	ands	r2, r1
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	f383 8810 	msr	PRIMASK, r3
}
 800e110:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e112:	f3ef 8310 	mrs	r3, PRIMASK
 800e116:	623b      	str	r3, [r7, #32]
  return(result);
 800e118:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e11a:	633b      	str	r3, [r7, #48]	; 0x30
 800e11c:	2301      	movs	r3, #1
 800e11e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	f383 8810 	msr	PRIMASK, r3
}
 800e126:	46c0      	nop			; (mov r8, r8)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	689a      	ldr	r2, [r3, #8]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	491b      	ldr	r1, [pc, #108]	; (800e1a0 <UART_EndRxTransfer+0xc8>)
 800e134:	400a      	ands	r2, r1
 800e136:	609a      	str	r2, [r3, #8]
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	f383 8810 	msr	PRIMASK, r3
}
 800e142:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d118      	bne.n	800e17e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e14c:	f3ef 8310 	mrs	r3, PRIMASK
 800e150:	60bb      	str	r3, [r7, #8]
  return(result);
 800e152:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e156:	2301      	movs	r3, #1
 800e158:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f383 8810 	msr	PRIMASK, r3
}
 800e160:	46c0      	nop			; (mov r8, r8)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2110      	movs	r1, #16
 800e16e:	438a      	bics	r2, r1
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f383 8810 	msr	PRIMASK, r3
}
 800e17c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	228c      	movs	r2, #140	; 0x8c
 800e182:	2120      	movs	r1, #32
 800e184:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e192:	46c0      	nop			; (mov r8, r8)
 800e194:	46bd      	mov	sp, r7
 800e196:	b00e      	add	sp, #56	; 0x38
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	46c0      	nop			; (mov r8, r8)
 800e19c:	fffffedf 	.word	0xfffffedf
 800e1a0:	effffffe 	.word	0xeffffffe

0800e1a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b094      	sub	sp, #80	; 0x50
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	d16f      	bne.n	800e29e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800e1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c0:	225e      	movs	r2, #94	; 0x5e
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e1ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800e1cc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	f383 8810 	msr	PRIMASK, r3
}
 800e1da:	46c0      	nop			; (mov r8, r8)
 800e1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	493a      	ldr	r1, [pc, #232]	; (800e2d0 <UART_DMAReceiveCplt+0x12c>)
 800e1e8:	400a      	ands	r2, r1
 800e1ea:	601a      	str	r2, [r3, #0]
 800e1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	f383 8810 	msr	PRIMASK, r3
}
 800e1f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e200:	647b      	str	r3, [r7, #68]	; 0x44
 800e202:	2301      	movs	r3, #1
 800e204:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	f383 8810 	msr	PRIMASK, r3
}
 800e20c:	46c0      	nop			; (mov r8, r8)
 800e20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2101      	movs	r1, #1
 800e21a:	438a      	bics	r2, r1
 800e21c:	609a      	str	r2, [r3, #8]
 800e21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e220:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	f383 8810 	msr	PRIMASK, r3
}
 800e228:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e22a:	f3ef 8310 	mrs	r3, PRIMASK
 800e22e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e232:	643b      	str	r3, [r7, #64]	; 0x40
 800e234:	2301      	movs	r3, #1
 800e236:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23a:	f383 8810 	msr	PRIMASK, r3
}
 800e23e:	46c0      	nop			; (mov r8, r8)
 800e240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689a      	ldr	r2, [r3, #8]
 800e246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2140      	movs	r1, #64	; 0x40
 800e24c:	438a      	bics	r2, r1
 800e24e:	609a      	str	r2, [r3, #8]
 800e250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e252:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	f383 8810 	msr	PRIMASK, r3
}
 800e25a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e25e:	228c      	movs	r2, #140	; 0x8c
 800e260:	2120      	movs	r1, #32
 800e262:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d118      	bne.n	800e29e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e26c:	f3ef 8310 	mrs	r3, PRIMASK
 800e270:	60fb      	str	r3, [r7, #12]
  return(result);
 800e272:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e274:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e276:	2301      	movs	r3, #1
 800e278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	f383 8810 	msr	PRIMASK, r3
}
 800e280:	46c0      	nop			; (mov r8, r8)
 800e282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2110      	movs	r1, #16
 800e28e:	438a      	bics	r2, r1
 800e290:	601a      	str	r2, [r3, #0]
 800e292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	f383 8810 	msr	PRIMASK, r3
}
 800e29c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d108      	bne.n	800e2be <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ae:	225c      	movs	r2, #92	; 0x5c
 800e2b0:	5a9a      	ldrh	r2, [r3, r2]
 800e2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2b4:	0011      	movs	r1, r2
 800e2b6:	0018      	movs	r0, r3
 800e2b8:	f7ff faae 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e2bc:	e003      	b.n	800e2c6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800e2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c0:	0018      	movs	r0, r3
 800e2c2:	f7f8 fda7 	bl	8006e14 <HAL_UART_RxCpltCallback>
}
 800e2c6:	46c0      	nop			; (mov r8, r8)
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	b014      	add	sp, #80	; 0x50
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	46c0      	nop			; (mov r8, r8)
 800e2d0:	fffffeff 	.word	0xfffffeff

0800e2d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d10a      	bne.n	800e306 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	225c      	movs	r2, #92	; 0x5c
 800e2f4:	5a9b      	ldrh	r3, [r3, r2]
 800e2f6:	085b      	lsrs	r3, r3, #1
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	0011      	movs	r1, r2
 800e2fe:	0018      	movs	r0, r3
 800e300:	f7ff fa8a 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e304:	e003      	b.n	800e30e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	0018      	movs	r0, r3
 800e30a:	f7ff fa7d 	bl	800d808 <HAL_UART_RxHalfCpltCallback>
}
 800e30e:	46c0      	nop			; (mov r8, r8)
 800e310:	46bd      	mov	sp, r7
 800e312:	b004      	add	sp, #16
 800e314:	bd80      	pop	{r7, pc}

0800e316 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b086      	sub	sp, #24
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e322:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	2288      	movs	r2, #136	; 0x88
 800e328:	589b      	ldr	r3, [r3, r2]
 800e32a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	228c      	movs	r2, #140	; 0x8c
 800e330:	589b      	ldr	r3, [r3, r2]
 800e332:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	2280      	movs	r2, #128	; 0x80
 800e33c:	4013      	ands	r3, r2
 800e33e:	2b80      	cmp	r3, #128	; 0x80
 800e340:	d10a      	bne.n	800e358 <UART_DMAError+0x42>
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	2b21      	cmp	r3, #33	; 0x21
 800e346:	d107      	bne.n	800e358 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	2256      	movs	r2, #86	; 0x56
 800e34c:	2100      	movs	r1, #0
 800e34e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	0018      	movs	r0, r3
 800e354:	f7ff fe80 	bl	800e058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	2240      	movs	r2, #64	; 0x40
 800e360:	4013      	ands	r3, r2
 800e362:	2b40      	cmp	r3, #64	; 0x40
 800e364:	d10a      	bne.n	800e37c <UART_DMAError+0x66>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2b22      	cmp	r3, #34	; 0x22
 800e36a:	d107      	bne.n	800e37c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	225e      	movs	r2, #94	; 0x5e
 800e370:	2100      	movs	r1, #0
 800e372:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	0018      	movs	r0, r3
 800e378:	f7ff feae 	bl	800e0d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2290      	movs	r2, #144	; 0x90
 800e380:	589b      	ldr	r3, [r3, r2]
 800e382:	2210      	movs	r2, #16
 800e384:	431a      	orrs	r2, r3
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2190      	movs	r1, #144	; 0x90
 800e38a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	0018      	movs	r0, r3
 800e390:	f7f8 fdb2 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e394:	46c0      	nop			; (mov r8, r8)
 800e396:	46bd      	mov	sp, r7
 800e398:	b006      	add	sp, #24
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	225e      	movs	r2, #94	; 0x5e
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2256      	movs	r2, #86	; 0x56
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f7f8 fd9b 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	b004      	add	sp, #16
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b086      	sub	sp, #24
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e3d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	2301      	movs	r3, #1
 800e3de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f383 8810 	msr	PRIMASK, r3
}
 800e3e6:	46c0      	nop			; (mov r8, r8)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2140      	movs	r1, #64	; 0x40
 800e3f4:	438a      	bics	r2, r1
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	f383 8810 	msr	PRIMASK, r3
}
 800e402:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2288      	movs	r2, #136	; 0x88
 800e408:	2120      	movs	r1, #32
 800e40a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	0018      	movs	r0, r3
 800e416:	f7f8 fcf5 	bl	8006e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e41a:	46c0      	nop			; (mov r8, r8)
 800e41c:	46bd      	mov	sp, r7
 800e41e:	b006      	add	sp, #24
 800e420:	bd80      	pop	{r7, pc}

0800e422 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e42a:	46c0      	nop			; (mov r8, r8)
 800e42c:	46bd      	mov	sp, r7
 800e42e:	b002      	add	sp, #8
 800e430:	bd80      	pop	{r7, pc}

0800e432 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b082      	sub	sp, #8
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e43a:	46c0      	nop			; (mov r8, r8)
 800e43c:	46bd      	mov	sp, r7
 800e43e:	b002      	add	sp, #8
 800e440:	bd80      	pop	{r7, pc}

0800e442 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e442:	b580      	push	{r7, lr}
 800e444:	b082      	sub	sp, #8
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e44a:	46c0      	nop			; (mov r8, r8)
 800e44c:	46bd      	mov	sp, r7
 800e44e:	b002      	add	sp, #8
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2284      	movs	r2, #132	; 0x84
 800e460:	5c9b      	ldrb	r3, [r3, r2]
 800e462:	2b01      	cmp	r3, #1
 800e464:	d101      	bne.n	800e46a <HAL_UARTEx_DisableFifoMode+0x16>
 800e466:	2302      	movs	r3, #2
 800e468:	e027      	b.n	800e4ba <HAL_UARTEx_DisableFifoMode+0x66>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2284      	movs	r2, #132	; 0x84
 800e46e:	2101      	movs	r1, #1
 800e470:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2288      	movs	r2, #136	; 0x88
 800e476:	2124      	movs	r1, #36	; 0x24
 800e478:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2101      	movs	r1, #1
 800e48e:	438a      	bics	r2, r1
 800e490:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	4a0b      	ldr	r2, [pc, #44]	; (800e4c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800e496:	4013      	ands	r3, r2
 800e498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2288      	movs	r2, #136	; 0x88
 800e4ac:	2120      	movs	r1, #32
 800e4ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2284      	movs	r2, #132	; 0x84
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	0018      	movs	r0, r3
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	b004      	add	sp, #16
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	46c0      	nop			; (mov r8, r8)
 800e4c4:	dfffffff 	.word	0xdfffffff

0800e4c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2284      	movs	r2, #132	; 0x84
 800e4d6:	5c9b      	ldrb	r3, [r3, r2]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d101      	bne.n	800e4e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e4dc:	2302      	movs	r3, #2
 800e4de:	e02e      	b.n	800e53e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2284      	movs	r2, #132	; 0x84
 800e4e4:	2101      	movs	r1, #1
 800e4e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2288      	movs	r2, #136	; 0x88
 800e4ec:	2124      	movs	r1, #36	; 0x24
 800e4ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2101      	movs	r1, #1
 800e504:	438a      	bics	r2, r1
 800e506:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	00db      	lsls	r3, r3, #3
 800e510:	08d9      	lsrs	r1, r3, #3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	430a      	orrs	r2, r1
 800e51a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	0018      	movs	r0, r3
 800e520:	f000 f854 	bl	800e5cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2288      	movs	r2, #136	; 0x88
 800e530:	2120      	movs	r1, #32
 800e532:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2284      	movs	r2, #132	; 0x84
 800e538:	2100      	movs	r1, #0
 800e53a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	0018      	movs	r0, r3
 800e540:	46bd      	mov	sp, r7
 800e542:	b004      	add	sp, #16
 800e544:	bd80      	pop	{r7, pc}
	...

0800e548 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2284      	movs	r2, #132	; 0x84
 800e556:	5c9b      	ldrb	r3, [r3, r2]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d101      	bne.n	800e560 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e55c:	2302      	movs	r3, #2
 800e55e:	e02f      	b.n	800e5c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2284      	movs	r2, #132	; 0x84
 800e564:	2101      	movs	r1, #1
 800e566:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2288      	movs	r2, #136	; 0x88
 800e56c:	2124      	movs	r1, #36	; 0x24
 800e56e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2101      	movs	r1, #1
 800e584:	438a      	bics	r2, r1
 800e586:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	4a0e      	ldr	r2, [pc, #56]	; (800e5c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800e590:	4013      	ands	r3, r2
 800e592:	0019      	movs	r1, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	430a      	orrs	r2, r1
 800e59c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	0018      	movs	r0, r3
 800e5a2:	f000 f813 	bl	800e5cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2288      	movs	r2, #136	; 0x88
 800e5b2:	2120      	movs	r1, #32
 800e5b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2284      	movs	r2, #132	; 0x84
 800e5ba:	2100      	movs	r1, #0
 800e5bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	0018      	movs	r0, r3
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	b004      	add	sp, #16
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	f1ffffff 	.word	0xf1ffffff

0800e5cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d108      	bne.n	800e5ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	226a      	movs	r2, #106	; 0x6a
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2268      	movs	r2, #104	; 0x68
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e5ec:	e043      	b.n	800e676 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e5ee:	260f      	movs	r6, #15
 800e5f0:	19bb      	adds	r3, r7, r6
 800e5f2:	2208      	movs	r2, #8
 800e5f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e5f6:	200e      	movs	r0, #14
 800e5f8:	183b      	adds	r3, r7, r0
 800e5fa:	2208      	movs	r2, #8
 800e5fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	0e5b      	lsrs	r3, r3, #25
 800e606:	b2da      	uxtb	r2, r3
 800e608:	240d      	movs	r4, #13
 800e60a:	193b      	adds	r3, r7, r4
 800e60c:	2107      	movs	r1, #7
 800e60e:	400a      	ands	r2, r1
 800e610:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	0f5b      	lsrs	r3, r3, #29
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	250c      	movs	r5, #12
 800e61e:	197b      	adds	r3, r7, r5
 800e620:	2107      	movs	r1, #7
 800e622:	400a      	ands	r2, r1
 800e624:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e626:	183b      	adds	r3, r7, r0
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	197a      	adds	r2, r7, r5
 800e62c:	7812      	ldrb	r2, [r2, #0]
 800e62e:	4914      	ldr	r1, [pc, #80]	; (800e680 <UARTEx_SetNbDataToProcess+0xb4>)
 800e630:	5c8a      	ldrb	r2, [r1, r2]
 800e632:	435a      	muls	r2, r3
 800e634:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800e636:	197b      	adds	r3, r7, r5
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	4a12      	ldr	r2, [pc, #72]	; (800e684 <UARTEx_SetNbDataToProcess+0xb8>)
 800e63c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e63e:	0019      	movs	r1, r3
 800e640:	f7f1 fe08 	bl	8000254 <__divsi3>
 800e644:	0003      	movs	r3, r0
 800e646:	b299      	uxth	r1, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	226a      	movs	r2, #106	; 0x6a
 800e64c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e64e:	19bb      	adds	r3, r7, r6
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	193a      	adds	r2, r7, r4
 800e654:	7812      	ldrb	r2, [r2, #0]
 800e656:	490a      	ldr	r1, [pc, #40]	; (800e680 <UARTEx_SetNbDataToProcess+0xb4>)
 800e658:	5c8a      	ldrb	r2, [r1, r2]
 800e65a:	435a      	muls	r2, r3
 800e65c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800e65e:	193b      	adds	r3, r7, r4
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	4a08      	ldr	r2, [pc, #32]	; (800e684 <UARTEx_SetNbDataToProcess+0xb8>)
 800e664:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e666:	0019      	movs	r1, r3
 800e668:	f7f1 fdf4 	bl	8000254 <__divsi3>
 800e66c:	0003      	movs	r3, r0
 800e66e:	b299      	uxth	r1, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2268      	movs	r2, #104	; 0x68
 800e674:	5299      	strh	r1, [r3, r2]
}
 800e676:	46c0      	nop			; (mov r8, r8)
 800e678:	46bd      	mov	sp, r7
 800e67a:	b005      	add	sp, #20
 800e67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	08018010 	.word	0x08018010
 800e684:	08018018 	.word	0x08018018

0800e688 <__NVIC_SetPriority>:
{
 800e688:	b590      	push	{r4, r7, lr}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	0002      	movs	r2, r0
 800e690:	6039      	str	r1, [r7, #0]
 800e692:	1dfb      	adds	r3, r7, #7
 800e694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e696:	1dfb      	adds	r3, r7, #7
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b7f      	cmp	r3, #127	; 0x7f
 800e69c:	d828      	bhi.n	800e6f0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e69e:	4a2f      	ldr	r2, [pc, #188]	; (800e75c <__NVIC_SetPriority+0xd4>)
 800e6a0:	1dfb      	adds	r3, r7, #7
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	b25b      	sxtb	r3, r3
 800e6a6:	089b      	lsrs	r3, r3, #2
 800e6a8:	33c0      	adds	r3, #192	; 0xc0
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	589b      	ldr	r3, [r3, r2]
 800e6ae:	1dfa      	adds	r2, r7, #7
 800e6b0:	7812      	ldrb	r2, [r2, #0]
 800e6b2:	0011      	movs	r1, r2
 800e6b4:	2203      	movs	r2, #3
 800e6b6:	400a      	ands	r2, r1
 800e6b8:	00d2      	lsls	r2, r2, #3
 800e6ba:	21ff      	movs	r1, #255	; 0xff
 800e6bc:	4091      	lsls	r1, r2
 800e6be:	000a      	movs	r2, r1
 800e6c0:	43d2      	mvns	r2, r2
 800e6c2:	401a      	ands	r2, r3
 800e6c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	019b      	lsls	r3, r3, #6
 800e6ca:	22ff      	movs	r2, #255	; 0xff
 800e6cc:	401a      	ands	r2, r3
 800e6ce:	1dfb      	adds	r3, r7, #7
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	4003      	ands	r3, r0
 800e6d8:	00db      	lsls	r3, r3, #3
 800e6da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e6dc:	481f      	ldr	r0, [pc, #124]	; (800e75c <__NVIC_SetPriority+0xd4>)
 800e6de:	1dfb      	adds	r3, r7, #7
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	b25b      	sxtb	r3, r3
 800e6e4:	089b      	lsrs	r3, r3, #2
 800e6e6:	430a      	orrs	r2, r1
 800e6e8:	33c0      	adds	r3, #192	; 0xc0
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	501a      	str	r2, [r3, r0]
}
 800e6ee:	e031      	b.n	800e754 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e6f0:	4a1b      	ldr	r2, [pc, #108]	; (800e760 <__NVIC_SetPriority+0xd8>)
 800e6f2:	1dfb      	adds	r3, r7, #7
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	0019      	movs	r1, r3
 800e6f8:	230f      	movs	r3, #15
 800e6fa:	400b      	ands	r3, r1
 800e6fc:	3b08      	subs	r3, #8
 800e6fe:	089b      	lsrs	r3, r3, #2
 800e700:	3306      	adds	r3, #6
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	18d3      	adds	r3, r2, r3
 800e706:	3304      	adds	r3, #4
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	1dfa      	adds	r2, r7, #7
 800e70c:	7812      	ldrb	r2, [r2, #0]
 800e70e:	0011      	movs	r1, r2
 800e710:	2203      	movs	r2, #3
 800e712:	400a      	ands	r2, r1
 800e714:	00d2      	lsls	r2, r2, #3
 800e716:	21ff      	movs	r1, #255	; 0xff
 800e718:	4091      	lsls	r1, r2
 800e71a:	000a      	movs	r2, r1
 800e71c:	43d2      	mvns	r2, r2
 800e71e:	401a      	ands	r2, r3
 800e720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	019b      	lsls	r3, r3, #6
 800e726:	22ff      	movs	r2, #255	; 0xff
 800e728:	401a      	ands	r2, r3
 800e72a:	1dfb      	adds	r3, r7, #7
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	0018      	movs	r0, r3
 800e730:	2303      	movs	r3, #3
 800e732:	4003      	ands	r3, r0
 800e734:	00db      	lsls	r3, r3, #3
 800e736:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e738:	4809      	ldr	r0, [pc, #36]	; (800e760 <__NVIC_SetPriority+0xd8>)
 800e73a:	1dfb      	adds	r3, r7, #7
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	001c      	movs	r4, r3
 800e740:	230f      	movs	r3, #15
 800e742:	4023      	ands	r3, r4
 800e744:	3b08      	subs	r3, #8
 800e746:	089b      	lsrs	r3, r3, #2
 800e748:	430a      	orrs	r2, r1
 800e74a:	3306      	adds	r3, #6
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	18c3      	adds	r3, r0, r3
 800e750:	3304      	adds	r3, #4
 800e752:	601a      	str	r2, [r3, #0]
}
 800e754:	46c0      	nop			; (mov r8, r8)
 800e756:	46bd      	mov	sp, r7
 800e758:	b003      	add	sp, #12
 800e75a:	bd90      	pop	{r4, r7, pc}
 800e75c:	e000e100 	.word	0xe000e100
 800e760:	e000ed00 	.word	0xe000ed00

0800e764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e764:	b580      	push	{r7, lr}
 800e766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e768:	4b05      	ldr	r3, [pc, #20]	; (800e780 <SysTick_Handler+0x1c>)
 800e76a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e76c:	f001 fc6a 	bl	8010044 <xTaskGetSchedulerState>
 800e770:	0003      	movs	r3, r0
 800e772:	2b01      	cmp	r3, #1
 800e774:	d001      	beq.n	800e77a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e776:	f002 f937 	bl	80109e8 <xPortSysTickHandler>
  }
}
 800e77a:	46c0      	nop			; (mov r8, r8)
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	e000e010 	.word	0xe000e010

0800e784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e784:	b580      	push	{r7, lr}
 800e786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e788:	2305      	movs	r3, #5
 800e78a:	425b      	negs	r3, r3
 800e78c:	2100      	movs	r1, #0
 800e78e:	0018      	movs	r0, r3
 800e790:	f7ff ff7a 	bl	800e688 <__NVIC_SetPriority>
#endif
}
 800e794:	46c0      	nop			; (mov r8, r8)
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
	...

0800e79c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7a2:	f3ef 8305 	mrs	r3, IPSR
 800e7a6:	603b      	str	r3, [r7, #0]
  return(result);
 800e7a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d003      	beq.n	800e7b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e7ae:	2306      	movs	r3, #6
 800e7b0:	425b      	negs	r3, r3
 800e7b2:	607b      	str	r3, [r7, #4]
 800e7b4:	e00c      	b.n	800e7d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e7b6:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <osKernelInitialize+0x40>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d105      	bne.n	800e7ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e7be:	4b07      	ldr	r3, [pc, #28]	; (800e7dc <osKernelInitialize+0x40>)
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	607b      	str	r3, [r7, #4]
 800e7c8:	e002      	b.n	800e7d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	425b      	negs	r3, r3
 800e7ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e7d0:	687b      	ldr	r3, [r7, #4]
}
 800e7d2:	0018      	movs	r0, r3
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	b002      	add	sp, #8
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	46c0      	nop			; (mov r8, r8)
 800e7dc:	20003d54 	.word	0x20003d54

0800e7e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7e6:	f3ef 8305 	mrs	r3, IPSR
 800e7ea:	603b      	str	r3, [r7, #0]
  return(result);
 800e7ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d003      	beq.n	800e7fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800e7f2:	2306      	movs	r3, #6
 800e7f4:	425b      	negs	r3, r3
 800e7f6:	607b      	str	r3, [r7, #4]
 800e7f8:	e010      	b.n	800e81c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e7fa:	4b0b      	ldr	r3, [pc, #44]	; (800e828 <osKernelStart+0x48>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d109      	bne.n	800e816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e802:	f7ff ffbf 	bl	800e784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e806:	4b08      	ldr	r3, [pc, #32]	; (800e828 <osKernelStart+0x48>)
 800e808:	2202      	movs	r2, #2
 800e80a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e80c:	f001 f830 	bl	800f870 <vTaskStartScheduler>
      stat = osOK;
 800e810:	2300      	movs	r3, #0
 800e812:	607b      	str	r3, [r7, #4]
 800e814:	e002      	b.n	800e81c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e816:	2301      	movs	r3, #1
 800e818:	425b      	negs	r3, r3
 800e81a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e81c:	687b      	ldr	r3, [r7, #4]
}
 800e81e:	0018      	movs	r0, r3
 800e820:	46bd      	mov	sp, r7
 800e822:	b002      	add	sp, #8
 800e824:	bd80      	pop	{r7, pc}
 800e826:	46c0      	nop			; (mov r8, r8)
 800e828:	20003d54 	.word	0x20003d54

0800e82c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e82c:	b5b0      	push	{r4, r5, r7, lr}
 800e82e:	b08e      	sub	sp, #56	; 0x38
 800e830:	af04      	add	r7, sp, #16
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e838:	2300      	movs	r3, #0
 800e83a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e83c:	f3ef 8305 	mrs	r3, IPSR
 800e840:	617b      	str	r3, [r7, #20]
  return(result);
 800e842:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e844:	2b00      	cmp	r3, #0
 800e846:	d000      	beq.n	800e84a <osThreadNew+0x1e>
 800e848:	e081      	b.n	800e94e <osThreadNew+0x122>
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d100      	bne.n	800e852 <osThreadNew+0x26>
 800e850:	e07d      	b.n	800e94e <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800e852:	2380      	movs	r3, #128	; 0x80
 800e854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e856:	2318      	movs	r3, #24
 800e858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e85e:	2301      	movs	r3, #1
 800e860:	425b      	negs	r3, r3
 800e862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d044      	beq.n	800e8f4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <osThreadNew+0x4c>
        name = attr->name;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d007      	beq.n	800e89c <osThreadNew+0x70>
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b38      	cmp	r3, #56	; 0x38
 800e890:	d804      	bhi.n	800e89c <osThreadNew+0x70>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	2201      	movs	r2, #1
 800e898:	4013      	ands	r3, r2
 800e89a:	d001      	beq.n	800e8a0 <osThreadNew+0x74>
        return (NULL);
 800e89c:	2300      	movs	r3, #0
 800e89e:	e057      	b.n	800e950 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	695b      	ldr	r3, [r3, #20]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d003      	beq.n	800e8b0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	695b      	ldr	r3, [r3, #20]
 800e8ac:	089b      	lsrs	r3, r3, #2
 800e8ae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00e      	beq.n	800e8d6 <osThreadNew+0xaa>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	2ba7      	cmp	r3, #167	; 0xa7
 800e8be:	d90a      	bls.n	800e8d6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d006      	beq.n	800e8d6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	695b      	ldr	r3, [r3, #20]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <osThreadNew+0xaa>
        mem = 1;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	61bb      	str	r3, [r7, #24]
 800e8d4:	e010      	b.n	800e8f8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10c      	bne.n	800e8f8 <osThreadNew+0xcc>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d108      	bne.n	800e8f8 <osThreadNew+0xcc>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	691b      	ldr	r3, [r3, #16]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d104      	bne.n	800e8f8 <osThreadNew+0xcc>
          mem = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	61bb      	str	r3, [r7, #24]
 800e8f2:	e001      	b.n	800e8f8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d112      	bne.n	800e924 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e906:	68bd      	ldr	r5, [r7, #8]
 800e908:	6a3c      	ldr	r4, [r7, #32]
 800e90a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	9302      	str	r3, [sp, #8]
 800e910:	9201      	str	r2, [sp, #4]
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	002b      	movs	r3, r5
 800e918:	0022      	movs	r2, r4
 800e91a:	f000 fdea 	bl	800f4f2 <xTaskCreateStatic>
 800e91e:	0003      	movs	r3, r0
 800e920:	613b      	str	r3, [r7, #16]
 800e922:	e014      	b.n	800e94e <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d111      	bne.n	800e94e <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	68bc      	ldr	r4, [r7, #8]
 800e930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	2310      	movs	r3, #16
 800e936:	18fb      	adds	r3, r7, r3
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	0023      	movs	r3, r4
 800e940:	f000 fe1b 	bl	800f57a <xTaskCreate>
 800e944:	0003      	movs	r3, r0
 800e946:	2b01      	cmp	r3, #1
 800e948:	d001      	beq.n	800e94e <osThreadNew+0x122>
            hTask = NULL;
 800e94a:	2300      	movs	r3, #0
 800e94c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e94e:	693b      	ldr	r3, [r7, #16]
}
 800e950:	0018      	movs	r0, r3
 800e952:	46bd      	mov	sp, r7
 800e954:	b00a      	add	sp, #40	; 0x28
 800e956:	bdb0      	pop	{r4, r5, r7, pc}

0800e958 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e960:	f3ef 8305 	mrs	r3, IPSR
 800e964:	60bb      	str	r3, [r7, #8]
  return(result);
 800e966:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <osDelay+0x1c>
    stat = osErrorISR;
 800e96c:	2306      	movs	r3, #6
 800e96e:	425b      	negs	r3, r3
 800e970:	60fb      	str	r3, [r7, #12]
 800e972:	e008      	b.n	800e986 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800e974:	2300      	movs	r3, #0
 800e976:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d003      	beq.n	800e986 <osDelay+0x2e>
      vTaskDelay(ticks);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	0018      	movs	r0, r3
 800e982:	f000 ff4f 	bl	800f824 <vTaskDelay>
    }
  }

  return (stat);
 800e986:	68fb      	ldr	r3, [r7, #12]
}
 800e988:	0018      	movs	r0, r3
 800e98a:	46bd      	mov	sp, r7
 800e98c:	b004      	add	sp, #16
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e990:	b590      	push	{r4, r7, lr}
 800e992:	b08b      	sub	sp, #44	; 0x2c
 800e994:	af02      	add	r7, sp, #8
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e99c:	2300      	movs	r3, #0
 800e99e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9a0:	f3ef 8305 	mrs	r3, IPSR
 800e9a4:	613b      	str	r3, [r7, #16]
  return(result);
 800e9a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d000      	beq.n	800e9ae <osMessageQueueNew+0x1e>
 800e9ac:	e064      	b.n	800ea78 <osMessageQueueNew+0xe8>
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d100      	bne.n	800e9b6 <osMessageQueueNew+0x26>
 800e9b4:	e060      	b.n	800ea78 <osMessageQueueNew+0xe8>
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d05d      	beq.n	800ea78 <osMessageQueueNew+0xe8>
    mem = -1;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	425b      	negs	r3, r3
 800e9c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d028      	beq.n	800ea1a <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d011      	beq.n	800e9f4 <osMessageQueueNew+0x64>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	2b4f      	cmp	r3, #79	; 0x4f
 800e9d6:	d90d      	bls.n	800e9f4 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d009      	beq.n	800e9f4 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	695a      	ldr	r2, [r3, #20]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	68b9      	ldr	r1, [r7, #8]
 800e9e8:	434b      	muls	r3, r1
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d302      	bcc.n	800e9f4 <osMessageQueueNew+0x64>
        mem = 1;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	61bb      	str	r3, [r7, #24]
 800e9f2:	e014      	b.n	800ea1e <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d110      	bne.n	800ea1e <osMessageQueueNew+0x8e>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10c      	bne.n	800ea1e <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d108      	bne.n	800ea1e <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	695b      	ldr	r3, [r3, #20]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d104      	bne.n	800ea1e <osMessageQueueNew+0x8e>
          mem = 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	61bb      	str	r3, [r7, #24]
 800ea18:	e001      	b.n	800ea1e <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d10c      	bne.n	800ea3e <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	691a      	ldr	r2, [r3, #16]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	68b9      	ldr	r1, [r7, #8]
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	2400      	movs	r4, #0
 800ea32:	9400      	str	r4, [sp, #0]
 800ea34:	f000 f953 	bl	800ecde <xQueueGenericCreateStatic>
 800ea38:	0003      	movs	r3, r0
 800ea3a:	61fb      	str	r3, [r7, #28]
 800ea3c:	e00a      	b.n	800ea54 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d107      	bne.n	800ea54 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ea44:	68b9      	ldr	r1, [r7, #8]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	0018      	movs	r0, r3
 800ea4c:	f000 f993 	bl	800ed76 <xQueueGenericCreate>
 800ea50:	0003      	movs	r3, r0
 800ea52:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00e      	beq.n	800ea78 <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <osMessageQueueNew+0xd8>
        name = attr->name;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	e001      	b.n	800ea6c <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ea6c:	697a      	ldr	r2, [r7, #20]
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	0011      	movs	r1, r2
 800ea72:	0018      	movs	r0, r3
 800ea74:	f000 fce2 	bl	800f43c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ea78:	69fb      	ldr	r3, [r7, #28]
}
 800ea7a:	0018      	movs	r0, r3
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	b009      	add	sp, #36	; 0x24
 800ea80:	bd90      	pop	{r4, r7, pc}
	...

0800ea84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	4a06      	ldr	r2, [pc, #24]	; (800eaac <vApplicationGetIdleTaskMemory+0x28>)
 800ea94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	4a05      	ldr	r2, [pc, #20]	; (800eab0 <vApplicationGetIdleTaskMemory+0x2c>)
 800ea9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2280      	movs	r2, #128	; 0x80
 800eaa0:	601a      	str	r2, [r3, #0]
}
 800eaa2:	46c0      	nop			; (mov r8, r8)
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	b004      	add	sp, #16
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	46c0      	nop			; (mov r8, r8)
 800eaac:	20003d58 	.word	0x20003d58
 800eab0:	20003e00 	.word	0x20003e00

0800eab4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	4a06      	ldr	r2, [pc, #24]	; (800eadc <vApplicationGetTimerTaskMemory+0x28>)
 800eac4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	4a05      	ldr	r2, [pc, #20]	; (800eae0 <vApplicationGetTimerTaskMemory+0x2c>)
 800eaca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2280      	movs	r2, #128	; 0x80
 800ead0:	0052      	lsls	r2, r2, #1
 800ead2:	601a      	str	r2, [r3, #0]
}
 800ead4:	46c0      	nop			; (mov r8, r8)
 800ead6:	46bd      	mov	sp, r7
 800ead8:	b004      	add	sp, #16
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	20004000 	.word	0x20004000
 800eae0:	200040a8 	.word	0x200040a8

0800eae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	3308      	adds	r3, #8
 800eaf0:	001a      	movs	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	4252      	negs	r2, r2
 800eafc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	3308      	adds	r3, #8
 800eb02:	001a      	movs	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	3308      	adds	r3, #8
 800eb0c:	001a      	movs	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb18:	46c0      	nop			; (mov r8, r8)
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	b002      	add	sp, #8
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eb2e:	46c0      	nop			; (mov r8, r8)
 800eb30:	46bd      	mov	sp, r7
 800eb32:	b002      	add	sp, #8
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b084      	sub	sp, #16
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
 800eb3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	689a      	ldr	r2, [r3, #8]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	601a      	str	r2, [r3, #0]
}
 800eb72:	46c0      	nop			; (mov r8, r8)
 800eb74:	46bd      	mov	sp, r7
 800eb76:	b004      	add	sp, #16
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	d103      	bne.n	800eb98 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	691b      	ldr	r3, [r3, #16]
 800eb94:	60fb      	str	r3, [r7, #12]
 800eb96:	e00c      	b.n	800ebb2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3308      	adds	r3, #8
 800eb9c:	60fb      	str	r3, [r7, #12]
 800eb9e:	e002      	b.n	800eba6 <vListInsert+0x2c>
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d2f6      	bcs.n	800eba0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	685a      	ldr	r2, [r3, #4]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	1c5a      	adds	r2, r3, #1
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	601a      	str	r2, [r3, #0]
}
 800ebde:	46c0      	nop			; (mov r8, r8)
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	b004      	add	sp, #16
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b084      	sub	sp, #16
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	6892      	ldr	r2, [r2, #8]
 800ebfc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	6852      	ldr	r2, [r2, #4]
 800ec06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d103      	bne.n	800ec1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689a      	ldr	r2, [r3, #8]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	1e5a      	subs	r2, r3, #1
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
}
 800ec2e:	0018      	movs	r0, r3
 800ec30:	46bd      	mov	sp, r7
 800ec32:	b004      	add	sp, #16
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b084      	sub	sp, #16
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d101      	bne.n	800ec4e <xQueueGenericReset+0x18>
 800ec4a:	b672      	cpsid	i
 800ec4c:	e7fe      	b.n	800ec4c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800ec4e:	f001 fe6f 	bl	8010930 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5e:	434b      	muls	r3, r1
 800ec60:	18d2      	adds	r2, r2, r3
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec7c:	1e59      	subs	r1, r3, #1
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec82:	434b      	muls	r3, r1
 800ec84:	18d2      	adds	r2, r2, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2244      	movs	r2, #68	; 0x44
 800ec8e:	21ff      	movs	r1, #255	; 0xff
 800ec90:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2245      	movs	r2, #69	; 0x45
 800ec96:	21ff      	movs	r1, #255	; 0xff
 800ec98:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d10d      	bne.n	800ecbc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	691b      	ldr	r3, [r3, #16]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d013      	beq.n	800ecd0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3310      	adds	r3, #16
 800ecac:	0018      	movs	r0, r3
 800ecae:	f001 f831 	bl	800fd14 <xTaskRemoveFromEventList>
 800ecb2:	1e03      	subs	r3, r0, #0
 800ecb4:	d00c      	beq.n	800ecd0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ecb6:	f001 fe2b 	bl	8010910 <vPortYield>
 800ecba:	e009      	b.n	800ecd0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3310      	adds	r3, #16
 800ecc0:	0018      	movs	r0, r3
 800ecc2:	f7ff ff0f 	bl	800eae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3324      	adds	r3, #36	; 0x24
 800ecca:	0018      	movs	r0, r3
 800eccc:	f7ff ff0a 	bl	800eae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ecd0:	f001 fe40 	bl	8010954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ecd4:	2301      	movs	r3, #1
}
 800ecd6:	0018      	movs	r0, r3
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	b004      	add	sp, #16
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ecde:	b590      	push	{r4, r7, lr}
 800ece0:	b089      	sub	sp, #36	; 0x24
 800ece2:	af02      	add	r7, sp, #8
 800ece4:	60f8      	str	r0, [r7, #12]
 800ece6:	60b9      	str	r1, [r7, #8]
 800ece8:	607a      	str	r2, [r7, #4]
 800ecea:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d101      	bne.n	800ecf6 <xQueueGenericCreateStatic+0x18>
 800ecf2:	b672      	cpsid	i
 800ecf4:	e7fe      	b.n	800ecf4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d101      	bne.n	800ed00 <xQueueGenericCreateStatic+0x22>
 800ecfc:	b672      	cpsid	i
 800ecfe:	e7fe      	b.n	800ecfe <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <xQueueGenericCreateStatic+0x2e>
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d001      	beq.n	800ed10 <xQueueGenericCreateStatic+0x32>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e000      	b.n	800ed12 <xQueueGenericCreateStatic+0x34>
 800ed10:	2300      	movs	r3, #0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <xQueueGenericCreateStatic+0x3c>
 800ed16:	b672      	cpsid	i
 800ed18:	e7fe      	b.n	800ed18 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d102      	bne.n	800ed26 <xQueueGenericCreateStatic+0x48>
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <xQueueGenericCreateStatic+0x4c>
 800ed26:	2301      	movs	r3, #1
 800ed28:	e000      	b.n	800ed2c <xQueueGenericCreateStatic+0x4e>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <xQueueGenericCreateStatic+0x56>
 800ed30:	b672      	cpsid	i
 800ed32:	e7fe      	b.n	800ed32 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ed34:	2350      	movs	r3, #80	; 0x50
 800ed36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	2b50      	cmp	r3, #80	; 0x50
 800ed3c:	d001      	beq.n	800ed42 <xQueueGenericCreateStatic+0x64>
 800ed3e:	b672      	cpsid	i
 800ed40:	e7fe      	b.n	800ed40 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ed42:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00e      	beq.n	800ed6c <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	2246      	movs	r2, #70	; 0x46
 800ed52:	2101      	movs	r1, #1
 800ed54:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ed56:	2328      	movs	r3, #40	; 0x28
 800ed58:	18fb      	adds	r3, r7, r3
 800ed5a:	781c      	ldrb	r4, [r3, #0]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	68b9      	ldr	r1, [r7, #8]
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	0023      	movs	r3, r4
 800ed68:	f000 f837 	bl	800edda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ed6c:	697b      	ldr	r3, [r7, #20]
	}
 800ed6e:	0018      	movs	r0, r3
 800ed70:	46bd      	mov	sp, r7
 800ed72:	b007      	add	sp, #28
 800ed74:	bd90      	pop	{r4, r7, pc}

0800ed76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ed76:	b590      	push	{r4, r7, lr}
 800ed78:	b08b      	sub	sp, #44	; 0x2c
 800ed7a:	af02      	add	r7, sp, #8
 800ed7c:	60f8      	str	r0, [r7, #12]
 800ed7e:	60b9      	str	r1, [r7, #8]
 800ed80:	1dfb      	adds	r3, r7, #7
 800ed82:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d101      	bne.n	800ed8e <xQueueGenericCreate+0x18>
 800ed8a:	b672      	cpsid	i
 800ed8c:	e7fe      	b.n	800ed8c <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	4353      	muls	r3, r2
 800ed94:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	3350      	adds	r3, #80	; 0x50
 800ed9a:	0018      	movs	r0, r3
 800ed9c:	f001 fe60 	bl	8010a60 <pvPortMalloc>
 800eda0:	0003      	movs	r3, r0
 800eda2:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d012      	beq.n	800edd0 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	3350      	adds	r3, #80	; 0x50
 800edb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	2246      	movs	r2, #70	; 0x46
 800edb8:	2100      	movs	r1, #0
 800edba:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edbc:	1dfb      	adds	r3, r7, #7
 800edbe:	781c      	ldrb	r4, [r3, #0]
 800edc0:	697a      	ldr	r2, [r7, #20]
 800edc2:	68b9      	ldr	r1, [r7, #8]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	0023      	movs	r3, r4
 800edcc:	f000 f805 	bl	800edda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800edd0:	69bb      	ldr	r3, [r7, #24]
	}
 800edd2:	0018      	movs	r0, r3
 800edd4:	46bd      	mov	sp, r7
 800edd6:	b009      	add	sp, #36	; 0x24
 800edd8:	bd90      	pop	{r4, r7, pc}

0800edda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b084      	sub	sp, #16
 800edde:	af00      	add	r7, sp, #0
 800ede0:	60f8      	str	r0, [r7, #12]
 800ede2:	60b9      	str	r1, [r7, #8]
 800ede4:	607a      	str	r2, [r7, #4]
 800ede6:	001a      	movs	r2, r3
 800ede8:	1cfb      	adds	r3, r7, #3
 800edea:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d103      	bne.n	800edfa <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	69ba      	ldr	r2, [r7, #24]
 800edf6:	601a      	str	r2, [r3, #0]
 800edf8:	e002      	b.n	800ee00 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	2101      	movs	r1, #1
 800ee10:	0018      	movs	r0, r3
 800ee12:	f7ff ff10 	bl	800ec36 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	1cfa      	adds	r2, r7, #3
 800ee1a:	214c      	movs	r1, #76	; 0x4c
 800ee1c:	7812      	ldrb	r2, [r2, #0]
 800ee1e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ee20:	46c0      	nop			; (mov r8, r8)
 800ee22:	46bd      	mov	sp, r7
 800ee24:	b004      	add	sp, #16
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08a      	sub	sp, #40	; 0x28
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee36:	2300      	movs	r3, #0
 800ee38:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800ee3e:	6a3b      	ldr	r3, [r7, #32]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <xQueueGenericSend+0x20>
 800ee44:	b672      	cpsid	i
 800ee46:	e7fe      	b.n	800ee46 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d103      	bne.n	800ee56 <xQueueGenericSend+0x2e>
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d101      	bne.n	800ee5a <xQueueGenericSend+0x32>
 800ee56:	2301      	movs	r3, #1
 800ee58:	e000      	b.n	800ee5c <xQueueGenericSend+0x34>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d101      	bne.n	800ee64 <xQueueGenericSend+0x3c>
 800ee60:	b672      	cpsid	i
 800ee62:	e7fe      	b.n	800ee62 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	2b02      	cmp	r3, #2
 800ee68:	d103      	bne.n	800ee72 <xQueueGenericSend+0x4a>
 800ee6a:	6a3b      	ldr	r3, [r7, #32]
 800ee6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d101      	bne.n	800ee76 <xQueueGenericSend+0x4e>
 800ee72:	2301      	movs	r3, #1
 800ee74:	e000      	b.n	800ee78 <xQueueGenericSend+0x50>
 800ee76:	2300      	movs	r3, #0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d101      	bne.n	800ee80 <xQueueGenericSend+0x58>
 800ee7c:	b672      	cpsid	i
 800ee7e:	e7fe      	b.n	800ee7e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee80:	f001 f8e0 	bl	8010044 <xTaskGetSchedulerState>
 800ee84:	1e03      	subs	r3, r0, #0
 800ee86:	d102      	bne.n	800ee8e <xQueueGenericSend+0x66>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d101      	bne.n	800ee92 <xQueueGenericSend+0x6a>
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e000      	b.n	800ee94 <xQueueGenericSend+0x6c>
 800ee92:	2300      	movs	r3, #0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <xQueueGenericSend+0x74>
 800ee98:	b672      	cpsid	i
 800ee9a:	e7fe      	b.n	800ee9a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee9c:	f001 fd48 	bl	8010930 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eea4:	6a3b      	ldr	r3, [r7, #32]
 800eea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d302      	bcc.n	800eeb2 <xQueueGenericSend+0x8a>
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	d11e      	bne.n	800eef0 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	68b9      	ldr	r1, [r7, #8]
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	0018      	movs	r0, r3
 800eeba:	f000 f9a2 	bl	800f202 <prvCopyDataToQueue>
 800eebe:	0003      	movs	r3, r0
 800eec0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d009      	beq.n	800eede <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	3324      	adds	r3, #36	; 0x24
 800eece:	0018      	movs	r0, r3
 800eed0:	f000 ff20 	bl	800fd14 <xTaskRemoveFromEventList>
 800eed4:	1e03      	subs	r3, r0, #0
 800eed6:	d007      	beq.n	800eee8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eed8:	f001 fd1a 	bl	8010910 <vPortYield>
 800eedc:	e004      	b.n	800eee8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eee4:	f001 fd14 	bl	8010910 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eee8:	f001 fd34 	bl	8010954 <vPortExitCritical>
				return pdPASS;
 800eeec:	2301      	movs	r3, #1
 800eeee:	e05b      	b.n	800efa8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d103      	bne.n	800eefe <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eef6:	f001 fd2d 	bl	8010954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eefa:	2300      	movs	r3, #0
 800eefc:	e054      	b.n	800efa8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d106      	bne.n	800ef12 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef04:	2314      	movs	r3, #20
 800ef06:	18fb      	adds	r3, r7, r3
 800ef08:	0018      	movs	r0, r3
 800ef0a:	f000 ff5f 	bl	800fdcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef12:	f001 fd1f 	bl	8010954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef16:	f000 fd09 	bl	800f92c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef1a:	f001 fd09 	bl	8010930 <vPortEnterCritical>
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	2244      	movs	r2, #68	; 0x44
 800ef22:	5c9b      	ldrb	r3, [r3, r2]
 800ef24:	b25b      	sxtb	r3, r3
 800ef26:	3301      	adds	r3, #1
 800ef28:	d103      	bne.n	800ef32 <xQueueGenericSend+0x10a>
 800ef2a:	6a3b      	ldr	r3, [r7, #32]
 800ef2c:	2244      	movs	r2, #68	; 0x44
 800ef2e:	2100      	movs	r1, #0
 800ef30:	5499      	strb	r1, [r3, r2]
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	2245      	movs	r2, #69	; 0x45
 800ef36:	5c9b      	ldrb	r3, [r3, r2]
 800ef38:	b25b      	sxtb	r3, r3
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	d103      	bne.n	800ef46 <xQueueGenericSend+0x11e>
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	2245      	movs	r2, #69	; 0x45
 800ef42:	2100      	movs	r1, #0
 800ef44:	5499      	strb	r1, [r3, r2]
 800ef46:	f001 fd05 	bl	8010954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef4a:	1d3a      	adds	r2, r7, #4
 800ef4c:	2314      	movs	r3, #20
 800ef4e:	18fb      	adds	r3, r7, r3
 800ef50:	0011      	movs	r1, r2
 800ef52:	0018      	movs	r0, r3
 800ef54:	f000 ff4e 	bl	800fdf4 <xTaskCheckForTimeOut>
 800ef58:	1e03      	subs	r3, r0, #0
 800ef5a:	d11e      	bne.n	800ef9a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	0018      	movs	r0, r3
 800ef60:	f000 fa54 	bl	800f40c <prvIsQueueFull>
 800ef64:	1e03      	subs	r3, r0, #0
 800ef66:	d011      	beq.n	800ef8c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ef68:	6a3b      	ldr	r3, [r7, #32]
 800ef6a:	3310      	adds	r3, #16
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	0011      	movs	r1, r2
 800ef70:	0018      	movs	r0, r3
 800ef72:	f000 fe8b 	bl	800fc8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ef76:	6a3b      	ldr	r3, [r7, #32]
 800ef78:	0018      	movs	r0, r3
 800ef7a:	f000 f9d3 	bl	800f324 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ef7e:	f000 fce1 	bl	800f944 <xTaskResumeAll>
 800ef82:	1e03      	subs	r3, r0, #0
 800ef84:	d18a      	bne.n	800ee9c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800ef86:	f001 fcc3 	bl	8010910 <vPortYield>
 800ef8a:	e787      	b.n	800ee9c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ef8c:	6a3b      	ldr	r3, [r7, #32]
 800ef8e:	0018      	movs	r0, r3
 800ef90:	f000 f9c8 	bl	800f324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef94:	f000 fcd6 	bl	800f944 <xTaskResumeAll>
 800ef98:	e780      	b.n	800ee9c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	0018      	movs	r0, r3
 800ef9e:	f000 f9c1 	bl	800f324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efa2:	f000 fccf 	bl	800f944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800efa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800efa8:	0018      	movs	r0, r3
 800efaa:	46bd      	mov	sp, r7
 800efac:	b00a      	add	sp, #40	; 0x28
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800efb0:	b590      	push	{r4, r7, lr}
 800efb2:	b08b      	sub	sp, #44	; 0x2c
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
 800efbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800efc2:	6a3b      	ldr	r3, [r7, #32]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d101      	bne.n	800efcc <xQueueGenericSendFromISR+0x1c>
 800efc8:	b672      	cpsid	i
 800efca:	e7fe      	b.n	800efca <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d103      	bne.n	800efda <xQueueGenericSendFromISR+0x2a>
 800efd2:	6a3b      	ldr	r3, [r7, #32]
 800efd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d101      	bne.n	800efde <xQueueGenericSendFromISR+0x2e>
 800efda:	2301      	movs	r3, #1
 800efdc:	e000      	b.n	800efe0 <xQueueGenericSendFromISR+0x30>
 800efde:	2300      	movs	r3, #0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <xQueueGenericSendFromISR+0x38>
 800efe4:	b672      	cpsid	i
 800efe6:	e7fe      	b.n	800efe6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	2b02      	cmp	r3, #2
 800efec:	d103      	bne.n	800eff6 <xQueueGenericSendFromISR+0x46>
 800efee:	6a3b      	ldr	r3, [r7, #32]
 800eff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d101      	bne.n	800effa <xQueueGenericSendFromISR+0x4a>
 800eff6:	2301      	movs	r3, #1
 800eff8:	e000      	b.n	800effc <xQueueGenericSendFromISR+0x4c>
 800effa:	2300      	movs	r3, #0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d101      	bne.n	800f004 <xQueueGenericSendFromISR+0x54>
 800f000:	b672      	cpsid	i
 800f002:	e7fe      	b.n	800f002 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f004:	f001 fcbe 	bl	8010984 <ulSetInterruptMaskFromISR>
 800f008:	0003      	movs	r3, r0
 800f00a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f00c:	6a3b      	ldr	r3, [r7, #32]
 800f00e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f014:	429a      	cmp	r2, r3
 800f016:	d302      	bcc.n	800f01e <xQueueGenericSendFromISR+0x6e>
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	2b02      	cmp	r3, #2
 800f01c:	d131      	bne.n	800f082 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f01e:	241b      	movs	r4, #27
 800f020:	193b      	adds	r3, r7, r4
 800f022:	6a3a      	ldr	r2, [r7, #32]
 800f024:	2145      	movs	r1, #69	; 0x45
 800f026:	5c52      	ldrb	r2, [r2, r1]
 800f028:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f02a:	6a3b      	ldr	r3, [r7, #32]
 800f02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f02e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f030:	683a      	ldr	r2, [r7, #0]
 800f032:	68b9      	ldr	r1, [r7, #8]
 800f034:	6a3b      	ldr	r3, [r7, #32]
 800f036:	0018      	movs	r0, r3
 800f038:	f000 f8e3 	bl	800f202 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f03c:	193b      	adds	r3, r7, r4
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	b25b      	sxtb	r3, r3
 800f042:	3301      	adds	r3, #1
 800f044:	d111      	bne.n	800f06a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d016      	beq.n	800f07c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	3324      	adds	r3, #36	; 0x24
 800f052:	0018      	movs	r0, r3
 800f054:	f000 fe5e 	bl	800fd14 <xTaskRemoveFromEventList>
 800f058:	1e03      	subs	r3, r0, #0
 800f05a:	d00f      	beq.n	800f07c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00c      	beq.n	800f07c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2201      	movs	r2, #1
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	e008      	b.n	800f07c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f06a:	231b      	movs	r3, #27
 800f06c:	18fb      	adds	r3, r7, r3
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	3301      	adds	r3, #1
 800f072:	b2db      	uxtb	r3, r3
 800f074:	b259      	sxtb	r1, r3
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	2245      	movs	r2, #69	; 0x45
 800f07a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800f07c:	2301      	movs	r3, #1
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800f080:	e001      	b.n	800f086 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f082:	2300      	movs	r3, #0
 800f084:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	0018      	movs	r0, r3
 800f08a:	f001 fc81 	bl	8010990 <vClearInterruptMaskFromISR>

	return xReturn;
 800f08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f090:	0018      	movs	r0, r3
 800f092:	46bd      	mov	sp, r7
 800f094:	b00b      	add	sp, #44	; 0x2c
 800f096:	bd90      	pop	{r4, r7, pc}

0800f098 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08a      	sub	sp, #40	; 0x28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f0ac:	6a3b      	ldr	r3, [r7, #32]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <xQueueReceive+0x1e>
 800f0b2:	b672      	cpsid	i
 800f0b4:	e7fe      	b.n	800f0b4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d103      	bne.n	800f0c4 <xQueueReceive+0x2c>
 800f0bc:	6a3b      	ldr	r3, [r7, #32]
 800f0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d101      	bne.n	800f0c8 <xQueueReceive+0x30>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e000      	b.n	800f0ca <xQueueReceive+0x32>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <xQueueReceive+0x3a>
 800f0ce:	b672      	cpsid	i
 800f0d0:	e7fe      	b.n	800f0d0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0d2:	f000 ffb7 	bl	8010044 <xTaskGetSchedulerState>
 800f0d6:	1e03      	subs	r3, r0, #0
 800f0d8:	d102      	bne.n	800f0e0 <xQueueReceive+0x48>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <xQueueReceive+0x4c>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e000      	b.n	800f0e6 <xQueueReceive+0x4e>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d101      	bne.n	800f0ee <xQueueReceive+0x56>
 800f0ea:	b672      	cpsid	i
 800f0ec:	e7fe      	b.n	800f0ec <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0ee:	f001 fc1f 	bl	8010930 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0f2:	6a3b      	ldr	r3, [r7, #32]
 800f0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d01a      	beq.n	800f134 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	0011      	movs	r1, r2
 800f104:	0018      	movs	r0, r3
 800f106:	f000 f8e7 	bl	800f2d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	1e5a      	subs	r2, r3, #1
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f112:	6a3b      	ldr	r3, [r7, #32]
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d008      	beq.n	800f12c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f11a:	6a3b      	ldr	r3, [r7, #32]
 800f11c:	3310      	adds	r3, #16
 800f11e:	0018      	movs	r0, r3
 800f120:	f000 fdf8 	bl	800fd14 <xTaskRemoveFromEventList>
 800f124:	1e03      	subs	r3, r0, #0
 800f126:	d001      	beq.n	800f12c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f128:	f001 fbf2 	bl	8010910 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f12c:	f001 fc12 	bl	8010954 <vPortExitCritical>
				return pdPASS;
 800f130:	2301      	movs	r3, #1
 800f132:	e062      	b.n	800f1fa <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d103      	bne.n	800f142 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f13a:	f001 fc0b 	bl	8010954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f13e:	2300      	movs	r3, #0
 800f140:	e05b      	b.n	800f1fa <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f144:	2b00      	cmp	r3, #0
 800f146:	d106      	bne.n	800f156 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f148:	2314      	movs	r3, #20
 800f14a:	18fb      	adds	r3, r7, r3
 800f14c:	0018      	movs	r0, r3
 800f14e:	f000 fe3d 	bl	800fdcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f152:	2301      	movs	r3, #1
 800f154:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f156:	f001 fbfd 	bl	8010954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f15a:	f000 fbe7 	bl	800f92c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f15e:	f001 fbe7 	bl	8010930 <vPortEnterCritical>
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	2244      	movs	r2, #68	; 0x44
 800f166:	5c9b      	ldrb	r3, [r3, r2]
 800f168:	b25b      	sxtb	r3, r3
 800f16a:	3301      	adds	r3, #1
 800f16c:	d103      	bne.n	800f176 <xQueueReceive+0xde>
 800f16e:	6a3b      	ldr	r3, [r7, #32]
 800f170:	2244      	movs	r2, #68	; 0x44
 800f172:	2100      	movs	r1, #0
 800f174:	5499      	strb	r1, [r3, r2]
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	2245      	movs	r2, #69	; 0x45
 800f17a:	5c9b      	ldrb	r3, [r3, r2]
 800f17c:	b25b      	sxtb	r3, r3
 800f17e:	3301      	adds	r3, #1
 800f180:	d103      	bne.n	800f18a <xQueueReceive+0xf2>
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	2245      	movs	r2, #69	; 0x45
 800f186:	2100      	movs	r1, #0
 800f188:	5499      	strb	r1, [r3, r2]
 800f18a:	f001 fbe3 	bl	8010954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f18e:	1d3a      	adds	r2, r7, #4
 800f190:	2314      	movs	r3, #20
 800f192:	18fb      	adds	r3, r7, r3
 800f194:	0011      	movs	r1, r2
 800f196:	0018      	movs	r0, r3
 800f198:	f000 fe2c 	bl	800fdf4 <xTaskCheckForTimeOut>
 800f19c:	1e03      	subs	r3, r0, #0
 800f19e:	d11e      	bne.n	800f1de <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1a0:	6a3b      	ldr	r3, [r7, #32]
 800f1a2:	0018      	movs	r0, r3
 800f1a4:	f000 f91c 	bl	800f3e0 <prvIsQueueEmpty>
 800f1a8:	1e03      	subs	r3, r0, #0
 800f1aa:	d011      	beq.n	800f1d0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1ac:	6a3b      	ldr	r3, [r7, #32]
 800f1ae:	3324      	adds	r3, #36	; 0x24
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	0011      	movs	r1, r2
 800f1b4:	0018      	movs	r0, r3
 800f1b6:	f000 fd69 	bl	800fc8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1ba:	6a3b      	ldr	r3, [r7, #32]
 800f1bc:	0018      	movs	r0, r3
 800f1be:	f000 f8b1 	bl	800f324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1c2:	f000 fbbf 	bl	800f944 <xTaskResumeAll>
 800f1c6:	1e03      	subs	r3, r0, #0
 800f1c8:	d191      	bne.n	800f0ee <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800f1ca:	f001 fba1 	bl	8010910 <vPortYield>
 800f1ce:	e78e      	b.n	800f0ee <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f1d0:	6a3b      	ldr	r3, [r7, #32]
 800f1d2:	0018      	movs	r0, r3
 800f1d4:	f000 f8a6 	bl	800f324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1d8:	f000 fbb4 	bl	800f944 <xTaskResumeAll>
 800f1dc:	e787      	b.n	800f0ee <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	0018      	movs	r0, r3
 800f1e2:	f000 f89f 	bl	800f324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1e6:	f000 fbad 	bl	800f944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1ea:	6a3b      	ldr	r3, [r7, #32]
 800f1ec:	0018      	movs	r0, r3
 800f1ee:	f000 f8f7 	bl	800f3e0 <prvIsQueueEmpty>
 800f1f2:	1e03      	subs	r3, r0, #0
 800f1f4:	d100      	bne.n	800f1f8 <xQueueReceive+0x160>
 800f1f6:	e77a      	b.n	800f0ee <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1fa:	0018      	movs	r0, r3
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	b00a      	add	sp, #40	; 0x28
 800f200:	bd80      	pop	{r7, pc}

0800f202 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b086      	sub	sp, #24
 800f206:	af00      	add	r7, sp, #0
 800f208:	60f8      	str	r0, [r7, #12]
 800f20a:	60b9      	str	r1, [r7, #8]
 800f20c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f20e:	2300      	movs	r3, #0
 800f210:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f216:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d10e      	bne.n	800f23e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d14e      	bne.n	800f2c6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	0018      	movs	r0, r3
 800f22e:	f000 ff25 	bl	801007c <xTaskPriorityDisinherit>
 800f232:	0003      	movs	r3, r0
 800f234:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	609a      	str	r2, [r3, #8]
 800f23c:	e043      	b.n	800f2c6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d119      	bne.n	800f278 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6858      	ldr	r0, [r3, #4]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	0019      	movs	r1, r3
 800f250:	f003 fec8 	bl	8012fe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f25c:	18d2      	adds	r2, r2, r3
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	685a      	ldr	r2, [r3, #4]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d32b      	bcc.n	800f2c6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	605a      	str	r2, [r3, #4]
 800f276:	e026      	b.n	800f2c6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	68d8      	ldr	r0, [r3, #12]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	0019      	movs	r1, r3
 800f284:	f003 feae 	bl	8012fe4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	68da      	ldr	r2, [r3, #12]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f290:	425b      	negs	r3, r3
 800f292:	18d2      	adds	r2, r2, r3
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	68da      	ldr	r2, [r3, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d207      	bcs.n	800f2b4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	689a      	ldr	r2, [r3, #8]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ac:	425b      	negs	r3, r3
 800f2ae:	18d2      	adds	r2, r2, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d105      	bne.n	800f2c6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d002      	beq.n	800f2c6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f2ce:	697b      	ldr	r3, [r7, #20]
}
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	b006      	add	sp, #24
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d018      	beq.n	800f31c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	68da      	ldr	r2, [r3, #12]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f2:	18d2      	adds	r2, r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	68da      	ldr	r2, [r3, #12]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	689b      	ldr	r3, [r3, #8]
 800f300:	429a      	cmp	r2, r3
 800f302:	d303      	bcc.n	800f30c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68d9      	ldr	r1, [r3, #12]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	0018      	movs	r0, r3
 800f318:	f003 fe64 	bl	8012fe4 <memcpy>
	}
}
 800f31c:	46c0      	nop			; (mov r8, r8)
 800f31e:	46bd      	mov	sp, r7
 800f320:	b002      	add	sp, #8
 800f322:	bd80      	pop	{r7, pc}

0800f324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f32c:	f001 fb00 	bl	8010930 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f330:	230f      	movs	r3, #15
 800f332:	18fb      	adds	r3, r7, r3
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	2145      	movs	r1, #69	; 0x45
 800f338:	5c52      	ldrb	r2, [r2, r1]
 800f33a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f33c:	e013      	b.n	800f366 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f342:	2b00      	cmp	r3, #0
 800f344:	d016      	beq.n	800f374 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	3324      	adds	r3, #36	; 0x24
 800f34a:	0018      	movs	r0, r3
 800f34c:	f000 fce2 	bl	800fd14 <xTaskRemoveFromEventList>
 800f350:	1e03      	subs	r3, r0, #0
 800f352:	d001      	beq.n	800f358 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f354:	f000 fd9e 	bl	800fe94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f358:	210f      	movs	r1, #15
 800f35a:	187b      	adds	r3, r7, r1
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	3b01      	subs	r3, #1
 800f360:	b2da      	uxtb	r2, r3
 800f362:	187b      	adds	r3, r7, r1
 800f364:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f366:	230f      	movs	r3, #15
 800f368:	18fb      	adds	r3, r7, r3
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	b25b      	sxtb	r3, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	dce5      	bgt.n	800f33e <prvUnlockQueue+0x1a>
 800f372:	e000      	b.n	800f376 <prvUnlockQueue+0x52>
					break;
 800f374:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2245      	movs	r2, #69	; 0x45
 800f37a:	21ff      	movs	r1, #255	; 0xff
 800f37c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f37e:	f001 fae9 	bl	8010954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f382:	f001 fad5 	bl	8010930 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f386:	230e      	movs	r3, #14
 800f388:	18fb      	adds	r3, r7, r3
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	2144      	movs	r1, #68	; 0x44
 800f38e:	5c52      	ldrb	r2, [r2, r1]
 800f390:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f392:	e013      	b.n	800f3bc <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	691b      	ldr	r3, [r3, #16]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d016      	beq.n	800f3ca <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	3310      	adds	r3, #16
 800f3a0:	0018      	movs	r0, r3
 800f3a2:	f000 fcb7 	bl	800fd14 <xTaskRemoveFromEventList>
 800f3a6:	1e03      	subs	r3, r0, #0
 800f3a8:	d001      	beq.n	800f3ae <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800f3aa:	f000 fd73 	bl	800fe94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f3ae:	210e      	movs	r1, #14
 800f3b0:	187b      	adds	r3, r7, r1
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	b2da      	uxtb	r2, r3
 800f3b8:	187b      	adds	r3, r7, r1
 800f3ba:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3bc:	230e      	movs	r3, #14
 800f3be:	18fb      	adds	r3, r7, r3
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	b25b      	sxtb	r3, r3
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	dce5      	bgt.n	800f394 <prvUnlockQueue+0x70>
 800f3c8:	e000      	b.n	800f3cc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800f3ca:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2244      	movs	r2, #68	; 0x44
 800f3d0:	21ff      	movs	r1, #255	; 0xff
 800f3d2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f3d4:	f001 fabe 	bl	8010954 <vPortExitCritical>
}
 800f3d8:	46c0      	nop			; (mov r8, r8)
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	b004      	add	sp, #16
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3e8:	f001 faa2 	bl	8010930 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d102      	bne.n	800f3fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	e001      	b.n	800f3fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3fe:	f001 faa9 	bl	8010954 <vPortExitCritical>

	return xReturn;
 800f402:	68fb      	ldr	r3, [r7, #12]
}
 800f404:	0018      	movs	r0, r3
 800f406:	46bd      	mov	sp, r7
 800f408:	b004      	add	sp, #16
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f414:	f001 fa8c 	bl	8010930 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f420:	429a      	cmp	r2, r3
 800f422:	d102      	bne.n	800f42a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f424:	2301      	movs	r3, #1
 800f426:	60fb      	str	r3, [r7, #12]
 800f428:	e001      	b.n	800f42e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f42a:	2300      	movs	r3, #0
 800f42c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f42e:	f001 fa91 	bl	8010954 <vPortExitCritical>

	return xReturn;
 800f432:	68fb      	ldr	r3, [r7, #12]
}
 800f434:	0018      	movs	r0, r3
 800f436:	46bd      	mov	sp, r7
 800f438:	b004      	add	sp, #16
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f446:	2300      	movs	r3, #0
 800f448:	60fb      	str	r3, [r7, #12]
 800f44a:	e015      	b.n	800f478 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f44c:	4b0e      	ldr	r3, [pc, #56]	; (800f488 <vQueueAddToRegistry+0x4c>)
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	00d2      	lsls	r2, r2, #3
 800f452:	58d3      	ldr	r3, [r2, r3]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10c      	bne.n	800f472 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f458:	4b0b      	ldr	r3, [pc, #44]	; (800f488 <vQueueAddToRegistry+0x4c>)
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	00d2      	lsls	r2, r2, #3
 800f45e:	6839      	ldr	r1, [r7, #0]
 800f460:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f462:	4a09      	ldr	r2, [pc, #36]	; (800f488 <vQueueAddToRegistry+0x4c>)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	18d3      	adds	r3, r2, r3
 800f46a:	3304      	adds	r3, #4
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f470:	e006      	b.n	800f480 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	3301      	adds	r3, #1
 800f476:	60fb      	str	r3, [r7, #12]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2b07      	cmp	r3, #7
 800f47c:	d9e6      	bls.n	800f44c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f47e:	46c0      	nop			; (mov r8, r8)
 800f480:	46c0      	nop			; (mov r8, r8)
 800f482:	46bd      	mov	sp, r7
 800f484:	b004      	add	sp, #16
 800f486:	bd80      	pop	{r7, pc}
 800f488:	200044a8 	.word	0x200044a8

0800f48c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b086      	sub	sp, #24
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f49c:	f001 fa48 	bl	8010930 <vPortEnterCritical>
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	2244      	movs	r2, #68	; 0x44
 800f4a4:	5c9b      	ldrb	r3, [r3, r2]
 800f4a6:	b25b      	sxtb	r3, r3
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	d103      	bne.n	800f4b4 <vQueueWaitForMessageRestricted+0x28>
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	2244      	movs	r2, #68	; 0x44
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	5499      	strb	r1, [r3, r2]
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	2245      	movs	r2, #69	; 0x45
 800f4b8:	5c9b      	ldrb	r3, [r3, r2]
 800f4ba:	b25b      	sxtb	r3, r3
 800f4bc:	3301      	adds	r3, #1
 800f4be:	d103      	bne.n	800f4c8 <vQueueWaitForMessageRestricted+0x3c>
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	2245      	movs	r2, #69	; 0x45
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	5499      	strb	r1, [r3, r2]
 800f4c8:	f001 fa44 	bl	8010954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d106      	bne.n	800f4e2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	3324      	adds	r3, #36	; 0x24
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	68b9      	ldr	r1, [r7, #8]
 800f4dc:	0018      	movs	r0, r3
 800f4de:	f000 fbf3 	bl	800fcc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	0018      	movs	r0, r3
 800f4e6:	f7ff ff1d 	bl	800f324 <prvUnlockQueue>
	}
 800f4ea:	46c0      	nop			; (mov r8, r8)
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	b006      	add	sp, #24
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f4f2:	b590      	push	{r4, r7, lr}
 800f4f4:	b08d      	sub	sp, #52	; 0x34
 800f4f6:	af04      	add	r7, sp, #16
 800f4f8:	60f8      	str	r0, [r7, #12]
 800f4fa:	60b9      	str	r1, [r7, #8]
 800f4fc:	607a      	str	r2, [r7, #4]
 800f4fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f502:	2b00      	cmp	r3, #0
 800f504:	d101      	bne.n	800f50a <xTaskCreateStatic+0x18>
 800f506:	b672      	cpsid	i
 800f508:	e7fe      	b.n	800f508 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800f50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d101      	bne.n	800f514 <xTaskCreateStatic+0x22>
 800f510:	b672      	cpsid	i
 800f512:	e7fe      	b.n	800f512 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f514:	23a8      	movs	r3, #168	; 0xa8
 800f516:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	2ba8      	cmp	r3, #168	; 0xa8
 800f51c:	d001      	beq.n	800f522 <xTaskCreateStatic+0x30>
 800f51e:	b672      	cpsid	i
 800f520:	e7fe      	b.n	800f520 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f522:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f526:	2b00      	cmp	r3, #0
 800f528:	d020      	beq.n	800f56c <xTaskCreateStatic+0x7a>
 800f52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d01d      	beq.n	800f56c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f538:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	22a5      	movs	r2, #165	; 0xa5
 800f53e:	2102      	movs	r1, #2
 800f540:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f542:	683c      	ldr	r4, [r7, #0]
 800f544:	687a      	ldr	r2, [r7, #4]
 800f546:	68b9      	ldr	r1, [r7, #8]
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	2300      	movs	r3, #0
 800f54c:	9303      	str	r3, [sp, #12]
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	9302      	str	r3, [sp, #8]
 800f552:	2318      	movs	r3, #24
 800f554:	18fb      	adds	r3, r7, r3
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	0023      	movs	r3, r4
 800f55e:	f000 f859 	bl	800f614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	0018      	movs	r0, r3
 800f566:	f000 f8f5 	bl	800f754 <prvAddNewTaskToReadyList>
 800f56a:	e001      	b.n	800f570 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800f56c:	2300      	movs	r3, #0
 800f56e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f570:	69bb      	ldr	r3, [r7, #24]
	}
 800f572:	0018      	movs	r0, r3
 800f574:	46bd      	mov	sp, r7
 800f576:	b009      	add	sp, #36	; 0x24
 800f578:	bd90      	pop	{r4, r7, pc}

0800f57a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f57a:	b590      	push	{r4, r7, lr}
 800f57c:	b08d      	sub	sp, #52	; 0x34
 800f57e:	af04      	add	r7, sp, #16
 800f580:	60f8      	str	r0, [r7, #12]
 800f582:	60b9      	str	r1, [r7, #8]
 800f584:	603b      	str	r3, [r7, #0]
 800f586:	1dbb      	adds	r3, r7, #6
 800f588:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f58a:	1dbb      	adds	r3, r7, #6
 800f58c:	881b      	ldrh	r3, [r3, #0]
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	0018      	movs	r0, r3
 800f592:	f001 fa65 	bl	8010a60 <pvPortMalloc>
 800f596:	0003      	movs	r3, r0
 800f598:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d010      	beq.n	800f5c2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f5a0:	20a8      	movs	r0, #168	; 0xa8
 800f5a2:	f001 fa5d 	bl	8010a60 <pvPortMalloc>
 800f5a6:	0003      	movs	r3, r0
 800f5a8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d003      	beq.n	800f5b8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	631a      	str	r2, [r3, #48]	; 0x30
 800f5b6:	e006      	b.n	800f5c6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	0018      	movs	r0, r3
 800f5bc:	f001 fafc 	bl	8010bb8 <vPortFree>
 800f5c0:	e001      	b.n	800f5c6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d01a      	beq.n	800f602 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	22a5      	movs	r2, #165	; 0xa5
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f5d4:	1dbb      	adds	r3, r7, #6
 800f5d6:	881a      	ldrh	r2, [r3, #0]
 800f5d8:	683c      	ldr	r4, [r7, #0]
 800f5da:	68b9      	ldr	r1, [r7, #8]
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	2300      	movs	r3, #0
 800f5e0:	9303      	str	r3, [sp, #12]
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	9302      	str	r3, [sp, #8]
 800f5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5e8:	9301      	str	r3, [sp, #4]
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	0023      	movs	r3, r4
 800f5f0:	f000 f810 	bl	800f614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	0018      	movs	r0, r3
 800f5f8:	f000 f8ac 	bl	800f754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	61bb      	str	r3, [r7, #24]
 800f600:	e002      	b.n	800f608 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f602:	2301      	movs	r3, #1
 800f604:	425b      	negs	r3, r3
 800f606:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f608:	69bb      	ldr	r3, [r7, #24]
	}
 800f60a:	0018      	movs	r0, r3
 800f60c:	46bd      	mov	sp, r7
 800f60e:	b009      	add	sp, #36	; 0x24
 800f610:	bd90      	pop	{r4, r7, pc}
	...

0800f614 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	001a      	movs	r2, r3
 800f62c:	21a5      	movs	r1, #165	; 0xa5
 800f62e:	f003 fb11 	bl	8012c54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4942      	ldr	r1, [pc, #264]	; (800f744 <prvInitialiseNewTask+0x130>)
 800f63a:	468c      	mov	ip, r1
 800f63c:	4463      	add	r3, ip
 800f63e:	009b      	lsls	r3, r3, #2
 800f640:	18d3      	adds	r3, r2, r3
 800f642:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	2207      	movs	r2, #7
 800f648:	4393      	bics	r3, r2
 800f64a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	2207      	movs	r2, #7
 800f650:	4013      	ands	r3, r2
 800f652:	d001      	beq.n	800f658 <prvInitialiseNewTask+0x44>
 800f654:	b672      	cpsid	i
 800f656:	e7fe      	b.n	800f656 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d020      	beq.n	800f6a0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f65e:	2300      	movs	r3, #0
 800f660:	617b      	str	r3, [r7, #20]
 800f662:	e013      	b.n	800f68c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	18d3      	adds	r3, r2, r3
 800f66a:	7818      	ldrb	r0, [r3, #0]
 800f66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f66e:	2134      	movs	r1, #52	; 0x34
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	18d3      	adds	r3, r2, r3
 800f674:	185b      	adds	r3, r3, r1
 800f676:	1c02      	adds	r2, r0, #0
 800f678:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	18d3      	adds	r3, r2, r3
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d006      	beq.n	800f694 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	3301      	adds	r3, #1
 800f68a:	617b      	str	r3, [r7, #20]
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	2b0f      	cmp	r3, #15
 800f690:	d9e8      	bls.n	800f664 <prvInitialiseNewTask+0x50>
 800f692:	e000      	b.n	800f696 <prvInitialiseNewTask+0x82>
			{
				break;
 800f694:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f698:	2243      	movs	r2, #67	; 0x43
 800f69a:	2100      	movs	r1, #0
 800f69c:	5499      	strb	r1, [r3, r2]
 800f69e:	e003      	b.n	800f6a8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a2:	2234      	movs	r2, #52	; 0x34
 800f6a4:	2100      	movs	r1, #0
 800f6a6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f6a8:	6a3b      	ldr	r3, [r7, #32]
 800f6aa:	2b37      	cmp	r3, #55	; 0x37
 800f6ac:	d901      	bls.n	800f6b2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f6ae:	2337      	movs	r3, #55	; 0x37
 800f6b0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b4:	6a3a      	ldr	r2, [r7, #32]
 800f6b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ba:	6a3a      	ldr	r2, [r7, #32]
 800f6bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	0018      	movs	r0, r3
 800f6ca:	f7ff fa29 	bl	800eb20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d0:	3318      	adds	r3, #24
 800f6d2:	0018      	movs	r0, r3
 800f6d4:	f7ff fa24 	bl	800eb20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6de:	6a3b      	ldr	r3, [r7, #32]
 800f6e0:	2238      	movs	r2, #56	; 0x38
 800f6e2:	1ad2      	subs	r2, r2, r3
 800f6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f0:	22a0      	movs	r2, #160	; 0xa0
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f8:	22a4      	movs	r2, #164	; 0xa4
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f700:	3354      	adds	r3, #84	; 0x54
 800f702:	224c      	movs	r2, #76	; 0x4c
 800f704:	2100      	movs	r1, #0
 800f706:	0018      	movs	r0, r3
 800f708:	f003 faa4 	bl	8012c54 <memset>
 800f70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70e:	4a0e      	ldr	r2, [pc, #56]	; (800f748 <prvInitialiseNewTask+0x134>)
 800f710:	659a      	str	r2, [r3, #88]	; 0x58
 800f712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f714:	4a0d      	ldr	r2, [pc, #52]	; (800f74c <prvInitialiseNewTask+0x138>)
 800f716:	65da      	str	r2, [r3, #92]	; 0x5c
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	4a0d      	ldr	r2, [pc, #52]	; (800f750 <prvInitialiseNewTask+0x13c>)
 800f71c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f71e:	683a      	ldr	r2, [r7, #0]
 800f720:	68f9      	ldr	r1, [r7, #12]
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	0018      	movs	r0, r3
 800f726:	f001 f86b 	bl	8010800 <pxPortInitialiseStack>
 800f72a:	0002      	movs	r2, r0
 800f72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f732:	2b00      	cmp	r3, #0
 800f734:	d002      	beq.n	800f73c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f73a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f73c:	46c0      	nop			; (mov r8, r8)
 800f73e:	46bd      	mov	sp, r7
 800f740:	b006      	add	sp, #24
 800f742:	bd80      	pop	{r7, pc}
 800f744:	3fffffff 	.word	0x3fffffff
 800f748:	2000573c 	.word	0x2000573c
 800f74c:	200057a4 	.word	0x200057a4
 800f750:	2000580c 	.word	0x2000580c

0800f754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f75c:	f001 f8e8 	bl	8010930 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f760:	4b2a      	ldr	r3, [pc, #168]	; (800f80c <prvAddNewTaskToReadyList+0xb8>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	1c5a      	adds	r2, r3, #1
 800f766:	4b29      	ldr	r3, [pc, #164]	; (800f80c <prvAddNewTaskToReadyList+0xb8>)
 800f768:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f76a:	4b29      	ldr	r3, [pc, #164]	; (800f810 <prvAddNewTaskToReadyList+0xbc>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d109      	bne.n	800f786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f772:	4b27      	ldr	r3, [pc, #156]	; (800f810 <prvAddNewTaskToReadyList+0xbc>)
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f778:	4b24      	ldr	r3, [pc, #144]	; (800f80c <prvAddNewTaskToReadyList+0xb8>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d110      	bne.n	800f7a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f780:	f000 fba2 	bl	800fec8 <prvInitialiseTaskLists>
 800f784:	e00d      	b.n	800f7a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f786:	4b23      	ldr	r3, [pc, #140]	; (800f814 <prvAddNewTaskToReadyList+0xc0>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d109      	bne.n	800f7a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f78e:	4b20      	ldr	r3, [pc, #128]	; (800f810 <prvAddNewTaskToReadyList+0xbc>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f798:	429a      	cmp	r2, r3
 800f79a:	d802      	bhi.n	800f7a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f79c:	4b1c      	ldr	r3, [pc, #112]	; (800f810 <prvAddNewTaskToReadyList+0xbc>)
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f7a2:	4b1d      	ldr	r3, [pc, #116]	; (800f818 <prvAddNewTaskToReadyList+0xc4>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	4b1b      	ldr	r3, [pc, #108]	; (800f818 <prvAddNewTaskToReadyList+0xc4>)
 800f7aa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f7ac:	4b1a      	ldr	r3, [pc, #104]	; (800f818 <prvAddNewTaskToReadyList+0xc4>)
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b8:	4b18      	ldr	r3, [pc, #96]	; (800f81c <prvAddNewTaskToReadyList+0xc8>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d903      	bls.n	800f7c8 <prvAddNewTaskToReadyList+0x74>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7c4:	4b15      	ldr	r3, [pc, #84]	; (800f81c <prvAddNewTaskToReadyList+0xc8>)
 800f7c6:	601a      	str	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7cc:	0013      	movs	r3, r2
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	189b      	adds	r3, r3, r2
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	4a12      	ldr	r2, [pc, #72]	; (800f820 <prvAddNewTaskToReadyList+0xcc>)
 800f7d6:	189a      	adds	r2, r3, r2
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	3304      	adds	r3, #4
 800f7dc:	0019      	movs	r1, r3
 800f7de:	0010      	movs	r0, r2
 800f7e0:	f7ff f9a9 	bl	800eb36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f7e4:	f001 f8b6 	bl	8010954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f7e8:	4b0a      	ldr	r3, [pc, #40]	; (800f814 <prvAddNewTaskToReadyList+0xc0>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d008      	beq.n	800f802 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f7f0:	4b07      	ldr	r3, [pc, #28]	; (800f810 <prvAddNewTaskToReadyList+0xbc>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d201      	bcs.n	800f802 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f7fe:	f001 f887 	bl	8010910 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f802:	46c0      	nop			; (mov r8, r8)
 800f804:	46bd      	mov	sp, r7
 800f806:	b002      	add	sp, #8
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	46c0      	nop			; (mov r8, r8)
 800f80c:	200049bc 	.word	0x200049bc
 800f810:	200044e8 	.word	0x200044e8
 800f814:	200049c8 	.word	0x200049c8
 800f818:	200049d8 	.word	0x200049d8
 800f81c:	200049c4 	.word	0x200049c4
 800f820:	200044ec 	.word	0x200044ec

0800f824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f82c:	2300      	movs	r3, #0
 800f82e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d010      	beq.n	800f858 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f836:	4b0d      	ldr	r3, [pc, #52]	; (800f86c <vTaskDelay+0x48>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d001      	beq.n	800f842 <vTaskDelay+0x1e>
 800f83e:	b672      	cpsid	i
 800f840:	e7fe      	b.n	800f840 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800f842:	f000 f873 	bl	800f92c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2100      	movs	r1, #0
 800f84a:	0018      	movs	r0, r3
 800f84c:	f000 fc72 	bl	8010134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f850:	f000 f878 	bl	800f944 <xTaskResumeAll>
 800f854:	0003      	movs	r3, r0
 800f856:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d101      	bne.n	800f862 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800f85e:	f001 f857 	bl	8010910 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f862:	46c0      	nop			; (mov r8, r8)
 800f864:	46bd      	mov	sp, r7
 800f866:	b004      	add	sp, #16
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	46c0      	nop			; (mov r8, r8)
 800f86c:	200049e4 	.word	0x200049e4

0800f870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f870:	b590      	push	{r4, r7, lr}
 800f872:	b089      	sub	sp, #36	; 0x24
 800f874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f876:	2300      	movs	r3, #0
 800f878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f87a:	2300      	movs	r3, #0
 800f87c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f87e:	003a      	movs	r2, r7
 800f880:	1d39      	adds	r1, r7, #4
 800f882:	2308      	movs	r3, #8
 800f884:	18fb      	adds	r3, r7, r3
 800f886:	0018      	movs	r0, r3
 800f888:	f7ff f8fc 	bl	800ea84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f88c:	683c      	ldr	r4, [r7, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	491e      	ldr	r1, [pc, #120]	; (800f90c <vTaskStartScheduler+0x9c>)
 800f894:	481e      	ldr	r0, [pc, #120]	; (800f910 <vTaskStartScheduler+0xa0>)
 800f896:	9202      	str	r2, [sp, #8]
 800f898:	9301      	str	r3, [sp, #4]
 800f89a:	2300      	movs	r3, #0
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	2300      	movs	r3, #0
 800f8a0:	0022      	movs	r2, r4
 800f8a2:	f7ff fe26 	bl	800f4f2 <xTaskCreateStatic>
 800f8a6:	0002      	movs	r2, r0
 800f8a8:	4b1a      	ldr	r3, [pc, #104]	; (800f914 <vTaskStartScheduler+0xa4>)
 800f8aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f8ac:	4b19      	ldr	r3, [pc, #100]	; (800f914 <vTaskStartScheduler+0xa4>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	60fb      	str	r3, [r7, #12]
 800f8b8:	e001      	b.n	800f8be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d103      	bne.n	800f8cc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800f8c4:	f000 fc8a 	bl	80101dc <xTimerCreateTimerTask>
 800f8c8:	0003      	movs	r3, r0
 800f8ca:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d113      	bne.n	800f8fa <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800f8d2:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f8d4:	4b10      	ldr	r3, [pc, #64]	; (800f918 <vTaskStartScheduler+0xa8>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	3354      	adds	r3, #84	; 0x54
 800f8da:	001a      	movs	r2, r3
 800f8dc:	4b0f      	ldr	r3, [pc, #60]	; (800f91c <vTaskStartScheduler+0xac>)
 800f8de:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f8e0:	4b0f      	ldr	r3, [pc, #60]	; (800f920 <vTaskStartScheduler+0xb0>)
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	4252      	negs	r2, r2
 800f8e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f8e8:	4b0e      	ldr	r3, [pc, #56]	; (800f924 <vTaskStartScheduler+0xb4>)
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f8ee:	4b0e      	ldr	r3, [pc, #56]	; (800f928 <vTaskStartScheduler+0xb8>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f8f4:	f000 ffe8 	bl	80108c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f8f8:	e004      	b.n	800f904 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	d101      	bne.n	800f904 <vTaskStartScheduler+0x94>
 800f900:	b672      	cpsid	i
 800f902:	e7fe      	b.n	800f902 <vTaskStartScheduler+0x92>
}
 800f904:	46c0      	nop			; (mov r8, r8)
 800f906:	46bd      	mov	sp, r7
 800f908:	b005      	add	sp, #20
 800f90a:	bd90      	pop	{r4, r7, pc}
 800f90c:	08017e38 	.word	0x08017e38
 800f910:	0800fea9 	.word	0x0800fea9
 800f914:	200049e0 	.word	0x200049e0
 800f918:	200044e8 	.word	0x200044e8
 800f91c:	200002c8 	.word	0x200002c8
 800f920:	200049dc 	.word	0x200049dc
 800f924:	200049c8 	.word	0x200049c8
 800f928:	200049c0 	.word	0x200049c0

0800f92c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f930:	4b03      	ldr	r3, [pc, #12]	; (800f940 <vTaskSuspendAll+0x14>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	4b02      	ldr	r3, [pc, #8]	; (800f940 <vTaskSuspendAll+0x14>)
 800f938:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f93a:	46c0      	nop			; (mov r8, r8)
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	200049e4 	.word	0x200049e4

0800f944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f94e:	2300      	movs	r3, #0
 800f950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f952:	4b3a      	ldr	r3, [pc, #232]	; (800fa3c <xTaskResumeAll+0xf8>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d101      	bne.n	800f95e <xTaskResumeAll+0x1a>
 800f95a:	b672      	cpsid	i
 800f95c:	e7fe      	b.n	800f95c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f95e:	f000 ffe7 	bl	8010930 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f962:	4b36      	ldr	r3, [pc, #216]	; (800fa3c <xTaskResumeAll+0xf8>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	1e5a      	subs	r2, r3, #1
 800f968:	4b34      	ldr	r3, [pc, #208]	; (800fa3c <xTaskResumeAll+0xf8>)
 800f96a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f96c:	4b33      	ldr	r3, [pc, #204]	; (800fa3c <xTaskResumeAll+0xf8>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d15b      	bne.n	800fa2c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f974:	4b32      	ldr	r3, [pc, #200]	; (800fa40 <xTaskResumeAll+0xfc>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d057      	beq.n	800fa2c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f97c:	e02f      	b.n	800f9de <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f97e:	4b31      	ldr	r3, [pc, #196]	; (800fa44 <xTaskResumeAll+0x100>)
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	3318      	adds	r3, #24
 800f98a:	0018      	movs	r0, r3
 800f98c:	f7ff f92b 	bl	800ebe6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	3304      	adds	r3, #4
 800f994:	0018      	movs	r0, r3
 800f996:	f7ff f926 	bl	800ebe6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f99e:	4b2a      	ldr	r3, [pc, #168]	; (800fa48 <xTaskResumeAll+0x104>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d903      	bls.n	800f9ae <xTaskResumeAll+0x6a>
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9aa:	4b27      	ldr	r3, [pc, #156]	; (800fa48 <xTaskResumeAll+0x104>)
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9b2:	0013      	movs	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	189b      	adds	r3, r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	4a24      	ldr	r2, [pc, #144]	; (800fa4c <xTaskResumeAll+0x108>)
 800f9bc:	189a      	adds	r2, r3, r2
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	0019      	movs	r1, r3
 800f9c4:	0010      	movs	r0, r2
 800f9c6:	f7ff f8b6 	bl	800eb36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ce:	4b20      	ldr	r3, [pc, #128]	; (800fa50 <xTaskResumeAll+0x10c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d302      	bcc.n	800f9de <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800f9d8:	4b1e      	ldr	r3, [pc, #120]	; (800fa54 <xTaskResumeAll+0x110>)
 800f9da:	2201      	movs	r2, #1
 800f9dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9de:	4b19      	ldr	r3, [pc, #100]	; (800fa44 <xTaskResumeAll+0x100>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1cb      	bne.n	800f97e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f9ec:	f000 fb0c 	bl	8010008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f9f0:	4b19      	ldr	r3, [pc, #100]	; (800fa58 <xTaskResumeAll+0x114>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00f      	beq.n	800fa1c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f9fc:	f000 f83c 	bl	800fa78 <xTaskIncrementTick>
 800fa00:	1e03      	subs	r3, r0, #0
 800fa02:	d002      	beq.n	800fa0a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800fa04:	4b13      	ldr	r3, [pc, #76]	; (800fa54 <xTaskResumeAll+0x110>)
 800fa06:	2201      	movs	r2, #1
 800fa08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1f2      	bne.n	800f9fc <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800fa16:	4b10      	ldr	r3, [pc, #64]	; (800fa58 <xTaskResumeAll+0x114>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa1c:	4b0d      	ldr	r3, [pc, #52]	; (800fa54 <xTaskResumeAll+0x110>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d003      	beq.n	800fa2c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa24:	2301      	movs	r3, #1
 800fa26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa28:	f000 ff72 	bl	8010910 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa2c:	f000 ff92 	bl	8010954 <vPortExitCritical>

	return xAlreadyYielded;
 800fa30:	68bb      	ldr	r3, [r7, #8]
}
 800fa32:	0018      	movs	r0, r3
 800fa34:	46bd      	mov	sp, r7
 800fa36:	b004      	add	sp, #16
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	46c0      	nop			; (mov r8, r8)
 800fa3c:	200049e4 	.word	0x200049e4
 800fa40:	200049bc 	.word	0x200049bc
 800fa44:	2000497c 	.word	0x2000497c
 800fa48:	200049c4 	.word	0x200049c4
 800fa4c:	200044ec 	.word	0x200044ec
 800fa50:	200044e8 	.word	0x200044e8
 800fa54:	200049d0 	.word	0x200049d0
 800fa58:	200049cc 	.word	0x200049cc

0800fa5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fa62:	4b04      	ldr	r3, [pc, #16]	; (800fa74 <xTaskGetTickCount+0x18>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fa68:	687b      	ldr	r3, [r7, #4]
}
 800fa6a:	0018      	movs	r0, r3
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	b002      	add	sp, #8
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	46c0      	nop			; (mov r8, r8)
 800fa74:	200049c0 	.word	0x200049c0

0800fa78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa82:	4b4a      	ldr	r3, [pc, #296]	; (800fbac <xTaskIncrementTick+0x134>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d000      	beq.n	800fa8c <xTaskIncrementTick+0x14>
 800fa8a:	e084      	b.n	800fb96 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fa8c:	4b48      	ldr	r3, [pc, #288]	; (800fbb0 <xTaskIncrementTick+0x138>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	3301      	adds	r3, #1
 800fa92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fa94:	4b46      	ldr	r3, [pc, #280]	; (800fbb0 <xTaskIncrementTick+0x138>)
 800fa96:	693a      	ldr	r2, [r7, #16]
 800fa98:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d117      	bne.n	800fad0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800faa0:	4b44      	ldr	r3, [pc, #272]	; (800fbb4 <xTaskIncrementTick+0x13c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <xTaskIncrementTick+0x36>
 800faaa:	b672      	cpsid	i
 800faac:	e7fe      	b.n	800faac <xTaskIncrementTick+0x34>
 800faae:	4b41      	ldr	r3, [pc, #260]	; (800fbb4 <xTaskIncrementTick+0x13c>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	60fb      	str	r3, [r7, #12]
 800fab4:	4b40      	ldr	r3, [pc, #256]	; (800fbb8 <xTaskIncrementTick+0x140>)
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	4b3e      	ldr	r3, [pc, #248]	; (800fbb4 <xTaskIncrementTick+0x13c>)
 800faba:	601a      	str	r2, [r3, #0]
 800fabc:	4b3e      	ldr	r3, [pc, #248]	; (800fbb8 <xTaskIncrementTick+0x140>)
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	601a      	str	r2, [r3, #0]
 800fac2:	4b3e      	ldr	r3, [pc, #248]	; (800fbbc <xTaskIncrementTick+0x144>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	1c5a      	adds	r2, r3, #1
 800fac8:	4b3c      	ldr	r3, [pc, #240]	; (800fbbc <xTaskIncrementTick+0x144>)
 800faca:	601a      	str	r2, [r3, #0]
 800facc:	f000 fa9c 	bl	8010008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fad0:	4b3b      	ldr	r3, [pc, #236]	; (800fbc0 <xTaskIncrementTick+0x148>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	693a      	ldr	r2, [r7, #16]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d349      	bcc.n	800fb6e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fada:	4b36      	ldr	r3, [pc, #216]	; (800fbb4 <xTaskIncrementTick+0x13c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d104      	bne.n	800faee <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fae4:	4b36      	ldr	r3, [pc, #216]	; (800fbc0 <xTaskIncrementTick+0x148>)
 800fae6:	2201      	movs	r2, #1
 800fae8:	4252      	negs	r2, r2
 800faea:	601a      	str	r2, [r3, #0]
					break;
 800faec:	e03f      	b.n	800fb6e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faee:	4b31      	ldr	r3, [pc, #196]	; (800fbb4 <xTaskIncrementTick+0x13c>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fafe:	693a      	ldr	r2, [r7, #16]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d203      	bcs.n	800fb0e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb06:	4b2e      	ldr	r3, [pc, #184]	; (800fbc0 <xTaskIncrementTick+0x148>)
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb0c:	e02f      	b.n	800fb6e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	3304      	adds	r3, #4
 800fb12:	0018      	movs	r0, r3
 800fb14:	f7ff f867 	bl	800ebe6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d004      	beq.n	800fb2a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	3318      	adds	r3, #24
 800fb24:	0018      	movs	r0, r3
 800fb26:	f7ff f85e 	bl	800ebe6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2e:	4b25      	ldr	r3, [pc, #148]	; (800fbc4 <xTaskIncrementTick+0x14c>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d903      	bls.n	800fb3e <xTaskIncrementTick+0xc6>
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3a:	4b22      	ldr	r3, [pc, #136]	; (800fbc4 <xTaskIncrementTick+0x14c>)
 800fb3c:	601a      	str	r2, [r3, #0]
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb42:	0013      	movs	r3, r2
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	189b      	adds	r3, r3, r2
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	4a1f      	ldr	r2, [pc, #124]	; (800fbc8 <xTaskIncrementTick+0x150>)
 800fb4c:	189a      	adds	r2, r3, r2
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	3304      	adds	r3, #4
 800fb52:	0019      	movs	r1, r3
 800fb54:	0010      	movs	r0, r2
 800fb56:	f7fe ffee 	bl	800eb36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb5e:	4b1b      	ldr	r3, [pc, #108]	; (800fbcc <xTaskIncrementTick+0x154>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d3b8      	bcc.n	800fada <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb6c:	e7b5      	b.n	800fada <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fb6e:	4b17      	ldr	r3, [pc, #92]	; (800fbcc <xTaskIncrementTick+0x154>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb74:	4914      	ldr	r1, [pc, #80]	; (800fbc8 <xTaskIncrementTick+0x150>)
 800fb76:	0013      	movs	r3, r2
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	189b      	adds	r3, r3, r2
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	585b      	ldr	r3, [r3, r1]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d901      	bls.n	800fb88 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800fb84:	2301      	movs	r3, #1
 800fb86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fb88:	4b11      	ldr	r3, [pc, #68]	; (800fbd0 <xTaskIncrementTick+0x158>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d007      	beq.n	800fba0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800fb90:	2301      	movs	r3, #1
 800fb92:	617b      	str	r3, [r7, #20]
 800fb94:	e004      	b.n	800fba0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fb96:	4b0f      	ldr	r3, [pc, #60]	; (800fbd4 <xTaskIncrementTick+0x15c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	1c5a      	adds	r2, r3, #1
 800fb9c:	4b0d      	ldr	r3, [pc, #52]	; (800fbd4 <xTaskIncrementTick+0x15c>)
 800fb9e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fba0:	697b      	ldr	r3, [r7, #20]
}
 800fba2:	0018      	movs	r0, r3
 800fba4:	46bd      	mov	sp, r7
 800fba6:	b006      	add	sp, #24
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	46c0      	nop			; (mov r8, r8)
 800fbac:	200049e4 	.word	0x200049e4
 800fbb0:	200049c0 	.word	0x200049c0
 800fbb4:	20004974 	.word	0x20004974
 800fbb8:	20004978 	.word	0x20004978
 800fbbc:	200049d4 	.word	0x200049d4
 800fbc0:	200049dc 	.word	0x200049dc
 800fbc4:	200049c4 	.word	0x200049c4
 800fbc8:	200044ec 	.word	0x200044ec
 800fbcc:	200044e8 	.word	0x200044e8
 800fbd0:	200049d0 	.word	0x200049d0
 800fbd4:	200049cc 	.word	0x200049cc

0800fbd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fbde:	4b25      	ldr	r3, [pc, #148]	; (800fc74 <vTaskSwitchContext+0x9c>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d003      	beq.n	800fbee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fbe6:	4b24      	ldr	r3, [pc, #144]	; (800fc78 <vTaskSwitchContext+0xa0>)
 800fbe8:	2201      	movs	r2, #1
 800fbea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fbec:	e03d      	b.n	800fc6a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800fbee:	4b22      	ldr	r3, [pc, #136]	; (800fc78 <vTaskSwitchContext+0xa0>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbf4:	4b21      	ldr	r3, [pc, #132]	; (800fc7c <vTaskSwitchContext+0xa4>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	607b      	str	r3, [r7, #4]
 800fbfa:	e007      	b.n	800fc0c <vTaskSwitchContext+0x34>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <vTaskSwitchContext+0x2e>
 800fc02:	b672      	cpsid	i
 800fc04:	e7fe      	b.n	800fc04 <vTaskSwitchContext+0x2c>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	607b      	str	r3, [r7, #4]
 800fc0c:	491c      	ldr	r1, [pc, #112]	; (800fc80 <vTaskSwitchContext+0xa8>)
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	0013      	movs	r3, r2
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	189b      	adds	r3, r3, r2
 800fc16:	009b      	lsls	r3, r3, #2
 800fc18:	585b      	ldr	r3, [r3, r1]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d0ee      	beq.n	800fbfc <vTaskSwitchContext+0x24>
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	0013      	movs	r3, r2
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	189b      	adds	r3, r3, r2
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	4a15      	ldr	r2, [pc, #84]	; (800fc80 <vTaskSwitchContext+0xa8>)
 800fc2a:	189b      	adds	r3, r3, r2
 800fc2c:	603b      	str	r3, [r7, #0]
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	685a      	ldr	r2, [r3, #4]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	605a      	str	r2, [r3, #4]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	3308      	adds	r3, #8
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d104      	bne.n	800fc4e <vTaskSwitchContext+0x76>
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	685a      	ldr	r2, [r3, #4]
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	605a      	str	r2, [r3, #4]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	68da      	ldr	r2, [r3, #12]
 800fc54:	4b0b      	ldr	r3, [pc, #44]	; (800fc84 <vTaskSwitchContext+0xac>)
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	4b08      	ldr	r3, [pc, #32]	; (800fc7c <vTaskSwitchContext+0xa4>)
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fc5e:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <vTaskSwitchContext+0xac>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3354      	adds	r3, #84	; 0x54
 800fc64:	001a      	movs	r2, r3
 800fc66:	4b08      	ldr	r3, [pc, #32]	; (800fc88 <vTaskSwitchContext+0xb0>)
 800fc68:	601a      	str	r2, [r3, #0]
}
 800fc6a:	46c0      	nop			; (mov r8, r8)
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	b002      	add	sp, #8
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	46c0      	nop			; (mov r8, r8)
 800fc74:	200049e4 	.word	0x200049e4
 800fc78:	200049d0 	.word	0x200049d0
 800fc7c:	200049c4 	.word	0x200049c4
 800fc80:	200044ec 	.word	0x200044ec
 800fc84:	200044e8 	.word	0x200044e8
 800fc88:	200002c8 	.word	0x200002c8

0800fc8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d101      	bne.n	800fca0 <vTaskPlaceOnEventList+0x14>
 800fc9c:	b672      	cpsid	i
 800fc9e:	e7fe      	b.n	800fc9e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fca0:	4b08      	ldr	r3, [pc, #32]	; (800fcc4 <vTaskPlaceOnEventList+0x38>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	3318      	adds	r3, #24
 800fca6:	001a      	movs	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	0011      	movs	r1, r2
 800fcac:	0018      	movs	r0, r3
 800fcae:	f7fe ff64 	bl	800eb7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2101      	movs	r1, #1
 800fcb6:	0018      	movs	r0, r3
 800fcb8:	f000 fa3c 	bl	8010134 <prvAddCurrentTaskToDelayedList>
}
 800fcbc:	46c0      	nop			; (mov r8, r8)
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	b002      	add	sp, #8
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	200044e8 	.word	0x200044e8

0800fcc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	60b9      	str	r1, [r7, #8]
 800fcd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <vTaskPlaceOnEventListRestricted+0x16>
 800fcda:	b672      	cpsid	i
 800fcdc:	e7fe      	b.n	800fcdc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fcde:	4b0c      	ldr	r3, [pc, #48]	; (800fd10 <vTaskPlaceOnEventListRestricted+0x48>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	3318      	adds	r3, #24
 800fce4:	001a      	movs	r2, r3
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	0011      	movs	r1, r2
 800fcea:	0018      	movs	r0, r3
 800fcec:	f7fe ff23 	bl	800eb36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d002      	beq.n	800fcfc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	425b      	negs	r3, r3
 800fcfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	0011      	movs	r1, r2
 800fd02:	0018      	movs	r0, r3
 800fd04:	f000 fa16 	bl	8010134 <prvAddCurrentTaskToDelayedList>
	}
 800fd08:	46c0      	nop			; (mov r8, r8)
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	b004      	add	sp, #16
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	200044e8 	.word	0x200044e8

0800fd14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d101      	bne.n	800fd2e <xTaskRemoveFromEventList+0x1a>
 800fd2a:	b672      	cpsid	i
 800fd2c:	e7fe      	b.n	800fd2c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	3318      	adds	r3, #24
 800fd32:	0018      	movs	r0, r3
 800fd34:	f7fe ff57 	bl	800ebe6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd38:	4b1e      	ldr	r3, [pc, #120]	; (800fdb4 <xTaskRemoveFromEventList+0xa0>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d11d      	bne.n	800fd7c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	3304      	adds	r3, #4
 800fd44:	0018      	movs	r0, r3
 800fd46:	f7fe ff4e 	bl	800ebe6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd4e:	4b1a      	ldr	r3, [pc, #104]	; (800fdb8 <xTaskRemoveFromEventList+0xa4>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d903      	bls.n	800fd5e <xTaskRemoveFromEventList+0x4a>
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5a:	4b17      	ldr	r3, [pc, #92]	; (800fdb8 <xTaskRemoveFromEventList+0xa4>)
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd62:	0013      	movs	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	189b      	adds	r3, r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	4a14      	ldr	r2, [pc, #80]	; (800fdbc <xTaskRemoveFromEventList+0xa8>)
 800fd6c:	189a      	adds	r2, r3, r2
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	3304      	adds	r3, #4
 800fd72:	0019      	movs	r1, r3
 800fd74:	0010      	movs	r0, r2
 800fd76:	f7fe fede 	bl	800eb36 <vListInsertEnd>
 800fd7a:	e007      	b.n	800fd8c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	3318      	adds	r3, #24
 800fd80:	001a      	movs	r2, r3
 800fd82:	4b0f      	ldr	r3, [pc, #60]	; (800fdc0 <xTaskRemoveFromEventList+0xac>)
 800fd84:	0011      	movs	r1, r2
 800fd86:	0018      	movs	r0, r3
 800fd88:	f7fe fed5 	bl	800eb36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd90:	4b0c      	ldr	r3, [pc, #48]	; (800fdc4 <xTaskRemoveFromEventList+0xb0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d905      	bls.n	800fda6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fd9e:	4b0a      	ldr	r3, [pc, #40]	; (800fdc8 <xTaskRemoveFromEventList+0xb4>)
 800fda0:	2201      	movs	r2, #1
 800fda2:	601a      	str	r2, [r3, #0]
 800fda4:	e001      	b.n	800fdaa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
}
 800fdac:	0018      	movs	r0, r3
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	b004      	add	sp, #16
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	200049e4 	.word	0x200049e4
 800fdb8:	200049c4 	.word	0x200049c4
 800fdbc:	200044ec 	.word	0x200044ec
 800fdc0:	2000497c 	.word	0x2000497c
 800fdc4:	200044e8 	.word	0x200044e8
 800fdc8:	200049d0 	.word	0x200049d0

0800fdcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fdd4:	4b05      	ldr	r3, [pc, #20]	; (800fdec <vTaskInternalSetTimeOutState+0x20>)
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fddc:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <vTaskInternalSetTimeOutState+0x24>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	605a      	str	r2, [r3, #4]
}
 800fde4:	46c0      	nop			; (mov r8, r8)
 800fde6:	46bd      	mov	sp, r7
 800fde8:	b002      	add	sp, #8
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	200049d4 	.word	0x200049d4
 800fdf0:	200049c0 	.word	0x200049c0

0800fdf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <xTaskCheckForTimeOut+0x14>
 800fe04:	b672      	cpsid	i
 800fe06:	e7fe      	b.n	800fe06 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d101      	bne.n	800fe12 <xTaskCheckForTimeOut+0x1e>
 800fe0e:	b672      	cpsid	i
 800fe10:	e7fe      	b.n	800fe10 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800fe12:	f000 fd8d 	bl	8010930 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fe16:	4b1d      	ldr	r3, [pc, #116]	; (800fe8c <xTaskCheckForTimeOut+0x98>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	1ad3      	subs	r3, r2, r3
 800fe24:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	d102      	bne.n	800fe34 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	617b      	str	r3, [r7, #20]
 800fe32:	e024      	b.n	800fe7e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	4b15      	ldr	r3, [pc, #84]	; (800fe90 <xTaskCheckForTimeOut+0x9c>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d007      	beq.n	800fe50 <xTaskCheckForTimeOut+0x5c>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d302      	bcc.n	800fe50 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	617b      	str	r3, [r7, #20]
 800fe4e:	e016      	b.n	800fe7e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d20c      	bcs.n	800fe74 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	1ad2      	subs	r2, r2, r3
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	0018      	movs	r0, r3
 800fe6a:	f7ff ffaf 	bl	800fdcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]
 800fe72:	e004      	b.n	800fe7e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	2200      	movs	r2, #0
 800fe78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800fe7e:	f000 fd69 	bl	8010954 <vPortExitCritical>

	return xReturn;
 800fe82:	697b      	ldr	r3, [r7, #20]
}
 800fe84:	0018      	movs	r0, r3
 800fe86:	46bd      	mov	sp, r7
 800fe88:	b006      	add	sp, #24
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	200049c0 	.word	0x200049c0
 800fe90:	200049d4 	.word	0x200049d4

0800fe94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe98:	4b02      	ldr	r3, [pc, #8]	; (800fea4 <vTaskMissedYield+0x10>)
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	601a      	str	r2, [r3, #0]
}
 800fe9e:	46c0      	nop			; (mov r8, r8)
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	200049d0 	.word	0x200049d0

0800fea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800feb0:	f000 f84e 	bl	800ff50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800feb4:	4b03      	ldr	r3, [pc, #12]	; (800fec4 <prvIdleTask+0x1c>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d9f9      	bls.n	800feb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800febc:	f000 fd28 	bl	8010910 <vPortYield>
		prvCheckTasksWaitingTermination();
 800fec0:	e7f6      	b.n	800feb0 <prvIdleTask+0x8>
 800fec2:	46c0      	nop			; (mov r8, r8)
 800fec4:	200044ec 	.word	0x200044ec

0800fec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fece:	2300      	movs	r3, #0
 800fed0:	607b      	str	r3, [r7, #4]
 800fed2:	e00c      	b.n	800feee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	0013      	movs	r3, r2
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	189b      	adds	r3, r3, r2
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4a14      	ldr	r2, [pc, #80]	; (800ff30 <prvInitialiseTaskLists+0x68>)
 800fee0:	189b      	adds	r3, r3, r2
 800fee2:	0018      	movs	r0, r3
 800fee4:	f7fe fdfe 	bl	800eae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	3301      	adds	r3, #1
 800feec:	607b      	str	r3, [r7, #4]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b37      	cmp	r3, #55	; 0x37
 800fef2:	d9ef      	bls.n	800fed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fef4:	4b0f      	ldr	r3, [pc, #60]	; (800ff34 <prvInitialiseTaskLists+0x6c>)
 800fef6:	0018      	movs	r0, r3
 800fef8:	f7fe fdf4 	bl	800eae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fefc:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <prvInitialiseTaskLists+0x70>)
 800fefe:	0018      	movs	r0, r3
 800ff00:	f7fe fdf0 	bl	800eae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ff04:	4b0d      	ldr	r3, [pc, #52]	; (800ff3c <prvInitialiseTaskLists+0x74>)
 800ff06:	0018      	movs	r0, r3
 800ff08:	f7fe fdec 	bl	800eae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ff0c:	4b0c      	ldr	r3, [pc, #48]	; (800ff40 <prvInitialiseTaskLists+0x78>)
 800ff0e:	0018      	movs	r0, r3
 800ff10:	f7fe fde8 	bl	800eae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ff14:	4b0b      	ldr	r3, [pc, #44]	; (800ff44 <prvInitialiseTaskLists+0x7c>)
 800ff16:	0018      	movs	r0, r3
 800ff18:	f7fe fde4 	bl	800eae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ff1c:	4b0a      	ldr	r3, [pc, #40]	; (800ff48 <prvInitialiseTaskLists+0x80>)
 800ff1e:	4a05      	ldr	r2, [pc, #20]	; (800ff34 <prvInitialiseTaskLists+0x6c>)
 800ff20:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ff22:	4b0a      	ldr	r3, [pc, #40]	; (800ff4c <prvInitialiseTaskLists+0x84>)
 800ff24:	4a04      	ldr	r2, [pc, #16]	; (800ff38 <prvInitialiseTaskLists+0x70>)
 800ff26:	601a      	str	r2, [r3, #0]
}
 800ff28:	46c0      	nop			; (mov r8, r8)
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	b002      	add	sp, #8
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	200044ec 	.word	0x200044ec
 800ff34:	2000494c 	.word	0x2000494c
 800ff38:	20004960 	.word	0x20004960
 800ff3c:	2000497c 	.word	0x2000497c
 800ff40:	20004990 	.word	0x20004990
 800ff44:	200049a8 	.word	0x200049a8
 800ff48:	20004974 	.word	0x20004974
 800ff4c:	20004978 	.word	0x20004978

0800ff50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff56:	e01a      	b.n	800ff8e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800ff58:	f000 fcea 	bl	8010930 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff5c:	4b10      	ldr	r3, [pc, #64]	; (800ffa0 <prvCheckTasksWaitingTermination+0x50>)
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3304      	adds	r3, #4
 800ff68:	0018      	movs	r0, r3
 800ff6a:	f7fe fe3c 	bl	800ebe6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ff6e:	4b0d      	ldr	r3, [pc, #52]	; (800ffa4 <prvCheckTasksWaitingTermination+0x54>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	1e5a      	subs	r2, r3, #1
 800ff74:	4b0b      	ldr	r3, [pc, #44]	; (800ffa4 <prvCheckTasksWaitingTermination+0x54>)
 800ff76:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ff78:	4b0b      	ldr	r3, [pc, #44]	; (800ffa8 <prvCheckTasksWaitingTermination+0x58>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	1e5a      	subs	r2, r3, #1
 800ff7e:	4b0a      	ldr	r3, [pc, #40]	; (800ffa8 <prvCheckTasksWaitingTermination+0x58>)
 800ff80:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800ff82:	f000 fce7 	bl	8010954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	0018      	movs	r0, r3
 800ff8a:	f000 f80f 	bl	800ffac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff8e:	4b06      	ldr	r3, [pc, #24]	; (800ffa8 <prvCheckTasksWaitingTermination+0x58>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1e0      	bne.n	800ff58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff96:	46c0      	nop			; (mov r8, r8)
 800ff98:	46c0      	nop			; (mov r8, r8)
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	b002      	add	sp, #8
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20004990 	.word	0x20004990
 800ffa4:	200049bc 	.word	0x200049bc
 800ffa8:	200049a4 	.word	0x200049a4

0800ffac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3354      	adds	r3, #84	; 0x54
 800ffb8:	0018      	movs	r0, r3
 800ffba:	f002 ff27 	bl	8012e0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	22a5      	movs	r2, #165	; 0xa5
 800ffc2:	5c9b      	ldrb	r3, [r3, r2]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d109      	bne.n	800ffdc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f000 fdf3 	bl	8010bb8 <vPortFree>
				vPortFree( pxTCB );
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	0018      	movs	r0, r3
 800ffd6:	f000 fdef 	bl	8010bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ffda:	e010      	b.n	800fffe <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	22a5      	movs	r2, #165	; 0xa5
 800ffe0:	5c9b      	ldrb	r3, [r3, r2]
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d104      	bne.n	800fff0 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	0018      	movs	r0, r3
 800ffea:	f000 fde5 	bl	8010bb8 <vPortFree>
	}
 800ffee:	e006      	b.n	800fffe <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	22a5      	movs	r2, #165	; 0xa5
 800fff4:	5c9b      	ldrb	r3, [r3, r2]
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	d001      	beq.n	800fffe <prvDeleteTCB+0x52>
 800fffa:	b672      	cpsid	i
 800fffc:	e7fe      	b.n	800fffc <prvDeleteTCB+0x50>
	}
 800fffe:	46c0      	nop			; (mov r8, r8)
 8010000:	46bd      	mov	sp, r7
 8010002:	b002      	add	sp, #8
 8010004:	bd80      	pop	{r7, pc}
	...

08010008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801000e:	4b0b      	ldr	r3, [pc, #44]	; (801003c <prvResetNextTaskUnblockTime+0x34>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d104      	bne.n	8010022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010018:	4b09      	ldr	r3, [pc, #36]	; (8010040 <prvResetNextTaskUnblockTime+0x38>)
 801001a:	2201      	movs	r2, #1
 801001c:	4252      	negs	r2, r2
 801001e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010020:	e008      	b.n	8010034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010022:	4b06      	ldr	r3, [pc, #24]	; (801003c <prvResetNextTaskUnblockTime+0x34>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685a      	ldr	r2, [r3, #4]
 8010030:	4b03      	ldr	r3, [pc, #12]	; (8010040 <prvResetNextTaskUnblockTime+0x38>)
 8010032:	601a      	str	r2, [r3, #0]
}
 8010034:	46c0      	nop			; (mov r8, r8)
 8010036:	46bd      	mov	sp, r7
 8010038:	b002      	add	sp, #8
 801003a:	bd80      	pop	{r7, pc}
 801003c:	20004974 	.word	0x20004974
 8010040:	200049dc 	.word	0x200049dc

08010044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801004a:	4b0a      	ldr	r3, [pc, #40]	; (8010074 <xTaskGetSchedulerState+0x30>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d102      	bne.n	8010058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010052:	2301      	movs	r3, #1
 8010054:	607b      	str	r3, [r7, #4]
 8010056:	e008      	b.n	801006a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010058:	4b07      	ldr	r3, [pc, #28]	; (8010078 <xTaskGetSchedulerState+0x34>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d102      	bne.n	8010066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010060:	2302      	movs	r3, #2
 8010062:	607b      	str	r3, [r7, #4]
 8010064:	e001      	b.n	801006a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010066:	2300      	movs	r3, #0
 8010068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801006a:	687b      	ldr	r3, [r7, #4]
	}
 801006c:	0018      	movs	r0, r3
 801006e:	46bd      	mov	sp, r7
 8010070:	b002      	add	sp, #8
 8010072:	bd80      	pop	{r7, pc}
 8010074:	200049c8 	.word	0x200049c8
 8010078:	200049e4 	.word	0x200049e4

0801007c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010088:	2300      	movs	r3, #0
 801008a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d044      	beq.n	801011c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010092:	4b25      	ldr	r3, [pc, #148]	; (8010128 <xTaskPriorityDisinherit+0xac>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	429a      	cmp	r2, r3
 801009a:	d001      	beq.n	80100a0 <xTaskPriorityDisinherit+0x24>
 801009c:	b672      	cpsid	i
 801009e:	e7fe      	b.n	801009e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <xTaskPriorityDisinherit+0x30>
 80100a8:	b672      	cpsid	i
 80100aa:	e7fe      	b.n	80100aa <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100b0:	1e5a      	subs	r2, r3, #1
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100be:	429a      	cmp	r2, r3
 80100c0:	d02c      	beq.n	801011c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d128      	bne.n	801011c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	3304      	adds	r3, #4
 80100ce:	0018      	movs	r0, r3
 80100d0:	f7fe fd89 	bl	800ebe6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e0:	2238      	movs	r2, #56	; 0x38
 80100e2:	1ad2      	subs	r2, r2, r3
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ec:	4b0f      	ldr	r3, [pc, #60]	; (801012c <xTaskPriorityDisinherit+0xb0>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d903      	bls.n	80100fc <xTaskPriorityDisinherit+0x80>
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100f8:	4b0c      	ldr	r3, [pc, #48]	; (801012c <xTaskPriorityDisinherit+0xb0>)
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010100:	0013      	movs	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	189b      	adds	r3, r3, r2
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	4a09      	ldr	r2, [pc, #36]	; (8010130 <xTaskPriorityDisinherit+0xb4>)
 801010a:	189a      	adds	r2, r3, r2
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	3304      	adds	r3, #4
 8010110:	0019      	movs	r1, r3
 8010112:	0010      	movs	r0, r2
 8010114:	f7fe fd0f 	bl	800eb36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010118:	2301      	movs	r3, #1
 801011a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801011c:	68fb      	ldr	r3, [r7, #12]
	}
 801011e:	0018      	movs	r0, r3
 8010120:	46bd      	mov	sp, r7
 8010122:	b004      	add	sp, #16
 8010124:	bd80      	pop	{r7, pc}
 8010126:	46c0      	nop			; (mov r8, r8)
 8010128:	200044e8 	.word	0x200044e8
 801012c:	200049c4 	.word	0x200049c4
 8010130:	200044ec 	.word	0x200044ec

08010134 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801013e:	4b21      	ldr	r3, [pc, #132]	; (80101c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010144:	4b20      	ldr	r3, [pc, #128]	; (80101c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	3304      	adds	r3, #4
 801014a:	0018      	movs	r0, r3
 801014c:	f7fe fd4b 	bl	800ebe6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	3301      	adds	r3, #1
 8010154:	d10b      	bne.n	801016e <prvAddCurrentTaskToDelayedList+0x3a>
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d008      	beq.n	801016e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801015c:	4b1a      	ldr	r3, [pc, #104]	; (80101c8 <prvAddCurrentTaskToDelayedList+0x94>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	1d1a      	adds	r2, r3, #4
 8010162:	4b1a      	ldr	r3, [pc, #104]	; (80101cc <prvAddCurrentTaskToDelayedList+0x98>)
 8010164:	0011      	movs	r1, r2
 8010166:	0018      	movs	r0, r3
 8010168:	f7fe fce5 	bl	800eb36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801016c:	e026      	b.n	80101bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	18d3      	adds	r3, r2, r3
 8010174:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010176:	4b14      	ldr	r3, [pc, #80]	; (80101c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801017e:	68ba      	ldr	r2, [r7, #8]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	429a      	cmp	r2, r3
 8010184:	d209      	bcs.n	801019a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010186:	4b12      	ldr	r3, [pc, #72]	; (80101d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	4b0f      	ldr	r3, [pc, #60]	; (80101c8 <prvAddCurrentTaskToDelayedList+0x94>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	3304      	adds	r3, #4
 8010190:	0019      	movs	r1, r3
 8010192:	0010      	movs	r0, r2
 8010194:	f7fe fcf1 	bl	800eb7a <vListInsert>
}
 8010198:	e010      	b.n	80101bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801019a:	4b0e      	ldr	r3, [pc, #56]	; (80101d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	4b0a      	ldr	r3, [pc, #40]	; (80101c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	3304      	adds	r3, #4
 80101a4:	0019      	movs	r1, r3
 80101a6:	0010      	movs	r0, r2
 80101a8:	f7fe fce7 	bl	800eb7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80101ac:	4b0a      	ldr	r3, [pc, #40]	; (80101d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68ba      	ldr	r2, [r7, #8]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d202      	bcs.n	80101bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80101b6:	4b08      	ldr	r3, [pc, #32]	; (80101d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	601a      	str	r2, [r3, #0]
}
 80101bc:	46c0      	nop			; (mov r8, r8)
 80101be:	46bd      	mov	sp, r7
 80101c0:	b004      	add	sp, #16
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	200049c0 	.word	0x200049c0
 80101c8:	200044e8 	.word	0x200044e8
 80101cc:	200049a8 	.word	0x200049a8
 80101d0:	20004978 	.word	0x20004978
 80101d4:	20004974 	.word	0x20004974
 80101d8:	200049dc 	.word	0x200049dc

080101dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80101dc:	b590      	push	{r4, r7, lr}
 80101de:	b089      	sub	sp, #36	; 0x24
 80101e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80101e6:	f000 fac9 	bl	801077c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80101ea:	4b17      	ldr	r3, [pc, #92]	; (8010248 <xTimerCreateTimerTask+0x6c>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d020      	beq.n	8010234 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80101fa:	003a      	movs	r2, r7
 80101fc:	1d39      	adds	r1, r7, #4
 80101fe:	2308      	movs	r3, #8
 8010200:	18fb      	adds	r3, r7, r3
 8010202:	0018      	movs	r0, r3
 8010204:	f7fe fc56 	bl	800eab4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010208:	683c      	ldr	r4, [r7, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	68ba      	ldr	r2, [r7, #8]
 801020e:	490f      	ldr	r1, [pc, #60]	; (801024c <xTimerCreateTimerTask+0x70>)
 8010210:	480f      	ldr	r0, [pc, #60]	; (8010250 <xTimerCreateTimerTask+0x74>)
 8010212:	9202      	str	r2, [sp, #8]
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	2302      	movs	r3, #2
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	2300      	movs	r3, #0
 801021c:	0022      	movs	r2, r4
 801021e:	f7ff f968 	bl	800f4f2 <xTaskCreateStatic>
 8010222:	0002      	movs	r2, r0
 8010224:	4b0b      	ldr	r3, [pc, #44]	; (8010254 <xTimerCreateTimerTask+0x78>)
 8010226:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010228:	4b0a      	ldr	r3, [pc, #40]	; (8010254 <xTimerCreateTimerTask+0x78>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8010230:	2301      	movs	r3, #1
 8010232:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d101      	bne.n	801023e <xTimerCreateTimerTask+0x62>
 801023a:	b672      	cpsid	i
 801023c:	e7fe      	b.n	801023c <xTimerCreateTimerTask+0x60>
	return xReturn;
 801023e:	68fb      	ldr	r3, [r7, #12]
}
 8010240:	0018      	movs	r0, r3
 8010242:	46bd      	mov	sp, r7
 8010244:	b005      	add	sp, #20
 8010246:	bd90      	pop	{r4, r7, pc}
 8010248:	20004a18 	.word	0x20004a18
 801024c:	08017e40 	.word	0x08017e40
 8010250:	08010375 	.word	0x08010375
 8010254:	20004a1c 	.word	0x20004a1c

08010258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010258:	b590      	push	{r4, r7, lr}
 801025a:	b08b      	sub	sp, #44	; 0x2c
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
 8010264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010266:	2300      	movs	r3, #0
 8010268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <xTimerGenericCommand+0x1c>
 8010270:	b672      	cpsid	i
 8010272:	e7fe      	b.n	8010272 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010274:	4b1c      	ldr	r3, [pc, #112]	; (80102e8 <xTimerGenericCommand+0x90>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d030      	beq.n	80102de <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801027c:	2414      	movs	r4, #20
 801027e:	193b      	adds	r3, r7, r4
 8010280:	68ba      	ldr	r2, [r7, #8]
 8010282:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010284:	193b      	adds	r3, r7, r4
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801028a:	193b      	adds	r3, r7, r4
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	2b05      	cmp	r3, #5
 8010294:	dc19      	bgt.n	80102ca <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010296:	f7ff fed5 	bl	8010044 <xTaskGetSchedulerState>
 801029a:	0003      	movs	r3, r0
 801029c:	2b02      	cmp	r3, #2
 801029e:	d109      	bne.n	80102b4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80102a0:	4b11      	ldr	r3, [pc, #68]	; (80102e8 <xTimerGenericCommand+0x90>)
 80102a2:	6818      	ldr	r0, [r3, #0]
 80102a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102a6:	1939      	adds	r1, r7, r4
 80102a8:	2300      	movs	r3, #0
 80102aa:	f7fe fdbd 	bl	800ee28 <xQueueGenericSend>
 80102ae:	0003      	movs	r3, r0
 80102b0:	627b      	str	r3, [r7, #36]	; 0x24
 80102b2:	e014      	b.n	80102de <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80102b4:	4b0c      	ldr	r3, [pc, #48]	; (80102e8 <xTimerGenericCommand+0x90>)
 80102b6:	6818      	ldr	r0, [r3, #0]
 80102b8:	2314      	movs	r3, #20
 80102ba:	18f9      	adds	r1, r7, r3
 80102bc:	2300      	movs	r3, #0
 80102be:	2200      	movs	r2, #0
 80102c0:	f7fe fdb2 	bl	800ee28 <xQueueGenericSend>
 80102c4:	0003      	movs	r3, r0
 80102c6:	627b      	str	r3, [r7, #36]	; 0x24
 80102c8:	e009      	b.n	80102de <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80102ca:	4b07      	ldr	r3, [pc, #28]	; (80102e8 <xTimerGenericCommand+0x90>)
 80102cc:	6818      	ldr	r0, [r3, #0]
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	2314      	movs	r3, #20
 80102d2:	18f9      	adds	r1, r7, r3
 80102d4:	2300      	movs	r3, #0
 80102d6:	f7fe fe6b 	bl	800efb0 <xQueueGenericSendFromISR>
 80102da:	0003      	movs	r3, r0
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80102de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102e0:	0018      	movs	r0, r3
 80102e2:	46bd      	mov	sp, r7
 80102e4:	b00b      	add	sp, #44	; 0x2c
 80102e6:	bd90      	pop	{r4, r7, pc}
 80102e8:	20004a18 	.word	0x20004a18

080102ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af02      	add	r7, sp, #8
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102f6:	4b1e      	ldr	r3, [pc, #120]	; (8010370 <prvProcessExpiredTimer+0x84>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	3304      	adds	r3, #4
 8010304:	0018      	movs	r0, r3
 8010306:	f7fe fc6e 	bl	800ebe6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2228      	movs	r2, #40	; 0x28
 801030e:	5c9b      	ldrb	r3, [r3, r2]
 8010310:	001a      	movs	r2, r3
 8010312:	2304      	movs	r3, #4
 8010314:	4013      	ands	r3, r2
 8010316:	d019      	beq.n	801034c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	699a      	ldr	r2, [r3, #24]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	18d1      	adds	r1, r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	683a      	ldr	r2, [r7, #0]
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f000 f8c3 	bl	80104b0 <prvInsertTimerInActiveList>
 801032a:	1e03      	subs	r3, r0, #0
 801032c:	d017      	beq.n	801035e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	2300      	movs	r3, #0
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	2300      	movs	r3, #0
 8010338:	2100      	movs	r1, #0
 801033a:	f7ff ff8d 	bl	8010258 <xTimerGenericCommand>
 801033e:	0003      	movs	r3, r0
 8010340:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d10a      	bne.n	801035e <prvProcessExpiredTimer+0x72>
 8010348:	b672      	cpsid	i
 801034a:	e7fe      	b.n	801034a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2228      	movs	r2, #40	; 0x28
 8010350:	5c9b      	ldrb	r3, [r3, r2]
 8010352:	2201      	movs	r2, #1
 8010354:	4393      	bics	r3, r2
 8010356:	b2d9      	uxtb	r1, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2228      	movs	r2, #40	; 0x28
 801035c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6a1b      	ldr	r3, [r3, #32]
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	0010      	movs	r0, r2
 8010366:	4798      	blx	r3
}
 8010368:	46c0      	nop			; (mov r8, r8)
 801036a:	46bd      	mov	sp, r7
 801036c:	b004      	add	sp, #16
 801036e:	bd80      	pop	{r7, pc}
 8010370:	20004a10 	.word	0x20004a10

08010374 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801037c:	2308      	movs	r3, #8
 801037e:	18fb      	adds	r3, r7, r3
 8010380:	0018      	movs	r0, r3
 8010382:	f000 f853 	bl	801042c <prvGetNextExpireTime>
 8010386:	0003      	movs	r3, r0
 8010388:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801038a:	68ba      	ldr	r2, [r7, #8]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	0011      	movs	r1, r2
 8010390:	0018      	movs	r0, r3
 8010392:	f000 f803 	bl	801039c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010396:	f000 f8cd 	bl	8010534 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801039a:	e7ef      	b.n	801037c <prvTimerTask+0x8>

0801039c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80103a6:	f7ff fac1 	bl	800f92c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103aa:	2308      	movs	r3, #8
 80103ac:	18fb      	adds	r3, r7, r3
 80103ae:	0018      	movs	r0, r3
 80103b0:	f000 f85e 	bl	8010470 <prvSampleTimeNow>
 80103b4:	0003      	movs	r3, r0
 80103b6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d12b      	bne.n	8010416 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d10c      	bne.n	80103de <prvProcessTimerOrBlockTask+0x42>
 80103c4:	687a      	ldr	r2, [r7, #4]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d808      	bhi.n	80103de <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80103cc:	f7ff faba 	bl	800f944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	0011      	movs	r1, r2
 80103d6:	0018      	movs	r0, r3
 80103d8:	f7ff ff88 	bl	80102ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80103dc:	e01d      	b.n	801041a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d008      	beq.n	80103f6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80103e4:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <prvProcessTimerOrBlockTask+0x88>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d101      	bne.n	80103f2 <prvProcessTimerOrBlockTask+0x56>
 80103ee:	2301      	movs	r3, #1
 80103f0:	e000      	b.n	80103f4 <prvProcessTimerOrBlockTask+0x58>
 80103f2:	2300      	movs	r3, #0
 80103f4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80103f6:	4b0c      	ldr	r3, [pc, #48]	; (8010428 <prvProcessTimerOrBlockTask+0x8c>)
 80103f8:	6818      	ldr	r0, [r3, #0]
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	1ad3      	subs	r3, r2, r3
 8010400:	683a      	ldr	r2, [r7, #0]
 8010402:	0019      	movs	r1, r3
 8010404:	f7ff f842 	bl	800f48c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010408:	f7ff fa9c 	bl	800f944 <xTaskResumeAll>
 801040c:	1e03      	subs	r3, r0, #0
 801040e:	d104      	bne.n	801041a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8010410:	f000 fa7e 	bl	8010910 <vPortYield>
}
 8010414:	e001      	b.n	801041a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8010416:	f7ff fa95 	bl	800f944 <xTaskResumeAll>
}
 801041a:	46c0      	nop			; (mov r8, r8)
 801041c:	46bd      	mov	sp, r7
 801041e:	b004      	add	sp, #16
 8010420:	bd80      	pop	{r7, pc}
 8010422:	46c0      	nop			; (mov r8, r8)
 8010424:	20004a14 	.word	0x20004a14
 8010428:	20004a18 	.word	0x20004a18

0801042c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010434:	4b0d      	ldr	r3, [pc, #52]	; (801046c <prvGetNextExpireTime+0x40>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <prvGetNextExpireTime+0x16>
 801043e:	2201      	movs	r2, #1
 8010440:	e000      	b.n	8010444 <prvGetNextExpireTime+0x18>
 8010442:	2200      	movs	r2, #0
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d105      	bne.n	801045c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010450:	4b06      	ldr	r3, [pc, #24]	; (801046c <prvGetNextExpireTime+0x40>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	e001      	b.n	8010460 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801045c:	2300      	movs	r3, #0
 801045e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010460:	68fb      	ldr	r3, [r7, #12]
}
 8010462:	0018      	movs	r0, r3
 8010464:	46bd      	mov	sp, r7
 8010466:	b004      	add	sp, #16
 8010468:	bd80      	pop	{r7, pc}
 801046a:	46c0      	nop			; (mov r8, r8)
 801046c:	20004a10 	.word	0x20004a10

08010470 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010478:	f7ff faf0 	bl	800fa5c <xTaskGetTickCount>
 801047c:	0003      	movs	r3, r0
 801047e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8010480:	4b0a      	ldr	r3, [pc, #40]	; (80104ac <prvSampleTimeNow+0x3c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	429a      	cmp	r2, r3
 8010488:	d205      	bcs.n	8010496 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801048a:	f000 f919 	bl	80106c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2201      	movs	r2, #1
 8010492:	601a      	str	r2, [r3, #0]
 8010494:	e002      	b.n	801049c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801049c:	4b03      	ldr	r3, [pc, #12]	; (80104ac <prvSampleTimeNow+0x3c>)
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80104a2:	68fb      	ldr	r3, [r7, #12]
}
 80104a4:	0018      	movs	r0, r3
 80104a6:	46bd      	mov	sp, r7
 80104a8:	b004      	add	sp, #16
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	20004a20 	.word	0x20004a20

080104b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80104be:	2300      	movs	r3, #0
 80104c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	68ba      	ldr	r2, [r7, #8]
 80104c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d812      	bhi.n	80104fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	1ad2      	subs	r2, r2, r3
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d302      	bcc.n	80104ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80104e4:	2301      	movs	r3, #1
 80104e6:	617b      	str	r3, [r7, #20]
 80104e8:	e01b      	b.n	8010522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80104ea:	4b10      	ldr	r3, [pc, #64]	; (801052c <prvInsertTimerInActiveList+0x7c>)
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	3304      	adds	r3, #4
 80104f2:	0019      	movs	r1, r3
 80104f4:	0010      	movs	r0, r2
 80104f6:	f7fe fb40 	bl	800eb7a <vListInsert>
 80104fa:	e012      	b.n	8010522 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	429a      	cmp	r2, r3
 8010502:	d206      	bcs.n	8010512 <prvInsertTimerInActiveList+0x62>
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	429a      	cmp	r2, r3
 801050a:	d302      	bcc.n	8010512 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801050c:	2301      	movs	r3, #1
 801050e:	617b      	str	r3, [r7, #20]
 8010510:	e007      	b.n	8010522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010512:	4b07      	ldr	r3, [pc, #28]	; (8010530 <prvInsertTimerInActiveList+0x80>)
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	3304      	adds	r3, #4
 801051a:	0019      	movs	r1, r3
 801051c:	0010      	movs	r0, r2
 801051e:	f7fe fb2c 	bl	800eb7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010522:	697b      	ldr	r3, [r7, #20]
}
 8010524:	0018      	movs	r0, r3
 8010526:	46bd      	mov	sp, r7
 8010528:	b006      	add	sp, #24
 801052a:	bd80      	pop	{r7, pc}
 801052c:	20004a14 	.word	0x20004a14
 8010530:	20004a10 	.word	0x20004a10

08010534 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010534:	b590      	push	{r4, r7, lr}
 8010536:	b08d      	sub	sp, #52	; 0x34
 8010538:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801053a:	e0ac      	b.n	8010696 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801053c:	2208      	movs	r2, #8
 801053e:	18bb      	adds	r3, r7, r2
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	da0f      	bge.n	8010566 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010546:	18bb      	adds	r3, r7, r2
 8010548:	3304      	adds	r3, #4
 801054a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801054c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <prvProcessReceivedCommands+0x22>
 8010552:	b672      	cpsid	i
 8010554:	e7fe      	b.n	8010554 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055c:	6858      	ldr	r0, [r3, #4]
 801055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	0019      	movs	r1, r3
 8010564:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010566:	2208      	movs	r2, #8
 8010568:	18bb      	adds	r3, r7, r2
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	da00      	bge.n	8010572 <prvProcessReceivedCommands+0x3e>
 8010570:	e091      	b.n	8010696 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010572:	18bb      	adds	r3, r7, r2
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010578:	6a3b      	ldr	r3, [r7, #32]
 801057a:	695b      	ldr	r3, [r3, #20]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d004      	beq.n	801058a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010580:	6a3b      	ldr	r3, [r7, #32]
 8010582:	3304      	adds	r3, #4
 8010584:	0018      	movs	r0, r3
 8010586:	f7fe fb2e 	bl	800ebe6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801058a:	1d3b      	adds	r3, r7, #4
 801058c:	0018      	movs	r0, r3
 801058e:	f7ff ff6f 	bl	8010470 <prvSampleTimeNow>
 8010592:	0003      	movs	r3, r0
 8010594:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8010596:	2308      	movs	r3, #8
 8010598:	18fb      	adds	r3, r7, r3
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b09      	cmp	r3, #9
 801059e:	d900      	bls.n	80105a2 <prvProcessReceivedCommands+0x6e>
 80105a0:	e078      	b.n	8010694 <prvProcessReceivedCommands+0x160>
 80105a2:	009a      	lsls	r2, r3, #2
 80105a4:	4b44      	ldr	r3, [pc, #272]	; (80106b8 <prvProcessReceivedCommands+0x184>)
 80105a6:	18d3      	adds	r3, r2, r3
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	2228      	movs	r2, #40	; 0x28
 80105b0:	5c9b      	ldrb	r3, [r3, r2]
 80105b2:	2201      	movs	r2, #1
 80105b4:	4313      	orrs	r3, r2
 80105b6:	b2d9      	uxtb	r1, r3
 80105b8:	6a3b      	ldr	r3, [r7, #32]
 80105ba:	2228      	movs	r2, #40	; 0x28
 80105bc:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80105be:	2408      	movs	r4, #8
 80105c0:	193b      	adds	r3, r7, r4
 80105c2:	685a      	ldr	r2, [r3, #4]
 80105c4:	6a3b      	ldr	r3, [r7, #32]
 80105c6:	699b      	ldr	r3, [r3, #24]
 80105c8:	18d1      	adds	r1, r2, r3
 80105ca:	193b      	adds	r3, r7, r4
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	69fa      	ldr	r2, [r7, #28]
 80105d0:	6a38      	ldr	r0, [r7, #32]
 80105d2:	f7ff ff6d 	bl	80104b0 <prvInsertTimerInActiveList>
 80105d6:	1e03      	subs	r3, r0, #0
 80105d8:	d05d      	beq.n	8010696 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105da:	6a3b      	ldr	r3, [r7, #32]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	6a3a      	ldr	r2, [r7, #32]
 80105e0:	0010      	movs	r0, r2
 80105e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	2228      	movs	r2, #40	; 0x28
 80105e8:	5c9b      	ldrb	r3, [r3, r2]
 80105ea:	001a      	movs	r2, r3
 80105ec:	2304      	movs	r3, #4
 80105ee:	4013      	ands	r3, r2
 80105f0:	d051      	beq.n	8010696 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80105f2:	193b      	adds	r3, r7, r4
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	699b      	ldr	r3, [r3, #24]
 80105fa:	18d2      	adds	r2, r2, r3
 80105fc:	6a38      	ldr	r0, [r7, #32]
 80105fe:	2300      	movs	r3, #0
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	2300      	movs	r3, #0
 8010604:	2100      	movs	r1, #0
 8010606:	f7ff fe27 	bl	8010258 <xTimerGenericCommand>
 801060a:	0003      	movs	r3, r0
 801060c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d140      	bne.n	8010696 <prvProcessReceivedCommands+0x162>
 8010614:	b672      	cpsid	i
 8010616:	e7fe      	b.n	8010616 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010618:	6a3b      	ldr	r3, [r7, #32]
 801061a:	2228      	movs	r2, #40	; 0x28
 801061c:	5c9b      	ldrb	r3, [r3, r2]
 801061e:	2201      	movs	r2, #1
 8010620:	4393      	bics	r3, r2
 8010622:	b2d9      	uxtb	r1, r3
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	2228      	movs	r2, #40	; 0x28
 8010628:	5499      	strb	r1, [r3, r2]
					break;
 801062a:	e034      	b.n	8010696 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	2228      	movs	r2, #40	; 0x28
 8010630:	5c9b      	ldrb	r3, [r3, r2]
 8010632:	2201      	movs	r2, #1
 8010634:	4313      	orrs	r3, r2
 8010636:	b2d9      	uxtb	r1, r3
 8010638:	6a3b      	ldr	r3, [r7, #32]
 801063a:	2228      	movs	r2, #40	; 0x28
 801063c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801063e:	2308      	movs	r3, #8
 8010640:	18fb      	adds	r3, r7, r3
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010648:	6a3b      	ldr	r3, [r7, #32]
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d101      	bne.n	8010654 <prvProcessReceivedCommands+0x120>
 8010650:	b672      	cpsid	i
 8010652:	e7fe      	b.n	8010652 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	699a      	ldr	r2, [r3, #24]
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	18d1      	adds	r1, r2, r3
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	69fa      	ldr	r2, [r7, #28]
 8010660:	6a38      	ldr	r0, [r7, #32]
 8010662:	f7ff ff25 	bl	80104b0 <prvInsertTimerInActiveList>
					break;
 8010666:	e016      	b.n	8010696 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010668:	6a3b      	ldr	r3, [r7, #32]
 801066a:	2228      	movs	r2, #40	; 0x28
 801066c:	5c9b      	ldrb	r3, [r3, r2]
 801066e:	001a      	movs	r2, r3
 8010670:	2302      	movs	r3, #2
 8010672:	4013      	ands	r3, r2
 8010674:	d104      	bne.n	8010680 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	0018      	movs	r0, r3
 801067a:	f000 fa9d 	bl	8010bb8 <vPortFree>
 801067e:	e00a      	b.n	8010696 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	2228      	movs	r2, #40	; 0x28
 8010684:	5c9b      	ldrb	r3, [r3, r2]
 8010686:	2201      	movs	r2, #1
 8010688:	4393      	bics	r3, r2
 801068a:	b2d9      	uxtb	r1, r3
 801068c:	6a3b      	ldr	r3, [r7, #32]
 801068e:	2228      	movs	r2, #40	; 0x28
 8010690:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010692:	e000      	b.n	8010696 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8010694:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010696:	4b09      	ldr	r3, [pc, #36]	; (80106bc <prvProcessReceivedCommands+0x188>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2208      	movs	r2, #8
 801069c:	18b9      	adds	r1, r7, r2
 801069e:	2200      	movs	r2, #0
 80106a0:	0018      	movs	r0, r3
 80106a2:	f7fe fcf9 	bl	800f098 <xQueueReceive>
 80106a6:	1e03      	subs	r3, r0, #0
 80106a8:	d000      	beq.n	80106ac <prvProcessReceivedCommands+0x178>
 80106aa:	e747      	b.n	801053c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80106ac:	46c0      	nop			; (mov r8, r8)
 80106ae:	46c0      	nop			; (mov r8, r8)
 80106b0:	46bd      	mov	sp, r7
 80106b2:	b00b      	add	sp, #44	; 0x2c
 80106b4:	bd90      	pop	{r4, r7, pc}
 80106b6:	46c0      	nop			; (mov r8, r8)
 80106b8:	08018020 	.word	0x08018020
 80106bc:	20004a18 	.word	0x20004a18

080106c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b088      	sub	sp, #32
 80106c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106c6:	e041      	b.n	801074c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106c8:	4b2a      	ldr	r3, [pc, #168]	; (8010774 <prvSwitchTimerLists+0xb4>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106d2:	4b28      	ldr	r3, [pc, #160]	; (8010774 <prvSwitchTimerLists+0xb4>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	3304      	adds	r3, #4
 80106e0:	0018      	movs	r0, r3
 80106e2:	f7fe fa80 	bl	800ebe6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	6a1b      	ldr	r3, [r3, #32]
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	0010      	movs	r0, r2
 80106ee:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2228      	movs	r2, #40	; 0x28
 80106f4:	5c9b      	ldrb	r3, [r3, r2]
 80106f6:	001a      	movs	r2, r3
 80106f8:	2304      	movs	r3, #4
 80106fa:	4013      	ands	r3, r2
 80106fc:	d026      	beq.n	801074c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	693a      	ldr	r2, [r7, #16]
 8010704:	18d3      	adds	r3, r2, r3
 8010706:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010708:	68ba      	ldr	r2, [r7, #8]
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	429a      	cmp	r2, r3
 801070e:	d90e      	bls.n	801072e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801071c:	4b15      	ldr	r3, [pc, #84]	; (8010774 <prvSwitchTimerLists+0xb4>)
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	3304      	adds	r3, #4
 8010724:	0019      	movs	r1, r3
 8010726:	0010      	movs	r0, r2
 8010728:	f7fe fa27 	bl	800eb7a <vListInsert>
 801072c:	e00e      	b.n	801074c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801072e:	693a      	ldr	r2, [r7, #16]
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	2300      	movs	r3, #0
 8010734:	9300      	str	r3, [sp, #0]
 8010736:	2300      	movs	r3, #0
 8010738:	2100      	movs	r1, #0
 801073a:	f7ff fd8d 	bl	8010258 <xTimerGenericCommand>
 801073e:	0003      	movs	r3, r0
 8010740:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d101      	bne.n	801074c <prvSwitchTimerLists+0x8c>
 8010748:	b672      	cpsid	i
 801074a:	e7fe      	b.n	801074a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801074c:	4b09      	ldr	r3, [pc, #36]	; (8010774 <prvSwitchTimerLists+0xb4>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1b8      	bne.n	80106c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010756:	4b07      	ldr	r3, [pc, #28]	; (8010774 <prvSwitchTimerLists+0xb4>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801075c:	4b06      	ldr	r3, [pc, #24]	; (8010778 <prvSwitchTimerLists+0xb8>)
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	4b04      	ldr	r3, [pc, #16]	; (8010774 <prvSwitchTimerLists+0xb4>)
 8010762:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8010764:	4b04      	ldr	r3, [pc, #16]	; (8010778 <prvSwitchTimerLists+0xb8>)
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	601a      	str	r2, [r3, #0]
}
 801076a:	46c0      	nop			; (mov r8, r8)
 801076c:	46bd      	mov	sp, r7
 801076e:	b006      	add	sp, #24
 8010770:	bd80      	pop	{r7, pc}
 8010772:	46c0      	nop			; (mov r8, r8)
 8010774:	20004a10 	.word	0x20004a10
 8010778:	20004a14 	.word	0x20004a14

0801077c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010782:	f000 f8d5 	bl	8010930 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010786:	4b16      	ldr	r3, [pc, #88]	; (80107e0 <prvCheckForValidListAndQueue+0x64>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d123      	bne.n	80107d6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 801078e:	4b15      	ldr	r3, [pc, #84]	; (80107e4 <prvCheckForValidListAndQueue+0x68>)
 8010790:	0018      	movs	r0, r3
 8010792:	f7fe f9a7 	bl	800eae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010796:	4b14      	ldr	r3, [pc, #80]	; (80107e8 <prvCheckForValidListAndQueue+0x6c>)
 8010798:	0018      	movs	r0, r3
 801079a:	f7fe f9a3 	bl	800eae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801079e:	4b13      	ldr	r3, [pc, #76]	; (80107ec <prvCheckForValidListAndQueue+0x70>)
 80107a0:	4a10      	ldr	r2, [pc, #64]	; (80107e4 <prvCheckForValidListAndQueue+0x68>)
 80107a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80107a4:	4b12      	ldr	r3, [pc, #72]	; (80107f0 <prvCheckForValidListAndQueue+0x74>)
 80107a6:	4a10      	ldr	r2, [pc, #64]	; (80107e8 <prvCheckForValidListAndQueue+0x6c>)
 80107a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80107aa:	4b12      	ldr	r3, [pc, #72]	; (80107f4 <prvCheckForValidListAndQueue+0x78>)
 80107ac:	4a12      	ldr	r2, [pc, #72]	; (80107f8 <prvCheckForValidListAndQueue+0x7c>)
 80107ae:	2100      	movs	r1, #0
 80107b0:	9100      	str	r1, [sp, #0]
 80107b2:	2110      	movs	r1, #16
 80107b4:	200a      	movs	r0, #10
 80107b6:	f7fe fa92 	bl	800ecde <xQueueGenericCreateStatic>
 80107ba:	0002      	movs	r2, r0
 80107bc:	4b08      	ldr	r3, [pc, #32]	; (80107e0 <prvCheckForValidListAndQueue+0x64>)
 80107be:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80107c0:	4b07      	ldr	r3, [pc, #28]	; (80107e0 <prvCheckForValidListAndQueue+0x64>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d006      	beq.n	80107d6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80107c8:	4b05      	ldr	r3, [pc, #20]	; (80107e0 <prvCheckForValidListAndQueue+0x64>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4a0b      	ldr	r2, [pc, #44]	; (80107fc <prvCheckForValidListAndQueue+0x80>)
 80107ce:	0011      	movs	r1, r2
 80107d0:	0018      	movs	r0, r3
 80107d2:	f7fe fe33 	bl	800f43c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80107d6:	f000 f8bd 	bl	8010954 <vPortExitCritical>
}
 80107da:	46c0      	nop			; (mov r8, r8)
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	20004a18 	.word	0x20004a18
 80107e4:	200049e8 	.word	0x200049e8
 80107e8:	200049fc 	.word	0x200049fc
 80107ec:	20004a10 	.word	0x20004a10
 80107f0:	20004a14 	.word	0x20004a14
 80107f4:	20004ac4 	.word	0x20004ac4
 80107f8:	20004a24 	.word	0x20004a24
 80107fc:	08017e48 	.word	0x08017e48

08010800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	3b04      	subs	r3, #4
 8010810:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2280      	movs	r2, #128	; 0x80
 8010816:	0452      	lsls	r2, r2, #17
 8010818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	3b04      	subs	r3, #4
 801081e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	3b04      	subs	r3, #4
 801082a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801082c:	4a08      	ldr	r2, [pc, #32]	; (8010850 <pxPortInitialiseStack+0x50>)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	3b14      	subs	r3, #20
 8010836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	3b20      	subs	r3, #32
 8010842:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010844:	68fb      	ldr	r3, [r7, #12]
}
 8010846:	0018      	movs	r0, r3
 8010848:	46bd      	mov	sp, r7
 801084a:	b004      	add	sp, #16
 801084c:	bd80      	pop	{r7, pc}
 801084e:	46c0      	nop			; (mov r8, r8)
 8010850:	08010855 	.word	0x08010855

08010854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801085a:	2300      	movs	r3, #0
 801085c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801085e:	4b08      	ldr	r3, [pc, #32]	; (8010880 <prvTaskExitError+0x2c>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3301      	adds	r3, #1
 8010864:	d001      	beq.n	801086a <prvTaskExitError+0x16>
 8010866:	b672      	cpsid	i
 8010868:	e7fe      	b.n	8010868 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801086a:	b672      	cpsid	i
	while( ulDummy == 0 )
 801086c:	46c0      	nop			; (mov r8, r8)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d0fc      	beq.n	801086e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010874:	46c0      	nop			; (mov r8, r8)
 8010876:	46c0      	nop			; (mov r8, r8)
 8010878:	46bd      	mov	sp, r7
 801087a:	b002      	add	sp, #8
 801087c:	bd80      	pop	{r7, pc}
 801087e:	46c0      	nop			; (mov r8, r8)
 8010880:	20000100 	.word	0x20000100

08010884 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8010884:	b580      	push	{r7, lr}
 8010886:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8010888:	46c0      	nop			; (mov r8, r8)
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
	...

08010890 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010890:	4a0b      	ldr	r2, [pc, #44]	; (80108c0 <pxCurrentTCBConst2>)
 8010892:	6813      	ldr	r3, [r2, #0]
 8010894:	6818      	ldr	r0, [r3, #0]
 8010896:	3020      	adds	r0, #32
 8010898:	f380 8809 	msr	PSP, r0
 801089c:	2002      	movs	r0, #2
 801089e:	f380 8814 	msr	CONTROL, r0
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80108a8:	46ae      	mov	lr, r5
 80108aa:	bc08      	pop	{r3}
 80108ac:	bc04      	pop	{r2}
 80108ae:	b662      	cpsie	i
 80108b0:	4718      	bx	r3
 80108b2:	46c0      	nop			; (mov r8, r8)
 80108b4:	46c0      	nop			; (mov r8, r8)
 80108b6:	46c0      	nop			; (mov r8, r8)
 80108b8:	46c0      	nop			; (mov r8, r8)
 80108ba:	46c0      	nop			; (mov r8, r8)
 80108bc:	46c0      	nop			; (mov r8, r8)
 80108be:	46c0      	nop			; (mov r8, r8)

080108c0 <pxCurrentTCBConst2>:
 80108c0:	200044e8 	.word	0x200044e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80108c4:	46c0      	nop			; (mov r8, r8)
 80108c6:	46c0      	nop			; (mov r8, r8)

080108c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80108cc:	4b0e      	ldr	r3, [pc, #56]	; (8010908 <xPortStartScheduler+0x40>)
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	4b0d      	ldr	r3, [pc, #52]	; (8010908 <xPortStartScheduler+0x40>)
 80108d2:	21ff      	movs	r1, #255	; 0xff
 80108d4:	0409      	lsls	r1, r1, #16
 80108d6:	430a      	orrs	r2, r1
 80108d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80108da:	4b0b      	ldr	r3, [pc, #44]	; (8010908 <xPortStartScheduler+0x40>)
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4b0a      	ldr	r3, [pc, #40]	; (8010908 <xPortStartScheduler+0x40>)
 80108e0:	21ff      	movs	r1, #255	; 0xff
 80108e2:	0609      	lsls	r1, r1, #24
 80108e4:	430a      	orrs	r2, r1
 80108e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108e8:	f000 f898 	bl	8010a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108ec:	4b07      	ldr	r3, [pc, #28]	; (801090c <xPortStartScheduler+0x44>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80108f2:	f7ff ffcd 	bl	8010890 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80108f6:	f7ff f96f 	bl	800fbd8 <vTaskSwitchContext>
	prvTaskExitError();
 80108fa:	f7ff ffab 	bl	8010854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	0018      	movs	r0, r3
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	46c0      	nop			; (mov r8, r8)
 8010908:	e000ed20 	.word	0xe000ed20
 801090c:	20000100 	.word	0x20000100

08010910 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010914:	4b05      	ldr	r3, [pc, #20]	; (801092c <vPortYield+0x1c>)
 8010916:	2280      	movs	r2, #128	; 0x80
 8010918:	0552      	lsls	r2, r2, #21
 801091a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801091c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010920:	f3bf 8f6f 	isb	sy
}
 8010924:	46c0      	nop			; (mov r8, r8)
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	46c0      	nop			; (mov r8, r8)
 801092c:	e000ed04 	.word	0xe000ed04

08010930 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8010934:	b672      	cpsid	i
	uxCriticalNesting++;
 8010936:	4b06      	ldr	r3, [pc, #24]	; (8010950 <vPortEnterCritical+0x20>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	4b04      	ldr	r3, [pc, #16]	; (8010950 <vPortEnterCritical+0x20>)
 801093e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8010940:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010944:	f3bf 8f6f 	isb	sy
}
 8010948:	46c0      	nop			; (mov r8, r8)
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	46c0      	nop			; (mov r8, r8)
 8010950:	20000100 	.word	0x20000100

08010954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010954:	b580      	push	{r7, lr}
 8010956:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010958:	4b09      	ldr	r3, [pc, #36]	; (8010980 <vPortExitCritical+0x2c>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d101      	bne.n	8010964 <vPortExitCritical+0x10>
 8010960:	b672      	cpsid	i
 8010962:	e7fe      	b.n	8010962 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8010964:	4b06      	ldr	r3, [pc, #24]	; (8010980 <vPortExitCritical+0x2c>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	1e5a      	subs	r2, r3, #1
 801096a:	4b05      	ldr	r3, [pc, #20]	; (8010980 <vPortExitCritical+0x2c>)
 801096c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 801096e:	4b04      	ldr	r3, [pc, #16]	; (8010980 <vPortExitCritical+0x2c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d100      	bne.n	8010978 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8010976:	b662      	cpsie	i
	}
}
 8010978:	46c0      	nop			; (mov r8, r8)
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	46c0      	nop			; (mov r8, r8)
 8010980:	20000100 	.word	0x20000100

08010984 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8010984:	f3ef 8010 	mrs	r0, PRIMASK
 8010988:	b672      	cpsid	i
 801098a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801098c:	46c0      	nop			; (mov r8, r8)
 801098e:	0018      	movs	r0, r3

08010990 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8010990:	f380 8810 	msr	PRIMASK, r0
 8010994:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8010996:	46c0      	nop			; (mov r8, r8)
	...

080109a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109a0:	f3ef 8009 	mrs	r0, PSP
 80109a4:	4b0e      	ldr	r3, [pc, #56]	; (80109e0 <pxCurrentTCBConst>)
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	3820      	subs	r0, #32
 80109aa:	6010      	str	r0, [r2, #0]
 80109ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80109ae:	4644      	mov	r4, r8
 80109b0:	464d      	mov	r5, r9
 80109b2:	4656      	mov	r6, sl
 80109b4:	465f      	mov	r7, fp
 80109b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80109b8:	b508      	push	{r3, lr}
 80109ba:	b672      	cpsid	i
 80109bc:	f7ff f90c 	bl	800fbd8 <vTaskSwitchContext>
 80109c0:	b662      	cpsie	i
 80109c2:	bc0c      	pop	{r2, r3}
 80109c4:	6811      	ldr	r1, [r2, #0]
 80109c6:	6808      	ldr	r0, [r1, #0]
 80109c8:	3010      	adds	r0, #16
 80109ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80109cc:	46a0      	mov	r8, r4
 80109ce:	46a9      	mov	r9, r5
 80109d0:	46b2      	mov	sl, r6
 80109d2:	46bb      	mov	fp, r7
 80109d4:	f380 8809 	msr	PSP, r0
 80109d8:	3820      	subs	r0, #32
 80109da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80109dc:	4718      	bx	r3
 80109de:	46c0      	nop			; (mov r8, r8)

080109e0 <pxCurrentTCBConst>:
 80109e0:	200044e8 	.word	0x200044e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80109e4:	46c0      	nop			; (mov r8, r8)
 80109e6:	46c0      	nop			; (mov r8, r8)

080109e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80109ee:	f7ff ffc9 	bl	8010984 <ulSetInterruptMaskFromISR>
 80109f2:	0003      	movs	r3, r0
 80109f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80109f6:	f7ff f83f 	bl	800fa78 <xTaskIncrementTick>
 80109fa:	1e03      	subs	r3, r0, #0
 80109fc:	d003      	beq.n	8010a06 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80109fe:	4b06      	ldr	r3, [pc, #24]	; (8010a18 <xPortSysTickHandler+0x30>)
 8010a00:	2280      	movs	r2, #128	; 0x80
 8010a02:	0552      	lsls	r2, r2, #21
 8010a04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	0018      	movs	r0, r3
 8010a0a:	f7ff ffc1 	bl	8010990 <vClearInterruptMaskFromISR>
}
 8010a0e:	46c0      	nop			; (mov r8, r8)
 8010a10:	46bd      	mov	sp, r7
 8010a12:	b002      	add	sp, #8
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	46c0      	nop			; (mov r8, r8)
 8010a18:	e000ed04 	.word	0xe000ed04

08010a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a20:	4b0b      	ldr	r3, [pc, #44]	; (8010a50 <vPortSetupTimerInterrupt+0x34>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a26:	4b0b      	ldr	r3, [pc, #44]	; (8010a54 <vPortSetupTimerInterrupt+0x38>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a2c:	4b0a      	ldr	r3, [pc, #40]	; (8010a58 <vPortSetupTimerInterrupt+0x3c>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	22fa      	movs	r2, #250	; 0xfa
 8010a32:	0091      	lsls	r1, r2, #2
 8010a34:	0018      	movs	r0, r3
 8010a36:	f7ef fb83 	bl	8000140 <__udivsi3>
 8010a3a:	0003      	movs	r3, r0
 8010a3c:	001a      	movs	r2, r3
 8010a3e:	4b07      	ldr	r3, [pc, #28]	; (8010a5c <vPortSetupTimerInterrupt+0x40>)
 8010a40:	3a01      	subs	r2, #1
 8010a42:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010a44:	4b02      	ldr	r3, [pc, #8]	; (8010a50 <vPortSetupTimerInterrupt+0x34>)
 8010a46:	2207      	movs	r2, #7
 8010a48:	601a      	str	r2, [r3, #0]
}
 8010a4a:	46c0      	nop			; (mov r8, r8)
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	e000e010 	.word	0xe000e010
 8010a54:	e000e018 	.word	0xe000e018
 8010a58:	200000f4 	.word	0x200000f4
 8010a5c:	e000e014 	.word	0xe000e014

08010a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8010a6c:	f7fe ff5e 	bl	800f92c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010a70:	4b4b      	ldr	r3, [pc, #300]	; (8010ba0 <pvPortMalloc+0x140>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d101      	bne.n	8010a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010a78:	f000 f8ec 	bl	8010c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010a7c:	4b49      	ldr	r3, [pc, #292]	; (8010ba4 <pvPortMalloc+0x144>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	4013      	ands	r3, r2
 8010a84:	d000      	beq.n	8010a88 <pvPortMalloc+0x28>
 8010a86:	e07e      	b.n	8010b86 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d012      	beq.n	8010ab4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8010a8e:	2208      	movs	r2, #8
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	189b      	adds	r3, r3, r2
 8010a94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2207      	movs	r2, #7
 8010a9a:	4013      	ands	r3, r2
 8010a9c:	d00a      	beq.n	8010ab4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2207      	movs	r2, #7
 8010aa2:	4393      	bics	r3, r2
 8010aa4:	3308      	adds	r3, #8
 8010aa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2207      	movs	r2, #7
 8010aac:	4013      	ands	r3, r2
 8010aae:	d001      	beq.n	8010ab4 <pvPortMalloc+0x54>
 8010ab0:	b672      	cpsid	i
 8010ab2:	e7fe      	b.n	8010ab2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d065      	beq.n	8010b86 <pvPortMalloc+0x126>
 8010aba:	4b3b      	ldr	r3, [pc, #236]	; (8010ba8 <pvPortMalloc+0x148>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d860      	bhi.n	8010b86 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010ac4:	4b39      	ldr	r3, [pc, #228]	; (8010bac <pvPortMalloc+0x14c>)
 8010ac6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8010ac8:	4b38      	ldr	r3, [pc, #224]	; (8010bac <pvPortMalloc+0x14c>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ace:	e004      	b.n	8010ada <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d903      	bls.n	8010aec <pvPortMalloc+0x8c>
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d1f1      	bne.n	8010ad0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010aec:	4b2c      	ldr	r3, [pc, #176]	; (8010ba0 <pvPortMalloc+0x140>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	697a      	ldr	r2, [r7, #20]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d047      	beq.n	8010b86 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2208      	movs	r2, #8
 8010afc:	189b      	adds	r3, r3, r2
 8010afe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	685a      	ldr	r2, [r3, #4]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	1ad2      	subs	r2, r2, r3
 8010b10:	2308      	movs	r3, #8
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d916      	bls.n	8010b46 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010b18:	697a      	ldr	r2, [r7, #20]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	18d3      	adds	r3, r2, r3
 8010b1e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	2207      	movs	r2, #7
 8010b24:	4013      	ands	r3, r2
 8010b26:	d001      	beq.n	8010b2c <pvPortMalloc+0xcc>
 8010b28:	b672      	cpsid	i
 8010b2a:	e7fe      	b.n	8010b2a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	685a      	ldr	r2, [r3, #4]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	1ad2      	subs	r2, r2, r3
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	0018      	movs	r0, r3
 8010b42:	f000 f8e7 	bl	8010d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010b46:	4b18      	ldr	r3, [pc, #96]	; (8010ba8 <pvPortMalloc+0x148>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	1ad2      	subs	r2, r2, r3
 8010b50:	4b15      	ldr	r3, [pc, #84]	; (8010ba8 <pvPortMalloc+0x148>)
 8010b52:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010b54:	4b14      	ldr	r3, [pc, #80]	; (8010ba8 <pvPortMalloc+0x148>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	4b15      	ldr	r3, [pc, #84]	; (8010bb0 <pvPortMalloc+0x150>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d203      	bcs.n	8010b68 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010b60:	4b11      	ldr	r3, [pc, #68]	; (8010ba8 <pvPortMalloc+0x148>)
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	4b12      	ldr	r3, [pc, #72]	; (8010bb0 <pvPortMalloc+0x150>)
 8010b66:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	685a      	ldr	r2, [r3, #4]
 8010b6c:	4b0d      	ldr	r3, [pc, #52]	; (8010ba4 <pvPortMalloc+0x144>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	431a      	orrs	r2, r3
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010b7c:	4b0d      	ldr	r3, [pc, #52]	; (8010bb4 <pvPortMalloc+0x154>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	1c5a      	adds	r2, r3, #1
 8010b82:	4b0c      	ldr	r3, [pc, #48]	; (8010bb4 <pvPortMalloc+0x154>)
 8010b84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010b86:	f7fe fedd 	bl	800f944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2207      	movs	r2, #7
 8010b8e:	4013      	ands	r3, r2
 8010b90:	d001      	beq.n	8010b96 <pvPortMalloc+0x136>
 8010b92:	b672      	cpsid	i
 8010b94:	e7fe      	b.n	8010b94 <pvPortMalloc+0x134>
	return pvReturn;
 8010b96:	68fb      	ldr	r3, [r7, #12]
}
 8010b98:	0018      	movs	r0, r3
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	b006      	add	sp, #24
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	2000571c 	.word	0x2000571c
 8010ba4:	20005730 	.word	0x20005730
 8010ba8:	20005720 	.word	0x20005720
 8010bac:	20005714 	.word	0x20005714
 8010bb0:	20005724 	.word	0x20005724
 8010bb4:	20005728 	.word	0x20005728

08010bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d03a      	beq.n	8010c40 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010bca:	2308      	movs	r3, #8
 8010bcc:	425b      	negs	r3, r3
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	18d3      	adds	r3, r2, r3
 8010bd2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	685a      	ldr	r2, [r3, #4]
 8010bdc:	4b1a      	ldr	r3, [pc, #104]	; (8010c48 <vPortFree+0x90>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4013      	ands	r3, r2
 8010be2:	d101      	bne.n	8010be8 <vPortFree+0x30>
 8010be4:	b672      	cpsid	i
 8010be6:	e7fe      	b.n	8010be6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d001      	beq.n	8010bf4 <vPortFree+0x3c>
 8010bf0:	b672      	cpsid	i
 8010bf2:	e7fe      	b.n	8010bf2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	685a      	ldr	r2, [r3, #4]
 8010bf8:	4b13      	ldr	r3, [pc, #76]	; (8010c48 <vPortFree+0x90>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4013      	ands	r3, r2
 8010bfe:	d01f      	beq.n	8010c40 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d11b      	bne.n	8010c40 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	685a      	ldr	r2, [r3, #4]
 8010c0c:	4b0e      	ldr	r3, [pc, #56]	; (8010c48 <vPortFree+0x90>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	43db      	mvns	r3, r3
 8010c12:	401a      	ands	r2, r3
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010c18:	f7fe fe88 	bl	800f92c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	685a      	ldr	r2, [r3, #4]
 8010c20:	4b0a      	ldr	r3, [pc, #40]	; (8010c4c <vPortFree+0x94>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	18d2      	adds	r2, r2, r3
 8010c26:	4b09      	ldr	r3, [pc, #36]	; (8010c4c <vPortFree+0x94>)
 8010c28:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	0018      	movs	r0, r3
 8010c2e:	f000 f871 	bl	8010d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010c32:	4b07      	ldr	r3, [pc, #28]	; (8010c50 <vPortFree+0x98>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	1c5a      	adds	r2, r3, #1
 8010c38:	4b05      	ldr	r3, [pc, #20]	; (8010c50 <vPortFree+0x98>)
 8010c3a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8010c3c:	f7fe fe82 	bl	800f944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010c40:	46c0      	nop			; (mov r8, r8)
 8010c42:	46bd      	mov	sp, r7
 8010c44:	b004      	add	sp, #16
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	20005730 	.word	0x20005730
 8010c4c:	20005720 	.word	0x20005720
 8010c50:	2000572c 	.word	0x2000572c

08010c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010c5a:	23c0      	movs	r3, #192	; 0xc0
 8010c5c:	011b      	lsls	r3, r3, #4
 8010c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010c60:	4b26      	ldr	r3, [pc, #152]	; (8010cfc <prvHeapInit+0xa8>)
 8010c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2207      	movs	r2, #7
 8010c68:	4013      	ands	r3, r2
 8010c6a:	d00c      	beq.n	8010c86 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	3307      	adds	r3, #7
 8010c70:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	2207      	movs	r2, #7
 8010c76:	4393      	bics	r3, r2
 8010c78:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c7a:	68ba      	ldr	r2, [r7, #8]
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	1ad2      	subs	r2, r2, r3
 8010c80:	4b1e      	ldr	r3, [pc, #120]	; (8010cfc <prvHeapInit+0xa8>)
 8010c82:	18d3      	adds	r3, r2, r3
 8010c84:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c8a:	4b1d      	ldr	r3, [pc, #116]	; (8010d00 <prvHeapInit+0xac>)
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c90:	4b1b      	ldr	r3, [pc, #108]	; (8010d00 <prvHeapInit+0xac>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	68ba      	ldr	r2, [r7, #8]
 8010c9a:	18d3      	adds	r3, r2, r3
 8010c9c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c9e:	2208      	movs	r2, #8
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	1a9b      	subs	r3, r3, r2
 8010ca4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2207      	movs	r2, #7
 8010caa:	4393      	bics	r3, r2
 8010cac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	4b14      	ldr	r3, [pc, #80]	; (8010d04 <prvHeapInit+0xb0>)
 8010cb2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8010cb4:	4b13      	ldr	r3, [pc, #76]	; (8010d04 <prvHeapInit+0xb0>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010cbc:	4b11      	ldr	r3, [pc, #68]	; (8010d04 <prvHeapInit+0xb0>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	68fa      	ldr	r2, [r7, #12]
 8010ccc:	1ad2      	subs	r2, r2, r3
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010cd2:	4b0c      	ldr	r3, [pc, #48]	; (8010d04 <prvHeapInit+0xb0>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	685a      	ldr	r2, [r3, #4]
 8010cde:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <prvHeapInit+0xb4>)
 8010ce0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	4b09      	ldr	r3, [pc, #36]	; (8010d0c <prvHeapInit+0xb8>)
 8010ce8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010cea:	4b09      	ldr	r3, [pc, #36]	; (8010d10 <prvHeapInit+0xbc>)
 8010cec:	2280      	movs	r2, #128	; 0x80
 8010cee:	0612      	lsls	r2, r2, #24
 8010cf0:	601a      	str	r2, [r3, #0]
}
 8010cf2:	46c0      	nop			; (mov r8, r8)
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	b004      	add	sp, #16
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	46c0      	nop			; (mov r8, r8)
 8010cfc:	20004b14 	.word	0x20004b14
 8010d00:	20005714 	.word	0x20005714
 8010d04:	2000571c 	.word	0x2000571c
 8010d08:	20005724 	.word	0x20005724
 8010d0c:	20005720 	.word	0x20005720
 8010d10:	20005730 	.word	0x20005730

08010d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d1c:	4b27      	ldr	r3, [pc, #156]	; (8010dbc <prvInsertBlockIntoFreeList+0xa8>)
 8010d1e:	60fb      	str	r3, [r7, #12]
 8010d20:	e002      	b.n	8010d28 <prvInsertBlockIntoFreeList+0x14>
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	60fb      	str	r3, [r7, #12]
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d8f7      	bhi.n	8010d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	18d3      	adds	r3, r2, r3
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d108      	bne.n	8010d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	685a      	ldr	r2, [r3, #4]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	18d2      	adds	r2, r2, r3
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	18d2      	adds	r2, r2, r3
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d118      	bne.n	8010d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	4b14      	ldr	r3, [pc, #80]	; (8010dc0 <prvInsertBlockIntoFreeList+0xac>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d00d      	beq.n	8010d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	685a      	ldr	r2, [r3, #4]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	18d2      	adds	r2, r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	601a      	str	r2, [r3, #0]
 8010d90:	e008      	b.n	8010da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d92:	4b0b      	ldr	r3, [pc, #44]	; (8010dc0 <prvInsertBlockIntoFreeList+0xac>)
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	601a      	str	r2, [r3, #0]
 8010d9a:	e003      	b.n	8010da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d002      	beq.n	8010db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010db2:	46c0      	nop			; (mov r8, r8)
 8010db4:	46bd      	mov	sp, r7
 8010db6:	b004      	add	sp, #16
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	46c0      	nop			; (mov r8, r8)
 8010dbc:	20005714 	.word	0x20005714
 8010dc0:	2000571c 	.word	0x2000571c

08010dc4 <atoi>:
 8010dc4:	b510      	push	{r4, lr}
 8010dc6:	220a      	movs	r2, #10
 8010dc8:	2100      	movs	r1, #0
 8010dca:	f000 ff81 	bl	8011cd0 <strtol>
 8010dce:	bd10      	pop	{r4, pc}

08010dd0 <malloc>:
 8010dd0:	b510      	push	{r4, lr}
 8010dd2:	4b03      	ldr	r3, [pc, #12]	; (8010de0 <malloc+0x10>)
 8010dd4:	0001      	movs	r1, r0
 8010dd6:	6818      	ldr	r0, [r3, #0]
 8010dd8:	f000 f826 	bl	8010e28 <_malloc_r>
 8010ddc:	bd10      	pop	{r4, pc}
 8010dde:	46c0      	nop			; (mov r8, r8)
 8010de0:	200002c8 	.word	0x200002c8

08010de4 <sbrk_aligned>:
 8010de4:	b570      	push	{r4, r5, r6, lr}
 8010de6:	4e0f      	ldr	r6, [pc, #60]	; (8010e24 <sbrk_aligned+0x40>)
 8010de8:	000d      	movs	r5, r1
 8010dea:	6831      	ldr	r1, [r6, #0]
 8010dec:	0004      	movs	r4, r0
 8010dee:	2900      	cmp	r1, #0
 8010df0:	d102      	bne.n	8010df8 <sbrk_aligned+0x14>
 8010df2:	f002 f891 	bl	8012f18 <_sbrk_r>
 8010df6:	6030      	str	r0, [r6, #0]
 8010df8:	0029      	movs	r1, r5
 8010dfa:	0020      	movs	r0, r4
 8010dfc:	f002 f88c 	bl	8012f18 <_sbrk_r>
 8010e00:	1c43      	adds	r3, r0, #1
 8010e02:	d00a      	beq.n	8010e1a <sbrk_aligned+0x36>
 8010e04:	2303      	movs	r3, #3
 8010e06:	1cc5      	adds	r5, r0, #3
 8010e08:	439d      	bics	r5, r3
 8010e0a:	42a8      	cmp	r0, r5
 8010e0c:	d007      	beq.n	8010e1e <sbrk_aligned+0x3a>
 8010e0e:	1a29      	subs	r1, r5, r0
 8010e10:	0020      	movs	r0, r4
 8010e12:	f002 f881 	bl	8012f18 <_sbrk_r>
 8010e16:	3001      	adds	r0, #1
 8010e18:	d101      	bne.n	8010e1e <sbrk_aligned+0x3a>
 8010e1a:	2501      	movs	r5, #1
 8010e1c:	426d      	negs	r5, r5
 8010e1e:	0028      	movs	r0, r5
 8010e20:	bd70      	pop	{r4, r5, r6, pc}
 8010e22:	46c0      	nop			; (mov r8, r8)
 8010e24:	20005738 	.word	0x20005738

08010e28 <_malloc_r>:
 8010e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e2a:	2203      	movs	r2, #3
 8010e2c:	1ccb      	adds	r3, r1, #3
 8010e2e:	4393      	bics	r3, r2
 8010e30:	3308      	adds	r3, #8
 8010e32:	0006      	movs	r6, r0
 8010e34:	001f      	movs	r7, r3
 8010e36:	2b0c      	cmp	r3, #12
 8010e38:	d238      	bcs.n	8010eac <_malloc_r+0x84>
 8010e3a:	270c      	movs	r7, #12
 8010e3c:	42b9      	cmp	r1, r7
 8010e3e:	d837      	bhi.n	8010eb0 <_malloc_r+0x88>
 8010e40:	0030      	movs	r0, r6
 8010e42:	f000 f873 	bl	8010f2c <__malloc_lock>
 8010e46:	4b38      	ldr	r3, [pc, #224]	; (8010f28 <_malloc_r+0x100>)
 8010e48:	9300      	str	r3, [sp, #0]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	001c      	movs	r4, r3
 8010e4e:	2c00      	cmp	r4, #0
 8010e50:	d133      	bne.n	8010eba <_malloc_r+0x92>
 8010e52:	0039      	movs	r1, r7
 8010e54:	0030      	movs	r0, r6
 8010e56:	f7ff ffc5 	bl	8010de4 <sbrk_aligned>
 8010e5a:	0004      	movs	r4, r0
 8010e5c:	1c43      	adds	r3, r0, #1
 8010e5e:	d15e      	bne.n	8010f1e <_malloc_r+0xf6>
 8010e60:	9b00      	ldr	r3, [sp, #0]
 8010e62:	681c      	ldr	r4, [r3, #0]
 8010e64:	0025      	movs	r5, r4
 8010e66:	2d00      	cmp	r5, #0
 8010e68:	d14e      	bne.n	8010f08 <_malloc_r+0xe0>
 8010e6a:	2c00      	cmp	r4, #0
 8010e6c:	d051      	beq.n	8010f12 <_malloc_r+0xea>
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	0029      	movs	r1, r5
 8010e72:	18e3      	adds	r3, r4, r3
 8010e74:	0030      	movs	r0, r6
 8010e76:	9301      	str	r3, [sp, #4]
 8010e78:	f002 f84e 	bl	8012f18 <_sbrk_r>
 8010e7c:	9b01      	ldr	r3, [sp, #4]
 8010e7e:	4283      	cmp	r3, r0
 8010e80:	d147      	bne.n	8010f12 <_malloc_r+0xea>
 8010e82:	6823      	ldr	r3, [r4, #0]
 8010e84:	0030      	movs	r0, r6
 8010e86:	1aff      	subs	r7, r7, r3
 8010e88:	0039      	movs	r1, r7
 8010e8a:	f7ff ffab 	bl	8010de4 <sbrk_aligned>
 8010e8e:	3001      	adds	r0, #1
 8010e90:	d03f      	beq.n	8010f12 <_malloc_r+0xea>
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	19db      	adds	r3, r3, r7
 8010e96:	6023      	str	r3, [r4, #0]
 8010e98:	9b00      	ldr	r3, [sp, #0]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d040      	beq.n	8010f22 <_malloc_r+0xfa>
 8010ea0:	685a      	ldr	r2, [r3, #4]
 8010ea2:	42a2      	cmp	r2, r4
 8010ea4:	d133      	bne.n	8010f0e <_malloc_r+0xe6>
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	605a      	str	r2, [r3, #4]
 8010eaa:	e014      	b.n	8010ed6 <_malloc_r+0xae>
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	dac5      	bge.n	8010e3c <_malloc_r+0x14>
 8010eb0:	230c      	movs	r3, #12
 8010eb2:	2500      	movs	r5, #0
 8010eb4:	6033      	str	r3, [r6, #0]
 8010eb6:	0028      	movs	r0, r5
 8010eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010eba:	6821      	ldr	r1, [r4, #0]
 8010ebc:	1bc9      	subs	r1, r1, r7
 8010ebe:	d420      	bmi.n	8010f02 <_malloc_r+0xda>
 8010ec0:	290b      	cmp	r1, #11
 8010ec2:	d918      	bls.n	8010ef6 <_malloc_r+0xce>
 8010ec4:	19e2      	adds	r2, r4, r7
 8010ec6:	6027      	str	r7, [r4, #0]
 8010ec8:	42a3      	cmp	r3, r4
 8010eca:	d112      	bne.n	8010ef2 <_malloc_r+0xca>
 8010ecc:	9b00      	ldr	r3, [sp, #0]
 8010ece:	601a      	str	r2, [r3, #0]
 8010ed0:	6863      	ldr	r3, [r4, #4]
 8010ed2:	6011      	str	r1, [r2, #0]
 8010ed4:	6053      	str	r3, [r2, #4]
 8010ed6:	0030      	movs	r0, r6
 8010ed8:	0025      	movs	r5, r4
 8010eda:	f000 f82f 	bl	8010f3c <__malloc_unlock>
 8010ede:	2207      	movs	r2, #7
 8010ee0:	350b      	adds	r5, #11
 8010ee2:	1d23      	adds	r3, r4, #4
 8010ee4:	4395      	bics	r5, r2
 8010ee6:	1aea      	subs	r2, r5, r3
 8010ee8:	429d      	cmp	r5, r3
 8010eea:	d0e4      	beq.n	8010eb6 <_malloc_r+0x8e>
 8010eec:	1b5b      	subs	r3, r3, r5
 8010eee:	50a3      	str	r3, [r4, r2]
 8010ef0:	e7e1      	b.n	8010eb6 <_malloc_r+0x8e>
 8010ef2:	605a      	str	r2, [r3, #4]
 8010ef4:	e7ec      	b.n	8010ed0 <_malloc_r+0xa8>
 8010ef6:	6862      	ldr	r2, [r4, #4]
 8010ef8:	42a3      	cmp	r3, r4
 8010efa:	d1d5      	bne.n	8010ea8 <_malloc_r+0x80>
 8010efc:	9b00      	ldr	r3, [sp, #0]
 8010efe:	601a      	str	r2, [r3, #0]
 8010f00:	e7e9      	b.n	8010ed6 <_malloc_r+0xae>
 8010f02:	0023      	movs	r3, r4
 8010f04:	6864      	ldr	r4, [r4, #4]
 8010f06:	e7a2      	b.n	8010e4e <_malloc_r+0x26>
 8010f08:	002c      	movs	r4, r5
 8010f0a:	686d      	ldr	r5, [r5, #4]
 8010f0c:	e7ab      	b.n	8010e66 <_malloc_r+0x3e>
 8010f0e:	0013      	movs	r3, r2
 8010f10:	e7c4      	b.n	8010e9c <_malloc_r+0x74>
 8010f12:	230c      	movs	r3, #12
 8010f14:	0030      	movs	r0, r6
 8010f16:	6033      	str	r3, [r6, #0]
 8010f18:	f000 f810 	bl	8010f3c <__malloc_unlock>
 8010f1c:	e7cb      	b.n	8010eb6 <_malloc_r+0x8e>
 8010f1e:	6027      	str	r7, [r4, #0]
 8010f20:	e7d9      	b.n	8010ed6 <_malloc_r+0xae>
 8010f22:	605b      	str	r3, [r3, #4]
 8010f24:	deff      	udf	#255	; 0xff
 8010f26:	46c0      	nop			; (mov r8, r8)
 8010f28:	20005734 	.word	0x20005734

08010f2c <__malloc_lock>:
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	4802      	ldr	r0, [pc, #8]	; (8010f38 <__malloc_lock+0xc>)
 8010f30:	f002 f843 	bl	8012fba <__retarget_lock_acquire_recursive>
 8010f34:	bd10      	pop	{r4, pc}
 8010f36:	46c0      	nop			; (mov r8, r8)
 8010f38:	2000587c 	.word	0x2000587c

08010f3c <__malloc_unlock>:
 8010f3c:	b510      	push	{r4, lr}
 8010f3e:	4802      	ldr	r0, [pc, #8]	; (8010f48 <__malloc_unlock+0xc>)
 8010f40:	f002 f83c 	bl	8012fbc <__retarget_lock_release_recursive>
 8010f44:	bd10      	pop	{r4, pc}
 8010f46:	46c0      	nop			; (mov r8, r8)
 8010f48:	2000587c 	.word	0x2000587c

08010f4c <sulp>:
 8010f4c:	b570      	push	{r4, r5, r6, lr}
 8010f4e:	0016      	movs	r6, r2
 8010f50:	000d      	movs	r5, r1
 8010f52:	f003 fe55 	bl	8014c00 <__ulp>
 8010f56:	2e00      	cmp	r6, #0
 8010f58:	d00d      	beq.n	8010f76 <sulp+0x2a>
 8010f5a:	236b      	movs	r3, #107	; 0x6b
 8010f5c:	006a      	lsls	r2, r5, #1
 8010f5e:	0d52      	lsrs	r2, r2, #21
 8010f60:	1a9b      	subs	r3, r3, r2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	dd07      	ble.n	8010f76 <sulp+0x2a>
 8010f66:	2400      	movs	r4, #0
 8010f68:	4a03      	ldr	r2, [pc, #12]	; (8010f78 <sulp+0x2c>)
 8010f6a:	051b      	lsls	r3, r3, #20
 8010f6c:	189d      	adds	r5, r3, r2
 8010f6e:	002b      	movs	r3, r5
 8010f70:	0022      	movs	r2, r4
 8010f72:	f7f1 f9af 	bl	80022d4 <__aeabi_dmul>
 8010f76:	bd70      	pop	{r4, r5, r6, pc}
 8010f78:	3ff00000 	.word	0x3ff00000

08010f7c <_strtod_l>:
 8010f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f7e:	b0a1      	sub	sp, #132	; 0x84
 8010f80:	9219      	str	r2, [sp, #100]	; 0x64
 8010f82:	2200      	movs	r2, #0
 8010f84:	2600      	movs	r6, #0
 8010f86:	2700      	movs	r7, #0
 8010f88:	9004      	str	r0, [sp, #16]
 8010f8a:	9107      	str	r1, [sp, #28]
 8010f8c:	921c      	str	r2, [sp, #112]	; 0x70
 8010f8e:	911b      	str	r1, [sp, #108]	; 0x6c
 8010f90:	780a      	ldrb	r2, [r1, #0]
 8010f92:	2a2b      	cmp	r2, #43	; 0x2b
 8010f94:	d055      	beq.n	8011042 <_strtod_l+0xc6>
 8010f96:	d841      	bhi.n	801101c <_strtod_l+0xa0>
 8010f98:	2a0d      	cmp	r2, #13
 8010f9a:	d83b      	bhi.n	8011014 <_strtod_l+0x98>
 8010f9c:	2a08      	cmp	r2, #8
 8010f9e:	d83b      	bhi.n	8011018 <_strtod_l+0x9c>
 8010fa0:	2a00      	cmp	r2, #0
 8010fa2:	d044      	beq.n	801102e <_strtod_l+0xb2>
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	920f      	str	r2, [sp, #60]	; 0x3c
 8010fa8:	2100      	movs	r1, #0
 8010faa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010fac:	9109      	str	r1, [sp, #36]	; 0x24
 8010fae:	782a      	ldrb	r2, [r5, #0]
 8010fb0:	2a30      	cmp	r2, #48	; 0x30
 8010fb2:	d000      	beq.n	8010fb6 <_strtod_l+0x3a>
 8010fb4:	e085      	b.n	80110c2 <_strtod_l+0x146>
 8010fb6:	786a      	ldrb	r2, [r5, #1]
 8010fb8:	3120      	adds	r1, #32
 8010fba:	438a      	bics	r2, r1
 8010fbc:	2a58      	cmp	r2, #88	; 0x58
 8010fbe:	d000      	beq.n	8010fc2 <_strtod_l+0x46>
 8010fc0:	e075      	b.n	80110ae <_strtod_l+0x132>
 8010fc2:	9302      	str	r3, [sp, #8]
 8010fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fc6:	4a97      	ldr	r2, [pc, #604]	; (8011224 <_strtod_l+0x2a8>)
 8010fc8:	9301      	str	r3, [sp, #4]
 8010fca:	ab1c      	add	r3, sp, #112	; 0x70
 8010fcc:	9300      	str	r3, [sp, #0]
 8010fce:	9804      	ldr	r0, [sp, #16]
 8010fd0:	ab1d      	add	r3, sp, #116	; 0x74
 8010fd2:	a91b      	add	r1, sp, #108	; 0x6c
 8010fd4:	f002 ff8a 	bl	8013eec <__gethex>
 8010fd8:	230f      	movs	r3, #15
 8010fda:	0002      	movs	r2, r0
 8010fdc:	401a      	ands	r2, r3
 8010fde:	0004      	movs	r4, r0
 8010fe0:	9205      	str	r2, [sp, #20]
 8010fe2:	4218      	tst	r0, r3
 8010fe4:	d005      	beq.n	8010ff2 <_strtod_l+0x76>
 8010fe6:	2a06      	cmp	r2, #6
 8010fe8:	d12d      	bne.n	8011046 <_strtod_l+0xca>
 8010fea:	1c6b      	adds	r3, r5, #1
 8010fec:	931b      	str	r3, [sp, #108]	; 0x6c
 8010fee:	2300      	movs	r3, #0
 8010ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ff2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d002      	beq.n	8010ffe <_strtod_l+0x82>
 8010ff8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ffa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010ffc:	6013      	str	r3, [r2, #0]
 8010ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011000:	2b00      	cmp	r3, #0
 8011002:	d01b      	beq.n	801103c <_strtod_l+0xc0>
 8011004:	2380      	movs	r3, #128	; 0x80
 8011006:	0032      	movs	r2, r6
 8011008:	061b      	lsls	r3, r3, #24
 801100a:	18fb      	adds	r3, r7, r3
 801100c:	0010      	movs	r0, r2
 801100e:	0019      	movs	r1, r3
 8011010:	b021      	add	sp, #132	; 0x84
 8011012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011014:	2a20      	cmp	r2, #32
 8011016:	d1c5      	bne.n	8010fa4 <_strtod_l+0x28>
 8011018:	3101      	adds	r1, #1
 801101a:	e7b8      	b.n	8010f8e <_strtod_l+0x12>
 801101c:	2a2d      	cmp	r2, #45	; 0x2d
 801101e:	d1c1      	bne.n	8010fa4 <_strtod_l+0x28>
 8011020:	3a2c      	subs	r2, #44	; 0x2c
 8011022:	920f      	str	r2, [sp, #60]	; 0x3c
 8011024:	1c4a      	adds	r2, r1, #1
 8011026:	921b      	str	r2, [sp, #108]	; 0x6c
 8011028:	784a      	ldrb	r2, [r1, #1]
 801102a:	2a00      	cmp	r2, #0
 801102c:	d1bc      	bne.n	8010fa8 <_strtod_l+0x2c>
 801102e:	9b07      	ldr	r3, [sp, #28]
 8011030:	931b      	str	r3, [sp, #108]	; 0x6c
 8011032:	2300      	movs	r3, #0
 8011034:	930f      	str	r3, [sp, #60]	; 0x3c
 8011036:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011038:	2b00      	cmp	r3, #0
 801103a:	d1dd      	bne.n	8010ff8 <_strtod_l+0x7c>
 801103c:	0032      	movs	r2, r6
 801103e:	003b      	movs	r3, r7
 8011040:	e7e4      	b.n	801100c <_strtod_l+0x90>
 8011042:	2200      	movs	r2, #0
 8011044:	e7ed      	b.n	8011022 <_strtod_l+0xa6>
 8011046:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011048:	2a00      	cmp	r2, #0
 801104a:	d007      	beq.n	801105c <_strtod_l+0xe0>
 801104c:	2135      	movs	r1, #53	; 0x35
 801104e:	a81e      	add	r0, sp, #120	; 0x78
 8011050:	f003 fec7 	bl	8014de2 <__copybits>
 8011054:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011056:	9804      	ldr	r0, [sp, #16]
 8011058:	f003 fa90 	bl	801457c <_Bfree>
 801105c:	9805      	ldr	r0, [sp, #20]
 801105e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011060:	3801      	subs	r0, #1
 8011062:	2804      	cmp	r0, #4
 8011064:	d806      	bhi.n	8011074 <_strtod_l+0xf8>
 8011066:	f7ef f857 	bl	8000118 <__gnu_thumb1_case_uqi>
 801106a:	0312      	.short	0x0312
 801106c:	1e1c      	.short	0x1e1c
 801106e:	12          	.byte	0x12
 801106f:	00          	.byte	0x00
 8011070:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8011072:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8011074:	05e4      	lsls	r4, r4, #23
 8011076:	d502      	bpl.n	801107e <_strtod_l+0x102>
 8011078:	2380      	movs	r3, #128	; 0x80
 801107a:	061b      	lsls	r3, r3, #24
 801107c:	431f      	orrs	r7, r3
 801107e:	4b6a      	ldr	r3, [pc, #424]	; (8011228 <_strtod_l+0x2ac>)
 8011080:	423b      	tst	r3, r7
 8011082:	d1b6      	bne.n	8010ff2 <_strtod_l+0x76>
 8011084:	f001 ff6e 	bl	8012f64 <__errno>
 8011088:	2322      	movs	r3, #34	; 0x22
 801108a:	6003      	str	r3, [r0, #0]
 801108c:	e7b1      	b.n	8010ff2 <_strtod_l+0x76>
 801108e:	4967      	ldr	r1, [pc, #412]	; (801122c <_strtod_l+0x2b0>)
 8011090:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011092:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8011094:	400a      	ands	r2, r1
 8011096:	4966      	ldr	r1, [pc, #408]	; (8011230 <_strtod_l+0x2b4>)
 8011098:	185b      	adds	r3, r3, r1
 801109a:	051b      	lsls	r3, r3, #20
 801109c:	431a      	orrs	r2, r3
 801109e:	0017      	movs	r7, r2
 80110a0:	e7e8      	b.n	8011074 <_strtod_l+0xf8>
 80110a2:	4f61      	ldr	r7, [pc, #388]	; (8011228 <_strtod_l+0x2ac>)
 80110a4:	e7e6      	b.n	8011074 <_strtod_l+0xf8>
 80110a6:	2601      	movs	r6, #1
 80110a8:	4f62      	ldr	r7, [pc, #392]	; (8011234 <_strtod_l+0x2b8>)
 80110aa:	4276      	negs	r6, r6
 80110ac:	e7e2      	b.n	8011074 <_strtod_l+0xf8>
 80110ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80110b0:	1c5a      	adds	r2, r3, #1
 80110b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80110b4:	785b      	ldrb	r3, [r3, #1]
 80110b6:	2b30      	cmp	r3, #48	; 0x30
 80110b8:	d0f9      	beq.n	80110ae <_strtod_l+0x132>
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d099      	beq.n	8010ff2 <_strtod_l+0x76>
 80110be:	2301      	movs	r3, #1
 80110c0:	9309      	str	r3, [sp, #36]	; 0x24
 80110c2:	2500      	movs	r5, #0
 80110c4:	220a      	movs	r2, #10
 80110c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80110c8:	950d      	str	r5, [sp, #52]	; 0x34
 80110ca:	9310      	str	r3, [sp, #64]	; 0x40
 80110cc:	9508      	str	r5, [sp, #32]
 80110ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80110d0:	7804      	ldrb	r4, [r0, #0]
 80110d2:	0023      	movs	r3, r4
 80110d4:	3b30      	subs	r3, #48	; 0x30
 80110d6:	b2d9      	uxtb	r1, r3
 80110d8:	2909      	cmp	r1, #9
 80110da:	d927      	bls.n	801112c <_strtod_l+0x1b0>
 80110dc:	2201      	movs	r2, #1
 80110de:	4956      	ldr	r1, [pc, #344]	; (8011238 <_strtod_l+0x2bc>)
 80110e0:	f001 fddb 	bl	8012c9a <strncmp>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	d031      	beq.n	801114c <_strtod_l+0x1d0>
 80110e8:	2000      	movs	r0, #0
 80110ea:	0023      	movs	r3, r4
 80110ec:	4684      	mov	ip, r0
 80110ee:	9a08      	ldr	r2, [sp, #32]
 80110f0:	900c      	str	r0, [sp, #48]	; 0x30
 80110f2:	9205      	str	r2, [sp, #20]
 80110f4:	2220      	movs	r2, #32
 80110f6:	0019      	movs	r1, r3
 80110f8:	4391      	bics	r1, r2
 80110fa:	000a      	movs	r2, r1
 80110fc:	2100      	movs	r1, #0
 80110fe:	9106      	str	r1, [sp, #24]
 8011100:	2a45      	cmp	r2, #69	; 0x45
 8011102:	d000      	beq.n	8011106 <_strtod_l+0x18a>
 8011104:	e0c2      	b.n	801128c <_strtod_l+0x310>
 8011106:	9b05      	ldr	r3, [sp, #20]
 8011108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801110a:	4303      	orrs	r3, r0
 801110c:	4313      	orrs	r3, r2
 801110e:	428b      	cmp	r3, r1
 8011110:	d08d      	beq.n	801102e <_strtod_l+0xb2>
 8011112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011114:	9307      	str	r3, [sp, #28]
 8011116:	3301      	adds	r3, #1
 8011118:	931b      	str	r3, [sp, #108]	; 0x6c
 801111a:	9b07      	ldr	r3, [sp, #28]
 801111c:	785b      	ldrb	r3, [r3, #1]
 801111e:	2b2b      	cmp	r3, #43	; 0x2b
 8011120:	d071      	beq.n	8011206 <_strtod_l+0x28a>
 8011122:	000c      	movs	r4, r1
 8011124:	2b2d      	cmp	r3, #45	; 0x2d
 8011126:	d174      	bne.n	8011212 <_strtod_l+0x296>
 8011128:	2401      	movs	r4, #1
 801112a:	e06d      	b.n	8011208 <_strtod_l+0x28c>
 801112c:	9908      	ldr	r1, [sp, #32]
 801112e:	2908      	cmp	r1, #8
 8011130:	dc09      	bgt.n	8011146 <_strtod_l+0x1ca>
 8011132:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011134:	4351      	muls	r1, r2
 8011136:	185b      	adds	r3, r3, r1
 8011138:	930d      	str	r3, [sp, #52]	; 0x34
 801113a:	9b08      	ldr	r3, [sp, #32]
 801113c:	3001      	adds	r0, #1
 801113e:	3301      	adds	r3, #1
 8011140:	9308      	str	r3, [sp, #32]
 8011142:	901b      	str	r0, [sp, #108]	; 0x6c
 8011144:	e7c3      	b.n	80110ce <_strtod_l+0x152>
 8011146:	4355      	muls	r5, r2
 8011148:	195d      	adds	r5, r3, r5
 801114a:	e7f6      	b.n	801113a <_strtod_l+0x1be>
 801114c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801114e:	1c5a      	adds	r2, r3, #1
 8011150:	921b      	str	r2, [sp, #108]	; 0x6c
 8011152:	9a08      	ldr	r2, [sp, #32]
 8011154:	785b      	ldrb	r3, [r3, #1]
 8011156:	2a00      	cmp	r2, #0
 8011158:	d03a      	beq.n	80111d0 <_strtod_l+0x254>
 801115a:	900c      	str	r0, [sp, #48]	; 0x30
 801115c:	9205      	str	r2, [sp, #20]
 801115e:	001a      	movs	r2, r3
 8011160:	3a30      	subs	r2, #48	; 0x30
 8011162:	2a09      	cmp	r2, #9
 8011164:	d912      	bls.n	801118c <_strtod_l+0x210>
 8011166:	2201      	movs	r2, #1
 8011168:	4694      	mov	ip, r2
 801116a:	e7c3      	b.n	80110f4 <_strtod_l+0x178>
 801116c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801116e:	3001      	adds	r0, #1
 8011170:	1c5a      	adds	r2, r3, #1
 8011172:	921b      	str	r2, [sp, #108]	; 0x6c
 8011174:	785b      	ldrb	r3, [r3, #1]
 8011176:	2b30      	cmp	r3, #48	; 0x30
 8011178:	d0f8      	beq.n	801116c <_strtod_l+0x1f0>
 801117a:	001a      	movs	r2, r3
 801117c:	3a31      	subs	r2, #49	; 0x31
 801117e:	2a08      	cmp	r2, #8
 8011180:	d83c      	bhi.n	80111fc <_strtod_l+0x280>
 8011182:	900c      	str	r0, [sp, #48]	; 0x30
 8011184:	2000      	movs	r0, #0
 8011186:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011188:	9005      	str	r0, [sp, #20]
 801118a:	9210      	str	r2, [sp, #64]	; 0x40
 801118c:	001a      	movs	r2, r3
 801118e:	1c41      	adds	r1, r0, #1
 8011190:	3a30      	subs	r2, #48	; 0x30
 8011192:	2b30      	cmp	r3, #48	; 0x30
 8011194:	d016      	beq.n	80111c4 <_strtod_l+0x248>
 8011196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011198:	185b      	adds	r3, r3, r1
 801119a:	930c      	str	r3, [sp, #48]	; 0x30
 801119c:	9b05      	ldr	r3, [sp, #20]
 801119e:	210a      	movs	r1, #10
 80111a0:	469c      	mov	ip, r3
 80111a2:	4484      	add	ip, r0
 80111a4:	4563      	cmp	r3, ip
 80111a6:	d115      	bne.n	80111d4 <_strtod_l+0x258>
 80111a8:	9905      	ldr	r1, [sp, #20]
 80111aa:	9b05      	ldr	r3, [sp, #20]
 80111ac:	3101      	adds	r1, #1
 80111ae:	1809      	adds	r1, r1, r0
 80111b0:	181b      	adds	r3, r3, r0
 80111b2:	9105      	str	r1, [sp, #20]
 80111b4:	2b08      	cmp	r3, #8
 80111b6:	dc19      	bgt.n	80111ec <_strtod_l+0x270>
 80111b8:	230a      	movs	r3, #10
 80111ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80111bc:	434b      	muls	r3, r1
 80111be:	2100      	movs	r1, #0
 80111c0:	18d3      	adds	r3, r2, r3
 80111c2:	930d      	str	r3, [sp, #52]	; 0x34
 80111c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80111c6:	0008      	movs	r0, r1
 80111c8:	1c5a      	adds	r2, r3, #1
 80111ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80111cc:	785b      	ldrb	r3, [r3, #1]
 80111ce:	e7c6      	b.n	801115e <_strtod_l+0x1e2>
 80111d0:	9808      	ldr	r0, [sp, #32]
 80111d2:	e7d0      	b.n	8011176 <_strtod_l+0x1fa>
 80111d4:	1c5c      	adds	r4, r3, #1
 80111d6:	2b08      	cmp	r3, #8
 80111d8:	dc04      	bgt.n	80111e4 <_strtod_l+0x268>
 80111da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111dc:	434b      	muls	r3, r1
 80111de:	930d      	str	r3, [sp, #52]	; 0x34
 80111e0:	0023      	movs	r3, r4
 80111e2:	e7df      	b.n	80111a4 <_strtod_l+0x228>
 80111e4:	2c10      	cmp	r4, #16
 80111e6:	dcfb      	bgt.n	80111e0 <_strtod_l+0x264>
 80111e8:	434d      	muls	r5, r1
 80111ea:	e7f9      	b.n	80111e0 <_strtod_l+0x264>
 80111ec:	9b05      	ldr	r3, [sp, #20]
 80111ee:	2100      	movs	r1, #0
 80111f0:	2b10      	cmp	r3, #16
 80111f2:	dce7      	bgt.n	80111c4 <_strtod_l+0x248>
 80111f4:	230a      	movs	r3, #10
 80111f6:	435d      	muls	r5, r3
 80111f8:	1955      	adds	r5, r2, r5
 80111fa:	e7e3      	b.n	80111c4 <_strtod_l+0x248>
 80111fc:	2200      	movs	r2, #0
 80111fe:	920c      	str	r2, [sp, #48]	; 0x30
 8011200:	9205      	str	r2, [sp, #20]
 8011202:	3201      	adds	r2, #1
 8011204:	e7b0      	b.n	8011168 <_strtod_l+0x1ec>
 8011206:	2400      	movs	r4, #0
 8011208:	9b07      	ldr	r3, [sp, #28]
 801120a:	3302      	adds	r3, #2
 801120c:	931b      	str	r3, [sp, #108]	; 0x6c
 801120e:	9b07      	ldr	r3, [sp, #28]
 8011210:	789b      	ldrb	r3, [r3, #2]
 8011212:	001a      	movs	r2, r3
 8011214:	3a30      	subs	r2, #48	; 0x30
 8011216:	2a09      	cmp	r2, #9
 8011218:	d914      	bls.n	8011244 <_strtod_l+0x2c8>
 801121a:	9a07      	ldr	r2, [sp, #28]
 801121c:	921b      	str	r2, [sp, #108]	; 0x6c
 801121e:	2200      	movs	r2, #0
 8011220:	e033      	b.n	801128a <_strtod_l+0x30e>
 8011222:	46c0      	nop			; (mov r8, r8)
 8011224:	0801804c 	.word	0x0801804c
 8011228:	7ff00000 	.word	0x7ff00000
 801122c:	ffefffff 	.word	0xffefffff
 8011230:	00000433 	.word	0x00000433
 8011234:	7fffffff 	.word	0x7fffffff
 8011238:	08018048 	.word	0x08018048
 801123c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801123e:	1c5a      	adds	r2, r3, #1
 8011240:	921b      	str	r2, [sp, #108]	; 0x6c
 8011242:	785b      	ldrb	r3, [r3, #1]
 8011244:	2b30      	cmp	r3, #48	; 0x30
 8011246:	d0f9      	beq.n	801123c <_strtod_l+0x2c0>
 8011248:	2200      	movs	r2, #0
 801124a:	9206      	str	r2, [sp, #24]
 801124c:	001a      	movs	r2, r3
 801124e:	3a31      	subs	r2, #49	; 0x31
 8011250:	2a08      	cmp	r2, #8
 8011252:	d81b      	bhi.n	801128c <_strtod_l+0x310>
 8011254:	3b30      	subs	r3, #48	; 0x30
 8011256:	930e      	str	r3, [sp, #56]	; 0x38
 8011258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801125a:	9306      	str	r3, [sp, #24]
 801125c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801125e:	1c59      	adds	r1, r3, #1
 8011260:	911b      	str	r1, [sp, #108]	; 0x6c
 8011262:	785b      	ldrb	r3, [r3, #1]
 8011264:	001a      	movs	r2, r3
 8011266:	3a30      	subs	r2, #48	; 0x30
 8011268:	2a09      	cmp	r2, #9
 801126a:	d93a      	bls.n	80112e2 <_strtod_l+0x366>
 801126c:	9a06      	ldr	r2, [sp, #24]
 801126e:	1a8a      	subs	r2, r1, r2
 8011270:	49b2      	ldr	r1, [pc, #712]	; (801153c <_strtod_l+0x5c0>)
 8011272:	9106      	str	r1, [sp, #24]
 8011274:	2a08      	cmp	r2, #8
 8011276:	dc04      	bgt.n	8011282 <_strtod_l+0x306>
 8011278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801127a:	9206      	str	r2, [sp, #24]
 801127c:	428a      	cmp	r2, r1
 801127e:	dd00      	ble.n	8011282 <_strtod_l+0x306>
 8011280:	9106      	str	r1, [sp, #24]
 8011282:	2c00      	cmp	r4, #0
 8011284:	d002      	beq.n	801128c <_strtod_l+0x310>
 8011286:	9a06      	ldr	r2, [sp, #24]
 8011288:	4252      	negs	r2, r2
 801128a:	9206      	str	r2, [sp, #24]
 801128c:	9a05      	ldr	r2, [sp, #20]
 801128e:	2a00      	cmp	r2, #0
 8011290:	d14d      	bne.n	801132e <_strtod_l+0x3b2>
 8011292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011294:	4310      	orrs	r0, r2
 8011296:	d000      	beq.n	801129a <_strtod_l+0x31e>
 8011298:	e6ab      	b.n	8010ff2 <_strtod_l+0x76>
 801129a:	4662      	mov	r2, ip
 801129c:	2a00      	cmp	r2, #0
 801129e:	d000      	beq.n	80112a2 <_strtod_l+0x326>
 80112a0:	e6c5      	b.n	801102e <_strtod_l+0xb2>
 80112a2:	2b69      	cmp	r3, #105	; 0x69
 80112a4:	d027      	beq.n	80112f6 <_strtod_l+0x37a>
 80112a6:	dc23      	bgt.n	80112f0 <_strtod_l+0x374>
 80112a8:	2b49      	cmp	r3, #73	; 0x49
 80112aa:	d024      	beq.n	80112f6 <_strtod_l+0x37a>
 80112ac:	2b4e      	cmp	r3, #78	; 0x4e
 80112ae:	d000      	beq.n	80112b2 <_strtod_l+0x336>
 80112b0:	e6bd      	b.n	801102e <_strtod_l+0xb2>
 80112b2:	49a3      	ldr	r1, [pc, #652]	; (8011540 <_strtod_l+0x5c4>)
 80112b4:	a81b      	add	r0, sp, #108	; 0x6c
 80112b6:	f003 f84f 	bl	8014358 <__match>
 80112ba:	2800      	cmp	r0, #0
 80112bc:	d100      	bne.n	80112c0 <_strtod_l+0x344>
 80112be:	e6b6      	b.n	801102e <_strtod_l+0xb2>
 80112c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b28      	cmp	r3, #40	; 0x28
 80112c6:	d12c      	bne.n	8011322 <_strtod_l+0x3a6>
 80112c8:	499e      	ldr	r1, [pc, #632]	; (8011544 <_strtod_l+0x5c8>)
 80112ca:	aa1e      	add	r2, sp, #120	; 0x78
 80112cc:	a81b      	add	r0, sp, #108	; 0x6c
 80112ce:	f003 f857 	bl	8014380 <__hexnan>
 80112d2:	2805      	cmp	r0, #5
 80112d4:	d125      	bne.n	8011322 <_strtod_l+0x3a6>
 80112d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80112d8:	4a9b      	ldr	r2, [pc, #620]	; (8011548 <_strtod_l+0x5cc>)
 80112da:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80112dc:	431a      	orrs	r2, r3
 80112de:	0017      	movs	r7, r2
 80112e0:	e687      	b.n	8010ff2 <_strtod_l+0x76>
 80112e2:	220a      	movs	r2, #10
 80112e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80112e6:	434a      	muls	r2, r1
 80112e8:	18d2      	adds	r2, r2, r3
 80112ea:	3a30      	subs	r2, #48	; 0x30
 80112ec:	920e      	str	r2, [sp, #56]	; 0x38
 80112ee:	e7b5      	b.n	801125c <_strtod_l+0x2e0>
 80112f0:	2b6e      	cmp	r3, #110	; 0x6e
 80112f2:	d0de      	beq.n	80112b2 <_strtod_l+0x336>
 80112f4:	e69b      	b.n	801102e <_strtod_l+0xb2>
 80112f6:	4995      	ldr	r1, [pc, #596]	; (801154c <_strtod_l+0x5d0>)
 80112f8:	a81b      	add	r0, sp, #108	; 0x6c
 80112fa:	f003 f82d 	bl	8014358 <__match>
 80112fe:	2800      	cmp	r0, #0
 8011300:	d100      	bne.n	8011304 <_strtod_l+0x388>
 8011302:	e694      	b.n	801102e <_strtod_l+0xb2>
 8011304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011306:	4992      	ldr	r1, [pc, #584]	; (8011550 <_strtod_l+0x5d4>)
 8011308:	3b01      	subs	r3, #1
 801130a:	a81b      	add	r0, sp, #108	; 0x6c
 801130c:	931b      	str	r3, [sp, #108]	; 0x6c
 801130e:	f003 f823 	bl	8014358 <__match>
 8011312:	2800      	cmp	r0, #0
 8011314:	d102      	bne.n	801131c <_strtod_l+0x3a0>
 8011316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011318:	3301      	adds	r3, #1
 801131a:	931b      	str	r3, [sp, #108]	; 0x6c
 801131c:	2600      	movs	r6, #0
 801131e:	4f8a      	ldr	r7, [pc, #552]	; (8011548 <_strtod_l+0x5cc>)
 8011320:	e667      	b.n	8010ff2 <_strtod_l+0x76>
 8011322:	488c      	ldr	r0, [pc, #560]	; (8011554 <_strtod_l+0x5d8>)
 8011324:	f001 fe68 	bl	8012ff8 <nan>
 8011328:	0006      	movs	r6, r0
 801132a:	000f      	movs	r7, r1
 801132c:	e661      	b.n	8010ff2 <_strtod_l+0x76>
 801132e:	9b06      	ldr	r3, [sp, #24]
 8011330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011332:	1a9b      	subs	r3, r3, r2
 8011334:	9309      	str	r3, [sp, #36]	; 0x24
 8011336:	9b08      	ldr	r3, [sp, #32]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d101      	bne.n	8011340 <_strtod_l+0x3c4>
 801133c:	9b05      	ldr	r3, [sp, #20]
 801133e:	9308      	str	r3, [sp, #32]
 8011340:	9c05      	ldr	r4, [sp, #20]
 8011342:	2c10      	cmp	r4, #16
 8011344:	dd00      	ble.n	8011348 <_strtod_l+0x3cc>
 8011346:	2410      	movs	r4, #16
 8011348:	980d      	ldr	r0, [sp, #52]	; 0x34
 801134a:	f7f1 fe8b 	bl	8003064 <__aeabi_ui2d>
 801134e:	9b05      	ldr	r3, [sp, #20]
 8011350:	0006      	movs	r6, r0
 8011352:	000f      	movs	r7, r1
 8011354:	2b09      	cmp	r3, #9
 8011356:	dd15      	ble.n	8011384 <_strtod_l+0x408>
 8011358:	0022      	movs	r2, r4
 801135a:	4b7f      	ldr	r3, [pc, #508]	; (8011558 <_strtod_l+0x5dc>)
 801135c:	3a09      	subs	r2, #9
 801135e:	00d2      	lsls	r2, r2, #3
 8011360:	189b      	adds	r3, r3, r2
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	f7f0 ffb5 	bl	80022d4 <__aeabi_dmul>
 801136a:	0006      	movs	r6, r0
 801136c:	0028      	movs	r0, r5
 801136e:	000f      	movs	r7, r1
 8011370:	f7f1 fe78 	bl	8003064 <__aeabi_ui2d>
 8011374:	0002      	movs	r2, r0
 8011376:	000b      	movs	r3, r1
 8011378:	0030      	movs	r0, r6
 801137a:	0039      	movs	r1, r7
 801137c:	f7f0 f850 	bl	8001420 <__aeabi_dadd>
 8011380:	0006      	movs	r6, r0
 8011382:	000f      	movs	r7, r1
 8011384:	9b05      	ldr	r3, [sp, #20]
 8011386:	2b0f      	cmp	r3, #15
 8011388:	dc39      	bgt.n	80113fe <_strtod_l+0x482>
 801138a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801138c:	2b00      	cmp	r3, #0
 801138e:	d100      	bne.n	8011392 <_strtod_l+0x416>
 8011390:	e62f      	b.n	8010ff2 <_strtod_l+0x76>
 8011392:	dd24      	ble.n	80113de <_strtod_l+0x462>
 8011394:	2b16      	cmp	r3, #22
 8011396:	dc09      	bgt.n	80113ac <_strtod_l+0x430>
 8011398:	496f      	ldr	r1, [pc, #444]	; (8011558 <_strtod_l+0x5dc>)
 801139a:	00db      	lsls	r3, r3, #3
 801139c:	18c9      	adds	r1, r1, r3
 801139e:	0032      	movs	r2, r6
 80113a0:	6808      	ldr	r0, [r1, #0]
 80113a2:	6849      	ldr	r1, [r1, #4]
 80113a4:	003b      	movs	r3, r7
 80113a6:	f7f0 ff95 	bl	80022d4 <__aeabi_dmul>
 80113aa:	e7bd      	b.n	8011328 <_strtod_l+0x3ac>
 80113ac:	2325      	movs	r3, #37	; 0x25
 80113ae:	9a05      	ldr	r2, [sp, #20]
 80113b0:	1a9b      	subs	r3, r3, r2
 80113b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113b4:	4293      	cmp	r3, r2
 80113b6:	db22      	blt.n	80113fe <_strtod_l+0x482>
 80113b8:	240f      	movs	r4, #15
 80113ba:	9b05      	ldr	r3, [sp, #20]
 80113bc:	4d66      	ldr	r5, [pc, #408]	; (8011558 <_strtod_l+0x5dc>)
 80113be:	1ae4      	subs	r4, r4, r3
 80113c0:	00e1      	lsls	r1, r4, #3
 80113c2:	1869      	adds	r1, r5, r1
 80113c4:	0032      	movs	r2, r6
 80113c6:	6808      	ldr	r0, [r1, #0]
 80113c8:	6849      	ldr	r1, [r1, #4]
 80113ca:	003b      	movs	r3, r7
 80113cc:	f7f0 ff82 	bl	80022d4 <__aeabi_dmul>
 80113d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113d2:	1b1c      	subs	r4, r3, r4
 80113d4:	00e4      	lsls	r4, r4, #3
 80113d6:	192d      	adds	r5, r5, r4
 80113d8:	682a      	ldr	r2, [r5, #0]
 80113da:	686b      	ldr	r3, [r5, #4]
 80113dc:	e7e3      	b.n	80113a6 <_strtod_l+0x42a>
 80113de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113e0:	3316      	adds	r3, #22
 80113e2:	db0c      	blt.n	80113fe <_strtod_l+0x482>
 80113e4:	9906      	ldr	r1, [sp, #24]
 80113e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80113e8:	4b5b      	ldr	r3, [pc, #364]	; (8011558 <_strtod_l+0x5dc>)
 80113ea:	1a52      	subs	r2, r2, r1
 80113ec:	00d2      	lsls	r2, r2, #3
 80113ee:	189b      	adds	r3, r3, r2
 80113f0:	0030      	movs	r0, r6
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	0039      	movs	r1, r7
 80113f8:	f7f0 fb72 	bl	8001ae0 <__aeabi_ddiv>
 80113fc:	e794      	b.n	8011328 <_strtod_l+0x3ac>
 80113fe:	9b05      	ldr	r3, [sp, #20]
 8011400:	1b1c      	subs	r4, r3, r4
 8011402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011404:	18e4      	adds	r4, r4, r3
 8011406:	2c00      	cmp	r4, #0
 8011408:	dd72      	ble.n	80114f0 <_strtod_l+0x574>
 801140a:	220f      	movs	r2, #15
 801140c:	0023      	movs	r3, r4
 801140e:	4013      	ands	r3, r2
 8011410:	4214      	tst	r4, r2
 8011412:	d00a      	beq.n	801142a <_strtod_l+0x4ae>
 8011414:	4950      	ldr	r1, [pc, #320]	; (8011558 <_strtod_l+0x5dc>)
 8011416:	00db      	lsls	r3, r3, #3
 8011418:	18c9      	adds	r1, r1, r3
 801141a:	0032      	movs	r2, r6
 801141c:	6808      	ldr	r0, [r1, #0]
 801141e:	6849      	ldr	r1, [r1, #4]
 8011420:	003b      	movs	r3, r7
 8011422:	f7f0 ff57 	bl	80022d4 <__aeabi_dmul>
 8011426:	0006      	movs	r6, r0
 8011428:	000f      	movs	r7, r1
 801142a:	230f      	movs	r3, #15
 801142c:	439c      	bics	r4, r3
 801142e:	d04a      	beq.n	80114c6 <_strtod_l+0x54a>
 8011430:	3326      	adds	r3, #38	; 0x26
 8011432:	33ff      	adds	r3, #255	; 0xff
 8011434:	429c      	cmp	r4, r3
 8011436:	dd22      	ble.n	801147e <_strtod_l+0x502>
 8011438:	2300      	movs	r3, #0
 801143a:	9305      	str	r3, [sp, #20]
 801143c:	9306      	str	r3, [sp, #24]
 801143e:	930d      	str	r3, [sp, #52]	; 0x34
 8011440:	9308      	str	r3, [sp, #32]
 8011442:	2322      	movs	r3, #34	; 0x22
 8011444:	2600      	movs	r6, #0
 8011446:	9a04      	ldr	r2, [sp, #16]
 8011448:	4f3f      	ldr	r7, [pc, #252]	; (8011548 <_strtod_l+0x5cc>)
 801144a:	6013      	str	r3, [r2, #0]
 801144c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801144e:	42b3      	cmp	r3, r6
 8011450:	d100      	bne.n	8011454 <_strtod_l+0x4d8>
 8011452:	e5ce      	b.n	8010ff2 <_strtod_l+0x76>
 8011454:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011456:	9804      	ldr	r0, [sp, #16]
 8011458:	f003 f890 	bl	801457c <_Bfree>
 801145c:	9908      	ldr	r1, [sp, #32]
 801145e:	9804      	ldr	r0, [sp, #16]
 8011460:	f003 f88c 	bl	801457c <_Bfree>
 8011464:	9906      	ldr	r1, [sp, #24]
 8011466:	9804      	ldr	r0, [sp, #16]
 8011468:	f003 f888 	bl	801457c <_Bfree>
 801146c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801146e:	9804      	ldr	r0, [sp, #16]
 8011470:	f003 f884 	bl	801457c <_Bfree>
 8011474:	9905      	ldr	r1, [sp, #20]
 8011476:	9804      	ldr	r0, [sp, #16]
 8011478:	f003 f880 	bl	801457c <_Bfree>
 801147c:	e5b9      	b.n	8010ff2 <_strtod_l+0x76>
 801147e:	2300      	movs	r3, #0
 8011480:	0030      	movs	r0, r6
 8011482:	0039      	movs	r1, r7
 8011484:	4d35      	ldr	r5, [pc, #212]	; (801155c <_strtod_l+0x5e0>)
 8011486:	1124      	asrs	r4, r4, #4
 8011488:	9307      	str	r3, [sp, #28]
 801148a:	2c01      	cmp	r4, #1
 801148c:	dc1e      	bgt.n	80114cc <_strtod_l+0x550>
 801148e:	2b00      	cmp	r3, #0
 8011490:	d001      	beq.n	8011496 <_strtod_l+0x51a>
 8011492:	0006      	movs	r6, r0
 8011494:	000f      	movs	r7, r1
 8011496:	4b32      	ldr	r3, [pc, #200]	; (8011560 <_strtod_l+0x5e4>)
 8011498:	9a07      	ldr	r2, [sp, #28]
 801149a:	18ff      	adds	r7, r7, r3
 801149c:	4b2f      	ldr	r3, [pc, #188]	; (801155c <_strtod_l+0x5e0>)
 801149e:	00d2      	lsls	r2, r2, #3
 80114a0:	189d      	adds	r5, r3, r2
 80114a2:	6828      	ldr	r0, [r5, #0]
 80114a4:	6869      	ldr	r1, [r5, #4]
 80114a6:	0032      	movs	r2, r6
 80114a8:	003b      	movs	r3, r7
 80114aa:	f7f0 ff13 	bl	80022d4 <__aeabi_dmul>
 80114ae:	4b26      	ldr	r3, [pc, #152]	; (8011548 <_strtod_l+0x5cc>)
 80114b0:	4a2c      	ldr	r2, [pc, #176]	; (8011564 <_strtod_l+0x5e8>)
 80114b2:	0006      	movs	r6, r0
 80114b4:	400b      	ands	r3, r1
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d8be      	bhi.n	8011438 <_strtod_l+0x4bc>
 80114ba:	4a2b      	ldr	r2, [pc, #172]	; (8011568 <_strtod_l+0x5ec>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d913      	bls.n	80114e8 <_strtod_l+0x56c>
 80114c0:	2601      	movs	r6, #1
 80114c2:	4f2a      	ldr	r7, [pc, #168]	; (801156c <_strtod_l+0x5f0>)
 80114c4:	4276      	negs	r6, r6
 80114c6:	2300      	movs	r3, #0
 80114c8:	9307      	str	r3, [sp, #28]
 80114ca:	e088      	b.n	80115de <_strtod_l+0x662>
 80114cc:	2201      	movs	r2, #1
 80114ce:	4214      	tst	r4, r2
 80114d0:	d004      	beq.n	80114dc <_strtod_l+0x560>
 80114d2:	682a      	ldr	r2, [r5, #0]
 80114d4:	686b      	ldr	r3, [r5, #4]
 80114d6:	f7f0 fefd 	bl	80022d4 <__aeabi_dmul>
 80114da:	2301      	movs	r3, #1
 80114dc:	9a07      	ldr	r2, [sp, #28]
 80114de:	1064      	asrs	r4, r4, #1
 80114e0:	3201      	adds	r2, #1
 80114e2:	9207      	str	r2, [sp, #28]
 80114e4:	3508      	adds	r5, #8
 80114e6:	e7d0      	b.n	801148a <_strtod_l+0x50e>
 80114e8:	23d4      	movs	r3, #212	; 0xd4
 80114ea:	049b      	lsls	r3, r3, #18
 80114ec:	18cf      	adds	r7, r1, r3
 80114ee:	e7ea      	b.n	80114c6 <_strtod_l+0x54a>
 80114f0:	2c00      	cmp	r4, #0
 80114f2:	d0e8      	beq.n	80114c6 <_strtod_l+0x54a>
 80114f4:	4264      	negs	r4, r4
 80114f6:	230f      	movs	r3, #15
 80114f8:	0022      	movs	r2, r4
 80114fa:	401a      	ands	r2, r3
 80114fc:	421c      	tst	r4, r3
 80114fe:	d00a      	beq.n	8011516 <_strtod_l+0x59a>
 8011500:	4b15      	ldr	r3, [pc, #84]	; (8011558 <_strtod_l+0x5dc>)
 8011502:	00d2      	lsls	r2, r2, #3
 8011504:	189b      	adds	r3, r3, r2
 8011506:	0030      	movs	r0, r6
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	0039      	movs	r1, r7
 801150e:	f7f0 fae7 	bl	8001ae0 <__aeabi_ddiv>
 8011512:	0006      	movs	r6, r0
 8011514:	000f      	movs	r7, r1
 8011516:	1124      	asrs	r4, r4, #4
 8011518:	d0d5      	beq.n	80114c6 <_strtod_l+0x54a>
 801151a:	2c1f      	cmp	r4, #31
 801151c:	dd28      	ble.n	8011570 <_strtod_l+0x5f4>
 801151e:	2300      	movs	r3, #0
 8011520:	9305      	str	r3, [sp, #20]
 8011522:	9306      	str	r3, [sp, #24]
 8011524:	930d      	str	r3, [sp, #52]	; 0x34
 8011526:	9308      	str	r3, [sp, #32]
 8011528:	2322      	movs	r3, #34	; 0x22
 801152a:	9a04      	ldr	r2, [sp, #16]
 801152c:	2600      	movs	r6, #0
 801152e:	6013      	str	r3, [r2, #0]
 8011530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011532:	2700      	movs	r7, #0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d18d      	bne.n	8011454 <_strtod_l+0x4d8>
 8011538:	e55b      	b.n	8010ff2 <_strtod_l+0x76>
 801153a:	46c0      	nop			; (mov r8, r8)
 801153c:	00004e1f 	.word	0x00004e1f
 8011540:	080181ae 	.word	0x080181ae
 8011544:	08018060 	.word	0x08018060
 8011548:	7ff00000 	.word	0x7ff00000
 801154c:	080181a6 	.word	0x080181a6
 8011550:	08018292 	.word	0x08018292
 8011554:	0801828e 	.word	0x0801828e
 8011558:	080183e8 	.word	0x080183e8
 801155c:	080183c0 	.word	0x080183c0
 8011560:	fcb00000 	.word	0xfcb00000
 8011564:	7ca00000 	.word	0x7ca00000
 8011568:	7c900000 	.word	0x7c900000
 801156c:	7fefffff 	.word	0x7fefffff
 8011570:	2310      	movs	r3, #16
 8011572:	0022      	movs	r2, r4
 8011574:	401a      	ands	r2, r3
 8011576:	9207      	str	r2, [sp, #28]
 8011578:	421c      	tst	r4, r3
 801157a:	d001      	beq.n	8011580 <_strtod_l+0x604>
 801157c:	335a      	adds	r3, #90	; 0x5a
 801157e:	9307      	str	r3, [sp, #28]
 8011580:	0030      	movs	r0, r6
 8011582:	0039      	movs	r1, r7
 8011584:	2300      	movs	r3, #0
 8011586:	4dc4      	ldr	r5, [pc, #784]	; (8011898 <_strtod_l+0x91c>)
 8011588:	2201      	movs	r2, #1
 801158a:	4214      	tst	r4, r2
 801158c:	d004      	beq.n	8011598 <_strtod_l+0x61c>
 801158e:	682a      	ldr	r2, [r5, #0]
 8011590:	686b      	ldr	r3, [r5, #4]
 8011592:	f7f0 fe9f 	bl	80022d4 <__aeabi_dmul>
 8011596:	2301      	movs	r3, #1
 8011598:	1064      	asrs	r4, r4, #1
 801159a:	3508      	adds	r5, #8
 801159c:	2c00      	cmp	r4, #0
 801159e:	d1f3      	bne.n	8011588 <_strtod_l+0x60c>
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d001      	beq.n	80115a8 <_strtod_l+0x62c>
 80115a4:	0006      	movs	r6, r0
 80115a6:	000f      	movs	r7, r1
 80115a8:	9b07      	ldr	r3, [sp, #28]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00f      	beq.n	80115ce <_strtod_l+0x652>
 80115ae:	236b      	movs	r3, #107	; 0x6b
 80115b0:	007a      	lsls	r2, r7, #1
 80115b2:	0d52      	lsrs	r2, r2, #21
 80115b4:	0039      	movs	r1, r7
 80115b6:	1a9b      	subs	r3, r3, r2
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	dd08      	ble.n	80115ce <_strtod_l+0x652>
 80115bc:	2b1f      	cmp	r3, #31
 80115be:	dc00      	bgt.n	80115c2 <_strtod_l+0x646>
 80115c0:	e121      	b.n	8011806 <_strtod_l+0x88a>
 80115c2:	2600      	movs	r6, #0
 80115c4:	2b34      	cmp	r3, #52	; 0x34
 80115c6:	dc00      	bgt.n	80115ca <_strtod_l+0x64e>
 80115c8:	e116      	b.n	80117f8 <_strtod_l+0x87c>
 80115ca:	27dc      	movs	r7, #220	; 0xdc
 80115cc:	04bf      	lsls	r7, r7, #18
 80115ce:	2200      	movs	r2, #0
 80115d0:	2300      	movs	r3, #0
 80115d2:	0030      	movs	r0, r6
 80115d4:	0039      	movs	r1, r7
 80115d6:	f7ee ff39 	bl	800044c <__aeabi_dcmpeq>
 80115da:	2800      	cmp	r0, #0
 80115dc:	d19f      	bne.n	801151e <_strtod_l+0x5a2>
 80115de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115e0:	9a08      	ldr	r2, [sp, #32]
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80115e6:	9b05      	ldr	r3, [sp, #20]
 80115e8:	9804      	ldr	r0, [sp, #16]
 80115ea:	f003 f82f 	bl	801464c <__s2b>
 80115ee:	900d      	str	r0, [sp, #52]	; 0x34
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d100      	bne.n	80115f6 <_strtod_l+0x67a>
 80115f4:	e720      	b.n	8011438 <_strtod_l+0x4bc>
 80115f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115f8:	9906      	ldr	r1, [sp, #24]
 80115fa:	17da      	asrs	r2, r3, #31
 80115fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115fe:	1a5b      	subs	r3, r3, r1
 8011600:	401a      	ands	r2, r3
 8011602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011604:	9215      	str	r2, [sp, #84]	; 0x54
 8011606:	43db      	mvns	r3, r3
 8011608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801160a:	17db      	asrs	r3, r3, #31
 801160c:	401a      	ands	r2, r3
 801160e:	2300      	movs	r3, #0
 8011610:	9218      	str	r2, [sp, #96]	; 0x60
 8011612:	9305      	str	r3, [sp, #20]
 8011614:	9306      	str	r3, [sp, #24]
 8011616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011618:	9804      	ldr	r0, [sp, #16]
 801161a:	6859      	ldr	r1, [r3, #4]
 801161c:	f002 ff6a 	bl	80144f4 <_Balloc>
 8011620:	9008      	str	r0, [sp, #32]
 8011622:	2800      	cmp	r0, #0
 8011624:	d100      	bne.n	8011628 <_strtod_l+0x6ac>
 8011626:	e70c      	b.n	8011442 <_strtod_l+0x4c6>
 8011628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801162a:	300c      	adds	r0, #12
 801162c:	0019      	movs	r1, r3
 801162e:	691a      	ldr	r2, [r3, #16]
 8011630:	310c      	adds	r1, #12
 8011632:	3202      	adds	r2, #2
 8011634:	0092      	lsls	r2, r2, #2
 8011636:	f001 fcd5 	bl	8012fe4 <memcpy>
 801163a:	ab1e      	add	r3, sp, #120	; 0x78
 801163c:	9301      	str	r3, [sp, #4]
 801163e:	ab1d      	add	r3, sp, #116	; 0x74
 8011640:	9300      	str	r3, [sp, #0]
 8011642:	0032      	movs	r2, r6
 8011644:	003b      	movs	r3, r7
 8011646:	9804      	ldr	r0, [sp, #16]
 8011648:	9610      	str	r6, [sp, #64]	; 0x40
 801164a:	9711      	str	r7, [sp, #68]	; 0x44
 801164c:	f003 fb40 	bl	8014cd0 <__d2b>
 8011650:	901c      	str	r0, [sp, #112]	; 0x70
 8011652:	2800      	cmp	r0, #0
 8011654:	d100      	bne.n	8011658 <_strtod_l+0x6dc>
 8011656:	e6f4      	b.n	8011442 <_strtod_l+0x4c6>
 8011658:	2101      	movs	r1, #1
 801165a:	9804      	ldr	r0, [sp, #16]
 801165c:	f003 f88a 	bl	8014774 <__i2b>
 8011660:	9006      	str	r0, [sp, #24]
 8011662:	2800      	cmp	r0, #0
 8011664:	d100      	bne.n	8011668 <_strtod_l+0x6ec>
 8011666:	e6ec      	b.n	8011442 <_strtod_l+0x4c6>
 8011668:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801166a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801166c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801166e:	1ad4      	subs	r4, r2, r3
 8011670:	2b00      	cmp	r3, #0
 8011672:	db01      	blt.n	8011678 <_strtod_l+0x6fc>
 8011674:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8011676:	195d      	adds	r5, r3, r5
 8011678:	9907      	ldr	r1, [sp, #28]
 801167a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801167c:	1a5b      	subs	r3, r3, r1
 801167e:	2136      	movs	r1, #54	; 0x36
 8011680:	189b      	adds	r3, r3, r2
 8011682:	1a8a      	subs	r2, r1, r2
 8011684:	4985      	ldr	r1, [pc, #532]	; (801189c <_strtod_l+0x920>)
 8011686:	2001      	movs	r0, #1
 8011688:	468c      	mov	ip, r1
 801168a:	2100      	movs	r1, #0
 801168c:	3b01      	subs	r3, #1
 801168e:	9114      	str	r1, [sp, #80]	; 0x50
 8011690:	9012      	str	r0, [sp, #72]	; 0x48
 8011692:	4563      	cmp	r3, ip
 8011694:	da07      	bge.n	80116a6 <_strtod_l+0x72a>
 8011696:	4661      	mov	r1, ip
 8011698:	1ac9      	subs	r1, r1, r3
 801169a:	1a52      	subs	r2, r2, r1
 801169c:	291f      	cmp	r1, #31
 801169e:	dd00      	ble.n	80116a2 <_strtod_l+0x726>
 80116a0:	e0b6      	b.n	8011810 <_strtod_l+0x894>
 80116a2:	4088      	lsls	r0, r1
 80116a4:	9012      	str	r0, [sp, #72]	; 0x48
 80116a6:	18ab      	adds	r3, r5, r2
 80116a8:	930c      	str	r3, [sp, #48]	; 0x30
 80116aa:	18a4      	adds	r4, r4, r2
 80116ac:	9b07      	ldr	r3, [sp, #28]
 80116ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116b0:	191c      	adds	r4, r3, r4
 80116b2:	002b      	movs	r3, r5
 80116b4:	4295      	cmp	r5, r2
 80116b6:	dd00      	ble.n	80116ba <_strtod_l+0x73e>
 80116b8:	0013      	movs	r3, r2
 80116ba:	42a3      	cmp	r3, r4
 80116bc:	dd00      	ble.n	80116c0 <_strtod_l+0x744>
 80116be:	0023      	movs	r3, r4
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	dd04      	ble.n	80116ce <_strtod_l+0x752>
 80116c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116c6:	1ae4      	subs	r4, r4, r3
 80116c8:	1ad2      	subs	r2, r2, r3
 80116ca:	920c      	str	r2, [sp, #48]	; 0x30
 80116cc:	1aed      	subs	r5, r5, r3
 80116ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	dd17      	ble.n	8011704 <_strtod_l+0x788>
 80116d4:	001a      	movs	r2, r3
 80116d6:	9906      	ldr	r1, [sp, #24]
 80116d8:	9804      	ldr	r0, [sp, #16]
 80116da:	f003 f913 	bl	8014904 <__pow5mult>
 80116de:	9006      	str	r0, [sp, #24]
 80116e0:	2800      	cmp	r0, #0
 80116e2:	d100      	bne.n	80116e6 <_strtod_l+0x76a>
 80116e4:	e6ad      	b.n	8011442 <_strtod_l+0x4c6>
 80116e6:	0001      	movs	r1, r0
 80116e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80116ea:	9804      	ldr	r0, [sp, #16]
 80116ec:	f003 f85a 	bl	80147a4 <__multiply>
 80116f0:	900e      	str	r0, [sp, #56]	; 0x38
 80116f2:	2800      	cmp	r0, #0
 80116f4:	d100      	bne.n	80116f8 <_strtod_l+0x77c>
 80116f6:	e6a4      	b.n	8011442 <_strtod_l+0x4c6>
 80116f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80116fa:	9804      	ldr	r0, [sp, #16]
 80116fc:	f002 ff3e 	bl	801457c <_Bfree>
 8011700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011702:	931c      	str	r3, [sp, #112]	; 0x70
 8011704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011706:	2b00      	cmp	r3, #0
 8011708:	dd00      	ble.n	801170c <_strtod_l+0x790>
 801170a:	e087      	b.n	801181c <_strtod_l+0x8a0>
 801170c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801170e:	2b00      	cmp	r3, #0
 8011710:	dd08      	ble.n	8011724 <_strtod_l+0x7a8>
 8011712:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011714:	9908      	ldr	r1, [sp, #32]
 8011716:	9804      	ldr	r0, [sp, #16]
 8011718:	f003 f8f4 	bl	8014904 <__pow5mult>
 801171c:	9008      	str	r0, [sp, #32]
 801171e:	2800      	cmp	r0, #0
 8011720:	d100      	bne.n	8011724 <_strtod_l+0x7a8>
 8011722:	e68e      	b.n	8011442 <_strtod_l+0x4c6>
 8011724:	2c00      	cmp	r4, #0
 8011726:	dd08      	ble.n	801173a <_strtod_l+0x7be>
 8011728:	0022      	movs	r2, r4
 801172a:	9908      	ldr	r1, [sp, #32]
 801172c:	9804      	ldr	r0, [sp, #16]
 801172e:	f003 f945 	bl	80149bc <__lshift>
 8011732:	9008      	str	r0, [sp, #32]
 8011734:	2800      	cmp	r0, #0
 8011736:	d100      	bne.n	801173a <_strtod_l+0x7be>
 8011738:	e683      	b.n	8011442 <_strtod_l+0x4c6>
 801173a:	2d00      	cmp	r5, #0
 801173c:	dd08      	ble.n	8011750 <_strtod_l+0x7d4>
 801173e:	002a      	movs	r2, r5
 8011740:	9906      	ldr	r1, [sp, #24]
 8011742:	9804      	ldr	r0, [sp, #16]
 8011744:	f003 f93a 	bl	80149bc <__lshift>
 8011748:	9006      	str	r0, [sp, #24]
 801174a:	2800      	cmp	r0, #0
 801174c:	d100      	bne.n	8011750 <_strtod_l+0x7d4>
 801174e:	e678      	b.n	8011442 <_strtod_l+0x4c6>
 8011750:	9a08      	ldr	r2, [sp, #32]
 8011752:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011754:	9804      	ldr	r0, [sp, #16]
 8011756:	f003 f9bb 	bl	8014ad0 <__mdiff>
 801175a:	9005      	str	r0, [sp, #20]
 801175c:	2800      	cmp	r0, #0
 801175e:	d100      	bne.n	8011762 <_strtod_l+0x7e6>
 8011760:	e66f      	b.n	8011442 <_strtod_l+0x4c6>
 8011762:	2200      	movs	r2, #0
 8011764:	68c3      	ldr	r3, [r0, #12]
 8011766:	9906      	ldr	r1, [sp, #24]
 8011768:	60c2      	str	r2, [r0, #12]
 801176a:	930c      	str	r3, [sp, #48]	; 0x30
 801176c:	f003 f994 	bl	8014a98 <__mcmp>
 8011770:	2800      	cmp	r0, #0
 8011772:	da5d      	bge.n	8011830 <_strtod_l+0x8b4>
 8011774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011776:	4333      	orrs	r3, r6
 8011778:	d000      	beq.n	801177c <_strtod_l+0x800>
 801177a:	e088      	b.n	801188e <_strtod_l+0x912>
 801177c:	033b      	lsls	r3, r7, #12
 801177e:	d000      	beq.n	8011782 <_strtod_l+0x806>
 8011780:	e085      	b.n	801188e <_strtod_l+0x912>
 8011782:	22d6      	movs	r2, #214	; 0xd6
 8011784:	4b46      	ldr	r3, [pc, #280]	; (80118a0 <_strtod_l+0x924>)
 8011786:	04d2      	lsls	r2, r2, #19
 8011788:	403b      	ands	r3, r7
 801178a:	4293      	cmp	r3, r2
 801178c:	d97f      	bls.n	801188e <_strtod_l+0x912>
 801178e:	9b05      	ldr	r3, [sp, #20]
 8011790:	695b      	ldr	r3, [r3, #20]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d103      	bne.n	801179e <_strtod_l+0x822>
 8011796:	9b05      	ldr	r3, [sp, #20]
 8011798:	691b      	ldr	r3, [r3, #16]
 801179a:	2b01      	cmp	r3, #1
 801179c:	dd77      	ble.n	801188e <_strtod_l+0x912>
 801179e:	9905      	ldr	r1, [sp, #20]
 80117a0:	2201      	movs	r2, #1
 80117a2:	9804      	ldr	r0, [sp, #16]
 80117a4:	f003 f90a 	bl	80149bc <__lshift>
 80117a8:	9906      	ldr	r1, [sp, #24]
 80117aa:	9005      	str	r0, [sp, #20]
 80117ac:	f003 f974 	bl	8014a98 <__mcmp>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	dd6c      	ble.n	801188e <_strtod_l+0x912>
 80117b4:	9907      	ldr	r1, [sp, #28]
 80117b6:	003b      	movs	r3, r7
 80117b8:	4a39      	ldr	r2, [pc, #228]	; (80118a0 <_strtod_l+0x924>)
 80117ba:	2900      	cmp	r1, #0
 80117bc:	d100      	bne.n	80117c0 <_strtod_l+0x844>
 80117be:	e094      	b.n	80118ea <_strtod_l+0x96e>
 80117c0:	0011      	movs	r1, r2
 80117c2:	20d6      	movs	r0, #214	; 0xd6
 80117c4:	4039      	ands	r1, r7
 80117c6:	04c0      	lsls	r0, r0, #19
 80117c8:	4281      	cmp	r1, r0
 80117ca:	dd00      	ble.n	80117ce <_strtod_l+0x852>
 80117cc:	e08d      	b.n	80118ea <_strtod_l+0x96e>
 80117ce:	23dc      	movs	r3, #220	; 0xdc
 80117d0:	049b      	lsls	r3, r3, #18
 80117d2:	4299      	cmp	r1, r3
 80117d4:	dc00      	bgt.n	80117d8 <_strtod_l+0x85c>
 80117d6:	e6a7      	b.n	8011528 <_strtod_l+0x5ac>
 80117d8:	0030      	movs	r0, r6
 80117da:	0039      	movs	r1, r7
 80117dc:	4b31      	ldr	r3, [pc, #196]	; (80118a4 <_strtod_l+0x928>)
 80117de:	2200      	movs	r2, #0
 80117e0:	f7f0 fd78 	bl	80022d4 <__aeabi_dmul>
 80117e4:	4b2e      	ldr	r3, [pc, #184]	; (80118a0 <_strtod_l+0x924>)
 80117e6:	0006      	movs	r6, r0
 80117e8:	000f      	movs	r7, r1
 80117ea:	420b      	tst	r3, r1
 80117ec:	d000      	beq.n	80117f0 <_strtod_l+0x874>
 80117ee:	e631      	b.n	8011454 <_strtod_l+0x4d8>
 80117f0:	2322      	movs	r3, #34	; 0x22
 80117f2:	9a04      	ldr	r2, [sp, #16]
 80117f4:	6013      	str	r3, [r2, #0]
 80117f6:	e62d      	b.n	8011454 <_strtod_l+0x4d8>
 80117f8:	234b      	movs	r3, #75	; 0x4b
 80117fa:	1a9a      	subs	r2, r3, r2
 80117fc:	3b4c      	subs	r3, #76	; 0x4c
 80117fe:	4093      	lsls	r3, r2
 8011800:	4019      	ands	r1, r3
 8011802:	000f      	movs	r7, r1
 8011804:	e6e3      	b.n	80115ce <_strtod_l+0x652>
 8011806:	2201      	movs	r2, #1
 8011808:	4252      	negs	r2, r2
 801180a:	409a      	lsls	r2, r3
 801180c:	4016      	ands	r6, r2
 801180e:	e6de      	b.n	80115ce <_strtod_l+0x652>
 8011810:	4925      	ldr	r1, [pc, #148]	; (80118a8 <_strtod_l+0x92c>)
 8011812:	1acb      	subs	r3, r1, r3
 8011814:	0001      	movs	r1, r0
 8011816:	4099      	lsls	r1, r3
 8011818:	9114      	str	r1, [sp, #80]	; 0x50
 801181a:	e743      	b.n	80116a4 <_strtod_l+0x728>
 801181c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801181e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011820:	9804      	ldr	r0, [sp, #16]
 8011822:	f003 f8cb 	bl	80149bc <__lshift>
 8011826:	901c      	str	r0, [sp, #112]	; 0x70
 8011828:	2800      	cmp	r0, #0
 801182a:	d000      	beq.n	801182e <_strtod_l+0x8b2>
 801182c:	e76e      	b.n	801170c <_strtod_l+0x790>
 801182e:	e608      	b.n	8011442 <_strtod_l+0x4c6>
 8011830:	970e      	str	r7, [sp, #56]	; 0x38
 8011832:	2800      	cmp	r0, #0
 8011834:	d177      	bne.n	8011926 <_strtod_l+0x9aa>
 8011836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011838:	033b      	lsls	r3, r7, #12
 801183a:	0b1b      	lsrs	r3, r3, #12
 801183c:	2a00      	cmp	r2, #0
 801183e:	d039      	beq.n	80118b4 <_strtod_l+0x938>
 8011840:	4a1a      	ldr	r2, [pc, #104]	; (80118ac <_strtod_l+0x930>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d139      	bne.n	80118ba <_strtod_l+0x93e>
 8011846:	2101      	movs	r1, #1
 8011848:	9b07      	ldr	r3, [sp, #28]
 801184a:	4249      	negs	r1, r1
 801184c:	0032      	movs	r2, r6
 801184e:	0008      	movs	r0, r1
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00b      	beq.n	801186c <_strtod_l+0x8f0>
 8011854:	24d4      	movs	r4, #212	; 0xd4
 8011856:	4b12      	ldr	r3, [pc, #72]	; (80118a0 <_strtod_l+0x924>)
 8011858:	0008      	movs	r0, r1
 801185a:	403b      	ands	r3, r7
 801185c:	04e4      	lsls	r4, r4, #19
 801185e:	42a3      	cmp	r3, r4
 8011860:	d804      	bhi.n	801186c <_strtod_l+0x8f0>
 8011862:	306c      	adds	r0, #108	; 0x6c
 8011864:	0d1b      	lsrs	r3, r3, #20
 8011866:	1ac3      	subs	r3, r0, r3
 8011868:	4099      	lsls	r1, r3
 801186a:	0008      	movs	r0, r1
 801186c:	4282      	cmp	r2, r0
 801186e:	d124      	bne.n	80118ba <_strtod_l+0x93e>
 8011870:	4b0f      	ldr	r3, [pc, #60]	; (80118b0 <_strtod_l+0x934>)
 8011872:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011874:	4299      	cmp	r1, r3
 8011876:	d102      	bne.n	801187e <_strtod_l+0x902>
 8011878:	3201      	adds	r2, #1
 801187a:	d100      	bne.n	801187e <_strtod_l+0x902>
 801187c:	e5e1      	b.n	8011442 <_strtod_l+0x4c6>
 801187e:	4b08      	ldr	r3, [pc, #32]	; (80118a0 <_strtod_l+0x924>)
 8011880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011882:	2600      	movs	r6, #0
 8011884:	401a      	ands	r2, r3
 8011886:	0013      	movs	r3, r2
 8011888:	2280      	movs	r2, #128	; 0x80
 801188a:	0352      	lsls	r2, r2, #13
 801188c:	189f      	adds	r7, r3, r2
 801188e:	9b07      	ldr	r3, [sp, #28]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1a1      	bne.n	80117d8 <_strtod_l+0x85c>
 8011894:	e5de      	b.n	8011454 <_strtod_l+0x4d8>
 8011896:	46c0      	nop			; (mov r8, r8)
 8011898:	08018078 	.word	0x08018078
 801189c:	fffffc02 	.word	0xfffffc02
 80118a0:	7ff00000 	.word	0x7ff00000
 80118a4:	39500000 	.word	0x39500000
 80118a8:	fffffbe2 	.word	0xfffffbe2
 80118ac:	000fffff 	.word	0x000fffff
 80118b0:	7fefffff 	.word	0x7fefffff
 80118b4:	4333      	orrs	r3, r6
 80118b6:	d100      	bne.n	80118ba <_strtod_l+0x93e>
 80118b8:	e77c      	b.n	80117b4 <_strtod_l+0x838>
 80118ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d01d      	beq.n	80118fc <_strtod_l+0x980>
 80118c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80118c4:	4213      	tst	r3, r2
 80118c6:	d0e2      	beq.n	801188e <_strtod_l+0x912>
 80118c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118ca:	0030      	movs	r0, r6
 80118cc:	0039      	movs	r1, r7
 80118ce:	9a07      	ldr	r2, [sp, #28]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d017      	beq.n	8011904 <_strtod_l+0x988>
 80118d4:	f7ff fb3a 	bl	8010f4c <sulp>
 80118d8:	0002      	movs	r2, r0
 80118da:	000b      	movs	r3, r1
 80118dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80118de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80118e0:	f7ef fd9e 	bl	8001420 <__aeabi_dadd>
 80118e4:	0006      	movs	r6, r0
 80118e6:	000f      	movs	r7, r1
 80118e8:	e7d1      	b.n	801188e <_strtod_l+0x912>
 80118ea:	2601      	movs	r6, #1
 80118ec:	4013      	ands	r3, r2
 80118ee:	4a98      	ldr	r2, [pc, #608]	; (8011b50 <_strtod_l+0xbd4>)
 80118f0:	4276      	negs	r6, r6
 80118f2:	189b      	adds	r3, r3, r2
 80118f4:	4a97      	ldr	r2, [pc, #604]	; (8011b54 <_strtod_l+0xbd8>)
 80118f6:	431a      	orrs	r2, r3
 80118f8:	0017      	movs	r7, r2
 80118fa:	e7c8      	b.n	801188e <_strtod_l+0x912>
 80118fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80118fe:	4233      	tst	r3, r6
 8011900:	d0c5      	beq.n	801188e <_strtod_l+0x912>
 8011902:	e7e1      	b.n	80118c8 <_strtod_l+0x94c>
 8011904:	f7ff fb22 	bl	8010f4c <sulp>
 8011908:	0002      	movs	r2, r0
 801190a:	000b      	movs	r3, r1
 801190c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801190e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011910:	f7f0 ffa2 	bl	8002858 <__aeabi_dsub>
 8011914:	2200      	movs	r2, #0
 8011916:	2300      	movs	r3, #0
 8011918:	0006      	movs	r6, r0
 801191a:	000f      	movs	r7, r1
 801191c:	f7ee fd96 	bl	800044c <__aeabi_dcmpeq>
 8011920:	2800      	cmp	r0, #0
 8011922:	d0b4      	beq.n	801188e <_strtod_l+0x912>
 8011924:	e600      	b.n	8011528 <_strtod_l+0x5ac>
 8011926:	9906      	ldr	r1, [sp, #24]
 8011928:	9805      	ldr	r0, [sp, #20]
 801192a:	f003 fa31 	bl	8014d90 <__ratio>
 801192e:	2380      	movs	r3, #128	; 0x80
 8011930:	2200      	movs	r2, #0
 8011932:	05db      	lsls	r3, r3, #23
 8011934:	0004      	movs	r4, r0
 8011936:	000d      	movs	r5, r1
 8011938:	f7ee fd98 	bl	800046c <__aeabi_dcmple>
 801193c:	2800      	cmp	r0, #0
 801193e:	d06d      	beq.n	8011a1c <_strtod_l+0xaa0>
 8011940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011942:	2b00      	cmp	r3, #0
 8011944:	d000      	beq.n	8011948 <_strtod_l+0x9cc>
 8011946:	e07e      	b.n	8011a46 <_strtod_l+0xaca>
 8011948:	2e00      	cmp	r6, #0
 801194a:	d158      	bne.n	80119fe <_strtod_l+0xa82>
 801194c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801194e:	031b      	lsls	r3, r3, #12
 8011950:	d000      	beq.n	8011954 <_strtod_l+0x9d8>
 8011952:	e07f      	b.n	8011a54 <_strtod_l+0xad8>
 8011954:	2200      	movs	r2, #0
 8011956:	0020      	movs	r0, r4
 8011958:	0029      	movs	r1, r5
 801195a:	4b7f      	ldr	r3, [pc, #508]	; (8011b58 <_strtod_l+0xbdc>)
 801195c:	f7ee fd7c 	bl	8000458 <__aeabi_dcmplt>
 8011960:	2800      	cmp	r0, #0
 8011962:	d158      	bne.n	8011a16 <_strtod_l+0xa9a>
 8011964:	0020      	movs	r0, r4
 8011966:	0029      	movs	r1, r5
 8011968:	2200      	movs	r2, #0
 801196a:	4b7c      	ldr	r3, [pc, #496]	; (8011b5c <_strtod_l+0xbe0>)
 801196c:	f7f0 fcb2 	bl	80022d4 <__aeabi_dmul>
 8011970:	0004      	movs	r4, r0
 8011972:	000d      	movs	r5, r1
 8011974:	2380      	movs	r3, #128	; 0x80
 8011976:	061b      	lsls	r3, r3, #24
 8011978:	940a      	str	r4, [sp, #40]	; 0x28
 801197a:	18eb      	adds	r3, r5, r3
 801197c:	930b      	str	r3, [sp, #44]	; 0x2c
 801197e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011982:	9212      	str	r2, [sp, #72]	; 0x48
 8011984:	9313      	str	r3, [sp, #76]	; 0x4c
 8011986:	4a76      	ldr	r2, [pc, #472]	; (8011b60 <_strtod_l+0xbe4>)
 8011988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801198a:	4013      	ands	r3, r2
 801198c:	9314      	str	r3, [sp, #80]	; 0x50
 801198e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011990:	4b74      	ldr	r3, [pc, #464]	; (8011b64 <_strtod_l+0xbe8>)
 8011992:	429a      	cmp	r2, r3
 8011994:	d000      	beq.n	8011998 <_strtod_l+0xa1c>
 8011996:	e091      	b.n	8011abc <_strtod_l+0xb40>
 8011998:	4a73      	ldr	r2, [pc, #460]	; (8011b68 <_strtod_l+0xbec>)
 801199a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801199c:	4694      	mov	ip, r2
 801199e:	4463      	add	r3, ip
 80119a0:	001f      	movs	r7, r3
 80119a2:	0030      	movs	r0, r6
 80119a4:	0019      	movs	r1, r3
 80119a6:	f003 f92b 	bl	8014c00 <__ulp>
 80119aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119ae:	f7f0 fc91 	bl	80022d4 <__aeabi_dmul>
 80119b2:	0032      	movs	r2, r6
 80119b4:	003b      	movs	r3, r7
 80119b6:	f7ef fd33 	bl	8001420 <__aeabi_dadd>
 80119ba:	4a69      	ldr	r2, [pc, #420]	; (8011b60 <_strtod_l+0xbe4>)
 80119bc:	4b6b      	ldr	r3, [pc, #428]	; (8011b6c <_strtod_l+0xbf0>)
 80119be:	0006      	movs	r6, r0
 80119c0:	400a      	ands	r2, r1
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d949      	bls.n	8011a5a <_strtod_l+0xade>
 80119c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119c8:	4b69      	ldr	r3, [pc, #420]	; (8011b70 <_strtod_l+0xbf4>)
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d103      	bne.n	80119d6 <_strtod_l+0xa5a>
 80119ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119d0:	3301      	adds	r3, #1
 80119d2:	d100      	bne.n	80119d6 <_strtod_l+0xa5a>
 80119d4:	e535      	b.n	8011442 <_strtod_l+0x4c6>
 80119d6:	2601      	movs	r6, #1
 80119d8:	4f65      	ldr	r7, [pc, #404]	; (8011b70 <_strtod_l+0xbf4>)
 80119da:	4276      	negs	r6, r6
 80119dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80119de:	9804      	ldr	r0, [sp, #16]
 80119e0:	f002 fdcc 	bl	801457c <_Bfree>
 80119e4:	9908      	ldr	r1, [sp, #32]
 80119e6:	9804      	ldr	r0, [sp, #16]
 80119e8:	f002 fdc8 	bl	801457c <_Bfree>
 80119ec:	9906      	ldr	r1, [sp, #24]
 80119ee:	9804      	ldr	r0, [sp, #16]
 80119f0:	f002 fdc4 	bl	801457c <_Bfree>
 80119f4:	9905      	ldr	r1, [sp, #20]
 80119f6:	9804      	ldr	r0, [sp, #16]
 80119f8:	f002 fdc0 	bl	801457c <_Bfree>
 80119fc:	e60b      	b.n	8011616 <_strtod_l+0x69a>
 80119fe:	2e01      	cmp	r6, #1
 8011a00:	d103      	bne.n	8011a0a <_strtod_l+0xa8e>
 8011a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d100      	bne.n	8011a0a <_strtod_l+0xa8e>
 8011a08:	e58e      	b.n	8011528 <_strtod_l+0x5ac>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	4c59      	ldr	r4, [pc, #356]	; (8011b74 <_strtod_l+0xbf8>)
 8011a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8011a10:	940b      	str	r4, [sp, #44]	; 0x2c
 8011a12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011a14:	e01c      	b.n	8011a50 <_strtod_l+0xad4>
 8011a16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011a18:	4d50      	ldr	r5, [pc, #320]	; (8011b5c <_strtod_l+0xbe0>)
 8011a1a:	e7ab      	b.n	8011974 <_strtod_l+0x9f8>
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	0020      	movs	r0, r4
 8011a20:	0029      	movs	r1, r5
 8011a22:	4b4e      	ldr	r3, [pc, #312]	; (8011b5c <_strtod_l+0xbe0>)
 8011a24:	f7f0 fc56 	bl	80022d4 <__aeabi_dmul>
 8011a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a2a:	0004      	movs	r4, r0
 8011a2c:	000b      	movs	r3, r1
 8011a2e:	000d      	movs	r5, r1
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	d104      	bne.n	8011a3e <_strtod_l+0xac2>
 8011a34:	2280      	movs	r2, #128	; 0x80
 8011a36:	0612      	lsls	r2, r2, #24
 8011a38:	900a      	str	r0, [sp, #40]	; 0x28
 8011a3a:	188b      	adds	r3, r1, r2
 8011a3c:	e79e      	b.n	801197c <_strtod_l+0xa00>
 8011a3e:	0002      	movs	r2, r0
 8011a40:	920a      	str	r2, [sp, #40]	; 0x28
 8011a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a44:	e79b      	b.n	801197e <_strtod_l+0xa02>
 8011a46:	2300      	movs	r3, #0
 8011a48:	4c43      	ldr	r4, [pc, #268]	; (8011b58 <_strtod_l+0xbdc>)
 8011a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8011a4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8011a4e:	2400      	movs	r4, #0
 8011a50:	4d41      	ldr	r5, [pc, #260]	; (8011b58 <_strtod_l+0xbdc>)
 8011a52:	e794      	b.n	801197e <_strtod_l+0xa02>
 8011a54:	2300      	movs	r3, #0
 8011a56:	4c47      	ldr	r4, [pc, #284]	; (8011b74 <_strtod_l+0xbf8>)
 8011a58:	e7f7      	b.n	8011a4a <_strtod_l+0xace>
 8011a5a:	23d4      	movs	r3, #212	; 0xd4
 8011a5c:	049b      	lsls	r3, r3, #18
 8011a5e:	18cf      	adds	r7, r1, r3
 8011a60:	9b07      	ldr	r3, [sp, #28]
 8011a62:	970e      	str	r7, [sp, #56]	; 0x38
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d1b9      	bne.n	80119dc <_strtod_l+0xa60>
 8011a68:	4b3d      	ldr	r3, [pc, #244]	; (8011b60 <_strtod_l+0xbe4>)
 8011a6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a6c:	403b      	ands	r3, r7
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d1b4      	bne.n	80119dc <_strtod_l+0xa60>
 8011a72:	0020      	movs	r0, r4
 8011a74:	0029      	movs	r1, r5
 8011a76:	f7ee fd6f 	bl	8000558 <__aeabi_d2lz>
 8011a7a:	f7ee fda9 	bl	80005d0 <__aeabi_l2d>
 8011a7e:	0002      	movs	r2, r0
 8011a80:	000b      	movs	r3, r1
 8011a82:	0020      	movs	r0, r4
 8011a84:	0029      	movs	r1, r5
 8011a86:	f7f0 fee7 	bl	8002858 <__aeabi_dsub>
 8011a8a:	033b      	lsls	r3, r7, #12
 8011a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a8e:	0b1b      	lsrs	r3, r3, #12
 8011a90:	4333      	orrs	r3, r6
 8011a92:	4313      	orrs	r3, r2
 8011a94:	0004      	movs	r4, r0
 8011a96:	000d      	movs	r5, r1
 8011a98:	4a37      	ldr	r2, [pc, #220]	; (8011b78 <_strtod_l+0xbfc>)
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d054      	beq.n	8011b48 <_strtod_l+0xbcc>
 8011a9e:	4b37      	ldr	r3, [pc, #220]	; (8011b7c <_strtod_l+0xc00>)
 8011aa0:	f7ee fcda 	bl	8000458 <__aeabi_dcmplt>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d000      	beq.n	8011aaa <_strtod_l+0xb2e>
 8011aa8:	e4d4      	b.n	8011454 <_strtod_l+0x4d8>
 8011aaa:	0020      	movs	r0, r4
 8011aac:	0029      	movs	r1, r5
 8011aae:	4a34      	ldr	r2, [pc, #208]	; (8011b80 <_strtod_l+0xc04>)
 8011ab0:	4b2a      	ldr	r3, [pc, #168]	; (8011b5c <_strtod_l+0xbe0>)
 8011ab2:	f7ee fce5 	bl	8000480 <__aeabi_dcmpgt>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	d090      	beq.n	80119dc <_strtod_l+0xa60>
 8011aba:	e4cb      	b.n	8011454 <_strtod_l+0x4d8>
 8011abc:	9b07      	ldr	r3, [sp, #28]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d02b      	beq.n	8011b1a <_strtod_l+0xb9e>
 8011ac2:	23d4      	movs	r3, #212	; 0xd4
 8011ac4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ac6:	04db      	lsls	r3, r3, #19
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d826      	bhi.n	8011b1a <_strtod_l+0xb9e>
 8011acc:	0020      	movs	r0, r4
 8011ace:	0029      	movs	r1, r5
 8011ad0:	4a2c      	ldr	r2, [pc, #176]	; (8011b84 <_strtod_l+0xc08>)
 8011ad2:	4b2d      	ldr	r3, [pc, #180]	; (8011b88 <_strtod_l+0xc0c>)
 8011ad4:	f7ee fcca 	bl	800046c <__aeabi_dcmple>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d017      	beq.n	8011b0c <_strtod_l+0xb90>
 8011adc:	0020      	movs	r0, r4
 8011ade:	0029      	movs	r1, r5
 8011ae0:	f7ee fd1c 	bl	800051c <__aeabi_d2uiz>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d100      	bne.n	8011aea <_strtod_l+0xb6e>
 8011ae8:	3001      	adds	r0, #1
 8011aea:	f7f1 fabb 	bl	8003064 <__aeabi_ui2d>
 8011aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011af0:	0004      	movs	r4, r0
 8011af2:	000b      	movs	r3, r1
 8011af4:	000d      	movs	r5, r1
 8011af6:	2a00      	cmp	r2, #0
 8011af8:	d122      	bne.n	8011b40 <_strtod_l+0xbc4>
 8011afa:	2280      	movs	r2, #128	; 0x80
 8011afc:	0612      	lsls	r2, r2, #24
 8011afe:	188b      	adds	r3, r1, r2
 8011b00:	9016      	str	r0, [sp, #88]	; 0x58
 8011b02:	9317      	str	r3, [sp, #92]	; 0x5c
 8011b04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b08:	9212      	str	r2, [sp, #72]	; 0x48
 8011b0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b0c:	22d6      	movs	r2, #214	; 0xd6
 8011b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011b10:	04d2      	lsls	r2, r2, #19
 8011b12:	189b      	adds	r3, r3, r2
 8011b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b16:	1a9b      	subs	r3, r3, r2
 8011b18:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011b1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011b1e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011b20:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8011b22:	f003 f86d 	bl	8014c00 <__ulp>
 8011b26:	0002      	movs	r2, r0
 8011b28:	000b      	movs	r3, r1
 8011b2a:	0030      	movs	r0, r6
 8011b2c:	0039      	movs	r1, r7
 8011b2e:	f7f0 fbd1 	bl	80022d4 <__aeabi_dmul>
 8011b32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011b34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b36:	f7ef fc73 	bl	8001420 <__aeabi_dadd>
 8011b3a:	0006      	movs	r6, r0
 8011b3c:	000f      	movs	r7, r1
 8011b3e:	e78f      	b.n	8011a60 <_strtod_l+0xae4>
 8011b40:	0002      	movs	r2, r0
 8011b42:	9216      	str	r2, [sp, #88]	; 0x58
 8011b44:	9317      	str	r3, [sp, #92]	; 0x5c
 8011b46:	e7dd      	b.n	8011b04 <_strtod_l+0xb88>
 8011b48:	4b10      	ldr	r3, [pc, #64]	; (8011b8c <_strtod_l+0xc10>)
 8011b4a:	f7ee fc85 	bl	8000458 <__aeabi_dcmplt>
 8011b4e:	e7b2      	b.n	8011ab6 <_strtod_l+0xb3a>
 8011b50:	fff00000 	.word	0xfff00000
 8011b54:	000fffff 	.word	0x000fffff
 8011b58:	3ff00000 	.word	0x3ff00000
 8011b5c:	3fe00000 	.word	0x3fe00000
 8011b60:	7ff00000 	.word	0x7ff00000
 8011b64:	7fe00000 	.word	0x7fe00000
 8011b68:	fcb00000 	.word	0xfcb00000
 8011b6c:	7c9fffff 	.word	0x7c9fffff
 8011b70:	7fefffff 	.word	0x7fefffff
 8011b74:	bff00000 	.word	0xbff00000
 8011b78:	94a03595 	.word	0x94a03595
 8011b7c:	3fdfffff 	.word	0x3fdfffff
 8011b80:	35afe535 	.word	0x35afe535
 8011b84:	ffc00000 	.word	0xffc00000
 8011b88:	41dfffff 	.word	0x41dfffff
 8011b8c:	3fcfffff 	.word	0x3fcfffff

08011b90 <_strtod_r>:
 8011b90:	b510      	push	{r4, lr}
 8011b92:	4b02      	ldr	r3, [pc, #8]	; (8011b9c <_strtod_r+0xc>)
 8011b94:	f7ff f9f2 	bl	8010f7c <_strtod_l>
 8011b98:	bd10      	pop	{r4, pc}
 8011b9a:	46c0      	nop			; (mov r8, r8)
 8011b9c:	20000110 	.word	0x20000110

08011ba0 <strtod>:
 8011ba0:	b510      	push	{r4, lr}
 8011ba2:	4c04      	ldr	r4, [pc, #16]	; (8011bb4 <strtod+0x14>)
 8011ba4:	000a      	movs	r2, r1
 8011ba6:	0001      	movs	r1, r0
 8011ba8:	4b03      	ldr	r3, [pc, #12]	; (8011bb8 <strtod+0x18>)
 8011baa:	6820      	ldr	r0, [r4, #0]
 8011bac:	f7ff f9e6 	bl	8010f7c <_strtod_l>
 8011bb0:	bd10      	pop	{r4, pc}
 8011bb2:	46c0      	nop			; (mov r8, r8)
 8011bb4:	200002c8 	.word	0x200002c8
 8011bb8:	20000110 	.word	0x20000110

08011bbc <_strtol_l.constprop.0>:
 8011bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bbe:	b087      	sub	sp, #28
 8011bc0:	001e      	movs	r6, r3
 8011bc2:	9005      	str	r0, [sp, #20]
 8011bc4:	9101      	str	r1, [sp, #4]
 8011bc6:	9202      	str	r2, [sp, #8]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d048      	beq.n	8011c5e <_strtol_l.constprop.0+0xa2>
 8011bcc:	000b      	movs	r3, r1
 8011bce:	2e24      	cmp	r6, #36	; 0x24
 8011bd0:	d845      	bhi.n	8011c5e <_strtol_l.constprop.0+0xa2>
 8011bd2:	4a3b      	ldr	r2, [pc, #236]	; (8011cc0 <_strtol_l.constprop.0+0x104>)
 8011bd4:	2108      	movs	r1, #8
 8011bd6:	4694      	mov	ip, r2
 8011bd8:	001a      	movs	r2, r3
 8011bda:	4660      	mov	r0, ip
 8011bdc:	7814      	ldrb	r4, [r2, #0]
 8011bde:	3301      	adds	r3, #1
 8011be0:	5d00      	ldrb	r0, [r0, r4]
 8011be2:	001d      	movs	r5, r3
 8011be4:	0007      	movs	r7, r0
 8011be6:	400f      	ands	r7, r1
 8011be8:	4208      	tst	r0, r1
 8011bea:	d1f5      	bne.n	8011bd8 <_strtol_l.constprop.0+0x1c>
 8011bec:	2c2d      	cmp	r4, #45	; 0x2d
 8011bee:	d13d      	bne.n	8011c6c <_strtol_l.constprop.0+0xb0>
 8011bf0:	2701      	movs	r7, #1
 8011bf2:	781c      	ldrb	r4, [r3, #0]
 8011bf4:	1c95      	adds	r5, r2, #2
 8011bf6:	2e00      	cmp	r6, #0
 8011bf8:	d05e      	beq.n	8011cb8 <_strtol_l.constprop.0+0xfc>
 8011bfa:	2e10      	cmp	r6, #16
 8011bfc:	d109      	bne.n	8011c12 <_strtol_l.constprop.0+0x56>
 8011bfe:	2c30      	cmp	r4, #48	; 0x30
 8011c00:	d107      	bne.n	8011c12 <_strtol_l.constprop.0+0x56>
 8011c02:	2220      	movs	r2, #32
 8011c04:	782b      	ldrb	r3, [r5, #0]
 8011c06:	4393      	bics	r3, r2
 8011c08:	2b58      	cmp	r3, #88	; 0x58
 8011c0a:	d150      	bne.n	8011cae <_strtol_l.constprop.0+0xf2>
 8011c0c:	2610      	movs	r6, #16
 8011c0e:	786c      	ldrb	r4, [r5, #1]
 8011c10:	3502      	adds	r5, #2
 8011c12:	4b2c      	ldr	r3, [pc, #176]	; (8011cc4 <_strtol_l.constprop.0+0x108>)
 8011c14:	0031      	movs	r1, r6
 8011c16:	18fb      	adds	r3, r7, r3
 8011c18:	0018      	movs	r0, r3
 8011c1a:	9303      	str	r3, [sp, #12]
 8011c1c:	f7ee fb16 	bl	800024c <__aeabi_uidivmod>
 8011c20:	2200      	movs	r2, #0
 8011c22:	9104      	str	r1, [sp, #16]
 8011c24:	2101      	movs	r1, #1
 8011c26:	4684      	mov	ip, r0
 8011c28:	0010      	movs	r0, r2
 8011c2a:	4249      	negs	r1, r1
 8011c2c:	0023      	movs	r3, r4
 8011c2e:	3b30      	subs	r3, #48	; 0x30
 8011c30:	2b09      	cmp	r3, #9
 8011c32:	d903      	bls.n	8011c3c <_strtol_l.constprop.0+0x80>
 8011c34:	3b11      	subs	r3, #17
 8011c36:	2b19      	cmp	r3, #25
 8011c38:	d81d      	bhi.n	8011c76 <_strtol_l.constprop.0+0xba>
 8011c3a:	330a      	adds	r3, #10
 8011c3c:	429e      	cmp	r6, r3
 8011c3e:	dd1e      	ble.n	8011c7e <_strtol_l.constprop.0+0xc2>
 8011c40:	1c54      	adds	r4, r2, #1
 8011c42:	d009      	beq.n	8011c58 <_strtol_l.constprop.0+0x9c>
 8011c44:	000a      	movs	r2, r1
 8011c46:	4584      	cmp	ip, r0
 8011c48:	d306      	bcc.n	8011c58 <_strtol_l.constprop.0+0x9c>
 8011c4a:	d102      	bne.n	8011c52 <_strtol_l.constprop.0+0x96>
 8011c4c:	9c04      	ldr	r4, [sp, #16]
 8011c4e:	429c      	cmp	r4, r3
 8011c50:	db02      	blt.n	8011c58 <_strtol_l.constprop.0+0x9c>
 8011c52:	2201      	movs	r2, #1
 8011c54:	4370      	muls	r0, r6
 8011c56:	1818      	adds	r0, r3, r0
 8011c58:	782c      	ldrb	r4, [r5, #0]
 8011c5a:	3501      	adds	r5, #1
 8011c5c:	e7e6      	b.n	8011c2c <_strtol_l.constprop.0+0x70>
 8011c5e:	f001 f981 	bl	8012f64 <__errno>
 8011c62:	2316      	movs	r3, #22
 8011c64:	6003      	str	r3, [r0, #0]
 8011c66:	2000      	movs	r0, #0
 8011c68:	b007      	add	sp, #28
 8011c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c6c:	2c2b      	cmp	r4, #43	; 0x2b
 8011c6e:	d1c2      	bne.n	8011bf6 <_strtol_l.constprop.0+0x3a>
 8011c70:	781c      	ldrb	r4, [r3, #0]
 8011c72:	1c95      	adds	r5, r2, #2
 8011c74:	e7bf      	b.n	8011bf6 <_strtol_l.constprop.0+0x3a>
 8011c76:	0023      	movs	r3, r4
 8011c78:	3b61      	subs	r3, #97	; 0x61
 8011c7a:	2b19      	cmp	r3, #25
 8011c7c:	d9dd      	bls.n	8011c3a <_strtol_l.constprop.0+0x7e>
 8011c7e:	1c53      	adds	r3, r2, #1
 8011c80:	d109      	bne.n	8011c96 <_strtol_l.constprop.0+0xda>
 8011c82:	2322      	movs	r3, #34	; 0x22
 8011c84:	9a05      	ldr	r2, [sp, #20]
 8011c86:	9803      	ldr	r0, [sp, #12]
 8011c88:	6013      	str	r3, [r2, #0]
 8011c8a:	9b02      	ldr	r3, [sp, #8]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d0eb      	beq.n	8011c68 <_strtol_l.constprop.0+0xac>
 8011c90:	1e6b      	subs	r3, r5, #1
 8011c92:	9301      	str	r3, [sp, #4]
 8011c94:	e007      	b.n	8011ca6 <_strtol_l.constprop.0+0xea>
 8011c96:	2f00      	cmp	r7, #0
 8011c98:	d000      	beq.n	8011c9c <_strtol_l.constprop.0+0xe0>
 8011c9a:	4240      	negs	r0, r0
 8011c9c:	9b02      	ldr	r3, [sp, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d0e2      	beq.n	8011c68 <_strtol_l.constprop.0+0xac>
 8011ca2:	2a00      	cmp	r2, #0
 8011ca4:	d1f4      	bne.n	8011c90 <_strtol_l.constprop.0+0xd4>
 8011ca6:	9b02      	ldr	r3, [sp, #8]
 8011ca8:	9a01      	ldr	r2, [sp, #4]
 8011caa:	601a      	str	r2, [r3, #0]
 8011cac:	e7dc      	b.n	8011c68 <_strtol_l.constprop.0+0xac>
 8011cae:	2430      	movs	r4, #48	; 0x30
 8011cb0:	2e00      	cmp	r6, #0
 8011cb2:	d1ae      	bne.n	8011c12 <_strtol_l.constprop.0+0x56>
 8011cb4:	3608      	adds	r6, #8
 8011cb6:	e7ac      	b.n	8011c12 <_strtol_l.constprop.0+0x56>
 8011cb8:	2c30      	cmp	r4, #48	; 0x30
 8011cba:	d0a2      	beq.n	8011c02 <_strtol_l.constprop.0+0x46>
 8011cbc:	260a      	movs	r6, #10
 8011cbe:	e7a8      	b.n	8011c12 <_strtol_l.constprop.0+0x56>
 8011cc0:	080180a1 	.word	0x080180a1
 8011cc4:	7fffffff 	.word	0x7fffffff

08011cc8 <_strtol_r>:
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	f7ff ff77 	bl	8011bbc <_strtol_l.constprop.0>
 8011cce:	bd10      	pop	{r4, pc}

08011cd0 <strtol>:
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	4c04      	ldr	r4, [pc, #16]	; (8011ce4 <strtol+0x14>)
 8011cd4:	0013      	movs	r3, r2
 8011cd6:	000a      	movs	r2, r1
 8011cd8:	0001      	movs	r1, r0
 8011cda:	6820      	ldr	r0, [r4, #0]
 8011cdc:	f7ff ff6e 	bl	8011bbc <_strtol_l.constprop.0>
 8011ce0:	bd10      	pop	{r4, pc}
 8011ce2:	46c0      	nop			; (mov r8, r8)
 8011ce4:	200002c8 	.word	0x200002c8

08011ce8 <__cvt>:
 8011ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cea:	001e      	movs	r6, r3
 8011cec:	2300      	movs	r3, #0
 8011cee:	0014      	movs	r4, r2
 8011cf0:	b08b      	sub	sp, #44	; 0x2c
 8011cf2:	429e      	cmp	r6, r3
 8011cf4:	da04      	bge.n	8011d00 <__cvt+0x18>
 8011cf6:	2180      	movs	r1, #128	; 0x80
 8011cf8:	0609      	lsls	r1, r1, #24
 8011cfa:	1873      	adds	r3, r6, r1
 8011cfc:	001e      	movs	r6, r3
 8011cfe:	232d      	movs	r3, #45	; 0x2d
 8011d00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011d04:	7013      	strb	r3, [r2, #0]
 8011d06:	2320      	movs	r3, #32
 8011d08:	2203      	movs	r2, #3
 8011d0a:	439f      	bics	r7, r3
 8011d0c:	2f46      	cmp	r7, #70	; 0x46
 8011d0e:	d007      	beq.n	8011d20 <__cvt+0x38>
 8011d10:	003b      	movs	r3, r7
 8011d12:	3b45      	subs	r3, #69	; 0x45
 8011d14:	4259      	negs	r1, r3
 8011d16:	414b      	adcs	r3, r1
 8011d18:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011d1a:	3a01      	subs	r2, #1
 8011d1c:	18cb      	adds	r3, r1, r3
 8011d1e:	9310      	str	r3, [sp, #64]	; 0x40
 8011d20:	ab09      	add	r3, sp, #36	; 0x24
 8011d22:	9304      	str	r3, [sp, #16]
 8011d24:	ab08      	add	r3, sp, #32
 8011d26:	9303      	str	r3, [sp, #12]
 8011d28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d2a:	9200      	str	r2, [sp, #0]
 8011d2c:	9302      	str	r3, [sp, #8]
 8011d2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d30:	0022      	movs	r2, r4
 8011d32:	9301      	str	r3, [sp, #4]
 8011d34:	0033      	movs	r3, r6
 8011d36:	f001 fa17 	bl	8013168 <_dtoa_r>
 8011d3a:	0005      	movs	r5, r0
 8011d3c:	2f47      	cmp	r7, #71	; 0x47
 8011d3e:	d102      	bne.n	8011d46 <__cvt+0x5e>
 8011d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d42:	07db      	lsls	r3, r3, #31
 8011d44:	d528      	bpl.n	8011d98 <__cvt+0xb0>
 8011d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d48:	18eb      	adds	r3, r5, r3
 8011d4a:	9307      	str	r3, [sp, #28]
 8011d4c:	2f46      	cmp	r7, #70	; 0x46
 8011d4e:	d114      	bne.n	8011d7a <__cvt+0x92>
 8011d50:	782b      	ldrb	r3, [r5, #0]
 8011d52:	2b30      	cmp	r3, #48	; 0x30
 8011d54:	d10c      	bne.n	8011d70 <__cvt+0x88>
 8011d56:	2200      	movs	r2, #0
 8011d58:	2300      	movs	r3, #0
 8011d5a:	0020      	movs	r0, r4
 8011d5c:	0031      	movs	r1, r6
 8011d5e:	f7ee fb75 	bl	800044c <__aeabi_dcmpeq>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d104      	bne.n	8011d70 <__cvt+0x88>
 8011d66:	2301      	movs	r3, #1
 8011d68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d6a:	1a9b      	subs	r3, r3, r2
 8011d6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d6e:	6013      	str	r3, [r2, #0]
 8011d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d72:	9a07      	ldr	r2, [sp, #28]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	18d3      	adds	r3, r2, r3
 8011d78:	9307      	str	r3, [sp, #28]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	0020      	movs	r0, r4
 8011d80:	0031      	movs	r1, r6
 8011d82:	f7ee fb63 	bl	800044c <__aeabi_dcmpeq>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d001      	beq.n	8011d8e <__cvt+0xa6>
 8011d8a:	9b07      	ldr	r3, [sp, #28]
 8011d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011d8e:	2230      	movs	r2, #48	; 0x30
 8011d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d92:	9907      	ldr	r1, [sp, #28]
 8011d94:	428b      	cmp	r3, r1
 8011d96:	d306      	bcc.n	8011da6 <__cvt+0xbe>
 8011d98:	0028      	movs	r0, r5
 8011d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011d9e:	1b5b      	subs	r3, r3, r5
 8011da0:	6013      	str	r3, [r2, #0]
 8011da2:	b00b      	add	sp, #44	; 0x2c
 8011da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011da6:	1c59      	adds	r1, r3, #1
 8011da8:	9109      	str	r1, [sp, #36]	; 0x24
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	e7f0      	b.n	8011d90 <__cvt+0xa8>

08011dae <__exponent>:
 8011dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011db0:	1c83      	adds	r3, r0, #2
 8011db2:	b087      	sub	sp, #28
 8011db4:	9303      	str	r3, [sp, #12]
 8011db6:	0005      	movs	r5, r0
 8011db8:	000c      	movs	r4, r1
 8011dba:	232b      	movs	r3, #43	; 0x2b
 8011dbc:	7002      	strb	r2, [r0, #0]
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	da01      	bge.n	8011dc6 <__exponent+0x18>
 8011dc2:	424c      	negs	r4, r1
 8011dc4:	3302      	adds	r3, #2
 8011dc6:	706b      	strb	r3, [r5, #1]
 8011dc8:	2c09      	cmp	r4, #9
 8011dca:	dd2f      	ble.n	8011e2c <__exponent+0x7e>
 8011dcc:	270a      	movs	r7, #10
 8011dce:	ab04      	add	r3, sp, #16
 8011dd0:	1dde      	adds	r6, r3, #7
 8011dd2:	0020      	movs	r0, r4
 8011dd4:	0039      	movs	r1, r7
 8011dd6:	9601      	str	r6, [sp, #4]
 8011dd8:	f7ee fb22 	bl	8000420 <__aeabi_idivmod>
 8011ddc:	3e01      	subs	r6, #1
 8011dde:	3130      	adds	r1, #48	; 0x30
 8011de0:	0020      	movs	r0, r4
 8011de2:	7031      	strb	r1, [r6, #0]
 8011de4:	0039      	movs	r1, r7
 8011de6:	9402      	str	r4, [sp, #8]
 8011de8:	f7ee fa34 	bl	8000254 <__divsi3>
 8011dec:	9b02      	ldr	r3, [sp, #8]
 8011dee:	0004      	movs	r4, r0
 8011df0:	2b63      	cmp	r3, #99	; 0x63
 8011df2:	dcee      	bgt.n	8011dd2 <__exponent+0x24>
 8011df4:	9b01      	ldr	r3, [sp, #4]
 8011df6:	3430      	adds	r4, #48	; 0x30
 8011df8:	1e9a      	subs	r2, r3, #2
 8011dfa:	0013      	movs	r3, r2
 8011dfc:	9903      	ldr	r1, [sp, #12]
 8011dfe:	7014      	strb	r4, [r2, #0]
 8011e00:	a804      	add	r0, sp, #16
 8011e02:	3007      	adds	r0, #7
 8011e04:	4298      	cmp	r0, r3
 8011e06:	d80c      	bhi.n	8011e22 <__exponent+0x74>
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4282      	cmp	r2, r0
 8011e0c:	d804      	bhi.n	8011e18 <__exponent+0x6a>
 8011e0e:	aa04      	add	r2, sp, #16
 8011e10:	3309      	adds	r3, #9
 8011e12:	189b      	adds	r3, r3, r2
 8011e14:	9a01      	ldr	r2, [sp, #4]
 8011e16:	1a9b      	subs	r3, r3, r2
 8011e18:	9a03      	ldr	r2, [sp, #12]
 8011e1a:	18d3      	adds	r3, r2, r3
 8011e1c:	1b58      	subs	r0, r3, r5
 8011e1e:	b007      	add	sp, #28
 8011e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e22:	7818      	ldrb	r0, [r3, #0]
 8011e24:	3301      	adds	r3, #1
 8011e26:	7008      	strb	r0, [r1, #0]
 8011e28:	3101      	adds	r1, #1
 8011e2a:	e7e9      	b.n	8011e00 <__exponent+0x52>
 8011e2c:	2330      	movs	r3, #48	; 0x30
 8011e2e:	3430      	adds	r4, #48	; 0x30
 8011e30:	70ab      	strb	r3, [r5, #2]
 8011e32:	70ec      	strb	r4, [r5, #3]
 8011e34:	1d2b      	adds	r3, r5, #4
 8011e36:	e7f1      	b.n	8011e1c <__exponent+0x6e>

08011e38 <_printf_float>:
 8011e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e3a:	b095      	sub	sp, #84	; 0x54
 8011e3c:	000c      	movs	r4, r1
 8011e3e:	9208      	str	r2, [sp, #32]
 8011e40:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8011e42:	9309      	str	r3, [sp, #36]	; 0x24
 8011e44:	0007      	movs	r7, r0
 8011e46:	f000 ffcb 	bl	8012de0 <_localeconv_r>
 8011e4a:	6803      	ldr	r3, [r0, #0]
 8011e4c:	0018      	movs	r0, r3
 8011e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8011e50:	f7ee f95a 	bl	8000108 <strlen>
 8011e54:	2300      	movs	r3, #0
 8011e56:	9312      	str	r3, [sp, #72]	; 0x48
 8011e58:	7e23      	ldrb	r3, [r4, #24]
 8011e5a:	2207      	movs	r2, #7
 8011e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	900d      	str	r0, [sp, #52]	; 0x34
 8011e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e66:	682b      	ldr	r3, [r5, #0]
 8011e68:	05c9      	lsls	r1, r1, #23
 8011e6a:	d547      	bpl.n	8011efc <_printf_float+0xc4>
 8011e6c:	189b      	adds	r3, r3, r2
 8011e6e:	4393      	bics	r3, r2
 8011e70:	001a      	movs	r2, r3
 8011e72:	3208      	adds	r2, #8
 8011e74:	602a      	str	r2, [r5, #0]
 8011e76:	681e      	ldr	r6, [r3, #0]
 8011e78:	685d      	ldr	r5, [r3, #4]
 8011e7a:	0032      	movs	r2, r6
 8011e7c:	002b      	movs	r3, r5
 8011e7e:	64a2      	str	r2, [r4, #72]	; 0x48
 8011e80:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011e82:	2201      	movs	r2, #1
 8011e84:	006b      	lsls	r3, r5, #1
 8011e86:	085b      	lsrs	r3, r3, #1
 8011e88:	930e      	str	r3, [sp, #56]	; 0x38
 8011e8a:	0030      	movs	r0, r6
 8011e8c:	4bab      	ldr	r3, [pc, #684]	; (801213c <_printf_float+0x304>)
 8011e8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011e90:	4252      	negs	r2, r2
 8011e92:	f7f1 f863 	bl	8002f5c <__aeabi_dcmpun>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d132      	bne.n	8011f00 <_printf_float+0xc8>
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	0030      	movs	r0, r6
 8011e9e:	4ba7      	ldr	r3, [pc, #668]	; (801213c <_printf_float+0x304>)
 8011ea0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011ea2:	4252      	negs	r2, r2
 8011ea4:	f7ee fae2 	bl	800046c <__aeabi_dcmple>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d129      	bne.n	8011f00 <_printf_float+0xc8>
 8011eac:	2200      	movs	r2, #0
 8011eae:	2300      	movs	r3, #0
 8011eb0:	0030      	movs	r0, r6
 8011eb2:	0029      	movs	r1, r5
 8011eb4:	f7ee fad0 	bl	8000458 <__aeabi_dcmplt>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d003      	beq.n	8011ec4 <_printf_float+0x8c>
 8011ebc:	0023      	movs	r3, r4
 8011ebe:	222d      	movs	r2, #45	; 0x2d
 8011ec0:	3343      	adds	r3, #67	; 0x43
 8011ec2:	701a      	strb	r2, [r3, #0]
 8011ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ec6:	4d9e      	ldr	r5, [pc, #632]	; (8012140 <_printf_float+0x308>)
 8011ec8:	2b47      	cmp	r3, #71	; 0x47
 8011eca:	d900      	bls.n	8011ece <_printf_float+0x96>
 8011ecc:	4d9d      	ldr	r5, [pc, #628]	; (8012144 <_printf_float+0x30c>)
 8011ece:	2303      	movs	r3, #3
 8011ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011ed2:	6123      	str	r3, [r4, #16]
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	439a      	bics	r2, r3
 8011ed8:	2300      	movs	r3, #0
 8011eda:	6022      	str	r2, [r4, #0]
 8011edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ee0:	0021      	movs	r1, r4
 8011ee2:	9300      	str	r3, [sp, #0]
 8011ee4:	0038      	movs	r0, r7
 8011ee6:	9b08      	ldr	r3, [sp, #32]
 8011ee8:	aa13      	add	r2, sp, #76	; 0x4c
 8011eea:	f000 f9fb 	bl	80122e4 <_printf_common>
 8011eee:	3001      	adds	r0, #1
 8011ef0:	d000      	beq.n	8011ef4 <_printf_float+0xbc>
 8011ef2:	e0a3      	b.n	801203c <_printf_float+0x204>
 8011ef4:	2001      	movs	r0, #1
 8011ef6:	4240      	negs	r0, r0
 8011ef8:	b015      	add	sp, #84	; 0x54
 8011efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011efc:	3307      	adds	r3, #7
 8011efe:	e7b6      	b.n	8011e6e <_printf_float+0x36>
 8011f00:	0032      	movs	r2, r6
 8011f02:	002b      	movs	r3, r5
 8011f04:	0030      	movs	r0, r6
 8011f06:	0029      	movs	r1, r5
 8011f08:	f7f1 f828 	bl	8002f5c <__aeabi_dcmpun>
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d00b      	beq.n	8011f28 <_printf_float+0xf0>
 8011f10:	2d00      	cmp	r5, #0
 8011f12:	da03      	bge.n	8011f1c <_printf_float+0xe4>
 8011f14:	0023      	movs	r3, r4
 8011f16:	222d      	movs	r2, #45	; 0x2d
 8011f18:	3343      	adds	r3, #67	; 0x43
 8011f1a:	701a      	strb	r2, [r3, #0]
 8011f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f1e:	4d8a      	ldr	r5, [pc, #552]	; (8012148 <_printf_float+0x310>)
 8011f20:	2b47      	cmp	r3, #71	; 0x47
 8011f22:	d9d4      	bls.n	8011ece <_printf_float+0x96>
 8011f24:	4d89      	ldr	r5, [pc, #548]	; (801214c <_printf_float+0x314>)
 8011f26:	e7d2      	b.n	8011ece <_printf_float+0x96>
 8011f28:	2220      	movs	r2, #32
 8011f2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f2c:	6863      	ldr	r3, [r4, #4]
 8011f2e:	4391      	bics	r1, r2
 8011f30:	910e      	str	r1, [sp, #56]	; 0x38
 8011f32:	1c5a      	adds	r2, r3, #1
 8011f34:	d14a      	bne.n	8011fcc <_printf_float+0x194>
 8011f36:	3307      	adds	r3, #7
 8011f38:	6063      	str	r3, [r4, #4]
 8011f3a:	2380      	movs	r3, #128	; 0x80
 8011f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f3e:	00db      	lsls	r3, r3, #3
 8011f40:	4313      	orrs	r3, r2
 8011f42:	2200      	movs	r2, #0
 8011f44:	9206      	str	r2, [sp, #24]
 8011f46:	aa12      	add	r2, sp, #72	; 0x48
 8011f48:	9205      	str	r2, [sp, #20]
 8011f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f4c:	6023      	str	r3, [r4, #0]
 8011f4e:	9204      	str	r2, [sp, #16]
 8011f50:	aa11      	add	r2, sp, #68	; 0x44
 8011f52:	9203      	str	r2, [sp, #12]
 8011f54:	2223      	movs	r2, #35	; 0x23
 8011f56:	a908      	add	r1, sp, #32
 8011f58:	9301      	str	r3, [sp, #4]
 8011f5a:	6863      	ldr	r3, [r4, #4]
 8011f5c:	1852      	adds	r2, r2, r1
 8011f5e:	9202      	str	r2, [sp, #8]
 8011f60:	9300      	str	r3, [sp, #0]
 8011f62:	0032      	movs	r2, r6
 8011f64:	002b      	movs	r3, r5
 8011f66:	0038      	movs	r0, r7
 8011f68:	f7ff febe 	bl	8011ce8 <__cvt>
 8011f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f6e:	0005      	movs	r5, r0
 8011f70:	2b47      	cmp	r3, #71	; 0x47
 8011f72:	d109      	bne.n	8011f88 <_printf_float+0x150>
 8011f74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f76:	1cda      	adds	r2, r3, #3
 8011f78:	db02      	blt.n	8011f80 <_printf_float+0x148>
 8011f7a:	6862      	ldr	r2, [r4, #4]
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	dd49      	ble.n	8012014 <_printf_float+0x1dc>
 8011f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f82:	3b02      	subs	r3, #2
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	930a      	str	r3, [sp, #40]	; 0x28
 8011f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011f8c:	2b65      	cmp	r3, #101	; 0x65
 8011f8e:	d824      	bhi.n	8011fda <_printf_float+0x1a2>
 8011f90:	0020      	movs	r0, r4
 8011f92:	001a      	movs	r2, r3
 8011f94:	3901      	subs	r1, #1
 8011f96:	3050      	adds	r0, #80	; 0x50
 8011f98:	9111      	str	r1, [sp, #68]	; 0x44
 8011f9a:	f7ff ff08 	bl	8011dae <__exponent>
 8011f9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011fa0:	900b      	str	r0, [sp, #44]	; 0x2c
 8011fa2:	1813      	adds	r3, r2, r0
 8011fa4:	6123      	str	r3, [r4, #16]
 8011fa6:	2a01      	cmp	r2, #1
 8011fa8:	dc02      	bgt.n	8011fb0 <_printf_float+0x178>
 8011faa:	6822      	ldr	r2, [r4, #0]
 8011fac:	07d2      	lsls	r2, r2, #31
 8011fae:	d501      	bpl.n	8011fb4 <_printf_float+0x17c>
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	6123      	str	r3, [r4, #16]
 8011fb4:	2323      	movs	r3, #35	; 0x23
 8011fb6:	aa08      	add	r2, sp, #32
 8011fb8:	189b      	adds	r3, r3, r2
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d100      	bne.n	8011fc2 <_printf_float+0x18a>
 8011fc0:	e78d      	b.n	8011ede <_printf_float+0xa6>
 8011fc2:	0023      	movs	r3, r4
 8011fc4:	222d      	movs	r2, #45	; 0x2d
 8011fc6:	3343      	adds	r3, #67	; 0x43
 8011fc8:	701a      	strb	r2, [r3, #0]
 8011fca:	e788      	b.n	8011ede <_printf_float+0xa6>
 8011fcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fce:	2a47      	cmp	r2, #71	; 0x47
 8011fd0:	d1b3      	bne.n	8011f3a <_printf_float+0x102>
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1b1      	bne.n	8011f3a <_printf_float+0x102>
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	e7ae      	b.n	8011f38 <_printf_float+0x100>
 8011fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fdc:	2b66      	cmp	r3, #102	; 0x66
 8011fde:	d11b      	bne.n	8012018 <_printf_float+0x1e0>
 8011fe0:	6863      	ldr	r3, [r4, #4]
 8011fe2:	2900      	cmp	r1, #0
 8011fe4:	dd09      	ble.n	8011ffa <_printf_float+0x1c2>
 8011fe6:	6121      	str	r1, [r4, #16]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d102      	bne.n	8011ff2 <_printf_float+0x1ba>
 8011fec:	6822      	ldr	r2, [r4, #0]
 8011fee:	07d2      	lsls	r2, r2, #31
 8011ff0:	d50b      	bpl.n	801200a <_printf_float+0x1d2>
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	185b      	adds	r3, r3, r1
 8011ff6:	6123      	str	r3, [r4, #16]
 8011ff8:	e007      	b.n	801200a <_printf_float+0x1d2>
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d103      	bne.n	8012006 <_printf_float+0x1ce>
 8011ffe:	2201      	movs	r2, #1
 8012000:	6821      	ldr	r1, [r4, #0]
 8012002:	4211      	tst	r1, r2
 8012004:	d000      	beq.n	8012008 <_printf_float+0x1d0>
 8012006:	1c9a      	adds	r2, r3, #2
 8012008:	6122      	str	r2, [r4, #16]
 801200a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801200c:	65a3      	str	r3, [r4, #88]	; 0x58
 801200e:	2300      	movs	r3, #0
 8012010:	930b      	str	r3, [sp, #44]	; 0x2c
 8012012:	e7cf      	b.n	8011fb4 <_printf_float+0x17c>
 8012014:	2367      	movs	r3, #103	; 0x67
 8012016:	930a      	str	r3, [sp, #40]	; 0x28
 8012018:	9911      	ldr	r1, [sp, #68]	; 0x44
 801201a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801201c:	4299      	cmp	r1, r3
 801201e:	db06      	blt.n	801202e <_printf_float+0x1f6>
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	6121      	str	r1, [r4, #16]
 8012024:	07db      	lsls	r3, r3, #31
 8012026:	d5f0      	bpl.n	801200a <_printf_float+0x1d2>
 8012028:	3101      	adds	r1, #1
 801202a:	6121      	str	r1, [r4, #16]
 801202c:	e7ed      	b.n	801200a <_printf_float+0x1d2>
 801202e:	2201      	movs	r2, #1
 8012030:	2900      	cmp	r1, #0
 8012032:	dc01      	bgt.n	8012038 <_printf_float+0x200>
 8012034:	1892      	adds	r2, r2, r2
 8012036:	1a52      	subs	r2, r2, r1
 8012038:	189b      	adds	r3, r3, r2
 801203a:	e7dc      	b.n	8011ff6 <_printf_float+0x1be>
 801203c:	6822      	ldr	r2, [r4, #0]
 801203e:	0553      	lsls	r3, r2, #21
 8012040:	d408      	bmi.n	8012054 <_printf_float+0x21c>
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	002a      	movs	r2, r5
 8012046:	0038      	movs	r0, r7
 8012048:	9908      	ldr	r1, [sp, #32]
 801204a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801204c:	47a8      	blx	r5
 801204e:	3001      	adds	r0, #1
 8012050:	d12a      	bne.n	80120a8 <_printf_float+0x270>
 8012052:	e74f      	b.n	8011ef4 <_printf_float+0xbc>
 8012054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012056:	2b65      	cmp	r3, #101	; 0x65
 8012058:	d800      	bhi.n	801205c <_printf_float+0x224>
 801205a:	e0ec      	b.n	8012236 <_printf_float+0x3fe>
 801205c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801205e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8012060:	2200      	movs	r2, #0
 8012062:	2300      	movs	r3, #0
 8012064:	f7ee f9f2 	bl	800044c <__aeabi_dcmpeq>
 8012068:	2800      	cmp	r0, #0
 801206a:	d034      	beq.n	80120d6 <_printf_float+0x29e>
 801206c:	2301      	movs	r3, #1
 801206e:	0038      	movs	r0, r7
 8012070:	4a37      	ldr	r2, [pc, #220]	; (8012150 <_printf_float+0x318>)
 8012072:	9908      	ldr	r1, [sp, #32]
 8012074:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012076:	47a8      	blx	r5
 8012078:	3001      	adds	r0, #1
 801207a:	d100      	bne.n	801207e <_printf_float+0x246>
 801207c:	e73a      	b.n	8011ef4 <_printf_float+0xbc>
 801207e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012082:	429a      	cmp	r2, r3
 8012084:	db02      	blt.n	801208c <_printf_float+0x254>
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	07db      	lsls	r3, r3, #31
 801208a:	d50d      	bpl.n	80120a8 <_printf_float+0x270>
 801208c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801208e:	0038      	movs	r0, r7
 8012090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012094:	9908      	ldr	r1, [sp, #32]
 8012096:	47a8      	blx	r5
 8012098:	2500      	movs	r5, #0
 801209a:	3001      	adds	r0, #1
 801209c:	d100      	bne.n	80120a0 <_printf_float+0x268>
 801209e:	e729      	b.n	8011ef4 <_printf_float+0xbc>
 80120a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120a2:	3b01      	subs	r3, #1
 80120a4:	42ab      	cmp	r3, r5
 80120a6:	dc0a      	bgt.n	80120be <_printf_float+0x286>
 80120a8:	6823      	ldr	r3, [r4, #0]
 80120aa:	079b      	lsls	r3, r3, #30
 80120ac:	d500      	bpl.n	80120b0 <_printf_float+0x278>
 80120ae:	e116      	b.n	80122de <_printf_float+0x4a6>
 80120b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80120b2:	68e0      	ldr	r0, [r4, #12]
 80120b4:	4298      	cmp	r0, r3
 80120b6:	db00      	blt.n	80120ba <_printf_float+0x282>
 80120b8:	e71e      	b.n	8011ef8 <_printf_float+0xc0>
 80120ba:	0018      	movs	r0, r3
 80120bc:	e71c      	b.n	8011ef8 <_printf_float+0xc0>
 80120be:	0022      	movs	r2, r4
 80120c0:	2301      	movs	r3, #1
 80120c2:	0038      	movs	r0, r7
 80120c4:	9908      	ldr	r1, [sp, #32]
 80120c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80120c8:	321a      	adds	r2, #26
 80120ca:	47b0      	blx	r6
 80120cc:	3001      	adds	r0, #1
 80120ce:	d100      	bne.n	80120d2 <_printf_float+0x29a>
 80120d0:	e710      	b.n	8011ef4 <_printf_float+0xbc>
 80120d2:	3501      	adds	r5, #1
 80120d4:	e7e4      	b.n	80120a0 <_printf_float+0x268>
 80120d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120d8:	2b00      	cmp	r3, #0
 80120da:	dc3b      	bgt.n	8012154 <_printf_float+0x31c>
 80120dc:	2301      	movs	r3, #1
 80120de:	0038      	movs	r0, r7
 80120e0:	4a1b      	ldr	r2, [pc, #108]	; (8012150 <_printf_float+0x318>)
 80120e2:	9908      	ldr	r1, [sp, #32]
 80120e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80120e6:	47b0      	blx	r6
 80120e8:	3001      	adds	r0, #1
 80120ea:	d100      	bne.n	80120ee <_printf_float+0x2b6>
 80120ec:	e702      	b.n	8011ef4 <_printf_float+0xbc>
 80120ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80120f2:	4313      	orrs	r3, r2
 80120f4:	d102      	bne.n	80120fc <_printf_float+0x2c4>
 80120f6:	6823      	ldr	r3, [r4, #0]
 80120f8:	07db      	lsls	r3, r3, #31
 80120fa:	d5d5      	bpl.n	80120a8 <_printf_float+0x270>
 80120fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120fe:	0038      	movs	r0, r7
 8012100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012102:	9908      	ldr	r1, [sp, #32]
 8012104:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012106:	47b0      	blx	r6
 8012108:	2300      	movs	r3, #0
 801210a:	3001      	adds	r0, #1
 801210c:	d100      	bne.n	8012110 <_printf_float+0x2d8>
 801210e:	e6f1      	b.n	8011ef4 <_printf_float+0xbc>
 8012110:	930a      	str	r3, [sp, #40]	; 0x28
 8012112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012116:	425b      	negs	r3, r3
 8012118:	4293      	cmp	r3, r2
 801211a:	dc01      	bgt.n	8012120 <_printf_float+0x2e8>
 801211c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801211e:	e791      	b.n	8012044 <_printf_float+0x20c>
 8012120:	0022      	movs	r2, r4
 8012122:	2301      	movs	r3, #1
 8012124:	0038      	movs	r0, r7
 8012126:	9908      	ldr	r1, [sp, #32]
 8012128:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801212a:	321a      	adds	r2, #26
 801212c:	47b0      	blx	r6
 801212e:	3001      	adds	r0, #1
 8012130:	d100      	bne.n	8012134 <_printf_float+0x2fc>
 8012132:	e6df      	b.n	8011ef4 <_printf_float+0xbc>
 8012134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012136:	3301      	adds	r3, #1
 8012138:	e7ea      	b.n	8012110 <_printf_float+0x2d8>
 801213a:	46c0      	nop			; (mov r8, r8)
 801213c:	7fefffff 	.word	0x7fefffff
 8012140:	080181a1 	.word	0x080181a1
 8012144:	080181a5 	.word	0x080181a5
 8012148:	080181a9 	.word	0x080181a9
 801214c:	080181ad 	.word	0x080181ad
 8012150:	080181b1 	.word	0x080181b1
 8012154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012158:	920a      	str	r2, [sp, #40]	; 0x28
 801215a:	429a      	cmp	r2, r3
 801215c:	dd00      	ble.n	8012160 <_printf_float+0x328>
 801215e:	930a      	str	r3, [sp, #40]	; 0x28
 8012160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012162:	2b00      	cmp	r3, #0
 8012164:	dc3d      	bgt.n	80121e2 <_printf_float+0x3aa>
 8012166:	2300      	movs	r3, #0
 8012168:	930e      	str	r3, [sp, #56]	; 0x38
 801216a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801216c:	43db      	mvns	r3, r3
 801216e:	17db      	asrs	r3, r3, #31
 8012170:	930f      	str	r3, [sp, #60]	; 0x3c
 8012172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012176:	930b      	str	r3, [sp, #44]	; 0x2c
 8012178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801217a:	4013      	ands	r3, r2
 801217c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012182:	4293      	cmp	r3, r2
 8012184:	dc36      	bgt.n	80121f4 <_printf_float+0x3bc>
 8012186:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801218a:	429a      	cmp	r2, r3
 801218c:	db40      	blt.n	8012210 <_printf_float+0x3d8>
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	07db      	lsls	r3, r3, #31
 8012192:	d43d      	bmi.n	8012210 <_printf_float+0x3d8>
 8012194:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012196:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801219a:	1af3      	subs	r3, r6, r3
 801219c:	1ab6      	subs	r6, r6, r2
 801219e:	429e      	cmp	r6, r3
 80121a0:	dd00      	ble.n	80121a4 <_printf_float+0x36c>
 80121a2:	001e      	movs	r6, r3
 80121a4:	2e00      	cmp	r6, #0
 80121a6:	dc3c      	bgt.n	8012222 <_printf_float+0x3ea>
 80121a8:	2300      	movs	r3, #0
 80121aa:	930a      	str	r3, [sp, #40]	; 0x28
 80121ac:	43f3      	mvns	r3, r6
 80121ae:	17db      	asrs	r3, r3, #31
 80121b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80121b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80121b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80121b6:	1a9b      	subs	r3, r3, r2
 80121b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121ba:	4032      	ands	r2, r6
 80121bc:	1a9b      	subs	r3, r3, r2
 80121be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121c0:	4293      	cmp	r3, r2
 80121c2:	dc00      	bgt.n	80121c6 <_printf_float+0x38e>
 80121c4:	e770      	b.n	80120a8 <_printf_float+0x270>
 80121c6:	0022      	movs	r2, r4
 80121c8:	2301      	movs	r3, #1
 80121ca:	0038      	movs	r0, r7
 80121cc:	9908      	ldr	r1, [sp, #32]
 80121ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80121d0:	321a      	adds	r2, #26
 80121d2:	47a8      	blx	r5
 80121d4:	3001      	adds	r0, #1
 80121d6:	d100      	bne.n	80121da <_printf_float+0x3a2>
 80121d8:	e68c      	b.n	8011ef4 <_printf_float+0xbc>
 80121da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121dc:	3301      	adds	r3, #1
 80121de:	930a      	str	r3, [sp, #40]	; 0x28
 80121e0:	e7e7      	b.n	80121b2 <_printf_float+0x37a>
 80121e2:	002a      	movs	r2, r5
 80121e4:	0038      	movs	r0, r7
 80121e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121e8:	9908      	ldr	r1, [sp, #32]
 80121ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80121ec:	47b0      	blx	r6
 80121ee:	3001      	adds	r0, #1
 80121f0:	d1b9      	bne.n	8012166 <_printf_float+0x32e>
 80121f2:	e67f      	b.n	8011ef4 <_printf_float+0xbc>
 80121f4:	0022      	movs	r2, r4
 80121f6:	2301      	movs	r3, #1
 80121f8:	0038      	movs	r0, r7
 80121fa:	9908      	ldr	r1, [sp, #32]
 80121fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80121fe:	321a      	adds	r2, #26
 8012200:	47b0      	blx	r6
 8012202:	3001      	adds	r0, #1
 8012204:	d100      	bne.n	8012208 <_printf_float+0x3d0>
 8012206:	e675      	b.n	8011ef4 <_printf_float+0xbc>
 8012208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801220a:	3301      	adds	r3, #1
 801220c:	930e      	str	r3, [sp, #56]	; 0x38
 801220e:	e7b0      	b.n	8012172 <_printf_float+0x33a>
 8012210:	0038      	movs	r0, r7
 8012212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012216:	9908      	ldr	r1, [sp, #32]
 8012218:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801221a:	47b0      	blx	r6
 801221c:	3001      	adds	r0, #1
 801221e:	d1b9      	bne.n	8012194 <_printf_float+0x35c>
 8012220:	e668      	b.n	8011ef4 <_printf_float+0xbc>
 8012222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012224:	0038      	movs	r0, r7
 8012226:	18ea      	adds	r2, r5, r3
 8012228:	9908      	ldr	r1, [sp, #32]
 801222a:	0033      	movs	r3, r6
 801222c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801222e:	47a8      	blx	r5
 8012230:	3001      	adds	r0, #1
 8012232:	d1b9      	bne.n	80121a8 <_printf_float+0x370>
 8012234:	e65e      	b.n	8011ef4 <_printf_float+0xbc>
 8012236:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012238:	2b01      	cmp	r3, #1
 801223a:	dc02      	bgt.n	8012242 <_printf_float+0x40a>
 801223c:	2301      	movs	r3, #1
 801223e:	421a      	tst	r2, r3
 8012240:	d03a      	beq.n	80122b8 <_printf_float+0x480>
 8012242:	2301      	movs	r3, #1
 8012244:	002a      	movs	r2, r5
 8012246:	0038      	movs	r0, r7
 8012248:	9908      	ldr	r1, [sp, #32]
 801224a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801224c:	47b0      	blx	r6
 801224e:	3001      	adds	r0, #1
 8012250:	d100      	bne.n	8012254 <_printf_float+0x41c>
 8012252:	e64f      	b.n	8011ef4 <_printf_float+0xbc>
 8012254:	0038      	movs	r0, r7
 8012256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801225a:	9908      	ldr	r1, [sp, #32]
 801225c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801225e:	47b0      	blx	r6
 8012260:	3001      	adds	r0, #1
 8012262:	d100      	bne.n	8012266 <_printf_float+0x42e>
 8012264:	e646      	b.n	8011ef4 <_printf_float+0xbc>
 8012266:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012268:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801226a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801226c:	2200      	movs	r2, #0
 801226e:	001e      	movs	r6, r3
 8012270:	2300      	movs	r3, #0
 8012272:	f7ee f8eb 	bl	800044c <__aeabi_dcmpeq>
 8012276:	2800      	cmp	r0, #0
 8012278:	d11c      	bne.n	80122b4 <_printf_float+0x47c>
 801227a:	0033      	movs	r3, r6
 801227c:	1c6a      	adds	r2, r5, #1
 801227e:	3b01      	subs	r3, #1
 8012280:	0038      	movs	r0, r7
 8012282:	9908      	ldr	r1, [sp, #32]
 8012284:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012286:	47a8      	blx	r5
 8012288:	3001      	adds	r0, #1
 801228a:	d10f      	bne.n	80122ac <_printf_float+0x474>
 801228c:	e632      	b.n	8011ef4 <_printf_float+0xbc>
 801228e:	0022      	movs	r2, r4
 8012290:	2301      	movs	r3, #1
 8012292:	0038      	movs	r0, r7
 8012294:	9908      	ldr	r1, [sp, #32]
 8012296:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012298:	321a      	adds	r2, #26
 801229a:	47b0      	blx	r6
 801229c:	3001      	adds	r0, #1
 801229e:	d100      	bne.n	80122a2 <_printf_float+0x46a>
 80122a0:	e628      	b.n	8011ef4 <_printf_float+0xbc>
 80122a2:	3501      	adds	r5, #1
 80122a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80122a6:	3b01      	subs	r3, #1
 80122a8:	42ab      	cmp	r3, r5
 80122aa:	dcf0      	bgt.n	801228e <_printf_float+0x456>
 80122ac:	0022      	movs	r2, r4
 80122ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122b0:	3250      	adds	r2, #80	; 0x50
 80122b2:	e6c8      	b.n	8012046 <_printf_float+0x20e>
 80122b4:	2500      	movs	r5, #0
 80122b6:	e7f5      	b.n	80122a4 <_printf_float+0x46c>
 80122b8:	002a      	movs	r2, r5
 80122ba:	e7e1      	b.n	8012280 <_printf_float+0x448>
 80122bc:	0022      	movs	r2, r4
 80122be:	2301      	movs	r3, #1
 80122c0:	0038      	movs	r0, r7
 80122c2:	9908      	ldr	r1, [sp, #32]
 80122c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80122c6:	3219      	adds	r2, #25
 80122c8:	47b0      	blx	r6
 80122ca:	3001      	adds	r0, #1
 80122cc:	d100      	bne.n	80122d0 <_printf_float+0x498>
 80122ce:	e611      	b.n	8011ef4 <_printf_float+0xbc>
 80122d0:	3501      	adds	r5, #1
 80122d2:	68e3      	ldr	r3, [r4, #12]
 80122d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80122d6:	1a9b      	subs	r3, r3, r2
 80122d8:	42ab      	cmp	r3, r5
 80122da:	dcef      	bgt.n	80122bc <_printf_float+0x484>
 80122dc:	e6e8      	b.n	80120b0 <_printf_float+0x278>
 80122de:	2500      	movs	r5, #0
 80122e0:	e7f7      	b.n	80122d2 <_printf_float+0x49a>
 80122e2:	46c0      	nop			; (mov r8, r8)

080122e4 <_printf_common>:
 80122e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122e6:	0016      	movs	r6, r2
 80122e8:	9301      	str	r3, [sp, #4]
 80122ea:	688a      	ldr	r2, [r1, #8]
 80122ec:	690b      	ldr	r3, [r1, #16]
 80122ee:	000c      	movs	r4, r1
 80122f0:	9000      	str	r0, [sp, #0]
 80122f2:	4293      	cmp	r3, r2
 80122f4:	da00      	bge.n	80122f8 <_printf_common+0x14>
 80122f6:	0013      	movs	r3, r2
 80122f8:	0022      	movs	r2, r4
 80122fa:	6033      	str	r3, [r6, #0]
 80122fc:	3243      	adds	r2, #67	; 0x43
 80122fe:	7812      	ldrb	r2, [r2, #0]
 8012300:	2a00      	cmp	r2, #0
 8012302:	d001      	beq.n	8012308 <_printf_common+0x24>
 8012304:	3301      	adds	r3, #1
 8012306:	6033      	str	r3, [r6, #0]
 8012308:	6823      	ldr	r3, [r4, #0]
 801230a:	069b      	lsls	r3, r3, #26
 801230c:	d502      	bpl.n	8012314 <_printf_common+0x30>
 801230e:	6833      	ldr	r3, [r6, #0]
 8012310:	3302      	adds	r3, #2
 8012312:	6033      	str	r3, [r6, #0]
 8012314:	6822      	ldr	r2, [r4, #0]
 8012316:	2306      	movs	r3, #6
 8012318:	0015      	movs	r5, r2
 801231a:	401d      	ands	r5, r3
 801231c:	421a      	tst	r2, r3
 801231e:	d027      	beq.n	8012370 <_printf_common+0x8c>
 8012320:	0023      	movs	r3, r4
 8012322:	3343      	adds	r3, #67	; 0x43
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	1e5a      	subs	r2, r3, #1
 8012328:	4193      	sbcs	r3, r2
 801232a:	6822      	ldr	r2, [r4, #0]
 801232c:	0692      	lsls	r2, r2, #26
 801232e:	d430      	bmi.n	8012392 <_printf_common+0xae>
 8012330:	0022      	movs	r2, r4
 8012332:	9901      	ldr	r1, [sp, #4]
 8012334:	9800      	ldr	r0, [sp, #0]
 8012336:	9d08      	ldr	r5, [sp, #32]
 8012338:	3243      	adds	r2, #67	; 0x43
 801233a:	47a8      	blx	r5
 801233c:	3001      	adds	r0, #1
 801233e:	d025      	beq.n	801238c <_printf_common+0xa8>
 8012340:	2206      	movs	r2, #6
 8012342:	6823      	ldr	r3, [r4, #0]
 8012344:	2500      	movs	r5, #0
 8012346:	4013      	ands	r3, r2
 8012348:	2b04      	cmp	r3, #4
 801234a:	d105      	bne.n	8012358 <_printf_common+0x74>
 801234c:	6833      	ldr	r3, [r6, #0]
 801234e:	68e5      	ldr	r5, [r4, #12]
 8012350:	1aed      	subs	r5, r5, r3
 8012352:	43eb      	mvns	r3, r5
 8012354:	17db      	asrs	r3, r3, #31
 8012356:	401d      	ands	r5, r3
 8012358:	68a3      	ldr	r3, [r4, #8]
 801235a:	6922      	ldr	r2, [r4, #16]
 801235c:	4293      	cmp	r3, r2
 801235e:	dd01      	ble.n	8012364 <_printf_common+0x80>
 8012360:	1a9b      	subs	r3, r3, r2
 8012362:	18ed      	adds	r5, r5, r3
 8012364:	2600      	movs	r6, #0
 8012366:	42b5      	cmp	r5, r6
 8012368:	d120      	bne.n	80123ac <_printf_common+0xc8>
 801236a:	2000      	movs	r0, #0
 801236c:	e010      	b.n	8012390 <_printf_common+0xac>
 801236e:	3501      	adds	r5, #1
 8012370:	68e3      	ldr	r3, [r4, #12]
 8012372:	6832      	ldr	r2, [r6, #0]
 8012374:	1a9b      	subs	r3, r3, r2
 8012376:	42ab      	cmp	r3, r5
 8012378:	ddd2      	ble.n	8012320 <_printf_common+0x3c>
 801237a:	0022      	movs	r2, r4
 801237c:	2301      	movs	r3, #1
 801237e:	9901      	ldr	r1, [sp, #4]
 8012380:	9800      	ldr	r0, [sp, #0]
 8012382:	9f08      	ldr	r7, [sp, #32]
 8012384:	3219      	adds	r2, #25
 8012386:	47b8      	blx	r7
 8012388:	3001      	adds	r0, #1
 801238a:	d1f0      	bne.n	801236e <_printf_common+0x8a>
 801238c:	2001      	movs	r0, #1
 801238e:	4240      	negs	r0, r0
 8012390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012392:	2030      	movs	r0, #48	; 0x30
 8012394:	18e1      	adds	r1, r4, r3
 8012396:	3143      	adds	r1, #67	; 0x43
 8012398:	7008      	strb	r0, [r1, #0]
 801239a:	0021      	movs	r1, r4
 801239c:	1c5a      	adds	r2, r3, #1
 801239e:	3145      	adds	r1, #69	; 0x45
 80123a0:	7809      	ldrb	r1, [r1, #0]
 80123a2:	18a2      	adds	r2, r4, r2
 80123a4:	3243      	adds	r2, #67	; 0x43
 80123a6:	3302      	adds	r3, #2
 80123a8:	7011      	strb	r1, [r2, #0]
 80123aa:	e7c1      	b.n	8012330 <_printf_common+0x4c>
 80123ac:	0022      	movs	r2, r4
 80123ae:	2301      	movs	r3, #1
 80123b0:	9901      	ldr	r1, [sp, #4]
 80123b2:	9800      	ldr	r0, [sp, #0]
 80123b4:	9f08      	ldr	r7, [sp, #32]
 80123b6:	321a      	adds	r2, #26
 80123b8:	47b8      	blx	r7
 80123ba:	3001      	adds	r0, #1
 80123bc:	d0e6      	beq.n	801238c <_printf_common+0xa8>
 80123be:	3601      	adds	r6, #1
 80123c0:	e7d1      	b.n	8012366 <_printf_common+0x82>
	...

080123c4 <_printf_i>:
 80123c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123c6:	b08b      	sub	sp, #44	; 0x2c
 80123c8:	9206      	str	r2, [sp, #24]
 80123ca:	000a      	movs	r2, r1
 80123cc:	3243      	adds	r2, #67	; 0x43
 80123ce:	9307      	str	r3, [sp, #28]
 80123d0:	9005      	str	r0, [sp, #20]
 80123d2:	9204      	str	r2, [sp, #16]
 80123d4:	7e0a      	ldrb	r2, [r1, #24]
 80123d6:	000c      	movs	r4, r1
 80123d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123da:	2a78      	cmp	r2, #120	; 0x78
 80123dc:	d809      	bhi.n	80123f2 <_printf_i+0x2e>
 80123de:	2a62      	cmp	r2, #98	; 0x62
 80123e0:	d80b      	bhi.n	80123fa <_printf_i+0x36>
 80123e2:	2a00      	cmp	r2, #0
 80123e4:	d100      	bne.n	80123e8 <_printf_i+0x24>
 80123e6:	e0be      	b.n	8012566 <_printf_i+0x1a2>
 80123e8:	497c      	ldr	r1, [pc, #496]	; (80125dc <_printf_i+0x218>)
 80123ea:	9103      	str	r1, [sp, #12]
 80123ec:	2a58      	cmp	r2, #88	; 0x58
 80123ee:	d100      	bne.n	80123f2 <_printf_i+0x2e>
 80123f0:	e093      	b.n	801251a <_printf_i+0x156>
 80123f2:	0026      	movs	r6, r4
 80123f4:	3642      	adds	r6, #66	; 0x42
 80123f6:	7032      	strb	r2, [r6, #0]
 80123f8:	e022      	b.n	8012440 <_printf_i+0x7c>
 80123fa:	0010      	movs	r0, r2
 80123fc:	3863      	subs	r0, #99	; 0x63
 80123fe:	2815      	cmp	r0, #21
 8012400:	d8f7      	bhi.n	80123f2 <_printf_i+0x2e>
 8012402:	f7ed fe93 	bl	800012c <__gnu_thumb1_case_shi>
 8012406:	0016      	.short	0x0016
 8012408:	fff6001f 	.word	0xfff6001f
 801240c:	fff6fff6 	.word	0xfff6fff6
 8012410:	001ffff6 	.word	0x001ffff6
 8012414:	fff6fff6 	.word	0xfff6fff6
 8012418:	fff6fff6 	.word	0xfff6fff6
 801241c:	003600a3 	.word	0x003600a3
 8012420:	fff60083 	.word	0xfff60083
 8012424:	00b4fff6 	.word	0x00b4fff6
 8012428:	0036fff6 	.word	0x0036fff6
 801242c:	fff6fff6 	.word	0xfff6fff6
 8012430:	0087      	.short	0x0087
 8012432:	0026      	movs	r6, r4
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	3642      	adds	r6, #66	; 0x42
 8012438:	1d11      	adds	r1, r2, #4
 801243a:	6019      	str	r1, [r3, #0]
 801243c:	6813      	ldr	r3, [r2, #0]
 801243e:	7033      	strb	r3, [r6, #0]
 8012440:	2301      	movs	r3, #1
 8012442:	e0a2      	b.n	801258a <_printf_i+0x1c6>
 8012444:	6818      	ldr	r0, [r3, #0]
 8012446:	6809      	ldr	r1, [r1, #0]
 8012448:	1d02      	adds	r2, r0, #4
 801244a:	060d      	lsls	r5, r1, #24
 801244c:	d50b      	bpl.n	8012466 <_printf_i+0xa2>
 801244e:	6805      	ldr	r5, [r0, #0]
 8012450:	601a      	str	r2, [r3, #0]
 8012452:	2d00      	cmp	r5, #0
 8012454:	da03      	bge.n	801245e <_printf_i+0x9a>
 8012456:	232d      	movs	r3, #45	; 0x2d
 8012458:	9a04      	ldr	r2, [sp, #16]
 801245a:	426d      	negs	r5, r5
 801245c:	7013      	strb	r3, [r2, #0]
 801245e:	4b5f      	ldr	r3, [pc, #380]	; (80125dc <_printf_i+0x218>)
 8012460:	270a      	movs	r7, #10
 8012462:	9303      	str	r3, [sp, #12]
 8012464:	e01b      	b.n	801249e <_printf_i+0xda>
 8012466:	6805      	ldr	r5, [r0, #0]
 8012468:	601a      	str	r2, [r3, #0]
 801246a:	0649      	lsls	r1, r1, #25
 801246c:	d5f1      	bpl.n	8012452 <_printf_i+0x8e>
 801246e:	b22d      	sxth	r5, r5
 8012470:	e7ef      	b.n	8012452 <_printf_i+0x8e>
 8012472:	680d      	ldr	r5, [r1, #0]
 8012474:	6819      	ldr	r1, [r3, #0]
 8012476:	1d08      	adds	r0, r1, #4
 8012478:	6018      	str	r0, [r3, #0]
 801247a:	062e      	lsls	r6, r5, #24
 801247c:	d501      	bpl.n	8012482 <_printf_i+0xbe>
 801247e:	680d      	ldr	r5, [r1, #0]
 8012480:	e003      	b.n	801248a <_printf_i+0xc6>
 8012482:	066d      	lsls	r5, r5, #25
 8012484:	d5fb      	bpl.n	801247e <_printf_i+0xba>
 8012486:	680d      	ldr	r5, [r1, #0]
 8012488:	b2ad      	uxth	r5, r5
 801248a:	4b54      	ldr	r3, [pc, #336]	; (80125dc <_printf_i+0x218>)
 801248c:	2708      	movs	r7, #8
 801248e:	9303      	str	r3, [sp, #12]
 8012490:	2a6f      	cmp	r2, #111	; 0x6f
 8012492:	d000      	beq.n	8012496 <_printf_i+0xd2>
 8012494:	3702      	adds	r7, #2
 8012496:	0023      	movs	r3, r4
 8012498:	2200      	movs	r2, #0
 801249a:	3343      	adds	r3, #67	; 0x43
 801249c:	701a      	strb	r2, [r3, #0]
 801249e:	6863      	ldr	r3, [r4, #4]
 80124a0:	60a3      	str	r3, [r4, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	db03      	blt.n	80124ae <_printf_i+0xea>
 80124a6:	2104      	movs	r1, #4
 80124a8:	6822      	ldr	r2, [r4, #0]
 80124aa:	438a      	bics	r2, r1
 80124ac:	6022      	str	r2, [r4, #0]
 80124ae:	2d00      	cmp	r5, #0
 80124b0:	d102      	bne.n	80124b8 <_printf_i+0xf4>
 80124b2:	9e04      	ldr	r6, [sp, #16]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00c      	beq.n	80124d2 <_printf_i+0x10e>
 80124b8:	9e04      	ldr	r6, [sp, #16]
 80124ba:	0028      	movs	r0, r5
 80124bc:	0039      	movs	r1, r7
 80124be:	f7ed fec5 	bl	800024c <__aeabi_uidivmod>
 80124c2:	9b03      	ldr	r3, [sp, #12]
 80124c4:	3e01      	subs	r6, #1
 80124c6:	5c5b      	ldrb	r3, [r3, r1]
 80124c8:	7033      	strb	r3, [r6, #0]
 80124ca:	002b      	movs	r3, r5
 80124cc:	0005      	movs	r5, r0
 80124ce:	429f      	cmp	r7, r3
 80124d0:	d9f3      	bls.n	80124ba <_printf_i+0xf6>
 80124d2:	2f08      	cmp	r7, #8
 80124d4:	d109      	bne.n	80124ea <_printf_i+0x126>
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	07db      	lsls	r3, r3, #31
 80124da:	d506      	bpl.n	80124ea <_printf_i+0x126>
 80124dc:	6862      	ldr	r2, [r4, #4]
 80124de:	6923      	ldr	r3, [r4, #16]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	dc02      	bgt.n	80124ea <_printf_i+0x126>
 80124e4:	2330      	movs	r3, #48	; 0x30
 80124e6:	3e01      	subs	r6, #1
 80124e8:	7033      	strb	r3, [r6, #0]
 80124ea:	9b04      	ldr	r3, [sp, #16]
 80124ec:	1b9b      	subs	r3, r3, r6
 80124ee:	6123      	str	r3, [r4, #16]
 80124f0:	9b07      	ldr	r3, [sp, #28]
 80124f2:	0021      	movs	r1, r4
 80124f4:	9300      	str	r3, [sp, #0]
 80124f6:	9805      	ldr	r0, [sp, #20]
 80124f8:	9b06      	ldr	r3, [sp, #24]
 80124fa:	aa09      	add	r2, sp, #36	; 0x24
 80124fc:	f7ff fef2 	bl	80122e4 <_printf_common>
 8012500:	3001      	adds	r0, #1
 8012502:	d147      	bne.n	8012594 <_printf_i+0x1d0>
 8012504:	2001      	movs	r0, #1
 8012506:	4240      	negs	r0, r0
 8012508:	b00b      	add	sp, #44	; 0x2c
 801250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801250c:	2220      	movs	r2, #32
 801250e:	6809      	ldr	r1, [r1, #0]
 8012510:	430a      	orrs	r2, r1
 8012512:	6022      	str	r2, [r4, #0]
 8012514:	2278      	movs	r2, #120	; 0x78
 8012516:	4932      	ldr	r1, [pc, #200]	; (80125e0 <_printf_i+0x21c>)
 8012518:	9103      	str	r1, [sp, #12]
 801251a:	0021      	movs	r1, r4
 801251c:	3145      	adds	r1, #69	; 0x45
 801251e:	700a      	strb	r2, [r1, #0]
 8012520:	6819      	ldr	r1, [r3, #0]
 8012522:	6822      	ldr	r2, [r4, #0]
 8012524:	c920      	ldmia	r1!, {r5}
 8012526:	0610      	lsls	r0, r2, #24
 8012528:	d402      	bmi.n	8012530 <_printf_i+0x16c>
 801252a:	0650      	lsls	r0, r2, #25
 801252c:	d500      	bpl.n	8012530 <_printf_i+0x16c>
 801252e:	b2ad      	uxth	r5, r5
 8012530:	6019      	str	r1, [r3, #0]
 8012532:	07d3      	lsls	r3, r2, #31
 8012534:	d502      	bpl.n	801253c <_printf_i+0x178>
 8012536:	2320      	movs	r3, #32
 8012538:	4313      	orrs	r3, r2
 801253a:	6023      	str	r3, [r4, #0]
 801253c:	2710      	movs	r7, #16
 801253e:	2d00      	cmp	r5, #0
 8012540:	d1a9      	bne.n	8012496 <_printf_i+0xd2>
 8012542:	2220      	movs	r2, #32
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	4393      	bics	r3, r2
 8012548:	6023      	str	r3, [r4, #0]
 801254a:	e7a4      	b.n	8012496 <_printf_i+0xd2>
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	680d      	ldr	r5, [r1, #0]
 8012550:	1d10      	adds	r0, r2, #4
 8012552:	6949      	ldr	r1, [r1, #20]
 8012554:	6018      	str	r0, [r3, #0]
 8012556:	6813      	ldr	r3, [r2, #0]
 8012558:	062e      	lsls	r6, r5, #24
 801255a:	d501      	bpl.n	8012560 <_printf_i+0x19c>
 801255c:	6019      	str	r1, [r3, #0]
 801255e:	e002      	b.n	8012566 <_printf_i+0x1a2>
 8012560:	066d      	lsls	r5, r5, #25
 8012562:	d5fb      	bpl.n	801255c <_printf_i+0x198>
 8012564:	8019      	strh	r1, [r3, #0]
 8012566:	2300      	movs	r3, #0
 8012568:	9e04      	ldr	r6, [sp, #16]
 801256a:	6123      	str	r3, [r4, #16]
 801256c:	e7c0      	b.n	80124f0 <_printf_i+0x12c>
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	1d11      	adds	r1, r2, #4
 8012572:	6019      	str	r1, [r3, #0]
 8012574:	6816      	ldr	r6, [r2, #0]
 8012576:	2100      	movs	r1, #0
 8012578:	0030      	movs	r0, r6
 801257a:	6862      	ldr	r2, [r4, #4]
 801257c:	f000 fd27 	bl	8012fce <memchr>
 8012580:	2800      	cmp	r0, #0
 8012582:	d001      	beq.n	8012588 <_printf_i+0x1c4>
 8012584:	1b80      	subs	r0, r0, r6
 8012586:	6060      	str	r0, [r4, #4]
 8012588:	6863      	ldr	r3, [r4, #4]
 801258a:	6123      	str	r3, [r4, #16]
 801258c:	2300      	movs	r3, #0
 801258e:	9a04      	ldr	r2, [sp, #16]
 8012590:	7013      	strb	r3, [r2, #0]
 8012592:	e7ad      	b.n	80124f0 <_printf_i+0x12c>
 8012594:	0032      	movs	r2, r6
 8012596:	6923      	ldr	r3, [r4, #16]
 8012598:	9906      	ldr	r1, [sp, #24]
 801259a:	9805      	ldr	r0, [sp, #20]
 801259c:	9d07      	ldr	r5, [sp, #28]
 801259e:	47a8      	blx	r5
 80125a0:	3001      	adds	r0, #1
 80125a2:	d0af      	beq.n	8012504 <_printf_i+0x140>
 80125a4:	6823      	ldr	r3, [r4, #0]
 80125a6:	079b      	lsls	r3, r3, #30
 80125a8:	d415      	bmi.n	80125d6 <_printf_i+0x212>
 80125aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ac:	68e0      	ldr	r0, [r4, #12]
 80125ae:	4298      	cmp	r0, r3
 80125b0:	daaa      	bge.n	8012508 <_printf_i+0x144>
 80125b2:	0018      	movs	r0, r3
 80125b4:	e7a8      	b.n	8012508 <_printf_i+0x144>
 80125b6:	0022      	movs	r2, r4
 80125b8:	2301      	movs	r3, #1
 80125ba:	9906      	ldr	r1, [sp, #24]
 80125bc:	9805      	ldr	r0, [sp, #20]
 80125be:	9e07      	ldr	r6, [sp, #28]
 80125c0:	3219      	adds	r2, #25
 80125c2:	47b0      	blx	r6
 80125c4:	3001      	adds	r0, #1
 80125c6:	d09d      	beq.n	8012504 <_printf_i+0x140>
 80125c8:	3501      	adds	r5, #1
 80125ca:	68e3      	ldr	r3, [r4, #12]
 80125cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125ce:	1a9b      	subs	r3, r3, r2
 80125d0:	42ab      	cmp	r3, r5
 80125d2:	dcf0      	bgt.n	80125b6 <_printf_i+0x1f2>
 80125d4:	e7e9      	b.n	80125aa <_printf_i+0x1e6>
 80125d6:	2500      	movs	r5, #0
 80125d8:	e7f7      	b.n	80125ca <_printf_i+0x206>
 80125da:	46c0      	nop			; (mov r8, r8)
 80125dc:	080181b3 	.word	0x080181b3
 80125e0:	080181c4 	.word	0x080181c4

080125e4 <_scanf_float>:
 80125e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125e6:	b08b      	sub	sp, #44	; 0x2c
 80125e8:	0016      	movs	r6, r2
 80125ea:	9002      	str	r0, [sp, #8]
 80125ec:	22ae      	movs	r2, #174	; 0xae
 80125ee:	2000      	movs	r0, #0
 80125f0:	9307      	str	r3, [sp, #28]
 80125f2:	688b      	ldr	r3, [r1, #8]
 80125f4:	000f      	movs	r7, r1
 80125f6:	1e59      	subs	r1, r3, #1
 80125f8:	0052      	lsls	r2, r2, #1
 80125fa:	9006      	str	r0, [sp, #24]
 80125fc:	4291      	cmp	r1, r2
 80125fe:	d905      	bls.n	801260c <_scanf_float+0x28>
 8012600:	3b5e      	subs	r3, #94	; 0x5e
 8012602:	3bff      	subs	r3, #255	; 0xff
 8012604:	9306      	str	r3, [sp, #24]
 8012606:	235e      	movs	r3, #94	; 0x5e
 8012608:	33ff      	adds	r3, #255	; 0xff
 801260a:	60bb      	str	r3, [r7, #8]
 801260c:	23f0      	movs	r3, #240	; 0xf0
 801260e:	683a      	ldr	r2, [r7, #0]
 8012610:	00db      	lsls	r3, r3, #3
 8012612:	4313      	orrs	r3, r2
 8012614:	603b      	str	r3, [r7, #0]
 8012616:	003b      	movs	r3, r7
 8012618:	2400      	movs	r4, #0
 801261a:	331c      	adds	r3, #28
 801261c:	001d      	movs	r5, r3
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	9403      	str	r4, [sp, #12]
 8012622:	9409      	str	r4, [sp, #36]	; 0x24
 8012624:	9408      	str	r4, [sp, #32]
 8012626:	9401      	str	r4, [sp, #4]
 8012628:	9405      	str	r4, [sp, #20]
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	2a00      	cmp	r2, #0
 801262e:	d00a      	beq.n	8012646 <_scanf_float+0x62>
 8012630:	6833      	ldr	r3, [r6, #0]
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2b4e      	cmp	r3, #78	; 0x4e
 8012636:	d844      	bhi.n	80126c2 <_scanf_float+0xde>
 8012638:	0018      	movs	r0, r3
 801263a:	2b40      	cmp	r3, #64	; 0x40
 801263c:	d82c      	bhi.n	8012698 <_scanf_float+0xb4>
 801263e:	382b      	subs	r0, #43	; 0x2b
 8012640:	b2c1      	uxtb	r1, r0
 8012642:	290e      	cmp	r1, #14
 8012644:	d92a      	bls.n	801269c <_scanf_float+0xb8>
 8012646:	9b01      	ldr	r3, [sp, #4]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d003      	beq.n	8012654 <_scanf_float+0x70>
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	4aa3      	ldr	r2, [pc, #652]	; (80128dc <_scanf_float+0x2f8>)
 8012650:	4013      	ands	r3, r2
 8012652:	603b      	str	r3, [r7, #0]
 8012654:	9b03      	ldr	r3, [sp, #12]
 8012656:	3b01      	subs	r3, #1
 8012658:	2b01      	cmp	r3, #1
 801265a:	d900      	bls.n	801265e <_scanf_float+0x7a>
 801265c:	e0f9      	b.n	8012852 <_scanf_float+0x26e>
 801265e:	24be      	movs	r4, #190	; 0xbe
 8012660:	0064      	lsls	r4, r4, #1
 8012662:	9b04      	ldr	r3, [sp, #16]
 8012664:	429d      	cmp	r5, r3
 8012666:	d900      	bls.n	801266a <_scanf_float+0x86>
 8012668:	e0e9      	b.n	801283e <_scanf_float+0x25a>
 801266a:	2301      	movs	r3, #1
 801266c:	9303      	str	r3, [sp, #12]
 801266e:	e183      	b.n	8012978 <_scanf_float+0x394>
 8012670:	0018      	movs	r0, r3
 8012672:	3861      	subs	r0, #97	; 0x61
 8012674:	280d      	cmp	r0, #13
 8012676:	d8e6      	bhi.n	8012646 <_scanf_float+0x62>
 8012678:	f7ed fd58 	bl	800012c <__gnu_thumb1_case_shi>
 801267c:	ffe50083 	.word	0xffe50083
 8012680:	ffe5ffe5 	.word	0xffe5ffe5
 8012684:	00a200b6 	.word	0x00a200b6
 8012688:	ffe5ffe5 	.word	0xffe5ffe5
 801268c:	ffe50089 	.word	0xffe50089
 8012690:	ffe5ffe5 	.word	0xffe5ffe5
 8012694:	0065ffe5 	.word	0x0065ffe5
 8012698:	3841      	subs	r0, #65	; 0x41
 801269a:	e7eb      	b.n	8012674 <_scanf_float+0x90>
 801269c:	280e      	cmp	r0, #14
 801269e:	d8d2      	bhi.n	8012646 <_scanf_float+0x62>
 80126a0:	f7ed fd44 	bl	800012c <__gnu_thumb1_case_shi>
 80126a4:	ffd1004b 	.word	0xffd1004b
 80126a8:	0098004b 	.word	0x0098004b
 80126ac:	0020ffd1 	.word	0x0020ffd1
 80126b0:	00400040 	.word	0x00400040
 80126b4:	00400040 	.word	0x00400040
 80126b8:	00400040 	.word	0x00400040
 80126bc:	00400040 	.word	0x00400040
 80126c0:	0040      	.short	0x0040
 80126c2:	2b6e      	cmp	r3, #110	; 0x6e
 80126c4:	d809      	bhi.n	80126da <_scanf_float+0xf6>
 80126c6:	2b60      	cmp	r3, #96	; 0x60
 80126c8:	d8d2      	bhi.n	8012670 <_scanf_float+0x8c>
 80126ca:	2b54      	cmp	r3, #84	; 0x54
 80126cc:	d07d      	beq.n	80127ca <_scanf_float+0x1e6>
 80126ce:	2b59      	cmp	r3, #89	; 0x59
 80126d0:	d1b9      	bne.n	8012646 <_scanf_float+0x62>
 80126d2:	2c07      	cmp	r4, #7
 80126d4:	d1b7      	bne.n	8012646 <_scanf_float+0x62>
 80126d6:	2408      	movs	r4, #8
 80126d8:	e02c      	b.n	8012734 <_scanf_float+0x150>
 80126da:	2b74      	cmp	r3, #116	; 0x74
 80126dc:	d075      	beq.n	80127ca <_scanf_float+0x1e6>
 80126de:	2b79      	cmp	r3, #121	; 0x79
 80126e0:	d0f7      	beq.n	80126d2 <_scanf_float+0xee>
 80126e2:	e7b0      	b.n	8012646 <_scanf_float+0x62>
 80126e4:	6839      	ldr	r1, [r7, #0]
 80126e6:	05c8      	lsls	r0, r1, #23
 80126e8:	d51c      	bpl.n	8012724 <_scanf_float+0x140>
 80126ea:	2380      	movs	r3, #128	; 0x80
 80126ec:	4399      	bics	r1, r3
 80126ee:	9b01      	ldr	r3, [sp, #4]
 80126f0:	6039      	str	r1, [r7, #0]
 80126f2:	3301      	adds	r3, #1
 80126f4:	9301      	str	r3, [sp, #4]
 80126f6:	9b06      	ldr	r3, [sp, #24]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d003      	beq.n	8012704 <_scanf_float+0x120>
 80126fc:	3b01      	subs	r3, #1
 80126fe:	3201      	adds	r2, #1
 8012700:	9306      	str	r3, [sp, #24]
 8012702:	60ba      	str	r2, [r7, #8]
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	3b01      	subs	r3, #1
 8012708:	60bb      	str	r3, [r7, #8]
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	3301      	adds	r3, #1
 801270e:	613b      	str	r3, [r7, #16]
 8012710:	6873      	ldr	r3, [r6, #4]
 8012712:	3b01      	subs	r3, #1
 8012714:	6073      	str	r3, [r6, #4]
 8012716:	2b00      	cmp	r3, #0
 8012718:	dc00      	bgt.n	801271c <_scanf_float+0x138>
 801271a:	e086      	b.n	801282a <_scanf_float+0x246>
 801271c:	6833      	ldr	r3, [r6, #0]
 801271e:	3301      	adds	r3, #1
 8012720:	6033      	str	r3, [r6, #0]
 8012722:	e782      	b.n	801262a <_scanf_float+0x46>
 8012724:	9a03      	ldr	r2, [sp, #12]
 8012726:	1912      	adds	r2, r2, r4
 8012728:	2a00      	cmp	r2, #0
 801272a:	d18c      	bne.n	8012646 <_scanf_float+0x62>
 801272c:	683a      	ldr	r2, [r7, #0]
 801272e:	496c      	ldr	r1, [pc, #432]	; (80128e0 <_scanf_float+0x2fc>)
 8012730:	400a      	ands	r2, r1
 8012732:	603a      	str	r2, [r7, #0]
 8012734:	702b      	strb	r3, [r5, #0]
 8012736:	3501      	adds	r5, #1
 8012738:	e7e4      	b.n	8012704 <_scanf_float+0x120>
 801273a:	2180      	movs	r1, #128	; 0x80
 801273c:	683a      	ldr	r2, [r7, #0]
 801273e:	420a      	tst	r2, r1
 8012740:	d081      	beq.n	8012646 <_scanf_float+0x62>
 8012742:	438a      	bics	r2, r1
 8012744:	e7f5      	b.n	8012732 <_scanf_float+0x14e>
 8012746:	9a03      	ldr	r2, [sp, #12]
 8012748:	2a00      	cmp	r2, #0
 801274a:	d10f      	bne.n	801276c <_scanf_float+0x188>
 801274c:	9a01      	ldr	r2, [sp, #4]
 801274e:	2a00      	cmp	r2, #0
 8012750:	d10f      	bne.n	8012772 <_scanf_float+0x18e>
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	21e0      	movs	r1, #224	; 0xe0
 8012756:	0010      	movs	r0, r2
 8012758:	00c9      	lsls	r1, r1, #3
 801275a:	4008      	ands	r0, r1
 801275c:	4288      	cmp	r0, r1
 801275e:	d108      	bne.n	8012772 <_scanf_float+0x18e>
 8012760:	4960      	ldr	r1, [pc, #384]	; (80128e4 <_scanf_float+0x300>)
 8012762:	400a      	ands	r2, r1
 8012764:	603a      	str	r2, [r7, #0]
 8012766:	2201      	movs	r2, #1
 8012768:	9203      	str	r2, [sp, #12]
 801276a:	e7e3      	b.n	8012734 <_scanf_float+0x150>
 801276c:	9a03      	ldr	r2, [sp, #12]
 801276e:	2a02      	cmp	r2, #2
 8012770:	d059      	beq.n	8012826 <_scanf_float+0x242>
 8012772:	2c01      	cmp	r4, #1
 8012774:	d002      	beq.n	801277c <_scanf_float+0x198>
 8012776:	2c04      	cmp	r4, #4
 8012778:	d000      	beq.n	801277c <_scanf_float+0x198>
 801277a:	e764      	b.n	8012646 <_scanf_float+0x62>
 801277c:	3401      	adds	r4, #1
 801277e:	b2e4      	uxtb	r4, r4
 8012780:	e7d8      	b.n	8012734 <_scanf_float+0x150>
 8012782:	9a03      	ldr	r2, [sp, #12]
 8012784:	2a01      	cmp	r2, #1
 8012786:	d000      	beq.n	801278a <_scanf_float+0x1a6>
 8012788:	e75d      	b.n	8012646 <_scanf_float+0x62>
 801278a:	2202      	movs	r2, #2
 801278c:	e7ec      	b.n	8012768 <_scanf_float+0x184>
 801278e:	2c00      	cmp	r4, #0
 8012790:	d110      	bne.n	80127b4 <_scanf_float+0x1d0>
 8012792:	9a01      	ldr	r2, [sp, #4]
 8012794:	2a00      	cmp	r2, #0
 8012796:	d000      	beq.n	801279a <_scanf_float+0x1b6>
 8012798:	e758      	b.n	801264c <_scanf_float+0x68>
 801279a:	683a      	ldr	r2, [r7, #0]
 801279c:	21e0      	movs	r1, #224	; 0xe0
 801279e:	0010      	movs	r0, r2
 80127a0:	00c9      	lsls	r1, r1, #3
 80127a2:	4008      	ands	r0, r1
 80127a4:	4288      	cmp	r0, r1
 80127a6:	d000      	beq.n	80127aa <_scanf_float+0x1c6>
 80127a8:	e754      	b.n	8012654 <_scanf_float+0x70>
 80127aa:	494e      	ldr	r1, [pc, #312]	; (80128e4 <_scanf_float+0x300>)
 80127ac:	3401      	adds	r4, #1
 80127ae:	400a      	ands	r2, r1
 80127b0:	603a      	str	r2, [r7, #0]
 80127b2:	e7bf      	b.n	8012734 <_scanf_float+0x150>
 80127b4:	21fd      	movs	r1, #253	; 0xfd
 80127b6:	1ee2      	subs	r2, r4, #3
 80127b8:	420a      	tst	r2, r1
 80127ba:	d000      	beq.n	80127be <_scanf_float+0x1da>
 80127bc:	e743      	b.n	8012646 <_scanf_float+0x62>
 80127be:	e7dd      	b.n	801277c <_scanf_float+0x198>
 80127c0:	2c02      	cmp	r4, #2
 80127c2:	d000      	beq.n	80127c6 <_scanf_float+0x1e2>
 80127c4:	e73f      	b.n	8012646 <_scanf_float+0x62>
 80127c6:	2403      	movs	r4, #3
 80127c8:	e7b4      	b.n	8012734 <_scanf_float+0x150>
 80127ca:	2c06      	cmp	r4, #6
 80127cc:	d000      	beq.n	80127d0 <_scanf_float+0x1ec>
 80127ce:	e73a      	b.n	8012646 <_scanf_float+0x62>
 80127d0:	2407      	movs	r4, #7
 80127d2:	e7af      	b.n	8012734 <_scanf_float+0x150>
 80127d4:	683a      	ldr	r2, [r7, #0]
 80127d6:	0591      	lsls	r1, r2, #22
 80127d8:	d400      	bmi.n	80127dc <_scanf_float+0x1f8>
 80127da:	e734      	b.n	8012646 <_scanf_float+0x62>
 80127dc:	4942      	ldr	r1, [pc, #264]	; (80128e8 <_scanf_float+0x304>)
 80127de:	400a      	ands	r2, r1
 80127e0:	603a      	str	r2, [r7, #0]
 80127e2:	9a01      	ldr	r2, [sp, #4]
 80127e4:	9205      	str	r2, [sp, #20]
 80127e6:	e7a5      	b.n	8012734 <_scanf_float+0x150>
 80127e8:	21a0      	movs	r1, #160	; 0xa0
 80127ea:	2080      	movs	r0, #128	; 0x80
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	00c9      	lsls	r1, r1, #3
 80127f0:	4011      	ands	r1, r2
 80127f2:	00c0      	lsls	r0, r0, #3
 80127f4:	4281      	cmp	r1, r0
 80127f6:	d006      	beq.n	8012806 <_scanf_float+0x222>
 80127f8:	4202      	tst	r2, r0
 80127fa:	d100      	bne.n	80127fe <_scanf_float+0x21a>
 80127fc:	e723      	b.n	8012646 <_scanf_float+0x62>
 80127fe:	9901      	ldr	r1, [sp, #4]
 8012800:	2900      	cmp	r1, #0
 8012802:	d100      	bne.n	8012806 <_scanf_float+0x222>
 8012804:	e726      	b.n	8012654 <_scanf_float+0x70>
 8012806:	0591      	lsls	r1, r2, #22
 8012808:	d404      	bmi.n	8012814 <_scanf_float+0x230>
 801280a:	9901      	ldr	r1, [sp, #4]
 801280c:	9805      	ldr	r0, [sp, #20]
 801280e:	9509      	str	r5, [sp, #36]	; 0x24
 8012810:	1a09      	subs	r1, r1, r0
 8012812:	9108      	str	r1, [sp, #32]
 8012814:	4933      	ldr	r1, [pc, #204]	; (80128e4 <_scanf_float+0x300>)
 8012816:	400a      	ands	r2, r1
 8012818:	21c0      	movs	r1, #192	; 0xc0
 801281a:	0049      	lsls	r1, r1, #1
 801281c:	430a      	orrs	r2, r1
 801281e:	603a      	str	r2, [r7, #0]
 8012820:	2200      	movs	r2, #0
 8012822:	9201      	str	r2, [sp, #4]
 8012824:	e786      	b.n	8012734 <_scanf_float+0x150>
 8012826:	2203      	movs	r2, #3
 8012828:	e79e      	b.n	8012768 <_scanf_float+0x184>
 801282a:	23c0      	movs	r3, #192	; 0xc0
 801282c:	005b      	lsls	r3, r3, #1
 801282e:	0031      	movs	r1, r6
 8012830:	58fb      	ldr	r3, [r7, r3]
 8012832:	9802      	ldr	r0, [sp, #8]
 8012834:	4798      	blx	r3
 8012836:	2800      	cmp	r0, #0
 8012838:	d100      	bne.n	801283c <_scanf_float+0x258>
 801283a:	e6f6      	b.n	801262a <_scanf_float+0x46>
 801283c:	e703      	b.n	8012646 <_scanf_float+0x62>
 801283e:	3d01      	subs	r5, #1
 8012840:	593b      	ldr	r3, [r7, r4]
 8012842:	0032      	movs	r2, r6
 8012844:	7829      	ldrb	r1, [r5, #0]
 8012846:	9802      	ldr	r0, [sp, #8]
 8012848:	4798      	blx	r3
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	3b01      	subs	r3, #1
 801284e:	613b      	str	r3, [r7, #16]
 8012850:	e707      	b.n	8012662 <_scanf_float+0x7e>
 8012852:	1e63      	subs	r3, r4, #1
 8012854:	2b06      	cmp	r3, #6
 8012856:	d80e      	bhi.n	8012876 <_scanf_float+0x292>
 8012858:	9503      	str	r5, [sp, #12]
 801285a:	2c02      	cmp	r4, #2
 801285c:	d920      	bls.n	80128a0 <_scanf_float+0x2bc>
 801285e:	1b63      	subs	r3, r4, r5
 8012860:	b2db      	uxtb	r3, r3
 8012862:	9306      	str	r3, [sp, #24]
 8012864:	9b03      	ldr	r3, [sp, #12]
 8012866:	9a06      	ldr	r2, [sp, #24]
 8012868:	189b      	adds	r3, r3, r2
 801286a:	b2db      	uxtb	r3, r3
 801286c:	2b03      	cmp	r3, #3
 801286e:	d827      	bhi.n	80128c0 <_scanf_float+0x2dc>
 8012870:	3c03      	subs	r4, #3
 8012872:	b2e4      	uxtb	r4, r4
 8012874:	1b2d      	subs	r5, r5, r4
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	05da      	lsls	r2, r3, #23
 801287a:	d552      	bpl.n	8012922 <_scanf_float+0x33e>
 801287c:	055b      	lsls	r3, r3, #21
 801287e:	d535      	bpl.n	80128ec <_scanf_float+0x308>
 8012880:	24be      	movs	r4, #190	; 0xbe
 8012882:	0064      	lsls	r4, r4, #1
 8012884:	9b04      	ldr	r3, [sp, #16]
 8012886:	429d      	cmp	r5, r3
 8012888:	d800      	bhi.n	801288c <_scanf_float+0x2a8>
 801288a:	e6ee      	b.n	801266a <_scanf_float+0x86>
 801288c:	3d01      	subs	r5, #1
 801288e:	593b      	ldr	r3, [r7, r4]
 8012890:	0032      	movs	r2, r6
 8012892:	7829      	ldrb	r1, [r5, #0]
 8012894:	9802      	ldr	r0, [sp, #8]
 8012896:	4798      	blx	r3
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	3b01      	subs	r3, #1
 801289c:	613b      	str	r3, [r7, #16]
 801289e:	e7f1      	b.n	8012884 <_scanf_float+0x2a0>
 80128a0:	24be      	movs	r4, #190	; 0xbe
 80128a2:	0064      	lsls	r4, r4, #1
 80128a4:	9b04      	ldr	r3, [sp, #16]
 80128a6:	429d      	cmp	r5, r3
 80128a8:	d800      	bhi.n	80128ac <_scanf_float+0x2c8>
 80128aa:	e6de      	b.n	801266a <_scanf_float+0x86>
 80128ac:	3d01      	subs	r5, #1
 80128ae:	593b      	ldr	r3, [r7, r4]
 80128b0:	0032      	movs	r2, r6
 80128b2:	7829      	ldrb	r1, [r5, #0]
 80128b4:	9802      	ldr	r0, [sp, #8]
 80128b6:	4798      	blx	r3
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	3b01      	subs	r3, #1
 80128bc:	613b      	str	r3, [r7, #16]
 80128be:	e7f1      	b.n	80128a4 <_scanf_float+0x2c0>
 80128c0:	9b03      	ldr	r3, [sp, #12]
 80128c2:	0032      	movs	r2, r6
 80128c4:	3b01      	subs	r3, #1
 80128c6:	7819      	ldrb	r1, [r3, #0]
 80128c8:	9303      	str	r3, [sp, #12]
 80128ca:	23be      	movs	r3, #190	; 0xbe
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	58fb      	ldr	r3, [r7, r3]
 80128d0:	9802      	ldr	r0, [sp, #8]
 80128d2:	4798      	blx	r3
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	3b01      	subs	r3, #1
 80128d8:	613b      	str	r3, [r7, #16]
 80128da:	e7c3      	b.n	8012864 <_scanf_float+0x280>
 80128dc:	fffffeff 	.word	0xfffffeff
 80128e0:	fffffe7f 	.word	0xfffffe7f
 80128e4:	fffff87f 	.word	0xfffff87f
 80128e8:	fffffd7f 	.word	0xfffffd7f
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	1e6c      	subs	r4, r5, #1
 80128f0:	7821      	ldrb	r1, [r4, #0]
 80128f2:	3b01      	subs	r3, #1
 80128f4:	613b      	str	r3, [r7, #16]
 80128f6:	2965      	cmp	r1, #101	; 0x65
 80128f8:	d00c      	beq.n	8012914 <_scanf_float+0x330>
 80128fa:	2945      	cmp	r1, #69	; 0x45
 80128fc:	d00a      	beq.n	8012914 <_scanf_float+0x330>
 80128fe:	23be      	movs	r3, #190	; 0xbe
 8012900:	005b      	lsls	r3, r3, #1
 8012902:	58fb      	ldr	r3, [r7, r3]
 8012904:	0032      	movs	r2, r6
 8012906:	9802      	ldr	r0, [sp, #8]
 8012908:	4798      	blx	r3
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	1eac      	subs	r4, r5, #2
 801290e:	3b01      	subs	r3, #1
 8012910:	7821      	ldrb	r1, [r4, #0]
 8012912:	613b      	str	r3, [r7, #16]
 8012914:	23be      	movs	r3, #190	; 0xbe
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	0032      	movs	r2, r6
 801291a:	58fb      	ldr	r3, [r7, r3]
 801291c:	9802      	ldr	r0, [sp, #8]
 801291e:	4798      	blx	r3
 8012920:	0025      	movs	r5, r4
 8012922:	683a      	ldr	r2, [r7, #0]
 8012924:	2310      	movs	r3, #16
 8012926:	0011      	movs	r1, r2
 8012928:	4019      	ands	r1, r3
 801292a:	9103      	str	r1, [sp, #12]
 801292c:	421a      	tst	r2, r3
 801292e:	d15b      	bne.n	80129e8 <_scanf_float+0x404>
 8012930:	22c0      	movs	r2, #192	; 0xc0
 8012932:	7029      	strb	r1, [r5, #0]
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	00d2      	lsls	r2, r2, #3
 8012938:	4013      	ands	r3, r2
 801293a:	2280      	movs	r2, #128	; 0x80
 801293c:	00d2      	lsls	r2, r2, #3
 801293e:	4293      	cmp	r3, r2
 8012940:	d11d      	bne.n	801297e <_scanf_float+0x39a>
 8012942:	9b05      	ldr	r3, [sp, #20]
 8012944:	9a01      	ldr	r2, [sp, #4]
 8012946:	9901      	ldr	r1, [sp, #4]
 8012948:	1a9a      	subs	r2, r3, r2
 801294a:	428b      	cmp	r3, r1
 801294c:	d124      	bne.n	8012998 <_scanf_float+0x3b4>
 801294e:	2200      	movs	r2, #0
 8012950:	9904      	ldr	r1, [sp, #16]
 8012952:	9802      	ldr	r0, [sp, #8]
 8012954:	f7ff f91c 	bl	8011b90 <_strtod_r>
 8012958:	9b07      	ldr	r3, [sp, #28]
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	0004      	movs	r4, r0
 801295e:	000d      	movs	r5, r1
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	0791      	lsls	r1, r2, #30
 8012964:	d525      	bpl.n	80129b2 <_scanf_float+0x3ce>
 8012966:	9907      	ldr	r1, [sp, #28]
 8012968:	1d1a      	adds	r2, r3, #4
 801296a:	600a      	str	r2, [r1, #0]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	601c      	str	r4, [r3, #0]
 8012970:	605d      	str	r5, [r3, #4]
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	3301      	adds	r3, #1
 8012976:	60fb      	str	r3, [r7, #12]
 8012978:	9803      	ldr	r0, [sp, #12]
 801297a:	b00b      	add	sp, #44	; 0x2c
 801297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801297e:	9b08      	ldr	r3, [sp, #32]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d0e4      	beq.n	801294e <_scanf_float+0x36a>
 8012984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012986:	9a03      	ldr	r2, [sp, #12]
 8012988:	1c59      	adds	r1, r3, #1
 801298a:	9802      	ldr	r0, [sp, #8]
 801298c:	230a      	movs	r3, #10
 801298e:	f7ff f99b 	bl	8011cc8 <_strtol_r>
 8012992:	9b08      	ldr	r3, [sp, #32]
 8012994:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012996:	1ac2      	subs	r2, r0, r3
 8012998:	003b      	movs	r3, r7
 801299a:	3370      	adds	r3, #112	; 0x70
 801299c:	33ff      	adds	r3, #255	; 0xff
 801299e:	429d      	cmp	r5, r3
 80129a0:	d302      	bcc.n	80129a8 <_scanf_float+0x3c4>
 80129a2:	003d      	movs	r5, r7
 80129a4:	356f      	adds	r5, #111	; 0x6f
 80129a6:	35ff      	adds	r5, #255	; 0xff
 80129a8:	0028      	movs	r0, r5
 80129aa:	4910      	ldr	r1, [pc, #64]	; (80129ec <_scanf_float+0x408>)
 80129ac:	f000 f8e6 	bl	8012b7c <siprintf>
 80129b0:	e7cd      	b.n	801294e <_scanf_float+0x36a>
 80129b2:	1d19      	adds	r1, r3, #4
 80129b4:	0752      	lsls	r2, r2, #29
 80129b6:	d502      	bpl.n	80129be <_scanf_float+0x3da>
 80129b8:	9a07      	ldr	r2, [sp, #28]
 80129ba:	6011      	str	r1, [r2, #0]
 80129bc:	e7d6      	b.n	801296c <_scanf_float+0x388>
 80129be:	9a07      	ldr	r2, [sp, #28]
 80129c0:	0020      	movs	r0, r4
 80129c2:	6011      	str	r1, [r2, #0]
 80129c4:	681e      	ldr	r6, [r3, #0]
 80129c6:	0022      	movs	r2, r4
 80129c8:	002b      	movs	r3, r5
 80129ca:	0029      	movs	r1, r5
 80129cc:	f7f0 fac6 	bl	8002f5c <__aeabi_dcmpun>
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d004      	beq.n	80129de <_scanf_float+0x3fa>
 80129d4:	4806      	ldr	r0, [pc, #24]	; (80129f0 <_scanf_float+0x40c>)
 80129d6:	f000 fb15 	bl	8013004 <nanf>
 80129da:	6030      	str	r0, [r6, #0]
 80129dc:	e7c9      	b.n	8012972 <_scanf_float+0x38e>
 80129de:	0020      	movs	r0, r4
 80129e0:	0029      	movs	r1, r5
 80129e2:	f7f0 fbad 	bl	8003140 <__aeabi_d2f>
 80129e6:	e7f8      	b.n	80129da <_scanf_float+0x3f6>
 80129e8:	2300      	movs	r3, #0
 80129ea:	e63f      	b.n	801266c <_scanf_float+0x88>
 80129ec:	080181d5 	.word	0x080181d5
 80129f0:	0801828e 	.word	0x0801828e

080129f4 <std>:
 80129f4:	2300      	movs	r3, #0
 80129f6:	b510      	push	{r4, lr}
 80129f8:	0004      	movs	r4, r0
 80129fa:	6003      	str	r3, [r0, #0]
 80129fc:	6043      	str	r3, [r0, #4]
 80129fe:	6083      	str	r3, [r0, #8]
 8012a00:	8181      	strh	r1, [r0, #12]
 8012a02:	6643      	str	r3, [r0, #100]	; 0x64
 8012a04:	81c2      	strh	r2, [r0, #14]
 8012a06:	6103      	str	r3, [r0, #16]
 8012a08:	6143      	str	r3, [r0, #20]
 8012a0a:	6183      	str	r3, [r0, #24]
 8012a0c:	0019      	movs	r1, r3
 8012a0e:	2208      	movs	r2, #8
 8012a10:	305c      	adds	r0, #92	; 0x5c
 8012a12:	f000 f91f 	bl	8012c54 <memset>
 8012a16:	4b0b      	ldr	r3, [pc, #44]	; (8012a44 <std+0x50>)
 8012a18:	6224      	str	r4, [r4, #32]
 8012a1a:	6263      	str	r3, [r4, #36]	; 0x24
 8012a1c:	4b0a      	ldr	r3, [pc, #40]	; (8012a48 <std+0x54>)
 8012a1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a20:	4b0a      	ldr	r3, [pc, #40]	; (8012a4c <std+0x58>)
 8012a22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a24:	4b0a      	ldr	r3, [pc, #40]	; (8012a50 <std+0x5c>)
 8012a26:	6323      	str	r3, [r4, #48]	; 0x30
 8012a28:	4b0a      	ldr	r3, [pc, #40]	; (8012a54 <std+0x60>)
 8012a2a:	429c      	cmp	r4, r3
 8012a2c:	d005      	beq.n	8012a3a <std+0x46>
 8012a2e:	4b0a      	ldr	r3, [pc, #40]	; (8012a58 <std+0x64>)
 8012a30:	429c      	cmp	r4, r3
 8012a32:	d002      	beq.n	8012a3a <std+0x46>
 8012a34:	4b09      	ldr	r3, [pc, #36]	; (8012a5c <std+0x68>)
 8012a36:	429c      	cmp	r4, r3
 8012a38:	d103      	bne.n	8012a42 <std+0x4e>
 8012a3a:	0020      	movs	r0, r4
 8012a3c:	3058      	adds	r0, #88	; 0x58
 8012a3e:	f000 fabb 	bl	8012fb8 <__retarget_lock_init_recursive>
 8012a42:	bd10      	pop	{r4, pc}
 8012a44:	08012bbd 	.word	0x08012bbd
 8012a48:	08012be5 	.word	0x08012be5
 8012a4c:	08012c1d 	.word	0x08012c1d
 8012a50:	08012c49 	.word	0x08012c49
 8012a54:	2000573c 	.word	0x2000573c
 8012a58:	200057a4 	.word	0x200057a4
 8012a5c:	2000580c 	.word	0x2000580c

08012a60 <stdio_exit_handler>:
 8012a60:	b510      	push	{r4, lr}
 8012a62:	4a03      	ldr	r2, [pc, #12]	; (8012a70 <stdio_exit_handler+0x10>)
 8012a64:	4903      	ldr	r1, [pc, #12]	; (8012a74 <stdio_exit_handler+0x14>)
 8012a66:	4804      	ldr	r0, [pc, #16]	; (8012a78 <stdio_exit_handler+0x18>)
 8012a68:	f000 f86c 	bl	8012b44 <_fwalk_sglue>
 8012a6c:	bd10      	pop	{r4, pc}
 8012a6e:	46c0      	nop			; (mov r8, r8)
 8012a70:	20000104 	.word	0x20000104
 8012a74:	0801525d 	.word	0x0801525d
 8012a78:	2000027c 	.word	0x2000027c

08012a7c <cleanup_stdio>:
 8012a7c:	6841      	ldr	r1, [r0, #4]
 8012a7e:	4b0b      	ldr	r3, [pc, #44]	; (8012aac <cleanup_stdio+0x30>)
 8012a80:	b510      	push	{r4, lr}
 8012a82:	0004      	movs	r4, r0
 8012a84:	4299      	cmp	r1, r3
 8012a86:	d001      	beq.n	8012a8c <cleanup_stdio+0x10>
 8012a88:	f002 fbe8 	bl	801525c <_fflush_r>
 8012a8c:	68a1      	ldr	r1, [r4, #8]
 8012a8e:	4b08      	ldr	r3, [pc, #32]	; (8012ab0 <cleanup_stdio+0x34>)
 8012a90:	4299      	cmp	r1, r3
 8012a92:	d002      	beq.n	8012a9a <cleanup_stdio+0x1e>
 8012a94:	0020      	movs	r0, r4
 8012a96:	f002 fbe1 	bl	801525c <_fflush_r>
 8012a9a:	68e1      	ldr	r1, [r4, #12]
 8012a9c:	4b05      	ldr	r3, [pc, #20]	; (8012ab4 <cleanup_stdio+0x38>)
 8012a9e:	4299      	cmp	r1, r3
 8012aa0:	d002      	beq.n	8012aa8 <cleanup_stdio+0x2c>
 8012aa2:	0020      	movs	r0, r4
 8012aa4:	f002 fbda 	bl	801525c <_fflush_r>
 8012aa8:	bd10      	pop	{r4, pc}
 8012aaa:	46c0      	nop			; (mov r8, r8)
 8012aac:	2000573c 	.word	0x2000573c
 8012ab0:	200057a4 	.word	0x200057a4
 8012ab4:	2000580c 	.word	0x2000580c

08012ab8 <global_stdio_init.part.0>:
 8012ab8:	b510      	push	{r4, lr}
 8012aba:	4b09      	ldr	r3, [pc, #36]	; (8012ae0 <global_stdio_init.part.0+0x28>)
 8012abc:	4a09      	ldr	r2, [pc, #36]	; (8012ae4 <global_stdio_init.part.0+0x2c>)
 8012abe:	2104      	movs	r1, #4
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	4809      	ldr	r0, [pc, #36]	; (8012ae8 <global_stdio_init.part.0+0x30>)
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f7ff ff95 	bl	80129f4 <std>
 8012aca:	2201      	movs	r2, #1
 8012acc:	2109      	movs	r1, #9
 8012ace:	4807      	ldr	r0, [pc, #28]	; (8012aec <global_stdio_init.part.0+0x34>)
 8012ad0:	f7ff ff90 	bl	80129f4 <std>
 8012ad4:	2202      	movs	r2, #2
 8012ad6:	2112      	movs	r1, #18
 8012ad8:	4805      	ldr	r0, [pc, #20]	; (8012af0 <global_stdio_init.part.0+0x38>)
 8012ada:	f7ff ff8b 	bl	80129f4 <std>
 8012ade:	bd10      	pop	{r4, pc}
 8012ae0:	20005874 	.word	0x20005874
 8012ae4:	08012a61 	.word	0x08012a61
 8012ae8:	2000573c 	.word	0x2000573c
 8012aec:	200057a4 	.word	0x200057a4
 8012af0:	2000580c 	.word	0x2000580c

08012af4 <__sfp_lock_acquire>:
 8012af4:	b510      	push	{r4, lr}
 8012af6:	4802      	ldr	r0, [pc, #8]	; (8012b00 <__sfp_lock_acquire+0xc>)
 8012af8:	f000 fa5f 	bl	8012fba <__retarget_lock_acquire_recursive>
 8012afc:	bd10      	pop	{r4, pc}
 8012afe:	46c0      	nop			; (mov r8, r8)
 8012b00:	2000587d 	.word	0x2000587d

08012b04 <__sfp_lock_release>:
 8012b04:	b510      	push	{r4, lr}
 8012b06:	4802      	ldr	r0, [pc, #8]	; (8012b10 <__sfp_lock_release+0xc>)
 8012b08:	f000 fa58 	bl	8012fbc <__retarget_lock_release_recursive>
 8012b0c:	bd10      	pop	{r4, pc}
 8012b0e:	46c0      	nop			; (mov r8, r8)
 8012b10:	2000587d 	.word	0x2000587d

08012b14 <__sinit>:
 8012b14:	b510      	push	{r4, lr}
 8012b16:	0004      	movs	r4, r0
 8012b18:	f7ff ffec 	bl	8012af4 <__sfp_lock_acquire>
 8012b1c:	6a23      	ldr	r3, [r4, #32]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d002      	beq.n	8012b28 <__sinit+0x14>
 8012b22:	f7ff ffef 	bl	8012b04 <__sfp_lock_release>
 8012b26:	bd10      	pop	{r4, pc}
 8012b28:	4b04      	ldr	r3, [pc, #16]	; (8012b3c <__sinit+0x28>)
 8012b2a:	6223      	str	r3, [r4, #32]
 8012b2c:	4b04      	ldr	r3, [pc, #16]	; (8012b40 <__sinit+0x2c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d1f6      	bne.n	8012b22 <__sinit+0xe>
 8012b34:	f7ff ffc0 	bl	8012ab8 <global_stdio_init.part.0>
 8012b38:	e7f3      	b.n	8012b22 <__sinit+0xe>
 8012b3a:	46c0      	nop			; (mov r8, r8)
 8012b3c:	08012a7d 	.word	0x08012a7d
 8012b40:	20005874 	.word	0x20005874

08012b44 <_fwalk_sglue>:
 8012b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b46:	0014      	movs	r4, r2
 8012b48:	2600      	movs	r6, #0
 8012b4a:	9000      	str	r0, [sp, #0]
 8012b4c:	9101      	str	r1, [sp, #4]
 8012b4e:	68a5      	ldr	r5, [r4, #8]
 8012b50:	6867      	ldr	r7, [r4, #4]
 8012b52:	3f01      	subs	r7, #1
 8012b54:	d504      	bpl.n	8012b60 <_fwalk_sglue+0x1c>
 8012b56:	6824      	ldr	r4, [r4, #0]
 8012b58:	2c00      	cmp	r4, #0
 8012b5a:	d1f8      	bne.n	8012b4e <_fwalk_sglue+0xa>
 8012b5c:	0030      	movs	r0, r6
 8012b5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012b60:	89ab      	ldrh	r3, [r5, #12]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	d908      	bls.n	8012b78 <_fwalk_sglue+0x34>
 8012b66:	220e      	movs	r2, #14
 8012b68:	5eab      	ldrsh	r3, [r5, r2]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	d004      	beq.n	8012b78 <_fwalk_sglue+0x34>
 8012b6e:	0029      	movs	r1, r5
 8012b70:	9800      	ldr	r0, [sp, #0]
 8012b72:	9b01      	ldr	r3, [sp, #4]
 8012b74:	4798      	blx	r3
 8012b76:	4306      	orrs	r6, r0
 8012b78:	3568      	adds	r5, #104	; 0x68
 8012b7a:	e7ea      	b.n	8012b52 <_fwalk_sglue+0xe>

08012b7c <siprintf>:
 8012b7c:	b40e      	push	{r1, r2, r3}
 8012b7e:	b500      	push	{lr}
 8012b80:	490b      	ldr	r1, [pc, #44]	; (8012bb0 <siprintf+0x34>)
 8012b82:	b09c      	sub	sp, #112	; 0x70
 8012b84:	ab1d      	add	r3, sp, #116	; 0x74
 8012b86:	9002      	str	r0, [sp, #8]
 8012b88:	9006      	str	r0, [sp, #24]
 8012b8a:	9107      	str	r1, [sp, #28]
 8012b8c:	9104      	str	r1, [sp, #16]
 8012b8e:	4809      	ldr	r0, [pc, #36]	; (8012bb4 <siprintf+0x38>)
 8012b90:	4909      	ldr	r1, [pc, #36]	; (8012bb8 <siprintf+0x3c>)
 8012b92:	cb04      	ldmia	r3!, {r2}
 8012b94:	9105      	str	r1, [sp, #20]
 8012b96:	6800      	ldr	r0, [r0, #0]
 8012b98:	a902      	add	r1, sp, #8
 8012b9a:	9301      	str	r3, [sp, #4]
 8012b9c:	f002 f9d4 	bl	8014f48 <_svfiprintf_r>
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	9b02      	ldr	r3, [sp, #8]
 8012ba4:	701a      	strb	r2, [r3, #0]
 8012ba6:	b01c      	add	sp, #112	; 0x70
 8012ba8:	bc08      	pop	{r3}
 8012baa:	b003      	add	sp, #12
 8012bac:	4718      	bx	r3
 8012bae:	46c0      	nop			; (mov r8, r8)
 8012bb0:	7fffffff 	.word	0x7fffffff
 8012bb4:	200002c8 	.word	0x200002c8
 8012bb8:	ffff0208 	.word	0xffff0208

08012bbc <__sread>:
 8012bbc:	b570      	push	{r4, r5, r6, lr}
 8012bbe:	000c      	movs	r4, r1
 8012bc0:	250e      	movs	r5, #14
 8012bc2:	5f49      	ldrsh	r1, [r1, r5]
 8012bc4:	f000 f994 	bl	8012ef0 <_read_r>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	db03      	blt.n	8012bd4 <__sread+0x18>
 8012bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012bce:	181b      	adds	r3, r3, r0
 8012bd0:	6563      	str	r3, [r4, #84]	; 0x54
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	89a3      	ldrh	r3, [r4, #12]
 8012bd6:	4a02      	ldr	r2, [pc, #8]	; (8012be0 <__sread+0x24>)
 8012bd8:	4013      	ands	r3, r2
 8012bda:	81a3      	strh	r3, [r4, #12]
 8012bdc:	e7f9      	b.n	8012bd2 <__sread+0x16>
 8012bde:	46c0      	nop			; (mov r8, r8)
 8012be0:	ffffefff 	.word	0xffffefff

08012be4 <__swrite>:
 8012be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012be6:	001f      	movs	r7, r3
 8012be8:	898b      	ldrh	r3, [r1, #12]
 8012bea:	0005      	movs	r5, r0
 8012bec:	000c      	movs	r4, r1
 8012bee:	0016      	movs	r6, r2
 8012bf0:	05db      	lsls	r3, r3, #23
 8012bf2:	d505      	bpl.n	8012c00 <__swrite+0x1c>
 8012bf4:	230e      	movs	r3, #14
 8012bf6:	5ec9      	ldrsh	r1, [r1, r3]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	2302      	movs	r3, #2
 8012bfc:	f000 f964 	bl	8012ec8 <_lseek_r>
 8012c00:	89a3      	ldrh	r3, [r4, #12]
 8012c02:	4a05      	ldr	r2, [pc, #20]	; (8012c18 <__swrite+0x34>)
 8012c04:	0028      	movs	r0, r5
 8012c06:	4013      	ands	r3, r2
 8012c08:	81a3      	strh	r3, [r4, #12]
 8012c0a:	0032      	movs	r2, r6
 8012c0c:	230e      	movs	r3, #14
 8012c0e:	5ee1      	ldrsh	r1, [r4, r3]
 8012c10:	003b      	movs	r3, r7
 8012c12:	f000 f993 	bl	8012f3c <_write_r>
 8012c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c18:	ffffefff 	.word	0xffffefff

08012c1c <__sseek>:
 8012c1c:	b570      	push	{r4, r5, r6, lr}
 8012c1e:	000c      	movs	r4, r1
 8012c20:	250e      	movs	r5, #14
 8012c22:	5f49      	ldrsh	r1, [r1, r5]
 8012c24:	f000 f950 	bl	8012ec8 <_lseek_r>
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	1c42      	adds	r2, r0, #1
 8012c2c:	d103      	bne.n	8012c36 <__sseek+0x1a>
 8012c2e:	4a05      	ldr	r2, [pc, #20]	; (8012c44 <__sseek+0x28>)
 8012c30:	4013      	ands	r3, r2
 8012c32:	81a3      	strh	r3, [r4, #12]
 8012c34:	bd70      	pop	{r4, r5, r6, pc}
 8012c36:	2280      	movs	r2, #128	; 0x80
 8012c38:	0152      	lsls	r2, r2, #5
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	81a3      	strh	r3, [r4, #12]
 8012c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8012c40:	e7f8      	b.n	8012c34 <__sseek+0x18>
 8012c42:	46c0      	nop			; (mov r8, r8)
 8012c44:	ffffefff 	.word	0xffffefff

08012c48 <__sclose>:
 8012c48:	b510      	push	{r4, lr}
 8012c4a:	230e      	movs	r3, #14
 8012c4c:	5ec9      	ldrsh	r1, [r1, r3]
 8012c4e:	f000 f8cb 	bl	8012de8 <_close_r>
 8012c52:	bd10      	pop	{r4, pc}

08012c54 <memset>:
 8012c54:	0003      	movs	r3, r0
 8012c56:	1882      	adds	r2, r0, r2
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d100      	bne.n	8012c5e <memset+0xa>
 8012c5c:	4770      	bx	lr
 8012c5e:	7019      	strb	r1, [r3, #0]
 8012c60:	3301      	adds	r3, #1
 8012c62:	e7f9      	b.n	8012c58 <memset+0x4>

08012c64 <strcat>:
 8012c64:	0002      	movs	r2, r0
 8012c66:	b510      	push	{r4, lr}
 8012c68:	7813      	ldrb	r3, [r2, #0]
 8012c6a:	0014      	movs	r4, r2
 8012c6c:	3201      	adds	r2, #1
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d1fa      	bne.n	8012c68 <strcat+0x4>
 8012c72:	5cca      	ldrb	r2, [r1, r3]
 8012c74:	54e2      	strb	r2, [r4, r3]
 8012c76:	3301      	adds	r3, #1
 8012c78:	2a00      	cmp	r2, #0
 8012c7a:	d1fa      	bne.n	8012c72 <strcat+0xe>
 8012c7c:	bd10      	pop	{r4, pc}

08012c7e <strchr>:
 8012c7e:	b2c9      	uxtb	r1, r1
 8012c80:	7803      	ldrb	r3, [r0, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d004      	beq.n	8012c90 <strchr+0x12>
 8012c86:	428b      	cmp	r3, r1
 8012c88:	d100      	bne.n	8012c8c <strchr+0xe>
 8012c8a:	4770      	bx	lr
 8012c8c:	3001      	adds	r0, #1
 8012c8e:	e7f7      	b.n	8012c80 <strchr+0x2>
 8012c90:	424b      	negs	r3, r1
 8012c92:	4159      	adcs	r1, r3
 8012c94:	4249      	negs	r1, r1
 8012c96:	4008      	ands	r0, r1
 8012c98:	e7f7      	b.n	8012c8a <strchr+0xc>

08012c9a <strncmp>:
 8012c9a:	b530      	push	{r4, r5, lr}
 8012c9c:	0005      	movs	r5, r0
 8012c9e:	1e10      	subs	r0, r2, #0
 8012ca0:	d00b      	beq.n	8012cba <strncmp+0x20>
 8012ca2:	2400      	movs	r4, #0
 8012ca4:	3a01      	subs	r2, #1
 8012ca6:	5d2b      	ldrb	r3, [r5, r4]
 8012ca8:	5d08      	ldrb	r0, [r1, r4]
 8012caa:	4283      	cmp	r3, r0
 8012cac:	d104      	bne.n	8012cb8 <strncmp+0x1e>
 8012cae:	42a2      	cmp	r2, r4
 8012cb0:	d002      	beq.n	8012cb8 <strncmp+0x1e>
 8012cb2:	3401      	adds	r4, #1
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d1f6      	bne.n	8012ca6 <strncmp+0xc>
 8012cb8:	1a18      	subs	r0, r3, r0
 8012cba:	bd30      	pop	{r4, r5, pc}

08012cbc <strncpy>:
 8012cbc:	0003      	movs	r3, r0
 8012cbe:	b530      	push	{r4, r5, lr}
 8012cc0:	001d      	movs	r5, r3
 8012cc2:	2a00      	cmp	r2, #0
 8012cc4:	d006      	beq.n	8012cd4 <strncpy+0x18>
 8012cc6:	780c      	ldrb	r4, [r1, #0]
 8012cc8:	3a01      	subs	r2, #1
 8012cca:	3301      	adds	r3, #1
 8012ccc:	702c      	strb	r4, [r5, #0]
 8012cce:	3101      	adds	r1, #1
 8012cd0:	2c00      	cmp	r4, #0
 8012cd2:	d1f5      	bne.n	8012cc0 <strncpy+0x4>
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	189a      	adds	r2, r3, r2
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d100      	bne.n	8012cde <strncpy+0x22>
 8012cdc:	bd30      	pop	{r4, r5, pc}
 8012cde:	7019      	strb	r1, [r3, #0]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	e7f9      	b.n	8012cd8 <strncpy+0x1c>

08012ce4 <strtok>:
 8012ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce6:	4b16      	ldr	r3, [pc, #88]	; (8012d40 <strtok+0x5c>)
 8012ce8:	0005      	movs	r5, r0
 8012cea:	681f      	ldr	r7, [r3, #0]
 8012cec:	000e      	movs	r6, r1
 8012cee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8012cf0:	2c00      	cmp	r4, #0
 8012cf2:	d11d      	bne.n	8012d30 <strtok+0x4c>
 8012cf4:	2050      	movs	r0, #80	; 0x50
 8012cf6:	f7fe f86b 	bl	8010dd0 <malloc>
 8012cfa:	1e02      	subs	r2, r0, #0
 8012cfc:	6478      	str	r0, [r7, #68]	; 0x44
 8012cfe:	d104      	bne.n	8012d0a <strtok+0x26>
 8012d00:	215b      	movs	r1, #91	; 0x5b
 8012d02:	4b10      	ldr	r3, [pc, #64]	; (8012d44 <strtok+0x60>)
 8012d04:	4810      	ldr	r0, [pc, #64]	; (8012d48 <strtok+0x64>)
 8012d06:	f000 f981 	bl	801300c <__assert_func>
 8012d0a:	6004      	str	r4, [r0, #0]
 8012d0c:	6044      	str	r4, [r0, #4]
 8012d0e:	6084      	str	r4, [r0, #8]
 8012d10:	60c4      	str	r4, [r0, #12]
 8012d12:	6104      	str	r4, [r0, #16]
 8012d14:	6144      	str	r4, [r0, #20]
 8012d16:	6184      	str	r4, [r0, #24]
 8012d18:	6284      	str	r4, [r0, #40]	; 0x28
 8012d1a:	62c4      	str	r4, [r0, #44]	; 0x2c
 8012d1c:	6304      	str	r4, [r0, #48]	; 0x30
 8012d1e:	6344      	str	r4, [r0, #52]	; 0x34
 8012d20:	6384      	str	r4, [r0, #56]	; 0x38
 8012d22:	63c4      	str	r4, [r0, #60]	; 0x3c
 8012d24:	6404      	str	r4, [r0, #64]	; 0x40
 8012d26:	6444      	str	r4, [r0, #68]	; 0x44
 8012d28:	6484      	str	r4, [r0, #72]	; 0x48
 8012d2a:	64c4      	str	r4, [r0, #76]	; 0x4c
 8012d2c:	7704      	strb	r4, [r0, #28]
 8012d2e:	6244      	str	r4, [r0, #36]	; 0x24
 8012d30:	0031      	movs	r1, r6
 8012d32:	0028      	movs	r0, r5
 8012d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d36:	2301      	movs	r3, #1
 8012d38:	f000 f808 	bl	8012d4c <__strtok_r>
 8012d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d3e:	46c0      	nop			; (mov r8, r8)
 8012d40:	200002c8 	.word	0x200002c8
 8012d44:	080181da 	.word	0x080181da
 8012d48:	080181f1 	.word	0x080181f1

08012d4c <__strtok_r>:
 8012d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d102      	bne.n	8012d58 <__strtok_r+0xc>
 8012d52:	6810      	ldr	r0, [r2, #0]
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d013      	beq.n	8012d80 <__strtok_r+0x34>
 8012d58:	0004      	movs	r4, r0
 8012d5a:	0020      	movs	r0, r4
 8012d5c:	000e      	movs	r6, r1
 8012d5e:	7805      	ldrb	r5, [r0, #0]
 8012d60:	3401      	adds	r4, #1
 8012d62:	7837      	ldrb	r7, [r6, #0]
 8012d64:	2f00      	cmp	r7, #0
 8012d66:	d104      	bne.n	8012d72 <__strtok_r+0x26>
 8012d68:	2d00      	cmp	r5, #0
 8012d6a:	d10f      	bne.n	8012d8c <__strtok_r+0x40>
 8012d6c:	0028      	movs	r0, r5
 8012d6e:	6015      	str	r5, [r2, #0]
 8012d70:	e006      	b.n	8012d80 <__strtok_r+0x34>
 8012d72:	3601      	adds	r6, #1
 8012d74:	42bd      	cmp	r5, r7
 8012d76:	d1f4      	bne.n	8012d62 <__strtok_r+0x16>
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d1ee      	bne.n	8012d5a <__strtok_r+0xe>
 8012d7c:	6014      	str	r4, [r2, #0]
 8012d7e:	7003      	strb	r3, [r0, #0]
 8012d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d82:	002f      	movs	r7, r5
 8012d84:	e00f      	b.n	8012da6 <__strtok_r+0x5a>
 8012d86:	3301      	adds	r3, #1
 8012d88:	2e00      	cmp	r6, #0
 8012d8a:	d104      	bne.n	8012d96 <__strtok_r+0x4a>
 8012d8c:	0023      	movs	r3, r4
 8012d8e:	3401      	adds	r4, #1
 8012d90:	781d      	ldrb	r5, [r3, #0]
 8012d92:	0027      	movs	r7, r4
 8012d94:	000b      	movs	r3, r1
 8012d96:	781e      	ldrb	r6, [r3, #0]
 8012d98:	42b5      	cmp	r5, r6
 8012d9a:	d1f4      	bne.n	8012d86 <__strtok_r+0x3a>
 8012d9c:	2d00      	cmp	r5, #0
 8012d9e:	d0f0      	beq.n	8012d82 <__strtok_r+0x36>
 8012da0:	2300      	movs	r3, #0
 8012da2:	3c01      	subs	r4, #1
 8012da4:	7023      	strb	r3, [r4, #0]
 8012da6:	6017      	str	r7, [r2, #0]
 8012da8:	e7ea      	b.n	8012d80 <__strtok_r+0x34>

08012daa <strtok_r>:
 8012daa:	b510      	push	{r4, lr}
 8012dac:	2301      	movs	r3, #1
 8012dae:	f7ff ffcd 	bl	8012d4c <__strtok_r>
 8012db2:	bd10      	pop	{r4, pc}

08012db4 <strstr>:
 8012db4:	780a      	ldrb	r2, [r1, #0]
 8012db6:	b530      	push	{r4, r5, lr}
 8012db8:	2a00      	cmp	r2, #0
 8012dba:	d10c      	bne.n	8012dd6 <strstr+0x22>
 8012dbc:	bd30      	pop	{r4, r5, pc}
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d108      	bne.n	8012dd4 <strstr+0x20>
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	5ccc      	ldrb	r4, [r1, r3]
 8012dc6:	2c00      	cmp	r4, #0
 8012dc8:	d0f8      	beq.n	8012dbc <strstr+0x8>
 8012dca:	5cc5      	ldrb	r5, [r0, r3]
 8012dcc:	42a5      	cmp	r5, r4
 8012dce:	d101      	bne.n	8012dd4 <strstr+0x20>
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	e7f7      	b.n	8012dc4 <strstr+0x10>
 8012dd4:	3001      	adds	r0, #1
 8012dd6:	7803      	ldrb	r3, [r0, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d1f0      	bne.n	8012dbe <strstr+0xa>
 8012ddc:	0018      	movs	r0, r3
 8012dde:	e7ed      	b.n	8012dbc <strstr+0x8>

08012de0 <_localeconv_r>:
 8012de0:	4800      	ldr	r0, [pc, #0]	; (8012de4 <_localeconv_r+0x4>)
 8012de2:	4770      	bx	lr
 8012de4:	20000200 	.word	0x20000200

08012de8 <_close_r>:
 8012de8:	2300      	movs	r3, #0
 8012dea:	b570      	push	{r4, r5, r6, lr}
 8012dec:	4d06      	ldr	r5, [pc, #24]	; (8012e08 <_close_r+0x20>)
 8012dee:	0004      	movs	r4, r0
 8012df0:	0008      	movs	r0, r1
 8012df2:	602b      	str	r3, [r5, #0]
 8012df4:	f7f5 fd31 	bl	800885a <_close>
 8012df8:	1c43      	adds	r3, r0, #1
 8012dfa:	d103      	bne.n	8012e04 <_close_r+0x1c>
 8012dfc:	682b      	ldr	r3, [r5, #0]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d000      	beq.n	8012e04 <_close_r+0x1c>
 8012e02:	6023      	str	r3, [r4, #0]
 8012e04:	bd70      	pop	{r4, r5, r6, pc}
 8012e06:	46c0      	nop			; (mov r8, r8)
 8012e08:	20005878 	.word	0x20005878

08012e0c <_reclaim_reent>:
 8012e0c:	4b2d      	ldr	r3, [pc, #180]	; (8012ec4 <_reclaim_reent+0xb8>)
 8012e0e:	b570      	push	{r4, r5, r6, lr}
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	0004      	movs	r4, r0
 8012e14:	4283      	cmp	r3, r0
 8012e16:	d042      	beq.n	8012e9e <_reclaim_reent+0x92>
 8012e18:	69c3      	ldr	r3, [r0, #28]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00a      	beq.n	8012e34 <_reclaim_reent+0x28>
 8012e1e:	2500      	movs	r5, #0
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	42ab      	cmp	r3, r5
 8012e24:	d140      	bne.n	8012ea8 <_reclaim_reent+0x9c>
 8012e26:	69e3      	ldr	r3, [r4, #28]
 8012e28:	6819      	ldr	r1, [r3, #0]
 8012e2a:	2900      	cmp	r1, #0
 8012e2c:	d002      	beq.n	8012e34 <_reclaim_reent+0x28>
 8012e2e:	0020      	movs	r0, r4
 8012e30:	f000 ffa8 	bl	8013d84 <_free_r>
 8012e34:	6961      	ldr	r1, [r4, #20]
 8012e36:	2900      	cmp	r1, #0
 8012e38:	d002      	beq.n	8012e40 <_reclaim_reent+0x34>
 8012e3a:	0020      	movs	r0, r4
 8012e3c:	f000 ffa2 	bl	8013d84 <_free_r>
 8012e40:	69e1      	ldr	r1, [r4, #28]
 8012e42:	2900      	cmp	r1, #0
 8012e44:	d002      	beq.n	8012e4c <_reclaim_reent+0x40>
 8012e46:	0020      	movs	r0, r4
 8012e48:	f000 ff9c 	bl	8013d84 <_free_r>
 8012e4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012e4e:	2900      	cmp	r1, #0
 8012e50:	d002      	beq.n	8012e58 <_reclaim_reent+0x4c>
 8012e52:	0020      	movs	r0, r4
 8012e54:	f000 ff96 	bl	8013d84 <_free_r>
 8012e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e5a:	2900      	cmp	r1, #0
 8012e5c:	d002      	beq.n	8012e64 <_reclaim_reent+0x58>
 8012e5e:	0020      	movs	r0, r4
 8012e60:	f000 ff90 	bl	8013d84 <_free_r>
 8012e64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012e66:	2900      	cmp	r1, #0
 8012e68:	d002      	beq.n	8012e70 <_reclaim_reent+0x64>
 8012e6a:	0020      	movs	r0, r4
 8012e6c:	f000 ff8a 	bl	8013d84 <_free_r>
 8012e70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012e72:	2900      	cmp	r1, #0
 8012e74:	d002      	beq.n	8012e7c <_reclaim_reent+0x70>
 8012e76:	0020      	movs	r0, r4
 8012e78:	f000 ff84 	bl	8013d84 <_free_r>
 8012e7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012e7e:	2900      	cmp	r1, #0
 8012e80:	d002      	beq.n	8012e88 <_reclaim_reent+0x7c>
 8012e82:	0020      	movs	r0, r4
 8012e84:	f000 ff7e 	bl	8013d84 <_free_r>
 8012e88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012e8a:	2900      	cmp	r1, #0
 8012e8c:	d002      	beq.n	8012e94 <_reclaim_reent+0x88>
 8012e8e:	0020      	movs	r0, r4
 8012e90:	f000 ff78 	bl	8013d84 <_free_r>
 8012e94:	6a23      	ldr	r3, [r4, #32]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d001      	beq.n	8012e9e <_reclaim_reent+0x92>
 8012e9a:	0020      	movs	r0, r4
 8012e9c:	4798      	blx	r3
 8012e9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ea0:	5949      	ldr	r1, [r1, r5]
 8012ea2:	2900      	cmp	r1, #0
 8012ea4:	d108      	bne.n	8012eb8 <_reclaim_reent+0xac>
 8012ea6:	3504      	adds	r5, #4
 8012ea8:	69e3      	ldr	r3, [r4, #28]
 8012eaa:	68d9      	ldr	r1, [r3, #12]
 8012eac:	2d80      	cmp	r5, #128	; 0x80
 8012eae:	d1f7      	bne.n	8012ea0 <_reclaim_reent+0x94>
 8012eb0:	0020      	movs	r0, r4
 8012eb2:	f000 ff67 	bl	8013d84 <_free_r>
 8012eb6:	e7b6      	b.n	8012e26 <_reclaim_reent+0x1a>
 8012eb8:	680e      	ldr	r6, [r1, #0]
 8012eba:	0020      	movs	r0, r4
 8012ebc:	f000 ff62 	bl	8013d84 <_free_r>
 8012ec0:	0031      	movs	r1, r6
 8012ec2:	e7ee      	b.n	8012ea2 <_reclaim_reent+0x96>
 8012ec4:	200002c8 	.word	0x200002c8

08012ec8 <_lseek_r>:
 8012ec8:	b570      	push	{r4, r5, r6, lr}
 8012eca:	0004      	movs	r4, r0
 8012ecc:	0008      	movs	r0, r1
 8012ece:	0011      	movs	r1, r2
 8012ed0:	001a      	movs	r2, r3
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	4d05      	ldr	r5, [pc, #20]	; (8012eec <_lseek_r+0x24>)
 8012ed6:	602b      	str	r3, [r5, #0]
 8012ed8:	f7f5 fce0 	bl	800889c <_lseek>
 8012edc:	1c43      	adds	r3, r0, #1
 8012ede:	d103      	bne.n	8012ee8 <_lseek_r+0x20>
 8012ee0:	682b      	ldr	r3, [r5, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d000      	beq.n	8012ee8 <_lseek_r+0x20>
 8012ee6:	6023      	str	r3, [r4, #0]
 8012ee8:	bd70      	pop	{r4, r5, r6, pc}
 8012eea:	46c0      	nop			; (mov r8, r8)
 8012eec:	20005878 	.word	0x20005878

08012ef0 <_read_r>:
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	0004      	movs	r4, r0
 8012ef4:	0008      	movs	r0, r1
 8012ef6:	0011      	movs	r1, r2
 8012ef8:	001a      	movs	r2, r3
 8012efa:	2300      	movs	r3, #0
 8012efc:	4d05      	ldr	r5, [pc, #20]	; (8012f14 <_read_r+0x24>)
 8012efe:	602b      	str	r3, [r5, #0]
 8012f00:	f7f5 fc72 	bl	80087e8 <_read>
 8012f04:	1c43      	adds	r3, r0, #1
 8012f06:	d103      	bne.n	8012f10 <_read_r+0x20>
 8012f08:	682b      	ldr	r3, [r5, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d000      	beq.n	8012f10 <_read_r+0x20>
 8012f0e:	6023      	str	r3, [r4, #0]
 8012f10:	bd70      	pop	{r4, r5, r6, pc}
 8012f12:	46c0      	nop			; (mov r8, r8)
 8012f14:	20005878 	.word	0x20005878

08012f18 <_sbrk_r>:
 8012f18:	2300      	movs	r3, #0
 8012f1a:	b570      	push	{r4, r5, r6, lr}
 8012f1c:	4d06      	ldr	r5, [pc, #24]	; (8012f38 <_sbrk_r+0x20>)
 8012f1e:	0004      	movs	r4, r0
 8012f20:	0008      	movs	r0, r1
 8012f22:	602b      	str	r3, [r5, #0]
 8012f24:	f7f5 fcc6 	bl	80088b4 <_sbrk>
 8012f28:	1c43      	adds	r3, r0, #1
 8012f2a:	d103      	bne.n	8012f34 <_sbrk_r+0x1c>
 8012f2c:	682b      	ldr	r3, [r5, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d000      	beq.n	8012f34 <_sbrk_r+0x1c>
 8012f32:	6023      	str	r3, [r4, #0]
 8012f34:	bd70      	pop	{r4, r5, r6, pc}
 8012f36:	46c0      	nop			; (mov r8, r8)
 8012f38:	20005878 	.word	0x20005878

08012f3c <_write_r>:
 8012f3c:	b570      	push	{r4, r5, r6, lr}
 8012f3e:	0004      	movs	r4, r0
 8012f40:	0008      	movs	r0, r1
 8012f42:	0011      	movs	r1, r2
 8012f44:	001a      	movs	r2, r3
 8012f46:	2300      	movs	r3, #0
 8012f48:	4d05      	ldr	r5, [pc, #20]	; (8012f60 <_write_r+0x24>)
 8012f4a:	602b      	str	r3, [r5, #0]
 8012f4c:	f7f5 fc69 	bl	8008822 <_write>
 8012f50:	1c43      	adds	r3, r0, #1
 8012f52:	d103      	bne.n	8012f5c <_write_r+0x20>
 8012f54:	682b      	ldr	r3, [r5, #0]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d000      	beq.n	8012f5c <_write_r+0x20>
 8012f5a:	6023      	str	r3, [r4, #0]
 8012f5c:	bd70      	pop	{r4, r5, r6, pc}
 8012f5e:	46c0      	nop			; (mov r8, r8)
 8012f60:	20005878 	.word	0x20005878

08012f64 <__errno>:
 8012f64:	4b01      	ldr	r3, [pc, #4]	; (8012f6c <__errno+0x8>)
 8012f66:	6818      	ldr	r0, [r3, #0]
 8012f68:	4770      	bx	lr
 8012f6a:	46c0      	nop			; (mov r8, r8)
 8012f6c:	200002c8 	.word	0x200002c8

08012f70 <__libc_init_array>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	2600      	movs	r6, #0
 8012f74:	4c0c      	ldr	r4, [pc, #48]	; (8012fa8 <__libc_init_array+0x38>)
 8012f76:	4d0d      	ldr	r5, [pc, #52]	; (8012fac <__libc_init_array+0x3c>)
 8012f78:	1b64      	subs	r4, r4, r5
 8012f7a:	10a4      	asrs	r4, r4, #2
 8012f7c:	42a6      	cmp	r6, r4
 8012f7e:	d109      	bne.n	8012f94 <__libc_init_array+0x24>
 8012f80:	2600      	movs	r6, #0
 8012f82:	f003 fbef 	bl	8016764 <_init>
 8012f86:	4c0a      	ldr	r4, [pc, #40]	; (8012fb0 <__libc_init_array+0x40>)
 8012f88:	4d0a      	ldr	r5, [pc, #40]	; (8012fb4 <__libc_init_array+0x44>)
 8012f8a:	1b64      	subs	r4, r4, r5
 8012f8c:	10a4      	asrs	r4, r4, #2
 8012f8e:	42a6      	cmp	r6, r4
 8012f90:	d105      	bne.n	8012f9e <__libc_init_array+0x2e>
 8012f92:	bd70      	pop	{r4, r5, r6, pc}
 8012f94:	00b3      	lsls	r3, r6, #2
 8012f96:	58eb      	ldr	r3, [r5, r3]
 8012f98:	4798      	blx	r3
 8012f9a:	3601      	adds	r6, #1
 8012f9c:	e7ee      	b.n	8012f7c <__libc_init_array+0xc>
 8012f9e:	00b3      	lsls	r3, r6, #2
 8012fa0:	58eb      	ldr	r3, [r5, r3]
 8012fa2:	4798      	blx	r3
 8012fa4:	3601      	adds	r6, #1
 8012fa6:	e7f2      	b.n	8012f8e <__libc_init_array+0x1e>
 8012fa8:	08018500 	.word	0x08018500
 8012fac:	08018500 	.word	0x08018500
 8012fb0:	08018504 	.word	0x08018504
 8012fb4:	08018500 	.word	0x08018500

08012fb8 <__retarget_lock_init_recursive>:
 8012fb8:	4770      	bx	lr

08012fba <__retarget_lock_acquire_recursive>:
 8012fba:	4770      	bx	lr

08012fbc <__retarget_lock_release_recursive>:
 8012fbc:	4770      	bx	lr

08012fbe <strcpy>:
 8012fbe:	0003      	movs	r3, r0
 8012fc0:	780a      	ldrb	r2, [r1, #0]
 8012fc2:	3101      	adds	r1, #1
 8012fc4:	701a      	strb	r2, [r3, #0]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	2a00      	cmp	r2, #0
 8012fca:	d1f9      	bne.n	8012fc0 <strcpy+0x2>
 8012fcc:	4770      	bx	lr

08012fce <memchr>:
 8012fce:	b2c9      	uxtb	r1, r1
 8012fd0:	1882      	adds	r2, r0, r2
 8012fd2:	4290      	cmp	r0, r2
 8012fd4:	d101      	bne.n	8012fda <memchr+0xc>
 8012fd6:	2000      	movs	r0, #0
 8012fd8:	4770      	bx	lr
 8012fda:	7803      	ldrb	r3, [r0, #0]
 8012fdc:	428b      	cmp	r3, r1
 8012fde:	d0fb      	beq.n	8012fd8 <memchr+0xa>
 8012fe0:	3001      	adds	r0, #1
 8012fe2:	e7f6      	b.n	8012fd2 <memchr+0x4>

08012fe4 <memcpy>:
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	b510      	push	{r4, lr}
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d100      	bne.n	8012fee <memcpy+0xa>
 8012fec:	bd10      	pop	{r4, pc}
 8012fee:	5ccc      	ldrb	r4, [r1, r3]
 8012ff0:	54c4      	strb	r4, [r0, r3]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	e7f8      	b.n	8012fe8 <memcpy+0x4>
	...

08012ff8 <nan>:
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	4901      	ldr	r1, [pc, #4]	; (8013000 <nan+0x8>)
 8012ffc:	4770      	bx	lr
 8012ffe:	46c0      	nop			; (mov r8, r8)
 8013000:	7ff80000 	.word	0x7ff80000

08013004 <nanf>:
 8013004:	4800      	ldr	r0, [pc, #0]	; (8013008 <nanf+0x4>)
 8013006:	4770      	bx	lr
 8013008:	7fc00000 	.word	0x7fc00000

0801300c <__assert_func>:
 801300c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801300e:	0014      	movs	r4, r2
 8013010:	001a      	movs	r2, r3
 8013012:	4b09      	ldr	r3, [pc, #36]	; (8013038 <__assert_func+0x2c>)
 8013014:	0005      	movs	r5, r0
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	000e      	movs	r6, r1
 801301a:	68d8      	ldr	r0, [r3, #12]
 801301c:	4b07      	ldr	r3, [pc, #28]	; (801303c <__assert_func+0x30>)
 801301e:	2c00      	cmp	r4, #0
 8013020:	d101      	bne.n	8013026 <__assert_func+0x1a>
 8013022:	4b07      	ldr	r3, [pc, #28]	; (8013040 <__assert_func+0x34>)
 8013024:	001c      	movs	r4, r3
 8013026:	4907      	ldr	r1, [pc, #28]	; (8013044 <__assert_func+0x38>)
 8013028:	9301      	str	r3, [sp, #4]
 801302a:	9402      	str	r4, [sp, #8]
 801302c:	002b      	movs	r3, r5
 801302e:	9600      	str	r6, [sp, #0]
 8013030:	f002 f940 	bl	80152b4 <fiprintf>
 8013034:	f002 f961 	bl	80152fa <abort>
 8013038:	200002c8 	.word	0x200002c8
 801303c:	08018253 	.word	0x08018253
 8013040:	0801828e 	.word	0x0801828e
 8013044:	08018260 	.word	0x08018260

08013048 <quorem>:
 8013048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801304a:	6902      	ldr	r2, [r0, #16]
 801304c:	690b      	ldr	r3, [r1, #16]
 801304e:	b089      	sub	sp, #36	; 0x24
 8013050:	0007      	movs	r7, r0
 8013052:	9104      	str	r1, [sp, #16]
 8013054:	2000      	movs	r0, #0
 8013056:	429a      	cmp	r2, r3
 8013058:	db69      	blt.n	801312e <quorem+0xe6>
 801305a:	3b01      	subs	r3, #1
 801305c:	009c      	lsls	r4, r3, #2
 801305e:	9301      	str	r3, [sp, #4]
 8013060:	000b      	movs	r3, r1
 8013062:	3314      	adds	r3, #20
 8013064:	9306      	str	r3, [sp, #24]
 8013066:	191b      	adds	r3, r3, r4
 8013068:	9305      	str	r3, [sp, #20]
 801306a:	003b      	movs	r3, r7
 801306c:	3314      	adds	r3, #20
 801306e:	9303      	str	r3, [sp, #12]
 8013070:	191c      	adds	r4, r3, r4
 8013072:	9b05      	ldr	r3, [sp, #20]
 8013074:	6826      	ldr	r6, [r4, #0]
 8013076:	681d      	ldr	r5, [r3, #0]
 8013078:	0030      	movs	r0, r6
 801307a:	3501      	adds	r5, #1
 801307c:	0029      	movs	r1, r5
 801307e:	f7ed f85f 	bl	8000140 <__udivsi3>
 8013082:	9002      	str	r0, [sp, #8]
 8013084:	42ae      	cmp	r6, r5
 8013086:	d329      	bcc.n	80130dc <quorem+0x94>
 8013088:	9b06      	ldr	r3, [sp, #24]
 801308a:	2600      	movs	r6, #0
 801308c:	469c      	mov	ip, r3
 801308e:	9d03      	ldr	r5, [sp, #12]
 8013090:	9606      	str	r6, [sp, #24]
 8013092:	4662      	mov	r2, ip
 8013094:	ca08      	ldmia	r2!, {r3}
 8013096:	6828      	ldr	r0, [r5, #0]
 8013098:	4694      	mov	ip, r2
 801309a:	9a02      	ldr	r2, [sp, #8]
 801309c:	b299      	uxth	r1, r3
 801309e:	4351      	muls	r1, r2
 80130a0:	0c1b      	lsrs	r3, r3, #16
 80130a2:	4353      	muls	r3, r2
 80130a4:	1989      	adds	r1, r1, r6
 80130a6:	0c0a      	lsrs	r2, r1, #16
 80130a8:	189b      	adds	r3, r3, r2
 80130aa:	9307      	str	r3, [sp, #28]
 80130ac:	0c1e      	lsrs	r6, r3, #16
 80130ae:	9b06      	ldr	r3, [sp, #24]
 80130b0:	b282      	uxth	r2, r0
 80130b2:	18d2      	adds	r2, r2, r3
 80130b4:	466b      	mov	r3, sp
 80130b6:	b289      	uxth	r1, r1
 80130b8:	8b9b      	ldrh	r3, [r3, #28]
 80130ba:	1a52      	subs	r2, r2, r1
 80130bc:	0c01      	lsrs	r1, r0, #16
 80130be:	1ac9      	subs	r1, r1, r3
 80130c0:	1413      	asrs	r3, r2, #16
 80130c2:	18cb      	adds	r3, r1, r3
 80130c4:	1419      	asrs	r1, r3, #16
 80130c6:	b292      	uxth	r2, r2
 80130c8:	041b      	lsls	r3, r3, #16
 80130ca:	4313      	orrs	r3, r2
 80130cc:	c508      	stmia	r5!, {r3}
 80130ce:	9b05      	ldr	r3, [sp, #20]
 80130d0:	9106      	str	r1, [sp, #24]
 80130d2:	4563      	cmp	r3, ip
 80130d4:	d2dd      	bcs.n	8013092 <quorem+0x4a>
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d030      	beq.n	801313e <quorem+0xf6>
 80130dc:	0038      	movs	r0, r7
 80130de:	9904      	ldr	r1, [sp, #16]
 80130e0:	f001 fcda 	bl	8014a98 <__mcmp>
 80130e4:	2800      	cmp	r0, #0
 80130e6:	db21      	blt.n	801312c <quorem+0xe4>
 80130e8:	0038      	movs	r0, r7
 80130ea:	2600      	movs	r6, #0
 80130ec:	9b02      	ldr	r3, [sp, #8]
 80130ee:	9c04      	ldr	r4, [sp, #16]
 80130f0:	3301      	adds	r3, #1
 80130f2:	9302      	str	r3, [sp, #8]
 80130f4:	3014      	adds	r0, #20
 80130f6:	3414      	adds	r4, #20
 80130f8:	6803      	ldr	r3, [r0, #0]
 80130fa:	cc02      	ldmia	r4!, {r1}
 80130fc:	b29d      	uxth	r5, r3
 80130fe:	19ad      	adds	r5, r5, r6
 8013100:	b28a      	uxth	r2, r1
 8013102:	1aaa      	subs	r2, r5, r2
 8013104:	0c09      	lsrs	r1, r1, #16
 8013106:	0c1b      	lsrs	r3, r3, #16
 8013108:	1a5b      	subs	r3, r3, r1
 801310a:	1411      	asrs	r1, r2, #16
 801310c:	185b      	adds	r3, r3, r1
 801310e:	141e      	asrs	r6, r3, #16
 8013110:	b292      	uxth	r2, r2
 8013112:	041b      	lsls	r3, r3, #16
 8013114:	4313      	orrs	r3, r2
 8013116:	c008      	stmia	r0!, {r3}
 8013118:	9b05      	ldr	r3, [sp, #20]
 801311a:	42a3      	cmp	r3, r4
 801311c:	d2ec      	bcs.n	80130f8 <quorem+0xb0>
 801311e:	9b01      	ldr	r3, [sp, #4]
 8013120:	9a03      	ldr	r2, [sp, #12]
 8013122:	009b      	lsls	r3, r3, #2
 8013124:	18d3      	adds	r3, r2, r3
 8013126:	681a      	ldr	r2, [r3, #0]
 8013128:	2a00      	cmp	r2, #0
 801312a:	d015      	beq.n	8013158 <quorem+0x110>
 801312c:	9802      	ldr	r0, [sp, #8]
 801312e:	b009      	add	sp, #36	; 0x24
 8013130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013132:	6823      	ldr	r3, [r4, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d106      	bne.n	8013146 <quorem+0xfe>
 8013138:	9b01      	ldr	r3, [sp, #4]
 801313a:	3b01      	subs	r3, #1
 801313c:	9301      	str	r3, [sp, #4]
 801313e:	9b03      	ldr	r3, [sp, #12]
 8013140:	3c04      	subs	r4, #4
 8013142:	42a3      	cmp	r3, r4
 8013144:	d3f5      	bcc.n	8013132 <quorem+0xea>
 8013146:	9b01      	ldr	r3, [sp, #4]
 8013148:	613b      	str	r3, [r7, #16]
 801314a:	e7c7      	b.n	80130dc <quorem+0x94>
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	2a00      	cmp	r2, #0
 8013150:	d106      	bne.n	8013160 <quorem+0x118>
 8013152:	9a01      	ldr	r2, [sp, #4]
 8013154:	3a01      	subs	r2, #1
 8013156:	9201      	str	r2, [sp, #4]
 8013158:	9a03      	ldr	r2, [sp, #12]
 801315a:	3b04      	subs	r3, #4
 801315c:	429a      	cmp	r2, r3
 801315e:	d3f5      	bcc.n	801314c <quorem+0x104>
 8013160:	9b01      	ldr	r3, [sp, #4]
 8013162:	613b      	str	r3, [r7, #16]
 8013164:	e7e2      	b.n	801312c <quorem+0xe4>
	...

08013168 <_dtoa_r>:
 8013168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801316a:	0014      	movs	r4, r2
 801316c:	001d      	movs	r5, r3
 801316e:	69c6      	ldr	r6, [r0, #28]
 8013170:	b09d      	sub	sp, #116	; 0x74
 8013172:	9408      	str	r4, [sp, #32]
 8013174:	9509      	str	r5, [sp, #36]	; 0x24
 8013176:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013178:	9004      	str	r0, [sp, #16]
 801317a:	2e00      	cmp	r6, #0
 801317c:	d10f      	bne.n	801319e <_dtoa_r+0x36>
 801317e:	2010      	movs	r0, #16
 8013180:	f7fd fe26 	bl	8010dd0 <malloc>
 8013184:	9b04      	ldr	r3, [sp, #16]
 8013186:	1e02      	subs	r2, r0, #0
 8013188:	61d8      	str	r0, [r3, #28]
 801318a:	d104      	bne.n	8013196 <_dtoa_r+0x2e>
 801318c:	21ef      	movs	r1, #239	; 0xef
 801318e:	4bc6      	ldr	r3, [pc, #792]	; (80134a8 <_dtoa_r+0x340>)
 8013190:	48c6      	ldr	r0, [pc, #792]	; (80134ac <_dtoa_r+0x344>)
 8013192:	f7ff ff3b 	bl	801300c <__assert_func>
 8013196:	6046      	str	r6, [r0, #4]
 8013198:	6086      	str	r6, [r0, #8]
 801319a:	6006      	str	r6, [r0, #0]
 801319c:	60c6      	str	r6, [r0, #12]
 801319e:	9b04      	ldr	r3, [sp, #16]
 80131a0:	69db      	ldr	r3, [r3, #28]
 80131a2:	6819      	ldr	r1, [r3, #0]
 80131a4:	2900      	cmp	r1, #0
 80131a6:	d00b      	beq.n	80131c0 <_dtoa_r+0x58>
 80131a8:	685a      	ldr	r2, [r3, #4]
 80131aa:	2301      	movs	r3, #1
 80131ac:	4093      	lsls	r3, r2
 80131ae:	604a      	str	r2, [r1, #4]
 80131b0:	608b      	str	r3, [r1, #8]
 80131b2:	9804      	ldr	r0, [sp, #16]
 80131b4:	f001 f9e2 	bl	801457c <_Bfree>
 80131b8:	2200      	movs	r2, #0
 80131ba:	9b04      	ldr	r3, [sp, #16]
 80131bc:	69db      	ldr	r3, [r3, #28]
 80131be:	601a      	str	r2, [r3, #0]
 80131c0:	2d00      	cmp	r5, #0
 80131c2:	da1e      	bge.n	8013202 <_dtoa_r+0x9a>
 80131c4:	2301      	movs	r3, #1
 80131c6:	603b      	str	r3, [r7, #0]
 80131c8:	006b      	lsls	r3, r5, #1
 80131ca:	085b      	lsrs	r3, r3, #1
 80131cc:	9309      	str	r3, [sp, #36]	; 0x24
 80131ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80131d0:	4bb7      	ldr	r3, [pc, #732]	; (80134b0 <_dtoa_r+0x348>)
 80131d2:	4ab7      	ldr	r2, [pc, #732]	; (80134b0 <_dtoa_r+0x348>)
 80131d4:	403b      	ands	r3, r7
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d116      	bne.n	8013208 <_dtoa_r+0xa0>
 80131da:	4bb6      	ldr	r3, [pc, #728]	; (80134b4 <_dtoa_r+0x34c>)
 80131dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80131de:	6013      	str	r3, [r2, #0]
 80131e0:	033b      	lsls	r3, r7, #12
 80131e2:	0b1b      	lsrs	r3, r3, #12
 80131e4:	4323      	orrs	r3, r4
 80131e6:	d101      	bne.n	80131ec <_dtoa_r+0x84>
 80131e8:	f000 fdb5 	bl	8013d56 <_dtoa_r+0xbee>
 80131ec:	4bb2      	ldr	r3, [pc, #712]	; (80134b8 <_dtoa_r+0x350>)
 80131ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80131f0:	9306      	str	r3, [sp, #24]
 80131f2:	2a00      	cmp	r2, #0
 80131f4:	d002      	beq.n	80131fc <_dtoa_r+0x94>
 80131f6:	4bb1      	ldr	r3, [pc, #708]	; (80134bc <_dtoa_r+0x354>)
 80131f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80131fa:	6013      	str	r3, [r2, #0]
 80131fc:	9806      	ldr	r0, [sp, #24]
 80131fe:	b01d      	add	sp, #116	; 0x74
 8013200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013202:	2300      	movs	r3, #0
 8013204:	603b      	str	r3, [r7, #0]
 8013206:	e7e2      	b.n	80131ce <_dtoa_r+0x66>
 8013208:	9a08      	ldr	r2, [sp, #32]
 801320a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801320c:	9210      	str	r2, [sp, #64]	; 0x40
 801320e:	9311      	str	r3, [sp, #68]	; 0x44
 8013210:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013212:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013214:	2200      	movs	r2, #0
 8013216:	2300      	movs	r3, #0
 8013218:	f7ed f918 	bl	800044c <__aeabi_dcmpeq>
 801321c:	1e06      	subs	r6, r0, #0
 801321e:	d009      	beq.n	8013234 <_dtoa_r+0xcc>
 8013220:	2301      	movs	r3, #1
 8013222:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013224:	6013      	str	r3, [r2, #0]
 8013226:	4ba6      	ldr	r3, [pc, #664]	; (80134c0 <_dtoa_r+0x358>)
 8013228:	9306      	str	r3, [sp, #24]
 801322a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801322c:	2b00      	cmp	r3, #0
 801322e:	d0e5      	beq.n	80131fc <_dtoa_r+0x94>
 8013230:	4ba4      	ldr	r3, [pc, #656]	; (80134c4 <_dtoa_r+0x35c>)
 8013232:	e7e1      	b.n	80131f8 <_dtoa_r+0x90>
 8013234:	ab1a      	add	r3, sp, #104	; 0x68
 8013236:	9301      	str	r3, [sp, #4]
 8013238:	ab1b      	add	r3, sp, #108	; 0x6c
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	9804      	ldr	r0, [sp, #16]
 801323e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013242:	f001 fd45 	bl	8014cd0 <__d2b>
 8013246:	007a      	lsls	r2, r7, #1
 8013248:	9005      	str	r0, [sp, #20]
 801324a:	0d52      	lsrs	r2, r2, #21
 801324c:	d100      	bne.n	8013250 <_dtoa_r+0xe8>
 801324e:	e07b      	b.n	8013348 <_dtoa_r+0x1e0>
 8013250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013252:	9617      	str	r6, [sp, #92]	; 0x5c
 8013254:	0319      	lsls	r1, r3, #12
 8013256:	4b9c      	ldr	r3, [pc, #624]	; (80134c8 <_dtoa_r+0x360>)
 8013258:	0b09      	lsrs	r1, r1, #12
 801325a:	430b      	orrs	r3, r1
 801325c:	499b      	ldr	r1, [pc, #620]	; (80134cc <_dtoa_r+0x364>)
 801325e:	1857      	adds	r7, r2, r1
 8013260:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013262:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013264:	0019      	movs	r1, r3
 8013266:	2200      	movs	r2, #0
 8013268:	4b99      	ldr	r3, [pc, #612]	; (80134d0 <_dtoa_r+0x368>)
 801326a:	f7ef faf5 	bl	8002858 <__aeabi_dsub>
 801326e:	4a99      	ldr	r2, [pc, #612]	; (80134d4 <_dtoa_r+0x36c>)
 8013270:	4b99      	ldr	r3, [pc, #612]	; (80134d8 <_dtoa_r+0x370>)
 8013272:	f7ef f82f 	bl	80022d4 <__aeabi_dmul>
 8013276:	4a99      	ldr	r2, [pc, #612]	; (80134dc <_dtoa_r+0x374>)
 8013278:	4b99      	ldr	r3, [pc, #612]	; (80134e0 <_dtoa_r+0x378>)
 801327a:	f7ee f8d1 	bl	8001420 <__aeabi_dadd>
 801327e:	0004      	movs	r4, r0
 8013280:	0038      	movs	r0, r7
 8013282:	000d      	movs	r5, r1
 8013284:	f7ef febe 	bl	8003004 <__aeabi_i2d>
 8013288:	4a96      	ldr	r2, [pc, #600]	; (80134e4 <_dtoa_r+0x37c>)
 801328a:	4b97      	ldr	r3, [pc, #604]	; (80134e8 <_dtoa_r+0x380>)
 801328c:	f7ef f822 	bl	80022d4 <__aeabi_dmul>
 8013290:	0002      	movs	r2, r0
 8013292:	000b      	movs	r3, r1
 8013294:	0020      	movs	r0, r4
 8013296:	0029      	movs	r1, r5
 8013298:	f7ee f8c2 	bl	8001420 <__aeabi_dadd>
 801329c:	0004      	movs	r4, r0
 801329e:	000d      	movs	r5, r1
 80132a0:	f7ef fe7a 	bl	8002f98 <__aeabi_d2iz>
 80132a4:	2200      	movs	r2, #0
 80132a6:	9003      	str	r0, [sp, #12]
 80132a8:	2300      	movs	r3, #0
 80132aa:	0020      	movs	r0, r4
 80132ac:	0029      	movs	r1, r5
 80132ae:	f7ed f8d3 	bl	8000458 <__aeabi_dcmplt>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d00b      	beq.n	80132ce <_dtoa_r+0x166>
 80132b6:	9803      	ldr	r0, [sp, #12]
 80132b8:	f7ef fea4 	bl	8003004 <__aeabi_i2d>
 80132bc:	002b      	movs	r3, r5
 80132be:	0022      	movs	r2, r4
 80132c0:	f7ed f8c4 	bl	800044c <__aeabi_dcmpeq>
 80132c4:	4243      	negs	r3, r0
 80132c6:	4158      	adcs	r0, r3
 80132c8:	9b03      	ldr	r3, [sp, #12]
 80132ca:	1a1b      	subs	r3, r3, r0
 80132cc:	9303      	str	r3, [sp, #12]
 80132ce:	2301      	movs	r3, #1
 80132d0:	9316      	str	r3, [sp, #88]	; 0x58
 80132d2:	9b03      	ldr	r3, [sp, #12]
 80132d4:	2b16      	cmp	r3, #22
 80132d6:	d810      	bhi.n	80132fa <_dtoa_r+0x192>
 80132d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80132da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80132dc:	9a03      	ldr	r2, [sp, #12]
 80132de:	4b83      	ldr	r3, [pc, #524]	; (80134ec <_dtoa_r+0x384>)
 80132e0:	00d2      	lsls	r2, r2, #3
 80132e2:	189b      	adds	r3, r3, r2
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	f7ed f8b6 	bl	8000458 <__aeabi_dcmplt>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	d047      	beq.n	8013380 <_dtoa_r+0x218>
 80132f0:	9b03      	ldr	r3, [sp, #12]
 80132f2:	3b01      	subs	r3, #1
 80132f4:	9303      	str	r3, [sp, #12]
 80132f6:	2300      	movs	r3, #0
 80132f8:	9316      	str	r3, [sp, #88]	; 0x58
 80132fa:	2200      	movs	r2, #0
 80132fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80132fe:	920a      	str	r2, [sp, #40]	; 0x28
 8013300:	1bdb      	subs	r3, r3, r7
 8013302:	1e5a      	subs	r2, r3, #1
 8013304:	d53e      	bpl.n	8013384 <_dtoa_r+0x21c>
 8013306:	2201      	movs	r2, #1
 8013308:	1ad3      	subs	r3, r2, r3
 801330a:	930a      	str	r3, [sp, #40]	; 0x28
 801330c:	2300      	movs	r3, #0
 801330e:	930c      	str	r3, [sp, #48]	; 0x30
 8013310:	9b03      	ldr	r3, [sp, #12]
 8013312:	2b00      	cmp	r3, #0
 8013314:	db38      	blt.n	8013388 <_dtoa_r+0x220>
 8013316:	9a03      	ldr	r2, [sp, #12]
 8013318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801331a:	4694      	mov	ip, r2
 801331c:	4463      	add	r3, ip
 801331e:	930c      	str	r3, [sp, #48]	; 0x30
 8013320:	2300      	movs	r3, #0
 8013322:	9213      	str	r2, [sp, #76]	; 0x4c
 8013324:	930d      	str	r3, [sp, #52]	; 0x34
 8013326:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013328:	2401      	movs	r4, #1
 801332a:	2b09      	cmp	r3, #9
 801332c:	d867      	bhi.n	80133fe <_dtoa_r+0x296>
 801332e:	2b05      	cmp	r3, #5
 8013330:	dd02      	ble.n	8013338 <_dtoa_r+0x1d0>
 8013332:	2400      	movs	r4, #0
 8013334:	3b04      	subs	r3, #4
 8013336:	9322      	str	r3, [sp, #136]	; 0x88
 8013338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801333a:	1e98      	subs	r0, r3, #2
 801333c:	2803      	cmp	r0, #3
 801333e:	d867      	bhi.n	8013410 <_dtoa_r+0x2a8>
 8013340:	f7ec feea 	bl	8000118 <__gnu_thumb1_case_uqi>
 8013344:	5b383a2b 	.word	0x5b383a2b
 8013348:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801334a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801334c:	18f6      	adds	r6, r6, r3
 801334e:	4b68      	ldr	r3, [pc, #416]	; (80134f0 <_dtoa_r+0x388>)
 8013350:	18f2      	adds	r2, r6, r3
 8013352:	2a20      	cmp	r2, #32
 8013354:	dd0f      	ble.n	8013376 <_dtoa_r+0x20e>
 8013356:	2340      	movs	r3, #64	; 0x40
 8013358:	1a9b      	subs	r3, r3, r2
 801335a:	409f      	lsls	r7, r3
 801335c:	4b65      	ldr	r3, [pc, #404]	; (80134f4 <_dtoa_r+0x38c>)
 801335e:	0038      	movs	r0, r7
 8013360:	18f3      	adds	r3, r6, r3
 8013362:	40dc      	lsrs	r4, r3
 8013364:	4320      	orrs	r0, r4
 8013366:	f7ef fe7d 	bl	8003064 <__aeabi_ui2d>
 801336a:	2201      	movs	r2, #1
 801336c:	4b62      	ldr	r3, [pc, #392]	; (80134f8 <_dtoa_r+0x390>)
 801336e:	1e77      	subs	r7, r6, #1
 8013370:	18cb      	adds	r3, r1, r3
 8013372:	9217      	str	r2, [sp, #92]	; 0x5c
 8013374:	e776      	b.n	8013264 <_dtoa_r+0xfc>
 8013376:	2320      	movs	r3, #32
 8013378:	0020      	movs	r0, r4
 801337a:	1a9b      	subs	r3, r3, r2
 801337c:	4098      	lsls	r0, r3
 801337e:	e7f2      	b.n	8013366 <_dtoa_r+0x1fe>
 8013380:	9016      	str	r0, [sp, #88]	; 0x58
 8013382:	e7ba      	b.n	80132fa <_dtoa_r+0x192>
 8013384:	920c      	str	r2, [sp, #48]	; 0x30
 8013386:	e7c3      	b.n	8013310 <_dtoa_r+0x1a8>
 8013388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801338a:	9a03      	ldr	r2, [sp, #12]
 801338c:	1a9b      	subs	r3, r3, r2
 801338e:	930a      	str	r3, [sp, #40]	; 0x28
 8013390:	4253      	negs	r3, r2
 8013392:	930d      	str	r3, [sp, #52]	; 0x34
 8013394:	2300      	movs	r3, #0
 8013396:	9313      	str	r3, [sp, #76]	; 0x4c
 8013398:	e7c5      	b.n	8013326 <_dtoa_r+0x1be>
 801339a:	2300      	movs	r3, #0
 801339c:	930f      	str	r3, [sp, #60]	; 0x3c
 801339e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80133a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80133a2:	9307      	str	r3, [sp, #28]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	dc13      	bgt.n	80133d0 <_dtoa_r+0x268>
 80133a8:	2301      	movs	r3, #1
 80133aa:	001a      	movs	r2, r3
 80133ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80133ae:	9307      	str	r3, [sp, #28]
 80133b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80133b2:	e00d      	b.n	80133d0 <_dtoa_r+0x268>
 80133b4:	2301      	movs	r3, #1
 80133b6:	e7f1      	b.n	801339c <_dtoa_r+0x234>
 80133b8:	2300      	movs	r3, #0
 80133ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80133bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80133be:	4694      	mov	ip, r2
 80133c0:	9b03      	ldr	r3, [sp, #12]
 80133c2:	4463      	add	r3, ip
 80133c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80133c6:	3301      	adds	r3, #1
 80133c8:	9307      	str	r3, [sp, #28]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	dc00      	bgt.n	80133d0 <_dtoa_r+0x268>
 80133ce:	2301      	movs	r3, #1
 80133d0:	9a04      	ldr	r2, [sp, #16]
 80133d2:	2100      	movs	r1, #0
 80133d4:	69d0      	ldr	r0, [r2, #28]
 80133d6:	2204      	movs	r2, #4
 80133d8:	0015      	movs	r5, r2
 80133da:	3514      	adds	r5, #20
 80133dc:	429d      	cmp	r5, r3
 80133de:	d91b      	bls.n	8013418 <_dtoa_r+0x2b0>
 80133e0:	6041      	str	r1, [r0, #4]
 80133e2:	9804      	ldr	r0, [sp, #16]
 80133e4:	f001 f886 	bl	80144f4 <_Balloc>
 80133e8:	9006      	str	r0, [sp, #24]
 80133ea:	2800      	cmp	r0, #0
 80133ec:	d117      	bne.n	801341e <_dtoa_r+0x2b6>
 80133ee:	21b0      	movs	r1, #176	; 0xb0
 80133f0:	4b42      	ldr	r3, [pc, #264]	; (80134fc <_dtoa_r+0x394>)
 80133f2:	482e      	ldr	r0, [pc, #184]	; (80134ac <_dtoa_r+0x344>)
 80133f4:	9a06      	ldr	r2, [sp, #24]
 80133f6:	31ff      	adds	r1, #255	; 0xff
 80133f8:	e6cb      	b.n	8013192 <_dtoa_r+0x2a>
 80133fa:	2301      	movs	r3, #1
 80133fc:	e7dd      	b.n	80133ba <_dtoa_r+0x252>
 80133fe:	2300      	movs	r3, #0
 8013400:	940f      	str	r4, [sp, #60]	; 0x3c
 8013402:	9322      	str	r3, [sp, #136]	; 0x88
 8013404:	3b01      	subs	r3, #1
 8013406:	930b      	str	r3, [sp, #44]	; 0x2c
 8013408:	9307      	str	r3, [sp, #28]
 801340a:	2200      	movs	r2, #0
 801340c:	3313      	adds	r3, #19
 801340e:	e7cf      	b.n	80133b0 <_dtoa_r+0x248>
 8013410:	2301      	movs	r3, #1
 8013412:	930f      	str	r3, [sp, #60]	; 0x3c
 8013414:	3b02      	subs	r3, #2
 8013416:	e7f6      	b.n	8013406 <_dtoa_r+0x29e>
 8013418:	3101      	adds	r1, #1
 801341a:	0052      	lsls	r2, r2, #1
 801341c:	e7dc      	b.n	80133d8 <_dtoa_r+0x270>
 801341e:	9b04      	ldr	r3, [sp, #16]
 8013420:	9a06      	ldr	r2, [sp, #24]
 8013422:	69db      	ldr	r3, [r3, #28]
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	9b07      	ldr	r3, [sp, #28]
 8013428:	2b0e      	cmp	r3, #14
 801342a:	d900      	bls.n	801342e <_dtoa_r+0x2c6>
 801342c:	e0e5      	b.n	80135fa <_dtoa_r+0x492>
 801342e:	2c00      	cmp	r4, #0
 8013430:	d100      	bne.n	8013434 <_dtoa_r+0x2cc>
 8013432:	e0e2      	b.n	80135fa <_dtoa_r+0x492>
 8013434:	9b03      	ldr	r3, [sp, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	dd64      	ble.n	8013504 <_dtoa_r+0x39c>
 801343a:	210f      	movs	r1, #15
 801343c:	9a03      	ldr	r2, [sp, #12]
 801343e:	4b2b      	ldr	r3, [pc, #172]	; (80134ec <_dtoa_r+0x384>)
 8013440:	400a      	ands	r2, r1
 8013442:	00d2      	lsls	r2, r2, #3
 8013444:	189b      	adds	r3, r3, r2
 8013446:	681e      	ldr	r6, [r3, #0]
 8013448:	685f      	ldr	r7, [r3, #4]
 801344a:	9b03      	ldr	r3, [sp, #12]
 801344c:	2402      	movs	r4, #2
 801344e:	111d      	asrs	r5, r3, #4
 8013450:	05db      	lsls	r3, r3, #23
 8013452:	d50a      	bpl.n	801346a <_dtoa_r+0x302>
 8013454:	4b2a      	ldr	r3, [pc, #168]	; (8013500 <_dtoa_r+0x398>)
 8013456:	400d      	ands	r5, r1
 8013458:	6a1a      	ldr	r2, [r3, #32]
 801345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801345c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801345e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013460:	f7ee fb3e 	bl	8001ae0 <__aeabi_ddiv>
 8013464:	9008      	str	r0, [sp, #32]
 8013466:	9109      	str	r1, [sp, #36]	; 0x24
 8013468:	3401      	adds	r4, #1
 801346a:	4b25      	ldr	r3, [pc, #148]	; (8013500 <_dtoa_r+0x398>)
 801346c:	930e      	str	r3, [sp, #56]	; 0x38
 801346e:	2d00      	cmp	r5, #0
 8013470:	d108      	bne.n	8013484 <_dtoa_r+0x31c>
 8013472:	9808      	ldr	r0, [sp, #32]
 8013474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013476:	0032      	movs	r2, r6
 8013478:	003b      	movs	r3, r7
 801347a:	f7ee fb31 	bl	8001ae0 <__aeabi_ddiv>
 801347e:	9008      	str	r0, [sp, #32]
 8013480:	9109      	str	r1, [sp, #36]	; 0x24
 8013482:	e05a      	b.n	801353a <_dtoa_r+0x3d2>
 8013484:	2301      	movs	r3, #1
 8013486:	421d      	tst	r5, r3
 8013488:	d009      	beq.n	801349e <_dtoa_r+0x336>
 801348a:	18e4      	adds	r4, r4, r3
 801348c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801348e:	0030      	movs	r0, r6
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	0039      	movs	r1, r7
 8013496:	f7ee ff1d 	bl	80022d4 <__aeabi_dmul>
 801349a:	0006      	movs	r6, r0
 801349c:	000f      	movs	r7, r1
 801349e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134a0:	106d      	asrs	r5, r5, #1
 80134a2:	3308      	adds	r3, #8
 80134a4:	e7e2      	b.n	801346c <_dtoa_r+0x304>
 80134a6:	46c0      	nop			; (mov r8, r8)
 80134a8:	080181da 	.word	0x080181da
 80134ac:	0801829c 	.word	0x0801829c
 80134b0:	7ff00000 	.word	0x7ff00000
 80134b4:	0000270f 	.word	0x0000270f
 80134b8:	08018298 	.word	0x08018298
 80134bc:	0801829b 	.word	0x0801829b
 80134c0:	080181b1 	.word	0x080181b1
 80134c4:	080181b2 	.word	0x080181b2
 80134c8:	3ff00000 	.word	0x3ff00000
 80134cc:	fffffc01 	.word	0xfffffc01
 80134d0:	3ff80000 	.word	0x3ff80000
 80134d4:	636f4361 	.word	0x636f4361
 80134d8:	3fd287a7 	.word	0x3fd287a7
 80134dc:	8b60c8b3 	.word	0x8b60c8b3
 80134e0:	3fc68a28 	.word	0x3fc68a28
 80134e4:	509f79fb 	.word	0x509f79fb
 80134e8:	3fd34413 	.word	0x3fd34413
 80134ec:	080183e8 	.word	0x080183e8
 80134f0:	00000432 	.word	0x00000432
 80134f4:	00000412 	.word	0x00000412
 80134f8:	fe100000 	.word	0xfe100000
 80134fc:	080182f4 	.word	0x080182f4
 8013500:	080183c0 	.word	0x080183c0
 8013504:	9b03      	ldr	r3, [sp, #12]
 8013506:	2402      	movs	r4, #2
 8013508:	2b00      	cmp	r3, #0
 801350a:	d016      	beq.n	801353a <_dtoa_r+0x3d2>
 801350c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801350e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013510:	220f      	movs	r2, #15
 8013512:	425d      	negs	r5, r3
 8013514:	402a      	ands	r2, r5
 8013516:	4bdd      	ldr	r3, [pc, #884]	; (801388c <_dtoa_r+0x724>)
 8013518:	00d2      	lsls	r2, r2, #3
 801351a:	189b      	adds	r3, r3, r2
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	f7ee fed8 	bl	80022d4 <__aeabi_dmul>
 8013524:	2701      	movs	r7, #1
 8013526:	2300      	movs	r3, #0
 8013528:	9008      	str	r0, [sp, #32]
 801352a:	9109      	str	r1, [sp, #36]	; 0x24
 801352c:	4ed8      	ldr	r6, [pc, #864]	; (8013890 <_dtoa_r+0x728>)
 801352e:	112d      	asrs	r5, r5, #4
 8013530:	2d00      	cmp	r5, #0
 8013532:	d000      	beq.n	8013536 <_dtoa_r+0x3ce>
 8013534:	e091      	b.n	801365a <_dtoa_r+0x4f2>
 8013536:	2b00      	cmp	r3, #0
 8013538:	d1a1      	bne.n	801347e <_dtoa_r+0x316>
 801353a:	9e08      	ldr	r6, [sp, #32]
 801353c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801353e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013540:	2b00      	cmp	r3, #0
 8013542:	d100      	bne.n	8013546 <_dtoa_r+0x3de>
 8013544:	e094      	b.n	8013670 <_dtoa_r+0x508>
 8013546:	2200      	movs	r2, #0
 8013548:	0030      	movs	r0, r6
 801354a:	0039      	movs	r1, r7
 801354c:	4bd1      	ldr	r3, [pc, #836]	; (8013894 <_dtoa_r+0x72c>)
 801354e:	f7ec ff83 	bl	8000458 <__aeabi_dcmplt>
 8013552:	2800      	cmp	r0, #0
 8013554:	d100      	bne.n	8013558 <_dtoa_r+0x3f0>
 8013556:	e08b      	b.n	8013670 <_dtoa_r+0x508>
 8013558:	9b07      	ldr	r3, [sp, #28]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d100      	bne.n	8013560 <_dtoa_r+0x3f8>
 801355e:	e087      	b.n	8013670 <_dtoa_r+0x508>
 8013560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013562:	2b00      	cmp	r3, #0
 8013564:	dd45      	ble.n	80135f2 <_dtoa_r+0x48a>
 8013566:	9b03      	ldr	r3, [sp, #12]
 8013568:	2200      	movs	r2, #0
 801356a:	3b01      	subs	r3, #1
 801356c:	930e      	str	r3, [sp, #56]	; 0x38
 801356e:	0030      	movs	r0, r6
 8013570:	4bc9      	ldr	r3, [pc, #804]	; (8013898 <_dtoa_r+0x730>)
 8013572:	0039      	movs	r1, r7
 8013574:	f7ee feae 	bl	80022d4 <__aeabi_dmul>
 8013578:	9008      	str	r0, [sp, #32]
 801357a:	9109      	str	r1, [sp, #36]	; 0x24
 801357c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801357e:	3401      	adds	r4, #1
 8013580:	0020      	movs	r0, r4
 8013582:	9e08      	ldr	r6, [sp, #32]
 8013584:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013586:	9312      	str	r3, [sp, #72]	; 0x48
 8013588:	f7ef fd3c 	bl	8003004 <__aeabi_i2d>
 801358c:	0032      	movs	r2, r6
 801358e:	003b      	movs	r3, r7
 8013590:	f7ee fea0 	bl	80022d4 <__aeabi_dmul>
 8013594:	2200      	movs	r2, #0
 8013596:	4bc1      	ldr	r3, [pc, #772]	; (801389c <_dtoa_r+0x734>)
 8013598:	f7ed ff42 	bl	8001420 <__aeabi_dadd>
 801359c:	4ac0      	ldr	r2, [pc, #768]	; (80138a0 <_dtoa_r+0x738>)
 801359e:	9014      	str	r0, [sp, #80]	; 0x50
 80135a0:	9115      	str	r1, [sp, #84]	; 0x54
 80135a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80135a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80135a6:	4694      	mov	ip, r2
 80135a8:	9308      	str	r3, [sp, #32]
 80135aa:	9409      	str	r4, [sp, #36]	; 0x24
 80135ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135ae:	4463      	add	r3, ip
 80135b0:	9318      	str	r3, [sp, #96]	; 0x60
 80135b2:	9309      	str	r3, [sp, #36]	; 0x24
 80135b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d15e      	bne.n	8013678 <_dtoa_r+0x510>
 80135ba:	2200      	movs	r2, #0
 80135bc:	4bb9      	ldr	r3, [pc, #740]	; (80138a4 <_dtoa_r+0x73c>)
 80135be:	0030      	movs	r0, r6
 80135c0:	0039      	movs	r1, r7
 80135c2:	f7ef f949 	bl	8002858 <__aeabi_dsub>
 80135c6:	9a08      	ldr	r2, [sp, #32]
 80135c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80135ca:	0004      	movs	r4, r0
 80135cc:	000d      	movs	r5, r1
 80135ce:	f7ec ff57 	bl	8000480 <__aeabi_dcmpgt>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d000      	beq.n	80135d8 <_dtoa_r+0x470>
 80135d6:	e2b3      	b.n	8013b40 <_dtoa_r+0x9d8>
 80135d8:	48b3      	ldr	r0, [pc, #716]	; (80138a8 <_dtoa_r+0x740>)
 80135da:	9915      	ldr	r1, [sp, #84]	; 0x54
 80135dc:	4684      	mov	ip, r0
 80135de:	4461      	add	r1, ip
 80135e0:	000b      	movs	r3, r1
 80135e2:	0020      	movs	r0, r4
 80135e4:	0029      	movs	r1, r5
 80135e6:	9a08      	ldr	r2, [sp, #32]
 80135e8:	f7ec ff36 	bl	8000458 <__aeabi_dcmplt>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d000      	beq.n	80135f2 <_dtoa_r+0x48a>
 80135f0:	e2a3      	b.n	8013b3a <_dtoa_r+0x9d2>
 80135f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80135f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80135f6:	9308      	str	r3, [sp, #32]
 80135f8:	9409      	str	r4, [sp, #36]	; 0x24
 80135fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	da00      	bge.n	8013602 <_dtoa_r+0x49a>
 8013600:	e179      	b.n	80138f6 <_dtoa_r+0x78e>
 8013602:	9a03      	ldr	r2, [sp, #12]
 8013604:	2a0e      	cmp	r2, #14
 8013606:	dd00      	ble.n	801360a <_dtoa_r+0x4a2>
 8013608:	e175      	b.n	80138f6 <_dtoa_r+0x78e>
 801360a:	4ba0      	ldr	r3, [pc, #640]	; (801388c <_dtoa_r+0x724>)
 801360c:	00d2      	lsls	r2, r2, #3
 801360e:	189b      	adds	r3, r3, r2
 8013610:	681e      	ldr	r6, [r3, #0]
 8013612:	685f      	ldr	r7, [r3, #4]
 8013614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013616:	2b00      	cmp	r3, #0
 8013618:	db00      	blt.n	801361c <_dtoa_r+0x4b4>
 801361a:	e0e5      	b.n	80137e8 <_dtoa_r+0x680>
 801361c:	9b07      	ldr	r3, [sp, #28]
 801361e:	2b00      	cmp	r3, #0
 8013620:	dd00      	ble.n	8013624 <_dtoa_r+0x4bc>
 8013622:	e0e1      	b.n	80137e8 <_dtoa_r+0x680>
 8013624:	d000      	beq.n	8013628 <_dtoa_r+0x4c0>
 8013626:	e288      	b.n	8013b3a <_dtoa_r+0x9d2>
 8013628:	2200      	movs	r2, #0
 801362a:	0030      	movs	r0, r6
 801362c:	0039      	movs	r1, r7
 801362e:	4b9d      	ldr	r3, [pc, #628]	; (80138a4 <_dtoa_r+0x73c>)
 8013630:	f7ee fe50 	bl	80022d4 <__aeabi_dmul>
 8013634:	9a08      	ldr	r2, [sp, #32]
 8013636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013638:	f7ec ff2c 	bl	8000494 <__aeabi_dcmpge>
 801363c:	9e07      	ldr	r6, [sp, #28]
 801363e:	0037      	movs	r7, r6
 8013640:	2800      	cmp	r0, #0
 8013642:	d000      	beq.n	8013646 <_dtoa_r+0x4de>
 8013644:	e25f      	b.n	8013b06 <_dtoa_r+0x99e>
 8013646:	9b06      	ldr	r3, [sp, #24]
 8013648:	9a06      	ldr	r2, [sp, #24]
 801364a:	3301      	adds	r3, #1
 801364c:	9308      	str	r3, [sp, #32]
 801364e:	2331      	movs	r3, #49	; 0x31
 8013650:	7013      	strb	r3, [r2, #0]
 8013652:	9b03      	ldr	r3, [sp, #12]
 8013654:	3301      	adds	r3, #1
 8013656:	9303      	str	r3, [sp, #12]
 8013658:	e25a      	b.n	8013b10 <_dtoa_r+0x9a8>
 801365a:	423d      	tst	r5, r7
 801365c:	d005      	beq.n	801366a <_dtoa_r+0x502>
 801365e:	6832      	ldr	r2, [r6, #0]
 8013660:	6873      	ldr	r3, [r6, #4]
 8013662:	f7ee fe37 	bl	80022d4 <__aeabi_dmul>
 8013666:	003b      	movs	r3, r7
 8013668:	3401      	adds	r4, #1
 801366a:	106d      	asrs	r5, r5, #1
 801366c:	3608      	adds	r6, #8
 801366e:	e75f      	b.n	8013530 <_dtoa_r+0x3c8>
 8013670:	9b03      	ldr	r3, [sp, #12]
 8013672:	930e      	str	r3, [sp, #56]	; 0x38
 8013674:	9b07      	ldr	r3, [sp, #28]
 8013676:	e783      	b.n	8013580 <_dtoa_r+0x418>
 8013678:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801367a:	4b84      	ldr	r3, [pc, #528]	; (801388c <_dtoa_r+0x724>)
 801367c:	3a01      	subs	r2, #1
 801367e:	00d2      	lsls	r2, r2, #3
 8013680:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013682:	189b      	adds	r3, r3, r2
 8013684:	9c08      	ldr	r4, [sp, #32]
 8013686:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013688:	681a      	ldr	r2, [r3, #0]
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	2900      	cmp	r1, #0
 801368e:	d051      	beq.n	8013734 <_dtoa_r+0x5cc>
 8013690:	2000      	movs	r0, #0
 8013692:	4986      	ldr	r1, [pc, #536]	; (80138ac <_dtoa_r+0x744>)
 8013694:	f7ee fa24 	bl	8001ae0 <__aeabi_ddiv>
 8013698:	0022      	movs	r2, r4
 801369a:	002b      	movs	r3, r5
 801369c:	f7ef f8dc 	bl	8002858 <__aeabi_dsub>
 80136a0:	9a06      	ldr	r2, [sp, #24]
 80136a2:	0004      	movs	r4, r0
 80136a4:	4694      	mov	ip, r2
 80136a6:	000d      	movs	r5, r1
 80136a8:	9b06      	ldr	r3, [sp, #24]
 80136aa:	9314      	str	r3, [sp, #80]	; 0x50
 80136ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80136ae:	4463      	add	r3, ip
 80136b0:	9318      	str	r3, [sp, #96]	; 0x60
 80136b2:	0039      	movs	r1, r7
 80136b4:	0030      	movs	r0, r6
 80136b6:	f7ef fc6f 	bl	8002f98 <__aeabi_d2iz>
 80136ba:	9012      	str	r0, [sp, #72]	; 0x48
 80136bc:	f7ef fca2 	bl	8003004 <__aeabi_i2d>
 80136c0:	0002      	movs	r2, r0
 80136c2:	000b      	movs	r3, r1
 80136c4:	0030      	movs	r0, r6
 80136c6:	0039      	movs	r1, r7
 80136c8:	f7ef f8c6 	bl	8002858 <__aeabi_dsub>
 80136cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80136ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80136d0:	3301      	adds	r3, #1
 80136d2:	9308      	str	r3, [sp, #32]
 80136d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80136d6:	0006      	movs	r6, r0
 80136d8:	3330      	adds	r3, #48	; 0x30
 80136da:	7013      	strb	r3, [r2, #0]
 80136dc:	0022      	movs	r2, r4
 80136de:	002b      	movs	r3, r5
 80136e0:	000f      	movs	r7, r1
 80136e2:	f7ec feb9 	bl	8000458 <__aeabi_dcmplt>
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d174      	bne.n	80137d4 <_dtoa_r+0x66c>
 80136ea:	0032      	movs	r2, r6
 80136ec:	003b      	movs	r3, r7
 80136ee:	2000      	movs	r0, #0
 80136f0:	4968      	ldr	r1, [pc, #416]	; (8013894 <_dtoa_r+0x72c>)
 80136f2:	f7ef f8b1 	bl	8002858 <__aeabi_dsub>
 80136f6:	0022      	movs	r2, r4
 80136f8:	002b      	movs	r3, r5
 80136fa:	f7ec fead 	bl	8000458 <__aeabi_dcmplt>
 80136fe:	2800      	cmp	r0, #0
 8013700:	d000      	beq.n	8013704 <_dtoa_r+0x59c>
 8013702:	e0d7      	b.n	80138b4 <_dtoa_r+0x74c>
 8013704:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013706:	9a08      	ldr	r2, [sp, #32]
 8013708:	4293      	cmp	r3, r2
 801370a:	d100      	bne.n	801370e <_dtoa_r+0x5a6>
 801370c:	e771      	b.n	80135f2 <_dtoa_r+0x48a>
 801370e:	2200      	movs	r2, #0
 8013710:	0020      	movs	r0, r4
 8013712:	0029      	movs	r1, r5
 8013714:	4b60      	ldr	r3, [pc, #384]	; (8013898 <_dtoa_r+0x730>)
 8013716:	f7ee fddd 	bl	80022d4 <__aeabi_dmul>
 801371a:	4b5f      	ldr	r3, [pc, #380]	; (8013898 <_dtoa_r+0x730>)
 801371c:	0004      	movs	r4, r0
 801371e:	000d      	movs	r5, r1
 8013720:	0030      	movs	r0, r6
 8013722:	0039      	movs	r1, r7
 8013724:	2200      	movs	r2, #0
 8013726:	f7ee fdd5 	bl	80022d4 <__aeabi_dmul>
 801372a:	9b08      	ldr	r3, [sp, #32]
 801372c:	0006      	movs	r6, r0
 801372e:	000f      	movs	r7, r1
 8013730:	9314      	str	r3, [sp, #80]	; 0x50
 8013732:	e7be      	b.n	80136b2 <_dtoa_r+0x54a>
 8013734:	0020      	movs	r0, r4
 8013736:	0029      	movs	r1, r5
 8013738:	f7ee fdcc 	bl	80022d4 <__aeabi_dmul>
 801373c:	9a06      	ldr	r2, [sp, #24]
 801373e:	9b06      	ldr	r3, [sp, #24]
 8013740:	4694      	mov	ip, r2
 8013742:	9308      	str	r3, [sp, #32]
 8013744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013746:	9014      	str	r0, [sp, #80]	; 0x50
 8013748:	9115      	str	r1, [sp, #84]	; 0x54
 801374a:	4463      	add	r3, ip
 801374c:	9319      	str	r3, [sp, #100]	; 0x64
 801374e:	0030      	movs	r0, r6
 8013750:	0039      	movs	r1, r7
 8013752:	f7ef fc21 	bl	8002f98 <__aeabi_d2iz>
 8013756:	9018      	str	r0, [sp, #96]	; 0x60
 8013758:	f7ef fc54 	bl	8003004 <__aeabi_i2d>
 801375c:	0002      	movs	r2, r0
 801375e:	000b      	movs	r3, r1
 8013760:	0030      	movs	r0, r6
 8013762:	0039      	movs	r1, r7
 8013764:	f7ef f878 	bl	8002858 <__aeabi_dsub>
 8013768:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801376a:	9b08      	ldr	r3, [sp, #32]
 801376c:	3630      	adds	r6, #48	; 0x30
 801376e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013770:	701e      	strb	r6, [r3, #0]
 8013772:	3301      	adds	r3, #1
 8013774:	0004      	movs	r4, r0
 8013776:	000d      	movs	r5, r1
 8013778:	9308      	str	r3, [sp, #32]
 801377a:	4293      	cmp	r3, r2
 801377c:	d12d      	bne.n	80137da <_dtoa_r+0x672>
 801377e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013780:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013782:	9a06      	ldr	r2, [sp, #24]
 8013784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013786:	4694      	mov	ip, r2
 8013788:	4463      	add	r3, ip
 801378a:	2200      	movs	r2, #0
 801378c:	9308      	str	r3, [sp, #32]
 801378e:	4b47      	ldr	r3, [pc, #284]	; (80138ac <_dtoa_r+0x744>)
 8013790:	f7ed fe46 	bl	8001420 <__aeabi_dadd>
 8013794:	0002      	movs	r2, r0
 8013796:	000b      	movs	r3, r1
 8013798:	0020      	movs	r0, r4
 801379a:	0029      	movs	r1, r5
 801379c:	f7ec fe70 	bl	8000480 <__aeabi_dcmpgt>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d000      	beq.n	80137a6 <_dtoa_r+0x63e>
 80137a4:	e086      	b.n	80138b4 <_dtoa_r+0x74c>
 80137a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80137a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137aa:	2000      	movs	r0, #0
 80137ac:	493f      	ldr	r1, [pc, #252]	; (80138ac <_dtoa_r+0x744>)
 80137ae:	f7ef f853 	bl	8002858 <__aeabi_dsub>
 80137b2:	0002      	movs	r2, r0
 80137b4:	000b      	movs	r3, r1
 80137b6:	0020      	movs	r0, r4
 80137b8:	0029      	movs	r1, r5
 80137ba:	f7ec fe4d 	bl	8000458 <__aeabi_dcmplt>
 80137be:	2800      	cmp	r0, #0
 80137c0:	d100      	bne.n	80137c4 <_dtoa_r+0x65c>
 80137c2:	e716      	b.n	80135f2 <_dtoa_r+0x48a>
 80137c4:	9b08      	ldr	r3, [sp, #32]
 80137c6:	001a      	movs	r2, r3
 80137c8:	3a01      	subs	r2, #1
 80137ca:	9208      	str	r2, [sp, #32]
 80137cc:	7812      	ldrb	r2, [r2, #0]
 80137ce:	2a30      	cmp	r2, #48	; 0x30
 80137d0:	d0f8      	beq.n	80137c4 <_dtoa_r+0x65c>
 80137d2:	9308      	str	r3, [sp, #32]
 80137d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137d6:	9303      	str	r3, [sp, #12]
 80137d8:	e046      	b.n	8013868 <_dtoa_r+0x700>
 80137da:	2200      	movs	r2, #0
 80137dc:	4b2e      	ldr	r3, [pc, #184]	; (8013898 <_dtoa_r+0x730>)
 80137de:	f7ee fd79 	bl	80022d4 <__aeabi_dmul>
 80137e2:	0006      	movs	r6, r0
 80137e4:	000f      	movs	r7, r1
 80137e6:	e7b2      	b.n	801374e <_dtoa_r+0x5e6>
 80137e8:	9b06      	ldr	r3, [sp, #24]
 80137ea:	9a06      	ldr	r2, [sp, #24]
 80137ec:	930a      	str	r3, [sp, #40]	; 0x28
 80137ee:	9b07      	ldr	r3, [sp, #28]
 80137f0:	9c08      	ldr	r4, [sp, #32]
 80137f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80137f4:	3b01      	subs	r3, #1
 80137f6:	189b      	adds	r3, r3, r2
 80137f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80137fa:	0032      	movs	r2, r6
 80137fc:	003b      	movs	r3, r7
 80137fe:	0020      	movs	r0, r4
 8013800:	0029      	movs	r1, r5
 8013802:	f7ee f96d 	bl	8001ae0 <__aeabi_ddiv>
 8013806:	f7ef fbc7 	bl	8002f98 <__aeabi_d2iz>
 801380a:	9007      	str	r0, [sp, #28]
 801380c:	f7ef fbfa 	bl	8003004 <__aeabi_i2d>
 8013810:	0032      	movs	r2, r6
 8013812:	003b      	movs	r3, r7
 8013814:	f7ee fd5e 	bl	80022d4 <__aeabi_dmul>
 8013818:	0002      	movs	r2, r0
 801381a:	000b      	movs	r3, r1
 801381c:	0020      	movs	r0, r4
 801381e:	0029      	movs	r1, r5
 8013820:	f7ef f81a 	bl	8002858 <__aeabi_dsub>
 8013824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013826:	001a      	movs	r2, r3
 8013828:	3201      	adds	r2, #1
 801382a:	920a      	str	r2, [sp, #40]	; 0x28
 801382c:	9208      	str	r2, [sp, #32]
 801382e:	9a07      	ldr	r2, [sp, #28]
 8013830:	3230      	adds	r2, #48	; 0x30
 8013832:	701a      	strb	r2, [r3, #0]
 8013834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013836:	429a      	cmp	r2, r3
 8013838:	d14f      	bne.n	80138da <_dtoa_r+0x772>
 801383a:	0002      	movs	r2, r0
 801383c:	000b      	movs	r3, r1
 801383e:	f7ed fdef 	bl	8001420 <__aeabi_dadd>
 8013842:	0032      	movs	r2, r6
 8013844:	003b      	movs	r3, r7
 8013846:	0004      	movs	r4, r0
 8013848:	000d      	movs	r5, r1
 801384a:	f7ec fe19 	bl	8000480 <__aeabi_dcmpgt>
 801384e:	2800      	cmp	r0, #0
 8013850:	d12e      	bne.n	80138b0 <_dtoa_r+0x748>
 8013852:	0032      	movs	r2, r6
 8013854:	003b      	movs	r3, r7
 8013856:	0020      	movs	r0, r4
 8013858:	0029      	movs	r1, r5
 801385a:	f7ec fdf7 	bl	800044c <__aeabi_dcmpeq>
 801385e:	2800      	cmp	r0, #0
 8013860:	d002      	beq.n	8013868 <_dtoa_r+0x700>
 8013862:	9b07      	ldr	r3, [sp, #28]
 8013864:	07de      	lsls	r6, r3, #31
 8013866:	d423      	bmi.n	80138b0 <_dtoa_r+0x748>
 8013868:	9905      	ldr	r1, [sp, #20]
 801386a:	9804      	ldr	r0, [sp, #16]
 801386c:	f000 fe86 	bl	801457c <_Bfree>
 8013870:	2300      	movs	r3, #0
 8013872:	9a08      	ldr	r2, [sp, #32]
 8013874:	7013      	strb	r3, [r2, #0]
 8013876:	9b03      	ldr	r3, [sp, #12]
 8013878:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801387a:	3301      	adds	r3, #1
 801387c:	6013      	str	r3, [r2, #0]
 801387e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013880:	2b00      	cmp	r3, #0
 8013882:	d100      	bne.n	8013886 <_dtoa_r+0x71e>
 8013884:	e4ba      	b.n	80131fc <_dtoa_r+0x94>
 8013886:	9a08      	ldr	r2, [sp, #32]
 8013888:	601a      	str	r2, [r3, #0]
 801388a:	e4b7      	b.n	80131fc <_dtoa_r+0x94>
 801388c:	080183e8 	.word	0x080183e8
 8013890:	080183c0 	.word	0x080183c0
 8013894:	3ff00000 	.word	0x3ff00000
 8013898:	40240000 	.word	0x40240000
 801389c:	401c0000 	.word	0x401c0000
 80138a0:	fcc00000 	.word	0xfcc00000
 80138a4:	40140000 	.word	0x40140000
 80138a8:	7cc00000 	.word	0x7cc00000
 80138ac:	3fe00000 	.word	0x3fe00000
 80138b0:	9b03      	ldr	r3, [sp, #12]
 80138b2:	930e      	str	r3, [sp, #56]	; 0x38
 80138b4:	9b08      	ldr	r3, [sp, #32]
 80138b6:	9308      	str	r3, [sp, #32]
 80138b8:	3b01      	subs	r3, #1
 80138ba:	781a      	ldrb	r2, [r3, #0]
 80138bc:	2a39      	cmp	r2, #57	; 0x39
 80138be:	d108      	bne.n	80138d2 <_dtoa_r+0x76a>
 80138c0:	9a06      	ldr	r2, [sp, #24]
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d1f7      	bne.n	80138b6 <_dtoa_r+0x74e>
 80138c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138c8:	9906      	ldr	r1, [sp, #24]
 80138ca:	3201      	adds	r2, #1
 80138cc:	920e      	str	r2, [sp, #56]	; 0x38
 80138ce:	2230      	movs	r2, #48	; 0x30
 80138d0:	700a      	strb	r2, [r1, #0]
 80138d2:	781a      	ldrb	r2, [r3, #0]
 80138d4:	3201      	adds	r2, #1
 80138d6:	701a      	strb	r2, [r3, #0]
 80138d8:	e77c      	b.n	80137d4 <_dtoa_r+0x66c>
 80138da:	2200      	movs	r2, #0
 80138dc:	4ba9      	ldr	r3, [pc, #676]	; (8013b84 <_dtoa_r+0xa1c>)
 80138de:	f7ee fcf9 	bl	80022d4 <__aeabi_dmul>
 80138e2:	2200      	movs	r2, #0
 80138e4:	2300      	movs	r3, #0
 80138e6:	0004      	movs	r4, r0
 80138e8:	000d      	movs	r5, r1
 80138ea:	f7ec fdaf 	bl	800044c <__aeabi_dcmpeq>
 80138ee:	2800      	cmp	r0, #0
 80138f0:	d100      	bne.n	80138f4 <_dtoa_r+0x78c>
 80138f2:	e782      	b.n	80137fa <_dtoa_r+0x692>
 80138f4:	e7b8      	b.n	8013868 <_dtoa_r+0x700>
 80138f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80138f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80138fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80138fc:	2f00      	cmp	r7, #0
 80138fe:	d012      	beq.n	8013926 <_dtoa_r+0x7be>
 8013900:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013902:	2a01      	cmp	r2, #1
 8013904:	dc6e      	bgt.n	80139e4 <_dtoa_r+0x87c>
 8013906:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013908:	2a00      	cmp	r2, #0
 801390a:	d065      	beq.n	80139d8 <_dtoa_r+0x870>
 801390c:	4a9e      	ldr	r2, [pc, #632]	; (8013b88 <_dtoa_r+0xa20>)
 801390e:	189b      	adds	r3, r3, r2
 8013910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013912:	2101      	movs	r1, #1
 8013914:	18d2      	adds	r2, r2, r3
 8013916:	920a      	str	r2, [sp, #40]	; 0x28
 8013918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801391a:	9804      	ldr	r0, [sp, #16]
 801391c:	18d3      	adds	r3, r2, r3
 801391e:	930c      	str	r3, [sp, #48]	; 0x30
 8013920:	f000 ff28 	bl	8014774 <__i2b>
 8013924:	0007      	movs	r7, r0
 8013926:	2c00      	cmp	r4, #0
 8013928:	d00e      	beq.n	8013948 <_dtoa_r+0x7e0>
 801392a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801392c:	2b00      	cmp	r3, #0
 801392e:	dd0b      	ble.n	8013948 <_dtoa_r+0x7e0>
 8013930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013932:	0023      	movs	r3, r4
 8013934:	4294      	cmp	r4, r2
 8013936:	dd00      	ble.n	801393a <_dtoa_r+0x7d2>
 8013938:	0013      	movs	r3, r2
 801393a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801393c:	1ae4      	subs	r4, r4, r3
 801393e:	1ad2      	subs	r2, r2, r3
 8013940:	920a      	str	r2, [sp, #40]	; 0x28
 8013942:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013944:	1ad3      	subs	r3, r2, r3
 8013946:	930c      	str	r3, [sp, #48]	; 0x30
 8013948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801394a:	2b00      	cmp	r3, #0
 801394c:	d01e      	beq.n	801398c <_dtoa_r+0x824>
 801394e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013950:	2b00      	cmp	r3, #0
 8013952:	d05c      	beq.n	8013a0e <_dtoa_r+0x8a6>
 8013954:	2d00      	cmp	r5, #0
 8013956:	dd10      	ble.n	801397a <_dtoa_r+0x812>
 8013958:	0039      	movs	r1, r7
 801395a:	002a      	movs	r2, r5
 801395c:	9804      	ldr	r0, [sp, #16]
 801395e:	f000 ffd1 	bl	8014904 <__pow5mult>
 8013962:	9a05      	ldr	r2, [sp, #20]
 8013964:	0001      	movs	r1, r0
 8013966:	0007      	movs	r7, r0
 8013968:	9804      	ldr	r0, [sp, #16]
 801396a:	f000 ff1b 	bl	80147a4 <__multiply>
 801396e:	0006      	movs	r6, r0
 8013970:	9905      	ldr	r1, [sp, #20]
 8013972:	9804      	ldr	r0, [sp, #16]
 8013974:	f000 fe02 	bl	801457c <_Bfree>
 8013978:	9605      	str	r6, [sp, #20]
 801397a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801397c:	1b5a      	subs	r2, r3, r5
 801397e:	42ab      	cmp	r3, r5
 8013980:	d004      	beq.n	801398c <_dtoa_r+0x824>
 8013982:	9905      	ldr	r1, [sp, #20]
 8013984:	9804      	ldr	r0, [sp, #16]
 8013986:	f000 ffbd 	bl	8014904 <__pow5mult>
 801398a:	9005      	str	r0, [sp, #20]
 801398c:	2101      	movs	r1, #1
 801398e:	9804      	ldr	r0, [sp, #16]
 8013990:	f000 fef0 	bl	8014774 <__i2b>
 8013994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013996:	0006      	movs	r6, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	dd3a      	ble.n	8013a12 <_dtoa_r+0x8aa>
 801399c:	001a      	movs	r2, r3
 801399e:	0001      	movs	r1, r0
 80139a0:	9804      	ldr	r0, [sp, #16]
 80139a2:	f000 ffaf 	bl	8014904 <__pow5mult>
 80139a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80139a8:	0006      	movs	r6, r0
 80139aa:	2500      	movs	r5, #0
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	dc38      	bgt.n	8013a22 <_dtoa_r+0x8ba>
 80139b0:	2500      	movs	r5, #0
 80139b2:	9b08      	ldr	r3, [sp, #32]
 80139b4:	42ab      	cmp	r3, r5
 80139b6:	d130      	bne.n	8013a1a <_dtoa_r+0x8b2>
 80139b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ba:	031b      	lsls	r3, r3, #12
 80139bc:	42ab      	cmp	r3, r5
 80139be:	d12c      	bne.n	8013a1a <_dtoa_r+0x8b2>
 80139c0:	4b72      	ldr	r3, [pc, #456]	; (8013b8c <_dtoa_r+0xa24>)
 80139c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139c4:	4213      	tst	r3, r2
 80139c6:	d028      	beq.n	8013a1a <_dtoa_r+0x8b2>
 80139c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ca:	3501      	adds	r5, #1
 80139cc:	3301      	adds	r3, #1
 80139ce:	930a      	str	r3, [sp, #40]	; 0x28
 80139d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139d2:	3301      	adds	r3, #1
 80139d4:	930c      	str	r3, [sp, #48]	; 0x30
 80139d6:	e020      	b.n	8013a1a <_dtoa_r+0x8b2>
 80139d8:	2336      	movs	r3, #54	; 0x36
 80139da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80139dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80139de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80139e0:	1a9b      	subs	r3, r3, r2
 80139e2:	e795      	b.n	8013910 <_dtoa_r+0x7a8>
 80139e4:	9b07      	ldr	r3, [sp, #28]
 80139e6:	1e5d      	subs	r5, r3, #1
 80139e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139ea:	42ab      	cmp	r3, r5
 80139ec:	db07      	blt.n	80139fe <_dtoa_r+0x896>
 80139ee:	1b5d      	subs	r5, r3, r5
 80139f0:	9b07      	ldr	r3, [sp, #28]
 80139f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	da8b      	bge.n	8013910 <_dtoa_r+0x7a8>
 80139f8:	1ae4      	subs	r4, r4, r3
 80139fa:	2300      	movs	r3, #0
 80139fc:	e788      	b.n	8013910 <_dtoa_r+0x7a8>
 80139fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013a02:	1aeb      	subs	r3, r5, r3
 8013a04:	18d3      	adds	r3, r2, r3
 8013a06:	950d      	str	r5, [sp, #52]	; 0x34
 8013a08:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a0a:	2500      	movs	r5, #0
 8013a0c:	e7f0      	b.n	80139f0 <_dtoa_r+0x888>
 8013a0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a10:	e7b7      	b.n	8013982 <_dtoa_r+0x81a>
 8013a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a14:	2500      	movs	r5, #0
 8013a16:	2b01      	cmp	r3, #1
 8013a18:	ddca      	ble.n	80139b0 <_dtoa_r+0x848>
 8013a1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a1c:	2001      	movs	r0, #1
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d008      	beq.n	8013a34 <_dtoa_r+0x8cc>
 8013a22:	6933      	ldr	r3, [r6, #16]
 8013a24:	3303      	adds	r3, #3
 8013a26:	009b      	lsls	r3, r3, #2
 8013a28:	18f3      	adds	r3, r6, r3
 8013a2a:	6858      	ldr	r0, [r3, #4]
 8013a2c:	f000 fe5a 	bl	80146e4 <__hi0bits>
 8013a30:	2320      	movs	r3, #32
 8013a32:	1a18      	subs	r0, r3, r0
 8013a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a36:	1818      	adds	r0, r3, r0
 8013a38:	0002      	movs	r2, r0
 8013a3a:	231f      	movs	r3, #31
 8013a3c:	401a      	ands	r2, r3
 8013a3e:	4218      	tst	r0, r3
 8013a40:	d047      	beq.n	8013ad2 <_dtoa_r+0x96a>
 8013a42:	3301      	adds	r3, #1
 8013a44:	1a9b      	subs	r3, r3, r2
 8013a46:	2b04      	cmp	r3, #4
 8013a48:	dd3f      	ble.n	8013aca <_dtoa_r+0x962>
 8013a4a:	231c      	movs	r3, #28
 8013a4c:	1a9b      	subs	r3, r3, r2
 8013a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a50:	18e4      	adds	r4, r4, r3
 8013a52:	18d2      	adds	r2, r2, r3
 8013a54:	920a      	str	r2, [sp, #40]	; 0x28
 8013a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a58:	18d3      	adds	r3, r2, r3
 8013a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8013a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	dd05      	ble.n	8013a6e <_dtoa_r+0x906>
 8013a62:	001a      	movs	r2, r3
 8013a64:	9905      	ldr	r1, [sp, #20]
 8013a66:	9804      	ldr	r0, [sp, #16]
 8013a68:	f000 ffa8 	bl	80149bc <__lshift>
 8013a6c:	9005      	str	r0, [sp, #20]
 8013a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	dd05      	ble.n	8013a80 <_dtoa_r+0x918>
 8013a74:	0031      	movs	r1, r6
 8013a76:	001a      	movs	r2, r3
 8013a78:	9804      	ldr	r0, [sp, #16]
 8013a7a:	f000 ff9f 	bl	80149bc <__lshift>
 8013a7e:	0006      	movs	r6, r0
 8013a80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d027      	beq.n	8013ad6 <_dtoa_r+0x96e>
 8013a86:	0031      	movs	r1, r6
 8013a88:	9805      	ldr	r0, [sp, #20]
 8013a8a:	f001 f805 	bl	8014a98 <__mcmp>
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	da21      	bge.n	8013ad6 <_dtoa_r+0x96e>
 8013a92:	9b03      	ldr	r3, [sp, #12]
 8013a94:	220a      	movs	r2, #10
 8013a96:	3b01      	subs	r3, #1
 8013a98:	9303      	str	r3, [sp, #12]
 8013a9a:	9905      	ldr	r1, [sp, #20]
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	9804      	ldr	r0, [sp, #16]
 8013aa0:	f000 fd90 	bl	80145c4 <__multadd>
 8013aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013aa6:	9005      	str	r0, [sp, #20]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d100      	bne.n	8013aae <_dtoa_r+0x946>
 8013aac:	e15d      	b.n	8013d6a <_dtoa_r+0xc02>
 8013aae:	2300      	movs	r3, #0
 8013ab0:	0039      	movs	r1, r7
 8013ab2:	220a      	movs	r2, #10
 8013ab4:	9804      	ldr	r0, [sp, #16]
 8013ab6:	f000 fd85 	bl	80145c4 <__multadd>
 8013aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013abc:	0007      	movs	r7, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	dc49      	bgt.n	8013b56 <_dtoa_r+0x9ee>
 8013ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ac4:	2b02      	cmp	r3, #2
 8013ac6:	dc0e      	bgt.n	8013ae6 <_dtoa_r+0x97e>
 8013ac8:	e045      	b.n	8013b56 <_dtoa_r+0x9ee>
 8013aca:	2b04      	cmp	r3, #4
 8013acc:	d0c6      	beq.n	8013a5c <_dtoa_r+0x8f4>
 8013ace:	331c      	adds	r3, #28
 8013ad0:	e7bd      	b.n	8013a4e <_dtoa_r+0x8e6>
 8013ad2:	0013      	movs	r3, r2
 8013ad4:	e7fb      	b.n	8013ace <_dtoa_r+0x966>
 8013ad6:	9b07      	ldr	r3, [sp, #28]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	dc36      	bgt.n	8013b4a <_dtoa_r+0x9e2>
 8013adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ade:	2b02      	cmp	r3, #2
 8013ae0:	dd33      	ble.n	8013b4a <_dtoa_r+0x9e2>
 8013ae2:	9b07      	ldr	r3, [sp, #28]
 8013ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d10c      	bne.n	8013b06 <_dtoa_r+0x99e>
 8013aec:	0031      	movs	r1, r6
 8013aee:	2205      	movs	r2, #5
 8013af0:	9804      	ldr	r0, [sp, #16]
 8013af2:	f000 fd67 	bl	80145c4 <__multadd>
 8013af6:	0006      	movs	r6, r0
 8013af8:	0001      	movs	r1, r0
 8013afa:	9805      	ldr	r0, [sp, #20]
 8013afc:	f000 ffcc 	bl	8014a98 <__mcmp>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	dd00      	ble.n	8013b06 <_dtoa_r+0x99e>
 8013b04:	e59f      	b.n	8013646 <_dtoa_r+0x4de>
 8013b06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b08:	43db      	mvns	r3, r3
 8013b0a:	9303      	str	r3, [sp, #12]
 8013b0c:	9b06      	ldr	r3, [sp, #24]
 8013b0e:	9308      	str	r3, [sp, #32]
 8013b10:	2500      	movs	r5, #0
 8013b12:	0031      	movs	r1, r6
 8013b14:	9804      	ldr	r0, [sp, #16]
 8013b16:	f000 fd31 	bl	801457c <_Bfree>
 8013b1a:	2f00      	cmp	r7, #0
 8013b1c:	d100      	bne.n	8013b20 <_dtoa_r+0x9b8>
 8013b1e:	e6a3      	b.n	8013868 <_dtoa_r+0x700>
 8013b20:	2d00      	cmp	r5, #0
 8013b22:	d005      	beq.n	8013b30 <_dtoa_r+0x9c8>
 8013b24:	42bd      	cmp	r5, r7
 8013b26:	d003      	beq.n	8013b30 <_dtoa_r+0x9c8>
 8013b28:	0029      	movs	r1, r5
 8013b2a:	9804      	ldr	r0, [sp, #16]
 8013b2c:	f000 fd26 	bl	801457c <_Bfree>
 8013b30:	0039      	movs	r1, r7
 8013b32:	9804      	ldr	r0, [sp, #16]
 8013b34:	f000 fd22 	bl	801457c <_Bfree>
 8013b38:	e696      	b.n	8013868 <_dtoa_r+0x700>
 8013b3a:	2600      	movs	r6, #0
 8013b3c:	0037      	movs	r7, r6
 8013b3e:	e7e2      	b.n	8013b06 <_dtoa_r+0x99e>
 8013b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b42:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013b44:	9303      	str	r3, [sp, #12]
 8013b46:	0037      	movs	r7, r6
 8013b48:	e57d      	b.n	8013646 <_dtoa_r+0x4de>
 8013b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d100      	bne.n	8013b52 <_dtoa_r+0x9ea>
 8013b50:	e0c3      	b.n	8013cda <_dtoa_r+0xb72>
 8013b52:	9b07      	ldr	r3, [sp, #28]
 8013b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b56:	2c00      	cmp	r4, #0
 8013b58:	dd05      	ble.n	8013b66 <_dtoa_r+0x9fe>
 8013b5a:	0039      	movs	r1, r7
 8013b5c:	0022      	movs	r2, r4
 8013b5e:	9804      	ldr	r0, [sp, #16]
 8013b60:	f000 ff2c 	bl	80149bc <__lshift>
 8013b64:	0007      	movs	r7, r0
 8013b66:	0038      	movs	r0, r7
 8013b68:	2d00      	cmp	r5, #0
 8013b6a:	d024      	beq.n	8013bb6 <_dtoa_r+0xa4e>
 8013b6c:	6879      	ldr	r1, [r7, #4]
 8013b6e:	9804      	ldr	r0, [sp, #16]
 8013b70:	f000 fcc0 	bl	80144f4 <_Balloc>
 8013b74:	1e04      	subs	r4, r0, #0
 8013b76:	d111      	bne.n	8013b9c <_dtoa_r+0xa34>
 8013b78:	0022      	movs	r2, r4
 8013b7a:	4b05      	ldr	r3, [pc, #20]	; (8013b90 <_dtoa_r+0xa28>)
 8013b7c:	4805      	ldr	r0, [pc, #20]	; (8013b94 <_dtoa_r+0xa2c>)
 8013b7e:	4906      	ldr	r1, [pc, #24]	; (8013b98 <_dtoa_r+0xa30>)
 8013b80:	f7ff fb07 	bl	8013192 <_dtoa_r+0x2a>
 8013b84:	40240000 	.word	0x40240000
 8013b88:	00000433 	.word	0x00000433
 8013b8c:	7ff00000 	.word	0x7ff00000
 8013b90:	080182f4 	.word	0x080182f4
 8013b94:	0801829c 	.word	0x0801829c
 8013b98:	000002ef 	.word	0x000002ef
 8013b9c:	0039      	movs	r1, r7
 8013b9e:	693a      	ldr	r2, [r7, #16]
 8013ba0:	310c      	adds	r1, #12
 8013ba2:	3202      	adds	r2, #2
 8013ba4:	0092      	lsls	r2, r2, #2
 8013ba6:	300c      	adds	r0, #12
 8013ba8:	f7ff fa1c 	bl	8012fe4 <memcpy>
 8013bac:	2201      	movs	r2, #1
 8013bae:	0021      	movs	r1, r4
 8013bb0:	9804      	ldr	r0, [sp, #16]
 8013bb2:	f000 ff03 	bl	80149bc <__lshift>
 8013bb6:	9b06      	ldr	r3, [sp, #24]
 8013bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bba:	9307      	str	r3, [sp, #28]
 8013bbc:	3b01      	subs	r3, #1
 8013bbe:	189b      	adds	r3, r3, r2
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	003d      	movs	r5, r7
 8013bc4:	0007      	movs	r7, r0
 8013bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8013bc8:	9b08      	ldr	r3, [sp, #32]
 8013bca:	4013      	ands	r3, r2
 8013bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8013bce:	0031      	movs	r1, r6
 8013bd0:	9805      	ldr	r0, [sp, #20]
 8013bd2:	f7ff fa39 	bl	8013048 <quorem>
 8013bd6:	0029      	movs	r1, r5
 8013bd8:	0004      	movs	r4, r0
 8013bda:	900b      	str	r0, [sp, #44]	; 0x2c
 8013bdc:	9805      	ldr	r0, [sp, #20]
 8013bde:	f000 ff5b 	bl	8014a98 <__mcmp>
 8013be2:	003a      	movs	r2, r7
 8013be4:	900c      	str	r0, [sp, #48]	; 0x30
 8013be6:	0031      	movs	r1, r6
 8013be8:	9804      	ldr	r0, [sp, #16]
 8013bea:	f000 ff71 	bl	8014ad0 <__mdiff>
 8013bee:	2201      	movs	r2, #1
 8013bf0:	68c3      	ldr	r3, [r0, #12]
 8013bf2:	3430      	adds	r4, #48	; 0x30
 8013bf4:	9008      	str	r0, [sp, #32]
 8013bf6:	920a      	str	r2, [sp, #40]	; 0x28
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d104      	bne.n	8013c06 <_dtoa_r+0xa9e>
 8013bfc:	0001      	movs	r1, r0
 8013bfe:	9805      	ldr	r0, [sp, #20]
 8013c00:	f000 ff4a 	bl	8014a98 <__mcmp>
 8013c04:	900a      	str	r0, [sp, #40]	; 0x28
 8013c06:	9908      	ldr	r1, [sp, #32]
 8013c08:	9804      	ldr	r0, [sp, #16]
 8013c0a:	f000 fcb7 	bl	801457c <_Bfree>
 8013c0e:	9b07      	ldr	r3, [sp, #28]
 8013c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c12:	3301      	adds	r3, #1
 8013c14:	9308      	str	r3, [sp, #32]
 8013c16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013c18:	4313      	orrs	r3, r2
 8013c1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c1c:	4313      	orrs	r3, r2
 8013c1e:	d109      	bne.n	8013c34 <_dtoa_r+0xacc>
 8013c20:	2c39      	cmp	r4, #57	; 0x39
 8013c22:	d022      	beq.n	8013c6a <_dtoa_r+0xb02>
 8013c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	dd01      	ble.n	8013c2e <_dtoa_r+0xac6>
 8013c2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013c2c:	3431      	adds	r4, #49	; 0x31
 8013c2e:	9b07      	ldr	r3, [sp, #28]
 8013c30:	701c      	strb	r4, [r3, #0]
 8013c32:	e76e      	b.n	8013b12 <_dtoa_r+0x9aa>
 8013c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	db04      	blt.n	8013c44 <_dtoa_r+0xadc>
 8013c3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c40:	4313      	orrs	r3, r2
 8013c42:	d11e      	bne.n	8013c82 <_dtoa_r+0xb1a>
 8013c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	ddf1      	ble.n	8013c2e <_dtoa_r+0xac6>
 8013c4a:	9905      	ldr	r1, [sp, #20]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	9804      	ldr	r0, [sp, #16]
 8013c50:	f000 feb4 	bl	80149bc <__lshift>
 8013c54:	0031      	movs	r1, r6
 8013c56:	9005      	str	r0, [sp, #20]
 8013c58:	f000 ff1e 	bl	8014a98 <__mcmp>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	dc02      	bgt.n	8013c66 <_dtoa_r+0xafe>
 8013c60:	d1e5      	bne.n	8013c2e <_dtoa_r+0xac6>
 8013c62:	07e3      	lsls	r3, r4, #31
 8013c64:	d5e3      	bpl.n	8013c2e <_dtoa_r+0xac6>
 8013c66:	2c39      	cmp	r4, #57	; 0x39
 8013c68:	d1df      	bne.n	8013c2a <_dtoa_r+0xac2>
 8013c6a:	2339      	movs	r3, #57	; 0x39
 8013c6c:	9a07      	ldr	r2, [sp, #28]
 8013c6e:	7013      	strb	r3, [r2, #0]
 8013c70:	9b08      	ldr	r3, [sp, #32]
 8013c72:	9308      	str	r3, [sp, #32]
 8013c74:	3b01      	subs	r3, #1
 8013c76:	781a      	ldrb	r2, [r3, #0]
 8013c78:	2a39      	cmp	r2, #57	; 0x39
 8013c7a:	d063      	beq.n	8013d44 <_dtoa_r+0xbdc>
 8013c7c:	3201      	adds	r2, #1
 8013c7e:	701a      	strb	r2, [r3, #0]
 8013c80:	e747      	b.n	8013b12 <_dtoa_r+0x9aa>
 8013c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	dd03      	ble.n	8013c90 <_dtoa_r+0xb28>
 8013c88:	2c39      	cmp	r4, #57	; 0x39
 8013c8a:	d0ee      	beq.n	8013c6a <_dtoa_r+0xb02>
 8013c8c:	3401      	adds	r4, #1
 8013c8e:	e7ce      	b.n	8013c2e <_dtoa_r+0xac6>
 8013c90:	9b07      	ldr	r3, [sp, #28]
 8013c92:	9a07      	ldr	r2, [sp, #28]
 8013c94:	701c      	strb	r4, [r3, #0]
 8013c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d03e      	beq.n	8013d1a <_dtoa_r+0xbb2>
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	220a      	movs	r2, #10
 8013ca0:	9905      	ldr	r1, [sp, #20]
 8013ca2:	9804      	ldr	r0, [sp, #16]
 8013ca4:	f000 fc8e 	bl	80145c4 <__multadd>
 8013ca8:	2300      	movs	r3, #0
 8013caa:	9005      	str	r0, [sp, #20]
 8013cac:	220a      	movs	r2, #10
 8013cae:	0029      	movs	r1, r5
 8013cb0:	9804      	ldr	r0, [sp, #16]
 8013cb2:	42bd      	cmp	r5, r7
 8013cb4:	d106      	bne.n	8013cc4 <_dtoa_r+0xb5c>
 8013cb6:	f000 fc85 	bl	80145c4 <__multadd>
 8013cba:	0005      	movs	r5, r0
 8013cbc:	0007      	movs	r7, r0
 8013cbe:	9b08      	ldr	r3, [sp, #32]
 8013cc0:	9307      	str	r3, [sp, #28]
 8013cc2:	e784      	b.n	8013bce <_dtoa_r+0xa66>
 8013cc4:	f000 fc7e 	bl	80145c4 <__multadd>
 8013cc8:	0039      	movs	r1, r7
 8013cca:	0005      	movs	r5, r0
 8013ccc:	2300      	movs	r3, #0
 8013cce:	220a      	movs	r2, #10
 8013cd0:	9804      	ldr	r0, [sp, #16]
 8013cd2:	f000 fc77 	bl	80145c4 <__multadd>
 8013cd6:	0007      	movs	r7, r0
 8013cd8:	e7f1      	b.n	8013cbe <_dtoa_r+0xb56>
 8013cda:	9b07      	ldr	r3, [sp, #28]
 8013cdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cde:	2500      	movs	r5, #0
 8013ce0:	0031      	movs	r1, r6
 8013ce2:	9805      	ldr	r0, [sp, #20]
 8013ce4:	f7ff f9b0 	bl	8013048 <quorem>
 8013ce8:	9b06      	ldr	r3, [sp, #24]
 8013cea:	3030      	adds	r0, #48	; 0x30
 8013cec:	5558      	strb	r0, [r3, r5]
 8013cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cf0:	3501      	adds	r5, #1
 8013cf2:	0004      	movs	r4, r0
 8013cf4:	42ab      	cmp	r3, r5
 8013cf6:	dd07      	ble.n	8013d08 <_dtoa_r+0xba0>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	220a      	movs	r2, #10
 8013cfc:	9905      	ldr	r1, [sp, #20]
 8013cfe:	9804      	ldr	r0, [sp, #16]
 8013d00:	f000 fc60 	bl	80145c4 <__multadd>
 8013d04:	9005      	str	r0, [sp, #20]
 8013d06:	e7eb      	b.n	8013ce0 <_dtoa_r+0xb78>
 8013d08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	2a00      	cmp	r2, #0
 8013d0e:	dd00      	ble.n	8013d12 <_dtoa_r+0xbaa>
 8013d10:	0013      	movs	r3, r2
 8013d12:	2500      	movs	r5, #0
 8013d14:	9a06      	ldr	r2, [sp, #24]
 8013d16:	18d3      	adds	r3, r2, r3
 8013d18:	9308      	str	r3, [sp, #32]
 8013d1a:	9905      	ldr	r1, [sp, #20]
 8013d1c:	2201      	movs	r2, #1
 8013d1e:	9804      	ldr	r0, [sp, #16]
 8013d20:	f000 fe4c 	bl	80149bc <__lshift>
 8013d24:	0031      	movs	r1, r6
 8013d26:	9005      	str	r0, [sp, #20]
 8013d28:	f000 feb6 	bl	8014a98 <__mcmp>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	dc9f      	bgt.n	8013c70 <_dtoa_r+0xb08>
 8013d30:	d101      	bne.n	8013d36 <_dtoa_r+0xbce>
 8013d32:	07e4      	lsls	r4, r4, #31
 8013d34:	d49c      	bmi.n	8013c70 <_dtoa_r+0xb08>
 8013d36:	9b08      	ldr	r3, [sp, #32]
 8013d38:	9308      	str	r3, [sp, #32]
 8013d3a:	3b01      	subs	r3, #1
 8013d3c:	781a      	ldrb	r2, [r3, #0]
 8013d3e:	2a30      	cmp	r2, #48	; 0x30
 8013d40:	d0fa      	beq.n	8013d38 <_dtoa_r+0xbd0>
 8013d42:	e6e6      	b.n	8013b12 <_dtoa_r+0x9aa>
 8013d44:	9a06      	ldr	r2, [sp, #24]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d193      	bne.n	8013c72 <_dtoa_r+0xb0a>
 8013d4a:	9b03      	ldr	r3, [sp, #12]
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	9303      	str	r3, [sp, #12]
 8013d50:	2331      	movs	r3, #49	; 0x31
 8013d52:	7013      	strb	r3, [r2, #0]
 8013d54:	e6dd      	b.n	8013b12 <_dtoa_r+0x9aa>
 8013d56:	4b09      	ldr	r3, [pc, #36]	; (8013d7c <_dtoa_r+0xc14>)
 8013d58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013d5a:	9306      	str	r3, [sp, #24]
 8013d5c:	4b08      	ldr	r3, [pc, #32]	; (8013d80 <_dtoa_r+0xc18>)
 8013d5e:	2a00      	cmp	r2, #0
 8013d60:	d001      	beq.n	8013d66 <_dtoa_r+0xbfe>
 8013d62:	f7ff fa49 	bl	80131f8 <_dtoa_r+0x90>
 8013d66:	f7ff fa49 	bl	80131fc <_dtoa_r+0x94>
 8013d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	dcb6      	bgt.n	8013cde <_dtoa_r+0xb76>
 8013d70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d72:	2b02      	cmp	r3, #2
 8013d74:	dd00      	ble.n	8013d78 <_dtoa_r+0xc10>
 8013d76:	e6b6      	b.n	8013ae6 <_dtoa_r+0x97e>
 8013d78:	e7b1      	b.n	8013cde <_dtoa_r+0xb76>
 8013d7a:	46c0      	nop			; (mov r8, r8)
 8013d7c:	0801828f 	.word	0x0801828f
 8013d80:	08018297 	.word	0x08018297

08013d84 <_free_r>:
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	0005      	movs	r5, r0
 8013d88:	2900      	cmp	r1, #0
 8013d8a:	d010      	beq.n	8013dae <_free_r+0x2a>
 8013d8c:	1f0c      	subs	r4, r1, #4
 8013d8e:	6823      	ldr	r3, [r4, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	da00      	bge.n	8013d96 <_free_r+0x12>
 8013d94:	18e4      	adds	r4, r4, r3
 8013d96:	0028      	movs	r0, r5
 8013d98:	f7fd f8c8 	bl	8010f2c <__malloc_lock>
 8013d9c:	4a1d      	ldr	r2, [pc, #116]	; (8013e14 <_free_r+0x90>)
 8013d9e:	6813      	ldr	r3, [r2, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d105      	bne.n	8013db0 <_free_r+0x2c>
 8013da4:	6063      	str	r3, [r4, #4]
 8013da6:	6014      	str	r4, [r2, #0]
 8013da8:	0028      	movs	r0, r5
 8013daa:	f7fd f8c7 	bl	8010f3c <__malloc_unlock>
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
 8013db0:	42a3      	cmp	r3, r4
 8013db2:	d908      	bls.n	8013dc6 <_free_r+0x42>
 8013db4:	6820      	ldr	r0, [r4, #0]
 8013db6:	1821      	adds	r1, r4, r0
 8013db8:	428b      	cmp	r3, r1
 8013dba:	d1f3      	bne.n	8013da4 <_free_r+0x20>
 8013dbc:	6819      	ldr	r1, [r3, #0]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	1809      	adds	r1, r1, r0
 8013dc2:	6021      	str	r1, [r4, #0]
 8013dc4:	e7ee      	b.n	8013da4 <_free_r+0x20>
 8013dc6:	001a      	movs	r2, r3
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d001      	beq.n	8013dd2 <_free_r+0x4e>
 8013dce:	42a3      	cmp	r3, r4
 8013dd0:	d9f9      	bls.n	8013dc6 <_free_r+0x42>
 8013dd2:	6811      	ldr	r1, [r2, #0]
 8013dd4:	1850      	adds	r0, r2, r1
 8013dd6:	42a0      	cmp	r0, r4
 8013dd8:	d10b      	bne.n	8013df2 <_free_r+0x6e>
 8013dda:	6820      	ldr	r0, [r4, #0]
 8013ddc:	1809      	adds	r1, r1, r0
 8013dde:	1850      	adds	r0, r2, r1
 8013de0:	6011      	str	r1, [r2, #0]
 8013de2:	4283      	cmp	r3, r0
 8013de4:	d1e0      	bne.n	8013da8 <_free_r+0x24>
 8013de6:	6818      	ldr	r0, [r3, #0]
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	1841      	adds	r1, r0, r1
 8013dec:	6011      	str	r1, [r2, #0]
 8013dee:	6053      	str	r3, [r2, #4]
 8013df0:	e7da      	b.n	8013da8 <_free_r+0x24>
 8013df2:	42a0      	cmp	r0, r4
 8013df4:	d902      	bls.n	8013dfc <_free_r+0x78>
 8013df6:	230c      	movs	r3, #12
 8013df8:	602b      	str	r3, [r5, #0]
 8013dfa:	e7d5      	b.n	8013da8 <_free_r+0x24>
 8013dfc:	6820      	ldr	r0, [r4, #0]
 8013dfe:	1821      	adds	r1, r4, r0
 8013e00:	428b      	cmp	r3, r1
 8013e02:	d103      	bne.n	8013e0c <_free_r+0x88>
 8013e04:	6819      	ldr	r1, [r3, #0]
 8013e06:	685b      	ldr	r3, [r3, #4]
 8013e08:	1809      	adds	r1, r1, r0
 8013e0a:	6021      	str	r1, [r4, #0]
 8013e0c:	6063      	str	r3, [r4, #4]
 8013e0e:	6054      	str	r4, [r2, #4]
 8013e10:	e7ca      	b.n	8013da8 <_free_r+0x24>
 8013e12:	46c0      	nop			; (mov r8, r8)
 8013e14:	20005734 	.word	0x20005734

08013e18 <rshift>:
 8013e18:	0002      	movs	r2, r0
 8013e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e1c:	6904      	ldr	r4, [r0, #16]
 8013e1e:	114b      	asrs	r3, r1, #5
 8013e20:	b085      	sub	sp, #20
 8013e22:	3214      	adds	r2, #20
 8013e24:	9302      	str	r3, [sp, #8]
 8013e26:	114d      	asrs	r5, r1, #5
 8013e28:	0013      	movs	r3, r2
 8013e2a:	42ac      	cmp	r4, r5
 8013e2c:	dd32      	ble.n	8013e94 <rshift+0x7c>
 8013e2e:	261f      	movs	r6, #31
 8013e30:	000f      	movs	r7, r1
 8013e32:	114b      	asrs	r3, r1, #5
 8013e34:	009b      	lsls	r3, r3, #2
 8013e36:	00a5      	lsls	r5, r4, #2
 8013e38:	18d3      	adds	r3, r2, r3
 8013e3a:	4037      	ands	r7, r6
 8013e3c:	1955      	adds	r5, r2, r5
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	9701      	str	r7, [sp, #4]
 8013e42:	4231      	tst	r1, r6
 8013e44:	d10d      	bne.n	8013e62 <rshift+0x4a>
 8013e46:	0016      	movs	r6, r2
 8013e48:	0019      	movs	r1, r3
 8013e4a:	428d      	cmp	r5, r1
 8013e4c:	d836      	bhi.n	8013ebc <rshift+0xa4>
 8013e4e:	9900      	ldr	r1, [sp, #0]
 8013e50:	2300      	movs	r3, #0
 8013e52:	3903      	subs	r1, #3
 8013e54:	428d      	cmp	r5, r1
 8013e56:	d302      	bcc.n	8013e5e <rshift+0x46>
 8013e58:	9b02      	ldr	r3, [sp, #8]
 8013e5a:	1ae4      	subs	r4, r4, r3
 8013e5c:	00a3      	lsls	r3, r4, #2
 8013e5e:	18d3      	adds	r3, r2, r3
 8013e60:	e018      	b.n	8013e94 <rshift+0x7c>
 8013e62:	2120      	movs	r1, #32
 8013e64:	9e01      	ldr	r6, [sp, #4]
 8013e66:	9f01      	ldr	r7, [sp, #4]
 8013e68:	1b89      	subs	r1, r1, r6
 8013e6a:	9e00      	ldr	r6, [sp, #0]
 8013e6c:	9103      	str	r1, [sp, #12]
 8013e6e:	ce02      	ldmia	r6!, {r1}
 8013e70:	4694      	mov	ip, r2
 8013e72:	40f9      	lsrs	r1, r7
 8013e74:	42b5      	cmp	r5, r6
 8013e76:	d816      	bhi.n	8013ea6 <rshift+0x8e>
 8013e78:	9e00      	ldr	r6, [sp, #0]
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	3601      	adds	r6, #1
 8013e7e:	42b5      	cmp	r5, r6
 8013e80:	d303      	bcc.n	8013e8a <rshift+0x72>
 8013e82:	9b02      	ldr	r3, [sp, #8]
 8013e84:	1ae3      	subs	r3, r4, r3
 8013e86:	009b      	lsls	r3, r3, #2
 8013e88:	3b04      	subs	r3, #4
 8013e8a:	18d3      	adds	r3, r2, r3
 8013e8c:	6019      	str	r1, [r3, #0]
 8013e8e:	2900      	cmp	r1, #0
 8013e90:	d000      	beq.n	8013e94 <rshift+0x7c>
 8013e92:	3304      	adds	r3, #4
 8013e94:	1a99      	subs	r1, r3, r2
 8013e96:	1089      	asrs	r1, r1, #2
 8013e98:	6101      	str	r1, [r0, #16]
 8013e9a:	4293      	cmp	r3, r2
 8013e9c:	d101      	bne.n	8013ea2 <rshift+0x8a>
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	6143      	str	r3, [r0, #20]
 8013ea2:	b005      	add	sp, #20
 8013ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ea6:	6837      	ldr	r7, [r6, #0]
 8013ea8:	9b03      	ldr	r3, [sp, #12]
 8013eaa:	409f      	lsls	r7, r3
 8013eac:	430f      	orrs	r7, r1
 8013eae:	4661      	mov	r1, ip
 8013eb0:	c180      	stmia	r1!, {r7}
 8013eb2:	468c      	mov	ip, r1
 8013eb4:	9b01      	ldr	r3, [sp, #4]
 8013eb6:	ce02      	ldmia	r6!, {r1}
 8013eb8:	40d9      	lsrs	r1, r3
 8013eba:	e7db      	b.n	8013e74 <rshift+0x5c>
 8013ebc:	c980      	ldmia	r1!, {r7}
 8013ebe:	c680      	stmia	r6!, {r7}
 8013ec0:	e7c3      	b.n	8013e4a <rshift+0x32>

08013ec2 <__hexdig_fun>:
 8013ec2:	0002      	movs	r2, r0
 8013ec4:	3a30      	subs	r2, #48	; 0x30
 8013ec6:	0003      	movs	r3, r0
 8013ec8:	2a09      	cmp	r2, #9
 8013eca:	d802      	bhi.n	8013ed2 <__hexdig_fun+0x10>
 8013ecc:	3b20      	subs	r3, #32
 8013ece:	b2d8      	uxtb	r0, r3
 8013ed0:	4770      	bx	lr
 8013ed2:	0002      	movs	r2, r0
 8013ed4:	3a61      	subs	r2, #97	; 0x61
 8013ed6:	2a05      	cmp	r2, #5
 8013ed8:	d801      	bhi.n	8013ede <__hexdig_fun+0x1c>
 8013eda:	3b47      	subs	r3, #71	; 0x47
 8013edc:	e7f7      	b.n	8013ece <__hexdig_fun+0xc>
 8013ede:	001a      	movs	r2, r3
 8013ee0:	3a41      	subs	r2, #65	; 0x41
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	2a05      	cmp	r2, #5
 8013ee6:	d8f3      	bhi.n	8013ed0 <__hexdig_fun+0xe>
 8013ee8:	3b27      	subs	r3, #39	; 0x27
 8013eea:	e7f0      	b.n	8013ece <__hexdig_fun+0xc>

08013eec <__gethex>:
 8013eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eee:	b089      	sub	sp, #36	; 0x24
 8013ef0:	9307      	str	r3, [sp, #28]
 8013ef2:	2302      	movs	r3, #2
 8013ef4:	9201      	str	r2, [sp, #4]
 8013ef6:	680a      	ldr	r2, [r1, #0]
 8013ef8:	425b      	negs	r3, r3
 8013efa:	9003      	str	r0, [sp, #12]
 8013efc:	9106      	str	r1, [sp, #24]
 8013efe:	1c96      	adds	r6, r2, #2
 8013f00:	1a9b      	subs	r3, r3, r2
 8013f02:	199a      	adds	r2, r3, r6
 8013f04:	9600      	str	r6, [sp, #0]
 8013f06:	9205      	str	r2, [sp, #20]
 8013f08:	9a00      	ldr	r2, [sp, #0]
 8013f0a:	3601      	adds	r6, #1
 8013f0c:	7810      	ldrb	r0, [r2, #0]
 8013f0e:	2830      	cmp	r0, #48	; 0x30
 8013f10:	d0f7      	beq.n	8013f02 <__gethex+0x16>
 8013f12:	f7ff ffd6 	bl	8013ec2 <__hexdig_fun>
 8013f16:	2300      	movs	r3, #0
 8013f18:	001d      	movs	r5, r3
 8013f1a:	9302      	str	r3, [sp, #8]
 8013f1c:	4298      	cmp	r0, r3
 8013f1e:	d11d      	bne.n	8013f5c <__gethex+0x70>
 8013f20:	2201      	movs	r2, #1
 8013f22:	49a6      	ldr	r1, [pc, #664]	; (80141bc <__gethex+0x2d0>)
 8013f24:	9800      	ldr	r0, [sp, #0]
 8013f26:	f7fe feb8 	bl	8012c9a <strncmp>
 8013f2a:	0007      	movs	r7, r0
 8013f2c:	42a8      	cmp	r0, r5
 8013f2e:	d169      	bne.n	8014004 <__gethex+0x118>
 8013f30:	9b00      	ldr	r3, [sp, #0]
 8013f32:	0034      	movs	r4, r6
 8013f34:	7858      	ldrb	r0, [r3, #1]
 8013f36:	f7ff ffc4 	bl	8013ec2 <__hexdig_fun>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	9302      	str	r3, [sp, #8]
 8013f3e:	42a8      	cmp	r0, r5
 8013f40:	d02f      	beq.n	8013fa2 <__gethex+0xb6>
 8013f42:	9600      	str	r6, [sp, #0]
 8013f44:	9b00      	ldr	r3, [sp, #0]
 8013f46:	7818      	ldrb	r0, [r3, #0]
 8013f48:	2830      	cmp	r0, #48	; 0x30
 8013f4a:	d009      	beq.n	8013f60 <__gethex+0x74>
 8013f4c:	f7ff ffb9 	bl	8013ec2 <__hexdig_fun>
 8013f50:	4242      	negs	r2, r0
 8013f52:	4142      	adcs	r2, r0
 8013f54:	2301      	movs	r3, #1
 8013f56:	0035      	movs	r5, r6
 8013f58:	9202      	str	r2, [sp, #8]
 8013f5a:	9305      	str	r3, [sp, #20]
 8013f5c:	9c00      	ldr	r4, [sp, #0]
 8013f5e:	e004      	b.n	8013f6a <__gethex+0x7e>
 8013f60:	9b00      	ldr	r3, [sp, #0]
 8013f62:	3301      	adds	r3, #1
 8013f64:	9300      	str	r3, [sp, #0]
 8013f66:	e7ed      	b.n	8013f44 <__gethex+0x58>
 8013f68:	3401      	adds	r4, #1
 8013f6a:	7820      	ldrb	r0, [r4, #0]
 8013f6c:	f7ff ffa9 	bl	8013ec2 <__hexdig_fun>
 8013f70:	1e07      	subs	r7, r0, #0
 8013f72:	d1f9      	bne.n	8013f68 <__gethex+0x7c>
 8013f74:	2201      	movs	r2, #1
 8013f76:	0020      	movs	r0, r4
 8013f78:	4990      	ldr	r1, [pc, #576]	; (80141bc <__gethex+0x2d0>)
 8013f7a:	f7fe fe8e 	bl	8012c9a <strncmp>
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	d10d      	bne.n	8013f9e <__gethex+0xb2>
 8013f82:	2d00      	cmp	r5, #0
 8013f84:	d106      	bne.n	8013f94 <__gethex+0xa8>
 8013f86:	3401      	adds	r4, #1
 8013f88:	0025      	movs	r5, r4
 8013f8a:	7820      	ldrb	r0, [r4, #0]
 8013f8c:	f7ff ff99 	bl	8013ec2 <__hexdig_fun>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d102      	bne.n	8013f9a <__gethex+0xae>
 8013f94:	1b2d      	subs	r5, r5, r4
 8013f96:	00af      	lsls	r7, r5, #2
 8013f98:	e003      	b.n	8013fa2 <__gethex+0xb6>
 8013f9a:	3401      	adds	r4, #1
 8013f9c:	e7f5      	b.n	8013f8a <__gethex+0x9e>
 8013f9e:	2d00      	cmp	r5, #0
 8013fa0:	d1f8      	bne.n	8013f94 <__gethex+0xa8>
 8013fa2:	2220      	movs	r2, #32
 8013fa4:	7823      	ldrb	r3, [r4, #0]
 8013fa6:	0026      	movs	r6, r4
 8013fa8:	4393      	bics	r3, r2
 8013faa:	2b50      	cmp	r3, #80	; 0x50
 8013fac:	d11d      	bne.n	8013fea <__gethex+0xfe>
 8013fae:	7863      	ldrb	r3, [r4, #1]
 8013fb0:	2b2b      	cmp	r3, #43	; 0x2b
 8013fb2:	d02c      	beq.n	801400e <__gethex+0x122>
 8013fb4:	2b2d      	cmp	r3, #45	; 0x2d
 8013fb6:	d02e      	beq.n	8014016 <__gethex+0x12a>
 8013fb8:	2300      	movs	r3, #0
 8013fba:	1c66      	adds	r6, r4, #1
 8013fbc:	9304      	str	r3, [sp, #16]
 8013fbe:	7830      	ldrb	r0, [r6, #0]
 8013fc0:	f7ff ff7f 	bl	8013ec2 <__hexdig_fun>
 8013fc4:	1e43      	subs	r3, r0, #1
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	2b18      	cmp	r3, #24
 8013fca:	d82b      	bhi.n	8014024 <__gethex+0x138>
 8013fcc:	3810      	subs	r0, #16
 8013fce:	0005      	movs	r5, r0
 8013fd0:	7870      	ldrb	r0, [r6, #1]
 8013fd2:	f7ff ff76 	bl	8013ec2 <__hexdig_fun>
 8013fd6:	1e43      	subs	r3, r0, #1
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	3601      	adds	r6, #1
 8013fdc:	2b18      	cmp	r3, #24
 8013fde:	d91c      	bls.n	801401a <__gethex+0x12e>
 8013fe0:	9b04      	ldr	r3, [sp, #16]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d000      	beq.n	8013fe8 <__gethex+0xfc>
 8013fe6:	426d      	negs	r5, r5
 8013fe8:	197f      	adds	r7, r7, r5
 8013fea:	9b06      	ldr	r3, [sp, #24]
 8013fec:	601e      	str	r6, [r3, #0]
 8013fee:	9b02      	ldr	r3, [sp, #8]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d019      	beq.n	8014028 <__gethex+0x13c>
 8013ff4:	2600      	movs	r6, #0
 8013ff6:	9b05      	ldr	r3, [sp, #20]
 8013ff8:	42b3      	cmp	r3, r6
 8013ffa:	d100      	bne.n	8013ffe <__gethex+0x112>
 8013ffc:	3606      	adds	r6, #6
 8013ffe:	0030      	movs	r0, r6
 8014000:	b009      	add	sp, #36	; 0x24
 8014002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014004:	2301      	movs	r3, #1
 8014006:	2700      	movs	r7, #0
 8014008:	9c00      	ldr	r4, [sp, #0]
 801400a:	9302      	str	r3, [sp, #8]
 801400c:	e7c9      	b.n	8013fa2 <__gethex+0xb6>
 801400e:	2300      	movs	r3, #0
 8014010:	9304      	str	r3, [sp, #16]
 8014012:	1ca6      	adds	r6, r4, #2
 8014014:	e7d3      	b.n	8013fbe <__gethex+0xd2>
 8014016:	2301      	movs	r3, #1
 8014018:	e7fa      	b.n	8014010 <__gethex+0x124>
 801401a:	230a      	movs	r3, #10
 801401c:	435d      	muls	r5, r3
 801401e:	182d      	adds	r5, r5, r0
 8014020:	3d10      	subs	r5, #16
 8014022:	e7d5      	b.n	8013fd0 <__gethex+0xe4>
 8014024:	0026      	movs	r6, r4
 8014026:	e7e0      	b.n	8013fea <__gethex+0xfe>
 8014028:	9b00      	ldr	r3, [sp, #0]
 801402a:	9902      	ldr	r1, [sp, #8]
 801402c:	1ae3      	subs	r3, r4, r3
 801402e:	3b01      	subs	r3, #1
 8014030:	2b07      	cmp	r3, #7
 8014032:	dc0a      	bgt.n	801404a <__gethex+0x15e>
 8014034:	9803      	ldr	r0, [sp, #12]
 8014036:	f000 fa5d 	bl	80144f4 <_Balloc>
 801403a:	1e05      	subs	r5, r0, #0
 801403c:	d108      	bne.n	8014050 <__gethex+0x164>
 801403e:	002a      	movs	r2, r5
 8014040:	21e4      	movs	r1, #228	; 0xe4
 8014042:	4b5f      	ldr	r3, [pc, #380]	; (80141c0 <__gethex+0x2d4>)
 8014044:	485f      	ldr	r0, [pc, #380]	; (80141c4 <__gethex+0x2d8>)
 8014046:	f7fe ffe1 	bl	801300c <__assert_func>
 801404a:	3101      	adds	r1, #1
 801404c:	105b      	asrs	r3, r3, #1
 801404e:	e7ef      	b.n	8014030 <__gethex+0x144>
 8014050:	0003      	movs	r3, r0
 8014052:	3314      	adds	r3, #20
 8014054:	9302      	str	r3, [sp, #8]
 8014056:	9305      	str	r3, [sp, #20]
 8014058:	2300      	movs	r3, #0
 801405a:	001e      	movs	r6, r3
 801405c:	9304      	str	r3, [sp, #16]
 801405e:	9b00      	ldr	r3, [sp, #0]
 8014060:	42a3      	cmp	r3, r4
 8014062:	d33f      	bcc.n	80140e4 <__gethex+0x1f8>
 8014064:	9c05      	ldr	r4, [sp, #20]
 8014066:	9b02      	ldr	r3, [sp, #8]
 8014068:	c440      	stmia	r4!, {r6}
 801406a:	1ae4      	subs	r4, r4, r3
 801406c:	10a4      	asrs	r4, r4, #2
 801406e:	0030      	movs	r0, r6
 8014070:	612c      	str	r4, [r5, #16]
 8014072:	f000 fb37 	bl	80146e4 <__hi0bits>
 8014076:	9b01      	ldr	r3, [sp, #4]
 8014078:	0164      	lsls	r4, r4, #5
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	1a26      	subs	r6, r4, r0
 801407e:	9300      	str	r3, [sp, #0]
 8014080:	429e      	cmp	r6, r3
 8014082:	dd51      	ble.n	8014128 <__gethex+0x23c>
 8014084:	1af6      	subs	r6, r6, r3
 8014086:	0031      	movs	r1, r6
 8014088:	0028      	movs	r0, r5
 801408a:	f000 fecb 	bl	8014e24 <__any_on>
 801408e:	1e04      	subs	r4, r0, #0
 8014090:	d016      	beq.n	80140c0 <__gethex+0x1d4>
 8014092:	2401      	movs	r4, #1
 8014094:	231f      	movs	r3, #31
 8014096:	0020      	movs	r0, r4
 8014098:	1e72      	subs	r2, r6, #1
 801409a:	4013      	ands	r3, r2
 801409c:	4098      	lsls	r0, r3
 801409e:	0003      	movs	r3, r0
 80140a0:	1151      	asrs	r1, r2, #5
 80140a2:	9802      	ldr	r0, [sp, #8]
 80140a4:	0089      	lsls	r1, r1, #2
 80140a6:	5809      	ldr	r1, [r1, r0]
 80140a8:	4219      	tst	r1, r3
 80140aa:	d009      	beq.n	80140c0 <__gethex+0x1d4>
 80140ac:	42a2      	cmp	r2, r4
 80140ae:	dd06      	ble.n	80140be <__gethex+0x1d2>
 80140b0:	0028      	movs	r0, r5
 80140b2:	1eb1      	subs	r1, r6, #2
 80140b4:	f000 feb6 	bl	8014e24 <__any_on>
 80140b8:	3402      	adds	r4, #2
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d100      	bne.n	80140c0 <__gethex+0x1d4>
 80140be:	2402      	movs	r4, #2
 80140c0:	0031      	movs	r1, r6
 80140c2:	0028      	movs	r0, r5
 80140c4:	f7ff fea8 	bl	8013e18 <rshift>
 80140c8:	19bf      	adds	r7, r7, r6
 80140ca:	9b01      	ldr	r3, [sp, #4]
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	42bb      	cmp	r3, r7
 80140d0:	da3a      	bge.n	8014148 <__gethex+0x25c>
 80140d2:	0029      	movs	r1, r5
 80140d4:	9803      	ldr	r0, [sp, #12]
 80140d6:	f000 fa51 	bl	801457c <_Bfree>
 80140da:	2300      	movs	r3, #0
 80140dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140de:	26a3      	movs	r6, #163	; 0xa3
 80140e0:	6013      	str	r3, [r2, #0]
 80140e2:	e78c      	b.n	8013ffe <__gethex+0x112>
 80140e4:	3c01      	subs	r4, #1
 80140e6:	7823      	ldrb	r3, [r4, #0]
 80140e8:	2b2e      	cmp	r3, #46	; 0x2e
 80140ea:	d012      	beq.n	8014112 <__gethex+0x226>
 80140ec:	9b04      	ldr	r3, [sp, #16]
 80140ee:	2b20      	cmp	r3, #32
 80140f0:	d104      	bne.n	80140fc <__gethex+0x210>
 80140f2:	9b05      	ldr	r3, [sp, #20]
 80140f4:	c340      	stmia	r3!, {r6}
 80140f6:	2600      	movs	r6, #0
 80140f8:	9305      	str	r3, [sp, #20]
 80140fa:	9604      	str	r6, [sp, #16]
 80140fc:	7820      	ldrb	r0, [r4, #0]
 80140fe:	f7ff fee0 	bl	8013ec2 <__hexdig_fun>
 8014102:	230f      	movs	r3, #15
 8014104:	4018      	ands	r0, r3
 8014106:	9b04      	ldr	r3, [sp, #16]
 8014108:	4098      	lsls	r0, r3
 801410a:	3304      	adds	r3, #4
 801410c:	4306      	orrs	r6, r0
 801410e:	9304      	str	r3, [sp, #16]
 8014110:	e7a5      	b.n	801405e <__gethex+0x172>
 8014112:	9b00      	ldr	r3, [sp, #0]
 8014114:	42a3      	cmp	r3, r4
 8014116:	d8e9      	bhi.n	80140ec <__gethex+0x200>
 8014118:	2201      	movs	r2, #1
 801411a:	0020      	movs	r0, r4
 801411c:	4927      	ldr	r1, [pc, #156]	; (80141bc <__gethex+0x2d0>)
 801411e:	f7fe fdbc 	bl	8012c9a <strncmp>
 8014122:	2800      	cmp	r0, #0
 8014124:	d1e2      	bne.n	80140ec <__gethex+0x200>
 8014126:	e79a      	b.n	801405e <__gethex+0x172>
 8014128:	9b00      	ldr	r3, [sp, #0]
 801412a:	2400      	movs	r4, #0
 801412c:	429e      	cmp	r6, r3
 801412e:	dacc      	bge.n	80140ca <__gethex+0x1de>
 8014130:	1b9e      	subs	r6, r3, r6
 8014132:	0029      	movs	r1, r5
 8014134:	0032      	movs	r2, r6
 8014136:	9803      	ldr	r0, [sp, #12]
 8014138:	f000 fc40 	bl	80149bc <__lshift>
 801413c:	0003      	movs	r3, r0
 801413e:	3314      	adds	r3, #20
 8014140:	0005      	movs	r5, r0
 8014142:	1bbf      	subs	r7, r7, r6
 8014144:	9302      	str	r3, [sp, #8]
 8014146:	e7c0      	b.n	80140ca <__gethex+0x1de>
 8014148:	9b01      	ldr	r3, [sp, #4]
 801414a:	685e      	ldr	r6, [r3, #4]
 801414c:	42be      	cmp	r6, r7
 801414e:	dd70      	ble.n	8014232 <__gethex+0x346>
 8014150:	9b00      	ldr	r3, [sp, #0]
 8014152:	1bf6      	subs	r6, r6, r7
 8014154:	42b3      	cmp	r3, r6
 8014156:	dc37      	bgt.n	80141c8 <__gethex+0x2dc>
 8014158:	9b01      	ldr	r3, [sp, #4]
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	2b02      	cmp	r3, #2
 801415e:	d024      	beq.n	80141aa <__gethex+0x2be>
 8014160:	2b03      	cmp	r3, #3
 8014162:	d026      	beq.n	80141b2 <__gethex+0x2c6>
 8014164:	2b01      	cmp	r3, #1
 8014166:	d117      	bne.n	8014198 <__gethex+0x2ac>
 8014168:	9b00      	ldr	r3, [sp, #0]
 801416a:	42b3      	cmp	r3, r6
 801416c:	d114      	bne.n	8014198 <__gethex+0x2ac>
 801416e:	2b01      	cmp	r3, #1
 8014170:	d10b      	bne.n	801418a <__gethex+0x29e>
 8014172:	9b01      	ldr	r3, [sp, #4]
 8014174:	9a07      	ldr	r2, [sp, #28]
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	2662      	movs	r6, #98	; 0x62
 801417a:	6013      	str	r3, [r2, #0]
 801417c:	2301      	movs	r3, #1
 801417e:	9a02      	ldr	r2, [sp, #8]
 8014180:	612b      	str	r3, [r5, #16]
 8014182:	6013      	str	r3, [r2, #0]
 8014184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014186:	601d      	str	r5, [r3, #0]
 8014188:	e739      	b.n	8013ffe <__gethex+0x112>
 801418a:	9900      	ldr	r1, [sp, #0]
 801418c:	0028      	movs	r0, r5
 801418e:	3901      	subs	r1, #1
 8014190:	f000 fe48 	bl	8014e24 <__any_on>
 8014194:	2800      	cmp	r0, #0
 8014196:	d1ec      	bne.n	8014172 <__gethex+0x286>
 8014198:	0029      	movs	r1, r5
 801419a:	9803      	ldr	r0, [sp, #12]
 801419c:	f000 f9ee 	bl	801457c <_Bfree>
 80141a0:	2300      	movs	r3, #0
 80141a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141a4:	2650      	movs	r6, #80	; 0x50
 80141a6:	6013      	str	r3, [r2, #0]
 80141a8:	e729      	b.n	8013ffe <__gethex+0x112>
 80141aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d1f3      	bne.n	8014198 <__gethex+0x2ac>
 80141b0:	e7df      	b.n	8014172 <__gethex+0x286>
 80141b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d1dc      	bne.n	8014172 <__gethex+0x286>
 80141b8:	e7ee      	b.n	8014198 <__gethex+0x2ac>
 80141ba:	46c0      	nop			; (mov r8, r8)
 80141bc:	08018048 	.word	0x08018048
 80141c0:	080182f4 	.word	0x080182f4
 80141c4:	08018305 	.word	0x08018305
 80141c8:	1e77      	subs	r7, r6, #1
 80141ca:	2c00      	cmp	r4, #0
 80141cc:	d12f      	bne.n	801422e <__gethex+0x342>
 80141ce:	2f00      	cmp	r7, #0
 80141d0:	d004      	beq.n	80141dc <__gethex+0x2f0>
 80141d2:	0039      	movs	r1, r7
 80141d4:	0028      	movs	r0, r5
 80141d6:	f000 fe25 	bl	8014e24 <__any_on>
 80141da:	0004      	movs	r4, r0
 80141dc:	231f      	movs	r3, #31
 80141de:	117a      	asrs	r2, r7, #5
 80141e0:	401f      	ands	r7, r3
 80141e2:	3b1e      	subs	r3, #30
 80141e4:	40bb      	lsls	r3, r7
 80141e6:	9902      	ldr	r1, [sp, #8]
 80141e8:	0092      	lsls	r2, r2, #2
 80141ea:	5852      	ldr	r2, [r2, r1]
 80141ec:	421a      	tst	r2, r3
 80141ee:	d001      	beq.n	80141f4 <__gethex+0x308>
 80141f0:	2302      	movs	r3, #2
 80141f2:	431c      	orrs	r4, r3
 80141f4:	9b00      	ldr	r3, [sp, #0]
 80141f6:	0031      	movs	r1, r6
 80141f8:	1b9b      	subs	r3, r3, r6
 80141fa:	2602      	movs	r6, #2
 80141fc:	0028      	movs	r0, r5
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	f7ff fe0a 	bl	8013e18 <rshift>
 8014204:	9b01      	ldr	r3, [sp, #4]
 8014206:	685f      	ldr	r7, [r3, #4]
 8014208:	2c00      	cmp	r4, #0
 801420a:	d041      	beq.n	8014290 <__gethex+0x3a4>
 801420c:	9b01      	ldr	r3, [sp, #4]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	2b02      	cmp	r3, #2
 8014212:	d010      	beq.n	8014236 <__gethex+0x34a>
 8014214:	2b03      	cmp	r3, #3
 8014216:	d012      	beq.n	801423e <__gethex+0x352>
 8014218:	2b01      	cmp	r3, #1
 801421a:	d106      	bne.n	801422a <__gethex+0x33e>
 801421c:	07a2      	lsls	r2, r4, #30
 801421e:	d504      	bpl.n	801422a <__gethex+0x33e>
 8014220:	9a02      	ldr	r2, [sp, #8]
 8014222:	6812      	ldr	r2, [r2, #0]
 8014224:	4314      	orrs	r4, r2
 8014226:	421c      	tst	r4, r3
 8014228:	d10c      	bne.n	8014244 <__gethex+0x358>
 801422a:	2310      	movs	r3, #16
 801422c:	e02f      	b.n	801428e <__gethex+0x3a2>
 801422e:	2401      	movs	r4, #1
 8014230:	e7d4      	b.n	80141dc <__gethex+0x2f0>
 8014232:	2601      	movs	r6, #1
 8014234:	e7e8      	b.n	8014208 <__gethex+0x31c>
 8014236:	2301      	movs	r3, #1
 8014238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801423a:	1a9b      	subs	r3, r3, r2
 801423c:	930f      	str	r3, [sp, #60]	; 0x3c
 801423e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014240:	2b00      	cmp	r3, #0
 8014242:	d0f2      	beq.n	801422a <__gethex+0x33e>
 8014244:	692b      	ldr	r3, [r5, #16]
 8014246:	2000      	movs	r0, #0
 8014248:	9302      	str	r3, [sp, #8]
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	9304      	str	r3, [sp, #16]
 801424e:	002b      	movs	r3, r5
 8014250:	9a04      	ldr	r2, [sp, #16]
 8014252:	3314      	adds	r3, #20
 8014254:	1899      	adds	r1, r3, r2
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	1c54      	adds	r4, r2, #1
 801425a:	d01e      	beq.n	801429a <__gethex+0x3ae>
 801425c:	3201      	adds	r2, #1
 801425e:	601a      	str	r2, [r3, #0]
 8014260:	002b      	movs	r3, r5
 8014262:	3314      	adds	r3, #20
 8014264:	2e02      	cmp	r6, #2
 8014266:	d141      	bne.n	80142ec <__gethex+0x400>
 8014268:	9a01      	ldr	r2, [sp, #4]
 801426a:	9900      	ldr	r1, [sp, #0]
 801426c:	6812      	ldr	r2, [r2, #0]
 801426e:	3a01      	subs	r2, #1
 8014270:	428a      	cmp	r2, r1
 8014272:	d10b      	bne.n	801428c <__gethex+0x3a0>
 8014274:	221f      	movs	r2, #31
 8014276:	9800      	ldr	r0, [sp, #0]
 8014278:	1149      	asrs	r1, r1, #5
 801427a:	4002      	ands	r2, r0
 801427c:	2001      	movs	r0, #1
 801427e:	0004      	movs	r4, r0
 8014280:	4094      	lsls	r4, r2
 8014282:	0089      	lsls	r1, r1, #2
 8014284:	58cb      	ldr	r3, [r1, r3]
 8014286:	4223      	tst	r3, r4
 8014288:	d000      	beq.n	801428c <__gethex+0x3a0>
 801428a:	2601      	movs	r6, #1
 801428c:	2320      	movs	r3, #32
 801428e:	431e      	orrs	r6, r3
 8014290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014292:	601d      	str	r5, [r3, #0]
 8014294:	9b07      	ldr	r3, [sp, #28]
 8014296:	601f      	str	r7, [r3, #0]
 8014298:	e6b1      	b.n	8013ffe <__gethex+0x112>
 801429a:	c301      	stmia	r3!, {r0}
 801429c:	4299      	cmp	r1, r3
 801429e:	d8da      	bhi.n	8014256 <__gethex+0x36a>
 80142a0:	68ab      	ldr	r3, [r5, #8]
 80142a2:	9a02      	ldr	r2, [sp, #8]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	db18      	blt.n	80142da <__gethex+0x3ee>
 80142a8:	6869      	ldr	r1, [r5, #4]
 80142aa:	9803      	ldr	r0, [sp, #12]
 80142ac:	3101      	adds	r1, #1
 80142ae:	f000 f921 	bl	80144f4 <_Balloc>
 80142b2:	1e04      	subs	r4, r0, #0
 80142b4:	d104      	bne.n	80142c0 <__gethex+0x3d4>
 80142b6:	0022      	movs	r2, r4
 80142b8:	2184      	movs	r1, #132	; 0x84
 80142ba:	4b1c      	ldr	r3, [pc, #112]	; (801432c <__gethex+0x440>)
 80142bc:	481c      	ldr	r0, [pc, #112]	; (8014330 <__gethex+0x444>)
 80142be:	e6c2      	b.n	8014046 <__gethex+0x15a>
 80142c0:	0029      	movs	r1, r5
 80142c2:	692a      	ldr	r2, [r5, #16]
 80142c4:	310c      	adds	r1, #12
 80142c6:	3202      	adds	r2, #2
 80142c8:	0092      	lsls	r2, r2, #2
 80142ca:	300c      	adds	r0, #12
 80142cc:	f7fe fe8a 	bl	8012fe4 <memcpy>
 80142d0:	0029      	movs	r1, r5
 80142d2:	9803      	ldr	r0, [sp, #12]
 80142d4:	f000 f952 	bl	801457c <_Bfree>
 80142d8:	0025      	movs	r5, r4
 80142da:	692b      	ldr	r3, [r5, #16]
 80142dc:	1c5a      	adds	r2, r3, #1
 80142de:	612a      	str	r2, [r5, #16]
 80142e0:	2201      	movs	r2, #1
 80142e2:	3304      	adds	r3, #4
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	18eb      	adds	r3, r5, r3
 80142e8:	605a      	str	r2, [r3, #4]
 80142ea:	e7b9      	b.n	8014260 <__gethex+0x374>
 80142ec:	692a      	ldr	r2, [r5, #16]
 80142ee:	9902      	ldr	r1, [sp, #8]
 80142f0:	428a      	cmp	r2, r1
 80142f2:	dd09      	ble.n	8014308 <__gethex+0x41c>
 80142f4:	2101      	movs	r1, #1
 80142f6:	0028      	movs	r0, r5
 80142f8:	f7ff fd8e 	bl	8013e18 <rshift>
 80142fc:	9b01      	ldr	r3, [sp, #4]
 80142fe:	3701      	adds	r7, #1
 8014300:	689b      	ldr	r3, [r3, #8]
 8014302:	42bb      	cmp	r3, r7
 8014304:	dac1      	bge.n	801428a <__gethex+0x39e>
 8014306:	e6e4      	b.n	80140d2 <__gethex+0x1e6>
 8014308:	221f      	movs	r2, #31
 801430a:	9c00      	ldr	r4, [sp, #0]
 801430c:	9900      	ldr	r1, [sp, #0]
 801430e:	2601      	movs	r6, #1
 8014310:	4014      	ands	r4, r2
 8014312:	4211      	tst	r1, r2
 8014314:	d0ba      	beq.n	801428c <__gethex+0x3a0>
 8014316:	9a04      	ldr	r2, [sp, #16]
 8014318:	189b      	adds	r3, r3, r2
 801431a:	3b04      	subs	r3, #4
 801431c:	6818      	ldr	r0, [r3, #0]
 801431e:	f000 f9e1 	bl	80146e4 <__hi0bits>
 8014322:	2320      	movs	r3, #32
 8014324:	1b1b      	subs	r3, r3, r4
 8014326:	4298      	cmp	r0, r3
 8014328:	dbe4      	blt.n	80142f4 <__gethex+0x408>
 801432a:	e7af      	b.n	801428c <__gethex+0x3a0>
 801432c:	080182f4 	.word	0x080182f4
 8014330:	08018305 	.word	0x08018305

08014334 <L_shift>:
 8014334:	2308      	movs	r3, #8
 8014336:	b570      	push	{r4, r5, r6, lr}
 8014338:	2520      	movs	r5, #32
 801433a:	1a9a      	subs	r2, r3, r2
 801433c:	0092      	lsls	r2, r2, #2
 801433e:	1aad      	subs	r5, r5, r2
 8014340:	6843      	ldr	r3, [r0, #4]
 8014342:	6804      	ldr	r4, [r0, #0]
 8014344:	001e      	movs	r6, r3
 8014346:	40ae      	lsls	r6, r5
 8014348:	40d3      	lsrs	r3, r2
 801434a:	4334      	orrs	r4, r6
 801434c:	6004      	str	r4, [r0, #0]
 801434e:	6043      	str	r3, [r0, #4]
 8014350:	3004      	adds	r0, #4
 8014352:	4288      	cmp	r0, r1
 8014354:	d3f4      	bcc.n	8014340 <L_shift+0xc>
 8014356:	bd70      	pop	{r4, r5, r6, pc}

08014358 <__match>:
 8014358:	b530      	push	{r4, r5, lr}
 801435a:	6803      	ldr	r3, [r0, #0]
 801435c:	780c      	ldrb	r4, [r1, #0]
 801435e:	3301      	adds	r3, #1
 8014360:	2c00      	cmp	r4, #0
 8014362:	d102      	bne.n	801436a <__match+0x12>
 8014364:	6003      	str	r3, [r0, #0]
 8014366:	2001      	movs	r0, #1
 8014368:	bd30      	pop	{r4, r5, pc}
 801436a:	781a      	ldrb	r2, [r3, #0]
 801436c:	0015      	movs	r5, r2
 801436e:	3d41      	subs	r5, #65	; 0x41
 8014370:	2d19      	cmp	r5, #25
 8014372:	d800      	bhi.n	8014376 <__match+0x1e>
 8014374:	3220      	adds	r2, #32
 8014376:	3101      	adds	r1, #1
 8014378:	42a2      	cmp	r2, r4
 801437a:	d0ef      	beq.n	801435c <__match+0x4>
 801437c:	2000      	movs	r0, #0
 801437e:	e7f3      	b.n	8014368 <__match+0x10>

08014380 <__hexnan>:
 8014380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014382:	680b      	ldr	r3, [r1, #0]
 8014384:	b08b      	sub	sp, #44	; 0x2c
 8014386:	9201      	str	r2, [sp, #4]
 8014388:	9901      	ldr	r1, [sp, #4]
 801438a:	115a      	asrs	r2, r3, #5
 801438c:	0092      	lsls	r2, r2, #2
 801438e:	188a      	adds	r2, r1, r2
 8014390:	9202      	str	r2, [sp, #8]
 8014392:	0019      	movs	r1, r3
 8014394:	221f      	movs	r2, #31
 8014396:	4011      	ands	r1, r2
 8014398:	9008      	str	r0, [sp, #32]
 801439a:	9106      	str	r1, [sp, #24]
 801439c:	4213      	tst	r3, r2
 801439e:	d002      	beq.n	80143a6 <__hexnan+0x26>
 80143a0:	9b02      	ldr	r3, [sp, #8]
 80143a2:	3304      	adds	r3, #4
 80143a4:	9302      	str	r3, [sp, #8]
 80143a6:	9b02      	ldr	r3, [sp, #8]
 80143a8:	2500      	movs	r5, #0
 80143aa:	1f1f      	subs	r7, r3, #4
 80143ac:	003e      	movs	r6, r7
 80143ae:	003c      	movs	r4, r7
 80143b0:	9b08      	ldr	r3, [sp, #32]
 80143b2:	603d      	str	r5, [r7, #0]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	9507      	str	r5, [sp, #28]
 80143b8:	9305      	str	r3, [sp, #20]
 80143ba:	9503      	str	r5, [sp, #12]
 80143bc:	9b05      	ldr	r3, [sp, #20]
 80143be:	3301      	adds	r3, #1
 80143c0:	9309      	str	r3, [sp, #36]	; 0x24
 80143c2:	9b05      	ldr	r3, [sp, #20]
 80143c4:	785b      	ldrb	r3, [r3, #1]
 80143c6:	9304      	str	r3, [sp, #16]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d028      	beq.n	801441e <__hexnan+0x9e>
 80143cc:	9804      	ldr	r0, [sp, #16]
 80143ce:	f7ff fd78 	bl	8013ec2 <__hexdig_fun>
 80143d2:	2800      	cmp	r0, #0
 80143d4:	d154      	bne.n	8014480 <__hexnan+0x100>
 80143d6:	9b04      	ldr	r3, [sp, #16]
 80143d8:	2b20      	cmp	r3, #32
 80143da:	d819      	bhi.n	8014410 <__hexnan+0x90>
 80143dc:	9b03      	ldr	r3, [sp, #12]
 80143de:	9a07      	ldr	r2, [sp, #28]
 80143e0:	4293      	cmp	r3, r2
 80143e2:	dd12      	ble.n	801440a <__hexnan+0x8a>
 80143e4:	42b4      	cmp	r4, r6
 80143e6:	d206      	bcs.n	80143f6 <__hexnan+0x76>
 80143e8:	2d07      	cmp	r5, #7
 80143ea:	dc04      	bgt.n	80143f6 <__hexnan+0x76>
 80143ec:	002a      	movs	r2, r5
 80143ee:	0031      	movs	r1, r6
 80143f0:	0020      	movs	r0, r4
 80143f2:	f7ff ff9f 	bl	8014334 <L_shift>
 80143f6:	9b01      	ldr	r3, [sp, #4]
 80143f8:	2508      	movs	r5, #8
 80143fa:	429c      	cmp	r4, r3
 80143fc:	d905      	bls.n	801440a <__hexnan+0x8a>
 80143fe:	1f26      	subs	r6, r4, #4
 8014400:	2500      	movs	r5, #0
 8014402:	0034      	movs	r4, r6
 8014404:	9b03      	ldr	r3, [sp, #12]
 8014406:	6035      	str	r5, [r6, #0]
 8014408:	9307      	str	r3, [sp, #28]
 801440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801440c:	9305      	str	r3, [sp, #20]
 801440e:	e7d5      	b.n	80143bc <__hexnan+0x3c>
 8014410:	9b04      	ldr	r3, [sp, #16]
 8014412:	2b29      	cmp	r3, #41	; 0x29
 8014414:	d159      	bne.n	80144ca <__hexnan+0x14a>
 8014416:	9b05      	ldr	r3, [sp, #20]
 8014418:	9a08      	ldr	r2, [sp, #32]
 801441a:	3302      	adds	r3, #2
 801441c:	6013      	str	r3, [r2, #0]
 801441e:	9b03      	ldr	r3, [sp, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d052      	beq.n	80144ca <__hexnan+0x14a>
 8014424:	42b4      	cmp	r4, r6
 8014426:	d206      	bcs.n	8014436 <__hexnan+0xb6>
 8014428:	2d07      	cmp	r5, #7
 801442a:	dc04      	bgt.n	8014436 <__hexnan+0xb6>
 801442c:	002a      	movs	r2, r5
 801442e:	0031      	movs	r1, r6
 8014430:	0020      	movs	r0, r4
 8014432:	f7ff ff7f 	bl	8014334 <L_shift>
 8014436:	9b01      	ldr	r3, [sp, #4]
 8014438:	429c      	cmp	r4, r3
 801443a:	d935      	bls.n	80144a8 <__hexnan+0x128>
 801443c:	001a      	movs	r2, r3
 801443e:	0023      	movs	r3, r4
 8014440:	cb02      	ldmia	r3!, {r1}
 8014442:	c202      	stmia	r2!, {r1}
 8014444:	429f      	cmp	r7, r3
 8014446:	d2fb      	bcs.n	8014440 <__hexnan+0xc0>
 8014448:	9b02      	ldr	r3, [sp, #8]
 801444a:	1c62      	adds	r2, r4, #1
 801444c:	1ed9      	subs	r1, r3, #3
 801444e:	2304      	movs	r3, #4
 8014450:	4291      	cmp	r1, r2
 8014452:	d305      	bcc.n	8014460 <__hexnan+0xe0>
 8014454:	9b02      	ldr	r3, [sp, #8]
 8014456:	3b04      	subs	r3, #4
 8014458:	1b1b      	subs	r3, r3, r4
 801445a:	089b      	lsrs	r3, r3, #2
 801445c:	3301      	adds	r3, #1
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	9a01      	ldr	r2, [sp, #4]
 8014462:	18d3      	adds	r3, r2, r3
 8014464:	2200      	movs	r2, #0
 8014466:	c304      	stmia	r3!, {r2}
 8014468:	429f      	cmp	r7, r3
 801446a:	d2fc      	bcs.n	8014466 <__hexnan+0xe6>
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d104      	bne.n	801447c <__hexnan+0xfc>
 8014472:	9b01      	ldr	r3, [sp, #4]
 8014474:	429f      	cmp	r7, r3
 8014476:	d126      	bne.n	80144c6 <__hexnan+0x146>
 8014478:	2301      	movs	r3, #1
 801447a:	603b      	str	r3, [r7, #0]
 801447c:	2005      	movs	r0, #5
 801447e:	e025      	b.n	80144cc <__hexnan+0x14c>
 8014480:	9b03      	ldr	r3, [sp, #12]
 8014482:	3501      	adds	r5, #1
 8014484:	3301      	adds	r3, #1
 8014486:	9303      	str	r3, [sp, #12]
 8014488:	2d08      	cmp	r5, #8
 801448a:	dd06      	ble.n	801449a <__hexnan+0x11a>
 801448c:	9b01      	ldr	r3, [sp, #4]
 801448e:	429c      	cmp	r4, r3
 8014490:	d9bb      	bls.n	801440a <__hexnan+0x8a>
 8014492:	2300      	movs	r3, #0
 8014494:	2501      	movs	r5, #1
 8014496:	3c04      	subs	r4, #4
 8014498:	6023      	str	r3, [r4, #0]
 801449a:	220f      	movs	r2, #15
 801449c:	6823      	ldr	r3, [r4, #0]
 801449e:	4010      	ands	r0, r2
 80144a0:	011b      	lsls	r3, r3, #4
 80144a2:	4303      	orrs	r3, r0
 80144a4:	6023      	str	r3, [r4, #0]
 80144a6:	e7b0      	b.n	801440a <__hexnan+0x8a>
 80144a8:	9b06      	ldr	r3, [sp, #24]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d0de      	beq.n	801446c <__hexnan+0xec>
 80144ae:	2320      	movs	r3, #32
 80144b0:	9a06      	ldr	r2, [sp, #24]
 80144b2:	9902      	ldr	r1, [sp, #8]
 80144b4:	1a9b      	subs	r3, r3, r2
 80144b6:	2201      	movs	r2, #1
 80144b8:	4252      	negs	r2, r2
 80144ba:	40da      	lsrs	r2, r3
 80144bc:	3904      	subs	r1, #4
 80144be:	680b      	ldr	r3, [r1, #0]
 80144c0:	4013      	ands	r3, r2
 80144c2:	600b      	str	r3, [r1, #0]
 80144c4:	e7d2      	b.n	801446c <__hexnan+0xec>
 80144c6:	3f04      	subs	r7, #4
 80144c8:	e7d0      	b.n	801446c <__hexnan+0xec>
 80144ca:	2004      	movs	r0, #4
 80144cc:	b00b      	add	sp, #44	; 0x2c
 80144ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080144d0 <__ascii_mbtowc>:
 80144d0:	b082      	sub	sp, #8
 80144d2:	2900      	cmp	r1, #0
 80144d4:	d100      	bne.n	80144d8 <__ascii_mbtowc+0x8>
 80144d6:	a901      	add	r1, sp, #4
 80144d8:	1e10      	subs	r0, r2, #0
 80144da:	d006      	beq.n	80144ea <__ascii_mbtowc+0x1a>
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d006      	beq.n	80144ee <__ascii_mbtowc+0x1e>
 80144e0:	7813      	ldrb	r3, [r2, #0]
 80144e2:	600b      	str	r3, [r1, #0]
 80144e4:	7810      	ldrb	r0, [r2, #0]
 80144e6:	1e43      	subs	r3, r0, #1
 80144e8:	4198      	sbcs	r0, r3
 80144ea:	b002      	add	sp, #8
 80144ec:	4770      	bx	lr
 80144ee:	2002      	movs	r0, #2
 80144f0:	4240      	negs	r0, r0
 80144f2:	e7fa      	b.n	80144ea <__ascii_mbtowc+0x1a>

080144f4 <_Balloc>:
 80144f4:	b570      	push	{r4, r5, r6, lr}
 80144f6:	69c5      	ldr	r5, [r0, #28]
 80144f8:	0006      	movs	r6, r0
 80144fa:	000c      	movs	r4, r1
 80144fc:	2d00      	cmp	r5, #0
 80144fe:	d10e      	bne.n	801451e <_Balloc+0x2a>
 8014500:	2010      	movs	r0, #16
 8014502:	f7fc fc65 	bl	8010dd0 <malloc>
 8014506:	1e02      	subs	r2, r0, #0
 8014508:	61f0      	str	r0, [r6, #28]
 801450a:	d104      	bne.n	8014516 <_Balloc+0x22>
 801450c:	216b      	movs	r1, #107	; 0x6b
 801450e:	4b19      	ldr	r3, [pc, #100]	; (8014574 <_Balloc+0x80>)
 8014510:	4819      	ldr	r0, [pc, #100]	; (8014578 <_Balloc+0x84>)
 8014512:	f7fe fd7b 	bl	801300c <__assert_func>
 8014516:	6045      	str	r5, [r0, #4]
 8014518:	6085      	str	r5, [r0, #8]
 801451a:	6005      	str	r5, [r0, #0]
 801451c:	60c5      	str	r5, [r0, #12]
 801451e:	69f5      	ldr	r5, [r6, #28]
 8014520:	68eb      	ldr	r3, [r5, #12]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d013      	beq.n	801454e <_Balloc+0x5a>
 8014526:	69f3      	ldr	r3, [r6, #28]
 8014528:	00a2      	lsls	r2, r4, #2
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	189b      	adds	r3, r3, r2
 801452e:	6818      	ldr	r0, [r3, #0]
 8014530:	2800      	cmp	r0, #0
 8014532:	d118      	bne.n	8014566 <_Balloc+0x72>
 8014534:	2101      	movs	r1, #1
 8014536:	000d      	movs	r5, r1
 8014538:	40a5      	lsls	r5, r4
 801453a:	1d6a      	adds	r2, r5, #5
 801453c:	0030      	movs	r0, r6
 801453e:	0092      	lsls	r2, r2, #2
 8014540:	f000 fee2 	bl	8015308 <_calloc_r>
 8014544:	2800      	cmp	r0, #0
 8014546:	d00c      	beq.n	8014562 <_Balloc+0x6e>
 8014548:	6044      	str	r4, [r0, #4]
 801454a:	6085      	str	r5, [r0, #8]
 801454c:	e00d      	b.n	801456a <_Balloc+0x76>
 801454e:	2221      	movs	r2, #33	; 0x21
 8014550:	2104      	movs	r1, #4
 8014552:	0030      	movs	r0, r6
 8014554:	f000 fed8 	bl	8015308 <_calloc_r>
 8014558:	69f3      	ldr	r3, [r6, #28]
 801455a:	60e8      	str	r0, [r5, #12]
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d1e1      	bne.n	8014526 <_Balloc+0x32>
 8014562:	2000      	movs	r0, #0
 8014564:	bd70      	pop	{r4, r5, r6, pc}
 8014566:	6802      	ldr	r2, [r0, #0]
 8014568:	601a      	str	r2, [r3, #0]
 801456a:	2300      	movs	r3, #0
 801456c:	6103      	str	r3, [r0, #16]
 801456e:	60c3      	str	r3, [r0, #12]
 8014570:	e7f8      	b.n	8014564 <_Balloc+0x70>
 8014572:	46c0      	nop			; (mov r8, r8)
 8014574:	080181da 	.word	0x080181da
 8014578:	08018365 	.word	0x08018365

0801457c <_Bfree>:
 801457c:	b570      	push	{r4, r5, r6, lr}
 801457e:	69c6      	ldr	r6, [r0, #28]
 8014580:	0005      	movs	r5, r0
 8014582:	000c      	movs	r4, r1
 8014584:	2e00      	cmp	r6, #0
 8014586:	d10e      	bne.n	80145a6 <_Bfree+0x2a>
 8014588:	2010      	movs	r0, #16
 801458a:	f7fc fc21 	bl	8010dd0 <malloc>
 801458e:	1e02      	subs	r2, r0, #0
 8014590:	61e8      	str	r0, [r5, #28]
 8014592:	d104      	bne.n	801459e <_Bfree+0x22>
 8014594:	218f      	movs	r1, #143	; 0x8f
 8014596:	4b09      	ldr	r3, [pc, #36]	; (80145bc <_Bfree+0x40>)
 8014598:	4809      	ldr	r0, [pc, #36]	; (80145c0 <_Bfree+0x44>)
 801459a:	f7fe fd37 	bl	801300c <__assert_func>
 801459e:	6046      	str	r6, [r0, #4]
 80145a0:	6086      	str	r6, [r0, #8]
 80145a2:	6006      	str	r6, [r0, #0]
 80145a4:	60c6      	str	r6, [r0, #12]
 80145a6:	2c00      	cmp	r4, #0
 80145a8:	d007      	beq.n	80145ba <_Bfree+0x3e>
 80145aa:	69eb      	ldr	r3, [r5, #28]
 80145ac:	6862      	ldr	r2, [r4, #4]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	0092      	lsls	r2, r2, #2
 80145b2:	189b      	adds	r3, r3, r2
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	6022      	str	r2, [r4, #0]
 80145b8:	601c      	str	r4, [r3, #0]
 80145ba:	bd70      	pop	{r4, r5, r6, pc}
 80145bc:	080181da 	.word	0x080181da
 80145c0:	08018365 	.word	0x08018365

080145c4 <__multadd>:
 80145c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145c6:	000e      	movs	r6, r1
 80145c8:	9001      	str	r0, [sp, #4]
 80145ca:	000c      	movs	r4, r1
 80145cc:	001d      	movs	r5, r3
 80145ce:	2000      	movs	r0, #0
 80145d0:	690f      	ldr	r7, [r1, #16]
 80145d2:	3614      	adds	r6, #20
 80145d4:	6833      	ldr	r3, [r6, #0]
 80145d6:	3001      	adds	r0, #1
 80145d8:	b299      	uxth	r1, r3
 80145da:	4351      	muls	r1, r2
 80145dc:	0c1b      	lsrs	r3, r3, #16
 80145de:	4353      	muls	r3, r2
 80145e0:	1949      	adds	r1, r1, r5
 80145e2:	0c0d      	lsrs	r5, r1, #16
 80145e4:	195b      	adds	r3, r3, r5
 80145e6:	0c1d      	lsrs	r5, r3, #16
 80145e8:	b289      	uxth	r1, r1
 80145ea:	041b      	lsls	r3, r3, #16
 80145ec:	185b      	adds	r3, r3, r1
 80145ee:	c608      	stmia	r6!, {r3}
 80145f0:	4287      	cmp	r7, r0
 80145f2:	dcef      	bgt.n	80145d4 <__multadd+0x10>
 80145f4:	2d00      	cmp	r5, #0
 80145f6:	d022      	beq.n	801463e <__multadd+0x7a>
 80145f8:	68a3      	ldr	r3, [r4, #8]
 80145fa:	42bb      	cmp	r3, r7
 80145fc:	dc19      	bgt.n	8014632 <__multadd+0x6e>
 80145fe:	6861      	ldr	r1, [r4, #4]
 8014600:	9801      	ldr	r0, [sp, #4]
 8014602:	3101      	adds	r1, #1
 8014604:	f7ff ff76 	bl	80144f4 <_Balloc>
 8014608:	1e06      	subs	r6, r0, #0
 801460a:	d105      	bne.n	8014618 <__multadd+0x54>
 801460c:	0032      	movs	r2, r6
 801460e:	21ba      	movs	r1, #186	; 0xba
 8014610:	4b0c      	ldr	r3, [pc, #48]	; (8014644 <__multadd+0x80>)
 8014612:	480d      	ldr	r0, [pc, #52]	; (8014648 <__multadd+0x84>)
 8014614:	f7fe fcfa 	bl	801300c <__assert_func>
 8014618:	0021      	movs	r1, r4
 801461a:	6922      	ldr	r2, [r4, #16]
 801461c:	310c      	adds	r1, #12
 801461e:	3202      	adds	r2, #2
 8014620:	0092      	lsls	r2, r2, #2
 8014622:	300c      	adds	r0, #12
 8014624:	f7fe fcde 	bl	8012fe4 <memcpy>
 8014628:	0021      	movs	r1, r4
 801462a:	9801      	ldr	r0, [sp, #4]
 801462c:	f7ff ffa6 	bl	801457c <_Bfree>
 8014630:	0034      	movs	r4, r6
 8014632:	1d3b      	adds	r3, r7, #4
 8014634:	009b      	lsls	r3, r3, #2
 8014636:	18e3      	adds	r3, r4, r3
 8014638:	605d      	str	r5, [r3, #4]
 801463a:	1c7b      	adds	r3, r7, #1
 801463c:	6123      	str	r3, [r4, #16]
 801463e:	0020      	movs	r0, r4
 8014640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014642:	46c0      	nop			; (mov r8, r8)
 8014644:	080182f4 	.word	0x080182f4
 8014648:	08018365 	.word	0x08018365

0801464c <__s2b>:
 801464c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801464e:	0006      	movs	r6, r0
 8014650:	0018      	movs	r0, r3
 8014652:	000c      	movs	r4, r1
 8014654:	3008      	adds	r0, #8
 8014656:	2109      	movs	r1, #9
 8014658:	9301      	str	r3, [sp, #4]
 801465a:	0015      	movs	r5, r2
 801465c:	f7eb fdfa 	bl	8000254 <__divsi3>
 8014660:	2301      	movs	r3, #1
 8014662:	2100      	movs	r1, #0
 8014664:	4283      	cmp	r3, r0
 8014666:	db0a      	blt.n	801467e <__s2b+0x32>
 8014668:	0030      	movs	r0, r6
 801466a:	f7ff ff43 	bl	80144f4 <_Balloc>
 801466e:	1e01      	subs	r1, r0, #0
 8014670:	d108      	bne.n	8014684 <__s2b+0x38>
 8014672:	000a      	movs	r2, r1
 8014674:	4b19      	ldr	r3, [pc, #100]	; (80146dc <__s2b+0x90>)
 8014676:	481a      	ldr	r0, [pc, #104]	; (80146e0 <__s2b+0x94>)
 8014678:	31d3      	adds	r1, #211	; 0xd3
 801467a:	f7fe fcc7 	bl	801300c <__assert_func>
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	3101      	adds	r1, #1
 8014682:	e7ef      	b.n	8014664 <__s2b+0x18>
 8014684:	9b08      	ldr	r3, [sp, #32]
 8014686:	6143      	str	r3, [r0, #20]
 8014688:	2301      	movs	r3, #1
 801468a:	6103      	str	r3, [r0, #16]
 801468c:	2d09      	cmp	r5, #9
 801468e:	dd18      	ble.n	80146c2 <__s2b+0x76>
 8014690:	0023      	movs	r3, r4
 8014692:	3309      	adds	r3, #9
 8014694:	001f      	movs	r7, r3
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	1964      	adds	r4, r4, r5
 801469a:	783b      	ldrb	r3, [r7, #0]
 801469c:	220a      	movs	r2, #10
 801469e:	0030      	movs	r0, r6
 80146a0:	3b30      	subs	r3, #48	; 0x30
 80146a2:	f7ff ff8f 	bl	80145c4 <__multadd>
 80146a6:	3701      	adds	r7, #1
 80146a8:	0001      	movs	r1, r0
 80146aa:	42a7      	cmp	r7, r4
 80146ac:	d1f5      	bne.n	801469a <__s2b+0x4e>
 80146ae:	002c      	movs	r4, r5
 80146b0:	9b00      	ldr	r3, [sp, #0]
 80146b2:	3c08      	subs	r4, #8
 80146b4:	191c      	adds	r4, r3, r4
 80146b6:	002f      	movs	r7, r5
 80146b8:	9b01      	ldr	r3, [sp, #4]
 80146ba:	429f      	cmp	r7, r3
 80146bc:	db04      	blt.n	80146c8 <__s2b+0x7c>
 80146be:	0008      	movs	r0, r1
 80146c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80146c2:	2509      	movs	r5, #9
 80146c4:	340a      	adds	r4, #10
 80146c6:	e7f6      	b.n	80146b6 <__s2b+0x6a>
 80146c8:	1b63      	subs	r3, r4, r5
 80146ca:	5ddb      	ldrb	r3, [r3, r7]
 80146cc:	220a      	movs	r2, #10
 80146ce:	0030      	movs	r0, r6
 80146d0:	3b30      	subs	r3, #48	; 0x30
 80146d2:	f7ff ff77 	bl	80145c4 <__multadd>
 80146d6:	3701      	adds	r7, #1
 80146d8:	0001      	movs	r1, r0
 80146da:	e7ed      	b.n	80146b8 <__s2b+0x6c>
 80146dc:	080182f4 	.word	0x080182f4
 80146e0:	08018365 	.word	0x08018365

080146e4 <__hi0bits>:
 80146e4:	0003      	movs	r3, r0
 80146e6:	0c02      	lsrs	r2, r0, #16
 80146e8:	2000      	movs	r0, #0
 80146ea:	4282      	cmp	r2, r0
 80146ec:	d101      	bne.n	80146f2 <__hi0bits+0xe>
 80146ee:	041b      	lsls	r3, r3, #16
 80146f0:	3010      	adds	r0, #16
 80146f2:	0e1a      	lsrs	r2, r3, #24
 80146f4:	d101      	bne.n	80146fa <__hi0bits+0x16>
 80146f6:	3008      	adds	r0, #8
 80146f8:	021b      	lsls	r3, r3, #8
 80146fa:	0f1a      	lsrs	r2, r3, #28
 80146fc:	d101      	bne.n	8014702 <__hi0bits+0x1e>
 80146fe:	3004      	adds	r0, #4
 8014700:	011b      	lsls	r3, r3, #4
 8014702:	0f9a      	lsrs	r2, r3, #30
 8014704:	d101      	bne.n	801470a <__hi0bits+0x26>
 8014706:	3002      	adds	r0, #2
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	2b00      	cmp	r3, #0
 801470c:	db03      	blt.n	8014716 <__hi0bits+0x32>
 801470e:	3001      	adds	r0, #1
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	d400      	bmi.n	8014716 <__hi0bits+0x32>
 8014714:	2020      	movs	r0, #32
 8014716:	4770      	bx	lr

08014718 <__lo0bits>:
 8014718:	6803      	ldr	r3, [r0, #0]
 801471a:	0001      	movs	r1, r0
 801471c:	2207      	movs	r2, #7
 801471e:	0018      	movs	r0, r3
 8014720:	4010      	ands	r0, r2
 8014722:	4213      	tst	r3, r2
 8014724:	d00d      	beq.n	8014742 <__lo0bits+0x2a>
 8014726:	3a06      	subs	r2, #6
 8014728:	2000      	movs	r0, #0
 801472a:	4213      	tst	r3, r2
 801472c:	d105      	bne.n	801473a <__lo0bits+0x22>
 801472e:	3002      	adds	r0, #2
 8014730:	4203      	tst	r3, r0
 8014732:	d003      	beq.n	801473c <__lo0bits+0x24>
 8014734:	40d3      	lsrs	r3, r2
 8014736:	0010      	movs	r0, r2
 8014738:	600b      	str	r3, [r1, #0]
 801473a:	4770      	bx	lr
 801473c:	089b      	lsrs	r3, r3, #2
 801473e:	600b      	str	r3, [r1, #0]
 8014740:	e7fb      	b.n	801473a <__lo0bits+0x22>
 8014742:	b29a      	uxth	r2, r3
 8014744:	2a00      	cmp	r2, #0
 8014746:	d101      	bne.n	801474c <__lo0bits+0x34>
 8014748:	2010      	movs	r0, #16
 801474a:	0c1b      	lsrs	r3, r3, #16
 801474c:	b2da      	uxtb	r2, r3
 801474e:	2a00      	cmp	r2, #0
 8014750:	d101      	bne.n	8014756 <__lo0bits+0x3e>
 8014752:	3008      	adds	r0, #8
 8014754:	0a1b      	lsrs	r3, r3, #8
 8014756:	071a      	lsls	r2, r3, #28
 8014758:	d101      	bne.n	801475e <__lo0bits+0x46>
 801475a:	3004      	adds	r0, #4
 801475c:	091b      	lsrs	r3, r3, #4
 801475e:	079a      	lsls	r2, r3, #30
 8014760:	d101      	bne.n	8014766 <__lo0bits+0x4e>
 8014762:	3002      	adds	r0, #2
 8014764:	089b      	lsrs	r3, r3, #2
 8014766:	07da      	lsls	r2, r3, #31
 8014768:	d4e9      	bmi.n	801473e <__lo0bits+0x26>
 801476a:	3001      	adds	r0, #1
 801476c:	085b      	lsrs	r3, r3, #1
 801476e:	d1e6      	bne.n	801473e <__lo0bits+0x26>
 8014770:	2020      	movs	r0, #32
 8014772:	e7e2      	b.n	801473a <__lo0bits+0x22>

08014774 <__i2b>:
 8014774:	b510      	push	{r4, lr}
 8014776:	000c      	movs	r4, r1
 8014778:	2101      	movs	r1, #1
 801477a:	f7ff febb 	bl	80144f4 <_Balloc>
 801477e:	2800      	cmp	r0, #0
 8014780:	d107      	bne.n	8014792 <__i2b+0x1e>
 8014782:	2146      	movs	r1, #70	; 0x46
 8014784:	4c05      	ldr	r4, [pc, #20]	; (801479c <__i2b+0x28>)
 8014786:	0002      	movs	r2, r0
 8014788:	4b05      	ldr	r3, [pc, #20]	; (80147a0 <__i2b+0x2c>)
 801478a:	0020      	movs	r0, r4
 801478c:	31ff      	adds	r1, #255	; 0xff
 801478e:	f7fe fc3d 	bl	801300c <__assert_func>
 8014792:	2301      	movs	r3, #1
 8014794:	6144      	str	r4, [r0, #20]
 8014796:	6103      	str	r3, [r0, #16]
 8014798:	bd10      	pop	{r4, pc}
 801479a:	46c0      	nop			; (mov r8, r8)
 801479c:	08018365 	.word	0x08018365
 80147a0:	080182f4 	.word	0x080182f4

080147a4 <__multiply>:
 80147a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147a6:	0015      	movs	r5, r2
 80147a8:	690a      	ldr	r2, [r1, #16]
 80147aa:	692b      	ldr	r3, [r5, #16]
 80147ac:	000c      	movs	r4, r1
 80147ae:	b08b      	sub	sp, #44	; 0x2c
 80147b0:	429a      	cmp	r2, r3
 80147b2:	da01      	bge.n	80147b8 <__multiply+0x14>
 80147b4:	002c      	movs	r4, r5
 80147b6:	000d      	movs	r5, r1
 80147b8:	6927      	ldr	r7, [r4, #16]
 80147ba:	692e      	ldr	r6, [r5, #16]
 80147bc:	6861      	ldr	r1, [r4, #4]
 80147be:	19bb      	adds	r3, r7, r6
 80147c0:	9303      	str	r3, [sp, #12]
 80147c2:	68a3      	ldr	r3, [r4, #8]
 80147c4:	19ba      	adds	r2, r7, r6
 80147c6:	4293      	cmp	r3, r2
 80147c8:	da00      	bge.n	80147cc <__multiply+0x28>
 80147ca:	3101      	adds	r1, #1
 80147cc:	f7ff fe92 	bl	80144f4 <_Balloc>
 80147d0:	9002      	str	r0, [sp, #8]
 80147d2:	2800      	cmp	r0, #0
 80147d4:	d106      	bne.n	80147e4 <__multiply+0x40>
 80147d6:	21b1      	movs	r1, #177	; 0xb1
 80147d8:	4b48      	ldr	r3, [pc, #288]	; (80148fc <__multiply+0x158>)
 80147da:	4849      	ldr	r0, [pc, #292]	; (8014900 <__multiply+0x15c>)
 80147dc:	9a02      	ldr	r2, [sp, #8]
 80147de:	0049      	lsls	r1, r1, #1
 80147e0:	f7fe fc14 	bl	801300c <__assert_func>
 80147e4:	9b02      	ldr	r3, [sp, #8]
 80147e6:	2200      	movs	r2, #0
 80147e8:	3314      	adds	r3, #20
 80147ea:	469c      	mov	ip, r3
 80147ec:	19bb      	adds	r3, r7, r6
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	4463      	add	r3, ip
 80147f2:	9304      	str	r3, [sp, #16]
 80147f4:	4663      	mov	r3, ip
 80147f6:	9904      	ldr	r1, [sp, #16]
 80147f8:	428b      	cmp	r3, r1
 80147fa:	d32a      	bcc.n	8014852 <__multiply+0xae>
 80147fc:	0023      	movs	r3, r4
 80147fe:	00bf      	lsls	r7, r7, #2
 8014800:	3314      	adds	r3, #20
 8014802:	3514      	adds	r5, #20
 8014804:	9308      	str	r3, [sp, #32]
 8014806:	00b6      	lsls	r6, r6, #2
 8014808:	19db      	adds	r3, r3, r7
 801480a:	9305      	str	r3, [sp, #20]
 801480c:	19ab      	adds	r3, r5, r6
 801480e:	9309      	str	r3, [sp, #36]	; 0x24
 8014810:	2304      	movs	r3, #4
 8014812:	9306      	str	r3, [sp, #24]
 8014814:	0023      	movs	r3, r4
 8014816:	9a05      	ldr	r2, [sp, #20]
 8014818:	3315      	adds	r3, #21
 801481a:	9501      	str	r5, [sp, #4]
 801481c:	429a      	cmp	r2, r3
 801481e:	d305      	bcc.n	801482c <__multiply+0x88>
 8014820:	1b13      	subs	r3, r2, r4
 8014822:	3b15      	subs	r3, #21
 8014824:	089b      	lsrs	r3, r3, #2
 8014826:	3301      	adds	r3, #1
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	9306      	str	r3, [sp, #24]
 801482c:	9b01      	ldr	r3, [sp, #4]
 801482e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014830:	4293      	cmp	r3, r2
 8014832:	d310      	bcc.n	8014856 <__multiply+0xb2>
 8014834:	9b03      	ldr	r3, [sp, #12]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dd05      	ble.n	8014846 <__multiply+0xa2>
 801483a:	9b04      	ldr	r3, [sp, #16]
 801483c:	3b04      	subs	r3, #4
 801483e:	9304      	str	r3, [sp, #16]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d056      	beq.n	80148f4 <__multiply+0x150>
 8014846:	9b02      	ldr	r3, [sp, #8]
 8014848:	9a03      	ldr	r2, [sp, #12]
 801484a:	0018      	movs	r0, r3
 801484c:	611a      	str	r2, [r3, #16]
 801484e:	b00b      	add	sp, #44	; 0x2c
 8014850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014852:	c304      	stmia	r3!, {r2}
 8014854:	e7cf      	b.n	80147f6 <__multiply+0x52>
 8014856:	9b01      	ldr	r3, [sp, #4]
 8014858:	6818      	ldr	r0, [r3, #0]
 801485a:	b280      	uxth	r0, r0
 801485c:	2800      	cmp	r0, #0
 801485e:	d01e      	beq.n	801489e <__multiply+0xfa>
 8014860:	4667      	mov	r7, ip
 8014862:	2500      	movs	r5, #0
 8014864:	9e08      	ldr	r6, [sp, #32]
 8014866:	ce02      	ldmia	r6!, {r1}
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	9307      	str	r3, [sp, #28]
 801486c:	b28b      	uxth	r3, r1
 801486e:	4343      	muls	r3, r0
 8014870:	001a      	movs	r2, r3
 8014872:	466b      	mov	r3, sp
 8014874:	8b9b      	ldrh	r3, [r3, #28]
 8014876:	18d3      	adds	r3, r2, r3
 8014878:	195b      	adds	r3, r3, r5
 801487a:	0c0d      	lsrs	r5, r1, #16
 801487c:	4345      	muls	r5, r0
 801487e:	9a07      	ldr	r2, [sp, #28]
 8014880:	0c11      	lsrs	r1, r2, #16
 8014882:	1869      	adds	r1, r5, r1
 8014884:	0c1a      	lsrs	r2, r3, #16
 8014886:	188a      	adds	r2, r1, r2
 8014888:	b29b      	uxth	r3, r3
 801488a:	0c15      	lsrs	r5, r2, #16
 801488c:	0412      	lsls	r2, r2, #16
 801488e:	431a      	orrs	r2, r3
 8014890:	9b05      	ldr	r3, [sp, #20]
 8014892:	c704      	stmia	r7!, {r2}
 8014894:	42b3      	cmp	r3, r6
 8014896:	d8e6      	bhi.n	8014866 <__multiply+0xc2>
 8014898:	4663      	mov	r3, ip
 801489a:	9a06      	ldr	r2, [sp, #24]
 801489c:	509d      	str	r5, [r3, r2]
 801489e:	9b01      	ldr	r3, [sp, #4]
 80148a0:	6818      	ldr	r0, [r3, #0]
 80148a2:	0c00      	lsrs	r0, r0, #16
 80148a4:	d020      	beq.n	80148e8 <__multiply+0x144>
 80148a6:	4663      	mov	r3, ip
 80148a8:	0025      	movs	r5, r4
 80148aa:	4661      	mov	r1, ip
 80148ac:	2700      	movs	r7, #0
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	3514      	adds	r5, #20
 80148b2:	682a      	ldr	r2, [r5, #0]
 80148b4:	680e      	ldr	r6, [r1, #0]
 80148b6:	b292      	uxth	r2, r2
 80148b8:	4342      	muls	r2, r0
 80148ba:	0c36      	lsrs	r6, r6, #16
 80148bc:	1992      	adds	r2, r2, r6
 80148be:	19d2      	adds	r2, r2, r7
 80148c0:	0416      	lsls	r6, r2, #16
 80148c2:	b29b      	uxth	r3, r3
 80148c4:	431e      	orrs	r6, r3
 80148c6:	600e      	str	r6, [r1, #0]
 80148c8:	cd40      	ldmia	r5!, {r6}
 80148ca:	684b      	ldr	r3, [r1, #4]
 80148cc:	0c36      	lsrs	r6, r6, #16
 80148ce:	4346      	muls	r6, r0
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	0c12      	lsrs	r2, r2, #16
 80148d4:	18f3      	adds	r3, r6, r3
 80148d6:	189b      	adds	r3, r3, r2
 80148d8:	9a05      	ldr	r2, [sp, #20]
 80148da:	0c1f      	lsrs	r7, r3, #16
 80148dc:	3104      	adds	r1, #4
 80148de:	42aa      	cmp	r2, r5
 80148e0:	d8e7      	bhi.n	80148b2 <__multiply+0x10e>
 80148e2:	4662      	mov	r2, ip
 80148e4:	9906      	ldr	r1, [sp, #24]
 80148e6:	5053      	str	r3, [r2, r1]
 80148e8:	9b01      	ldr	r3, [sp, #4]
 80148ea:	3304      	adds	r3, #4
 80148ec:	9301      	str	r3, [sp, #4]
 80148ee:	2304      	movs	r3, #4
 80148f0:	449c      	add	ip, r3
 80148f2:	e79b      	b.n	801482c <__multiply+0x88>
 80148f4:	9b03      	ldr	r3, [sp, #12]
 80148f6:	3b01      	subs	r3, #1
 80148f8:	9303      	str	r3, [sp, #12]
 80148fa:	e79b      	b.n	8014834 <__multiply+0x90>
 80148fc:	080182f4 	.word	0x080182f4
 8014900:	08018365 	.word	0x08018365

08014904 <__pow5mult>:
 8014904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014906:	2303      	movs	r3, #3
 8014908:	0015      	movs	r5, r2
 801490a:	0007      	movs	r7, r0
 801490c:	000e      	movs	r6, r1
 801490e:	401a      	ands	r2, r3
 8014910:	421d      	tst	r5, r3
 8014912:	d008      	beq.n	8014926 <__pow5mult+0x22>
 8014914:	4925      	ldr	r1, [pc, #148]	; (80149ac <__pow5mult+0xa8>)
 8014916:	3a01      	subs	r2, #1
 8014918:	0092      	lsls	r2, r2, #2
 801491a:	5852      	ldr	r2, [r2, r1]
 801491c:	2300      	movs	r3, #0
 801491e:	0031      	movs	r1, r6
 8014920:	f7ff fe50 	bl	80145c4 <__multadd>
 8014924:	0006      	movs	r6, r0
 8014926:	10ad      	asrs	r5, r5, #2
 8014928:	d03d      	beq.n	80149a6 <__pow5mult+0xa2>
 801492a:	69fc      	ldr	r4, [r7, #28]
 801492c:	2c00      	cmp	r4, #0
 801492e:	d10f      	bne.n	8014950 <__pow5mult+0x4c>
 8014930:	2010      	movs	r0, #16
 8014932:	f7fc fa4d 	bl	8010dd0 <malloc>
 8014936:	1e02      	subs	r2, r0, #0
 8014938:	61f8      	str	r0, [r7, #28]
 801493a:	d105      	bne.n	8014948 <__pow5mult+0x44>
 801493c:	21b4      	movs	r1, #180	; 0xb4
 801493e:	4b1c      	ldr	r3, [pc, #112]	; (80149b0 <__pow5mult+0xac>)
 8014940:	481c      	ldr	r0, [pc, #112]	; (80149b4 <__pow5mult+0xb0>)
 8014942:	31ff      	adds	r1, #255	; 0xff
 8014944:	f7fe fb62 	bl	801300c <__assert_func>
 8014948:	6044      	str	r4, [r0, #4]
 801494a:	6084      	str	r4, [r0, #8]
 801494c:	6004      	str	r4, [r0, #0]
 801494e:	60c4      	str	r4, [r0, #12]
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	689c      	ldr	r4, [r3, #8]
 8014954:	9301      	str	r3, [sp, #4]
 8014956:	2c00      	cmp	r4, #0
 8014958:	d108      	bne.n	801496c <__pow5mult+0x68>
 801495a:	0038      	movs	r0, r7
 801495c:	4916      	ldr	r1, [pc, #88]	; (80149b8 <__pow5mult+0xb4>)
 801495e:	f7ff ff09 	bl	8014774 <__i2b>
 8014962:	9b01      	ldr	r3, [sp, #4]
 8014964:	0004      	movs	r4, r0
 8014966:	6098      	str	r0, [r3, #8]
 8014968:	2300      	movs	r3, #0
 801496a:	6003      	str	r3, [r0, #0]
 801496c:	2301      	movs	r3, #1
 801496e:	421d      	tst	r5, r3
 8014970:	d00a      	beq.n	8014988 <__pow5mult+0x84>
 8014972:	0031      	movs	r1, r6
 8014974:	0022      	movs	r2, r4
 8014976:	0038      	movs	r0, r7
 8014978:	f7ff ff14 	bl	80147a4 <__multiply>
 801497c:	0031      	movs	r1, r6
 801497e:	9001      	str	r0, [sp, #4]
 8014980:	0038      	movs	r0, r7
 8014982:	f7ff fdfb 	bl	801457c <_Bfree>
 8014986:	9e01      	ldr	r6, [sp, #4]
 8014988:	106d      	asrs	r5, r5, #1
 801498a:	d00c      	beq.n	80149a6 <__pow5mult+0xa2>
 801498c:	6820      	ldr	r0, [r4, #0]
 801498e:	2800      	cmp	r0, #0
 8014990:	d107      	bne.n	80149a2 <__pow5mult+0x9e>
 8014992:	0022      	movs	r2, r4
 8014994:	0021      	movs	r1, r4
 8014996:	0038      	movs	r0, r7
 8014998:	f7ff ff04 	bl	80147a4 <__multiply>
 801499c:	2300      	movs	r3, #0
 801499e:	6020      	str	r0, [r4, #0]
 80149a0:	6003      	str	r3, [r0, #0]
 80149a2:	0004      	movs	r4, r0
 80149a4:	e7e2      	b.n	801496c <__pow5mult+0x68>
 80149a6:	0030      	movs	r0, r6
 80149a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80149aa:	46c0      	nop			; (mov r8, r8)
 80149ac:	080184b0 	.word	0x080184b0
 80149b0:	080181da 	.word	0x080181da
 80149b4:	08018365 	.word	0x08018365
 80149b8:	00000271 	.word	0x00000271

080149bc <__lshift>:
 80149bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149be:	000c      	movs	r4, r1
 80149c0:	0017      	movs	r7, r2
 80149c2:	6923      	ldr	r3, [r4, #16]
 80149c4:	1155      	asrs	r5, r2, #5
 80149c6:	b087      	sub	sp, #28
 80149c8:	18eb      	adds	r3, r5, r3
 80149ca:	9302      	str	r3, [sp, #8]
 80149cc:	3301      	adds	r3, #1
 80149ce:	9301      	str	r3, [sp, #4]
 80149d0:	6849      	ldr	r1, [r1, #4]
 80149d2:	68a3      	ldr	r3, [r4, #8]
 80149d4:	9004      	str	r0, [sp, #16]
 80149d6:	9a01      	ldr	r2, [sp, #4]
 80149d8:	4293      	cmp	r3, r2
 80149da:	db10      	blt.n	80149fe <__lshift+0x42>
 80149dc:	9804      	ldr	r0, [sp, #16]
 80149de:	f7ff fd89 	bl	80144f4 <_Balloc>
 80149e2:	2300      	movs	r3, #0
 80149e4:	0002      	movs	r2, r0
 80149e6:	0006      	movs	r6, r0
 80149e8:	0019      	movs	r1, r3
 80149ea:	3214      	adds	r2, #20
 80149ec:	4298      	cmp	r0, r3
 80149ee:	d10c      	bne.n	8014a0a <__lshift+0x4e>
 80149f0:	31df      	adds	r1, #223	; 0xdf
 80149f2:	0032      	movs	r2, r6
 80149f4:	4b26      	ldr	r3, [pc, #152]	; (8014a90 <__lshift+0xd4>)
 80149f6:	4827      	ldr	r0, [pc, #156]	; (8014a94 <__lshift+0xd8>)
 80149f8:	31ff      	adds	r1, #255	; 0xff
 80149fa:	f7fe fb07 	bl	801300c <__assert_func>
 80149fe:	3101      	adds	r1, #1
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	e7e8      	b.n	80149d6 <__lshift+0x1a>
 8014a04:	0098      	lsls	r0, r3, #2
 8014a06:	5011      	str	r1, [r2, r0]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	42ab      	cmp	r3, r5
 8014a0c:	dbfa      	blt.n	8014a04 <__lshift+0x48>
 8014a0e:	43eb      	mvns	r3, r5
 8014a10:	17db      	asrs	r3, r3, #31
 8014a12:	401d      	ands	r5, r3
 8014a14:	211f      	movs	r1, #31
 8014a16:	0023      	movs	r3, r4
 8014a18:	0038      	movs	r0, r7
 8014a1a:	00ad      	lsls	r5, r5, #2
 8014a1c:	1955      	adds	r5, r2, r5
 8014a1e:	6922      	ldr	r2, [r4, #16]
 8014a20:	3314      	adds	r3, #20
 8014a22:	0092      	lsls	r2, r2, #2
 8014a24:	4008      	ands	r0, r1
 8014a26:	4684      	mov	ip, r0
 8014a28:	189a      	adds	r2, r3, r2
 8014a2a:	420f      	tst	r7, r1
 8014a2c:	d02a      	beq.n	8014a84 <__lshift+0xc8>
 8014a2e:	3101      	adds	r1, #1
 8014a30:	1a09      	subs	r1, r1, r0
 8014a32:	9105      	str	r1, [sp, #20]
 8014a34:	2100      	movs	r1, #0
 8014a36:	9503      	str	r5, [sp, #12]
 8014a38:	4667      	mov	r7, ip
 8014a3a:	6818      	ldr	r0, [r3, #0]
 8014a3c:	40b8      	lsls	r0, r7
 8014a3e:	4308      	orrs	r0, r1
 8014a40:	9903      	ldr	r1, [sp, #12]
 8014a42:	c101      	stmia	r1!, {r0}
 8014a44:	9103      	str	r1, [sp, #12]
 8014a46:	9805      	ldr	r0, [sp, #20]
 8014a48:	cb02      	ldmia	r3!, {r1}
 8014a4a:	40c1      	lsrs	r1, r0
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d8f3      	bhi.n	8014a38 <__lshift+0x7c>
 8014a50:	0020      	movs	r0, r4
 8014a52:	3015      	adds	r0, #21
 8014a54:	2304      	movs	r3, #4
 8014a56:	4282      	cmp	r2, r0
 8014a58:	d304      	bcc.n	8014a64 <__lshift+0xa8>
 8014a5a:	1b13      	subs	r3, r2, r4
 8014a5c:	3b15      	subs	r3, #21
 8014a5e:	089b      	lsrs	r3, r3, #2
 8014a60:	3301      	adds	r3, #1
 8014a62:	009b      	lsls	r3, r3, #2
 8014a64:	50e9      	str	r1, [r5, r3]
 8014a66:	2900      	cmp	r1, #0
 8014a68:	d002      	beq.n	8014a70 <__lshift+0xb4>
 8014a6a:	9b02      	ldr	r3, [sp, #8]
 8014a6c:	3302      	adds	r3, #2
 8014a6e:	9301      	str	r3, [sp, #4]
 8014a70:	9b01      	ldr	r3, [sp, #4]
 8014a72:	9804      	ldr	r0, [sp, #16]
 8014a74:	3b01      	subs	r3, #1
 8014a76:	0021      	movs	r1, r4
 8014a78:	6133      	str	r3, [r6, #16]
 8014a7a:	f7ff fd7f 	bl	801457c <_Bfree>
 8014a7e:	0030      	movs	r0, r6
 8014a80:	b007      	add	sp, #28
 8014a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a84:	cb02      	ldmia	r3!, {r1}
 8014a86:	c502      	stmia	r5!, {r1}
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d8fb      	bhi.n	8014a84 <__lshift+0xc8>
 8014a8c:	e7f0      	b.n	8014a70 <__lshift+0xb4>
 8014a8e:	46c0      	nop			; (mov r8, r8)
 8014a90:	080182f4 	.word	0x080182f4
 8014a94:	08018365 	.word	0x08018365

08014a98 <__mcmp>:
 8014a98:	b530      	push	{r4, r5, lr}
 8014a9a:	690b      	ldr	r3, [r1, #16]
 8014a9c:	6904      	ldr	r4, [r0, #16]
 8014a9e:	0002      	movs	r2, r0
 8014aa0:	1ae0      	subs	r0, r4, r3
 8014aa2:	429c      	cmp	r4, r3
 8014aa4:	d10e      	bne.n	8014ac4 <__mcmp+0x2c>
 8014aa6:	3214      	adds	r2, #20
 8014aa8:	009b      	lsls	r3, r3, #2
 8014aaa:	3114      	adds	r1, #20
 8014aac:	0014      	movs	r4, r2
 8014aae:	18c9      	adds	r1, r1, r3
 8014ab0:	18d2      	adds	r2, r2, r3
 8014ab2:	3a04      	subs	r2, #4
 8014ab4:	3904      	subs	r1, #4
 8014ab6:	6815      	ldr	r5, [r2, #0]
 8014ab8:	680b      	ldr	r3, [r1, #0]
 8014aba:	429d      	cmp	r5, r3
 8014abc:	d003      	beq.n	8014ac6 <__mcmp+0x2e>
 8014abe:	2001      	movs	r0, #1
 8014ac0:	429d      	cmp	r5, r3
 8014ac2:	d303      	bcc.n	8014acc <__mcmp+0x34>
 8014ac4:	bd30      	pop	{r4, r5, pc}
 8014ac6:	4294      	cmp	r4, r2
 8014ac8:	d3f3      	bcc.n	8014ab2 <__mcmp+0x1a>
 8014aca:	e7fb      	b.n	8014ac4 <__mcmp+0x2c>
 8014acc:	4240      	negs	r0, r0
 8014ace:	e7f9      	b.n	8014ac4 <__mcmp+0x2c>

08014ad0 <__mdiff>:
 8014ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ad2:	000e      	movs	r6, r1
 8014ad4:	0007      	movs	r7, r0
 8014ad6:	0011      	movs	r1, r2
 8014ad8:	0030      	movs	r0, r6
 8014ada:	b087      	sub	sp, #28
 8014adc:	0014      	movs	r4, r2
 8014ade:	f7ff ffdb 	bl	8014a98 <__mcmp>
 8014ae2:	1e05      	subs	r5, r0, #0
 8014ae4:	d110      	bne.n	8014b08 <__mdiff+0x38>
 8014ae6:	0001      	movs	r1, r0
 8014ae8:	0038      	movs	r0, r7
 8014aea:	f7ff fd03 	bl	80144f4 <_Balloc>
 8014aee:	1e02      	subs	r2, r0, #0
 8014af0:	d104      	bne.n	8014afc <__mdiff+0x2c>
 8014af2:	4b3f      	ldr	r3, [pc, #252]	; (8014bf0 <__mdiff+0x120>)
 8014af4:	483f      	ldr	r0, [pc, #252]	; (8014bf4 <__mdiff+0x124>)
 8014af6:	4940      	ldr	r1, [pc, #256]	; (8014bf8 <__mdiff+0x128>)
 8014af8:	f7fe fa88 	bl	801300c <__assert_func>
 8014afc:	2301      	movs	r3, #1
 8014afe:	6145      	str	r5, [r0, #20]
 8014b00:	6103      	str	r3, [r0, #16]
 8014b02:	0010      	movs	r0, r2
 8014b04:	b007      	add	sp, #28
 8014b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b08:	2301      	movs	r3, #1
 8014b0a:	9301      	str	r3, [sp, #4]
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	db04      	blt.n	8014b1a <__mdiff+0x4a>
 8014b10:	0023      	movs	r3, r4
 8014b12:	0034      	movs	r4, r6
 8014b14:	001e      	movs	r6, r3
 8014b16:	2300      	movs	r3, #0
 8014b18:	9301      	str	r3, [sp, #4]
 8014b1a:	0038      	movs	r0, r7
 8014b1c:	6861      	ldr	r1, [r4, #4]
 8014b1e:	f7ff fce9 	bl	80144f4 <_Balloc>
 8014b22:	1e02      	subs	r2, r0, #0
 8014b24:	d103      	bne.n	8014b2e <__mdiff+0x5e>
 8014b26:	4b32      	ldr	r3, [pc, #200]	; (8014bf0 <__mdiff+0x120>)
 8014b28:	4832      	ldr	r0, [pc, #200]	; (8014bf4 <__mdiff+0x124>)
 8014b2a:	4934      	ldr	r1, [pc, #208]	; (8014bfc <__mdiff+0x12c>)
 8014b2c:	e7e4      	b.n	8014af8 <__mdiff+0x28>
 8014b2e:	9b01      	ldr	r3, [sp, #4]
 8014b30:	2700      	movs	r7, #0
 8014b32:	60c3      	str	r3, [r0, #12]
 8014b34:	6920      	ldr	r0, [r4, #16]
 8014b36:	3414      	adds	r4, #20
 8014b38:	0083      	lsls	r3, r0, #2
 8014b3a:	18e3      	adds	r3, r4, r3
 8014b3c:	0021      	movs	r1, r4
 8014b3e:	9401      	str	r4, [sp, #4]
 8014b40:	0034      	movs	r4, r6
 8014b42:	9302      	str	r3, [sp, #8]
 8014b44:	6933      	ldr	r3, [r6, #16]
 8014b46:	3414      	adds	r4, #20
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	18e3      	adds	r3, r4, r3
 8014b4c:	9303      	str	r3, [sp, #12]
 8014b4e:	0013      	movs	r3, r2
 8014b50:	3314      	adds	r3, #20
 8014b52:	469c      	mov	ip, r3
 8014b54:	9305      	str	r3, [sp, #20]
 8014b56:	9104      	str	r1, [sp, #16]
 8014b58:	9b04      	ldr	r3, [sp, #16]
 8014b5a:	cc02      	ldmia	r4!, {r1}
 8014b5c:	cb20      	ldmia	r3!, {r5}
 8014b5e:	9304      	str	r3, [sp, #16]
 8014b60:	b2ab      	uxth	r3, r5
 8014b62:	19df      	adds	r7, r3, r7
 8014b64:	b28b      	uxth	r3, r1
 8014b66:	1afb      	subs	r3, r7, r3
 8014b68:	0c09      	lsrs	r1, r1, #16
 8014b6a:	0c2d      	lsrs	r5, r5, #16
 8014b6c:	1a6d      	subs	r5, r5, r1
 8014b6e:	1419      	asrs	r1, r3, #16
 8014b70:	1869      	adds	r1, r5, r1
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	140f      	asrs	r7, r1, #16
 8014b76:	0409      	lsls	r1, r1, #16
 8014b78:	4319      	orrs	r1, r3
 8014b7a:	4663      	mov	r3, ip
 8014b7c:	c302      	stmia	r3!, {r1}
 8014b7e:	469c      	mov	ip, r3
 8014b80:	9b03      	ldr	r3, [sp, #12]
 8014b82:	42a3      	cmp	r3, r4
 8014b84:	d8e8      	bhi.n	8014b58 <__mdiff+0x88>
 8014b86:	0031      	movs	r1, r6
 8014b88:	9c03      	ldr	r4, [sp, #12]
 8014b8a:	3115      	adds	r1, #21
 8014b8c:	2304      	movs	r3, #4
 8014b8e:	428c      	cmp	r4, r1
 8014b90:	d304      	bcc.n	8014b9c <__mdiff+0xcc>
 8014b92:	1ba3      	subs	r3, r4, r6
 8014b94:	3b15      	subs	r3, #21
 8014b96:	089b      	lsrs	r3, r3, #2
 8014b98:	3301      	adds	r3, #1
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	9901      	ldr	r1, [sp, #4]
 8014b9e:	18cd      	adds	r5, r1, r3
 8014ba0:	9905      	ldr	r1, [sp, #20]
 8014ba2:	002e      	movs	r6, r5
 8014ba4:	18cb      	adds	r3, r1, r3
 8014ba6:	469c      	mov	ip, r3
 8014ba8:	9902      	ldr	r1, [sp, #8]
 8014baa:	428e      	cmp	r6, r1
 8014bac:	d310      	bcc.n	8014bd0 <__mdiff+0x100>
 8014bae:	9e02      	ldr	r6, [sp, #8]
 8014bb0:	1ee9      	subs	r1, r5, #3
 8014bb2:	2400      	movs	r4, #0
 8014bb4:	428e      	cmp	r6, r1
 8014bb6:	d304      	bcc.n	8014bc2 <__mdiff+0xf2>
 8014bb8:	0031      	movs	r1, r6
 8014bba:	3103      	adds	r1, #3
 8014bbc:	1b49      	subs	r1, r1, r5
 8014bbe:	0889      	lsrs	r1, r1, #2
 8014bc0:	008c      	lsls	r4, r1, #2
 8014bc2:	191b      	adds	r3, r3, r4
 8014bc4:	3b04      	subs	r3, #4
 8014bc6:	6819      	ldr	r1, [r3, #0]
 8014bc8:	2900      	cmp	r1, #0
 8014bca:	d00f      	beq.n	8014bec <__mdiff+0x11c>
 8014bcc:	6110      	str	r0, [r2, #16]
 8014bce:	e798      	b.n	8014b02 <__mdiff+0x32>
 8014bd0:	ce02      	ldmia	r6!, {r1}
 8014bd2:	b28c      	uxth	r4, r1
 8014bd4:	19e4      	adds	r4, r4, r7
 8014bd6:	0c0f      	lsrs	r7, r1, #16
 8014bd8:	1421      	asrs	r1, r4, #16
 8014bda:	1879      	adds	r1, r7, r1
 8014bdc:	b2a4      	uxth	r4, r4
 8014bde:	140f      	asrs	r7, r1, #16
 8014be0:	0409      	lsls	r1, r1, #16
 8014be2:	4321      	orrs	r1, r4
 8014be4:	4664      	mov	r4, ip
 8014be6:	c402      	stmia	r4!, {r1}
 8014be8:	46a4      	mov	ip, r4
 8014bea:	e7dd      	b.n	8014ba8 <__mdiff+0xd8>
 8014bec:	3801      	subs	r0, #1
 8014bee:	e7e9      	b.n	8014bc4 <__mdiff+0xf4>
 8014bf0:	080182f4 	.word	0x080182f4
 8014bf4:	08018365 	.word	0x08018365
 8014bf8:	00000237 	.word	0x00000237
 8014bfc:	00000245 	.word	0x00000245

08014c00 <__ulp>:
 8014c00:	2000      	movs	r0, #0
 8014c02:	4b0b      	ldr	r3, [pc, #44]	; (8014c30 <__ulp+0x30>)
 8014c04:	4019      	ands	r1, r3
 8014c06:	4b0b      	ldr	r3, [pc, #44]	; (8014c34 <__ulp+0x34>)
 8014c08:	18c9      	adds	r1, r1, r3
 8014c0a:	4281      	cmp	r1, r0
 8014c0c:	dc06      	bgt.n	8014c1c <__ulp+0x1c>
 8014c0e:	4249      	negs	r1, r1
 8014c10:	150b      	asrs	r3, r1, #20
 8014c12:	2b13      	cmp	r3, #19
 8014c14:	dc03      	bgt.n	8014c1e <__ulp+0x1e>
 8014c16:	2180      	movs	r1, #128	; 0x80
 8014c18:	0309      	lsls	r1, r1, #12
 8014c1a:	4119      	asrs	r1, r3
 8014c1c:	4770      	bx	lr
 8014c1e:	3b14      	subs	r3, #20
 8014c20:	2001      	movs	r0, #1
 8014c22:	2b1e      	cmp	r3, #30
 8014c24:	dc02      	bgt.n	8014c2c <__ulp+0x2c>
 8014c26:	2080      	movs	r0, #128	; 0x80
 8014c28:	0600      	lsls	r0, r0, #24
 8014c2a:	40d8      	lsrs	r0, r3
 8014c2c:	2100      	movs	r1, #0
 8014c2e:	e7f5      	b.n	8014c1c <__ulp+0x1c>
 8014c30:	7ff00000 	.word	0x7ff00000
 8014c34:	fcc00000 	.word	0xfcc00000

08014c38 <__b2d>:
 8014c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c3a:	0006      	movs	r6, r0
 8014c3c:	6903      	ldr	r3, [r0, #16]
 8014c3e:	3614      	adds	r6, #20
 8014c40:	009b      	lsls	r3, r3, #2
 8014c42:	18f3      	adds	r3, r6, r3
 8014c44:	1f1d      	subs	r5, r3, #4
 8014c46:	682c      	ldr	r4, [r5, #0]
 8014c48:	000f      	movs	r7, r1
 8014c4a:	0020      	movs	r0, r4
 8014c4c:	9301      	str	r3, [sp, #4]
 8014c4e:	f7ff fd49 	bl	80146e4 <__hi0bits>
 8014c52:	2220      	movs	r2, #32
 8014c54:	1a12      	subs	r2, r2, r0
 8014c56:	603a      	str	r2, [r7, #0]
 8014c58:	0003      	movs	r3, r0
 8014c5a:	4a1c      	ldr	r2, [pc, #112]	; (8014ccc <__b2d+0x94>)
 8014c5c:	280a      	cmp	r0, #10
 8014c5e:	dc15      	bgt.n	8014c8c <__b2d+0x54>
 8014c60:	210b      	movs	r1, #11
 8014c62:	0027      	movs	r7, r4
 8014c64:	1a09      	subs	r1, r1, r0
 8014c66:	40cf      	lsrs	r7, r1
 8014c68:	433a      	orrs	r2, r7
 8014c6a:	468c      	mov	ip, r1
 8014c6c:	0011      	movs	r1, r2
 8014c6e:	2200      	movs	r2, #0
 8014c70:	42ae      	cmp	r6, r5
 8014c72:	d202      	bcs.n	8014c7a <__b2d+0x42>
 8014c74:	9a01      	ldr	r2, [sp, #4]
 8014c76:	3a08      	subs	r2, #8
 8014c78:	6812      	ldr	r2, [r2, #0]
 8014c7a:	3315      	adds	r3, #21
 8014c7c:	409c      	lsls	r4, r3
 8014c7e:	4663      	mov	r3, ip
 8014c80:	0027      	movs	r7, r4
 8014c82:	40da      	lsrs	r2, r3
 8014c84:	4317      	orrs	r7, r2
 8014c86:	0038      	movs	r0, r7
 8014c88:	b003      	add	sp, #12
 8014c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c8c:	2700      	movs	r7, #0
 8014c8e:	42ae      	cmp	r6, r5
 8014c90:	d202      	bcs.n	8014c98 <__b2d+0x60>
 8014c92:	9d01      	ldr	r5, [sp, #4]
 8014c94:	3d08      	subs	r5, #8
 8014c96:	682f      	ldr	r7, [r5, #0]
 8014c98:	210b      	movs	r1, #11
 8014c9a:	4249      	negs	r1, r1
 8014c9c:	468c      	mov	ip, r1
 8014c9e:	449c      	add	ip, r3
 8014ca0:	2b0b      	cmp	r3, #11
 8014ca2:	d010      	beq.n	8014cc6 <__b2d+0x8e>
 8014ca4:	4661      	mov	r1, ip
 8014ca6:	2320      	movs	r3, #32
 8014ca8:	408c      	lsls	r4, r1
 8014caa:	1a5b      	subs	r3, r3, r1
 8014cac:	0039      	movs	r1, r7
 8014cae:	40d9      	lsrs	r1, r3
 8014cb0:	430c      	orrs	r4, r1
 8014cb2:	4322      	orrs	r2, r4
 8014cb4:	0011      	movs	r1, r2
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	42b5      	cmp	r5, r6
 8014cba:	d901      	bls.n	8014cc0 <__b2d+0x88>
 8014cbc:	3d04      	subs	r5, #4
 8014cbe:	682a      	ldr	r2, [r5, #0]
 8014cc0:	4664      	mov	r4, ip
 8014cc2:	40a7      	lsls	r7, r4
 8014cc4:	e7dd      	b.n	8014c82 <__b2d+0x4a>
 8014cc6:	4322      	orrs	r2, r4
 8014cc8:	0011      	movs	r1, r2
 8014cca:	e7dc      	b.n	8014c86 <__b2d+0x4e>
 8014ccc:	3ff00000 	.word	0x3ff00000

08014cd0 <__d2b>:
 8014cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	0014      	movs	r4, r2
 8014cd6:	001d      	movs	r5, r3
 8014cd8:	9f08      	ldr	r7, [sp, #32]
 8014cda:	f7ff fc0b 	bl	80144f4 <_Balloc>
 8014cde:	1e06      	subs	r6, r0, #0
 8014ce0:	d105      	bne.n	8014cee <__d2b+0x1e>
 8014ce2:	0032      	movs	r2, r6
 8014ce4:	4b24      	ldr	r3, [pc, #144]	; (8014d78 <__d2b+0xa8>)
 8014ce6:	4825      	ldr	r0, [pc, #148]	; (8014d7c <__d2b+0xac>)
 8014ce8:	4925      	ldr	r1, [pc, #148]	; (8014d80 <__d2b+0xb0>)
 8014cea:	f7fe f98f 	bl	801300c <__assert_func>
 8014cee:	032b      	lsls	r3, r5, #12
 8014cf0:	006d      	lsls	r5, r5, #1
 8014cf2:	0b1b      	lsrs	r3, r3, #12
 8014cf4:	0d6d      	lsrs	r5, r5, #21
 8014cf6:	d125      	bne.n	8014d44 <__d2b+0x74>
 8014cf8:	9301      	str	r3, [sp, #4]
 8014cfa:	2c00      	cmp	r4, #0
 8014cfc:	d028      	beq.n	8014d50 <__d2b+0x80>
 8014cfe:	4668      	mov	r0, sp
 8014d00:	9400      	str	r4, [sp, #0]
 8014d02:	f7ff fd09 	bl	8014718 <__lo0bits>
 8014d06:	9b01      	ldr	r3, [sp, #4]
 8014d08:	9900      	ldr	r1, [sp, #0]
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d01e      	beq.n	8014d4c <__d2b+0x7c>
 8014d0e:	2220      	movs	r2, #32
 8014d10:	001c      	movs	r4, r3
 8014d12:	1a12      	subs	r2, r2, r0
 8014d14:	4094      	lsls	r4, r2
 8014d16:	0022      	movs	r2, r4
 8014d18:	40c3      	lsrs	r3, r0
 8014d1a:	430a      	orrs	r2, r1
 8014d1c:	6172      	str	r2, [r6, #20]
 8014d1e:	9301      	str	r3, [sp, #4]
 8014d20:	9c01      	ldr	r4, [sp, #4]
 8014d22:	61b4      	str	r4, [r6, #24]
 8014d24:	1e63      	subs	r3, r4, #1
 8014d26:	419c      	sbcs	r4, r3
 8014d28:	3401      	adds	r4, #1
 8014d2a:	6134      	str	r4, [r6, #16]
 8014d2c:	2d00      	cmp	r5, #0
 8014d2e:	d017      	beq.n	8014d60 <__d2b+0x90>
 8014d30:	2435      	movs	r4, #53	; 0x35
 8014d32:	4b14      	ldr	r3, [pc, #80]	; (8014d84 <__d2b+0xb4>)
 8014d34:	18ed      	adds	r5, r5, r3
 8014d36:	182d      	adds	r5, r5, r0
 8014d38:	603d      	str	r5, [r7, #0]
 8014d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d3c:	1a24      	subs	r4, r4, r0
 8014d3e:	601c      	str	r4, [r3, #0]
 8014d40:	0030      	movs	r0, r6
 8014d42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014d44:	2280      	movs	r2, #128	; 0x80
 8014d46:	0352      	lsls	r2, r2, #13
 8014d48:	4313      	orrs	r3, r2
 8014d4a:	e7d5      	b.n	8014cf8 <__d2b+0x28>
 8014d4c:	6171      	str	r1, [r6, #20]
 8014d4e:	e7e7      	b.n	8014d20 <__d2b+0x50>
 8014d50:	a801      	add	r0, sp, #4
 8014d52:	f7ff fce1 	bl	8014718 <__lo0bits>
 8014d56:	9b01      	ldr	r3, [sp, #4]
 8014d58:	2401      	movs	r4, #1
 8014d5a:	6173      	str	r3, [r6, #20]
 8014d5c:	3020      	adds	r0, #32
 8014d5e:	e7e4      	b.n	8014d2a <__d2b+0x5a>
 8014d60:	4b09      	ldr	r3, [pc, #36]	; (8014d88 <__d2b+0xb8>)
 8014d62:	18c0      	adds	r0, r0, r3
 8014d64:	4b09      	ldr	r3, [pc, #36]	; (8014d8c <__d2b+0xbc>)
 8014d66:	6038      	str	r0, [r7, #0]
 8014d68:	18e3      	adds	r3, r4, r3
 8014d6a:	009b      	lsls	r3, r3, #2
 8014d6c:	18f3      	adds	r3, r6, r3
 8014d6e:	6958      	ldr	r0, [r3, #20]
 8014d70:	f7ff fcb8 	bl	80146e4 <__hi0bits>
 8014d74:	0164      	lsls	r4, r4, #5
 8014d76:	e7e0      	b.n	8014d3a <__d2b+0x6a>
 8014d78:	080182f4 	.word	0x080182f4
 8014d7c:	08018365 	.word	0x08018365
 8014d80:	0000030f 	.word	0x0000030f
 8014d84:	fffffbcd 	.word	0xfffffbcd
 8014d88:	fffffbce 	.word	0xfffffbce
 8014d8c:	3fffffff 	.word	0x3fffffff

08014d90 <__ratio>:
 8014d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d92:	b087      	sub	sp, #28
 8014d94:	000f      	movs	r7, r1
 8014d96:	a904      	add	r1, sp, #16
 8014d98:	0006      	movs	r6, r0
 8014d9a:	f7ff ff4d 	bl	8014c38 <__b2d>
 8014d9e:	9000      	str	r0, [sp, #0]
 8014da0:	9101      	str	r1, [sp, #4]
 8014da2:	9c00      	ldr	r4, [sp, #0]
 8014da4:	9d01      	ldr	r5, [sp, #4]
 8014da6:	0038      	movs	r0, r7
 8014da8:	a905      	add	r1, sp, #20
 8014daa:	f7ff ff45 	bl	8014c38 <__b2d>
 8014dae:	9002      	str	r0, [sp, #8]
 8014db0:	9103      	str	r1, [sp, #12]
 8014db2:	9a02      	ldr	r2, [sp, #8]
 8014db4:	9b03      	ldr	r3, [sp, #12]
 8014db6:	6930      	ldr	r0, [r6, #16]
 8014db8:	6939      	ldr	r1, [r7, #16]
 8014dba:	9e04      	ldr	r6, [sp, #16]
 8014dbc:	1a40      	subs	r0, r0, r1
 8014dbe:	9905      	ldr	r1, [sp, #20]
 8014dc0:	0140      	lsls	r0, r0, #5
 8014dc2:	1a71      	subs	r1, r6, r1
 8014dc4:	1841      	adds	r1, r0, r1
 8014dc6:	0508      	lsls	r0, r1, #20
 8014dc8:	2900      	cmp	r1, #0
 8014dca:	dd07      	ble.n	8014ddc <__ratio+0x4c>
 8014dcc:	9901      	ldr	r1, [sp, #4]
 8014dce:	1845      	adds	r5, r0, r1
 8014dd0:	0020      	movs	r0, r4
 8014dd2:	0029      	movs	r1, r5
 8014dd4:	f7ec fe84 	bl	8001ae0 <__aeabi_ddiv>
 8014dd8:	b007      	add	sp, #28
 8014dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ddc:	9903      	ldr	r1, [sp, #12]
 8014dde:	1a0b      	subs	r3, r1, r0
 8014de0:	e7f6      	b.n	8014dd0 <__ratio+0x40>

08014de2 <__copybits>:
 8014de2:	b570      	push	{r4, r5, r6, lr}
 8014de4:	0014      	movs	r4, r2
 8014de6:	0005      	movs	r5, r0
 8014de8:	3901      	subs	r1, #1
 8014dea:	6913      	ldr	r3, [r2, #16]
 8014dec:	1149      	asrs	r1, r1, #5
 8014dee:	3101      	adds	r1, #1
 8014df0:	0089      	lsls	r1, r1, #2
 8014df2:	3414      	adds	r4, #20
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	1841      	adds	r1, r0, r1
 8014df8:	18e3      	adds	r3, r4, r3
 8014dfa:	42a3      	cmp	r3, r4
 8014dfc:	d80d      	bhi.n	8014e1a <__copybits+0x38>
 8014dfe:	0014      	movs	r4, r2
 8014e00:	3411      	adds	r4, #17
 8014e02:	2500      	movs	r5, #0
 8014e04:	429c      	cmp	r4, r3
 8014e06:	d803      	bhi.n	8014e10 <__copybits+0x2e>
 8014e08:	1a9b      	subs	r3, r3, r2
 8014e0a:	3b11      	subs	r3, #17
 8014e0c:	089b      	lsrs	r3, r3, #2
 8014e0e:	009d      	lsls	r5, r3, #2
 8014e10:	2300      	movs	r3, #0
 8014e12:	1940      	adds	r0, r0, r5
 8014e14:	4281      	cmp	r1, r0
 8014e16:	d803      	bhi.n	8014e20 <__copybits+0x3e>
 8014e18:	bd70      	pop	{r4, r5, r6, pc}
 8014e1a:	cc40      	ldmia	r4!, {r6}
 8014e1c:	c540      	stmia	r5!, {r6}
 8014e1e:	e7ec      	b.n	8014dfa <__copybits+0x18>
 8014e20:	c008      	stmia	r0!, {r3}
 8014e22:	e7f7      	b.n	8014e14 <__copybits+0x32>

08014e24 <__any_on>:
 8014e24:	0002      	movs	r2, r0
 8014e26:	6900      	ldr	r0, [r0, #16]
 8014e28:	b510      	push	{r4, lr}
 8014e2a:	3214      	adds	r2, #20
 8014e2c:	114b      	asrs	r3, r1, #5
 8014e2e:	4298      	cmp	r0, r3
 8014e30:	db13      	blt.n	8014e5a <__any_on+0x36>
 8014e32:	dd0c      	ble.n	8014e4e <__any_on+0x2a>
 8014e34:	241f      	movs	r4, #31
 8014e36:	0008      	movs	r0, r1
 8014e38:	4020      	ands	r0, r4
 8014e3a:	4221      	tst	r1, r4
 8014e3c:	d007      	beq.n	8014e4e <__any_on+0x2a>
 8014e3e:	0099      	lsls	r1, r3, #2
 8014e40:	588c      	ldr	r4, [r1, r2]
 8014e42:	0021      	movs	r1, r4
 8014e44:	40c1      	lsrs	r1, r0
 8014e46:	4081      	lsls	r1, r0
 8014e48:	2001      	movs	r0, #1
 8014e4a:	428c      	cmp	r4, r1
 8014e4c:	d104      	bne.n	8014e58 <__any_on+0x34>
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	18d3      	adds	r3, r2, r3
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d803      	bhi.n	8014e5e <__any_on+0x3a>
 8014e56:	2000      	movs	r0, #0
 8014e58:	bd10      	pop	{r4, pc}
 8014e5a:	0003      	movs	r3, r0
 8014e5c:	e7f7      	b.n	8014e4e <__any_on+0x2a>
 8014e5e:	3b04      	subs	r3, #4
 8014e60:	6819      	ldr	r1, [r3, #0]
 8014e62:	2900      	cmp	r1, #0
 8014e64:	d0f5      	beq.n	8014e52 <__any_on+0x2e>
 8014e66:	2001      	movs	r0, #1
 8014e68:	e7f6      	b.n	8014e58 <__any_on+0x34>

08014e6a <__ascii_wctomb>:
 8014e6a:	0003      	movs	r3, r0
 8014e6c:	1e08      	subs	r0, r1, #0
 8014e6e:	d005      	beq.n	8014e7c <__ascii_wctomb+0x12>
 8014e70:	2aff      	cmp	r2, #255	; 0xff
 8014e72:	d904      	bls.n	8014e7e <__ascii_wctomb+0x14>
 8014e74:	228a      	movs	r2, #138	; 0x8a
 8014e76:	2001      	movs	r0, #1
 8014e78:	601a      	str	r2, [r3, #0]
 8014e7a:	4240      	negs	r0, r0
 8014e7c:	4770      	bx	lr
 8014e7e:	2001      	movs	r0, #1
 8014e80:	700a      	strb	r2, [r1, #0]
 8014e82:	e7fb      	b.n	8014e7c <__ascii_wctomb+0x12>

08014e84 <__ssputs_r>:
 8014e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e86:	b085      	sub	sp, #20
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	9203      	str	r2, [sp, #12]
 8014e8c:	688e      	ldr	r6, [r1, #8]
 8014e8e:	9a01      	ldr	r2, [sp, #4]
 8014e90:	0007      	movs	r7, r0
 8014e92:	000c      	movs	r4, r1
 8014e94:	680b      	ldr	r3, [r1, #0]
 8014e96:	4296      	cmp	r6, r2
 8014e98:	d831      	bhi.n	8014efe <__ssputs_r+0x7a>
 8014e9a:	898a      	ldrh	r2, [r1, #12]
 8014e9c:	2190      	movs	r1, #144	; 0x90
 8014e9e:	00c9      	lsls	r1, r1, #3
 8014ea0:	420a      	tst	r2, r1
 8014ea2:	d029      	beq.n	8014ef8 <__ssputs_r+0x74>
 8014ea4:	2003      	movs	r0, #3
 8014ea6:	6921      	ldr	r1, [r4, #16]
 8014ea8:	1a5b      	subs	r3, r3, r1
 8014eaa:	9302      	str	r3, [sp, #8]
 8014eac:	6963      	ldr	r3, [r4, #20]
 8014eae:	4343      	muls	r3, r0
 8014eb0:	0fdd      	lsrs	r5, r3, #31
 8014eb2:	18ed      	adds	r5, r5, r3
 8014eb4:	9b01      	ldr	r3, [sp, #4]
 8014eb6:	9802      	ldr	r0, [sp, #8]
 8014eb8:	3301      	adds	r3, #1
 8014eba:	181b      	adds	r3, r3, r0
 8014ebc:	106d      	asrs	r5, r5, #1
 8014ebe:	42ab      	cmp	r3, r5
 8014ec0:	d900      	bls.n	8014ec4 <__ssputs_r+0x40>
 8014ec2:	001d      	movs	r5, r3
 8014ec4:	0552      	lsls	r2, r2, #21
 8014ec6:	d529      	bpl.n	8014f1c <__ssputs_r+0x98>
 8014ec8:	0029      	movs	r1, r5
 8014eca:	0038      	movs	r0, r7
 8014ecc:	f7fb ffac 	bl	8010e28 <_malloc_r>
 8014ed0:	1e06      	subs	r6, r0, #0
 8014ed2:	d02d      	beq.n	8014f30 <__ssputs_r+0xac>
 8014ed4:	9a02      	ldr	r2, [sp, #8]
 8014ed6:	6921      	ldr	r1, [r4, #16]
 8014ed8:	f7fe f884 	bl	8012fe4 <memcpy>
 8014edc:	89a2      	ldrh	r2, [r4, #12]
 8014ede:	4b19      	ldr	r3, [pc, #100]	; (8014f44 <__ssputs_r+0xc0>)
 8014ee0:	401a      	ands	r2, r3
 8014ee2:	2380      	movs	r3, #128	; 0x80
 8014ee4:	4313      	orrs	r3, r2
 8014ee6:	81a3      	strh	r3, [r4, #12]
 8014ee8:	9b02      	ldr	r3, [sp, #8]
 8014eea:	6126      	str	r6, [r4, #16]
 8014eec:	18f6      	adds	r6, r6, r3
 8014eee:	6026      	str	r6, [r4, #0]
 8014ef0:	6165      	str	r5, [r4, #20]
 8014ef2:	9e01      	ldr	r6, [sp, #4]
 8014ef4:	1aed      	subs	r5, r5, r3
 8014ef6:	60a5      	str	r5, [r4, #8]
 8014ef8:	9b01      	ldr	r3, [sp, #4]
 8014efa:	429e      	cmp	r6, r3
 8014efc:	d900      	bls.n	8014f00 <__ssputs_r+0x7c>
 8014efe:	9e01      	ldr	r6, [sp, #4]
 8014f00:	0032      	movs	r2, r6
 8014f02:	9903      	ldr	r1, [sp, #12]
 8014f04:	6820      	ldr	r0, [r4, #0]
 8014f06:	f000 f9e5 	bl	80152d4 <memmove>
 8014f0a:	2000      	movs	r0, #0
 8014f0c:	68a3      	ldr	r3, [r4, #8]
 8014f0e:	1b9b      	subs	r3, r3, r6
 8014f10:	60a3      	str	r3, [r4, #8]
 8014f12:	6823      	ldr	r3, [r4, #0]
 8014f14:	199b      	adds	r3, r3, r6
 8014f16:	6023      	str	r3, [r4, #0]
 8014f18:	b005      	add	sp, #20
 8014f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f1c:	002a      	movs	r2, r5
 8014f1e:	0038      	movs	r0, r7
 8014f20:	f000 fa1f 	bl	8015362 <_realloc_r>
 8014f24:	1e06      	subs	r6, r0, #0
 8014f26:	d1df      	bne.n	8014ee8 <__ssputs_r+0x64>
 8014f28:	0038      	movs	r0, r7
 8014f2a:	6921      	ldr	r1, [r4, #16]
 8014f2c:	f7fe ff2a 	bl	8013d84 <_free_r>
 8014f30:	230c      	movs	r3, #12
 8014f32:	2001      	movs	r0, #1
 8014f34:	603b      	str	r3, [r7, #0]
 8014f36:	89a2      	ldrh	r2, [r4, #12]
 8014f38:	3334      	adds	r3, #52	; 0x34
 8014f3a:	4313      	orrs	r3, r2
 8014f3c:	81a3      	strh	r3, [r4, #12]
 8014f3e:	4240      	negs	r0, r0
 8014f40:	e7ea      	b.n	8014f18 <__ssputs_r+0x94>
 8014f42:	46c0      	nop			; (mov r8, r8)
 8014f44:	fffffb7f 	.word	0xfffffb7f

08014f48 <_svfiprintf_r>:
 8014f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f4a:	b0a1      	sub	sp, #132	; 0x84
 8014f4c:	9003      	str	r0, [sp, #12]
 8014f4e:	001d      	movs	r5, r3
 8014f50:	898b      	ldrh	r3, [r1, #12]
 8014f52:	000f      	movs	r7, r1
 8014f54:	0016      	movs	r6, r2
 8014f56:	061b      	lsls	r3, r3, #24
 8014f58:	d511      	bpl.n	8014f7e <_svfiprintf_r+0x36>
 8014f5a:	690b      	ldr	r3, [r1, #16]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d10e      	bne.n	8014f7e <_svfiprintf_r+0x36>
 8014f60:	2140      	movs	r1, #64	; 0x40
 8014f62:	f7fb ff61 	bl	8010e28 <_malloc_r>
 8014f66:	6038      	str	r0, [r7, #0]
 8014f68:	6138      	str	r0, [r7, #16]
 8014f6a:	2800      	cmp	r0, #0
 8014f6c:	d105      	bne.n	8014f7a <_svfiprintf_r+0x32>
 8014f6e:	230c      	movs	r3, #12
 8014f70:	9a03      	ldr	r2, [sp, #12]
 8014f72:	3801      	subs	r0, #1
 8014f74:	6013      	str	r3, [r2, #0]
 8014f76:	b021      	add	sp, #132	; 0x84
 8014f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f7a:	2340      	movs	r3, #64	; 0x40
 8014f7c:	617b      	str	r3, [r7, #20]
 8014f7e:	2300      	movs	r3, #0
 8014f80:	ac08      	add	r4, sp, #32
 8014f82:	6163      	str	r3, [r4, #20]
 8014f84:	3320      	adds	r3, #32
 8014f86:	7663      	strb	r3, [r4, #25]
 8014f88:	3310      	adds	r3, #16
 8014f8a:	76a3      	strb	r3, [r4, #26]
 8014f8c:	9507      	str	r5, [sp, #28]
 8014f8e:	0035      	movs	r5, r6
 8014f90:	782b      	ldrb	r3, [r5, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d001      	beq.n	8014f9a <_svfiprintf_r+0x52>
 8014f96:	2b25      	cmp	r3, #37	; 0x25
 8014f98:	d148      	bne.n	801502c <_svfiprintf_r+0xe4>
 8014f9a:	1bab      	subs	r3, r5, r6
 8014f9c:	9305      	str	r3, [sp, #20]
 8014f9e:	42b5      	cmp	r5, r6
 8014fa0:	d00b      	beq.n	8014fba <_svfiprintf_r+0x72>
 8014fa2:	0032      	movs	r2, r6
 8014fa4:	0039      	movs	r1, r7
 8014fa6:	9803      	ldr	r0, [sp, #12]
 8014fa8:	f7ff ff6c 	bl	8014e84 <__ssputs_r>
 8014fac:	3001      	adds	r0, #1
 8014fae:	d100      	bne.n	8014fb2 <_svfiprintf_r+0x6a>
 8014fb0:	e0af      	b.n	8015112 <_svfiprintf_r+0x1ca>
 8014fb2:	6963      	ldr	r3, [r4, #20]
 8014fb4:	9a05      	ldr	r2, [sp, #20]
 8014fb6:	189b      	adds	r3, r3, r2
 8014fb8:	6163      	str	r3, [r4, #20]
 8014fba:	782b      	ldrb	r3, [r5, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d100      	bne.n	8014fc2 <_svfiprintf_r+0x7a>
 8014fc0:	e0a7      	b.n	8015112 <_svfiprintf_r+0x1ca>
 8014fc2:	2201      	movs	r2, #1
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4252      	negs	r2, r2
 8014fc8:	6062      	str	r2, [r4, #4]
 8014fca:	a904      	add	r1, sp, #16
 8014fcc:	3254      	adds	r2, #84	; 0x54
 8014fce:	1852      	adds	r2, r2, r1
 8014fd0:	1c6e      	adds	r6, r5, #1
 8014fd2:	6023      	str	r3, [r4, #0]
 8014fd4:	60e3      	str	r3, [r4, #12]
 8014fd6:	60a3      	str	r3, [r4, #8]
 8014fd8:	7013      	strb	r3, [r2, #0]
 8014fda:	65a3      	str	r3, [r4, #88]	; 0x58
 8014fdc:	4b55      	ldr	r3, [pc, #340]	; (8015134 <_svfiprintf_r+0x1ec>)
 8014fde:	2205      	movs	r2, #5
 8014fe0:	0018      	movs	r0, r3
 8014fe2:	7831      	ldrb	r1, [r6, #0]
 8014fe4:	9305      	str	r3, [sp, #20]
 8014fe6:	f7fd fff2 	bl	8012fce <memchr>
 8014fea:	1c75      	adds	r5, r6, #1
 8014fec:	2800      	cmp	r0, #0
 8014fee:	d11f      	bne.n	8015030 <_svfiprintf_r+0xe8>
 8014ff0:	6822      	ldr	r2, [r4, #0]
 8014ff2:	06d3      	lsls	r3, r2, #27
 8014ff4:	d504      	bpl.n	8015000 <_svfiprintf_r+0xb8>
 8014ff6:	2353      	movs	r3, #83	; 0x53
 8014ff8:	a904      	add	r1, sp, #16
 8014ffa:	185b      	adds	r3, r3, r1
 8014ffc:	2120      	movs	r1, #32
 8014ffe:	7019      	strb	r1, [r3, #0]
 8015000:	0713      	lsls	r3, r2, #28
 8015002:	d504      	bpl.n	801500e <_svfiprintf_r+0xc6>
 8015004:	2353      	movs	r3, #83	; 0x53
 8015006:	a904      	add	r1, sp, #16
 8015008:	185b      	adds	r3, r3, r1
 801500a:	212b      	movs	r1, #43	; 0x2b
 801500c:	7019      	strb	r1, [r3, #0]
 801500e:	7833      	ldrb	r3, [r6, #0]
 8015010:	2b2a      	cmp	r3, #42	; 0x2a
 8015012:	d016      	beq.n	8015042 <_svfiprintf_r+0xfa>
 8015014:	0035      	movs	r5, r6
 8015016:	2100      	movs	r1, #0
 8015018:	200a      	movs	r0, #10
 801501a:	68e3      	ldr	r3, [r4, #12]
 801501c:	782a      	ldrb	r2, [r5, #0]
 801501e:	1c6e      	adds	r6, r5, #1
 8015020:	3a30      	subs	r2, #48	; 0x30
 8015022:	2a09      	cmp	r2, #9
 8015024:	d94e      	bls.n	80150c4 <_svfiprintf_r+0x17c>
 8015026:	2900      	cmp	r1, #0
 8015028:	d111      	bne.n	801504e <_svfiprintf_r+0x106>
 801502a:	e017      	b.n	801505c <_svfiprintf_r+0x114>
 801502c:	3501      	adds	r5, #1
 801502e:	e7af      	b.n	8014f90 <_svfiprintf_r+0x48>
 8015030:	9b05      	ldr	r3, [sp, #20]
 8015032:	6822      	ldr	r2, [r4, #0]
 8015034:	1ac0      	subs	r0, r0, r3
 8015036:	2301      	movs	r3, #1
 8015038:	4083      	lsls	r3, r0
 801503a:	4313      	orrs	r3, r2
 801503c:	002e      	movs	r6, r5
 801503e:	6023      	str	r3, [r4, #0]
 8015040:	e7cc      	b.n	8014fdc <_svfiprintf_r+0x94>
 8015042:	9b07      	ldr	r3, [sp, #28]
 8015044:	1d19      	adds	r1, r3, #4
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	9107      	str	r1, [sp, #28]
 801504a:	2b00      	cmp	r3, #0
 801504c:	db01      	blt.n	8015052 <_svfiprintf_r+0x10a>
 801504e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015050:	e004      	b.n	801505c <_svfiprintf_r+0x114>
 8015052:	425b      	negs	r3, r3
 8015054:	60e3      	str	r3, [r4, #12]
 8015056:	2302      	movs	r3, #2
 8015058:	4313      	orrs	r3, r2
 801505a:	6023      	str	r3, [r4, #0]
 801505c:	782b      	ldrb	r3, [r5, #0]
 801505e:	2b2e      	cmp	r3, #46	; 0x2e
 8015060:	d10a      	bne.n	8015078 <_svfiprintf_r+0x130>
 8015062:	786b      	ldrb	r3, [r5, #1]
 8015064:	2b2a      	cmp	r3, #42	; 0x2a
 8015066:	d135      	bne.n	80150d4 <_svfiprintf_r+0x18c>
 8015068:	9b07      	ldr	r3, [sp, #28]
 801506a:	3502      	adds	r5, #2
 801506c:	1d1a      	adds	r2, r3, #4
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	9207      	str	r2, [sp, #28]
 8015072:	2b00      	cmp	r3, #0
 8015074:	db2b      	blt.n	80150ce <_svfiprintf_r+0x186>
 8015076:	9309      	str	r3, [sp, #36]	; 0x24
 8015078:	4e2f      	ldr	r6, [pc, #188]	; (8015138 <_svfiprintf_r+0x1f0>)
 801507a:	2203      	movs	r2, #3
 801507c:	0030      	movs	r0, r6
 801507e:	7829      	ldrb	r1, [r5, #0]
 8015080:	f7fd ffa5 	bl	8012fce <memchr>
 8015084:	2800      	cmp	r0, #0
 8015086:	d006      	beq.n	8015096 <_svfiprintf_r+0x14e>
 8015088:	2340      	movs	r3, #64	; 0x40
 801508a:	1b80      	subs	r0, r0, r6
 801508c:	4083      	lsls	r3, r0
 801508e:	6822      	ldr	r2, [r4, #0]
 8015090:	3501      	adds	r5, #1
 8015092:	4313      	orrs	r3, r2
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	7829      	ldrb	r1, [r5, #0]
 8015098:	2206      	movs	r2, #6
 801509a:	4828      	ldr	r0, [pc, #160]	; (801513c <_svfiprintf_r+0x1f4>)
 801509c:	1c6e      	adds	r6, r5, #1
 801509e:	7621      	strb	r1, [r4, #24]
 80150a0:	f7fd ff95 	bl	8012fce <memchr>
 80150a4:	2800      	cmp	r0, #0
 80150a6:	d03c      	beq.n	8015122 <_svfiprintf_r+0x1da>
 80150a8:	4b25      	ldr	r3, [pc, #148]	; (8015140 <_svfiprintf_r+0x1f8>)
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d125      	bne.n	80150fa <_svfiprintf_r+0x1b2>
 80150ae:	2207      	movs	r2, #7
 80150b0:	9b07      	ldr	r3, [sp, #28]
 80150b2:	3307      	adds	r3, #7
 80150b4:	4393      	bics	r3, r2
 80150b6:	3308      	adds	r3, #8
 80150b8:	9307      	str	r3, [sp, #28]
 80150ba:	6963      	ldr	r3, [r4, #20]
 80150bc:	9a04      	ldr	r2, [sp, #16]
 80150be:	189b      	adds	r3, r3, r2
 80150c0:	6163      	str	r3, [r4, #20]
 80150c2:	e764      	b.n	8014f8e <_svfiprintf_r+0x46>
 80150c4:	4343      	muls	r3, r0
 80150c6:	0035      	movs	r5, r6
 80150c8:	2101      	movs	r1, #1
 80150ca:	189b      	adds	r3, r3, r2
 80150cc:	e7a6      	b.n	801501c <_svfiprintf_r+0xd4>
 80150ce:	2301      	movs	r3, #1
 80150d0:	425b      	negs	r3, r3
 80150d2:	e7d0      	b.n	8015076 <_svfiprintf_r+0x12e>
 80150d4:	2300      	movs	r3, #0
 80150d6:	200a      	movs	r0, #10
 80150d8:	001a      	movs	r2, r3
 80150da:	3501      	adds	r5, #1
 80150dc:	6063      	str	r3, [r4, #4]
 80150de:	7829      	ldrb	r1, [r5, #0]
 80150e0:	1c6e      	adds	r6, r5, #1
 80150e2:	3930      	subs	r1, #48	; 0x30
 80150e4:	2909      	cmp	r1, #9
 80150e6:	d903      	bls.n	80150f0 <_svfiprintf_r+0x1a8>
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d0c5      	beq.n	8015078 <_svfiprintf_r+0x130>
 80150ec:	9209      	str	r2, [sp, #36]	; 0x24
 80150ee:	e7c3      	b.n	8015078 <_svfiprintf_r+0x130>
 80150f0:	4342      	muls	r2, r0
 80150f2:	0035      	movs	r5, r6
 80150f4:	2301      	movs	r3, #1
 80150f6:	1852      	adds	r2, r2, r1
 80150f8:	e7f1      	b.n	80150de <_svfiprintf_r+0x196>
 80150fa:	aa07      	add	r2, sp, #28
 80150fc:	9200      	str	r2, [sp, #0]
 80150fe:	0021      	movs	r1, r4
 8015100:	003a      	movs	r2, r7
 8015102:	4b10      	ldr	r3, [pc, #64]	; (8015144 <_svfiprintf_r+0x1fc>)
 8015104:	9803      	ldr	r0, [sp, #12]
 8015106:	f7fc fe97 	bl	8011e38 <_printf_float>
 801510a:	9004      	str	r0, [sp, #16]
 801510c:	9b04      	ldr	r3, [sp, #16]
 801510e:	3301      	adds	r3, #1
 8015110:	d1d3      	bne.n	80150ba <_svfiprintf_r+0x172>
 8015112:	89bb      	ldrh	r3, [r7, #12]
 8015114:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015116:	065b      	lsls	r3, r3, #25
 8015118:	d400      	bmi.n	801511c <_svfiprintf_r+0x1d4>
 801511a:	e72c      	b.n	8014f76 <_svfiprintf_r+0x2e>
 801511c:	2001      	movs	r0, #1
 801511e:	4240      	negs	r0, r0
 8015120:	e729      	b.n	8014f76 <_svfiprintf_r+0x2e>
 8015122:	aa07      	add	r2, sp, #28
 8015124:	9200      	str	r2, [sp, #0]
 8015126:	0021      	movs	r1, r4
 8015128:	003a      	movs	r2, r7
 801512a:	4b06      	ldr	r3, [pc, #24]	; (8015144 <_svfiprintf_r+0x1fc>)
 801512c:	9803      	ldr	r0, [sp, #12]
 801512e:	f7fd f949 	bl	80123c4 <_printf_i>
 8015132:	e7ea      	b.n	801510a <_svfiprintf_r+0x1c2>
 8015134:	080184bc 	.word	0x080184bc
 8015138:	080184c2 	.word	0x080184c2
 801513c:	080184c6 	.word	0x080184c6
 8015140:	08011e39 	.word	0x08011e39
 8015144:	08014e85 	.word	0x08014e85

08015148 <__sflush_r>:
 8015148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801514a:	898b      	ldrh	r3, [r1, #12]
 801514c:	0005      	movs	r5, r0
 801514e:	000c      	movs	r4, r1
 8015150:	071a      	lsls	r2, r3, #28
 8015152:	d45c      	bmi.n	801520e <__sflush_r+0xc6>
 8015154:	684a      	ldr	r2, [r1, #4]
 8015156:	2a00      	cmp	r2, #0
 8015158:	dc04      	bgt.n	8015164 <__sflush_r+0x1c>
 801515a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801515c:	2a00      	cmp	r2, #0
 801515e:	dc01      	bgt.n	8015164 <__sflush_r+0x1c>
 8015160:	2000      	movs	r0, #0
 8015162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015164:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015166:	2f00      	cmp	r7, #0
 8015168:	d0fa      	beq.n	8015160 <__sflush_r+0x18>
 801516a:	2200      	movs	r2, #0
 801516c:	2080      	movs	r0, #128	; 0x80
 801516e:	682e      	ldr	r6, [r5, #0]
 8015170:	602a      	str	r2, [r5, #0]
 8015172:	001a      	movs	r2, r3
 8015174:	0140      	lsls	r0, r0, #5
 8015176:	6a21      	ldr	r1, [r4, #32]
 8015178:	4002      	ands	r2, r0
 801517a:	4203      	tst	r3, r0
 801517c:	d034      	beq.n	80151e8 <__sflush_r+0xa0>
 801517e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015180:	89a3      	ldrh	r3, [r4, #12]
 8015182:	075b      	lsls	r3, r3, #29
 8015184:	d506      	bpl.n	8015194 <__sflush_r+0x4c>
 8015186:	6863      	ldr	r3, [r4, #4]
 8015188:	1ac0      	subs	r0, r0, r3
 801518a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801518c:	2b00      	cmp	r3, #0
 801518e:	d001      	beq.n	8015194 <__sflush_r+0x4c>
 8015190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015192:	1ac0      	subs	r0, r0, r3
 8015194:	0002      	movs	r2, r0
 8015196:	2300      	movs	r3, #0
 8015198:	0028      	movs	r0, r5
 801519a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801519c:	6a21      	ldr	r1, [r4, #32]
 801519e:	47b8      	blx	r7
 80151a0:	89a2      	ldrh	r2, [r4, #12]
 80151a2:	1c43      	adds	r3, r0, #1
 80151a4:	d106      	bne.n	80151b4 <__sflush_r+0x6c>
 80151a6:	6829      	ldr	r1, [r5, #0]
 80151a8:	291d      	cmp	r1, #29
 80151aa:	d82c      	bhi.n	8015206 <__sflush_r+0xbe>
 80151ac:	4b2a      	ldr	r3, [pc, #168]	; (8015258 <__sflush_r+0x110>)
 80151ae:	410b      	asrs	r3, r1
 80151b0:	07db      	lsls	r3, r3, #31
 80151b2:	d428      	bmi.n	8015206 <__sflush_r+0xbe>
 80151b4:	2300      	movs	r3, #0
 80151b6:	6063      	str	r3, [r4, #4]
 80151b8:	6923      	ldr	r3, [r4, #16]
 80151ba:	6023      	str	r3, [r4, #0]
 80151bc:	04d2      	lsls	r2, r2, #19
 80151be:	d505      	bpl.n	80151cc <__sflush_r+0x84>
 80151c0:	1c43      	adds	r3, r0, #1
 80151c2:	d102      	bne.n	80151ca <__sflush_r+0x82>
 80151c4:	682b      	ldr	r3, [r5, #0]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d100      	bne.n	80151cc <__sflush_r+0x84>
 80151ca:	6560      	str	r0, [r4, #84]	; 0x54
 80151cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151ce:	602e      	str	r6, [r5, #0]
 80151d0:	2900      	cmp	r1, #0
 80151d2:	d0c5      	beq.n	8015160 <__sflush_r+0x18>
 80151d4:	0023      	movs	r3, r4
 80151d6:	3344      	adds	r3, #68	; 0x44
 80151d8:	4299      	cmp	r1, r3
 80151da:	d002      	beq.n	80151e2 <__sflush_r+0x9a>
 80151dc:	0028      	movs	r0, r5
 80151de:	f7fe fdd1 	bl	8013d84 <_free_r>
 80151e2:	2000      	movs	r0, #0
 80151e4:	6360      	str	r0, [r4, #52]	; 0x34
 80151e6:	e7bc      	b.n	8015162 <__sflush_r+0x1a>
 80151e8:	2301      	movs	r3, #1
 80151ea:	0028      	movs	r0, r5
 80151ec:	47b8      	blx	r7
 80151ee:	1c43      	adds	r3, r0, #1
 80151f0:	d1c6      	bne.n	8015180 <__sflush_r+0x38>
 80151f2:	682b      	ldr	r3, [r5, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d0c3      	beq.n	8015180 <__sflush_r+0x38>
 80151f8:	2b1d      	cmp	r3, #29
 80151fa:	d001      	beq.n	8015200 <__sflush_r+0xb8>
 80151fc:	2b16      	cmp	r3, #22
 80151fe:	d101      	bne.n	8015204 <__sflush_r+0xbc>
 8015200:	602e      	str	r6, [r5, #0]
 8015202:	e7ad      	b.n	8015160 <__sflush_r+0x18>
 8015204:	89a2      	ldrh	r2, [r4, #12]
 8015206:	2340      	movs	r3, #64	; 0x40
 8015208:	4313      	orrs	r3, r2
 801520a:	81a3      	strh	r3, [r4, #12]
 801520c:	e7a9      	b.n	8015162 <__sflush_r+0x1a>
 801520e:	690e      	ldr	r6, [r1, #16]
 8015210:	2e00      	cmp	r6, #0
 8015212:	d0a5      	beq.n	8015160 <__sflush_r+0x18>
 8015214:	680f      	ldr	r7, [r1, #0]
 8015216:	600e      	str	r6, [r1, #0]
 8015218:	1bba      	subs	r2, r7, r6
 801521a:	9201      	str	r2, [sp, #4]
 801521c:	2200      	movs	r2, #0
 801521e:	079b      	lsls	r3, r3, #30
 8015220:	d100      	bne.n	8015224 <__sflush_r+0xdc>
 8015222:	694a      	ldr	r2, [r1, #20]
 8015224:	60a2      	str	r2, [r4, #8]
 8015226:	9b01      	ldr	r3, [sp, #4]
 8015228:	2b00      	cmp	r3, #0
 801522a:	dd99      	ble.n	8015160 <__sflush_r+0x18>
 801522c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801522e:	0032      	movs	r2, r6
 8015230:	001f      	movs	r7, r3
 8015232:	0028      	movs	r0, r5
 8015234:	9b01      	ldr	r3, [sp, #4]
 8015236:	6a21      	ldr	r1, [r4, #32]
 8015238:	47b8      	blx	r7
 801523a:	2800      	cmp	r0, #0
 801523c:	dc06      	bgt.n	801524c <__sflush_r+0x104>
 801523e:	2340      	movs	r3, #64	; 0x40
 8015240:	2001      	movs	r0, #1
 8015242:	89a2      	ldrh	r2, [r4, #12]
 8015244:	4240      	negs	r0, r0
 8015246:	4313      	orrs	r3, r2
 8015248:	81a3      	strh	r3, [r4, #12]
 801524a:	e78a      	b.n	8015162 <__sflush_r+0x1a>
 801524c:	9b01      	ldr	r3, [sp, #4]
 801524e:	1836      	adds	r6, r6, r0
 8015250:	1a1b      	subs	r3, r3, r0
 8015252:	9301      	str	r3, [sp, #4]
 8015254:	e7e7      	b.n	8015226 <__sflush_r+0xde>
 8015256:	46c0      	nop			; (mov r8, r8)
 8015258:	dfbffffe 	.word	0xdfbffffe

0801525c <_fflush_r>:
 801525c:	690b      	ldr	r3, [r1, #16]
 801525e:	b570      	push	{r4, r5, r6, lr}
 8015260:	0005      	movs	r5, r0
 8015262:	000c      	movs	r4, r1
 8015264:	2b00      	cmp	r3, #0
 8015266:	d102      	bne.n	801526e <_fflush_r+0x12>
 8015268:	2500      	movs	r5, #0
 801526a:	0028      	movs	r0, r5
 801526c:	bd70      	pop	{r4, r5, r6, pc}
 801526e:	2800      	cmp	r0, #0
 8015270:	d004      	beq.n	801527c <_fflush_r+0x20>
 8015272:	6a03      	ldr	r3, [r0, #32]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d101      	bne.n	801527c <_fflush_r+0x20>
 8015278:	f7fd fc4c 	bl	8012b14 <__sinit>
 801527c:	220c      	movs	r2, #12
 801527e:	5ea3      	ldrsh	r3, [r4, r2]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d0f1      	beq.n	8015268 <_fflush_r+0xc>
 8015284:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015286:	07d2      	lsls	r2, r2, #31
 8015288:	d404      	bmi.n	8015294 <_fflush_r+0x38>
 801528a:	059b      	lsls	r3, r3, #22
 801528c:	d402      	bmi.n	8015294 <_fflush_r+0x38>
 801528e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015290:	f7fd fe93 	bl	8012fba <__retarget_lock_acquire_recursive>
 8015294:	0028      	movs	r0, r5
 8015296:	0021      	movs	r1, r4
 8015298:	f7ff ff56 	bl	8015148 <__sflush_r>
 801529c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801529e:	0005      	movs	r5, r0
 80152a0:	07db      	lsls	r3, r3, #31
 80152a2:	d4e2      	bmi.n	801526a <_fflush_r+0xe>
 80152a4:	89a3      	ldrh	r3, [r4, #12]
 80152a6:	059b      	lsls	r3, r3, #22
 80152a8:	d4df      	bmi.n	801526a <_fflush_r+0xe>
 80152aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152ac:	f7fd fe86 	bl	8012fbc <__retarget_lock_release_recursive>
 80152b0:	e7db      	b.n	801526a <_fflush_r+0xe>
	...

080152b4 <fiprintf>:
 80152b4:	b40e      	push	{r1, r2, r3}
 80152b6:	b517      	push	{r0, r1, r2, r4, lr}
 80152b8:	4c05      	ldr	r4, [pc, #20]	; (80152d0 <fiprintf+0x1c>)
 80152ba:	ab05      	add	r3, sp, #20
 80152bc:	cb04      	ldmia	r3!, {r2}
 80152be:	0001      	movs	r1, r0
 80152c0:	6820      	ldr	r0, [r4, #0]
 80152c2:	9301      	str	r3, [sp, #4]
 80152c4:	f000 f8a4 	bl	8015410 <_vfiprintf_r>
 80152c8:	bc1e      	pop	{r1, r2, r3, r4}
 80152ca:	bc08      	pop	{r3}
 80152cc:	b003      	add	sp, #12
 80152ce:	4718      	bx	r3
 80152d0:	200002c8 	.word	0x200002c8

080152d4 <memmove>:
 80152d4:	b510      	push	{r4, lr}
 80152d6:	4288      	cmp	r0, r1
 80152d8:	d902      	bls.n	80152e0 <memmove+0xc>
 80152da:	188b      	adds	r3, r1, r2
 80152dc:	4298      	cmp	r0, r3
 80152de:	d303      	bcc.n	80152e8 <memmove+0x14>
 80152e0:	2300      	movs	r3, #0
 80152e2:	e007      	b.n	80152f4 <memmove+0x20>
 80152e4:	5c8b      	ldrb	r3, [r1, r2]
 80152e6:	5483      	strb	r3, [r0, r2]
 80152e8:	3a01      	subs	r2, #1
 80152ea:	d2fb      	bcs.n	80152e4 <memmove+0x10>
 80152ec:	bd10      	pop	{r4, pc}
 80152ee:	5ccc      	ldrb	r4, [r1, r3]
 80152f0:	54c4      	strb	r4, [r0, r3]
 80152f2:	3301      	adds	r3, #1
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d1fa      	bne.n	80152ee <memmove+0x1a>
 80152f8:	e7f8      	b.n	80152ec <memmove+0x18>

080152fa <abort>:
 80152fa:	2006      	movs	r0, #6
 80152fc:	b510      	push	{r4, lr}
 80152fe:	f000 fa73 	bl	80157e8 <raise>
 8015302:	2001      	movs	r0, #1
 8015304:	f7f3 fa64 	bl	80087d0 <_exit>

08015308 <_calloc_r>:
 8015308:	b570      	push	{r4, r5, r6, lr}
 801530a:	0c0b      	lsrs	r3, r1, #16
 801530c:	0c15      	lsrs	r5, r2, #16
 801530e:	2b00      	cmp	r3, #0
 8015310:	d11e      	bne.n	8015350 <_calloc_r+0x48>
 8015312:	2d00      	cmp	r5, #0
 8015314:	d10c      	bne.n	8015330 <_calloc_r+0x28>
 8015316:	b289      	uxth	r1, r1
 8015318:	b294      	uxth	r4, r2
 801531a:	434c      	muls	r4, r1
 801531c:	0021      	movs	r1, r4
 801531e:	f7fb fd83 	bl	8010e28 <_malloc_r>
 8015322:	1e05      	subs	r5, r0, #0
 8015324:	d01b      	beq.n	801535e <_calloc_r+0x56>
 8015326:	0022      	movs	r2, r4
 8015328:	2100      	movs	r1, #0
 801532a:	f7fd fc93 	bl	8012c54 <memset>
 801532e:	e016      	b.n	801535e <_calloc_r+0x56>
 8015330:	1c2b      	adds	r3, r5, #0
 8015332:	1c0c      	adds	r4, r1, #0
 8015334:	b289      	uxth	r1, r1
 8015336:	b292      	uxth	r2, r2
 8015338:	434a      	muls	r2, r1
 801533a:	b2a1      	uxth	r1, r4
 801533c:	b29c      	uxth	r4, r3
 801533e:	434c      	muls	r4, r1
 8015340:	0c13      	lsrs	r3, r2, #16
 8015342:	18e4      	adds	r4, r4, r3
 8015344:	0c23      	lsrs	r3, r4, #16
 8015346:	d107      	bne.n	8015358 <_calloc_r+0x50>
 8015348:	0424      	lsls	r4, r4, #16
 801534a:	b292      	uxth	r2, r2
 801534c:	4314      	orrs	r4, r2
 801534e:	e7e5      	b.n	801531c <_calloc_r+0x14>
 8015350:	2d00      	cmp	r5, #0
 8015352:	d101      	bne.n	8015358 <_calloc_r+0x50>
 8015354:	1c14      	adds	r4, r2, #0
 8015356:	e7ed      	b.n	8015334 <_calloc_r+0x2c>
 8015358:	230c      	movs	r3, #12
 801535a:	2500      	movs	r5, #0
 801535c:	6003      	str	r3, [r0, #0]
 801535e:	0028      	movs	r0, r5
 8015360:	bd70      	pop	{r4, r5, r6, pc}

08015362 <_realloc_r>:
 8015362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015364:	0007      	movs	r7, r0
 8015366:	000e      	movs	r6, r1
 8015368:	0014      	movs	r4, r2
 801536a:	2900      	cmp	r1, #0
 801536c:	d105      	bne.n	801537a <_realloc_r+0x18>
 801536e:	0011      	movs	r1, r2
 8015370:	f7fb fd5a 	bl	8010e28 <_malloc_r>
 8015374:	0005      	movs	r5, r0
 8015376:	0028      	movs	r0, r5
 8015378:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801537a:	2a00      	cmp	r2, #0
 801537c:	d103      	bne.n	8015386 <_realloc_r+0x24>
 801537e:	f7fe fd01 	bl	8013d84 <_free_r>
 8015382:	0025      	movs	r5, r4
 8015384:	e7f7      	b.n	8015376 <_realloc_r+0x14>
 8015386:	f000 fa4f 	bl	8015828 <_malloc_usable_size_r>
 801538a:	9001      	str	r0, [sp, #4]
 801538c:	4284      	cmp	r4, r0
 801538e:	d803      	bhi.n	8015398 <_realloc_r+0x36>
 8015390:	0035      	movs	r5, r6
 8015392:	0843      	lsrs	r3, r0, #1
 8015394:	42a3      	cmp	r3, r4
 8015396:	d3ee      	bcc.n	8015376 <_realloc_r+0x14>
 8015398:	0021      	movs	r1, r4
 801539a:	0038      	movs	r0, r7
 801539c:	f7fb fd44 	bl	8010e28 <_malloc_r>
 80153a0:	1e05      	subs	r5, r0, #0
 80153a2:	d0e8      	beq.n	8015376 <_realloc_r+0x14>
 80153a4:	9b01      	ldr	r3, [sp, #4]
 80153a6:	0022      	movs	r2, r4
 80153a8:	429c      	cmp	r4, r3
 80153aa:	d900      	bls.n	80153ae <_realloc_r+0x4c>
 80153ac:	001a      	movs	r2, r3
 80153ae:	0031      	movs	r1, r6
 80153b0:	0028      	movs	r0, r5
 80153b2:	f7fd fe17 	bl	8012fe4 <memcpy>
 80153b6:	0031      	movs	r1, r6
 80153b8:	0038      	movs	r0, r7
 80153ba:	f7fe fce3 	bl	8013d84 <_free_r>
 80153be:	e7da      	b.n	8015376 <_realloc_r+0x14>

080153c0 <__sfputc_r>:
 80153c0:	6893      	ldr	r3, [r2, #8]
 80153c2:	b510      	push	{r4, lr}
 80153c4:	3b01      	subs	r3, #1
 80153c6:	6093      	str	r3, [r2, #8]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	da04      	bge.n	80153d6 <__sfputc_r+0x16>
 80153cc:	6994      	ldr	r4, [r2, #24]
 80153ce:	42a3      	cmp	r3, r4
 80153d0:	db07      	blt.n	80153e2 <__sfputc_r+0x22>
 80153d2:	290a      	cmp	r1, #10
 80153d4:	d005      	beq.n	80153e2 <__sfputc_r+0x22>
 80153d6:	6813      	ldr	r3, [r2, #0]
 80153d8:	1c58      	adds	r0, r3, #1
 80153da:	6010      	str	r0, [r2, #0]
 80153dc:	7019      	strb	r1, [r3, #0]
 80153de:	0008      	movs	r0, r1
 80153e0:	bd10      	pop	{r4, pc}
 80153e2:	f000 f931 	bl	8015648 <__swbuf_r>
 80153e6:	0001      	movs	r1, r0
 80153e8:	e7f9      	b.n	80153de <__sfputc_r+0x1e>

080153ea <__sfputs_r>:
 80153ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ec:	0006      	movs	r6, r0
 80153ee:	000f      	movs	r7, r1
 80153f0:	0014      	movs	r4, r2
 80153f2:	18d5      	adds	r5, r2, r3
 80153f4:	42ac      	cmp	r4, r5
 80153f6:	d101      	bne.n	80153fc <__sfputs_r+0x12>
 80153f8:	2000      	movs	r0, #0
 80153fa:	e007      	b.n	801540c <__sfputs_r+0x22>
 80153fc:	7821      	ldrb	r1, [r4, #0]
 80153fe:	003a      	movs	r2, r7
 8015400:	0030      	movs	r0, r6
 8015402:	f7ff ffdd 	bl	80153c0 <__sfputc_r>
 8015406:	3401      	adds	r4, #1
 8015408:	1c43      	adds	r3, r0, #1
 801540a:	d1f3      	bne.n	80153f4 <__sfputs_r+0xa>
 801540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015410 <_vfiprintf_r>:
 8015410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015412:	b0a1      	sub	sp, #132	; 0x84
 8015414:	000f      	movs	r7, r1
 8015416:	0015      	movs	r5, r2
 8015418:	001e      	movs	r6, r3
 801541a:	9003      	str	r0, [sp, #12]
 801541c:	2800      	cmp	r0, #0
 801541e:	d004      	beq.n	801542a <_vfiprintf_r+0x1a>
 8015420:	6a03      	ldr	r3, [r0, #32]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d101      	bne.n	801542a <_vfiprintf_r+0x1a>
 8015426:	f7fd fb75 	bl	8012b14 <__sinit>
 801542a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801542c:	07db      	lsls	r3, r3, #31
 801542e:	d405      	bmi.n	801543c <_vfiprintf_r+0x2c>
 8015430:	89bb      	ldrh	r3, [r7, #12]
 8015432:	059b      	lsls	r3, r3, #22
 8015434:	d402      	bmi.n	801543c <_vfiprintf_r+0x2c>
 8015436:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015438:	f7fd fdbf 	bl	8012fba <__retarget_lock_acquire_recursive>
 801543c:	89bb      	ldrh	r3, [r7, #12]
 801543e:	071b      	lsls	r3, r3, #28
 8015440:	d502      	bpl.n	8015448 <_vfiprintf_r+0x38>
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d113      	bne.n	8015470 <_vfiprintf_r+0x60>
 8015448:	0039      	movs	r1, r7
 801544a:	9803      	ldr	r0, [sp, #12]
 801544c:	f000 f93e 	bl	80156cc <__swsetup_r>
 8015450:	2800      	cmp	r0, #0
 8015452:	d00d      	beq.n	8015470 <_vfiprintf_r+0x60>
 8015454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015456:	07db      	lsls	r3, r3, #31
 8015458:	d503      	bpl.n	8015462 <_vfiprintf_r+0x52>
 801545a:	2001      	movs	r0, #1
 801545c:	4240      	negs	r0, r0
 801545e:	b021      	add	sp, #132	; 0x84
 8015460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015462:	89bb      	ldrh	r3, [r7, #12]
 8015464:	059b      	lsls	r3, r3, #22
 8015466:	d4f8      	bmi.n	801545a <_vfiprintf_r+0x4a>
 8015468:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801546a:	f7fd fda7 	bl	8012fbc <__retarget_lock_release_recursive>
 801546e:	e7f4      	b.n	801545a <_vfiprintf_r+0x4a>
 8015470:	2300      	movs	r3, #0
 8015472:	ac08      	add	r4, sp, #32
 8015474:	6163      	str	r3, [r4, #20]
 8015476:	3320      	adds	r3, #32
 8015478:	7663      	strb	r3, [r4, #25]
 801547a:	3310      	adds	r3, #16
 801547c:	76a3      	strb	r3, [r4, #26]
 801547e:	9607      	str	r6, [sp, #28]
 8015480:	002e      	movs	r6, r5
 8015482:	7833      	ldrb	r3, [r6, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d001      	beq.n	801548c <_vfiprintf_r+0x7c>
 8015488:	2b25      	cmp	r3, #37	; 0x25
 801548a:	d148      	bne.n	801551e <_vfiprintf_r+0x10e>
 801548c:	1b73      	subs	r3, r6, r5
 801548e:	9305      	str	r3, [sp, #20]
 8015490:	42ae      	cmp	r6, r5
 8015492:	d00b      	beq.n	80154ac <_vfiprintf_r+0x9c>
 8015494:	002a      	movs	r2, r5
 8015496:	0039      	movs	r1, r7
 8015498:	9803      	ldr	r0, [sp, #12]
 801549a:	f7ff ffa6 	bl	80153ea <__sfputs_r>
 801549e:	3001      	adds	r0, #1
 80154a0:	d100      	bne.n	80154a4 <_vfiprintf_r+0x94>
 80154a2:	e0af      	b.n	8015604 <_vfiprintf_r+0x1f4>
 80154a4:	6963      	ldr	r3, [r4, #20]
 80154a6:	9a05      	ldr	r2, [sp, #20]
 80154a8:	189b      	adds	r3, r3, r2
 80154aa:	6163      	str	r3, [r4, #20]
 80154ac:	7833      	ldrb	r3, [r6, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d100      	bne.n	80154b4 <_vfiprintf_r+0xa4>
 80154b2:	e0a7      	b.n	8015604 <_vfiprintf_r+0x1f4>
 80154b4:	2201      	movs	r2, #1
 80154b6:	2300      	movs	r3, #0
 80154b8:	4252      	negs	r2, r2
 80154ba:	6062      	str	r2, [r4, #4]
 80154bc:	a904      	add	r1, sp, #16
 80154be:	3254      	adds	r2, #84	; 0x54
 80154c0:	1852      	adds	r2, r2, r1
 80154c2:	1c75      	adds	r5, r6, #1
 80154c4:	6023      	str	r3, [r4, #0]
 80154c6:	60e3      	str	r3, [r4, #12]
 80154c8:	60a3      	str	r3, [r4, #8]
 80154ca:	7013      	strb	r3, [r2, #0]
 80154cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80154ce:	4b59      	ldr	r3, [pc, #356]	; (8015634 <_vfiprintf_r+0x224>)
 80154d0:	2205      	movs	r2, #5
 80154d2:	0018      	movs	r0, r3
 80154d4:	7829      	ldrb	r1, [r5, #0]
 80154d6:	9305      	str	r3, [sp, #20]
 80154d8:	f7fd fd79 	bl	8012fce <memchr>
 80154dc:	1c6e      	adds	r6, r5, #1
 80154de:	2800      	cmp	r0, #0
 80154e0:	d11f      	bne.n	8015522 <_vfiprintf_r+0x112>
 80154e2:	6822      	ldr	r2, [r4, #0]
 80154e4:	06d3      	lsls	r3, r2, #27
 80154e6:	d504      	bpl.n	80154f2 <_vfiprintf_r+0xe2>
 80154e8:	2353      	movs	r3, #83	; 0x53
 80154ea:	a904      	add	r1, sp, #16
 80154ec:	185b      	adds	r3, r3, r1
 80154ee:	2120      	movs	r1, #32
 80154f0:	7019      	strb	r1, [r3, #0]
 80154f2:	0713      	lsls	r3, r2, #28
 80154f4:	d504      	bpl.n	8015500 <_vfiprintf_r+0xf0>
 80154f6:	2353      	movs	r3, #83	; 0x53
 80154f8:	a904      	add	r1, sp, #16
 80154fa:	185b      	adds	r3, r3, r1
 80154fc:	212b      	movs	r1, #43	; 0x2b
 80154fe:	7019      	strb	r1, [r3, #0]
 8015500:	782b      	ldrb	r3, [r5, #0]
 8015502:	2b2a      	cmp	r3, #42	; 0x2a
 8015504:	d016      	beq.n	8015534 <_vfiprintf_r+0x124>
 8015506:	002e      	movs	r6, r5
 8015508:	2100      	movs	r1, #0
 801550a:	200a      	movs	r0, #10
 801550c:	68e3      	ldr	r3, [r4, #12]
 801550e:	7832      	ldrb	r2, [r6, #0]
 8015510:	1c75      	adds	r5, r6, #1
 8015512:	3a30      	subs	r2, #48	; 0x30
 8015514:	2a09      	cmp	r2, #9
 8015516:	d94e      	bls.n	80155b6 <_vfiprintf_r+0x1a6>
 8015518:	2900      	cmp	r1, #0
 801551a:	d111      	bne.n	8015540 <_vfiprintf_r+0x130>
 801551c:	e017      	b.n	801554e <_vfiprintf_r+0x13e>
 801551e:	3601      	adds	r6, #1
 8015520:	e7af      	b.n	8015482 <_vfiprintf_r+0x72>
 8015522:	9b05      	ldr	r3, [sp, #20]
 8015524:	6822      	ldr	r2, [r4, #0]
 8015526:	1ac0      	subs	r0, r0, r3
 8015528:	2301      	movs	r3, #1
 801552a:	4083      	lsls	r3, r0
 801552c:	4313      	orrs	r3, r2
 801552e:	0035      	movs	r5, r6
 8015530:	6023      	str	r3, [r4, #0]
 8015532:	e7cc      	b.n	80154ce <_vfiprintf_r+0xbe>
 8015534:	9b07      	ldr	r3, [sp, #28]
 8015536:	1d19      	adds	r1, r3, #4
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	9107      	str	r1, [sp, #28]
 801553c:	2b00      	cmp	r3, #0
 801553e:	db01      	blt.n	8015544 <_vfiprintf_r+0x134>
 8015540:	930b      	str	r3, [sp, #44]	; 0x2c
 8015542:	e004      	b.n	801554e <_vfiprintf_r+0x13e>
 8015544:	425b      	negs	r3, r3
 8015546:	60e3      	str	r3, [r4, #12]
 8015548:	2302      	movs	r3, #2
 801554a:	4313      	orrs	r3, r2
 801554c:	6023      	str	r3, [r4, #0]
 801554e:	7833      	ldrb	r3, [r6, #0]
 8015550:	2b2e      	cmp	r3, #46	; 0x2e
 8015552:	d10a      	bne.n	801556a <_vfiprintf_r+0x15a>
 8015554:	7873      	ldrb	r3, [r6, #1]
 8015556:	2b2a      	cmp	r3, #42	; 0x2a
 8015558:	d135      	bne.n	80155c6 <_vfiprintf_r+0x1b6>
 801555a:	9b07      	ldr	r3, [sp, #28]
 801555c:	3602      	adds	r6, #2
 801555e:	1d1a      	adds	r2, r3, #4
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	9207      	str	r2, [sp, #28]
 8015564:	2b00      	cmp	r3, #0
 8015566:	db2b      	blt.n	80155c0 <_vfiprintf_r+0x1b0>
 8015568:	9309      	str	r3, [sp, #36]	; 0x24
 801556a:	4d33      	ldr	r5, [pc, #204]	; (8015638 <_vfiprintf_r+0x228>)
 801556c:	2203      	movs	r2, #3
 801556e:	0028      	movs	r0, r5
 8015570:	7831      	ldrb	r1, [r6, #0]
 8015572:	f7fd fd2c 	bl	8012fce <memchr>
 8015576:	2800      	cmp	r0, #0
 8015578:	d006      	beq.n	8015588 <_vfiprintf_r+0x178>
 801557a:	2340      	movs	r3, #64	; 0x40
 801557c:	1b40      	subs	r0, r0, r5
 801557e:	4083      	lsls	r3, r0
 8015580:	6822      	ldr	r2, [r4, #0]
 8015582:	3601      	adds	r6, #1
 8015584:	4313      	orrs	r3, r2
 8015586:	6023      	str	r3, [r4, #0]
 8015588:	7831      	ldrb	r1, [r6, #0]
 801558a:	2206      	movs	r2, #6
 801558c:	482b      	ldr	r0, [pc, #172]	; (801563c <_vfiprintf_r+0x22c>)
 801558e:	1c75      	adds	r5, r6, #1
 8015590:	7621      	strb	r1, [r4, #24]
 8015592:	f7fd fd1c 	bl	8012fce <memchr>
 8015596:	2800      	cmp	r0, #0
 8015598:	d043      	beq.n	8015622 <_vfiprintf_r+0x212>
 801559a:	4b29      	ldr	r3, [pc, #164]	; (8015640 <_vfiprintf_r+0x230>)
 801559c:	2b00      	cmp	r3, #0
 801559e:	d125      	bne.n	80155ec <_vfiprintf_r+0x1dc>
 80155a0:	2207      	movs	r2, #7
 80155a2:	9b07      	ldr	r3, [sp, #28]
 80155a4:	3307      	adds	r3, #7
 80155a6:	4393      	bics	r3, r2
 80155a8:	3308      	adds	r3, #8
 80155aa:	9307      	str	r3, [sp, #28]
 80155ac:	6963      	ldr	r3, [r4, #20]
 80155ae:	9a04      	ldr	r2, [sp, #16]
 80155b0:	189b      	adds	r3, r3, r2
 80155b2:	6163      	str	r3, [r4, #20]
 80155b4:	e764      	b.n	8015480 <_vfiprintf_r+0x70>
 80155b6:	4343      	muls	r3, r0
 80155b8:	002e      	movs	r6, r5
 80155ba:	2101      	movs	r1, #1
 80155bc:	189b      	adds	r3, r3, r2
 80155be:	e7a6      	b.n	801550e <_vfiprintf_r+0xfe>
 80155c0:	2301      	movs	r3, #1
 80155c2:	425b      	negs	r3, r3
 80155c4:	e7d0      	b.n	8015568 <_vfiprintf_r+0x158>
 80155c6:	2300      	movs	r3, #0
 80155c8:	200a      	movs	r0, #10
 80155ca:	001a      	movs	r2, r3
 80155cc:	3601      	adds	r6, #1
 80155ce:	6063      	str	r3, [r4, #4]
 80155d0:	7831      	ldrb	r1, [r6, #0]
 80155d2:	1c75      	adds	r5, r6, #1
 80155d4:	3930      	subs	r1, #48	; 0x30
 80155d6:	2909      	cmp	r1, #9
 80155d8:	d903      	bls.n	80155e2 <_vfiprintf_r+0x1d2>
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d0c5      	beq.n	801556a <_vfiprintf_r+0x15a>
 80155de:	9209      	str	r2, [sp, #36]	; 0x24
 80155e0:	e7c3      	b.n	801556a <_vfiprintf_r+0x15a>
 80155e2:	4342      	muls	r2, r0
 80155e4:	002e      	movs	r6, r5
 80155e6:	2301      	movs	r3, #1
 80155e8:	1852      	adds	r2, r2, r1
 80155ea:	e7f1      	b.n	80155d0 <_vfiprintf_r+0x1c0>
 80155ec:	aa07      	add	r2, sp, #28
 80155ee:	9200      	str	r2, [sp, #0]
 80155f0:	0021      	movs	r1, r4
 80155f2:	003a      	movs	r2, r7
 80155f4:	4b13      	ldr	r3, [pc, #76]	; (8015644 <_vfiprintf_r+0x234>)
 80155f6:	9803      	ldr	r0, [sp, #12]
 80155f8:	f7fc fc1e 	bl	8011e38 <_printf_float>
 80155fc:	9004      	str	r0, [sp, #16]
 80155fe:	9b04      	ldr	r3, [sp, #16]
 8015600:	3301      	adds	r3, #1
 8015602:	d1d3      	bne.n	80155ac <_vfiprintf_r+0x19c>
 8015604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015606:	07db      	lsls	r3, r3, #31
 8015608:	d405      	bmi.n	8015616 <_vfiprintf_r+0x206>
 801560a:	89bb      	ldrh	r3, [r7, #12]
 801560c:	059b      	lsls	r3, r3, #22
 801560e:	d402      	bmi.n	8015616 <_vfiprintf_r+0x206>
 8015610:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015612:	f7fd fcd3 	bl	8012fbc <__retarget_lock_release_recursive>
 8015616:	89bb      	ldrh	r3, [r7, #12]
 8015618:	065b      	lsls	r3, r3, #25
 801561a:	d500      	bpl.n	801561e <_vfiprintf_r+0x20e>
 801561c:	e71d      	b.n	801545a <_vfiprintf_r+0x4a>
 801561e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015620:	e71d      	b.n	801545e <_vfiprintf_r+0x4e>
 8015622:	aa07      	add	r2, sp, #28
 8015624:	9200      	str	r2, [sp, #0]
 8015626:	0021      	movs	r1, r4
 8015628:	003a      	movs	r2, r7
 801562a:	4b06      	ldr	r3, [pc, #24]	; (8015644 <_vfiprintf_r+0x234>)
 801562c:	9803      	ldr	r0, [sp, #12]
 801562e:	f7fc fec9 	bl	80123c4 <_printf_i>
 8015632:	e7e3      	b.n	80155fc <_vfiprintf_r+0x1ec>
 8015634:	080184bc 	.word	0x080184bc
 8015638:	080184c2 	.word	0x080184c2
 801563c:	080184c6 	.word	0x080184c6
 8015640:	08011e39 	.word	0x08011e39
 8015644:	080153eb 	.word	0x080153eb

08015648 <__swbuf_r>:
 8015648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801564a:	0006      	movs	r6, r0
 801564c:	000d      	movs	r5, r1
 801564e:	0014      	movs	r4, r2
 8015650:	2800      	cmp	r0, #0
 8015652:	d004      	beq.n	801565e <__swbuf_r+0x16>
 8015654:	6a03      	ldr	r3, [r0, #32]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d101      	bne.n	801565e <__swbuf_r+0x16>
 801565a:	f7fd fa5b 	bl	8012b14 <__sinit>
 801565e:	69a3      	ldr	r3, [r4, #24]
 8015660:	60a3      	str	r3, [r4, #8]
 8015662:	89a3      	ldrh	r3, [r4, #12]
 8015664:	071b      	lsls	r3, r3, #28
 8015666:	d528      	bpl.n	80156ba <__swbuf_r+0x72>
 8015668:	6923      	ldr	r3, [r4, #16]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d025      	beq.n	80156ba <__swbuf_r+0x72>
 801566e:	6923      	ldr	r3, [r4, #16]
 8015670:	6820      	ldr	r0, [r4, #0]
 8015672:	b2ef      	uxtb	r7, r5
 8015674:	1ac0      	subs	r0, r0, r3
 8015676:	6963      	ldr	r3, [r4, #20]
 8015678:	b2ed      	uxtb	r5, r5
 801567a:	4283      	cmp	r3, r0
 801567c:	dc05      	bgt.n	801568a <__swbuf_r+0x42>
 801567e:	0021      	movs	r1, r4
 8015680:	0030      	movs	r0, r6
 8015682:	f7ff fdeb 	bl	801525c <_fflush_r>
 8015686:	2800      	cmp	r0, #0
 8015688:	d11d      	bne.n	80156c6 <__swbuf_r+0x7e>
 801568a:	68a3      	ldr	r3, [r4, #8]
 801568c:	3001      	adds	r0, #1
 801568e:	3b01      	subs	r3, #1
 8015690:	60a3      	str	r3, [r4, #8]
 8015692:	6823      	ldr	r3, [r4, #0]
 8015694:	1c5a      	adds	r2, r3, #1
 8015696:	6022      	str	r2, [r4, #0]
 8015698:	701f      	strb	r7, [r3, #0]
 801569a:	6963      	ldr	r3, [r4, #20]
 801569c:	4283      	cmp	r3, r0
 801569e:	d004      	beq.n	80156aa <__swbuf_r+0x62>
 80156a0:	89a3      	ldrh	r3, [r4, #12]
 80156a2:	07db      	lsls	r3, r3, #31
 80156a4:	d507      	bpl.n	80156b6 <__swbuf_r+0x6e>
 80156a6:	2d0a      	cmp	r5, #10
 80156a8:	d105      	bne.n	80156b6 <__swbuf_r+0x6e>
 80156aa:	0021      	movs	r1, r4
 80156ac:	0030      	movs	r0, r6
 80156ae:	f7ff fdd5 	bl	801525c <_fflush_r>
 80156b2:	2800      	cmp	r0, #0
 80156b4:	d107      	bne.n	80156c6 <__swbuf_r+0x7e>
 80156b6:	0028      	movs	r0, r5
 80156b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156ba:	0021      	movs	r1, r4
 80156bc:	0030      	movs	r0, r6
 80156be:	f000 f805 	bl	80156cc <__swsetup_r>
 80156c2:	2800      	cmp	r0, #0
 80156c4:	d0d3      	beq.n	801566e <__swbuf_r+0x26>
 80156c6:	2501      	movs	r5, #1
 80156c8:	426d      	negs	r5, r5
 80156ca:	e7f4      	b.n	80156b6 <__swbuf_r+0x6e>

080156cc <__swsetup_r>:
 80156cc:	4b30      	ldr	r3, [pc, #192]	; (8015790 <__swsetup_r+0xc4>)
 80156ce:	b570      	push	{r4, r5, r6, lr}
 80156d0:	0005      	movs	r5, r0
 80156d2:	6818      	ldr	r0, [r3, #0]
 80156d4:	000c      	movs	r4, r1
 80156d6:	2800      	cmp	r0, #0
 80156d8:	d004      	beq.n	80156e4 <__swsetup_r+0x18>
 80156da:	6a03      	ldr	r3, [r0, #32]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d101      	bne.n	80156e4 <__swsetup_r+0x18>
 80156e0:	f7fd fa18 	bl	8012b14 <__sinit>
 80156e4:	230c      	movs	r3, #12
 80156e6:	5ee2      	ldrsh	r2, [r4, r3]
 80156e8:	b293      	uxth	r3, r2
 80156ea:	0711      	lsls	r1, r2, #28
 80156ec:	d423      	bmi.n	8015736 <__swsetup_r+0x6a>
 80156ee:	06d9      	lsls	r1, r3, #27
 80156f0:	d407      	bmi.n	8015702 <__swsetup_r+0x36>
 80156f2:	2309      	movs	r3, #9
 80156f4:	2001      	movs	r0, #1
 80156f6:	602b      	str	r3, [r5, #0]
 80156f8:	3337      	adds	r3, #55	; 0x37
 80156fa:	4313      	orrs	r3, r2
 80156fc:	81a3      	strh	r3, [r4, #12]
 80156fe:	4240      	negs	r0, r0
 8015700:	bd70      	pop	{r4, r5, r6, pc}
 8015702:	075b      	lsls	r3, r3, #29
 8015704:	d513      	bpl.n	801572e <__swsetup_r+0x62>
 8015706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015708:	2900      	cmp	r1, #0
 801570a:	d008      	beq.n	801571e <__swsetup_r+0x52>
 801570c:	0023      	movs	r3, r4
 801570e:	3344      	adds	r3, #68	; 0x44
 8015710:	4299      	cmp	r1, r3
 8015712:	d002      	beq.n	801571a <__swsetup_r+0x4e>
 8015714:	0028      	movs	r0, r5
 8015716:	f7fe fb35 	bl	8013d84 <_free_r>
 801571a:	2300      	movs	r3, #0
 801571c:	6363      	str	r3, [r4, #52]	; 0x34
 801571e:	2224      	movs	r2, #36	; 0x24
 8015720:	89a3      	ldrh	r3, [r4, #12]
 8015722:	4393      	bics	r3, r2
 8015724:	81a3      	strh	r3, [r4, #12]
 8015726:	2300      	movs	r3, #0
 8015728:	6063      	str	r3, [r4, #4]
 801572a:	6923      	ldr	r3, [r4, #16]
 801572c:	6023      	str	r3, [r4, #0]
 801572e:	2308      	movs	r3, #8
 8015730:	89a2      	ldrh	r2, [r4, #12]
 8015732:	4313      	orrs	r3, r2
 8015734:	81a3      	strh	r3, [r4, #12]
 8015736:	6923      	ldr	r3, [r4, #16]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d10b      	bne.n	8015754 <__swsetup_r+0x88>
 801573c:	21a0      	movs	r1, #160	; 0xa0
 801573e:	2280      	movs	r2, #128	; 0x80
 8015740:	89a3      	ldrh	r3, [r4, #12]
 8015742:	0089      	lsls	r1, r1, #2
 8015744:	0092      	lsls	r2, r2, #2
 8015746:	400b      	ands	r3, r1
 8015748:	4293      	cmp	r3, r2
 801574a:	d003      	beq.n	8015754 <__swsetup_r+0x88>
 801574c:	0021      	movs	r1, r4
 801574e:	0028      	movs	r0, r5
 8015750:	f000 f89a 	bl	8015888 <__smakebuf_r>
 8015754:	220c      	movs	r2, #12
 8015756:	5ea3      	ldrsh	r3, [r4, r2]
 8015758:	2001      	movs	r0, #1
 801575a:	001a      	movs	r2, r3
 801575c:	b299      	uxth	r1, r3
 801575e:	4002      	ands	r2, r0
 8015760:	4203      	tst	r3, r0
 8015762:	d00f      	beq.n	8015784 <__swsetup_r+0xb8>
 8015764:	2200      	movs	r2, #0
 8015766:	60a2      	str	r2, [r4, #8]
 8015768:	6962      	ldr	r2, [r4, #20]
 801576a:	4252      	negs	r2, r2
 801576c:	61a2      	str	r2, [r4, #24]
 801576e:	2000      	movs	r0, #0
 8015770:	6922      	ldr	r2, [r4, #16]
 8015772:	4282      	cmp	r2, r0
 8015774:	d1c4      	bne.n	8015700 <__swsetup_r+0x34>
 8015776:	0609      	lsls	r1, r1, #24
 8015778:	d5c2      	bpl.n	8015700 <__swsetup_r+0x34>
 801577a:	2240      	movs	r2, #64	; 0x40
 801577c:	4313      	orrs	r3, r2
 801577e:	81a3      	strh	r3, [r4, #12]
 8015780:	3801      	subs	r0, #1
 8015782:	e7bd      	b.n	8015700 <__swsetup_r+0x34>
 8015784:	0788      	lsls	r0, r1, #30
 8015786:	d400      	bmi.n	801578a <__swsetup_r+0xbe>
 8015788:	6962      	ldr	r2, [r4, #20]
 801578a:	60a2      	str	r2, [r4, #8]
 801578c:	e7ef      	b.n	801576e <__swsetup_r+0xa2>
 801578e:	46c0      	nop			; (mov r8, r8)
 8015790:	200002c8 	.word	0x200002c8

08015794 <_raise_r>:
 8015794:	b570      	push	{r4, r5, r6, lr}
 8015796:	0004      	movs	r4, r0
 8015798:	000d      	movs	r5, r1
 801579a:	291f      	cmp	r1, #31
 801579c:	d904      	bls.n	80157a8 <_raise_r+0x14>
 801579e:	2316      	movs	r3, #22
 80157a0:	6003      	str	r3, [r0, #0]
 80157a2:	2001      	movs	r0, #1
 80157a4:	4240      	negs	r0, r0
 80157a6:	bd70      	pop	{r4, r5, r6, pc}
 80157a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d004      	beq.n	80157b8 <_raise_r+0x24>
 80157ae:	008a      	lsls	r2, r1, #2
 80157b0:	189b      	adds	r3, r3, r2
 80157b2:	681a      	ldr	r2, [r3, #0]
 80157b4:	2a00      	cmp	r2, #0
 80157b6:	d108      	bne.n	80157ca <_raise_r+0x36>
 80157b8:	0020      	movs	r0, r4
 80157ba:	f000 f831 	bl	8015820 <_getpid_r>
 80157be:	002a      	movs	r2, r5
 80157c0:	0001      	movs	r1, r0
 80157c2:	0020      	movs	r0, r4
 80157c4:	f000 f81a 	bl	80157fc <_kill_r>
 80157c8:	e7ed      	b.n	80157a6 <_raise_r+0x12>
 80157ca:	2000      	movs	r0, #0
 80157cc:	2a01      	cmp	r2, #1
 80157ce:	d0ea      	beq.n	80157a6 <_raise_r+0x12>
 80157d0:	1c51      	adds	r1, r2, #1
 80157d2:	d103      	bne.n	80157dc <_raise_r+0x48>
 80157d4:	2316      	movs	r3, #22
 80157d6:	3001      	adds	r0, #1
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	e7e4      	b.n	80157a6 <_raise_r+0x12>
 80157dc:	2400      	movs	r4, #0
 80157de:	0028      	movs	r0, r5
 80157e0:	601c      	str	r4, [r3, #0]
 80157e2:	4790      	blx	r2
 80157e4:	0020      	movs	r0, r4
 80157e6:	e7de      	b.n	80157a6 <_raise_r+0x12>

080157e8 <raise>:
 80157e8:	b510      	push	{r4, lr}
 80157ea:	4b03      	ldr	r3, [pc, #12]	; (80157f8 <raise+0x10>)
 80157ec:	0001      	movs	r1, r0
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	f7ff ffd0 	bl	8015794 <_raise_r>
 80157f4:	bd10      	pop	{r4, pc}
 80157f6:	46c0      	nop			; (mov r8, r8)
 80157f8:	200002c8 	.word	0x200002c8

080157fc <_kill_r>:
 80157fc:	2300      	movs	r3, #0
 80157fe:	b570      	push	{r4, r5, r6, lr}
 8015800:	4d06      	ldr	r5, [pc, #24]	; (801581c <_kill_r+0x20>)
 8015802:	0004      	movs	r4, r0
 8015804:	0008      	movs	r0, r1
 8015806:	0011      	movs	r1, r2
 8015808:	602b      	str	r3, [r5, #0]
 801580a:	f7f2 ffd1 	bl	80087b0 <_kill>
 801580e:	1c43      	adds	r3, r0, #1
 8015810:	d103      	bne.n	801581a <_kill_r+0x1e>
 8015812:	682b      	ldr	r3, [r5, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d000      	beq.n	801581a <_kill_r+0x1e>
 8015818:	6023      	str	r3, [r4, #0]
 801581a:	bd70      	pop	{r4, r5, r6, pc}
 801581c:	20005878 	.word	0x20005878

08015820 <_getpid_r>:
 8015820:	b510      	push	{r4, lr}
 8015822:	f7f2 ffbf 	bl	80087a4 <_getpid>
 8015826:	bd10      	pop	{r4, pc}

08015828 <_malloc_usable_size_r>:
 8015828:	1f0b      	subs	r3, r1, #4
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	1f18      	subs	r0, r3, #4
 801582e:	2b00      	cmp	r3, #0
 8015830:	da01      	bge.n	8015836 <_malloc_usable_size_r+0xe>
 8015832:	580b      	ldr	r3, [r1, r0]
 8015834:	18c0      	adds	r0, r0, r3
 8015836:	4770      	bx	lr

08015838 <__swhatbuf_r>:
 8015838:	b570      	push	{r4, r5, r6, lr}
 801583a:	000e      	movs	r6, r1
 801583c:	001d      	movs	r5, r3
 801583e:	230e      	movs	r3, #14
 8015840:	5ec9      	ldrsh	r1, [r1, r3]
 8015842:	0014      	movs	r4, r2
 8015844:	b096      	sub	sp, #88	; 0x58
 8015846:	2900      	cmp	r1, #0
 8015848:	da0c      	bge.n	8015864 <__swhatbuf_r+0x2c>
 801584a:	89b2      	ldrh	r2, [r6, #12]
 801584c:	2380      	movs	r3, #128	; 0x80
 801584e:	0011      	movs	r1, r2
 8015850:	4019      	ands	r1, r3
 8015852:	421a      	tst	r2, r3
 8015854:	d013      	beq.n	801587e <__swhatbuf_r+0x46>
 8015856:	2100      	movs	r1, #0
 8015858:	3b40      	subs	r3, #64	; 0x40
 801585a:	2000      	movs	r0, #0
 801585c:	6029      	str	r1, [r5, #0]
 801585e:	6023      	str	r3, [r4, #0]
 8015860:	b016      	add	sp, #88	; 0x58
 8015862:	bd70      	pop	{r4, r5, r6, pc}
 8015864:	466a      	mov	r2, sp
 8015866:	f000 f84d 	bl	8015904 <_fstat_r>
 801586a:	2800      	cmp	r0, #0
 801586c:	dbed      	blt.n	801584a <__swhatbuf_r+0x12>
 801586e:	23f0      	movs	r3, #240	; 0xf0
 8015870:	9901      	ldr	r1, [sp, #4]
 8015872:	021b      	lsls	r3, r3, #8
 8015874:	4019      	ands	r1, r3
 8015876:	4b03      	ldr	r3, [pc, #12]	; (8015884 <__swhatbuf_r+0x4c>)
 8015878:	18c9      	adds	r1, r1, r3
 801587a:	424b      	negs	r3, r1
 801587c:	4159      	adcs	r1, r3
 801587e:	2380      	movs	r3, #128	; 0x80
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	e7ea      	b.n	801585a <__swhatbuf_r+0x22>
 8015884:	ffffe000 	.word	0xffffe000

08015888 <__smakebuf_r>:
 8015888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801588a:	2602      	movs	r6, #2
 801588c:	898b      	ldrh	r3, [r1, #12]
 801588e:	0005      	movs	r5, r0
 8015890:	000c      	movs	r4, r1
 8015892:	4233      	tst	r3, r6
 8015894:	d006      	beq.n	80158a4 <__smakebuf_r+0x1c>
 8015896:	0023      	movs	r3, r4
 8015898:	3347      	adds	r3, #71	; 0x47
 801589a:	6023      	str	r3, [r4, #0]
 801589c:	6123      	str	r3, [r4, #16]
 801589e:	2301      	movs	r3, #1
 80158a0:	6163      	str	r3, [r4, #20]
 80158a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80158a4:	466a      	mov	r2, sp
 80158a6:	ab01      	add	r3, sp, #4
 80158a8:	f7ff ffc6 	bl	8015838 <__swhatbuf_r>
 80158ac:	9900      	ldr	r1, [sp, #0]
 80158ae:	0007      	movs	r7, r0
 80158b0:	0028      	movs	r0, r5
 80158b2:	f7fb fab9 	bl	8010e28 <_malloc_r>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	d108      	bne.n	80158cc <__smakebuf_r+0x44>
 80158ba:	220c      	movs	r2, #12
 80158bc:	5ea3      	ldrsh	r3, [r4, r2]
 80158be:	059a      	lsls	r2, r3, #22
 80158c0:	d4ef      	bmi.n	80158a2 <__smakebuf_r+0x1a>
 80158c2:	2203      	movs	r2, #3
 80158c4:	4393      	bics	r3, r2
 80158c6:	431e      	orrs	r6, r3
 80158c8:	81a6      	strh	r6, [r4, #12]
 80158ca:	e7e4      	b.n	8015896 <__smakebuf_r+0xe>
 80158cc:	2380      	movs	r3, #128	; 0x80
 80158ce:	89a2      	ldrh	r2, [r4, #12]
 80158d0:	6020      	str	r0, [r4, #0]
 80158d2:	4313      	orrs	r3, r2
 80158d4:	81a3      	strh	r3, [r4, #12]
 80158d6:	9b00      	ldr	r3, [sp, #0]
 80158d8:	6120      	str	r0, [r4, #16]
 80158da:	6163      	str	r3, [r4, #20]
 80158dc:	9b01      	ldr	r3, [sp, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d00c      	beq.n	80158fc <__smakebuf_r+0x74>
 80158e2:	0028      	movs	r0, r5
 80158e4:	230e      	movs	r3, #14
 80158e6:	5ee1      	ldrsh	r1, [r4, r3]
 80158e8:	f000 f81e 	bl	8015928 <_isatty_r>
 80158ec:	2800      	cmp	r0, #0
 80158ee:	d005      	beq.n	80158fc <__smakebuf_r+0x74>
 80158f0:	2303      	movs	r3, #3
 80158f2:	89a2      	ldrh	r2, [r4, #12]
 80158f4:	439a      	bics	r2, r3
 80158f6:	3b02      	subs	r3, #2
 80158f8:	4313      	orrs	r3, r2
 80158fa:	81a3      	strh	r3, [r4, #12]
 80158fc:	89a3      	ldrh	r3, [r4, #12]
 80158fe:	433b      	orrs	r3, r7
 8015900:	81a3      	strh	r3, [r4, #12]
 8015902:	e7ce      	b.n	80158a2 <__smakebuf_r+0x1a>

08015904 <_fstat_r>:
 8015904:	2300      	movs	r3, #0
 8015906:	b570      	push	{r4, r5, r6, lr}
 8015908:	4d06      	ldr	r5, [pc, #24]	; (8015924 <_fstat_r+0x20>)
 801590a:	0004      	movs	r4, r0
 801590c:	0008      	movs	r0, r1
 801590e:	0011      	movs	r1, r2
 8015910:	602b      	str	r3, [r5, #0]
 8015912:	f7f2 ffac 	bl	800886e <_fstat>
 8015916:	1c43      	adds	r3, r0, #1
 8015918:	d103      	bne.n	8015922 <_fstat_r+0x1e>
 801591a:	682b      	ldr	r3, [r5, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d000      	beq.n	8015922 <_fstat_r+0x1e>
 8015920:	6023      	str	r3, [r4, #0]
 8015922:	bd70      	pop	{r4, r5, r6, pc}
 8015924:	20005878 	.word	0x20005878

08015928 <_isatty_r>:
 8015928:	2300      	movs	r3, #0
 801592a:	b570      	push	{r4, r5, r6, lr}
 801592c:	4d06      	ldr	r5, [pc, #24]	; (8015948 <_isatty_r+0x20>)
 801592e:	0004      	movs	r4, r0
 8015930:	0008      	movs	r0, r1
 8015932:	602b      	str	r3, [r5, #0]
 8015934:	f7f2 ffa9 	bl	800888a <_isatty>
 8015938:	1c43      	adds	r3, r0, #1
 801593a:	d103      	bne.n	8015944 <_isatty_r+0x1c>
 801593c:	682b      	ldr	r3, [r5, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d000      	beq.n	8015944 <_isatty_r+0x1c>
 8015942:	6023      	str	r3, [r4, #0]
 8015944:	bd70      	pop	{r4, r5, r6, pc}
 8015946:	46c0      	nop			; (mov r8, r8)
 8015948:	20005878 	.word	0x20005878

0801594c <pow>:
 801594c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801594e:	0014      	movs	r4, r2
 8015950:	001d      	movs	r5, r3
 8015952:	9000      	str	r0, [sp, #0]
 8015954:	9101      	str	r1, [sp, #4]
 8015956:	f000 f86f 	bl	8015a38 <__ieee754_pow>
 801595a:	0022      	movs	r2, r4
 801595c:	0006      	movs	r6, r0
 801595e:	000f      	movs	r7, r1
 8015960:	002b      	movs	r3, r5
 8015962:	0020      	movs	r0, r4
 8015964:	0029      	movs	r1, r5
 8015966:	f7ed faf9 	bl	8002f5c <__aeabi_dcmpun>
 801596a:	2800      	cmp	r0, #0
 801596c:	d13f      	bne.n	80159ee <pow+0xa2>
 801596e:	9800      	ldr	r0, [sp, #0]
 8015970:	9901      	ldr	r1, [sp, #4]
 8015972:	2200      	movs	r2, #0
 8015974:	2300      	movs	r3, #0
 8015976:	f7ea fd69 	bl	800044c <__aeabi_dcmpeq>
 801597a:	2800      	cmp	r0, #0
 801597c:	d019      	beq.n	80159b2 <pow+0x66>
 801597e:	2200      	movs	r2, #0
 8015980:	2300      	movs	r3, #0
 8015982:	0020      	movs	r0, r4
 8015984:	0029      	movs	r1, r5
 8015986:	f7ea fd61 	bl	800044c <__aeabi_dcmpeq>
 801598a:	2800      	cmp	r0, #0
 801598c:	d146      	bne.n	8015a1c <pow+0xd0>
 801598e:	0020      	movs	r0, r4
 8015990:	0029      	movs	r1, r5
 8015992:	f000 f849 	bl	8015a28 <finite>
 8015996:	2800      	cmp	r0, #0
 8015998:	d029      	beq.n	80159ee <pow+0xa2>
 801599a:	2200      	movs	r2, #0
 801599c:	2300      	movs	r3, #0
 801599e:	0020      	movs	r0, r4
 80159a0:	0029      	movs	r1, r5
 80159a2:	f7ea fd59 	bl	8000458 <__aeabi_dcmplt>
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d021      	beq.n	80159ee <pow+0xa2>
 80159aa:	f7fd fadb 	bl	8012f64 <__errno>
 80159ae:	2322      	movs	r3, #34	; 0x22
 80159b0:	e01c      	b.n	80159ec <pow+0xa0>
 80159b2:	0030      	movs	r0, r6
 80159b4:	0039      	movs	r1, r7
 80159b6:	f000 f837 	bl	8015a28 <finite>
 80159ba:	2800      	cmp	r0, #0
 80159bc:	d11b      	bne.n	80159f6 <pow+0xaa>
 80159be:	9800      	ldr	r0, [sp, #0]
 80159c0:	9901      	ldr	r1, [sp, #4]
 80159c2:	f000 f831 	bl	8015a28 <finite>
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d015      	beq.n	80159f6 <pow+0xaa>
 80159ca:	0020      	movs	r0, r4
 80159cc:	0029      	movs	r1, r5
 80159ce:	f000 f82b 	bl	8015a28 <finite>
 80159d2:	2800      	cmp	r0, #0
 80159d4:	d00f      	beq.n	80159f6 <pow+0xaa>
 80159d6:	0032      	movs	r2, r6
 80159d8:	003b      	movs	r3, r7
 80159da:	0030      	movs	r0, r6
 80159dc:	0039      	movs	r1, r7
 80159de:	f7ed fabd 	bl	8002f5c <__aeabi_dcmpun>
 80159e2:	2800      	cmp	r0, #0
 80159e4:	d0e1      	beq.n	80159aa <pow+0x5e>
 80159e6:	f7fd fabd 	bl	8012f64 <__errno>
 80159ea:	2321      	movs	r3, #33	; 0x21
 80159ec:	6003      	str	r3, [r0, #0]
 80159ee:	0030      	movs	r0, r6
 80159f0:	0039      	movs	r1, r7
 80159f2:	b003      	add	sp, #12
 80159f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159f6:	2200      	movs	r2, #0
 80159f8:	2300      	movs	r3, #0
 80159fa:	0030      	movs	r0, r6
 80159fc:	0039      	movs	r1, r7
 80159fe:	f7ea fd25 	bl	800044c <__aeabi_dcmpeq>
 8015a02:	2800      	cmp	r0, #0
 8015a04:	d0f3      	beq.n	80159ee <pow+0xa2>
 8015a06:	9800      	ldr	r0, [sp, #0]
 8015a08:	9901      	ldr	r1, [sp, #4]
 8015a0a:	f000 f80d 	bl	8015a28 <finite>
 8015a0e:	2800      	cmp	r0, #0
 8015a10:	d0ed      	beq.n	80159ee <pow+0xa2>
 8015a12:	0020      	movs	r0, r4
 8015a14:	0029      	movs	r1, r5
 8015a16:	f000 f807 	bl	8015a28 <finite>
 8015a1a:	e7c4      	b.n	80159a6 <pow+0x5a>
 8015a1c:	2600      	movs	r6, #0
 8015a1e:	4f01      	ldr	r7, [pc, #4]	; (8015a24 <pow+0xd8>)
 8015a20:	e7e5      	b.n	80159ee <pow+0xa2>
 8015a22:	46c0      	nop			; (mov r8, r8)
 8015a24:	3ff00000 	.word	0x3ff00000

08015a28 <finite>:
 8015a28:	4b02      	ldr	r3, [pc, #8]	; (8015a34 <finite+0xc>)
 8015a2a:	0048      	lsls	r0, r1, #1
 8015a2c:	0840      	lsrs	r0, r0, #1
 8015a2e:	18c0      	adds	r0, r0, r3
 8015a30:	0fc0      	lsrs	r0, r0, #31
 8015a32:	4770      	bx	lr
 8015a34:	80100000 	.word	0x80100000

08015a38 <__ieee754_pow>:
 8015a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a3a:	b095      	sub	sp, #84	; 0x54
 8015a3c:	9202      	str	r2, [sp, #8]
 8015a3e:	9303      	str	r3, [sp, #12]
 8015a40:	9b03      	ldr	r3, [sp, #12]
 8015a42:	9a03      	ldr	r2, [sp, #12]
 8015a44:	9304      	str	r3, [sp, #16]
 8015a46:	9b02      	ldr	r3, [sp, #8]
 8015a48:	0056      	lsls	r6, r2, #1
 8015a4a:	001a      	movs	r2, r3
 8015a4c:	0876      	lsrs	r6, r6, #1
 8015a4e:	0007      	movs	r7, r0
 8015a50:	000d      	movs	r5, r1
 8015a52:	4332      	orrs	r2, r6
 8015a54:	d119      	bne.n	8015a8a <__ieee754_pow+0x52>
 8015a56:	2180      	movs	r1, #128	; 0x80
 8015a58:	0309      	lsls	r1, r1, #12
 8015a5a:	4069      	eors	r1, r5
 8015a5c:	0002      	movs	r2, r0
 8015a5e:	000b      	movs	r3, r1
 8015a60:	1892      	adds	r2, r2, r2
 8015a62:	415b      	adcs	r3, r3
 8015a64:	4989      	ldr	r1, [pc, #548]	; (8015c8c <__ieee754_pow+0x254>)
 8015a66:	428b      	cmp	r3, r1
 8015a68:	d806      	bhi.n	8015a78 <__ieee754_pow+0x40>
 8015a6a:	d001      	beq.n	8015a70 <__ieee754_pow+0x38>
 8015a6c:	f000 fcb6 	bl	80163dc <__ieee754_pow+0x9a4>
 8015a70:	2a00      	cmp	r2, #0
 8015a72:	d101      	bne.n	8015a78 <__ieee754_pow+0x40>
 8015a74:	f000 fcb2 	bl	80163dc <__ieee754_pow+0x9a4>
 8015a78:	9a02      	ldr	r2, [sp, #8]
 8015a7a:	9b03      	ldr	r3, [sp, #12]
 8015a7c:	0038      	movs	r0, r7
 8015a7e:	0029      	movs	r1, r5
 8015a80:	f7eb fcce 	bl	8001420 <__aeabi_dadd>
 8015a84:	9000      	str	r0, [sp, #0]
 8015a86:	9101      	str	r1, [sp, #4]
 8015a88:	e0ad      	b.n	8015be6 <__ieee754_pow+0x1ae>
 8015a8a:	4a81      	ldr	r2, [pc, #516]	; (8015c90 <__ieee754_pow+0x258>)
 8015a8c:	004c      	lsls	r4, r1, #1
 8015a8e:	9108      	str	r1, [sp, #32]
 8015a90:	9000      	str	r0, [sp, #0]
 8015a92:	0864      	lsrs	r4, r4, #1
 8015a94:	4294      	cmp	r4, r2
 8015a96:	dc08      	bgt.n	8015aaa <__ieee754_pow+0x72>
 8015a98:	d101      	bne.n	8015a9e <__ieee754_pow+0x66>
 8015a9a:	2800      	cmp	r0, #0
 8015a9c:	d1ec      	bne.n	8015a78 <__ieee754_pow+0x40>
 8015a9e:	4a7c      	ldr	r2, [pc, #496]	; (8015c90 <__ieee754_pow+0x258>)
 8015aa0:	4296      	cmp	r6, r2
 8015aa2:	dc02      	bgt.n	8015aaa <__ieee754_pow+0x72>
 8015aa4:	d10c      	bne.n	8015ac0 <__ieee754_pow+0x88>
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00a      	beq.n	8015ac0 <__ieee754_pow+0x88>
 8015aaa:	4b7a      	ldr	r3, [pc, #488]	; (8015c94 <__ieee754_pow+0x25c>)
 8015aac:	18eb      	adds	r3, r5, r3
 8015aae:	433b      	orrs	r3, r7
 8015ab0:	d1e2      	bne.n	8015a78 <__ieee754_pow+0x40>
 8015ab2:	2180      	movs	r1, #128	; 0x80
 8015ab4:	9803      	ldr	r0, [sp, #12]
 8015ab6:	0309      	lsls	r1, r1, #12
 8015ab8:	4048      	eors	r0, r1
 8015aba:	0003      	movs	r3, r0
 8015abc:	9a02      	ldr	r2, [sp, #8]
 8015abe:	e7cf      	b.n	8015a60 <__ieee754_pow+0x28>
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	9206      	str	r2, [sp, #24]
 8015ac4:	2d00      	cmp	r5, #0
 8015ac6:	da69      	bge.n	8015b9c <__ieee754_pow+0x164>
 8015ac8:	4a73      	ldr	r2, [pc, #460]	; (8015c98 <__ieee754_pow+0x260>)
 8015aca:	4296      	cmp	r6, r2
 8015acc:	dc64      	bgt.n	8015b98 <__ieee754_pow+0x160>
 8015ace:	4a73      	ldr	r2, [pc, #460]	; (8015c9c <__ieee754_pow+0x264>)
 8015ad0:	4296      	cmp	r6, r2
 8015ad2:	dd11      	ble.n	8015af8 <__ieee754_pow+0xc0>
 8015ad4:	4972      	ldr	r1, [pc, #456]	; (8015ca0 <__ieee754_pow+0x268>)
 8015ad6:	1532      	asrs	r2, r6, #20
 8015ad8:	1852      	adds	r2, r2, r1
 8015ada:	2a14      	cmp	r2, #20
 8015adc:	dd3c      	ble.n	8015b58 <__ieee754_pow+0x120>
 8015ade:	2134      	movs	r1, #52	; 0x34
 8015ae0:	1a89      	subs	r1, r1, r2
 8015ae2:	9a02      	ldr	r2, [sp, #8]
 8015ae4:	40ca      	lsrs	r2, r1
 8015ae6:	0010      	movs	r0, r2
 8015ae8:	4088      	lsls	r0, r1
 8015aea:	4298      	cmp	r0, r3
 8015aec:	d104      	bne.n	8015af8 <__ieee754_pow+0xc0>
 8015aee:	2101      	movs	r1, #1
 8015af0:	400a      	ands	r2, r1
 8015af2:	1849      	adds	r1, r1, r1
 8015af4:	1a8a      	subs	r2, r1, r2
 8015af6:	9206      	str	r2, [sp, #24]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d03c      	beq.n	8015b76 <__ieee754_pow+0x13e>
 8015afc:	0038      	movs	r0, r7
 8015afe:	0029      	movs	r1, r5
 8015b00:	f000 fca4 	bl	801644c <fabs>
 8015b04:	9000      	str	r0, [sp, #0]
 8015b06:	9101      	str	r1, [sp, #4]
 8015b08:	2f00      	cmp	r7, #0
 8015b0a:	d000      	beq.n	8015b0e <__ieee754_pow+0xd6>
 8015b0c:	e094      	b.n	8015c38 <__ieee754_pow+0x200>
 8015b0e:	2c00      	cmp	r4, #0
 8015b10:	d005      	beq.n	8015b1e <__ieee754_pow+0xe6>
 8015b12:	4a64      	ldr	r2, [pc, #400]	; (8015ca4 <__ieee754_pow+0x26c>)
 8015b14:	00ab      	lsls	r3, r5, #2
 8015b16:	089b      	lsrs	r3, r3, #2
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	d000      	beq.n	8015b1e <__ieee754_pow+0xe6>
 8015b1c:	e08c      	b.n	8015c38 <__ieee754_pow+0x200>
 8015b1e:	9b04      	ldr	r3, [sp, #16]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	da07      	bge.n	8015b34 <__ieee754_pow+0xfc>
 8015b24:	9a00      	ldr	r2, [sp, #0]
 8015b26:	9b01      	ldr	r3, [sp, #4]
 8015b28:	2000      	movs	r0, #0
 8015b2a:	495e      	ldr	r1, [pc, #376]	; (8015ca4 <__ieee754_pow+0x26c>)
 8015b2c:	f7eb ffd8 	bl	8001ae0 <__aeabi_ddiv>
 8015b30:	9000      	str	r0, [sp, #0]
 8015b32:	9101      	str	r1, [sp, #4]
 8015b34:	9b08      	ldr	r3, [sp, #32]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	da55      	bge.n	8015be6 <__ieee754_pow+0x1ae>
 8015b3a:	4b56      	ldr	r3, [pc, #344]	; (8015c94 <__ieee754_pow+0x25c>)
 8015b3c:	18e4      	adds	r4, r4, r3
 8015b3e:	9b06      	ldr	r3, [sp, #24]
 8015b40:	431c      	orrs	r4, r3
 8015b42:	d000      	beq.n	8015b46 <__ieee754_pow+0x10e>
 8015b44:	e06c      	b.n	8015c20 <__ieee754_pow+0x1e8>
 8015b46:	9a00      	ldr	r2, [sp, #0]
 8015b48:	9b01      	ldr	r3, [sp, #4]
 8015b4a:	0010      	movs	r0, r2
 8015b4c:	0019      	movs	r1, r3
 8015b4e:	f7ec fe83 	bl	8002858 <__aeabi_dsub>
 8015b52:	0002      	movs	r2, r0
 8015b54:	000b      	movs	r3, r1
 8015b56:	e01c      	b.n	8015b92 <__ieee754_pow+0x15a>
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d1cf      	bne.n	8015afc <__ieee754_pow+0xc4>
 8015b5c:	3314      	adds	r3, #20
 8015b5e:	1a9a      	subs	r2, r3, r2
 8015b60:	0033      	movs	r3, r6
 8015b62:	4113      	asrs	r3, r2
 8015b64:	0019      	movs	r1, r3
 8015b66:	4091      	lsls	r1, r2
 8015b68:	42b1      	cmp	r1, r6
 8015b6a:	d104      	bne.n	8015b76 <__ieee754_pow+0x13e>
 8015b6c:	2201      	movs	r2, #1
 8015b6e:	4013      	ands	r3, r2
 8015b70:	1892      	adds	r2, r2, r2
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	9306      	str	r3, [sp, #24]
 8015b76:	4b4b      	ldr	r3, [pc, #300]	; (8015ca4 <__ieee754_pow+0x26c>)
 8015b78:	429e      	cmp	r6, r3
 8015b7a:	d138      	bne.n	8015bee <__ieee754_pow+0x1b6>
 8015b7c:	0038      	movs	r0, r7
 8015b7e:	0029      	movs	r1, r5
 8015b80:	9b04      	ldr	r3, [sp, #16]
 8015b82:	9000      	str	r0, [sp, #0]
 8015b84:	9101      	str	r1, [sp, #4]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	da2d      	bge.n	8015be6 <__ieee754_pow+0x1ae>
 8015b8a:	003a      	movs	r2, r7
 8015b8c:	002b      	movs	r3, r5
 8015b8e:	2000      	movs	r0, #0
 8015b90:	4944      	ldr	r1, [pc, #272]	; (8015ca4 <__ieee754_pow+0x26c>)
 8015b92:	f7eb ffa5 	bl	8001ae0 <__aeabi_ddiv>
 8015b96:	e775      	b.n	8015a84 <__ieee754_pow+0x4c>
 8015b98:	2202      	movs	r2, #2
 8015b9a:	9206      	str	r2, [sp, #24]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d1ad      	bne.n	8015afc <__ieee754_pow+0xc4>
 8015ba0:	4b3b      	ldr	r3, [pc, #236]	; (8015c90 <__ieee754_pow+0x258>)
 8015ba2:	429e      	cmp	r6, r3
 8015ba4:	d1e7      	bne.n	8015b76 <__ieee754_pow+0x13e>
 8015ba6:	4b3b      	ldr	r3, [pc, #236]	; (8015c94 <__ieee754_pow+0x25c>)
 8015ba8:	18e3      	adds	r3, r4, r3
 8015baa:	433b      	orrs	r3, r7
 8015bac:	d101      	bne.n	8015bb2 <__ieee754_pow+0x17a>
 8015bae:	f000 fc15 	bl	80163dc <__ieee754_pow+0x9a4>
 8015bb2:	4b3a      	ldr	r3, [pc, #232]	; (8015c9c <__ieee754_pow+0x264>)
 8015bb4:	429c      	cmp	r4, r3
 8015bb6:	dd09      	ble.n	8015bcc <__ieee754_pow+0x194>
 8015bb8:	9b04      	ldr	r3, [sp, #16]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	da01      	bge.n	8015bc2 <__ieee754_pow+0x18a>
 8015bbe:	f000 fc11 	bl	80163e4 <__ieee754_pow+0x9ac>
 8015bc2:	9b02      	ldr	r3, [sp, #8]
 8015bc4:	9c03      	ldr	r4, [sp, #12]
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	9401      	str	r4, [sp, #4]
 8015bca:	e00c      	b.n	8015be6 <__ieee754_pow+0x1ae>
 8015bcc:	9b04      	ldr	r3, [sp, #16]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	db01      	blt.n	8015bd6 <__ieee754_pow+0x19e>
 8015bd2:	f000 fc07 	bl	80163e4 <__ieee754_pow+0x9ac>
 8015bd6:	2280      	movs	r2, #128	; 0x80
 8015bd8:	0612      	lsls	r2, r2, #24
 8015bda:	4694      	mov	ip, r2
 8015bdc:	9b02      	ldr	r3, [sp, #8]
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	9b03      	ldr	r3, [sp, #12]
 8015be2:	4463      	add	r3, ip
 8015be4:	9301      	str	r3, [sp, #4]
 8015be6:	9800      	ldr	r0, [sp, #0]
 8015be8:	9901      	ldr	r1, [sp, #4]
 8015bea:	b015      	add	sp, #84	; 0x54
 8015bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bee:	2380      	movs	r3, #128	; 0x80
 8015bf0:	9a04      	ldr	r2, [sp, #16]
 8015bf2:	05db      	lsls	r3, r3, #23
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d106      	bne.n	8015c06 <__ieee754_pow+0x1ce>
 8015bf8:	003a      	movs	r2, r7
 8015bfa:	002b      	movs	r3, r5
 8015bfc:	0038      	movs	r0, r7
 8015bfe:	0029      	movs	r1, r5
 8015c00:	f7ec fb68 	bl	80022d4 <__aeabi_dmul>
 8015c04:	e73e      	b.n	8015a84 <__ieee754_pow+0x4c>
 8015c06:	4b28      	ldr	r3, [pc, #160]	; (8015ca8 <__ieee754_pow+0x270>)
 8015c08:	9a04      	ldr	r2, [sp, #16]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d000      	beq.n	8015c10 <__ieee754_pow+0x1d8>
 8015c0e:	e775      	b.n	8015afc <__ieee754_pow+0xc4>
 8015c10:	2d00      	cmp	r5, #0
 8015c12:	da00      	bge.n	8015c16 <__ieee754_pow+0x1de>
 8015c14:	e772      	b.n	8015afc <__ieee754_pow+0xc4>
 8015c16:	0038      	movs	r0, r7
 8015c18:	0029      	movs	r1, r5
 8015c1a:	f000 fcb7 	bl	801658c <__ieee754_sqrt>
 8015c1e:	e731      	b.n	8015a84 <__ieee754_pow+0x4c>
 8015c20:	9b06      	ldr	r3, [sp, #24]
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	d1df      	bne.n	8015be6 <__ieee754_pow+0x1ae>
 8015c26:	9800      	ldr	r0, [sp, #0]
 8015c28:	2180      	movs	r1, #128	; 0x80
 8015c2a:	0002      	movs	r2, r0
 8015c2c:	9801      	ldr	r0, [sp, #4]
 8015c2e:	0609      	lsls	r1, r1, #24
 8015c30:	1843      	adds	r3, r0, r1
 8015c32:	9200      	str	r2, [sp, #0]
 8015c34:	9301      	str	r3, [sp, #4]
 8015c36:	e7d6      	b.n	8015be6 <__ieee754_pow+0x1ae>
 8015c38:	0feb      	lsrs	r3, r5, #31
 8015c3a:	3b01      	subs	r3, #1
 8015c3c:	930e      	str	r3, [sp, #56]	; 0x38
 8015c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c40:	9b06      	ldr	r3, [sp, #24]
 8015c42:	4313      	orrs	r3, r2
 8015c44:	d104      	bne.n	8015c50 <__ieee754_pow+0x218>
 8015c46:	003a      	movs	r2, r7
 8015c48:	002b      	movs	r3, r5
 8015c4a:	0038      	movs	r0, r7
 8015c4c:	0029      	movs	r1, r5
 8015c4e:	e77e      	b.n	8015b4e <__ieee754_pow+0x116>
 8015c50:	4b16      	ldr	r3, [pc, #88]	; (8015cac <__ieee754_pow+0x274>)
 8015c52:	429e      	cmp	r6, r3
 8015c54:	dc00      	bgt.n	8015c58 <__ieee754_pow+0x220>
 8015c56:	e0f1      	b.n	8015e3c <__ieee754_pow+0x404>
 8015c58:	4b15      	ldr	r3, [pc, #84]	; (8015cb0 <__ieee754_pow+0x278>)
 8015c5a:	429e      	cmp	r6, r3
 8015c5c:	dd09      	ble.n	8015c72 <__ieee754_pow+0x23a>
 8015c5e:	4b0f      	ldr	r3, [pc, #60]	; (8015c9c <__ieee754_pow+0x264>)
 8015c60:	429c      	cmp	r4, r3
 8015c62:	dc0c      	bgt.n	8015c7e <__ieee754_pow+0x246>
 8015c64:	9b04      	ldr	r3, [sp, #16]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	da0c      	bge.n	8015c84 <__ieee754_pow+0x24c>
 8015c6a:	2000      	movs	r0, #0
 8015c6c:	f000 fc86 	bl	801657c <__math_oflow>
 8015c70:	e708      	b.n	8015a84 <__ieee754_pow+0x4c>
 8015c72:	4b10      	ldr	r3, [pc, #64]	; (8015cb4 <__ieee754_pow+0x27c>)
 8015c74:	429c      	cmp	r4, r3
 8015c76:	ddf5      	ble.n	8015c64 <__ieee754_pow+0x22c>
 8015c78:	4b0a      	ldr	r3, [pc, #40]	; (8015ca4 <__ieee754_pow+0x26c>)
 8015c7a:	429c      	cmp	r4, r3
 8015c7c:	dd1c      	ble.n	8015cb8 <__ieee754_pow+0x280>
 8015c7e:	9b04      	ldr	r3, [sp, #16]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	dcf2      	bgt.n	8015c6a <__ieee754_pow+0x232>
 8015c84:	2000      	movs	r0, #0
 8015c86:	f000 fc72 	bl	801656e <__math_uflow>
 8015c8a:	e6fb      	b.n	8015a84 <__ieee754_pow+0x4c>
 8015c8c:	fff00000 	.word	0xfff00000
 8015c90:	7ff00000 	.word	0x7ff00000
 8015c94:	c0100000 	.word	0xc0100000
 8015c98:	433fffff 	.word	0x433fffff
 8015c9c:	3fefffff 	.word	0x3fefffff
 8015ca0:	fffffc01 	.word	0xfffffc01
 8015ca4:	3ff00000 	.word	0x3ff00000
 8015ca8:	3fe00000 	.word	0x3fe00000
 8015cac:	41e00000 	.word	0x41e00000
 8015cb0:	43f00000 	.word	0x43f00000
 8015cb4:	3feffffe 	.word	0x3feffffe
 8015cb8:	2200      	movs	r2, #0
 8015cba:	9800      	ldr	r0, [sp, #0]
 8015cbc:	9901      	ldr	r1, [sp, #4]
 8015cbe:	4b53      	ldr	r3, [pc, #332]	; (8015e0c <__ieee754_pow+0x3d4>)
 8015cc0:	f7ec fdca 	bl	8002858 <__aeabi_dsub>
 8015cc4:	22c0      	movs	r2, #192	; 0xc0
 8015cc6:	4b52      	ldr	r3, [pc, #328]	; (8015e10 <__ieee754_pow+0x3d8>)
 8015cc8:	05d2      	lsls	r2, r2, #23
 8015cca:	0004      	movs	r4, r0
 8015ccc:	000d      	movs	r5, r1
 8015cce:	f7ec fb01 	bl	80022d4 <__aeabi_dmul>
 8015cd2:	4a50      	ldr	r2, [pc, #320]	; (8015e14 <__ieee754_pow+0x3dc>)
 8015cd4:	0006      	movs	r6, r0
 8015cd6:	000f      	movs	r7, r1
 8015cd8:	0020      	movs	r0, r4
 8015cda:	0029      	movs	r1, r5
 8015cdc:	4b4e      	ldr	r3, [pc, #312]	; (8015e18 <__ieee754_pow+0x3e0>)
 8015cde:	f7ec faf9 	bl	80022d4 <__aeabi_dmul>
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	9000      	str	r0, [sp, #0]
 8015ce6:	9101      	str	r1, [sp, #4]
 8015ce8:	4b4c      	ldr	r3, [pc, #304]	; (8015e1c <__ieee754_pow+0x3e4>)
 8015cea:	0020      	movs	r0, r4
 8015cec:	0029      	movs	r1, r5
 8015cee:	f7ec faf1 	bl	80022d4 <__aeabi_dmul>
 8015cf2:	0002      	movs	r2, r0
 8015cf4:	000b      	movs	r3, r1
 8015cf6:	484a      	ldr	r0, [pc, #296]	; (8015e20 <__ieee754_pow+0x3e8>)
 8015cf8:	494a      	ldr	r1, [pc, #296]	; (8015e24 <__ieee754_pow+0x3ec>)
 8015cfa:	f7ec fdad 	bl	8002858 <__aeabi_dsub>
 8015cfe:	0022      	movs	r2, r4
 8015d00:	002b      	movs	r3, r5
 8015d02:	f7ec fae7 	bl	80022d4 <__aeabi_dmul>
 8015d06:	0002      	movs	r2, r0
 8015d08:	000b      	movs	r3, r1
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	4946      	ldr	r1, [pc, #280]	; (8015e28 <__ieee754_pow+0x3f0>)
 8015d0e:	f7ec fda3 	bl	8002858 <__aeabi_dsub>
 8015d12:	0022      	movs	r2, r4
 8015d14:	002b      	movs	r3, r5
 8015d16:	9004      	str	r0, [sp, #16]
 8015d18:	9105      	str	r1, [sp, #20]
 8015d1a:	0020      	movs	r0, r4
 8015d1c:	0029      	movs	r1, r5
 8015d1e:	f7ec fad9 	bl	80022d4 <__aeabi_dmul>
 8015d22:	0002      	movs	r2, r0
 8015d24:	000b      	movs	r3, r1
 8015d26:	9804      	ldr	r0, [sp, #16]
 8015d28:	9905      	ldr	r1, [sp, #20]
 8015d2a:	f7ec fad3 	bl	80022d4 <__aeabi_dmul>
 8015d2e:	4a3f      	ldr	r2, [pc, #252]	; (8015e2c <__ieee754_pow+0x3f4>)
 8015d30:	4b37      	ldr	r3, [pc, #220]	; (8015e10 <__ieee754_pow+0x3d8>)
 8015d32:	f7ec facf 	bl	80022d4 <__aeabi_dmul>
 8015d36:	0002      	movs	r2, r0
 8015d38:	000b      	movs	r3, r1
 8015d3a:	9800      	ldr	r0, [sp, #0]
 8015d3c:	9901      	ldr	r1, [sp, #4]
 8015d3e:	f7ec fd8b 	bl	8002858 <__aeabi_dsub>
 8015d42:	0002      	movs	r2, r0
 8015d44:	000b      	movs	r3, r1
 8015d46:	0004      	movs	r4, r0
 8015d48:	000d      	movs	r5, r1
 8015d4a:	0030      	movs	r0, r6
 8015d4c:	0039      	movs	r1, r7
 8015d4e:	f7eb fb67 	bl	8001420 <__aeabi_dadd>
 8015d52:	2000      	movs	r0, #0
 8015d54:	0032      	movs	r2, r6
 8015d56:	003b      	movs	r3, r7
 8015d58:	9004      	str	r0, [sp, #16]
 8015d5a:	9105      	str	r1, [sp, #20]
 8015d5c:	f7ec fd7c 	bl	8002858 <__aeabi_dsub>
 8015d60:	0002      	movs	r2, r0
 8015d62:	000b      	movs	r3, r1
 8015d64:	0020      	movs	r0, r4
 8015d66:	0029      	movs	r1, r5
 8015d68:	f7ec fd76 	bl	8002858 <__aeabi_dsub>
 8015d6c:	9b06      	ldr	r3, [sp, #24]
 8015d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d70:	3b01      	subs	r3, #1
 8015d72:	0006      	movs	r6, r0
 8015d74:	000f      	movs	r7, r1
 8015d76:	4313      	orrs	r3, r2
 8015d78:	d000      	beq.n	8015d7c <__ieee754_pow+0x344>
 8015d7a:	e1dc      	b.n	8016136 <__ieee754_pow+0x6fe>
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	4c2c      	ldr	r4, [pc, #176]	; (8015e30 <__ieee754_pow+0x3f8>)
 8015d80:	9300      	str	r3, [sp, #0]
 8015d82:	9401      	str	r4, [sp, #4]
 8015d84:	9c02      	ldr	r4, [sp, #8]
 8015d86:	9d03      	ldr	r5, [sp, #12]
 8015d88:	9802      	ldr	r0, [sp, #8]
 8015d8a:	9903      	ldr	r1, [sp, #12]
 8015d8c:	2400      	movs	r4, #0
 8015d8e:	002b      	movs	r3, r5
 8015d90:	0022      	movs	r2, r4
 8015d92:	f7ec fd61 	bl	8002858 <__aeabi_dsub>
 8015d96:	9a04      	ldr	r2, [sp, #16]
 8015d98:	9b05      	ldr	r3, [sp, #20]
 8015d9a:	f7ec fa9b 	bl	80022d4 <__aeabi_dmul>
 8015d9e:	9a02      	ldr	r2, [sp, #8]
 8015da0:	9b03      	ldr	r3, [sp, #12]
 8015da2:	9006      	str	r0, [sp, #24]
 8015da4:	9107      	str	r1, [sp, #28]
 8015da6:	0030      	movs	r0, r6
 8015da8:	0039      	movs	r1, r7
 8015daa:	f7ec fa93 	bl	80022d4 <__aeabi_dmul>
 8015dae:	0002      	movs	r2, r0
 8015db0:	000b      	movs	r3, r1
 8015db2:	9806      	ldr	r0, [sp, #24]
 8015db4:	9907      	ldr	r1, [sp, #28]
 8015db6:	f7eb fb33 	bl	8001420 <__aeabi_dadd>
 8015dba:	0022      	movs	r2, r4
 8015dbc:	002b      	movs	r3, r5
 8015dbe:	0006      	movs	r6, r0
 8015dc0:	000f      	movs	r7, r1
 8015dc2:	9804      	ldr	r0, [sp, #16]
 8015dc4:	9905      	ldr	r1, [sp, #20]
 8015dc6:	f7ec fa85 	bl	80022d4 <__aeabi_dmul>
 8015dca:	0003      	movs	r3, r0
 8015dcc:	000c      	movs	r4, r1
 8015dce:	9004      	str	r0, [sp, #16]
 8015dd0:	9105      	str	r1, [sp, #20]
 8015dd2:	9306      	str	r3, [sp, #24]
 8015dd4:	9407      	str	r4, [sp, #28]
 8015dd6:	0002      	movs	r2, r0
 8015dd8:	000b      	movs	r3, r1
 8015dda:	0030      	movs	r0, r6
 8015ddc:	0039      	movs	r1, r7
 8015dde:	f7eb fb1f 	bl	8001420 <__aeabi_dadd>
 8015de2:	4b14      	ldr	r3, [pc, #80]	; (8015e34 <__ieee754_pow+0x3fc>)
 8015de4:	0005      	movs	r5, r0
 8015de6:	000c      	movs	r4, r1
 8015de8:	9108      	str	r1, [sp, #32]
 8015dea:	4299      	cmp	r1, r3
 8015dec:	dc00      	bgt.n	8015df0 <__ieee754_pow+0x3b8>
 8015dee:	e2d4      	b.n	801639a <__ieee754_pow+0x962>
 8015df0:	4b11      	ldr	r3, [pc, #68]	; (8015e38 <__ieee754_pow+0x400>)
 8015df2:	18cb      	adds	r3, r1, r3
 8015df4:	4303      	orrs	r3, r0
 8015df6:	d100      	bne.n	8015dfa <__ieee754_pow+0x3c2>
 8015df8:	e1d6      	b.n	80161a8 <__ieee754_pow+0x770>
 8015dfa:	9800      	ldr	r0, [sp, #0]
 8015dfc:	9901      	ldr	r1, [sp, #4]
 8015dfe:	2300      	movs	r3, #0
 8015e00:	2200      	movs	r2, #0
 8015e02:	f7ea fb29 	bl	8000458 <__aeabi_dcmplt>
 8015e06:	1e43      	subs	r3, r0, #1
 8015e08:	4198      	sbcs	r0, r3
 8015e0a:	e72f      	b.n	8015c6c <__ieee754_pow+0x234>
 8015e0c:	3ff00000 	.word	0x3ff00000
 8015e10:	3ff71547 	.word	0x3ff71547
 8015e14:	f85ddf44 	.word	0xf85ddf44
 8015e18:	3e54ae0b 	.word	0x3e54ae0b
 8015e1c:	3fd00000 	.word	0x3fd00000
 8015e20:	55555555 	.word	0x55555555
 8015e24:	3fd55555 	.word	0x3fd55555
 8015e28:	3fe00000 	.word	0x3fe00000
 8015e2c:	652b82fe 	.word	0x652b82fe
 8015e30:	bff00000 	.word	0xbff00000
 8015e34:	408fffff 	.word	0x408fffff
 8015e38:	bf700000 	.word	0xbf700000
 8015e3c:	4bbf      	ldr	r3, [pc, #764]	; (801613c <__ieee754_pow+0x704>)
 8015e3e:	2200      	movs	r2, #0
 8015e40:	422b      	tst	r3, r5
 8015e42:	d10a      	bne.n	8015e5a <__ieee754_pow+0x422>
 8015e44:	9800      	ldr	r0, [sp, #0]
 8015e46:	9901      	ldr	r1, [sp, #4]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	4bbd      	ldr	r3, [pc, #756]	; (8016140 <__ieee754_pow+0x708>)
 8015e4c:	f7ec fa42 	bl	80022d4 <__aeabi_dmul>
 8015e50:	2235      	movs	r2, #53	; 0x35
 8015e52:	9000      	str	r0, [sp, #0]
 8015e54:	9101      	str	r1, [sp, #4]
 8015e56:	9c01      	ldr	r4, [sp, #4]
 8015e58:	4252      	negs	r2, r2
 8015e5a:	49ba      	ldr	r1, [pc, #744]	; (8016144 <__ieee754_pow+0x70c>)
 8015e5c:	1523      	asrs	r3, r4, #20
 8015e5e:	185b      	adds	r3, r3, r1
 8015e60:	189b      	adds	r3, r3, r2
 8015e62:	0324      	lsls	r4, r4, #12
 8015e64:	4db8      	ldr	r5, [pc, #736]	; (8016148 <__ieee754_pow+0x710>)
 8015e66:	930d      	str	r3, [sp, #52]	; 0x34
 8015e68:	4bb8      	ldr	r3, [pc, #736]	; (801614c <__ieee754_pow+0x714>)
 8015e6a:	0b22      	lsrs	r2, r4, #12
 8015e6c:	4315      	orrs	r5, r2
 8015e6e:	2400      	movs	r4, #0
 8015e70:	429a      	cmp	r2, r3
 8015e72:	dd09      	ble.n	8015e88 <__ieee754_pow+0x450>
 8015e74:	4bb6      	ldr	r3, [pc, #728]	; (8016150 <__ieee754_pow+0x718>)
 8015e76:	3401      	adds	r4, #1
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	dd05      	ble.n	8015e88 <__ieee754_pow+0x450>
 8015e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e7e:	191b      	adds	r3, r3, r4
 8015e80:	2400      	movs	r4, #0
 8015e82:	930d      	str	r3, [sp, #52]	; 0x34
 8015e84:	4bb3      	ldr	r3, [pc, #716]	; (8016154 <__ieee754_pow+0x71c>)
 8015e86:	18ed      	adds	r5, r5, r3
 8015e88:	4bb3      	ldr	r3, [pc, #716]	; (8016158 <__ieee754_pow+0x720>)
 8015e8a:	00e2      	lsls	r2, r4, #3
 8015e8c:	189b      	adds	r3, r3, r2
 8015e8e:	9800      	ldr	r0, [sp, #0]
 8015e90:	9901      	ldr	r1, [sp, #4]
 8015e92:	920f      	str	r2, [sp, #60]	; 0x3c
 8015e94:	0029      	movs	r1, r5
 8015e96:	681a      	ldr	r2, [r3, #0]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	0006      	movs	r6, r0
 8015e9c:	920a      	str	r2, [sp, #40]	; 0x28
 8015e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ea0:	f7ec fcda 	bl	8002858 <__aeabi_dsub>
 8015ea4:	0032      	movs	r2, r6
 8015ea6:	002b      	movs	r3, r5
 8015ea8:	9010      	str	r0, [sp, #64]	; 0x40
 8015eaa:	9111      	str	r1, [sp, #68]	; 0x44
 8015eac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015eae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015eb0:	f7eb fab6 	bl	8001420 <__aeabi_dadd>
 8015eb4:	0002      	movs	r2, r0
 8015eb6:	000b      	movs	r3, r1
 8015eb8:	2000      	movs	r0, #0
 8015eba:	49a3      	ldr	r1, [pc, #652]	; (8016148 <__ieee754_pow+0x710>)
 8015ebc:	f7eb fe10 	bl	8001ae0 <__aeabi_ddiv>
 8015ec0:	0002      	movs	r2, r0
 8015ec2:	000b      	movs	r3, r1
 8015ec4:	9012      	str	r0, [sp, #72]	; 0x48
 8015ec6:	9113      	str	r1, [sp, #76]	; 0x4c
 8015ec8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015eca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ecc:	f7ec fa02 	bl	80022d4 <__aeabi_dmul>
 8015ed0:	9008      	str	r0, [sp, #32]
 8015ed2:	9109      	str	r1, [sp, #36]	; 0x24
 8015ed4:	9a08      	ldr	r2, [sp, #32]
 8015ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ed8:	9204      	str	r2, [sp, #16]
 8015eda:	9305      	str	r3, [sp, #20]
 8015edc:	2300      	movs	r3, #0
 8015ede:	2180      	movs	r1, #128	; 0x80
 8015ee0:	2080      	movs	r0, #128	; 0x80
 8015ee2:	9304      	str	r3, [sp, #16]
 8015ee4:	9a04      	ldr	r2, [sp, #16]
 8015ee6:	9b05      	ldr	r3, [sp, #20]
 8015ee8:	9200      	str	r2, [sp, #0]
 8015eea:	9301      	str	r3, [sp, #4]
 8015eec:	2200      	movs	r2, #0
 8015eee:	002f      	movs	r7, r5
 8015ef0:	0589      	lsls	r1, r1, #22
 8015ef2:	106d      	asrs	r5, r5, #1
 8015ef4:	4329      	orrs	r1, r5
 8015ef6:	0300      	lsls	r0, r0, #12
 8015ef8:	1809      	adds	r1, r1, r0
 8015efa:	04a0      	lsls	r0, r4, #18
 8015efc:	180b      	adds	r3, r1, r0
 8015efe:	9800      	ldr	r0, [sp, #0]
 8015f00:	9901      	ldr	r1, [sp, #4]
 8015f02:	0014      	movs	r4, r2
 8015f04:	001d      	movs	r5, r3
 8015f06:	f7ec f9e5 	bl	80022d4 <__aeabi_dmul>
 8015f0a:	0002      	movs	r2, r0
 8015f0c:	000b      	movs	r3, r1
 8015f0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015f10:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f12:	f7ec fca1 	bl	8002858 <__aeabi_dsub>
 8015f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f1a:	9010      	str	r0, [sp, #64]	; 0x40
 8015f1c:	9111      	str	r1, [sp, #68]	; 0x44
 8015f1e:	0020      	movs	r0, r4
 8015f20:	0029      	movs	r1, r5
 8015f22:	f7ec fc99 	bl	8002858 <__aeabi_dsub>
 8015f26:	0002      	movs	r2, r0
 8015f28:	000b      	movs	r3, r1
 8015f2a:	0030      	movs	r0, r6
 8015f2c:	0039      	movs	r1, r7
 8015f2e:	f7ec fc93 	bl	8002858 <__aeabi_dsub>
 8015f32:	9a00      	ldr	r2, [sp, #0]
 8015f34:	9b01      	ldr	r3, [sp, #4]
 8015f36:	f7ec f9cd 	bl	80022d4 <__aeabi_dmul>
 8015f3a:	0002      	movs	r2, r0
 8015f3c:	000b      	movs	r3, r1
 8015f3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015f40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f42:	f7ec fc89 	bl	8002858 <__aeabi_dsub>
 8015f46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f4a:	f7ec f9c3 	bl	80022d4 <__aeabi_dmul>
 8015f4e:	9a08      	ldr	r2, [sp, #32]
 8015f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f52:	900a      	str	r0, [sp, #40]	; 0x28
 8015f54:	910b      	str	r1, [sp, #44]	; 0x2c
 8015f56:	0010      	movs	r0, r2
 8015f58:	0019      	movs	r1, r3
 8015f5a:	f7ec f9bb 	bl	80022d4 <__aeabi_dmul>
 8015f5e:	0006      	movs	r6, r0
 8015f60:	000f      	movs	r7, r1
 8015f62:	4a7e      	ldr	r2, [pc, #504]	; (801615c <__ieee754_pow+0x724>)
 8015f64:	4b7e      	ldr	r3, [pc, #504]	; (8016160 <__ieee754_pow+0x728>)
 8015f66:	f7ec f9b5 	bl	80022d4 <__aeabi_dmul>
 8015f6a:	4a7e      	ldr	r2, [pc, #504]	; (8016164 <__ieee754_pow+0x72c>)
 8015f6c:	4b7e      	ldr	r3, [pc, #504]	; (8016168 <__ieee754_pow+0x730>)
 8015f6e:	f7eb fa57 	bl	8001420 <__aeabi_dadd>
 8015f72:	0032      	movs	r2, r6
 8015f74:	003b      	movs	r3, r7
 8015f76:	f7ec f9ad 	bl	80022d4 <__aeabi_dmul>
 8015f7a:	4a7c      	ldr	r2, [pc, #496]	; (801616c <__ieee754_pow+0x734>)
 8015f7c:	4b7c      	ldr	r3, [pc, #496]	; (8016170 <__ieee754_pow+0x738>)
 8015f7e:	f7eb fa4f 	bl	8001420 <__aeabi_dadd>
 8015f82:	0032      	movs	r2, r6
 8015f84:	003b      	movs	r3, r7
 8015f86:	f7ec f9a5 	bl	80022d4 <__aeabi_dmul>
 8015f8a:	4a7a      	ldr	r2, [pc, #488]	; (8016174 <__ieee754_pow+0x73c>)
 8015f8c:	4b7a      	ldr	r3, [pc, #488]	; (8016178 <__ieee754_pow+0x740>)
 8015f8e:	f7eb fa47 	bl	8001420 <__aeabi_dadd>
 8015f92:	0032      	movs	r2, r6
 8015f94:	003b      	movs	r3, r7
 8015f96:	f7ec f99d 	bl	80022d4 <__aeabi_dmul>
 8015f9a:	4a78      	ldr	r2, [pc, #480]	; (801617c <__ieee754_pow+0x744>)
 8015f9c:	4b78      	ldr	r3, [pc, #480]	; (8016180 <__ieee754_pow+0x748>)
 8015f9e:	f7eb fa3f 	bl	8001420 <__aeabi_dadd>
 8015fa2:	0032      	movs	r2, r6
 8015fa4:	003b      	movs	r3, r7
 8015fa6:	f7ec f995 	bl	80022d4 <__aeabi_dmul>
 8015faa:	4a76      	ldr	r2, [pc, #472]	; (8016184 <__ieee754_pow+0x74c>)
 8015fac:	4b76      	ldr	r3, [pc, #472]	; (8016188 <__ieee754_pow+0x750>)
 8015fae:	f7eb fa37 	bl	8001420 <__aeabi_dadd>
 8015fb2:	0032      	movs	r2, r6
 8015fb4:	0004      	movs	r4, r0
 8015fb6:	000d      	movs	r5, r1
 8015fb8:	003b      	movs	r3, r7
 8015fba:	0030      	movs	r0, r6
 8015fbc:	0039      	movs	r1, r7
 8015fbe:	f7ec f989 	bl	80022d4 <__aeabi_dmul>
 8015fc2:	0002      	movs	r2, r0
 8015fc4:	000b      	movs	r3, r1
 8015fc6:	0020      	movs	r0, r4
 8015fc8:	0029      	movs	r1, r5
 8015fca:	f7ec f983 	bl	80022d4 <__aeabi_dmul>
 8015fce:	9a00      	ldr	r2, [sp, #0]
 8015fd0:	9b01      	ldr	r3, [sp, #4]
 8015fd2:	0004      	movs	r4, r0
 8015fd4:	000d      	movs	r5, r1
 8015fd6:	9808      	ldr	r0, [sp, #32]
 8015fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015fda:	f7eb fa21 	bl	8001420 <__aeabi_dadd>
 8015fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fe2:	f7ec f977 	bl	80022d4 <__aeabi_dmul>
 8015fe6:	0022      	movs	r2, r4
 8015fe8:	002b      	movs	r3, r5
 8015fea:	f7eb fa19 	bl	8001420 <__aeabi_dadd>
 8015fee:	9a00      	ldr	r2, [sp, #0]
 8015ff0:	9b01      	ldr	r3, [sp, #4]
 8015ff2:	9010      	str	r0, [sp, #64]	; 0x40
 8015ff4:	9111      	str	r1, [sp, #68]	; 0x44
 8015ff6:	0010      	movs	r0, r2
 8015ff8:	0019      	movs	r1, r3
 8015ffa:	f7ec f96b 	bl	80022d4 <__aeabi_dmul>
 8015ffe:	2200      	movs	r2, #0
 8016000:	4b62      	ldr	r3, [pc, #392]	; (801618c <__ieee754_pow+0x754>)
 8016002:	0004      	movs	r4, r0
 8016004:	000d      	movs	r5, r1
 8016006:	f7eb fa0b 	bl	8001420 <__aeabi_dadd>
 801600a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801600c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801600e:	f7eb fa07 	bl	8001420 <__aeabi_dadd>
 8016012:	2000      	movs	r0, #0
 8016014:	000f      	movs	r7, r1
 8016016:	0006      	movs	r6, r0
 8016018:	0002      	movs	r2, r0
 801601a:	000b      	movs	r3, r1
 801601c:	9800      	ldr	r0, [sp, #0]
 801601e:	9901      	ldr	r1, [sp, #4]
 8016020:	f7ec f958 	bl	80022d4 <__aeabi_dmul>
 8016024:	2200      	movs	r2, #0
 8016026:	9000      	str	r0, [sp, #0]
 8016028:	9101      	str	r1, [sp, #4]
 801602a:	4b58      	ldr	r3, [pc, #352]	; (801618c <__ieee754_pow+0x754>)
 801602c:	0030      	movs	r0, r6
 801602e:	0039      	movs	r1, r7
 8016030:	f7ec fc12 	bl	8002858 <__aeabi_dsub>
 8016034:	0022      	movs	r2, r4
 8016036:	002b      	movs	r3, r5
 8016038:	f7ec fc0e 	bl	8002858 <__aeabi_dsub>
 801603c:	0002      	movs	r2, r0
 801603e:	000b      	movs	r3, r1
 8016040:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016042:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016044:	f7ec fc08 	bl	8002858 <__aeabi_dsub>
 8016048:	9a08      	ldr	r2, [sp, #32]
 801604a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801604c:	f7ec f942 	bl	80022d4 <__aeabi_dmul>
 8016050:	0032      	movs	r2, r6
 8016052:	0004      	movs	r4, r0
 8016054:	000d      	movs	r5, r1
 8016056:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801605a:	003b      	movs	r3, r7
 801605c:	f7ec f93a 	bl	80022d4 <__aeabi_dmul>
 8016060:	0002      	movs	r2, r0
 8016062:	000b      	movs	r3, r1
 8016064:	0020      	movs	r0, r4
 8016066:	0029      	movs	r1, r5
 8016068:	f7eb f9da 	bl	8001420 <__aeabi_dadd>
 801606c:	0004      	movs	r4, r0
 801606e:	000d      	movs	r5, r1
 8016070:	0002      	movs	r2, r0
 8016072:	000b      	movs	r3, r1
 8016074:	9800      	ldr	r0, [sp, #0]
 8016076:	9901      	ldr	r1, [sp, #4]
 8016078:	f7eb f9d2 	bl	8001420 <__aeabi_dadd>
 801607c:	22e0      	movs	r2, #224	; 0xe0
 801607e:	2000      	movs	r0, #0
 8016080:	4b43      	ldr	r3, [pc, #268]	; (8016190 <__ieee754_pow+0x758>)
 8016082:	0612      	lsls	r2, r2, #24
 8016084:	0006      	movs	r6, r0
 8016086:	000f      	movs	r7, r1
 8016088:	f7ec f924 	bl	80022d4 <__aeabi_dmul>
 801608c:	9008      	str	r0, [sp, #32]
 801608e:	9109      	str	r1, [sp, #36]	; 0x24
 8016090:	9a00      	ldr	r2, [sp, #0]
 8016092:	9b01      	ldr	r3, [sp, #4]
 8016094:	0030      	movs	r0, r6
 8016096:	0039      	movs	r1, r7
 8016098:	f7ec fbde 	bl	8002858 <__aeabi_dsub>
 801609c:	0002      	movs	r2, r0
 801609e:	000b      	movs	r3, r1
 80160a0:	0020      	movs	r0, r4
 80160a2:	0029      	movs	r1, r5
 80160a4:	f7ec fbd8 	bl	8002858 <__aeabi_dsub>
 80160a8:	4a3a      	ldr	r2, [pc, #232]	; (8016194 <__ieee754_pow+0x75c>)
 80160aa:	4b39      	ldr	r3, [pc, #228]	; (8016190 <__ieee754_pow+0x758>)
 80160ac:	f7ec f912 	bl	80022d4 <__aeabi_dmul>
 80160b0:	4a39      	ldr	r2, [pc, #228]	; (8016198 <__ieee754_pow+0x760>)
 80160b2:	0004      	movs	r4, r0
 80160b4:	000d      	movs	r5, r1
 80160b6:	0030      	movs	r0, r6
 80160b8:	0039      	movs	r1, r7
 80160ba:	4b38      	ldr	r3, [pc, #224]	; (801619c <__ieee754_pow+0x764>)
 80160bc:	f7ec f90a 	bl	80022d4 <__aeabi_dmul>
 80160c0:	0002      	movs	r2, r0
 80160c2:	000b      	movs	r3, r1
 80160c4:	0020      	movs	r0, r4
 80160c6:	0029      	movs	r1, r5
 80160c8:	f7eb f9aa 	bl	8001420 <__aeabi_dadd>
 80160cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160ce:	4b34      	ldr	r3, [pc, #208]	; (80161a0 <__ieee754_pow+0x768>)
 80160d0:	189b      	adds	r3, r3, r2
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	f7eb f9a3 	bl	8001420 <__aeabi_dadd>
 80160da:	9000      	str	r0, [sp, #0]
 80160dc:	9101      	str	r1, [sp, #4]
 80160de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80160e0:	f7ec ff90 	bl	8003004 <__aeabi_i2d>
 80160e4:	0004      	movs	r4, r0
 80160e6:	000d      	movs	r5, r1
 80160e8:	9808      	ldr	r0, [sp, #32]
 80160ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160ee:	4b2d      	ldr	r3, [pc, #180]	; (80161a4 <__ieee754_pow+0x76c>)
 80160f0:	189b      	adds	r3, r3, r2
 80160f2:	681e      	ldr	r6, [r3, #0]
 80160f4:	685f      	ldr	r7, [r3, #4]
 80160f6:	9a00      	ldr	r2, [sp, #0]
 80160f8:	9b01      	ldr	r3, [sp, #4]
 80160fa:	f7eb f991 	bl	8001420 <__aeabi_dadd>
 80160fe:	0032      	movs	r2, r6
 8016100:	003b      	movs	r3, r7
 8016102:	f7eb f98d 	bl	8001420 <__aeabi_dadd>
 8016106:	0022      	movs	r2, r4
 8016108:	002b      	movs	r3, r5
 801610a:	f7eb f989 	bl	8001420 <__aeabi_dadd>
 801610e:	2000      	movs	r0, #0
 8016110:	0022      	movs	r2, r4
 8016112:	002b      	movs	r3, r5
 8016114:	9004      	str	r0, [sp, #16]
 8016116:	9105      	str	r1, [sp, #20]
 8016118:	f7ec fb9e 	bl	8002858 <__aeabi_dsub>
 801611c:	0032      	movs	r2, r6
 801611e:	003b      	movs	r3, r7
 8016120:	f7ec fb9a 	bl	8002858 <__aeabi_dsub>
 8016124:	9a08      	ldr	r2, [sp, #32]
 8016126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016128:	f7ec fb96 	bl	8002858 <__aeabi_dsub>
 801612c:	0002      	movs	r2, r0
 801612e:	000b      	movs	r3, r1
 8016130:	9800      	ldr	r0, [sp, #0]
 8016132:	9901      	ldr	r1, [sp, #4]
 8016134:	e618      	b.n	8015d68 <__ieee754_pow+0x330>
 8016136:	2300      	movs	r3, #0
 8016138:	4c03      	ldr	r4, [pc, #12]	; (8016148 <__ieee754_pow+0x710>)
 801613a:	e621      	b.n	8015d80 <__ieee754_pow+0x348>
 801613c:	7ff00000 	.word	0x7ff00000
 8016140:	43400000 	.word	0x43400000
 8016144:	fffffc01 	.word	0xfffffc01
 8016148:	3ff00000 	.word	0x3ff00000
 801614c:	0003988e 	.word	0x0003988e
 8016150:	000bb679 	.word	0x000bb679
 8016154:	fff00000 	.word	0xfff00000
 8016158:	080184d0 	.word	0x080184d0
 801615c:	4a454eef 	.word	0x4a454eef
 8016160:	3fca7e28 	.word	0x3fca7e28
 8016164:	93c9db65 	.word	0x93c9db65
 8016168:	3fcd864a 	.word	0x3fcd864a
 801616c:	a91d4101 	.word	0xa91d4101
 8016170:	3fd17460 	.word	0x3fd17460
 8016174:	518f264d 	.word	0x518f264d
 8016178:	3fd55555 	.word	0x3fd55555
 801617c:	db6fabff 	.word	0xdb6fabff
 8016180:	3fdb6db6 	.word	0x3fdb6db6
 8016184:	33333303 	.word	0x33333303
 8016188:	3fe33333 	.word	0x3fe33333
 801618c:	40080000 	.word	0x40080000
 8016190:	3feec709 	.word	0x3feec709
 8016194:	dc3a03fd 	.word	0xdc3a03fd
 8016198:	145b01f5 	.word	0x145b01f5
 801619c:	be3e2fe0 	.word	0xbe3e2fe0
 80161a0:	080184f0 	.word	0x080184f0
 80161a4:	080184e0 	.word	0x080184e0
 80161a8:	4a90      	ldr	r2, [pc, #576]	; (80163ec <__ieee754_pow+0x9b4>)
 80161aa:	4b91      	ldr	r3, [pc, #580]	; (80163f0 <__ieee754_pow+0x9b8>)
 80161ac:	0030      	movs	r0, r6
 80161ae:	0039      	movs	r1, r7
 80161b0:	f7eb f936 	bl	8001420 <__aeabi_dadd>
 80161b4:	9a04      	ldr	r2, [sp, #16]
 80161b6:	9b05      	ldr	r3, [sp, #20]
 80161b8:	9002      	str	r0, [sp, #8]
 80161ba:	9103      	str	r1, [sp, #12]
 80161bc:	0028      	movs	r0, r5
 80161be:	0021      	movs	r1, r4
 80161c0:	f7ec fb4a 	bl	8002858 <__aeabi_dsub>
 80161c4:	0002      	movs	r2, r0
 80161c6:	000b      	movs	r3, r1
 80161c8:	9802      	ldr	r0, [sp, #8]
 80161ca:	9903      	ldr	r1, [sp, #12]
 80161cc:	f7ea f958 	bl	8000480 <__aeabi_dcmpgt>
 80161d0:	2800      	cmp	r0, #0
 80161d2:	d000      	beq.n	80161d6 <__ieee754_pow+0x79e>
 80161d4:	e611      	b.n	8015dfa <__ieee754_pow+0x3c2>
 80161d6:	2100      	movs	r1, #0
 80161d8:	4a86      	ldr	r2, [pc, #536]	; (80163f4 <__ieee754_pow+0x9bc>)
 80161da:	0063      	lsls	r3, r4, #1
 80161dc:	085b      	lsrs	r3, r3, #1
 80161de:	9102      	str	r1, [sp, #8]
 80161e0:	4293      	cmp	r3, r2
 80161e2:	dd25      	ble.n	8016230 <__ieee754_pow+0x7f8>
 80161e4:	4a84      	ldr	r2, [pc, #528]	; (80163f8 <__ieee754_pow+0x9c0>)
 80161e6:	151b      	asrs	r3, r3, #20
 80161e8:	189b      	adds	r3, r3, r2
 80161ea:	2280      	movs	r2, #128	; 0x80
 80161ec:	0352      	lsls	r2, r2, #13
 80161ee:	0011      	movs	r1, r2
 80161f0:	4119      	asrs	r1, r3
 80161f2:	190b      	adds	r3, r1, r4
 80161f4:	005c      	lsls	r4, r3, #1
 80161f6:	4981      	ldr	r1, [pc, #516]	; (80163fc <__ieee754_pow+0x9c4>)
 80161f8:	4d81      	ldr	r5, [pc, #516]	; (8016400 <__ieee754_pow+0x9c8>)
 80161fa:	0d64      	lsrs	r4, r4, #21
 80161fc:	1864      	adds	r4, r4, r1
 80161fe:	4125      	asrs	r5, r4
 8016200:	401d      	ands	r5, r3
 8016202:	031b      	lsls	r3, r3, #12
 8016204:	0b1b      	lsrs	r3, r3, #12
 8016206:	4313      	orrs	r3, r2
 8016208:	2214      	movs	r2, #20
 801620a:	1b12      	subs	r2, r2, r4
 801620c:	4113      	asrs	r3, r2
 801620e:	9302      	str	r3, [sp, #8]
 8016210:	9b08      	ldr	r3, [sp, #32]
 8016212:	2000      	movs	r0, #0
 8016214:	0029      	movs	r1, r5
 8016216:	2b00      	cmp	r3, #0
 8016218:	da02      	bge.n	8016220 <__ieee754_pow+0x7e8>
 801621a:	9b02      	ldr	r3, [sp, #8]
 801621c:	425b      	negs	r3, r3
 801621e:	9302      	str	r3, [sp, #8]
 8016220:	0002      	movs	r2, r0
 8016222:	000b      	movs	r3, r1
 8016224:	9804      	ldr	r0, [sp, #16]
 8016226:	9905      	ldr	r1, [sp, #20]
 8016228:	f7ec fb16 	bl	8002858 <__aeabi_dsub>
 801622c:	9006      	str	r0, [sp, #24]
 801622e:	9107      	str	r1, [sp, #28]
 8016230:	9806      	ldr	r0, [sp, #24]
 8016232:	9907      	ldr	r1, [sp, #28]
 8016234:	0032      	movs	r2, r6
 8016236:	003b      	movs	r3, r7
 8016238:	f7eb f8f2 	bl	8001420 <__aeabi_dadd>
 801623c:	2000      	movs	r0, #0
 801623e:	2200      	movs	r2, #0
 8016240:	4b70      	ldr	r3, [pc, #448]	; (8016404 <__ieee754_pow+0x9cc>)
 8016242:	9004      	str	r0, [sp, #16]
 8016244:	9105      	str	r1, [sp, #20]
 8016246:	f7ec f845 	bl	80022d4 <__aeabi_dmul>
 801624a:	9a06      	ldr	r2, [sp, #24]
 801624c:	9b07      	ldr	r3, [sp, #28]
 801624e:	9008      	str	r0, [sp, #32]
 8016250:	9109      	str	r1, [sp, #36]	; 0x24
 8016252:	9804      	ldr	r0, [sp, #16]
 8016254:	9905      	ldr	r1, [sp, #20]
 8016256:	f7ec faff 	bl	8002858 <__aeabi_dsub>
 801625a:	0002      	movs	r2, r0
 801625c:	000b      	movs	r3, r1
 801625e:	0030      	movs	r0, r6
 8016260:	0039      	movs	r1, r7
 8016262:	f7ec faf9 	bl	8002858 <__aeabi_dsub>
 8016266:	4a68      	ldr	r2, [pc, #416]	; (8016408 <__ieee754_pow+0x9d0>)
 8016268:	4b68      	ldr	r3, [pc, #416]	; (801640c <__ieee754_pow+0x9d4>)
 801626a:	f7ec f833 	bl	80022d4 <__aeabi_dmul>
 801626e:	4a68      	ldr	r2, [pc, #416]	; (8016410 <__ieee754_pow+0x9d8>)
 8016270:	0004      	movs	r4, r0
 8016272:	000d      	movs	r5, r1
 8016274:	9804      	ldr	r0, [sp, #16]
 8016276:	9905      	ldr	r1, [sp, #20]
 8016278:	4b66      	ldr	r3, [pc, #408]	; (8016414 <__ieee754_pow+0x9dc>)
 801627a:	f7ec f82b 	bl	80022d4 <__aeabi_dmul>
 801627e:	0002      	movs	r2, r0
 8016280:	000b      	movs	r3, r1
 8016282:	0020      	movs	r0, r4
 8016284:	0029      	movs	r1, r5
 8016286:	f7eb f8cb 	bl	8001420 <__aeabi_dadd>
 801628a:	0004      	movs	r4, r0
 801628c:	000d      	movs	r5, r1
 801628e:	0002      	movs	r2, r0
 8016290:	000b      	movs	r3, r1
 8016292:	9808      	ldr	r0, [sp, #32]
 8016294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016296:	f7eb f8c3 	bl	8001420 <__aeabi_dadd>
 801629a:	9a08      	ldr	r2, [sp, #32]
 801629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801629e:	0006      	movs	r6, r0
 80162a0:	000f      	movs	r7, r1
 80162a2:	f7ec fad9 	bl	8002858 <__aeabi_dsub>
 80162a6:	0002      	movs	r2, r0
 80162a8:	000b      	movs	r3, r1
 80162aa:	0020      	movs	r0, r4
 80162ac:	0029      	movs	r1, r5
 80162ae:	f7ec fad3 	bl	8002858 <__aeabi_dsub>
 80162b2:	0032      	movs	r2, r6
 80162b4:	9004      	str	r0, [sp, #16]
 80162b6:	9105      	str	r1, [sp, #20]
 80162b8:	003b      	movs	r3, r7
 80162ba:	0030      	movs	r0, r6
 80162bc:	0039      	movs	r1, r7
 80162be:	f7ec f809 	bl	80022d4 <__aeabi_dmul>
 80162c2:	0004      	movs	r4, r0
 80162c4:	000d      	movs	r5, r1
 80162c6:	4a54      	ldr	r2, [pc, #336]	; (8016418 <__ieee754_pow+0x9e0>)
 80162c8:	4b54      	ldr	r3, [pc, #336]	; (801641c <__ieee754_pow+0x9e4>)
 80162ca:	f7ec f803 	bl	80022d4 <__aeabi_dmul>
 80162ce:	4a54      	ldr	r2, [pc, #336]	; (8016420 <__ieee754_pow+0x9e8>)
 80162d0:	4b54      	ldr	r3, [pc, #336]	; (8016424 <__ieee754_pow+0x9ec>)
 80162d2:	f7ec fac1 	bl	8002858 <__aeabi_dsub>
 80162d6:	0022      	movs	r2, r4
 80162d8:	002b      	movs	r3, r5
 80162da:	f7eb fffb 	bl	80022d4 <__aeabi_dmul>
 80162de:	4a52      	ldr	r2, [pc, #328]	; (8016428 <__ieee754_pow+0x9f0>)
 80162e0:	4b52      	ldr	r3, [pc, #328]	; (801642c <__ieee754_pow+0x9f4>)
 80162e2:	f7eb f89d 	bl	8001420 <__aeabi_dadd>
 80162e6:	0022      	movs	r2, r4
 80162e8:	002b      	movs	r3, r5
 80162ea:	f7eb fff3 	bl	80022d4 <__aeabi_dmul>
 80162ee:	4a50      	ldr	r2, [pc, #320]	; (8016430 <__ieee754_pow+0x9f8>)
 80162f0:	4b50      	ldr	r3, [pc, #320]	; (8016434 <__ieee754_pow+0x9fc>)
 80162f2:	f7ec fab1 	bl	8002858 <__aeabi_dsub>
 80162f6:	0022      	movs	r2, r4
 80162f8:	002b      	movs	r3, r5
 80162fa:	f7eb ffeb 	bl	80022d4 <__aeabi_dmul>
 80162fe:	4a4e      	ldr	r2, [pc, #312]	; (8016438 <__ieee754_pow+0xa00>)
 8016300:	4b4e      	ldr	r3, [pc, #312]	; (801643c <__ieee754_pow+0xa04>)
 8016302:	f7eb f88d 	bl	8001420 <__aeabi_dadd>
 8016306:	0022      	movs	r2, r4
 8016308:	002b      	movs	r3, r5
 801630a:	f7eb ffe3 	bl	80022d4 <__aeabi_dmul>
 801630e:	0002      	movs	r2, r0
 8016310:	000b      	movs	r3, r1
 8016312:	0030      	movs	r0, r6
 8016314:	0039      	movs	r1, r7
 8016316:	f7ec fa9f 	bl	8002858 <__aeabi_dsub>
 801631a:	0004      	movs	r4, r0
 801631c:	000d      	movs	r5, r1
 801631e:	0002      	movs	r2, r0
 8016320:	000b      	movs	r3, r1
 8016322:	0030      	movs	r0, r6
 8016324:	0039      	movs	r1, r7
 8016326:	f7eb ffd5 	bl	80022d4 <__aeabi_dmul>
 801632a:	2380      	movs	r3, #128	; 0x80
 801632c:	9006      	str	r0, [sp, #24]
 801632e:	9107      	str	r1, [sp, #28]
 8016330:	2200      	movs	r2, #0
 8016332:	0020      	movs	r0, r4
 8016334:	0029      	movs	r1, r5
 8016336:	05db      	lsls	r3, r3, #23
 8016338:	f7ec fa8e 	bl	8002858 <__aeabi_dsub>
 801633c:	0002      	movs	r2, r0
 801633e:	000b      	movs	r3, r1
 8016340:	9806      	ldr	r0, [sp, #24]
 8016342:	9907      	ldr	r1, [sp, #28]
 8016344:	f7eb fbcc 	bl	8001ae0 <__aeabi_ddiv>
 8016348:	9a04      	ldr	r2, [sp, #16]
 801634a:	9b05      	ldr	r3, [sp, #20]
 801634c:	0004      	movs	r4, r0
 801634e:	000d      	movs	r5, r1
 8016350:	0030      	movs	r0, r6
 8016352:	0039      	movs	r1, r7
 8016354:	f7eb ffbe 	bl	80022d4 <__aeabi_dmul>
 8016358:	9a04      	ldr	r2, [sp, #16]
 801635a:	9b05      	ldr	r3, [sp, #20]
 801635c:	f7eb f860 	bl	8001420 <__aeabi_dadd>
 8016360:	0002      	movs	r2, r0
 8016362:	000b      	movs	r3, r1
 8016364:	0020      	movs	r0, r4
 8016366:	0029      	movs	r1, r5
 8016368:	f7ec fa76 	bl	8002858 <__aeabi_dsub>
 801636c:	0032      	movs	r2, r6
 801636e:	003b      	movs	r3, r7
 8016370:	f7ec fa72 	bl	8002858 <__aeabi_dsub>
 8016374:	0002      	movs	r2, r0
 8016376:	000b      	movs	r3, r1
 8016378:	2000      	movs	r0, #0
 801637a:	4931      	ldr	r1, [pc, #196]	; (8016440 <__ieee754_pow+0xa08>)
 801637c:	f7ec fa6c 	bl	8002858 <__aeabi_dsub>
 8016380:	9b02      	ldr	r3, [sp, #8]
 8016382:	051b      	lsls	r3, r3, #20
 8016384:	185b      	adds	r3, r3, r1
 8016386:	151a      	asrs	r2, r3, #20
 8016388:	2a00      	cmp	r2, #0
 801638a:	dc25      	bgt.n	80163d8 <__ieee754_pow+0x9a0>
 801638c:	9a02      	ldr	r2, [sp, #8]
 801638e:	f000 f861 	bl	8016454 <scalbn>
 8016392:	9a00      	ldr	r2, [sp, #0]
 8016394:	9b01      	ldr	r3, [sp, #4]
 8016396:	f7ff fc33 	bl	8015c00 <__ieee754_pow+0x1c8>
 801639a:	4a2a      	ldr	r2, [pc, #168]	; (8016444 <__ieee754_pow+0xa0c>)
 801639c:	004b      	lsls	r3, r1, #1
 801639e:	085b      	lsrs	r3, r3, #1
 80163a0:	4293      	cmp	r3, r2
 80163a2:	dc00      	bgt.n	80163a6 <__ieee754_pow+0x96e>
 80163a4:	e717      	b.n	80161d6 <__ieee754_pow+0x79e>
 80163a6:	4b28      	ldr	r3, [pc, #160]	; (8016448 <__ieee754_pow+0xa10>)
 80163a8:	18cb      	adds	r3, r1, r3
 80163aa:	4303      	orrs	r3, r0
 80163ac:	d008      	beq.n	80163c0 <__ieee754_pow+0x988>
 80163ae:	9800      	ldr	r0, [sp, #0]
 80163b0:	9901      	ldr	r1, [sp, #4]
 80163b2:	2300      	movs	r3, #0
 80163b4:	2200      	movs	r2, #0
 80163b6:	f7ea f84f 	bl	8000458 <__aeabi_dcmplt>
 80163ba:	1e43      	subs	r3, r0, #1
 80163bc:	4198      	sbcs	r0, r3
 80163be:	e462      	b.n	8015c86 <__ieee754_pow+0x24e>
 80163c0:	9a04      	ldr	r2, [sp, #16]
 80163c2:	9b05      	ldr	r3, [sp, #20]
 80163c4:	f7ec fa48 	bl	8002858 <__aeabi_dsub>
 80163c8:	0032      	movs	r2, r6
 80163ca:	003b      	movs	r3, r7
 80163cc:	f7ea f862 	bl	8000494 <__aeabi_dcmpge>
 80163d0:	2800      	cmp	r0, #0
 80163d2:	d100      	bne.n	80163d6 <__ieee754_pow+0x99e>
 80163d4:	e6ff      	b.n	80161d6 <__ieee754_pow+0x79e>
 80163d6:	e7ea      	b.n	80163ae <__ieee754_pow+0x976>
 80163d8:	0019      	movs	r1, r3
 80163da:	e7da      	b.n	8016392 <__ieee754_pow+0x95a>
 80163dc:	2300      	movs	r3, #0
 80163de:	4c18      	ldr	r4, [pc, #96]	; (8016440 <__ieee754_pow+0xa08>)
 80163e0:	f7ff fbf1 	bl	8015bc6 <__ieee754_pow+0x18e>
 80163e4:	2300      	movs	r3, #0
 80163e6:	2400      	movs	r4, #0
 80163e8:	f7ff fbed 	bl	8015bc6 <__ieee754_pow+0x18e>
 80163ec:	652b82fe 	.word	0x652b82fe
 80163f0:	3c971547 	.word	0x3c971547
 80163f4:	3fe00000 	.word	0x3fe00000
 80163f8:	fffffc02 	.word	0xfffffc02
 80163fc:	fffffc01 	.word	0xfffffc01
 8016400:	fff00000 	.word	0xfff00000
 8016404:	3fe62e43 	.word	0x3fe62e43
 8016408:	fefa39ef 	.word	0xfefa39ef
 801640c:	3fe62e42 	.word	0x3fe62e42
 8016410:	0ca86c39 	.word	0x0ca86c39
 8016414:	be205c61 	.word	0xbe205c61
 8016418:	72bea4d0 	.word	0x72bea4d0
 801641c:	3e663769 	.word	0x3e663769
 8016420:	c5d26bf1 	.word	0xc5d26bf1
 8016424:	3ebbbd41 	.word	0x3ebbbd41
 8016428:	af25de2c 	.word	0xaf25de2c
 801642c:	3f11566a 	.word	0x3f11566a
 8016430:	16bebd93 	.word	0x16bebd93
 8016434:	3f66c16c 	.word	0x3f66c16c
 8016438:	5555553e 	.word	0x5555553e
 801643c:	3fc55555 	.word	0x3fc55555
 8016440:	3ff00000 	.word	0x3ff00000
 8016444:	4090cbff 	.word	0x4090cbff
 8016448:	3f6f3400 	.word	0x3f6f3400

0801644c <fabs>:
 801644c:	0049      	lsls	r1, r1, #1
 801644e:	084b      	lsrs	r3, r1, #1
 8016450:	0019      	movs	r1, r3
 8016452:	4770      	bx	lr

08016454 <scalbn>:
 8016454:	b570      	push	{r4, r5, r6, lr}
 8016456:	0014      	movs	r4, r2
 8016458:	004a      	lsls	r2, r1, #1
 801645a:	000b      	movs	r3, r1
 801645c:	0d52      	lsrs	r2, r2, #21
 801645e:	d10f      	bne.n	8016480 <scalbn+0x2c>
 8016460:	004b      	lsls	r3, r1, #1
 8016462:	085b      	lsrs	r3, r3, #1
 8016464:	4303      	orrs	r3, r0
 8016466:	d011      	beq.n	801648c <scalbn+0x38>
 8016468:	4b22      	ldr	r3, [pc, #136]	; (80164f4 <scalbn+0xa0>)
 801646a:	2200      	movs	r2, #0
 801646c:	f7eb ff32 	bl	80022d4 <__aeabi_dmul>
 8016470:	4b21      	ldr	r3, [pc, #132]	; (80164f8 <scalbn+0xa4>)
 8016472:	429c      	cmp	r4, r3
 8016474:	da0b      	bge.n	801648e <scalbn+0x3a>
 8016476:	4a21      	ldr	r2, [pc, #132]	; (80164fc <scalbn+0xa8>)
 8016478:	4b21      	ldr	r3, [pc, #132]	; (8016500 <scalbn+0xac>)
 801647a:	f7eb ff2b 	bl	80022d4 <__aeabi_dmul>
 801647e:	e005      	b.n	801648c <scalbn+0x38>
 8016480:	4d20      	ldr	r5, [pc, #128]	; (8016504 <scalbn+0xb0>)
 8016482:	42aa      	cmp	r2, r5
 8016484:	d107      	bne.n	8016496 <scalbn+0x42>
 8016486:	0002      	movs	r2, r0
 8016488:	f7ea ffca 	bl	8001420 <__aeabi_dadd>
 801648c:	bd70      	pop	{r4, r5, r6, pc}
 801648e:	000b      	movs	r3, r1
 8016490:	004a      	lsls	r2, r1, #1
 8016492:	0d52      	lsrs	r2, r2, #21
 8016494:	3a36      	subs	r2, #54	; 0x36
 8016496:	4d1c      	ldr	r5, [pc, #112]	; (8016508 <scalbn+0xb4>)
 8016498:	42ac      	cmp	r4, r5
 801649a:	dd0a      	ble.n	80164b2 <scalbn+0x5e>
 801649c:	4c1b      	ldr	r4, [pc, #108]	; (801650c <scalbn+0xb8>)
 801649e:	4d1c      	ldr	r5, [pc, #112]	; (8016510 <scalbn+0xbc>)
 80164a0:	2900      	cmp	r1, #0
 80164a2:	da01      	bge.n	80164a8 <scalbn+0x54>
 80164a4:	4c19      	ldr	r4, [pc, #100]	; (801650c <scalbn+0xb8>)
 80164a6:	4d1b      	ldr	r5, [pc, #108]	; (8016514 <scalbn+0xc0>)
 80164a8:	4a18      	ldr	r2, [pc, #96]	; (801650c <scalbn+0xb8>)
 80164aa:	4b19      	ldr	r3, [pc, #100]	; (8016510 <scalbn+0xbc>)
 80164ac:	0020      	movs	r0, r4
 80164ae:	0029      	movs	r1, r5
 80164b0:	e7e3      	b.n	801647a <scalbn+0x26>
 80164b2:	18a2      	adds	r2, r4, r2
 80164b4:	4c18      	ldr	r4, [pc, #96]	; (8016518 <scalbn+0xc4>)
 80164b6:	42a2      	cmp	r2, r4
 80164b8:	dcf0      	bgt.n	801649c <scalbn+0x48>
 80164ba:	2a00      	cmp	r2, #0
 80164bc:	dd05      	ble.n	80164ca <scalbn+0x76>
 80164be:	4c17      	ldr	r4, [pc, #92]	; (801651c <scalbn+0xc8>)
 80164c0:	0512      	lsls	r2, r2, #20
 80164c2:	4023      	ands	r3, r4
 80164c4:	4313      	orrs	r3, r2
 80164c6:	0019      	movs	r1, r3
 80164c8:	e7e0      	b.n	801648c <scalbn+0x38>
 80164ca:	0014      	movs	r4, r2
 80164cc:	3435      	adds	r4, #53	; 0x35
 80164ce:	da08      	bge.n	80164e2 <scalbn+0x8e>
 80164d0:	4c0a      	ldr	r4, [pc, #40]	; (80164fc <scalbn+0xa8>)
 80164d2:	4d0b      	ldr	r5, [pc, #44]	; (8016500 <scalbn+0xac>)
 80164d4:	2900      	cmp	r1, #0
 80164d6:	da01      	bge.n	80164dc <scalbn+0x88>
 80164d8:	4c08      	ldr	r4, [pc, #32]	; (80164fc <scalbn+0xa8>)
 80164da:	4d11      	ldr	r5, [pc, #68]	; (8016520 <scalbn+0xcc>)
 80164dc:	4a07      	ldr	r2, [pc, #28]	; (80164fc <scalbn+0xa8>)
 80164de:	4b08      	ldr	r3, [pc, #32]	; (8016500 <scalbn+0xac>)
 80164e0:	e7e4      	b.n	80164ac <scalbn+0x58>
 80164e2:	4c0e      	ldr	r4, [pc, #56]	; (801651c <scalbn+0xc8>)
 80164e4:	3236      	adds	r2, #54	; 0x36
 80164e6:	4023      	ands	r3, r4
 80164e8:	0512      	lsls	r2, r2, #20
 80164ea:	431a      	orrs	r2, r3
 80164ec:	0011      	movs	r1, r2
 80164ee:	4b0d      	ldr	r3, [pc, #52]	; (8016524 <scalbn+0xd0>)
 80164f0:	2200      	movs	r2, #0
 80164f2:	e7c2      	b.n	801647a <scalbn+0x26>
 80164f4:	43500000 	.word	0x43500000
 80164f8:	ffff3cb0 	.word	0xffff3cb0
 80164fc:	c2f8f359 	.word	0xc2f8f359
 8016500:	01a56e1f 	.word	0x01a56e1f
 8016504:	000007ff 	.word	0x000007ff
 8016508:	0000c350 	.word	0x0000c350
 801650c:	8800759c 	.word	0x8800759c
 8016510:	7e37e43c 	.word	0x7e37e43c
 8016514:	fe37e43c 	.word	0xfe37e43c
 8016518:	000007fe 	.word	0x000007fe
 801651c:	800fffff 	.word	0x800fffff
 8016520:	81a56e1f 	.word	0x81a56e1f
 8016524:	3c900000 	.word	0x3c900000

08016528 <with_errno>:
 8016528:	b570      	push	{r4, r5, r6, lr}
 801652a:	000d      	movs	r5, r1
 801652c:	0016      	movs	r6, r2
 801652e:	0004      	movs	r4, r0
 8016530:	f7fc fd18 	bl	8012f64 <__errno>
 8016534:	0029      	movs	r1, r5
 8016536:	6006      	str	r6, [r0, #0]
 8016538:	0020      	movs	r0, r4
 801653a:	bd70      	pop	{r4, r5, r6, pc}

0801653c <xflow>:
 801653c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801653e:	0015      	movs	r5, r2
 8016540:	001c      	movs	r4, r3
 8016542:	2800      	cmp	r0, #0
 8016544:	d010      	beq.n	8016568 <xflow+0x2c>
 8016546:	2380      	movs	r3, #128	; 0x80
 8016548:	0010      	movs	r0, r2
 801654a:	061b      	lsls	r3, r3, #24
 801654c:	18e1      	adds	r1, r4, r3
 801654e:	9000      	str	r0, [sp, #0]
 8016550:	9101      	str	r1, [sp, #4]
 8016552:	9a00      	ldr	r2, [sp, #0]
 8016554:	9b01      	ldr	r3, [sp, #4]
 8016556:	0028      	movs	r0, r5
 8016558:	0021      	movs	r1, r4
 801655a:	f7eb febb 	bl	80022d4 <__aeabi_dmul>
 801655e:	2222      	movs	r2, #34	; 0x22
 8016560:	f7ff ffe2 	bl	8016528 <with_errno>
 8016564:	b003      	add	sp, #12
 8016566:	bd30      	pop	{r4, r5, pc}
 8016568:	0010      	movs	r0, r2
 801656a:	0019      	movs	r1, r3
 801656c:	e7ef      	b.n	801654e <xflow+0x12>

0801656e <__math_uflow>:
 801656e:	2380      	movs	r3, #128	; 0x80
 8016570:	b510      	push	{r4, lr}
 8016572:	2200      	movs	r2, #0
 8016574:	055b      	lsls	r3, r3, #21
 8016576:	f7ff ffe1 	bl	801653c <xflow>
 801657a:	bd10      	pop	{r4, pc}

0801657c <__math_oflow>:
 801657c:	23e0      	movs	r3, #224	; 0xe0
 801657e:	b510      	push	{r4, lr}
 8016580:	2200      	movs	r2, #0
 8016582:	05db      	lsls	r3, r3, #23
 8016584:	f7ff ffda 	bl	801653c <xflow>
 8016588:	bd10      	pop	{r4, pc}
	...

0801658c <__ieee754_sqrt>:
 801658c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801658e:	000a      	movs	r2, r1
 8016590:	000c      	movs	r4, r1
 8016592:	496f      	ldr	r1, [pc, #444]	; (8016750 <__ieee754_sqrt+0x1c4>)
 8016594:	0005      	movs	r5, r0
 8016596:	0003      	movs	r3, r0
 8016598:	0008      	movs	r0, r1
 801659a:	b087      	sub	sp, #28
 801659c:	4020      	ands	r0, r4
 801659e:	4288      	cmp	r0, r1
 80165a0:	d111      	bne.n	80165c6 <__ieee754_sqrt+0x3a>
 80165a2:	002a      	movs	r2, r5
 80165a4:	0023      	movs	r3, r4
 80165a6:	0028      	movs	r0, r5
 80165a8:	0021      	movs	r1, r4
 80165aa:	f7eb fe93 	bl	80022d4 <__aeabi_dmul>
 80165ae:	0002      	movs	r2, r0
 80165b0:	000b      	movs	r3, r1
 80165b2:	0028      	movs	r0, r5
 80165b4:	0021      	movs	r1, r4
 80165b6:	f7ea ff33 	bl	8001420 <__aeabi_dadd>
 80165ba:	0005      	movs	r5, r0
 80165bc:	000c      	movs	r4, r1
 80165be:	0028      	movs	r0, r5
 80165c0:	0021      	movs	r1, r4
 80165c2:	b007      	add	sp, #28
 80165c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165c6:	2c00      	cmp	r4, #0
 80165c8:	dc12      	bgt.n	80165f0 <__ieee754_sqrt+0x64>
 80165ca:	0061      	lsls	r1, r4, #1
 80165cc:	0849      	lsrs	r1, r1, #1
 80165ce:	4329      	orrs	r1, r5
 80165d0:	d0f5      	beq.n	80165be <__ieee754_sqrt+0x32>
 80165d2:	2100      	movs	r1, #0
 80165d4:	428c      	cmp	r4, r1
 80165d6:	d100      	bne.n	80165da <__ieee754_sqrt+0x4e>
 80165d8:	e09f      	b.n	801671a <__ieee754_sqrt+0x18e>
 80165da:	002a      	movs	r2, r5
 80165dc:	0023      	movs	r3, r4
 80165de:	0028      	movs	r0, r5
 80165e0:	0021      	movs	r1, r4
 80165e2:	f7ec f939 	bl	8002858 <__aeabi_dsub>
 80165e6:	0002      	movs	r2, r0
 80165e8:	000b      	movs	r3, r1
 80165ea:	f7eb fa79 	bl	8001ae0 <__aeabi_ddiv>
 80165ee:	e7e4      	b.n	80165ba <__ieee754_sqrt+0x2e>
 80165f0:	1521      	asrs	r1, r4, #20
 80165f2:	d100      	bne.n	80165f6 <__ieee754_sqrt+0x6a>
 80165f4:	e091      	b.n	801671a <__ieee754_sqrt+0x18e>
 80165f6:	4857      	ldr	r0, [pc, #348]	; (8016754 <__ieee754_sqrt+0x1c8>)
 80165f8:	0312      	lsls	r2, r2, #12
 80165fa:	180c      	adds	r4, r1, r0
 80165fc:	2080      	movs	r0, #128	; 0x80
 80165fe:	0b12      	lsrs	r2, r2, #12
 8016600:	0340      	lsls	r0, r0, #13
 8016602:	4310      	orrs	r0, r2
 8016604:	07c9      	lsls	r1, r1, #31
 8016606:	d403      	bmi.n	8016610 <__ieee754_sqrt+0x84>
 8016608:	0fda      	lsrs	r2, r3, #31
 801660a:	0040      	lsls	r0, r0, #1
 801660c:	1810      	adds	r0, r2, r0
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	2500      	movs	r5, #0
 8016612:	1062      	asrs	r2, r4, #1
 8016614:	0040      	lsls	r0, r0, #1
 8016616:	2480      	movs	r4, #128	; 0x80
 8016618:	9205      	str	r2, [sp, #20]
 801661a:	0fda      	lsrs	r2, r3, #31
 801661c:	1812      	adds	r2, r2, r0
 801661e:	0029      	movs	r1, r5
 8016620:	2016      	movs	r0, #22
 8016622:	005b      	lsls	r3, r3, #1
 8016624:	03a4      	lsls	r4, r4, #14
 8016626:	190e      	adds	r6, r1, r4
 8016628:	4296      	cmp	r6, r2
 801662a:	dc02      	bgt.n	8016632 <__ieee754_sqrt+0xa6>
 801662c:	1931      	adds	r1, r6, r4
 801662e:	1b92      	subs	r2, r2, r6
 8016630:	192d      	adds	r5, r5, r4
 8016632:	0fde      	lsrs	r6, r3, #31
 8016634:	0052      	lsls	r2, r2, #1
 8016636:	3801      	subs	r0, #1
 8016638:	18b2      	adds	r2, r6, r2
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	0864      	lsrs	r4, r4, #1
 801663e:	2800      	cmp	r0, #0
 8016640:	d1f1      	bne.n	8016626 <__ieee754_sqrt+0x9a>
 8016642:	2620      	movs	r6, #32
 8016644:	2780      	movs	r7, #128	; 0x80
 8016646:	0004      	movs	r4, r0
 8016648:	9604      	str	r6, [sp, #16]
 801664a:	063f      	lsls	r7, r7, #24
 801664c:	183e      	adds	r6, r7, r0
 801664e:	46b4      	mov	ip, r6
 8016650:	428a      	cmp	r2, r1
 8016652:	dc02      	bgt.n	801665a <__ieee754_sqrt+0xce>
 8016654:	d114      	bne.n	8016680 <__ieee754_sqrt+0xf4>
 8016656:	429e      	cmp	r6, r3
 8016658:	d812      	bhi.n	8016680 <__ieee754_sqrt+0xf4>
 801665a:	4660      	mov	r0, ip
 801665c:	4666      	mov	r6, ip
 801665e:	19c0      	adds	r0, r0, r7
 8016660:	9100      	str	r1, [sp, #0]
 8016662:	2e00      	cmp	r6, #0
 8016664:	da03      	bge.n	801666e <__ieee754_sqrt+0xe2>
 8016666:	43c6      	mvns	r6, r0
 8016668:	0ff6      	lsrs	r6, r6, #31
 801666a:	198e      	adds	r6, r1, r6
 801666c:	9600      	str	r6, [sp, #0]
 801666e:	1a52      	subs	r2, r2, r1
 8016670:	4563      	cmp	r3, ip
 8016672:	4189      	sbcs	r1, r1
 8016674:	4249      	negs	r1, r1
 8016676:	1a52      	subs	r2, r2, r1
 8016678:	4661      	mov	r1, ip
 801667a:	1a5b      	subs	r3, r3, r1
 801667c:	9900      	ldr	r1, [sp, #0]
 801667e:	19e4      	adds	r4, r4, r7
 8016680:	0fde      	lsrs	r6, r3, #31
 8016682:	0052      	lsls	r2, r2, #1
 8016684:	18b2      	adds	r2, r6, r2
 8016686:	9e04      	ldr	r6, [sp, #16]
 8016688:	005b      	lsls	r3, r3, #1
 801668a:	3e01      	subs	r6, #1
 801668c:	087f      	lsrs	r7, r7, #1
 801668e:	9604      	str	r6, [sp, #16]
 8016690:	2e00      	cmp	r6, #0
 8016692:	d1db      	bne.n	801664c <__ieee754_sqrt+0xc0>
 8016694:	431a      	orrs	r2, r3
 8016696:	d01f      	beq.n	80166d8 <__ieee754_sqrt+0x14c>
 8016698:	4e2f      	ldr	r6, [pc, #188]	; (8016758 <__ieee754_sqrt+0x1cc>)
 801669a:	4f30      	ldr	r7, [pc, #192]	; (801675c <__ieee754_sqrt+0x1d0>)
 801669c:	6830      	ldr	r0, [r6, #0]
 801669e:	6871      	ldr	r1, [r6, #4]
 80166a0:	683a      	ldr	r2, [r7, #0]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	9200      	str	r2, [sp, #0]
 80166a6:	9301      	str	r3, [sp, #4]
 80166a8:	6832      	ldr	r2, [r6, #0]
 80166aa:	6873      	ldr	r3, [r6, #4]
 80166ac:	9202      	str	r2, [sp, #8]
 80166ae:	9303      	str	r3, [sp, #12]
 80166b0:	9a00      	ldr	r2, [sp, #0]
 80166b2:	9b01      	ldr	r3, [sp, #4]
 80166b4:	f7ec f8d0 	bl	8002858 <__aeabi_dsub>
 80166b8:	0002      	movs	r2, r0
 80166ba:	000b      	movs	r3, r1
 80166bc:	9802      	ldr	r0, [sp, #8]
 80166be:	9903      	ldr	r1, [sp, #12]
 80166c0:	f7e9 fed4 	bl	800046c <__aeabi_dcmple>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d007      	beq.n	80166d8 <__ieee754_sqrt+0x14c>
 80166c8:	6830      	ldr	r0, [r6, #0]
 80166ca:	6871      	ldr	r1, [r6, #4]
 80166cc:	683a      	ldr	r2, [r7, #0]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	1c67      	adds	r7, r4, #1
 80166d2:	d127      	bne.n	8016724 <__ieee754_sqrt+0x198>
 80166d4:	9c04      	ldr	r4, [sp, #16]
 80166d6:	3501      	adds	r5, #1
 80166d8:	4b21      	ldr	r3, [pc, #132]	; (8016760 <__ieee754_sqrt+0x1d4>)
 80166da:	1069      	asrs	r1, r5, #1
 80166dc:	18c9      	adds	r1, r1, r3
 80166de:	0864      	lsrs	r4, r4, #1
 80166e0:	07ed      	lsls	r5, r5, #31
 80166e2:	d502      	bpl.n	80166ea <__ieee754_sqrt+0x15e>
 80166e4:	2380      	movs	r3, #128	; 0x80
 80166e6:	061b      	lsls	r3, r3, #24
 80166e8:	431c      	orrs	r4, r3
 80166ea:	9b05      	ldr	r3, [sp, #20]
 80166ec:	0025      	movs	r5, r4
 80166ee:	0518      	lsls	r0, r3, #20
 80166f0:	1843      	adds	r3, r0, r1
 80166f2:	001c      	movs	r4, r3
 80166f4:	e763      	b.n	80165be <__ieee754_sqrt+0x32>
 80166f6:	0ada      	lsrs	r2, r3, #11
 80166f8:	3815      	subs	r0, #21
 80166fa:	055b      	lsls	r3, r3, #21
 80166fc:	2a00      	cmp	r2, #0
 80166fe:	d0fa      	beq.n	80166f6 <__ieee754_sqrt+0x16a>
 8016700:	2480      	movs	r4, #128	; 0x80
 8016702:	0364      	lsls	r4, r4, #13
 8016704:	4222      	tst	r2, r4
 8016706:	d00a      	beq.n	801671e <__ieee754_sqrt+0x192>
 8016708:	2420      	movs	r4, #32
 801670a:	001e      	movs	r6, r3
 801670c:	1a64      	subs	r4, r4, r1
 801670e:	40e6      	lsrs	r6, r4
 8016710:	1e4d      	subs	r5, r1, #1
 8016712:	408b      	lsls	r3, r1
 8016714:	4332      	orrs	r2, r6
 8016716:	1b41      	subs	r1, r0, r5
 8016718:	e76d      	b.n	80165f6 <__ieee754_sqrt+0x6a>
 801671a:	2000      	movs	r0, #0
 801671c:	e7ee      	b.n	80166fc <__ieee754_sqrt+0x170>
 801671e:	0052      	lsls	r2, r2, #1
 8016720:	3101      	adds	r1, #1
 8016722:	e7ef      	b.n	8016704 <__ieee754_sqrt+0x178>
 8016724:	f7ea fe7c 	bl	8001420 <__aeabi_dadd>
 8016728:	6877      	ldr	r7, [r6, #4]
 801672a:	6836      	ldr	r6, [r6, #0]
 801672c:	0002      	movs	r2, r0
 801672e:	000b      	movs	r3, r1
 8016730:	0030      	movs	r0, r6
 8016732:	0039      	movs	r1, r7
 8016734:	f7e9 fe90 	bl	8000458 <__aeabi_dcmplt>
 8016738:	2800      	cmp	r0, #0
 801673a:	d004      	beq.n	8016746 <__ieee754_sqrt+0x1ba>
 801673c:	3402      	adds	r4, #2
 801673e:	4263      	negs	r3, r4
 8016740:	4163      	adcs	r3, r4
 8016742:	18ed      	adds	r5, r5, r3
 8016744:	e7c8      	b.n	80166d8 <__ieee754_sqrt+0x14c>
 8016746:	2301      	movs	r3, #1
 8016748:	3401      	adds	r4, #1
 801674a:	439c      	bics	r4, r3
 801674c:	e7c4      	b.n	80166d8 <__ieee754_sqrt+0x14c>
 801674e:	46c0      	nop			; (mov r8, r8)
 8016750:	7ff00000 	.word	0x7ff00000
 8016754:	fffffc01 	.word	0xfffffc01
 8016758:	200002d0 	.word	0x200002d0
 801675c:	200002d8 	.word	0x200002d8
 8016760:	3fe00000 	.word	0x3fe00000

08016764 <_init>:
 8016764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016766:	46c0      	nop			; (mov r8, r8)
 8016768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801676a:	bc08      	pop	{r3}
 801676c:	469e      	mov	lr, r3
 801676e:	4770      	bx	lr

08016770 <_fini>:
 8016770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016772:	46c0      	nop			; (mov r8, r8)
 8016774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016776:	bc08      	pop	{r3}
 8016778:	469e      	mov	lr, r3
 801677a:	4770      	bx	lr
