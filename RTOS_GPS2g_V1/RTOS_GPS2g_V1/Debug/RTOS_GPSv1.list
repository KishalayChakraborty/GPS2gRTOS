
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012820  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001770  080128e0  080128e0  000228e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014050  08014050  00030308  2**0
                  CONTENTS
  4 .ARM          00000000  08014050  08014050  00030308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014050  08014050  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014050  08014050  00024050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014054  08014054  00024054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  08014058  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006538  20000308  08014360  00030308  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006840  08014360  00036840  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 13 .debug_info   00041262  00000000  00000000  00030373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e61  00000000  00000000  000715d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001bceb  00000000  00000000  00077436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be8  00000000  00000000  00093128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000323d  00000000  00000000  00094d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000621f  00000000  00000000  00097f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003999d  00000000  00000000  0009e16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000abf3b  00000000  00000000  000d7b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007660  00000000  00000000  00183a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0018b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000308 	.word	0x20000308
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080128c8 	.word	0x080128c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000030c 	.word	0x2000030c
 8000104:	080128c8 	.word	0x080128c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	08012998 	.word	0x08012998
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	080129d8 	.word	0x080129d8

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	08012a18 	.word	0x08012a18
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <Debug_Tx>:



static void Debug_Tx(char _out[]){

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003288:	220c      	movs	r2, #12
static void Debug_Tx(char _out[]){
 800328a:	b530      	push	{r4, r5, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800328c:	4d0b      	ldr	r5, [pc, #44]	; (80032bc <Debug_Tx+0x34>)
static void Debug_Tx(char _out[]){
 800328e:	b083      	sub	sp, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003290:	682b      	ldr	r3, [r5, #0]
static void Debug_Tx(char _out[]){
 8003292:	0004      	movs	r4, r0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003294:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003296:	f7fc ff37 	bl	8000108 <strlen>
 800329a:	0021      	movs	r1, r4
 800329c:	b282      	uxth	r2, r0
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <Debug_Tx+0x38>)
 80032a0:	0028      	movs	r0, r5
 80032a2:	f007 fea7 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <Debug_Tx+0x3c>)
 80032a8:	a901      	add	r1, sp, #4
 80032aa:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80032ac:	2202      	movs	r2, #2
 80032ae:	230a      	movs	r3, #10
 80032b0:	0028      	movs	r0, r5
 80032b2:	f007 fe9f 	bl	800aff4 <HAL_UART_Transmit>


}
 80032b6:	b003      	add	sp, #12
 80032b8:	bd30      	pop	{r4, r5, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20004bc8 	.word	0x20004bc8
 80032c0:	00001388 	.word	0x00001388
 80032c4:	00000a0d 	.word	0x00000a0d

080032c8 <StartTask02>:
{
 80032c8:	b510      	push	{r4, lr}
while(1){osDelay(1);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f008 f9b6 	bl	800b63c <osDelay>
 80032d0:	e7fb      	b.n	80032ca <StartTask02+0x2>
 80032d2:	46c0      	nop			; (mov r8, r8)

080032d4 <readAcc.isra.0>:





static float* readAcc(){
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	ACC_GYRO_data[0]=0;
 80032d6:	2300      	movs	r3, #0
static float* readAcc(){
 80032d8:	46de      	mov	lr, fp
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
 80032de:	4645      	mov	r5, r8
	ACC_GYRO_data[0]=0;
 80032e0:	4c4d      	ldr	r4, [pc, #308]	; (8003418 <readAcc.isra.0+0x144>)
static float* readAcc(){
 80032e2:	b5e0      	push	{r5, r6, r7, lr}
	ACC_GYRO_data[0]=0;
 80032e4:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 80032e6:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 80032e8:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 80032ea:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 80032ec:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 80032ee:	6163      	str	r3, [r4, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f0:	23fa      	movs	r3, #250	; 0xfa
static float* readAcc(){
 80032f2:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	469b      	mov	fp, r3
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	2306      	movs	r3, #6
 80032fc:	4e47      	ldr	r6, [pc, #284]	; (800341c <readAcc.isra.0+0x148>)
 80032fe:	ad04      	add	r5, sp, #16
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9500      	str	r5, [sp, #0]
 8003304:	223b      	movs	r2, #59	; 0x3b
 8003306:	21d0      	movs	r1, #208	; 0xd0
 8003308:	0030      	movs	r0, r6
 800330a:	3b05      	subs	r3, #5
 800330c:	f005 fec6 	bl	800909c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003310:	8828      	ldrh	r0, [r5, #0]
 8003312:	4b43      	ldr	r3, [pc, #268]	; (8003420 <readAcc.isra.0+0x14c>)
 8003314:	ba42      	rev16	r2, r0
 8003316:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003318:	886b      	ldrh	r3, [r5, #2]
 800331a:	bac0      	revsh	r0, r0
 800331c:	ba5a      	rev16	r2, r3
 800331e:	bad9      	revsh	r1, r3
 8003320:	4b40      	ldr	r3, [pc, #256]	; (8003424 <readAcc.isra.0+0x150>)
 8003322:	4689      	mov	r9, r1
 8003324:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003326:	88ab      	ldrh	r3, [r5, #4]
 8003328:	ba5a      	rev16	r2, r3
 800332a:	bad9      	revsh	r1, r3
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <readAcc.isra.0+0x154>)
 800332e:	468a      	mov	sl, r1
 8003330:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8003332:	4a3e      	ldr	r2, [pc, #248]	; (800342c <readAcc.isra.0+0x158>)
 8003334:	4690      	mov	r8, r2
 8003336:	f7ff fe65 	bl	8003004 <__aeabi_i2d>
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <readAcc.isra.0+0x15c>)
 800333c:	2200      	movs	r2, #0
 800333e:	f7fe ffc9 	bl	80022d4 <__aeabi_dmul>
 8003342:	f7ff fefd 	bl	8003140 <__aeabi_d2f>
 8003346:	4642      	mov	r2, r8
 8003348:	6010      	str	r0, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800334a:	4648      	mov	r0, r9
 800334c:	f7ff fe5a 	bl	8003004 <__aeabi_i2d>
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <readAcc.isra.0+0x15c>)
 8003352:	2200      	movs	r2, #0
 8003354:	f7fe ffbe 	bl	80022d4 <__aeabi_dmul>
 8003358:	f7ff fef2 	bl	8003140 <__aeabi_d2f>
	Az = Accel_Z_RAW/16384.0;
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <readAcc.isra.0+0x160>)
	Ay = Accel_Y_RAW/16384.0;
 800335e:	4f36      	ldr	r7, [pc, #216]	; (8003438 <readAcc.isra.0+0x164>)
	Az = Accel_Z_RAW/16384.0;
 8003360:	4691      	mov	r9, r2
	Ay = Accel_Y_RAW/16384.0;
 8003362:	6038      	str	r0, [r7, #0]
	Az = Accel_Z_RAW/16384.0;
 8003364:	4650      	mov	r0, sl
 8003366:	f7ff fe4d 	bl	8003004 <__aeabi_i2d>
 800336a:	2200      	movs	r2, #0
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <readAcc.isra.0+0x15c>)
 800336e:	f7fe ffb1 	bl	80022d4 <__aeabi_dmul>
 8003372:	f7ff fee5 	bl	8003140 <__aeabi_d2f>
 8003376:	464a      	mov	r2, r9


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8003378:	2306      	movs	r3, #6
	Az = Accel_Z_RAW/16384.0;
 800337a:	6010      	str	r0, [r2, #0]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800337c:	465a      	mov	r2, fp
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9500      	str	r5, [sp, #0]
 8003384:	2243      	movs	r2, #67	; 0x43
 8003386:	21d0      	movs	r1, #208	; 0xd0
 8003388:	0030      	movs	r0, r6
 800338a:	3b05      	subs	r3, #5
 800338c:	f005 fe86 	bl	800909c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003390:	8828      	ldrh	r0, [r5, #0]
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <readAcc.isra.0+0x168>)
 8003394:	886e      	ldrh	r6, [r5, #2]
 8003396:	ba42      	rev16	r2, r0
 8003398:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <readAcc.isra.0+0x16c>)
 800339c:	88ad      	ldrh	r5, [r5, #4]
 800339e:	ba72      	rev16	r2, r6
 80033a0:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <readAcc.isra.0+0x170>)
 80033a4:	ba6a      	rev16	r2, r5
 80033a6:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 80033a8:	bac0      	revsh	r0, r0
 80033aa:	f7ff fe2b 	bl	8003004 <__aeabi_i2d>
 80033ae:	2200      	movs	r2, #0
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <readAcc.isra.0+0x174>)
 80033b2:	f7fe fb95 	bl	8001ae0 <__aeabi_ddiv>
 80033b6:	f7ff fec3 	bl	8003140 <__aeabi_d2f>
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <readAcc.isra.0+0x178>)
 80033bc:	baf6      	revsh	r6, r6
 80033be:	4682      	mov	sl, r0
 80033c0:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80033c2:	0030      	movs	r0, r6
 80033c4:	f7ff fe1e 	bl	8003004 <__aeabi_i2d>
 80033c8:	2200      	movs	r2, #0
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <readAcc.isra.0+0x174>)
 80033cc:	f7fe fb88 	bl	8001ae0 <__aeabi_ddiv>
 80033d0:	f7ff feb6 	bl	8003140 <__aeabi_d2f>
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <readAcc.isra.0+0x17c>)
 80033d6:	baed      	revsh	r5, r5
 80033d8:	1c06      	adds	r6, r0, #0
 80033da:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80033dc:	0028      	movs	r0, r5
 80033de:	f7ff fe11 	bl	8003004 <__aeabi_i2d>
 80033e2:	2200      	movs	r2, #0
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <readAcc.isra.0+0x174>)
 80033e6:	f7fe fb7b 	bl	8001ae0 <__aeabi_ddiv>
 80033ea:	f7ff fea9 	bl	8003140 <__aeabi_d2f>
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <readAcc.isra.0+0x180>)
	ACC_GYRO_data[0]=Ax;
	ACC_GYRO_data[1]=Ay;
	ACC_GYRO_data[2]=Az;
	ACC_GYRO_data[3]=Gx;
	ACC_GYRO_data[4]=Gy;
 80033f0:	6126      	str	r6, [r4, #16]
	Gz = Gyro_Z_RAW/131.0;
 80033f2:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 80033f4:	4643      	mov	r3, r8
 80033f6:	681b      	ldr	r3, [r3, #0]
	ACC_GYRO_data[5]=Gz;
 80033f8:	6160      	str	r0, [r4, #20]
	ACC_GYRO_data[0]=Ax;
 80033fa:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 8003400:	464b      	mov	r3, r9
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=Gx;
 8003406:	4653      	mov	r3, sl
 8003408:	60e3      	str	r3, [r4, #12]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 800340a:	b007      	add	sp, #28
 800340c:	bcf0      	pop	{r4, r5, r6, r7}
 800340e:	46bb      	mov	fp, r7
 8003410:	46b2      	mov	sl, r6
 8003412:	46a9      	mov	r9, r5
 8003414:	46a0      	mov	r8, r4
 8003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003418:	20000324 	.word	0x20000324
 800341c:	2000499c 	.word	0x2000499c
 8003420:	20000358 	.word	0x20000358
 8003424:	2000035a 	.word	0x2000035a
 8003428:	2000035c 	.word	0x2000035c
 800342c:	20000360 	.word	0x20000360
 8003430:	3f100000 	.word	0x3f100000
 8003434:	20000368 	.word	0x20000368
 8003438:	20000364 	.word	0x20000364
 800343c:	20001f98 	.word	0x20001f98
 8003440:	20001f9a 	.word	0x20001f9a
 8003444:	20001f9c 	.word	0x20001f9c
 8003448:	40606000 	.word	0x40606000
 800344c:	20001f90 	.word	0x20001f90
 8003450:	20001f94 	.word	0x20001f94
 8003454:	20001fa0 	.word	0x20001fa0

08003458 <StartTask03>:
 8003458:	b510      	push	{r4, lr}
 800345a:	2001      	movs	r0, #1
 800345c:	f008 f8ee 	bl	800b63c <osDelay>
 8003460:	e7fb      	b.n	800345a <StartTask03+0x2>
 8003462:	46c0      	nop			; (mov r8, r8)

08003464 <SendGSMCode>:
	HAL_Delay(200);
	SET_PWRKEY(0);
}

void SendGSMCode(const char cmd[])
{
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	46c6      	mov	lr, r8

	memset(GSMData, 0, 4500);
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003468:	270c      	movs	r7, #12
{
 800346a:	b500      	push	{lr}
 800346c:	0005      	movs	r5, r0
 800346e:	b082      	sub	sp, #8
	memset(GSMData, 0, 4500);
 8003470:	2100      	movs	r1, #0
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <SendGSMCode+0xa0>)
 8003474:	4824      	ldr	r0, [pc, #144]	; (8003508 <SendGSMCode+0xa4>)
 8003476:	f00b fc95 	bl	800eda4 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <SendGSMCode+0xa8>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800347c:	4e24      	ldr	r6, [pc, #144]	; (8003510 <SendGSMCode+0xac>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800347e:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003480:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003482:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003484:	4923      	ldr	r1, [pc, #140]	; (8003514 <SendGSMCode+0xb0>)
 8003486:	0030      	movs	r0, r6
 8003488:	f007 ff82 	bl	800b390 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 500);
 800348c:	22fa      	movs	r2, #250	; 0xfa
 800348e:	4c22      	ldr	r4, [pc, #136]	; (8003518 <SendGSMCode+0xb4>)
 8003490:	2100      	movs	r1, #0
 8003492:	0052      	lsls	r2, r2, #1
 8003494:	0020      	movs	r0, r4
 8003496:	f00b fc85 	bl	800eda4 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 800349a:	0028      	movs	r0, r5
 800349c:	f7fc fe34 	bl	8000108 <strlen>
 80034a0:	4b1e      	ldr	r3, [pc, #120]	; (800351c <SendGSMCode+0xb8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <SendGSMCode+0x48>
 80034a8:	285a      	cmp	r0, #90	; 0x5a
 80034aa:	d818      	bhi.n	80034de <SendGSMCode+0x7a>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 80034ac:	0029      	movs	r1, r5
 80034ae:	0020      	movs	r0, r4
 80034b0:	f00b fd3e 	bl	800ef30 <stpcpy>
	strcat(GSMTXC, "\r\n");
 80034b4:	491a      	ldr	r1, [pc, #104]	; (8003520 <SendGSMCode+0xbc>)
 80034b6:	2203      	movs	r2, #3
 80034b8:	f00b fe46 	bl	800f148 <memcpy>




static void GSM_Tx(const char _out[]){
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034bc:	220c      	movs	r2, #12
 80034be:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80034c0:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034c2:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80034c4:	f7fc fe20 	bl	8000108 <strlen>
 80034c8:	2396      	movs	r3, #150	; 0x96
 80034ca:	b282      	uxth	r2, r0
 80034cc:	0021      	movs	r1, r4
 80034ce:	0030      	movs	r0, r6
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	f007 fd8f 	bl	800aff4 <HAL_UART_Transmit>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
	// return GSM_Rx();
}
 80034d6:	b002      	add	sp, #8
 80034d8:	bc80      	pop	{r7}
 80034da:	46b8      	mov	r8, r7
 80034dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <SendGSMCode+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80034e0:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034e2:	4698      	mov	r8, r3
 80034e4:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80034e6:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034e8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80034ea:	490f      	ldr	r1, [pc, #60]	; (8003528 <SendGSMCode+0xc4>)
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <SendGSMCode+0xc8>)
 80034ee:	f007 fd81 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <SendGSMCode+0xcc>)
 80034f4:	a901      	add	r1, sp, #4
 80034f6:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80034f8:	2202      	movs	r2, #2
 80034fa:	230a      	movs	r3, #10
 80034fc:	4640      	mov	r0, r8
 80034fe:	f007 fd79 	bl	800aff4 <HAL_UART_Transmit>
}
 8003502:	e7d3      	b.n	80034ac <SendGSMCode+0x48>
 8003504:	00001194 	.word	0x00001194
 8003508:	20000754 	.word	0x20000754
 800350c:	20004b34 	.word	0x20004b34
 8003510:	20004aa0 	.word	0x20004aa0
 8003514:	20000750 	.word	0x20000750
 8003518:	20001d9c 	.word	0x20001d9c
 800351c:	200000c4 	.word	0x200000c4
 8003520:	08012a78 	.word	0x08012a78
 8003524:	20004bc8 	.word	0x20004bc8
 8003528:	08012a58 	.word	0x08012a58
 800352c:	00001388 	.word	0x00001388
 8003530:	00000a0d 	.word	0x00000a0d

08003534 <SendGSMCodeL>:
	GSM_Tx(cmd);
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
 8003534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003536:	46c6      	mov	lr, r8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003538:	270c      	movs	r7, #12
{
 800353a:	b500      	push	{lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <SendGSMCodeL+0xa0>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800353e:	4e26      	ldr	r6, [pc, #152]	; (80035d8 <SendGSMCodeL+0xa4>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003540:	681b      	ldr	r3, [r3, #0]
{
 8003542:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003544:	621f      	str	r7, [r3, #32]
{
 8003546:	0005      	movs	r5, r0
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003548:	2201      	movs	r2, #1
 800354a:	4924      	ldr	r1, [pc, #144]	; (80035dc <SendGSMCodeL+0xa8>)
 800354c:	0030      	movs	r0, r6
 800354e:	f007 ff1f 	bl	800b390 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 4500);
 8003552:	2100      	movs	r1, #0
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <SendGSMCodeL+0xac>)
 8003556:	4823      	ldr	r0, [pc, #140]	; (80035e4 <SendGSMCodeL+0xb0>)
 8003558:	f00b fc24 	bl	800eda4 <memset>
	memset(GSMTXC, 0, 500);
 800355c:	22fa      	movs	r2, #250	; 0xfa
 800355e:	4c22      	ldr	r4, [pc, #136]	; (80035e8 <SendGSMCodeL+0xb4>)
 8003560:	2100      	movs	r1, #0
 8003562:	0020      	movs	r0, r4
 8003564:	0052      	lsls	r2, r2, #1
 8003566:	f00b fc1d 	bl	800eda4 <memset>
	if ((strlen(cmd) > 90) && (debug == 1))
 800356a:	0028      	movs	r0, r5
 800356c:	f7fc fdcc 	bl	8000108 <strlen>
 8003570:	285a      	cmp	r0, #90	; 0x5a
 8003572:	d903      	bls.n	800357c <SendGSMCodeL+0x48>
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <SendGSMCodeL+0xb8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d018      	beq.n	80035ae <SendGSMCodeL+0x7a>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 800357c:	0029      	movs	r1, r5
 800357e:	0020      	movs	r0, r4
 8003580:	f00b fcd6 	bl	800ef30 <stpcpy>
	strcat(GSMTXC, "\r\n");
 8003584:	491a      	ldr	r1, [pc, #104]	; (80035f0 <SendGSMCodeL+0xbc>)
 8003586:	2203      	movs	r2, #3
 8003588:	f00b fdde 	bl	800f148 <memcpy>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800358c:	220c      	movs	r2, #12
 800358e:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003590:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003592:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003594:	f7fc fdb8 	bl	8000108 <strlen>
 8003598:	2396      	movs	r3, #150	; 0x96
 800359a:	b282      	uxth	r2, r0
 800359c:	0021      	movs	r1, r4
 800359e:	0030      	movs	r0, r6
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	f007 fd27 	bl	800aff4 <HAL_UART_Transmit>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);

	// return GSM_RxL();
}
 80035a6:	b002      	add	sp, #8
 80035a8:	bc80      	pop	{r7}
 80035aa:	46b8      	mov	r8, r7
 80035ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <SendGSMCodeL+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80035b0:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80035b2:	4698      	mov	r8, r3
 80035b4:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80035b6:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80035b8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80035ba:	490f      	ldr	r1, [pc, #60]	; (80035f8 <SendGSMCodeL+0xc4>)
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <SendGSMCodeL+0xc8>)
 80035be:	f007 fd19 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <SendGSMCodeL+0xcc>)
 80035c4:	a901      	add	r1, sp, #4
 80035c6:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80035c8:	2202      	movs	r2, #2
 80035ca:	230a      	movs	r3, #10
 80035cc:	4640      	mov	r0, r8
 80035ce:	f007 fd11 	bl	800aff4 <HAL_UART_Transmit>
}
 80035d2:	e7d3      	b.n	800357c <SendGSMCodeL+0x48>
 80035d4:	20004b34 	.word	0x20004b34
 80035d8:	20004aa0 	.word	0x20004aa0
 80035dc:	20000750 	.word	0x20000750
 80035e0:	00001194 	.word	0x00001194
 80035e4:	20000754 	.word	0x20000754
 80035e8:	20001d9c 	.word	0x20001d9c
 80035ec:	200000c4 	.word	0x200000c4
 80035f0:	08012a78 	.word	0x08012a78
 80035f4:	20004bc8 	.word	0x20004bc8
 80035f8:	08012a58 	.word	0x08012a58
 80035fc:	00001388 	.word	0x00001388
 8003600:	00000a0d 	.word	0x00000a0d

08003604 <SendGSMData>:

void SendGSMData(const char data[])
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003606:	270c      	movs	r7, #12
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <SendGSMData+0x68>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800360a:	4c19      	ldr	r4, [pc, #100]	; (8003670 <SendGSMData+0x6c>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800360c:	681b      	ldr	r3, [r3, #0]
{
 800360e:	b083      	sub	sp, #12
 8003610:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003612:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003614:	2201      	movs	r2, #1
 8003616:	0020      	movs	r0, r4
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <SendGSMData+0x70>)
 800361a:	f007 feb9 	bl	800b390 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 4500);
 800361e:	2100      	movs	r1, #0
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <SendGSMData+0x74>)
 8003622:	4816      	ldr	r0, [pc, #88]	; (800367c <SendGSMData+0x78>)
 8003624:	f00b fbbe 	bl	800eda4 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 8003628:	466b      	mov	r3, sp
 800362a:	2202      	movs	r2, #2
 800362c:	2100      	movs	r1, #0
 800362e:	1d58      	adds	r0, r3, #5
 8003630:	f00b fbb8 	bl	800eda4 <memset>
	end[0] = 0x1A;
 8003634:	231a      	movs	r3, #26
	memset(end, 0, 3);
 8003636:	ae01      	add	r6, sp, #4
	end[0] = 0x1A;
 8003638:	7033      	strb	r3, [r6, #0]
	//memset(_out,0,strlen(_out));
}

static void GSM_TxL(const char _out[]){

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800363a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800363c:	0028      	movs	r0, r5
	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800363e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 8003640:	f7fc fd62 	bl	8000108 <strlen>
 8003644:	0029      	movs	r1, r5
 8003646:	b282      	uxth	r2, r0
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <SendGSMData+0x7c>)
 800364a:	0020      	movs	r0, r4
 800364c:	f007 fcd2 	bl	800aff4 <HAL_UART_Transmit>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003650:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003652:	0030      	movs	r0, r6
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003654:	621f      	str	r7, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003656:	f7fc fd57 	bl	8000108 <strlen>
 800365a:	2396      	movs	r3, #150	; 0x96
 800365c:	b282      	uxth	r2, r0
 800365e:	0031      	movs	r1, r6
 8003660:	0020      	movs	r0, r4
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	f007 fcc6 	bl	800aff4 <HAL_UART_Transmit>
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
	GSM_Tx((char *)end);

	// return GSM_Rx();
}
 8003668:	b003      	add	sp, #12
 800366a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366c:	20004b34 	.word	0x20004b34
 8003670:	20004aa0 	.word	0x20004aa0
 8003674:	20000750 	.word	0x20000750
 8003678:	00001194 	.word	0x00001194
 800367c:	20000754 	.word	0x20000754
 8003680:	00001388 	.word	0x00001388

08003684 <EndTransfer>:

void EndTransfer()
{
 8003684:	b5f0      	push	{r4, r5, r6, r7, lr}

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003686:	270c      	movs	r7, #12
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <EndTransfer+0x84>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800368a:	4c20      	ldr	r4, [pc, #128]	; (800370c <EndTransfer+0x88>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800368c:	681b      	ldr	r3, [r3, #0]
{
 800368e:	b083      	sub	sp, #12
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003690:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003692:	2201      	movs	r2, #1
 8003694:	491e      	ldr	r1, [pc, #120]	; (8003710 <EndTransfer+0x8c>)
 8003696:	0020      	movs	r0, r4
 8003698:	f007 fe7a 	bl	800b390 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 800369c:	4d1d      	ldr	r5, [pc, #116]	; (8003714 <EndTransfer+0x90>)
 800369e:	2100      	movs	r1, #0
 80036a0:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <EndTransfer+0x94>)
 80036a2:	0028      	movs	r0, r5
 80036a4:	f00b fb7e 	bl	800eda4 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 80036a8:	466b      	mov	r3, sp
 80036aa:	2202      	movs	r2, #2
 80036ac:	2100      	movs	r1, #0
 80036ae:	1d58      	adds	r0, r3, #5
 80036b0:	f00b fb78 	bl	800eda4 <memset>
	end[0] = 0x1A;
 80036b4:	231a      	movs	r3, #26
	memset(end, 0, 3);
 80036b6:	ae01      	add	r6, sp, #4
	end[0] = 0x1A;
 80036b8:	7033      	strb	r3, [r6, #0]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036ba:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036bc:	0030      	movs	r0, r6
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036be:	621f      	str	r7, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036c0:	f7fc fd22 	bl	8000108 <strlen>
 80036c4:	2396      	movs	r3, #150	; 0x96
 80036c6:	b282      	uxth	r2, r0
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	0031      	movs	r1, r6
 80036cc:	0020      	movs	r0, r4
 80036ce:	f007 fc91 	bl	800aff4 <HAL_UART_Transmit>
	GSM_Tx((char *)end);
HAL_Delay(1000);
 80036d2:	20fa      	movs	r0, #250	; 0xfa
 80036d4:	0080      	lsls	r0, r0, #2
 80036d6:	f004 fb99 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 80036da:	782b      	ldrb	r3, [r5, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <EndTransfer+0x7e>
 80036e0:	240a      	movs	r4, #10
 80036e2:	e002      	b.n	80036ea <EndTransfer+0x66>
 80036e4:	3c01      	subs	r4, #1
 80036e6:	2c00      	cmp	r4, #0
 80036e8:	d00b      	beq.n	8003702 <EndTransfer+0x7e>
		memset(GSMData, 0, 4500);
 80036ea:	2100      	movs	r1, #0
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <EndTransfer+0x98>)
 80036ee:	0028      	movs	r0, r5
 80036f0:	f00b fb58 	bl	800eda4 <memset>
		HAL_Delay(300);
 80036f4:	2096      	movs	r0, #150	; 0x96
 80036f6:	0040      	lsls	r0, r0, #1
 80036f8:	f004 fb88 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 80036fc:	782b      	ldrb	r3, [r5, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <EndTransfer+0x60>
	Wait_gsmClear(10);
	// return GSM_Rx();
}
 8003702:	b003      	add	sp, #12
 8003704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	20004b34 	.word	0x20004b34
 800370c:	20004aa0 	.word	0x20004aa0
 8003710:	20000750 	.word	0x20000750
 8003714:	20000754 	.word	0x20000754
 8003718:	000003de 	.word	0x000003de
 800371c:	00001194 	.word	0x00001194

08003720 <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	b083      	sub	sp, #12
 8003724:	0006      	movs	r6, r0
 8003726:	000d      	movs	r5, r1
	//memset(GSMReply3, 0, 500);
    int ret=0;

	int stT = HAL_GetTick();
 8003728:	f004 fb6a 	bl	8007e00 <HAL_GetTick>
 800372c:	4f1c      	ldr	r7, [pc, #112]	; (80037a0 <waitForResponse+0x80>)
 800372e:	0004      	movs	r4, r0
	while (((HAL_GetTick() - stT) <= timeout)){
 8003730:	e005      	b.n	800373e <waitForResponse+0x1e>
		//HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
        //rxBufferIndex++;
		//strlen(GSMData)
        if (strstr(GSMData, expectedResponse) != NULL) {
 8003732:	0031      	movs	r1, r6
 8003734:	0038      	movs	r0, r7
 8003736:	f00b fbe5 	bl	800ef04 <strstr>
 800373a:	2800      	cmp	r0, #0
 800373c:	d12d      	bne.n	800379a <waitForResponse+0x7a>
	while (((HAL_GetTick() - stT) <= timeout)){
 800373e:	f004 fb5f 	bl	8007e00 <HAL_GetTick>
 8003742:	1b00      	subs	r0, r0, r4
 8003744:	42a8      	cmp	r0, r5
 8003746:	d9f4      	bls.n	8003732 <waitForResponse+0x12>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003748:	260c      	movs	r6, #12
 800374a:	4c16      	ldr	r4, [pc, #88]	; (80037a4 <waitForResponse+0x84>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800374c:	2216      	movs	r2, #22
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800374e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003750:	4915      	ldr	r1, [pc, #84]	; (80037a8 <waitForResponse+0x88>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003752:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003754:	0020      	movs	r0, r4
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <waitForResponse+0x8c>)
 8003758:	f007 fc4c 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800375c:	466b      	mov	r3, sp
 800375e:	4d14      	ldr	r5, [pc, #80]	; (80037b0 <waitForResponse+0x90>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003760:	2202      	movs	r2, #2
 8003762:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003764:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003766:	0020      	movs	r0, r4
 8003768:	230a      	movs	r3, #10
 800376a:	f007 fc43 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800376e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003770:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003772:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003774:	f7fc fcc8 	bl	8000108 <strlen>
 8003778:	0039      	movs	r1, r7
 800377a:	b282      	uxth	r2, r0
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <waitForResponse+0x8c>)
 800377e:	0020      	movs	r0, r4
 8003780:	f007 fc38 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003784:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003786:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003788:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800378a:	0020      	movs	r0, r4
 800378c:	230a      	movs	r3, #10
 800378e:	a901      	add	r1, sp, #4
 8003790:	f007 fc30 	bl	800aff4 <HAL_UART_Transmit>
    int ret=0;
 8003794:	2000      	movs	r0, #0
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
	return ret;

}
 8003796:	b003      	add	sp, #12
 8003798:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	ret=1;
 800379a:	2001      	movs	r0, #1
	return ret;
 800379c:	e7fb      	b.n	8003796 <waitForResponse+0x76>
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	20000754 	.word	0x20000754
 80037a4:	20004bc8 	.word	0x20004bc8
 80037a8:	08012b80 	.word	0x08012b80
 80037ac:	00001388 	.word	0x00001388
 80037b0:	00000a0d 	.word	0x00000a0d

080037b4 <GetGSMReply>:

char *GetGSMReply(int extra, const char *find, int gap, const char *LineEnd, const char *ErrorMsg, int timeout, const char *finChar)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	46de      	mov	lr, fp
 80037b8:	4657      	mov	r7, sl
 80037ba:	4645      	mov	r5, r8
 80037bc:	464e      	mov	r6, r9
 80037be:	b5e0      	push	{r5, r6, r7, lr}
 80037c0:	469b      	mov	fp, r3
	memset(GSMReply, 0, 100);
 80037c2:	4b89      	ldr	r3, [pc, #548]	; (80039e8 <GetGSMReply+0x234>)
{
 80037c4:	b087      	sub	sp, #28
	memset(GSMReply, 0, 100);
 80037c6:	0018      	movs	r0, r3
{
 80037c8:	9100      	str	r1, [sp, #0]
 80037ca:	9201      	str	r2, [sp, #4]
	memset(GSMReply, 0, 100);
 80037cc:	2100      	movs	r1, #0
 80037ce:	2264      	movs	r2, #100	; 0x64
 80037d0:	4698      	mov	r8, r3
{
 80037d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
	memset(GSMReply, 0, 100);
 80037d4:	f00b fae6 	bl	800eda4 <memset>
	memset(GSMInData, 0, 1000);
 80037d8:	22fa      	movs	r2, #250	; 0xfa
 80037da:	4f84      	ldr	r7, [pc, #528]	; (80039ec <GetGSMReply+0x238>)
 80037dc:	2100      	movs	r1, #0
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	0038      	movs	r0, r7
 80037e2:	f00b fadf 	bl	800eda4 <memset>
	gsmER=0;
 80037e6:	4b82      	ldr	r3, [pc, #520]	; (80039f0 <GetGSMReply+0x23c>)
 80037e8:	469a      	mov	sl, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	4652      	mov	r2, sl
 80037ee:	6013      	str	r3, [r2, #0]
	int stT = HAL_GetTick();
 80037f0:	f004 fb06 	bl	8007e00 <HAL_GetTick>
					}
				}
			}
			else
			{
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 80037f4:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <GetGSMReply+0x240>)
	int stT = HAL_GetTick();
 80037f6:	0004      	movs	r4, r0
		if (strlen(GSMData) > 0   )
 80037f8:	4d7f      	ldr	r5, [pc, #508]	; (80039f8 <GetGSMReply+0x244>)
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 80037fa:	9302      	str	r3, [sp, #8]
	while (((HAL_GetTick() - stT) <= timeout))
 80037fc:	e005      	b.n	800380a <GetGSMReply+0x56>
		HAL_Delay(70);
 80037fe:	2046      	movs	r0, #70	; 0x46
 8003800:	f004 fb04 	bl	8007e0c <HAL_Delay>
		if (strlen(GSMData) > 0   )
 8003804:	782b      	ldrb	r3, [r5, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d113      	bne.n	8003832 <GetGSMReply+0x7e>
	while (((HAL_GetTick() - stT) <= timeout))
 800380a:	f004 faf9 	bl	8007e00 <HAL_GetTick>
 800380e:	1b00      	subs	r0, r0, r4
 8003810:	4286      	cmp	r6, r0
 8003812:	d2f4      	bcs.n	80037fe <GetGSMReply+0x4a>
	//Debug_Tx(GSMInData);
	//Debug_Tx("****gsmdata");
	//Debug_Tx(GSMData);
	//Debug_Tx("****gsmreply");
	//Debug_Tx(GSMReply);
	if (strlen(GSMReply) < 1)
 8003814:	4643      	mov	r3, r8
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d043      	beq.n	80038a4 <GetGSMReply+0xf0>
		// Debug_Tx(GSMData);
		// Debug_Tx("****");
		// Debug_Tx(GSMReply);
		// Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 800381c:	2064      	movs	r0, #100	; 0x64
 800381e:	f004 faf5 	bl	8007e0c <HAL_Delay>
	// if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
 8003822:	4640      	mov	r0, r8
}
 8003824:	b007      	add	sp, #28
 8003826:	bcf0      	pop	{r4, r5, r6, r7}
 8003828:	46bb      	mov	fp, r7
 800382a:	46b2      	mov	sl, r6
 800382c:	46a9      	mov	r9, r5
 800382e:	46a0      	mov	r8, r4
 8003830:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( strlen(GSMData) >900) {Debug_Tx("GSM Data oveload");HAL_Delay(5000);memset(GSMData, 0, 4500);
 8003832:	0028      	movs	r0, r5
 8003834:	f7fc fc68 	bl	8000108 <strlen>
 8003838:	23e1      	movs	r3, #225	; 0xe1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4298      	cmp	r0, r3
 800383e:	d900      	bls.n	8003842 <GetGSMReply+0x8e>
 8003840:	e08a      	b.n	8003958 <GetGSMReply+0x1a4>
			strcpy(GSMInData, GSMData);
 8003842:	0029      	movs	r1, r5
 8003844:	1c42      	adds	r2, r0, #1
 8003846:	0038      	movs	r0, r7
 8003848:	f00b fc7e 	bl	800f148 <memcpy>
			char *pq = strstr(GSMInData, finChar);
 800384c:	0038      	movs	r0, r7
 800384e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003850:	f00b fb58 	bl	800ef04 <strstr>
			if ((pq != NULL))
 8003854:	2800      	cmp	r0, #0
 8003856:	d050      	beq.n	80038fa <GetGSMReply+0x146>
				if ((strlen(find) < 1))
 8003858:	9b00      	ldr	r3, [sp, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d100      	bne.n	8003862 <GetGSMReply+0xae>
 8003860:	e095      	b.n	800398e <GetGSMReply+0x1da>
				char *p = strstr(GSMInData, find);
 8003862:	0038      	movs	r0, r7
 8003864:	9900      	ldr	r1, [sp, #0]
 8003866:	f00b fb4d 	bl	800ef04 <strstr>
				if ((strlen(LineEnd) < 1))
 800386a:	465b      	mov	r3, fp
 800386c:	781b      	ldrb	r3, [r3, #0]
				char *p = strstr(GSMInData, find);
 800386e:	4681      	mov	r9, r0
				if ((strlen(LineEnd) < 1))
 8003870:	2b00      	cmp	r3, #0
 8003872:	d100      	bne.n	8003876 <GetGSMReply+0xc2>
 8003874:	e0a6      	b.n	80039c4 <GetGSMReply+0x210>
					if ((strstr(GSMInData, LineEnd) != NULL))
 8003876:	4659      	mov	r1, fp
 8003878:	0038      	movs	r0, r7
 800387a:	f00b fb43 	bl	800ef04 <strstr>
 800387e:	2800      	cmp	r0, #0
 8003880:	d00c      	beq.n	800389c <GetGSMReply+0xe8>
						if ((strlen(p + gap) > strlen(LineEnd)))
 8003882:	9b01      	ldr	r3, [sp, #4]
 8003884:	469c      	mov	ip, r3
 8003886:	44e1      	add	r9, ip
 8003888:	4648      	mov	r0, r9
 800388a:	f7fc fc3d 	bl	8000108 <strlen>
 800388e:	9003      	str	r0, [sp, #12]
 8003890:	4658      	mov	r0, fp
 8003892:	f7fc fc39 	bl	8000108 <strlen>
 8003896:	9b03      	ldr	r3, [sp, #12]
 8003898:	4283      	cmp	r3, r0
 800389a:	d84d      	bhi.n	8003938 <GetGSMReply+0x184>
			gsmER = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	4652      	mov	r2, sl
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e7b2      	b.n	800380a <GetGSMReply+0x56>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038a4:	260c      	movs	r6, #12
 80038a6:	4c55      	ldr	r4, [pc, #340]	; (80039fc <GetGSMReply+0x248>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80038a8:	9810      	ldr	r0, [sp, #64]	; 0x40
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038aa:	6823      	ldr	r3, [r4, #0]
	char newline[2] = "\r\n";
 80038ac:	4d54      	ldr	r5, [pc, #336]	; (8003a00 <GetGSMReply+0x24c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038ae:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80038b0:	f7fc fc2a 	bl	8000108 <strlen>
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <GetGSMReply+0x250>)
 80038b6:	b282      	uxth	r2, r0
 80038b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80038ba:	0020      	movs	r0, r4
 80038bc:	f007 fb9a 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80038c0:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80038c2:	2202      	movs	r2, #2
 80038c4:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 80038c6:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80038c8:	0020      	movs	r0, r4
 80038ca:	230a      	movs	r3, #10
 80038cc:	f007 fb92 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038d0:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80038d2:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038d4:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80038d6:	f7fc fc17 	bl	8000108 <strlen>
 80038da:	0039      	movs	r1, r7
 80038dc:	b282      	uxth	r2, r0
 80038de:	4b49      	ldr	r3, [pc, #292]	; (8003a04 <GetGSMReply+0x250>)
 80038e0:	0020      	movs	r0, r4
 80038e2:	f007 fb87 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80038e6:	ab04      	add	r3, sp, #16
 80038e8:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80038ea:	2202      	movs	r2, #2
 80038ec:	230a      	movs	r3, #10
 80038ee:	0020      	movs	r0, r4
 80038f0:	a905      	add	r1, sp, #20
 80038f2:	f007 fb7f 	bl	800aff4 <HAL_UART_Transmit>
		return "";
 80038f6:	4844      	ldr	r0, [pc, #272]	; (8003a08 <GetGSMReply+0x254>)
}
 80038f8:	e794      	b.n	8003824 <GetGSMReply+0x70>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 80038fa:	0038      	movs	r0, r7
 80038fc:	9902      	ldr	r1, [sp, #8]
 80038fe:	f00b fb01 	bl	800ef04 <strstr>
 8003902:	2800      	cmp	r0, #0
 8003904:	d105      	bne.n	8003912 <GetGSMReply+0x15e>
 8003906:	0038      	movs	r0, r7
 8003908:	4940      	ldr	r1, [pc, #256]	; (8003a0c <GetGSMReply+0x258>)
 800390a:	f00b fafb 	bl	800ef04 <strstr>
 800390e:	2800      	cmp	r0, #0
 8003910:	d0c4      	beq.n	800389c <GetGSMReply+0xe8>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003912:	220c      	movs	r2, #12
 8003914:	4c39      	ldr	r4, [pc, #228]	; (80039fc <GetGSMReply+0x248>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003916:	493e      	ldr	r1, [pc, #248]	; (8003a10 <GetGSMReply+0x25c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003918:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800391a:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800391c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <GetGSMReply+0x250>)
 8003920:	3a03      	subs	r2, #3
 8003922:	f007 fb67 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003926:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <GetGSMReply+0x24c>)
 8003928:	a905      	add	r1, sp, #20
 800392a:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800392c:	2202      	movs	r2, #2
 800392e:	230a      	movs	r3, #10
 8003930:	0020      	movs	r0, r4
 8003932:	f007 fb5f 	bl	800aff4 <HAL_UART_Transmit>
}
 8003936:	e76d      	b.n	8003814 <GetGSMReply+0x60>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 8003938:	4648      	mov	r0, r9
 800393a:	2200      	movs	r2, #0
 800393c:	4659      	mov	r1, fp
 800393e:	f00b fadc 	bl	800eefa <strtok_r>
 8003942:	4681      	mov	r9, r0
							if (strlen(p1) < 88)
 8003944:	f7fc fbe0 	bl	8000108 <strlen>
 8003948:	2857      	cmp	r0, #87	; 0x57
 800394a:	d8a7      	bhi.n	800389c <GetGSMReply+0xe8>
								strcpy(GSMReply, p1);
 800394c:	1c42      	adds	r2, r0, #1
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	f00b fbf9 	bl	800f148 <memcpy>
								break;
 8003956:	e75d      	b.n	8003814 <GetGSMReply+0x60>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003958:	220c      	movs	r2, #12
 800395a:	4c28      	ldr	r4, [pc, #160]	; (80039fc <GetGSMReply+0x248>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800395c:	492d      	ldr	r1, [pc, #180]	; (8003a14 <GetGSMReply+0x260>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800395e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003960:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003962:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <GetGSMReply+0x250>)
 8003966:	3204      	adds	r2, #4
 8003968:	f007 fb44 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <GetGSMReply+0x24c>)
 800396e:	a905      	add	r1, sp, #20
 8003970:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003972:	2202      	movs	r2, #2
 8003974:	230a      	movs	r3, #10
 8003976:	0020      	movs	r0, r4
 8003978:	f007 fb3c 	bl	800aff4 <HAL_UART_Transmit>
			if( strlen(GSMData) >900) {Debug_Tx("GSM Data oveload");HAL_Delay(5000);memset(GSMData, 0, 4500);
 800397c:	4821      	ldr	r0, [pc, #132]	; (8003a04 <GetGSMReply+0x250>)
					HAL_Delay(300);memset(GSMData, 0, 4500);
 800397e:	f004 fa45 	bl	8007e0c <HAL_Delay>
 8003982:	2100      	movs	r1, #0
 8003984:	0028      	movs	r0, r5
 8003986:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <GetGSMReply+0x264>)
 8003988:	f00b fa0c 	bl	800eda4 <memset>
								break;}
 800398c:	e742      	b.n	8003814 <GetGSMReply+0x60>
					if( strlen(pq) >95) {Debug_Tx("GSM Data oveload2");
 800398e:	4681      	mov	r9, r0
 8003990:	f7fc fbba 	bl	8000108 <strlen>
 8003994:	0002      	movs	r2, r0
 8003996:	285f      	cmp	r0, #95	; 0x5f
 8003998:	d91f      	bls.n	80039da <GetGSMReply+0x226>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800399a:	220c      	movs	r2, #12
 800399c:	4c17      	ldr	r4, [pc, #92]	; (80039fc <GetGSMReply+0x248>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800399e:	491f      	ldr	r1, [pc, #124]	; (8003a1c <GetGSMReply+0x268>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <GetGSMReply+0x250>)
 80039a6:	3205      	adds	r2, #5
 80039a8:	0020      	movs	r0, r4
 80039aa:	f007 fb23 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80039ae:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <GetGSMReply+0x24c>)
 80039b0:	a905      	add	r1, sp, #20
 80039b2:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80039b4:	2202      	movs	r2, #2
 80039b6:	230a      	movs	r3, #10
 80039b8:	0020      	movs	r0, r4
 80039ba:	f007 fb1b 	bl	800aff4 <HAL_UART_Transmit>
					HAL_Delay(300);memset(GSMData, 0, 4500);
 80039be:	2096      	movs	r0, #150	; 0x96
 80039c0:	0040      	lsls	r0, r0, #1
 80039c2:	e7dc      	b.n	800397e <GetGSMReply+0x1ca>
					if( strlen(p) >95) {Debug_Tx("GSM Data oveload3");
 80039c4:	f7fc fba0 	bl	8000108 <strlen>
 80039c8:	0002      	movs	r2, r0
 80039ca:	285f      	cmp	r0, #95	; 0x5f
 80039cc:	d905      	bls.n	80039da <GetGSMReply+0x226>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80039ce:	220c      	movs	r2, #12
 80039d0:	4c0a      	ldr	r4, [pc, #40]	; (80039fc <GetGSMReply+0x248>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80039d2:	4913      	ldr	r1, [pc, #76]	; (8003a20 <GetGSMReply+0x26c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80039d8:	e7e4      	b.n	80039a4 <GetGSMReply+0x1f0>
					strcpy(GSMReply, p);
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	3201      	adds	r2, #1
 80039e0:	f00b fbb2 	bl	800f148 <memcpy>
					break;
 80039e4:	e716      	b.n	8003814 <GetGSMReply+0x60>
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	20001d34 	.word	0x20001d34
 80039ec:	2000194c 	.word	0x2000194c
 80039f0:	20004770 	.word	0x20004770
 80039f4:	08012bd4 	.word	0x08012bd4
 80039f8:	20000754 	.word	0x20000754
 80039fc:	20004bc8 	.word	0x20004bc8
 8003a00:	00000a0d 	.word	0x00000a0d
 8003a04:	00001388 	.word	0x00001388
 8003a08:	08013944 	.word	0x08013944
 8003a0c:	08012bdc 	.word	0x08012bdc
 8003a10:	08012be4 	.word	0x08012be4
 8003a14:	08012b98 	.word	0x08012b98
 8003a18:	00001194 	.word	0x00001194
 8003a1c:	08012bac 	.word	0x08012bac
 8003a20:	08012bc0 	.word	0x08012bc0

08003a24 <GSMSimOperator>:
	}
	return (GSMSignal); // must be higher than 5 ,range 0-33
}

char *GSMSimOperator()
{
 8003a24:	b500      	push	{lr}

	SendGSMCode("  AT+COPS?");
 8003a26:	4809      	ldr	r0, [pc, #36]	; (8003a4c <GSMSimOperator+0x28>)
{
 8003a28:	b085      	sub	sp, #20
	SendGSMCode("  AT+COPS?");
 8003a2a:	f7ff fd1b 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <GSMSimOperator+0x2c>)
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <GSMSimOperator+0x30>)
 8003a32:	9202      	str	r2, [sp, #8]
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <GSMSimOperator+0x34>)
 8003a36:	4909      	ldr	r1, [pc, #36]	; (8003a5c <GSMSimOperator+0x38>)
 8003a38:	9201      	str	r2, [sp, #4]
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <GSMSimOperator+0x3c>)
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	9200      	str	r2, [sp, #0]
 8003a40:	220c      	movs	r2, #12
 8003a42:	f7ff feb7 	bl	80037b4 <GetGSMReply>
}
 8003a46:	b005      	add	sp, #20
 8003a48:	bd00      	pop	{pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	08012bf0 	.word	0x08012bf0
 8003a50:	08012c98 	.word	0x08012c98
 8003a54:	08012c8c 	.word	0x08012c8c
 8003a58:	00001388 	.word	0x00001388
 8003a5c:	08012bfc 	.word	0x08012bfc
 8003a60:	08012c04 	.word	0x08012c04

08003a64 <GSMIMEI>:

	return (0);
}

char *GSMIMEI()
{
 8003a64:	b500      	push	{lr}
	SendGSMCode(" AT+QGSN");
 8003a66:	4809      	ldr	r0, [pc, #36]	; (8003a8c <GSMIMEI+0x28>)
{
 8003a68:	b085      	sub	sp, #20
	SendGSMCode(" AT+QGSN");
 8003a6a:	f7ff fcfb 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <GSMIMEI+0x2c>)
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <GSMIMEI+0x30>)
 8003a72:	9202      	str	r2, [sp, #8]
 8003a74:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <GSMIMEI+0x34>)
 8003a76:	4909      	ldr	r1, [pc, #36]	; (8003a9c <GSMIMEI+0x38>)
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	9201      	str	r2, [sp, #4]
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <GSMIMEI+0x3c>)
 8003a80:	9200      	str	r2, [sp, #0]
 8003a82:	2208      	movs	r2, #8
 8003a84:	f7ff fe96 	bl	80037b4 <GetGSMReply>
}
 8003a88:	b005      	add	sp, #20
 8003a8a:	bd00      	pop	{pc}
 8003a8c:	08012c28 	.word	0x08012c28
 8003a90:	08012c98 	.word	0x08012c98
 8003a94:	08012c8c 	.word	0x08012c8c
 8003a98:	200000c8 	.word	0x200000c8
 8003a9c:	08012c34 	.word	0x08012c34
 8003aa0:	08012c3c 	.word	0x08012c3c

08003aa4 <StartTCPConnection>:
*/
	return 0;
}

void StartTCPConnection(int n)
{
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	46de      	mov	lr, fp
 8003aa8:	464e      	mov	r6, r9
 8003aaa:	4645      	mov	r5, r8
 8003aac:	4657      	mov	r7, sl
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003aae:	220c      	movs	r2, #12
 8003ab0:	b5e0      	push	{r5, r6, r7, lr}
 8003ab2:	4e49      	ldr	r6, [pc, #292]	; (8003bd8 <StartTCPConnection+0x134>)
 8003ab4:	b089      	sub	sp, #36	; 0x24
 8003ab6:	6833      	ldr	r3, [r6, #0]
 8003ab8:	0007      	movs	r7, r0
 8003aba:	621a      	str	r2, [r3, #32]
 8003abc:	4691      	mov	r9, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003abe:	4947      	ldr	r1, [pc, #284]	; (8003bdc <StartTCPConnection+0x138>)
 8003ac0:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <StartTCPConnection+0x13c>)
 8003ac2:	320e      	adds	r2, #14
 8003ac4:	0030      	movs	r0, r6
 8003ac6:	f007 fa95 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003aca:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <StartTCPConnection+0x140>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003acc:	a907      	add	r1, sp, #28
	char newline[2] = "\r\n";
 8003ace:	4698      	mov	r8, r3
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	ab02      	add	r3, sp, #8
 8003ad4:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ad6:	0030      	movs	r0, r6
 8003ad8:	230a      	movs	r3, #10
 8003ada:	2202      	movs	r2, #2
	Debug_Tx("Conncting Session with IP:");
	Debug_Tx(ip[n]);
 8003adc:	00bd      	lsls	r5, r7, #2
 8003ade:	f007 fa89 	bl	800aff4 <HAL_UART_Transmit>
 8003ae2:	19eb      	adds	r3, r5, r7
 8003ae4:	009a      	lsls	r2, r3, #2
 8003ae6:	189b      	adds	r3, r3, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ae8:	464a      	mov	r2, r9
 8003aea:	4c3f      	ldr	r4, [pc, #252]	; (8003be8 <StartTCPConnection+0x144>)
 8003aec:	18e4      	adds	r4, r4, r3
 8003aee:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003af0:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003af2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003af4:	f7fc fb08 	bl	8000108 <strlen>
 8003af8:	0021      	movs	r1, r4
 8003afa:	b282      	uxth	r2, r0
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <StartTCPConnection+0x13c>)
 8003afe:	0030      	movs	r0, r6
 8003b00:	f007 fa78 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003b04:	4642      	mov	r2, r8
 8003b06:	ab02      	add	r3, sp, #8
 8003b08:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b0a:	0030      	movs	r0, r6
 8003b0c:	230a      	movs	r3, #10
 8003b0e:	2202      	movs	r2, #2
 8003b10:	a907      	add	r1, sp, #28
 8003b12:	f007 fa6f 	bl	800aff4 <HAL_UART_Transmit>
	int ck = 3;
	if (strlen(ip[n]) > 4)
 8003b16:	0020      	movs	r0, r4
 8003b18:	f7fc faf6 	bl	8000108 <strlen>
 8003b1c:	2804      	cmp	r0, #4
 8003b1e:	d815      	bhi.n	8003b4c <StartTCPConnection+0xa8>
			//HAL_Delay(500);
		}
		else {tcp_stat[n]=0;}
	}

	SendGSMCode(" AT+QISDE=0");
 8003b20:	4c32      	ldr	r4, [pc, #200]	; (8003bec <StartTCPConnection+0x148>)
 8003b22:	0020      	movs	r0, r4
 8003b24:	f7ff fc9e 	bl	8003464 <SendGSMCode>
	HAL_Delay(350);
 8003b28:	20af      	movs	r0, #175	; 0xaf
 8003b2a:	0040      	lsls	r0, r0, #1
 8003b2c:	f004 f96e 	bl	8007e0c <HAL_Delay>
	SendGSMCode(" AT+QISDE=0");
 8003b30:	0020      	movs	r0, r4
 8003b32:	f7ff fc97 	bl	8003464 <SendGSMCode>
	HAL_Delay(350);
 8003b36:	20af      	movs	r0, #175	; 0xaf
 8003b38:	0040      	lsls	r0, r0, #1
 8003b3a:	f004 f967 	bl	8007e0c <HAL_Delay>



}
 8003b3e:	b009      	add	sp, #36	; 0x24
 8003b40:	bcf0      	pop	{r4, r5, r6, r7}
 8003b42:	46bb      	mov	fp, r7
 8003b44:	46b2      	mov	sl, r6
 8003b46:	46a9      	mov	r9, r5
 8003b48:	46a0      	mov	r8, r4
 8003b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(GSMDataC, 0, 100);
 8003b4c:	4e28      	ldr	r6, [pc, #160]	; (8003bf0 <StartTCPConnection+0x14c>)
 8003b4e:	2264      	movs	r2, #100	; 0x64
 8003b50:	2100      	movs	r1, #0
 8003b52:	0030      	movs	r0, r6
 8003b54:	f00b f926 	bl	800eda4 <memset>
		sprintf(GSMDataC, (char *)" AT+QIOPEN=%d,\"TCP\",\"",n);
 8003b58:	003a      	movs	r2, r7
 8003b5a:	0030      	movs	r0, r6
 8003b5c:	4925      	ldr	r1, [pc, #148]	; (8003bf4 <StartTCPConnection+0x150>)
 8003b5e:	f00b f8b5 	bl	800eccc <siprintf>
		strcat(GSMDataC,ip[n]);
 8003b62:	0021      	movs	r1, r4
 8003b64:	0030      	movs	r0, r6
 8003b66:	f00b f925 	bl	800edb4 <strcat>
		tcp_stat[n]=0;
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <StartTCPConnection+0x154>)
		gprsok = 0;
 8003b6c:	2403      	movs	r4, #3
		tcp_stat[n]=0;
 8003b6e:	001a      	movs	r2, r3
 8003b70:	9305      	str	r3, [sp, #20]
 8003b72:	2300      	movs	r3, #0
 8003b74:	5153      	str	r3, [r2, r5]
		gprsok = 0;
 8003b76:	4a21      	ldr	r2, [pc, #132]	; (8003bfc <StartTCPConnection+0x158>)
 8003b78:	4f21      	ldr	r7, [pc, #132]	; (8003c00 <StartTCPConnection+0x15c>)
 8003b7a:	6013      	str	r3, [r2, #0]
		while ((ck > 0) && (gprsok < 1))
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <StartTCPConnection+0x160>)
		gprsok = 0;
 8003b7e:	4690      	mov	r8, r2
 8003b80:	469b      	mov	fp, r3
 8003b82:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <StartTCPConnection+0x164>)
 8003b84:	469a      	mov	sl, r3
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN TCP Connection open ", 5000, "CONNECT OK"));
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <StartTCPConnection+0x13c>)
 8003b88:	4699      	mov	r9, r3
 8003b8a:	002b      	movs	r3, r5
 8003b8c:	0035      	movs	r5, r6
 8003b8e:	4656      	mov	r6, sl
 8003b90:	469a      	mov	sl, r3
			SendGSMCode(GSMDataC);
 8003b92:	0028      	movs	r0, r5
 8003b94:	f7ff fc66 	bl	8003464 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN TCP Connection open ", 5000, "CONNECT OK"));
 8003b98:	465b      	mov	r3, fp
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	0039      	movs	r1, r7
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	9600      	str	r6, [sp, #0]
 8003baa:	f7ff fe03 	bl	80037b4 <GetGSMReply>
 8003bae:	f7fc faab 	bl	8000108 <strlen>
 8003bb2:	4643      	mov	r3, r8
		while ((ck > 0) && (gprsok < 1))
 8003bb4:	3c01      	subs	r4, #1
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN TCP Connection open ", 5000, "CONNECT OK"));
 8003bb6:	6018      	str	r0, [r3, #0]
		while ((ck > 0) && (gprsok < 1))
 8003bb8:	2c00      	cmp	r4, #0
 8003bba:	d006      	beq.n	8003bca <StartTCPConnection+0x126>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d0e8      	beq.n	8003b92 <StartTCPConnection+0xee>
 8003bc0:	4655      	mov	r5, sl
			tcp_stat[n]=1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	9a05      	ldr	r2, [sp, #20]
 8003bc6:	5153      	str	r3, [r2, r5]
 8003bc8:	e7aa      	b.n	8003b20 <StartTCPConnection+0x7c>
		if(gprsok>0){
 8003bca:	4655      	mov	r5, sl
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d1f8      	bne.n	8003bc2 <StartTCPConnection+0x11e>
		else {tcp_stat[n]=0;}
 8003bd0:	9b05      	ldr	r3, [sp, #20]
 8003bd2:	515c      	str	r4, [r3, r5]
 8003bd4:	e7a4      	b.n	8003b20 <StartTCPConnection+0x7c>
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	20004bc8 	.word	0x20004bc8
 8003bdc:	08012c5c 	.word	0x08012c5c
 8003be0:	00001388 	.word	0x00001388
 8003be4:	00000a0d 	.word	0x00000a0d
 8003be8:	200000d0 	.word	0x200000d0
 8003bec:	08012cc4 	.word	0x08012cc4
 8003bf0:	200018e8 	.word	0x200018e8
 8003bf4:	08012c78 	.word	0x08012c78
 8003bf8:	20004cb4 	.word	0x20004cb4
 8003bfc:	200042f4 	.word	0x200042f4
 8003c00:	08013944 	.word	0x08013944
 8003c04:	08012c90 	.word	0x08012c90
 8003c08:	08012c9c 	.word	0x08012c9c

08003c0c <StopTCPConnection>:
void StopTCPConnection(int n)
{
	int ck = 1;
	gprsok = 0;
 8003c0c:	2300      	movs	r3, #0
{
 8003c0e:	b570      	push	{r4, r5, r6, lr}
	if (strlen(ip[n]) > 4)
 8003c10:	0085      	lsls	r5, r0, #2
	gprsok = 0;
 8003c12:	4e16      	ldr	r6, [pc, #88]	; (8003c6c <StopTCPConnection+0x60>)
	if (strlen(ip[n]) > 4)
 8003c14:	182a      	adds	r2, r5, r0
	gprsok = 0;
 8003c16:	6033      	str	r3, [r6, #0]
	if (strlen(ip[n]) > 4)
 8003c18:	0091      	lsls	r1, r2, #2
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <StopTCPConnection+0x64>)
 8003c1c:	1852      	adds	r2, r2, r1
{
 8003c1e:	0004      	movs	r4, r0
 8003c20:	b084      	sub	sp, #16
	if (strlen(ip[n]) > 4)
 8003c22:	1898      	adds	r0, r3, r2
 8003c24:	f7fc fa70 	bl	8000108 <strlen>
 8003c28:	2804      	cmp	r0, #4
 8003c2a:	d804      	bhi.n	8003c36 <StopTCPConnection+0x2a>
			SendGSMCode(GSMDataC);
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", 1000, "CLOSE OK"));

		}
	}
	tcp_stat[n]=0;
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <StopTCPConnection+0x68>)
 8003c30:	515a      	str	r2, [r3, r5]
}
 8003c32:	b004      	add	sp, #16
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
			sprintf(GSMDataC, (char *)" AT+QICLOSE=%d",n);
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <StopTCPConnection+0x6c>)
 8003c38:	0022      	movs	r2, r4
 8003c3a:	001c      	movs	r4, r3
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	490f      	ldr	r1, [pc, #60]	; (8003c7c <StopTCPConnection+0x70>)
 8003c40:	f00b f844 	bl	800eccc <siprintf>
			SendGSMCode(GSMDataC);
 8003c44:	0020      	movs	r0, r4
 8003c46:	f7ff fc0d 	bl	8003464 <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", 1000, "CLOSE OK"));
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <StopTCPConnection+0x74>)
 8003c4c:	490d      	ldr	r1, [pc, #52]	; (8003c84 <StopTCPConnection+0x78>)
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	23fa      	movs	r3, #250	; 0xfa
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <StopTCPConnection+0x7c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2005      	movs	r0, #5
 8003c5e:	000b      	movs	r3, r1
 8003c60:	f7ff fda8 	bl	80037b4 <GetGSMReply>
 8003c64:	f7fc fa50 	bl	8000108 <strlen>
 8003c68:	6030      	str	r0, [r6, #0]
 8003c6a:	e7df      	b.n	8003c2c <StopTCPConnection+0x20>
 8003c6c:	200042f4 	.word	0x200042f4
 8003c70:	200000d0 	.word	0x200000d0
 8003c74:	20004cb4 	.word	0x20004cb4
 8003c78:	200018e8 	.word	0x200018e8
 8003c7c:	08012cd0 	.word	0x08012cd0
 8003c80:	08012ce0 	.word	0x08012ce0
 8003c84:	08013944 	.word	0x08013944
 8003c88:	08012cec 	.word	0x08012cec

08003c8c <SendTCPdata>:
void SendTCPdata(char *data,int n)
{
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	46de      	mov	lr, fp
 8003c90:	4645      	mov	r5, r8
 8003c92:	4657      	mov	r7, sl
 8003c94:	464e      	mov	r6, r9
 8003c96:	b5e0      	push	{r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003c98:	260c      	movs	r6, #12
 8003c9a:	4dae      	ldr	r5, [pc, #696]	; (8003f54 <SendTCPdata+0x2c8>)
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	4680      	mov	r8, r0
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ca2:	220b      	movs	r2, #11
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ca4:	621e      	str	r6, [r3, #32]
 8003ca6:	000f      	movs	r7, r1
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ca8:	4bab      	ldr	r3, [pc, #684]	; (8003f58 <SendTCPdata+0x2cc>)
 8003caa:	49ac      	ldr	r1, [pc, #688]	; (8003f5c <SendTCPdata+0x2d0>)
 8003cac:	0028      	movs	r0, r5
 8003cae:	f007 f9a1 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003cb2:	466b      	mov	r3, sp
 8003cb4:	4caa      	ldr	r4, [pc, #680]	; (8003f60 <SendTCPdata+0x2d4>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003cb6:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003cb8:	809c      	strh	r4, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003cba:	a901      	add	r1, sp, #4
 8003cbc:	230a      	movs	r3, #10
 8003cbe:	0028      	movs	r0, r5
 8003cc0:	f007 f998 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cc4:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003cc6:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cc8:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003cca:	f7fc fa1d 	bl	8000108 <strlen>
 8003cce:	4641      	mov	r1, r8
 8003cd0:	b282      	uxth	r2, r0
 8003cd2:	4ba1      	ldr	r3, [pc, #644]	; (8003f58 <SendTCPdata+0x2cc>)
 8003cd4:	0028      	movs	r0, r5
 8003cd6:	f007 f98d 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003cda:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003cdc:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003cde:	809c      	strh	r4, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ce0:	0028      	movs	r0, r5
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	a901      	add	r1, sp, #4
 8003ce6:	f007 f985 	bl	800aff4 <HAL_UART_Transmit>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003cea:	4c9e      	ldr	r4, [pc, #632]	; (8003f64 <SendTCPdata+0x2d8>)
 8003cec:	7823      	ldrb	r3, [r4, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <SendTCPdata+0x90>
		memset(GSMData, 0, 4500);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4a9c      	ldr	r2, [pc, #624]	; (8003f68 <SendTCPdata+0x2dc>)
 8003cf6:	0020      	movs	r0, r4
 8003cf8:	f00b f854 	bl	800eda4 <memset>
		HAL_Delay(300);
 8003cfc:	2096      	movs	r0, #150	; 0x96
 8003cfe:	0040      	lsls	r0, r0, #1
 8003d00:	f004 f884 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003d04:	7823      	ldrb	r3, [r4, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <SendTCPdata+0x90>
		memset(GSMData, 0, 4500);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	0020      	movs	r0, r4
 8003d0e:	4a96      	ldr	r2, [pc, #600]	; (8003f68 <SendTCPdata+0x2dc>)
 8003d10:	f00b f848 	bl	800eda4 <memset>
		HAL_Delay(300);
 8003d14:	2096      	movs	r0, #150	; 0x96
 8003d16:	0040      	lsls	r0, r0, #1
 8003d18:	f004 f878 	bl	8007e0c <HAL_Delay>
	Debug_Tx("DATATOSEND:");Debug_Tx(data);
	//HAL_Delay(10000);
	Wait_gsmClear(2);

	int ck = 1;
	if (strlen(ip[n]) > 4)
 8003d1c:	00bb      	lsls	r3, r7, #2
 8003d1e:	4699      	mov	r9, r3
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	4e92      	ldr	r6, [pc, #584]	; (8003f6c <SendTCPdata+0x2e0>)
 8003d24:	009a      	lsls	r2, r3, #2
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	18f6      	adds	r6, r6, r3
 8003d2a:	0030      	movs	r0, r6
 8003d2c:	f7fc f9ec 	bl	8000108 <strlen>
 8003d30:	2804      	cmp	r0, #4
 8003d32:	d95d      	bls.n	8003df0 <SendTCPdata+0x164>
	{
		if (tcp_stat[n] <1)	{ StartTCPConnection(n);}
 8003d34:	464a      	mov	r2, r9
 8003d36:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <SendTCPdata+0x2e4>)
 8003d38:	469a      	mov	sl, r3
 8003d3a:	58d3      	ldr	r3, [r2, r3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dd5e      	ble.n	8003dfe <SendTCPdata+0x172>
		if (tcp_stat[n] > 0)
		{
			ck = 1;
			gprsok =0;
 8003d40:	4b8c      	ldr	r3, [pc, #560]	; (8003f74 <SendTCPdata+0x2e8>)
			//while ((ck > 0) && (gprsok < 1))
			{
				sprintf(GSMDataC, (char *)" AT+QISEND=%d,%d",n,strlen(data));
 8003d42:	4640      	mov	r0, r8
			gprsok =0;
 8003d44:	469a      	mov	sl, r3
 8003d46:	2300      	movs	r3, #0
 8003d48:	469b      	mov	fp, r3
 8003d4a:	4653      	mov	r3, sl
 8003d4c:	465a      	mov	r2, fp
 8003d4e:	601a      	str	r2, [r3, #0]
				sprintf(GSMDataC, (char *)" AT+QISEND=%d,%d",n,strlen(data));
 8003d50:	f7fc f9da 	bl	8000108 <strlen>
 8003d54:	0003      	movs	r3, r0
 8003d56:	4888      	ldr	r0, [pc, #544]	; (8003f78 <SendTCPdata+0x2ec>)
 8003d58:	003a      	movs	r2, r7
 8003d5a:	4681      	mov	r9, r0
 8003d5c:	4987      	ldr	r1, [pc, #540]	; (8003f7c <SendTCPdata+0x2f0>)
 8003d5e:	f00a ffb5 	bl	800eccc <siprintf>

				SendGSMCode(GSMDataC);
 8003d62:	4648      	mov	r0, r9
 8003d64:	f7ff fb7e 	bl	8003464 <SendGSMCode>
				gprsok = waitForResponse(">",10000);
 8003d68:	4985      	ldr	r1, [pc, #532]	; (8003f80 <SendTCPdata+0x2f4>)
 8003d6a:	4886      	ldr	r0, [pc, #536]	; (8003f84 <SendTCPdata+0x2f8>)
 8003d6c:	f7ff fcd8 	bl	8003720 <waitForResponse>
 8003d70:	4653      	mov	r3, sl
 8003d72:	6018      	str	r0, [r3, #0]
				//gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data input1", 4000, ">"));
			}
			HAL_Delay(300);
 8003d74:	2096      	movs	r0, #150	; 0x96
 8003d76:	0040      	lsls	r0, r0, #1
 8003d78:	f004 f848 	bl	8007e0c <HAL_Delay>
			if (gprsok > 0)
 8003d7c:	4653      	mov	r3, sl
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	dc00      	bgt.n	8003d86 <SendTCPdata+0xfa>
 8003d84:	e10c      	b.n	8003fa0 <SendTCPdata+0x314>
			{
				ck = 1;
				gprsok = 0;
 8003d86:	4653      	mov	r3, sl
 8003d88:	465a      	mov	r2, fp
				{
					ck = ck - 1;
					SendGSMData(data);
 8003d8a:	4640      	mov	r0, r8
				gprsok = 0;
 8003d8c:	601a      	str	r2, [r3, #0]
					SendGSMData(data);
 8003d8e:	f7ff fc39 	bl	8003604 <SendGSMData>
					gprsok = waitForResponse("SEND OK",30000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 8003d92:	487d      	ldr	r0, [pc, #500]	; (8003f88 <SendTCPdata+0x2fc>)
 8003d94:	497d      	ldr	r1, [pc, #500]	; (8003f8c <SendTCPdata+0x300>)
 8003d96:	f7ff fcc3 	bl	8003720 <waitForResponse>
 8003d9a:	4653      	mov	r3, sl
 8003d9c:	6018      	str	r0, [r3, #0]

				}
				if (gprsok<1){
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	dc00      	bgt.n	8003da4 <SendTCPdata+0x118>
 8003da2:	e079      	b.n	8003e98 <SendTCPdata+0x20c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003da4:	220c      	movs	r2, #12
 8003da6:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003da8:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003daa:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003dac:	4978      	ldr	r1, [pc, #480]	; (8003f90 <SendTCPdata+0x304>)
 8003dae:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <SendTCPdata+0x2cc>)
 8003db0:	3a04      	subs	r2, #4
 8003db2:	f007 f91f 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003db6:	466a      	mov	r2, sp
 8003db8:	4b69      	ldr	r3, [pc, #420]	; (8003f60 <SendTCPdata+0x2d4>)
 8003dba:	8093      	strh	r3, [r2, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003dbc:	230a      	movs	r3, #10
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	0028      	movs	r0, r5
 8003dc2:	a901      	add	r1, sp, #4
 8003dc4:	f007 f916 	bl	800aff4 <HAL_UART_Transmit>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003dc8:	7823      	ldrb	r3, [r4, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <SendTCPdata+0x164>
 8003dce:	250a      	movs	r5, #10
 8003dd0:	e002      	b.n	8003dd8 <SendTCPdata+0x14c>
 8003dd2:	3d01      	subs	r5, #1
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	d00b      	beq.n	8003df0 <SendTCPdata+0x164>
		memset(GSMData, 0, 4500);
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4a63      	ldr	r2, [pc, #396]	; (8003f68 <SendTCPdata+0x2dc>)
 8003ddc:	0020      	movs	r0, r4
 8003dde:	f00a ffe1 	bl	800eda4 <memset>
		HAL_Delay(300);
 8003de2:	2096      	movs	r0, #150	; 0x96
 8003de4:	0040      	lsls	r0, r0, #1
 8003de6:	f004 f811 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003dea:	7823      	ldrb	r3, [r4, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <SendTCPdata+0x146>
		}
	}



}
 8003df0:	b003      	add	sp, #12
 8003df2:	bcf0      	pop	{r4, r5, r6, r7}
 8003df4:	46bb      	mov	fp, r7
 8003df6:	46b2      	mov	sl, r6
 8003df8:	46a9      	mov	r9, r5
 8003dfa:	46a0      	mov	r8, r4
 8003dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tcp_stat[n] <1)	{ StartTCPConnection(n);}
 8003dfe:	0038      	movs	r0, r7
 8003e00:	f7ff fe50 	bl	8003aa4 <StartTCPConnection>
		if (tcp_stat[n] > 0)
 8003e04:	4653      	mov	r3, sl
 8003e06:	464a      	mov	r2, r9
 8003e08:	58d3      	ldr	r3, [r2, r3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dc98      	bgt.n	8003d40 <SendTCPdata+0xb4>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e0e:	220c      	movs	r2, #12
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	4691      	mov	r9, r2
 8003e14:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e16:	495f      	ldr	r1, [pc, #380]	; (8003f94 <SendTCPdata+0x308>)
 8003e18:	4b4f      	ldr	r3, [pc, #316]	; (8003f58 <SendTCPdata+0x2cc>)
 8003e1a:	3224      	adds	r2, #36	; 0x24
 8003e1c:	0028      	movs	r0, r5
 8003e1e:	f007 f8e9 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003e22:	4b4f      	ldr	r3, [pc, #316]	; (8003f60 <SendTCPdata+0x2d4>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e24:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003e26:	4698      	mov	r8, r3
 8003e28:	466b      	mov	r3, sp
 8003e2a:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e2c:	0028      	movs	r0, r5
	char newline[2] = "\r\n";
 8003e2e:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e30:	230a      	movs	r3, #10
 8003e32:	2202      	movs	r2, #2
 8003e34:	f007 f8de 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e38:	464a      	mov	r2, r9
 8003e3a:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e3c:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e3e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e40:	f7fc f962 	bl	8000108 <strlen>
 8003e44:	0031      	movs	r1, r6
 8003e46:	b282      	uxth	r2, r0
 8003e48:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <SendTCPdata+0x2cc>)
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	f007 f8d2 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003e50:	466b      	mov	r3, sp
 8003e52:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e54:	0028      	movs	r0, r5
	char newline[2] = "\r\n";
 8003e56:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e58:	a901      	add	r1, sp, #4
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f007 f8c9 	bl	800aff4 <HAL_UART_Transmit>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003e62:	7823      	ldrb	r3, [r4, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <SendTCPdata+0x1fe>
 8003e68:	250a      	movs	r5, #10
 8003e6a:	e002      	b.n	8003e72 <SendTCPdata+0x1e6>
 8003e6c:	3d01      	subs	r5, #1
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	d00b      	beq.n	8003e8a <SendTCPdata+0x1fe>
		memset(GSMData, 0, 4500);
 8003e72:	2100      	movs	r1, #0
 8003e74:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <SendTCPdata+0x2dc>)
 8003e76:	0020      	movs	r0, r4
 8003e78:	f00a ff94 	bl	800eda4 <memset>
		HAL_Delay(300);
 8003e7c:	2096      	movs	r0, #150	; 0x96
 8003e7e:	0040      	lsls	r0, r0, #1
 8003e80:	f003 ffc4 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003e84:	7823      	ldrb	r3, [r4, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <SendTCPdata+0x1e0>

void ResetTCP(int n)
{
	//EndTransfer();
	Wait_gsmClear(10);
	StopTCPConnection(n);
 8003e8a:	0038      	movs	r0, r7
 8003e8c:	f7ff febe 	bl	8003c0c <StopTCPConnection>
	StartTCPConnection(n);
 8003e90:	0038      	movs	r0, r7
 8003e92:	f7ff fe07 	bl	8003aa4 <StartTCPConnection>
}
 8003e96:	e7ab      	b.n	8003df0 <SendTCPdata+0x164>
					EndTransfer();
 8003e98:	f7ff fbf4 	bl	8003684 <EndTransfer>
					EndTransfer();
 8003e9c:	f7ff fbf2 	bl	8003684 <EndTransfer>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ea0:	220c      	movs	r2, #12
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	4690      	mov	r8, r2
 8003ea6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ea8:	493b      	ldr	r1, [pc, #236]	; (8003f98 <SendTCPdata+0x30c>)
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <SendTCPdata+0x2cc>)
 8003eac:	3227      	adds	r2, #39	; 0x27
 8003eae:	0028      	movs	r0, r5
 8003eb0:	f007 f8a0 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003eb4:	466b      	mov	r3, sp
 8003eb6:	4f2a      	ldr	r7, [pc, #168]	; (8003f60 <SendTCPdata+0x2d4>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003eb8:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003eba:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ebc:	a901      	add	r1, sp, #4
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	0028      	movs	r0, r5
 8003ec2:	f007 f897 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ec6:	4642      	mov	r2, r8
 8003ec8:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003eca:	4934      	ldr	r1, [pc, #208]	; (8003f9c <SendTCPdata+0x310>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ecc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ece:	0028      	movs	r0, r5
 8003ed0:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <SendTCPdata+0x2cc>)
 8003ed2:	3228      	adds	r2, #40	; 0x28
 8003ed4:	4689      	mov	r9, r1
 8003ed6:	f007 f88d 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003eda:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003edc:	a901      	add	r1, sp, #4
 8003ede:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003ee0:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ee2:	0028      	movs	r0, r5
 8003ee4:	230a      	movs	r3, #10
 8003ee6:	f007 f885 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003eea:	4642      	mov	r2, r8
 8003eec:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003eee:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ef0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ef2:	f7fc f909 	bl	8000108 <strlen>
 8003ef6:	0031      	movs	r1, r6
 8003ef8:	b282      	uxth	r2, r0
 8003efa:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <SendTCPdata+0x2cc>)
 8003efc:	0028      	movs	r0, r5
 8003efe:	f007 f879 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f02:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f04:	a901      	add	r1, sp, #4
 8003f06:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f08:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f0a:	0028      	movs	r0, r5
 8003f0c:	230a      	movs	r3, #10
 8003f0e:	f007 f871 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f12:	4642      	mov	r2, r8
 8003f14:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f16:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f18:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f1a:	f7fc f8f5 	bl	8000108 <strlen>
 8003f1e:	0021      	movs	r1, r4
 8003f20:	b282      	uxth	r2, r0
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <SendTCPdata+0x2cc>)
 8003f24:	0028      	movs	r0, r5
 8003f26:	f007 f865 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f2a:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f2c:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f2e:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f30:	a901      	add	r1, sp, #4
 8003f32:	230a      	movs	r3, #10
 8003f34:	0028      	movs	r0, r5
 8003f36:	f007 f85d 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f3e:	4649      	mov	r1, r9
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f40:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f42:	0028      	movs	r0, r5
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <SendTCPdata+0x2cc>)
 8003f46:	3228      	adds	r2, #40	; 0x28
 8003f48:	f007 f854 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f4c:	466b      	mov	r3, sp
 8003f4e:	809f      	strh	r7, [r3, #4]
 8003f50:	e734      	b.n	8003dbc <SendTCPdata+0x130>
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	20004bc8 	.word	0x20004bc8
 8003f58:	00001388 	.word	0x00001388
 8003f5c:	08012d10 	.word	0x08012d10
 8003f60:	00000a0d 	.word	0x00000a0d
 8003f64:	20000754 	.word	0x20000754
 8003f68:	00001194 	.word	0x00001194
 8003f6c:	200000d0 	.word	0x200000d0
 8003f70:	20004cb4 	.word	0x20004cb4
 8003f74:	200042f4 	.word	0x200042f4
 8003f78:	200018e8 	.word	0x200018e8
 8003f7c:	08012d1c 	.word	0x08012d1c
 8003f80:	00002710 	.word	0x00002710
 8003f84:	08012d30 	.word	0x08012d30
 8003f88:	08012d34 	.word	0x08012d34
 8003f8c:	00007530 	.word	0x00007530
 8003f90:	08012da8 	.word	0x08012da8
 8003f94:	08012df8 	.word	0x08012df8
 8003f98:	08012d3c 	.word	0x08012d3c
 8003f9c:	08012d70 	.word	0x08012d70
				EndTransfer();
 8003fa0:	f7ff fb70 	bl	8003684 <EndTransfer>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fa4:	220c      	movs	r2, #12
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	4691      	mov	r9, r2
 8003faa:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fac:	4952      	ldr	r1, [pc, #328]	; (80040f8 <SendTCPdata+0x46c>)
 8003fae:	4b53      	ldr	r3, [pc, #332]	; (80040fc <SendTCPdata+0x470>)
 8003fb0:	3218      	adds	r2, #24
 8003fb2:	0028      	movs	r0, r5
 8003fb4:	f007 f81e 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003fb8:	4b51      	ldr	r3, [pc, #324]	; (8004100 <SendTCPdata+0x474>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fba:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003fbc:	4698      	mov	r8, r3
 8003fbe:	466b      	mov	r3, sp
 8003fc0:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fc2:	0028      	movs	r0, r5
	char newline[2] = "\r\n";
 8003fc4:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fc6:	230a      	movs	r3, #10
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f007 f813 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fce:	464a      	mov	r2, r9
 8003fd0:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fd2:	494c      	ldr	r1, [pc, #304]	; (8004104 <SendTCPdata+0x478>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fd4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fd6:	0028      	movs	r0, r5
 8003fd8:	4b48      	ldr	r3, [pc, #288]	; (80040fc <SendTCPdata+0x470>)
 8003fda:	3228      	adds	r2, #40	; 0x28
 8003fdc:	468a      	mov	sl, r1
 8003fde:	f007 f809 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003fe2:	466b      	mov	r3, sp
 8003fe4:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fe6:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003fe8:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fea:	0028      	movs	r0, r5
 8003fec:	230a      	movs	r3, #10
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f007 f800 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ff4:	464a      	mov	r2, r9
 8003ff6:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ff8:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ffa:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ffc:	f7fc f884 	bl	8000108 <strlen>
 8004000:	0031      	movs	r1, r6
 8004002:	b282      	uxth	r2, r0
 8004004:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <SendTCPdata+0x470>)
 8004006:	0028      	movs	r0, r5
 8004008:	f006 fff4 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800400c:	466b      	mov	r3, sp
 800400e:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004010:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004012:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004014:	0028      	movs	r0, r5
 8004016:	230a      	movs	r3, #10
 8004018:	2202      	movs	r2, #2
 800401a:	f006 ffeb 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800401e:	464a      	mov	r2, r9
 8004020:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004022:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004024:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004026:	f7fc f86f 	bl	8000108 <strlen>
 800402a:	0021      	movs	r1, r4
 800402c:	b282      	uxth	r2, r0
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <SendTCPdata+0x470>)
 8004030:	0028      	movs	r0, r5
 8004032:	f006 ffdf 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004036:	466b      	mov	r3, sp
 8004038:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800403a:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800403c:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800403e:	0028      	movs	r0, r5
 8004040:	230a      	movs	r3, #10
 8004042:	2202      	movs	r2, #2
 8004044:	f006 ffd6 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004048:	464a      	mov	r2, r9
 800404a:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800404c:	4651      	mov	r1, sl
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800404e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004050:	0028      	movs	r0, r5
 8004052:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <SendTCPdata+0x470>)
 8004054:	3228      	adds	r2, #40	; 0x28
 8004056:	f006 ffcd 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800405a:	466b      	mov	r3, sp
 800405c:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800405e:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004060:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004062:	0028      	movs	r0, r5
 8004064:	230a      	movs	r3, #10
 8004066:	2202      	movs	r2, #2
 8004068:	f006 ffc4 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800406c:	464a      	mov	r2, r9
 800406e:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004070:	4925      	ldr	r1, [pc, #148]	; (8004108 <SendTCPdata+0x47c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004072:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004074:	0028      	movs	r0, r5
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <SendTCPdata+0x470>)
 8004078:	320c      	adds	r2, #12
 800407a:	f006 ffbb 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800407e:	466b      	mov	r3, sp
 8004080:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004082:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004084:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004086:	0028      	movs	r0, r5
 8004088:	230a      	movs	r3, #10
 800408a:	2202      	movs	r2, #2
 800408c:	f006 ffb2 	bl	800aff4 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004090:	464a      	mov	r2, r9
 8004092:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004094:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004096:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004098:	f7fc f836 	bl	8000108 <strlen>
 800409c:	0031      	movs	r1, r6
 800409e:	b282      	uxth	r2, r0
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <SendTCPdata+0x470>)
 80040a2:	0028      	movs	r0, r5
 80040a4:	f006 ffa6 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80040a8:	466b      	mov	r3, sp
 80040aa:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80040ac:	0028      	movs	r0, r5
	char newline[2] = "\r\n";
 80040ae:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80040b0:	a901      	add	r1, sp, #4
 80040b2:	230a      	movs	r3, #10
 80040b4:	2202      	movs	r2, #2
 80040b6:	f006 ff9d 	bl	800aff4 <HAL_UART_Transmit>
	while ((strlen(GSMData) > 0) && (i> 0))
 80040ba:	7823      	ldrb	r3, [r4, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <SendTCPdata+0x456>
 80040c0:	250a      	movs	r5, #10
 80040c2:	e002      	b.n	80040ca <SendTCPdata+0x43e>
 80040c4:	3d01      	subs	r5, #1
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	d00b      	beq.n	80040e2 <SendTCPdata+0x456>
		memset(GSMData, 0, 4500);
 80040ca:	2100      	movs	r1, #0
 80040cc:	4a0f      	ldr	r2, [pc, #60]	; (800410c <SendTCPdata+0x480>)
 80040ce:	0020      	movs	r0, r4
 80040d0:	f00a fe68 	bl	800eda4 <memset>
		HAL_Delay(300);
 80040d4:	2096      	movs	r0, #150	; 0x96
 80040d6:	0040      	lsls	r0, r0, #1
 80040d8:	f003 fe98 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 80040dc:	7823      	ldrb	r3, [r4, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <SendTCPdata+0x438>
	StopTCPConnection(n);
 80040e2:	0038      	movs	r0, r7
 80040e4:	f7ff fd92 	bl	8003c0c <StopTCPConnection>
	StartTCPConnection(n);
 80040e8:	0038      	movs	r0, r7
 80040ea:	f7ff fcdb 	bl	8003aa4 <StartTCPConnection>
	while ((strlen(GSMData) > 0) && (i> 0))
 80040ee:	7823      	ldrb	r3, [r4, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d000      	beq.n	80040f6 <SendTCPdata+0x46a>
 80040f4:	e66b      	b.n	8003dce <SendTCPdata+0x142>
 80040f6:	e67b      	b.n	8003df0 <SendTCPdata+0x164>
 80040f8:	08012db4 	.word	0x08012db4
 80040fc:	00001388 	.word	0x00001388
 8004100:	00000a0d 	.word	0x00000a0d
 8004104:	08012d70 	.word	0x08012d70
 8004108:	08012ddc 	.word	0x08012ddc
 800410c:	00001194 	.word	0x00001194

08004110 <GSMCellInfo>:
	memset(SS0, 0, 4);
 8004110:	4bc2      	ldr	r3, [pc, #776]	; (800441c <GSMCellInfo+0x30c>)
{
 8004112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004114:	4657      	mov	r7, sl
	memset(SS0, 0, 4);
 8004116:	469a      	mov	sl, r3
{
 8004118:	46de      	mov	lr, fp
 800411a:	464e      	mov	r6, r9
 800411c:	4645      	mov	r5, r8
	memset(SS0, 0, 4);
 800411e:	2300      	movs	r3, #0
 8004120:	4652      	mov	r2, sl
{
 8004122:	b5e0      	push	{r5, r6, r7, lr}
	memset(SS1, 0, 4);
 8004124:	4cbe      	ldr	r4, [pc, #760]	; (8004420 <GSMCellInfo+0x310>)
	memset(SS2, 0, 4);
 8004126:	4dbf      	ldr	r5, [pc, #764]	; (8004424 <GSMCellInfo+0x314>)
	memset(SS3, 0, 4);
 8004128:	4ebf      	ldr	r6, [pc, #764]	; (8004428 <GSMCellInfo+0x318>)
	memset(SS0, 0, 4);
 800412a:	8053      	strh	r3, [r2, #2]
	memset(SS4, 0, 4);
 800412c:	4abf      	ldr	r2, [pc, #764]	; (800442c <GSMCellInfo+0x31c>)
	memset(SS1, 0, 4);
 800412e:	8063      	strh	r3, [r4, #2]
	memset(SS2, 0, 4);
 8004130:	806b      	strh	r3, [r5, #2]
	memset(SS4, 0, 4);
 8004132:	8053      	strh	r3, [r2, #2]
	memset(SS3, 0, 4);
 8004134:	8073      	strh	r3, [r6, #2]
	memset(MCC0, 0, 5);
 8004136:	4bbe      	ldr	r3, [pc, #760]	; (8004430 <GSMCellInfo+0x320>)
{
 8004138:	b0a1      	sub	sp, #132	; 0x84
	memset(MCC0, 0, 5);
 800413a:	2100      	movs	r1, #0
	memset(SS4, 0, 4);
 800413c:	9219      	str	r2, [sp, #100]	; 0x64
	memset(MCC0, 0, 5);
 800413e:	1c98      	adds	r0, r3, #2
 8004140:	2203      	movs	r2, #3
 8004142:	4698      	mov	r8, r3
	memset(SS1, 0, 4);
 8004144:	941b      	str	r4, [sp, #108]	; 0x6c
	memset(SS2, 0, 4);
 8004146:	951c      	str	r5, [sp, #112]	; 0x70
	memset(SS3, 0, 4);
 8004148:	961d      	str	r6, [sp, #116]	; 0x74
	memset(MCC0, 0, 5);
 800414a:	f00a fe2b 	bl	800eda4 <memset>
	memset(MNC0, 0, 5);
 800414e:	4bb9      	ldr	r3, [pc, #740]	; (8004434 <GSMCellInfo+0x324>)
 8004150:	2203      	movs	r2, #3
 8004152:	2100      	movs	r1, #0
 8004154:	1c98      	adds	r0, r3, #2
 8004156:	469b      	mov	fp, r3
 8004158:	f00a fe24 	bl	800eda4 <memset>
	memset(LAC0, 0, 6);
 800415c:	4bb6      	ldr	r3, [pc, #728]	; (8004438 <GSMCellInfo+0x328>)
 800415e:	2204      	movs	r2, #4
 8004160:	1c98      	adds	r0, r3, #2
 8004162:	2100      	movs	r1, #0
 8004164:	9311      	str	r3, [sp, #68]	; 0x44
 8004166:	f00a fe1d 	bl	800eda4 <memset>
	memset(LAC1, 0, 6);
 800416a:	48b4      	ldr	r0, [pc, #720]	; (800443c <GSMCellInfo+0x32c>)
 800416c:	2204      	movs	r2, #4
 800416e:	2100      	movs	r1, #0
 8004170:	901a      	str	r0, [sp, #104]	; 0x68
 8004172:	3002      	adds	r0, #2
 8004174:	f00a fe16 	bl	800eda4 <memset>
	memset(LAC2, 0, 6);
 8004178:	4fb1      	ldr	r7, [pc, #708]	; (8004440 <GSMCellInfo+0x330>)
 800417a:	2204      	movs	r2, #4
 800417c:	2100      	movs	r1, #0
 800417e:	1cb8      	adds	r0, r7, #2
 8004180:	9712      	str	r7, [sp, #72]	; 0x48
 8004182:	f00a fe0f 	bl	800eda4 <memset>
	memset(LAC3, 0, 6);
 8004186:	49af      	ldr	r1, [pc, #700]	; (8004444 <GSMCellInfo+0x334>)
 8004188:	2204      	movs	r2, #4
 800418a:	9113      	str	r1, [sp, #76]	; 0x4c
 800418c:	1c88      	adds	r0, r1, #2
 800418e:	2100      	movs	r1, #0
 8004190:	f00a fe08 	bl	800eda4 <memset>
	memset(LAC4, 0, 6);
 8004194:	4bac      	ldr	r3, [pc, #688]	; (8004448 <GSMCellInfo+0x338>)
 8004196:	2204      	movs	r2, #4
 8004198:	1c98      	adds	r0, r3, #2
 800419a:	2100      	movs	r1, #0
 800419c:	9314      	str	r3, [sp, #80]	; 0x50
 800419e:	f00a fe01 	bl	800eda4 <memset>
	memset(CID4, 0, 6);
 80041a2:	4faa      	ldr	r7, [pc, #680]	; (800444c <GSMCellInfo+0x33c>)
 80041a4:	2204      	movs	r2, #4
 80041a6:	2100      	movs	r1, #0
 80041a8:	1cb8      	adds	r0, r7, #2
 80041aa:	9715      	str	r7, [sp, #84]	; 0x54
 80041ac:	f00a fdfa 	bl	800eda4 <memset>
	memset(CID3, 0, 6);
 80041b0:	48a7      	ldr	r0, [pc, #668]	; (8004450 <GSMCellInfo+0x340>)
 80041b2:	2204      	movs	r2, #4
 80041b4:	2100      	movs	r1, #0
 80041b6:	9016      	str	r0, [sp, #88]	; 0x58
 80041b8:	3002      	adds	r0, #2
 80041ba:	f00a fdf3 	bl	800eda4 <memset>
	memset(CID2, 0, 6);
 80041be:	4aa5      	ldr	r2, [pc, #660]	; (8004454 <GSMCellInfo+0x344>)
 80041c0:	2100      	movs	r1, #0
 80041c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80041c4:	1c90      	adds	r0, r2, #2
 80041c6:	2204      	movs	r2, #4
 80041c8:	f00a fdec 	bl	800eda4 <memset>
	memset(CID1, 0, 6);
 80041cc:	4ba2      	ldr	r3, [pc, #648]	; (8004458 <GSMCellInfo+0x348>)
 80041ce:	2204      	movs	r2, #4
 80041d0:	1c98      	adds	r0, r3, #2
 80041d2:	2100      	movs	r1, #0
 80041d4:	9318      	str	r3, [sp, #96]	; 0x60
 80041d6:	f00a fde5 	bl	800eda4 <memset>
	memset(CID0, 0, 6);
 80041da:	4fa0      	ldr	r7, [pc, #640]	; (800445c <GSMCellInfo+0x34c>)
 80041dc:	2204      	movs	r2, #4
 80041de:	2100      	movs	r1, #0
 80041e0:	1cb8      	adds	r0, r7, #2
 80041e2:	f00a fddf 	bl	800eda4 <memset>
	strcpy(MCC0, "x\0");
 80041e6:	2378      	movs	r3, #120	; 0x78
 80041e8:	4641      	mov	r1, r8
 80041ea:	800b      	strh	r3, [r1, #0]
	strcpy(MNC0, "x\0");
 80041ec:	4659      	mov	r1, fp
 80041ee:	800b      	strh	r3, [r1, #0]
	strcpy(LAC0, "x\0");
 80041f0:	9911      	ldr	r1, [sp, #68]	; 0x44
	strcpy(SS1, "x\0");
 80041f2:	8023      	strh	r3, [r4, #0]
	strcpy(LAC0, "x\0");
 80041f4:	800b      	strh	r3, [r1, #0]
	strcpy(SS0, "x\0");
 80041f6:	4651      	mov	r1, sl
 80041f8:	800b      	strh	r3, [r1, #0]
	strcpy(LAC2, "x\0");
 80041fa:	9912      	ldr	r1, [sp, #72]	; 0x48
	strcpy(CID1, "x\0");
 80041fc:	9c18      	ldr	r4, [sp, #96]	; 0x60
	strcpy(LAC2, "x\0");
 80041fe:	800b      	strh	r3, [r1, #0]
	strcpy(LAC1, "x\0");
 8004200:	981a      	ldr	r0, [sp, #104]	; 0x68
	strcpy(LAC3, "x\0");
 8004202:	9913      	ldr	r1, [sp, #76]	; 0x4c
	strcpy(SS4, "x\0");
 8004204:	9a19      	ldr	r2, [sp, #100]	; 0x64
	strcpy(CID1, "x\0");
 8004206:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 8004208:	8003      	strh	r3, [r0, #0]
	strcpy(LAC3, "x\0");
 800420a:	800b      	strh	r3, [r1, #0]
	strcpy(SS4, "x\0");
 800420c:	8013      	strh	r3, [r2, #0]
	strcpy(CID3, "x\0");
 800420e:	9816      	ldr	r0, [sp, #88]	; 0x58
	strcpy(CID4, "x\0");
 8004210:	9915      	ldr	r1, [sp, #84]	; 0x54
	strcpy(LAC4, "x\0");
 8004212:	9a14      	ldr	r2, [sp, #80]	; 0x50
	strcpy(CID2, "x\0");
 8004214:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	strcpy(SS2, "x\0");
 8004216:	802b      	strh	r3, [r5, #0]
	strcpy(CID3, "x\0");
 8004218:	8003      	strh	r3, [r0, #0]
	strcpy(CID4, "x\0");
 800421a:	800b      	strh	r3, [r1, #0]
	strcpy(LAC4, "x\0");
 800421c:	8013      	strh	r3, [r2, #0]
	strcpy(CID0, "x\0");
 800421e:	803b      	strh	r3, [r7, #0]
	strcpy(CID2, "x\0");
 8004220:	8023      	strh	r3, [r4, #0]
	strcpy(SS3, "x\0");
 8004222:	8033      	strh	r3, [r6, #0]
	memset(GSMData, 0, 4500);
 8004224:	4b8e      	ldr	r3, [pc, #568]	; (8004460 <GSMCellInfo+0x350>)
 8004226:	2100      	movs	r1, #0
 8004228:	0018      	movs	r0, r3
 800422a:	4a8e      	ldr	r2, [pc, #568]	; (8004464 <GSMCellInfo+0x354>)
 800422c:	4699      	mov	r9, r3
 800422e:	f00a fdb9 	bl	800eda4 <memset>
	SendGSMCodeL(" AT+QENG?");
 8004232:	488d      	ldr	r0, [pc, #564]	; (8004468 <GSMCellInfo+0x358>)
 8004234:	f7ff f97e 	bl	8003534 <SendGSMCodeL>
	HAL_Delay(500);
 8004238:	20fa      	movs	r0, #250	; 0xfa
 800423a:	0040      	lsls	r0, r0, #1
 800423c:	f003 fde6 	bl	8007e0c <HAL_Delay>
	char *m0 = strstr(GSMData, "+QENG: 0");
 8004240:	4648      	mov	r0, r9
 8004242:	498a      	ldr	r1, [pc, #552]	; (800446c <GSMCellInfo+0x35c>)
 8004244:	f00a fe5e 	bl	800ef04 <strstr>
 8004248:	1e05      	subs	r5, r0, #0
 800424a:	901e      	str	r0, [sp, #120]	; 0x78
	if ((m0 != NULL) && (strlen(m0) > 1))
 800424c:	d014      	beq.n	8004278 <GSMCellInfo+0x168>
 800424e:	f7fb ff5b 	bl	8000108 <strlen>
 8004252:	2801      	cmp	r0, #1
 8004254:	d910      	bls.n	8004278 <GSMCellInfo+0x168>
 8004256:	4b86      	ldr	r3, [pc, #536]	; (8004470 <GSMCellInfo+0x360>)
 8004258:	0028      	movs	r0, r5
		int k = 0;
 800425a:	2400      	movs	r4, #0
 800425c:	001d      	movs	r5, r3
 800425e:	4e85      	ldr	r6, [pc, #532]	; (8004474 <GSMCellInfo+0x364>)
		while ((part = strtok_r(m0, ",", &m0)))
 8004260:	0031      	movs	r1, r6
 8004262:	aa1e      	add	r2, sp, #120	; 0x78
 8004264:	f00a fe49 	bl	800eefa <strtok_r>
 8004268:	1e01      	subs	r1, r0, #0
 800426a:	d01a      	beq.n	80042a2 <GSMCellInfo+0x192>
			if (k == 1)
 800426c:	2c07      	cmp	r4, #7
 800426e:	d900      	bls.n	8004272 <GSMCellInfo+0x162>
 8004270:	e070      	b.n	8004354 <GSMCellInfo+0x244>
 8004272:	00a3      	lsls	r3, r4, #2
 8004274:	58eb      	ldr	r3, [r5, r3]
 8004276:	469f      	mov	pc, r3
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004278:	220c      	movs	r2, #12
 800427a:	4c7f      	ldr	r4, [pc, #508]	; (8004478 <GSMCellInfo+0x368>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800427c:	497f      	ldr	r1, [pc, #508]	; (800447c <GSMCellInfo+0x36c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800427e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004280:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004282:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004284:	4b7e      	ldr	r3, [pc, #504]	; (8004480 <GSMCellInfo+0x370>)
 8004286:	3219      	adds	r2, #25
 8004288:	f006 feb4 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800428c:	ab1f      	add	r3, sp, #124	; 0x7c
 800428e:	469a      	mov	sl, r3
 8004290:	4652      	mov	r2, sl
 8004292:	4b7c      	ldr	r3, [pc, #496]	; (8004484 <GSMCellInfo+0x374>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004294:	4651      	mov	r1, sl
	char newline[2] = "\r\n";
 8004296:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004298:	0020      	movs	r0, r4
 800429a:	230a      	movs	r3, #10
 800429c:	2202      	movs	r2, #2
 800429e:	f006 fea9 	bl	800aff4 <HAL_UART_Transmit>
	char *m1 = strstr(GSMData, "+QENG: 1");
 80042a2:	4648      	mov	r0, r9
 80042a4:	4978      	ldr	r1, [pc, #480]	; (8004488 <GSMCellInfo+0x378>)
 80042a6:	f00a fe2d 	bl	800ef04 <strstr>
 80042aa:	1e04      	subs	r4, r0, #0
 80042ac:	901f      	str	r0, [sp, #124]	; 0x7c
	if ((m1 != NULL) && (strlen(m1) > 1))
 80042ae:	d019      	beq.n	80042e4 <GSMCellInfo+0x1d4>
 80042b0:	f7fb ff2a 	bl	8000108 <strlen>
 80042b4:	2801      	cmp	r0, #1
 80042b6:	d915      	bls.n	80042e4 <GSMCellInfo+0x1d4>
 80042b8:	ab1f      	add	r3, sp, #124	; 0x7c
 80042ba:	469a      	mov	sl, r3
 80042bc:	4b73      	ldr	r3, [pc, #460]	; (800448c <GSMCellInfo+0x37c>)
 80042be:	0020      	movs	r0, r4
 80042c0:	46b9      	mov	r9, r7
		int k = 0;
 80042c2:	2500      	movs	r5, #0
 80042c4:	4654      	mov	r4, sl
 80042c6:	001f      	movs	r7, r3
 80042c8:	4e6a      	ldr	r6, [pc, #424]	; (8004474 <GSMCellInfo+0x364>)
		while ((part = strtok_r(m1, ",", &m1)))
 80042ca:	0031      	movs	r1, r6
 80042cc:	0022      	movs	r2, r4
 80042ce:	f00a fe14 	bl	800eefa <strtok_r>
 80042d2:	1e01      	subs	r1, r0, #0
 80042d4:	d005      	beq.n	80042e2 <GSMCellInfo+0x1d2>
			if (k == 3)
 80042d6:	1eeb      	subs	r3, r5, #3
 80042d8:	2b25      	cmp	r3, #37	; 0x25
 80042da:	d859      	bhi.n	8004390 <GSMCellInfo+0x280>
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	58fb      	ldr	r3, [r7, r3]
 80042e0:	469f      	mov	pc, r3
 80042e2:	464f      	mov	r7, r9
	memset(gsminfo, 0, 80);
 80042e4:	4c6a      	ldr	r4, [pc, #424]	; (8004490 <GSMCellInfo+0x380>)
 80042e6:	2250      	movs	r2, #80	; 0x50
 80042e8:	2100      	movs	r1, #0
 80042ea:	0020      	movs	r0, r4
 80042ec:	f00a fd5a 	bl	800eda4 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
 80042f0:	4b68      	ldr	r3, [pc, #416]	; (8004494 <GSMCellInfo+0x384>)
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	f7fc ffda 	bl	80012ac <__aeabi_f2iz>
 80042f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042fa:	0002      	movs	r2, r0
 80042fc:	930e      	str	r3, [sp, #56]	; 0x38
 80042fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004300:	0020      	movs	r0, r4
 8004302:	930d      	str	r3, [sp, #52]	; 0x34
 8004304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004306:	4964      	ldr	r1, [pc, #400]	; (8004498 <GSMCellInfo+0x388>)
 8004308:	930c      	str	r3, [sp, #48]	; 0x30
 800430a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800430c:	9702      	str	r7, [sp, #8]
 800430e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004312:	930a      	str	r3, [sp, #40]	; 0x28
 8004314:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004316:	9309      	str	r3, [sp, #36]	; 0x24
 8004318:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800431a:	9308      	str	r3, [sp, #32]
 800431c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800431e:	9307      	str	r3, [sp, #28]
 8004320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004322:	9306      	str	r3, [sp, #24]
 8004324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004326:	9305      	str	r3, [sp, #20]
 8004328:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800432e:	9303      	str	r3, [sp, #12]
 8004330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	465b      	mov	r3, fp
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4643      	mov	r3, r8
 800433a:	f00a fcc7 	bl	800eccc <siprintf>
}
 800433e:	0020      	movs	r0, r4
 8004340:	b021      	add	sp, #132	; 0x84
 8004342:	bcf0      	pop	{r4, r5, r6, r7}
 8004344:	46bb      	mov	fp, r7
 8004346:	46b2      	mov	sl, r6
 8004348:	46a9      	mov	r9, r5
 800434a:	46a0      	mov	r8, r4
 800434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(MCC0, part);
 800434e:	4640      	mov	r0, r8
 8004350:	f00a fee7 	bl	800f122 <strcpy>
		while ((part = strtok_r(m0, ",", &m0)))
 8004354:	981e      	ldr	r0, [sp, #120]	; 0x78
			k++;
 8004356:	3401      	adds	r4, #1
 8004358:	e782      	b.n	8004260 <GSMCellInfo+0x150>
				strcpy(SS0, part);
 800435a:	4650      	mov	r0, sl
 800435c:	f00a fee1 	bl	800f122 <strcpy>
			k++;
 8004360:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8004362:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004364:	e77c      	b.n	8004260 <GSMCellInfo+0x150>
				strcpy(CID0, part);
 8004366:	0038      	movs	r0, r7
 8004368:	f00a fedb 	bl	800f122 <strcpy>
			k++;
 800436c:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 800436e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004370:	e776      	b.n	8004260 <GSMCellInfo+0x150>
				strcpy(LAC0, part);
 8004372:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004374:	f00a fed5 	bl	800f122 <strcpy>
			k++;
 8004378:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 800437a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800437c:	e770      	b.n	8004260 <GSMCellInfo+0x150>
				strcpy(MNC0, part);
 800437e:	4658      	mov	r0, fp
 8004380:	f00a fecf 	bl	800f122 <strcpy>
			k++;
 8004384:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8004386:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004388:	e76a      	b.n	8004260 <GSMCellInfo+0x150>
				strcpy(SS1, part);
 800438a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800438c:	f00a fec9 	bl	800f122 <strcpy>
		while ((part = strtok_r(m1, ",", &m1)))
 8004390:	981f      	ldr	r0, [sp, #124]	; 0x7c
			k++;
 8004392:	3501      	adds	r5, #1
 8004394:	e799      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(CID4, part);
 8004396:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004398:	f00a fec3 	bl	800f122 <strcpy>
			k++;
 800439c:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800439e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043a0:	e793      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(LAC4, part);
 80043a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80043a4:	f00a febd 	bl	800f122 <strcpy>
			k++;
 80043a8:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043ac:	e78d      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(SS4, part);
 80043ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80043b0:	f00a feb7 	bl	800f122 <strcpy>
			k++;
 80043b4:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043b8:	e787      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(CID3, part);
 80043ba:	9816      	ldr	r0, [sp, #88]	; 0x58
 80043bc:	f00a feb1 	bl	800f122 <strcpy>
			k++;
 80043c0:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043c4:	e781      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(LAC3, part);
 80043c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80043c8:	f00a feab 	bl	800f122 <strcpy>
			k++;
 80043cc:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043d0:	e77b      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(SS3, part);
 80043d2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80043d4:	f00a fea5 	bl	800f122 <strcpy>
			k++;
 80043d8:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043da:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043dc:	e775      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(CID2, part);
 80043de:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80043e0:	f00a fe9f 	bl	800f122 <strcpy>
			k++;
 80043e4:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043e8:	e76f      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(LAC2, part);
 80043ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80043ec:	f00a fe99 	bl	800f122 <strcpy>
			k++;
 80043f0:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043f2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043f4:	e769      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(SS2, part);
 80043f6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80043f8:	f00a fe93 	bl	800f122 <strcpy>
			k++;
 80043fc:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004400:	e763      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(CID1, part);
 8004402:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004404:	f00a fe8d 	bl	800f122 <strcpy>
			k++;
 8004408:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800440a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800440c:	e75d      	b.n	80042ca <GSMCellInfo+0x1ba>
				strcpy(LAC1, part);
 800440e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004410:	f00a fe87 	bl	800f122 <strcpy>
			k++;
 8004414:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004416:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004418:	e757      	b.n	80042ca <GSMCellInfo+0x1ba>
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	20004110 	.word	0x20004110
 8004420:	20004114 	.word	0x20004114
 8004424:	20004118 	.word	0x20004118
 8004428:	2000411c 	.word	0x2000411c
 800442c:	20004120 	.word	0x20004120
 8004430:	20002084 	.word	0x20002084
 8004434:	2000208c 	.word	0x2000208c
 8004438:	20002058 	.word	0x20002058
 800443c:	20002060 	.word	0x20002060
 8004440:	20002068 	.word	0x20002068
 8004444:	20002070 	.word	0x20002070
 8004448:	20002078 	.word	0x20002078
 800444c:	2000038c 	.word	0x2000038c
 8004450:	20000384 	.word	0x20000384
 8004454:	2000037c 	.word	0x2000037c
 8004458:	20000374 	.word	0x20000374
 800445c:	2000036c 	.word	0x2000036c
 8004460:	20000754 	.word	0x20000754
 8004464:	00001194 	.word	0x00001194
 8004468:	08012e2c 	.word	0x08012e2c
 800446c:	08012e38 	.word	0x08012e38
 8004470:	08012eb0 	.word	0x08012eb0
 8004474:	08012e44 	.word	0x08012e44
 8004478:	20004bc8 	.word	0x20004bc8
 800447c:	08012e48 	.word	0x08012e48
 8004480:	00001388 	.word	0x00001388
 8004484:	00000a0d 	.word	0x00000a0d
 8004488:	08012e70 	.word	0x08012e70
 800448c:	08012ed0 	.word	0x08012ed0
 8004490:	20004778 	.word	0x20004778
 8004494:	20001d98 	.word	0x20001d98
 8004498:	08012e7c 	.word	0x08012e7c

0800449c <ProcessTCPAll>:
}

void ProcessTCPAll(char *data, int n)
{
 800449c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449e:	46d6      	mov	lr, sl
 80044a0:	4646      	mov	r6, r8
 80044a2:	464f      	mov	r7, r9
 80044a4:	b5c0      	push	{r6, r7, lr}
	if (tcp_stat[n] > 0)
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <ProcessTCPAll+0xc8>)
 80044a8:	008c      	lsls	r4, r1, #2
 80044aa:	591b      	ldr	r3, [r3, r4]
{
 80044ac:	4682      	mov	sl, r0
 80044ae:	000e      	movs	r6, r1
 80044b0:	b082      	sub	sp, #8
	if (tcp_stat[n] > 0)
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dd39      	ble.n	800452a <ProcessTCPAll+0x8e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044b6:	220c      	movs	r2, #12
 80044b8:	4d2b      	ldr	r5, [pc, #172]	; (8004568 <ProcessTCPAll+0xcc>)
 80044ba:	4691      	mov	r9, r2
 80044bc:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044be:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044c0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044c2:	492a      	ldr	r1, [pc, #168]	; (800456c <ProcessTCPAll+0xd0>)
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <ProcessTCPAll+0xd4>)
 80044c6:	3207      	adds	r2, #7
 80044c8:	f006 fd94 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80044cc:	4b29      	ldr	r3, [pc, #164]	; (8004574 <ProcessTCPAll+0xd8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80044ce:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 80044d0:	4698      	mov	r8, r3
 80044d2:	466b      	mov	r3, sp
 80044d4:	4642      	mov	r2, r8
	else
	{
		ResetTCP(n);
	}
	Debug_Tx("sending data to ip ");
	Debug_Tx(ip[n]);
 80044d6:	19a4      	adds	r4, r4, r6
 80044d8:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80044da:	0028      	movs	r0, r5
 80044dc:	230a      	movs	r3, #10
 80044de:	2202      	movs	r2, #2
 80044e0:	f006 fd88 	bl	800aff4 <HAL_UART_Transmit>
 80044e4:	00a2      	lsls	r2, r4, #2
 80044e6:	18a4      	adds	r4, r4, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044e8:	464a      	mov	r2, r9
 80044ea:	4b23      	ldr	r3, [pc, #140]	; (8004578 <ProcessTCPAll+0xdc>)
 80044ec:	191c      	adds	r4, r3, r4
 80044ee:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044f0:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044f2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044f4:	f7fb fe08 	bl	8000108 <strlen>
 80044f8:	0021      	movs	r1, r4
 80044fa:	b282      	uxth	r2, r0
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <ProcessTCPAll+0xd4>)
 80044fe:	0028      	movs	r0, r5
 8004500:	f006 fd78 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004504:	466b      	mov	r3, sp
 8004506:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004508:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800450a:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800450c:	0028      	movs	r0, r5
 800450e:	230a      	movs	r3, #10
 8004510:	2202      	movs	r2, #2
 8004512:	f006 fd6f 	bl	800aff4 <HAL_UART_Transmit>
	SendTCPdata(data,n);
 8004516:	0031      	movs	r1, r6
 8004518:	4650      	mov	r0, sl
 800451a:	f7ff fbb7 	bl	8003c8c <SendTCPdata>
}
 800451e:	b002      	add	sp, #8
 8004520:	bce0      	pop	{r5, r6, r7}
 8004522:	46ba      	mov	sl, r7
 8004524:	46b1      	mov	r9, r6
 8004526:	46a8      	mov	r8, r5
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((strlen(GSMData) > 0) && (i> 0))
 800452a:	4f14      	ldr	r7, [pc, #80]	; (800457c <ProcessTCPAll+0xe0>)
 800452c:	783b      	ldrb	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d010      	beq.n	8004554 <ProcessTCPAll+0xb8>
 8004532:	250a      	movs	r5, #10
 8004534:	e002      	b.n	800453c <ProcessTCPAll+0xa0>
 8004536:	3d01      	subs	r5, #1
 8004538:	2d00      	cmp	r5, #0
 800453a:	d00b      	beq.n	8004554 <ProcessTCPAll+0xb8>
		memset(GSMData, 0, 4500);
 800453c:	2100      	movs	r1, #0
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <ProcessTCPAll+0xe4>)
 8004540:	0038      	movs	r0, r7
 8004542:	f00a fc2f 	bl	800eda4 <memset>
		HAL_Delay(300);
 8004546:	2096      	movs	r0, #150	; 0x96
 8004548:	0040      	lsls	r0, r0, #1
 800454a:	f003 fc5f 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 800454e:	783b      	ldrb	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <ProcessTCPAll+0x9a>
	StopTCPConnection(n);
 8004554:	0030      	movs	r0, r6
 8004556:	f7ff fb59 	bl	8003c0c <StopTCPConnection>
	StartTCPConnection(n);
 800455a:	0030      	movs	r0, r6
 800455c:	f7ff faa2 	bl	8003aa4 <StartTCPConnection>
}
 8004560:	e7a9      	b.n	80044b6 <ProcessTCPAll+0x1a>
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	20004cb4 	.word	0x20004cb4
 8004568:	20004bc8 	.word	0x20004bc8
 800456c:	08012f94 	.word	0x08012f94
 8004570:	00001388 	.word	0x00001388
 8004574:	00000a0d 	.word	0x00000a0d
 8004578:	200000d0 	.word	0x200000d0
 800457c:	20000754 	.word	0x20000754
 8004580:	00001194 	.word	0x00001194

08004584 <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 8004584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004586:	4657      	mov	r7, sl
 8004588:	464e      	mov	r6, r9
 800458a:	4645      	mov	r5, r8
 800458c:	46de      	mov	lr, fp

	int ck = 5;

	gprsok = 0;
 800458e:	2300      	movs	r3, #0
{
 8004590:	b5e0      	push	{r5, r6, r7, lr}
 8004592:	4680      	mov	r8, r0
	gprsok = 0;
 8004594:	2505      	movs	r5, #5
 8004596:	4f33      	ldr	r7, [pc, #204]	; (8004664 <SetupGPRS+0xe0>)
{
 8004598:	b08b      	sub	sp, #44	; 0x2c
	gprsok = 0;
 800459a:	603b      	str	r3, [r7, #0]
	while ((ck > 0) && (gprsok < 1))
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <SetupGPRS+0xe4>)
 800459e:	4c33      	ldr	r4, [pc, #204]	; (800466c <SetupGPRS+0xe8>)
 80045a0:	9307      	str	r3, [sp, #28]
 80045a2:	4b33      	ldr	r3, [pc, #204]	; (8004670 <SetupGPRS+0xec>)
 80045a4:	4e33      	ldr	r6, [pc, #204]	; (8004674 <SetupGPRS+0xf0>)
 80045a6:	469b      	mov	fp, r3
 80045a8:	4b33      	ldr	r3, [pc, #204]	; (8004678 <SetupGPRS+0xf4>)
		{
			// gprsok=0;
			// HAL_Delay(4000);

			SendGSMCode(" AT+QIMODE=0");
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80045aa:	9705      	str	r7, [sp, #20]
 80045ac:	469a      	mov	sl, r3
 80045ae:	4b33      	ldr	r3, [pc, #204]	; (800467c <SetupGPRS+0xf8>)
 80045b0:	4699      	mov	r9, r3
 80045b2:	4b33      	ldr	r3, [pc, #204]	; (8004680 <SetupGPRS+0xfc>)
 80045b4:	9306      	str	r3, [sp, #24]
			SendGSMCode(" AT+QIMODE=0");
 80045b6:	4b33      	ldr	r3, [pc, #204]	; (8004684 <SetupGPRS+0x100>)
 80045b8:	9308      	str	r3, [sp, #32]
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80045ba:	4b33      	ldr	r3, [pc, #204]	; (8004688 <SetupGPRS+0x104>)
 80045bc:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_Delay(1000);
 80045be:	20fa      	movs	r0, #250	; 0xfa
 80045c0:	0080      	lsls	r0, r0, #2
 80045c2:	f003 fc23 	bl	8007e0c <HAL_Delay>
		memset(GSMDataC, 0, 100);
 80045c6:	0020      	movs	r0, r4
 80045c8:	2100      	movs	r1, #0
 80045ca:	2258      	movs	r2, #88	; 0x58
 80045cc:	300c      	adds	r0, #12
 80045ce:	f00a fbe9 	bl	800eda4 <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80045d2:	0022      	movs	r2, r4
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	cb83      	ldmia	r3!, {r0, r1, r7}
 80045d8:	c283      	stmia	r2!, {r0, r1, r7}
		strcat(GSMDataC, apn);
 80045da:	0020      	movs	r0, r4
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80045dc:	881b      	ldrh	r3, [r3, #0]
		strcat(GSMDataC, apn);
 80045de:	4641      	mov	r1, r8
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80045e0:	81a3      	strh	r3, [r4, #12]
		strcat(GSMDataC, apn);
 80045e2:	300e      	adds	r0, #14
 80045e4:	f00a fca4 	bl	800ef30 <stpcpy>
		strcat(GSMDataC, "\",\"\",\"\",0");
 80045e8:	220a      	movs	r2, #10
 80045ea:	4659      	mov	r1, fp
 80045ec:	f00a fdac 	bl	800f148 <memcpy>
		SendGSMCode(GSMDataC);
 80045f0:	0020      	movs	r0, r4
 80045f2:	f7fe ff37 	bl	8003464 <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 80045f6:	4653      	mov	r3, sl
 80045f8:	9302      	str	r3, [sp, #8]
 80045fa:	464b      	mov	r3, r9
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	9b06      	ldr	r3, [sp, #24]
 8004604:	0031      	movs	r1, r6
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2000      	movs	r0, #0
 800460a:	0033      	movs	r3, r6
 800460c:	f7ff f8d2 	bl	80037b4 <GetGSMReply>
 8004610:	f7fb fd7a 	bl	8000108 <strlen>
 8004614:	9b05      	ldr	r3, [sp, #20]
 8004616:	6018      	str	r0, [r3, #0]
		if (gprsok > 0)
 8004618:	2800      	cmp	r0, #0
 800461a:	d109      	bne.n	8004630 <SetupGPRS+0xac>
	while ((ck > 0) && (gprsok < 1))
 800461c:	3d01      	subs	r5, #1
 800461e:	2d00      	cmp	r5, #0
 8004620:	d1cd      	bne.n	80045be <SetupGPRS+0x3a>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 8004622:	b00b      	add	sp, #44	; 0x2c
 8004624:	bcf0      	pop	{r4, r5, r6, r7}
 8004626:	46bb      	mov	fp, r7
 8004628:	46b2      	mov	sl, r6
 800462a:	46a9      	mov	r9, r5
 800462c:	46a0      	mov	r8, r4
 800462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+QIMODE=0");
 8004630:	9808      	ldr	r0, [sp, #32]
 8004632:	f7fe ff17 	bl	8003464 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8004636:	4653      	mov	r3, sl
 8004638:	9302      	str	r3, [sp, #8]
 800463a:	464b      	mov	r3, r9
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004644:	0031      	movs	r1, r6
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2000      	movs	r0, #0
 800464a:	0033      	movs	r3, r6
 800464c:	f7ff f8b2 	bl	80037b4 <GetGSMReply>
 8004650:	f7fb fd5a 	bl	8000108 <strlen>
 8004654:	9b05      	ldr	r3, [sp, #20]
	while ((ck > 0) && (gprsok < 1))
 8004656:	3d01      	subs	r5, #1
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8004658:	6018      	str	r0, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 800465a:	2d00      	cmp	r5, #0
 800465c:	d0e1      	beq.n	8004622 <SetupGPRS+0x9e>
 800465e:	2800      	cmp	r0, #0
 8004660:	ddad      	ble.n	80045be <SetupGPRS+0x3a>
 8004662:	e7de      	b.n	8004622 <SetupGPRS+0x9e>
 8004664:	200042f4 	.word	0x200042f4
 8004668:	08012fa8 	.word	0x08012fa8
 800466c:	200018e8 	.word	0x200018e8
 8004670:	08012fb8 	.word	0x08012fb8
 8004674:	08013944 	.word	0x08013944
 8004678:	08012c98 	.word	0x08012c98
 800467c:	200000c8 	.word	0x200000c8
 8004680:	08012fc4 	.word	0x08012fc4
 8004684:	08012fe4 	.word	0x08012fe4
 8004688:	08012ff4 	.word	0x08012ff4

0800468c <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 800468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468e:	46de      	mov	lr, fp
 8004690:	4657      	mov	r7, sl
 8004692:	464e      	mov	r6, r9
 8004694:	4645      	mov	r5, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004696:	220c      	movs	r2, #12
 8004698:	b5e0      	push	{r5, r6, r7, lr}
 800469a:	4da2      	ldr	r5, [pc, #648]	; (8004924 <ShiftGSMProfile+0x298>)
 800469c:	b089      	sub	sp, #36	; 0x24
 800469e:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046a0:	49a1      	ldr	r1, [pc, #644]	; (8004928 <ShiftGSMProfile+0x29c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80046a2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046a4:	0028      	movs	r0, r5
 80046a6:	4ba1      	ldr	r3, [pc, #644]	; (800492c <ShiftGSMProfile+0x2a0>)
 80046a8:	3224      	adds	r2, #36	; 0x24
 80046aa:	f006 fca3 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80046ae:	4ba0      	ldr	r3, [pc, #640]	; (8004930 <ShiftGSMProfile+0x2a4>)
 80046b0:	aa02      	add	r2, sp, #8
 80046b2:	8293      	strh	r3, [r2, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80046b4:	0028      	movs	r0, r5
 80046b6:	230a      	movs	r3, #10
 80046b8:	2202      	movs	r2, #2
 80046ba:	a907      	add	r1, sp, #28
 80046bc:	f006 fc9a 	bl	800aff4 <HAL_UART_Transmit>
	int ook;
	Debug_Tx("______________Begin_____________________________");

	int ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
 80046c0:	4b9c      	ldr	r3, [pc, #624]	; (8004934 <ShiftGSMProfile+0x2a8>)
	int ck = 2;
 80046c2:	2602      	movs	r6, #2
 80046c4:	4698      	mov	r8, r3
 80046c6:	4b9c      	ldr	r3, [pc, #624]	; (8004938 <ShiftGSMProfile+0x2ac>)
 80046c8:	4c9c      	ldr	r4, [pc, #624]	; (800493c <ShiftGSMProfile+0x2b0>)
 80046ca:	469a      	mov	sl, r3
 80046cc:	4657      	mov	r7, sl
 80046ce:	4b9c      	ldr	r3, [pc, #624]	; (8004940 <ShiftGSMProfile+0x2b4>)
 80046d0:	4699      	mov	r9, r3
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046d2:	4b9c      	ldr	r3, [pc, #624]	; (8004944 <ShiftGSMProfile+0x2b8>)
 80046d4:	469b      	mov	fp, r3
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", 5000, "OK"));
		if (ook > 0)
		{
			Debug_Tx("______________Setup Menu_____________________________");
			ook = 0;
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 80046d6:	4b9c      	ldr	r3, [pc, #624]	; (8004948 <ShiftGSMProfile+0x2bc>)
 80046d8:	9304      	str	r3, [sp, #16]
		HAL_Delay(3000);
 80046da:	489c      	ldr	r0, [pc, #624]	; (800494c <ShiftGSMProfile+0x2c0>)
 80046dc:	f003 fb96 	bl	8007e0c <HAL_Delay>
		ck = ck - 1;
 80046e0:	1e73      	subs	r3, r6, #1
		SendGSMCode(" AT+QSTK=1");
 80046e2:	4640      	mov	r0, r8
		ck = ck - 1;
 80046e4:	469a      	mov	sl, r3
		SendGSMCode(" AT+QSTK=1");
 80046e6:	f7fe febd 	bl	8003464 <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", 5000, "OK"));
 80046ea:	464b      	mov	r3, r9
 80046ec:	4e8f      	ldr	r6, [pc, #572]	; (800492c <ShiftGSMProfile+0x2a0>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	0021      	movs	r1, r4
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	2000      	movs	r0, #0
 80046f6:	0023      	movs	r3, r4
 80046f8:	9702      	str	r7, [sp, #8]
 80046fa:	9601      	str	r6, [sp, #4]
 80046fc:	f7ff f85a 	bl	80037b4 <GetGSMReply>
 8004700:	f7fb fd02 	bl	8000108 <strlen>
		if (ook > 0)
 8004704:	2800      	cmp	r0, #0
 8004706:	d104      	bne.n	8004712 <ShiftGSMProfile+0x86>
	while ((ck > 0) && (ook < 1))
 8004708:	4653      	mov	r3, sl
 800470a:	2b00      	cmp	r3, #0
 800470c:	d079      	beq.n	8004802 <ShiftGSMProfile+0x176>
{
 800470e:	2601      	movs	r6, #1
 8004710:	e7e3      	b.n	80046da <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004712:	220c      	movs	r2, #12
 8004714:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004716:	4659      	mov	r1, fp
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004718:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800471a:	0028      	movs	r0, r5
 800471c:	0033      	movs	r3, r6
 800471e:	3229      	adds	r2, #41	; 0x29
 8004720:	f006 fc68 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004724:	4a82      	ldr	r2, [pc, #520]	; (8004930 <ShiftGSMProfile+0x2a4>)
 8004726:	ab02      	add	r3, sp, #8
 8004728:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800472a:	a907      	add	r1, sp, #28
 800472c:	230a      	movs	r3, #10
 800472e:	2202      	movs	r2, #2
 8004730:	0028      	movs	r0, r5
 8004732:	f006 fc5f 	bl	800aff4 <HAL_UART_Transmit>
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 8004736:	9804      	ldr	r0, [sp, #16]
 8004738:	f7fe fe94 	bl	8003464 <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", 5000, "OK"));
 800473c:	4b84      	ldr	r3, [pc, #528]	; (8004950 <ShiftGSMProfile+0x2c4>)
 800473e:	2200      	movs	r2, #0
 8004740:	0021      	movs	r1, r4
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2000      	movs	r0, #0
 8004746:	0023      	movs	r3, r4
 8004748:	9702      	str	r7, [sp, #8]
 800474a:	9601      	str	r6, [sp, #4]
 800474c:	f7ff f832 	bl	80037b4 <GetGSMReply>
 8004750:	f7fb fcda 	bl	8000108 <strlen>
 8004754:	9005      	str	r0, [sp, #20]
			HAL_Delay(3000);
 8004756:	487d      	ldr	r0, [pc, #500]	; (800494c <ShiftGSMProfile+0x2c0>)
 8004758:	f003 fb58 	bl	8007e0c <HAL_Delay>
			if (ook > 0)
 800475c:	9b05      	ldr	r3, [sp, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0d2      	beq.n	8004708 <ShiftGSMProfile+0x7c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004762:	220c      	movs	r2, #12
 8004764:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004766:	497b      	ldr	r1, [pc, #492]	; (8004954 <ShiftGSMProfile+0x2c8>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004768:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800476a:	0028      	movs	r0, r5
 800476c:	0033      	movs	r3, r6
 800476e:	3231      	adds	r2, #49	; 0x31
 8004770:	f006 fc40 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004774:	4a6e      	ldr	r2, [pc, #440]	; (8004930 <ShiftGSMProfile+0x2a4>)
 8004776:	ab02      	add	r3, sp, #8
 8004778:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800477a:	a907      	add	r1, sp, #28
 800477c:	230a      	movs	r3, #10
 800477e:	2202      	movs	r2, #2
 8004780:	0028      	movs	r0, r5
 8004782:	f006 fc37 	bl	800aff4 <HAL_UART_Transmit>
			{
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
				ook = 0;
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 8004786:	4874      	ldr	r0, [pc, #464]	; (8004958 <ShiftGSMProfile+0x2cc>)
 8004788:	f7fe fe6c 	bl	8003464 <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 800478c:	4b73      	ldr	r3, [pc, #460]	; (800495c <ShiftGSMProfile+0x2d0>)
 800478e:	9702      	str	r7, [sp, #8]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	4b72      	ldr	r3, [pc, #456]	; (8004960 <ShiftGSMProfile+0x2d4>)
 8004798:	0021      	movs	r1, r4
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2000      	movs	r0, #0
 800479e:	0023      	movs	r3, r4
 80047a0:	f7ff f808 	bl	80037b4 <GetGSMReply>
 80047a4:	f7fb fcb0 	bl	8000108 <strlen>
				if (ook > 0)
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d0ad      	beq.n	8004708 <ShiftGSMProfile+0x7c>
				{

					if (GSMProf == 0)
 80047ac:	4b6d      	ldr	r3, [pc, #436]	; (8004964 <ShiftGSMProfile+0x2d8>)
 80047ae:	9305      	str	r3, [sp, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d100      	bne.n	80047b8 <ShiftGSMProfile+0x12c>
 80047b6:	e091      	b.n	80048dc <ShiftGSMProfile+0x250>
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config",5000, "OK"));
						GSMProf = 1;
					}
					else if (GSMProf == 1)
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d067      	beq.n	800488c <ShiftGSMProfile+0x200>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80047bc:	220c      	movs	r2, #12
 80047be:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80047c0:	4e5a      	ldr	r6, [pc, #360]	; (800492c <ShiftGSMProfile+0x2a0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80047c2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80047c4:	4968      	ldr	r1, [pc, #416]	; (8004968 <ShiftGSMProfile+0x2dc>)
 80047c6:	0033      	movs	r3, r6
 80047c8:	3225      	adds	r2, #37	; 0x25
 80047ca:	0028      	movs	r0, r5
 80047cc:	f006 fc12 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80047d0:	4b57      	ldr	r3, [pc, #348]	; (8004930 <ShiftGSMProfile+0x2a4>)
 80047d2:	aa02      	add	r2, sp, #8
 80047d4:	8293      	strh	r3, [r2, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80047d6:	a907      	add	r1, sp, #28
 80047d8:	230a      	movs	r3, #10
 80047da:	2202      	movs	r2, #2
 80047dc:	0028      	movs	r0, r5
 80047de:	f006 fc09 	bl	800aff4 <HAL_UART_Transmit>
					}
					if (ook > 0)
					{
						Debug_Tx("_____________Refresh_____________________________");
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 80047e2:	4862      	ldr	r0, [pc, #392]	; (800496c <ShiftGSMProfile+0x2e0>)
 80047e4:	f7fe fe3e 	bl	8003464 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh",5000, "OK"));
 80047e8:	4b61      	ldr	r3, [pc, #388]	; (8004970 <ShiftGSMProfile+0x2e4>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	0021      	movs	r1, r4
 80047f0:	0023      	movs	r3, r4
 80047f2:	2000      	movs	r0, #0
 80047f4:	9702      	str	r7, [sp, #8]
 80047f6:	9601      	str	r6, [sp, #4]
 80047f8:	f7fe ffdc 	bl	80037b4 <GetGSMReply>
	while ((ck > 0) && (ook < 1))
 80047fc:	4653      	mov	r3, sl
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d13e      	bne.n	8004880 <ShiftGSMProfile+0x1f4>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004802:	220c      	movs	r2, #12
 8004804:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004806:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004808:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800480a:	495a      	ldr	r1, [pc, #360]	; (8004974 <ShiftGSMProfile+0x2e8>)
 800480c:	4b47      	ldr	r3, [pc, #284]	; (800492c <ShiftGSMProfile+0x2a0>)
 800480e:	3225      	adds	r2, #37	; 0x25
 8004810:	f006 fbf0 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004814:	4b46      	ldr	r3, [pc, #280]	; (8004930 <ShiftGSMProfile+0x2a4>)
 8004816:	aa02      	add	r2, sp, #8
 8004818:	8293      	strh	r3, [r2, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800481a:	a907      	add	r1, sp, #28
 800481c:	2202      	movs	r2, #2
 800481e:	230a      	movs	r3, #10
 8004820:	0028      	movs	r0, r5
 8004822:	f006 fbe7 	bl	800aff4 <HAL_UART_Transmit>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 8004826:	4b54      	ldr	r3, [pc, #336]	; (8004978 <ShiftGSMProfile+0x2ec>)
 8004828:	0018      	movs	r0, r3
 800482a:	4698      	mov	r8, r3
 800482c:	f7fe fe1a 	bl	8003464 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 8004830:	4f52      	ldr	r7, [pc, #328]	; (800497c <ShiftGSMProfile+0x2f0>)
 8004832:	4e53      	ldr	r6, [pc, #332]	; (8004980 <ShiftGSMProfile+0x2f4>)
 8004834:	9702      	str	r7, [sp, #8]
 8004836:	6833      	ldr	r3, [r6, #0]
 8004838:	4d52      	ldr	r5, [pc, #328]	; (8004984 <ShiftGSMProfile+0x2f8>)
 800483a:	2200      	movs	r2, #0
 800483c:	0021      	movs	r1, r4
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	200f      	movs	r0, #15
 8004842:	0023      	movs	r3, r4
 8004844:	9500      	str	r5, [sp, #0]
 8004846:	f7fe ffb5 	bl	80037b4 <GetGSMReply>
 800484a:	f7fb fc5d 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 800484e:	2800      	cmp	r0, #0
 8004850:	d10c      	bne.n	800486c <ShiftGSMProfile+0x1e0>
		SendGSMCode(" AT+QPOWD=1");
 8004852:	4640      	mov	r0, r8
 8004854:	f7fe fe06 	bl	8003464 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 8004858:	9702      	str	r7, [sp, #8]
 800485a:	6833      	ldr	r3, [r6, #0]
 800485c:	2200      	movs	r2, #0
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	0021      	movs	r1, r4
 8004862:	0023      	movs	r3, r4
 8004864:	200f      	movs	r0, #15
 8004866:	9500      	str	r5, [sp, #0]
 8004868:	f7fe ffa4 	bl	80037b4 <GetGSMReply>
	}
	HAL_Delay(3000);
 800486c:	4837      	ldr	r0, [pc, #220]	; (800494c <ShiftGSMProfile+0x2c0>)
 800486e:	f003 facd 	bl	8007e0c <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 8004872:	b009      	add	sp, #36	; 0x24
 8004874:	bcf0      	pop	{r4, r5, r6, r7}
 8004876:	46bb      	mov	fp, r7
 8004878:	46b2      	mov	sl, r6
 800487a:	46a9      	mov	r9, r5
 800487c:	46a0      	mov	r8, r4
 800487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh",5000, "OK"));
 8004880:	f7fb fc42 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 8004884:	2800      	cmp	r0, #0
 8004886:	d1bc      	bne.n	8004802 <ShiftGSMProfile+0x176>
{
 8004888:	2601      	movs	r6, #1
 800488a:	e726      	b.n	80046da <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800488c:	220c      	movs	r2, #12
 800488e:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004890:	493d      	ldr	r1, [pc, #244]	; (8004988 <ShiftGSMProfile+0x2fc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004892:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004894:	0028      	movs	r0, r5
 8004896:	0033      	movs	r3, r6
 8004898:	3236      	adds	r2, #54	; 0x36
 800489a:	f006 fbab 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800489e:	4a24      	ldr	r2, [pc, #144]	; (8004930 <ShiftGSMProfile+0x2a4>)
 80048a0:	ab02      	add	r3, sp, #8
 80048a2:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80048a4:	a907      	add	r1, sp, #28
 80048a6:	230a      	movs	r3, #10
 80048a8:	2202      	movs	r2, #2
 80048aa:	0028      	movs	r0, r5
 80048ac:	f006 fba2 	bl	800aff4 <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 80048b0:	4836      	ldr	r0, [pc, #216]	; (800498c <ShiftGSMProfile+0x300>)
 80048b2:	f7fe fdd7 	bl	8003464 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", 5000, "OK"));
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <ShiftGSMProfile+0x304>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	0021      	movs	r1, r4
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	2000      	movs	r0, #0
 80048c0:	0023      	movs	r3, r4
 80048c2:	9702      	str	r7, [sp, #8]
 80048c4:	9601      	str	r6, [sp, #4]
 80048c6:	f7fe ff75 	bl	80037b4 <GetGSMReply>
 80048ca:	f7fb fc1d 	bl	8000108 <strlen>
 80048ce:	2300      	movs	r3, #0
						GSMProf = 1;
 80048d0:	9a05      	ldr	r2, [sp, #20]
 80048d2:	6013      	str	r3, [r2, #0]
					if (ook > 0)
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d100      	bne.n	80048da <ShiftGSMProfile+0x24e>
 80048d8:	e716      	b.n	8004708 <ShiftGSMProfile+0x7c>
 80048da:	e76f      	b.n	80047bc <ShiftGSMProfile+0x130>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80048dc:	220c      	movs	r2, #12
 80048de:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80048e0:	492c      	ldr	r1, [pc, #176]	; (8004994 <ShiftGSMProfile+0x308>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80048e2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80048e4:	0028      	movs	r0, r5
 80048e6:	0033      	movs	r3, r6
 80048e8:	3234      	adds	r2, #52	; 0x34
 80048ea:	f006 fb83 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80048ee:	4a10      	ldr	r2, [pc, #64]	; (8004930 <ShiftGSMProfile+0x2a4>)
 80048f0:	ab02      	add	r3, sp, #8
 80048f2:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80048f4:	a907      	add	r1, sp, #28
 80048f6:	230a      	movs	r3, #10
 80048f8:	2202      	movs	r2, #2
 80048fa:	0028      	movs	r0, r5
 80048fc:	f006 fb7a 	bl	800aff4 <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 8004900:	4825      	ldr	r0, [pc, #148]	; (8004998 <ShiftGSMProfile+0x30c>)
 8004902:	f7fe fdaf 	bl	8003464 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config",5000, "OK"));
 8004906:	4b25      	ldr	r3, [pc, #148]	; (800499c <ShiftGSMProfile+0x310>)
 8004908:	2200      	movs	r2, #0
 800490a:	0021      	movs	r1, r4
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	2000      	movs	r0, #0
 8004910:	0023      	movs	r3, r4
 8004912:	9702      	str	r7, [sp, #8]
 8004914:	9601      	str	r6, [sp, #4]
 8004916:	f7fe ff4d 	bl	80037b4 <GetGSMReply>
 800491a:	f7fb fbf5 	bl	8000108 <strlen>
						GSMProf = 1;
 800491e:	2301      	movs	r3, #1
 8004920:	e7d6      	b.n	80048d0 <ShiftGSMProfile+0x244>
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	20004bc8 	.word	0x20004bc8
 8004928:	08013018 	.word	0x08013018
 800492c:	00001388 	.word	0x00001388
 8004930:	00000a0d 	.word	0x00000a0d
 8004934:	0801304c 	.word	0x0801304c
 8004938:	08012c98 	.word	0x08012c98
 800493c:	08013944 	.word	0x08013944
 8004940:	08013058 	.word	0x08013058
 8004944:	080130e4 	.word	0x080130e4
 8004948:	0801311c 	.word	0x0801311c
 800494c:	00000bb8 	.word	0x00000bb8
 8004950:	08013144 	.word	0x08013144
 8004954:	08013164 	.word	0x08013164
 8004958:	080131a4 	.word	0x080131a4
 800495c:	200000cc 	.word	0x200000cc
 8004960:	080131c4 	.word	0x080131c4
 8004964:	2000009c 	.word	0x2000009c
 8004968:	08013308 	.word	0x08013308
 800496c:	0801333c 	.word	0x0801333c
 8004970:	08013364 	.word	0x08013364
 8004974:	08013074 	.word	0x08013074
 8004978:	080130a8 	.word	0x080130a8
 800497c:	080130b4 	.word	0x080130b4
 8004980:	200000c8 	.word	0x200000c8
 8004984:	080130c8 	.word	0x080130c8
 8004988:	08013278 	.word	0x08013278
 800498c:	080132bc 	.word	0x080132bc
 8004990:	080132e8 	.word	0x080132e8
 8004994:	080131e8 	.word	0x080131e8
 8004998:	0801322c 	.word	0x0801322c
 800499c:	08013258 	.word	0x08013258

080049a0 <InitGSM>:

void InitGSM()
{
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	46de      	mov	lr, fp
 80049a4:	4645      	mov	r5, r8
 80049a6:	4657      	mov	r7, sl
 80049a8:	464e      	mov	r6, r9
	// RestartGSM();
	HAL_Delay(2000);
 80049aa:	20fa      	movs	r0, #250	; 0xfa
{
 80049ac:	b5e0      	push	{r5, r6, r7, lr}
	HAL_Delay(2000);
 80049ae:	00c0      	lsls	r0, r0, #3
{
 80049b0:	b087      	sub	sp, #28
	HAL_Delay(2000);
 80049b2:	f003 fa2b 	bl	8007e0c <HAL_Delay>
	// i=strlen(GetGSMReply(0,"NORMAL POWER DOWN",0,"","Error:  AT+QPOWD=1 Restart",20));

	// HAL_Delay(10000);
	ck = 2;
	i = 0;
	ShiftGSMProfile();
 80049b6:	f7ff fe69 	bl	800468c <ShiftGSMProfile>
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 80049ba:	4bc4      	ldr	r3, [pc, #784]	; (8004ccc <InitGSM+0x32c>)
 80049bc:	0018      	movs	r0, r3
 80049be:	4699      	mov	r9, r3
 80049c0:	f7fe fd50 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80049c4:	4bc2      	ldr	r3, [pc, #776]	; (8004cd0 <InitGSM+0x330>)
 80049c6:	4fc3      	ldr	r7, [pc, #780]	; (8004cd4 <InitGSM+0x334>)
 80049c8:	9302      	str	r3, [sp, #8]
 80049ca:	4cc3      	ldr	r4, [pc, #780]	; (8004cd8 <InitGSM+0x338>)
 80049cc:	4698      	mov	r8, r3
 80049ce:	4dc3      	ldr	r5, [pc, #780]	; (8004cdc <InitGSM+0x33c>)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	0021      	movs	r1, r4
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	200f      	movs	r0, #15
 80049da:	0023      	movs	r3, r4
 80049dc:	9500      	str	r5, [sp, #0]
 80049de:	f7fe fee9 	bl	80037b4 <GetGSMReply>
 80049e2:	f7fb fb91 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d10d      	bne.n	8004a06 <InitGSM+0x66>
		SendGSMCode(" ATE0");
 80049ea:	4648      	mov	r0, r9
 80049ec:	f7fe fd3a 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80049f0:	4643      	mov	r3, r8
 80049f2:	9302      	str	r3, [sp, #8]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	0021      	movs	r1, r4
 80049fc:	0023      	movs	r3, r4
 80049fe:	200f      	movs	r0, #15
 8004a00:	9500      	str	r5, [sp, #0]
 8004a02:	f7fe fed7 	bl	80037b4 <GetGSMReply>
{
 8004a06:	2302      	movs	r3, #2
 8004a08:	469a      	mov	sl, r3
 8004a0a:	4db5      	ldr	r5, [pc, #724]	; (8004ce0 <InitGSM+0x340>)
 8004a0c:	4eb5      	ldr	r6, [pc, #724]	; (8004ce4 <InitGSM+0x344>)
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8004a0e:	0028      	movs	r0, r5
 8004a10:	f7fe fd28 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004a14:	4643      	mov	r3, r8
 8004a16:	9302      	str	r3, [sp, #8]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	0021      	movs	r1, r4
 8004a20:	0023      	movs	r3, r4
 8004a22:	200f      	movs	r0, #15
 8004a24:	9600      	str	r6, [sp, #0]
 8004a26:	f7fe fec5 	bl	80037b4 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8004a2a:	4653      	mov	r3, sl
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d000      	beq.n	8004a32 <InitGSM+0x92>
 8004a30:	e118      	b.n	8004c64 <InitGSM+0x2c4>
	}

	HAL_Delay(2000);
 8004a32:	20fa      	movs	r0, #250	; 0xfa
 8004a34:	00c0      	lsls	r0, r0, #3
 8004a36:	f003 f9e9 	bl	8007e0c <HAL_Delay>
	ShiftGSMProfile();
 8004a3a:	f7ff fe27 	bl	800468c <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8004a3e:	4648      	mov	r0, r9
 8004a40:	f7fe fd10 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8004a44:	4643      	mov	r3, r8
 8004a46:	9302      	str	r3, [sp, #8]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	4ba6      	ldr	r3, [pc, #664]	; (8004ce8 <InitGSM+0x348>)
 8004a50:	0021      	movs	r1, r4
 8004a52:	469a      	mov	sl, r3
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	200a      	movs	r0, #10
 8004a58:	0023      	movs	r3, r4
 8004a5a:	f7fe feab 	bl	80037b4 <GetGSMReply>
 8004a5e:	f7fb fb53 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d10e      	bne.n	8004a84 <InitGSM+0xe4>
		SendGSMCode(" ATE0");
 8004a66:	4648      	mov	r0, r9
 8004a68:	f7fe fcfc 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	9302      	str	r3, [sp, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	4653      	mov	r3, sl
 8004a78:	0021      	movs	r1, r4
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	200a      	movs	r0, #10
 8004a7e:	0023      	movs	r3, r4
 8004a80:	f7fe fe98 	bl	80037b4 <GetGSMReply>
{
 8004a84:	2302      	movs	r3, #2
 8004a86:	4699      	mov	r9, r3
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8004a88:	0028      	movs	r0, r5
 8004a8a:	f7fe fceb 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004a8e:	4643      	mov	r3, r8
 8004a90:	9302      	str	r3, [sp, #8]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2200      	movs	r2, #0
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	0021      	movs	r1, r4
 8004a9a:	0023      	movs	r3, r4
 8004a9c:	200a      	movs	r0, #10
 8004a9e:	9600      	str	r6, [sp, #0]
 8004aa0:	f7fe fe88 	bl	80037b4 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d000      	beq.n	8004aac <InitGSM+0x10c>
 8004aaa:	e0d3      	b.n	8004c54 <InitGSM+0x2b4>
 8004aac:	4b8f      	ldr	r3, [pc, #572]	; (8004cec <InitGSM+0x34c>)
 8004aae:	260a      	movs	r6, #10
 8004ab0:	469a      	mov	sl, r3
 8004ab2:	4b8f      	ldr	r3, [pc, #572]	; (8004cf0 <InitGSM+0x350>)
 8004ab4:	4699      	mov	r9, r3
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
		// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
		if (i > 0)
		{
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8004ab6:	4b8f      	ldr	r3, [pc, #572]	; (8004cf4 <InitGSM+0x354>)
 8004ab8:	469b      	mov	fp, r3
 8004aba:	e002      	b.n	8004ac2 <InitGSM+0x122>
	while ((ck > 0) && (i < 1))
 8004abc:	2e00      	cmp	r6, #0
 8004abe:	d100      	bne.n	8004ac2 <InitGSM+0x122>
 8004ac0:	e0c1      	b.n	8004c46 <InitGSM+0x2a6>
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	f7fe fcce 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 8004ac8:	4643      	mov	r3, r8
 8004aca:	9302      	str	r3, [sp, #8]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	0021      	movs	r1, r4
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2005      	movs	r0, #5
 8004ada:	0023      	movs	r3, r4
 8004adc:	f7fe fe6a 	bl	80037b4 <GetGSMReply>
 8004ae0:	f7fb fb12 	bl	8000108 <strlen>
 8004ae4:	0005      	movs	r5, r0
		HAL_Delay(1000);
 8004ae6:	20fa      	movs	r0, #250	; 0xfa
 8004ae8:	0080      	lsls	r0, r0, #2
		ck = ck - 1;
 8004aea:	3e01      	subs	r6, #1
		HAL_Delay(1000);
 8004aec:	f003 f98e 	bl	8007e0c <HAL_Delay>
		if (i > 0)
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	d0e3      	beq.n	8004abc <InitGSM+0x11c>
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8004af4:	4658      	mov	r0, fp
 8004af6:	f7fe fcb5 	bl	8003464 <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 8004afa:	4643      	mov	r3, r8
 8004afc:	9302      	str	r3, [sp, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2200      	movs	r2, #0
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	4b7c      	ldr	r3, [pc, #496]	; (8004cf8 <InitGSM+0x358>)
 8004b06:	0021      	movs	r1, r4
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	0023      	movs	r3, r4
 8004b0e:	f7fe fe51 	bl	80037b4 <GetGSMReply>
 8004b12:	f7fb faf9 	bl	8000108 <strlen>

			if (i > 0)
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d0d0      	beq.n	8004abc <InitGSM+0x11c>
			{
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 8004b1a:	4878      	ldr	r0, [pc, #480]	; (8004cfc <InitGSM+0x35c>)
 8004b1c:	f7fe fca2 	bl	8003464 <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 8004b20:	4643      	mov	r3, r8
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	4b75      	ldr	r3, [pc, #468]	; (8004d00 <InitGSM+0x360>)
 8004b2c:	0021      	movs	r1, r4
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2000      	movs	r0, #0
 8004b32:	0023      	movs	r3, r4
 8004b34:	f7fe fe3e 	bl	80037b4 <GetGSMReply>
 8004b38:	f7fb fae6 	bl	8000108 <strlen>

				if (i > 0)
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d0bd      	beq.n	8004abc <InitGSM+0x11c>
				{
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 8004b40:	4870      	ldr	r0, [pc, #448]	; (8004d04 <InitGSM+0x364>)
 8004b42:	f7fe fc8f 	bl	8003464 <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 8004b46:	4643      	mov	r3, r8
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	4b6d      	ldr	r3, [pc, #436]	; (8004d08 <InitGSM+0x368>)
 8004b52:	0021      	movs	r1, r4
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	2000      	movs	r0, #0
 8004b58:	0023      	movs	r3, r4
 8004b5a:	f7fe fe2b 	bl	80037b4 <GetGSMReply>
 8004b5e:	f7fb fad3 	bl	8000108 <strlen>
					if (i > 0)
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d0aa      	beq.n	8004abc <InitGSM+0x11c>
					{
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 8004b66:	4869      	ldr	r0, [pc, #420]	; (8004d0c <InitGSM+0x36c>)
 8004b68:	f7fe fc7c 	bl	8003464 <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 8004b6c:	4643      	mov	r3, r8
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <InitGSM+0x370>)
 8004b78:	0021      	movs	r1, r4
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	0023      	movs	r3, r4
 8004b80:	f7fe fe18 	bl	80037b4 <GetGSMReply>
 8004b84:	f7fb fac0 	bl	8000108 <strlen>
						if (i > 0)
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d097      	beq.n	8004abc <InitGSM+0x11c>
						{
							HAL_Delay(3000);
 8004b8c:	4861      	ldr	r0, [pc, #388]	; (8004d14 <InitGSM+0x374>)
 8004b8e:	f003 f93d 	bl	8007e0c <HAL_Delay>
							// SendGSMCode(" AT+CSMP=17,167,0,16");
							// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
							if (i > 0)
							{
								SendGSMCode(" AT+QENG=1,4");
 8004b92:	4861      	ldr	r0, [pc, #388]	; (8004d18 <InitGSM+0x378>)
 8004b94:	f7fe fc66 	bl	8003464 <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 8004b98:	4643      	mov	r3, r8
 8004b9a:	9302      	str	r3, [sp, #8]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <InitGSM+0x37c>)
 8004ba4:	0021      	movs	r1, r4
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2000      	movs	r0, #0
 8004baa:	0023      	movs	r3, r4
 8004bac:	f7fe fe02 	bl	80037b4 <GetGSMReply>
 8004bb0:	f7fb faaa 	bl	8000108 <strlen>

								if (i > 0)
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d081      	beq.n	8004abc <InitGSM+0x11c>
								{

									HAL_Delay(1000);
 8004bb8:	20fa      	movs	r0, #250	; 0xfa
 8004bba:	0080      	lsls	r0, r0, #2
 8004bbc:	f003 f926 	bl	8007e0c <HAL_Delay>
									if (GSMProf == 0)
 8004bc0:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <InitGSM+0x380>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004bc2:	4d58      	ldr	r5, [pc, #352]	; (8004d24 <InitGSM+0x384>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d054      	beq.n	8004c74 <InitGSM+0x2d4>
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
										SetupGPRS("taisysnet"); // taisysnet");
									}
									else if (GSMProf == 1)
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d068      	beq.n	8004ca0 <InitGSM+0x300>
 8004bce:	ae05      	add	r6, sp, #20
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
										SetupGPRS("bsnlnet"); // taisysnet");
									}
									HAL_Delay(1000);
 8004bd0:	20fa      	movs	r0, #250	; 0xfa
 8004bd2:	0080      	lsls	r0, r0, #2
 8004bd4:	f003 f91a 	bl	8007e0c <HAL_Delay>
 8004bd8:	220c      	movs	r2, #12
 8004bda:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004bdc:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004bde:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004be0:	4951      	ldr	r1, [pc, #324]	; (8004d28 <InitGSM+0x388>)
 8004be2:	4b52      	ldr	r3, [pc, #328]	; (8004d2c <InitGSM+0x38c>)
 8004be4:	322c      	adds	r2, #44	; 0x2c
 8004be6:	f006 fa05 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004bea:	4b51      	ldr	r3, [pc, #324]	; (8004d30 <InitGSM+0x390>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004bec:	0031      	movs	r1, r6
 8004bee:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8004bf0:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004bf2:	0028      	movs	r0, r5
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	f006 f9fd 	bl	800aff4 <HAL_UART_Transmit>

									Debug_Tx("_____________Operator again_____________________________");
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8004bfa:	20fa      	movs	r0, #250	; 0xfa
 8004bfc:	0080      	lsls	r0, r0, #2
 8004bfe:	f003 f905 	bl	8007e0c <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004c02:	4e4c      	ldr	r6, [pc, #304]	; (8004d34 <InitGSM+0x394>)
 8004c04:	0030      	movs	r0, r6
 8004c06:	f7fe fc2d 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004c0a:	4643      	mov	r3, r8
 8004c0c:	9302      	str	r3, [sp, #8]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	4d49      	ldr	r5, [pc, #292]	; (8004d38 <InitGSM+0x398>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	0021      	movs	r1, r4
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	2000      	movs	r0, #0
 8004c1a:	0023      	movs	r3, r4
 8004c1c:	9500      	str	r5, [sp, #0]
 8004c1e:	f7fe fdc9 	bl	80037b4 <GetGSMReply>
									SetTCPMux();
									HAL_Delay(1000);
 8004c22:	20fa      	movs	r0, #250	; 0xfa
 8004c24:	0080      	lsls	r0, r0, #2
 8004c26:	f003 f8f1 	bl	8007e0c <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004c2a:	0030      	movs	r0, r6
 8004c2c:	f7fe fc1a 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004c30:	4643      	mov	r3, r8
 8004c32:	9302      	str	r3, [sp, #8]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	0021      	movs	r1, r4
 8004c3c:	0023      	movs	r3, r4
 8004c3e:	2000      	movs	r0, #0
 8004c40:	9500      	str	r5, [sp, #0]
 8004c42:	f7fe fdb7 	bl	80037b4 <GetGSMReply>
					}
				}
			}
		}
	}
}
 8004c46:	b007      	add	sp, #28
 8004c48:	bcf0      	pop	{r4, r5, r6, r7}
 8004c4a:	46bb      	mov	fp, r7
 8004c4c:	46b2      	mov	sl, r6
 8004c4e:	46a9      	mov	r9, r5
 8004c50:	46a0      	mov	r8, r4
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004c54:	f7fb fa58 	bl	8000108 <strlen>
		ck = ck - 1;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4699      	mov	r9, r3
	while ((ck > 0) && (i < 1))
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d100      	bne.n	8004c62 <InitGSM+0x2c2>
 8004c60:	e712      	b.n	8004a88 <InitGSM+0xe8>
 8004c62:	e723      	b.n	8004aac <InitGSM+0x10c>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004c64:	f7fb fa50 	bl	8000108 <strlen>
		ck = ck - 1;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	469a      	mov	sl, r3
	while ((ck > 0) && (i < 1))
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d100      	bne.n	8004c72 <InitGSM+0x2d2>
 8004c70:	e6cd      	b.n	8004a0e <InitGSM+0x6e>
 8004c72:	e6de      	b.n	8004a32 <InitGSM+0x92>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c74:	220c      	movs	r2, #12
 8004c76:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c78:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c7a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c7c:	492f      	ldr	r1, [pc, #188]	; (8004d3c <InitGSM+0x39c>)
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <InitGSM+0x38c>)
 8004c80:	322c      	adds	r2, #44	; 0x2c
 8004c82:	f006 f9b7 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004c86:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <InitGSM+0x390>)
 8004c88:	ae05      	add	r6, sp, #20
 8004c8a:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	230a      	movs	r3, #10
 8004c90:	0031      	movs	r1, r6
 8004c92:	0028      	movs	r0, r5
 8004c94:	f006 f9ae 	bl	800aff4 <HAL_UART_Transmit>
										SetupGPRS("taisysnet"); // taisysnet");
 8004c98:	4829      	ldr	r0, [pc, #164]	; (8004d40 <InitGSM+0x3a0>)
 8004c9a:	f7ff fc73 	bl	8004584 <SetupGPRS>
 8004c9e:	e797      	b.n	8004bd0 <InitGSM+0x230>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ca0:	220c      	movs	r2, #12
 8004ca2:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ca4:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ca6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ca8:	4926      	ldr	r1, [pc, #152]	; (8004d44 <InitGSM+0x3a4>)
 8004caa:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <InitGSM+0x38c>)
 8004cac:	322a      	adds	r2, #42	; 0x2a
 8004cae:	f006 f9a1 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <InitGSM+0x390>)
 8004cb4:	ae05      	add	r6, sp, #20
 8004cb6:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004cb8:	2202      	movs	r2, #2
 8004cba:	230a      	movs	r3, #10
 8004cbc:	0031      	movs	r1, r6
 8004cbe:	0028      	movs	r0, r5
 8004cc0:	f006 f998 	bl	800aff4 <HAL_UART_Transmit>
										SetupGPRS("bsnlnet"); // taisysnet");
 8004cc4:	4820      	ldr	r0, [pc, #128]	; (8004d48 <InitGSM+0x3a8>)
 8004cc6:	f7ff fc5d 	bl	8004584 <SetupGPRS>
 8004cca:	e781      	b.n	8004bd0 <InitGSM+0x230>
 8004ccc:	08013380 	.word	0x08013380
 8004cd0:	08012c98 	.word	0x08012c98
 8004cd4:	200000c8 	.word	0x200000c8
 8004cd8:	08013944 	.word	0x08013944
 8004cdc:	08013388 	.word	0x08013388
 8004ce0:	08012b7c 	.word	0x08012b7c
 8004ce4:	0801339c 	.word	0x0801339c
 8004ce8:	080133b0 	.word	0x080133b0
 8004cec:	080133c4 	.word	0x080133c4
 8004cf0:	080133d0 	.word	0x080133d0
 8004cf4:	080133f8 	.word	0x080133f8
 8004cf8:	08013404 	.word	0x08013404
 8004cfc:	0801342c 	.word	0x0801342c
 8004d00:	08013438 	.word	0x08013438
 8004d04:	08013454 	.word	0x08013454
 8004d08:	08013460 	.word	0x08013460
 8004d0c:	08013490 	.word	0x08013490
 8004d10:	080134a0 	.word	0x080134a0
 8004d14:	00000bb8 	.word	0x00000bb8
 8004d18:	080134cc 	.word	0x080134cc
 8004d1c:	080134dc 	.word	0x080134dc
 8004d20:	2000009c 	.word	0x2000009c
 8004d24:	20004bc8 	.word	0x20004bc8
 8004d28:	0801358c 	.word	0x0801358c
 8004d2c:	00001388 	.word	0x00001388
 8004d30:	00000a0d 	.word	0x00000a0d
 8004d34:	08012f68 	.word	0x08012f68
 8004d38:	08012f74 	.word	0x08012f74
 8004d3c:	08013504 	.word	0x08013504
 8004d40:	08013540 	.word	0x08013540
 8004d44:	0801354c 	.word	0x0801354c
 8004d48:	08013584 	.word	0x08013584

08004d4c <GSMSigQuality>:
{
 8004d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4e:	46ce      	mov	lr, r9
 8004d50:	4647      	mov	r7, r8
	GSMSignal = 0;
 8004d52:	2300      	movs	r3, #0
{
 8004d54:	b580      	push	{r7, lr}
	GSMSignal = 0;
 8004d56:	4d67      	ldr	r5, [pc, #412]	; (8004ef4 <GSMSigQuality+0x1a8>)
{
 8004d58:	b087      	sub	sp, #28
	SendGSMCode(" AT+CSQ");
 8004d5a:	4867      	ldr	r0, [pc, #412]	; (8004ef8 <GSMSigQuality+0x1ac>)
	GSMSignal = 0;
 8004d5c:	602b      	str	r3, [r5, #0]
	SendGSMCode(" AT+CSQ");
 8004d5e:	f7fe fb81 	bl	8003464 <SendGSMCode>
	HAL_Delay(100);
 8004d62:	2064      	movs	r0, #100	; 0x64
 8004d64:	f003 f852 	bl	8007e0c <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8004d68:	4a64      	ldr	r2, [pc, #400]	; (8004efc <GSMSigQuality+0x1b0>)
 8004d6a:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <GSMSigQuality+0x1b4>)
 8004d6c:	9202      	str	r2, [sp, #8]
 8004d6e:	4a65      	ldr	r2, [pc, #404]	; (8004f04 <GSMSigQuality+0x1b8>)
 8004d70:	4965      	ldr	r1, [pc, #404]	; (8004f08 <GSMSigQuality+0x1bc>)
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	2000      	movs	r0, #0
 8004d76:	9201      	str	r2, [sp, #4]
 8004d78:	4a64      	ldr	r2, [pc, #400]	; (8004f0c <GSMSigQuality+0x1c0>)
 8004d7a:	9200      	str	r2, [sp, #0]
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	f7fe fd19 	bl	80037b4 <GetGSMReply>
 8004d82:	2100      	movs	r1, #0
 8004d84:	f008 ff80 	bl	800dc88 <strtod>
 8004d88:	f7fe f9da 	bl	8003140 <__aeabi_d2f>
	if (GSMSignal > 5)
 8004d8c:	4960      	ldr	r1, [pc, #384]	; (8004f10 <GSMSigQuality+0x1c4>)
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8004d8e:	6028      	str	r0, [r5, #0]
	if (GSMSignal > 5)
 8004d90:	f7fb fbb0 	bl	80004f4 <__aeabi_fcmpgt>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d021      	beq.n	8004ddc <GSMSigQuality+0x90>
	}
}

static void SET_LED_NET(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 8004d98:	2201      	movs	r2, #1
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	485d      	ldr	r0, [pc, #372]	; (8004f14 <GSMSigQuality+0x1c8>)
 8004d9e:	f003 fefd 	bl	8008b9c <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004da2:	220c      	movs	r2, #12
 8004da4:	4c5c      	ldr	r4, [pc, #368]	; (8004f18 <GSMSigQuality+0x1cc>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004da6:	495d      	ldr	r1, [pc, #372]	; (8004f1c <GSMSigQuality+0x1d0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004da8:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004daa:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004dac:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004dae:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <GSMSigQuality+0x1d4>)
 8004db0:	3a04      	subs	r2, #4
 8004db2:	f006 f91f 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004db6:	4b5b      	ldr	r3, [pc, #364]	; (8004f24 <GSMSigQuality+0x1d8>)
 8004db8:	a905      	add	r1, sp, #20
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004dba:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8004dbc:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	230a      	movs	r3, #10
 8004dc2:	f006 f917 	bl	800aff4 <HAL_UART_Transmit>
		gsmerrC=0;
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	4b57      	ldr	r3, [pc, #348]	; (8004f28 <GSMSigQuality+0x1dc>)
 8004dca:	601a      	str	r2, [r3, #0]
	return (GSMSignal); // must be higher than 5 ,range 0-33
 8004dcc:	6828      	ldr	r0, [r5, #0]
 8004dce:	f7fc fa6d 	bl	80012ac <__aeabi_f2iz>
}
 8004dd2:	b007      	add	sp, #28
 8004dd4:	bcc0      	pop	{r6, r7}
 8004dd6:	46b9      	mov	r9, r7
 8004dd8:	46b0      	mov	r8, r6
 8004dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ddc:	220c      	movs	r2, #12
 8004dde:	4e4e      	ldr	r6, [pc, #312]	; (8004f18 <GSMSigQuality+0x1cc>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004de0:	4952      	ldr	r1, [pc, #328]	; (8004f2c <GSMSigQuality+0x1e0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004de2:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004de4:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004de6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004de8:	4b4d      	ldr	r3, [pc, #308]	; (8004f20 <GSMSigQuality+0x1d4>)
 8004dea:	3201      	adds	r2, #1
 8004dec:	f006 f902 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004df0:	466a      	mov	r2, sp
 8004df2:	4b4c      	ldr	r3, [pc, #304]	; (8004f24 <GSMSigQuality+0x1d8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004df4:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8004df6:	8293      	strh	r3, [r2, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004df8:	0030      	movs	r0, r6
 8004dfa:	230a      	movs	r3, #10
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f006 f8f9 	bl	800aff4 <HAL_UART_Transmit>
		EndTransfer();
 8004e02:	f7fe fc3f 	bl	8003684 <EndTransfer>
	while ((strlen(GSMData) > 0) && (i> 0))
 8004e06:	4c4a      	ldr	r4, [pc, #296]	; (8004f30 <GSMSigQuality+0x1e4>)
 8004e08:	7823      	ldrb	r3, [r4, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d014      	beq.n	8004e38 <GSMSigQuality+0xec>
		memset(GSMData, 0, 4500);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4a48      	ldr	r2, [pc, #288]	; (8004f34 <GSMSigQuality+0x1e8>)
 8004e12:	0020      	movs	r0, r4
 8004e14:	f009 ffc6 	bl	800eda4 <memset>
		HAL_Delay(300);
 8004e18:	2096      	movs	r0, #150	; 0x96
 8004e1a:	0040      	lsls	r0, r0, #1
 8004e1c:	f002 fff6 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8004e20:	7823      	ldrb	r3, [r4, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <GSMSigQuality+0xec>
		memset(GSMData, 0, 4500);
 8004e26:	2100      	movs	r1, #0
 8004e28:	0020      	movs	r0, r4
 8004e2a:	4a42      	ldr	r2, [pc, #264]	; (8004f34 <GSMSigQuality+0x1e8>)
 8004e2c:	f009 ffba 	bl	800eda4 <memset>
		HAL_Delay(300);
 8004e30:	2096      	movs	r0, #150	; 0x96
 8004e32:	0040      	lsls	r0, r0, #1
 8004e34:	f002 ffea 	bl	8007e0c <HAL_Delay>
		SendGSMCode(" AT+QISDE=0");
 8004e38:	483f      	ldr	r0, [pc, #252]	; (8004f38 <GSMSigQuality+0x1ec>)
 8004e3a:	f7fe fb13 	bl	8003464 <SendGSMCode>
		HAL_Delay(350);
 8004e3e:	20af      	movs	r0, #175	; 0xaf
 8004e40:	0040      	lsls	r0, r0, #1
 8004e42:	f002 ffe3 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8004e46:	7823      	ldrb	r3, [r4, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d014      	beq.n	8004e76 <GSMSigQuality+0x12a>
		memset(GSMData, 0, 4500);
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4a39      	ldr	r2, [pc, #228]	; (8004f34 <GSMSigQuality+0x1e8>)
 8004e50:	0020      	movs	r0, r4
 8004e52:	f009 ffa7 	bl	800eda4 <memset>
		HAL_Delay(300);
 8004e56:	2096      	movs	r0, #150	; 0x96
 8004e58:	0040      	lsls	r0, r0, #1
 8004e5a:	f002 ffd7 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8004e5e:	7823      	ldrb	r3, [r4, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <GSMSigQuality+0x12a>
		memset(GSMData, 0, 4500);
 8004e64:	2100      	movs	r1, #0
 8004e66:	0020      	movs	r0, r4
 8004e68:	4a32      	ldr	r2, [pc, #200]	; (8004f34 <GSMSigQuality+0x1e8>)
 8004e6a:	f009 ff9b 	bl	800eda4 <memset>
		HAL_Delay(300);
 8004e6e:	2096      	movs	r0, #150	; 0x96
 8004e70:	0040      	lsls	r0, r0, #1
 8004e72:	f002 ffcb 	bl	8007e0c <HAL_Delay>
		gsmerrC=gsmerrC+1;
 8004e76:	4c2c      	ldr	r4, [pc, #176]	; (8004f28 <GSMSigQuality+0x1dc>)
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	3301      	adds	r3, #1
		if (gsmerrC>10){
 8004e7c:	2b0a      	cmp	r3, #10
 8004e7e:	dc06      	bgt.n	8004e8e <GSMSigQuality+0x142>
		gsmerrC=gsmerrC+1;
 8004e80:	6023      	str	r3, [r4, #0]
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 8004e82:	2200      	movs	r2, #0
 8004e84:	2102      	movs	r1, #2
 8004e86:	4823      	ldr	r0, [pc, #140]	; (8004f14 <GSMSigQuality+0x1c8>)
 8004e88:	f003 fe88 	bl	8008b9c <HAL_GPIO_WritePin>
 8004e8c:	e79e      	b.n	8004dcc <GSMSigQuality+0x80>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e8e:	220c      	movs	r2, #12
			gsmerrC=0;
 8004e90:	2700      	movs	r7, #0
 8004e92:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <GSMSigQuality+0x1f0>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e94:	482a      	ldr	r0, [pc, #168]	; (8004f40 <GSMSigQuality+0x1f4>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e96:	4699      	mov	r9, r3
 8004e98:	681b      	ldr	r3, [r3, #0]
	GSMBuff[0]=0;
 8004e9a:	492a      	ldr	r1, [pc, #168]	; (8004f44 <GSMSigQuality+0x1f8>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e9c:	621a      	str	r2, [r3, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e9e:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ea0:	4690      	mov	r8, r2
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ea2:	621a      	str	r2, [r3, #32]
	GSMBuff[0]=0;
 8004ea4:	700f      	strb	r7, [r1, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8004ea6:	3a0b      	subs	r2, #11
 8004ea8:	6027      	str	r7, [r4, #0]
 8004eaa:	f006 fa71 	bl	800b390 <HAL_UART_Receive_DMA>
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8004eae:	22e1      	movs	r2, #225	; 0xe1
 8004eb0:	4925      	ldr	r1, [pc, #148]	; (8004f48 <GSMSigQuality+0x1fc>)
 8004eb2:	0092      	lsls	r2, r2, #2
 8004eb4:	4648      	mov	r0, r9
 8004eb6:	f006 fa6b 	bl	800b390 <HAL_UART_Receive_DMA>
		HAL_Delay(3350);
 8004eba:	4824      	ldr	r0, [pc, #144]	; (8004f4c <GSMSigQuality+0x200>)
 8004ebc:	f002 ffa6 	bl	8007e0c <HAL_Delay>
		InitGSM();
 8004ec0:	f7ff fd6e 	bl	80049a0 <InitGSM>
		HAL_Delay(350);
 8004ec4:	20af      	movs	r0, #175	; 0xaf
 8004ec6:	0040      	lsls	r0, r0, #1
 8004ec8:	f002 ffa0 	bl	8007e0c <HAL_Delay>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ecc:	4642      	mov	r2, r8
 8004ece:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ed0:	491f      	ldr	r1, [pc, #124]	; (8004f50 <GSMSigQuality+0x204>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ed2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ed4:	0030      	movs	r0, r6
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <GSMSigQuality+0x1d4>)
 8004ed8:	f006 f88c 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004edc:	466a      	mov	r2, sp
 8004ede:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <GSMSigQuality+0x1d8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004ee0:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8004ee2:	8293      	strh	r3, [r2, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004ee4:	a905      	add	r1, sp, #20
 8004ee6:	230a      	movs	r3, #10
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f006 f883 	bl	800aff4 <HAL_UART_Transmit>
		gsmerrC=0;
 8004eee:	6027      	str	r7, [r4, #0]
 8004ef0:	e7c7      	b.n	8004e82 <GSMSigQuality+0x136>
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	20001d98 	.word	0x20001d98
 8004ef8:	080135c8 	.word	0x080135c8
 8004efc:	080135d8 	.word	0x080135d8
 8004f00:	08012e44 	.word	0x08012e44
 8004f04:	200000c8 	.word	0x200000c8
 8004f08:	080135d0 	.word	0x080135d0
 8004f0c:	080135dc 	.word	0x080135dc
 8004f10:	40a00000 	.word	0x40a00000
 8004f14:	50000c00 	.word	0x50000c00
 8004f18:	20004bc8 	.word	0x20004bc8
 8004f1c:	080135fc 	.word	0x080135fc
 8004f20:	00001388 	.word	0x00001388
 8004f24:	00000a0d 	.word	0x00000a0d
 8004f28:	20004774 	.word	0x20004774
 8004f2c:	08013608 	.word	0x08013608
 8004f30:	20000754 	.word	0x20000754
 8004f34:	00001194 	.word	0x00001194
 8004f38:	08012cc4 	.word	0x08012cc4
 8004f3c:	20004b34 	.word	0x20004b34
 8004f40:	20004aa0 	.word	0x20004aa0
 8004f44:	20000750 	.word	0x20000750
 8004f48:	200042f8 	.word	0x200042f8
 8004f4c:	00000d16 	.word	0x00000d16
 8004f50:	08013618 	.word	0x08013618

08004f54 <SPI_flash_get_device_ID>:

void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
}

void SPI_flash_get_device_ID( ) {
 8004f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f56:	46de      	mov	lr, fp
 8004f58:	4657      	mov	r7, sl
 8004f5a:	464e      	mov	r6, r9
 8004f5c:	4645      	mov	r5, r8
    SPI_flash_cs_low;
 8004f5e:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_get_device_ID( ) {
 8004f60:	b5e0      	push	{r5, r6, r7, lr}
    SPI_flash_cs_low;
 8004f62:	05db      	lsls	r3, r3, #23
void SPI_flash_get_device_ID( ) {
 8004f64:	b0a3      	sub	sp, #140	; 0x8c
    SPI_flash_cs_low;
 8004f66:	0018      	movs	r0, r3
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2110      	movs	r1, #16
 8004f6c:	469a      	mov	sl, r3
 8004f6e:	f003 fe15 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8004f72:	2390      	movs	r3, #144	; 0x90
 8004f74:	ad09      	add	r5, sp, #36	; 0x24
 8004f76:	702b      	strb	r3, [r5, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f78:	23fa      	movs	r3, #250	; 0xfa
 8004f7a:	4f62      	ldr	r7, [pc, #392]	; (8005104 <SPI_flash_get_device_ID+0x1b0>)
 8004f7c:	0029      	movs	r1, r5
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	2201      	movs	r2, #1
 8004f82:	0038      	movs	r0, r7
 8004f84:	4699      	mov	r9, r3
 8004f86:	f005 f86d 	bl	800a064 <HAL_SPI_Transmit>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8004f8a:	2300      	movs	r3, #0
    aa[1]=0;
    aa[2]=0;
    aa[3]=0;
    aa[4]=0;
 8004f8c:	ac06      	add	r4, sp, #24
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004f8e:	0021      	movs	r1, r4
    aa[0]=0;
 8004f90:	9306      	str	r3, [sp, #24]
    aa[4]=0;
 8004f92:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004f94:	2203      	movs	r2, #3
 8004f96:	464b      	mov	r3, r9
 8004f98:	0038      	movs	r0, r7
 8004f9a:	f005 f863 	bl	800a064 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004f9e:	464a      	mov	r2, r9
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	9200      	str	r2, [sp, #0]
 8004fa6:	0038      	movs	r0, r7
 8004fa8:	0022      	movs	r2, r4
 8004faa:	f005 f927 	bl	800a1fc <HAL_SPI_TransmitReceive>
    aa[5]=0;
    SPI_flash_sent_address (aa);
    SPI_flash_TransmitReceive(aa, 2);
    SPI_flash_cs_high;
 8004fae:	4650      	mov	r0, sl
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	2110      	movs	r1, #16
 8004fb4:	f003 fdf2 	bl	8008b9c <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8004fb8:	7863      	ldrb	r3, [r4, #1]
 8004fba:	7822      	ldrb	r2, [r4, #0]
 8004fbc:	4952      	ldr	r1, [pc, #328]	; (8005108 <SPI_flash_get_device_ID+0x1b4>)
 8004fbe:	0028      	movs	r0, r5
 8004fc0:	f009 fe84 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004fc4:	4a51      	ldr	r2, [pc, #324]	; (800510c <SPI_flash_get_device_ID+0x1b8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004fc6:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004fc8:	4690      	mov	r8, r2
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	220c      	movs	r2, #12
 8004fce:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004fd0:	f7fb f89a 	bl	8000108 <strlen>
 8004fd4:	494e      	ldr	r1, [pc, #312]	; (8005110 <SPI_flash_get_device_ID+0x1bc>)
 8004fd6:	b282      	uxth	r2, r0
 8004fd8:	468b      	mov	fp, r1
 8004fda:	000b      	movs	r3, r1
 8004fdc:	4640      	mov	r0, r8
 8004fde:	0029      	movs	r1, r5
 8004fe0:	f006 f808 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004fe4:	494b      	ldr	r1, [pc, #300]	; (8005114 <SPI_flash_get_device_ID+0x1c0>)
 8004fe6:	ae05      	add	r6, sp, #20
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004fe8:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004fea:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004fec:	2202      	movs	r2, #2
 8004fee:	0031      	movs	r1, r6
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	f005 ffff 	bl	800aff4 <HAL_UART_Transmit>
    Debug_Tx((char*)bufd);

    SPI_flash_cs_low;
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2110      	movs	r1, #16
 8004ffc:	f003 fdce 	bl	8008b9c <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8005000:	239f      	movs	r3, #159	; 0x9f
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005002:	0031      	movs	r1, r6
 8005004:	7033      	strb	r3, [r6, #0]
 8005006:	2201      	movs	r2, #1
 8005008:	464b      	mov	r3, r9
 800500a:	0038      	movs	r0, r7
 800500c:	f005 f82a 	bl	800a064 <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8005010:	2300      	movs	r3, #0
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8005012:	4648      	mov	r0, r9
       aa[1]=0;
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
 8005014:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8005016:	0022      	movs	r2, r4
 8005018:	0021      	movs	r1, r4
       aa[0]=0;
 800501a:	9306      	str	r3, [sp, #24]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 800501c:	9000      	str	r0, [sp, #0]
 800501e:	3303      	adds	r3, #3
 8005020:	0038      	movs	r0, r7
 8005022:	f005 f8eb 	bl	800a1fc <HAL_SPI_TransmitReceive>
       aa[5]=0;
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
       SPI_flash_cs_high;
 8005026:	4650      	mov	r0, sl
 8005028:	2201      	movs	r2, #1
 800502a:	2110      	movs	r1, #16
 800502c:	f003 fdb6 	bl	8008b9c <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8005030:	78a0      	ldrb	r0, [r4, #2]
 8005032:	7863      	ldrb	r3, [r4, #1]
 8005034:	7822      	ldrb	r2, [r4, #0]
 8005036:	4938      	ldr	r1, [pc, #224]	; (8005118 <SPI_flash_get_device_ID+0x1c4>)
 8005038:	9000      	str	r0, [sp, #0]
 800503a:	0028      	movs	r0, r5
 800503c:	f009 fe46 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005040:	4640      	mov	r0, r8
 8005042:	220c      	movs	r2, #12
 8005044:	6803      	ldr	r3, [r0, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005046:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005048:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800504a:	f7fb f85d 	bl	8000108 <strlen>
 800504e:	465b      	mov	r3, fp
 8005050:	0029      	movs	r1, r5
 8005052:	b282      	uxth	r2, r0
 8005054:	4640      	mov	r0, r8
 8005056:	f005 ffcd 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800505a:	492e      	ldr	r1, [pc, #184]	; (8005114 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800505c:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 800505e:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005060:	2202      	movs	r2, #2
 8005062:	0031      	movs	r1, r6
 8005064:	4640      	mov	r0, r8
 8005066:	f005 ffc5 	bl	800aff4 <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);



       SPI_flash_cs_low;
 800506a:	4650      	mov	r0, sl
 800506c:	2200      	movs	r2, #0
 800506e:	2110      	movs	r1, #16
 8005070:	f003 fd94 	bl	8008b9c <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8005074:	234b      	movs	r3, #75	; 0x4b
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005076:	0031      	movs	r1, r6
 8005078:	7033      	strb	r3, [r6, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	464b      	mov	r3, r9
 800507e:	0038      	movs	r0, r7
 8005080:	f004 fff0 	bl	800a064 <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8005084:	2300      	movs	r3, #0
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
       aa[5]=0;
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8005086:	0021      	movs	r1, r4
       aa[0]=0;
 8005088:	9306      	str	r3, [sp, #24]
       aa[4]=0;
 800508a:	80a3      	strh	r3, [r4, #4]
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 800508c:	2204      	movs	r2, #4
 800508e:	464b      	mov	r3, r9
 8005090:	0038      	movs	r0, r7
 8005092:	f004 ffe7 	bl	800a064 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8005096:	464b      	mov	r3, r9
 8005098:	0022      	movs	r2, r4
 800509a:	0021      	movs	r1, r4
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	0038      	movs	r0, r7
 80050a0:	2306      	movs	r3, #6
 80050a2:	f005 f8ab 	bl	800a1fc <HAL_SPI_TransmitReceive>
       SPI_flash_TransmitReceive(aa, 6);
       SPI_flash_cs_high;
 80050a6:	4650      	mov	r0, sl
 80050a8:	2201      	movs	r2, #1
 80050aa:	2110      	movs	r1, #16
 80050ac:	f003 fd76 	bl	8008b9c <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 80050b0:	7960      	ldrb	r0, [r4, #5]
 80050b2:	7863      	ldrb	r3, [r4, #1]
 80050b4:	7822      	ldrb	r2, [r4, #0]
 80050b6:	9003      	str	r0, [sp, #12]
 80050b8:	7920      	ldrb	r0, [r4, #4]
 80050ba:	4918      	ldr	r1, [pc, #96]	; (800511c <SPI_flash_get_device_ID+0x1c8>)
 80050bc:	9002      	str	r0, [sp, #8]
 80050be:	78e0      	ldrb	r0, [r4, #3]
 80050c0:	9001      	str	r0, [sp, #4]
 80050c2:	78a0      	ldrb	r0, [r4, #2]
 80050c4:	9000      	str	r0, [sp, #0]
 80050c6:	0028      	movs	r0, r5
 80050c8:	f009 fe00 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80050cc:	4643      	mov	r3, r8
 80050ce:	220c      	movs	r2, #12
 80050d0:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80050d2:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80050d4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80050d6:	f7fb f817 	bl	8000108 <strlen>
 80050da:	465b      	mov	r3, fp
 80050dc:	0029      	movs	r1, r5
 80050de:	b282      	uxth	r2, r0
 80050e0:	4640      	mov	r0, r8
 80050e2:	f005 ff87 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80050e6:	490b      	ldr	r1, [pc, #44]	; (8005114 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80050e8:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 80050ea:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80050ec:	2202      	movs	r2, #2
 80050ee:	0031      	movs	r1, r6
 80050f0:	4640      	mov	r0, r8
 80050f2:	f005 ff7f 	bl	800aff4 <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);
}
 80050f6:	b023      	add	sp, #140	; 0x8c
 80050f8:	bcf0      	pop	{r4, r5, r6, r7}
 80050fa:	46bb      	mov	fp, r7
 80050fc:	46b2      	mov	sl, r6
 80050fe:	46a9      	mov	r9, r5
 8005100:	46a0      	mov	r8, r4
 8005102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005104:	200049f0 	.word	0x200049f0
 8005108:	08013628 	.word	0x08013628
 800510c:	20004bc8 	.word	0x20004bc8
 8005110:	00001388 	.word	0x00001388
 8005114:	00000a0d 	.word	0x00000a0d
 8005118:	08013648 	.word	0x08013648
 800511c:	08013664 	.word	0x08013664

08005120 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8005120:	b5f0      	push	{r4, r5, r6, r7, lr}
    SPI_flash_cs_low;
 8005122:	24a0      	movs	r4, #160	; 0xa0
 8005124:	05e4      	lsls	r4, r4, #23
void SPI_flash_Sector_Erase(uint8_t* address) {
 8005126:	b083      	sub	sp, #12
 8005128:	0007      	movs	r7, r0
    SPI_flash_cs_low;
 800512a:	2200      	movs	r2, #0
 800512c:	0020      	movs	r0, r4
 800512e:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005130:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8005132:	f003 fd33 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8005136:	466a      	mov	r2, sp
 8005138:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800513a:	4669      	mov	r1, sp
 800513c:	4d23      	ldr	r5, [pc, #140]	; (80051cc <SPI_flash_Sector_Erase+0xac>)
 800513e:	00b6      	lsls	r6, r6, #2
 8005140:	71d3      	strb	r3, [r2, #7]
 8005142:	0028      	movs	r0, r5
 8005144:	0033      	movs	r3, r6
 8005146:	2201      	movs	r2, #1
 8005148:	3107      	adds	r1, #7
 800514a:	f004 ff8b 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 800514e:	0020      	movs	r0, r4
 8005150:	2201      	movs	r2, #1
 8005152:	2110      	movs	r1, #16
 8005154:	f003 fd22 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8005158:	0020      	movs	r0, r4
 800515a:	2200      	movs	r2, #0
 800515c:	2110      	movs	r1, #16
 800515e:	f003 fd1d 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8005162:	466a      	mov	r2, sp
 8005164:	2320      	movs	r3, #32
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005166:	4669      	mov	r1, sp
 8005168:	71d3      	strb	r3, [r2, #7]
 800516a:	0028      	movs	r0, r5
 800516c:	0033      	movs	r3, r6
 800516e:	2201      	movs	r2, #1
 8005170:	3107      	adds	r1, #7
 8005172:	f004 ff77 	bl	800a064 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8005176:	0033      	movs	r3, r6
 8005178:	0039      	movs	r1, r7
 800517a:	2203      	movs	r2, #3
 800517c:	0028      	movs	r0, r5
 800517e:	f004 ff71 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_sent_address (address);
    SPI_flash_cs_high;
 8005182:	0020      	movs	r0, r4
 8005184:	2201      	movs	r2, #1
 8005186:	2110      	movs	r1, #16
 8005188:	f003 fd08 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 800518c:	0020      	movs	r0, r4
 800518e:	2200      	movs	r2, #0
 8005190:	2110      	movs	r1, #16
 8005192:	f003 fd03 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8005196:	466a      	mov	r2, sp
 8005198:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800519a:	4669      	mov	r1, sp
 800519c:	71d3      	strb	r3, [r2, #7]
 800519e:	0028      	movs	r0, r5
 80051a0:	0033      	movs	r3, r6
 80051a2:	2201      	movs	r2, #1
 80051a4:	3107      	adds	r1, #7
 80051a6:	f004 ff5d 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 80051aa:	0020      	movs	r0, r4
 80051ac:	2201      	movs	r2, #1
 80051ae:	2110      	movs	r1, #16
 80051b0:	f003 fcf4 	bl	8008b9c <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80051b4:	220c      	movs	r2, #12
 80051b6:	4806      	ldr	r0, [pc, #24]	; (80051d0 <SPI_flash_Sector_Erase+0xb0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 80051b8:	4906      	ldr	r1, [pc, #24]	; (80051d4 <SPI_flash_Sector_Erase+0xb4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80051ba:	6803      	ldr	r3, [r0, #0]
 80051bc:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 80051be:	2396      	movs	r3, #150	; 0x96
 80051c0:	0032      	movs	r2, r6
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	f005 ff88 	bl	800b0d8 <HAL_UART_Receive>
    SPI_flash_Write_Disable();
    //HAL_Delay(100);
	Debug_Rx();
}
 80051c8:	b003      	add	sp, #12
 80051ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051cc:	200049f0 	.word	0x200049f0
 80051d0:	20004bc8 	.word	0x20004bc8
 80051d4:	20004c5c 	.word	0x20004c5c

080051d8 <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 80051d8:	b570      	push	{r4, r5, r6, lr}
    SPI_flash_cs_low;
 80051da:	24a0      	movs	r4, #160	; 0xa0
 80051dc:	05e4      	lsls	r4, r4, #23
void SPI_flash_Chip_Erase(){
 80051de:	b082      	sub	sp, #8
    SPI_flash_cs_low;
 80051e0:	0020      	movs	r0, r4
 80051e2:	2200      	movs	r2, #0
 80051e4:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80051e6:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 80051e8:	f003 fcd8 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 80051ec:	466a      	mov	r2, sp
 80051ee:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80051f0:	4669      	mov	r1, sp
 80051f2:	4d1c      	ldr	r5, [pc, #112]	; (8005264 <SPI_flash_Chip_Erase+0x8c>)
 80051f4:	00b6      	lsls	r6, r6, #2
 80051f6:	71d3      	strb	r3, [r2, #7]
 80051f8:	0028      	movs	r0, r5
 80051fa:	0033      	movs	r3, r6
 80051fc:	2201      	movs	r2, #1
 80051fe:	3107      	adds	r1, #7
 8005200:	f004 ff30 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8005204:	0020      	movs	r0, r4
 8005206:	2201      	movs	r2, #1
 8005208:	2110      	movs	r1, #16
 800520a:	f003 fcc7 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 800520e:	0020      	movs	r0, r4
 8005210:	2200      	movs	r2, #0
 8005212:	2110      	movs	r1, #16
 8005214:	f003 fcc2 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8005218:	466a      	mov	r2, sp
 800521a:	23c7      	movs	r3, #199	; 0xc7
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800521c:	4669      	mov	r1, sp
 800521e:	71d3      	strb	r3, [r2, #7]
 8005220:	0028      	movs	r0, r5
 8005222:	0033      	movs	r3, r6
 8005224:	2201      	movs	r2, #1
 8005226:	3107      	adds	r1, #7
 8005228:	f004 ff1c 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 800522c:	0020      	movs	r0, r4
 800522e:	2201      	movs	r2, #1
 8005230:	2110      	movs	r1, #16
 8005232:	f003 fcb3 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8005236:	0020      	movs	r0, r4
 8005238:	2200      	movs	r2, #0
 800523a:	2110      	movs	r1, #16
 800523c:	f003 fcae 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8005240:	466a      	mov	r2, sp
 8005242:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005244:	4669      	mov	r1, sp
 8005246:	71d3      	strb	r3, [r2, #7]
 8005248:	0028      	movs	r0, r5
 800524a:	0033      	movs	r3, r6
 800524c:	2201      	movs	r2, #1
 800524e:	3107      	adds	r1, #7
 8005250:	f004 ff08 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8005254:	2201      	movs	r2, #1
 8005256:	2110      	movs	r1, #16
 8005258:	0020      	movs	r0, r4
 800525a:	f003 fc9f 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
}
 800525e:	b002      	add	sp, #8
 8005260:	bd70      	pop	{r4, r5, r6, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	200049f0 	.word	0x200049f0

08005268 <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8005268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526a:	46ce      	mov	lr, r9
 800526c:	4647      	mov	r7, r8
    SPI_flash_cs_low;
 800526e:	26a0      	movs	r6, #160	; 0xa0
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8005270:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 8005272:	05f6      	lsls	r6, r6, #23
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8005274:	b085      	sub	sp, #20
 8005276:	000f      	movs	r7, r1
 8005278:	4681      	mov	r9, r0
 800527a:	4690      	mov	r8, r2
    SPI_flash_cs_low;
 800527c:	0030      	movs	r0, r6
 800527e:	2200      	movs	r2, #0
 8005280:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005282:	25fa      	movs	r5, #250	; 0xfa
    SPI_flash_cs_low;
 8005284:	f003 fc8a 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8005288:	466a      	mov	r2, sp
 800528a:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800528c:	210f      	movs	r1, #15
 800528e:	4c29      	ldr	r4, [pc, #164]	; (8005334 <SPI_flash_Page_Program+0xcc>)
 8005290:	00ad      	lsls	r5, r5, #2
 8005292:	73d3      	strb	r3, [r2, #15]
 8005294:	4469      	add	r1, sp
 8005296:	002b      	movs	r3, r5
 8005298:	2201      	movs	r2, #1
 800529a:	0020      	movs	r0, r4
 800529c:	f004 fee2 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 80052a0:	0030      	movs	r0, r6
 80052a2:	2201      	movs	r2, #1
 80052a4:	2110      	movs	r1, #16
 80052a6:	f003 fc79 	bl	8008b9c <HAL_GPIO_WritePin>
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 80052aa:	0030      	movs	r0, r6
 80052ac:	2200      	movs	r2, #0
 80052ae:	2110      	movs	r1, #16
 80052b0:	f003 fc74 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 80052b4:	466a      	mov	r2, sp
 80052b6:	2302      	movs	r3, #2
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80052b8:	210f      	movs	r1, #15
 80052ba:	73d3      	strb	r3, [r2, #15]
 80052bc:	4469      	add	r1, sp
 80052be:	002b      	movs	r3, r5
 80052c0:	2201      	movs	r2, #1
 80052c2:	0020      	movs	r0, r4
 80052c4:	f004 fece 	bl	800a064 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 80052c8:	002b      	movs	r3, r5
 80052ca:	4649      	mov	r1, r9
 80052cc:	2203      	movs	r2, #3
 80052ce:	0020      	movs	r0, r4
 80052d0:	f004 fec8 	bl	800a064 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 80052d4:	4643      	mov	r3, r8
 80052d6:	003a      	movs	r2, r7
 80052d8:	0039      	movs	r1, r7
 80052da:	0020      	movs	r0, r4
 80052dc:	9500      	str	r5, [sp, #0]
 80052de:	f004 ff8d 	bl	800a1fc <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address (data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 80052e2:	0030      	movs	r0, r6
 80052e4:	2201      	movs	r2, #1
 80052e6:	2110      	movs	r1, #16
 80052e8:	f003 fc58 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 80052ec:	0030      	movs	r0, r6
 80052ee:	2200      	movs	r2, #0
 80052f0:	2110      	movs	r1, #16
 80052f2:	f003 fc53 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 80052f6:	466a      	mov	r2, sp
 80052f8:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80052fa:	210f      	movs	r1, #15
 80052fc:	73d3      	strb	r3, [r2, #15]
 80052fe:	4469      	add	r1, sp
 8005300:	002b      	movs	r3, r5
 8005302:	2201      	movs	r2, #1
 8005304:	0020      	movs	r0, r4
 8005306:	f004 fead 	bl	800a064 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 800530a:	0030      	movs	r0, r6
 800530c:	2201      	movs	r2, #1
 800530e:	2110      	movs	r1, #16
 8005310:	f003 fc44 	bl	8008b9c <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005314:	220c      	movs	r2, #12
 8005316:	4808      	ldr	r0, [pc, #32]	; (8005338 <SPI_flash_Page_Program+0xd0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8005318:	4908      	ldr	r1, [pc, #32]	; (800533c <SPI_flash_Page_Program+0xd4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800531a:	6803      	ldr	r3, [r0, #0]
 800531c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 800531e:	2396      	movs	r3, #150	; 0x96
 8005320:	002a      	movs	r2, r5
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	f005 fed8 	bl	800b0d8 <HAL_UART_Receive>
    SPI_flash_Write_Disable();

	Debug_Rx();
    //HAL_Delay(1);
}
 8005328:	b005      	add	sp, #20
 800532a:	bcc0      	pop	{r6, r7}
 800532c:	46b9      	mov	r9, r7
 800532e:	46b0      	mov	r8, r6
 8005330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	200049f0 	.word	0x200049f0
 8005338:	20004bc8 	.word	0x20004bc8
 800533c:	20004c5c 	.word	0x20004c5c

08005340 <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8005340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005342:	46ce      	mov	lr, r9
 8005344:	4647      	mov	r7, r8
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 8005346:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8005348:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 800534a:	05db      	lsls	r3, r3, #23
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 800534c:	b085      	sub	sp, #20
 800534e:	000d      	movs	r5, r1
 8005350:	4680      	mov	r8, r0
 8005352:	0016      	movs	r6, r2
    SPI_flash_cs_low;
 8005354:	0018      	movs	r0, r3
 8005356:	2200      	movs	r2, #0
 8005358:	2110      	movs	r1, #16
 800535a:	4699      	mov	r9, r3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800535c:	27fa      	movs	r7, #250	; 0xfa
    SPI_flash_cs_low;
 800535e:	f003 fc1d 	bl	8008b9c <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8005362:	210f      	movs	r1, #15
 8005364:	2303      	movs	r3, #3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005366:	4c10      	ldr	r4, [pc, #64]	; (80053a8 <SPI_flash_Read_Data+0x68>)
 8005368:	4469      	add	r1, sp
 800536a:	00bf      	lsls	r7, r7, #2
 800536c:	700b      	strb	r3, [r1, #0]
 800536e:	2201      	movs	r2, #1
 8005370:	003b      	movs	r3, r7
 8005372:	0020      	movs	r0, r4
 8005374:	f004 fe76 	bl	800a064 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8005378:	003b      	movs	r3, r7
 800537a:	4641      	mov	r1, r8
 800537c:	2203      	movs	r2, #3
 800537e:	0020      	movs	r0, r4
 8005380:	f004 fe70 	bl	800a064 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8005384:	0033      	movs	r3, r6
 8005386:	002a      	movs	r2, r5
 8005388:	0029      	movs	r1, r5
 800538a:	0020      	movs	r0, r4
 800538c:	9700      	str	r7, [sp, #0]
 800538e:	f004 ff35 	bl	800a1fc <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address(data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 8005392:	2201      	movs	r2, #1
 8005394:	2110      	movs	r1, #16
 8005396:	4648      	mov	r0, r9
 8005398:	f003 fc00 	bl	8008b9c <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 800539c:	b005      	add	sp, #20
 800539e:	bcc0      	pop	{r6, r7}
 80053a0:	46b9      	mov	r9, r7
 80053a2:	46b0      	mov	r8, r6
 80053a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	200049f0 	.word	0x200049f0

080053ac <ReadQdata>:

}



int ReadQdata() {
 80053ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ae:	46d6      	mov	lr, sl
 80053b0:	464f      	mov	r7, r9
 80053b2:	4646      	mov	r6, r8
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 80053b4:	2280      	movs	r2, #128	; 0x80
int ReadQdata() {
 80053b6:	b5c0      	push	{r6, r7, lr}
	memset(ReadMData,0,4096);
 80053b8:	4c3e      	ldr	r4, [pc, #248]	; (80054b4 <ReadQdata+0x108>)
 80053ba:	2100      	movs	r1, #0
int ReadQdata() {
 80053bc:	b0c0      	sub	sp, #256	; 0x100
	memset(ReadMData,0,4096);
 80053be:	0152      	lsls	r2, r2, #5
 80053c0:	0020      	movs	r0, r4
 80053c2:	f009 fcef 	bl	800eda4 <memset>
	memset(ReadMDataS,0,4096);
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	4f3b      	ldr	r7, [pc, #236]	; (80054b8 <ReadQdata+0x10c>)
 80053ca:	0152      	lsls	r2, r2, #5
 80053cc:	2100      	movs	r1, #0
 80053ce:	0038      	movs	r0, r7
 80053d0:	f009 fce8 	bl	800eda4 <memset>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80053d4:	4b39      	ldr	r3, [pc, #228]	; (80054bc <ReadQdata+0x110>)
 80053d6:	4698      	mov	r8, r3
 80053d8:	4642      	mov	r2, r8
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	7852      	ldrb	r2, [r2, #1]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 80053e2:	4a37      	ldr	r2, [pc, #220]	; (80054c0 <ReadQdata+0x114>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80053e4:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 80053e6:	4293      	cmp	r3, r2
 80053e8:	dd50      	ble.n	800548c <ReadQdata+0xe0>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 80053ea:	4642      	mov	r2, r8
	WrtAdd[0]=addi/(256*256);
 80053ec:	4641      	mov	r1, r8
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 80053ee:	7892      	ldrb	r2, [r2, #2]
 80053f0:	260f      	movs	r6, #15
 80053f2:	18d3      	adds	r3, r2, r3
 80053f4:	3b01      	subs	r3, #1
	WrtAdd[0]=addi/(256*256);
 80053f6:	141a      	asrs	r2, r3, #16
 80053f8:	700a      	strb	r2, [r1, #0]
		return 0;
	}
	incrimentAddress2(-1);
	int len=WrtAdd[1]%16;
	len=len+1;
	WrtAdd[1]=WrtAdd[1]/16;
 80053fa:	22f0      	movs	r2, #240	; 0xf0
	WrtAdd[1]=(addi%(256*256))/256;
 80053fc:	121b      	asrs	r3, r3, #8
	len=len+1;
 80053fe:	401e      	ands	r6, r3
	WrtAdd[1]=WrtAdd[1]*16;
 8005400:	4013      	ands	r3, r2
 8005402:	704b      	strb	r3, [r1, #1]
	WrtAdd[2]=0;
 8005404:	2300      	movs	r3, #0
 8005406:	3601      	adds	r6, #1
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005408:	0232      	lsls	r2, r6, #8
	WrtAdd[2]=0;
 800540a:	708b      	strb	r3, [r1, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 800540c:	4640      	mov	r0, r8
 800540e:	0021      	movs	r1, r4
 8005410:	b292      	uxth	r2, r2
 8005412:	f7ff ff95 	bl	8005340 <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 8005416:	4b2b      	ldr	r3, [pc, #172]	; (80054c4 <ReadQdata+0x118>)
		memset(temp,0,256);
		for (int j=0;j<256;j++){
 8005418:	2580      	movs	r5, #128	; 0x80
 800541a:	469a      	mov	sl, r3
			if (temp[j]==255){
				temp[j]=0;
				break;
			}
		}
		temp[255]=0;
 800541c:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <ReadQdata+0x11c>)
 800541e:	3e01      	subs	r6, #1
 8005420:	4699      	mov	r9, r3
 8005422:	0236      	lsls	r6, r6, #8
 8005424:	1934      	adds	r4, r6, r4
		for (int j=0;j<256;j++){
 8005426:	006d      	lsls	r5, r5, #1
		memset(temp,0,256);
 8005428:	2100      	movs	r1, #0
 800542a:	22ff      	movs	r2, #255	; 0xff
 800542c:	4668      	mov	r0, sp
 800542e:	f009 fcb9 	bl	800eda4 <memset>
		for (int j=0;j<256;j++){
 8005432:	4669      	mov	r1, sp
 8005434:	2300      	movs	r3, #0
 8005436:	e003      	b.n	8005440 <ReadQdata+0x94>
 8005438:	3301      	adds	r3, #1
 800543a:	3101      	adds	r1, #1
 800543c:	42ab      	cmp	r3, r5
 800543e:	d006      	beq.n	800544e <ReadQdata+0xa2>
			temp[j]=ReadMData[(len-i)*256+j];
 8005440:	5ce2      	ldrb	r2, [r4, r3]
 8005442:	700a      	strb	r2, [r1, #0]
			if (temp[j]==255){
 8005444:	2aff      	cmp	r2, #255	; 0xff
 8005446:	d1f7      	bne.n	8005438 <ReadQdata+0x8c>
				temp[j]=0;
 8005448:	2200      	movs	r2, #0
 800544a:	4669      	mov	r1, sp
 800544c:	54ca      	strb	r2, [r1, r3]
		temp[255]=0;
 800544e:	23ff      	movs	r3, #255	; 0xff
 8005450:	2200      	movs	r2, #0
 8005452:	4669      	mov	r1, sp
 8005454:	0038      	movs	r0, r7
 8005456:	54ca      	strb	r2, [r1, r3]
		strcat(ReadMDataS,temp);
 8005458:	f7fa fe56 	bl	8000108 <strlen>
	for (int i=1;i<=len;i++){
 800545c:	3e01      	subs	r6, #1
		strcat(ReadMDataS,temp);
 800545e:	4669      	mov	r1, sp
 8005460:	1838      	adds	r0, r7, r0
 8005462:	f009 fd65 	bl	800ef30 <stpcpy>
	for (int i=1;i<=len;i++){
 8005466:	3c01      	subs	r4, #1
		strcat(ReadMDataS,"\r\n");
 8005468:	2203      	movs	r2, #3
 800546a:	4651      	mov	r1, sl
	for (int i=1;i<=len;i++){
 800546c:	3eff      	subs	r6, #255	; 0xff
		strcat(ReadMDataS,"\r\n");
 800546e:	f009 fe6b 	bl	800f148 <memcpy>
	for (int i=1;i<=len;i++){
 8005472:	3cff      	subs	r4, #255	; 0xff
 8005474:	454e      	cmp	r6, r9
 8005476:	d1d7      	bne.n	8005428 <ReadQdata+0x7c>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 8005478:	4640      	mov	r0, r8
 800547a:	f7ff fe51 	bl	8005120 <SPI_flash_Sector_Erase>
	return 1;
 800547e:	2001      	movs	r0, #1
}
 8005480:	b040      	add	sp, #256	; 0x100
 8005482:	bce0      	pop	{r5, r6, r7}
 8005484:	46ba      	mov	sl, r7
 8005486:	46b1      	mov	r9, r6
 8005488:	46a8      	mov	r8, r5
 800548a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800548c:	220c      	movs	r2, #12
 800548e:	4c0f      	ldr	r4, [pc, #60]	; (80054cc <ReadQdata+0x120>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005490:	490f      	ldr	r1, [pc, #60]	; (80054d0 <ReadQdata+0x124>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005492:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005494:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005496:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <ReadQdata+0x128>)
 800549a:	f005 fdab 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800549e:	466a      	mov	r2, sp
 80054a0:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <ReadQdata+0x12c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80054a2:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 80054a4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80054a6:	0020      	movs	r0, r4
 80054a8:	230a      	movs	r3, #10
 80054aa:	2202      	movs	r2, #2
 80054ac:	f005 fda2 	bl	800aff4 <HAL_UART_Transmit>
		return 0;
 80054b0:	2000      	movs	r0, #0
}
 80054b2:	e7e5      	b.n	8005480 <ReadQdata+0xd4>
 80054b4:	200020c0 	.word	0x200020c0
 80054b8:	200030c0 	.word	0x200030c0
 80054bc:	200000c0 	.word	0x200000c0
 80054c0:	000300ff 	.word	0x000300ff
 80054c4:	08012a78 	.word	0x08012a78
 80054c8:	ffffff00 	.word	0xffffff00
 80054cc:	20004bc8 	.word	0x20004bc8
 80054d0:	08013688 	.word	0x08013688
 80054d4:	00001388 	.word	0x00001388
 80054d8:	00000a0d 	.word	0x00000a0d

080054dc <InitMEMQ>:

void InitMEMQ(){
 80054dc:	b570      	push	{r4, r5, r6, lr}
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80054de:	4d24      	ldr	r5, [pc, #144]	; (8005570 <InitMEMQ+0x94>)
void InitMEMQ(){
 80054e0:	b0c0      	sub	sp, #256	; 0x100
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80054e2:	782b      	ldrb	r3, [r5, #0]
 80054e4:	786a      	ldrb	r2, [r5, #1]
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 80054ea:	4a22      	ldr	r2, [pc, #136]	; (8005574 <InitMEMQ+0x98>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80054ec:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 80054ee:	4293      	cmp	r3, r2
 80054f0:	dd01      	ble.n	80054f6 <InitMEMQ+0x1a>
		for(i=0;i<2;i++){
			ReadQdata();
		}
	}

}
 80054f2:	b040      	add	sp, #256	; 0x100
 80054f4:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80054f6:	220c      	movs	r2, #12
 80054f8:	4c1f      	ldr	r4, [pc, #124]	; (8005578 <InitMEMQ+0x9c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80054fa:	4920      	ldr	r1, [pc, #128]	; (800557c <InitMEMQ+0xa0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80054fc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80054fe:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005500:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005502:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <InitMEMQ+0xa4>)
 8005504:	320f      	adds	r2, #15
 8005506:	f005 fd75 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800550a:	466a      	mov	r2, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800550c:	0020      	movs	r0, r4
		for(i=0;i<5;i++){
 800550e:	2400      	movs	r4, #0
	char newline[2] = "\r\n";
 8005510:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <InitMEMQ+0xa8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005512:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 8005514:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005516:	230a      	movs	r3, #10
 8005518:	2202      	movs	r2, #2
 800551a:	f005 fd6b 	bl	800aff4 <HAL_UART_Transmit>
 800551e:	4e1a      	ldr	r6, [pc, #104]	; (8005588 <InitMEMQ+0xac>)
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 8005520:	0022      	movs	r2, r4
 8005522:	0023      	movs	r3, r4
 8005524:	0031      	movs	r1, r6
 8005526:	4668      	mov	r0, sp
 8005528:	f009 fbd0 	bl	800eccc <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 800552c:	4668      	mov	r0, sp
 800552e:	f7fa fdeb 	bl	8000108 <strlen>
 8005532:	3001      	adds	r0, #1
 8005534:	b282      	uxth	r2, r0
	if (len<255){
 8005536:	2afe      	cmp	r2, #254	; 0xfe
 8005538:	d907      	bls.n	800554a <InitMEMQ+0x6e>
		for(i=0;i<5;i++){
 800553a:	3401      	adds	r4, #1
 800553c:	2c05      	cmp	r4, #5
 800553e:	d1ef      	bne.n	8005520 <InitMEMQ+0x44>
			ReadQdata();
 8005540:	f7ff ff34 	bl	80053ac <ReadQdata>
 8005544:	f7ff ff32 	bl	80053ac <ReadQdata>
}
 8005548:	e7d3      	b.n	80054f2 <InitMEMQ+0x16>
		SPI_flash_Page_Program(WrtAdd, data,len);
 800554a:	4669      	mov	r1, sp
 800554c:	0028      	movs	r0, r5
 800554e:	f7ff fe8b 	bl	8005268 <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8005552:	782b      	ldrb	r3, [r5, #0]
 8005554:	786a      	ldrb	r2, [r5, #1]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	189b      	adds	r3, r3, r2
 800555a:	78aa      	ldrb	r2, [r5, #2]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	189b      	adds	r3, r3, r2
 8005560:	3301      	adds	r3, #1
 8005562:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 8005564:	141a      	asrs	r2, r3, #16
 8005566:	702a      	strb	r2, [r5, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8005568:	121a      	asrs	r2, r3, #8
 800556a:	706a      	strb	r2, [r5, #1]
	WrtAdd[2]=(addi)%256;
 800556c:	70ab      	strb	r3, [r5, #2]
}
 800556e:	e7e4      	b.n	800553a <InitMEMQ+0x5e>
 8005570:	200000c0 	.word	0x200000c0
 8005574:	000300ff 	.word	0x000300ff
 8005578:	20004bc8 	.word	0x20004bc8
 800557c:	08013698 	.word	0x08013698
 8005580:	00001388 	.word	0x00001388
 8005584:	00000a0d 	.word	0x00000a0d
 8005588:	080136b4 	.word	0x080136b4

0800558c <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	46de      	mov	lr, fp
 8005590:	4657      	mov	r7, sl
 8005592:	464e      	mov	r6, r9
 8005594:	4645      	mov	r5, r8
 8005596:	b5e0      	push	{r5, r6, r7, lr}
 8005598:	4c60      	ldr	r4, [pc, #384]	; (800571c <writeConfig+0x190>)
 800559a:	4699      	mov	r9, r3
 800559c:	44a5      	add	sp, r4
 800559e:	9bd0      	ldr	r3, [sp, #832]	; 0x340
 80055a0:	4692      	mov	sl, r2
 80055a2:	4698      	mov	r8, r3
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 80055a4:	4b5e      	ldr	r3, [pc, #376]	; (8005720 <writeConfig+0x194>)
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80055a6:	000f      	movs	r7, r1
	uint8_t add[]={0x00,0x00,0x00};
 80055a8:	881a      	ldrh	r2, [r3, #0]
 80055aa:	a902      	add	r1, sp, #8
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80055ac:	9ece      	ldr	r6, [sp, #824]	; 0x338
 80055ae:	9dcf      	ldr	r5, [sp, #828]	; 0x33c
	uint8_t add[]={0x00,0x00,0x00};
 80055b0:	808a      	strh	r2, [r1, #4]

	SPI_flash_Read_Data(add , data1 , 256);
 80055b2:	2280      	movs	r2, #128	; 0x80
	uint8_t add[]={0x00,0x00,0x00};
 80055b4:	789b      	ldrb	r3, [r3, #2]
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80055b6:	4683      	mov	fp, r0
	uint8_t add[]={0x00,0x00,0x00};
 80055b8:	718b      	strb	r3, [r1, #6]
	SPI_flash_Read_Data(add , data1 , 256);
 80055ba:	0052      	lsls	r2, r2, #1
 80055bc:	a904      	add	r1, sp, #16
 80055be:	a803      	add	r0, sp, #12
 80055c0:	f7ff febe 	bl	8005340 <SPI_flash_Read_Data>
	add[1]=0x01;
 80055c4:	2301      	movs	r3, #1
 80055c6:	aa02      	add	r2, sp, #8
 80055c8:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data2 , 256);
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	a944      	add	r1, sp, #272	; 0x110
 80055ce:	0052      	lsls	r2, r2, #1
 80055d0:	a803      	add	r0, sp, #12
 80055d2:	f7ff feb5 	bl	8005340 <SPI_flash_Read_Data>
	add[1]=0x02;
 80055d6:	2302      	movs	r3, #2
 80055d8:	aa02      	add	r2, sp, #8
 80055da:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data3 , 256);
 80055dc:	2280      	movs	r2, #128	; 0x80
 80055de:	a984      	add	r1, sp, #528	; 0x210
 80055e0:	0052      	lsls	r2, r2, #1
 80055e2:	a803      	add	r0, sp, #12
 80055e4:	f7ff feac 	bl	8005340 <SPI_flash_Read_Data>



	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80055e8:	465b      	mov	r3, fp
	SPI_flash_Read_Data(add , data3 , 256);
 80055ea:	2401      	movs	r4, #1
 80055ec:	3b01      	subs	r3, #1
 80055ee:	9301      	str	r3, [sp, #4]
		data1[j+i]=RegNo[i];
 80055f0:	9b01      	ldr	r3, [sp, #4]
 80055f2:	aa02      	add	r2, sp, #8
 80055f4:	5d1b      	ldrb	r3, [r3, r4]
 80055f6:	3207      	adds	r2, #7
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80055f8:	4658      	mov	r0, fp
		data1[j+i]=RegNo[i];
 80055fa:	5513      	strb	r3, [r2, r4]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80055fc:	f7fa fd84 	bl	8000108 <strlen>
 8005600:	42a0      	cmp	r0, r4
 8005602:	d302      	bcc.n	800560a <writeConfig+0x7e>
 8005604:	3401      	adds	r4, #1
 8005606:	2c11      	cmp	r4, #17
 8005608:	d1f2      	bne.n	80055f0 <writeConfig+0x64>
 800560a:	2400      	movs	r4, #0
 800560c:	e001      	b.n	8005612 <writeConfig+0x86>
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 800560e:	2c64      	cmp	r4, #100	; 0x64
 8005610:	d009      	beq.n	8005626 <writeConfig+0x9a>
		data1[j+i]=INSMS[i];
 8005612:	5d3a      	ldrb	r2, [r7, r4]
 8005614:	ab04      	add	r3, sp, #16
 8005616:	191b      	adds	r3, r3, r4
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005618:	0038      	movs	r0, r7
		data1[j+i]=INSMS[i];
 800561a:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 800561c:	3401      	adds	r4, #1
 800561e:	f7fa fd73 	bl	8000108 <strlen>
 8005622:	42a0      	cmp	r0, r4
 8005624:	d2f3      	bcs.n	800560e <writeConfig+0x82>
 8005626:	2700      	movs	r7, #0
 8005628:	ac21      	add	r4, sp, #132	; 0x84
 800562a:	e001      	b.n	8005630 <writeConfig+0xa4>
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 800562c:	2f3c      	cmp	r7, #60	; 0x3c
 800562e:	d008      	beq.n	8005642 <writeConfig+0xb6>
		data1[j+i]=OUTSMS[i];
 8005630:	4653      	mov	r3, sl
 8005632:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8005634:	4650      	mov	r0, sl
		data1[j+i]=OUTSMS[i];
 8005636:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8005638:	3701      	adds	r7, #1
 800563a:	f7fa fd65 	bl	8000108 <strlen>
 800563e:	42b8      	cmp	r0, r7
 8005640:	d2f4      	bcs.n	800562c <writeConfig+0xa0>
 8005642:	ab02      	add	r3, sp, #8
 8005644:	469c      	mov	ip, r3
 8005646:	2301      	movs	r3, #1
 8005648:	2408      	movs	r4, #8
 800564a:	425b      	negs	r3, r3
 800564c:	34ff      	adds	r4, #255	; 0xff
 800564e:	444b      	add	r3, r9
 8005650:	2701      	movs	r7, #1
 8005652:	469a      	mov	sl, r3
 8005654:	4464      	add	r4, ip
 8005656:	e002      	b.n	800565e <writeConfig+0xd2>
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8005658:	3701      	adds	r7, #1
 800565a:	2f29      	cmp	r7, #41	; 0x29
 800565c:	d007      	beq.n	800566e <writeConfig+0xe2>
		data2[j+i]=EmgIP[i];
 800565e:	4653      	mov	r3, sl
 8005660:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8005662:	4648      	mov	r0, r9
		data2[j+i]=EmgIP[i];
 8005664:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8005666:	f7fa fd4f 	bl	8000108 <strlen>
 800566a:	42b8      	cmp	r0, r7
 800566c:	d2f4      	bcs.n	8005658 <writeConfig+0xcc>
 800566e:	2700      	movs	r7, #0
 8005670:	ac4e      	add	r4, sp, #312	; 0x138
 8005672:	e001      	b.n	8005678 <writeConfig+0xec>
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8005674:	2f28      	cmp	r7, #40	; 0x28
 8005676:	d007      	beq.n	8005688 <writeConfig+0xfc>
		data2[j+i]=RegIP[i];
 8005678:	5df3      	ldrb	r3, [r6, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 800567a:	0030      	movs	r0, r6
		data2[j+i]=RegIP[i];
 800567c:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 800567e:	3701      	adds	r7, #1
 8005680:	f7fa fd42 	bl	8000108 <strlen>
 8005684:	4287      	cmp	r7, r0
 8005686:	d9f5      	bls.n	8005674 <writeConfig+0xe8>
 8005688:	2600      	movs	r6, #0
 800568a:	ac58      	add	r4, sp, #352	; 0x160
 800568c:	e001      	b.n	8005692 <writeConfig+0x106>
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 800568e:	2e28      	cmp	r6, #40	; 0x28
 8005690:	d007      	beq.n	80056a2 <writeConfig+0x116>
		data2[j+i]=TrackIP[i];
 8005692:	5dab      	ldrb	r3, [r5, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8005694:	0028      	movs	r0, r5
		data2[j+i]=TrackIP[i];
 8005696:	55a3      	strb	r3, [r4, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8005698:	3601      	adds	r6, #1
 800569a:	f7fa fd35 	bl	8000108 <strlen>
 800569e:	42b0      	cmp	r0, r6
 80056a0:	d2f5      	bcs.n	800568e <writeConfig+0x102>
 80056a2:	ab02      	add	r3, sp, #8
 80056a4:	469c      	mov	ip, r3
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80056a6:	2702      	movs	r7, #2
 80056a8:	4643      	mov	r3, r8
 80056aa:	4d1e      	ldr	r5, [pc, #120]	; (8005724 <writeConfig+0x198>)
 80056ac:	2401      	movs	r4, #1
 80056ae:	4465      	add	r5, ip
 80056b0:	1e5e      	subs	r6, r3, #1
 80056b2:	37ff      	adds	r7, #255	; 0xff
 80056b4:	e002      	b.n	80056bc <writeConfig+0x130>
 80056b6:	3401      	adds	r4, #1
 80056b8:	42bc      	cmp	r4, r7
 80056ba:	d006      	beq.n	80056ca <writeConfig+0x13e>
		data3[j+i]=OtherData[i];
 80056bc:	5d33      	ldrb	r3, [r6, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80056be:	4640      	mov	r0, r8
		data3[j+i]=OtherData[i];
 80056c0:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80056c2:	f7fa fd21 	bl	8000108 <strlen>
 80056c6:	42a0      	cmp	r0, r4
 80056c8:	d2f5      	bcs.n	80056b6 <writeConfig+0x12a>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 80056ca:	2300      	movs	r3, #0
 80056cc:	aa02      	add	r2, sp, #8
 80056ce:	7153      	strb	r3, [r2, #5]

	SPI_flash_Sector_Erase(add);
 80056d0:	a803      	add	r0, sp, #12
 80056d2:	f7ff fd25 	bl	8005120 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 80056d6:	2280      	movs	r2, #128	; 0x80
 80056d8:	a904      	add	r1, sp, #16
 80056da:	a803      	add	r0, sp, #12
 80056dc:	0052      	lsls	r2, r2, #1
 80056de:	f7ff fdc3 	bl	8005268 <SPI_flash_Page_Program>
	add[1]=0x01;
 80056e2:	2301      	movs	r3, #1
 80056e4:	aa02      	add	r2, sp, #8
 80056e6:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data2,256);
 80056e8:	2280      	movs	r2, #128	; 0x80
 80056ea:	a944      	add	r1, sp, #272	; 0x110
 80056ec:	a803      	add	r0, sp, #12
 80056ee:	0052      	lsls	r2, r2, #1
 80056f0:	f7ff fdba 	bl	8005268 <SPI_flash_Page_Program>
	add[1]=0x02;
 80056f4:	2302      	movs	r3, #2
 80056f6:	aa02      	add	r2, sp, #8
 80056f8:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data3,256);
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	a803      	add	r0, sp, #12
 80056fe:	0052      	lsls	r2, r2, #1
 8005700:	a984      	add	r1, sp, #528	; 0x210
 8005702:	f7ff fdb1 	bl	8005268 <SPI_flash_Page_Program>
	return 1;

}
 8005706:	2001      	movs	r0, #1
 8005708:	23c5      	movs	r3, #197	; 0xc5
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	449d      	add	sp, r3
 800570e:	bcf0      	pop	{r4, r5, r6, r7}
 8005710:	46bb      	mov	fp, r7
 8005712:	46b2      	mov	sl, r6
 8005714:	46a9      	mov	r9, r5
 8005716:	46a0      	mov	r8, r4
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	fffffcec 	.word	0xfffffcec
 8005720:	080128e0 	.word	0x080128e0
 8005724:	00000207 	.word	0x00000207

08005728 <readRegNo>:



char* readRegNo(){
 8005728:	b510      	push	{r4, lr}
 800572a:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 800572c:	4669      	mov	r1, sp
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <readRegNo+0x3c>)

    memset(dataR,0,256);
 8005730:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <readRegNo+0x40>)
	uint8_t add4[]={0x00, 0x00,0x00};
 8005732:	881a      	ldrh	r2, [r3, #0]
    memset(dataR,0,256);
 8005734:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 8005736:	808a      	strh	r2, [r1, #4]
    memset(dataR,0,256);
 8005738:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 800573a:	789b      	ldrb	r3, [r3, #2]
    memset(dataR,0,256);
 800573c:	0052      	lsls	r2, r2, #1
	uint8_t add4[]={0x00, 0x00,0x00};
 800573e:	718b      	strb	r3, [r1, #6]
    memset(dataR,0,256);
 8005740:	2100      	movs	r1, #0
 8005742:	f009 fb2f 	bl	800eda4 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 8005746:	a801      	add	r0, sp, #4
 8005748:	2210      	movs	r2, #16
 800574a:	0021      	movs	r1, r4
 800574c:	f7ff fdf8 	bl	8005340 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8005750:	0020      	movs	r0, r4
 8005752:	f7fa fcd9 	bl	8000108 <strlen>
 8005756:	2801      	cmp	r0, #1
 8005758:	d800      	bhi.n	800575c <readRegNo+0x34>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
	}
	else{
		return "--Err RegNo--";
 800575a:	4c04      	ldr	r4, [pc, #16]	; (800576c <readRegNo+0x44>)
	}

}
 800575c:	0020      	movs	r0, r4
 800575e:	b002      	add	sp, #8
 8005760:	bd10      	pop	{r4, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	080128e0 	.word	0x080128e0
 8005768:	2000417c 	.word	0x2000417c
 800576c:	0801378c 	.word	0x0801378c

08005770 <detectAcc>:


int detectAcc(){
 8005770:	b570      	push	{r4, r5, r6, lr}
	readAcc();
 8005772:	f7fd fdaf 	bl	80032d4 <readAcc.isra.0>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8005776:	4c14      	ldr	r4, [pc, #80]	; (80057c8 <detectAcc+0x58>)
 8005778:	6861      	ldr	r1, [r4, #4]
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	f7fa ff3e 	bl	80005fc <__aeabi_fadd>
 8005780:	68a1      	ldr	r1, [r4, #8]
 8005782:	f7fa ff3b 	bl	80005fc <__aeabi_fadd>
 8005786:	4911      	ldr	r1, [pc, #68]	; (80057cc <detectAcc+0x5c>)
 8005788:	1c05      	adds	r5, r0, #0
 800578a:	f7fa feb3 	bl	80004f4 <__aeabi_fcmpgt>
 800578e:	2800      	cmp	r0, #0
 8005790:	d115      	bne.n	80057be <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 8005792:	490f      	ldr	r1, [pc, #60]	; (80057d0 <detectAcc+0x60>)
 8005794:	1c28      	adds	r0, r5, #0
 8005796:	f7fa fe99 	bl	80004cc <__aeabi_fcmplt>
 800579a:	2800      	cmp	r0, #0
 800579c:	d111      	bne.n	80057c2 <detectAcc+0x52>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 800579e:	6921      	ldr	r1, [r4, #16]
 80057a0:	68e0      	ldr	r0, [r4, #12]
 80057a2:	f7fa ff2b 	bl	80005fc <__aeabi_fadd>
 80057a6:	6961      	ldr	r1, [r4, #20]
 80057a8:	f7fa ff28 	bl	80005fc <__aeabi_fadd>
 80057ac:	4907      	ldr	r1, [pc, #28]	; (80057cc <detectAcc+0x5c>)
 80057ae:	f7fa fea1 	bl	80004f4 <__aeabi_fcmpgt>


	return 0;
 80057b2:	1e43      	subs	r3, r0, #1
 80057b4:	4198      	sbcs	r0, r3
 80057b6:	4243      	negs	r3, r0
 80057b8:	2003      	movs	r0, #3
 80057ba:	4018      	ands	r0, r3
}
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 80057be:	2001      	movs	r0, #1
 80057c0:	e7fc      	b.n	80057bc <detectAcc+0x4c>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 80057c2:	2002      	movs	r0, #2
 80057c4:	e7fa      	b.n	80057bc <detectAcc+0x4c>
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	20000324 	.word	0x20000324
 80057cc:	44fa0000 	.word	0x44fa0000
 80057d0:	c4fa0000 	.word	0xc4fa0000

080057d4 <initGPS>:
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 80057d4:	2300      	movs	r3, #0
void initGPS(){
 80057d6:	b570      	push	{r4, r5, r6, lr}
	GPSInfo.lat=0.0;
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <initGPS+0x3c>)
	GPSInfo.pdop=0.0;
	GPSInfo.head=0.0;
	GPSInfo.speed=0.0;
	GPSInfo.fix=0;
	GPSInfo.sat=0;
	strcpy(GPSInfo.latD,"x");
 80057da:	2678      	movs	r6, #120	; 0x78
	strcpy(GPSInfo.lonD,"x");
 80057dc:	0020      	movs	r0, r4
	GPSInfo.lat=0.0;
 80057de:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 80057e0:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 80057e2:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 80057e4:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 80057e6:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 80057e8:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 80057ea:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 80057ec:	2300      	movs	r3, #0
	strcpy(GPSInfo.lonD,"x");
 80057ee:	4d09      	ldr	r5, [pc, #36]	; (8005814 <initGPS+0x40>)
	strcpy(GPSInfo.latD,"x");
 80057f0:	8526      	strh	r6, [r4, #40]	; 0x28
	strcpy(GPSInfo.lonD,"x");
 80057f2:	0029      	movs	r1, r5
 80057f4:	2202      	movs	r2, #2
 80057f6:	302b      	adds	r0, #43	; 0x2b
	GPSInfo.fix=0;
 80057f8:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 80057fa:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.lonD,"x");
 80057fc:	f009 fca4 	bl	800f148 <memcpy>
	strcpy(GPSInfo.time,"x");
	strcpy(GPSInfo.date,"x");
 8005800:	0020      	movs	r0, r4
 8005802:	0029      	movs	r1, r5
	strcpy(GPSInfo.time,"x");
 8005804:	85e6      	strh	r6, [r4, #46]	; 0x2e
	strcpy(GPSInfo.date,"x");
 8005806:	2202      	movs	r2, #2
 8005808:	303d      	adds	r0, #61	; 0x3d
 800580a:	f009 fc9d 	bl	800f148 <memcpy>
}
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	20000700 	.word	0x20000700
 8005814:	0801379c 	.word	0x0801379c

08005818 <getGPSString>:
void getGPSString(){
 8005818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581a:	46c6      	mov	lr, r8
 800581c:	b500      	push	{lr}
	memset(gpsDataRet,0,70);
 800581e:	4e29      	ldr	r6, [pc, #164]	; (80058c4 <getGPSString+0xac>)
 8005820:	2246      	movs	r2, #70	; 0x46
 8005822:	2100      	movs	r1, #0
 8005824:	0030      	movs	r0, r6
void getGPSString(){
 8005826:	b096      	sub	sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 8005828:	f009 fabc 	bl	800eda4 <memset>

	if(GPSInfo.fix==1){
 800582c:	4c26      	ldr	r4, [pc, #152]	; (80058c8 <getGPSString+0xb0>)
 800582e:	69e3      	ldr	r3, [r4, #28]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d040      	beq.n	80058b6 <getGPSString+0x9e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8005834:	2200      	movs	r2, #0
 8005836:	2104      	movs	r1, #4
 8005838:	4824      	ldr	r0, [pc, #144]	; (80058cc <getGPSString+0xb4>)
 800583a:	f003 f9af 	bl	8008b9c <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 800583e:	233d      	movs	r3, #61	; 0x3d
 8005840:	68e0      	ldr	r0, [r4, #12]
 8005842:	4698      	mov	r8, r3
 8005844:	f7fd fc34 	bl	80030b0 <__aeabi_f2d>
 8005848:	69e7      	ldr	r7, [r4, #28]
 800584a:	9014      	str	r0, [sp, #80]	; 0x50
 800584c:	9115      	str	r1, [sp, #84]	; 0x54
 800584e:	6920      	ldr	r0, [r4, #16]
 8005850:	f7fd fc2e 	bl	80030b0 <__aeabi_f2d>
 8005854:	9012      	str	r0, [sp, #72]	; 0x48
 8005856:	9113      	str	r1, [sp, #76]	; 0x4c
 8005858:	68a0      	ldr	r0, [r4, #8]
 800585a:	f7fd fc29 	bl	80030b0 <__aeabi_f2d>
 800585e:	9010      	str	r0, [sp, #64]	; 0x40
 8005860:	9111      	str	r1, [sp, #68]	; 0x44
 8005862:	6a23      	ldr	r3, [r4, #32]
 8005864:	4d1a      	ldr	r5, [pc, #104]	; (80058d0 <getGPSString+0xb8>)
 8005866:	930e      	str	r3, [sp, #56]	; 0x38
 8005868:	6960      	ldr	r0, [r4, #20]
 800586a:	f7fd fc21 	bl	80030b0 <__aeabi_f2d>
 800586e:	900c      	str	r0, [sp, #48]	; 0x30
 8005870:	910d      	str	r1, [sp, #52]	; 0x34
 8005872:	69a0      	ldr	r0, [r4, #24]
 8005874:	f7fd fc1c 	bl	80030b0 <__aeabi_f2d>
 8005878:	0023      	movs	r3, r4
 800587a:	900a      	str	r0, [sp, #40]	; 0x28
 800587c:	910b      	str	r1, [sp, #44]	; 0x2c
 800587e:	332b      	adds	r3, #43	; 0x2b
 8005880:	9308      	str	r3, [sp, #32]
 8005882:	6860      	ldr	r0, [r4, #4]
 8005884:	f7fd fc14 	bl	80030b0 <__aeabi_f2d>
 8005888:	0023      	movs	r3, r4
 800588a:	9006      	str	r0, [sp, #24]
 800588c:	9107      	str	r1, [sp, #28]
 800588e:	3328      	adds	r3, #40	; 0x28
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	6820      	ldr	r0, [r4, #0]
 8005894:	f7fd fc0c 	bl	80030b0 <__aeabi_f2d>
 8005898:	44a0      	add	r8, r4
 800589a:	342e      	adds	r4, #46	; 0x2e
 800589c:	9002      	str	r0, [sp, #8]
 800589e:	9103      	str	r1, [sp, #12]
 80058a0:	4643      	mov	r3, r8
 80058a2:	003a      	movs	r2, r7
 80058a4:	0029      	movs	r1, r5
 80058a6:	0030      	movs	r0, r6
 80058a8:	9400      	str	r4, [sp, #0]
 80058aa:	f009 fa0f 	bl	800eccc <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 80058ae:	b016      	add	sp, #88	; 0x58
 80058b0:	bc80      	pop	{r7}
 80058b2:	46b8      	mov	r8, r7
 80058b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 80058b6:	2201      	movs	r2, #1
 80058b8:	2104      	movs	r1, #4
 80058ba:	4804      	ldr	r0, [pc, #16]	; (80058cc <getGPSString+0xb4>)
 80058bc:	f003 f96e 	bl	8008b9c <HAL_GPIO_WritePin>
}
 80058c0:	e7bd      	b.n	800583e <getGPSString+0x26>
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	200046e0 	.word	0x200046e0
 80058c8:	20000700 	.word	0x20000700
 80058cc:	50000c00 	.word	0x50000c00
 80058d0:	080137a0 	.word	0x080137a0

080058d4 <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 80058d4:	b510      	push	{r4, lr}
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80058d6:	212a      	movs	r1, #42	; 0x2a
uint8_t nmea_valid_checksum(const char *message) {
 80058d8:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80058da:	f009 fa78 	bl	800edce <strchr>
 80058de:	2100      	movs	r1, #0
 80058e0:	2210      	movs	r2, #16
 80058e2:	3001      	adds	r0, #1
 80058e4:	f008 fa68 	bl	800ddb8 <strtol>

    char p;
    uint8_t sum = 0;
    ++message;
    while ((p = *message++) != '*') {
 80058e8:	7863      	ldrb	r3, [r4, #1]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80058ea:	b2c1      	uxtb	r1, r0
    while ((p = *message++) != '*') {
 80058ec:	2b2a      	cmp	r3, #42	; 0x2a
 80058ee:	d00c      	beq.n	800590a <nmea_valid_checksum+0x36>
    uint8_t sum = 0;
 80058f0:	2200      	movs	r2, #0
 80058f2:	3402      	adds	r4, #2
    while ((p = *message++) != '*') {
 80058f4:	3401      	adds	r4, #1
        sum ^= p;
 80058f6:	405a      	eors	r2, r3
    while ((p = *message++) != '*') {
 80058f8:	1e63      	subs	r3, r4, #1
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b2a      	cmp	r3, #42	; 0x2a
 80058fe:	d1f9      	bne.n	80058f4 <nmea_valid_checksum+0x20>
    }

    if (sum != checksum) {
 8005900:	1a88      	subs	r0, r1, r2
 8005902:	4243      	negs	r3, r0
 8005904:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
}
 8005906:	b2c0      	uxtb	r0, r0
 8005908:	bd10      	pop	{r4, pc}
    uint8_t sum = 0;
 800590a:	2200      	movs	r2, #0
 800590c:	e7f8      	b.n	8005900 <nmea_valid_checksum+0x2c>
 800590e:	46c0      	nop			; (mov r8, r8)

08005910 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 8005910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005912:	46ce      	mov	lr, r9
 8005914:	4647      	mov	r7, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005916:	220c      	movs	r2, #12
 8005918:	b580      	push	{r7, lr}
 800591a:	4e36      	ldr	r6, [pc, #216]	; (80059f4 <TestMEM+0xe4>)
 800591c:	b087      	sub	sp, #28
 800591e:	6833      	ldr	r3, [r6, #0]
	char newline[2] = "\r\n";
 8005920:	ad05      	add	r5, sp, #20
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005922:	621a      	str	r2, [r3, #32]
 8005924:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005926:	4934      	ldr	r1, [pc, #208]	; (80059f8 <TestMEM+0xe8>)
 8005928:	4b34      	ldr	r3, [pc, #208]	; (80059fc <TestMEM+0xec>)
	char newline[2] = "\r\n";
 800592a:	4f35      	ldr	r7, [pc, #212]	; (8005a00 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800592c:	3215      	adds	r2, #21
 800592e:	0030      	movs	r0, r6
 8005930:	f005 fb60 	bl	800aff4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005934:	230a      	movs	r3, #10
 8005936:	2202      	movs	r2, #2
 8005938:	0029      	movs	r1, r5
 800593a:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 800593c:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800593e:	f005 fb59 	bl	800aff4 <HAL_UART_Transmit>
	int i=0;
	Debug_Tx("------------------Testing Memory:");
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 8005942:	f7ff fb07 	bl	8004f54 <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("L890000-0000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8005946:	4c2f      	ldr	r4, [pc, #188]	; (8005a04 <TestMEM+0xf4>)
 8005948:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <TestMEM+0xf8>)
 800594a:	0022      	movs	r2, r4
 800594c:	320c      	adds	r2, #12
 800594e:	4691      	mov	r9, r2
 8005950:	2268      	movs	r2, #104	; 0x68
 8005952:	4694      	mov	ip, r2
 8005954:	44a4      	add	ip, r4
 8005956:	4662      	mov	r2, ip
 8005958:	0021      	movs	r1, r4
 800595a:	0020      	movs	r0, r4
 800595c:	3134      	adds	r1, #52	; 0x34
 800595e:	9202      	str	r2, [sp, #8]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	464a      	mov	r2, r9
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	3058      	adds	r0, #88	; 0x58
 8005968:	f7ff fe10 	bl	800558c <writeConfig>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800596c:	4642      	mov	r2, r8
 800596e:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005970:	4926      	ldr	r1, [pc, #152]	; (8005a0c <TestMEM+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005972:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005974:	0030      	movs	r0, r6
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <TestMEM+0xec>)
 8005978:	3203      	adds	r2, #3
 800597a:	f005 fb3b 	bl	800aff4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800597e:	230a      	movs	r3, #10
 8005980:	2202      	movs	r2, #2
 8005982:	0029      	movs	r1, r5
 8005984:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8005986:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005988:	f005 fb34 	bl	800aff4 <HAL_UART_Transmit>
    memset(dataR,0,256);
 800598c:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 800598e:	8823      	ldrh	r3, [r4, #0]
    memset(dataR,0,256);
 8005990:	2100      	movs	r1, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 8005992:	802b      	strh	r3, [r5, #0]
 8005994:	78a3      	ldrb	r3, [r4, #2]
    memset(dataR,0,256);
 8005996:	4c1e      	ldr	r4, [pc, #120]	; (8005a10 <TestMEM+0x100>)
 8005998:	0052      	lsls	r2, r2, #1
 800599a:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 800599c:	70ab      	strb	r3, [r5, #2]
    memset(dataR,0,256);
 800599e:	f009 fa01 	bl	800eda4 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 80059a2:	0028      	movs	r0, r5
 80059a4:	2210      	movs	r2, #16
 80059a6:	0021      	movs	r1, r4
 80059a8:	f7ff fcca 	bl	8005340 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 80059ac:	0020      	movs	r0, r4
 80059ae:	f7fa fbab 	bl	8000108 <strlen>
 80059b2:	2801      	cmp	r0, #1
 80059b4:	d800      	bhi.n	80059b8 <TestMEM+0xa8>
		return "--Err RegNo--";
 80059b6:	4c17      	ldr	r4, [pc, #92]	; (8005a14 <TestMEM+0x104>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80059b8:	220c      	movs	r2, #12
 80059ba:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80059bc:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80059be:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80059c0:	f7fa fba2 	bl	8000108 <strlen>
 80059c4:	0021      	movs	r1, r4
 80059c6:	b282      	uxth	r2, r0
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <TestMEM+0xec>)
 80059ca:	0030      	movs	r0, r6
 80059cc:	f005 fb12 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80059d2:	2202      	movs	r2, #2
 80059d4:	0029      	movs	r1, r5
	char newline[2] = "\r\n";
 80059d6:	802b      	strh	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80059d8:	0030      	movs	r0, r6
 80059da:	230a      	movs	r3, #10
 80059dc:	f005 fb0a 	bl	800aff4 <HAL_UART_Transmit>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 80059e0:	20fa      	movs	r0, #250	; 0xfa
 80059e2:	00c0      	lsls	r0, r0, #3
 80059e4:	f002 fa12 	bl	8007e0c <HAL_Delay>

	}


}
 80059e8:	b007      	add	sp, #28
 80059ea:	bcc0      	pop	{r6, r7}
 80059ec:	46b9      	mov	r9, r7
 80059ee:	46b0      	mov	r8, r6
 80059f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	20004bc8 	.word	0x20004bc8
 80059f8:	080137e0 	.word	0x080137e0
 80059fc:	00001388 	.word	0x00001388
 8005a00:	00000a0d 	.word	0x00000a0d
 8005a04:	080128e0 	.word	0x080128e0
 8005a08:	08013804 	.word	0x08013804
 8005a0c:	08013814 	.word	0x08013814
 8005a10:	2000417c 	.word	0x2000417c
 8005a14:	0801378c 	.word	0x0801378c

08005a18 <SystemClock_Config>:
{
 8005a18:	b500      	push	{lr}
 8005a1a:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a1c:	2234      	movs	r2, #52	; 0x34
 8005a1e:	2100      	movs	r1, #0
 8005a20:	a805      	add	r0, sp, #20
 8005a22:	f009 f9bf 	bl	800eda4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a26:	2210      	movs	r2, #16
 8005a28:	2100      	movs	r1, #0
 8005a2a:	a801      	add	r0, sp, #4
 8005a2c:	f009 f9ba 	bl	800eda4 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a30:	2080      	movs	r0, #128	; 0x80
 8005a32:	0080      	lsls	r0, r0, #2
 8005a34:	f003 fcc8 	bl	80093c8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a3c:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a3e:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a40:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005a42:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a44:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005a46:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a48:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005a4a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a4c:	f003 fcec 	bl	8009428 <HAL_RCC_OscConfig>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d001      	beq.n	8005a58 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a54:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a56:	e7fe      	b.n	8005a56 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a58:	2307      	movs	r3, #7
 8005a5a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a5c:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005a5e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a60:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a62:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005a64:	2100      	movs	r1, #0
 8005a66:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a68:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005a6a:	f003 ff8d 	bl	8009988 <HAL_RCC_ClockConfig>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d001      	beq.n	8005a76 <SystemClock_Config+0x5e>
 8005a72:	b672      	cpsid	i
  while (1)
 8005a74:	e7fe      	b.n	8005a74 <SystemClock_Config+0x5c>
}
 8005a76:	b013      	add	sp, #76	; 0x4c
 8005a78:	bd00      	pop	{pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)

08005a7c <main>:
{
 8005a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7e:	46de      	mov	lr, fp
 8005a80:	4657      	mov	r7, sl
 8005a82:	464e      	mov	r6, r9
 8005a84:	4645      	mov	r5, r8
 8005a86:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a88:	2704      	movs	r7, #4
{
 8005a8a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8005a8c:	f002 f998 	bl	8007dc0 <HAL_Init>
  SystemClock_Config();
 8005a90:	f7ff ffc2 	bl	8005a18 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a94:	2214      	movs	r2, #20
 8005a96:	2100      	movs	r1, #0
 8005a98:	a807      	add	r0, sp, #28
 8005a9a:	f009 f983 	bl	800eda4 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a9e:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aa2:	4dd4      	ldr	r5, [pc, #848]	; (8005df4 <main+0x378>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005aa4:	4690      	mov	r8, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aa6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005aa8:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aaa:	433b      	orrs	r3, r7
 8005aac:	636b      	str	r3, [r5, #52]	; 0x34
 8005aae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005ab0:	4cd1      	ldr	r4, [pc, #836]	; (8005df8 <main+0x37c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ab2:	403b      	ands	r3, r7
 8005ab4:	9302      	str	r3, [sp, #8]
 8005ab6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ab8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005aba:	0021      	movs	r1, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005abc:	4313      	orrs	r3, r2
 8005abe:	636b      	str	r3, [r5, #52]	; 0x34
 8005ac0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005ac2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	9303      	str	r3, [sp, #12]
 8005ac8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005acc:	4333      	orrs	r3, r6
 8005ace:	636b      	str	r3, [r5, #52]	; 0x34
 8005ad0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005ad2:	4033      	ands	r3, r6
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad8:	2302      	movs	r3, #2
 8005ada:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005adc:	431a      	orrs	r2, r3
 8005ade:	636a      	str	r2, [r5, #52]	; 0x34
 8005ae0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005ae2:	4013      	ands	r3, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ae4:	2208      	movs	r2, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae6:	9305      	str	r3, [sp, #20]
 8005ae8:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005aea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005aec:	4691      	mov	r9, r2
 8005aee:	4313      	orrs	r3, r2
 8005af0:	636b      	str	r3, [r5, #52]	; 0x34
 8005af2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005af4:	4013      	ands	r3, r2
 8005af6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005af8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005afa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005afc:	f003 f84e 	bl	8008b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8005b00:	2200      	movs	r2, #0
 8005b02:	21c0      	movs	r1, #192	; 0xc0
 8005b04:	48bd      	ldr	r0, [pc, #756]	; (8005dfc <main+0x380>)
 8005b06:	f003 f849 	bl	8008b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2107      	movs	r1, #7
 8005b0e:	48bc      	ldr	r0, [pc, #752]	; (8005e00 <main+0x384>)
 8005b10:	f003 f844 	bl	8008b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8005b14:	238e      	movs	r3, #142	; 0x8e
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	2200      	movs	r2, #0
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	48b9      	ldr	r0, [pc, #740]	; (8005e04 <main+0x388>)
 8005b1e:	469b      	mov	fp, r3
 8005b20:	f003 f83c 	bl	8008b9c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b24:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 8005b26:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b28:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b2a:	a907      	add	r1, sp, #28
 8005b2c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b2e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b32:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b34:	f002 ff26 	bl	8008984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8005b38:	23f2      	movs	r3, #242	; 0xf2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b3a:	48b2      	ldr	r0, [pc, #712]	; (8005e04 <main+0x388>)
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8005b3c:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b3e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8005b40:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b42:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b44:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b46:	f002 ff1d 	bl	8008984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8005b4a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b4c:	48ad      	ldr	r0, [pc, #692]	; (8005e04 <main+0x388>)
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8005b4e:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b50:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8005b52:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b54:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8005b56:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b58:	f002 ff14 	bl	8008984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8005b5c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b5e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8005b60:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b62:	a907      	add	r1, sp, #28
 8005b64:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8005b66:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b68:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8005b6a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b6c:	f002 ff0a 	bl	8008984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8005b70:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b72:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8005b74:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b76:	a907      	add	r1, sp, #28
 8005b78:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8005b7a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b7c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b80:	f002 ff00 	bl	8008984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8005b84:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b86:	489d      	ldr	r0, [pc, #628]	; (8005dfc <main+0x380>)
 8005b88:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8005b8a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b8c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b92:	f002 fef7 	bl	8008984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8005b96:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b98:	4899      	ldr	r0, [pc, #612]	; (8005e00 <main+0x384>)
 8005b9a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8005b9c:	469a      	mov	sl, r3
 8005b9e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ba0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ba6:	f002 feed 	bl	8008984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8005baa:	465b      	mov	r3, fp
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bac:	4895      	ldr	r0, [pc, #596]	; (8005e04 <main+0x388>)
 8005bae:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8005bb0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bb2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb8:	f002 fee4 	bl	8008984 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bbc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005bbe:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bc0:	4333      	orrs	r3, r6
 8005bc2:	63ab      	str	r3, [r5, #56]	; 0x38
 8005bc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005bc6:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bc8:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005bca:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005bd0:	f002 fcb0 	bl	8008534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005bd4:	2009      	movs	r0, #9
 8005bd6:	f002 fcdf 	bl	8008598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2103      	movs	r1, #3
 8005bde:	200a      	movs	r0, #10
 8005be0:	f002 fca8 	bl	8008534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005be4:	200a      	movs	r0, #10
 8005be6:	f002 fcd7 	bl	8008598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 8005bea:	2200      	movs	r2, #0
 8005bec:	2103      	movs	r1, #3
 8005bee:	200b      	movs	r0, #11
 8005bf0:	f002 fca0 	bl	8008534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8005bf4:	200b      	movs	r0, #11
 8005bf6:	f002 fccf 	bl	8008598 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8005bfa:	220c      	movs	r2, #12
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	a807      	add	r0, sp, #28
 8005c00:	f009 f8d0 	bl	800eda4 <memset>
  hadc1.Instance = ADC1;
 8005c04:	4d80      	ldr	r5, [pc, #512]	; (8005e08 <main+0x38c>)
 8005c06:	4b81      	ldr	r3, [pc, #516]	; (8005e0c <main+0x390>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c08:	4642      	mov	r2, r8
  hadc1.Instance = ADC1;
 8005c0a:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	05db      	lsls	r3, r3, #23
 8005c10:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	039b      	lsls	r3, r3, #14
 8005c16:	612b      	str	r3, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005c18:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c1a:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005c1c:	320c      	adds	r2, #12
 8005c1e:	54ab      	strb	r3, [r5, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005c20:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 8005c22:	3210      	adds	r2, #16
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005c24:	832c      	strh	r4, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005c26:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c28:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c2a:	616f      	str	r7, [r5, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005c2c:	76ab      	strb	r3, [r5, #26]
  hadc1.Init.NbrOfConversion = 4;
 8005c2e:	61ef      	str	r7, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c30:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c32:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005c34:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8005c36:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8005c38:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8005c3a:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8005c3c:	64ec      	str	r4, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005c3e:	f002 f903 	bl	8007e48 <HAL_ADC_Init>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d001      	beq.n	8005c4a <main+0x1ce>
 8005c46:	b672      	cpsid	i
  while (1)
 8005c48:	e7fe      	b.n	8005c48 <main+0x1cc>
  sConfig.Channel = ADC_CHANNEL_1;
 8005c4a:	4b71      	ldr	r3, [pc, #452]	; (8005e10 <main+0x394>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8005c4c:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c4e:	a907      	add	r1, sp, #28
 8005c50:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8005c52:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005c54:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c56:	f002 fa73 	bl	8008140 <HAL_ADC_ConfigChannel>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d001      	beq.n	8005c62 <main+0x1e6>
 8005c5e:	b672      	cpsid	i
  while (1)
 8005c60:	e7fe      	b.n	8005c60 <main+0x1e4>
  sConfig.Channel = ADC_CHANNEL_9;
 8005c62:	4b6c      	ldr	r3, [pc, #432]	; (8005e14 <main+0x398>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c64:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 8005c66:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005c68:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c6a:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005c6c:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c6e:	f002 fa67 	bl	8008140 <HAL_ADC_ConfigChannel>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d001      	beq.n	8005c7a <main+0x1fe>
 8005c76:	b672      	cpsid	i
  while (1)
 8005c78:	e7fe      	b.n	8005c78 <main+0x1fc>
  sConfig.Channel = ADC_CHANNEL_11;
 8005c7a:	4b67      	ldr	r3, [pc, #412]	; (8005e18 <main+0x39c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c7c:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 8005c7e:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005c80:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c82:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005c84:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c86:	f002 fa5b 	bl	8008140 <HAL_ADC_ConfigChannel>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d001      	beq.n	8005c92 <main+0x216>
 8005c8e:	b672      	cpsid	i
  while (1)
 8005c90:	e7fe      	b.n	8005c90 <main+0x214>
  hi2c1.Instance = I2C1;
 8005c92:	4c62      	ldr	r4, [pc, #392]	; (8005e1c <main+0x3a0>)
 8005c94:	4b62      	ldr	r3, [pc, #392]	; (8005e20 <main+0x3a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8005c96:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8005c98:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8005c9a:	4b62      	ldr	r3, [pc, #392]	; (8005e24 <main+0x3a8>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c9c:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005c9e:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005ca0:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ca2:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ca4:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ca6:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000E14;
 8005ca8:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005caa:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005cac:	f003 f862 	bl	8008d74 <HAL_I2C_Init>
 8005cb0:	1e01      	subs	r1, r0, #0
 8005cb2:	d001      	beq.n	8005cb8 <main+0x23c>
 8005cb4:	b672      	cpsid	i
  while (1)
 8005cb6:	e7fe      	b.n	8005cb6 <main+0x23a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005cb8:	0020      	movs	r0, r4
 8005cba:	f003 fb31 	bl	8009320 <HAL_I2CEx_ConfigAnalogFilter>
 8005cbe:	1e01      	subs	r1, r0, #0
 8005cc0:	d001      	beq.n	8005cc6 <main+0x24a>
 8005cc2:	b672      	cpsid	i
  while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005cc6:	0020      	movs	r0, r4
 8005cc8:	f003 fb50 	bl	800936c <HAL_I2CEx_ConfigDigitalFilter>
 8005ccc:	1e02      	subs	r2, r0, #0
 8005cce:	d001      	beq.n	8005cd4 <main+0x258>
 8005cd0:	b672      	cpsid	i
  while (1)
 8005cd2:	e7fe      	b.n	8005cd2 <main+0x256>
  hspi1.Instance = SPI1;
 8005cd4:	4b54      	ldr	r3, [pc, #336]	; (8005e28 <main+0x3ac>)
 8005cd6:	4955      	ldr	r1, [pc, #340]	; (8005e2c <main+0x3b0>)
 8005cd8:	0018      	movs	r0, r3
 8005cda:	6019      	str	r1, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005cdc:	2382      	movs	r3, #130	; 0x82
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ce2:	23e0      	movs	r3, #224	; 0xe0
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005cee:	464b      	mov	r3, r9
 8005cf0:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8005cf2:	4653      	mov	r3, sl
 8005cf4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005cf6:	464b      	mov	r3, r9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005cf8:	6082      	str	r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cfa:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cfc:	6142      	str	r2, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cfe:	6202      	str	r2, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d00:	6242      	str	r2, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d02:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005d04:	6302      	str	r2, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005d06:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d08:	f004 f906 	bl	8009f18 <HAL_SPI_Init>
 8005d0c:	1e05      	subs	r5, r0, #0
 8005d0e:	d001      	beq.n	8005d14 <main+0x298>
 8005d10:	b672      	cpsid	i
  while (1)
 8005d12:	e7fe      	b.n	8005d12 <main+0x296>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d14:	0001      	movs	r1, r0
 8005d16:	220c      	movs	r2, #12
 8005d18:	a807      	add	r0, sp, #28
 8005d1a:	f009 f843 	bl	800eda4 <memset>
  htim6.Instance = TIM6;
 8005d1e:	4c44      	ldr	r4, [pc, #272]	; (8005e30 <main+0x3b4>)
 8005d20:	4b44      	ldr	r3, [pc, #272]	; (8005e34 <main+0x3b8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d22:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 8005d24:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 8000-1;
 8005d26:	4b44      	ldr	r3, [pc, #272]	; (8005e38 <main+0x3bc>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d28:	60a5      	str	r5, [r4, #8]
  htim6.Init.Prescaler = 8000-1;
 8005d2a:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 500-1;
 8005d2c:	23f4      	movs	r3, #244	; 0xf4
 8005d2e:	33ff      	adds	r3, #255	; 0xff
 8005d30:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d32:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d34:	f004 fcb8 	bl	800a6a8 <HAL_TIM_Base_Init>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d001      	beq.n	8005d40 <main+0x2c4>
 8005d3c:	b672      	cpsid	i
  while (1)
 8005d3e:	e7fe      	b.n	8005d3e <main+0x2c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d40:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d42:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d44:	a907      	add	r1, sp, #28
 8005d46:	0020      	movs	r0, r4
 8005d48:	f004 fcde 	bl	800a708 <HAL_TIMEx_MasterConfigSynchronization>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d001      	beq.n	8005d54 <main+0x2d8>
 8005d50:	b672      	cpsid	i
  while (1)
 8005d52:	e7fe      	b.n	8005d52 <main+0x2d6>
  huart1.Instance = USART1;
 8005d54:	4c39      	ldr	r4, [pc, #228]	; (8005e3c <main+0x3c0>)
 8005d56:	4b3a      	ldr	r3, [pc, #232]	; (8005e40 <main+0x3c4>)
  huart1.Init.BaudRate = 9600;
 8005d58:	2696      	movs	r6, #150	; 0x96
  huart1.Instance = USART1;
 8005d5a:	6023      	str	r3, [r4, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d5c:	250c      	movs	r5, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d5e:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d60:	0020      	movs	r0, r4
  huart1.Init.BaudRate = 9600;
 8005d62:	01b6      	lsls	r6, r6, #6
 8005d64:	6066      	str	r6, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d66:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d68:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d6a:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d6c:	6165      	str	r5, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d6e:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d70:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d72:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d74:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d76:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d78:	f005 fa80 	bl	800b27c <HAL_UART_Init>
 8005d7c:	1e01      	subs	r1, r0, #0
 8005d7e:	d001      	beq.n	8005d84 <main+0x308>
 8005d80:	b672      	cpsid	i
  while (1)
 8005d82:	e7fe      	b.n	8005d82 <main+0x306>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d84:	0020      	movs	r0, r4
 8005d86:	f005 fb73 	bl	800b470 <HAL_UARTEx_SetTxFifoThreshold>
 8005d8a:	1e01      	subs	r1, r0, #0
 8005d8c:	d001      	beq.n	8005d92 <main+0x316>
 8005d8e:	b672      	cpsid	i
  while (1)
 8005d90:	e7fe      	b.n	8005d90 <main+0x314>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d92:	0020      	movs	r0, r4
 8005d94:	f005 fb96 	bl	800b4c4 <HAL_UARTEx_SetRxFifoThreshold>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d001      	beq.n	8005da0 <main+0x324>
 8005d9c:	b672      	cpsid	i
  while (1)
 8005d9e:	e7fe      	b.n	8005d9e <main+0x322>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005da0:	0020      	movs	r0, r4
 8005da2:	f005 fb49 	bl	800b438 <HAL_UARTEx_DisableFifoMode>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d001      	beq.n	8005dae <main+0x332>
 8005daa:	b672      	cpsid	i
  while (1)
 8005dac:	e7fe      	b.n	8005dac <main+0x330>
  huart2.Instance = USART2;
 8005dae:	4c25      	ldr	r4, [pc, #148]	; (8005e44 <main+0x3c8>)
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <main+0x3cc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005db2:	60a0      	str	r0, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005db4:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005db6:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005db8:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dba:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dbc:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005dbe:	6260      	str	r0, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dc0:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005dc2:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 8005dc4:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8005dc6:	6066      	str	r6, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005dc8:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005dca:	f005 fa57 	bl	800b27c <HAL_UART_Init>
 8005dce:	1e01      	subs	r1, r0, #0
 8005dd0:	d001      	beq.n	8005dd6 <main+0x35a>
 8005dd2:	b672      	cpsid	i
  while (1)
 8005dd4:	e7fe      	b.n	8005dd4 <main+0x358>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005dd6:	0020      	movs	r0, r4
 8005dd8:	f005 fb4a 	bl	800b470 <HAL_UARTEx_SetTxFifoThreshold>
 8005ddc:	1e01      	subs	r1, r0, #0
 8005dde:	d001      	beq.n	8005de4 <main+0x368>
 8005de0:	b672      	cpsid	i
  while (1)
 8005de2:	e7fe      	b.n	8005de2 <main+0x366>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005de4:	0020      	movs	r0, r4
 8005de6:	f005 fb6d 	bl	800b4c4 <HAL_UARTEx_SetRxFifoThreshold>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d02e      	beq.n	8005e4c <main+0x3d0>
 8005dee:	b672      	cpsid	i
  while (1)
 8005df0:	e7fe      	b.n	8005df0 <main+0x374>
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	40021000 	.word	0x40021000
 8005df8:	00008010 	.word	0x00008010
 8005dfc:	50000800 	.word	0x50000800
 8005e00:	50000c00 	.word	0x50000c00
 8005e04:	50000400 	.word	0x50000400
 8005e08:	200047c8 	.word	0x200047c8
 8005e0c:	40012400 	.word	0x40012400
 8005e10:	04000002 	.word	0x04000002
 8005e14:	24000200 	.word	0x24000200
 8005e18:	2c000800 	.word	0x2c000800
 8005e1c:	2000499c 	.word	0x2000499c
 8005e20:	40005400 	.word	0x40005400
 8005e24:	00000e14 	.word	0x00000e14
 8005e28:	200049f0 	.word	0x200049f0
 8005e2c:	40013000 	.word	0x40013000
 8005e30:	20004a54 	.word	0x20004a54
 8005e34:	40001000 	.word	0x40001000
 8005e38:	00001f3f 	.word	0x00001f3f
 8005e3c:	20004aa0 	.word	0x20004aa0
 8005e40:	40013800 	.word	0x40013800
 8005e44:	20004b34 	.word	0x20004b34
 8005e48:	40004400 	.word	0x40004400
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005e4c:	0020      	movs	r0, r4
 8005e4e:	f005 faf3 	bl	800b438 <HAL_UARTEx_DisableFifoMode>
 8005e52:	1e02      	subs	r2, r0, #0
 8005e54:	d001      	beq.n	8005e5a <main+0x3de>
 8005e56:	b672      	cpsid	i
  while (1)
 8005e58:	e7fe      	b.n	8005e58 <main+0x3dc>
  huart3.Instance = USART3;
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <main+0x448>)
 8005e5c:	491a      	ldr	r1, [pc, #104]	; (8005ec8 <main+0x44c>)
 8005e5e:	0018      	movs	r0, r3
 8005e60:	6019      	str	r1, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005e62:	605e      	str	r6, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e64:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e66:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e68:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e6a:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e6c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e6e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e70:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e74:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e76:	f005 fa01 	bl	800b27c <HAL_UART_Init>
 8005e7a:	1e04      	subs	r4, r0, #0
 8005e7c:	d001      	beq.n	8005e82 <main+0x406>
 8005e7e:	b672      	cpsid	i
  while (1)
 8005e80:	e7fe      	b.n	8005e80 <main+0x404>
  osKernelInitialize();
 8005e82:	f005 fb57 	bl	800b534 <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005e86:	2102      	movs	r1, #2
 8005e88:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <main+0x450>)
 8005e8a:	2010      	movs	r0, #16
 8005e8c:	f005 fbe6 	bl	800b65c <osMessageQueueNew>
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <main+0x454>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005e92:	0021      	movs	r1, r4
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005e94:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005e96:	4a0f      	ldr	r2, [pc, #60]	; (8005ed4 <main+0x458>)
 8005e98:	480f      	ldr	r0, [pc, #60]	; (8005ed8 <main+0x45c>)
 8005e9a:	f005 fb7d 	bl	800b598 <osThreadNew>
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <main+0x460>)
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005ea0:	0021      	movs	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005ea2:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005ea4:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <main+0x464>)
 8005ea6:	480f      	ldr	r0, [pc, #60]	; (8005ee4 <main+0x468>)
 8005ea8:	f005 fb76 	bl	800b598 <osThreadNew>
 8005eac:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <main+0x46c>)
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005eae:	0021      	movs	r1, r4
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005eb0:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005eb2:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <main+0x470>)
 8005eb4:	480e      	ldr	r0, [pc, #56]	; (8005ef0 <main+0x474>)
 8005eb6:	f005 fb6f 	bl	800b598 <osThreadNew>
 8005eba:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <main+0x478>)
 8005ebc:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005ebe:	f005 fb4d 	bl	800b55c <osKernelStart>
  while (1)
 8005ec2:	e7fe      	b.n	8005ec2 <main+0x446>
 8005ec4:	20004bc8 	.word	0x20004bc8
 8005ec8:	40004800 	.word	0x40004800
 8005ecc:	08013aa4 	.word	0x08013aa4
 8005ed0:	20004cc0 	.word	0x20004cc0
 8005ed4:	08013a80 	.word	0x08013a80
 8005ed8:	08007415 	.word	0x08007415
 8005edc:	200042ec 	.word	0x200042ec
 8005ee0:	08013a34 	.word	0x08013a34
 8005ee4:	080032c9 	.word	0x080032c9
 8005ee8:	2000074c 	.word	0x2000074c
 8005eec:	08013a5c 	.word	0x08013a5c
 8005ef0:	08003459 	.word	0x08003459
 8005ef4:	20004124 	.word	0x20004124

08005ef8 <stor>:
float stor(const char* str) {
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	46c6      	mov	lr, r8
 8005efc:	b500      	push	{lr}
    float sign = *str == '-' ? str++, -1 : 1;
 8005efe:	7803      	ldrb	r3, [r0, #0]
float stor(const char* str) {
 8005f00:	0005      	movs	r5, r0
 8005f02:	b082      	sub	sp, #8
    float sign = *str == '-' ? str++, -1 : 1;
 8005f04:	2b2d      	cmp	r3, #45	; 0x2d
 8005f06:	d100      	bne.n	8005f0a <stor+0x12>
 8005f08:	e080      	b.n	800600c <stor+0x114>
 8005f0a:	22fe      	movs	r2, #254	; 0xfe
 8005f0c:	0592      	lsls	r2, r2, #22
 8005f0e:	4690      	mov	r8, r2
    while (*str >= '0' && *str <= '9') {
 8005f10:	001e      	movs	r6, r3
 8005f12:	3e30      	subs	r6, #48	; 0x30
 8005f14:	b2f2      	uxtb	r2, r6
    float result = 0;
 8005f16:	2400      	movs	r4, #0
    while (*str >= '0' && *str <= '9') {
 8005f18:	2a09      	cmp	r2, #9
 8005f1a:	d812      	bhi.n	8005f42 <stor+0x4a>
        result *= 10;
 8005f1c:	4943      	ldr	r1, [pc, #268]	; (800602c <stor+0x134>)
 8005f1e:	1c20      	adds	r0, r4, #0
 8005f20:	f7fa fed6 	bl	8000cd0 <__aeabi_fmul>
 8005f24:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 8005f26:	0030      	movs	r0, r6
 8005f28:	f7fb f9e0 	bl	80012ec <__aeabi_i2f>
        str++;
 8005f2c:	3501      	adds	r5, #1
        result += *str - '0';
 8005f2e:	1c21      	adds	r1, r4, #0
 8005f30:	f7fa fb64 	bl	80005fc <__aeabi_fadd>
    while (*str >= '0' && *str <= '9') {
 8005f34:	782b      	ldrb	r3, [r5, #0]
        result += *str - '0';
 8005f36:	1c04      	adds	r4, r0, #0
    while (*str >= '0' && *str <= '9') {
 8005f38:	001e      	movs	r6, r3
 8005f3a:	3e30      	subs	r6, #48	; 0x30
 8005f3c:	b2f2      	uxtb	r2, r6
 8005f3e:	2a09      	cmp	r2, #9
 8005f40:	d9ec      	bls.n	8005f1c <stor+0x24>
    if (*str == ',' || *str == '.') {
 8005f42:	2202      	movs	r2, #2
 8005f44:	4393      	bics	r3, r2
 8005f46:	2b2c      	cmp	r3, #44	; 0x2c
 8005f48:	d00f      	beq.n	8005f6a <stor+0x72>
    if (*str == 'e' || *str == 'E') {
 8005f4a:	002e      	movs	r6, r5
 8005f4c:	782f      	ldrb	r7, [r5, #0]
    result *= sign;
 8005f4e:	4641      	mov	r1, r8
 8005f50:	1c20      	adds	r0, r4, #0
 8005f52:	f7fa febd 	bl	8000cd0 <__aeabi_fmul>
    if (*str == 'e' || *str == 'E') {
 8005f56:	2320      	movs	r3, #32
    result *= sign;
 8005f58:	4680      	mov	r8, r0
    if (*str == 'e' || *str == 'E') {
 8005f5a:	439f      	bics	r7, r3
 8005f5c:	2f45      	cmp	r7, #69	; 0x45
 8005f5e:	d023      	beq.n	8005fa8 <stor+0xb0>
}
 8005f60:	4640      	mov	r0, r8
 8005f62:	b002      	add	sp, #8
 8005f64:	bc80      	pop	{r7}
 8005f66:	46b8      	mov	r8, r7
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while (*str >= '0' && *str <= '9') {
 8005f6a:	786f      	ldrb	r7, [r5, #1]
        str++;
 8005f6c:	1c6e      	adds	r6, r5, #1
        while (*str >= '0' && *str <= '9') {
 8005f6e:	0038      	movs	r0, r7
 8005f70:	3830      	subs	r0, #48	; 0x30
 8005f72:	b2c3      	uxtb	r3, r0
 8005f74:	2b09      	cmp	r3, #9
 8005f76:	d8ea      	bhi.n	8005f4e <stor+0x56>
        float multiplier = 0.1;
 8005f78:	4d2d      	ldr	r5, [pc, #180]	; (8006030 <stor+0x138>)
            result += (*str - '0') * multiplier;
 8005f7a:	f7fb f9b7 	bl	80012ec <__aeabi_i2f>
 8005f7e:	1c29      	adds	r1, r5, #0
 8005f80:	f7fa fea6 	bl	8000cd0 <__aeabi_fmul>
 8005f84:	1c01      	adds	r1, r0, #0
 8005f86:	1c20      	adds	r0, r4, #0
 8005f88:	f7fa fb38 	bl	80005fc <__aeabi_fadd>
            multiplier /= 10;
 8005f8c:	4927      	ldr	r1, [pc, #156]	; (800602c <stor+0x134>)
            result += (*str - '0') * multiplier;
 8005f8e:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8005f90:	1c28      	adds	r0, r5, #0
 8005f92:	f7fa fcd3 	bl	800093c <__aeabi_fdiv>
        while (*str >= '0' && *str <= '9') {
 8005f96:	7877      	ldrb	r7, [r6, #1]
            multiplier /= 10;
 8005f98:	1c05      	adds	r5, r0, #0
        while (*str >= '0' && *str <= '9') {
 8005f9a:	0038      	movs	r0, r7
 8005f9c:	3830      	subs	r0, #48	; 0x30
 8005f9e:	b2c3      	uxtb	r3, r0
            str++;
 8005fa0:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8005fa2:	2b09      	cmp	r3, #9
 8005fa4:	d9e9      	bls.n	8005f7a <stor+0x82>
 8005fa6:	e7d2      	b.n	8005f4e <stor+0x56>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8005fa8:	7874      	ldrb	r4, [r6, #1]
 8005faa:	2c2d      	cmp	r4, #45	; 0x2d
 8005fac:	d033      	beq.n	8006016 <stor+0x11e>
        str++;
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4b20      	ldr	r3, [pc, #128]	; (8006034 <stor+0x13c>)
 8005fb2:	1c75      	adds	r5, r6, #1
 8005fb4:	9200      	str	r2, [sp, #0]
 8005fb6:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8005fb8:	3c30      	subs	r4, #48	; 0x30
 8005fba:	b2e3      	uxtb	r3, r4
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d832      	bhi.n	8006026 <stor+0x12e>
        float power = 0;
 8005fc0:	2000      	movs	r0, #0
            power *= 10;
 8005fc2:	491a      	ldr	r1, [pc, #104]	; (800602c <stor+0x134>)
 8005fc4:	f7fa fe84 	bl	8000cd0 <__aeabi_fmul>
 8005fc8:	1c06      	adds	r6, r0, #0
            power += *str - '0';
 8005fca:	0020      	movs	r0, r4
 8005fcc:	f7fb f98e 	bl	80012ec <__aeabi_i2f>
            str++;
 8005fd0:	3501      	adds	r5, #1
            power += *str - '0';
 8005fd2:	1c31      	adds	r1, r6, #0
 8005fd4:	f7fa fb12 	bl	80005fc <__aeabi_fadd>
        while (*str >= '0' && *str <= '9') {
 8005fd8:	782c      	ldrb	r4, [r5, #0]
 8005fda:	3c30      	subs	r4, #48	; 0x30
 8005fdc:	b2e3      	uxtb	r3, r4
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	d9ef      	bls.n	8005fc2 <stor+0xca>
        result *= pow(powerer, power);
 8005fe2:	f7fd f865 	bl	80030b0 <__aeabi_f2d>
 8005fe6:	0002      	movs	r2, r0
 8005fe8:	000b      	movs	r3, r1
 8005fea:	9800      	ldr	r0, [sp, #0]
 8005fec:	9901      	ldr	r1, [sp, #4]
 8005fee:	f00b fd5f 	bl	8011ab0 <pow>
 8005ff2:	0004      	movs	r4, r0
 8005ff4:	000d      	movs	r5, r1
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7fd f85a 	bl	80030b0 <__aeabi_f2d>
 8005ffc:	0022      	movs	r2, r4
 8005ffe:	002b      	movs	r3, r5
 8006000:	f7fc f968 	bl	80022d4 <__aeabi_dmul>
 8006004:	f7fd f89c 	bl	8003140 <__aeabi_d2f>
 8006008:	4680      	mov	r8, r0
    return result;
 800600a:	e7a9      	b.n	8005f60 <stor+0x68>
    float sign = *str == '-' ? str++, -1 : 1;
 800600c:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <stor+0x140>)
    while (*str >= '0' && *str <= '9') {
 800600e:	7843      	ldrb	r3, [r0, #1]
    float sign = *str == '-' ? str++, -1 : 1;
 8006010:	4690      	mov	r8, r2
 8006012:	3501      	adds	r5, #1
 8006014:	e77c      	b.n	8005f10 <stor+0x18>
 8006016:	22a0      	movs	r2, #160	; 0xa0
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <stor+0x144>)
 800601a:	0612      	lsls	r2, r2, #24
 800601c:	9200      	str	r2, [sp, #0]
 800601e:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8006020:	78b4      	ldrb	r4, [r6, #2]
        float powerer = *str == '-'? str++, 0.1 : 10;
 8006022:	1cb5      	adds	r5, r6, #2
 8006024:	e7c8      	b.n	8005fb8 <stor+0xc0>
        while (*str >= '0' && *str <= '9') {
 8006026:	2200      	movs	r2, #0
 8006028:	2300      	movs	r3, #0
 800602a:	e7de      	b.n	8005fea <stor+0xf2>
 800602c:	41200000 	.word	0x41200000
 8006030:	3dcccccd 	.word	0x3dcccccd
 8006034:	40240000 	.word	0x40240000
 8006038:	bf800000 	.word	0xbf800000
 800603c:	3fb99999 	.word	0x3fb99999

08006040 <getGNRMC>:
void getGNRMC(const char * ptra){
 8006040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006042:	46d6      	mov	lr, sl
 8006044:	4646      	mov	r6, r8
 8006046:	464f      	mov	r7, r9
 8006048:	b5c0      	push	{r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 800604a:	4e56      	ldr	r6, [pc, #344]	; (80061a4 <getGNRMC+0x164>)
 800604c:	0031      	movs	r1, r6
 800604e:	f008 fef1 	bl	800ee34 <strtok>
 8006052:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8006054:	d026      	beq.n	80060a4 <getGNRMC+0x64>
  	        strcpy(GPSInfo.latD,token);
 8006056:	2328      	movs	r3, #40	; 0x28
 8006058:	4698      	mov	r8, r3
 800605a:	4f53      	ldr	r7, [pc, #332]	; (80061a8 <getGNRMC+0x168>)
	int i=0;
 800605c:	2500      	movs	r5, #0
  	        strcpy(GPSInfo.latD,token);
 800605e:	44b8      	add	r8, r7
 8006060:	e00e      	b.n	8006080 <getGNRMC+0x40>
  	    if(i==3){ //Getting Latitude
 8006062:	2d03      	cmp	r5, #3
 8006064:	d061      	beq.n	800612a <getGNRMC+0xea>
  	    if(i==4){ //Getting Latitude ind
 8006066:	2d04      	cmp	r5, #4
 8006068:	d128      	bne.n	80060bc <getGNRMC+0x7c>
  	        strcpy(GPSInfo.latD,token);
 800606a:	0021      	movs	r1, r4
 800606c:	4640      	mov	r0, r8
 800606e:	f009 f858 	bl	800f122 <strcpy>
  	    token = strtok(NULL,",");
 8006072:	0031      	movs	r1, r6
 8006074:	2000      	movs	r0, #0
 8006076:	f008 fedd 	bl	800ee34 <strtok>
        i++;
 800607a:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 800607c:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 800607e:	d011      	beq.n	80060a4 <getGNRMC+0x64>
  	    if(i==1){ //Getting time
 8006080:	2d01      	cmp	r5, #1
 8006082:	d014      	beq.n	80060ae <getGNRMC+0x6e>
  	    if(i==10){ //Getting GPS status
 8006084:	2d0a      	cmp	r5, #10
 8006086:	d1ec      	bne.n	8006062 <getGNRMC+0x22>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8006088:	214e      	movs	r1, #78	; 0x4e
 800608a:	0020      	movs	r0, r4
 800608c:	f008 fe9f 	bl	800edce <strchr>
 8006090:	4243      	negs	r3, r0
 8006092:	4158      	adcs	r0, r3
  	    token = strtok(NULL,",");
 8006094:	0031      	movs	r1, r6
 8006096:	61f8      	str	r0, [r7, #28]
 8006098:	2000      	movs	r0, #0
 800609a:	f008 fecb 	bl	800ee34 <strtok>
        i++;
 800609e:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 80060a0:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 80060a2:	d1ed      	bne.n	8006080 <getGNRMC+0x40>
}
 80060a4:	bce0      	pop	{r5, r6, r7}
 80060a6:	46ba      	mov	sl, r7
 80060a8:	46b1      	mov	r9, r6
 80060aa:	46a8      	mov	r8, r5
 80060ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	    	strncpy(GPSInfo.time,token,6);
 80060ae:	483e      	ldr	r0, [pc, #248]	; (80061a8 <getGNRMC+0x168>)
 80060b0:	2206      	movs	r2, #6
 80060b2:	0021      	movs	r1, r4
 80060b4:	302e      	adds	r0, #46	; 0x2e
 80060b6:	f008 fea9 	bl	800ee0c <strncpy>
  	    if(i==5){ //Getting Longitude
 80060ba:	e7da      	b.n	8006072 <getGNRMC+0x32>
 80060bc:	2d05      	cmp	r5, #5
 80060be:	d120      	bne.n	8006102 <getGNRMC+0xc2>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 80060c0:	0020      	movs	r0, r4
 80060c2:	f7ff ff19 	bl	8005ef8 <stor>
    int dd1= ddmmmm/100;
 80060c6:	4939      	ldr	r1, [pc, #228]	; (80061ac <getGNRMC+0x16c>)
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 80060c8:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 80060ca:	f7fa fc37 	bl	800093c <__aeabi_fdiv>
 80060ce:	f7fb f8ed 	bl	80012ac <__aeabi_f2iz>
 80060d2:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 80060d4:	2064      	movs	r0, #100	; 0x64
 80060d6:	4360      	muls	r0, r4
 80060d8:	f7fb f908 	bl	80012ec <__aeabi_i2f>
 80060dc:	1c01      	adds	r1, r0, #0
 80060de:	4648      	mov	r0, r9
 80060e0:	f7fa ff44 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 80060e4:	4932      	ldr	r1, [pc, #200]	; (80061b0 <getGNRMC+0x170>)
 80060e6:	f7fa fc29 	bl	800093c <__aeabi_fdiv>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 80060ea:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <getGNRMC+0x168>)
    mm=mm/60;
 80060ec:	4681      	mov	r9, r0
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 80060ee:	469a      	mov	sl, r3
    mm=(float)dd1+mm;
 80060f0:	0020      	movs	r0, r4
 80060f2:	f7fb f8fb 	bl	80012ec <__aeabi_i2f>
 80060f6:	4649      	mov	r1, r9
 80060f8:	f7fa fa80 	bl	80005fc <__aeabi_fadd>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 80060fc:	4653      	mov	r3, sl
 80060fe:	6058      	str	r0, [r3, #4]
  	    if(i==8){ //Getting Course
 8006100:	e7b7      	b.n	8006072 <getGNRMC+0x32>
  	    if(i==6){ //Getting Longitude ind
 8006102:	2d06      	cmp	r5, #6
 8006104:	d105      	bne.n	8006112 <getGNRMC+0xd2>
  	    	strcpy(GPSInfo.lonD,token);
 8006106:	4828      	ldr	r0, [pc, #160]	; (80061a8 <getGNRMC+0x168>)
 8006108:	0021      	movs	r1, r4
 800610a:	302b      	adds	r0, #43	; 0x2b
 800610c:	f009 f809 	bl	800f122 <strcpy>
  	    if(i==8){ //Getting Course
 8006110:	e7af      	b.n	8006072 <getGNRMC+0x32>
  	    if(i==9){ //Getting Date
 8006112:	2d09      	cmp	r5, #9
 8006114:	d02d      	beq.n	8006172 <getGNRMC+0x132>
  	    if(i==7){ //Getting Speed
 8006116:	2d07      	cmp	r5, #7
 8006118:	d025      	beq.n	8006166 <getGNRMC+0x126>
  	    if(i==8){ //Getting Course
 800611a:	2d08      	cmp	r5, #8
 800611c:	d1a9      	bne.n	8006072 <getGNRMC+0x32>
  	        GPSInfo.head=stor(token);
 800611e:	0020      	movs	r0, r4
 8006120:	f7ff feea 	bl	8005ef8 <stor>
 8006124:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <getGNRMC+0x168>)
 8006126:	6158      	str	r0, [r3, #20]
 8006128:	e7a3      	b.n	8006072 <getGNRMC+0x32>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 800612a:	0020      	movs	r0, r4
 800612c:	f7ff fee4 	bl	8005ef8 <stor>
    int dd1= ddmmmm/100;
 8006130:	491e      	ldr	r1, [pc, #120]	; (80061ac <getGNRMC+0x16c>)
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8006132:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8006134:	f7fa fc02 	bl	800093c <__aeabi_fdiv>
 8006138:	f7fb f8b8 	bl	80012ac <__aeabi_f2iz>
 800613c:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 800613e:	2064      	movs	r0, #100	; 0x64
 8006140:	4360      	muls	r0, r4
 8006142:	f7fb f8d3 	bl	80012ec <__aeabi_i2f>
 8006146:	1c01      	adds	r1, r0, #0
 8006148:	4648      	mov	r0, r9
 800614a:	f7fa ff0f 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 800614e:	4918      	ldr	r1, [pc, #96]	; (80061b0 <getGNRMC+0x170>)
 8006150:	f7fa fbf4 	bl	800093c <__aeabi_fdiv>
 8006154:	4681      	mov	r9, r0
    mm=(float)dd1+mm;
 8006156:	0020      	movs	r0, r4
 8006158:	f7fb f8c8 	bl	80012ec <__aeabi_i2f>
 800615c:	4649      	mov	r1, r9
 800615e:	f7fa fa4d 	bl	80005fc <__aeabi_fadd>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8006162:	6038      	str	r0, [r7, #0]
  	    if(i==6){ //Getting Longitude ind
 8006164:	e785      	b.n	8006072 <getGNRMC+0x32>
  	        GPSInfo.speed=stor(token);
 8006166:	0020      	movs	r0, r4
 8006168:	f7ff fec6 	bl	8005ef8 <stor>
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <getGNRMC+0x168>)
 800616e:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8006170:	e77f      	b.n	8006072 <getGNRMC+0x32>
  			memset(dd,0,10);
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <getGNRMC+0x174>)
 8006174:	220a      	movs	r2, #10
 8006176:	0018      	movs	r0, r3
 8006178:	2100      	movs	r1, #0
 800617a:	4699      	mov	r9, r3
 800617c:	f008 fe12 	bl	800eda4 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8006180:	2300      	movs	r3, #0
 8006182:	4649      	mov	r1, r9
 8006184:	5ce2      	ldrb	r2, [r4, r3]
 8006186:	54ca      	strb	r2, [r1, r3]
 8006188:	3301      	adds	r3, #1
 800618a:	2b04      	cmp	r3, #4
 800618c:	d1f9      	bne.n	8006182 <getGNRMC+0x142>
  	        dd[4]='2';
 800618e:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <getGNRMC+0x178>)
  	        strcpy(GPSInfo.date,dd);
 8006190:	4805      	ldr	r0, [pc, #20]	; (80061a8 <getGNRMC+0x168>)
  	        dd[4]='2';
 8006192:	808b      	strh	r3, [r1, #4]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8006194:	7923      	ldrb	r3, [r4, #4]
  	        strcpy(GPSInfo.date,dd);
 8006196:	303d      	adds	r0, #61	; 0x3d
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8006198:	718b      	strb	r3, [r1, #6]
 800619a:	7963      	ldrb	r3, [r4, #5]
 800619c:	71cb      	strb	r3, [r1, #7]
  	        strcpy(GPSInfo.date,dd);
 800619e:	f008 ffc0 	bl	800f122 <strcpy>
  	    if(i==8){ //Getting Course
 80061a2:	e766      	b.n	8006072 <getGNRMC+0x32>
 80061a4:	08012e44 	.word	0x08012e44
 80061a8:	20000700 	.word	0x20000700
 80061ac:	42c80000 	.word	0x42c80000
 80061b0:	42700000 	.word	0x42700000
 80061b4:	200042e0 	.word	0x200042e0
 80061b8:	00003032 	.word	0x00003032

080061bc <getGNGSA>:
void getGNGSA(const  char * ptra){
 80061bc:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 80061be:	4d11      	ldr	r5, [pc, #68]	; (8006204 <getGNGSA+0x48>)
 80061c0:	0029      	movs	r1, r5
 80061c2:	f008 fe37 	bl	800ee34 <strtok>
    while( token != NULL ) {
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d017      	beq.n	80061fa <getGNGSA+0x3e>
	int i=0;
 80061ca:	2400      	movs	r4, #0
    	    GPSInfo.hdop=stor(token);
 80061cc:	4e0e      	ldr	r6, [pc, #56]	; (8006208 <getGNGSA+0x4c>)
 80061ce:	e006      	b.n	80061de <getGNGSA+0x22>
  	    token = strtok(NULL,",");
 80061d0:	0029      	movs	r1, r5
 80061d2:	2000      	movs	r0, #0
 80061d4:	f008 fe2e 	bl	800ee34 <strtok>
        i++;
 80061d8:	3401      	adds	r4, #1
    while( token != NULL ) {
 80061da:	2800      	cmp	r0, #0
 80061dc:	d00d      	beq.n	80061fa <getGNGSA+0x3e>
        if(i==15){ //Getting PDOP
 80061de:	2c0f      	cmp	r4, #15
 80061e0:	d00c      	beq.n	80061fc <getGNGSA+0x40>
    	if(i==16){ //Getting HDOP
 80061e2:	2c10      	cmp	r4, #16
 80061e4:	d1f4      	bne.n	80061d0 <getGNGSA+0x14>
    	    GPSInfo.hdop=stor(token);
 80061e6:	f7ff fe87 	bl	8005ef8 <stor>
  	    token = strtok(NULL,",");
 80061ea:	0029      	movs	r1, r5
    	    GPSInfo.hdop=stor(token);
 80061ec:	60f0      	str	r0, [r6, #12]
  	    token = strtok(NULL,",");
 80061ee:	2000      	movs	r0, #0
 80061f0:	f008 fe20 	bl	800ee34 <strtok>
        i++;
 80061f4:	3401      	adds	r4, #1
    while( token != NULL ) {
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d1f1      	bne.n	80061de <getGNGSA+0x22>
}
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
    	    GPSInfo.pdop=stor(token);
 80061fc:	f7ff fe7c 	bl	8005ef8 <stor>
 8006200:	6130      	str	r0, [r6, #16]
    	if(i==16){ //Getting HDOP
 8006202:	e7e5      	b.n	80061d0 <getGNGSA+0x14>
 8006204:	08012e44 	.word	0x08012e44
 8006208:	20000700 	.word	0x20000700

0800620c <getGNGGA>:
void getGNGGA(const  char * ptra){
 800620c:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 800620e:	4d11      	ldr	r5, [pc, #68]	; (8006254 <getGNGGA+0x48>)
 8006210:	0029      	movs	r1, r5
 8006212:	f008 fe0f 	bl	800ee34 <strtok>
    while( token != NULL ) {
 8006216:	2800      	cmp	r0, #0
 8006218:	d017      	beq.n	800624a <getGNGGA+0x3e>
	int i=0;
 800621a:	2400      	movs	r4, #0
            GPSInfo.alt = stor(token);
 800621c:	4e0e      	ldr	r6, [pc, #56]	; (8006258 <getGNGGA+0x4c>)
 800621e:	e006      	b.n	800622e <getGNGGA+0x22>
  	    token = strtok(NULL,",");
 8006220:	0029      	movs	r1, r5
 8006222:	2000      	movs	r0, #0
 8006224:	f008 fe06 	bl	800ee34 <strtok>
        i++;
 8006228:	3401      	adds	r4, #1
    while( token != NULL ) {
 800622a:	2800      	cmp	r0, #0
 800622c:	d00d      	beq.n	800624a <getGNGGA+0x3e>
    	if(i==7){ //Getting Satellites no
 800622e:	2c07      	cmp	r4, #7
 8006230:	d00c      	beq.n	800624c <getGNGGA+0x40>
    	if(i==9){ //Getting Saltitute
 8006232:	2c09      	cmp	r4, #9
 8006234:	d1f4      	bne.n	8006220 <getGNGGA+0x14>
            GPSInfo.alt = stor(token);
 8006236:	f7ff fe5f 	bl	8005ef8 <stor>
  	    token = strtok(NULL,",");
 800623a:	0029      	movs	r1, r5
            GPSInfo.alt = stor(token);
 800623c:	60b0      	str	r0, [r6, #8]
  	    token = strtok(NULL,",");
 800623e:	2000      	movs	r0, #0
 8006240:	f008 fdf8 	bl	800ee34 <strtok>
        i++;
 8006244:	3401      	adds	r4, #1
    while( token != NULL ) {
 8006246:	2800      	cmp	r0, #0
 8006248:	d1f1      	bne.n	800622e <getGNGGA+0x22>
}
 800624a:	bd70      	pop	{r4, r5, r6, pc}
            GPSInfo.sat = atoi(token);
 800624c:	f006 fe2e 	bl	800ceac <atoi>
 8006250:	6230      	str	r0, [r6, #32]
    	if(i==9){ //Getting Saltitute
 8006252:	e7e5      	b.n	8006220 <getGNGGA+0x14>
 8006254:	08012e44 	.word	0x08012e44
 8006258:	20000700 	.word	0x20000700

0800625c <validateGPS>:
int validateGPS(const char * str){
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8006260:	f7ff fb38 	bl	80058d4 <nmea_valid_checksum>
	        return 0;
 8006264:	2500      	movs	r5, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8006266:	2801      	cmp	r0, #1
 8006268:	d10e      	bne.n	8006288 <validateGPS+0x2c>
	    }
	    if(strlen(str)<4){return 0;}
 800626a:	0020      	movs	r0, r4
 800626c:	f7f9 ff4c 	bl	8000108 <strlen>
 8006270:	2803      	cmp	r0, #3
 8006272:	d909      	bls.n	8006288 <validateGPS+0x2c>

	    if (strstr(str, "GNRMC") != NULL) {
 8006274:	0020      	movs	r0, r4
 8006276:	491d      	ldr	r1, [pc, #116]	; (80062ec <validateGPS+0x90>)
 8006278:	f008 fe44 	bl	800ef04 <strstr>
 800627c:	2800      	cmp	r0, #0
 800627e:	d005      	beq.n	800628c <validateGPS+0x30>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8006280:	0020      	movs	r0, r4
 8006282:	f7ff fedd 	bl	8006040 <getGNRMC>
 8006286:	3501      	adds	r5, #1
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 8006288:	0028      	movs	r0, r5
 800628a:	bd70      	pop	{r4, r5, r6, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 800628c:	0020      	movs	r0, r4
 800628e:	4918      	ldr	r1, [pc, #96]	; (80062f0 <validateGPS+0x94>)
 8006290:	f008 fe38 	bl	800ef04 <strstr>
 8006294:	2800      	cmp	r0, #0
 8006296:	d11e      	bne.n	80062d6 <validateGPS+0x7a>
	    else if (strstr(str, "GNGSA") != NULL) {
 8006298:	0020      	movs	r0, r4
 800629a:	4916      	ldr	r1, [pc, #88]	; (80062f4 <validateGPS+0x98>)
 800629c:	f008 fe32 	bl	800ef04 <strstr>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d11d      	bne.n	80062e0 <validateGPS+0x84>
	    else if (strstr(str, "GNGSV") != NULL) {
 80062a4:	0020      	movs	r0, r4
 80062a6:	4914      	ldr	r1, [pc, #80]	; (80062f8 <validateGPS+0x9c>)
 80062a8:	f008 fe2c 	bl	800ef04 <strstr>
	    	GPStyp=4;
 80062ac:	2504      	movs	r5, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d1ea      	bne.n	8006288 <validateGPS+0x2c>
	    else if (strstr(str, "GNGLL") != NULL) {
 80062b2:	0020      	movs	r0, r4
 80062b4:	4911      	ldr	r1, [pc, #68]	; (80062fc <validateGPS+0xa0>)
 80062b6:	f008 fe25 	bl	800ef04 <strstr>
	    	GPStyp=5;
 80062ba:	3501      	adds	r5, #1
	    else if (strstr(str, "GNGLL") != NULL) {
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1e3      	bne.n	8006288 <validateGPS+0x2c>
	    else if (strstr(str, "GNVTG") != NULL) {
 80062c0:	0020      	movs	r0, r4
 80062c2:	490f      	ldr	r1, [pc, #60]	; (8006300 <validateGPS+0xa4>)
 80062c4:	f008 fe1e 	bl	800ef04 <strstr>
	    	GPStyp=6;
 80062c8:	4243      	negs	r3, r0
 80062ca:	4158      	adcs	r0, r3
 80062cc:	4240      	negs	r0, r0
 80062ce:	43a8      	bics	r0, r5
 80062d0:	0005      	movs	r5, r0
 80062d2:	3506      	adds	r5, #6
 80062d4:	e7d8      	b.n	8006288 <validateGPS+0x2c>
	    	GPStyp=2; getGNGGA(str);
 80062d6:	0020      	movs	r0, r4
 80062d8:	f7ff ff98 	bl	800620c <getGNGGA>
 80062dc:	2502      	movs	r5, #2
 80062de:	e7d3      	b.n	8006288 <validateGPS+0x2c>
	    	GPStyp=3;getGNGSA(str);
 80062e0:	0020      	movs	r0, r4
 80062e2:	f7ff ff6b 	bl	80061bc <getGNGSA>
 80062e6:	2503      	movs	r5, #3
 80062e8:	e7ce      	b.n	8006288 <validateGPS+0x2c>
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	08013824 	.word	0x08013824
 80062f0:	0801382c 	.word	0x0801382c
 80062f4:	08013834 	.word	0x08013834
 80062f8:	0801383c 	.word	0x0801383c
 80062fc:	08013844 	.word	0x08013844
 8006300:	0801384c 	.word	0x0801384c

08006304 <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8006304:	b530      	push	{r4, r5, lr}
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 8006306:	4d0e      	ldr	r5, [pc, #56]	; (8006340 <ProcessGPS+0x3c>)
void ProcessGPS(){
 8006308:	b083      	sub	sp, #12
		if(strlen((char*)gpsData)>5){
 800630a:	0028      	movs	r0, r5
 800630c:	f7f9 fefc 	bl	8000108 <strlen>
 8006310:	2805      	cmp	r0, #5
 8006312:	d801      	bhi.n	8006318 <ProcessGPS+0x14>
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
			}
			//free(token);
		}
}
 8006314:	b003      	add	sp, #12
 8006316:	bd30      	pop	{r4, r5, pc}
			char *tk= NULL;
 8006318:	2300      	movs	r3, #0
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 800631a:	4c0a      	ldr	r4, [pc, #40]	; (8006344 <ProcessGPS+0x40>)
 800631c:	0028      	movs	r0, r5
 800631e:	0021      	movs	r1, r4
 8006320:	aa01      	add	r2, sp, #4
			char *tk= NULL;
 8006322:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8006324:	f008 fde9 	bl	800eefa <strtok_r>
			while( token != NULL ) {
 8006328:	2800      	cmp	r0, #0
 800632a:	d0f3      	beq.n	8006314 <ProcessGPS+0x10>
				valid=valid+validateGPS(token);
 800632c:	f7ff ff96 	bl	800625c <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8006330:	0021      	movs	r1, r4
 8006332:	2000      	movs	r0, #0
 8006334:	aa01      	add	r2, sp, #4
 8006336:	f008 fde0 	bl	800eefa <strtok_r>
			while( token != NULL ) {
 800633a:	2800      	cmp	r0, #0
 800633c:	d1f6      	bne.n	800632c <ProcessGPS+0x28>
 800633e:	e7e9      	b.n	8006314 <ProcessGPS+0x10>
 8006340:	200042f8 	.word	0x200042f8
 8006344:	08012a78 	.word	0x08012a78

08006348 <HAL_UART_TxCpltCallback>:
}
 8006348:	4770      	bx	lr
 800634a:	46c0      	nop			; (mov r8, r8)

0800634c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800634c:	b570      	push	{r4, r5, r6, lr}
	if(huart==&huart2){
 800634e:	4c19      	ldr	r4, [pc, #100]	; (80063b4 <HAL_UART_ErrorCallback+0x68>)
 8006350:	42a0      	cmp	r0, r4
 8006352:	d013      	beq.n	800637c <HAL_UART_ErrorCallback+0x30>
	if(huart==&huart1){
 8006354:	4b18      	ldr	r3, [pc, #96]	; (80063b8 <HAL_UART_ErrorCallback+0x6c>)
 8006356:	4298      	cmp	r0, r3
 8006358:	d000      	beq.n	800635c <HAL_UART_ErrorCallback+0x10>
}
 800635a:	bd70      	pop	{r4, r5, r6, pc}
		if(DMAon==1){
 800635c:	4b17      	ldr	r3, [pc, #92]	; (80063bc <HAL_UART_ErrorCallback+0x70>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d1fa      	bne.n	800635a <HAL_UART_ErrorCallback+0xe>
		GSMBuff[0]=0;
 8006364:	2300      	movs	r3, #0
 8006366:	4916      	ldr	r1, [pc, #88]	; (80063c0 <HAL_UART_ErrorCallback+0x74>)
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006368:	6802      	ldr	r2, [r0, #0]
		GSMBuff[0]=0;
 800636a:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800636c:	330c      	adds	r3, #12
 800636e:	6213      	str	r3, [r2, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	6213      	str	r3, [r2, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006374:	2201      	movs	r2, #1
 8006376:	f005 f80b 	bl	800b390 <HAL_UART_Receive_DMA>
}
 800637a:	e7ee      	b.n	800635a <HAL_UART_ErrorCallback+0xe>
		if(dnlfile==0){
 800637c:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <HAL_UART_ErrorCallback+0x78>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ea      	bne.n	800635a <HAL_UART_ErrorCallback+0xe>
		if(DMAon==1){
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <HAL_UART_ErrorCallback+0x70>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d1e6      	bne.n	800635a <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 800638c:	4d0e      	ldr	r5, [pc, #56]	; (80063c8 <HAL_UART_ErrorCallback+0x7c>)
 800638e:	782b      	ldrb	r3, [r5, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d109      	bne.n	80063a8 <HAL_UART_ErrorCallback+0x5c>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006394:	220c      	movs	r2, #12
 8006396:	6823      	ldr	r3, [r4, #0]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006398:	0029      	movs	r1, r5
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800639a:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 800639c:	22e1      	movs	r2, #225	; 0xe1
 800639e:	0020      	movs	r0, r4
 80063a0:	0092      	lsls	r2, r2, #2
 80063a2:	f004 fff5 	bl	800b390 <HAL_UART_Receive_DMA>
 80063a6:	e7d8      	b.n	800635a <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80063a8:	2100      	movs	r1, #0
 80063aa:	0028      	movs	r0, r5
 80063ac:	4a07      	ldr	r2, [pc, #28]	; (80063cc <HAL_UART_ErrorCallback+0x80>)
 80063ae:	f008 fcf9 	bl	800eda4 <memset>
 80063b2:	e7ef      	b.n	8006394 <HAL_UART_ErrorCallback+0x48>
 80063b4:	20004b34 	.word	0x20004b34
 80063b8:	20004aa0 	.word	0x20004aa0
 80063bc:	20000094 	.word	0x20000094
 80063c0:	20000750 	.word	0x20000750
 80063c4:	200042f0 	.word	0x200042f0
 80063c8:	200042f8 	.word	0x200042f8
 80063cc:	000003e7 	.word	0x000003e7

080063d0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80063d2:	6802      	ldr	r2, [r0, #0]
{
 80063d4:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d000      	beq.n	80063dc <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80063da:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80063dc:	f001 fd04 	bl	8007de8 <HAL_IncTick>
}
 80063e0:	e7fb      	b.n	80063da <HAL_TIM_PeriodElapsedCallback+0xa>
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	40012c00 	.word	0x40012c00

080063e8 <restartGSMuart>:
	GSMBuff[0]=0;
 80063e8:	2300      	movs	r3, #0
void restartGSMuart(){
 80063ea:	b510      	push	{r4, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80063ec:	4c09      	ldr	r4, [pc, #36]	; (8006414 <restartGSMuart+0x2c>)
	GSMBuff[0]=0;
 80063ee:	490a      	ldr	r1, [pc, #40]	; (8006418 <restartGSMuart+0x30>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80063f0:	6822      	ldr	r2, [r4, #0]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80063f2:	480a      	ldr	r0, [pc, #40]	; (800641c <restartGSMuart+0x34>)
	GSMBuff[0]=0;
 80063f4:	700b      	strb	r3, [r1, #0]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80063f6:	330c      	adds	r3, #12
 80063f8:	6213      	str	r3, [r2, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80063fa:	6802      	ldr	r2, [r0, #0]
 80063fc:	6213      	str	r3, [r2, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80063fe:	2201      	movs	r2, #1
 8006400:	f004 ffc6 	bl	800b390 <HAL_UART_Receive_DMA>
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006404:	22e1      	movs	r2, #225	; 0xe1
 8006406:	0020      	movs	r0, r4
 8006408:	4905      	ldr	r1, [pc, #20]	; (8006420 <restartGSMuart+0x38>)
 800640a:	0092      	lsls	r2, r2, #2
 800640c:	f004 ffc0 	bl	800b390 <HAL_UART_Receive_DMA>
}
 8006410:	bd10      	pop	{r4, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	20004b34 	.word	0x20004b34
 8006418:	20000750 	.word	0x20000750
 800641c:	20004aa0 	.word	0x20004aa0
 8006420:	200042f8 	.word	0x200042f8

08006424 <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 8006424:	b510      	push	{r4, lr}
 8006426:	b084      	sub	sp, #16
	SPI_flash_Chip_Erase();
 8006428:	f7fe fed6 	bl	80051d8 <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 800642c:	4809      	ldr	r0, [pc, #36]	; (8006454 <initFirstRun+0x30>)
 800642e:	f001 fced 	bl	8007e0c <HAL_Delay>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8006432:	4c09      	ldr	r4, [pc, #36]	; (8006458 <initFirstRun+0x34>)
 8006434:	4b09      	ldr	r3, [pc, #36]	; (800645c <initFirstRun+0x38>)
 8006436:	0022      	movs	r2, r4
 8006438:	0021      	movs	r1, r4
 800643a:	4809      	ldr	r0, [pc, #36]	; (8006460 <initFirstRun+0x3c>)
 800643c:	3468      	adds	r4, #104	; 0x68
 800643e:	320c      	adds	r2, #12
 8006440:	3134      	adds	r1, #52	; 0x34
 8006442:	9402      	str	r4, [sp, #8]
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	3024      	adds	r0, #36	; 0x24
 800644a:	f7ff f89f 	bl	800558c <writeConfig>
}
 800644e:	b004      	add	sp, #16
 8006450:	bd10      	pop	{r4, pc}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	00007530 	.word	0x00007530
 8006458:	080128e0 	.word	0x080128e0
 800645c:	08013854 	.word	0x08013854
 8006460:	08012960 	.word	0x08012960

08006464 <ReadAllGPIO>:
void ReadAllGPIO(){
 8006464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006466:	46de      	mov	lr, fp
 8006468:	4657      	mov	r7, sl
 800646a:	464e      	mov	r6, r9
 800646c:	4645      	mov	r5, r8
 800646e:	b5e0      	push	{r5, r6, r7, lr}
	memset(StatusStrng,0,20);
 8006470:	4d60      	ldr	r5, [pc, #384]	; (80065f4 <ReadAllGPIO+0x190>)
void ReadAllGPIO(){
 8006472:	b08b      	sub	sp, #44	; 0x2c
	memset(StatusStrng,0,20);
 8006474:	2214      	movs	r2, #20
 8006476:	2100      	movs	r1, #0
 8006478:	0028      	movs	r0, r5
 800647a:	f008 fc93 	bl	800eda4 <memset>
	memset(Dig_io,0,30);
 800647e:	4e5e      	ldr	r6, [pc, #376]	; (80065f8 <ReadAllGPIO+0x194>)
 8006480:	221e      	movs	r2, #30
 8006482:	2100      	movs	r1, #0
 8006484:	0030      	movs	r0, r6
 8006486:	f008 fc8d 	bl	800eda4 <memset>
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 800648a:	2180      	movs	r1, #128	; 0x80
 800648c:	20a0      	movs	r0, #160	; 0xa0
 800648e:	0149      	lsls	r1, r1, #5
 8006490:	05c0      	lsls	r0, r0, #23
 8006492:	f002 fb7d 	bl	8008b90 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 8006496:	2180      	movs	r1, #128	; 0x80
	Dig_in[0]=Read_DI_IN1();
 8006498:	4c58      	ldr	r4, [pc, #352]	; (80065fc <ReadAllGPIO+0x198>)
 800649a:	0109      	lsls	r1, r1, #4
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 800649c:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 800649e:	4858      	ldr	r0, [pc, #352]	; (8006600 <ReadAllGPIO+0x19c>)
 80064a0:	f002 fb76 	bl	8008b90 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80064a4:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80064a6:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80064a8:	0149      	lsls	r1, r1, #5
 80064aa:	4855      	ldr	r0, [pc, #340]	; (8006600 <ReadAllGPIO+0x19c>)
 80064ac:	f002 fb70 	bl	8008b90 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80064b0:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80064b2:	60a0      	str	r0, [r4, #8]
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80064b4:	0189      	lsls	r1, r1, #6
 80064b6:	4852      	ldr	r0, [pc, #328]	; (8006600 <ReadAllGPIO+0x19c>)
 80064b8:	f002 fb6a 	bl	8008b90 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80064bc:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 80064be:	4b51      	ldr	r3, [pc, #324]	; (8006604 <ReadAllGPIO+0x1a0>)
 80064c0:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80064c2:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80064c4:	484e      	ldr	r0, [pc, #312]	; (8006600 <ReadAllGPIO+0x19c>)
 80064c6:	469a      	mov	sl, r3
 80064c8:	f002 fb62 	bl	8008b90 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80064cc:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 80064ce:	4b4e      	ldr	r3, [pc, #312]	; (8006608 <ReadAllGPIO+0x1a4>)
 80064d0:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80064d2:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80064d4:	484a      	ldr	r0, [pc, #296]	; (8006600 <ReadAllGPIO+0x19c>)
 80064d6:	4699      	mov	r9, r3
 80064d8:	f002 fb5a 	bl	8008b90 <HAL_GPIO_ReadPin>
		else box='C';
 80064dc:	3801      	subs	r0, #1
 80064de:	4243      	negs	r3, r0
 80064e0:	4158      	adcs	r0, r3
 80064e2:	230c      	movs	r3, #12
 80064e4:	4240      	negs	r0, r0
 80064e6:	4003      	ands	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80064e8:	2180      	movs	r1, #128	; 0x80
 80064ea:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 80064ec:	4a47      	ldr	r2, [pc, #284]	; (800660c <ReadAllGPIO+0x1a8>)
		else box='C';
 80064ee:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80064f0:	0049      	lsls	r1, r1, #1
 80064f2:	05c0      	lsls	r0, r0, #23
 80064f4:	9208      	str	r2, [sp, #32]
 80064f6:	7013      	strb	r3, [r2, #0]
 80064f8:	f002 fb4a 	bl	8008b90 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 80064fc:	4b44      	ldr	r3, [pc, #272]	; (8006610 <ReadAllGPIO+0x1ac>)
	EXT_B=Read_EXT_B_SENSE();
 80064fe:	4945      	ldr	r1, [pc, #276]	; (8006614 <ReadAllGPIO+0x1b0>)
 8006500:	6018      	str	r0, [r3, #0]
 8006502:	9309      	str	r3, [sp, #36]	; 0x24
	return (ADCvalue[2]*VSENSE*16);
 8006504:	4b44      	ldr	r3, [pc, #272]	; (8006618 <ReadAllGPIO+0x1b4>)
 8006506:	4845      	ldr	r0, [pc, #276]	; (800661c <ReadAllGPIO+0x1b8>)
 8006508:	681f      	ldr	r7, [r3, #0]
 800650a:	4680      	mov	r8, r0
 800650c:	6880      	ldr	r0, [r0, #8]
 800650e:	9106      	str	r1, [sp, #24]
 8006510:	f7fa ff3e 	bl	8001390 <__aeabi_ui2f>
 8006514:	1c39      	adds	r1, r7, #0
 8006516:	f7fa fbdb 	bl	8000cd0 <__aeabi_fmul>
 800651a:	2183      	movs	r1, #131	; 0x83
 800651c:	05c9      	lsls	r1, r1, #23
 800651e:	f7fa fbd7 	bl	8000cd0 <__aeabi_fmul>
 8006522:	9906      	ldr	r1, [sp, #24]
 8006524:	6008      	str	r0, [r1, #0]
	INT_B=Read_INT_B_SENSE();
 8006526:	483e      	ldr	r0, [pc, #248]	; (8006620 <ReadAllGPIO+0x1bc>)
 8006528:	9007      	str	r0, [sp, #28]
	return (ADCvalue[3]*VSENSE*2);
 800652a:	4640      	mov	r0, r8
 800652c:	68c0      	ldr	r0, [r0, #12]
 800652e:	f7fa ff2f 	bl	8001390 <__aeabi_ui2f>
 8006532:	1c39      	adds	r1, r7, #0
 8006534:	f7fa fbcc 	bl	8000cd0 <__aeabi_fmul>
 8006538:	1c01      	adds	r1, r0, #0
 800653a:	f7fa f85f 	bl	80005fc <__aeabi_fadd>
 800653e:	9907      	ldr	r1, [sp, #28]
 8006540:	6008      	str	r0, [r1, #0]
	adc[0]=Read_ADC1();
 8006542:	4838      	ldr	r0, [pc, #224]	; (8006624 <ReadAllGPIO+0x1c0>)
 8006544:	4683      	mov	fp, r0
	float val=(float)ADCvalue[0];
 8006546:	4640      	mov	r0, r8
 8006548:	6800      	ldr	r0, [r0, #0]
 800654a:	f7fa ff21 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 800654e:	1c39      	adds	r1, r7, #0
 8006550:	f7fa fbbe 	bl	8000cd0 <__aeabi_fmul>
 8006554:	4934      	ldr	r1, [pc, #208]	; (8006628 <ReadAllGPIO+0x1c4>)
 8006556:	f7fa fbbb 	bl	8000cd0 <__aeabi_fmul>
 800655a:	465b      	mov	r3, fp
 800655c:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 800655e:	4640      	mov	r0, r8
 8006560:	6840      	ldr	r0, [r0, #4]
 8006562:	f7fa ff15 	bl	8001390 <__aeabi_ui2f>
 8006566:	1c39      	adds	r1, r7, #0
 8006568:	f7fa fbb2 	bl	8000cd0 <__aeabi_fmul>
 800656c:	492e      	ldr	r1, [pc, #184]	; (8006628 <ReadAllGPIO+0x1c4>)
 800656e:	f7fa fbaf 	bl	8000cd0 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 8006572:	465f      	mov	r7, fp
	memset(StatusStrng,0,20);
 8006574:	2214      	movs	r2, #20
	adc[1]=Read_ADC2();
 8006576:	6078      	str	r0, [r7, #4]
	memset(StatusStrng,0,20);
 8006578:	2100      	movs	r1, #0
 800657a:	0028      	movs	r0, r5
 800657c:	f008 fc12 	bl	800eda4 <memset>
	memset(Dig_io,0,30);
 8006580:	221e      	movs	r2, #30
 8006582:	2100      	movs	r1, #0
 8006584:	0030      	movs	r0, r6
 8006586:	f008 fc0d 	bl	800eda4 <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 800658a:	4828      	ldr	r0, [pc, #160]	; (800662c <ReadAllGPIO+0x1c8>)
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	9003      	str	r0, [sp, #12]
 8006594:	4826      	ldr	r0, [pc, #152]	; (8006630 <ReadAllGPIO+0x1cc>)
 8006596:	4927      	ldr	r1, [pc, #156]	; (8006634 <ReadAllGPIO+0x1d0>)
 8006598:	6800      	ldr	r0, [r0, #0]
 800659a:	9002      	str	r0, [sp, #8]
 800659c:	4826      	ldr	r0, [pc, #152]	; (8006638 <ReadAllGPIO+0x1d4>)
 800659e:	6800      	ldr	r0, [r0, #0]
 80065a0:	9001      	str	r0, [sp, #4]
 80065a2:	68a0      	ldr	r0, [r4, #8]
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80065a4:	4654      	mov	r4, sl
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 80065a6:	9000      	str	r0, [sp, #0]
 80065a8:	0030      	movs	r0, r6
 80065aa:	f008 fb8f 	bl	800eccc <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80065ae:	6826      	ldr	r6, [r4, #0]
 80065b0:	464c      	mov	r4, r9
 80065b2:	9a08      	ldr	r2, [sp, #32]
 80065b4:	6827      	ldr	r7, [r4, #0]
 80065b6:	7813      	ldrb	r3, [r2, #0]
 80065b8:	9807      	ldr	r0, [sp, #28]
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	4c1f      	ldr	r4, [pc, #124]	; (800663c <ReadAllGPIO+0x1d8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	6800      	ldr	r0, [r0, #0]
 80065c6:	f7fc fd73 	bl	80030b0 <__aeabi_f2d>
 80065ca:	9002      	str	r0, [sp, #8]
 80065cc:	9103      	str	r1, [sp, #12]
 80065ce:	9906      	ldr	r1, [sp, #24]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	f7fc fd6d 	bl	80030b0 <__aeabi_f2d>
 80065d6:	0033      	movs	r3, r6
 80065d8:	9000      	str	r0, [sp, #0]
 80065da:	9101      	str	r1, [sp, #4]
 80065dc:	003a      	movs	r2, r7
 80065de:	0021      	movs	r1, r4
 80065e0:	0028      	movs	r0, r5
 80065e2:	f008 fb73 	bl	800eccc <siprintf>
}
 80065e6:	b00b      	add	sp, #44	; 0x2c
 80065e8:	bcf0      	pop	{r4, r5, r6, r7}
 80065ea:	46bb      	mov	fp, r7
 80065ec:	46b2      	mov	sl, r6
 80065ee:	46a9      	mov	r9, r5
 80065f0:	46a0      	mov	r8, r4
 80065f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f4:	20004128 	.word	0x20004128
 80065f8:	20000698 	.word	0x20000698
 80065fc:	2000068c 	.word	0x2000068c
 8006600:	50000400 	.word	0x50000400
 8006604:	20002080 	.word	0x20002080
 8006608:	2000033c 	.word	0x2000033c
 800660c:	20000090 	.word	0x20000090
 8006610:	2000410c 	.word	0x2000410c
 8006614:	200006c0 	.word	0x200006c0
 8006618:	200000b4 	.word	0x200000b4
 800661c:	20000340 	.word	0x20000340
 8006620:	20002044 	.word	0x20002044
 8006624:	20004170 	.word	0x20004170
 8006628:	41300000 	.word	0x41300000
 800662c:	20004c94 	.word	0x20004c94
 8006630:	200006bc 	.word	0x200006bc
 8006634:	08013864 	.word	0x08013864
 8006638:	200006b8 	.word	0x200006b8
 800663c:	0801387c 	.word	0x0801387c

08006640 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006640:	b570      	push	{r4, r5, r6, lr}
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8006642:	2104      	movs	r1, #4
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006644:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8006646:	4832      	ldr	r0, [pc, #200]	; (8006710 <HAL_UART_RxCpltCallback+0xd0>)
 8006648:	f002 faae 	bl	8008ba8 <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 800664c:	4d31      	ldr	r5, [pc, #196]	; (8006714 <HAL_UART_RxCpltCallback+0xd4>)
 800664e:	42ac      	cmp	r4, r5
 8006650:	d01b      	beq.n	800668a <HAL_UART_RxCpltCallback+0x4a>
	if(huart==&huart1){
 8006652:	4d31      	ldr	r5, [pc, #196]	; (8006718 <HAL_UART_RxCpltCallback+0xd8>)
 8006654:	42ac      	cmp	r4, r5
 8006656:	d000      	beq.n	800665a <HAL_UART_RxCpltCallback+0x1a>
}
 8006658:	bd70      	pop	{r4, r5, r6, pc}
		if(strlen((char*)GSMData)<900){
 800665a:	4c30      	ldr	r4, [pc, #192]	; (800671c <HAL_UART_RxCpltCallback+0xdc>)
 800665c:	0020      	movs	r0, r4
 800665e:	f7f9 fd53 	bl	8000108 <strlen>
 8006662:	23e1      	movs	r3, #225	; 0xe1
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4298      	cmp	r0, r3
 8006668:	d22b      	bcs.n	80066c2 <HAL_UART_RxCpltCallback+0x82>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 800666a:	492d      	ldr	r1, [pc, #180]	; (8006720 <HAL_UART_RxCpltCallback+0xe0>)
 800666c:	780b      	ldrb	r3, [r1, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d123      	bne.n	80066ba <HAL_UART_RxCpltCallback+0x7a>
		if(DMAon==1){
 8006672:	4b2c      	ldr	r3, [pc, #176]	; (8006724 <HAL_UART_RxCpltCallback+0xe4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d1ee      	bne.n	8006658 <HAL_UART_RxCpltCallback+0x18>
		GSMBuff[0]=0;
 800667a:	2300      	movs	r3, #0
 800667c:	4928      	ldr	r1, [pc, #160]	; (8006720 <HAL_UART_RxCpltCallback+0xe0>)
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800667e:	2201      	movs	r2, #1
 8006680:	0028      	movs	r0, r5
		GSMBuff[0]=0;
 8006682:	700b      	strb	r3, [r1, #0]
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006684:	f004 fe84 	bl	800b390 <HAL_UART_Receive_DMA>
}
 8006688:	e7e6      	b.n	8006658 <HAL_UART_RxCpltCallback+0x18>
		if(dnlfile==0){
 800668a:	4b27      	ldr	r3, [pc, #156]	; (8006728 <HAL_UART_RxCpltCallback+0xe8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e2      	bne.n	8006658 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>10){
 8006692:	4c26      	ldr	r4, [pc, #152]	; (800672c <HAL_UART_RxCpltCallback+0xec>)
 8006694:	0020      	movs	r0, r4
 8006696:	f7f9 fd37 	bl	8000108 <strlen>
 800669a:	280a      	cmp	r0, #10
 800669c:	d81d      	bhi.n	80066da <HAL_UART_RxCpltCallback+0x9a>
		if(DMAon==1){
 800669e:	4b21      	ldr	r3, [pc, #132]	; (8006724 <HAL_UART_RxCpltCallback+0xe4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d1d8      	bne.n	8006658 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80066a6:	7823      	ldrb	r3, [r4, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d110      	bne.n	80066ce <HAL_UART_RxCpltCallback+0x8e>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 80066ac:	22e1      	movs	r2, #225	; 0xe1
 80066ae:	0021      	movs	r1, r4
 80066b0:	0028      	movs	r0, r5
 80066b2:	0092      	lsls	r2, r2, #2
 80066b4:	f004 fe6c 	bl	800b390 <HAL_UART_Receive_DMA>
 80066b8:	e7ce      	b.n	8006658 <HAL_UART_RxCpltCallback+0x18>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 80066ba:	1900      	adds	r0, r0, r4
 80066bc:	f008 fd31 	bl	800f122 <strcpy>
 80066c0:	e7d7      	b.n	8006672 <HAL_UART_RxCpltCallback+0x32>
			memset(GSMData, 0, 4500);
 80066c2:	2100      	movs	r1, #0
 80066c4:	0020      	movs	r0, r4
 80066c6:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <HAL_UART_RxCpltCallback+0xf0>)
 80066c8:	f008 fb6c 	bl	800eda4 <memset>
 80066cc:	e7d1      	b.n	8006672 <HAL_UART_RxCpltCallback+0x32>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80066ce:	2100      	movs	r1, #0
 80066d0:	0020      	movs	r0, r4
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <HAL_UART_RxCpltCallback+0xf4>)
 80066d4:	f008 fb66 	bl	800eda4 <memset>
 80066d8:	e7e8      	b.n	80066ac <HAL_UART_RxCpltCallback+0x6c>
			ProcessGPS((char*)gpsData);
 80066da:	0020      	movs	r0, r4
 80066dc:	f7ff fe12 	bl	8006304 <ProcessGPS>
			getGPSString();
 80066e0:	f7ff f89a 	bl	8005818 <getGPSString>
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 80066e4:	2104      	movs	r1, #4
 80066e6:	480a      	ldr	r0, [pc, #40]	; (8006710 <HAL_UART_RxCpltCallback+0xd0>)
 80066e8:	f002 fa5e 	bl	8008ba8 <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 80066ec:	4e12      	ldr	r6, [pc, #72]	; (8006738 <HAL_UART_RxCpltCallback+0xf8>)
 80066ee:	6833      	ldr	r3, [r6, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <HAL_UART_RxCpltCallback+0xc4>
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 80066f4:	4b11      	ldr	r3, [pc, #68]	; (800673c <HAL_UART_RxCpltCallback+0xfc>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	2800      	cmp	r0, #0
 80066fa:	dd00      	ble.n	80066fe <HAL_UART_RxCpltCallback+0xbe>
 80066fc:	6030      	str	r0, [r6, #0]
			ReadAllGPIO();
 80066fe:	f7ff feb1 	bl	8006464 <ReadAllGPIO>
 8006702:	e7cc      	b.n	800669e <HAL_UART_RxCpltCallback+0x5e>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8006704:	f7ff f834 	bl	8005770 <detectAcc>
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <HAL_UART_RxCpltCallback+0xfc>)
 800670a:	6018      	str	r0, [r3, #0]
 800670c:	e7f4      	b.n	80066f8 <HAL_UART_RxCpltCallback+0xb8>
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	50000c00 	.word	0x50000c00
 8006714:	20004b34 	.word	0x20004b34
 8006718:	20004aa0 	.word	0x20004aa0
 800671c:	20000754 	.word	0x20000754
 8006720:	20000750 	.word	0x20000750
 8006724:	20000094 	.word	0x20000094
 8006728:	200042f0 	.word	0x200042f0
 800672c:	200042f8 	.word	0x200042f8
 8006730:	00001194 	.word	0x00001194
 8006734:	000003e7 	.word	0x000003e7
 8006738:	20000354 	.word	0x20000354
 800673c:	20000350 	.word	0x20000350

08006740 <GetHead>:
void GetHead(){
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	46de      	mov	lr, fp
 8006744:	464e      	mov	r6, r9
 8006746:	4645      	mov	r5, r8
 8006748:	4657      	mov	r7, sl
 800674a:	b5e0      	push	{r5, r6, r7, lr}
	memset(Head,0,100);
 800674c:	4dc8      	ldr	r5, [pc, #800]	; (8006a70 <GetHead+0x330>)
 800674e:	2264      	movs	r2, #100	; 0x64
void GetHead(){
 8006750:	b085      	sub	sp, #20
	memset(Head,0,100);
 8006752:	2100      	movs	r1, #0
 8006754:	0028      	movs	r0, r5
 8006756:	f008 fb25 	bl	800eda4 <memset>
	strcpy(Head,InitStr);
 800675a:	49c6      	ldr	r1, [pc, #792]	; (8006a74 <GetHead+0x334>)
 800675c:	0028      	movs	r0, r5
 800675e:	f008 fbe7 	bl	800ef30 <stpcpy>
	strcat(Head,",");
 8006762:	232c      	movs	r3, #44	; 0x2c
	strcat(Head,VerStr);
 8006764:	49c4      	ldr	r1, [pc, #784]	; (8006a78 <GetHead+0x338>)
	strcat(Head,",");
 8006766:	7003      	strb	r3, [r0, #0]
	strcat(Head,VerStr);
 8006768:	3001      	adds	r0, #1
 800676a:	f008 fbe1 	bl	800ef30 <stpcpy>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 800676e:	4bc3      	ldr	r3, [pc, #780]	; (8006a7c <GetHead+0x33c>)
 8006770:	4ec3      	ldr	r6, [pc, #780]	; (8006a80 <GetHead+0x340>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	6833      	ldr	r3, [r6, #0]
	strcat(Head,VerStr);
 8006776:	9000      	str	r0, [sp, #0]
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 8006778:	3301      	adds	r3, #1
 800677a:	d000      	beq.n	800677e <GetHead+0x3e>
 800677c:	e0dd      	b.n	800693a <GetHead+0x1fa>
 800677e:	2a01      	cmp	r2, #1
 8006780:	d000      	beq.n	8006784 <GetHead+0x44>
 8006782:	e0da      	b.n	800693a <GetHead+0x1fa>
 8006784:	2301      	movs	r3, #1
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	4bbe      	ldr	r3, [pc, #760]	; (8006a84 <GetHead+0x344>)
 800678a:	469a      	mov	sl, r3
 800678c:	2301      	movs	r3, #1
 800678e:	4652      	mov	r2, sl
 8006790:	425b      	negs	r3, r3
 8006792:	6013      	str	r3, [r2, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 8006794:	4bbc      	ldr	r3, [pc, #752]	; (8006a88 <GetHead+0x348>)
 8006796:	4fbd      	ldr	r7, [pc, #756]	; (8006a8c <GetHead+0x34c>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	d000      	beq.n	80067a2 <GetHead+0x62>
 80067a0:	e0bc      	b.n	800691c <GetHead+0x1dc>
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	d000      	beq.n	80067a8 <GetHead+0x68>
 80067a6:	e0b9      	b.n	800691c <GetHead+0x1dc>
 80067a8:	2301      	movs	r3, #1
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	4bb8      	ldr	r3, [pc, #736]	; (8006a90 <GetHead+0x350>)
 80067ae:	469b      	mov	fp, r3
 80067b0:	2301      	movs	r3, #1
 80067b2:	465a      	mov	r2, fp
 80067b4:	425b      	negs	r3, r3
 80067b6:	6013      	str	r3, [r2, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 80067b8:	4bb6      	ldr	r3, [pc, #728]	; (8006a94 <GetHead+0x354>)
 80067ba:	49b7      	ldr	r1, [pc, #732]	; (8006a98 <GetHead+0x358>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	1c18      	adds	r0, r3, #0
 80067c0:	4699      	mov	r9, r3
 80067c2:	f7f9 fe83 	bl	80004cc <__aeabi_fcmplt>
 80067c6:	0001      	movs	r1, r0
 80067c8:	1e4b      	subs	r3, r1, #1
 80067ca:	4199      	sbcs	r1, r3
 80067cc:	4bb3      	ldr	r3, [pc, #716]	; (8006a9c <GetHead+0x35c>)
 80067ce:	9102      	str	r1, [sp, #8]
 80067d0:	4698      	mov	r8, r3
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	425a      	negs	r2, r3
 80067d8:	4153      	adcs	r3, r2
 80067da:	000a      	movs	r2, r1
 80067dc:	401a      	ands	r2, r3
 80067de:	9201      	str	r2, [sp, #4]
 80067e0:	420b      	tst	r3, r1
 80067e2:	d000      	beq.n	80067e6 <GetHead+0xa6>
 80067e4:	e0b8      	b.n	8006958 <GetHead+0x218>
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 80067e6:	4cae      	ldr	r4, [pc, #696]	; (8006aa0 <GetHead+0x360>)
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	425a      	negs	r2, r3
 80067ee:	4153      	adcs	r3, r2
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	4648      	mov	r0, r9
 80067f6:	49a8      	ldr	r1, [pc, #672]	; (8006a98 <GetHead+0x358>)
 80067f8:	f7f9 fe86 	bl	8000508 <__aeabi_fcmpge>
 80067fc:	2300      	movs	r3, #0
 80067fe:	2800      	cmp	r0, #0
 8006800:	d008      	beq.n	8006814 <GetHead+0xd4>
 8006802:	9a01      	ldr	r2, [sp, #4]
 8006804:	2301      	movs	r3, #1
 8006806:	2a00      	cmp	r2, #0
 8006808:	d004      	beq.n	8006814 <GetHead+0xd4>
 800680a:	2201      	movs	r2, #1
 800680c:	4641      	mov	r1, r8
 800680e:	4252      	negs	r2, r2
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	600a      	str	r2, [r1, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 8006814:	4aa3      	ldr	r2, [pc, #652]	; (8006aa4 <GetHead+0x364>)
 8006816:	4691      	mov	r9, r2
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	3201      	adds	r2, #1
 800681c:	d176      	bne.n	800690c <GetHead+0x1cc>
 800681e:	9a02      	ldr	r2, [sp, #8]
 8006820:	2a00      	cmp	r2, #0
 8006822:	d073      	beq.n	800690c <GetHead+0x1cc>
 8006824:	2201      	movs	r2, #1
 8006826:	4649      	mov	r1, r9
 8006828:	600a      	str	r2, [r1, #0]
 800682a:	4a9f      	ldr	r2, [pc, #636]	; (8006aa8 <GetHead+0x368>)
 800682c:	0011      	movs	r1, r2
 800682e:	9201      	str	r2, [sp, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	4252      	negs	r2, r2
 8006834:	600a      	str	r2, [r1, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <GetHead+0x106>
 800683a:	2301      	movs	r3, #1
 800683c:	9a01      	ldr	r2, [sp, #4]
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	464a      	mov	r2, r9
 8006842:	3b02      	subs	r3, #2
 8006844:	6013      	str	r3, [r2, #0]
	if(GSMSignal<=10){
 8006846:	4b99      	ldr	r3, [pc, #612]	; (8006aac <GetHead+0x36c>)
 8006848:	4999      	ldr	r1, [pc, #612]	; (8006ab0 <GetHead+0x370>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	f7f9 fe48 	bl	80004e0 <__aeabi_fcmple>
 8006850:	2800      	cmp	r0, #0
 8006852:	d000      	beq.n	8006856 <GetHead+0x116>
 8006854:	e087      	b.n	8006966 <GetHead+0x226>
	else if(getSpeed()>SpeedThr){
 8006856:	4b97      	ldr	r3, [pc, #604]	; (8006ab4 <GetHead+0x374>)
	return GPSInfo.speed;
 8006858:	4a97      	ldr	r2, [pc, #604]	; (8006ab8 <GetHead+0x378>)
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	6991      	ldr	r1, [r2, #24]
 800685e:	f7f9 fe35 	bl	80004cc <__aeabi_fcmplt>
 8006862:	9002      	str	r0, [sp, #8]
 8006864:	2800      	cmp	r0, #0
 8006866:	d000      	beq.n	800686a <GetHead+0x12a>
 8006868:	e092      	b.n	8006990 <GetHead+0x250>
	else if(EmergencyWireBreak>0){
 800686a:	4b94      	ldr	r3, [pc, #592]	; (8006abc <GetHead+0x37c>)
 800686c:	9303      	str	r3, [sp, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	dd00      	ble.n	8006876 <GetHead+0x136>
 8006874:	e095      	b.n	80069a2 <GetHead+0x262>
	else if(AccGyroStatus==1){
 8006876:	4b92      	ldr	r3, [pc, #584]	; (8006ac0 <GetHead+0x380>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d100      	bne.n	8006880 <GetHead+0x140>
 800687e:	e098      	b.n	80069b2 <GetHead+0x272>
	else if(AccGyroStatus==2){
 8006880:	2b02      	cmp	r3, #2
 8006882:	d100      	bne.n	8006886 <GetHead+0x146>
 8006884:	e09a      	b.n	80069bc <GetHead+0x27c>
	else if(AccGyroStatus==3){
 8006886:	2b03      	cmp	r3, #3
 8006888:	d100      	bne.n	800688c <GetHead+0x14c>
 800688a:	e0a3      	b.n	80069d4 <GetHead+0x294>
	else if(EmergencyStateON==1){
 800688c:	6833      	ldr	r3, [r6, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d100      	bne.n	8006894 <GetHead+0x154>
 8006892:	e0a4      	b.n	80069de <GetHead+0x29e>
	else if(EmergencyStateOFF==1){
 8006894:	4653      	mov	r3, sl
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d100      	bne.n	800689e <GetHead+0x15e>
 800689c:	e0a4      	b.n	80069e8 <GetHead+0x2a8>
	else if(IgnitionTurnedON>0){
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dd00      	ble.n	80068a6 <GetHead+0x166>
 80068a4:	e08f      	b.n	80069c6 <GetHead+0x286>
	else if(IgnitionTurnedOFF>0){
 80068a6:	465b      	mov	r3, fp
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dd00      	ble.n	80068b0 <GetHead+0x170>
 80068ae:	e0a0      	b.n	80069f2 <GetHead+0x2b2>
	else if(BOX_STATE=='C'){
 80068b0:	4b84      	ldr	r3, [pc, #528]	; (8006ac4 <GetHead+0x384>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b43      	cmp	r3, #67	; 0x43
 80068b6:	d100      	bne.n	80068ba <GetHead+0x17a>
 80068b8:	e0ab      	b.n	8006a12 <GetHead+0x2d2>
	else if(InternalBatterLow>0){
 80068ba:	4643      	mov	r3, r8
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dd00      	ble.n	80068c4 <GetHead+0x184>
 80068c2:	e09e      	b.n	8006a02 <GetHead+0x2c2>
	else if(InternalBatteryChargedAgain>0){
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd00      	ble.n	80068cc <GetHead+0x18c>
 80068ca:	e0a7      	b.n	8006a1c <GetHead+0x2dc>
	else if(MainBatteryDisconnect>0){
 80068cc:	464b      	mov	r3, r9
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dd00      	ble.n	80068d6 <GetHead+0x196>
 80068d4:	e0a9      	b.n	8006a2a <GetHead+0x2ea>
	else if(MainBatteryReconnect>0){
 80068d6:	9c01      	ldr	r4, [sp, #4]
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dd00      	ble.n	80068e0 <GetHead+0x1a0>
 80068de:	e0ac      	b.n	8006a3a <GetHead+0x2fa>
	else if(HistoryPVTData>0){
 80068e0:	4e79      	ldr	r6, [pc, #484]	; (8006ac8 <GetHead+0x388>)
 80068e2:	6833      	ldr	r3, [r6, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dd00      	ble.n	80068ea <GetHead+0x1aa>
 80068e8:	e0ae      	b.n	8006a48 <GetHead+0x308>
	else if(HealthPacket>0){
 80068ea:	4e78      	ldr	r6, [pc, #480]	; (8006acc <GetHead+0x38c>)
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	dd00      	ble.n	80068f4 <GetHead+0x1b4>
 80068f2:	e0b0      	b.n	8006a56 <GetHead+0x316>
	else if(OTAParameterChange>0){
 80068f4:	4e76      	ldr	r6, [pc, #472]	; (8006ad0 <GetHead+0x390>)
 80068f6:	6833      	ldr	r3, [r6, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc00      	bgt.n	80068fe <GetHead+0x1be>
 80068fc:	e0b2      	b.n	8006a64 <GetHead+0x324>
		strcat(Head,AlartStr_OTAParameterChange);
 80068fe:	4975      	ldr	r1, [pc, #468]	; (8006ad4 <GetHead+0x394>)
 8006900:	9800      	ldr	r0, [sp, #0]
 8006902:	f008 fc0e 	bl	800f122 <strcpy>
		OTAParameterChange=0;
 8006906:	2300      	movs	r3, #0
 8006908:	6033      	str	r3, [r6, #0]
 800690a:	e045      	b.n	8006998 <GetHead+0x258>
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 800690c:	4a66      	ldr	r2, [pc, #408]	; (8006aa8 <GetHead+0x368>)
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	3201      	adds	r2, #1
 8006914:	4251      	negs	r1, r2
 8006916:	414a      	adcs	r2, r1
 8006918:	4013      	ands	r3, r2
 800691a:	e78c      	b.n	8006836 <GetHead+0xf6>
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 800691c:	4b5c      	ldr	r3, [pc, #368]	; (8006a90 <GetHead+0x350>)
 800691e:	469b      	mov	fp, r3
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	d000      	beq.n	8006928 <GetHead+0x1e8>
 8006926:	e747      	b.n	80067b8 <GetHead+0x78>
 8006928:	2a00      	cmp	r2, #0
 800692a:	d000      	beq.n	800692e <GetHead+0x1ee>
 800692c:	e744      	b.n	80067b8 <GetHead+0x78>
 800692e:	2301      	movs	r3, #1
 8006930:	465a      	mov	r2, fp
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	3b02      	subs	r3, #2
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	e73e      	b.n	80067b8 <GetHead+0x78>
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 800693a:	4b52      	ldr	r3, [pc, #328]	; (8006a84 <GetHead+0x344>)
 800693c:	469a      	mov	sl, r3
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	d000      	beq.n	8006946 <GetHead+0x206>
 8006944:	e726      	b.n	8006794 <GetHead+0x54>
 8006946:	2a00      	cmp	r2, #0
 8006948:	d000      	beq.n	800694c <GetHead+0x20c>
 800694a:	e723      	b.n	8006794 <GetHead+0x54>
 800694c:	2301      	movs	r3, #1
 800694e:	4652      	mov	r2, sl
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	3b02      	subs	r3, #2
 8006954:	6033      	str	r3, [r6, #0]
 8006956:	e71d      	b.n	8006794 <GetHead+0x54>
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8006958:	2301      	movs	r3, #1
 800695a:	4642      	mov	r2, r8
 800695c:	4c50      	ldr	r4, [pc, #320]	; (8006aa0 <GetHead+0x360>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	3b02      	subs	r3, #2
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	e746      	b.n	80067f4 <GetHead+0xb4>
		strcat(Head,AlartStr_HistoryPVTData);
 8006966:	495c      	ldr	r1, [pc, #368]	; (8006ad8 <GetHead+0x398>)
 8006968:	9800      	ldr	r0, [sp, #0]
 800696a:	f008 fae1 	bl	800ef30 <stpcpy>
			strcat(Head,PacketStatusStrHist);
 800696e:	2203      	movs	r2, #3
 8006970:	495a      	ldr	r1, [pc, #360]	; (8006adc <GetHead+0x39c>)
 8006972:	f008 fbe9 	bl	800f148 <memcpy>
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 8006976:	4b5a      	ldr	r3, [pc, #360]	; (8006ae0 <GetHead+0x3a0>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	2a00      	cmp	r2, #0
 800697c:	dd01      	ble.n	8006982 <GetHead+0x242>
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
}
 8006982:	b005      	add	sp, #20
 8006984:	bcf0      	pop	{r4, r5, r6, r7}
 8006986:	46bb      	mov	fp, r7
 8006988:	46b2      	mov	sl, r6
 800698a:	46a9      	mov	r9, r5
 800698c:	46a0      	mov	r8, r4
 800698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(Head,AlartStr_OverSpeed);
 8006990:	4954      	ldr	r1, [pc, #336]	; (8006ae4 <GetHead+0x3a4>)
 8006992:	9800      	ldr	r0, [sp, #0]
 8006994:	f008 fbc5 	bl	800f122 <strcpy>
		strcat(Head,PacketStatusStrLive);
 8006998:	0028      	movs	r0, r5
 800699a:	4953      	ldr	r1, [pc, #332]	; (8006ae8 <GetHead+0x3a8>)
 800699c:	f008 fa0a 	bl	800edb4 <strcat>
 80069a0:	e7e9      	b.n	8006976 <GetHead+0x236>
		strcat(Head,AlartStr_EmergencyWireBreak);
 80069a2:	4952      	ldr	r1, [pc, #328]	; (8006aec <GetHead+0x3ac>)
 80069a4:	9800      	ldr	r0, [sp, #0]
 80069a6:	f008 fbbc 	bl	800f122 <strcpy>
		EmergencyWireBreak=0;
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	9a02      	ldr	r2, [sp, #8]
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e7f2      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_HarshAcceleration);
 80069b2:	494f      	ldr	r1, [pc, #316]	; (8006af0 <GetHead+0x3b0>)
 80069b4:	9800      	ldr	r0, [sp, #0]
 80069b6:	f008 fbb4 	bl	800f122 <strcpy>
 80069ba:	e7ed      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_HarshBreaking);
 80069bc:	494d      	ldr	r1, [pc, #308]	; (8006af4 <GetHead+0x3b4>)
 80069be:	9800      	ldr	r0, [sp, #0]
 80069c0:	f008 fbaf 	bl	800f122 <strcpy>
 80069c4:	e7e8      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedON);
 80069c6:	494c      	ldr	r1, [pc, #304]	; (8006af8 <GetHead+0x3b8>)
 80069c8:	9800      	ldr	r0, [sp, #0]
 80069ca:	f008 fbaa 	bl	800f122 <strcpy>
		IgnitionTurnedON=0;
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	e7e1      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_RashTurning);
 80069d4:	4949      	ldr	r1, [pc, #292]	; (8006afc <GetHead+0x3bc>)
 80069d6:	9800      	ldr	r0, [sp, #0]
 80069d8:	f008 fba3 	bl	800f122 <strcpy>
 80069dc:	e7dc      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateON);
 80069de:	4948      	ldr	r1, [pc, #288]	; (8006b00 <GetHead+0x3c0>)
 80069e0:	9800      	ldr	r0, [sp, #0]
 80069e2:	f008 fb9e 	bl	800f122 <strcpy>
 80069e6:	e7d7      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateOFF);
 80069e8:	4946      	ldr	r1, [pc, #280]	; (8006b04 <GetHead+0x3c4>)
 80069ea:	9800      	ldr	r0, [sp, #0]
 80069ec:	f008 fb99 	bl	800f122 <strcpy>
 80069f0:	e7d2      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 80069f2:	4945      	ldr	r1, [pc, #276]	; (8006b08 <GetHead+0x3c8>)
 80069f4:	9800      	ldr	r0, [sp, #0]
 80069f6:	f008 fb94 	bl	800f122 <strcpy>
		IgnitionTurnedOFF=0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	465a      	mov	r2, fp
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	e7ca      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatterLow);
 8006a02:	4942      	ldr	r1, [pc, #264]	; (8006b0c <GetHead+0x3cc>)
 8006a04:	9800      	ldr	r0, [sp, #0]
 8006a06:	f008 fb8c 	bl	800f122 <strcpy>
		InternalBatterLow=0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e7c2      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_BoxTemper);
 8006a12:	493f      	ldr	r1, [pc, #252]	; (8006b10 <GetHead+0x3d0>)
 8006a14:	9800      	ldr	r0, [sp, #0]
 8006a16:	f008 fb84 	bl	800f122 <strcpy>
 8006a1a:	e7bd      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 8006a1c:	493d      	ldr	r1, [pc, #244]	; (8006b14 <GetHead+0x3d4>)
 8006a1e:	9800      	ldr	r0, [sp, #0]
 8006a20:	f008 fb7f 	bl	800f122 <strcpy>
		InternalBatteryChargedAgain=0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	e7b6      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 8006a2a:	493b      	ldr	r1, [pc, #236]	; (8006b18 <GetHead+0x3d8>)
 8006a2c:	9800      	ldr	r0, [sp, #0]
 8006a2e:	f008 fb78 	bl	800f122 <strcpy>
		MainBatteryDisconnect=0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	464a      	mov	r2, r9
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e7ae      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryReconnect);
 8006a3a:	4938      	ldr	r1, [pc, #224]	; (8006b1c <GetHead+0x3dc>)
 8006a3c:	9800      	ldr	r0, [sp, #0]
 8006a3e:	f008 fb70 	bl	800f122 <strcpy>
		MainBatteryReconnect=0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	e7a7      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_HistoryPVTData);
 8006a48:	4923      	ldr	r1, [pc, #140]	; (8006ad8 <GetHead+0x398>)
 8006a4a:	9800      	ldr	r0, [sp, #0]
 8006a4c:	f008 fb69 	bl	800f122 <strcpy>
		HistoryPVTData=0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	6033      	str	r3, [r6, #0]
 8006a54:	e7a0      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_HealthPacket);
 8006a56:	4932      	ldr	r1, [pc, #200]	; (8006b20 <GetHead+0x3e0>)
 8006a58:	9800      	ldr	r0, [sp, #0]
 8006a5a:	f008 fb62 	bl	800f122 <strcpy>
		HealthPacket=0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6033      	str	r3, [r6, #0]
 8006a62:	e799      	b.n	8006998 <GetHead+0x258>
		strcat(Head,AlartStr_NormalPkt);
 8006a64:	492f      	ldr	r1, [pc, #188]	; (8006b24 <GetHead+0x3e4>)
 8006a66:	9800      	ldr	r0, [sp, #0]
 8006a68:	f008 fb5b 	bl	800f122 <strcpy>
 8006a6c:	e794      	b.n	8006998 <GetHead+0x258>
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	20001fa4 	.word	0x20001fa4
 8006a74:	200000a0 	.word	0x200000a0
 8006a78:	200000b8 	.word	0x200000b8
 8006a7c:	2000410c 	.word	0x2000410c
 8006a80:	20000098 	.word	0x20000098
 8006a84:	200006c4 	.word	0x200006c4
 8006a88:	20002080 	.word	0x20002080
 8006a8c:	2000204c 	.word	0x2000204c
 8006a90:	20002048 	.word	0x20002048
 8006a94:	20002044 	.word	0x20002044
 8006a98:	40400000 	.word	0x40400000
 8006a9c:	20002050 	.word	0x20002050
 8006aa0:	20002054 	.word	0x20002054
 8006aa4:	20002094 	.word	0x20002094
 8006aa8:	20002098 	.word	0x20002098
 8006aac:	20001d98 	.word	0x20001d98
 8006ab0:	41200000 	.word	0x41200000
 8006ab4:	200000b0 	.word	0x200000b0
 8006ab8:	20000700 	.word	0x20000700
 8006abc:	200006c8 	.word	0x200006c8
 8006ac0:	20000350 	.word	0x20000350
 8006ac4:	20000090 	.word	0x20000090
 8006ac8:	2000200c 	.word	0x2000200c
 8006acc:	20002008 	.word	0x20002008
 8006ad0:	2000209c 	.word	0x2000209c
 8006ad4:	20000078 	.word	0x20000078
 8006ad8:	20000038 	.word	0x20000038
 8006adc:	08013a58 	.word	0x08013a58
 8006ae0:	20000354 	.word	0x20000354
 8006ae4:	20000080 	.word	0x20000080
 8006ae8:	200000ac 	.word	0x200000ac
 8006aec:	20000018 	.word	0x20000018
 8006af0:	20000020 	.word	0x20000020
 8006af4:	20000028 	.word	0x20000028
 8006af8:	20000048 	.word	0x20000048
 8006afc:	20000088 	.word	0x20000088
 8006b00:	20000010 	.word	0x20000010
 8006b04:	20000008 	.word	0x20000008
 8006b08:	20000040 	.word	0x20000040
 8006b0c:	20000050 	.word	0x20000050
 8006b10:	20000000 	.word	0x20000000
 8006b14:	20000058 	.word	0x20000058
 8006b18:	20000060 	.word	0x20000060
 8006b1c:	20000068 	.word	0x20000068
 8006b20:	20000030 	.word	0x20000030
 8006b24:	20000070 	.word	0x20000070

08006b28 <TestRun>:
void TestRun(){
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	46de      	mov	lr, fp
 8006b2c:	4657      	mov	r7, sl
 8006b2e:	4645      	mov	r5, r8
 8006b30:	464e      	mov	r6, r9
 8006b32:	b5e0      	push	{r5, r6, r7, lr}
	printInt(seqNo);
 8006b34:	4bf7      	ldr	r3, [pc, #988]	; (8006f14 <TestRun+0x3ec>)
	memset(printBuf,0,50);
 8006b36:	4cf8      	ldr	r4, [pc, #992]	; (8006f18 <TestRun+0x3f0>)
 8006b38:	681d      	ldr	r5, [r3, #0]
void TestRun(){
 8006b3a:	b09d      	sub	sp, #116	; 0x74
 8006b3c:	2232      	movs	r2, #50	; 0x32
 8006b3e:	2100      	movs	r1, #0
 8006b40:	0020      	movs	r0, r4
	printInt(seqNo);
 8006b42:	9318      	str	r3, [sp, #96]	; 0x60
 8006b44:	f008 f92e 	bl	800eda4 <memset>
	snprintf(printBuf, 6, "%d", x);
 8006b48:	002b      	movs	r3, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006b4a:	250c      	movs	r5, #12
 8006b4c:	2106      	movs	r1, #6
 8006b4e:	4af3      	ldr	r2, [pc, #972]	; (8006f1c <TestRun+0x3f4>)
 8006b50:	0020      	movs	r0, r4
 8006b52:	f008 f887 	bl	800ec64 <sniprintf>
 8006b56:	4bf2      	ldr	r3, [pc, #968]	; (8006f20 <TestRun+0x3f8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006b58:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006b5a:	469a      	mov	sl, r3
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	621d      	str	r5, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006b60:	f7f9 fad2 	bl	8000108 <strlen>
 8006b64:	0021      	movs	r1, r4
 8006b66:	b282      	uxth	r2, r0
 8006b68:	4bee      	ldr	r3, [pc, #952]	; (8006f24 <TestRun+0x3fc>)
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	f004 fa42 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006b70:	4bed      	ldr	r3, [pc, #948]	; (8006f28 <TestRun+0x400>)
 8006b72:	ac1b      	add	r4, sp, #108	; 0x6c
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006b74:	2202      	movs	r2, #2
 8006b76:	0021      	movs	r1, r4
	char newline[2] = "\r\n";
 8006b78:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	230a      	movs	r3, #10
 8006b7e:	f004 fa39 	bl	800aff4 <HAL_UART_Transmit>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	48e9      	ldr	r0, [pc, #932]	; (8006f2c <TestRun+0x404>)
 8006b86:	0189      	lsls	r1, r1, #6
 8006b88:	f002 f802 	bl	8008b90 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006b8c:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 8006b8e:	4be8      	ldr	r3, [pc, #928]	; (8006f30 <TestRun+0x408>)
 8006b90:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8006b92:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006b94:	48e5      	ldr	r0, [pc, #916]	; (8006f2c <TestRun+0x404>)
 8006b96:	f001 fffb 	bl	8008b90 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8006b9a:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 8006b9c:	4be5      	ldr	r3, [pc, #916]	; (8006f34 <TestRun+0x40c>)
 8006b9e:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006ba0:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8006ba2:	48e2      	ldr	r0, [pc, #904]	; (8006f2c <TestRun+0x404>)
 8006ba4:	f001 fff4 	bl	8008b90 <HAL_GPIO_ReadPin>
		else box='C';
 8006ba8:	3801      	subs	r0, #1
 8006baa:	4243      	negs	r3, r0
 8006bac:	4158      	adcs	r0, r3
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006bae:	2180      	movs	r1, #128	; 0x80
		else box='C';
 8006bb0:	4243      	negs	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006bb2:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 8006bb4:	4ae0      	ldr	r2, [pc, #896]	; (8006f38 <TestRun+0x410>)
		else box='C';
 8006bb6:	402b      	ands	r3, r5
 8006bb8:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006bba:	0049      	lsls	r1, r1, #1
 8006bbc:	05c0      	lsls	r0, r0, #23
 8006bbe:	7013      	strb	r3, [r2, #0]
 8006bc0:	f001 ffe6 	bl	8008b90 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 8006bc4:	4bdd      	ldr	r3, [pc, #884]	; (8006f3c <TestRun+0x414>)
	return (ADCvalue[2]*VSENSE*16);
 8006bc6:	4fde      	ldr	r7, [pc, #888]	; (8006f40 <TestRun+0x418>)
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006bc8:	6018      	str	r0, [r3, #0]
	return (ADCvalue[2]*VSENSE*16);
 8006bca:	4bde      	ldr	r3, [pc, #888]	; (8006f44 <TestRun+0x41c>)
 8006bcc:	68b8      	ldr	r0, [r7, #8]
 8006bce:	681e      	ldr	r6, [r3, #0]
 8006bd0:	f7fa fbde 	bl	8001390 <__aeabi_ui2f>
 8006bd4:	1c31      	adds	r1, r6, #0
 8006bd6:	f7fa f87b 	bl	8000cd0 <__aeabi_fmul>
 8006bda:	2183      	movs	r1, #131	; 0x83
 8006bdc:	05c9      	lsls	r1, r1, #23
 8006bde:	f7fa f877 	bl	8000cd0 <__aeabi_fmul>
	EXT_B=Read_EXT_B_SENSE();
 8006be2:	4bd9      	ldr	r3, [pc, #868]	; (8006f48 <TestRun+0x420>)
 8006be4:	1c05      	adds	r5, r0, #0
 8006be6:	6018      	str	r0, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 8006be8:	4bd8      	ldr	r3, [pc, #864]	; (8006f4c <TestRun+0x424>)
	return (ADCvalue[3]*VSENSE*2);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	4698      	mov	r8, r3
 8006bee:	f7fa fbcf 	bl	8001390 <__aeabi_ui2f>
 8006bf2:	1c31      	adds	r1, r6, #0
 8006bf4:	f7fa f86c 	bl	8000cd0 <__aeabi_fmul>
 8006bf8:	1c01      	adds	r1, r0, #0
 8006bfa:	f7f9 fcff 	bl	80005fc <__aeabi_fadd>
 8006bfe:	4643      	mov	r3, r8
 8006c00:	6018      	str	r0, [r3, #0]
	adc[0]=Read_ADC1();
 8006c02:	4bd3      	ldr	r3, [pc, #844]	; (8006f50 <TestRun+0x428>)
	float val=(float)ADCvalue[0];
 8006c04:	6838      	ldr	r0, [r7, #0]
 8006c06:	4698      	mov	r8, r3
 8006c08:	f7fa fbc2 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 8006c0c:	1c31      	adds	r1, r6, #0
 8006c0e:	f7fa f85f 	bl	8000cd0 <__aeabi_fmul>
 8006c12:	49d0      	ldr	r1, [pc, #832]	; (8006f54 <TestRun+0x42c>)
 8006c14:	f7fa f85c 	bl	8000cd0 <__aeabi_fmul>
 8006c18:	4643      	mov	r3, r8
 8006c1a:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fa fbb7 	bl	8001390 <__aeabi_ui2f>
 8006c22:	1c31      	adds	r1, r6, #0
 8006c24:	f7fa f854 	bl	8000cd0 <__aeabi_fmul>
 8006c28:	49ca      	ldr	r1, [pc, #808]	; (8006f54 <TestRun+0x42c>)
 8006c2a:	f7fa f851 	bl	8000cd0 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 8006c2e:	4643      	mov	r3, r8
	if(EXT_B>7){
 8006c30:	49c9      	ldr	r1, [pc, #804]	; (8006f58 <TestRun+0x430>)
	adc[1]=Read_ADC2();
 8006c32:	6058      	str	r0, [r3, #4]
	if(EXT_B>7){
 8006c34:	1c28      	adds	r0, r5, #0
 8006c36:	f7f9 fc5d 	bl	80004f4 <__aeabi_fcmpgt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d100      	bne.n	8006c40 <TestRun+0x118>
 8006c3e:	e32f      	b.n	80072a0 <TestRun+0x778>
	}
}

static void SET_LED_PWR(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 8006c40:	2201      	movs	r2, #1
 8006c42:	2101      	movs	r1, #1
 8006c44:	48c5      	ldr	r0, [pc, #788]	; (8006f5c <TestRun+0x434>)
 8006c46:	f001 ffa9 	bl	8008b9c <HAL_GPIO_WritePin>
memset(INSMSno,0,30);
 8006c4a:	4bc5      	ldr	r3, [pc, #788]	; (8006f60 <TestRun+0x438>)
 8006c4c:	221e      	movs	r2, #30
 8006c4e:	2100      	movs	r1, #0
 8006c50:	0018      	movs	r0, r3
 8006c52:	469b      	mov	fp, r3
 8006c54:	f008 f8a6 	bl	800eda4 <memset>
memset(OUTSMSno,0,30);
 8006c58:	4bc2      	ldr	r3, [pc, #776]	; (8006f64 <TestRun+0x43c>)
 8006c5a:	221e      	movs	r2, #30
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	0018      	movs	r0, r3
 8006c60:	9310      	str	r3, [sp, #64]	; 0x40
 8006c62:	f008 f89f 	bl	800eda4 <memset>
memset(EmgIP,0,50);
 8006c66:	4bc0      	ldr	r3, [pc, #768]	; (8006f68 <TestRun+0x440>)
 8006c68:	2232      	movs	r2, #50	; 0x32
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	4699      	mov	r9, r3
 8006c70:	f008 f898 	bl	800eda4 <memset>
memset(RegIP,0,50);
 8006c74:	4bbd      	ldr	r3, [pc, #756]	; (8006f6c <TestRun+0x444>)
 8006c76:	2232      	movs	r2, #50	; 0x32
 8006c78:	0018      	movs	r0, r3
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4698      	mov	r8, r3
 8006c7e:	f008 f891 	bl	800eda4 <memset>
memset(TracIP,0,50);
 8006c82:	4fbb      	ldr	r7, [pc, #748]	; (8006f70 <TestRun+0x448>)
 8006c84:	2232      	movs	r2, #50	; 0x32
 8006c86:	2100      	movs	r1, #0
 8006c88:	0038      	movs	r0, r7
 8006c8a:	f008 f88b 	bl	800eda4 <memset>

char* readINSMSno(){
	uint8_t add4[]={0x00, 0x00,0x00};
 8006c8e:	4eb9      	ldr	r6, [pc, #740]	; (8006f74 <TestRun+0x44c>)
	add4[2]=RegNoLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006c90:	4db9      	ldr	r5, [pc, #740]	; (8006f78 <TestRun+0x450>)
	uint8_t add4[]={0x00, 0x00,0x00};
 8006c92:	8833      	ldrh	r3, [r6, #0]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006c94:	2264      	movs	r2, #100	; 0x64
	uint8_t add4[]={0x00, 0x00,0x00};
 8006c96:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen;
 8006c98:	2310      	movs	r3, #16
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006c9a:	0029      	movs	r1, r5
	add4[2]=RegNoLen;
 8006c9c:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006c9e:	0020      	movs	r0, r4
 8006ca0:	f7fe fb4e 	bl	8005340 <SPI_flash_Read_Data>
strcpy(INSMSno,readINSMSno());
 8006ca4:	0029      	movs	r1, r5
 8006ca6:	4658      	mov	r0, fp
 8006ca8:	f008 fa3b 	bl	800f122 <strcpy>
	return (char*) dataR;
}

char* readOUTSMSno(){

	uint8_t  add4[]={0x00, 0x00,0x00};
 8006cac:	8833      	ldrh	r3, [r6, #0]
	add4[2]=RegNoLen+INSMSLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006cae:	223c      	movs	r2, #60	; 0x3c
	uint8_t  add4[]={0x00, 0x00,0x00};
 8006cb0:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen+INSMSLen;
 8006cb2:	2374      	movs	r3, #116	; 0x74
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006cb4:	0029      	movs	r1, r5
	add4[2]=RegNoLen+INSMSLen;
 8006cb6:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006cb8:	0020      	movs	r0, r4
 8006cba:	f7fe fb41 	bl	8005340 <SPI_flash_Read_Data>
strcpy(OUTSMSno,readOUTSMSno());
 8006cbe:	0029      	movs	r1, r5
 8006cc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006cc2:	f008 fa2e 	bl	800f122 <strcpy>
	return (char*) dataR;
}

char* readEmgIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006cc6:	88b3      	ldrh	r3, [r6, #4]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006cc8:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006cca:	8023      	strh	r3, [r4, #0]
 8006ccc:	79b3      	ldrb	r3, [r6, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006cce:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006cd0:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006cd2:	0020      	movs	r0, r4
 8006cd4:	f7fe fb34 	bl	8005340 <SPI_flash_Read_Data>
strcpy(EmgIP,readEmgIP());
 8006cd8:	0029      	movs	r1, r5
 8006cda:	4648      	mov	r0, r9
 8006cdc:	f008 fa21 	bl	800f122 <strcpy>
	return (char*) dataR;
}

char* readRegIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006ce0:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006ce2:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006ce4:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen;
 8006ce6:	2328      	movs	r3, #40	; 0x28
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006ce8:	0029      	movs	r1, r5
	add4[2]=EmgIPLen;
 8006cea:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006cec:	0020      	movs	r0, r4
 8006cee:	f7fe fb27 	bl	8005340 <SPI_flash_Read_Data>
strcpy(RegIP,readRegIP());
 8006cf2:	0029      	movs	r1, r5
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	f008 fa14 	bl	800f122 <strcpy>
	return (char*) dataR;
}

char* readTracIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006cfa:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen+RegIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006cfc:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006cfe:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen+RegIPLen;
 8006d00:	2350      	movs	r3, #80	; 0x50
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006d02:	0029      	movs	r1, r5
	add4[2]=EmgIPLen+RegIPLen;
 8006d04:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006d06:	0020      	movs	r0, r4
 8006d08:	f7fe fb1a 	bl	8005340 <SPI_flash_Read_Data>
strcpy(TracIP,readTracIP());
 8006d0c:	0029      	movs	r1, r5
 8006d0e:	0038      	movs	r0, r7
 8006d10:	f008 fa07 	bl	800f122 <strcpy>
	return HAL_GetTick();
 8006d14:	f001 f874 	bl	8007e00 <HAL_GetTick>
memset(simop,0,25);
 8006d18:	4b98      	ldr	r3, [pc, #608]	; (8006f7c <TestRun+0x454>)
 8006d1a:	0006      	movs	r6, r0
 8006d1c:	2219      	movs	r2, #25
 8006d1e:	2100      	movs	r1, #0
 8006d20:	0018      	movs	r0, r3
 8006d22:	001f      	movs	r7, r3
 8006d24:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d26:	f008 f83d 	bl	800eda4 <memset>
	SendGSMCode("  AT+COPS?");
 8006d2a:	4895      	ldr	r0, [pc, #596]	; (8006f80 <TestRun+0x458>)
 8006d2c:	f7fc fb9a 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8006d30:	4a94      	ldr	r2, [pc, #592]	; (8006f84 <TestRun+0x45c>)
 8006d32:	4d7c      	ldr	r5, [pc, #496]	; (8006f24 <TestRun+0x3fc>)
 8006d34:	9202      	str	r2, [sp, #8]
 8006d36:	4a94      	ldr	r2, [pc, #592]	; (8006f88 <TestRun+0x460>)
 8006d38:	4b94      	ldr	r3, [pc, #592]	; (8006f8c <TestRun+0x464>)
 8006d3a:	4995      	ldr	r1, [pc, #596]	; (8006f90 <TestRun+0x468>)
 8006d3c:	9200      	str	r2, [sp, #0]
 8006d3e:	2000      	movs	r0, #0
 8006d40:	220c      	movs	r2, #12
 8006d42:	9501      	str	r5, [sp, #4]
 8006d44:	f7fc fd36 	bl	80037b4 <GetGSMReply>
 8006d48:	0001      	movs	r1, r0
strcpy(simop, GSMSimOperator());
 8006d4a:	0038      	movs	r0, r7
 8006d4c:	f008 f9e9 	bl	800f122 <strcpy>
 8006d50:	f001 f856 	bl	8007e00 <HAL_GetTick>
sprintf(DatPrint, "**simop loop %d ",tic()-t222);Debug_Tx(DatPrint);
 8006d54:	4b8f      	ldr	r3, [pc, #572]	; (8006f94 <TestRun+0x46c>)
 8006d56:	1b82      	subs	r2, r0, r6
 8006d58:	498f      	ldr	r1, [pc, #572]	; (8006f98 <TestRun+0x470>)
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	469b      	mov	fp, r3
 8006d5e:	f007 ffb5 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006d62:	4653      	mov	r3, sl
 8006d64:	220c      	movs	r2, #12
 8006d66:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006d68:	4658      	mov	r0, fp
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006d6a:	621a      	str	r2, [r3, #32]
 8006d6c:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006d6e:	f7f9 f9cb 	bl	8000108 <strlen>
	char newline[2] = "\r\n";
 8006d72:	4f6d      	ldr	r7, [pc, #436]	; (8006f28 <TestRun+0x400>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006d74:	b282      	uxth	r2, r0
 8006d76:	002b      	movs	r3, r5
 8006d78:	4659      	mov	r1, fp
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	f004 f93a 	bl	800aff4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006d80:	230a      	movs	r3, #10
 8006d82:	2202      	movs	r2, #2
 8006d84:	0021      	movs	r1, r4
 8006d86:	4650      	mov	r0, sl
	char newline[2] = "\r\n";
 8006d88:	8027      	strh	r7, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006d8a:	f004 f933 	bl	800aff4 <HAL_UART_Transmit>
 8006d8e:	f001 f837 	bl	8007e00 <HAL_GetTick>
 8006d92:	0006      	movs	r6, r0
	 GSMCellInfo();
 8006d94:	f7fd f9bc 	bl	8004110 <GSMCellInfo>
 8006d98:	f001 f832 	bl	8007e00 <HAL_GetTick>
	sprintf(DatPrint, "**simcell info loop %d ",tic()-t222);Debug_Tx(DatPrint);
 8006d9c:	497f      	ldr	r1, [pc, #508]	; (8006f9c <TestRun+0x474>)
 8006d9e:	1b82      	subs	r2, r0, r6
 8006da0:	4658      	mov	r0, fp
 8006da2:	f007 ff93 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006da6:	4653      	mov	r3, sl
 8006da8:	4642      	mov	r2, r8
 8006daa:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006dac:	4658      	mov	r0, fp
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006dae:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006db0:	f7f9 f9aa 	bl	8000108 <strlen>
 8006db4:	002b      	movs	r3, r5
 8006db6:	b282      	uxth	r2, r0
 8006db8:	4659      	mov	r1, fp
 8006dba:	4650      	mov	r0, sl
 8006dbc:	f004 f91a 	bl	800aff4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006dc0:	230a      	movs	r3, #10
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	0021      	movs	r1, r4
 8006dc6:	4650      	mov	r0, sl
	char newline[2] = "\r\n";
 8006dc8:	8027      	strh	r7, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006dca:	f004 f913 	bl	800aff4 <HAL_UART_Transmit>
	GetHead();
 8006dce:	f7ff fcb7 	bl	8006740 <GetHead>
	if (GPSInfo.fix>0)v='A';
 8006dd2:	4b73      	ldr	r3, [pc, #460]	; (8006fa0 <TestRun+0x478>)
 8006dd4:	2656      	movs	r6, #86	; 0x56
 8006dd6:	4698      	mov	r8, r3
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd00      	ble.n	8006de0 <TestRun+0x2b8>
 8006dde:	3e15      	subs	r6, #21
	sprintf(gpsDataRet2, "%s,%s,%c,%0.6f,%1s,%0.6f,%1s,%0.1f,%0.1f,%0.1f,G",GPSInfo.date,GPSInfo.time,v,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.alt,GPSInfo.speed,GPSInfo.head);
 8006de0:	232e      	movs	r3, #46	; 0x2e
 8006de2:	4642      	mov	r2, r8
 8006de4:	4443      	add	r3, r8
 8006de6:	4699      	mov	r9, r3
 8006de8:	4b6e      	ldr	r3, [pc, #440]	; (8006fa4 <TestRun+0x47c>)
 8006dea:	6950      	ldr	r0, [r2, #20]
 8006dec:	9311      	str	r3, [sp, #68]	; 0x44
 8006dee:	f7fc f95f 	bl	80030b0 <__aeabi_f2d>
 8006df2:	4642      	mov	r2, r8
 8006df4:	900e      	str	r0, [sp, #56]	; 0x38
 8006df6:	910f      	str	r1, [sp, #60]	; 0x3c
 8006df8:	6990      	ldr	r0, [r2, #24]
 8006dfa:	f7fc f959 	bl	80030b0 <__aeabi_f2d>
 8006dfe:	4642      	mov	r2, r8
 8006e00:	900c      	str	r0, [sp, #48]	; 0x30
 8006e02:	910d      	str	r1, [sp, #52]	; 0x34
 8006e04:	6890      	ldr	r0, [r2, #8]
 8006e06:	f7fc f953 	bl	80030b0 <__aeabi_f2d>
 8006e0a:	4643      	mov	r3, r8
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	900a      	str	r0, [sp, #40]	; 0x28
 8006e10:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e12:	332b      	adds	r3, #43	; 0x2b
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	6850      	ldr	r0, [r2, #4]
 8006e18:	f7fc f94a 	bl	80030b0 <__aeabi_f2d>
 8006e1c:	4643      	mov	r3, r8
 8006e1e:	4642      	mov	r2, r8
 8006e20:	9006      	str	r0, [sp, #24]
 8006e22:	9107      	str	r1, [sp, #28]
 8006e24:	3328      	adds	r3, #40	; 0x28
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	6810      	ldr	r0, [r2, #0]
 8006e2a:	f7fc f941 	bl	80030b0 <__aeabi_f2d>
 8006e2e:	4647      	mov	r7, r8
 8006e30:	4d5d      	ldr	r5, [pc, #372]	; (8006fa8 <TestRun+0x480>)
 8006e32:	9002      	str	r0, [sp, #8]
 8006e34:	9103      	str	r1, [sp, #12]
 8006e36:	373d      	adds	r7, #61	; 0x3d
 8006e38:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	003a      	movs	r2, r7
 8006e3e:	0029      	movs	r1, r5
 8006e40:	9600      	str	r6, [sp, #0]
 8006e42:	4681      	mov	r9, r0
 8006e44:	f007 ff42 	bl	800eccc <siprintf>
	memset(DataString_em1,0,150);
 8006e48:	4e58      	ldr	r6, [pc, #352]	; (8006fac <TestRun+0x484>)
 8006e4a:	2296      	movs	r2, #150	; 0x96
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	0030      	movs	r0, r6
 8006e50:	f007 ffa8 	bl	800eda4 <memset>
	strcat(DataString_em1,"$,EPB,EMR,");
 8006e54:	0030      	movs	r0, r6
 8006e56:	f7f9 f957 	bl	8000108 <strlen>
 8006e5a:	0005      	movs	r5, r0
 8006e5c:	4b54      	ldr	r3, [pc, #336]	; (8006fb0 <TestRun+0x488>)
 8006e5e:	220a      	movs	r2, #10
 8006e60:	0019      	movs	r1, r3
 8006e62:	1830      	adds	r0, r6, r0
 8006e64:	350a      	adds	r5, #10
 8006e66:	9319      	str	r3, [sp, #100]	; 0x64
 8006e68:	f008 f96e 	bl	800f148 <memcpy>
	strcat(DataString_em1,IMEI);strcat(DataString_em1,",NM,");
 8006e6c:	46b4      	mov	ip, r6
	strcat(DataString_em1,"$,EPB,EMR,");
 8006e6e:	0028      	movs	r0, r5
	strcat(DataString_em1,IMEI);strcat(DataString_em1,",NM,");
 8006e70:	4a50      	ldr	r2, [pc, #320]	; (8006fb4 <TestRun+0x48c>)
 8006e72:	4460      	add	r0, ip
 8006e74:	0011      	movs	r1, r2
 8006e76:	9214      	str	r2, [sp, #80]	; 0x50
 8006e78:	9616      	str	r6, [sp, #88]	; 0x58
 8006e7a:	f008 f859 	bl	800ef30 <stpcpy>
 8006e7e:	0005      	movs	r5, r0
 8006e80:	4f4d      	ldr	r7, [pc, #308]	; (8006fb8 <TestRun+0x490>)
 8006e82:	2204      	movs	r2, #4
 8006e84:	0039      	movs	r1, r7
 8006e86:	f008 f95f 	bl	800f148 <memcpy>
	strcat(DataString_em1,gpsDataRet2);strcat(DataString_em1,",");
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	1d28      	adds	r0, r5, #4
 8006e8e:	f008 f84f 	bl	800ef30 <stpcpy>
 8006e92:	232c      	movs	r3, #44	; 0x2c
 8006e94:	7003      	strb	r3, [r0, #0]
	strcat(DataString_em1,Regno);strcat(DataString_em1,",0000000000,");
 8006e96:	4b49      	ldr	r3, [pc, #292]	; (8006fbc <TestRun+0x494>)
 8006e98:	3001      	adds	r0, #1
 8006e9a:	0019      	movs	r1, r3
 8006e9c:	9315      	str	r3, [sp, #84]	; 0x54
 8006e9e:	f008 f847 	bl	800ef30 <stpcpy>
 8006ea2:	4e47      	ldr	r6, [pc, #284]	; (8006fc0 <TestRun+0x498>)
 8006ea4:	220d      	movs	r2, #13
 8006ea6:	0031      	movs	r1, r6
 8006ea8:	f008 f94e 	bl	800f148 <memcpy>
    while (*s)
 8006eac:	9916      	ldr	r1, [sp, #88]	; 0x58
    int c = 0;
 8006eae:	2200      	movs	r2, #0
    while (*s)
 8006eb0:	780b      	ldrb	r3, [r1, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <TestRun+0x398>
        c ^= *s++;
 8006eb6:	3101      	adds	r1, #1
 8006eb8:	405a      	eors	r2, r3
    while (*s)
 8006eba:	780b      	ldrb	r3, [r1, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1fa      	bne.n	8006eb6 <TestRun+0x38e>
	sprintf(checksum, "%02x",nmea0183_checksum(DataString_em1));
 8006ec0:	4b40      	ldr	r3, [pc, #256]	; (8006fc4 <TestRun+0x49c>)
 8006ec2:	4941      	ldr	r1, [pc, #260]	; (8006fc8 <TestRun+0x4a0>)
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	4699      	mov	r9, r3
 8006ec8:	9112      	str	r1, [sp, #72]	; 0x48
 8006eca:	f007 feff 	bl	800eccc <siprintf>
	strcat(DataString_em1,checksum);
 8006ece:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006ed0:	0028      	movs	r0, r5
 8006ed2:	f7f9 f919 	bl	8000108 <strlen>
 8006ed6:	46ac      	mov	ip, r5
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4460      	add	r0, ip
 8006edc:	f008 f828 	bl	800ef30 <stpcpy>
	strcat(DataString_em1,",*\0");
 8006ee0:	4b3a      	ldr	r3, [pc, #232]	; (8006fcc <TestRun+0x4a4>)
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	0019      	movs	r1, r3
 8006ee6:	3134      	adds	r1, #52	; 0x34
 8006ee8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eea:	f008 f92d 	bl	800f148 <memcpy>
	memset(DataString_em2,0,150);
 8006eee:	4938      	ldr	r1, [pc, #224]	; (8006fd0 <TestRun+0x4a8>)
 8006ef0:	2296      	movs	r2, #150	; 0x96
 8006ef2:	000d      	movs	r5, r1
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	0028      	movs	r0, r5
 8006ef8:	f007 ff54 	bl	800eda4 <memset>
	strcat(DataString_em2,"$,EPB,EMR,");
 8006efc:	0028      	movs	r0, r5
 8006efe:	9510      	str	r5, [sp, #64]	; 0x40
 8006f00:	f7f9 f902 	bl	8000108 <strlen>
 8006f04:	0005      	movs	r5, r0
 8006f06:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006f08:	220a      	movs	r2, #10
 8006f0a:	1808      	adds	r0, r1, r0
 8006f0c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006f0e:	f008 f91b 	bl	800f148 <memcpy>
 8006f12:	e05f      	b.n	8006fd4 <TestRun+0x4ac>
 8006f14:	20004c94 	.word	0x20004c94
 8006f18:	20004c60 	.word	0x20004c60
 8006f1c:	08012cdc 	.word	0x08012cdc
 8006f20:	20004bc8 	.word	0x20004bc8
 8006f24:	00001388 	.word	0x00001388
 8006f28:	00000a0d 	.word	0x00000a0d
 8006f2c:	50000400 	.word	0x50000400
 8006f30:	20002080 	.word	0x20002080
 8006f34:	2000033c 	.word	0x2000033c
 8006f38:	20000090 	.word	0x20000090
 8006f3c:	2000410c 	.word	0x2000410c
 8006f40:	20000340 	.word	0x20000340
 8006f44:	200000b4 	.word	0x200000b4
 8006f48:	200006c0 	.word	0x200006c0
 8006f4c:	20002044 	.word	0x20002044
 8006f50:	20004170 	.word	0x20004170
 8006f54:	41300000 	.word	0x41300000
 8006f58:	40e00000 	.word	0x40e00000
 8006f5c:	50000c00 	.word	0x50000c00
 8006f60:	20002024 	.word	0x20002024
 8006f64:	200020a0 	.word	0x200020a0
 8006f68:	200006cc 	.word	0x200006cc
 8006f6c:	200040c0 	.word	0x200040c0
 8006f70:	2000413c 	.word	0x2000413c
 8006f74:	080128e0 	.word	0x080128e0
 8006f78:	2000417c 	.word	0x2000417c
 8006f7c:	20004c98 	.word	0x20004c98
 8006f80:	08012bf0 	.word	0x08012bf0
 8006f84:	08012c98 	.word	0x08012c98
 8006f88:	08012c04 	.word	0x08012c04
 8006f8c:	08012c8c 	.word	0x08012c8c
 8006f90:	08012bfc 	.word	0x08012bfc
 8006f94:	20000394 	.word	0x20000394
 8006f98:	08013894 	.word	0x08013894
 8006f9c:	080138a8 	.word	0x080138a8
 8006fa0:	20000700 	.word	0x20000700
 8006fa4:	20004728 	.word	0x20004728
 8006fa8:	080138c0 	.word	0x080138c0
 8006fac:	2000054c 	.word	0x2000054c
 8006fb0:	080138f4 	.word	0x080138f4
 8006fb4:	20002010 	.word	0x20002010
 8006fb8:	08013900 	.word	0x08013900
 8006fbc:	200040f4 	.word	0x200040f4
 8006fc0:	08013908 	.word	0x08013908
 8006fc4:	20004178 	.word	0x20004178
 8006fc8:	08013918 	.word	0x08013918
 8006fcc:	08012960 	.word	0x08012960
 8006fd0:	200005ec 	.word	0x200005ec
	strcat(DataString_em2,IMEI);strcat(DataString_em2,",NM,");
 8006fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	strcat(DataString_em2,"$,EPB,EMR,");
 8006fd6:	0028      	movs	r0, r5
	strcat(DataString_em2,IMEI);strcat(DataString_em2,",NM,");
 8006fd8:	469c      	mov	ip, r3
	strcat(DataString_em2,"$,EPB,EMR,");
 8006fda:	300a      	adds	r0, #10
	strcat(DataString_em2,IMEI);strcat(DataString_em2,",NM,");
 8006fdc:	4460      	add	r0, ip
 8006fde:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006fe0:	f007 ffa6 	bl	800ef30 <stpcpy>
 8006fe4:	0005      	movs	r5, r0
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	0039      	movs	r1, r7
 8006fea:	f008 f8ad 	bl	800f148 <memcpy>
	strcat(DataString_em2,gpsDataRet2);strcat(DataString_em2,",");
 8006fee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ff0:	1d28      	adds	r0, r5, #4
 8006ff2:	f007 ff9d 	bl	800ef30 <stpcpy>
 8006ff6:	232c      	movs	r3, #44	; 0x2c
	strcat(DataString_em2,Regno);strcat(DataString_em2,",0000000000,");
 8006ff8:	9915      	ldr	r1, [sp, #84]	; 0x54
	strcat(DataString_em2,gpsDataRet2);strcat(DataString_em2,",");
 8006ffa:	7003      	strb	r3, [r0, #0]
	strcat(DataString_em2,Regno);strcat(DataString_em2,",0000000000,");
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f007 ff97 	bl	800ef30 <stpcpy>
 8007002:	220d      	movs	r2, #13
 8007004:	0031      	movs	r1, r6
 8007006:	f008 f89f 	bl	800f148 <memcpy>
 800700a:	9910      	ldr	r1, [sp, #64]	; 0x40
    int c = 0;
 800700c:	2200      	movs	r2, #0
    while (*s)
 800700e:	780b      	ldrb	r3, [r1, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <TestRun+0x4f6>
        c ^= *s++;
 8007014:	3101      	adds	r1, #1
 8007016:	405a      	eors	r2, r3
    while (*s)
 8007018:	780b      	ldrb	r3, [r1, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1fa      	bne.n	8007014 <TestRun+0x4ec>
	sprintf(checksum, "%02x",nmea0183_checksum(DataString_em2));
 800701e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007020:	4648      	mov	r0, r9
 8007022:	f007 fe53 	bl	800eccc <siprintf>
	strcat(DataString_em2,checksum);
 8007026:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007028:	0028      	movs	r0, r5
 800702a:	f7f9 f86d 	bl	8000108 <strlen>
 800702e:	46ac      	mov	ip, r5
 8007030:	4649      	mov	r1, r9
 8007032:	4460      	add	r0, ip
 8007034:	f007 ff7c 	bl	800ef30 <stpcpy>
	strcat(DataString_em2,",*\0");
 8007038:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800703a:	2203      	movs	r2, #3
 800703c:	3134      	adds	r1, #52	; 0x34
 800703e:	f008 f883 	bl	800f148 <memcpy>
	sprintf(gpsDataRet2, "%0.6f%1s%0.6f%1s", GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD);
 8007042:	4643      	mov	r3, r8
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	f7fc f833 	bl	80030b0 <__aeabi_f2d>
 800704a:	4643      	mov	r3, r8
 800704c:	332b      	adds	r3, #43	; 0x2b
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	4643      	mov	r3, r8
 8007052:	0006      	movs	r6, r0
 8007054:	6858      	ldr	r0, [r3, #4]
 8007056:	000f      	movs	r7, r1
 8007058:	f7fc f82a 	bl	80030b0 <__aeabi_f2d>
 800705c:	4643      	mov	r3, r8
 800705e:	4dd4      	ldr	r5, [pc, #848]	; (80073b0 <TestRun+0x888>)
 8007060:	3328      	adds	r3, #40	; 0x28
 8007062:	0032      	movs	r2, r6
 8007064:	9002      	str	r0, [sp, #8]
 8007066:	9103      	str	r1, [sp, #12]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	0029      	movs	r1, r5
 800706c:	003b      	movs	r3, r7
 800706e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007070:	f007 fe2c 	bl	800eccc <siprintf>
	memset(data_LOGIN,0,100);
 8007074:	4dcf      	ldr	r5, [pc, #828]	; (80073b4 <TestRun+0x88c>)
 8007076:	2264      	movs	r2, #100	; 0x64
 8007078:	2100      	movs	r1, #0
 800707a:	0028      	movs	r0, r5
 800707c:	f007 fe92 	bl	800eda4 <memset>
	strcat(data_LOGIN,"$");
 8007080:	0028      	movs	r0, r5
 8007082:	f7f9 f841 	bl	8000108 <strlen>
 8007086:	2324      	movs	r3, #36	; 0x24
 8007088:	4698      	mov	r8, r3
 800708a:	542b      	strb	r3, [r5, r0]
 800708c:	3001      	adds	r0, #1
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 800708e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007090:	1828      	adds	r0, r5, r0
 8007092:	f007 ff4d 	bl	800ef30 <stpcpy>
 8007096:	262c      	movs	r6, #44	; 0x2c
	strcat(data_LOGIN,"$");
 8007098:	4643      	mov	r3, r8
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 800709a:	9914      	ldr	r1, [sp, #80]	; 0x50
	strcat(data_LOGIN,"$");
 800709c:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 800709e:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 80070a0:	3002      	adds	r0, #2
 80070a2:	f007 ff45 	bl	800ef30 <stpcpy>
	strcat(data_LOGIN,"$");
 80070a6:	4643      	mov	r3, r8
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 80070a8:	4fc3      	ldr	r7, [pc, #780]	; (80073b8 <TestRun+0x890>)
	strcat(data_LOGIN,"$");
 80070aa:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 80070ac:	0039      	movs	r1, r7
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 80070ae:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 80070b0:	3002      	adds	r0, #2
 80070b2:	f007 ff3d 	bl	800ef30 <stpcpy>
	strcat(data_LOGIN,"$");
 80070b6:	4643      	mov	r3, r8
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");strcat(data_LOGIN,gpsDataRet2);strcat(data_LOGIN,",");
 80070b8:	0039      	movs	r1, r7
	strcat(data_LOGIN,"$");
 80070ba:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 80070bc:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");strcat(data_LOGIN,gpsDataRet2);strcat(data_LOGIN,",");
 80070be:	3002      	adds	r0, #2
 80070c0:	f007 ff36 	bl	800ef30 <stpcpy>
 80070c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070c6:	7006      	strb	r6, [r0, #0]
 80070c8:	3001      	adds	r0, #1
 80070ca:	f007 ff31 	bl	800ef30 <stpcpy>
 80070ce:	2202      	movs	r2, #2
 80070d0:	49ba      	ldr	r1, [pc, #744]	; (80073bc <TestRun+0x894>)
 80070d2:	f008 f839 	bl	800f148 <memcpy>
 80070d6:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 80070d8:	2200      	movs	r2, #0
    while (*s)
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <TestRun+0x5c2>
 80070de:	0029      	movs	r1, r5
        c ^= *s++;
 80070e0:	3101      	adds	r1, #1
 80070e2:	405a      	eors	r2, r3
    while (*s)
 80070e4:	780b      	ldrb	r3, [r1, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1fa      	bne.n	80070e0 <TestRun+0x5b8>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 80070ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 80070ec:	4648      	mov	r0, r9
 80070ee:	f007 fded 	bl	800eccc <siprintf>
	strcat(data_LOGIN,checksum);
 80070f2:	0028      	movs	r0, r5
 80070f4:	f7f9 f808 	bl	8000108 <strlen>
 80070f8:	4649      	mov	r1, r9
 80070fa:	1828      	adds	r0, r5, r0
 80070fc:	f007 ff18 	bl	800ef30 <stpcpy>
	strcat(data_LOGIN,",*\0");
 8007100:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007102:	2203      	movs	r2, #3
 8007104:	3134      	adds	r1, #52	; 0x34
 8007106:	f008 f81f 	bl	800f148 <memcpy>
    memset(checksum,0,3);
 800710a:	2203      	movs	r2, #3
 800710c:	2100      	movs	r1, #0
 800710e:	4648      	mov	r0, r9
 8007110:	f007 fe48 	bl	800eda4 <memset>
    memset(DataString,0,300);
 8007114:	2296      	movs	r2, #150	; 0x96
 8007116:	4daa      	ldr	r5, [pc, #680]	; (80073c0 <TestRun+0x898>)
 8007118:	0052      	lsls	r2, r2, #1
 800711a:	2100      	movs	r1, #0
 800711c:	0028      	movs	r0, r5
 800711e:	f007 fe41 	bl	800eda4 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8007122:	0028      	movs	r0, r5
 8007124:	f7f8 fff0 	bl	8000108 <strlen>
 8007128:	49a6      	ldr	r1, [pc, #664]	; (80073c4 <TestRun+0x89c>)
 800712a:	1828      	adds	r0, r5, r0
 800712c:	262c      	movs	r6, #44	; 0x2c
 800712e:	f007 feff 	bl	800ef30 <stpcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8007132:	9914      	ldr	r1, [sp, #80]	; 0x50
	strcat(DataString,Head);strcat(DataString,",");
 8007134:	7006      	strb	r6, [r0, #0]
	strcat(DataString,IMEI);strcat(DataString,",");
 8007136:	3001      	adds	r0, #1
 8007138:	f007 fefa 	bl	800ef30 <stpcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 800713c:	9915      	ldr	r1, [sp, #84]	; 0x54
	strcat(DataString,IMEI);strcat(DataString,",");
 800713e:	7006      	strb	r6, [r0, #0]
	strcat(DataString,Regno);strcat(DataString,",");
 8007140:	3001      	adds	r0, #1
 8007142:	f007 fef5 	bl	800ef30 <stpcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8007146:	49a0      	ldr	r1, [pc, #640]	; (80073c8 <TestRun+0x8a0>)
	strcat(DataString,Regno);strcat(DataString,",");
 8007148:	7006      	strb	r6, [r0, #0]
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 800714a:	3001      	adds	r0, #1
 800714c:	f007 fef0 	bl	800ef30 <stpcpy>
	strcat(DataString,simop);strcat(DataString,",");
 8007150:	9917      	ldr	r1, [sp, #92]	; 0x5c
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8007152:	7006      	strb	r6, [r0, #0]
	strcat(DataString,simop);strcat(DataString,",");
 8007154:	3001      	adds	r0, #1
 8007156:	f007 feeb 	bl	800ef30 <stpcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 800715a:	499c      	ldr	r1, [pc, #624]	; (80073cc <TestRun+0x8a4>)
	strcat(DataString,simop);strcat(DataString,",");
 800715c:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 800715e:	3001      	adds	r0, #1
 8007160:	f007 fee6 	bl	800ef30 <stpcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8007164:	499a      	ldr	r1, [pc, #616]	; (80073d0 <TestRun+0x8a8>)
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8007166:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8007168:	3001      	adds	r0, #1
 800716a:	f007 fee1 	bl	800ef30 <stpcpy>
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 800716e:	4999      	ldr	r1, [pc, #612]	; (80073d4 <TestRun+0x8ac>)
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8007170:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8007172:	3001      	adds	r0, #1
 8007174:	f007 ffd5 	bl	800f122 <strcpy>
 8007178:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 800717a:	2200      	movs	r2, #0
    while (*s)
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <TestRun+0x664>
 8007180:	0029      	movs	r1, r5
        c ^= *s++;
 8007182:	3101      	adds	r1, #1
 8007184:	405a      	eors	r2, r3
    while (*s)
 8007186:	780b      	ldrb	r3, [r1, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1fa      	bne.n	8007182 <TestRun+0x65a>
    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 800718c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800718e:	4648      	mov	r0, r9
 8007190:	f007 fd9c 	bl	800eccc <siprintf>
    strcat(DataString,checksum);
 8007194:	0028      	movs	r0, r5
 8007196:	f7f8 ffb7 	bl	8000108 <strlen>
 800719a:	4649      	mov	r1, r9
 800719c:	1828      	adds	r0, r5, r0
 800719e:	f007 fec7 	bl	800ef30 <stpcpy>
    strcat(DataString,",*\0");
 80071a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80071a4:	2203      	movs	r2, #3
 80071a6:	3134      	adds	r1, #52	; 0x34
 80071a8:	f007 ffce 	bl	800f148 <memcpy>
    if(GSMSignal > 5) 		{
 80071ac:	4b8a      	ldr	r3, [pc, #552]	; (80073d8 <TestRun+0x8b0>)
 80071ae:	498b      	ldr	r1, [pc, #556]	; (80073dc <TestRun+0x8b4>)
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	f7f9 f99f 	bl	80004f4 <__aeabi_fcmpgt>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d122      	bne.n	8007200 <TestRun+0x6d8>
    	if (debug==1){
 80071ba:	4b89      	ldr	r3, [pc, #548]	; (80073e0 <TestRun+0x8b8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d100      	bne.n	80071c4 <TestRun+0x69c>
 80071c2:	e0d9      	b.n	8007378 <TestRun+0x850>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 80071c4:	0028      	movs	r0, r5
 80071c6:	f7f8 ff9f 	bl	8000108 <strlen>
 80071ca:	3001      	adds	r0, #1
 80071cc:	b282      	uxth	r2, r0
	if (len<255){
 80071ce:	2afe      	cmp	r2, #254	; 0xfe
 80071d0:	d800      	bhi.n	80071d4 <TestRun+0x6ac>
 80071d2:	e0b8      	b.n	8007346 <TestRun+0x81e>
    	RunCnt++;
 80071d4:	4a83      	ldr	r2, [pc, #524]	; (80073e4 <TestRun+0x8bc>)
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	3301      	adds	r3, #1
    	if(RunCnt>10){
 80071da:	2b0a      	cmp	r3, #10
 80071dc:	dc66      	bgt.n	80072ac <TestRun+0x784>
    		RunCnt=0;
 80071de:	6013      	str	r3, [r2, #0]
 	seqNo=seqNo+1;
 80071e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071e2:	2105      	movs	r1, #5
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	3001      	adds	r0, #1
 80071e8:	6018      	str	r0, [r3, #0]
 80071ea:	f7f9 f919 	bl	8000420 <__aeabi_idivmod>
	if(seqNo%5==0) {ResetTCP(0);ResetTCP(1);}
 80071ee:	2900      	cmp	r1, #0
 80071f0:	d05e      	beq.n	80072b0 <TestRun+0x788>
}
 80071f2:	b01d      	add	sp, #116	; 0x74
 80071f4:	bcf0      	pop	{r4, r5, r6, r7}
 80071f6:	46bb      	mov	fp, r7
 80071f8:	46b2      	mov	sl, r6
 80071fa:	46a9      	mov	r9, r5
 80071fc:	46a0      	mov	r8, r4
 80071fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	while(ReadQdata()>0){
 8007200:	f7fe f8d4 	bl	80053ac <ReadQdata>
 8007204:	2800      	cmp	r0, #0
 8007206:	dcfb      	bgt.n	8007200 <TestRun+0x6d8>
 8007208:	f000 fdfa 	bl	8007e00 <HAL_GetTick>
     	ProcessTCPAll(DataString,0);
 800720c:	2100      	movs	r1, #0
 800720e:	0006      	movs	r6, r0
 8007210:	0028      	movs	r0, r5
 8007212:	f7fd f943 	bl	800449c <ProcessTCPAll>
 8007216:	f000 fdf3 	bl	8007e00 <HAL_GetTick>
    	sprintf(DatPrint, "**send1 loop %d ",tic()-t222);Debug_Tx(DatPrint);
 800721a:	4973      	ldr	r1, [pc, #460]	; (80073e8 <TestRun+0x8c0>)
 800721c:	1b82      	subs	r2, r0, r6
 800721e:	4658      	mov	r0, fp
 8007220:	f007 fd54 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007224:	4653      	mov	r3, sl
 8007226:	220c      	movs	r2, #12
 8007228:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800722a:	4658      	mov	r0, fp
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800722c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800722e:	f7f8 ff6b 	bl	8000108 <strlen>
 8007232:	4659      	mov	r1, fp
 8007234:	b282      	uxth	r2, r0
 8007236:	4b6d      	ldr	r3, [pc, #436]	; (80073ec <TestRun+0x8c4>)
 8007238:	4650      	mov	r0, sl
 800723a:	f003 fedb 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800723e:	4b6c      	ldr	r3, [pc, #432]	; (80073f0 <TestRun+0x8c8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007240:	2202      	movs	r2, #2
 8007242:	0021      	movs	r1, r4
	char newline[2] = "\r\n";
 8007244:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007246:	4650      	mov	r0, sl
 8007248:	230a      	movs	r3, #10
 800724a:	f003 fed3 	bl	800aff4 <HAL_UART_Transmit>
 800724e:	f000 fdd7 	bl	8007e00 <HAL_GetTick>
     	if(EmergencyStateON==1 && EmergencyStateOFF==-1){
 8007252:	4e68      	ldr	r6, [pc, #416]	; (80073f4 <TestRun+0x8cc>)
 8007254:	0005      	movs	r5, r0
 8007256:	6833      	ldr	r3, [r6, #0]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d06a      	beq.n	8007332 <TestRun+0x80a>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 800725c:	3301      	adds	r3, #1
 800725e:	d05d      	beq.n	800731c <TestRun+0x7f4>
 8007260:	f000 fdce 	bl	8007e00 <HAL_GetTick>
    	sprintf(DatPrint, "**sendIm loop %d ",tic()-t222);Debug_Tx(DatPrint);
 8007264:	4964      	ldr	r1, [pc, #400]	; (80073f8 <TestRun+0x8d0>)
 8007266:	1b42      	subs	r2, r0, r5
 8007268:	4658      	mov	r0, fp
 800726a:	f007 fd2f 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800726e:	4653      	mov	r3, sl
 8007270:	220c      	movs	r2, #12
 8007272:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007274:	4658      	mov	r0, fp
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007276:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007278:	f7f8 ff46 	bl	8000108 <strlen>
 800727c:	4659      	mov	r1, fp
 800727e:	b282      	uxth	r2, r0
 8007280:	4b5a      	ldr	r3, [pc, #360]	; (80073ec <TestRun+0x8c4>)
 8007282:	4650      	mov	r0, sl
 8007284:	f003 feb6 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8007288:	4b59      	ldr	r3, [pc, #356]	; (80073f0 <TestRun+0x8c8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800728a:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 800728c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800728e:	0021      	movs	r1, r4
 8007290:	230a      	movs	r3, #10
 8007292:	4650      	mov	r0, sl
 8007294:	f003 feae 	bl	800aff4 <HAL_UART_Transmit>
     	RunCnt=0;
 8007298:	2200      	movs	r2, #0
 800729a:	4b52      	ldr	r3, [pc, #328]	; (80073e4 <TestRun+0x8bc>)
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e79f      	b.n	80071e0 <TestRun+0x6b8>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 80072a0:	2200      	movs	r2, #0
 80072a2:	2101      	movs	r1, #1
 80072a4:	4855      	ldr	r0, [pc, #340]	; (80073fc <TestRun+0x8d4>)
 80072a6:	f001 fc79 	bl	8008b9c <HAL_GPIO_WritePin>
	}
}
 80072aa:	e4ce      	b.n	8006c4a <TestRun+0x122>
    		RunCnt=0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	e796      	b.n	80071de <TestRun+0x6b6>
	while ((strlen(GSMData) > 0) && (i> 0))
 80072b0:	4c53      	ldr	r4, [pc, #332]	; (8007400 <TestRun+0x8d8>)
 80072b2:	250a      	movs	r5, #10
 80072b4:	7823      	ldrb	r3, [r4, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d103      	bne.n	80072c2 <TestRun+0x79a>
 80072ba:	e00e      	b.n	80072da <TestRun+0x7b2>
 80072bc:	3d01      	subs	r5, #1
 80072be:	2d00      	cmp	r5, #0
 80072c0:	d00b      	beq.n	80072da <TestRun+0x7b2>
		memset(GSMData, 0, 4500);
 80072c2:	2100      	movs	r1, #0
 80072c4:	4a4f      	ldr	r2, [pc, #316]	; (8007404 <TestRun+0x8dc>)
 80072c6:	0020      	movs	r0, r4
 80072c8:	f007 fd6c 	bl	800eda4 <memset>
		HAL_Delay(300);
 80072cc:	2096      	movs	r0, #150	; 0x96
 80072ce:	0040      	lsls	r0, r0, #1
 80072d0:	f000 fd9c 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 80072d4:	7823      	ldrb	r3, [r4, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <TestRun+0x794>
	StopTCPConnection(n);
 80072da:	2000      	movs	r0, #0
 80072dc:	f7fc fc96 	bl	8003c0c <StopTCPConnection>
	StartTCPConnection(n);
 80072e0:	2000      	movs	r0, #0
 80072e2:	f7fc fbdf 	bl	8003aa4 <StartTCPConnection>
	while ((strlen(GSMData) > 0) && (i> 0))
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	250a      	movs	r5, #10
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <TestRun+0x7ce>
 80072ee:	e00e      	b.n	800730e <TestRun+0x7e6>
 80072f0:	3d01      	subs	r5, #1
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	d00b      	beq.n	800730e <TestRun+0x7e6>
		memset(GSMData, 0, 4500);
 80072f6:	2100      	movs	r1, #0
 80072f8:	4a42      	ldr	r2, [pc, #264]	; (8007404 <TestRun+0x8dc>)
 80072fa:	0020      	movs	r0, r4
 80072fc:	f007 fd52 	bl	800eda4 <memset>
		HAL_Delay(300);
 8007300:	2096      	movs	r0, #150	; 0x96
 8007302:	0040      	lsls	r0, r0, #1
 8007304:	f000 fd82 	bl	8007e0c <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8007308:	7823      	ldrb	r3, [r4, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <TestRun+0x7c8>
	StopTCPConnection(n);
 800730e:	2001      	movs	r0, #1
 8007310:	f7fc fc7c 	bl	8003c0c <StopTCPConnection>
	StartTCPConnection(n);
 8007314:	2001      	movs	r0, #1
 8007316:	f7fc fbc5 	bl	8003aa4 <StartTCPConnection>
}
 800731a:	e76a      	b.n	80071f2 <TestRun+0x6ca>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 800731c:	4e3a      	ldr	r6, [pc, #232]	; (8007408 <TestRun+0x8e0>)
 800731e:	6833      	ldr	r3, [r6, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d19d      	bne.n	8007260 <TestRun+0x738>
         	ProcessTCPAll(DataString_em2,1);
 8007324:	2101      	movs	r1, #1
 8007326:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007328:	f7fd f8b8 	bl	800449c <ProcessTCPAll>
         	EmergencyStateOFF=0;
 800732c:	2300      	movs	r3, #0
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	e796      	b.n	8007260 <TestRun+0x738>
     	if(EmergencyStateON==1 && EmergencyStateOFF==-1){
 8007332:	4b35      	ldr	r3, [pc, #212]	; (8007408 <TestRun+0x8e0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3301      	adds	r3, #1
 8007338:	d192      	bne.n	8007260 <TestRun+0x738>
         	ProcessTCPAll(DataString_em1,1);
 800733a:	2101      	movs	r1, #1
 800733c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800733e:	f7fd f8ad 	bl	800449c <ProcessTCPAll>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 8007342:	6833      	ldr	r3, [r6, #0]
 8007344:	e78a      	b.n	800725c <TestRun+0x734>
		SPI_flash_Page_Program(WrtAdd, data,len);
 8007346:	4c31      	ldr	r4, [pc, #196]	; (800740c <TestRun+0x8e4>)
 8007348:	0029      	movs	r1, r5
 800734a:	0020      	movs	r0, r4
 800734c:	f7fd ff8c 	bl	8005268 <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8007350:	7823      	ldrb	r3, [r4, #0]
 8007352:	7862      	ldrb	r2, [r4, #1]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	189b      	adds	r3, r3, r2
 8007358:	78a2      	ldrb	r2, [r4, #2]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	189b      	adds	r3, r3, r2
 800735e:	3301      	adds	r3, #1
 8007360:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 8007362:	141a      	asrs	r2, r3, #16
 8007364:	7022      	strb	r2, [r4, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8007366:	121a      	asrs	r2, r3, #8
 8007368:	7062      	strb	r2, [r4, #1]
    	RunCnt++;
 800736a:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <TestRun+0x8bc>)
	WrtAdd[2]=(addi)%256;
 800736c:	70a3      	strb	r3, [r4, #2]
 800736e:	6813      	ldr	r3, [r2, #0]
 8007370:	3301      	adds	r3, #1
    	if(RunCnt>10){
 8007372:	2b0a      	cmp	r3, #10
 8007374:	dc9a      	bgt.n	80072ac <TestRun+0x784>
 8007376:	e732      	b.n	80071de <TestRun+0x6b6>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007378:	4653      	mov	r3, sl
 800737a:	220c      	movs	r2, #12
 800737c:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800737e:	4924      	ldr	r1, [pc, #144]	; (8007410 <TestRun+0x8e8>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007380:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007382:	4650      	mov	r0, sl
 8007384:	4b19      	ldr	r3, [pc, #100]	; (80073ec <TestRun+0x8c4>)
 8007386:	321b      	adds	r2, #27
 8007388:	f003 fe34 	bl	800aff4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800738c:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <TestRun+0x8c8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800738e:	2202      	movs	r2, #2
 8007390:	0021      	movs	r1, r4
	char newline[2] = "\r\n";
 8007392:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007394:	4650      	mov	r0, sl
 8007396:	230a      	movs	r3, #10
 8007398:	f003 fe2c 	bl	800aff4 <HAL_UART_Transmit>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 800739c:	0028      	movs	r0, r5
 800739e:	f7f8 feb3 	bl	8000108 <strlen>
 80073a2:	3001      	adds	r0, #1
 80073a4:	b282      	uxth	r2, r0
	if (len<255){
 80073a6:	2afe      	cmp	r2, #254	; 0xfe
 80073a8:	d900      	bls.n	80073ac <TestRun+0x884>
 80073aa:	e713      	b.n	80071d4 <TestRun+0x6ac>
 80073ac:	e7cb      	b.n	8007346 <TestRun+0x81e>
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	08013920 	.word	0x08013920
 80073b4:	2000427c 	.word	0x2000427c
 80073b8:	200000b8 	.word	0x200000b8
 80073bc:	08012e44 	.word	0x08012e44
 80073c0:	20000420 	.word	0x20000420
 80073c4:	20001fa4 	.word	0x20001fa4
 80073c8:	200046e0 	.word	0x200046e0
 80073cc:	20004128 	.word	0x20004128
 80073d0:	20004778 	.word	0x20004778
 80073d4:	20000698 	.word	0x20000698
 80073d8:	20001d98 	.word	0x20001d98
 80073dc:	40a00000 	.word	0x40a00000
 80073e0:	200000c4 	.word	0x200000c4
 80073e4:	20004108 	.word	0x20004108
 80073e8:	08013934 	.word	0x08013934
 80073ec:	00001388 	.word	0x00001388
 80073f0:	00000a0d 	.word	0x00000a0d
 80073f4:	20000098 	.word	0x20000098
 80073f8:	08013948 	.word	0x08013948
 80073fc:	50000c00 	.word	0x50000c00
 8007400:	20000754 	.word	0x20000754
 8007404:	00001194 	.word	0x00001194
 8007408:	200006c4 	.word	0x200006c4
 800740c:	200000c0 	.word	0x200000c0
 8007410:	0801395c 	.word	0x0801395c

08007414 <StartDefaultTask>:
{
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	46de      	mov	lr, fp
 8007418:	4657      	mov	r7, sl
 800741a:	464e      	mov	r6, r9
 800741c:	4645      	mov	r5, r8
 800741e:	b5e0      	push	{r5, r6, r7, lr}
 8007420:	b089      	sub	sp, #36	; 0x24
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8007422:	ab02      	add	r3, sp, #8
 8007424:	469c      	mov	ip, r3
 8007426:	27fa      	movs	r7, #250	; 0xfa
 8007428:	2613      	movs	r6, #19
 800742a:	2501      	movs	r5, #1
 800742c:	4cae      	ldr	r4, [pc, #696]	; (80076e8 <StartDefaultTask+0x2d4>)
 800742e:	4466      	add	r6, ip
 8007430:	00bf      	lsls	r7, r7, #2
 8007432:	2301      	movs	r3, #1
 8007434:	9600      	str	r6, [sp, #0]
 8007436:	2275      	movs	r2, #117	; 0x75
 8007438:	21d0      	movs	r1, #208	; 0xd0
 800743a:	0020      	movs	r0, r4
 800743c:	9702      	str	r7, [sp, #8]
 800743e:	9501      	str	r5, [sp, #4]
 8007440:	f001 fe2c 	bl	800909c <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8007444:	7833      	ldrb	r3, [r6, #0]
		Data = 0;
 8007446:	ae07      	add	r6, sp, #28
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8007448:	2b68      	cmp	r3, #104	; 0x68
 800744a:	d100      	bne.n	800744e <StartDefaultTask+0x3a>
 800744c:	e11a      	b.n	8007684 <StartDefaultTask+0x270>
		Data = 0;
 800744e:	2300      	movs	r3, #0
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8007450:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 8007452:	7033      	strb	r3, [r6, #0]
 8007454:	4698      	mov	r8, r3
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8007456:	21d0      	movs	r1, #208	; 0xd0
 8007458:	3301      	adds	r3, #1
 800745a:	0020      	movs	r0, r4
 800745c:	9702      	str	r7, [sp, #8]
 800745e:	9501      	str	r5, [sp, #4]
 8007460:	9600      	str	r6, [sp, #0]
 8007462:	f001 fce1 	bl	8008e28 <HAL_I2C_Mem_Write>
				Data = 0x07;
 8007466:	2307      	movs	r3, #7
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8007468:	2219      	movs	r2, #25
				Data = 0x07;
 800746a:	7033      	strb	r3, [r6, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800746c:	21d0      	movs	r1, #208	; 0xd0
 800746e:	3b06      	subs	r3, #6
 8007470:	0020      	movs	r0, r4
 8007472:	9702      	str	r7, [sp, #8]
 8007474:	9501      	str	r5, [sp, #4]
 8007476:	9600      	str	r6, [sp, #0]
 8007478:	f001 fcd6 	bl	8008e28 <HAL_I2C_Mem_Write>
				Data = 0x00;
 800747c:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800747e:	221c      	movs	r2, #28
				Data = 0x00;
 8007480:	7033      	strb	r3, [r6, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8007482:	21d0      	movs	r1, #208	; 0xd0
 8007484:	3301      	adds	r3, #1
 8007486:	0020      	movs	r0, r4
 8007488:	9702      	str	r7, [sp, #8]
 800748a:	9501      	str	r5, [sp, #4]
 800748c:	9600      	str	r6, [sp, #0]
 800748e:	f001 fccb 	bl	8008e28 <HAL_I2C_Mem_Write>
				Data = 0x00;
 8007492:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8007494:	221b      	movs	r2, #27
				Data = 0x00;
 8007496:	7033      	strb	r3, [r6, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8007498:	21d0      	movs	r1, #208	; 0xd0
 800749a:	0020      	movs	r0, r4
 800749c:	9702      	str	r7, [sp, #8]
 800749e:	9501      	str	r5, [sp, #4]
 80074a0:	9600      	str	r6, [sp, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	f001 fcc0 	bl	8008e28 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 80074a8:	4890      	ldr	r0, [pc, #576]	; (80076ec <StartDefaultTask+0x2d8>)
 80074aa:	f7fb feed 	bl	8003288 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 80074ae:	2200      	movs	r2, #0

static void SET_GPS_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80074b0:	2180      	movs	r1, #128	; 0x80
 80074b2:	20a0      	movs	r0, #160	; 0xa0
 80074b4:	4b8e      	ldr	r3, [pc, #568]	; (80076f0 <StartDefaultTask+0x2dc>)
 80074b6:	0209      	lsls	r1, r1, #8
 80074b8:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 80074ba:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 80074bc:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 80074be:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 80074c0:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 80074c2:	615a      	str	r2, [r3, #20]
 80074c4:	05c0      	lsls	r0, r0, #23
 80074c6:	2201      	movs	r2, #1
 80074c8:	f001 fb68 	bl	8008b9c <HAL_GPIO_WritePin>
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80074cc:	2201      	movs	r2, #1
 80074ce:	2140      	movs	r1, #64	; 0x40
 80074d0:	4888      	ldr	r0, [pc, #544]	; (80076f4 <StartDefaultTask+0x2e0>)
 80074d2:	f001 fb63 	bl	8008b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80074d6:	2201      	movs	r2, #1
 80074d8:	2180      	movs	r1, #128	; 0x80
 80074da:	4886      	ldr	r0, [pc, #536]	; (80076f4 <StartDefaultTask+0x2e0>)
 80074dc:	f001 fb5e 	bl	8008b9c <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 80074e0:	2204      	movs	r2, #4
 80074e2:	4985      	ldr	r1, [pc, #532]	; (80076f8 <StartDefaultTask+0x2e4>)
 80074e4:	4885      	ldr	r0, [pc, #532]	; (80076fc <StartDefaultTask+0x2e8>)
 80074e6:	f000 ffcb 	bl	8008480 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 80074ea:	2201      	movs	r2, #1
 80074ec:	2120      	movs	r1, #32
 80074ee:	4884      	ldr	r0, [pc, #528]	; (8007700 <StartDefaultTask+0x2ec>)
 80074f0:	f001 fb54 	bl	8008b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80074f4:	2180      	movs	r1, #128	; 0x80
 80074f6:	20a0      	movs	r0, #160	; 0xa0
 80074f8:	2201      	movs	r2, #1
 80074fa:	0209      	lsls	r1, r1, #8
 80074fc:	05c0      	lsls	r0, r0, #23
 80074fe:	f001 fb4d 	bl	8008b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8007502:	2201      	movs	r2, #1
 8007504:	2140      	movs	r1, #64	; 0x40
 8007506:	487b      	ldr	r0, [pc, #492]	; (80076f4 <StartDefaultTask+0x2e0>)
 8007508:	f001 fb48 	bl	8008b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800750c:	2201      	movs	r2, #1
 800750e:	2180      	movs	r1, #128	; 0x80
 8007510:	4878      	ldr	r0, [pc, #480]	; (80076f4 <StartDefaultTask+0x2e0>)
 8007512:	f001 fb43 	bl	8008b9c <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 8007516:	2200      	movs	r2, #0
 8007518:	4b7a      	ldr	r3, [pc, #488]	; (8007704 <StartDefaultTask+0x2f0>)
 memset((char*)gpsData,0,1000);
 800751a:	2100      	movs	r1, #0
GSMBuff[0]=0;
 800751c:	701a      	strb	r2, [r3, #0]
 memset((char*)gpsData,0,1000);
 800751e:	22fa      	movs	r2, #250	; 0xfa
 8007520:	4879      	ldr	r0, [pc, #484]	; (8007708 <StartDefaultTask+0x2f4>)
 8007522:	0092      	lsls	r2, r2, #2
 8007524:	f007 fc3e 	bl	800eda4 <memset>
 restartGSMuart();
 8007528:	f7fe ff5e 	bl	80063e8 <restartGSMuart>
initGPS();
 800752c:	f7fe f952 	bl	80057d4 <initGPS>
HAL_Delay(4000);
 8007530:	20fa      	movs	r0, #250	; 0xfa
 8007532:	0100      	lsls	r0, r0, #4
 8007534:	f000 fc6a 	bl	8007e0c <HAL_Delay>
initFirstRun();
 8007538:	f7fe ff74 	bl	8006424 <initFirstRun>
InitMEMQ();
 800753c:	f7fd ffce 	bl	80054dc <InitMEMQ>
HAL_Delay(10000);
 8007540:	4872      	ldr	r0, [pc, #456]	; (800770c <StartDefaultTask+0x2f8>)
 8007542:	f000 fc63 	bl	8007e0c <HAL_Delay>
InitGSM();
 8007546:	f7fd fa2b 	bl	80049a0 <InitGSM>
TestMEM();
 800754a:	f7fe f9e1 	bl	8005910 <TestMEM>
 memset(IMEI,0,20);
 800754e:	4c70      	ldr	r4, [pc, #448]	; (8007710 <StartDefaultTask+0x2fc>)
 8007550:	2214      	movs	r2, #20
 8007552:	2100      	movs	r1, #0
 8007554:	0020      	movs	r0, r4
 8007556:	f007 fc25 	bl	800eda4 <memset>
 memset(Regno,0,20);
 800755a:	4f6e      	ldr	r7, [pc, #440]	; (8007714 <StartDefaultTask+0x300>)
 800755c:	2214      	movs	r2, #20
 800755e:	2100      	movs	r1, #0
 8007560:	0038      	movs	r0, r7
 8007562:	f007 fc1f 	bl	800eda4 <memset>
 memset(simop,0,20);
 8007566:	4d6c      	ldr	r5, [pc, #432]	; (8007718 <StartDefaultTask+0x304>)
 8007568:	2214      	movs	r2, #20
 800756a:	2100      	movs	r1, #0
 800756c:	0028      	movs	r0, r5
 800756e:	f007 fc19 	bl	800eda4 <memset>
strcpy(IMEI,GSMIMEI());
 8007572:	f7fc fa77 	bl	8003a64 <GSMIMEI>
 8007576:	0001      	movs	r1, r0
 8007578:	0020      	movs	r0, r4
 800757a:	f007 fdd2 	bl	800f122 <strcpy>
 strcpy(Regno,readRegNo());
 800757e:	f7fe f8d3 	bl	8005728 <readRegNo>
 8007582:	0001      	movs	r1, r0
 8007584:	0038      	movs	r0, r7
 8007586:	f007 fdcc 	bl	800f122 <strcpy>
 strcpy(simop, GSMSimOperator());
 800758a:	f7fc fa4b 	bl	8003a24 <GSMSimOperator>
 800758e:	0001      	movs	r1, r0
 8007590:	0028      	movs	r0, r5
 8007592:	f007 fdc6 	bl	800f122 <strcpy>
 Debug_Tx("IMEI:");
 8007596:	4861      	ldr	r0, [pc, #388]	; (800771c <StartDefaultTask+0x308>)
 8007598:	f7fb fe76 	bl	8003288 <Debug_Tx>
	  Debug_Tx(IMEI);
 800759c:	0020      	movs	r0, r4
 800759e:	f7fb fe73 	bl	8003288 <Debug_Tx>
 80075a2:	f000 fc2d 	bl	8007e00 <HAL_GetTick>
	  int t111=0;
 80075a6:	4b5e      	ldr	r3, [pc, #376]	; (8007720 <StartDefaultTask+0x30c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80075a8:	4680      	mov	r8, r0
 80075aa:	469b      	mov	fp, r3
 80075ac:	4b5d      	ldr	r3, [pc, #372]	; (8007724 <StartDefaultTask+0x310>)
 80075ae:	4d5e      	ldr	r5, [pc, #376]	; (8007728 <StartDefaultTask+0x314>)
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	4b5e      	ldr	r3, [pc, #376]	; (800772c <StartDefaultTask+0x318>)
 80075b4:	4c5e      	ldr	r4, [pc, #376]	; (8007730 <StartDefaultTask+0x31c>)
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	230c      	movs	r3, #12
 80075ba:	469a      	mov	sl, r3
 80075bc:	f000 fc20 	bl	8007e00 <HAL_GetTick>
		rr=tic()-RunTime;
 80075c0:	4643      	mov	r3, r8
 80075c2:	1ac7      	subs	r7, r0, r3
	while(rr<5000){
 80075c4:	4b5b      	ldr	r3, [pc, #364]	; (8007734 <StartDefaultTask+0x320>)
 80075c6:	429f      	cmp	r7, r3
 80075c8:	ddf8      	ble.n	80075bc <StartDefaultTask+0x1a8>
 80075ca:	f000 fc19 	bl	8007e00 <HAL_GetTick>
		sprintf(DatPrint, "***************************************Time difference %d ",rr);
 80075ce:	4659      	mov	r1, fp
 80075d0:	003a      	movs	r2, r7
 80075d2:	4680      	mov	r8, r0
 80075d4:	0028      	movs	r0, r5
 80075d6:	f007 fb79 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80075da:	4652      	mov	r2, sl
 80075dc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80075de:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80075e0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80075e2:	f7f8 fd91 	bl	8000108 <strlen>
	char newline[2] = "\r\n";
 80075e6:	4f54      	ldr	r7, [pc, #336]	; (8007738 <StartDefaultTask+0x324>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80075e8:	0029      	movs	r1, r5
 80075ea:	b282      	uxth	r2, r0
 80075ec:	4b53      	ldr	r3, [pc, #332]	; (800773c <StartDefaultTask+0x328>)
 80075ee:	0020      	movs	r0, r4
 80075f0:	f003 fd00 	bl	800aff4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80075f4:	0031      	movs	r1, r6
 80075f6:	230a      	movs	r3, #10
 80075f8:	2202      	movs	r2, #2
 80075fa:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 80075fc:	8037      	strh	r7, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80075fe:	f003 fcf9 	bl	800aff4 <HAL_UART_Transmit>
 8007602:	f000 fbfd 	bl	8007e00 <HAL_GetTick>
 8007606:	4681      	mov	r9, r0
  GSMSigQuality();
 8007608:	f7fd fba0 	bl	8004d4c <GSMSigQuality>
 800760c:	f000 fbf8 	bl	8007e00 <HAL_GetTick>
  sprintf(DatPrint, "**sigQ %d ",tic()-t111);
 8007610:	464b      	mov	r3, r9
 8007612:	9904      	ldr	r1, [sp, #16]
 8007614:	1ac2      	subs	r2, r0, r3
 8007616:	0028      	movs	r0, r5
 8007618:	f007 fb58 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800761c:	4652      	mov	r2, sl
 800761e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007620:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007622:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007624:	f7f8 fd70 	bl	8000108 <strlen>
 8007628:	0029      	movs	r1, r5
 800762a:	b282      	uxth	r2, r0
 800762c:	4b43      	ldr	r3, [pc, #268]	; (800773c <StartDefaultTask+0x328>)
 800762e:	0020      	movs	r0, r4
 8007630:	f003 fce0 	bl	800aff4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007634:	0031      	movs	r1, r6
 8007636:	230a      	movs	r3, #10
 8007638:	2202      	movs	r2, #2
 800763a:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 800763c:	8037      	strh	r7, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800763e:	f003 fcd9 	bl	800aff4 <HAL_UART_Transmit>
 8007642:	f000 fbdd 	bl	8007e00 <HAL_GetTick>
 8007646:	4681      	mov	r9, r0
 TestRun();
 8007648:	f7ff fa6e 	bl	8006b28 <TestRun>
 800764c:	f000 fbd8 	bl	8007e00 <HAL_GetTick>
 sprintf(DatPrint, "**testRun %d ",tic()-t111);Debug_Tx(DatPrint);
 8007650:	464b      	mov	r3, r9
 8007652:	9905      	ldr	r1, [sp, #20]
 8007654:	1ac2      	subs	r2, r0, r3
 8007656:	0028      	movs	r0, r5
 8007658:	f007 fb38 	bl	800eccc <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800765c:	4652      	mov	r2, sl
 800765e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007660:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007662:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007664:	f7f8 fd50 	bl	8000108 <strlen>
 8007668:	0029      	movs	r1, r5
 800766a:	b282      	uxth	r2, r0
 800766c:	4b33      	ldr	r3, [pc, #204]	; (800773c <StartDefaultTask+0x328>)
 800766e:	0020      	movs	r0, r4
 8007670:	f003 fcc0 	bl	800aff4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007674:	230a      	movs	r3, #10
 8007676:	2202      	movs	r2, #2
 8007678:	0031      	movs	r1, r6
 800767a:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 800767c:	8037      	strh	r7, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800767e:	f003 fcb9 	bl	800aff4 <HAL_UART_Transmit>
}
 8007682:	e79b      	b.n	80075bc <StartDefaultTask+0x1a8>
		Data = 0;
 8007684:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8007686:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 8007688:	7033      	strb	r3, [r6, #0]
 800768a:	4698      	mov	r8, r3
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800768c:	21d0      	movs	r1, #208	; 0xd0
 800768e:	002b      	movs	r3, r5
 8007690:	0020      	movs	r0, r4
 8007692:	9702      	str	r7, [sp, #8]
 8007694:	9501      	str	r5, [sp, #4]
 8007696:	9600      	str	r6, [sp, #0]
 8007698:	f001 fbc6 	bl	8008e28 <HAL_I2C_Mem_Write>
		Data = 0x07;
 800769c:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800769e:	2219      	movs	r2, #25
		Data = 0x07;
 80076a0:	7033      	strb	r3, [r6, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80076a2:	21d0      	movs	r1, #208	; 0xd0
 80076a4:	002b      	movs	r3, r5
 80076a6:	0020      	movs	r0, r4
 80076a8:	9702      	str	r7, [sp, #8]
 80076aa:	9501      	str	r5, [sp, #4]
 80076ac:	9600      	str	r6, [sp, #0]
 80076ae:	f001 fbbb 	bl	8008e28 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80076b2:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80076b4:	221c      	movs	r2, #28
		Data = 0x00;
 80076b6:	7033      	strb	r3, [r6, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80076b8:	21d0      	movs	r1, #208	; 0xd0
 80076ba:	002b      	movs	r3, r5
 80076bc:	0020      	movs	r0, r4
 80076be:	9702      	str	r7, [sp, #8]
 80076c0:	9501      	str	r5, [sp, #4]
 80076c2:	9600      	str	r6, [sp, #0]
 80076c4:	f001 fbb0 	bl	8008e28 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80076c8:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80076ca:	221b      	movs	r2, #27
		Data = 0x00;
 80076cc:	7033      	strb	r3, [r6, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80076ce:	21d0      	movs	r1, #208	; 0xd0
 80076d0:	002b      	movs	r3, r5
 80076d2:	0020      	movs	r0, r4
 80076d4:	9702      	str	r7, [sp, #8]
 80076d6:	9501      	str	r5, [sp, #4]
 80076d8:	9600      	str	r6, [sp, #0]
 80076da:	f001 fba5 	bl	8008e28 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 80076de:	4818      	ldr	r0, [pc, #96]	; (8007740 <StartDefaultTask+0x32c>)
 80076e0:	f7fb fdd2 	bl	8003288 <Debug_Tx>
 80076e4:	e6e3      	b.n	80074ae <StartDefaultTask+0x9a>
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	2000499c 	.word	0x2000499c
 80076ec:	08013998 	.word	0x08013998
 80076f0:	20000324 	.word	0x20000324
 80076f4:	50000800 	.word	0x50000800
 80076f8:	20000340 	.word	0x20000340
 80076fc:	200047c8 	.word	0x200047c8
 8007700:	50000400 	.word	0x50000400
 8007704:	20000750 	.word	0x20000750
 8007708:	200042f8 	.word	0x200042f8
 800770c:	00002710 	.word	0x00002710
 8007710:	20002010 	.word	0x20002010
 8007714:	200040f4 	.word	0x200040f4
 8007718:	20004c98 	.word	0x20004c98
 800771c:	080139a8 	.word	0x080139a8
 8007720:	080139b0 	.word	0x080139b0
 8007724:	080139ec 	.word	0x080139ec
 8007728:	20000394 	.word	0x20000394
 800772c:	080139f8 	.word	0x080139f8
 8007730:	20004bc8 	.word	0x20004bc8
 8007734:	00001387 	.word	0x00001387
 8007738:	00000a0d 	.word	0x00000a0d
 800773c:	00001388 	.word	0x00001388
 8007740:	08013984 	.word	0x08013984

08007744 <Error_Handler>:
 8007744:	b672      	cpsid	i
  while (1)
 8007746:	e7fe      	b.n	8007746 <Error_Handler+0x2>

08007748 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007748:	2201      	movs	r2, #1
 800774a:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <HAL_MspInit+0x40>)
{
 800774c:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800774e:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007750:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007752:	4311      	orrs	r1, r2
 8007754:	6419      	str	r1, [r3, #64]	; 0x40
 8007756:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8007758:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800775a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800775c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800775e:	9200      	str	r2, [sp, #0]
 8007760:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007764:	0549      	lsls	r1, r1, #21
 8007766:	430a      	orrs	r2, r1
 8007768:	63da      	str	r2, [r3, #60]	; 0x3c
 800776a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800776c:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800776e:	400b      	ands	r3, r1
 8007770:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007772:	2103      	movs	r1, #3
 8007774:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8007776:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007778:	f000 fedc 	bl	8008534 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800777c:	20c0      	movs	r0, #192	; 0xc0
 800777e:	00c0      	lsls	r0, r0, #3
 8007780:	f000 fb56 	bl	8007e30 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007784:	b003      	add	sp, #12
 8007786:	bd00      	pop	{pc}
 8007788:	40021000 	.word	0x40021000

0800778c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	0004      	movs	r4, r0
 8007790:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007792:	2214      	movs	r2, #20
 8007794:	2100      	movs	r1, #0
 8007796:	a803      	add	r0, sp, #12
 8007798:	f007 fb04 	bl	800eda4 <memset>
  if(hadc->Instance==ADC1)
 800779c:	4b26      	ldr	r3, [pc, #152]	; (8007838 <HAL_ADC_MspInit+0xac>)
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d001      	beq.n	80077a8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80077a4:	b008      	add	sp, #32
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80077a8:	2180      	movs	r1, #128	; 0x80
 80077aa:	4b24      	ldr	r3, [pc, #144]	; (800783c <HAL_ADC_MspInit+0xb0>)
 80077ac:	0349      	lsls	r1, r1, #13
 80077ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077b0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80077b2:	430a      	orrs	r2, r1
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
 80077b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80077b8:	2503      	movs	r5, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 80077ba:	400a      	ands	r2, r1
 80077bc:	9200      	str	r2, [sp, #0]
 80077be:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077c0:	2201      	movs	r2, #1
 80077c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c4:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077c6:	4311      	orrs	r1, r2
 80077c8:	6359      	str	r1, [r3, #52]	; 0x34
 80077ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077cc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077ce:	400a      	ands	r2, r1
 80077d0:	9201      	str	r2, [sp, #4]
 80077d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077d4:	2202      	movs	r2, #2
 80077d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80077d8:	4311      	orrs	r1, r2
 80077da:	6359      	str	r1, [r3, #52]	; 0x34
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077de:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e0:	401a      	ands	r2, r3
 80077e2:	9202      	str	r2, [sp, #8]
 80077e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80077e6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077e8:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ea:	f001 f8cb 	bl	8008984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077f0:	4814      	ldr	r0, [pc, #80]	; (8007844 <HAL_ADC_MspInit+0xb8>)
 80077f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 80077f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077f6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077fa:	f001 f8c3 	bl	8008984 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80077fe:	4d12      	ldr	r5, [pc, #72]	; (8007848 <HAL_ADC_MspInit+0xbc>)
 8007800:	4b12      	ldr	r3, [pc, #72]	; (800784c <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007802:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8007804:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007806:	2305      	movs	r3, #5
 8007808:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800780a:	337b      	adds	r3, #123	; 0x7b
 800780c:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800780e:	3381      	adds	r3, #129	; 0x81
 8007810:	33ff      	adds	r3, #255	; 0xff
 8007812:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800781a:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800781c:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800781e:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007820:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007822:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007824:	f000 fee4 	bl	80085f0 <HAL_DMA_Init>
 8007828:	2800      	cmp	r0, #0
 800782a:	d102      	bne.n	8007832 <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800782c:	6525      	str	r5, [r4, #80]	; 0x50
 800782e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8007830:	e7b8      	b.n	80077a4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8007832:	f7ff ff87 	bl	8007744 <Error_Handler>
 8007836:	e7f9      	b.n	800782c <HAL_ADC_MspInit+0xa0>
 8007838:	40012400 	.word	0x40012400
 800783c:	40021000 	.word	0x40021000
 8007840:	00000402 	.word	0x00000402
 8007844:	50000400 	.word	0x50000400
 8007848:	2000482c 	.word	0x2000482c
 800784c:	40020008 	.word	0x40020008

08007850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007850:	b510      	push	{r4, lr}
 8007852:	0004      	movs	r4, r0
 8007854:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007856:	2214      	movs	r2, #20
 8007858:	2100      	movs	r1, #0
 800785a:	a802      	add	r0, sp, #8
 800785c:	f007 faa2 	bl	800eda4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007860:	221c      	movs	r2, #28
 8007862:	2100      	movs	r1, #0
 8007864:	a807      	add	r0, sp, #28
 8007866:	f007 fa9d 	bl	800eda4 <memset>
  if(hi2c->Instance==I2C1)
 800786a:	4b18      	ldr	r3, [pc, #96]	; (80078cc <HAL_I2C_MspInit+0x7c>)
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d001      	beq.n	8007876 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007872:	b00e      	add	sp, #56	; 0x38
 8007874:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007876:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007878:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800787a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800787c:	f002 f97a 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 8007880:	2800      	cmp	r0, #0
 8007882:	d120      	bne.n	80078c6 <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007884:	2302      	movs	r3, #2
 8007886:	4c12      	ldr	r4, [pc, #72]	; (80078d0 <HAL_I2C_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007888:	4812      	ldr	r0, [pc, #72]	; (80078d4 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800788a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800788c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800788e:	431a      	orrs	r2, r3
 8007890:	6362      	str	r2, [r4, #52]	; 0x34
 8007892:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007894:	4013      	ands	r3, r2
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800789a:	23c0      	movs	r3, #192	; 0xc0
 800789c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800789e:	3bae      	subs	r3, #174	; 0xae
 80078a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078a2:	3b11      	subs	r3, #17
 80078a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078a6:	2300      	movs	r3, #0
 80078a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80078aa:	3306      	adds	r3, #6
 80078ac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078ae:	f001 f869 	bl	8008984 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078b6:	0392      	lsls	r2, r2, #14
 80078b8:	4313      	orrs	r3, r2
 80078ba:	63e3      	str	r3, [r4, #60]	; 0x3c
 80078bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078be:	4013      	ands	r3, r2
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	9b01      	ldr	r3, [sp, #4]
}
 80078c4:	e7d5      	b.n	8007872 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80078c6:	f7ff ff3d 	bl	8007744 <Error_Handler>
 80078ca:	e7db      	b.n	8007884 <HAL_I2C_MspInit+0x34>
 80078cc:	40005400 	.word	0x40005400
 80078d0:	40021000 	.word	0x40021000
 80078d4:	50000400 	.word	0x50000400

080078d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80078d8:	b510      	push	{r4, lr}
 80078da:	0004      	movs	r4, r0
 80078dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078de:	2214      	movs	r2, #20
 80078e0:	2100      	movs	r1, #0
 80078e2:	a803      	add	r0, sp, #12
 80078e4:	f007 fa5e 	bl	800eda4 <memset>
  if(hspi->Instance==SPI1)
 80078e8:	4b10      	ldr	r3, [pc, #64]	; (800792c <HAL_SPI_MspInit+0x54>)
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d001      	beq.n	80078f4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80078f0:	b008      	add	sp, #32
 80078f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80078f4:	2180      	movs	r1, #128	; 0x80
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_SPI_MspInit+0x58>)
 80078f8:	0149      	lsls	r1, r1, #5
 80078fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078fc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80078fe:	430a      	orrs	r2, r1
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
 8007902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007904:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007906:	400a      	ands	r2, r1
 8007908:	9201      	str	r2, [sp, #4]
 800790a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800790c:	2201      	movs	r2, #1
 800790e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007910:	4311      	orrs	r1, r2
 8007912:	6359      	str	r1, [r3, #52]	; 0x34
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007916:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007918:	401a      	ands	r2, r3
 800791a:	9202      	str	r2, [sp, #8]
 800791c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 800791e:	23e0      	movs	r3, #224	; 0xe0
 8007920:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007922:	3bde      	subs	r3, #222	; 0xde
 8007924:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007926:	f001 f82d 	bl	8008984 <HAL_GPIO_Init>
}
 800792a:	e7e1      	b.n	80078f0 <HAL_SPI_MspInit+0x18>
 800792c:	40013000 	.word	0x40013000
 8007930:	40021000 	.word	0x40021000

08007934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007934:	b500      	push	{lr}
  if(htim_base->Instance==TIM6)
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <HAL_TIM_Base_MspInit+0x34>)
 8007938:	6802      	ldr	r2, [r0, #0]
{
 800793a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 800793c:	429a      	cmp	r2, r3
 800793e:	d001      	beq.n	8007944 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007940:	b003      	add	sp, #12
 8007942:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007944:	2310      	movs	r3, #16
 8007946:	4a09      	ldr	r2, [pc, #36]	; (800796c <HAL_TIM_Base_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8007948:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 800794a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800794c:	4319      	orrs	r1, r3
 800794e:	63d1      	str	r1, [r2, #60]	; 0x3c
 8007950:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8007952:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007954:	4013      	ands	r3, r2
 8007956:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8007958:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800795a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 800795c:	f000 fdea 	bl	8008534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8007960:	2011      	movs	r0, #17
 8007962:	f000 fe19 	bl	8008598 <HAL_NVIC_EnableIRQ>
}
 8007966:	e7eb      	b.n	8007940 <HAL_TIM_Base_MspInit+0xc>
 8007968:	40001000 	.word	0x40001000
 800796c:	40021000 	.word	0x40021000

08007970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	0004      	movs	r4, r0
 8007974:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007976:	2214      	movs	r2, #20
 8007978:	2100      	movs	r1, #0
 800797a:	a806      	add	r0, sp, #24
 800797c:	f007 fa12 	bl	800eda4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007980:	221c      	movs	r2, #28
 8007982:	2100      	movs	r1, #0
 8007984:	a80b      	add	r0, sp, #44	; 0x2c
 8007986:	f007 fa0d 	bl	800eda4 <memset>
  if(huart->Instance==USART1)
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	4a6f      	ldr	r2, [pc, #444]	; (8007b4c <HAL_UART_MspInit+0x1dc>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d008      	beq.n	80079a4 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8007992:	4a6f      	ldr	r2, [pc, #444]	; (8007b50 <HAL_UART_MspInit+0x1e0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d04c      	beq.n	8007a32 <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007998:	4a6e      	ldr	r2, [pc, #440]	; (8007b54 <HAL_UART_MspInit+0x1e4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d100      	bne.n	80079a0 <HAL_UART_MspInit+0x30>
 800799e:	e08c      	b.n	8007aba <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80079a0:	b012      	add	sp, #72	; 0x48
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80079a4:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079a6:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80079a8:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079aa:	f002 f8e3 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d000      	beq.n	80079b4 <HAL_UART_MspInit+0x44>
 80079b2:	e0bf      	b.n	8007b34 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 80079b4:	2180      	movs	r1, #128	; 0x80
 80079b6:	4b68      	ldr	r3, [pc, #416]	; (8007b58 <HAL_UART_MspInit+0x1e8>)
 80079b8:	01c9      	lsls	r1, r1, #7
 80079ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079bc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 80079be:	430a      	orrs	r2, r1
 80079c0:	641a      	str	r2, [r3, #64]	; 0x40
 80079c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c4:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80079c6:	400a      	ands	r2, r1
 80079c8:	9200      	str	r2, [sp, #0]
 80079ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079cc:	2201      	movs	r2, #1
 80079ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079d0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079d2:	4311      	orrs	r1, r2
 80079d4:	6359      	str	r1, [r3, #52]	; 0x34
 80079d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079d8:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079da:	4013      	ands	r3, r2
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 80079e0:	23c0      	movs	r3, #192	; 0xc0
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ec:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80079ee:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f0:	f000 ffc8 	bl	8008984 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80079f4:	4d59      	ldr	r5, [pc, #356]	; (8007b5c <HAL_UART_MspInit+0x1ec>)
 80079f6:	4b5a      	ldr	r3, [pc, #360]	; (8007b60 <HAL_UART_MspInit+0x1f0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80079f8:	0028      	movs	r0, r5
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80079fa:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80079fc:	2332      	movs	r3, #50	; 0x32
 80079fe:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a00:	334e      	adds	r3, #78	; 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a02:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a04:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a06:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a08:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a0a:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007a0c:	61ee      	str	r6, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007a0e:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007a10:	f000 fdee 	bl	80085f0 <HAL_DMA_Init>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d000      	beq.n	8007a1a <HAL_UART_MspInit+0xaa>
 8007a18:	e089      	b.n	8007b2e <HAL_UART_MspInit+0x1be>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007a1a:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2103      	movs	r1, #3
 8007a20:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007a22:	50e5      	str	r5, [r4, r3]
 8007a24:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007a26:	f000 fd85 	bl	8008534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007a2a:	201b      	movs	r0, #27
 8007a2c:	f000 fdb4 	bl	8008598 <HAL_NVIC_EnableIRQ>
 8007a30:	e7b6      	b.n	80079a0 <HAL_UART_MspInit+0x30>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007a32:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a34:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007a36:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a38:	f002 f89c 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d17c      	bne.n	8007b3a <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a40:	2180      	movs	r1, #128	; 0x80
 8007a42:	4b45      	ldr	r3, [pc, #276]	; (8007b58 <HAL_UART_MspInit+0x1e8>)
 8007a44:	0289      	lsls	r1, r1, #10
 8007a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a48:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a50:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a52:	400a      	ands	r2, r1
 8007a54:	9202      	str	r2, [sp, #8]
 8007a56:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a58:	2201      	movs	r2, #1
 8007a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a5c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a5e:	4311      	orrs	r1, r2
 8007a60:	6359      	str	r1, [r3, #52]	; 0x34
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a64:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a66:	4013      	ands	r3, r2
 8007a68:	9303      	str	r3, [sp, #12]
 8007a6a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a70:	3b0a      	subs	r3, #10
 8007a72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a74:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a76:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007a78:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a7a:	f000 ff83 	bl	8008984 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8007a7e:	4d39      	ldr	r5, [pc, #228]	; (8007b64 <HAL_UART_MspInit+0x1f4>)
 8007a80:	4b39      	ldr	r3, [pc, #228]	; (8007b68 <HAL_UART_MspInit+0x1f8>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007a82:	0028      	movs	r0, r5
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8007a84:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8007a86:	2334      	movs	r3, #52	; 0x34
 8007a88:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a8a:	334c      	adds	r3, #76	; 0x4c
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a8c:	60ae      	str	r6, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a8e:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a90:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a92:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a94:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007a96:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007a98:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007a9a:	f000 fda9 	bl	80085f0 <HAL_DMA_Init>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d14e      	bne.n	8007b40 <HAL_UART_MspInit+0x1d0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007aa2:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2103      	movs	r1, #3
 8007aa8:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007aaa:	50e5      	str	r5, [r4, r3]
 8007aac:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007aae:	f000 fd41 	bl	8008534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007ab2:	201c      	movs	r0, #28
 8007ab4:	f000 fd70 	bl	8008598 <HAL_NVIC_EnableIRQ>
 8007ab8:	e772      	b.n	80079a0 <HAL_UART_MspInit+0x30>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007aba:	2180      	movs	r1, #128	; 0x80
 8007abc:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <HAL_UART_MspInit+0x1e8>)
 8007abe:	02c9      	lsls	r1, r1, #11
 8007ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ac2:	482a      	ldr	r0, [pc, #168]	; (8007b6c <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aca:	400a      	ands	r2, r1
 8007acc:	9204      	str	r2, [sp, #16]
 8007ace:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ad4:	4311      	orrs	r1, r2
 8007ad6:	6359      	str	r1, [r3, #52]	; 0x34
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ada:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007adc:	4013      	ands	r3, r2
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8007ae2:	2305      	movs	r3, #5
 8007ae4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007ae6:	3b01      	subs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae8:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007aea:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aec:	f000 ff4a 	bl	8008984 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8007af0:	4d1f      	ldr	r5, [pc, #124]	; (8007b70 <HAL_UART_MspInit+0x200>)
 8007af2:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <HAL_UART_MspInit+0x204>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007af4:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8007af6:	602b      	str	r3, [r5, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007af8:	2337      	movs	r3, #55	; 0x37
 8007afa:	606b      	str	r3, [r5, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007afc:	3b27      	subs	r3, #39	; 0x27
 8007afe:	60ab      	str	r3, [r5, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b00:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8007b02:	0028      	movs	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b04:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b06:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b08:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b0a:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007b0c:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007b0e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8007b10:	f000 fd6e 	bl	80085f0 <HAL_DMA_Init>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d116      	bne.n	8007b46 <HAL_UART_MspInit+0x1d6>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2103      	movs	r1, #3
 8007b1c:	201d      	movs	r0, #29
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8007b1e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007b20:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007b22:	f000 fd07 	bl	8008534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8007b26:	201d      	movs	r0, #29
 8007b28:	f000 fd36 	bl	8008598 <HAL_NVIC_EnableIRQ>
}
 8007b2c:	e738      	b.n	80079a0 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8007b2e:	f7ff fe09 	bl	8007744 <Error_Handler>
 8007b32:	e772      	b.n	8007a1a <HAL_UART_MspInit+0xaa>
      Error_Handler();
 8007b34:	f7ff fe06 	bl	8007744 <Error_Handler>
 8007b38:	e73c      	b.n	80079b4 <HAL_UART_MspInit+0x44>
      Error_Handler();
 8007b3a:	f7ff fe03 	bl	8007744 <Error_Handler>
 8007b3e:	e77f      	b.n	8007a40 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8007b40:	f7ff fe00 	bl	8007744 <Error_Handler>
 8007b44:	e7ad      	b.n	8007aa2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8007b46:	f7ff fdfd 	bl	8007744 <Error_Handler>
 8007b4a:	e7e5      	b.n	8007b18 <HAL_UART_MspInit+0x1a8>
 8007b4c:	40013800 	.word	0x40013800
 8007b50:	40004400 	.word	0x40004400
 8007b54:	40004800 	.word	0x40004800
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	20004888 	.word	0x20004888
 8007b60:	4002001c 	.word	0x4002001c
 8007b64:	200048e4 	.word	0x200048e4
 8007b68:	40020030 	.word	0x40020030
 8007b6c:	50000400 	.word	0x50000400
 8007b70:	20004940 	.word	0x20004940
 8007b74:	40020044 	.word	0x40020044

08007b78 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007b78:	2180      	movs	r1, #128	; 0x80
 8007b7a:	4b21      	ldr	r3, [pc, #132]	; (8007c00 <HAL_InitTick+0x88>)
{
 8007b7c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b80:	0109      	lsls	r1, r1, #4
 8007b82:	430a      	orrs	r2, r1
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8007b88:	b086      	sub	sp, #24
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007b8a:	400b      	ands	r3, r1
 8007b8c:	9301      	str	r3, [sp, #4]
{
 8007b8e:	0006      	movs	r6, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007b90:	4669      	mov	r1, sp
 8007b92:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007b94:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007b96:	f001 ffd3 	bl	8009b40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d117      	bne.n	8007bd0 <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007ba0:	f001 ffba 	bl	8009b18 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007ba4:	4c17      	ldr	r4, [pc, #92]	; (8007c04 <HAL_InitTick+0x8c>)
 8007ba6:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007ba8:	4918      	ldr	r1, [pc, #96]	; (8007c0c <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 8007baa:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007bac:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <HAL_InitTick+0x98>)
 8007bae:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007bb0:	f7f8 fac6 	bl	8000140 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8007bb4:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007bb6:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8007bb8:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8007bba:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8007bbc:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bbe:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bc0:	61a3      	str	r3, [r4, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8007bc2:	f002 fd71 	bl	800a6a8 <HAL_TIM_Base_Init>
 8007bc6:	1e05      	subs	r5, r0, #0
  if (status == HAL_OK)
 8007bc8:	d006      	beq.n	8007bd8 <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 8007bca:	0028      	movs	r0, r5
 8007bcc:	b006      	add	sp, #24
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007bd0:	f001 ffa2 	bl	8009b18 <HAL_RCC_GetPCLK1Freq>
 8007bd4:	0040      	lsls	r0, r0, #1
 8007bd6:	e7e5      	b.n	8007ba4 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007bd8:	0020      	movs	r0, r4
 8007bda:	f002 fc25 	bl	800a428 <HAL_TIM_Base_Start_IT>
 8007bde:	1e05      	subs	r5, r0, #0
    if (status == HAL_OK)
 8007be0:	d1f3      	bne.n	8007bca <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8007be2:	200d      	movs	r0, #13
 8007be4:	f000 fcd8 	bl	8008598 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007be8:	2e03      	cmp	r6, #3
 8007bea:	d901      	bls.n	8007bf0 <HAL_InitTick+0x78>
        status = HAL_ERROR;
 8007bec:	2501      	movs	r5, #1
 8007bee:	e7ec      	b.n	8007bca <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	0031      	movs	r1, r6
 8007bf4:	200d      	movs	r0, #13
 8007bf6:	f000 fc9d 	bl	8008534 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007bfa:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <HAL_InitTick+0x9c>)
 8007bfc:	601e      	str	r6, [r3, #0]
 8007bfe:	e7e4      	b.n	8007bca <HAL_InitTick+0x52>
 8007c00:	40021000 	.word	0x40021000
 8007c04:	20004cc4 	.word	0x20004cc4
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	000f4240 	.word	0x000f4240
 8007c10:	000003e7 	.word	0x000003e7
 8007c14:	20000124 	.word	0x20000124

08007c18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007c18:	e7fe      	b.n	8007c18 <NMI_Handler>
 8007c1a:	46c0      	nop			; (mov r8, r8)

08007c1c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c1c:	e7fe      	b.n	8007c1c <HardFault_Handler>
 8007c1e:	46c0      	nop			; (mov r8, r8)

08007c20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007c20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007c22:	4802      	ldr	r0, [pc, #8]	; (8007c2c <DMA1_Channel1_IRQHandler+0xc>)
 8007c24:	f000 fe20 	bl	8008868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	2000482c 	.word	0x2000482c

08007c30 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007c30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007c32:	4803      	ldr	r0, [pc, #12]	; (8007c40 <DMA1_Channel2_3_IRQHandler+0x10>)
 8007c34:	f000 fe18 	bl	8008868 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007c38:	4802      	ldr	r0, [pc, #8]	; (8007c44 <DMA1_Channel2_3_IRQHandler+0x14>)
 8007c3a:	f000 fe15 	bl	8008868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007c3e:	bd10      	pop	{r4, pc}
 8007c40:	20004888 	.word	0x20004888
 8007c44:	200048e4 	.word	0x200048e4

08007c48 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8007c48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007c4a:	4803      	ldr	r0, [pc, #12]	; (8007c58 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8007c4c:	f000 fe0c 	bl	8008868 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8007c50:	4802      	ldr	r0, [pc, #8]	; (8007c5c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8007c52:	f000 fe65 	bl	8008920 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8007c56:	bd10      	pop	{r4, pc}
 8007c58:	20004940 	.word	0x20004940
 8007c5c:	2000482c 	.word	0x2000482c

08007c60 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8007c60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007c62:	4802      	ldr	r0, [pc, #8]	; (8007c6c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8007c64:	f002 fc1a 	bl	800a49c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	20004cc4 	.word	0x20004cc4

08007c70 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8007c70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007c72:	4802      	ldr	r0, [pc, #8]	; (8007c7c <TIM6_IRQHandler+0xc>)
 8007c74:	f002 fc12 	bl	800a49c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	20004a54 	.word	0x20004a54

08007c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007c80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007c82:	4802      	ldr	r0, [pc, #8]	; (8007c8c <USART1_IRQHandler+0xc>)
 8007c84:	f002 fe02 	bl	800a88c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	20004aa0 	.word	0x20004aa0

08007c90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007c90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007c92:	4802      	ldr	r0, [pc, #8]	; (8007c9c <USART2_IRQHandler+0xc>)
 8007c94:	f002 fdfa 	bl	800a88c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	20004b34 	.word	0x20004b34

08007ca0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8007ca0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007ca2:	4802      	ldr	r0, [pc, #8]	; (8007cac <USART3_4_IRQHandler+0xc>)
 8007ca4:	f002 fdf2 	bl	800a88c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	20004bc8 	.word	0x20004bc8

08007cb0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	4770      	bx	lr

08007cb4 <_kill>:

int _kill(int pid, int sig)
{
 8007cb4:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007cb6:	f007 fa07 	bl	800f0c8 <__errno>
 8007cba:	2316      	movs	r3, #22
 8007cbc:	6003      	str	r3, [r0, #0]
  return -1;
 8007cbe:	2001      	movs	r0, #1
}
 8007cc0:	4240      	negs	r0, r0
 8007cc2:	bd10      	pop	{r4, pc}

08007cc4 <_exit>:

void _exit (int status)
{
 8007cc4:	b510      	push	{r4, lr}
  errno = EINVAL;
 8007cc6:	f007 f9ff 	bl	800f0c8 <__errno>
 8007cca:	2316      	movs	r3, #22
 8007ccc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8007cce:	e7fe      	b.n	8007cce <_exit+0xa>

08007cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cd4:	dd07      	ble.n	8007ce6 <_read+0x16>
 8007cd6:	000c      	movs	r4, r1
 8007cd8:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8007cda:	e000      	b.n	8007cde <_read+0xe>
 8007cdc:	bf00      	nop
 8007cde:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ce0:	3401      	adds	r4, #1
 8007ce2:	42ac      	cmp	r4, r5
 8007ce4:	d1f9      	bne.n	8007cda <_read+0xa>
  }

  return len;
}
 8007ce6:	0030      	movs	r0, r6
 8007ce8:	bd70      	pop	{r4, r5, r6, pc}
 8007cea:	46c0      	nop			; (mov r8, r8)

08007cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cf0:	dd07      	ble.n	8007d02 <_write+0x16>
 8007cf2:	000c      	movs	r4, r1
 8007cf4:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8007cf6:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cf8:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8007cfa:	e000      	b.n	8007cfe <_write+0x12>
 8007cfc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cfe:	42ac      	cmp	r4, r5
 8007d00:	d1f9      	bne.n	8007cf6 <_write+0xa>
  }
  return len;
}
 8007d02:	0030      	movs	r0, r6
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
 8007d06:	46c0      	nop			; (mov r8, r8)

08007d08 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8007d08:	2001      	movs	r0, #1
}
 8007d0a:	4240      	negs	r0, r0
 8007d0c:	4770      	bx	lr
 8007d0e:	46c0      	nop			; (mov r8, r8)

08007d10 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	019b      	lsls	r3, r3, #6
  return 0;
}
 8007d14:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8007d16:	604b      	str	r3, [r1, #4]
}
 8007d18:	4770      	bx	lr
 8007d1a:	46c0      	nop			; (mov r8, r8)

08007d1c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	4770      	bx	lr

08007d20 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8007d20:	2000      	movs	r0, #0
 8007d22:	4770      	bx	lr

08007d24 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d24:	490c      	ldr	r1, [pc, #48]	; (8007d58 <_sbrk+0x34>)
 8007d26:	4a0d      	ldr	r2, [pc, #52]	; (8007d5c <_sbrk+0x38>)
{
 8007d28:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d2a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007d2c:	490c      	ldr	r1, [pc, #48]	; (8007d60 <_sbrk+0x3c>)
{
 8007d2e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d004      	beq.n	8007d40 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d36:	18c3      	adds	r3, r0, r3
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d806      	bhi.n	8007d4a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007d3c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8007d3e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007d40:	4808      	ldr	r0, [pc, #32]	; (8007d64 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8007d42:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8007d44:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d9f8      	bls.n	8007d3c <_sbrk+0x18>
    errno = ENOMEM;
 8007d4a:	f007 f9bd 	bl	800f0c8 <__errno>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007d52:	2001      	movs	r0, #1
 8007d54:	4240      	negs	r0, r0
 8007d56:	e7f2      	b.n	8007d3e <_sbrk+0x1a>
 8007d58:	00000400 	.word	0x00000400
 8007d5c:	20009000 	.word	0x20009000
 8007d60:	20004d10 	.word	0x20004d10
 8007d64:	20006840 	.word	0x20006840

08007d68 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d68:	4770      	bx	lr
 8007d6a:	46c0      	nop			; (mov r8, r8)

08007d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007d6c:	480d      	ldr	r0, [pc, #52]	; (8007da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007d6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007d70:	f7ff fffa 	bl	8007d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d74:	480c      	ldr	r0, [pc, #48]	; (8007da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007d76:	490d      	ldr	r1, [pc, #52]	; (8007dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8007d78:	4a0d      	ldr	r2, [pc, #52]	; (8007db0 <LoopForever+0xe>)
  movs r3, #0
 8007d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d7c:	e002      	b.n	8007d84 <LoopCopyDataInit>

08007d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d82:	3304      	adds	r3, #4

08007d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d88:	d3f9      	bcc.n	8007d7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d8a:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007d8c:	4c0a      	ldr	r4, [pc, #40]	; (8007db8 <LoopForever+0x16>)
  movs r3, #0
 8007d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d90:	e001      	b.n	8007d96 <LoopFillZerobss>

08007d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d94:	3204      	adds	r2, #4

08007d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d98:	d3fb      	bcc.n	8007d92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007d9a:	f007 f99b 	bl	800f0d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007d9e:	f7fd fe6d 	bl	8005a7c <main>

08007da2 <LoopForever>:

LoopForever:
  b LoopForever
 8007da2:	e7fe      	b.n	8007da2 <LoopForever>
  ldr   r0, =_estack
 8007da4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007dac:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8007db0:	08014058 	.word	0x08014058
  ldr r2, =_sbss
 8007db4:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8007db8:	20006840 	.word	0x20006840

08007dbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007dbc:	e7fe      	b.n	8007dbc <ADC1_IRQHandler>
	...

08007dc0 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007dc0:	2380      	movs	r3, #128	; 0x80
 8007dc2:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <HAL_Init+0x24>)
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	6811      	ldr	r1, [r2, #0]
{
 8007dc8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007dca:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007dcc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007dce:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007dd0:	f7ff fed2 	bl	8007b78 <HAL_InitTick>
 8007dd4:	1e04      	subs	r4, r0, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8007dd8:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8007dda:	0020      	movs	r0, r4
 8007ddc:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8007dde:	f7ff fcb3 	bl	8007748 <HAL_MspInit>
 8007de2:	e7fa      	b.n	8007dda <HAL_Init+0x1a>
 8007de4:	40022000 	.word	0x40022000

08007de8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007de8:	4a03      	ldr	r2, [pc, #12]	; (8007df8 <HAL_IncTick+0x10>)
 8007dea:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <HAL_IncTick+0x14>)
 8007dec:	6811      	ldr	r1, [r2, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	185b      	adds	r3, r3, r1
 8007df2:	6013      	str	r3, [r2, #0]
}
 8007df4:	4770      	bx	lr
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	20004d14 	.word	0x20004d14
 8007dfc:	20000120 	.word	0x20000120

08007e00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007e00:	4b01      	ldr	r3, [pc, #4]	; (8007e08 <HAL_GetTick+0x8>)
 8007e02:	6818      	ldr	r0, [r3, #0]
}
 8007e04:	4770      	bx	lr
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	20004d14 	.word	0x20004d14

08007e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007e10:	f7ff fff6 	bl	8007e00 <HAL_GetTick>
 8007e14:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e16:	1c63      	adds	r3, r4, #1
 8007e18:	d002      	beq.n	8007e20 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e1a:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <HAL_Delay+0x20>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e20:	f7ff ffee 	bl	8007e00 <HAL_GetTick>
 8007e24:	1b40      	subs	r0, r0, r5
 8007e26:	42a0      	cmp	r0, r4
 8007e28:	d3fa      	bcc.n	8007e20 <HAL_Delay+0x14>
  {
  }
}
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	20000120 	.word	0x20000120

08007e30 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007e30:	4a03      	ldr	r2, [pc, #12]	; (8007e40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8007e32:	4904      	ldr	r1, [pc, #16]	; (8007e44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8007e34:	6813      	ldr	r3, [r2, #0]
 8007e36:	400b      	ands	r3, r1
 8007e38:	4303      	orrs	r3, r0
 8007e3a:	6013      	str	r3, [r2, #0]
}
 8007e3c:	4770      	bx	lr
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	40010000 	.word	0x40010000
 8007e44:	fffff9ff 	.word	0xfffff9ff

08007e48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4a:	46d6      	mov	lr, sl
 8007e4c:	464f      	mov	r7, r9
 8007e4e:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007e50:	2300      	movs	r3, #0
{
 8007e52:	b5c0      	push	{r6, r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8007e58:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8007e5a:	d100      	bne.n	8007e5e <HAL_ADC_Init+0x16>
 8007e5c:	e0d8      	b.n	8008010 <HAL_ADC_Init+0x1c8>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007e5e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	d100      	bne.n	8007e66 <HAL_ADC_Init+0x1e>
 8007e64:	e0a8      	b.n	8007fb8 <HAL_ADC_Init+0x170>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007e66:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007e68:	6825      	ldr	r5, [r4, #0]
 8007e6a:	055b      	lsls	r3, r3, #21
 8007e6c:	68aa      	ldr	r2, [r5, #8]
 8007e6e:	421a      	tst	r2, r3
 8007e70:	d115      	bne.n	8007e9e <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8007e72:	68aa      	ldr	r2, [r5, #8]
 8007e74:	497d      	ldr	r1, [pc, #500]	; (800806c <HAL_ADC_Init+0x224>)
 8007e76:	400a      	ands	r2, r1
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e7c:	4b7c      	ldr	r3, [pc, #496]	; (8008070 <HAL_ADC_Init+0x228>)
 8007e7e:	497d      	ldr	r1, [pc, #500]	; (8008074 <HAL_ADC_Init+0x22c>)
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f7f8 f95d 	bl	8000140 <__udivsi3>
 8007e86:	3001      	adds	r0, #1
 8007e88:	0040      	lsls	r0, r0, #1
 8007e8a:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8007e92:	9b01      	ldr	r3, [sp, #4]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f9      	bne.n	8007e92 <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007e9e:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	d400      	bmi.n	8007ea8 <HAL_ADC_Init+0x60>
 8007ea6:	e07a      	b.n	8007f9e <HAL_ADC_Init+0x156>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ea8:	68ab      	ldr	r3, [r5, #8]
 8007eaa:	075b      	lsls	r3, r3, #29
 8007eac:	d50b      	bpl.n	8007ec6 <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007eae:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eb0:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8007eb2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8007eba:	b002      	add	sp, #8
 8007ebc:	bce0      	pop	{r5, r6, r7}
 8007ebe:	46ba      	mov	sl, r7
 8007ec0:	46b1      	mov	r9, r6
 8007ec2:	46a8      	mov	r8, r5
 8007ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ec8:	06db      	lsls	r3, r3, #27
 8007eca:	d4f1      	bmi.n	8007eb0 <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8007ecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ece:	4a6a      	ldr	r2, [pc, #424]	; (8008078 <HAL_ADC_Init+0x230>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	3206      	adds	r2, #6
 8007ed4:	32ff      	adds	r2, #255	; 0xff
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007eda:	68ab      	ldr	r3, [r5, #8]
 8007edc:	07db      	lsls	r3, r3, #31
 8007ede:	d471      	bmi.n	8007fc4 <HAL_ADC_Init+0x17c>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007ee0:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007ee2:	68a2      	ldr	r2, [r4, #8]
 8007ee4:	1e7b      	subs	r3, r7, #1
 8007ee6:	419f      	sbcs	r7, r3
 8007ee8:	68e3      	ldr	r3, [r4, #12]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007eea:	7ea6      	ldrb	r6, [r4, #26]
 8007eec:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007eee:	7e23      	ldrb	r3, [r4, #24]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007ef0:	6921      	ldr	r1, [r4, #16]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007ef2:	039b      	lsls	r3, r3, #14
 8007ef4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007ef6:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007ef8:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007efa:	03db      	lsls	r3, r3, #15
 8007efc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007efe:	0373      	lsls	r3, r6, #13
 8007f00:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007f02:	2900      	cmp	r1, #0
 8007f04:	da00      	bge.n	8007f08 <HAL_ADC_Init+0xc0>
 8007f06:	e09f      	b.n	8008048 <HAL_ADC_Init+0x200>
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	039b      	lsls	r3, r3, #14
 8007f0c:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007f0e:	232c      	movs	r3, #44	; 0x2c
 8007f10:	5ce3      	ldrb	r3, [r4, r3]
 8007f12:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007f14:	4313      	orrs	r3, r2
 8007f16:	433b      	orrs	r3, r7
 8007f18:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007f1a:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007f1c:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007f1e:	5de2      	ldrb	r2, [r4, r7]
 8007f20:	2a01      	cmp	r2, #1
 8007f22:	d100      	bne.n	8007f26 <HAL_ADC_Init+0xde>
 8007f24:	e094      	b.n	8008050 <HAL_ADC_Init+0x208>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007f28:	2a00      	cmp	r2, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_ADC_Init+0xf0>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007f2c:	26e0      	movs	r6, #224	; 0xe0
 8007f2e:	0076      	lsls	r6, r6, #1
 8007f30:	4032      	ands	r2, r6
 8007f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f34:	4332      	orrs	r2, r6
 8007f36:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8007f38:	273c      	movs	r7, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8007f3a:	68ea      	ldr	r2, [r5, #12]
 8007f3c:	4e4f      	ldr	r6, [pc, #316]	; (800807c <HAL_ADC_Init+0x234>)
 8007f3e:	4032      	ands	r2, r6
 8007f40:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007f42:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8007f44:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007f46:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8007f48:	5de7      	ldrb	r7, [r4, r7]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007f4a:	0fb3      	lsrs	r3, r6, #30
 8007f4c:	079b      	lsls	r3, r3, #30
 8007f4e:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007f50:	46bc      	mov	ip, r7
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007f52:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007f54:	2f01      	cmp	r7, #1
 8007f56:	d109      	bne.n	8007f6c <HAL_ADC_Init+0x124>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8007f58:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8007f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f5c:	433b      	orrs	r3, r7
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	4653      	mov	r3, sl
 8007f62:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8007f64:	433a      	orrs	r2, r7
 8007f66:	431a      	orrs	r2, r3
 8007f68:	4663      	mov	r3, ip
 8007f6a:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8007f6c:	692b      	ldr	r3, [r5, #16]
 8007f6e:	4f44      	ldr	r7, [pc, #272]	; (8008080 <HAL_ADC_Init+0x238>)
 8007f70:	403b      	ands	r3, r7
 8007f72:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007f74:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8007f76:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007f78:	0073      	lsls	r3, r6, #1
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	05d2      	lsls	r2, r2, #23
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d021      	beq.n	8007fc6 <HAL_ADC_Init+0x17e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007f82:	2380      	movs	r3, #128	; 0x80
 8007f84:	061b      	lsls	r3, r3, #24
 8007f86:	429e      	cmp	r6, r3
 8007f88:	d01d      	beq.n	8007fc6 <HAL_ADC_Init+0x17e>
        MODIFY_REG(ADC1_COMMON->CCR,
 8007f8a:	4a3e      	ldr	r2, [pc, #248]	; (8008084 <HAL_ADC_Init+0x23c>)
 8007f8c:	4f3e      	ldr	r7, [pc, #248]	; (8008088 <HAL_ADC_Init+0x240>)
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	403b      	ands	r3, r7
 8007f92:	27f0      	movs	r7, #240	; 0xf0
 8007f94:	03bf      	lsls	r7, r7, #14
 8007f96:	403e      	ands	r6, r7
 8007f98:	4333      	orrs	r3, r6
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	e013      	b.n	8007fc6 <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f9e:	2210      	movs	r2, #16
 8007fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8007fa2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fa8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007faa:	3a0f      	subs	r2, #15
 8007fac:	4313      	orrs	r3, r2
 8007fae:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fb0:	68ab      	ldr	r3, [r5, #8]
 8007fb2:	075b      	lsls	r3, r3, #29
 8007fb4:	d587      	bpl.n	8007ec6 <HAL_ADC_Init+0x7e>
 8007fb6:	e77a      	b.n	8007eae <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 8007fb8:	f7ff fbe8 	bl	800778c <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8007fbc:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8007fbe:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8007fc0:	54e5      	strb	r5, [r4, r3]
 8007fc2:	e750      	b.n	8007e66 <HAL_ADC_Init+0x1e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007fc4:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8007fc6:	2607      	movs	r6, #7
 8007fc8:	2770      	movs	r7, #112	; 0x70
 8007fca:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007fcc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007fce:	43b3      	bics	r3, r6
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	616b      	str	r3, [r5, #20]
 8007fd4:	696e      	ldr	r6, [r5, #20]
 8007fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007fd8:	43be      	bics	r6, r7
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	4333      	orrs	r3, r6
 8007fde:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	d117      	bne.n	8008014 <HAL_ADC_Init+0x1cc>
      SET_BIT(hadc->Instance->CHSELR,
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007fe8:	425b      	negs	r3, r3
 8007fea:	430b      	orrs	r3, r1
 8007fec:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007fee:	2307      	movs	r3, #7
 8007ff0:	6969      	ldr	r1, [r5, #20]
 8007ff2:	400b      	ands	r3, r1
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d01e      	beq.n	8008036 <HAL_ADC_Init+0x1ee>
      ADC_STATE_CLR_SET(hadc->State,
 8007ff8:	2212      	movs	r2, #18
 8007ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8007ffc:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8007ffe:	4393      	bics	r3, r2
 8008000:	3a02      	subs	r2, #2
 8008002:	4313      	orrs	r3, r2
 8008004:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008006:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008008:	3a0f      	subs	r2, #15
 800800a:	4313      	orrs	r3, r2
 800800c:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 800800e:	e754      	b.n	8007eba <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8008010:	2001      	movs	r0, #1
 8008012:	e752      	b.n	8007eba <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	039b      	lsls	r3, r3, #14
 8008018:	4299      	cmp	r1, r3
 800801a:	d1e8      	bne.n	8007fee <HAL_ADC_Init+0x1a6>
      MODIFY_REG(hadc->Instance->CHSELR,
 800801c:	211c      	movs	r1, #28
 800801e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008020:	69e3      	ldr	r3, [r4, #28]
 8008022:	3b01      	subs	r3, #1
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4019      	ands	r1, r3
 8008028:	2310      	movs	r3, #16
 800802a:	425b      	negs	r3, r3
 800802c:	408b      	lsls	r3, r1
 800802e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008030:	430b      	orrs	r3, r1
 8008032:	62ab      	str	r3, [r5, #40]	; 0x28
 8008034:	e7db      	b.n	8007fee <HAL_ADC_Init+0x1a6>
      ADC_CLEAR_ERRORCODE(hadc);
 8008036:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8008038:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800803a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800803c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800803e:	4393      	bics	r3, r2
 8008040:	3a02      	subs	r2, #2
 8008042:	4313      	orrs	r3, r2
 8008044:	65a3      	str	r3, [r4, #88]	; 0x58
 8008046:	e738      	b.n	8007eba <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008048:	004b      	lsls	r3, r1, #1
 800804a:	085b      	lsrs	r3, r3, #1
 800804c:	469c      	mov	ip, r3
 800804e:	e75e      	b.n	8007f0e <HAL_ADC_Init+0xc6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8008050:	2e00      	cmp	r6, #0
 8008052:	d103      	bne.n	800805c <HAL_ADC_Init+0x214>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8008054:	2280      	movs	r2, #128	; 0x80
 8008056:	0252      	lsls	r2, r2, #9
 8008058:	4313      	orrs	r3, r2
 800805a:	e764      	b.n	8007f26 <HAL_ADC_Init+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800805c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800805e:	433e      	orrs	r6, r7
 8008060:	65a6      	str	r6, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008062:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8008064:	4332      	orrs	r2, r6
 8008066:	65e2      	str	r2, [r4, #92]	; 0x5c
 8008068:	e75d      	b.n	8007f26 <HAL_ADC_Init+0xde>
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	6fffffe8 	.word	0x6fffffe8
 8008070:	2000011c 	.word	0x2000011c
 8008074:	00030d40 	.word	0x00030d40
 8008078:	fffffefd 	.word	0xfffffefd
 800807c:	fffe0201 	.word	0xfffe0201
 8008080:	1ffffc02 	.word	0x1ffffc02
 8008084:	40012708 	.word	0x40012708
 8008088:	ffc3ffff 	.word	0xffc3ffff

0800808c <HAL_ADC_ConvCpltCallback>:
 800808c:	4770      	bx	lr
 800808e:	46c0      	nop			; (mov r8, r8)

08008090 <HAL_ADC_ConvHalfCpltCallback>:
 8008090:	4770      	bx	lr
 8008092:	46c0      	nop			; (mov r8, r8)

08008094 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008094:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008096:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008098:	f7ff fffa 	bl	8008090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800809c:	bd10      	pop	{r4, pc}
 800809e:	46c0      	nop			; (mov r8, r8)

080080a0 <HAL_ADC_ErrorCallback>:
 80080a0:	4770      	bx	lr
 80080a2:	46c0      	nop			; (mov r8, r8)

080080a4 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80080a4:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80080a8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80080aa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80080ac:	4313      	orrs	r3, r2
 80080ae:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80080b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80080b2:	3a3c      	subs	r2, #60	; 0x3c
 80080b4:	4313      	orrs	r3, r2
 80080b6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80080b8:	f7ff fff2 	bl	80080a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	46c0      	nop			; (mov r8, r8)

080080c0 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80080c0:	2150      	movs	r1, #80	; 0x50
{
 80080c2:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80080c6:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80080c8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80080ca:	4211      	tst	r1, r2
 80080cc:	d10d      	bne.n	80080ea <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80080ce:	2380      	movs	r3, #128	; 0x80
 80080d0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80080d6:	22c0      	movs	r2, #192	; 0xc0
 80080d8:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80080da:	6803      	ldr	r3, [r0, #0]
 80080dc:	0112      	lsls	r2, r2, #4
 80080de:	68d9      	ldr	r1, [r3, #12]
 80080e0:	4211      	tst	r1, r2
 80080e2:	d00a      	beq.n	80080fa <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 80080e4:	f7ff ffd2 	bl	800808c <HAL_ADC_ConvCpltCallback>
}
 80080e8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80080ea:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80080ec:	06d2      	lsls	r2, r2, #27
 80080ee:	d416      	bmi.n	800811e <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80080f0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80080f2:	0018      	movs	r0, r3
 80080f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080f6:	4790      	blx	r2
}
 80080f8:	e7f6      	b.n	80080e8 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80080fa:	7e82      	ldrb	r2, [r0, #26]
 80080fc:	2a00      	cmp	r2, #0
 80080fe:	d1f1      	bne.n	80080e4 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	0712      	lsls	r2, r2, #28
 8008104:	d5ee      	bpl.n	80080e4 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	0752      	lsls	r2, r2, #29
 800810a:	d50b      	bpl.n	8008124 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800810c:	2220      	movs	r2, #32
 800810e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008110:	4313      	orrs	r3, r2
 8008112:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008114:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8008116:	3a1f      	subs	r2, #31
 8008118:	4313      	orrs	r3, r2
 800811a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800811c:	e7e2      	b.n	80080e4 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 800811e:	f7ff ffbf 	bl	80080a0 <HAL_ADC_ErrorCallback>
 8008122:	e7e1      	b.n	80080e8 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008124:	210c      	movs	r1, #12
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	438a      	bics	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800812c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800812e:	4a03      	ldr	r2, [pc, #12]	; (800813c <ADC_DMAConvCplt+0x7c>)
 8008130:	4013      	ands	r3, r2
 8008132:	3204      	adds	r2, #4
 8008134:	32ff      	adds	r2, #255	; 0xff
 8008136:	4313      	orrs	r3, r2
 8008138:	6583      	str	r3, [r0, #88]	; 0x58
 800813a:	e7d3      	b.n	80080e4 <ADC_DMAConvCplt+0x24>
 800813c:	fffffefe 	.word	0xfffffefe

08008140 <HAL_ADC_ConfigChannel>:
{
 8008140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008142:	4645      	mov	r5, r8
 8008144:	46de      	mov	lr, fp
 8008146:	4657      	mov	r7, sl
 8008148:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 800814a:	2300      	movs	r3, #0
{
 800814c:	b5e0      	push	{r5, r6, r7, lr}
 800814e:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8008150:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8008152:	3354      	adds	r3, #84	; 0x54
 8008154:	5cc2      	ldrb	r2, [r0, r3]
{
 8008156:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8008158:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 800815a:	2a01      	cmp	r2, #1
 800815c:	d100      	bne.n	8008160 <HAL_ADC_ConfigChannel+0x20>
 800815e:	e091      	b.n	8008284 <HAL_ADC_ConfigChannel+0x144>
 8008160:	2001      	movs	r0, #1
 8008162:	2204      	movs	r2, #4
 8008164:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	689e      	ldr	r6, [r3, #8]
 800816a:	4232      	tst	r2, r6
 800816c:	d00d      	beq.n	800818a <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800816e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008170:	321c      	adds	r2, #28
 8008172:	4313      	orrs	r3, r2
 8008174:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8008176:	2354      	movs	r3, #84	; 0x54
 8008178:	2200      	movs	r2, #0
 800817a:	54e2      	strb	r2, [r4, r3]
}
 800817c:	b005      	add	sp, #20
 800817e:	bcf0      	pop	{r4, r5, r6, r7}
 8008180:	46bb      	mov	fp, r7
 8008182:	46b2      	mov	sl, r6
 8008184:	46a9      	mov	r9, r5
 8008186:	46a0      	mov	r8, r4
 8008188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 800818a:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800818c:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 800818e:	2e02      	cmp	r6, #2
 8008190:	d05c      	beq.n	800824c <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8008192:	2780      	movs	r7, #128	; 0x80
 8008194:	063f      	lsls	r7, r7, #24
 8008196:	42bd      	cmp	r5, r7
 8008198:	d051      	beq.n	800823e <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800819a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800819c:	270f      	movs	r7, #15
 800819e:	46aa      	mov	sl, r5
 80081a0:	251f      	movs	r5, #31
 80081a2:	46ac      	mov	ip, r5
 80081a4:	4035      	ands	r5, r6
 80081a6:	40af      	lsls	r7, r5
 80081a8:	46a9      	mov	r9, r5
 80081aa:	43fd      	mvns	r5, r7
 80081ac:	9500      	str	r5, [sp, #0]
 80081ae:	4655      	mov	r5, sl
 80081b0:	43bd      	bics	r5, r7
 80081b2:	46a8      	mov	r8, r5
 80081b4:	680d      	ldr	r5, [r1, #0]
 80081b6:	9701      	str	r7, [sp, #4]
 80081b8:	036f      	lsls	r7, r5, #13
 80081ba:	d16c      	bne.n	8008296 <HAL_ADC_ConfigChannel+0x156>
 80081bc:	4660      	mov	r0, ip
 80081be:	0eaa      	lsrs	r2, r5, #26
 80081c0:	4010      	ands	r0, r2
 80081c2:	0002      	movs	r2, r0
 80081c4:	4648      	mov	r0, r9
 80081c6:	4082      	lsls	r2, r0
 80081c8:	4640      	mov	r0, r8
 80081ca:	4310      	orrs	r0, r2
 80081cc:	4680      	mov	r8, r0
 80081ce:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80081d0:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80081d2:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80081d4:	69e2      	ldr	r2, [r4, #28]
 80081d6:	3601      	adds	r6, #1
 80081d8:	4296      	cmp	r6, r2
 80081da:	d808      	bhi.n	80081ee <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 80081dc:	464e      	mov	r6, r9
 80081de:	00aa      	lsls	r2, r5, #2
 80081e0:	0f12      	lsrs	r2, r2, #28
 80081e2:	40b2      	lsls	r2, r6
 80081e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80081e6:	9e00      	ldr	r6, [sp, #0]
 80081e8:	4030      	ands	r0, r6
 80081ea:	4302      	orrs	r2, r0
 80081ec:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 80081ee:	0228      	lsls	r0, r5, #8
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	0001      	movs	r1, r0
 80081f4:	695e      	ldr	r6, [r3, #20]
 80081f6:	4002      	ands	r2, r0
 80081f8:	4866      	ldr	r0, [pc, #408]	; (8008394 <HAL_ADC_ConfigChannel+0x254>)
 80081fa:	438e      	bics	r6, r1
 80081fc:	4002      	ands	r2, r0
 80081fe:	4332      	orrs	r2, r6
 8008200:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008202:	2d00      	cmp	r5, #0
 8008204:	db01      	blt.n	800820a <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008206:	2000      	movs	r0, #0
}
 8008208:	e7b5      	b.n	8008176 <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800820a:	21e0      	movs	r1, #224	; 0xe0
 800820c:	4862      	ldr	r0, [pc, #392]	; (8008398 <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800820e:	4a63      	ldr	r2, [pc, #396]	; (800839c <HAL_ADC_ConfigChannel+0x25c>)
 8008210:	6803      	ldr	r3, [r0, #0]
 8008212:	0449      	lsls	r1, r1, #17
 8008214:	4019      	ands	r1, r3
 8008216:	4295      	cmp	r5, r2
 8008218:	d051      	beq.n	80082be <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800821a:	4a61      	ldr	r2, [pc, #388]	; (80083a0 <HAL_ADC_ConfigChannel+0x260>)
 800821c:	4295      	cmp	r5, r2
 800821e:	d045      	beq.n	80082ac <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8008220:	4a60      	ldr	r2, [pc, #384]	; (80083a4 <HAL_ADC_ConfigChannel+0x264>)
 8008222:	4295      	cmp	r5, r2
 8008224:	d1ef      	bne.n	8008206 <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008226:	2280      	movs	r2, #128	; 0x80
 8008228:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800822a:	4213      	tst	r3, r2
 800822c:	d1eb      	bne.n	8008206 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800822e:	6803      	ldr	r3, [r0, #0]
 8008230:	4d5d      	ldr	r5, [pc, #372]	; (80083a8 <HAL_ADC_ConfigChannel+0x268>)
 8008232:	402b      	ands	r3, r5
 8008234:	430b      	orrs	r3, r1
 8008236:	431a      	orrs	r2, r3
 8008238:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800823a:	2000      	movs	r0, #0
}
 800823c:	e79b      	b.n	8008176 <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800823e:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008240:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008242:	036a      	lsls	r2, r5, #13
 8008244:	0b52      	lsrs	r2, r2, #13
 8008246:	4302      	orrs	r2, r0
 8008248:	629a      	str	r2, [r3, #40]	; 0x28
}
 800824a:	e7d0      	b.n	80081ee <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800824c:	2280      	movs	r2, #128	; 0x80
 800824e:	0612      	lsls	r2, r2, #24
 8008250:	4295      	cmp	r5, r2
 8008252:	d019      	beq.n	8008288 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8008254:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008256:	2a00      	cmp	r2, #0
 8008258:	dad5      	bge.n	8008206 <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800825a:	494f      	ldr	r1, [pc, #316]	; (8008398 <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800825c:	484f      	ldr	r0, [pc, #316]	; (800839c <HAL_ADC_ConfigChannel+0x25c>)
 800825e:	680b      	ldr	r3, [r1, #0]
 8008260:	4282      	cmp	r2, r0
 8008262:	d029      	beq.n	80082b8 <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8008264:	484e      	ldr	r0, [pc, #312]	; (80083a0 <HAL_ADC_ConfigChannel+0x260>)
 8008266:	4282      	cmp	r2, r0
 8008268:	d04c      	beq.n	8008304 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800826a:	484e      	ldr	r0, [pc, #312]	; (80083a4 <HAL_ADC_ConfigChannel+0x264>)
 800826c:	4282      	cmp	r2, r0
 800826e:	d1ca      	bne.n	8008206 <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008270:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008272:	680a      	ldr	r2, [r1, #0]
 8008274:	0440      	lsls	r0, r0, #17
 8008276:	4003      	ands	r3, r0
 8008278:	484b      	ldr	r0, [pc, #300]	; (80083a8 <HAL_ADC_ConfigChannel+0x268>)
 800827a:	4002      	ands	r2, r0
 800827c:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800827e:	2000      	movs	r0, #0
 8008280:	600b      	str	r3, [r1, #0]
 8008282:	e778      	b.n	8008176 <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8008284:	2002      	movs	r0, #2
 8008286:	e779      	b.n	800817c <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8008288:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800828a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800828c:	0350      	lsls	r0, r2, #13
 800828e:	0b40      	lsrs	r0, r0, #13
 8008290:	4381      	bics	r1, r0
 8008292:	6299      	str	r1, [r3, #40]	; 0x28
}
 8008294:	e7df      	b.n	8008256 <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8008296:	4228      	tst	r0, r5
 8008298:	d199      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x8e>
 800829a:	2702      	movs	r7, #2
 800829c:	422f      	tst	r7, r5
 800829e:	d02d      	beq.n	80082fc <HAL_ADC_ConfigChannel+0x1bc>
 80082a0:	464a      	mov	r2, r9
 80082a2:	4090      	lsls	r0, r2
 80082a4:	4642      	mov	r2, r8
 80082a6:	4302      	orrs	r2, r0
 80082a8:	4690      	mov	r8, r2
 80082aa:	e790      	b.n	80081ce <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80082ac:	2280      	movs	r2, #128	; 0x80
 80082ae:	0452      	lsls	r2, r2, #17
 80082b0:	4213      	tst	r3, r2
 80082b2:	d0bc      	beq.n	800822e <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082b4:	2000      	movs	r0, #0
 80082b6:	e75e      	b.n	8008176 <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80082b8:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80082ba:	680a      	ldr	r2, [r1, #0]
 80082bc:	e7da      	b.n	8008274 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80082be:	2280      	movs	r2, #128	; 0x80
 80082c0:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80082c2:	4213      	tst	r3, r2
 80082c4:	d19f      	bne.n	8008206 <HAL_ADC_ConfigChannel+0xc6>
 80082c6:	6803      	ldr	r3, [r0, #0]
 80082c8:	4d37      	ldr	r5, [pc, #220]	; (80083a8 <HAL_ADC_ConfigChannel+0x268>)
 80082ca:	402b      	ands	r3, r5
 80082cc:	430b      	orrs	r3, r1
 80082ce:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082d0:	4b36      	ldr	r3, [pc, #216]	; (80083ac <HAL_ADC_ConfigChannel+0x26c>)
 80082d2:	6002      	str	r2, [r0, #0]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	4936      	ldr	r1, [pc, #216]	; (80083b0 <HAL_ADC_ConfigChannel+0x270>)
 80082d8:	f7f7 ff32 	bl	8000140 <__udivsi3>
 80082dc:	3001      	adds	r0, #1
 80082de:	0043      	lsls	r3, r0, #1
 80082e0:	181b      	adds	r3, r3, r0
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d08c      	beq.n	8008206 <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1f9      	bne.n	80082ec <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082f8:	2000      	movs	r0, #0
 80082fa:	e73c      	b.n	8008176 <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80082fc:	422a      	tst	r2, r5
 80082fe:	d005      	beq.n	800830c <HAL_ADC_ConfigChannel+0x1cc>
 8008300:	003a      	movs	r2, r7
 8008302:	e75f      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008304:	20c0      	movs	r0, #192	; 0xc0
 8008306:	680a      	ldr	r2, [r1, #0]
 8008308:	0400      	lsls	r0, r0, #16
 800830a:	e7b4      	b.n	8008276 <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800830c:	072a      	lsls	r2, r5, #28
 800830e:	d501      	bpl.n	8008314 <HAL_ADC_ConfigChannel+0x1d4>
 8008310:	2203      	movs	r2, #3
 8008312:	e757      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008314:	06ea      	lsls	r2, r5, #27
 8008316:	d501      	bpl.n	800831c <HAL_ADC_ConfigChannel+0x1dc>
 8008318:	2204      	movs	r2, #4
 800831a:	e753      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 800831c:	06aa      	lsls	r2, r5, #26
 800831e:	d501      	bpl.n	8008324 <HAL_ADC_ConfigChannel+0x1e4>
 8008320:	2205      	movs	r2, #5
 8008322:	e74f      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008324:	066a      	lsls	r2, r5, #25
 8008326:	d501      	bpl.n	800832c <HAL_ADC_ConfigChannel+0x1ec>
 8008328:	2206      	movs	r2, #6
 800832a:	e74b      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 800832c:	062a      	lsls	r2, r5, #24
 800832e:	d501      	bpl.n	8008334 <HAL_ADC_ConfigChannel+0x1f4>
 8008330:	2207      	movs	r2, #7
 8008332:	e747      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008334:	05ea      	lsls	r2, r5, #23
 8008336:	d501      	bpl.n	800833c <HAL_ADC_ConfigChannel+0x1fc>
 8008338:	2208      	movs	r2, #8
 800833a:	e743      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 800833c:	05aa      	lsls	r2, r5, #22
 800833e:	d501      	bpl.n	8008344 <HAL_ADC_ConfigChannel+0x204>
 8008340:	2209      	movs	r2, #9
 8008342:	e73f      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008344:	056a      	lsls	r2, r5, #21
 8008346:	d501      	bpl.n	800834c <HAL_ADC_ConfigChannel+0x20c>
 8008348:	220a      	movs	r2, #10
 800834a:	e73b      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 800834c:	052a      	lsls	r2, r5, #20
 800834e:	d501      	bpl.n	8008354 <HAL_ADC_ConfigChannel+0x214>
 8008350:	220b      	movs	r2, #11
 8008352:	e737      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008354:	04ea      	lsls	r2, r5, #19
 8008356:	d501      	bpl.n	800835c <HAL_ADC_ConfigChannel+0x21c>
 8008358:	220c      	movs	r2, #12
 800835a:	e733      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 800835c:	04aa      	lsls	r2, r5, #18
 800835e:	d501      	bpl.n	8008364 <HAL_ADC_ConfigChannel+0x224>
 8008360:	220d      	movs	r2, #13
 8008362:	e72f      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008364:	046a      	lsls	r2, r5, #17
 8008366:	d501      	bpl.n	800836c <HAL_ADC_ConfigChannel+0x22c>
 8008368:	220e      	movs	r2, #14
 800836a:	e72b      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 800836c:	042a      	lsls	r2, r5, #16
 800836e:	d504      	bpl.n	800837a <HAL_ADC_ConfigChannel+0x23a>
 8008370:	4652      	mov	r2, sl
 8008372:	9801      	ldr	r0, [sp, #4]
 8008374:	4302      	orrs	r2, r0
 8008376:	4690      	mov	r8, r2
 8008378:	e729      	b.n	80081ce <HAL_ADC_ConfigChannel+0x8e>
 800837a:	03ea      	lsls	r2, r5, #15
 800837c:	d501      	bpl.n	8008382 <HAL_ADC_ConfigChannel+0x242>
 800837e:	2210      	movs	r2, #16
 8008380:	e720      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008382:	03aa      	lsls	r2, r5, #14
 8008384:	d501      	bpl.n	800838a <HAL_ADC_ConfigChannel+0x24a>
 8008386:	2211      	movs	r2, #17
 8008388:	e71c      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 800838a:	036a      	lsls	r2, r5, #13
 800838c:	d400      	bmi.n	8008390 <HAL_ADC_ConfigChannel+0x250>
 800838e:	e71e      	b.n	80081ce <HAL_ADC_ConfigChannel+0x8e>
 8008390:	2212      	movs	r2, #18
 8008392:	e717      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x84>
 8008394:	07ffff00 	.word	0x07ffff00
 8008398:	40012708 	.word	0x40012708
 800839c:	b0001000 	.word	0xb0001000
 80083a0:	b8004000 	.word	0xb8004000
 80083a4:	b4002000 	.word	0xb4002000
 80083a8:	fe3fffff 	.word	0xfe3fffff
 80083ac:	2000011c 	.word	0x2000011c
 80083b0:	00030d40 	.word	0x00030d40

080083b4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 80083b4:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80083b6:	2201      	movs	r2, #1
{
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80083bc:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083be:	6803      	ldr	r3, [r0, #0]
{
 80083c0:	0004      	movs	r4, r0
 80083c2:	6899      	ldr	r1, [r3, #8]
 80083c4:	420a      	tst	r2, r1
 80083c6:	d11f      	bne.n	8008408 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80083c8:	6898      	ldr	r0, [r3, #8]
 80083ca:	4928      	ldr	r1, [pc, #160]	; (800846c <ADC_Enable+0xb8>)
 80083cc:	4208      	tst	r0, r1
 80083ce:	d11e      	bne.n	800840e <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 80083d0:	6899      	ldr	r1, [r3, #8]
 80083d2:	4827      	ldr	r0, [pc, #156]	; (8008470 <ADC_Enable+0xbc>)
 80083d4:	4001      	ands	r1, r0
 80083d6:	430a      	orrs	r2, r1
 80083d8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80083da:	4b26      	ldr	r3, [pc, #152]	; (8008474 <ADC_Enable+0xc0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80083de:	021b      	lsls	r3, r3, #8
 80083e0:	d50f      	bpl.n	8008402 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80083e2:	4b25      	ldr	r3, [pc, #148]	; (8008478 <ADC_Enable+0xc4>)
 80083e4:	4925      	ldr	r1, [pc, #148]	; (800847c <ADC_Enable+0xc8>)
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	f7f7 feaa 	bl	8000140 <__udivsi3>
 80083ec:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80083ee:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80083f0:	9b01      	ldr	r3, [sp, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <ADC_Enable+0x4e>
        wait_loop_index--;
 80083f6:	9b01      	ldr	r3, [sp, #4]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f9      	bne.n	80083f6 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8008402:	7e63      	ldrb	r3, [r4, #25]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d10b      	bne.n	8008420 <ADC_Enable+0x6c>
  return HAL_OK;
 8008408:	2000      	movs	r0, #0
}
 800840a:	b003      	add	sp, #12
 800840c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800840e:	2110      	movs	r1, #16
 8008410:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8008412:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008414:	430b      	orrs	r3, r1
 8008416:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008418:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800841a:	4313      	orrs	r3, r2
 800841c:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800841e:	e7f4      	b.n	800840a <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8008420:	f7ff fcee 	bl	8007e00 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008424:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8008426:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	07d2      	lsls	r2, r2, #31
 800842c:	d4ec      	bmi.n	8008408 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800842e:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8008430:	4f0f      	ldr	r7, [pc, #60]	; (8008470 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	4215      	tst	r5, r2
 8008436:	d103      	bne.n	8008440 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	403a      	ands	r2, r7
 800843c:	432a      	orrs	r2, r5
 800843e:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008440:	f7ff fcde 	bl	8007e00 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008444:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008446:	1b80      	subs	r0, r0, r6
 8008448:	2802      	cmp	r0, #2
 800844a:	d902      	bls.n	8008452 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4215      	tst	r5, r2
 8008450:	d003      	beq.n	800845a <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	4215      	tst	r5, r2
 8008456:	d0ec      	beq.n	8008432 <ADC_Enable+0x7e>
 8008458:	e7d6      	b.n	8008408 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800845a:	2210      	movs	r2, #16
 800845c:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 800845e:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008460:	4313      	orrs	r3, r2
 8008462:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008464:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008466:	432b      	orrs	r3, r5
 8008468:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800846a:	e7ce      	b.n	800840a <ADC_Enable+0x56>
 800846c:	80000017 	.word	0x80000017
 8008470:	7fffffe8 	.word	0x7fffffe8
 8008474:	40012708 	.word	0x40012708
 8008478:	2000011c 	.word	0x2000011c
 800847c:	00030d40 	.word	0x00030d40

08008480 <HAL_ADC_Start_DMA>:
{
 8008480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008482:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008484:	6805      	ldr	r5, [r0, #0]
{
 8008486:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008488:	68ae      	ldr	r6, [r5, #8]
 800848a:	4688      	mov	r8, r1
 800848c:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 800848e:	2002      	movs	r0, #2
{
 8008490:	b500      	push	{lr}
 8008492:	0776      	lsls	r6, r6, #29
 8008494:	d414      	bmi.n	80084c0 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8008496:	2254      	movs	r2, #84	; 0x54
 8008498:	5ca3      	ldrb	r3, [r4, r2]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d010      	beq.n	80084c0 <HAL_ADC_Start_DMA+0x40>
 800849e:	2301      	movs	r3, #1
 80084a0:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80084a2:	68ea      	ldr	r2, [r5, #12]
 80084a4:	4213      	tst	r3, r2
 80084a6:	d106      	bne.n	80084b6 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80084a8:	68aa      	ldr	r2, [r5, #8]
 80084aa:	4213      	tst	r3, r2
 80084ac:	d131      	bne.n	8008512 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80084ae:	2201      	movs	r2, #1
 80084b0:	68eb      	ldr	r3, [r5, #12]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80084b6:	0020      	movs	r0, r4
 80084b8:	f7ff ff7c 	bl	80083b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80084bc:	2800      	cmp	r0, #0
 80084be:	d002      	beq.n	80084c6 <HAL_ADC_Start_DMA+0x46>
}
 80084c0:	bc80      	pop	{r7}
 80084c2:	46b8      	mov	r8, r7
 80084c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80084c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80084c8:	4b15      	ldr	r3, [pc, #84]	; (8008520 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80084ca:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80084cc:	401a      	ands	r2, r3
 80084ce:	2380      	movs	r3, #128	; 0x80
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	4313      	orrs	r3, r2
 80084d4:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80084d6:	4b13      	ldr	r3, [pc, #76]	; (8008524 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 80084d8:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80084da:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80084dc:	4b12      	ldr	r3, [pc, #72]	; (8008528 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80084de:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80084e0:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80084e2:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80084e4:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80084e6:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80084e8:	231c      	movs	r3, #28
 80084ea:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 80084ec:	3338      	adds	r3, #56	; 0x38
 80084ee:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80084f0:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80084f2:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80084f4:	4313      	orrs	r3, r2
 80084f6:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80084f8:	4642      	mov	r2, r8
 80084fa:	003b      	movs	r3, r7
 80084fc:	3140      	adds	r1, #64	; 0x40
 80084fe:	f000 f8ef 	bl	80086e0 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008502:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8008504:	490a      	ldr	r1, [pc, #40]	; (8008530 <HAL_ADC_Start_DMA+0xb0>)
 8008506:	6893      	ldr	r3, [r2, #8]
 8008508:	400b      	ands	r3, r1
 800850a:	2104      	movs	r1, #4
 800850c:	430b      	orrs	r3, r1
 800850e:	6093      	str	r3, [r2, #8]
}
 8008510:	e7d6      	b.n	80084c0 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 8008512:	68ab      	ldr	r3, [r5, #8]
 8008514:	4a06      	ldr	r2, [pc, #24]	; (8008530 <HAL_ADC_Start_DMA+0xb0>)
 8008516:	4013      	ands	r3, r2
 8008518:	4303      	orrs	r3, r0
 800851a:	60ab      	str	r3, [r5, #8]
}
 800851c:	e7c7      	b.n	80084ae <HAL_ADC_Start_DMA+0x2e>
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	fffff0fe 	.word	0xfffff0fe
 8008524:	080080c1 	.word	0x080080c1
 8008528:	08008095 	.word	0x08008095
 800852c:	080080a5 	.word	0x080080a5
 8008530:	7fffffe8 	.word	0x7fffffe8

08008534 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008534:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8008536:	2800      	cmp	r0, #0
 8008538:	db14      	blt.n	8008564 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800853a:	4b15      	ldr	r3, [pc, #84]	; (8008590 <HAL_NVIC_SetPriority+0x5c>)
 800853c:	2203      	movs	r2, #3
 800853e:	469c      	mov	ip, r3
 8008540:	23ff      	movs	r3, #255	; 0xff
 8008542:	0884      	lsrs	r4, r0, #2
 8008544:	4002      	ands	r2, r0
 8008546:	0018      	movs	r0, r3
 8008548:	26c0      	movs	r6, #192	; 0xc0
 800854a:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800854c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800854e:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008550:	400b      	ands	r3, r1
 8008552:	4093      	lsls	r3, r2
 8008554:	00a4      	lsls	r4, r4, #2
 8008556:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008558:	00b6      	lsls	r6, r6, #2
 800855a:	59a5      	ldr	r5, [r4, r6]
 800855c:	4385      	bics	r5, r0
 800855e:	432b      	orrs	r3, r5
 8008560:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8008562:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008564:	4a0b      	ldr	r2, [pc, #44]	; (8008594 <HAL_NVIC_SetPriority+0x60>)
 8008566:	230f      	movs	r3, #15
 8008568:	4694      	mov	ip, r2
 800856a:	2203      	movs	r2, #3
 800856c:	4003      	ands	r3, r0
 800856e:	4010      	ands	r0, r2
 8008570:	32fc      	adds	r2, #252	; 0xfc
 8008572:	0015      	movs	r5, r2
 8008574:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008576:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008578:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800857a:	400a      	ands	r2, r1
 800857c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800857e:	3b08      	subs	r3, #8
 8008580:	089b      	lsrs	r3, r3, #2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4463      	add	r3, ip
 8008586:	69dc      	ldr	r4, [r3, #28]
 8008588:	43ac      	bics	r4, r5
 800858a:	4322      	orrs	r2, r4
 800858c:	61da      	str	r2, [r3, #28]
 800858e:	e7e8      	b.n	8008562 <HAL_NVIC_SetPriority+0x2e>
 8008590:	e000e100 	.word	0xe000e100
 8008594:	e000ed00 	.word	0xe000ed00

08008598 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008598:	2800      	cmp	r0, #0
 800859a:	db05      	blt.n	80085a8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800859c:	221f      	movs	r2, #31
 800859e:	2301      	movs	r3, #1
 80085a0:	4002      	ands	r2, r0
 80085a2:	4093      	lsls	r3, r2
 80085a4:	4a01      	ldr	r2, [pc, #4]	; (80085ac <HAL_NVIC_EnableIRQ+0x14>)
 80085a6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80085a8:	4770      	bx	lr
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	e000e100 	.word	0xe000e100

080085b0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085b2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80085b4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80085b6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80085b8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	d002      	beq.n	80085c4 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085be:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80085c0:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80085c2:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80085c4:	241c      	movs	r4, #28
 80085c6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80085c8:	4e08      	ldr	r6, [pc, #32]	; (80085ec <DMA_SetConfig+0x3c>)
 80085ca:	4025      	ands	r5, r4
 80085cc:	3c1b      	subs	r4, #27
 80085ce:	40ac      	lsls	r4, r5
 80085d0:	6877      	ldr	r7, [r6, #4]
 80085d2:	433c      	orrs	r4, r7
 80085d4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80085d6:	6804      	ldr	r4, [r0, #0]
 80085d8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085da:	6883      	ldr	r3, [r0, #8]
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d002      	beq.n	80085e6 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80085e0:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80085e2:	60e2      	str	r2, [r4, #12]
  }
}
 80085e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80085e6:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80085e8:	60e1      	str	r1, [r4, #12]
 80085ea:	e7fb      	b.n	80085e4 <DMA_SetConfig+0x34>
 80085ec:	40020000 	.word	0x40020000

080085f0 <HAL_DMA_Init>:
{
 80085f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f2:	46c6      	mov	lr, r8
 80085f4:	0004      	movs	r4, r0
 80085f6:	b500      	push	{lr}
  if (hdma == NULL)
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d062      	beq.n	80086c2 <HAL_DMA_Init+0xd2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085fc:	6805      	ldr	r5, [r0, #0]
 80085fe:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <HAL_DMA_Init+0xd8>)
 8008600:	2114      	movs	r1, #20
 8008602:	18e8      	adds	r0, r5, r3
 8008604:	f7f7 fd9c 	bl	8000140 <__udivsi3>
 8008608:	0083      	lsls	r3, r0, #2
 800860a:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800860c:	2202      	movs	r2, #2
 800860e:	2325      	movs	r3, #37	; 0x25
 8008610:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	4a2d      	ldr	r2, [pc, #180]	; (80086cc <HAL_DMA_Init+0xdc>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008616:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008618:	4013      	ands	r3, r2
 800861a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800861c:	68e3      	ldr	r3, [r4, #12]
 800861e:	6921      	ldr	r1, [r4, #16]
 8008620:	4333      	orrs	r3, r6
 8008622:	430b      	orrs	r3, r1
 8008624:	6961      	ldr	r1, [r4, #20]
 8008626:	682a      	ldr	r2, [r5, #0]
 8008628:	430b      	orrs	r3, r1
 800862a:	69a1      	ldr	r1, [r4, #24]
 800862c:	430b      	orrs	r3, r1
 800862e:	69e1      	ldr	r1, [r4, #28]
 8008630:	430b      	orrs	r3, r1
 8008632:	6a21      	ldr	r1, [r4, #32]
 8008634:	430b      	orrs	r3, r1
 8008636:	4313      	orrs	r3, r2
 8008638:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800863a:	4b25      	ldr	r3, [pc, #148]	; (80086d0 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800863c:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800863e:	469c      	mov	ip, r3
 8008640:	4460      	add	r0, ip
 8008642:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008644:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008646:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008648:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800864a:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800864c:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800864e:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008650:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008652:	f7f7 fd75 	bl	8000140 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008656:	231f      	movs	r3, #31
 8008658:	2201      	movs	r2, #1
 800865a:	4003      	ands	r3, r0
 800865c:	0010      	movs	r0, r2
 800865e:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008660:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008662:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008664:	01db      	lsls	r3, r3, #7
 8008666:	429e      	cmp	r6, r3
 8008668:	d021      	beq.n	80086ae <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800866a:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800866c:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800866e:	6861      	ldr	r1, [r4, #4]
 8008670:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008672:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008674:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008676:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008678:	2903      	cmp	r1, #3
 800867a:	d81d      	bhi.n	80086b8 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800867c:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800867e:	4916      	ldr	r1, [pc, #88]	; (80086d8 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008680:	4d16      	ldr	r5, [pc, #88]	; (80086dc <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008682:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008684:	3b01      	subs	r3, #1
 8008686:	4003      	ands	r3, r0
 8008688:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800868a:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800868c:	0089      	lsls	r1, r1, #2
 800868e:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008690:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008692:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008694:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008696:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800869a:	2225      	movs	r2, #37	; 0x25
 800869c:	2101      	movs	r1, #1
  return HAL_OK;
 800869e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086a0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80086a2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80086a4:	3a01      	subs	r2, #1
 80086a6:	54a3      	strb	r3, [r4, r2]
}
 80086a8:	bc80      	pop	{r7}
 80086aa:	46b8      	mov	r8, r7
 80086ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80086ae:	2300      	movs	r3, #0
 80086b0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80086b2:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086b4:	4643      	mov	r3, r8
 80086b6:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80086bc:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80086be:	65a3      	str	r3, [r4, #88]	; 0x58
 80086c0:	e7ea      	b.n	8008698 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 80086c2:	2001      	movs	r0, #1
 80086c4:	e7f0      	b.n	80086a8 <HAL_DMA_Init+0xb8>
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	bffdfff8 	.word	0xbffdfff8
 80086cc:	ffff800f 	.word	0xffff800f
 80086d0:	10008200 	.word	0x10008200
 80086d4:	40020880 	.word	0x40020880
 80086d8:	1000823f 	.word	0x1000823f
 80086dc:	40020940 	.word	0x40020940

080086e0 <HAL_DMA_Start_IT>:
{
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80086e4:	2024      	movs	r0, #36	; 0x24
 80086e6:	5c25      	ldrb	r5, [r4, r0]
 80086e8:	2d01      	cmp	r5, #1
 80086ea:	d035      	beq.n	8008758 <HAL_DMA_Start_IT+0x78>
 80086ec:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80086ee:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 80086f0:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80086f2:	5da5      	ldrb	r5, [r4, r6]
 80086f4:	b2ef      	uxtb	r7, r5
 80086f6:	2d01      	cmp	r5, #1
 80086f8:	d005      	beq.n	8008706 <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80086fa:	2380      	movs	r3, #128	; 0x80
 80086fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80086fe:	2300      	movs	r3, #0
 8008700:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 8008702:	2001      	movs	r0, #1
}
 8008704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008706:	3822      	subs	r0, #34	; 0x22
 8008708:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800870a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800870c:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800870e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8008710:	6828      	ldr	r0, [r5, #0]
 8008712:	43b8      	bics	r0, r7
 8008714:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008716:	0020      	movs	r0, r4
 8008718:	f7ff ff4a 	bl	80085b0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800871c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800871e:	2b00      	cmp	r3, #0
 8008720:	d01c      	beq.n	800875c <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008722:	220e      	movs	r2, #14
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	4313      	orrs	r3, r2
 8008728:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800872a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	03db      	lsls	r3, r3, #15
 8008730:	d504      	bpl.n	800873c <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008732:	2380      	movs	r3, #128	; 0x80
 8008734:	6811      	ldr	r1, [r2, #0]
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	430b      	orrs	r3, r1
 800873a:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800873c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800873e:	2b00      	cmp	r3, #0
 8008740:	d004      	beq.n	800874c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008742:	2280      	movs	r2, #128	; 0x80
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	0052      	lsls	r2, r2, #1
 8008748:	430a      	orrs	r2, r1
 800874a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800874c:	2201      	movs	r2, #1
 800874e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008750:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008752:	4313      	orrs	r3, r2
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	e7d5      	b.n	8008704 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8008758:	2002      	movs	r0, #2
 800875a:	e7d3      	b.n	8008704 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800875c:	2204      	movs	r2, #4
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	4393      	bics	r3, r2
 8008762:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	3206      	adds	r2, #6
 8008768:	4313      	orrs	r3, r2
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	e7dd      	b.n	800872a <HAL_DMA_Start_IT+0x4a>
 800876e:	46c0      	nop			; (mov r8, r8)

08008770 <HAL_DMA_Abort>:
{
 8008770:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8008772:	2800      	cmp	r0, #0
 8008774:	d034      	beq.n	80087e0 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008776:	2325      	movs	r3, #37	; 0x25
 8008778:	5cc3      	ldrb	r3, [r0, r3]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d129      	bne.n	80087d2 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800877e:	210e      	movs	r1, #14
 8008780:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008782:	4c18      	ldr	r4, [pc, #96]	; (80087e4 <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008784:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008786:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008788:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800878a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800878c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800878e:	680b      	ldr	r3, [r1, #0]
 8008790:	4023      	ands	r3, r4
 8008792:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8008794:	2301      	movs	r3, #1
 8008796:	6811      	ldr	r1, [r2, #0]
 8008798:	4399      	bics	r1, r3
 800879a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800879c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800879e:	4912      	ldr	r1, [pc, #72]	; (80087e8 <HAL_DMA_Abort+0x78>)
 80087a0:	4032      	ands	r2, r6
 80087a2:	4093      	lsls	r3, r2
 80087a4:	684d      	ldr	r5, [r1, #4]
 80087a6:	432b      	orrs	r3, r5
 80087a8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087aa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80087ac:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80087ae:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80087b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d005      	beq.n	80087c2 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	4022      	ands	r2, r4
 80087ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80087be:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80087c0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80087c2:	2325      	movs	r3, #37	; 0x25
 80087c4:	2201      	movs	r2, #1
 80087c6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80087c8:	2200      	movs	r2, #0
 80087ca:	3b01      	subs	r3, #1
 80087cc:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80087ce:	2000      	movs	r0, #0
}
 80087d0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087d2:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80087d4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087d6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80087d8:	3320      	adds	r3, #32
 80087da:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80087dc:	2001      	movs	r0, #1
 80087de:	e7f7      	b.n	80087d0 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 80087e0:	2001      	movs	r0, #1
 80087e2:	e7f5      	b.n	80087d0 <HAL_DMA_Abort+0x60>
 80087e4:	fffffeff 	.word	0xfffffeff
 80087e8:	40020000 	.word	0x40020000

080087ec <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80087ec:	2325      	movs	r3, #37	; 0x25
{
 80087ee:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80087f0:	5cc3      	ldrb	r3, [r0, r3]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d003      	beq.n	80087fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087f6:	2304      	movs	r3, #4
 80087f8:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80087fa:	2001      	movs	r0, #1
}
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087fe:	210e      	movs	r1, #14
 8008800:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8008802:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008804:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008806:	4c16      	ldr	r4, [pc, #88]	; (8008860 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008808:	438b      	bics	r3, r1
 800880a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800880c:	2301      	movs	r3, #1
 800880e:	6811      	ldr	r1, [r2, #0]
 8008810:	4399      	bics	r1, r3
 8008812:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008814:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008816:	680a      	ldr	r2, [r1, #0]
 8008818:	4022      	ands	r2, r4
 800881a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800881c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800881e:	4911      	ldr	r1, [pc, #68]	; (8008864 <HAL_DMA_Abort_IT+0x78>)
 8008820:	4032      	ands	r2, r6
 8008822:	4093      	lsls	r3, r2
 8008824:	684d      	ldr	r5, [r1, #4]
 8008826:	432b      	orrs	r3, r5
 8008828:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800882a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800882c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800882e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8008830:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	4022      	ands	r2, r4
 800883a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800883c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800883e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008840:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008842:	2325      	movs	r3, #37	; 0x25
 8008844:	2201      	movs	r2, #1
 8008846:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8008848:	2200      	movs	r2, #0
 800884a:	3b01      	subs	r3, #1
 800884c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800884e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8008854:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008856:	2000      	movs	r0, #0
 8008858:	e7d0      	b.n	80087fc <HAL_DMA_Abort_IT+0x10>
 800885a:	2000      	movs	r0, #0
 800885c:	e7ce      	b.n	80087fc <HAL_DMA_Abort_IT+0x10>
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	fffffeff 	.word	0xfffffeff
 8008864:	40020000 	.word	0x40020000

08008868 <HAL_DMA_IRQHandler>:
{
 8008868:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800886a:	211c      	movs	r1, #28
 800886c:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8008870:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8008872:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008874:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8008876:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008878:	400b      	ands	r3, r1
 800887a:	0021      	movs	r1, r4
 800887c:	4099      	lsls	r1, r3
 800887e:	420a      	tst	r2, r1
 8008880:	d010      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x3c>
 8008882:	422c      	tst	r4, r5
 8008884:	d00e      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008886:	6833      	ldr	r3, [r6, #0]
 8008888:	069b      	lsls	r3, r3, #26
 800888a:	d402      	bmi.n	8008892 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800888c:	6833      	ldr	r3, [r6, #0]
 800888e:	43a3      	bics	r3, r4
 8008890:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8008892:	4b22      	ldr	r3, [pc, #136]	; (800891c <HAL_DMA_IRQHandler+0xb4>)
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	4311      	orrs	r1, r2
 8008898:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800889a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800889c:	2b00      	cmp	r3, #0
 800889e:	d000      	beq.n	80088a2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80088a0:	4798      	blx	r3
}
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80088a4:	2402      	movs	r4, #2
 80088a6:	0021      	movs	r1, r4
 80088a8:	4099      	lsls	r1, r3
 80088aa:	420a      	tst	r2, r1
 80088ac:	d017      	beq.n	80088de <HAL_DMA_IRQHandler+0x76>
 80088ae:	422c      	tst	r4, r5
 80088b0:	d015      	beq.n	80088de <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088b2:	6833      	ldr	r3, [r6, #0]
 80088b4:	069b      	lsls	r3, r3, #26
 80088b6:	d406      	bmi.n	80088c6 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80088b8:	220a      	movs	r2, #10
 80088ba:	6833      	ldr	r3, [r6, #0]
 80088bc:	4393      	bics	r3, r2
 80088be:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80088c0:	2325      	movs	r3, #37	; 0x25
 80088c2:	3a09      	subs	r2, #9
 80088c4:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80088c6:	4b15      	ldr	r3, [pc, #84]	; (800891c <HAL_DMA_IRQHandler+0xb4>)
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	4311      	orrs	r1, r2
 80088cc:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80088ce:	2200      	movs	r2, #0
 80088d0:	2324      	movs	r3, #36	; 0x24
 80088d2:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80088d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0e3      	beq.n	80088a2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80088da:	4798      	blx	r3
  return;
 80088dc:	e7e1      	b.n	80088a2 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80088de:	2108      	movs	r1, #8
 80088e0:	000c      	movs	r4, r1
 80088e2:	409c      	lsls	r4, r3
 80088e4:	4222      	tst	r2, r4
 80088e6:	d0dc      	beq.n	80088a2 <HAL_DMA_IRQHandler+0x3a>
 80088e8:	4229      	tst	r1, r5
 80088ea:	d0da      	beq.n	80088a2 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088ec:	6832      	ldr	r2, [r6, #0]
 80088ee:	3106      	adds	r1, #6
 80088f0:	438a      	bics	r2, r1
 80088f2:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80088f4:	2201      	movs	r2, #1
 80088f6:	0015      	movs	r5, r2
 80088f8:	409d      	lsls	r5, r3
 80088fa:	002b      	movs	r3, r5
 80088fc:	4907      	ldr	r1, [pc, #28]	; (800891c <HAL_DMA_IRQHandler+0xb4>)
 80088fe:	684c      	ldr	r4, [r1, #4]
 8008900:	4323      	orrs	r3, r4
 8008902:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008904:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008906:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8008908:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800890a:	2200      	movs	r2, #0
 800890c:	3b01      	subs	r3, #1
 800890e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8008910:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0c5      	beq.n	80088a2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8008916:	4798      	blx	r3
  return;
 8008918:	e7c3      	b.n	80088a2 <HAL_DMA_IRQHandler+0x3a>
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	40020000 	.word	0x40020000

08008920 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8008920:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008922:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008924:	6819      	ldr	r1, [r3, #0]
{
 8008926:	b570      	push	{r4, r5, r6, lr}
 8008928:	0004      	movs	r4, r0
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800892a:	420a      	tst	r2, r1
 800892c:	d00f      	beq.n	800894e <HAL_DMAEx_MUX_IRQHandler+0x2e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800892e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8008930:	4d13      	ldr	r5, [pc, #76]	; (8008980 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 8008932:	6801      	ldr	r1, [r0, #0]
 8008934:	4029      	ands	r1, r5
 8008936:	6001      	str	r1, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008938:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800893a:	2380      	movs	r3, #128	; 0x80
 800893c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4313      	orrs	r3, r2
 8008942:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8008944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_DMAEx_MUX_IRQHandler+0x2e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800894a:	0020      	movs	r0, r4
 800894c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800894e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008950:	2b00      	cmp	r3, #0
 8008952:	d013      	beq.n	800897c <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8008954:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008956:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008958:	6810      	ldr	r0, [r2, #0]
 800895a:	4201      	tst	r1, r0
 800895c:	d00e      	beq.n	800897c <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4d07      	ldr	r5, [pc, #28]	; (8008980 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 8008962:	4028      	ands	r0, r5
 8008964:	6018      	str	r0, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8008966:	2380      	movs	r3, #128	; 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008968:	6051      	str	r1, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800896a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	4313      	orrs	r3, r2
 8008970:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8008972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008978:	0020      	movs	r0, r4
 800897a:	4798      	blx	r3
      }
    }
  }
}
 800897c:	bd70      	pop	{r4, r5, r6, pc}
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	fffffeff 	.word	0xfffffeff

08008984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008986:	46de      	mov	lr, fp
 8008988:	4657      	mov	r7, sl
 800898a:	464e      	mov	r6, r9
 800898c:	4645      	mov	r5, r8
 800898e:	b5e0      	push	{r5, r6, r7, lr}
 8008990:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008992:	6809      	ldr	r1, [r1, #0]
 8008994:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8008996:	2300      	movs	r3, #0
{
 8008998:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800899a:	2900      	cmp	r1, #0
 800899c:	d07a      	beq.n	8008a94 <HAL_GPIO_Init+0x110>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800899e:	2601      	movs	r6, #1
 80089a0:	000c      	movs	r4, r1
 80089a2:	409e      	lsls	r6, r3
 80089a4:	4034      	ands	r4, r6
 80089a6:	46a2      	mov	sl, r4

    if (iocurrent != 0x00u)
 80089a8:	4231      	tst	r1, r6
 80089aa:	d06d      	beq.n	8008a88 <HAL_GPIO_Init+0x104>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089ac:	465c      	mov	r4, fp
 80089ae:	2503      	movs	r5, #3
 80089b0:	6864      	ldr	r4, [r4, #4]
 80089b2:	4025      	ands	r5, r4
 80089b4:	46ac      	mov	ip, r5
 80089b6:	3d01      	subs	r5, #1
 80089b8:	2d01      	cmp	r5, #1
 80089ba:	d800      	bhi.n	80089be <HAL_GPIO_Init+0x3a>
 80089bc:	e071      	b.n	8008aa2 <HAL_GPIO_Init+0x11e>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089be:	4665      	mov	r5, ip
 80089c0:	2d03      	cmp	r5, #3
 80089c2:	d000      	beq.n	80089c6 <HAL_GPIO_Init+0x42>
 80089c4:	e0b4      	b.n	8008b30 <HAL_GPIO_Init+0x1ac>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80089c6:	4666      	mov	r6, ip
 80089c8:	4096      	lsls	r6, r2
 80089ca:	43f5      	mvns	r5, r6
 80089cc:	9500      	str	r5, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089ce:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80089d0:	9d00      	ldr	r5, [sp, #0]
 80089d2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80089d4:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80089d6:	25c0      	movs	r5, #192	; 0xc0
 80089d8:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 80089da:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80089dc:	422c      	tst	r4, r5
 80089de:	d053      	beq.n	8008a88 <HAL_GPIO_Init+0x104>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80089e0:	4e67      	ldr	r6, [pc, #412]	; (8008b80 <HAL_GPIO_Init+0x1fc>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80089e2:	2703      	movs	r7, #3
 80089e4:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 80089e6:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80089e8:	401f      	ands	r7, r3
 80089ea:	00ff      	lsls	r7, r7, #3
 80089ec:	00ad      	lsls	r5, r5, #2
 80089ee:	4465      	add	r5, ip
 80089f0:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 80089f2:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80089f4:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 80089f6:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80089f8:	4666      	mov	r6, ip
 80089fa:	40b7      	lsls	r7, r6
 80089fc:	003e      	movs	r6, r7
 80089fe:	464f      	mov	r7, r9
 8008a00:	43b7      	bics	r7, r6
 8008a02:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008a04:	27a0      	movs	r7, #160	; 0xa0
 8008a06:	05ff      	lsls	r7, r7, #23
 8008a08:	42b8      	cmp	r0, r7
 8008a0a:	d012      	beq.n	8008a32 <HAL_GPIO_Init+0xae>
 8008a0c:	4f5d      	ldr	r7, [pc, #372]	; (8008b84 <HAL_GPIO_Init+0x200>)
 8008a0e:	42b8      	cmp	r0, r7
 8008a10:	d100      	bne.n	8008a14 <HAL_GPIO_Init+0x90>
 8008a12:	e0a5      	b.n	8008b60 <HAL_GPIO_Init+0x1dc>
 8008a14:	4f5c      	ldr	r7, [pc, #368]	; (8008b88 <HAL_GPIO_Init+0x204>)
 8008a16:	42b8      	cmp	r0, r7
 8008a18:	d100      	bne.n	8008a1c <HAL_GPIO_Init+0x98>
 8008a1a:	e0a9      	b.n	8008b70 <HAL_GPIO_Init+0x1ec>
 8008a1c:	4f5b      	ldr	r7, [pc, #364]	; (8008b8c <HAL_GPIO_Init+0x208>)
 8008a1e:	42b8      	cmp	r0, r7
 8008a20:	d100      	bne.n	8008a24 <HAL_GPIO_Init+0xa0>
 8008a22:	e096      	b.n	8008b52 <HAL_GPIO_Init+0x1ce>
 8008a24:	4666      	mov	r6, ip
 8008a26:	2705      	movs	r7, #5
 8008a28:	40b7      	lsls	r7, r6
 8008a2a:	003e      	movs	r6, r7
 8008a2c:	464f      	mov	r7, r9
 8008a2e:	4337      	orrs	r7, r6
 8008a30:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8008a32:	464e      	mov	r6, r9
 8008a34:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
 8008a36:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a38:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 8008a3a:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR1;
 8008a3c:	4d50      	ldr	r5, [pc, #320]	; (8008b80 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a3e:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8008a40:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 8008a42:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a44:	423c      	tst	r4, r7
 8008a46:	d000      	beq.n	8008a4a <HAL_GPIO_Init+0xc6>
 8008a48:	e080      	b.n	8008b4c <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 8008a4a:	4035      	ands	r5, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008a4c:	2780      	movs	r7, #128	; 0x80
        EXTI->RTSR1 = temp;
 8008a4e:	4e4c      	ldr	r6, [pc, #304]	; (8008b80 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008a50:	03bf      	lsls	r7, r7, #14
        EXTI->RTSR1 = temp;
 8008a52:	6035      	str	r5, [r6, #0]
        temp = EXTI->FTSR1;
 8008a54:	6875      	ldr	r5, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008a56:	423c      	tst	r4, r7
 8008a58:	d000      	beq.n	8008a5c <HAL_GPIO_Init+0xd8>
 8008a5a:	e074      	b.n	8008b46 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 8008a5c:	4646      	mov	r6, r8
 8008a5e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8008a60:	4e47      	ldr	r6, [pc, #284]	; (8008b80 <HAL_GPIO_Init+0x1fc>)
 8008a62:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008a64:	2584      	movs	r5, #132	; 0x84
 8008a66:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008a68:	03a7      	lsls	r7, r4, #14
 8008a6a:	d469      	bmi.n	8008b40 <HAL_GPIO_Init+0x1bc>
        temp &= ~(iocurrent);
 8008a6c:	4646      	mov	r6, r8
 8008a6e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8008a70:	2784      	movs	r7, #132	; 0x84
 8008a72:	4e43      	ldr	r6, [pc, #268]	; (8008b80 <HAL_GPIO_Init+0x1fc>)
 8008a74:	51f5      	str	r5, [r6, r7]

        temp = EXTI->IMR1;
 8008a76:	2580      	movs	r5, #128	; 0x80
 8008a78:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008a7a:	03e4      	lsls	r4, r4, #15
 8008a7c:	d45d      	bmi.n	8008b3a <HAL_GPIO_Init+0x1b6>
        temp &= ~(iocurrent);
 8008a7e:	4646      	mov	r6, r8
 8008a80:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8008a82:	2580      	movs	r5, #128	; 0x80
 8008a84:	4c3e      	ldr	r4, [pc, #248]	; (8008b80 <HAL_GPIO_Init+0x1fc>)
 8008a86:	5166      	str	r6, [r4, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a88:	000c      	movs	r4, r1
      }
    }

    position++;
 8008a8a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a8c:	40dc      	lsrs	r4, r3
 8008a8e:	3202      	adds	r2, #2
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	d184      	bne.n	800899e <HAL_GPIO_Init+0x1a>
  }
}
 8008a94:	b003      	add	sp, #12
 8008a96:	bcf0      	pop	{r4, r5, r6, r7}
 8008a98:	46bb      	mov	fp, r7
 8008a9a:	46b2      	mov	sl, r6
 8008a9c:	46a9      	mov	r9, r5
 8008a9e:	46a0      	mov	r8, r4
 8008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8008aa2:	6885      	ldr	r5, [r0, #8]
 8008aa4:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008aa6:	2503      	movs	r5, #3
 8008aa8:	4095      	lsls	r5, r2
 8008aaa:	46a8      	mov	r8, r5
 8008aac:	43ed      	mvns	r5, r5
 8008aae:	464f      	mov	r7, r9
 8008ab0:	9500      	str	r5, [sp, #0]
 8008ab2:	4645      	mov	r5, r8
 8008ab4:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008ab6:	465d      	mov	r5, fp
 8008ab8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008aba:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008abc:	002f      	movs	r7, r5
 8008abe:	4097      	lsls	r7, r2
 8008ac0:	46b8      	mov	r8, r7
 8008ac2:	464f      	mov	r7, r9
 8008ac4:	4645      	mov	r5, r8
 8008ac6:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8008ac8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008aca:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008acc:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ace:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ad0:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ad2:	0926      	lsrs	r6, r4, #4
 8008ad4:	402e      	ands	r6, r5
 8008ad6:	409e      	lsls	r6, r3
 8008ad8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8008ada:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8008adc:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008ade:	9d00      	ldr	r5, [sp, #0]
 8008ae0:	402e      	ands	r6, r5
 8008ae2:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008ae4:	465e      	mov	r6, fp
 8008ae6:	68b6      	ldr	r6, [r6, #8]
 8008ae8:	4647      	mov	r7, r8
 8008aea:	4096      	lsls	r6, r2
 8008aec:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8008aee:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008af0:	4667      	mov	r7, ip
 8008af2:	4666      	mov	r6, ip
 8008af4:	4096      	lsls	r6, r2
 8008af6:	2f02      	cmp	r7, #2
 8008af8:	d000      	beq.n	8008afc <HAL_GPIO_Init+0x178>
 8008afa:	e768      	b.n	80089ce <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3u];
 8008afc:	08dd      	lsrs	r5, r3, #3
 8008afe:	00ad      	lsls	r5, r5, #2
 8008b00:	46ac      	mov	ip, r5
 8008b02:	4484      	add	ip, r0
 8008b04:	4665      	mov	r5, ip
 8008b06:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b08:	2507      	movs	r5, #7
 8008b0a:	401d      	ands	r5, r3
 8008b0c:	00ad      	lsls	r5, r5, #2
 8008b0e:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8008b10:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b12:	250f      	movs	r5, #15
 8008b14:	4647      	mov	r7, r8
 8008b16:	40bd      	lsls	r5, r7
 8008b18:	9f01      	ldr	r7, [sp, #4]
 8008b1a:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b1c:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b1e:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b20:	4647      	mov	r7, r8
 8008b22:	692d      	ldr	r5, [r5, #16]
 8008b24:	40bd      	lsls	r5, r7
 8008b26:	9f01      	ldr	r7, [sp, #4]
 8008b28:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8008b2a:	4665      	mov	r5, ip
 8008b2c:	622f      	str	r7, [r5, #32]
 8008b2e:	e74e      	b.n	80089ce <HAL_GPIO_Init+0x4a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b30:	2503      	movs	r5, #3
 8008b32:	4095      	lsls	r5, r2
 8008b34:	43ed      	mvns	r5, r5
 8008b36:	9500      	str	r5, [sp, #0]
 8008b38:	e7d0      	b.n	8008adc <HAL_GPIO_Init+0x158>
          temp |= iocurrent;
 8008b3a:	4656      	mov	r6, sl
 8008b3c:	432e      	orrs	r6, r5
 8008b3e:	e7a0      	b.n	8008a82 <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 8008b40:	4657      	mov	r7, sl
 8008b42:	433d      	orrs	r5, r7
 8008b44:	e794      	b.n	8008a70 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8008b46:	4657      	mov	r7, sl
 8008b48:	433d      	orrs	r5, r7
 8008b4a:	e789      	b.n	8008a60 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8008b4c:	4657      	mov	r7, sl
 8008b4e:	433d      	orrs	r5, r7
 8008b50:	e77c      	b.n	8008a4c <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008b52:	4667      	mov	r7, ip
 8008b54:	2603      	movs	r6, #3
 8008b56:	40be      	lsls	r6, r7
 8008b58:	464f      	mov	r7, r9
 8008b5a:	4337      	orrs	r7, r6
 8008b5c:	46b9      	mov	r9, r7
 8008b5e:	e768      	b.n	8008a32 <HAL_GPIO_Init+0xae>
 8008b60:	4666      	mov	r6, ip
 8008b62:	2701      	movs	r7, #1
 8008b64:	40b7      	lsls	r7, r6
 8008b66:	003e      	movs	r6, r7
 8008b68:	464f      	mov	r7, r9
 8008b6a:	4337      	orrs	r7, r6
 8008b6c:	46b9      	mov	r9, r7
 8008b6e:	e760      	b.n	8008a32 <HAL_GPIO_Init+0xae>
 8008b70:	4667      	mov	r7, ip
 8008b72:	2602      	movs	r6, #2
 8008b74:	40be      	lsls	r6, r7
 8008b76:	464f      	mov	r7, r9
 8008b78:	4337      	orrs	r7, r6
 8008b7a:	46b9      	mov	r9, r7
 8008b7c:	e759      	b.n	8008a32 <HAL_GPIO_Init+0xae>
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	40021800 	.word	0x40021800
 8008b84:	50000400 	.word	0x50000400
 8008b88:	50000800 	.word	0x50000800
 8008b8c:	50000c00 	.word	0x50000c00

08008b90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008b90:	6900      	ldr	r0, [r0, #16]
 8008b92:	4008      	ands	r0, r1
 8008b94:	1e43      	subs	r3, r0, #1
 8008b96:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8008b98:	b2c0      	uxtb	r0, r0
}
 8008b9a:	4770      	bx	lr

08008b9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	d001      	beq.n	8008ba4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ba0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ba2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ba4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8008ba6:	e7fc      	b.n	8008ba2 <HAL_GPIO_WritePin+0x6>

08008ba8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ba8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008baa:	0013      	movs	r3, r2
 8008bac:	400b      	ands	r3, r1
 8008bae:	041b      	lsls	r3, r3, #16
 8008bb0:	4391      	bics	r1, r2
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	6183      	str	r3, [r0, #24]
}
 8008bb6:	4770      	bx	lr

08008bb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bba:	0017      	movs	r7, r2
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008bbc:	2210      	movs	r2, #16
{
 8008bbe:	46c6      	mov	lr, r8
 8008bc0:	000c      	movs	r4, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008bc2:	0011      	movs	r1, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8008bc4:	6803      	ldr	r3, [r0, #0]
{
 8008bc6:	0005      	movs	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8008bc8:	699e      	ldr	r6, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008bca:	2000      	movs	r0, #0
{
 8008bcc:	b500      	push	{lr}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008bce:	4031      	ands	r1, r6
 8008bd0:	4232      	tst	r2, r6
 8008bd2:	d011      	beq.n	8008bf8 <I2C_IsErrorOccurred+0x40>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bd4:	61da      	str	r2, [r3, #28]
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 8008bd6:	3232      	adds	r2, #50	; 0x32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008bd8:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 8008bda:	4690      	mov	r8, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	4216      	tst	r6, r2
 8008be0:	d104      	bne.n	8008bec <I2C_IsErrorOccurred+0x34>
      if (Timeout != HAL_MAX_DELAY)
 8008be2:	1c61      	adds	r1, r4, #1
 8008be4:	d145      	bne.n	8008c72 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008be6:	699a      	ldr	r2, [r3, #24]
 8008be8:	4216      	tst	r6, r2
 8008bea:	d0fc      	beq.n	8008be6 <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bec:	2220      	movs	r2, #32
 8008bee:	2100      	movs	r1, #0
 8008bf0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008bf2:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8008bf4:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8008bf6:	4311      	orrs	r1, r2
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008bf8:	2480      	movs	r4, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8008bfa:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008bfc:	0064      	lsls	r4, r4, #1
 8008bfe:	4222      	tst	r2, r4
 8008c00:	d02c      	beq.n	8008c5c <I2C_IsErrorOccurred+0xa4>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c02:	2001      	movs	r0, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c04:	61dc      	str	r4, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8008c06:	4301      	orrs	r1, r0

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c08:	0550      	lsls	r0, r2, #21
 8008c0a:	d504      	bpl.n	8008c16 <I2C_IsErrorOccurred+0x5e>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008c0c:	2008      	movs	r0, #8
 8008c0e:	4301      	orrs	r1, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c10:	2080      	movs	r0, #128	; 0x80
 8008c12:	00c0      	lsls	r0, r0, #3
 8008c14:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008c16:	0592      	lsls	r2, r2, #22
 8008c18:	d504      	bpl.n	8008c24 <I2C_IsErrorOccurred+0x6c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	4311      	orrs	r1, r2

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c1e:	32ff      	adds	r2, #255	; 0xff
 8008c20:	32ff      	adds	r2, #255	; 0xff
 8008c22:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	0792      	lsls	r2, r2, #30
 8008c28:	d501      	bpl.n	8008c2e <I2C_IsErrorOccurred+0x76>
    hi2c->Instance->TXDR = 0x00U;
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	6998      	ldr	r0, [r3, #24]
 8008c32:	4202      	tst	r2, r0
 8008c34:	d019      	beq.n	8008c6a <I2C_IsErrorOccurred+0xb2>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	4822      	ldr	r0, [pc, #136]	; (8008cc4 <I2C_IsErrorOccurred+0x10c>)
 8008c3a:	4002      	ands	r2, r0
 8008c3c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008c3e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c40:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8008c42:	430b      	orrs	r3, r1
 8008c44:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c46:	2341      	movs	r3, #65	; 0x41
 8008c48:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4a:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c4c:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4e:	3222      	adds	r2, #34	; 0x22
 8008c50:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 8008c52:	3a02      	subs	r2, #2
 8008c54:	54ab      	strb	r3, [r5, r2]
  }

  return status;
}
 8008c56:	bc80      	pop	{r7}
 8008c58:	46b8      	mov	r8, r7
 8008c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c5c:	0554      	lsls	r4, r2, #21
 8008c5e:	d4d5      	bmi.n	8008c0c <I2C_IsErrorOccurred+0x54>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008c60:	0592      	lsls	r2, r2, #22
 8008c62:	d4da      	bmi.n	8008c1a <I2C_IsErrorOccurred+0x62>
  if (status != HAL_OK)
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d0f6      	beq.n	8008c56 <I2C_IsErrorOccurred+0x9e>
 8008c68:	e7dc      	b.n	8008c24 <I2C_IsErrorOccurred+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c6a:	6998      	ldr	r0, [r3, #24]
 8008c6c:	4302      	orrs	r2, r0
 8008c6e:	619a      	str	r2, [r3, #24]
 8008c70:	e7e1      	b.n	8008c36 <I2C_IsErrorOccurred+0x7e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c72:	f7ff f8c5 	bl	8007e00 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c76:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c78:	1bc0      	subs	r0, r0, r7
 8008c7a:	42a0      	cmp	r0, r4
 8008c7c:	d801      	bhi.n	8008c82 <I2C_IsErrorOccurred+0xca>
 8008c7e:	2c00      	cmp	r4, #0
 8008c80:	d1ac      	bne.n	8008bdc <I2C_IsErrorOccurred+0x24>
          tmp2 = hi2c->Mode;
 8008c82:	4642      	mov	r2, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c84:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8008c86:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c88:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8008c8a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c8c:	0409      	lsls	r1, r1, #16
 8008c8e:	d50c      	bpl.n	8008caa <I2C_IsErrorOccurred+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c90:	2180      	movs	r1, #128	; 0x80
 8008c92:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c94:	4208      	tst	r0, r1
 8008c96:	d108      	bne.n	8008caa <I2C_IsErrorOccurred+0xf2>
              (tmp1 != I2C_CR2_STOP) && \
 8008c98:	2a20      	cmp	r2, #32
 8008c9a:	d006      	beq.n	8008caa <I2C_IsErrorOccurred+0xf2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	4311      	orrs	r1, r2
 8008ca0:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8008ca2:	f7ff f8ad 	bl	8007e00 <HAL_GetTick>
 8008ca6:	0007      	movs	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	699a      	ldr	r2, [r3, #24]
 8008cac:	4216      	tst	r6, r2
 8008cae:	d195      	bne.n	8008bdc <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008cb0:	f7ff f8a6 	bl	8007e00 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cb4:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008cb6:	1bc0      	subs	r0, r0, r7
 8008cb8:	2819      	cmp	r0, #25
 8008cba:	d9f6      	bls.n	8008caa <I2C_IsErrorOccurred+0xf2>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008cbc:	2120      	movs	r1, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cbe:	699a      	ldr	r2, [r3, #24]
 8008cc0:	e797      	b.n	8008bf2 <I2C_IsErrorOccurred+0x3a>
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	fe00e800 	.word	0xfe00e800

08008cc8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	0004      	movs	r4, r0
 8008ccc:	000d      	movs	r5, r1
 8008cce:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cd0:	2702      	movs	r7, #2
 8008cd2:	e008      	b.n	8008ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd4:	0032      	movs	r2, r6
 8008cd6:	0029      	movs	r1, r5
 8008cd8:	0020      	movs	r0, r4
 8008cda:	f7ff ff6d 	bl	8008bb8 <I2C_IsErrorOccurred>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d107      	bne.n	8008cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8008ce2:	1c6b      	adds	r3, r5, #1
 8008ce4:	d107      	bne.n	8008cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	421f      	tst	r7, r3
 8008cec:	d0f2      	beq.n	8008cd4 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8008cee:	2000      	movs	r0, #0
}
 8008cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008cf2:	2001      	movs	r0, #1
 8008cf4:	e7fc      	b.n	8008cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf6:	f7ff f883 	bl	8007e00 <HAL_GetTick>
 8008cfa:	1b80      	subs	r0, r0, r6
 8008cfc:	42a8      	cmp	r0, r5
 8008cfe:	d801      	bhi.n	8008d04 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8008d00:	2d00      	cmp	r5, #0
 8008d02:	d1f0      	bne.n	8008ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d04:	2220      	movs	r2, #32
 8008d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8008d08:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d0e:	2341      	movs	r3, #65	; 0x41
 8008d10:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	3222      	adds	r2, #34	; 0x22
 8008d16:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8008d18:	3a02      	subs	r2, #2
 8008d1a:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8008d1c:	e7e8      	b.n	8008cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8008d1e:	46c0      	nop			; (mov r8, r8)

08008d20 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	0005      	movs	r5, r0
 8008d24:	000c      	movs	r4, r1
 8008d26:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d28:	2720      	movs	r7, #32
 8008d2a:	e00d      	b.n	8008d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d2c:	0032      	movs	r2, r6
 8008d2e:	0021      	movs	r1, r4
 8008d30:	0028      	movs	r0, r5
 8008d32:	f7ff ff41 	bl	8008bb8 <I2C_IsErrorOccurred>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d119      	bne.n	8008d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3a:	f7ff f861 	bl	8007e00 <HAL_GetTick>
 8008d3e:	1b80      	subs	r0, r0, r6
 8008d40:	42a0      	cmp	r0, r4
 8008d42:	d807      	bhi.n	8008d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8008d44:	2c00      	cmp	r4, #0
 8008d46:	d005      	beq.n	8008d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	421f      	tst	r7, r3
 8008d4e:	d0ed      	beq.n	8008d2c <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
  return HAL_OK;
 8008d50:	2000      	movs	r0, #0
}
 8008d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d54:	2220      	movs	r2, #32
 8008d56:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008d58:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d5e:	2341      	movs	r3, #65	; 0x41
 8008d60:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	3222      	adds	r2, #34	; 0x22
 8008d66:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8008d68:	3a02      	subs	r2, #2
 8008d6a:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8008d6c:	e7f1      	b.n	8008d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
      return HAL_ERROR;
 8008d6e:	2001      	movs	r0, #1
 8008d70:	e7ef      	b.n	8008d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8008d72:	46c0      	nop			; (mov r8, r8)

08008d74 <HAL_I2C_Init>:
{
 8008d74:	b510      	push	{r4, lr}
 8008d76:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8008d78:	d04d      	beq.n	8008e16 <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d7a:	2341      	movs	r3, #65	; 0x41
 8008d7c:	5cc3      	ldrb	r3, [r0, r3]
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d043      	beq.n	8008e0c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d84:	2341      	movs	r3, #65	; 0x41
 8008d86:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8008d88:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d8a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	438a      	bics	r2, r1
 8008d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d94:	4921      	ldr	r1, [pc, #132]	; (8008e1c <HAL_I2C_Init+0xa8>)
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	400a      	ands	r2, r1
 8008d9a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d9c:	689a      	ldr	r2, [r3, #8]
 8008d9e:	4920      	ldr	r1, [pc, #128]	; (8008e20 <HAL_I2C_Init+0xac>)
 8008da0:	400a      	ands	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008da4:	68e2      	ldr	r2, [r4, #12]
 8008da6:	2a01      	cmp	r2, #1
 8008da8:	d02a      	beq.n	8008e00 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008daa:	2184      	movs	r1, #132	; 0x84
 8008dac:	68a0      	ldr	r0, [r4, #8]
 8008dae:	0209      	lsls	r1, r1, #8
 8008db0:	4301      	orrs	r1, r0
 8008db2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008db4:	2a02      	cmp	r2, #2
 8008db6:	d102      	bne.n	8008dbe <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008db8:	2280      	movs	r2, #128	; 0x80
 8008dba:	0112      	lsls	r2, r2, #4
 8008dbc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dbe:	6859      	ldr	r1, [r3, #4]
 8008dc0:	4a18      	ldr	r2, [pc, #96]	; (8008e24 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8008dc2:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	4915      	ldr	r1, [pc, #84]	; (8008e20 <HAL_I2C_Init+0xac>)
 8008dcc:	400a      	ands	r2, r1
 8008dce:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dd0:	6961      	ldr	r1, [r4, #20]
 8008dd2:	6922      	ldr	r2, [r4, #16]
 8008dd4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008dd6:	69a1      	ldr	r1, [r4, #24]
 8008dd8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008dde:	6a21      	ldr	r1, [r4, #32]
 8008de0:	69e2      	ldr	r2, [r4, #28]
 8008de2:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8008de4:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008de6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dee:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008df0:	2241      	movs	r2, #65	; 0x41
 8008df2:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008df4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008df6:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df8:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dfa:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dfc:	54a3      	strb	r3, [r4, r2]
}
 8008dfe:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e00:	2280      	movs	r2, #128	; 0x80
 8008e02:	68a1      	ldr	r1, [r4, #8]
 8008e04:	0212      	lsls	r2, r2, #8
 8008e06:	430a      	orrs	r2, r1
 8008e08:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e0a:	e7d8      	b.n	8008dbe <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8008e0c:	3340      	adds	r3, #64	; 0x40
 8008e0e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8008e10:	f7fe fd1e 	bl	8007850 <HAL_I2C_MspInit>
 8008e14:	e7b6      	b.n	8008d84 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7f1      	b.n	8008dfe <HAL_I2C_Init+0x8a>
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	f0ffffff 	.word	0xf0ffffff
 8008e20:	ffff7fff 	.word	0xffff7fff
 8008e24:	02008000 	.word	0x02008000

08008e28 <HAL_I2C_Mem_Write>:
{
 8008e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e2a:	4645      	mov	r5, r8
 8008e2c:	46de      	mov	lr, fp
 8008e2e:	4657      	mov	r7, sl
 8008e30:	464e      	mov	r6, r9
 8008e32:	b5e0      	push	{r5, r6, r7, lr}
 8008e34:	b083      	sub	sp, #12
 8008e36:	4699      	mov	r9, r3
 8008e38:	ab0c      	add	r3, sp, #48	; 0x30
 8008e3a:	9201      	str	r2, [sp, #4]
 8008e3c:	cb04      	ldmia	r3!, {r2}
 8008e3e:	0004      	movs	r4, r0
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	4688      	mov	r8, r1
 8008e44:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e46:	2341      	movs	r3, #65	; 0x41
 8008e48:	5cc3      	ldrb	r3, [r0, r3]
{
 8008e4a:	4692      	mov	sl, r2
 8008e4c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d000      	beq.n	8008e54 <HAL_I2C_Mem_Write+0x2c>
 8008e52:	e0a7      	b.n	8008fa4 <HAL_I2C_Mem_Write+0x17c>
    if ((pData == NULL) || (Size == 0U))
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	d100      	bne.n	8008e5a <HAL_I2C_Mem_Write+0x32>
 8008e58:	e099      	b.n	8008f8e <HAL_I2C_Mem_Write+0x166>
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d100      	bne.n	8008e62 <HAL_I2C_Mem_Write+0x3a>
 8008e60:	e095      	b.n	8008f8e <HAL_I2C_Mem_Write+0x166>
    __HAL_LOCK(hi2c);
 8008e62:	2340      	movs	r3, #64	; 0x40
 8008e64:	5cc2      	ldrb	r2, [r0, r3]
 8008e66:	2a01      	cmp	r2, #1
 8008e68:	d100      	bne.n	8008e6c <HAL_I2C_Mem_Write+0x44>
 8008e6a:	e09b      	b.n	8008fa4 <HAL_I2C_Mem_Write+0x17c>
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008e70:	f7fe ffc6 	bl	8007e00 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e74:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8008e76:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e78:	0236      	lsls	r6, r6, #8
 8008e7a:	e005      	b.n	8008e88 <HAL_I2C_Mem_Write+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e7c:	f7fe ffc0 	bl	8007e00 <HAL_GetTick>
 8008e80:	1bc0      	subs	r0, r0, r7
 8008e82:	2819      	cmp	r0, #25
 8008e84:	d900      	bls.n	8008e88 <HAL_I2C_Mem_Write+0x60>
 8008e86:	e08f      	b.n	8008fa8 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e88:	6822      	ldr	r2, [r4, #0]
 8008e8a:	6993      	ldr	r3, [r2, #24]
 8008e8c:	0019      	movs	r1, r3
 8008e8e:	4031      	ands	r1, r6
 8008e90:	4233      	tst	r3, r6
 8008e92:	d1f3      	bne.n	8008e7c <HAL_I2C_Mem_Write+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e94:	2341      	movs	r3, #65	; 0x41
 8008e96:	2021      	movs	r0, #33	; 0x21
 8008e98:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	301f      	adds	r0, #31
 8008e9e:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8008ea0:	4653      	mov	r3, sl
 8008ea2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ea4:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ea6:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8008ea8:	8563      	strh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eaa:	4643      	mov	r3, r8
 8008eac:	059b      	lsls	r3, r3, #22
 8008eae:	0d9b      	lsrs	r3, r3, #22
 8008eb0:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eb2:	464b      	mov	r3, r9
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008eb4:	4874      	ldr	r0, [pc, #464]	; (8009088 <HAL_I2C_Mem_Write+0x260>)
    hi2c->XferISR   = NULL;
 8008eb6:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8008eb8:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eba:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ebc:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ebe:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	4641      	mov	r1, r8
 8008ec4:	430b      	orrs	r3, r1
 8008ec6:	4971      	ldr	r1, [pc, #452]	; (800908c <HAL_I2C_Mem_Write+0x264>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec8:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ece:	0029      	movs	r1, r5
 8008ed0:	003a      	movs	r2, r7
 8008ed2:	f7ff fef9 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d000      	beq.n	8008edc <HAL_I2C_Mem_Write+0xb4>
 8008eda:	e0ab      	b.n	8009034 <HAL_I2C_Mem_Write+0x20c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008edc:	464b      	mov	r3, r9
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d000      	beq.n	8008ee4 <HAL_I2C_Mem_Write+0xbc>
 8008ee2:	e06e      	b.n	8008fc2 <HAL_I2C_Mem_Write+0x19a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ee4:	466b      	mov	r3, sp
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	791b      	ldrb	r3, [r3, #4]
 8008eea:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eec:	2680      	movs	r6, #128	; 0x80
 8008eee:	e002      	b.n	8008ef6 <HAL_I2C_Mem_Write+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8008ef0:	1c6b      	adds	r3, r5, #1
 8008ef2:	d000      	beq.n	8008ef6 <HAL_I2C_Mem_Write+0xce>
 8008ef4:	e08c      	b.n	8009010 <HAL_I2C_Mem_Write+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ef6:	6993      	ldr	r3, [r2, #24]
 8008ef8:	421e      	tst	r6, r3
 8008efa:	d0f9      	beq.n	8008ef0 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008efc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008efe:	2bff      	cmp	r3, #255	; 0xff
 8008f00:	d800      	bhi.n	8008f04 <HAL_I2C_Mem_Write+0xdc>
 8008f02:	e09c      	b.n	800903e <HAL_I2C_Mem_Write+0x216>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f04:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f06:	4962      	ldr	r1, [pc, #392]	; (8009090 <HAL_I2C_Mem_Write+0x268>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f08:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f0a:	6853      	ldr	r3, [r2, #4]
 8008f0c:	400b      	ands	r3, r1
 8008f0e:	4641      	mov	r1, r8
 8008f10:	430b      	orrs	r3, r1
 8008f12:	4960      	ldr	r1, [pc, #384]	; (8009094 <HAL_I2C_Mem_Write+0x26c>)
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6053      	str	r3, [r2, #4]
 8008f18:	4b5d      	ldr	r3, [pc, #372]	; (8009090 <HAL_I2C_Mem_Write+0x268>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f1a:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f1c:	4699      	mov	r9, r3
 8008f1e:	2380      	movs	r3, #128	; 0x80
 8008f20:	049b      	lsls	r3, r3, #18
 8008f22:	469a      	mov	sl, r3
 8008f24:	e003      	b.n	8008f2e <HAL_I2C_Mem_Write+0x106>
    } while (hi2c->XferCount > 0U);
 8008f26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d100      	bne.n	8008f2e <HAL_I2C_Mem_Write+0x106>
 8008f2c:	e097      	b.n	800905e <HAL_I2C_Mem_Write+0x236>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f2e:	003a      	movs	r2, r7
 8008f30:	0029      	movs	r1, r5
 8008f32:	0020      	movs	r0, r4
 8008f34:	f7ff fec8 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d140      	bne.n	8008fbe <HAL_I2C_Mem_Write+0x196>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8008f42:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f44:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008f46:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008f48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008f50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f52:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	d0e3      	beq.n	8008f26 <HAL_I2C_Mem_Write+0xfe>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e1      	bne.n	8008f26 <HAL_I2C_Mem_Write+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f62:	6993      	ldr	r3, [r2, #24]
 8008f64:	421e      	tst	r6, r3
 8008f66:	d104      	bne.n	8008f72 <HAL_I2C_Mem_Write+0x14a>
    if (Timeout != HAL_MAX_DELAY)
 8008f68:	1c6b      	adds	r3, r5, #1
 8008f6a:	d139      	bne.n	8008fe0 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f6c:	6993      	ldr	r3, [r2, #24]
 8008f6e:	421e      	tst	r6, r3
 8008f70:	d0fa      	beq.n	8008f68 <HAL_I2C_Mem_Write+0x140>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f74:	2bff      	cmp	r3, #255	; 0xff
 8008f76:	d93c      	bls.n	8008ff2 <HAL_I2C_Mem_Write+0x1ca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f78:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f7a:	4649      	mov	r1, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f7c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f7e:	6853      	ldr	r3, [r2, #4]
 8008f80:	400b      	ands	r3, r1
 8008f82:	4641      	mov	r1, r8
 8008f84:	430b      	orrs	r3, r1
 8008f86:	4943      	ldr	r1, [pc, #268]	; (8009094 <HAL_I2C_Mem_Write+0x26c>)
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f8c:	e7cb      	b.n	8008f26 <HAL_I2C_Mem_Write+0xfe>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f8e:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008f90:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008f96:	b003      	add	sp, #12
 8008f98:	bcf0      	pop	{r4, r5, r6, r7}
 8008f9a:	46bb      	mov	fp, r7
 8008f9c:	46b2      	mov	sl, r6
 8008f9e:	46a9      	mov	r9, r5
 8008fa0:	46a0      	mov	r8, r4
 8008fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008fa4:	2002      	movs	r0, #2
 8008fa6:	e7f6      	b.n	8008f96 <HAL_I2C_Mem_Write+0x16e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fa8:	2220      	movs	r2, #32
 8008faa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008fac:	4313      	orrs	r3, r2
 8008fae:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fb0:	2341      	movs	r3, #65	; 0x41
 8008fb2:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	3222      	adds	r2, #34	; 0x22
 8008fb8:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8008fba:	3a02      	subs	r2, #2
 8008fbc:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	e7e9      	b.n	8008f96 <HAL_I2C_Mem_Write+0x16e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008fc2:	9e01      	ldr	r6, [sp, #4]
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	0a32      	lsrs	r2, r6, #8
 8008fc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fca:	0029      	movs	r1, r5
 8008fcc:	003a      	movs	r2, r7
 8008fce:	0020      	movs	r0, r4
 8008fd0:	f7ff fe7a 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d12d      	bne.n	8009034 <HAL_I2C_Mem_Write+0x20c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fd8:	6822      	ldr	r2, [r4, #0]
 8008fda:	b2f3      	uxtb	r3, r6
 8008fdc:	6293      	str	r3, [r2, #40]	; 0x28
 8008fde:	e785      	b.n	8008eec <HAL_I2C_Mem_Write+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe0:	f7fe ff0e 	bl	8007e00 <HAL_GetTick>
 8008fe4:	1bc0      	subs	r0, r0, r7
 8008fe6:	4285      	cmp	r5, r0
 8008fe8:	d3de      	bcc.n	8008fa8 <HAL_I2C_Mem_Write+0x180>
 8008fea:	2d00      	cmp	r5, #0
 8008fec:	d0dc      	beq.n	8008fa8 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fee:	6822      	ldr	r2, [r4, #0]
 8008ff0:	e7bc      	b.n	8008f6c <HAL_I2C_Mem_Write+0x144>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ff2:	4648      	mov	r0, r9
          hi2c->XferSize = hi2c->XferCount;
 8008ff4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ff6:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008ff8:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ffa:	4003      	ands	r3, r0
 8008ffc:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8008ffe:	8521      	strh	r1, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009000:	b2c9      	uxtb	r1, r1
 8009002:	0409      	lsls	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8009004:	4303      	orrs	r3, r0
 8009006:	430b      	orrs	r3, r1
 8009008:	4651      	mov	r1, sl
 800900a:	430b      	orrs	r3, r1
 800900c:	6053      	str	r3, [r2, #4]
}
 800900e:	e78a      	b.n	8008f26 <HAL_I2C_Mem_Write+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009010:	f7fe fef6 	bl	8007e00 <HAL_GetTick>
 8009014:	1bc0      	subs	r0, r0, r7
 8009016:	4285      	cmp	r5, r0
 8009018:	d303      	bcc.n	8009022 <HAL_I2C_Mem_Write+0x1fa>
 800901a:	2d00      	cmp	r5, #0
 800901c:	d001      	beq.n	8009022 <HAL_I2C_Mem_Write+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	e769      	b.n	8008ef6 <HAL_I2C_Mem_Write+0xce>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009022:	2220      	movs	r2, #32
 8009024:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009026:	4313      	orrs	r3, r2
 8009028:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800902a:	2341      	movs	r3, #65	; 0x41
 800902c:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800902e:	2200      	movs	r2, #0
 8009030:	3301      	adds	r3, #1
 8009032:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8009034:	2340      	movs	r3, #64	; 0x40
 8009036:	2200      	movs	r2, #0
      return HAL_ERROR;
 8009038:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800903a:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800903c:	e7ab      	b.n	8008f96 <HAL_I2C_Mem_Write+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 800903e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8009040:	4813      	ldr	r0, [pc, #76]	; (8009090 <HAL_I2C_Mem_Write+0x268>)
 8009042:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8009044:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8009046:	4001      	ands	r1, r0
 8009048:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 800904a:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800904c:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800904e:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009050:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8009052:	430b      	orrs	r3, r1
 8009054:	2180      	movs	r1, #128	; 0x80
 8009056:	0489      	lsls	r1, r1, #18
 8009058:	430b      	orrs	r3, r1
 800905a:	6053      	str	r3, [r2, #4]
}
 800905c:	e75c      	b.n	8008f18 <HAL_I2C_Mem_Write+0xf0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800905e:	003a      	movs	r2, r7
 8009060:	0029      	movs	r1, r5
 8009062:	0020      	movs	r0, r4
 8009064:	f7ff fe5c 	bl	8008d20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009068:	2800      	cmp	r0, #0
 800906a:	d1a8      	bne.n	8008fbe <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800906c:	2120      	movs	r1, #32
 800906e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8009070:	4d09      	ldr	r5, [pc, #36]	; (8009098 <HAL_I2C_Mem_Write+0x270>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009072:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	402a      	ands	r2, r5
 8009078:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800907a:	2341      	movs	r3, #65	; 0x41
 800907c:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800907e:	3301      	adds	r3, #1
 8009080:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8009082:	3b02      	subs	r3, #2
 8009084:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8009086:	e786      	b.n	8008f96 <HAL_I2C_Mem_Write+0x16e>
 8009088:	fc009800 	.word	0xfc009800
 800908c:	01002000 	.word	0x01002000
 8009090:	fc009c00 	.word	0xfc009c00
 8009094:	01ff0000 	.word	0x01ff0000
 8009098:	fe00e800 	.word	0xfe00e800

0800909c <HAL_I2C_Mem_Read>:
{
 800909c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800909e:	4645      	mov	r5, r8
 80090a0:	46de      	mov	lr, fp
 80090a2:	4657      	mov	r7, sl
 80090a4:	464e      	mov	r6, r9
 80090a6:	b5e0      	push	{r5, r6, r7, lr}
 80090a8:	b083      	sub	sp, #12
 80090aa:	4699      	mov	r9, r3
 80090ac:	ab0c      	add	r3, sp, #48	; 0x30
 80090ae:	9201      	str	r2, [sp, #4]
 80090b0:	cb04      	ldmia	r3!, {r2}
 80090b2:	0005      	movs	r5, r0
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	4688      	mov	r8, r1
 80090b8:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ba:	2341      	movs	r3, #65	; 0x41
 80090bc:	5cc3      	ldrb	r3, [r0, r3]
{
 80090be:	4692      	mov	sl, r2
 80090c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d000      	beq.n	80090c8 <HAL_I2C_Mem_Read+0x2c>
 80090c6:	e090      	b.n	80091ea <HAL_I2C_Mem_Read+0x14e>
    if ((pData == NULL) || (Size == 0U))
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	d100      	bne.n	80090ce <HAL_I2C_Mem_Read+0x32>
 80090cc:	e082      	b.n	80091d4 <HAL_I2C_Mem_Read+0x138>
 80090ce:	465b      	mov	r3, fp
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d100      	bne.n	80090d6 <HAL_I2C_Mem_Read+0x3a>
 80090d4:	e07e      	b.n	80091d4 <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 80090d6:	2340      	movs	r3, #64	; 0x40
 80090d8:	5cc2      	ldrb	r2, [r0, r3]
 80090da:	2a01      	cmp	r2, #1
 80090dc:	d100      	bne.n	80090e0 <HAL_I2C_Mem_Read+0x44>
 80090de:	e084      	b.n	80091ea <HAL_I2C_Mem_Read+0x14e>
 80090e0:	2201      	movs	r2, #1
 80090e2:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80090e4:	f7fe fe8c 	bl	8007e00 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090e8:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 80090ea:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090ec:	0236      	lsls	r6, r6, #8
 80090ee:	e005      	b.n	80090fc <HAL_I2C_Mem_Read+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f0:	f7fe fe86 	bl	8007e00 <HAL_GetTick>
 80090f4:	1bc0      	subs	r0, r0, r7
 80090f6:	2819      	cmp	r0, #25
 80090f8:	d900      	bls.n	80090fc <HAL_I2C_Mem_Read+0x60>
 80090fa:	e07f      	b.n	80091fc <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090fc:	682a      	ldr	r2, [r5, #0]
 80090fe:	6993      	ldr	r3, [r2, #24]
 8009100:	0019      	movs	r1, r3
 8009102:	4031      	ands	r1, r6
 8009104:	4233      	tst	r3, r6
 8009106:	d1f3      	bne.n	80090f0 <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009108:	2341      	movs	r3, #65	; 0x41
 800910a:	2022      	movs	r0, #34	; 0x22
 800910c:	54e8      	strb	r0, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800910e:	3301      	adds	r3, #1
 8009110:	301e      	adds	r0, #30
 8009112:	54e8      	strb	r0, [r5, r3]
    hi2c->pBuffPtr  = pData;
 8009114:	4653      	mov	r3, sl
 8009116:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 8009118:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800911a:	6469      	str	r1, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800911c:	856b      	strh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800911e:	4643      	mov	r3, r8
 8009120:	059b      	lsls	r3, r3, #22
 8009122:	0d9b      	lsrs	r3, r3, #22
 8009124:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009126:	464b      	mov	r3, r9
  MODIFY_REG(hi2c->Instance->CR2, \
 8009128:	4877      	ldr	r0, [pc, #476]	; (8009308 <HAL_I2C_Mem_Read+0x26c>)
    hi2c->XferISR   = NULL;
 800912a:	6369      	str	r1, [r5, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800912c:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800912e:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8009130:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009132:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8009134:	430b      	orrs	r3, r1
 8009136:	4641      	mov	r1, r8
 8009138:	430b      	orrs	r3, r1
 800913a:	2180      	movs	r1, #128	; 0x80
 800913c:	0189      	lsls	r1, r1, #6
 800913e:	430b      	orrs	r3, r1
 8009140:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009142:	0021      	movs	r1, r4
 8009144:	003a      	movs	r2, r7
 8009146:	0028      	movs	r0, r5
 8009148:	f7ff fdbe 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800914c:	2800      	cmp	r0, #0
 800914e:	d000      	beq.n	8009152 <HAL_I2C_Mem_Read+0xb6>
 8009150:	e0d3      	b.n	80092fa <HAL_I2C_Mem_Read+0x25e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009152:	464b      	mov	r3, r9
 8009154:	2b01      	cmp	r3, #1
 8009156:	d000      	beq.n	800915a <HAL_I2C_Mem_Read+0xbe>
 8009158:	e07a      	b.n	8009250 <HAL_I2C_Mem_Read+0x1b4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800915a:	466b      	mov	r3, sp
 800915c:	682a      	ldr	r2, [r5, #0]
 800915e:	791b      	ldrb	r3, [r3, #4]
 8009160:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009162:	2640      	movs	r6, #64	; 0x40
 8009164:	e002      	b.n	800916c <HAL_I2C_Mem_Read+0xd0>
    if (Timeout != HAL_MAX_DELAY)
 8009166:	1c63      	adds	r3, r4, #1
 8009168:	d000      	beq.n	800916c <HAL_I2C_Mem_Read+0xd0>
 800916a:	e0a5      	b.n	80092b8 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800916c:	6993      	ldr	r3, [r2, #24]
 800916e:	421e      	tst	r6, r3
 8009170:	d0f9      	beq.n	8009166 <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009172:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8009174:	2bff      	cmp	r3, #255	; 0xff
 8009176:	d800      	bhi.n	800917a <HAL_I2C_Mem_Read+0xde>
 8009178:	e0a7      	b.n	80092ca <HAL_I2C_Mem_Read+0x22e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800917a:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800917c:	4962      	ldr	r1, [pc, #392]	; (8009308 <HAL_I2C_Mem_Read+0x26c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800917e:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8009180:	6853      	ldr	r3, [r2, #4]
 8009182:	400b      	ands	r3, r1
 8009184:	4641      	mov	r1, r8
 8009186:	430b      	orrs	r3, r1
 8009188:	4960      	ldr	r1, [pc, #384]	; (800930c <HAL_I2C_Mem_Read+0x270>)
 800918a:	430b      	orrs	r3, r1
 800918c:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800918e:	2380      	movs	r3, #128	; 0x80
 8009190:	4699      	mov	r9, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8009192:	4b5f      	ldr	r3, [pc, #380]	; (8009310 <HAL_I2C_Mem_Read+0x274>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009194:	2604      	movs	r6, #4
  MODIFY_REG(hi2c->Instance->CR2, \
 8009196:	469a      	mov	sl, r3
 8009198:	e001      	b.n	800919e <HAL_I2C_Mem_Read+0x102>
    if (Timeout != HAL_MAX_DELAY)
 800919a:	1c63      	adds	r3, r4, #1
 800919c:	d127      	bne.n	80091ee <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800919e:	6993      	ldr	r3, [r2, #24]
 80091a0:	421e      	tst	r6, r3
 80091a2:	d0fa      	beq.n	800919a <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091a8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80091aa:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80091ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80091ae:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80091b0:	3301      	adds	r3, #1
      hi2c->XferCount--;
 80091b2:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80091b4:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80091b6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 80091b8:	856a      	strh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80091ba:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091bc:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80091be:	b29b      	uxth	r3, r3
 80091c0:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	d001      	beq.n	80091ca <HAL_I2C_Mem_Read+0x12e>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d02c      	beq.n	8009224 <HAL_I2C_Mem_Read+0x188>
    } while (hi2c->XferCount > 0U);
 80091ca:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d04e      	beq.n	800926e <HAL_I2C_Mem_Read+0x1d2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091d0:	682a      	ldr	r2, [r5, #0]
 80091d2:	e7e4      	b.n	800919e <HAL_I2C_Mem_Read+0x102>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80091d4:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 80091d6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	646b      	str	r3, [r5, #68]	; 0x44
}
 80091dc:	b003      	add	sp, #12
 80091de:	bcf0      	pop	{r4, r5, r6, r7}
 80091e0:	46bb      	mov	fp, r7
 80091e2:	46b2      	mov	sl, r6
 80091e4:	46a9      	mov	r9, r5
 80091e6:	46a0      	mov	r8, r4
 80091e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80091ea:	2002      	movs	r0, #2
 80091ec:	e7f6      	b.n	80091dc <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ee:	f7fe fe07 	bl	8007e00 <HAL_GetTick>
 80091f2:	1bc0      	subs	r0, r0, r7
 80091f4:	4284      	cmp	r4, r0
 80091f6:	d301      	bcc.n	80091fc <HAL_I2C_Mem_Read+0x160>
 80091f8:	2c00      	cmp	r4, #0
 80091fa:	d1e9      	bne.n	80091d0 <HAL_I2C_Mem_Read+0x134>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091fc:	2220      	movs	r2, #32
 80091fe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          return HAL_ERROR;
 8009200:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009202:	4313      	orrs	r3, r2
 8009204:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009206:	2341      	movs	r3, #65	; 0x41
 8009208:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800920a:	2300      	movs	r3, #0
 800920c:	3222      	adds	r2, #34	; 0x22
 800920e:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8009210:	3a02      	subs	r2, #2
 8009212:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8009214:	e7e2      	b.n	80091dc <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009216:	f7fe fdf3 	bl	8007e00 <HAL_GetTick>
 800921a:	1bc0      	subs	r0, r0, r7
 800921c:	4284      	cmp	r4, r0
 800921e:	d3ed      	bcc.n	80091fc <HAL_I2C_Mem_Read+0x160>
 8009220:	2c00      	cmp	r4, #0
 8009222:	d0eb      	beq.n	80091fc <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009224:	682a      	ldr	r2, [r5, #0]
 8009226:	e001      	b.n	800922c <HAL_I2C_Mem_Read+0x190>
    if (Timeout != HAL_MAX_DELAY)
 8009228:	1c63      	adds	r3, r4, #1
 800922a:	d1f4      	bne.n	8009216 <HAL_I2C_Mem_Read+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800922c:	4649      	mov	r1, r9
 800922e:	6993      	ldr	r3, [r2, #24]
 8009230:	4219      	tst	r1, r3
 8009232:	d0f9      	beq.n	8009228 <HAL_I2C_Mem_Read+0x18c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009234:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8009236:	2bff      	cmp	r3, #255	; 0xff
 8009238:	d92e      	bls.n	8009298 <HAL_I2C_Mem_Read+0x1fc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800923a:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800923c:	4651      	mov	r1, sl
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800923e:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8009240:	6853      	ldr	r3, [r2, #4]
 8009242:	400b      	ands	r3, r1
 8009244:	4641      	mov	r1, r8
 8009246:	430b      	orrs	r3, r1
 8009248:	4932      	ldr	r1, [pc, #200]	; (8009314 <HAL_I2C_Mem_Read+0x278>)
 800924a:	430b      	orrs	r3, r1
 800924c:	6053      	str	r3, [r2, #4]
}
 800924e:	e7bc      	b.n	80091ca <HAL_I2C_Mem_Read+0x12e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009250:	9e01      	ldr	r6, [sp, #4]
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	0a32      	lsrs	r2, r6, #8
 8009256:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009258:	0021      	movs	r1, r4
 800925a:	003a      	movs	r2, r7
 800925c:	0028      	movs	r0, r5
 800925e:	f7ff fd33 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009262:	2800      	cmp	r0, #0
 8009264:	d149      	bne.n	80092fa <HAL_I2C_Mem_Read+0x25e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009266:	682a      	ldr	r2, [r5, #0]
 8009268:	b2f3      	uxtb	r3, r6
 800926a:	6293      	str	r3, [r2, #40]	; 0x28
 800926c:	e779      	b.n	8009162 <HAL_I2C_Mem_Read+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800926e:	003a      	movs	r2, r7
 8009270:	0021      	movs	r1, r4
 8009272:	0028      	movs	r0, r5
 8009274:	f7ff fd54 	bl	8008d20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009278:	2800      	cmp	r0, #0
 800927a:	d143      	bne.n	8009304 <HAL_I2C_Mem_Read+0x268>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800927c:	2120      	movs	r1, #32
 800927e:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8009280:	4c25      	ldr	r4, [pc, #148]	; (8009318 <HAL_I2C_Mem_Read+0x27c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009282:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	4022      	ands	r2, r4
 8009288:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800928a:	2341      	movs	r3, #65	; 0x41
 800928c:	54e9      	strb	r1, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800928e:	3301      	adds	r3, #1
 8009290:	54e8      	strb	r0, [r5, r3]
    __HAL_UNLOCK(hi2c);
 8009292:	3b02      	subs	r3, #2
 8009294:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 8009296:	e7a1      	b.n	80091dc <HAL_I2C_Mem_Read+0x140>
  MODIFY_REG(hi2c->Instance->CR2, \
 8009298:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 800929a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800929c:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800929e:	b29b      	uxth	r3, r3
 80092a0:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80092a6:	4303      	orrs	r3, r0
 80092a8:	4650      	mov	r0, sl
 80092aa:	4001      	ands	r1, r0
 80092ac:	430b      	orrs	r3, r1
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	0489      	lsls	r1, r1, #18
 80092b2:	430b      	orrs	r3, r1
 80092b4:	6053      	str	r3, [r2, #4]
}
 80092b6:	e788      	b.n	80091ca <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b8:	f7fe fda2 	bl	8007e00 <HAL_GetTick>
 80092bc:	1bc0      	subs	r0, r0, r7
 80092be:	4284      	cmp	r4, r0
 80092c0:	d312      	bcc.n	80092e8 <HAL_I2C_Mem_Read+0x24c>
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d010      	beq.n	80092e8 <HAL_I2C_Mem_Read+0x24c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092c6:	682a      	ldr	r2, [r5, #0]
 80092c8:	e750      	b.n	800916c <HAL_I2C_Mem_Read+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 80092ca:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80092cc:	480e      	ldr	r0, [pc, #56]	; (8009308 <HAL_I2C_Mem_Read+0x26c>)
 80092ce:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80092d0:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80092d2:	4001      	ands	r1, r0
 80092d4:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 80092d6:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80092d8:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80092da:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80092dc:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80092de:	430b      	orrs	r3, r1
 80092e0:	490e      	ldr	r1, [pc, #56]	; (800931c <HAL_I2C_Mem_Read+0x280>)
 80092e2:	430b      	orrs	r3, r1
 80092e4:	6053      	str	r3, [r2, #4]
}
 80092e6:	e752      	b.n	800918e <HAL_I2C_Mem_Read+0xf2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092e8:	2220      	movs	r2, #32
 80092ea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80092ec:	4313      	orrs	r3, r2
 80092ee:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80092f0:	2341      	movs	r3, #65	; 0x41
 80092f2:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092f4:	2200      	movs	r2, #0
 80092f6:	3301      	adds	r3, #1
 80092f8:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 80092fa:	2340      	movs	r3, #64	; 0x40
 80092fc:	2200      	movs	r2, #0
      return HAL_ERROR;
 80092fe:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8009300:	54ea      	strb	r2, [r5, r3]
      return HAL_ERROR;
 8009302:	e76b      	b.n	80091dc <HAL_I2C_Mem_Read+0x140>
      return HAL_ERROR;
 8009304:	2001      	movs	r0, #1
 8009306:	e769      	b.n	80091dc <HAL_I2C_Mem_Read+0x140>
 8009308:	fc009800 	.word	0xfc009800
 800930c:	01ff2400 	.word	0x01ff2400
 8009310:	fc009c00 	.word	0xfc009c00
 8009314:	01ff0000 	.word	0x01ff0000
 8009318:	fe00e800 	.word	0xfe00e800
 800931c:	02002400 	.word	0x02002400

08009320 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009320:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009322:	2441      	movs	r4, #65	; 0x41
 8009324:	5d03      	ldrb	r3, [r0, r4]
{
 8009326:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009328:	b2dd      	uxtb	r5, r3
 800932a:	2b20      	cmp	r3, #32
 800932c:	d11a      	bne.n	8009364 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800932e:	2640      	movs	r6, #64	; 0x40
 8009330:	5d83      	ldrb	r3, [r0, r6]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d016      	beq.n	8009364 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009336:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009338:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800933a:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 800933c:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800933e:	490a      	ldr	r1, [pc, #40]	; (8009368 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	43ba      	bics	r2, r7
 8009344:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	400a      	ands	r2, r1
 800934a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800934c:	4662      	mov	r2, ip
 800934e:	6819      	ldr	r1, [r3, #0]
 8009350:	4311      	orrs	r1, r2
 8009352:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	433a      	orrs	r2, r7
 8009358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800935a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800935c:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 800935e:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8009360:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009364:	2002      	movs	r0, #2
 8009366:	e7fc      	b.n	8009362 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8009368:	ffffefff 	.word	0xffffefff

0800936c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800936c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936e:	46ce      	mov	lr, r9
 8009370:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009372:	2441      	movs	r4, #65	; 0x41
{
 8009374:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009376:	5d03      	ldrb	r3, [r0, r4]
 8009378:	b2dd      	uxtb	r5, r3
 800937a:	2b20      	cmp	r3, #32
 800937c:	d11f      	bne.n	80093be <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800937e:	2640      	movs	r6, #64	; 0x40
 8009380:	5d83      	ldrb	r3, [r0, r6]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d01b      	beq.n	80093be <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009386:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009388:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800938a:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 800938c:	6802      	ldr	r2, [r0, #0]
 800938e:	46b9      	mov	r9, r7
 8009390:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009392:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8009394:	43bb      	bics	r3, r7
 8009396:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8009398:	6813      	ldr	r3, [r2, #0]
 800939a:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 800939c:	4647      	mov	r7, r8
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 80093a0:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 80093a2:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093a4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093a6:	4649      	mov	r1, r9
 80093a8:	6813      	ldr	r3, [r2, #0]
 80093aa:	430b      	orrs	r3, r1
 80093ac:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093ae:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80093b0:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80093b2:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80093b4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80093b6:	bcc0      	pop	{r6, r7}
 80093b8:	46b9      	mov	r9, r7
 80093ba:	46b0      	mov	r8, r6
 80093bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80093be:	2002      	movs	r0, #2
 80093c0:	e7f9      	b.n	80093b6 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	fffff0ff 	.word	0xfffff0ff

080093c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80093c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80093ca:	4c13      	ldr	r4, [pc, #76]	; (8009418 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80093cc:	4a13      	ldr	r2, [pc, #76]	; (800941c <HAL_PWREx_ControlVoltageScaling+0x54>)
 80093ce:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80093d0:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80093d2:	4013      	ands	r3, r2
 80093d4:	4303      	orrs	r3, r0
 80093d6:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80093d8:	2380      	movs	r3, #128	; 0x80
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4298      	cmp	r0, r3
 80093de:	d001      	beq.n	80093e4 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80093e0:	0028      	movs	r0, r5
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80093e4:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <HAL_PWREx_ControlVoltageScaling+0x58>)
 80093e6:	490f      	ldr	r1, [pc, #60]	; (8009424 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	0058      	lsls	r0, r3, #1
 80093ec:	18c0      	adds	r0, r0, r3
 80093ee:	0040      	lsls	r0, r0, #1
 80093f0:	f7f6 fea6 	bl	8000140 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80093f4:	2280      	movs	r2, #128	; 0x80
 80093f6:	6963      	ldr	r3, [r4, #20]
 80093f8:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80093fa:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80093fc:	4213      	tst	r3, r2
 80093fe:	d102      	bne.n	8009406 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8009400:	e7ee      	b.n	80093e0 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8009402:	2800      	cmp	r0, #0
 8009404:	d005      	beq.n	8009412 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009406:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8009408:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800940a:	4213      	tst	r3, r2
 800940c:	d1f9      	bne.n	8009402 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 800940e:	2500      	movs	r5, #0
 8009410:	e7e6      	b.n	80093e0 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8009412:	2503      	movs	r5, #3
 8009414:	e7e4      	b.n	80093e0 <HAL_PWREx_ControlVoltageScaling+0x18>
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	40007000 	.word	0x40007000
 800941c:	fffff9ff 	.word	0xfffff9ff
 8009420:	2000011c 	.word	0x2000011c
 8009424:	000f4240 	.word	0x000f4240

08009428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942a:	46ce      	mov	lr, r9
 800942c:	4647      	mov	r7, r8
 800942e:	b580      	push	{r7, lr}
 8009430:	0004      	movs	r4, r0
 8009432:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009434:	2800      	cmp	r0, #0
 8009436:	d100      	bne.n	800943a <HAL_RCC_OscConfig+0x12>
 8009438:	e0f4      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800943a:	6803      	ldr	r3, [r0, #0]
 800943c:	07da      	lsls	r2, r3, #31
 800943e:	d531      	bpl.n	80094a4 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009440:	2238      	movs	r2, #56	; 0x38
 8009442:	49c7      	ldr	r1, [pc, #796]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 8009444:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009446:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009448:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800944a:	2a10      	cmp	r2, #16
 800944c:	d100      	bne.n	8009450 <HAL_RCC_OscConfig+0x28>
 800944e:	e0ef      	b.n	8009630 <HAL_RCC_OscConfig+0x208>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009450:	2a08      	cmp	r2, #8
 8009452:	d100      	bne.n	8009456 <HAL_RCC_OscConfig+0x2e>
 8009454:	e0f0      	b.n	8009638 <HAL_RCC_OscConfig+0x210>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009456:	2280      	movs	r2, #128	; 0x80
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	0252      	lsls	r2, r2, #9
 800945c:	4293      	cmp	r3, r2
 800945e:	d100      	bne.n	8009462 <HAL_RCC_OscConfig+0x3a>
 8009460:	e0fd      	b.n	800965e <HAL_RCC_OscConfig+0x236>
 8009462:	21a0      	movs	r1, #160	; 0xa0
 8009464:	02c9      	lsls	r1, r1, #11
 8009466:	428b      	cmp	r3, r1
 8009468:	d100      	bne.n	800946c <HAL_RCC_OscConfig+0x44>
 800946a:	e1d0      	b.n	800980e <HAL_RCC_OscConfig+0x3e6>
 800946c:	4dbc      	ldr	r5, [pc, #752]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 800946e:	49bd      	ldr	r1, [pc, #756]	; (8009764 <HAL_RCC_OscConfig+0x33c>)
 8009470:	682a      	ldr	r2, [r5, #0]
 8009472:	400a      	ands	r2, r1
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	682a      	ldr	r2, [r5, #0]
 8009478:	49bb      	ldr	r1, [pc, #748]	; (8009768 <HAL_RCC_OscConfig+0x340>)
 800947a:	400a      	ands	r2, r1
 800947c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800947e:	2b00      	cmp	r3, #0
 8009480:	d000      	beq.n	8009484 <HAL_RCC_OscConfig+0x5c>
 8009482:	e0f0      	b.n	8009666 <HAL_RCC_OscConfig+0x23e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009484:	f7fe fcbc 	bl	8007e00 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009488:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800948a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800948c:	02bf      	lsls	r7, r7, #10
 800948e:	e005      	b.n	800949c <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009490:	f7fe fcb6 	bl	8007e00 <HAL_GetTick>
 8009494:	1b80      	subs	r0, r0, r6
 8009496:	2864      	cmp	r0, #100	; 0x64
 8009498:	d900      	bls.n	800949c <HAL_RCC_OscConfig+0x74>
 800949a:	e138      	b.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	423b      	tst	r3, r7
 80094a0:	d1f6      	bne.n	8009490 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	079a      	lsls	r2, r3, #30
 80094a6:	d52b      	bpl.n	8009500 <HAL_RCC_OscConfig+0xd8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094a8:	2338      	movs	r3, #56	; 0x38
 80094aa:	4aad      	ldr	r2, [pc, #692]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 80094ac:	6891      	ldr	r1, [r2, #8]
 80094ae:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094b0:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80094b2:	2b10      	cmp	r3, #16
 80094b4:	d100      	bne.n	80094b8 <HAL_RCC_OscConfig+0x90>
 80094b6:	e0e7      	b.n	8009688 <HAL_RCC_OscConfig+0x260>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d000      	beq.n	80094be <HAL_RCC_OscConfig+0x96>
 80094bc:	e0e9      	b.n	8009692 <HAL_RCC_OscConfig+0x26a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094be:	6813      	ldr	r3, [r2, #0]
 80094c0:	055b      	lsls	r3, r3, #21
 80094c2:	d500      	bpl.n	80094c6 <HAL_RCC_OscConfig+0x9e>
 80094c4:	e0aa      	b.n	800961c <HAL_RCC_OscConfig+0x1f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c6:	6851      	ldr	r1, [r2, #4]
 80094c8:	6963      	ldr	r3, [r4, #20]
 80094ca:	48a8      	ldr	r0, [pc, #672]	; (800976c <HAL_RCC_OscConfig+0x344>)
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	4001      	ands	r1, r0
 80094d0:	430b      	orrs	r3, r1
 80094d2:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80094d4:	4aa2      	ldr	r2, [pc, #648]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 80094d6:	49a6      	ldr	r1, [pc, #664]	; (8009770 <HAL_RCC_OscConfig+0x348>)
 80094d8:	6813      	ldr	r3, [r2, #0]
 80094da:	400b      	ands	r3, r1
 80094dc:	6921      	ldr	r1, [r4, #16]
 80094de:	430b      	orrs	r3, r1
 80094e0:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	4aa3      	ldr	r2, [pc, #652]	; (8009774 <HAL_RCC_OscConfig+0x34c>)
 80094e6:	049b      	lsls	r3, r3, #18
 80094e8:	0f5b      	lsrs	r3, r3, #29
 80094ea:	40da      	lsrs	r2, r3
 80094ec:	49a2      	ldr	r1, [pc, #648]	; (8009778 <HAL_RCC_OscConfig+0x350>)
 80094ee:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80094f0:	4ba2      	ldr	r3, [pc, #648]	; (800977c <HAL_RCC_OscConfig+0x354>)
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	f7fe fb40 	bl	8007b78 <HAL_InitTick>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d000      	beq.n	80094fe <HAL_RCC_OscConfig+0xd6>
 80094fc:	e092      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	071a      	lsls	r2, r3, #28
 8009502:	d46d      	bmi.n	80095e0 <HAL_RCC_OscConfig+0x1b8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009504:	075b      	lsls	r3, r3, #29
 8009506:	d545      	bpl.n	8009594 <HAL_RCC_OscConfig+0x16c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009508:	2338      	movs	r3, #56	; 0x38
 800950a:	4a95      	ldr	r2, [pc, #596]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 800950c:	6891      	ldr	r1, [r2, #8]
 800950e:	400b      	ands	r3, r1
 8009510:	2b20      	cmp	r3, #32
 8009512:	d100      	bne.n	8009516 <HAL_RCC_OscConfig+0xee>
 8009514:	e0e3      	b.n	80096de <HAL_RCC_OscConfig+0x2b6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009516:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8009518:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800951a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800951c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800951e:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009520:	4219      	tst	r1, r3
 8009522:	d108      	bne.n	8009536 <HAL_RCC_OscConfig+0x10e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009524:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009526:	4319      	orrs	r1, r3
 8009528:	63d1      	str	r1, [r2, #60]	; 0x3c
 800952a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800952c:	4013      	ands	r3, r2
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8009532:	2301      	movs	r3, #1
 8009534:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009536:	2780      	movs	r7, #128	; 0x80
 8009538:	4e91      	ldr	r6, [pc, #580]	; (8009780 <HAL_RCC_OscConfig+0x358>)
 800953a:	007f      	lsls	r7, r7, #1
 800953c:	6833      	ldr	r3, [r6, #0]
 800953e:	423b      	tst	r3, r7
 8009540:	d100      	bne.n	8009544 <HAL_RCC_OscConfig+0x11c>
 8009542:	e0d5      	b.n	80096f0 <HAL_RCC_OscConfig+0x2c8>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009544:	68a3      	ldr	r3, [r4, #8]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d100      	bne.n	800954c <HAL_RCC_OscConfig+0x124>
 800954a:	e123      	b.n	8009794 <HAL_RCC_OscConfig+0x36c>
 800954c:	2b05      	cmp	r3, #5
 800954e:	d100      	bne.n	8009552 <HAL_RCC_OscConfig+0x12a>
 8009550:	e1ba      	b.n	80098c8 <HAL_RCC_OscConfig+0x4a0>
 8009552:	2101      	movs	r1, #1
 8009554:	4e82      	ldr	r6, [pc, #520]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 8009556:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8009558:	438a      	bics	r2, r1
 800955a:	65f2      	str	r2, [r6, #92]	; 0x5c
 800955c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 800955e:	3103      	adds	r1, #3
 8009560:	438a      	bics	r2, r1
 8009562:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009564:	2b00      	cmp	r3, #0
 8009566:	d000      	beq.n	800956a <HAL_RCC_OscConfig+0x142>
 8009568:	e118      	b.n	800979c <HAL_RCC_OscConfig+0x374>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956a:	f7fe fc49 	bl	8007e00 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800956e:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8009570:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009572:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009574:	4d83      	ldr	r5, [pc, #524]	; (8009784 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009576:	e005      	b.n	8009584 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009578:	f7fe fc42 	bl	8007e00 <HAL_GetTick>
 800957c:	1bc0      	subs	r0, r0, r7
 800957e:	42a8      	cmp	r0, r5
 8009580:	d900      	bls.n	8009584 <HAL_RCC_OscConfig+0x15c>
 8009582:	e0c4      	b.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009584:	4642      	mov	r2, r8
 8009586:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8009588:	421a      	tst	r2, r3
 800958a:	d1f5      	bne.n	8009578 <HAL_RCC_OscConfig+0x150>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800958c:	464b      	mov	r3, r9
 800958e:	2b01      	cmp	r3, #1
 8009590:	d100      	bne.n	8009594 <HAL_RCC_OscConfig+0x16c>
 8009592:	e155      	b.n	8009840 <HAL_RCC_OscConfig+0x418>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009594:	69e3      	ldr	r3, [r4, #28]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d020      	beq.n	80095dc <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800959a:	2238      	movs	r2, #56	; 0x38
 800959c:	4d70      	ldr	r5, [pc, #448]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 800959e:	68a9      	ldr	r1, [r5, #8]
 80095a0:	400a      	ands	r2, r1
 80095a2:	2a10      	cmp	r2, #16
 80095a4:	d100      	bne.n	80095a8 <HAL_RCC_OscConfig+0x180>
 80095a6:	e10b      	b.n	80097c0 <HAL_RCC_OscConfig+0x398>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d100      	bne.n	80095ae <HAL_RCC_OscConfig+0x186>
 80095ac:	e14e      	b.n	800984c <HAL_RCC_OscConfig+0x424>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	4a75      	ldr	r2, [pc, #468]	; (8009788 <HAL_RCC_OscConfig+0x360>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095b2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80095b4:	4013      	ands	r3, r2
 80095b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80095b8:	f7fe fc22 	bl	8007e00 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095bc:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80095be:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095c0:	e005      	b.n	80095ce <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095c2:	f7fe fc1d 	bl	8007e00 <HAL_GetTick>
 80095c6:	1b00      	subs	r0, r0, r4
 80095c8:	2802      	cmp	r0, #2
 80095ca:	d900      	bls.n	80095ce <HAL_RCC_OscConfig+0x1a6>
 80095cc:	e09f      	b.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	4233      	tst	r3, r6
 80095d2:	d1f6      	bne.n	80095c2 <HAL_RCC_OscConfig+0x19a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80095d4:	68eb      	ldr	r3, [r5, #12]
 80095d6:	4a6d      	ldr	r2, [pc, #436]	; (800978c <HAL_RCC_OscConfig+0x364>)
 80095d8:	4013      	ands	r3, r2
 80095da:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80095dc:	2000      	movs	r0, #0
 80095de:	e022      	b.n	8009626 <HAL_RCC_OscConfig+0x1fe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80095e0:	2238      	movs	r2, #56	; 0x38
 80095e2:	4d5f      	ldr	r5, [pc, #380]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 80095e4:	68a9      	ldr	r1, [r5, #8]
 80095e6:	400a      	ands	r2, r1
 80095e8:	2a18      	cmp	r2, #24
 80095ea:	d02f      	beq.n	800964c <HAL_RCC_OscConfig+0x224>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095ec:	69a3      	ldr	r3, [r4, #24]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d100      	bne.n	80095f4 <HAL_RCC_OscConfig+0x1cc>
 80095f2:	e08e      	b.n	8009712 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_LSI_ENABLE();
 80095f4:	2201      	movs	r2, #1
 80095f6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095f8:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80095fa:	4313      	orrs	r3, r2
 80095fc:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80095fe:	f7fe fbff 	bl	8007e00 <HAL_GetTick>
 8009602:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009604:	e005      	b.n	8009612 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009606:	f7fe fbfb 	bl	8007e00 <HAL_GetTick>
 800960a:	1b80      	subs	r0, r0, r6
 800960c:	2802      	cmp	r0, #2
 800960e:	d900      	bls.n	8009612 <HAL_RCC_OscConfig+0x1ea>
 8009610:	e07d      	b.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009612:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009614:	421f      	tst	r7, r3
 8009616:	d0f6      	beq.n	8009606 <HAL_RCC_OscConfig+0x1de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	e773      	b.n	8009504 <HAL_RCC_OscConfig+0xdc>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800961c:	68e3      	ldr	r3, [r4, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d000      	beq.n	8009624 <HAL_RCC_OscConfig+0x1fc>
 8009622:	e750      	b.n	80094c6 <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 8009624:	2001      	movs	r0, #1
}
 8009626:	b003      	add	sp, #12
 8009628:	bcc0      	pop	{r6, r7}
 800962a:	46b9      	mov	r9, r7
 800962c:	46b0      	mov	r8, r6
 800962e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009630:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009632:	0789      	lsls	r1, r1, #30
 8009634:	d000      	beq.n	8009638 <HAL_RCC_OscConfig+0x210>
 8009636:	e70e      	b.n	8009456 <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009638:	4a49      	ldr	r2, [pc, #292]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 800963a:	6812      	ldr	r2, [r2, #0]
 800963c:	0392      	lsls	r2, r2, #14
 800963e:	d400      	bmi.n	8009642 <HAL_RCC_OscConfig+0x21a>
 8009640:	e730      	b.n	80094a4 <HAL_RCC_OscConfig+0x7c>
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	2a00      	cmp	r2, #0
 8009646:	d000      	beq.n	800964a <HAL_RCC_OscConfig+0x222>
 8009648:	e72c      	b.n	80094a4 <HAL_RCC_OscConfig+0x7c>
 800964a:	e7eb      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800964c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800964e:	0792      	lsls	r2, r2, #30
 8009650:	d400      	bmi.n	8009654 <HAL_RCC_OscConfig+0x22c>
 8009652:	e757      	b.n	8009504 <HAL_RCC_OscConfig+0xdc>
 8009654:	69a2      	ldr	r2, [r4, #24]
 8009656:	2a00      	cmp	r2, #0
 8009658:	d000      	beq.n	800965c <HAL_RCC_OscConfig+0x234>
 800965a:	e753      	b.n	8009504 <HAL_RCC_OscConfig+0xdc>
 800965c:	e7e2      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800965e:	4a40      	ldr	r2, [pc, #256]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 8009660:	6811      	ldr	r1, [r2, #0]
 8009662:	430b      	orrs	r3, r1
 8009664:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009666:	f7fe fbcb 	bl	8007e00 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800966a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800966c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800966e:	4f3c      	ldr	r7, [pc, #240]	; (8009760 <HAL_RCC_OscConfig+0x338>)
 8009670:	02b6      	lsls	r6, r6, #10
 8009672:	e004      	b.n	800967e <HAL_RCC_OscConfig+0x256>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009674:	f7fe fbc4 	bl	8007e00 <HAL_GetTick>
 8009678:	1b40      	subs	r0, r0, r5
 800967a:	2864      	cmp	r0, #100	; 0x64
 800967c:	d847      	bhi.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	4233      	tst	r3, r6
 8009682:	d0f7      	beq.n	8009674 <HAL_RCC_OscConfig+0x24c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	e70d      	b.n	80094a4 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009688:	3b0d      	subs	r3, #13
 800968a:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800968c:	2b02      	cmp	r3, #2
 800968e:	d100      	bne.n	8009692 <HAL_RCC_OscConfig+0x26a>
 8009690:	e0c7      	b.n	8009822 <HAL_RCC_OscConfig+0x3fa>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009692:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009694:	4d32      	ldr	r5, [pc, #200]	; (8009760 <HAL_RCC_OscConfig+0x338>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009696:	2b00      	cmp	r3, #0
 8009698:	d04e      	beq.n	8009738 <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800969a:	682b      	ldr	r3, [r5, #0]
 800969c:	4a34      	ldr	r2, [pc, #208]	; (8009770 <HAL_RCC_OscConfig+0x348>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800969e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80096a0:	4013      	ands	r3, r2
 80096a2:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096a4:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80096a6:	4313      	orrs	r3, r2
 80096a8:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80096aa:	2380      	movs	r3, #128	; 0x80
 80096ac:	682a      	ldr	r2, [r5, #0]
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	4313      	orrs	r3, r2
 80096b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80096b4:	f7fe fba4 	bl	8007e00 <HAL_GetTick>
 80096b8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096ba:	e004      	b.n	80096c6 <HAL_RCC_OscConfig+0x29e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096bc:	f7fe fba0 	bl	8007e00 <HAL_GetTick>
 80096c0:	1b80      	subs	r0, r0, r6
 80096c2:	2802      	cmp	r0, #2
 80096c4:	d823      	bhi.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	423b      	tst	r3, r7
 80096ca:	d0f7      	beq.n	80096bc <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096cc:	686a      	ldr	r2, [r5, #4]
 80096ce:	6963      	ldr	r3, [r4, #20]
 80096d0:	4926      	ldr	r1, [pc, #152]	; (800976c <HAL_RCC_OscConfig+0x344>)
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	400a      	ands	r2, r1
 80096d6:	4313      	orrs	r3, r2
 80096d8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	e710      	b.n	8009500 <HAL_RCC_OscConfig+0xd8>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80096de:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80096e0:	079b      	lsls	r3, r3, #30
 80096e2:	d400      	bmi.n	80096e6 <HAL_RCC_OscConfig+0x2be>
 80096e4:	e756      	b.n	8009594 <HAL_RCC_OscConfig+0x16c>
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d000      	beq.n	80096ee <HAL_RCC_OscConfig+0x2c6>
 80096ec:	e752      	b.n	8009594 <HAL_RCC_OscConfig+0x16c>
 80096ee:	e799      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096f0:	6833      	ldr	r3, [r6, #0]
 80096f2:	433b      	orrs	r3, r7
 80096f4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80096f6:	f7fe fb83 	bl	8007e00 <HAL_GetTick>
 80096fa:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096fc:	6833      	ldr	r3, [r6, #0]
 80096fe:	423b      	tst	r3, r7
 8009700:	d000      	beq.n	8009704 <HAL_RCC_OscConfig+0x2dc>
 8009702:	e71f      	b.n	8009544 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009704:	f7fe fb7c 	bl	8007e00 <HAL_GetTick>
 8009708:	1b40      	subs	r0, r0, r5
 800970a:	2802      	cmp	r0, #2
 800970c:	d9f6      	bls.n	80096fc <HAL_RCC_OscConfig+0x2d4>
            return HAL_TIMEOUT;
 800970e:	2003      	movs	r0, #3
 8009710:	e789      	b.n	8009626 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_LSI_DISABLE();
 8009712:	2201      	movs	r2, #1
 8009714:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009716:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8009718:	4393      	bics	r3, r2
 800971a:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800971c:	f7fe fb70 	bl	8007e00 <HAL_GetTick>
 8009720:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009722:	e004      	b.n	800972e <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009724:	f7fe fb6c 	bl	8007e00 <HAL_GetTick>
 8009728:	1b80      	subs	r0, r0, r6
 800972a:	2802      	cmp	r0, #2
 800972c:	d8ef      	bhi.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800972e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009730:	421f      	tst	r7, r3
 8009732:	d1f7      	bne.n	8009724 <HAL_RCC_OscConfig+0x2fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	e6e5      	b.n	8009504 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	4a15      	ldr	r2, [pc, #84]	; (8009790 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800973c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800973e:	4013      	ands	r3, r2
 8009740:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009742:	f7fe fb5d 	bl	8007e00 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009746:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8009748:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800974a:	e004      	b.n	8009756 <HAL_RCC_OscConfig+0x32e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800974c:	f7fe fb58 	bl	8007e00 <HAL_GetTick>
 8009750:	1b80      	subs	r0, r0, r6
 8009752:	2802      	cmp	r0, #2
 8009754:	d8db      	bhi.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009756:	682b      	ldr	r3, [r5, #0]
 8009758:	423b      	tst	r3, r7
 800975a:	d1f7      	bne.n	800974c <HAL_RCC_OscConfig+0x324>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	e6cf      	b.n	8009500 <HAL_RCC_OscConfig+0xd8>
 8009760:	40021000 	.word	0x40021000
 8009764:	fffeffff 	.word	0xfffeffff
 8009768:	fffbffff 	.word	0xfffbffff
 800976c:	ffff80ff 	.word	0xffff80ff
 8009770:	ffffc7ff 	.word	0xffffc7ff
 8009774:	00f42400 	.word	0x00f42400
 8009778:	2000011c 	.word	0x2000011c
 800977c:	20000124 	.word	0x20000124
 8009780:	40007000 	.word	0x40007000
 8009784:	00001388 	.word	0x00001388
 8009788:	feffffff 	.word	0xfeffffff
 800978c:	effefffc 	.word	0xeffefffc
 8009790:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009794:	4951      	ldr	r1, [pc, #324]	; (80098dc <HAL_RCC_OscConfig+0x4b4>)
 8009796:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8009798:	4313      	orrs	r3, r2
 800979a:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 800979c:	f7fe fb30 	bl	8007e00 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a0:	4b4e      	ldr	r3, [pc, #312]	; (80098dc <HAL_RCC_OscConfig+0x4b4>)
        tickstart = HAL_GetTick();
 80097a2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a4:	4698      	mov	r8, r3
 80097a6:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097a8:	4d4d      	ldr	r5, [pc, #308]	; (80098e0 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097aa:	e004      	b.n	80097b6 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ac:	f7fe fb28 	bl	8007e00 <HAL_GetTick>
 80097b0:	1b80      	subs	r0, r0, r6
 80097b2:	42a8      	cmp	r0, r5
 80097b4:	d8ab      	bhi.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097b6:	4643      	mov	r3, r8
 80097b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ba:	421f      	tst	r7, r3
 80097bc:	d0f6      	beq.n	80097ac <HAL_RCC_OscConfig+0x384>
 80097be:	e6e5      	b.n	800958c <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d100      	bne.n	80097c6 <HAL_RCC_OscConfig+0x39e>
 80097c4:	e72e      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097c6:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80097c8:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097ca:	6a21      	ldr	r1, [r4, #32]
 80097cc:	4013      	ands	r3, r2
 80097ce:	428b      	cmp	r3, r1
 80097d0:	d000      	beq.n	80097d4 <HAL_RCC_OscConfig+0x3ac>
 80097d2:	e727      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80097d4:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80097d8:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097da:	428b      	cmp	r3, r1
 80097dc:	d000      	beq.n	80097e0 <HAL_RCC_OscConfig+0x3b8>
 80097de:	e721      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097e0:	21fe      	movs	r1, #254	; 0xfe
 80097e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80097e4:	01c9      	lsls	r1, r1, #7
 80097e6:	4011      	ands	r1, r2
 80097e8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80097ea:	4299      	cmp	r1, r3
 80097ec:	d000      	beq.n	80097f0 <HAL_RCC_OscConfig+0x3c8>
 80097ee:	e719      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80097f0:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80097f4:	039b      	lsls	r3, r3, #14
 80097f6:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097f8:	428b      	cmp	r3, r1
 80097fa:	d000      	beq.n	80097fe <HAL_RCC_OscConfig+0x3d6>
 80097fc:	e712      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80097fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009800:	0f52      	lsrs	r2, r2, #29
 8009802:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009804:	429a      	cmp	r2, r3
 8009806:	d000      	beq.n	800980a <HAL_RCC_OscConfig+0x3e2>
 8009808:	e70c      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
  return HAL_OK;
 800980a:	2000      	movs	r0, #0
 800980c:	e70b      	b.n	8009626 <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800980e:	2180      	movs	r1, #128	; 0x80
 8009810:	4b32      	ldr	r3, [pc, #200]	; (80098dc <HAL_RCC_OscConfig+0x4b4>)
 8009812:	02c9      	lsls	r1, r1, #11
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	4301      	orrs	r1, r0
 8009818:	6019      	str	r1, [r3, #0]
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	430a      	orrs	r2, r1
 800981e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009820:	e721      	b.n	8009666 <HAL_RCC_OscConfig+0x23e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	055b      	lsls	r3, r3, #21
 8009826:	d503      	bpl.n	8009830 <HAL_RCC_OscConfig+0x408>
 8009828:	68e3      	ldr	r3, [r4, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d100      	bne.n	8009830 <HAL_RCC_OscConfig+0x408>
 800982e:	e6f9      	b.n	8009624 <HAL_RCC_OscConfig+0x1fc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009830:	6851      	ldr	r1, [r2, #4]
 8009832:	6963      	ldr	r3, [r4, #20]
 8009834:	482b      	ldr	r0, [pc, #172]	; (80098e4 <HAL_RCC_OscConfig+0x4bc>)
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	4001      	ands	r1, r0
 800983a:	430b      	orrs	r3, r1
 800983c:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800983e:	e657      	b.n	80094f0 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_PWR_CLK_DISABLE();
 8009840:	4a26      	ldr	r2, [pc, #152]	; (80098dc <HAL_RCC_OscConfig+0x4b4>)
 8009842:	4929      	ldr	r1, [pc, #164]	; (80098e8 <HAL_RCC_OscConfig+0x4c0>)
 8009844:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009846:	400b      	ands	r3, r1
 8009848:	63d3      	str	r3, [r2, #60]	; 0x3c
 800984a:	e6a3      	b.n	8009594 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	4a27      	ldr	r2, [pc, #156]	; (80098ec <HAL_RCC_OscConfig+0x4c4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009850:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8009852:	4013      	ands	r3, r2
 8009854:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009856:	f7fe fad3 	bl	8007e00 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800985a:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800985c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800985e:	e005      	b.n	800986c <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009860:	f7fe face 	bl	8007e00 <HAL_GetTick>
 8009864:	1b80      	subs	r0, r0, r6
 8009866:	2802      	cmp	r0, #2
 8009868:	d900      	bls.n	800986c <HAL_RCC_OscConfig+0x444>
 800986a:	e750      	b.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	423b      	tst	r3, r7
 8009870:	d1f6      	bne.n	8009860 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009872:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009874:	6a23      	ldr	r3, [r4, #32]
 8009876:	68ea      	ldr	r2, [r5, #12]
 8009878:	430b      	orrs	r3, r1
 800987a:	491d      	ldr	r1, [pc, #116]	; (80098f0 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800987c:	4e17      	ldr	r6, [pc, #92]	; (80098dc <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800987e:	400a      	ands	r2, r1
 8009880:	4313      	orrs	r3, r2
 8009882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009884:	4313      	orrs	r3, r2
 8009886:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009888:	4313      	orrs	r3, r2
 800988a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800988c:	0212      	lsls	r2, r2, #8
 800988e:	4313      	orrs	r3, r2
 8009890:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8009892:	2380      	movs	r3, #128	; 0x80
 8009894:	682a      	ldr	r2, [r5, #0]
 8009896:	045b      	lsls	r3, r3, #17
 8009898:	4313      	orrs	r3, r2
 800989a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800989c:	2380      	movs	r3, #128	; 0x80
 800989e:	68ea      	ldr	r2, [r5, #12]
 80098a0:	055b      	lsls	r3, r3, #21
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80098a6:	f7fe faab 	bl	8007e00 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098aa:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80098ac:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098ae:	04ad      	lsls	r5, r5, #18
 80098b0:	e005      	b.n	80098be <HAL_RCC_OscConfig+0x496>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098b2:	f7fe faa5 	bl	8007e00 <HAL_GetTick>
 80098b6:	1b00      	subs	r0, r0, r4
 80098b8:	2802      	cmp	r0, #2
 80098ba:	d900      	bls.n	80098be <HAL_RCC_OscConfig+0x496>
 80098bc:	e727      	b.n	800970e <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098be:	6833      	ldr	r3, [r6, #0]
 80098c0:	422b      	tst	r3, r5
 80098c2:	d0f6      	beq.n	80098b2 <HAL_RCC_OscConfig+0x48a>
  return HAL_OK;
 80098c4:	2000      	movs	r0, #0
 80098c6:	e6ae      	b.n	8009626 <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098c8:	2104      	movs	r1, #4
 80098ca:	4b04      	ldr	r3, [pc, #16]	; (80098dc <HAL_RCC_OscConfig+0x4b4>)
 80098cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098ce:	430a      	orrs	r2, r1
 80098d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80098d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098d4:	3903      	subs	r1, #3
 80098d6:	430a      	orrs	r2, r1
 80098d8:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80098da:	e75f      	b.n	800979c <HAL_RCC_OscConfig+0x374>
 80098dc:	40021000 	.word	0x40021000
 80098e0:	00001388 	.word	0x00001388
 80098e4:	ffff80ff 	.word	0xffff80ff
 80098e8:	efffffff 	.word	0xefffffff
 80098ec:	feffffff 	.word	0xfeffffff
 80098f0:	1fc1808c 	.word	0x1fc1808c

080098f4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80098f4:	2338      	movs	r3, #56	; 0x38
 80098f6:	4a21      	ldr	r2, [pc, #132]	; (800997c <HAL_RCC_GetSysClockFreq+0x88>)
{
 80098f8:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80098fa:	6891      	ldr	r1, [r2, #8]
 80098fc:	420b      	tst	r3, r1
 80098fe:	d105      	bne.n	800990c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009900:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009902:	481f      	ldr	r0, [pc, #124]	; (8009980 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009904:	049b      	lsls	r3, r3, #18
 8009906:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009908:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800990a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800990c:	6891      	ldr	r1, [r2, #8]
 800990e:	4019      	ands	r1, r3
 8009910:	2908      	cmp	r1, #8
 8009912:	d012      	beq.n	800993a <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009914:	6891      	ldr	r1, [r2, #8]
 8009916:	4019      	ands	r1, r3
 8009918:	2910      	cmp	r1, #16
 800991a:	d010      	beq.n	800993e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800991c:	6891      	ldr	r1, [r2, #8]
 800991e:	4019      	ands	r1, r3
 8009920:	2920      	cmp	r1, #32
 8009922:	d022      	beq.n	800996a <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009924:	6892      	ldr	r2, [r2, #8]
 8009926:	4013      	ands	r3, r2
    sysclockfreq = 0U;
 8009928:	3b18      	subs	r3, #24
 800992a:	0018      	movs	r0, r3
 800992c:	4243      	negs	r3, r0
 800992e:	4158      	adcs	r0, r3
 8009930:	23fa      	movs	r3, #250	; 0xfa
 8009932:	4240      	negs	r0, r0
 8009934:	01db      	lsls	r3, r3, #7
 8009936:	4018      	ands	r0, r3
 8009938:	e7e7      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800993a:	4812      	ldr	r0, [pc, #72]	; (8009984 <HAL_RCC_GetSysClockFreq+0x90>)
 800993c:	e7e5      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800993e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009940:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009942:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009944:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009946:	0649      	lsls	r1, r1, #25
 8009948:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800994a:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800994c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800994e:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8009950:	079b      	lsls	r3, r3, #30
 8009952:	d00d      	beq.n	8009970 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009954:	480a      	ldr	r0, [pc, #40]	; (8009980 <HAL_RCC_GetSysClockFreq+0x8c>)
 8009956:	f7f6 fbf3 	bl	8000140 <__udivsi3>
 800995a:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800995c:	4b07      	ldr	r3, [pc, #28]	; (800997c <HAL_RCC_GetSysClockFreq+0x88>)
 800995e:	68d9      	ldr	r1, [r3, #12]
 8009960:	0f49      	lsrs	r1, r1, #29
 8009962:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8009964:	f7f6 fbec 	bl	8000140 <__udivsi3>
 8009968:	e7cf      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800996a:	2080      	movs	r0, #128	; 0x80
 800996c:	0200      	lsls	r0, r0, #8
 800996e:	e7cc      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009970:	4804      	ldr	r0, [pc, #16]	; (8009984 <HAL_RCC_GetSysClockFreq+0x90>)
 8009972:	f7f6 fbe5 	bl	8000140 <__udivsi3>
 8009976:	4360      	muls	r0, r4
        break;
 8009978:	e7f0      	b.n	800995c <HAL_RCC_GetSysClockFreq+0x68>
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	40021000 	.word	0x40021000
 8009980:	00f42400 	.word	0x00f42400
 8009984:	007a1200 	.word	0x007a1200

08009988 <HAL_RCC_ClockConfig>:
{
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	46ce      	mov	lr, r9
 800998c:	4647      	mov	r7, r8
 800998e:	0005      	movs	r5, r0
 8009990:	000c      	movs	r4, r1
 8009992:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8009994:	2800      	cmp	r0, #0
 8009996:	d026      	beq.n	80099e6 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009998:	2207      	movs	r2, #7
 800999a:	4e57      	ldr	r6, [pc, #348]	; (8009af8 <HAL_RCC_ClockConfig+0x170>)
 800999c:	6833      	ldr	r3, [r6, #0]
 800999e:	4013      	ands	r3, r2
 80099a0:	428b      	cmp	r3, r1
 80099a2:	d35e      	bcc.n	8009a62 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	079a      	lsls	r2, r3, #30
 80099a8:	d50e      	bpl.n	80099c8 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099aa:	075a      	lsls	r2, r3, #29
 80099ac:	d505      	bpl.n	80099ba <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80099ae:	22e0      	movs	r2, #224	; 0xe0
 80099b0:	4952      	ldr	r1, [pc, #328]	; (8009afc <HAL_RCC_ClockConfig+0x174>)
 80099b2:	01d2      	lsls	r2, r2, #7
 80099b4:	6888      	ldr	r0, [r1, #8]
 80099b6:	4302      	orrs	r2, r0
 80099b8:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099ba:	4950      	ldr	r1, [pc, #320]	; (8009afc <HAL_RCC_ClockConfig+0x174>)
 80099bc:	4850      	ldr	r0, [pc, #320]	; (8009b00 <HAL_RCC_ClockConfig+0x178>)
 80099be:	688a      	ldr	r2, [r1, #8]
 80099c0:	4002      	ands	r2, r0
 80099c2:	68a8      	ldr	r0, [r5, #8]
 80099c4:	4302      	orrs	r2, r0
 80099c6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099c8:	07db      	lsls	r3, r3, #31
 80099ca:	d52b      	bpl.n	8009a24 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099cc:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099ce:	4a4b      	ldr	r2, [pc, #300]	; (8009afc <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d100      	bne.n	80099d6 <HAL_RCC_ClockConfig+0x4e>
 80099d4:	e07c      	b.n	8009ad0 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d007      	beq.n	80099ea <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d000      	beq.n	80099e0 <HAL_RCC_ClockConfig+0x58>
 80099de:	e07d      	b.n	8009adc <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099e0:	6812      	ldr	r2, [r2, #0]
 80099e2:	0552      	lsls	r2, r2, #21
 80099e4:	d404      	bmi.n	80099f0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80099e6:	2001      	movs	r0, #1
 80099e8:	e037      	b.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	0192      	lsls	r2, r2, #6
 80099ee:	d5fa      	bpl.n	80099e6 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099f0:	2107      	movs	r1, #7
 80099f2:	4e42      	ldr	r6, [pc, #264]	; (8009afc <HAL_RCC_ClockConfig+0x174>)
 80099f4:	68b2      	ldr	r2, [r6, #8]
 80099f6:	438a      	bics	r2, r1
 80099f8:	4313      	orrs	r3, r2
 80099fa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80099fc:	f7fe fa00 	bl	8007e00 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a00:	2338      	movs	r3, #56	; 0x38
 8009a02:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a04:	4b3f      	ldr	r3, [pc, #252]	; (8009b04 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8009a06:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a08:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a0a:	e004      	b.n	8009a16 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a0c:	f7fe f9f8 	bl	8007e00 <HAL_GetTick>
 8009a10:	1bc0      	subs	r0, r0, r7
 8009a12:	4548      	cmp	r0, r9
 8009a14:	d83b      	bhi.n	8009a8e <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a16:	4643      	mov	r3, r8
 8009a18:	68b2      	ldr	r2, [r6, #8]
 8009a1a:	401a      	ands	r2, r3
 8009a1c:	686b      	ldr	r3, [r5, #4]
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d1f3      	bne.n	8009a0c <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a24:	2207      	movs	r2, #7
 8009a26:	4e34      	ldr	r6, [pc, #208]	; (8009af8 <HAL_RCC_ClockConfig+0x170>)
 8009a28:	6833      	ldr	r3, [r6, #0]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	d838      	bhi.n	8009aa2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	075b      	lsls	r3, r3, #29
 8009a34:	d42d      	bmi.n	8009a92 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009a36:	f7ff ff5d 	bl	80098f4 <HAL_RCC_GetSysClockFreq>
 8009a3a:	4b30      	ldr	r3, [pc, #192]	; (8009afc <HAL_RCC_ClockConfig+0x174>)
 8009a3c:	4a32      	ldr	r2, [pc, #200]	; (8009b08 <HAL_RCC_ClockConfig+0x180>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	4932      	ldr	r1, [pc, #200]	; (8009b0c <HAL_RCC_ClockConfig+0x184>)
 8009a42:	051b      	lsls	r3, r3, #20
 8009a44:	0f1b      	lsrs	r3, r3, #28
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	589b      	ldr	r3, [r3, r2]
 8009a4a:	221f      	movs	r2, #31
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8009a50:	4b2f      	ldr	r3, [pc, #188]	; (8009b10 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009a52:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f7fe f88f 	bl	8007b78 <HAL_InitTick>
}
 8009a5a:	bcc0      	pop	{r6, r7}
 8009a5c:	46b9      	mov	r9, r7
 8009a5e:	46b0      	mov	r8, r6
 8009a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a62:	6833      	ldr	r3, [r6, #0]
 8009a64:	4393      	bics	r3, r2
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009a6a:	f7fe f9c9 	bl	8007e00 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a6e:	2307      	movs	r3, #7
 8009a70:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8009a74:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a76:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a78:	4642      	mov	r2, r8
 8009a7a:	6833      	ldr	r3, [r6, #0]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	d100      	bne.n	8009a84 <HAL_RCC_ClockConfig+0xfc>
 8009a82:	e78f      	b.n	80099a4 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a84:	f7fe f9bc 	bl	8007e00 <HAL_GetTick>
 8009a88:	1bc0      	subs	r0, r0, r7
 8009a8a:	4548      	cmp	r0, r9
 8009a8c:	d9f4      	bls.n	8009a78 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8009a8e:	2003      	movs	r0, #3
 8009a90:	e7e3      	b.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009a92:	4a1a      	ldr	r2, [pc, #104]	; (8009afc <HAL_RCC_ClockConfig+0x174>)
 8009a94:	491f      	ldr	r1, [pc, #124]	; (8009b14 <HAL_RCC_ClockConfig+0x18c>)
 8009a96:	6893      	ldr	r3, [r2, #8]
 8009a98:	400b      	ands	r3, r1
 8009a9a:	68e9      	ldr	r1, [r5, #12]
 8009a9c:	430b      	orrs	r3, r1
 8009a9e:	6093      	str	r3, [r2, #8]
 8009aa0:	e7c9      	b.n	8009a36 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aa2:	6833      	ldr	r3, [r6, #0]
 8009aa4:	4393      	bics	r3, r2
 8009aa6:	4323      	orrs	r3, r4
 8009aa8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009aaa:	f7fe f9a9 	bl	8007e00 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009aae:	2307      	movs	r3, #7
 8009ab0:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab2:	4b14      	ldr	r3, [pc, #80]	; (8009b04 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8009ab4:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab6:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009ab8:	4642      	mov	r2, r8
 8009aba:	6833      	ldr	r3, [r6, #0]
 8009abc:	4013      	ands	r3, r2
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	d0b6      	beq.n	8009a30 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ac2:	f7fe f99d 	bl	8007e00 <HAL_GetTick>
 8009ac6:	1bc0      	subs	r0, r0, r7
 8009ac8:	4548      	cmp	r0, r9
 8009aca:	d9f5      	bls.n	8009ab8 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8009acc:	2003      	movs	r0, #3
 8009ace:	e7c4      	b.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	0392      	lsls	r2, r2, #14
 8009ad4:	d500      	bpl.n	8009ad8 <HAL_RCC_ClockConfig+0x150>
 8009ad6:	e78b      	b.n	80099f0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8009ad8:	2001      	movs	r0, #1
 8009ada:	e7be      	b.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d005      	beq.n	8009aec <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ae0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009ae2:	0792      	lsls	r2, r2, #30
 8009ae4:	d500      	bpl.n	8009ae8 <HAL_RCC_ClockConfig+0x160>
 8009ae6:	e783      	b.n	80099f0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8009ae8:	2001      	movs	r0, #1
 8009aea:	e7b6      	b.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009aec:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8009aee:	0792      	lsls	r2, r2, #30
 8009af0:	d500      	bpl.n	8009af4 <HAL_RCC_ClockConfig+0x16c>
 8009af2:	e77d      	b.n	80099f0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8009af4:	2001      	movs	r0, #1
 8009af6:	e7b0      	b.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
 8009af8:	40022000 	.word	0x40022000
 8009afc:	40021000 	.word	0x40021000
 8009b00:	fffff0ff 	.word	0xfffff0ff
 8009b04:	00001388 	.word	0x00001388
 8009b08:	08013abc 	.word	0x08013abc
 8009b0c:	2000011c 	.word	0x2000011c
 8009b10:	20000124 	.word	0x20000124
 8009b14:	ffff8fff 	.word	0xffff8fff

08009b18 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009b1a:	4907      	ldr	r1, [pc, #28]	; (8009b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b1c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009b1e:	4a07      	ldr	r2, [pc, #28]	; (8009b3c <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009b20:	045b      	lsls	r3, r3, #17
 8009b22:	0f5b      	lsrs	r3, r3, #29
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	585b      	ldr	r3, [r3, r1]
 8009b28:	211f      	movs	r1, #31
 8009b2a:	6810      	ldr	r0, [r2, #0]
 8009b2c:	400b      	ands	r3, r1
 8009b2e:	40d8      	lsrs	r0, r3
}
 8009b30:	4770      	bx	lr
 8009b32:	46c0      	nop			; (mov r8, r8)
 8009b34:	40021000 	.word	0x40021000
 8009b38:	08013afc 	.word	0x08013afc
 8009b3c:	2000011c 	.word	0x2000011c

08009b40 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8009b40:	2307      	movs	r3, #7
{
 8009b42:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009b44:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b46:	4a09      	ldr	r2, [pc, #36]	; (8009b6c <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8009b48:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b4a:	6894      	ldr	r4, [r2, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009b4c:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b4e:	401c      	ands	r4, r3
 8009b50:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009b52:	6894      	ldr	r4, [r2, #8]
 8009b54:	402c      	ands	r4, r5
 8009b56:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8009b58:	24e0      	movs	r4, #224	; 0xe0
 8009b5a:	6892      	ldr	r2, [r2, #8]
 8009b5c:	01e4      	lsls	r4, r4, #7
 8009b5e:	4022      	ands	r2, r4
 8009b60:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b62:	4a03      	ldr	r2, [pc, #12]	; (8009b70 <HAL_RCC_GetClockConfig+0x30>)
 8009b64:	6812      	ldr	r2, [r2, #0]
 8009b66:	4013      	ands	r3, r2
 8009b68:	600b      	str	r3, [r1, #0]
}
 8009b6a:	bd30      	pop	{r4, r5, pc}
 8009b6c:	40021000 	.word	0x40021000
 8009b70:	40022000 	.word	0x40022000

08009b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b76:	46ce      	mov	lr, r9
 8009b78:	4647      	mov	r7, r8
 8009b7a:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b7c:	6803      	ldr	r3, [r0, #0]
{
 8009b7e:	0004      	movs	r4, r0
 8009b80:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b82:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b84:	039a      	lsls	r2, r3, #14
 8009b86:	d550      	bpl.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b88:	2280      	movs	r2, #128	; 0x80
 8009b8a:	4b56      	ldr	r3, [pc, #344]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009b8c:	0552      	lsls	r2, r2, #21
 8009b8e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8009b90:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b92:	4211      	tst	r1, r2
 8009b94:	d100      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8009b96:	e082      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b98:	2780      	movs	r7, #128	; 0x80
 8009b9a:	4d53      	ldr	r5, [pc, #332]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8009b9c:	007f      	lsls	r7, r7, #1
 8009b9e:	682b      	ldr	r3, [r5, #0]
 8009ba0:	433b      	orrs	r3, r7
 8009ba2:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ba4:	f7fe f92c 	bl	8007e00 <HAL_GetTick>
 8009ba8:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009baa:	e005      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bac:	f7fe f928 	bl	8007e00 <HAL_GetTick>
 8009bb0:	1b80      	subs	r0, r0, r6
 8009bb2:	2802      	cmp	r0, #2
 8009bb4:	d900      	bls.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009bb6:	e07c      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	423b      	tst	r3, r7
 8009bbc:	d0f6      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bbe:	4d49      	ldr	r5, [pc, #292]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009bc0:	23c0      	movs	r3, #192	; 0xc0
 8009bc2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	0011      	movs	r1, r2
 8009bc8:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009bca:	421a      	tst	r2, r3
 8009bcc:	d021      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8009bce:	69a0      	ldr	r0, [r4, #24]
 8009bd0:	4288      	cmp	r0, r1
 8009bd2:	d01f      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bd4:	2180      	movs	r1, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009bd6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bd8:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8009bda:	0249      	lsls	r1, r1, #9
 8009bdc:	4331      	orrs	r1, r6
 8009bde:	65e9      	str	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009be0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009be2:	4a42      	ldr	r2, [pc, #264]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0x178>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009be4:	4e42      	ldr	r6, [pc, #264]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009be6:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009be8:	4031      	ands	r1, r6
 8009bea:	65e9      	str	r1, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009bec:	65ea      	str	r2, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009bee:	07db      	lsls	r3, r3, #31
 8009bf0:	d400      	bmi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8009bf2:	e075      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf4:	f7fe f904 	bl	8007e00 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bf8:	4b3e      	ldr	r3, [pc, #248]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
        tickstart = HAL_GetTick();
 8009bfa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bfc:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bfe:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c00:	e004      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x98>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c02:	f7fe f8fd 	bl	8007e00 <HAL_GetTick>
 8009c06:	1b80      	subs	r0, r0, r6
 8009c08:	4548      	cmp	r0, r9
 8009c0a:	d852      	bhi.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c0c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009c0e:	421f      	tst	r7, r3
 8009c10:	d0f7      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009c12:	69a1      	ldr	r1, [r4, #24]
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c14:	4a33      	ldr	r2, [pc, #204]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009c16:	4835      	ldr	r0, [pc, #212]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8009c18:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8009c1a:	4003      	ands	r3, r0
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c20:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c22:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d048      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	07da      	lsls	r2, r3, #31
 8009c2c:	d506      	bpl.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c2e:	2503      	movs	r5, #3
 8009c30:	492c      	ldr	r1, [pc, #176]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009c32:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009c34:	43aa      	bics	r2, r5
 8009c36:	6865      	ldr	r5, [r4, #4]
 8009c38:	432a      	orrs	r2, r5
 8009c3a:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c3c:	079a      	lsls	r2, r3, #30
 8009c3e:	d506      	bpl.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c40:	250c      	movs	r5, #12
 8009c42:	4928      	ldr	r1, [pc, #160]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009c44:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009c46:	43aa      	bics	r2, r5
 8009c48:	68a5      	ldr	r5, [r4, #8]
 8009c4a:	432a      	orrs	r2, r5
 8009c4c:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c4e:	069a      	lsls	r2, r3, #26
 8009c50:	d506      	bpl.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c52:	4924      	ldr	r1, [pc, #144]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009c54:	4d28      	ldr	r5, [pc, #160]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009c56:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009c58:	402a      	ands	r2, r5
 8009c5a:	68e5      	ldr	r5, [r4, #12]
 8009c5c:	432a      	orrs	r2, r5
 8009c5e:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c60:	045a      	lsls	r2, r3, #17
 8009c62:	d50a      	bpl.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c64:	491f      	ldr	r1, [pc, #124]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009c66:	6965      	ldr	r5, [r4, #20]
 8009c68:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009c6a:	0092      	lsls	r2, r2, #2
 8009c6c:	0892      	lsrs	r2, r2, #2
 8009c6e:	432a      	orrs	r2, r5
 8009c70:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009c72:	2280      	movs	r2, #128	; 0x80
 8009c74:	05d2      	lsls	r2, r2, #23
 8009c76:	4295      	cmp	r5, r2
 8009c78:	d026      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009c7a:	051b      	lsls	r3, r3, #20
 8009c7c:	d50a      	bpl.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009c7e:	4a19      	ldr	r2, [pc, #100]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009c80:	6921      	ldr	r1, [r4, #16]
 8009c82:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009c84:	4c1d      	ldr	r4, [pc, #116]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8009c86:	4023      	ands	r3, r4
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	01db      	lsls	r3, r3, #7
 8009c90:	4299      	cmp	r1, r3
 8009c92:	d01f      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8009c94:	b003      	add	sp, #12
 8009c96:	bcc0      	pop	{r6, r7}
 8009c98:	46b9      	mov	r9, r7
 8009c9a:	46b0      	mov	r8, r6
 8009c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c9e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009ca0:	4311      	orrs	r1, r2
 8009ca2:	63d9      	str	r1, [r3, #60]	; 0x3c
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009cac:	2301      	movs	r3, #1
 8009cae:	4698      	mov	r8, r3
 8009cb0:	e772      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 8009cb2:	4643      	mov	r3, r8
      status = ret;
 8009cb4:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d1b6      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cba:	4a0a      	ldr	r2, [pc, #40]	; (8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009cbc:	4910      	ldr	r1, [pc, #64]	; (8009d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8009cbe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009cc0:	400b      	ands	r3, r1
 8009cc2:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	e7b0      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009cc8:	2280      	movs	r2, #128	; 0x80
 8009cca:	68cd      	ldr	r5, [r1, #12]
 8009ccc:	0252      	lsls	r2, r2, #9
 8009cce:	432a      	orrs	r2, r5
 8009cd0:	60ca      	str	r2, [r1, #12]
 8009cd2:	e7d2      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009cd4:	2380      	movs	r3, #128	; 0x80
 8009cd6:	68d1      	ldr	r1, [r2, #12]
 8009cd8:	025b      	lsls	r3, r3, #9
 8009cda:	430b      	orrs	r3, r1
 8009cdc:	60d3      	str	r3, [r2, #12]
  return status;
 8009cde:	e7d9      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009ce0:	0001      	movs	r1, r0
 8009ce2:	e797      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8009ce4:	40021000 	.word	0x40021000
 8009ce8:	40007000 	.word	0x40007000
 8009cec:	fffffcff 	.word	0xfffffcff
 8009cf0:	fffeffff 	.word	0xfffeffff
 8009cf4:	00001388 	.word	0x00001388
 8009cf8:	ffffcfff 	.word	0xffffcfff
 8009cfc:	ffff3fff 	.word	0xffff3fff
 8009d00:	efffffff 	.word	0xefffffff

08009d04 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8009d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d06:	46de      	mov	lr, fp
 8009d08:	4657      	mov	r7, sl
 8009d0a:	464e      	mov	r6, r9
 8009d0c:	4645      	mov	r5, r8
 8009d0e:	b5e0      	push	{r5, r6, r7, lr}
 8009d10:	b083      	sub	sp, #12
 8009d12:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009d14:	466b      	mov	r3, sp
 8009d16:	1cdf      	adds	r7, r3, #3
 8009d18:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8009d1a:	0015      	movs	r5, r2
 8009d1c:	4681      	mov	r9, r0
 8009d1e:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 8009d20:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009d22:	f7fe f86d 	bl	8007e00 <HAL_GetTick>
 8009d26:	1976      	adds	r6, r6, r5
 8009d28:	1a33      	subs	r3, r6, r0
 8009d2a:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8009d2c:	f7fe f868 	bl	8007e00 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009d30:	464b      	mov	r3, r9
 8009d32:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009d34:	26c0      	movs	r6, #192	; 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009d36:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d38:	4b34      	ldr	r3, [pc, #208]	; (8009e0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8009d3a:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d3c:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009d3e:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d40:	009a      	lsls	r2, r3, #2
 8009d42:	18d2      	adds	r2, r2, r3
 8009d44:	00d3      	lsls	r3, r2, #3
 8009d46:	1a9b      	subs	r3, r3, r2
 8009d48:	4642      	mov	r2, r8
 8009d4a:	0d1b      	lsrs	r3, r3, #20
 8009d4c:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 8009d4e:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d50:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d52:	e001      	b.n	8009d58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8009d54:	1c6b      	adds	r3, r5, #1
 8009d56:	d10b      	bne.n	8009d70 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8009d58:	6893      	ldr	r3, [r2, #8]
 8009d5a:	4223      	tst	r3, r4
 8009d5c:	d01d      	beq.n	8009d9a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009d5e:	42b4      	cmp	r4, r6
 8009d60:	d1f8      	bne.n	8009d54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 8009d62:	4653      	mov	r3, sl
 8009d64:	7b1b      	ldrb	r3, [r3, #12]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 8009d6a:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8009d6c:	1c6b      	adds	r3, r5, #1
 8009d6e:	d0f3      	beq.n	8009d58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d70:	f7fe f846 	bl	8007e00 <HAL_GetTick>
 8009d74:	465b      	mov	r3, fp
 8009d76:	1ac0      	subs	r0, r0, r3
 8009d78:	4540      	cmp	r0, r8
 8009d7a:	d216      	bcs.n	8009daa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d7c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8009d7e:	1e5a      	subs	r2, r3, #1
 8009d80:	4193      	sbcs	r3, r2
 8009d82:	4642      	mov	r2, r8
 8009d84:	425b      	negs	r3, r3
 8009d86:	401a      	ands	r2, r3
      }
      count--;
 8009d88:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009d8a:	4690      	mov	r8, r2
      count--;
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d90:	464b      	mov	r3, r9
 8009d92:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d94:	6893      	ldr	r3, [r2, #8]
 8009d96:	4223      	tst	r3, r4
 8009d98:	d1e1      	bne.n	8009d5e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8009d9a:	2000      	movs	r0, #0
}
 8009d9c:	b003      	add	sp, #12
 8009d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8009da0:	46bb      	mov	fp, r7
 8009da2:	46b2      	mov	sl, r6
 8009da4:	46a9      	mov	r9, r5
 8009da6:	46a0      	mov	r8, r4
 8009da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009daa:	464b      	mov	r3, r9
 8009dac:	21e0      	movs	r1, #224	; 0xe0
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009db4:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009db6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009db8:	2282      	movs	r2, #130	; 0x82
 8009dba:	6849      	ldr	r1, [r1, #4]
 8009dbc:	0052      	lsls	r2, r2, #1
 8009dbe:	4291      	cmp	r1, r2
 8009dc0:	d015      	beq.n	8009dee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dc2:	464a      	mov	r2, r9
 8009dc4:	2180      	movs	r1, #128	; 0x80
 8009dc6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009dc8:	0189      	lsls	r1, r1, #6
 8009dca:	428a      	cmp	r2, r1
 8009dcc:	d106      	bne.n	8009ddc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	480f      	ldr	r0, [pc, #60]	; (8009e10 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 8009dd2:	4001      	ands	r1, r0
 8009dd4:	6019      	str	r1, [r3, #0]
 8009dd6:	6819      	ldr	r1, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009ddc:	235d      	movs	r3, #93	; 0x5d
 8009dde:	2201      	movs	r2, #1
 8009de0:	4649      	mov	r1, r9
 8009de2:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8009de4:	2200      	movs	r2, #0
 8009de6:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8009de8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8009dea:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8009dec:	e7d6      	b.n	8009d9c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dee:	464a      	mov	r2, r9
 8009df0:	2180      	movs	r1, #128	; 0x80
 8009df2:	6892      	ldr	r2, [r2, #8]
 8009df4:	0209      	lsls	r1, r1, #8
 8009df6:	428a      	cmp	r2, r1
 8009df8:	d003      	beq.n	8009e02 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009dfa:	2180      	movs	r1, #128	; 0x80
 8009dfc:	00c9      	lsls	r1, r1, #3
 8009dfe:	428a      	cmp	r2, r1
 8009e00:	d1df      	bne.n	8009dc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 8009e02:	2140      	movs	r1, #64	; 0x40
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	438a      	bics	r2, r1
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	e7da      	b.n	8009dc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 8009e0c:	2000011c 	.word	0x2000011c
 8009e10:	ffffdfff 	.word	0xffffdfff

08009e14 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8009e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e16:	46c6      	mov	lr, r8
 8009e18:	b500      	push	{lr}
 8009e1a:	000c      	movs	r4, r1
 8009e1c:	0016      	movs	r6, r2
 8009e1e:	b082      	sub	sp, #8
 8009e20:	0007      	movs	r7, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e22:	f7fd ffed 	bl	8007e00 <HAL_GetTick>
 8009e26:	1936      	adds	r6, r6, r4
 8009e28:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8009e2a:	f7fd ffe9 	bl	8007e00 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e2e:	2580      	movs	r5, #128	; 0x80
  tmp_tickstart = HAL_GetTick();
 8009e30:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e32:	4b26      	ldr	r3, [pc, #152]	; (8009ecc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	015b      	lsls	r3, r3, #5
 8009e38:	0d1b      	lsrs	r3, r3, #20
 8009e3a:	4373      	muls	r3, r6
 8009e3c:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	e001      	b.n	8009e46 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
    if (Timeout != HAL_MAX_DELAY)
 8009e42:	1c63      	adds	r3, r4, #1
 8009e44:	d107      	bne.n	8009e56 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e46:	6893      	ldr	r3, [r2, #8]
 8009e48:	421d      	tst	r5, r3
 8009e4a:	d1fa      	bne.n	8009e42 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  return HAL_OK;
 8009e4c:	2000      	movs	r0, #0
}
 8009e4e:	b002      	add	sp, #8
 8009e50:	bc80      	pop	{r7}
 8009e52:	46b8      	mov	r8, r7
 8009e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e56:	f7fd ffd3 	bl	8007e00 <HAL_GetTick>
 8009e5a:	4643      	mov	r3, r8
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	42b0      	cmp	r0, r6
 8009e60:	d208      	bcs.n	8009e74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 8009e62:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009e64:	1e5a      	subs	r2, r3, #1
 8009e66:	4193      	sbcs	r3, r2
 8009e68:	425b      	negs	r3, r3
 8009e6a:	401e      	ands	r6, r3
      count--;
 8009e6c:	9b01      	ldr	r3, [sp, #4]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	e7e4      	b.n	8009e3e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e74:	21e0      	movs	r1, #224	; 0xe0
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	438a      	bics	r2, r1
 8009e7c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e7e:	2282      	movs	r2, #130	; 0x82
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	0052      	lsls	r2, r2, #1
 8009e84:	4291      	cmp	r1, r2
 8009e86:	d013      	beq.n	8009eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e88:	2180      	movs	r1, #128	; 0x80
 8009e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e8c:	0189      	lsls	r1, r1, #6
 8009e8e:	428a      	cmp	r2, r1
 8009e90:	d106      	bne.n	8009ea0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 8009e92:	6819      	ldr	r1, [r3, #0]
 8009e94:	480e      	ldr	r0, [pc, #56]	; (8009ed0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8009e96:	4001      	ands	r1, r0
 8009e98:	6019      	str	r1, [r3, #0]
 8009e9a:	6819      	ldr	r1, [r3, #0]
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009ea0:	235d      	movs	r3, #93	; 0x5d
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8009eaa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8009eac:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8009eae:	e7ce      	b.n	8009e4e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eb0:	2180      	movs	r1, #128	; 0x80
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	0209      	lsls	r1, r1, #8
 8009eb6:	428a      	cmp	r2, r1
 8009eb8:	d003      	beq.n	8009ec2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009eba:	2180      	movs	r1, #128	; 0x80
 8009ebc:	00c9      	lsls	r1, r1, #3
 8009ebe:	428a      	cmp	r2, r1
 8009ec0:	d1e2      	bne.n	8009e88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 8009ec2:	2140      	movs	r1, #64	; 0x40
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	438a      	bics	r2, r1
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e7dd      	b.n	8009e88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8009ecc:	2000011c 	.word	0x2000011c
 8009ed0:	ffffdfff 	.word	0xffffdfff

08009ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ed4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ed6:	0013      	movs	r3, r2
{
 8009ed8:	000d      	movs	r5, r1
 8009eda:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009edc:	000a      	movs	r2, r1
 8009ede:	21c0      	movs	r1, #192	; 0xc0
 8009ee0:	0149      	lsls	r1, r1, #5
{
 8009ee2:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ee4:	f7ff ff0e 	bl	8009d04 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d10f      	bne.n	8009f0c <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009eec:	0032      	movs	r2, r6
 8009eee:	0029      	movs	r1, r5
 8009ef0:	0020      	movs	r0, r4
 8009ef2:	f7ff ff8f 	bl	8009e14 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d108      	bne.n	8009f0c <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009efa:	21c0      	movs	r1, #192	; 0xc0
 8009efc:	0033      	movs	r3, r6
 8009efe:	002a      	movs	r2, r5
 8009f00:	0020      	movs	r0, r4
 8009f02:	00c9      	lsls	r1, r1, #3
 8009f04:	f7ff fefe 	bl	8009d04 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d004      	beq.n	8009f16 <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f0c:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8009f0e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009f12:	4313      	orrs	r3, r2
 8009f14:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 8009f16:	bd70      	pop	{r4, r5, r6, pc}

08009f18 <HAL_SPI_Init>:
{
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	46de      	mov	lr, fp
 8009f1c:	4657      	mov	r7, sl
 8009f1e:	464e      	mov	r6, r9
 8009f20:	4645      	mov	r5, r8
 8009f22:	0004      	movs	r4, r0
 8009f24:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d100      	bne.n	8009f2c <HAL_SPI_Init+0x14>
 8009f2a:	e094      	b.n	800a056 <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f2c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	d06b      	beq.n	800a00a <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f32:	2300      	movs	r3, #0
 8009f34:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f36:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f3c:	335d      	adds	r3, #93	; 0x5d
 8009f3e:	5ce3      	ldrb	r3, [r4, r3]
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d06e      	beq.n	800a024 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009f46:	235d      	movs	r3, #93	; 0x5d
 8009f48:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8009f4a:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8009f4c:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8009f4e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f50:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	438b      	bics	r3, r1
 8009f56:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f58:	23e0      	movs	r3, #224	; 0xe0
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	4298      	cmp	r0, r3
 8009f5e:	d968      	bls.n	800a032 <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f60:	23f0      	movs	r3, #240	; 0xf0
 8009f62:	011b      	lsls	r3, r3, #4
 8009f64:	4298      	cmp	r0, r3
 8009f66:	d000      	beq.n	8009f6a <HAL_SPI_Init+0x52>
 8009f68:	e077      	b.n	800a05a <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f6a:	2380      	movs	r3, #128	; 0x80
 8009f6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009f6e:	019b      	lsls	r3, r3, #6
 8009f70:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f72:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f74:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f76:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f78:	2682      	movs	r6, #130	; 0x82
 8009f7a:	2784      	movs	r7, #132	; 0x84
 8009f7c:	6863      	ldr	r3, [r4, #4]
 8009f7e:	0076      	lsls	r6, r6, #1
 8009f80:	4033      	ands	r3, r6
 8009f82:	68a6      	ldr	r6, [r4, #8]
 8009f84:	023f      	lsls	r7, r7, #8
 8009f86:	403e      	ands	r6, r7
 8009f88:	2702      	movs	r7, #2
 8009f8a:	4333      	orrs	r3, r6
 8009f8c:	6926      	ldr	r6, [r4, #16]
 8009f8e:	69a1      	ldr	r1, [r4, #24]
 8009f90:	403e      	ands	r6, r7
 8009f92:	4333      	orrs	r3, r6
 8009f94:	2601      	movs	r6, #1
 8009f96:	6967      	ldr	r7, [r4, #20]
 8009f98:	46b2      	mov	sl, r6
 8009f9a:	4037      	ands	r7, r6
 8009f9c:	433b      	orrs	r3, r7
 8009f9e:	2780      	movs	r7, #128	; 0x80
 8009fa0:	00bf      	lsls	r7, r7, #2
 8009fa2:	400f      	ands	r7, r1
 8009fa4:	433b      	orrs	r3, r7
 8009fa6:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009fa8:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009faa:	46b8      	mov	r8, r7
 8009fac:	2738      	movs	r7, #56	; 0x38
 8009fae:	46b9      	mov	r9, r7
 8009fb0:	4647      	mov	r7, r8
 8009fb2:	464e      	mov	r6, r9
 8009fb4:	4037      	ands	r7, r6
 8009fb6:	6a26      	ldr	r6, [r4, #32]
 8009fb8:	433b      	orrs	r3, r7
 8009fba:	46b0      	mov	r8, r6
 8009fbc:	2680      	movs	r6, #128	; 0x80
 8009fbe:	4647      	mov	r7, r8
 8009fc0:	4037      	ands	r7, r6
 8009fc2:	4666      	mov	r6, ip
 8009fc4:	433b      	orrs	r3, r7
 8009fc6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009fc8:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fca:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fce:	4033      	ands	r3, r6
 8009fd0:	26f0      	movs	r6, #240	; 0xf0
 8009fd2:	0136      	lsls	r6, r6, #4
 8009fd4:	4030      	ands	r0, r6
 8009fd6:	4303      	orrs	r3, r0
 8009fd8:	2004      	movs	r0, #4
 8009fda:	4001      	ands	r1, r0
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	2110      	movs	r1, #16
 8009fe0:	4029      	ands	r1, r5
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	4659      	mov	r1, fp
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fea:	69d3      	ldr	r3, [r2, #28]
 8009fec:	491c      	ldr	r1, [pc, #112]	; (800a060 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8009fee:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ff0:	400b      	ands	r3, r1
 8009ff2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ff4:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009ff6:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ff8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009ffa:	335d      	adds	r3, #93	; 0x5d
 8009ffc:	54e2      	strb	r2, [r4, r3]
}
 8009ffe:	bcf0      	pop	{r4, r5, r6, r7}
 800a000:	46bb      	mov	fp, r7
 800a002:	46b2      	mov	sl, r6
 800a004:	46a9      	mov	r9, r5
 800a006:	46a0      	mov	r8, r4
 800a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a00a:	2382      	movs	r3, #130	; 0x82
 800a00c:	6842      	ldr	r2, [r0, #4]
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	429a      	cmp	r2, r3
 800a012:	d091      	beq.n	8009f38 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a014:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a016:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a018:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a01a:	335d      	adds	r3, #93	; 0x5d
 800a01c:	5ce3      	ldrb	r3, [r4, r3]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d190      	bne.n	8009f46 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 800a024:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 800a026:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800a028:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800a02a:	f7fd fc55 	bl	80078d8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a02e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a030:	e789      	b.n	8009f46 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a032:	4298      	cmp	r0, r3
 800a034:	d006      	beq.n	800a044 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a036:	2380      	movs	r3, #128	; 0x80
 800a038:	015b      	lsls	r3, r3, #5
 800a03a:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	469c      	mov	ip, r3
 800a040:	62a3      	str	r3, [r4, #40]	; 0x28
 800a042:	e799      	b.n	8009f78 <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a044:	2380      	movs	r3, #128	; 0x80
 800a046:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a048:	019b      	lsls	r3, r3, #6
 800a04a:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a04c:	2380      	movs	r3, #128	; 0x80
 800a04e:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a050:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a052:	469b      	mov	fp, r3
 800a054:	e790      	b.n	8009f78 <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 800a056:	2001      	movs	r0, #1
 800a058:	e7d1      	b.n	8009ffe <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a05a:	2300      	movs	r3, #0
 800a05c:	469b      	mov	fp, r3
 800a05e:	e7ed      	b.n	800a03c <HAL_SPI_Init+0x124>
 800a060:	fffff7ff 	.word	0xfffff7ff

0800a064 <HAL_SPI_Transmit>:
{
 800a064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a066:	46c6      	mov	lr, r8
 800a068:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800a06a:	235c      	movs	r3, #92	; 0x5c
{
 800a06c:	b500      	push	{lr}
 800a06e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800a070:	5cc2      	ldrb	r2, [r0, r3]
{
 800a072:	0004      	movs	r4, r0
 800a074:	000d      	movs	r5, r1
 800a076:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800a078:	2a01      	cmp	r2, #1
 800a07a:	d060      	beq.n	800a13e <HAL_SPI_Transmit+0xda>
 800a07c:	2201      	movs	r2, #1
 800a07e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800a080:	f7fd febe 	bl	8007e00 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a084:	225d      	movs	r2, #93	; 0x5d
 800a086:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 800a088:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a08a:	b2d8      	uxtb	r0, r3
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d00a      	beq.n	800a0a6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800a090:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a092:	235d      	movs	r3, #93	; 0x5d
 800a094:	2201      	movs	r2, #1
 800a096:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800a098:	2200      	movs	r2, #0
 800a09a:	3b01      	subs	r3, #1
 800a09c:	54e2      	strb	r2, [r4, r3]
}
 800a09e:	b002      	add	sp, #8
 800a0a0:	bc80      	pop	{r7}
 800a0a2:	46b8      	mov	r8, r7
 800a0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	d0f3      	beq.n	800a092 <HAL_SPI_Transmit+0x2e>
 800a0aa:	4643      	mov	r3, r8
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d0f0      	beq.n	800a092 <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0b4:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 800a0b6:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0b8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 800a0ba:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a0bc:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800a0be:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a0c0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a0c2:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a0c4:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 800a0c6:	3202      	adds	r2, #2
 800a0c8:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 800a0ca:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a0cc:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ce:	2380      	movs	r3, #128	; 0x80
 800a0d0:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800a0d2:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0d4:	021b      	lsls	r3, r3, #8
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d05a      	beq.n	800a190 <HAL_SPI_Transmit+0x12c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0da:	2340      	movs	r3, #64	; 0x40
 800a0dc:	6802      	ldr	r2, [r0, #0]
 800a0de:	4213      	tst	r3, r2
 800a0e0:	d102      	bne.n	800a0e8 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 800a0e2:	6802      	ldr	r2, [r0, #0]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0e8:	23e0      	movs	r3, #224	; 0xe0
 800a0ea:	68e2      	ldr	r2, [r4, #12]
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d927      	bls.n	800a142 <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0f2:	6863      	ldr	r3, [r4, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d055      	beq.n	800a1a4 <HAL_SPI_Transmit+0x140>
 800a0f8:	4643      	mov	r3, r8
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d052      	beq.n	800a1a4 <HAL_SPI_Transmit+0x140>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0fe:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 800a100:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a102:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10d      	bne.n	800a124 <HAL_SPI_Transmit+0xc0>
 800a108:	e05f      	b.n	800a1ca <HAL_SPI_Transmit+0x166>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a10a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a10c:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a10e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a110:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800a112:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a114:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a116:	3d01      	subs	r5, #1
 800a118:	b2ad      	uxth	r5, r5
 800a11a:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a11c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d053      	beq.n	800a1ca <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a122:	6820      	ldr	r0, [r4, #0]
 800a124:	4642      	mov	r2, r8
 800a126:	6883      	ldr	r3, [r0, #8]
 800a128:	421a      	tst	r2, r3
 800a12a:	d1ee      	bne.n	800a10a <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a12c:	f7fd fe68 	bl	8007e00 <HAL_GetTick>
 800a130:	1bc0      	subs	r0, r0, r7
 800a132:	42b0      	cmp	r0, r6
 800a134:	d3f2      	bcc.n	800a11c <HAL_SPI_Transmit+0xb8>
 800a136:	1c73      	adds	r3, r6, #1
 800a138:	d0f0      	beq.n	800a11c <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 800a13a:	2003      	movs	r0, #3
 800a13c:	e7a9      	b.n	800a092 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800a13e:	2002      	movs	r0, #2
 800a140:	e7ad      	b.n	800a09e <HAL_SPI_Transmit+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a142:	6863      	ldr	r3, [r4, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d036      	beq.n	800a1b6 <HAL_SPI_Transmit+0x152>
 800a148:	4643      	mov	r3, r8
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d033      	beq.n	800a1b6 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a14e:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 800a150:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a152:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10d      	bne.n	800a174 <HAL_SPI_Transmit+0x110>
 800a158:	e037      	b.n	800a1ca <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a15a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800a160:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a164:	3d01      	subs	r5, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a166:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 800a168:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a16a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a16c:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a16e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02a      	beq.n	800a1ca <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a174:	4641      	mov	r1, r8
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	4211      	tst	r1, r2
 800a17c:	d1ed      	bne.n	800a15a <HAL_SPI_Transmit+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a17e:	f7fd fe3f 	bl	8007e00 <HAL_GetTick>
 800a182:	1bc0      	subs	r0, r0, r7
 800a184:	42b0      	cmp	r0, r6
 800a186:	d3f2      	bcc.n	800a16e <HAL_SPI_Transmit+0x10a>
 800a188:	1c73      	adds	r3, r6, #1
 800a18a:	d0f0      	beq.n	800a16e <HAL_SPI_Transmit+0x10a>
          errorcode = HAL_TIMEOUT;
 800a18c:	2003      	movs	r0, #3
 800a18e:	e780      	b.n	800a092 <HAL_SPI_Transmit+0x2e>
    __HAL_SPI_DISABLE(hspi);
 800a190:	2240      	movs	r2, #64	; 0x40
 800a192:	6803      	ldr	r3, [r0, #0]
 800a194:	4393      	bics	r3, r2
 800a196:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800a198:	2380      	movs	r3, #128	; 0x80
 800a19a:	6802      	ldr	r2, [r0, #0]
 800a19c:	01db      	lsls	r3, r3, #7
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	6003      	str	r3, [r0, #0]
 800a1a2:	e79a      	b.n	800a0da <HAL_SPI_Transmit+0x76>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1a4:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1a6:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1a8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800a1aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1ac:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a1b4:	e7a3      	b.n	800a0fe <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1b6:	782b      	ldrb	r3, [r5, #0]
 800a1b8:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1bc:	3301      	adds	r3, #1
 800a1be:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800a1c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a1c8:	e7c1      	b.n	800a14e <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1ca:	003a      	movs	r2, r7
 800a1cc:	0031      	movs	r1, r6
 800a1ce:	0020      	movs	r0, r4
 800a1d0:	f7ff fe80 	bl	8009ed4 <SPI_EndRxTxTransaction>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d001      	beq.n	800a1dc <HAL_SPI_Transmit+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1d8:	2320      	movs	r3, #32
 800a1da:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1dc:	68a3      	ldr	r3, [r4, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	68da      	ldr	r2, [r3, #12]
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a1f2:	1e43      	subs	r3, r0, #1
 800a1f4:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 800a1f6:	b2c0      	uxtb	r0, r0
error:
 800a1f8:	e74b      	b.n	800a092 <HAL_SPI_Transmit+0x2e>
 800a1fa:	46c0      	nop			; (mov r8, r8)

0800a1fc <HAL_SPI_TransmitReceive>:
{
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	4647      	mov	r7, r8
 800a200:	46ce      	mov	lr, r9
 800a202:	b580      	push	{r7, lr}
 800a204:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 800a206:	235c      	movs	r3, #92	; 0x5c
{
 800a208:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800a20a:	5cc2      	ldrb	r2, [r0, r3]
{
 800a20c:	0004      	movs	r4, r0
 800a20e:	4688      	mov	r8, r1
 800a210:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 800a212:	2a01      	cmp	r2, #1
 800a214:	d100      	bne.n	800a218 <HAL_SPI_TransmitReceive+0x1c>
 800a216:	e095      	b.n	800a344 <HAL_SPI_TransmitReceive+0x148>
 800a218:	2201      	movs	r2, #1
 800a21a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800a21c:	f7fd fdf0 	bl	8007e00 <HAL_GetTick>
  tmp_state           = hspi->State;
 800a220:	235d      	movs	r3, #93	; 0x5d
 800a222:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 800a224:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 800a226:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800a228:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d013      	beq.n	800a256 <HAL_SPI_TransmitReceive+0x5a>
 800a22e:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 800a230:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	429a      	cmp	r2, r3
 800a236:	d009      	beq.n	800a24c <HAL_SPI_TransmitReceive+0x50>
  hspi->State = HAL_SPI_STATE_READY;
 800a238:	235d      	movs	r3, #93	; 0x5d
 800a23a:	2201      	movs	r2, #1
 800a23c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800a23e:	2200      	movs	r2, #0
 800a240:	3b01      	subs	r3, #1
 800a242:	54e2      	strb	r2, [r4, r3]
}
 800a244:	bcc0      	pop	{r6, r7}
 800a246:	46b9      	mov	r9, r7
 800a248:	46b0      	mov	r8, r6
 800a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f2      	bne.n	800a238 <HAL_SPI_TransmitReceive+0x3c>
 800a252:	2904      	cmp	r1, #4
 800a254:	d1f0      	bne.n	800a238 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a256:	4643      	mov	r3, r8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d075      	beq.n	800a348 <HAL_SPI_TransmitReceive+0x14c>
 800a25c:	464b      	mov	r3, r9
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d072      	beq.n	800a348 <HAL_SPI_TransmitReceive+0x14c>
 800a262:	2f00      	cmp	r7, #0
 800a264:	d070      	beq.n	800a348 <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a266:	235d      	movs	r3, #93	; 0x5d
 800a268:	5ce1      	ldrb	r1, [r4, r3]
 800a26a:	2904      	cmp	r1, #4
 800a26c:	d001      	beq.n	800a272 <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a26e:	2105      	movs	r1, #5
 800a270:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a272:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a274:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a276:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a278:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a27a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800a27c:	5267      	strh	r7, [r4, r1]
  hspi->RxXferSize  = Size;
 800a27e:	3902      	subs	r1, #2
 800a280:	5267      	strh	r7, [r4, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a282:	4641      	mov	r1, r8
  hspi->RxISR       = NULL;
 800a284:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a286:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a288:	23e0      	movs	r3, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a28a:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a28c:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferCount = Size;
 800a28e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a290:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	4299      	cmp	r1, r3
 800a296:	d965      	bls.n	800a364 <HAL_SPI_TransmitReceive+0x168>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	4862      	ldr	r0, [pc, #392]	; (800a424 <HAL_SPI_TransmitReceive+0x228>)
 800a29c:	6859      	ldr	r1, [r3, #4]
 800a29e:	4001      	ands	r1, r0
 800a2a0:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2a2:	2140      	movs	r1, #64	; 0x40
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	4201      	tst	r1, r0
 800a2a8:	d102      	bne.n	800a2b0 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	4301      	orrs	r1, r0
 800a2ae:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	d000      	beq.n	800a2b6 <HAL_SPI_TransmitReceive+0xba>
 800a2b4:	e0af      	b.n	800a416 <HAL_SPI_TransmitReceive+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2b6:	4642      	mov	r2, r8
 800a2b8:	8812      	ldrh	r2, [r2, #0]
 800a2ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2bc:	4643      	mov	r3, r8
 800a2be:	3302      	adds	r3, #2
 800a2c0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800a2c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2ce:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2d0:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2d2:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d102      	bne.n	800a2e0 <HAL_SPI_TransmitReceive+0xe4>
 800a2da:	5be3      	ldrh	r3, [r4, r7]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d035      	beq.n	800a34c <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	4211      	tst	r1, r2
 800a2e8:	d010      	beq.n	800a30c <HAL_SPI_TransmitReceive+0x110>
 800a2ea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a2ec:	2a00      	cmp	r2, #0
 800a2ee:	d00d      	beq.n	800a30c <HAL_SPI_TransmitReceive+0x110>
 800a2f0:	464a      	mov	r2, r9
 800a2f2:	2a01      	cmp	r2, #1
 800a2f4:	d10a      	bne.n	800a30c <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a2f8:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2fa:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2fc:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2fe:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a300:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a302:	3a01      	subs	r2, #1
 800a304:	b292      	uxth	r2, r2
 800a306:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 800a308:	2200      	movs	r2, #0
 800a30a:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a30c:	2101      	movs	r1, #1
 800a30e:	0008      	movs	r0, r1
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	4010      	ands	r0, r2
 800a314:	4211      	tst	r1, r2
 800a316:	d00c      	beq.n	800a332 <HAL_SPI_TransmitReceive+0x136>
 800a318:	5be2      	ldrh	r2, [r4, r7]
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	d009      	beq.n	800a332 <HAL_SPI_TransmitReceive+0x136>
        txallowed = 1U;
 800a31e:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a324:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a326:	3302      	adds	r3, #2
 800a328:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a32a:	5be3      	ldrh	r3, [r4, r7]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29b      	uxth	r3, r3
 800a330:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a332:	f7fd fd65 	bl	8007e00 <HAL_GetTick>
 800a336:	1b80      	subs	r0, r0, r6
 800a338:	42a8      	cmp	r0, r5
 800a33a:	d3cb      	bcc.n	800a2d4 <HAL_SPI_TransmitReceive+0xd8>
 800a33c:	1c6b      	adds	r3, r5, #1
 800a33e:	d0c9      	beq.n	800a2d4 <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 800a340:	2003      	movs	r0, #3
 800a342:	e779      	b.n	800a238 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 800a344:	2002      	movs	r0, #2
 800a346:	e77d      	b.n	800a244 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_ERROR;
 800a348:	2001      	movs	r0, #1
 800a34a:	e775      	b.n	800a238 <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a34c:	0032      	movs	r2, r6
 800a34e:	0029      	movs	r1, r5
 800a350:	0020      	movs	r0, r4
 800a352:	f7ff fdbf 	bl	8009ed4 <SPI_EndRxTxTransaction>
 800a356:	2800      	cmp	r0, #0
 800a358:	d100      	bne.n	800a35c <HAL_SPI_TransmitReceive+0x160>
 800a35a:	e76d      	b.n	800a238 <HAL_SPI_TransmitReceive+0x3c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a35c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800a35e:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a360:	6623      	str	r3, [r4, #96]	; 0x60
 800a362:	e769      	b.n	800a238 <HAL_SPI_TransmitReceive+0x3c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a364:	2180      	movs	r1, #128	; 0x80
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	0149      	lsls	r1, r1, #5
 800a36a:	6858      	ldr	r0, [r3, #4]
 800a36c:	4301      	orrs	r1, r0
 800a36e:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a370:	2140      	movs	r1, #64	; 0x40
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	4201      	tst	r1, r0
 800a376:	d102      	bne.n	800a37e <HAL_SPI_TransmitReceive+0x182>
    __HAL_SPI_ENABLE(hspi);
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	4301      	orrs	r1, r0
 800a37c:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a37e:	2a00      	cmp	r2, #0
 800a380:	d14d      	bne.n	800a41e <HAL_SPI_TransmitReceive+0x222>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a382:	4642      	mov	r2, r8
 800a384:	7812      	ldrb	r2, [r2, #0]
 800a386:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a38a:	3301      	adds	r3, #1
 800a38c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800a38e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a390:	3b01      	subs	r3, #1
 800a392:	b29b      	uxth	r3, r3
 800a394:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a396:	2301      	movs	r3, #1
 800a398:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a39a:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a39c:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a39e:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d102      	bne.n	800a3ac <HAL_SPI_TransmitReceive+0x1b0>
 800a3a6:	5be3      	ldrh	r3, [r4, r7]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d0cf      	beq.n	800a34c <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	689a      	ldr	r2, [r3, #8]
 800a3b2:	4211      	tst	r1, r2
 800a3b4:	d012      	beq.n	800a3dc <HAL_SPI_TransmitReceive+0x1e0>
 800a3b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a3b8:	2a00      	cmp	r2, #0
 800a3ba:	d00f      	beq.n	800a3dc <HAL_SPI_TransmitReceive+0x1e0>
 800a3bc:	464a      	mov	r2, r9
 800a3be:	2a01      	cmp	r2, #1
 800a3c0:	d10c      	bne.n	800a3dc <HAL_SPI_TransmitReceive+0x1e0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a3c4:	7812      	ldrb	r2, [r2, #0]
 800a3c6:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 800a3cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a3d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	2101      	movs	r1, #1
 800a3de:	0008      	movs	r0, r1
 800a3e0:	689a      	ldr	r2, [r3, #8]
 800a3e2:	4010      	ands	r0, r2
 800a3e4:	4211      	tst	r1, r2
 800a3e6:	d00d      	beq.n	800a404 <HAL_SPI_TransmitReceive+0x208>
 800a3e8:	5be2      	ldrh	r2, [r4, r7]
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	d00a      	beq.n	800a404 <HAL_SPI_TransmitReceive+0x208>
        txallowed = 1U;
 800a3ee:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a3f0:	7b1b      	ldrb	r3, [r3, #12]
 800a3f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a3f4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 800a3f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a3fc:	5be3      	ldrh	r3, [r4, r7]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	b29b      	uxth	r3, r3
 800a402:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a404:	f7fd fcfc 	bl	8007e00 <HAL_GetTick>
 800a408:	1b80      	subs	r0, r0, r6
 800a40a:	42a8      	cmp	r0, r5
 800a40c:	d3c8      	bcc.n	800a3a0 <HAL_SPI_TransmitReceive+0x1a4>
 800a40e:	1c6b      	adds	r3, r5, #1
 800a410:	d0c6      	beq.n	800a3a0 <HAL_SPI_TransmitReceive+0x1a4>
        errorcode = HAL_TIMEOUT;
 800a412:	2003      	movs	r0, #3
 800a414:	e710      	b.n	800a238 <HAL_SPI_TransmitReceive+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a416:	2f01      	cmp	r7, #1
 800a418:	d000      	beq.n	800a41c <HAL_SPI_TransmitReceive+0x220>
 800a41a:	e756      	b.n	800a2ca <HAL_SPI_TransmitReceive+0xce>
 800a41c:	e74b      	b.n	800a2b6 <HAL_SPI_TransmitReceive+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a41e:	2f01      	cmp	r7, #1
 800a420:	d1b9      	bne.n	800a396 <HAL_SPI_TransmitReceive+0x19a>
 800a422:	e7ae      	b.n	800a382 <HAL_SPI_TransmitReceive+0x186>
 800a424:	ffffefff 	.word	0xffffefff

0800a428 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a428:	223d      	movs	r2, #61	; 0x3d
 800a42a:	5c81      	ldrb	r1, [r0, r2]
{
 800a42c:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 800a42e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800a430:	2901      	cmp	r1, #1
 800a432:	d112      	bne.n	800a45a <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a434:	3101      	adds	r1, #1
 800a436:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	4302      	orrs	r2, r0
 800a43e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a440:	4a0e      	ldr	r2, [pc, #56]	; (800a47c <HAL_TIM_Base_Start_IT+0x54>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00a      	beq.n	800a45c <HAL_TIM_Base_Start_IT+0x34>
 800a446:	4a0e      	ldr	r2, [pc, #56]	; (800a480 <HAL_TIM_Base_Start_IT+0x58>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d007      	beq.n	800a45c <HAL_TIM_Base_Start_IT+0x34>
 800a44c:	4a0d      	ldr	r2, [pc, #52]	; (800a484 <HAL_TIM_Base_Start_IT+0x5c>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d004      	beq.n	800a45c <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	4302      	orrs	r2, r0
  }

  /* Return function status */
  return HAL_OK;
 800a456:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800a458:	601a      	str	r2, [r3, #0]
}
 800a45a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	490a      	ldr	r1, [pc, #40]	; (800a488 <HAL_TIM_Base_Start_IT+0x60>)
 800a460:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a462:	2a06      	cmp	r2, #6
 800a464:	d008      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0x50>
 800a466:	3907      	subs	r1, #7
 800a468:	428a      	cmp	r2, r1
 800a46a:	d005      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0x50>
      __HAL_TIM_ENABLE(htim);
 800a46c:	2101      	movs	r1, #1
 800a46e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800a470:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a472:	430a      	orrs	r2, r1
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	e7f0      	b.n	800a45a <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 800a478:	2000      	movs	r0, #0
 800a47a:	e7ee      	b.n	800a45a <HAL_TIM_Base_Start_IT+0x32>
 800a47c:	40012c00 	.word	0x40012c00
 800a480:	40000400 	.word	0x40000400
 800a484:	40014000 	.word	0x40014000
 800a488:	00010007 	.word	0x00010007

0800a48c <HAL_TIM_OC_DelayElapsedCallback>:
 800a48c:	4770      	bx	lr
 800a48e:	46c0      	nop			; (mov r8, r8)

0800a490 <HAL_TIM_IC_CaptureCallback>:
 800a490:	4770      	bx	lr
 800a492:	46c0      	nop			; (mov r8, r8)

0800a494 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a494:	4770      	bx	lr
 800a496:	46c0      	nop			; (mov r8, r8)

0800a498 <HAL_TIM_TriggerCallback>:
 800a498:	4770      	bx	lr
 800a49a:	46c0      	nop			; (mov r8, r8)

0800a49c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a49c:	2202      	movs	r2, #2
 800a49e:	6803      	ldr	r3, [r0, #0]
{
 800a4a0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4a2:	6919      	ldr	r1, [r3, #16]
{
 800a4a4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4a6:	420a      	tst	r2, r1
 800a4a8:	d003      	beq.n	800a4b2 <HAL_TIM_IRQHandler+0x16>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4aa:	68d9      	ldr	r1, [r3, #12]
 800a4ac:	420a      	tst	r2, r1
 800a4ae:	d000      	beq.n	800a4b2 <HAL_TIM_IRQHandler+0x16>
 800a4b0:	e06e      	b.n	800a590 <HAL_TIM_IRQHandler+0xf4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4b2:	2204      	movs	r2, #4
 800a4b4:	6919      	ldr	r1, [r3, #16]
 800a4b6:	420a      	tst	r2, r1
 800a4b8:	d002      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0x24>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4ba:	68d9      	ldr	r1, [r3, #12]
 800a4bc:	420a      	tst	r2, r1
 800a4be:	d154      	bne.n	800a56a <HAL_TIM_IRQHandler+0xce>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4c0:	2208      	movs	r2, #8
 800a4c2:	6919      	ldr	r1, [r3, #16]
 800a4c4:	420a      	tst	r2, r1
 800a4c6:	d002      	beq.n	800a4ce <HAL_TIM_IRQHandler+0x32>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4c8:	68d9      	ldr	r1, [r3, #12]
 800a4ca:	420a      	tst	r2, r1
 800a4cc:	d13c      	bne.n	800a548 <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4ce:	2210      	movs	r2, #16
 800a4d0:	6919      	ldr	r1, [r3, #16]
 800a4d2:	420a      	tst	r2, r1
 800a4d4:	d002      	beq.n	800a4dc <HAL_TIM_IRQHandler+0x40>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4d6:	68d9      	ldr	r1, [r3, #12]
 800a4d8:	420a      	tst	r2, r1
 800a4da:	d122      	bne.n	800a522 <HAL_TIM_IRQHandler+0x86>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	6919      	ldr	r1, [r3, #16]
 800a4e0:	420a      	tst	r2, r1
 800a4e2:	d002      	beq.n	800a4ea <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4e4:	68d9      	ldr	r1, [r3, #12]
 800a4e6:	420a      	tst	r2, r1
 800a4e8:	d168      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x120>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4ea:	2280      	movs	r2, #128	; 0x80
 800a4ec:	6919      	ldr	r1, [r3, #16]
 800a4ee:	420a      	tst	r2, r1
 800a4f0:	d002      	beq.n	800a4f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4f2:	68d9      	ldr	r1, [r3, #12]
 800a4f4:	420a      	tst	r2, r1
 800a4f6:	d168      	bne.n	800a5ca <HAL_TIM_IRQHandler+0x12e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4f8:	691a      	ldr	r2, [r3, #16]
 800a4fa:	05d2      	lsls	r2, r2, #23
 800a4fc:	d502      	bpl.n	800a504 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	0612      	lsls	r2, r2, #24
 800a502:	d46a      	bmi.n	800a5da <HAL_TIM_IRQHandler+0x13e>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a504:	2240      	movs	r2, #64	; 0x40
 800a506:	6919      	ldr	r1, [r3, #16]
 800a508:	420a      	tst	r2, r1
 800a50a:	d002      	beq.n	800a512 <HAL_TIM_IRQHandler+0x76>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a50c:	68d9      	ldr	r1, [r3, #12]
 800a50e:	420a      	tst	r2, r1
 800a510:	d16a      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x14c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a512:	2220      	movs	r2, #32
 800a514:	6919      	ldr	r1, [r3, #16]
 800a516:	420a      	tst	r2, r1
 800a518:	d002      	beq.n	800a520 <HAL_TIM_IRQHandler+0x84>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a51a:	68d9      	ldr	r1, [r3, #12]
 800a51c:	420a      	tst	r2, r1
 800a51e:	d147      	bne.n	800a5b0 <HAL_TIM_IRQHandler+0x114>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a520:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a522:	3a21      	subs	r2, #33	; 0x21
 800a524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a526:	3219      	adds	r2, #25
 800a528:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a52a:	69da      	ldr	r2, [r3, #28]
 800a52c:	23c0      	movs	r3, #192	; 0xc0
 800a52e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a530:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a532:	421a      	tst	r2, r3
 800a534:	d168      	bne.n	800a608 <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a536:	f7ff ffa9 	bl	800a48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a53a:	0020      	movs	r0, r4
 800a53c:	f7ff ffaa 	bl	800a494 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a540:	2300      	movs	r3, #0
 800a542:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	e7c9      	b.n	800a4dc <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a548:	3a11      	subs	r2, #17
 800a54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a54c:	320d      	adds	r2, #13
 800a54e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a550:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800a552:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a554:	079b      	lsls	r3, r3, #30
 800a556:	d154      	bne.n	800a602 <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a558:	f7ff ff98 	bl	800a48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a55c:	0020      	movs	r0, r4
 800a55e:	f7ff ff99 	bl	800a494 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a562:	2300      	movs	r3, #0
 800a564:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	e7b1      	b.n	800a4ce <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a56a:	3a09      	subs	r2, #9
 800a56c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a56e:	3207      	adds	r2, #7
 800a570:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a572:	699a      	ldr	r2, [r3, #24]
 800a574:	23c0      	movs	r3, #192	; 0xc0
 800a576:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a578:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a57a:	421a      	tst	r2, r3
 800a57c:	d13e      	bne.n	800a5fc <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a57e:	f7ff ff85 	bl	800a48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a582:	0020      	movs	r0, r4
 800a584:	f7ff ff86 	bl	800a494 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a588:	2300      	movs	r3, #0
 800a58a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	e797      	b.n	800a4c0 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a590:	3a05      	subs	r2, #5
 800a592:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a594:	3204      	adds	r2, #4
 800a596:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	079b      	lsls	r3, r3, #30
 800a59c:	d12b      	bne.n	800a5f6 <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a59e:	f7ff ff75 	bl	800a48c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5a2:	0020      	movs	r0, r4
 800a5a4:	f7ff ff76 	bl	800a494 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	e780      	b.n	800a4b2 <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5b0:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 800a5b2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a5b6:	f000 f8e1 	bl	800a77c <HAL_TIMEx_CommutCallback>
}
 800a5ba:	e7b1      	b.n	800a520 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5bc:	3a03      	subs	r2, #3
 800a5be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5c0:	0020      	movs	r0, r4
 800a5c2:	f7fb ff05 	bl	80063d0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	e78f      	b.n	800a4ea <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5ca:	3a02      	subs	r2, #2
 800a5cc:	3aff      	subs	r2, #255	; 0xff
 800a5ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a5d0:	0020      	movs	r0, r4
 800a5d2:	f000 f8d5 	bl	800a780 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	e78e      	b.n	800a4f8 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5da:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 800a5dc:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a5e0:	f000 f8d0 	bl	800a784 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	e78d      	b.n	800a504 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5e8:	3a81      	subs	r2, #129	; 0x81
 800a5ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a5ec:	0020      	movs	r0, r4
 800a5ee:	f7ff ff53 	bl	800a498 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	e78d      	b.n	800a512 <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 800a5f6:	f7ff ff4b 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a5fa:	e7d5      	b.n	800a5a8 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800a5fc:	f7ff ff48 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a600:	e7c2      	b.n	800a588 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 800a602:	f7ff ff45 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a606:	e7ac      	b.n	800a562 <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a608:	f7ff ff42 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a60c:	e798      	b.n	800a540 <HAL_TIM_IRQHandler+0xa4>
 800a60e:	46c0      	nop			; (mov r8, r8)
 800a610:	fffffeff 	.word	0xfffffeff

0800a614 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a614:	4a1d      	ldr	r2, [pc, #116]	; (800a68c <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 800a616:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a618:	4290      	cmp	r0, r2
 800a61a:	d023      	beq.n	800a664 <TIM_Base_SetConfig+0x50>
 800a61c:	4a1c      	ldr	r2, [pc, #112]	; (800a690 <TIM_Base_SetConfig+0x7c>)
 800a61e:	4290      	cmp	r0, r2
 800a620:	d017      	beq.n	800a652 <TIM_Base_SetConfig+0x3e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a622:	4a1c      	ldr	r2, [pc, #112]	; (800a694 <TIM_Base_SetConfig+0x80>)
 800a624:	4290      	cmp	r0, r2
 800a626:	d018      	beq.n	800a65a <TIM_Base_SetConfig+0x46>
 800a628:	4a1b      	ldr	r2, [pc, #108]	; (800a698 <TIM_Base_SetConfig+0x84>)
 800a62a:	4290      	cmp	r0, r2
 800a62c:	d01e      	beq.n	800a66c <TIM_Base_SetConfig+0x58>
 800a62e:	4a1b      	ldr	r2, [pc, #108]	; (800a69c <TIM_Base_SetConfig+0x88>)
 800a630:	4290      	cmp	r0, r2
 800a632:	d01b      	beq.n	800a66c <TIM_Base_SetConfig+0x58>
 800a634:	4a1a      	ldr	r2, [pc, #104]	; (800a6a0 <TIM_Base_SetConfig+0x8c>)
 800a636:	4290      	cmp	r0, r2
 800a638:	d018      	beq.n	800a66c <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a63a:	2280      	movs	r2, #128	; 0x80
 800a63c:	4393      	bics	r3, r2
 800a63e:	694a      	ldr	r2, [r1, #20]
 800a640:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a642:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a644:	688b      	ldr	r3, [r1, #8]
 800a646:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a648:	680b      	ldr	r3, [r1, #0]
 800a64a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a64c:	2301      	movs	r3, #1
 800a64e:	6143      	str	r3, [r0, #20]
}
 800a650:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a652:	2270      	movs	r2, #112	; 0x70
 800a654:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800a656:	684a      	ldr	r2, [r1, #4]
 800a658:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a65a:	4a12      	ldr	r2, [pc, #72]	; (800a6a4 <TIM_Base_SetConfig+0x90>)
 800a65c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a65e:	68ca      	ldr	r2, [r1, #12]
 800a660:	4313      	orrs	r3, r2
 800a662:	e7ea      	b.n	800a63a <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a664:	2270      	movs	r2, #112	; 0x70
 800a666:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800a668:	684a      	ldr	r2, [r1, #4]
 800a66a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a66c:	4a0d      	ldr	r2, [pc, #52]	; (800a6a4 <TIM_Base_SetConfig+0x90>)
 800a66e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a670:	68ca      	ldr	r2, [r1, #12]
 800a672:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a674:	2280      	movs	r2, #128	; 0x80
 800a676:	4393      	bics	r3, r2
 800a678:	694a      	ldr	r2, [r1, #20]
 800a67a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a67c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a67e:	688b      	ldr	r3, [r1, #8]
 800a680:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a682:	680b      	ldr	r3, [r1, #0]
 800a684:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800a686:	690b      	ldr	r3, [r1, #16]
 800a688:	6303      	str	r3, [r0, #48]	; 0x30
 800a68a:	e7df      	b.n	800a64c <TIM_Base_SetConfig+0x38>
 800a68c:	40012c00 	.word	0x40012c00
 800a690:	40000400 	.word	0x40000400
 800a694:	40002000 	.word	0x40002000
 800a698:	40014000 	.word	0x40014000
 800a69c:	40014400 	.word	0x40014400
 800a6a0:	40014800 	.word	0x40014800
 800a6a4:	fffffcff 	.word	0xfffffcff

0800a6a8 <HAL_TIM_Base_Init>:
{
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800a6ac:	d02a      	beq.n	800a704 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a6ae:	233d      	movs	r3, #61	; 0x3d
 800a6b0:	5cc3      	ldrb	r3, [r0, r3]
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d020      	beq.n	800a6fa <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6bc:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800a6be:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c0:	c901      	ldmia	r1!, {r0}
 800a6c2:	f7ff ffa7 	bl	800a614 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 800a6ca:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6cc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ce:	3a0a      	subs	r2, #10
 800a6d0:	54a3      	strb	r3, [r4, r2]
 800a6d2:	3201      	adds	r2, #1
 800a6d4:	54a3      	strb	r3, [r4, r2]
 800a6d6:	3201      	adds	r2, #1
 800a6d8:	54a3      	strb	r3, [r4, r2]
 800a6da:	3201      	adds	r2, #1
 800a6dc:	54a3      	strb	r3, [r4, r2]
 800a6de:	3201      	adds	r2, #1
 800a6e0:	54a3      	strb	r3, [r4, r2]
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e6:	3201      	adds	r2, #1
 800a6e8:	54a3      	strb	r3, [r4, r2]
 800a6ea:	3201      	adds	r2, #1
 800a6ec:	54a3      	strb	r3, [r4, r2]
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	54a3      	strb	r3, [r4, r2]
 800a6f2:	3201      	adds	r2, #1
 800a6f4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800a6f6:	5563      	strb	r3, [r4, r5]
}
 800a6f8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800a6fa:	333c      	adds	r3, #60	; 0x3c
 800a6fc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800a6fe:	f7fd f919 	bl	8007934 <HAL_TIM_Base_MspInit>
 800a702:	e7d9      	b.n	800a6b8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800a704:	2001      	movs	r0, #1
 800a706:	e7f7      	b.n	800a6f8 <HAL_TIM_Base_Init+0x50>

0800a708 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a708:	233c      	movs	r3, #60	; 0x3c
{
 800a70a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800a70c:	5cc3      	ldrb	r3, [r0, r3]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d02a      	beq.n	800a768 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a712:	233d      	movs	r3, #61	; 0x3d
 800a714:	2202      	movs	r2, #2
 800a716:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a718:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a71a:	4d14      	ldr	r5, [pc, #80]	; (800a76c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 800a71c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a71e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a720:	42aa      	cmp	r2, r5
 800a722:	d017      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a724:	2570      	movs	r5, #112	; 0x70
 800a726:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a728:	680d      	ldr	r5, [r1, #0]
 800a72a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a72c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a72e:	4b10      	ldr	r3, [pc, #64]	; (800a770 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800a730:	429a      	cmp	r2, r3
 800a732:	d002      	beq.n	800a73a <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800a734:	4b0f      	ldr	r3, [pc, #60]	; (800a774 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800a736:	429a      	cmp	r2, r3
 800a738:	d104      	bne.n	800a744 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a73a:	2380      	movs	r3, #128	; 0x80
 800a73c:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a73e:	688b      	ldr	r3, [r1, #8]
 800a740:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a742:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a744:	233d      	movs	r3, #61	; 0x3d
 800a746:	2201      	movs	r2, #1
 800a748:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800a74a:	2200      	movs	r2, #0
 800a74c:	3b01      	subs	r3, #1
 800a74e:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800a750:	2000      	movs	r0, #0
}
 800a752:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a754:	4d08      	ldr	r5, [pc, #32]	; (800a778 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800a756:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a758:	684d      	ldr	r5, [r1, #4]
 800a75a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800a75c:	2570      	movs	r5, #112	; 0x70
 800a75e:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a760:	680d      	ldr	r5, [r1, #0]
 800a762:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800a764:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a766:	e7e8      	b.n	800a73a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 800a768:	2002      	movs	r0, #2
 800a76a:	e7f2      	b.n	800a752 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800a76c:	40012c00 	.word	0x40012c00
 800a770:	40000400 	.word	0x40000400
 800a774:	40014000 	.word	0x40014000
 800a778:	ff0fffff 	.word	0xff0fffff

0800a77c <HAL_TIMEx_CommutCallback>:
 800a77c:	4770      	bx	lr
 800a77e:	46c0      	nop			; (mov r8, r8)

0800a780 <HAL_TIMEx_BreakCallback>:
 800a780:	4770      	bx	lr
 800a782:	46c0      	nop			; (mov r8, r8)

0800a784 <HAL_TIMEx_Break2Callback>:
 800a784:	4770      	bx	lr
 800a786:	46c0      	nop			; (mov r8, r8)

0800a788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a788:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a78a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a78e:	2201      	movs	r2, #1
 800a790:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a794:	6801      	ldr	r1, [r0, #0]
 800a796:	4d13      	ldr	r5, [pc, #76]	; (800a7e4 <UART_EndRxTransfer+0x5c>)
 800a798:	680b      	ldr	r3, [r1, #0]
 800a79a:	402b      	ands	r3, r5
 800a79c:	600b      	str	r3, [r1, #0]
 800a79e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7a6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7aa:	6802      	ldr	r2, [r0, #0]
 800a7ac:	4c0e      	ldr	r4, [pc, #56]	; (800a7e8 <UART_EndRxTransfer+0x60>)
 800a7ae:	6893      	ldr	r3, [r2, #8]
 800a7b0:	4023      	ands	r3, r4
 800a7b2:	6093      	str	r3, [r2, #8]
 800a7b4:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d10a      	bne.n	800a7d4 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7c2:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c6:	2410      	movs	r4, #16
 800a7c8:	6802      	ldr	r2, [r0, #0]
 800a7ca:	6813      	ldr	r3, [r2, #0]
 800a7cc:	43a3      	bics	r3, r4
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7d4:	238c      	movs	r3, #140	; 0x8c
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7de:	6743      	str	r3, [r0, #116]	; 0x74
}
 800a7e0:	bd30      	pop	{r4, r5, pc}
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	fffffedf 	.word	0xfffffedf
 800a7e8:	effffffe 	.word	0xeffffffe

0800a7ec <HAL_UART_RxHalfCpltCallback>:
 800a7ec:	4770      	bx	lr
 800a7ee:	46c0      	nop			; (mov r8, r8)

0800a7f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7f2:	2188      	movs	r1, #136	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7f4:	238c      	movs	r3, #140	; 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7f8:	5865      	ldr	r5, [r4, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7fa:	58e0      	ldr	r0, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	0612      	lsls	r2, r2, #24
 800a802:	d501      	bpl.n	800a808 <UART_DMAError+0x18>
 800a804:	2d21      	cmp	r5, #33	; 0x21
 800a806:	d014      	beq.n	800a832 <UART_DMAError+0x42>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	065b      	lsls	r3, r3, #25
 800a80c:	d501      	bpl.n	800a812 <UART_DMAError+0x22>
 800a80e:	2822      	cmp	r0, #34	; 0x22
 800a810:	d008      	beq.n	800a824 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a812:	2290      	movs	r2, #144	; 0x90
 800a814:	2110      	movs	r1, #16
 800a816:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a818:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a81a:	430b      	orrs	r3, r1
 800a81c:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 800a81e:	f7fb fd95 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->RxXferCount = 0U;
 800a824:	235e      	movs	r3, #94	; 0x5e
 800a826:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 800a828:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 800a82a:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 800a82c:	f7ff ffac 	bl	800a788 <UART_EndRxTransfer>
 800a830:	e7ef      	b.n	800a812 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800a832:	2356      	movs	r3, #86	; 0x56
 800a834:	2200      	movs	r2, #0
 800a836:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a838:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a83c:	3201      	adds	r2, #1
 800a83e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a842:	27c0      	movs	r7, #192	; 0xc0
 800a844:	6825      	ldr	r5, [r4, #0]
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	43bb      	bics	r3, r7
 800a84a:	602b      	str	r3, [r5, #0]
 800a84c:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a850:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a854:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	4e05      	ldr	r6, [pc, #20]	; (800a870 <UART_DMAError+0x80>)
 800a85c:	6893      	ldr	r3, [r2, #8]
 800a85e:	4033      	ands	r3, r6
 800a860:	6093      	str	r3, [r2, #8]
 800a862:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 800a866:	2320      	movs	r3, #32
 800a868:	5063      	str	r3, [r4, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a86a:	6823      	ldr	r3, [r4, #0]
}
 800a86c:	e7cc      	b.n	800a808 <UART_DMAError+0x18>
 800a86e:	46c0      	nop			; (mov r8, r8)
 800a870:	ff7fffff 	.word	0xff7fffff

0800a874 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	225e      	movs	r2, #94	; 0x5e
{
 800a878:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a87a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800a87c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800a87e:	3a08      	subs	r2, #8
 800a880:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a882:	f7fb fd63 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a886:	bd10      	pop	{r4, pc}

0800a888 <HAL_UARTEx_RxEventCallback>:
}
 800a888:	4770      	bx	lr
 800a88a:	46c0      	nop			; (mov r8, r8)

0800a88c <HAL_UART_IRQHandler>:
{
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	4645      	mov	r5, r8
 800a890:	46de      	mov	lr, fp
 800a892:	4657      	mov	r7, sl
 800a894:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a896:	6802      	ldr	r2, [r0, #0]
{
 800a898:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a89a:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a89c:	4db3      	ldr	r5, [pc, #716]	; (800ab6c <HAL_UART_IRQHandler+0x2e0>)
{
 800a89e:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8a0:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8a2:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a8a4:	422b      	tst	r3, r5
 800a8a6:	d100      	bne.n	800a8aa <HAL_UART_IRQHandler+0x1e>
 800a8a8:	e0cb      	b.n	800aa42 <HAL_UART_IRQHandler+0x1b6>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a8aa:	4eb1      	ldr	r6, [pc, #708]	; (800ab70 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a8ac:	4db1      	ldr	r5, [pc, #708]	; (800ab74 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a8ae:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a8b0:	4005      	ands	r5, r0
 800a8b2:	4335      	orrs	r5, r6
 800a8b4:	d157      	bne.n	800a966 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800a8b8:	2d01      	cmp	r5, #1
 800a8ba:	d026      	beq.n	800a90a <HAL_UART_IRQHandler+0x7e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8bc:	2580      	movs	r5, #128	; 0x80
 800a8be:	036d      	lsls	r5, r5, #13
 800a8c0:	422b      	tst	r3, r5
 800a8c2:	d002      	beq.n	800a8ca <HAL_UART_IRQHandler+0x3e>
 800a8c4:	024e      	lsls	r6, r1, #9
 800a8c6:	d500      	bpl.n	800a8ca <HAL_UART_IRQHandler+0x3e>
 800a8c8:	e0e2      	b.n	800aa90 <HAL_UART_IRQHandler+0x204>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a8ca:	2280      	movs	r2, #128	; 0x80
 800a8cc:	421a      	tst	r2, r3
 800a8ce:	d006      	beq.n	800a8de <HAL_UART_IRQHandler+0x52>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a8d0:	2580      	movs	r5, #128	; 0x80
 800a8d2:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a8d4:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a8d6:	4029      	ands	r1, r5
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	d000      	beq.n	800a8de <HAL_UART_IRQHandler+0x52>
 800a8dc:	e0d1      	b.n	800aa82 <HAL_UART_IRQHandler+0x1f6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a8de:	2240      	movs	r2, #64	; 0x40
 800a8e0:	421a      	tst	r2, r3
 800a8e2:	d002      	beq.n	800a8ea <HAL_UART_IRQHandler+0x5e>
 800a8e4:	4202      	tst	r2, r0
 800a8e6:	d000      	beq.n	800a8ea <HAL_UART_IRQHandler+0x5e>
 800a8e8:	e0db      	b.n	800aaa2 <HAL_UART_IRQHandler+0x216>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a8ea:	021a      	lsls	r2, r3, #8
 800a8ec:	d502      	bpl.n	800a8f4 <HAL_UART_IRQHandler+0x68>
 800a8ee:	0042      	lsls	r2, r0, #1
 800a8f0:	d500      	bpl.n	800a8f4 <HAL_UART_IRQHandler+0x68>
 800a8f2:	e0ea      	b.n	800aaca <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a8f4:	01db      	lsls	r3, r3, #7
 800a8f6:	d502      	bpl.n	800a8fe <HAL_UART_IRQHandler+0x72>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	da00      	bge.n	800a8fe <HAL_UART_IRQHandler+0x72>
 800a8fc:	e12d      	b.n	800ab5a <HAL_UART_IRQHandler+0x2ce>
}
 800a8fe:	bcf0      	pop	{r4, r5, r6, r7}
 800a900:	46bb      	mov	fp, r7
 800a902:	46b2      	mov	sl, r6
 800a904:	46a9      	mov	r9, r5
 800a906:	46a0      	mov	r8, r4
 800a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a90a:	2610      	movs	r6, #16
 800a90c:	421e      	tst	r6, r3
 800a90e:	d0d5      	beq.n	800a8bc <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a910:	4206      	tst	r6, r0
 800a912:	d0d3      	beq.n	800a8bc <HAL_UART_IRQHandler+0x30>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a914:	2340      	movs	r3, #64	; 0x40
 800a916:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a918:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a91a:	6892      	ldr	r2, [r2, #8]
 800a91c:	4010      	ands	r0, r2
 800a91e:	4213      	tst	r3, r2
 800a920:	d100      	bne.n	800a924 <HAL_UART_IRQHandler+0x98>
 800a922:	e0dd      	b.n	800aae0 <HAL_UART_IRQHandler+0x254>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a924:	2280      	movs	r2, #128	; 0x80
 800a926:	4694      	mov	ip, r2
 800a928:	58a2      	ldr	r2, [r4, r2]
 800a92a:	6810      	ldr	r0, [r2, #0]
 800a92c:	6842      	ldr	r2, [r0, #4]
 800a92e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a930:	2a00      	cmp	r2, #0
 800a932:	d0e4      	beq.n	800a8fe <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a934:	215c      	movs	r1, #92	; 0x5c
 800a936:	468b      	mov	fp, r1
 800a938:	5a61      	ldrh	r1, [r4, r1]
 800a93a:	4291      	cmp	r1, r2
 800a93c:	d9df      	bls.n	800a8fe <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800a93e:	275e      	movs	r7, #94	; 0x5e
 800a940:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a942:	2220      	movs	r2, #32
 800a944:	0017      	movs	r7, r2
 800a946:	6800      	ldr	r0, [r0, #0]
 800a948:	4007      	ands	r7, r0
 800a94a:	46b8      	mov	r8, r7
 800a94c:	4202      	tst	r2, r0
 800a94e:	d100      	bne.n	800a952 <HAL_UART_IRQHandler+0xc6>
 800a950:	e118      	b.n	800ab84 <HAL_UART_IRQHandler+0x2f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a952:	2302      	movs	r3, #2
 800a954:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a956:	335c      	adds	r3, #92	; 0x5c
 800a958:	5ae3      	ldrh	r3, [r4, r3]
 800a95a:	0020      	movs	r0, r4
 800a95c:	1ac9      	subs	r1, r1, r3
 800a95e:	b289      	uxth	r1, r1
 800a960:	f7ff ff92 	bl	800a888 <HAL_UARTEx_RxEventCallback>
 800a964:	e7cb      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a966:	2501      	movs	r5, #1
 800a968:	421d      	tst	r5, r3
 800a96a:	d008      	beq.n	800a97e <HAL_UART_IRQHandler+0xf2>
 800a96c:	05c7      	lsls	r7, r0, #23
 800a96e:	d506      	bpl.n	800a97e <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a970:	2790      	movs	r7, #144	; 0x90
 800a972:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a974:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a976:	59e7      	ldr	r7, [r4, r7]
 800a978:	433d      	orrs	r5, r7
 800a97a:	4667      	mov	r7, ip
 800a97c:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a97e:	2502      	movs	r5, #2
 800a980:	421d      	tst	r5, r3
 800a982:	d06d      	beq.n	800aa60 <HAL_UART_IRQHandler+0x1d4>
 800a984:	07cf      	lsls	r7, r1, #31
 800a986:	d50b      	bpl.n	800a9a0 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a988:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a98a:	358e      	adds	r5, #142	; 0x8e
 800a98c:	2704      	movs	r7, #4
 800a98e:	46ac      	mov	ip, r5
 800a990:	5965      	ldr	r5, [r4, r5]
 800a992:	46b8      	mov	r8, r7
 800a994:	433d      	orrs	r5, r7
 800a996:	4667      	mov	r7, ip
 800a998:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a99a:	4645      	mov	r5, r8
 800a99c:	421d      	tst	r5, r3
 800a99e:	d163      	bne.n	800aa68 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9a0:	2708      	movs	r7, #8
 800a9a2:	421f      	tst	r7, r3
 800a9a4:	d008      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x12c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9a6:	2520      	movs	r5, #32
 800a9a8:	4005      	ands	r5, r0
 800a9aa:	4335      	orrs	r5, r6
 800a9ac:	d004      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9ae:	2690      	movs	r6, #144	; 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9b0:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9b2:	59a5      	ldr	r5, [r4, r6]
 800a9b4:	433d      	orrs	r5, r7
 800a9b6:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a9b8:	2580      	movs	r5, #128	; 0x80
 800a9ba:	012d      	lsls	r5, r5, #4
 800a9bc:	422b      	tst	r3, r5
 800a9be:	d007      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x144>
 800a9c0:	0146      	lsls	r6, r0, #5
 800a9c2:	d505      	bpl.n	800a9d0 <HAL_UART_IRQHandler+0x144>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9c4:	2690      	movs	r6, #144	; 0x90
 800a9c6:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9ca:	59a5      	ldr	r5, [r4, r6]
 800a9cc:	433d      	orrs	r5, r7
 800a9ce:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9d0:	2590      	movs	r5, #144	; 0x90
 800a9d2:	5965      	ldr	r5, [r4, r5]
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	d100      	bne.n	800a9da <HAL_UART_IRQHandler+0x14e>
 800a9d8:	e791      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a9da:	2520      	movs	r5, #32
 800a9dc:	421d      	tst	r5, r3
 800a9de:	d005      	beq.n	800a9ec <HAL_UART_IRQHandler+0x160>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9e0:	2380      	movs	r3, #128	; 0x80
 800a9e2:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a9e4:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9e6:	400b      	ands	r3, r1
 800a9e8:	431d      	orrs	r5, r3
 800a9ea:	d172      	bne.n	800aad2 <HAL_UART_IRQHandler+0x246>
      errorcode = huart->ErrorCode;
 800a9ec:	2690      	movs	r6, #144	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9ee:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a9f0:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 800a9f2:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9f4:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a9f6:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9f8:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 800a9fa:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9fc:	431d      	orrs	r5, r3
 800a9fe:	d100      	bne.n	800aa02 <HAL_UART_IRQHandler+0x176>
 800aa00:	e0af      	b.n	800ab62 <HAL_UART_IRQHandler+0x2d6>
        UART_EndRxTransfer(huart);
 800aa02:	f7ff fec1 	bl	800a788 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	421f      	tst	r7, r3
 800aa0c:	d045      	beq.n	800aa9a <HAL_UART_IRQHandler+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa0e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa12:	2301      	movs	r3, #1
 800aa14:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa18:	6822      	ldr	r2, [r4, #0]
 800aa1a:	6893      	ldr	r3, [r2, #8]
 800aa1c:	43bb      	bics	r3, r7
 800aa1e:	6093      	str	r3, [r2, #8]
 800aa20:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800aa24:	2580      	movs	r5, #128	; 0x80
 800aa26:	5960      	ldr	r0, [r4, r5]
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d036      	beq.n	800aa9a <HAL_UART_IRQHandler+0x20e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa2c:	4b52      	ldr	r3, [pc, #328]	; (800ab78 <HAL_UART_IRQHandler+0x2ec>)
 800aa2e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa30:	f7fd fedc 	bl	80087ec <HAL_DMA_Abort_IT>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d100      	bne.n	800aa3a <HAL_UART_IRQHandler+0x1ae>
 800aa38:	e761      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa3a:	5960      	ldr	r0, [r4, r5]
 800aa3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aa3e:	4798      	blx	r3
 800aa40:	e75d      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa42:	2520      	movs	r5, #32
 800aa44:	421d      	tst	r5, r3
 800aa46:	d100      	bne.n	800aa4a <HAL_UART_IRQHandler+0x1be>
 800aa48:	e735      	b.n	800a8b6 <HAL_UART_IRQHandler+0x2a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa4a:	2680      	movs	r6, #128	; 0x80
 800aa4c:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa4e:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa50:	400e      	ands	r6, r1
 800aa52:	4335      	orrs	r5, r6
 800aa54:	d100      	bne.n	800aa58 <HAL_UART_IRQHandler+0x1cc>
 800aa56:	e72e      	b.n	800a8b6 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800aa58:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d115      	bne.n	800aa8a <HAL_UART_IRQHandler+0x1fe>
 800aa5e:	e74e      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa60:	075d      	lsls	r5, r3, #29
 800aa62:	d59d      	bpl.n	800a9a0 <HAL_UART_IRQHandler+0x114>
 800aa64:	07cd      	lsls	r5, r1, #31
 800aa66:	d59b      	bpl.n	800a9a0 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa68:	2504      	movs	r5, #4
 800aa6a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa6c:	358c      	adds	r5, #140	; 0x8c
 800aa6e:	46a9      	mov	r9, r5
 800aa70:	5965      	ldr	r5, [r4, r5]
 800aa72:	46a8      	mov	r8, r5
 800aa74:	2502      	movs	r5, #2
 800aa76:	4647      	mov	r7, r8
 800aa78:	432f      	orrs	r7, r5
 800aa7a:	003d      	movs	r5, r7
 800aa7c:	464f      	mov	r7, r9
 800aa7e:	51e5      	str	r5, [r4, r7]
 800aa80:	e78e      	b.n	800a9a0 <HAL_UART_IRQHandler+0x114>
    if (huart->TxISR != NULL)
 800aa82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d100      	bne.n	800aa8a <HAL_UART_IRQHandler+0x1fe>
 800aa88:	e739      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 800aa8a:	0020      	movs	r0, r4
 800aa8c:	4798      	blx	r3
 800aa8e:	e736      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_WakeupCallback(huart);
 800aa90:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa92:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800aa94:	f000 fcca 	bl	800b42c <HAL_UARTEx_WakeupCallback>
    return;
 800aa98:	e731      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
            HAL_UART_ErrorCallback(huart);
 800aa9a:	0020      	movs	r0, r4
 800aa9c:	f7fb fc56 	bl	800634c <HAL_UART_ErrorCallback>
 800aaa0:	e72d      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaa2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aaac:	6821      	ldr	r1, [r4, #0]
 800aaae:	680b      	ldr	r3, [r1, #0]
 800aab0:	4393      	bics	r3, r2
 800aab2:	600b      	str	r3, [r1, #0]
 800aab4:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aab8:	2388      	movs	r3, #136	; 0x88
 800aaba:	3a20      	subs	r2, #32
 800aabc:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aabe:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aac0:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800aac2:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800aac4:	f7fb fc40 	bl	8006348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aac8:	e719      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aaca:	0020      	movs	r0, r4
 800aacc:	f000 fcb2 	bl	800b434 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800aad0:	e715      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
        if (huart->RxISR != NULL)
 800aad2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d089      	beq.n	800a9ec <HAL_UART_IRQHandler+0x160>
          huart->RxISR(huart);
 800aad8:	0020      	movs	r0, r4
 800aada:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aadc:	6822      	ldr	r2, [r4, #0]
 800aade:	e785      	b.n	800a9ec <HAL_UART_IRQHandler+0x160>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aae0:	235c      	movs	r3, #92	; 0x5c
 800aae2:	225e      	movs	r2, #94	; 0x5e
 800aae4:	5ae1      	ldrh	r1, [r4, r3]
 800aae6:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800aae8:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaea:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	d100      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x266>
 800aaf0:	e705      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaf2:	1ac9      	subs	r1, r1, r3
 800aaf4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800aaf6:	2900      	cmp	r1, #0
 800aaf8:	d100      	bne.n	800aafc <HAL_UART_IRQHandler+0x270>
 800aafa:	e700      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aafc:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab00:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab04:	6822      	ldr	r2, [r4, #0]
 800ab06:	6813      	ldr	r3, [r2, #0]
 800ab08:	4698      	mov	r8, r3
 800ab0a:	4647      	mov	r7, r8
 800ab0c:	4b1b      	ldr	r3, [pc, #108]	; (800ab7c <HAL_UART_IRQHandler+0x2f0>)
 800ab0e:	401f      	ands	r7, r3
 800ab10:	6017      	str	r7, [r2, #0]
 800ab12:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab16:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab1a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab1e:	6822      	ldr	r2, [r4, #0]
 800ab20:	6893      	ldr	r3, [r2, #8]
 800ab22:	4698      	mov	r8, r3
 800ab24:	4647      	mov	r7, r8
 800ab26:	4b16      	ldr	r3, [pc, #88]	; (800ab80 <HAL_UART_IRQHandler+0x2f4>)
 800ab28:	401f      	ands	r7, r3
 800ab2a:	6097      	str	r7, [r2, #8]
 800ab2c:	f389 8810 	msr	PRIMASK, r9
        huart->RxState = HAL_UART_STATE_READY;
 800ab30:	238c      	movs	r3, #140	; 0x8c
 800ab32:	2220      	movs	r2, #32
 800ab34:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab36:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800ab38:	6760      	str	r0, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab3a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab3e:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab42:	6822      	ldr	r2, [r4, #0]
 800ab44:	6813      	ldr	r3, [r2, #0]
 800ab46:	43b3      	bics	r3, r6
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab4e:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab50:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab52:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab54:	f7ff fe98 	bl	800a888 <HAL_UARTEx_RxEventCallback>
 800ab58:	e6d1      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab5a:	0020      	movs	r0, r4
 800ab5c:	f000 fc68 	bl	800b430 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800ab60:	e6cd      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
        HAL_UART_ErrorCallback(huart);
 800ab62:	f7fb fbf3 	bl	800634c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab66:	51a5      	str	r5, [r4, r6]
 800ab68:	e6c9      	b.n	800a8fe <HAL_UART_IRQHandler+0x72>
 800ab6a:	46c0      	nop			; (mov r8, r8)
 800ab6c:	0000080f 	.word	0x0000080f
 800ab70:	10000001 	.word	0x10000001
 800ab74:	04000120 	.word	0x04000120
 800ab78:	0800a875 	.word	0x0800a875
 800ab7c:	fffffedf 	.word	0xfffffedf
 800ab80:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab84:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab88:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab8c:	6820      	ldr	r0, [r4, #0]
 800ab8e:	4f17      	ldr	r7, [pc, #92]	; (800abec <HAL_UART_IRQHandler+0x360>)
 800ab90:	6801      	ldr	r1, [r0, #0]
 800ab92:	4039      	ands	r1, r7
 800ab94:	6001      	str	r1, [r0, #0]
 800ab96:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab9a:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab9e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba2:	6820      	ldr	r0, [r4, #0]
 800aba4:	6881      	ldr	r1, [r0, #8]
 800aba6:	43a9      	bics	r1, r5
 800aba8:	6081      	str	r1, [r0, #8]
 800abaa:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abae:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abb2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abb6:	6820      	ldr	r0, [r4, #0]
 800abb8:	6881      	ldr	r1, [r0, #8]
 800abba:	4399      	bics	r1, r3
 800abbc:	6081      	str	r1, [r0, #8]
 800abbe:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 800abc2:	334c      	adds	r3, #76	; 0x4c
 800abc4:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc6:	4643      	mov	r3, r8
 800abc8:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abce:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abd2:	6822      	ldr	r2, [r4, #0]
 800abd4:	6813      	ldr	r3, [r2, #0]
 800abd6:	43b3      	bics	r3, r6
 800abd8:	6013      	str	r3, [r2, #0]
 800abda:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abde:	4663      	mov	r3, ip
 800abe0:	58e0      	ldr	r0, [r4, r3]
 800abe2:	f7fd fdc5 	bl	8008770 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abe6:	465b      	mov	r3, fp
 800abe8:	5ae1      	ldrh	r1, [r4, r3]
 800abea:	e6b2      	b.n	800a952 <HAL_UART_IRQHandler+0xc6>
 800abec:	fffffeff 	.word	0xfffffeff

0800abf0 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abf0:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abf2:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800abf4:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abf6:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d002      	beq.n	800ac04 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800abfe:	f7ff fdf5 	bl	800a7ec <HAL_UART_RxHalfCpltCallback>
}
 800ac02:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac04:	335b      	adds	r3, #91	; 0x5b
 800ac06:	5ac1      	ldrh	r1, [r0, r3]
 800ac08:	0849      	lsrs	r1, r1, #1
 800ac0a:	f7ff fe3d 	bl	800a888 <HAL_UARTEx_RxEventCallback>
 800ac0e:	e7f8      	b.n	800ac02 <UART_DMARxHalfCplt+0x12>

0800ac10 <UART_DMAReceiveCplt>:
{
 800ac10:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac12:	681b      	ldr	r3, [r3, #0]
{
 800ac14:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	2320      	movs	r3, #32
 800ac1a:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac1e:	4011      	ands	r1, r2
 800ac20:	4213      	tst	r3, r2
 800ac22:	d127      	bne.n	800ac74 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 800ac24:	225e      	movs	r2, #94	; 0x5e
 800ac26:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac28:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac2c:	3a5d      	subs	r2, #93	; 0x5d
 800ac2e:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac32:	6804      	ldr	r4, [r0, #0]
 800ac34:	4e1c      	ldr	r6, [pc, #112]	; (800aca8 <UART_DMAReceiveCplt+0x98>)
 800ac36:	6821      	ldr	r1, [r4, #0]
 800ac38:	4031      	ands	r1, r6
 800ac3a:	6021      	str	r1, [r4, #0]
 800ac3c:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac40:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac44:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac48:	6804      	ldr	r4, [r0, #0]
 800ac4a:	68a1      	ldr	r1, [r4, #8]
 800ac4c:	4391      	bics	r1, r2
 800ac4e:	60a1      	str	r1, [r4, #8]
 800ac50:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac54:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac58:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac5c:	2540      	movs	r5, #64	; 0x40
 800ac5e:	6801      	ldr	r1, [r0, #0]
 800ac60:	688a      	ldr	r2, [r1, #8]
 800ac62:	43aa      	bics	r2, r5
 800ac64:	608a      	str	r2, [r1, #8]
 800ac66:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800ac6a:	228c      	movs	r2, #140	; 0x8c
 800ac6c:	5083      	str	r3, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac6e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d00c      	beq.n	800ac8e <UART_DMAReceiveCplt+0x7e>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac74:	2300      	movs	r3, #0
 800ac76:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac78:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d002      	beq.n	800ac84 <UART_DMAReceiveCplt+0x74>
    HAL_UART_RxCpltCallback(huart);
 800ac7e:	f7fb fcdf 	bl	8006640 <HAL_UART_RxCpltCallback>
}
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac84:	335b      	adds	r3, #91	; 0x5b
 800ac86:	5ac1      	ldrh	r1, [r0, r3]
 800ac88:	f7ff fdfe 	bl	800a888 <HAL_UARTEx_RxEventCallback>
 800ac8c:	e7f9      	b.n	800ac82 <UART_DMAReceiveCplt+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac92:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac96:	2410      	movs	r4, #16
 800ac98:	6802      	ldr	r2, [r0, #0]
 800ac9a:	6813      	ldr	r3, [r2, #0]
 800ac9c:	43a3      	bics	r3, r4
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	f381 8810 	msr	PRIMASK, r1
}
 800aca4:	e7e6      	b.n	800ac74 <UART_DMAReceiveCplt+0x64>
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	fffffeff 	.word	0xfffffeff

0800acac <UART_SetConfig>:
{
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acb0:	6925      	ldr	r5, [r4, #16]
 800acb2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acb4:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acb6:	432a      	orrs	r2, r5
 800acb8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acba:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acbc:	69c0      	ldr	r0, [r0, #28]
 800acbe:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acc0:	4d4d      	ldr	r5, [pc, #308]	; (800adf8 <UART_SetConfig+0x14c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acc2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acc4:	4029      	ands	r1, r5
 800acc6:	430a      	orrs	r2, r1
 800acc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	494b      	ldr	r1, [pc, #300]	; (800adfc <UART_SetConfig+0x150>)
    tmpreg |= huart->Init.OneBitSampling;
 800acce:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acd0:	400a      	ands	r2, r1
 800acd2:	68e1      	ldr	r1, [r4, #12]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acd8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acda:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800acdc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acde:	4d48      	ldr	r5, [pc, #288]	; (800ae00 <UART_SetConfig+0x154>)
 800ace0:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ace2:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ace4:	430a      	orrs	r2, r1
 800ace6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acec:	43aa      	bics	r2, r5
 800acee:	430a      	orrs	r2, r1
 800acf0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acf2:	4a44      	ldr	r2, [pc, #272]	; (800ae04 <UART_SetConfig+0x158>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d035      	beq.n	800ad64 <UART_SetConfig+0xb8>
 800acf8:	4a43      	ldr	r2, [pc, #268]	; (800ae08 <UART_SetConfig+0x15c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d00c      	beq.n	800ad18 <UART_SetConfig+0x6c>
 800acfe:	4a43      	ldr	r2, [pc, #268]	; (800ae0c <UART_SetConfig+0x160>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d036      	beq.n	800ad72 <UART_SetConfig+0xc6>
 800ad04:	4a42      	ldr	r2, [pc, #264]	; (800ae10 <UART_SetConfig+0x164>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d033      	beq.n	800ad72 <UART_SetConfig+0xc6>
    switch (clocksource)
 800ad0a:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800ad0c:	4b41      	ldr	r3, [pc, #260]	; (800ae14 <UART_SetConfig+0x168>)
 800ad0e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800ad14:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad18:	4b3f      	ldr	r3, [pc, #252]	; (800ae18 <UART_SetConfig+0x16c>)
 800ad1a:	4a40      	ldr	r2, [pc, #256]	; (800ae1c <UART_SetConfig+0x170>)
 800ad1c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800ad1e:	230c      	movs	r3, #12
 800ad20:	402b      	ands	r3, r5
 800ad22:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad24:	2380      	movs	r3, #128	; 0x80
 800ad26:	021b      	lsls	r3, r3, #8
 800ad28:	4298      	cmp	r0, r3
 800ad2a:	d02f      	beq.n	800ad8c <UART_SetConfig+0xe0>
    switch (clocksource)
 800ad2c:	2a04      	cmp	r2, #4
 800ad2e:	d056      	beq.n	800adde <UART_SetConfig+0x132>
 800ad30:	d851      	bhi.n	800add6 <UART_SetConfig+0x12a>
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	d021      	beq.n	800ad7a <UART_SetConfig+0xce>
 800ad36:	2a02      	cmp	r2, #2
 800ad38:	d1e7      	bne.n	800ad0a <UART_SetConfig+0x5e>
        pclk = (uint32_t) HSI_VALUE;
 800ad3a:	4839      	ldr	r0, [pc, #228]	; (800ae20 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad3c:	4b39      	ldr	r3, [pc, #228]	; (800ae24 <UART_SetConfig+0x178>)
 800ad3e:	0049      	lsls	r1, r1, #1
 800ad40:	5ac9      	ldrh	r1, [r1, r3]
 800ad42:	f7f5 f9fd 	bl	8000140 <__udivsi3>
 800ad46:	6865      	ldr	r5, [r4, #4]
 800ad48:	086b      	lsrs	r3, r5, #1
 800ad4a:	18c0      	adds	r0, r0, r3
 800ad4c:	0029      	movs	r1, r5
 800ad4e:	f7f5 f9f7 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad52:	0002      	movs	r2, r0
 800ad54:	4b34      	ldr	r3, [pc, #208]	; (800ae28 <UART_SetConfig+0x17c>)
 800ad56:	3a10      	subs	r2, #16
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d8d6      	bhi.n	800ad0a <UART_SetConfig+0x5e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	60d8      	str	r0, [r3, #12]
 800ad60:	2000      	movs	r0, #0
 800ad62:	e7d3      	b.n	800ad0c <UART_SetConfig+0x60>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad64:	4b2c      	ldr	r3, [pc, #176]	; (800ae18 <UART_SetConfig+0x16c>)
 800ad66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad68:	2303      	movs	r3, #3
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d909      	bls.n	800ad86 <UART_SetConfig+0xda>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad72:	2380      	movs	r3, #128	; 0x80
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	4298      	cmp	r0, r3
 800ad78:	d03a      	beq.n	800adf0 <UART_SetConfig+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7a:	f7fe fecd 	bl	8009b18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d0ee      	beq.n	800ad60 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ad84:	e7da      	b.n	800ad3c <UART_SetConfig+0x90>
 800ad86:	4a29      	ldr	r2, [pc, #164]	; (800ae2c <UART_SetConfig+0x180>)
 800ad88:	5cd2      	ldrb	r2, [r2, r3]
 800ad8a:	e7cb      	b.n	800ad24 <UART_SetConfig+0x78>
    switch (clocksource)
 800ad8c:	2a04      	cmp	r2, #4
 800ad8e:	d029      	beq.n	800ade4 <UART_SetConfig+0x138>
 800ad90:	d81e      	bhi.n	800add0 <UART_SetConfig+0x124>
 800ad92:	2a00      	cmp	r2, #0
 800ad94:	d02c      	beq.n	800adf0 <UART_SetConfig+0x144>
 800ad96:	2a02      	cmp	r2, #2
 800ad98:	d1b7      	bne.n	800ad0a <UART_SetConfig+0x5e>
 800ad9a:	4821      	ldr	r0, [pc, #132]	; (800ae20 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9c:	4b21      	ldr	r3, [pc, #132]	; (800ae24 <UART_SetConfig+0x178>)
 800ad9e:	0049      	lsls	r1, r1, #1
 800ada0:	5ac9      	ldrh	r1, [r1, r3]
 800ada2:	f7f5 f9cd 	bl	8000140 <__udivsi3>
 800ada6:	6865      	ldr	r5, [r4, #4]
 800ada8:	0040      	lsls	r0, r0, #1
 800adaa:	086b      	lsrs	r3, r5, #1
 800adac:	18c0      	adds	r0, r0, r3
 800adae:	0029      	movs	r1, r5
 800adb0:	f7f5 f9c6 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adb4:	0002      	movs	r2, r0
 800adb6:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <UART_SetConfig+0x17c>)
 800adb8:	3a10      	subs	r2, #16
 800adba:	429a      	cmp	r2, r3
 800adbc:	d8a5      	bhi.n	800ad0a <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adbe:	4b1c      	ldr	r3, [pc, #112]	; (800ae30 <UART_SetConfig+0x184>)
        huart->Instance->BRR = brrtemp;
 800adc0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adc2:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adc4:	0700      	lsls	r0, r0, #28
 800adc6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800adc8:	4303      	orrs	r3, r0
 800adca:	60d3      	str	r3, [r2, #12]
 800adcc:	2000      	movs	r0, #0
 800adce:	e79d      	b.n	800ad0c <UART_SetConfig+0x60>
    switch (clocksource)
 800add0:	2a08      	cmp	r2, #8
 800add2:	d0e3      	beq.n	800ad9c <UART_SetConfig+0xf0>
 800add4:	e799      	b.n	800ad0a <UART_SetConfig+0x5e>
    switch (clocksource)
 800add6:	0018      	movs	r0, r3
 800add8:	2a08      	cmp	r2, #8
 800adda:	d0af      	beq.n	800ad3c <UART_SetConfig+0x90>
 800addc:	e795      	b.n	800ad0a <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 800adde:	f7fe fd89 	bl	80098f4 <HAL_RCC_GetSysClockFreq>
        break;
 800ade2:	e7cc      	b.n	800ad7e <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 800ade4:	f7fe fd86 	bl	80098f4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800ade8:	2800      	cmp	r0, #0
 800adea:	d0b9      	beq.n	800ad60 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800adee:	e7d5      	b.n	800ad9c <UART_SetConfig+0xf0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800adf0:	f7fe fe92 	bl	8009b18 <HAL_RCC_GetPCLK1Freq>
        break;
 800adf4:	e7f8      	b.n	800ade8 <UART_SetConfig+0x13c>
 800adf6:	46c0      	nop			; (mov r8, r8)
 800adf8:	cfff69f3 	.word	0xcfff69f3
 800adfc:	ffffcfff 	.word	0xffffcfff
 800ae00:	11fff4ff 	.word	0x11fff4ff
 800ae04:	40013800 	.word	0x40013800
 800ae08:	40004400 	.word	0x40004400
 800ae0c:	40004800 	.word	0x40004800
 800ae10:	40004c00 	.word	0x40004c00
 800ae14:	00010001 	.word	0x00010001
 800ae18:	40021000 	.word	0x40021000
 800ae1c:	08013b20 	.word	0x08013b20
 800ae20:	00f42400 	.word	0x00f42400
 800ae24:	08013b30 	.word	0x08013b30
 800ae28:	0000ffef 	.word	0x0000ffef
 800ae2c:	08013b1c 	.word	0x08013b1c
 800ae30:	0000fff0 	.word	0x0000fff0

0800ae34 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae34:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800ae36:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae38:	07da      	lsls	r2, r3, #31
 800ae3a:	d506      	bpl.n	800ae4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae3c:	6801      	ldr	r1, [r0, #0]
 800ae3e:	4c28      	ldr	r4, [pc, #160]	; (800aee0 <UART_AdvFeatureConfig+0xac>)
 800ae40:	684a      	ldr	r2, [r1, #4]
 800ae42:	4022      	ands	r2, r4
 800ae44:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800ae46:	4322      	orrs	r2, r4
 800ae48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae4a:	079a      	lsls	r2, r3, #30
 800ae4c:	d506      	bpl.n	800ae5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae4e:	6801      	ldr	r1, [r0, #0]
 800ae50:	4c24      	ldr	r4, [pc, #144]	; (800aee4 <UART_AdvFeatureConfig+0xb0>)
 800ae52:	684a      	ldr	r2, [r1, #4]
 800ae54:	4022      	ands	r2, r4
 800ae56:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800ae58:	4322      	orrs	r2, r4
 800ae5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae5c:	075a      	lsls	r2, r3, #29
 800ae5e:	d506      	bpl.n	800ae6e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae60:	6801      	ldr	r1, [r0, #0]
 800ae62:	4c21      	ldr	r4, [pc, #132]	; (800aee8 <UART_AdvFeatureConfig+0xb4>)
 800ae64:	684a      	ldr	r2, [r1, #4]
 800ae66:	4022      	ands	r2, r4
 800ae68:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ae6a:	4322      	orrs	r2, r4
 800ae6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae6e:	071a      	lsls	r2, r3, #28
 800ae70:	d506      	bpl.n	800ae80 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae72:	6801      	ldr	r1, [r0, #0]
 800ae74:	4c1d      	ldr	r4, [pc, #116]	; (800aeec <UART_AdvFeatureConfig+0xb8>)
 800ae76:	684a      	ldr	r2, [r1, #4]
 800ae78:	4022      	ands	r2, r4
 800ae7a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800ae7c:	4322      	orrs	r2, r4
 800ae7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae80:	06da      	lsls	r2, r3, #27
 800ae82:	d506      	bpl.n	800ae92 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae84:	6801      	ldr	r1, [r0, #0]
 800ae86:	4c1a      	ldr	r4, [pc, #104]	; (800aef0 <UART_AdvFeatureConfig+0xbc>)
 800ae88:	688a      	ldr	r2, [r1, #8]
 800ae8a:	4022      	ands	r2, r4
 800ae8c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800ae8e:	4322      	orrs	r2, r4
 800ae90:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae92:	069a      	lsls	r2, r3, #26
 800ae94:	d506      	bpl.n	800aea4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae96:	6801      	ldr	r1, [r0, #0]
 800ae98:	4c16      	ldr	r4, [pc, #88]	; (800aef4 <UART_AdvFeatureConfig+0xc0>)
 800ae9a:	688a      	ldr	r2, [r1, #8]
 800ae9c:	4022      	ands	r2, r4
 800ae9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800aea0:	4322      	orrs	r2, r4
 800aea2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aea4:	065a      	lsls	r2, r3, #25
 800aea6:	d50a      	bpl.n	800aebe <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aea8:	6801      	ldr	r1, [r0, #0]
 800aeaa:	4d13      	ldr	r5, [pc, #76]	; (800aef8 <UART_AdvFeatureConfig+0xc4>)
 800aeac:	684a      	ldr	r2, [r1, #4]
 800aeae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800aeb0:	402a      	ands	r2, r5
 800aeb2:	4322      	orrs	r2, r4
 800aeb4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aeb6:	2280      	movs	r2, #128	; 0x80
 800aeb8:	0352      	lsls	r2, r2, #13
 800aeba:	4294      	cmp	r4, r2
 800aebc:	d009      	beq.n	800aed2 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aebe:	061b      	lsls	r3, r3, #24
 800aec0:	d506      	bpl.n	800aed0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aec2:	6802      	ldr	r2, [r0, #0]
 800aec4:	490d      	ldr	r1, [pc, #52]	; (800aefc <UART_AdvFeatureConfig+0xc8>)
 800aec6:	6853      	ldr	r3, [r2, #4]
 800aec8:	400b      	ands	r3, r1
 800aeca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800aecc:	430b      	orrs	r3, r1
 800aece:	6053      	str	r3, [r2, #4]
}
 800aed0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aed2:	684a      	ldr	r2, [r1, #4]
 800aed4:	4c0a      	ldr	r4, [pc, #40]	; (800af00 <UART_AdvFeatureConfig+0xcc>)
 800aed6:	4022      	ands	r2, r4
 800aed8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800aeda:	4322      	orrs	r2, r4
 800aedc:	604a      	str	r2, [r1, #4]
 800aede:	e7ee      	b.n	800aebe <UART_AdvFeatureConfig+0x8a>
 800aee0:	fffdffff 	.word	0xfffdffff
 800aee4:	fffeffff 	.word	0xfffeffff
 800aee8:	fffbffff 	.word	0xfffbffff
 800aeec:	ffff7fff 	.word	0xffff7fff
 800aef0:	ffffefff 	.word	0xffffefff
 800aef4:	ffffdfff 	.word	0xffffdfff
 800aef8:	ffefffff 	.word	0xffefffff
 800aefc:	fff7ffff 	.word	0xfff7ffff
 800af00:	ff9fffff 	.word	0xff9fffff

0800af04 <UART_WaitOnFlagUntilTimeout>:
{
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	4657      	mov	r7, sl
 800af08:	464e      	mov	r6, r9
 800af0a:	4645      	mov	r5, r8
 800af0c:	46de      	mov	lr, fp
 800af0e:	b5e0      	push	{r5, r6, r7, lr}
 800af10:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af12:	2204      	movs	r2, #4
 800af14:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af16:	2280      	movs	r2, #128	; 0x80
 800af18:	0112      	lsls	r2, r2, #4
{
 800af1a:	4699      	mov	r9, r3
 800af1c:	4680      	mov	r8, r0
 800af1e:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af20:	4693      	mov	fp, r2
{
 800af22:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af24:	6803      	ldr	r3, [r0, #0]
 800af26:	e001      	b.n	800af2c <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800af28:	1c7a      	adds	r2, r7, #1
 800af2a:	d10d      	bne.n	800af48 <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af2c:	69dc      	ldr	r4, [r3, #28]
 800af2e:	402c      	ands	r4, r5
 800af30:	1b64      	subs	r4, r4, r5
 800af32:	4262      	negs	r2, r4
 800af34:	4154      	adcs	r4, r2
 800af36:	42b4      	cmp	r4, r6
 800af38:	d0f6      	beq.n	800af28 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800af3a:	2000      	movs	r0, #0
}
 800af3c:	bcf0      	pop	{r4, r5, r6, r7}
 800af3e:	46bb      	mov	fp, r7
 800af40:	46b2      	mov	sl, r6
 800af42:	46a9      	mov	r9, r5
 800af44:	46a0      	mov	r8, r4
 800af46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af48:	f7fc ff5a 	bl	8007e00 <HAL_GetTick>
 800af4c:	464b      	mov	r3, r9
 800af4e:	1ac0      	subs	r0, r0, r3
 800af50:	42b8      	cmp	r0, r7
 800af52:	d831      	bhi.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb4>
 800af54:	2f00      	cmp	r7, #0
 800af56:	d02f      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af58:	4643      	mov	r3, r8
 800af5a:	4651      	mov	r1, sl
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	4211      	tst	r1, r2
 800af62:	d0e3      	beq.n	800af2c <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af64:	4659      	mov	r1, fp
 800af66:	69da      	ldr	r2, [r3, #28]
 800af68:	420a      	tst	r2, r1
 800af6a:	d0df      	beq.n	800af2c <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af6c:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af6e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af72:	2201      	movs	r2, #1
 800af74:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af78:	4643      	mov	r3, r8
 800af7a:	6819      	ldr	r1, [r3, #0]
 800af7c:	4c1c      	ldr	r4, [pc, #112]	; (800aff0 <UART_WaitOnFlagUntilTimeout+0xec>)
 800af7e:	680b      	ldr	r3, [r1, #0]
 800af80:	4023      	ands	r3, r4
 800af82:	600b      	str	r3, [r1, #0]
 800af84:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af8c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af90:	4643      	mov	r3, r8
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	688b      	ldr	r3, [r1, #8]
 800af96:	4393      	bics	r3, r2
 800af98:	608b      	str	r3, [r1, #8]
 800af9a:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800af9e:	2320      	movs	r3, #32
 800afa0:	4641      	mov	r1, r8
 800afa2:	3287      	adds	r2, #135	; 0x87
 800afa4:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800afa6:	3204      	adds	r2, #4
 800afa8:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afaa:	3204      	adds	r2, #4
 800afac:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 800afae:	2200      	movs	r2, #0
 800afb0:	3364      	adds	r3, #100	; 0x64
          return HAL_TIMEOUT;
 800afb2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800afb4:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800afb6:	e7c1      	b.n	800af3c <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afb8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afbc:	2201      	movs	r2, #1
 800afbe:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800afc2:	4643      	mov	r3, r8
 800afc4:	6819      	ldr	r1, [r3, #0]
 800afc6:	4c0a      	ldr	r4, [pc, #40]	; (800aff0 <UART_WaitOnFlagUntilTimeout+0xec>)
 800afc8:	680b      	ldr	r3, [r1, #0]
 800afca:	4023      	ands	r3, r4
 800afcc:	600b      	str	r3, [r1, #0]
 800afce:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afd2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afda:	4643      	mov	r3, r8
 800afdc:	6819      	ldr	r1, [r3, #0]
 800afde:	688b      	ldr	r3, [r1, #8]
 800afe0:	4393      	bics	r3, r2
 800afe2:	608b      	str	r3, [r1, #8]
 800afe4:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800afe8:	2320      	movs	r3, #32
 800afea:	4641      	mov	r1, r8
 800afec:	3287      	adds	r2, #135	; 0x87
 800afee:	e7db      	b.n	800afa8 <UART_WaitOnFlagUntilTimeout+0xa4>
 800aff0:	fffffe5f 	.word	0xfffffe5f

0800aff4 <HAL_UART_Transmit>:
{
 800aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aff6:	4647      	mov	r7, r8
 800aff8:	46ce      	mov	lr, r9
 800affa:	b580      	push	{r7, lr}
 800affc:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800affe:	2388      	movs	r3, #136	; 0x88
 800b000:	58c3      	ldr	r3, [r0, r3]
{
 800b002:	0004      	movs	r4, r0
 800b004:	000d      	movs	r5, r1
 800b006:	0016      	movs	r6, r2
 800b008:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800b00a:	2b20      	cmp	r3, #32
 800b00c:	d14d      	bne.n	800b0aa <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800b00e:	2900      	cmp	r1, #0
 800b010:	d045      	beq.n	800b09e <HAL_UART_Transmit+0xaa>
 800b012:	2a00      	cmp	r2, #0
 800b014:	d043      	beq.n	800b09e <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b016:	2380      	movs	r3, #128	; 0x80
 800b018:	6882      	ldr	r2, [r0, #8]
 800b01a:	015b      	lsls	r3, r3, #5
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d104      	bne.n	800b02a <HAL_UART_Transmit+0x36>
 800b020:	6903      	ldr	r3, [r0, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800b026:	07cb      	lsls	r3, r1, #31
 800b028:	d439      	bmi.n	800b09e <HAL_UART_Transmit+0xaa>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b02a:	2390      	movs	r3, #144	; 0x90
 800b02c:	2200      	movs	r2, #0
 800b02e:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b030:	3b08      	subs	r3, #8
 800b032:	3221      	adds	r2, #33	; 0x21
 800b034:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800b036:	f7fc fee3 	bl	8007e00 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800b03a:	2354      	movs	r3, #84	; 0x54
 800b03c:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800b03e:	3302      	adds	r3, #2
      pdata16bits = NULL;
 800b040:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 800b042:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b044:	2380      	movs	r3, #128	; 0x80
 800b046:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800b048:	4680      	mov	r8, r0
      pdata16bits = NULL;
 800b04a:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b04c:	015b      	lsls	r3, r3, #5
 800b04e:	429a      	cmp	r2, r3
 800b050:	d03c      	beq.n	800b0cc <HAL_UART_Transmit+0xd8>
    while (huart->TxXferCount > 0U)
 800b052:	2356      	movs	r3, #86	; 0x56
 800b054:	5ae3      	ldrh	r3, [r4, r3]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d02b      	beq.n	800b0b2 <HAL_UART_Transmit+0xbe>
      huart->TxXferCount--;
 800b05a:	2656      	movs	r6, #86	; 0x56
 800b05c:	e00a      	b.n	800b074 <HAL_UART_Transmit+0x80>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b05e:	782a      	ldrb	r2, [r5, #0]
 800b060:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 800b062:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b064:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800b066:	5ba2      	ldrh	r2, [r4, r6]
 800b068:	3a01      	subs	r2, #1
 800b06a:	b292      	uxth	r2, r2
 800b06c:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800b06e:	5ba3      	ldrh	r3, [r4, r6]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d01e      	beq.n	800b0b2 <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b074:	4643      	mov	r3, r8
 800b076:	2200      	movs	r2, #0
 800b078:	2180      	movs	r1, #128	; 0x80
 800b07a:	0020      	movs	r0, r4
 800b07c:	9700      	str	r7, [sp, #0]
 800b07e:	f7ff ff41 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800b082:	2800      	cmp	r0, #0
 800b084:	d113      	bne.n	800b0ae <HAL_UART_Transmit+0xba>
      if (pdata8bits == NULL)
 800b086:	2d00      	cmp	r5, #0
 800b088:	d1e9      	bne.n	800b05e <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b08a:	464b      	mov	r3, r9
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	05db      	lsls	r3, r3, #23
 800b092:	0ddb      	lsrs	r3, r3, #23
 800b094:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800b096:	2302      	movs	r3, #2
 800b098:	469c      	mov	ip, r3
 800b09a:	44e1      	add	r9, ip
 800b09c:	e7e3      	b.n	800b066 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800b09e:	2001      	movs	r0, #1
}
 800b0a0:	b003      	add	sp, #12
 800b0a2:	bcc0      	pop	{r6, r7}
 800b0a4:	46b9      	mov	r9, r7
 800b0a6:	46b0      	mov	r8, r6
 800b0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b0aa:	2002      	movs	r0, #2
 800b0ac:	e7f8      	b.n	800b0a0 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800b0ae:	2003      	movs	r0, #3
 800b0b0:	e7f6      	b.n	800b0a0 <HAL_UART_Transmit+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0b2:	4643      	mov	r3, r8
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2140      	movs	r1, #64	; 0x40
 800b0b8:	0020      	movs	r0, r4
 800b0ba:	9700      	str	r7, [sp, #0]
 800b0bc:	f7ff ff22 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d1f4      	bne.n	800b0ae <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 800b0c4:	2388      	movs	r3, #136	; 0x88
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800b0ca:	e7e9      	b.n	800b0a0 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1bf      	bne.n	800b052 <HAL_UART_Transmit+0x5e>
 800b0d2:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800b0d4:	2500      	movs	r5, #0
 800b0d6:	e7bc      	b.n	800b052 <HAL_UART_Transmit+0x5e>

0800b0d8 <HAL_UART_Receive>:
{
 800b0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0da:	464f      	mov	r7, r9
 800b0dc:	4646      	mov	r6, r8
 800b0de:	46d6      	mov	lr, sl
 800b0e0:	b5c0      	push	{r6, r7, lr}
 800b0e2:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0e4:	238c      	movs	r3, #140	; 0x8c
 800b0e6:	58c3      	ldr	r3, [r0, r3]
{
 800b0e8:	0004      	movs	r4, r0
 800b0ea:	000d      	movs	r5, r1
 800b0ec:	0016      	movs	r6, r2
 800b0ee:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0f0:	2b20      	cmp	r3, #32
 800b0f2:	d15a      	bne.n	800b1aa <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800b0f4:	2900      	cmp	r1, #0
 800b0f6:	d051      	beq.n	800b19c <HAL_UART_Receive+0xc4>
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	d04f      	beq.n	800b19c <HAL_UART_Receive+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0fc:	2380      	movs	r3, #128	; 0x80
 800b0fe:	6882      	ldr	r2, [r0, #8]
 800b100:	015b      	lsls	r3, r3, #5
 800b102:	429a      	cmp	r2, r3
 800b104:	d104      	bne.n	800b110 <HAL_UART_Receive+0x38>
 800b106:	6903      	ldr	r3, [r0, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <HAL_UART_Receive+0x38>
      if ((((uint32_t)pData) & 1U) != 0U)
 800b10c:	07cb      	lsls	r3, r1, #31
 800b10e:	d445      	bmi.n	800b19c <HAL_UART_Receive+0xc4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b110:	2300      	movs	r3, #0
 800b112:	2290      	movs	r2, #144	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b114:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b116:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b118:	3a04      	subs	r2, #4
 800b11a:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11c:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800b11e:	f7fc fe6f 	bl	8007e00 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800b122:	235c      	movs	r3, #92	; 0x5c
    UART_MASK_COMPUTATION(huart);
 800b124:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 800b126:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 800b128:	3302      	adds	r3, #2
 800b12a:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800b12c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800b12e:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 800b130:	0152      	lsls	r2, r2, #5
 800b132:	4293      	cmp	r3, r2
 800b134:	d051      	beq.n	800b1da <HAL_UART_Receive+0x102>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d139      	bne.n	800b1ae <HAL_UART_Receive+0xd6>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	425a      	negs	r2, r3
 800b13e:	4153      	adcs	r3, r2
 800b140:	01db      	lsls	r3, r3, #7
 800b142:	4698      	mov	r8, r3
 800b144:	237f      	movs	r3, #127	; 0x7f
 800b146:	469c      	mov	ip, r3
 800b148:	44e0      	add	r8, ip
 800b14a:	2360      	movs	r3, #96	; 0x60
 800b14c:	4642      	mov	r2, r8
 800b14e:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 800b150:	2300      	movs	r3, #0
 800b152:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 800b154:	235e      	movs	r3, #94	; 0x5e
 800b156:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 800b158:	265e      	movs	r6, #94	; 0x5e
    while (huart->RxXferCount > 0U)
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <HAL_UART_Receive+0x9a>
 800b15e:	e035      	b.n	800b1cc <HAL_UART_Receive+0xf4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b160:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800b162:	3501      	adds	r5, #1
      huart->RxXferCount--;
 800b164:	5ba2      	ldrh	r2, [r4, r6]
 800b166:	3a01      	subs	r2, #1
 800b168:	b292      	uxth	r2, r2
 800b16a:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 800b16c:	5ba3      	ldrh	r3, [r4, r6]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d02c      	beq.n	800b1cc <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b172:	464b      	mov	r3, r9
 800b174:	2200      	movs	r2, #0
 800b176:	2120      	movs	r1, #32
 800b178:	0020      	movs	r0, r4
 800b17a:	9700      	str	r7, [sp, #0]
 800b17c:	f7ff fec2 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800b180:	2800      	cmp	r0, #0
 800b182:	d128      	bne.n	800b1d6 <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b184:	4642      	mov	r2, r8
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 800b18c:	2d00      	cmp	r5, #0
 800b18e:	d1e7      	bne.n	800b160 <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b190:	4652      	mov	r2, sl
 800b192:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 800b194:	2302      	movs	r3, #2
 800b196:	469c      	mov	ip, r3
 800b198:	44e2      	add	sl, ip
 800b19a:	e7e3      	b.n	800b164 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 800b19c:	2001      	movs	r0, #1
}
 800b19e:	b002      	add	sp, #8
 800b1a0:	bce0      	pop	{r5, r6, r7}
 800b1a2:	46ba      	mov	sl, r7
 800b1a4:	46b1      	mov	r9, r6
 800b1a6:	46a8      	mov	r8, r5
 800b1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b1aa:	2002      	movs	r0, #2
 800b1ac:	e7f7      	b.n	800b19e <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800b1ae:	2280      	movs	r2, #128	; 0x80
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	0552      	lsls	r2, r2, #21
 800b1b4:	4688      	mov	r8, r1
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d1c7      	bne.n	800b14a <HAL_UART_Receive+0x72>
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	425a      	negs	r2, r3
 800b1be:	4153      	adcs	r3, r2
 800b1c0:	019b      	lsls	r3, r3, #6
 800b1c2:	4698      	mov	r8, r3
 800b1c4:	233f      	movs	r3, #63	; 0x3f
 800b1c6:	469c      	mov	ip, r3
 800b1c8:	44e0      	add	r8, ip
 800b1ca:	e7be      	b.n	800b14a <HAL_UART_Receive+0x72>
    huart->RxState = HAL_UART_STATE_READY;
 800b1cc:	238c      	movs	r3, #140	; 0x8c
 800b1ce:	2220      	movs	r2, #32
    return HAL_OK;
 800b1d0:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 800b1d2:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800b1d4:	e7e3      	b.n	800b19e <HAL_UART_Receive+0xc6>
        return HAL_TIMEOUT;
 800b1d6:	2003      	movs	r0, #3
 800b1d8:	e7e1      	b.n	800b19e <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d106      	bne.n	800b1ee <HAL_UART_Receive+0x116>
 800b1e0:	2260      	movs	r2, #96	; 0x60
 800b1e2:	4b07      	ldr	r3, [pc, #28]	; (800b200 <HAL_UART_Receive+0x128>)
 800b1e4:	46aa      	mov	sl, r5
 800b1e6:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 800b1e8:	2500      	movs	r5, #0
 800b1ea:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1ec:	e7b2      	b.n	800b154 <HAL_UART_Receive+0x7c>
    UART_MASK_COMPUTATION(huart);
 800b1ee:	2360      	movs	r3, #96	; 0x60
 800b1f0:	22ff      	movs	r2, #255	; 0xff
 800b1f2:	52e2      	strh	r2, [r4, r3]
 800b1f4:	339f      	adds	r3, #159	; 0x9f
 800b1f6:	4698      	mov	r8, r3
      pdata16bits = NULL;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	469a      	mov	sl, r3
 800b1fc:	e7aa      	b.n	800b154 <HAL_UART_Receive+0x7c>
 800b1fe:	46c0      	nop			; (mov r8, r8)
 800b200:	000001ff 	.word	0x000001ff

0800b204 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b204:	2200      	movs	r2, #0
 800b206:	2390      	movs	r3, #144	; 0x90
{
 800b208:	b530      	push	{r4, r5, lr}
 800b20a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20c:	50c2      	str	r2, [r0, r3]
{
 800b20e:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 800b210:	f7fc fdf6 	bl	8007e00 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b214:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800b216:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	0709      	lsls	r1, r1, #28
 800b21c:	d40f      	bmi.n	800b23e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b21e:	6812      	ldr	r2, [r2, #0]
 800b220:	0752      	lsls	r2, r2, #29
 800b222:	d41b      	bmi.n	800b25c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800b224:	2320      	movs	r3, #32
 800b226:	2288      	movs	r2, #136	; 0x88
 800b228:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b22a:	3204      	adds	r2, #4
 800b22c:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b22e:	2300      	movs	r3, #0
  return HAL_OK;
 800b230:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800b232:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b234:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b236:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800b238:	54a3      	strb	r3, [r4, r2]
}
 800b23a:	b003      	add	sp, #12
 800b23c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b23e:	2180      	movs	r1, #128	; 0x80
 800b240:	4b0d      	ldr	r3, [pc, #52]	; (800b278 <UART_CheckIdleState+0x74>)
 800b242:	2200      	movs	r2, #0
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	0389      	lsls	r1, r1, #14
 800b248:	0003      	movs	r3, r0
 800b24a:	0020      	movs	r0, r4
 800b24c:	f7ff fe5a 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800b250:	2800      	cmp	r0, #0
 800b252:	d10e      	bne.n	800b272 <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b254:	6822      	ldr	r2, [r4, #0]
 800b256:	6812      	ldr	r2, [r2, #0]
 800b258:	0752      	lsls	r2, r2, #29
 800b25a:	d5e3      	bpl.n	800b224 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b25c:	2180      	movs	r1, #128	; 0x80
 800b25e:	4b06      	ldr	r3, [pc, #24]	; (800b278 <UART_CheckIdleState+0x74>)
 800b260:	2200      	movs	r2, #0
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	0020      	movs	r0, r4
 800b266:	002b      	movs	r3, r5
 800b268:	03c9      	lsls	r1, r1, #15
 800b26a:	f7ff fe4b 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800b26e:	2800      	cmp	r0, #0
 800b270:	d0d8      	beq.n	800b224 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800b272:	2003      	movs	r0, #3
 800b274:	e7e1      	b.n	800b23a <UART_CheckIdleState+0x36>
 800b276:	46c0      	nop			; (mov r8, r8)
 800b278:	01ffffff 	.word	0x01ffffff

0800b27c <HAL_UART_Init>:
{
 800b27c:	b510      	push	{r4, lr}
 800b27e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800b280:	d028      	beq.n	800b2d4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b282:	2388      	movs	r3, #136	; 0x88
 800b284:	58c3      	ldr	r3, [r0, r3]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d026      	beq.n	800b2d8 <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b28a:	2388      	movs	r3, #136	; 0x88
 800b28c:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800b28e:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800b290:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800b292:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b294:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800b296:	6813      	ldr	r3, [r2, #0]
 800b298:	438b      	bics	r3, r1
 800b29a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b29c:	f7ff fd06 	bl	800acac <UART_SetConfig>
 800b2a0:	2801      	cmp	r0, #1
 800b2a2:	d017      	beq.n	800b2d4 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d110      	bne.n	800b2cc <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	490d      	ldr	r1, [pc, #52]	; (800b2e4 <HAL_UART_Init+0x68>)
 800b2ae:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800b2b0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2b2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2b4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2b8:	689a      	ldr	r2, [r3, #8]
 800b2ba:	438a      	bics	r2, r1
 800b2bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	3929      	subs	r1, #41	; 0x29
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800b2c6:	f7ff ff9d 	bl	800b204 <UART_CheckIdleState>
}
 800b2ca:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800b2cc:	0020      	movs	r0, r4
 800b2ce:	f7ff fdb1 	bl	800ae34 <UART_AdvFeatureConfig>
 800b2d2:	e7ea      	b.n	800b2aa <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	e7f8      	b.n	800b2ca <HAL_UART_Init+0x4e>
    huart->Lock = HAL_UNLOCKED;
 800b2d8:	2284      	movs	r2, #132	; 0x84
 800b2da:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800b2dc:	f7fc fb48 	bl	8007970 <HAL_UART_MspInit>
 800b2e0:	e7d3      	b.n	800b28a <HAL_UART_Init+0xe>
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	ffffb7ff 	.word	0xffffb7ff

0800b2e8 <UART_Start_Receive_DMA>:
{
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800b2ec:	225c      	movs	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 800b2ee:	6581      	str	r1, [r0, #88]	; 0x58
{
 800b2f0:	000d      	movs	r5, r1
  huart->RxXferSize = Size;
 800b2f2:	5283      	strh	r3, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2f4:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f6:	2790      	movs	r7, #144	; 0x90
 800b2f8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2fa:	268c      	movs	r6, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2fc:	51c2      	str	r2, [r0, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2fe:	5181      	str	r1, [r0, r6]
  if (huart->hdmarx != NULL)
 800b300:	315e      	adds	r1, #94	; 0x5e
{
 800b302:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 800b304:	5840      	ldr	r0, [r0, r1]
 800b306:	2800      	cmp	r0, #0
 800b308:	d00d      	beq.n	800b326 <UART_Start_Receive_DMA+0x3e>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b30a:	491e      	ldr	r1, [pc, #120]	; (800b384 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800b30c:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b30e:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b310:	491d      	ldr	r1, [pc, #116]	; (800b388 <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b312:	002a      	movs	r2, r5
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b314:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b316:	491d      	ldr	r1, [pc, #116]	; (800b38c <UART_Start_Receive_DMA+0xa4>)
 800b318:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b31a:	6821      	ldr	r1, [r4, #0]
 800b31c:	3124      	adds	r1, #36	; 0x24
 800b31e:	f7fd f9df 	bl	80086e0 <HAL_DMA_Start_IT>
 800b322:	2800      	cmp	r0, #0
 800b324:	d127      	bne.n	800b376 <UART_Start_Receive_DMA+0x8e>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b326:	6923      	ldr	r3, [r4, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d117      	bne.n	800b35c <UART_Start_Receive_DMA+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b32c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b330:	2301      	movs	r3, #1
 800b332:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b336:	6821      	ldr	r1, [r4, #0]
 800b338:	688a      	ldr	r2, [r1, #8]
 800b33a:	431a      	orrs	r2, r3
 800b33c:	608a      	str	r2, [r1, #8]
 800b33e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b342:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b346:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b34a:	2040      	movs	r0, #64	; 0x40
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	6893      	ldr	r3, [r2, #8]
 800b350:	4303      	orrs	r3, r0
 800b352:	6093      	str	r3, [r2, #8]
 800b354:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800b358:	2000      	movs	r0, #0
}
 800b35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b35c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b360:	2301      	movs	r3, #1
 800b362:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b366:	6822      	ldr	r2, [r4, #0]
 800b368:	33ff      	adds	r3, #255	; 0xff
 800b36a:	6810      	ldr	r0, [r2, #0]
 800b36c:	4303      	orrs	r3, r0
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	f381 8810 	msr	PRIMASK, r1
}
 800b374:	e7da      	b.n	800b32c <UART_Start_Receive_DMA+0x44>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b376:	2310      	movs	r3, #16
 800b378:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 800b37a:	3310      	adds	r3, #16
      return HAL_ERROR;
 800b37c:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800b37e:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 800b380:	e7eb      	b.n	800b35a <UART_Start_Receive_DMA+0x72>
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	0800ac11 	.word	0x0800ac11
 800b388:	0800abf1 	.word	0x0800abf1
 800b38c:	0800a7f1 	.word	0x0800a7f1

0800b390 <HAL_UART_Receive_DMA>:
{
 800b390:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800b392:	208c      	movs	r0, #140	; 0x8c
 800b394:	5818      	ldr	r0, [r3, r0]
{
 800b396:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b398:	2820      	cmp	r0, #32
 800b39a:	d127      	bne.n	800b3ec <HAL_UART_Receive_DMA+0x5c>
    if ((pData == NULL) || (Size == 0U))
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d023      	beq.n	800b3e8 <HAL_UART_Receive_DMA+0x58>
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	d021      	beq.n	800b3e8 <HAL_UART_Receive_DMA+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3a4:	2080      	movs	r0, #128	; 0x80
 800b3a6:	689c      	ldr	r4, [r3, #8]
 800b3a8:	0140      	lsls	r0, r0, #5
 800b3aa:	4284      	cmp	r4, r0
 800b3ac:	d105      	bne.n	800b3ba <HAL_UART_Receive_DMA+0x2a>
 800b3ae:	6918      	ldr	r0, [r3, #16]
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d102      	bne.n	800b3ba <HAL_UART_Receive_DMA+0x2a>
      return HAL_ERROR;
 800b3b4:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800b3b6:	07cc      	lsls	r4, r1, #31
 800b3b8:	d417      	bmi.n	800b3ea <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	6840      	ldr	r0, [r0, #4]
 800b3c2:	0200      	lsls	r0, r0, #8
 800b3c4:	d50c      	bpl.n	800b3e0 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3d0:	2080      	movs	r0, #128	; 0x80
 800b3d2:	681c      	ldr	r4, [r3, #0]
 800b3d4:	04c0      	lsls	r0, r0, #19
 800b3d6:	6825      	ldr	r5, [r4, #0]
 800b3d8:	4328      	orrs	r0, r5
 800b3da:	6020      	str	r0, [r4, #0]
 800b3dc:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	f7ff ff81 	bl	800b2e8 <UART_Start_Receive_DMA>
 800b3e6:	e000      	b.n	800b3ea <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 800b3e8:	2001      	movs	r0, #1
}
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b3ec:	2002      	movs	r0, #2
 800b3ee:	e7fc      	b.n	800b3ea <HAL_UART_Receive_DMA+0x5a>

0800b3f0 <UARTEx_SetNbDataToProcess.part.0>:
  * @note The RX FIFO depth and the TX FIFO depth is extracted from
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3f2:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3f4:	4f0b      	ldr	r7, [pc, #44]	; (800b424 <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3f6:	689c      	ldr	r4, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3f8:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800b3fa:	0005      	movs	r5, r0
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3fc:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3fe:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b400:	4e09      	ldr	r6, [pc, #36]	; (800b428 <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b402:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b404:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b406:	f7f4 ff25 	bl	8000254 <__divsi3>
 800b40a:	236a      	movs	r3, #106	; 0x6a
 800b40c:	52e8      	strh	r0, [r5, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b40e:	0123      	lsls	r3, r4, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b410:	0f5b      	lsrs	r3, r3, #29
 800b412:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b414:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b416:	00c0      	lsls	r0, r0, #3
 800b418:	f7f4 ff1c 	bl	8000254 <__divsi3>
 800b41c:	2368      	movs	r3, #104	; 0x68
 800b41e:	52e8      	strh	r0, [r5, r3]
  }
}
 800b420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b422:	46c0      	nop			; (mov r8, r8)
 800b424:	08013b50 	.word	0x08013b50
 800b428:	08013b48 	.word	0x08013b48

0800b42c <HAL_UARTEx_WakeupCallback>:
}
 800b42c:	4770      	bx	lr
 800b42e:	46c0      	nop			; (mov r8, r8)

0800b430 <HAL_UARTEx_RxFifoFullCallback>:
 800b430:	4770      	bx	lr
 800b432:	46c0      	nop			; (mov r8, r8)

0800b434 <HAL_UARTEx_TxFifoEmptyCallback>:
 800b434:	4770      	bx	lr
 800b436:	46c0      	nop			; (mov r8, r8)

0800b438 <HAL_UARTEx_DisableFifoMode>:
{
 800b438:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b43a:	2484      	movs	r4, #132	; 0x84
 800b43c:	5d03      	ldrb	r3, [r0, r4]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d012      	beq.n	800b468 <HAL_UARTEx_DisableFifoMode+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 800b442:	2588      	movs	r5, #136	; 0x88
 800b444:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800b446:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800b448:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b44a:	6803      	ldr	r3, [r0, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b44e:	6819      	ldr	r1, [r3, #0]
 800b450:	43b1      	bics	r1, r6
 800b452:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b454:	4905      	ldr	r1, [pc, #20]	; (800b46c <HAL_UARTEx_DisableFifoMode+0x34>)
 800b456:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b458:	2100      	movs	r1, #0
 800b45a:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b45c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b45e:	2320      	movs	r3, #32
 800b460:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800b462:	5501      	strb	r1, [r0, r4]
  return HAL_OK;
 800b464:	2000      	movs	r0, #0
}
 800b466:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800b468:	2002      	movs	r0, #2
 800b46a:	e7fc      	b.n	800b466 <HAL_UARTEx_DisableFifoMode+0x2e>
 800b46c:	dfffffff 	.word	0xdfffffff

0800b470 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800b470:	2384      	movs	r3, #132	; 0x84
{
 800b472:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b474:	5cc3      	ldrb	r3, [r0, r3]
{
 800b476:	0004      	movs	r4, r0
 800b478:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d01e      	beq.n	800b4bc <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b47e:	2388      	movs	r3, #136	; 0x88
 800b480:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b482:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b484:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b486:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	3923      	subs	r1, #35	; 0x23
 800b48c:	438b      	bics	r3, r1
 800b48e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b490:	68ab      	ldr	r3, [r5, #8]
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	08d9      	lsrs	r1, r3, #3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b496:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b498:	4311      	orrs	r1, r2
 800b49a:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b4a0:	f7ff ffa6 	bl	800b3f0 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800b4a4:	2388      	movs	r3, #136	; 0x88
 800b4a6:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4a8:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b4aa:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800b4ac:	2200      	movs	r2, #0
  return HAL_OK;
 800b4ae:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	54e2      	strb	r2, [r4, r3]
}
 800b4b4:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b4b6:	4b02      	ldr	r3, [pc, #8]	; (800b4c0 <HAL_UARTEx_SetTxFifoThreshold+0x50>)
 800b4b8:	6683      	str	r3, [r0, #104]	; 0x68
 800b4ba:	e7f3      	b.n	800b4a4 <HAL_UARTEx_SetTxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800b4bc:	2002      	movs	r0, #2
 800b4be:	e7f9      	b.n	800b4b4 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800b4c0:	00010001 	.word	0x00010001

0800b4c4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b4c4:	2384      	movs	r3, #132	; 0x84
{
 800b4c6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b4c8:	5cc3      	ldrb	r3, [r0, r3]
{
 800b4ca:	0004      	movs	r4, r0
 800b4cc:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d01e      	beq.n	800b510 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b4d2:	2388      	movs	r3, #136	; 0x88
 800b4d4:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4d6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b4d8:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4da:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	3923      	subs	r1, #35	; 0x23
 800b4e0:	438b      	bics	r3, r1
 800b4e2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4e4:	68a9      	ldr	r1, [r5, #8]
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <HAL_UARTEx_SetRxFifoThreshold+0x50>)
 800b4e8:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4ea:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4ec:	4311      	orrs	r1, r2
 800b4ee:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00a      	beq.n	800b50a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b4f4:	f7ff ff7c 	bl	800b3f0 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800b4f8:	2388      	movs	r3, #136	; 0x88
 800b4fa:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4fc:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b4fe:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800b500:	2200      	movs	r2, #0
  return HAL_OK;
 800b502:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800b504:	3b04      	subs	r3, #4
 800b506:	54e2      	strb	r2, [r4, r3]
}
 800b508:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b50a:	4b03      	ldr	r3, [pc, #12]	; (800b518 <HAL_UARTEx_SetRxFifoThreshold+0x54>)
 800b50c:	6683      	str	r3, [r0, #104]	; 0x68
 800b50e:	e7f3      	b.n	800b4f8 <HAL_UARTEx_SetRxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800b510:	2002      	movs	r0, #2
 800b512:	e7f9      	b.n	800b508 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800b514:	f1ffffff 	.word	0xf1ffffff
 800b518:	00010001 	.word	0x00010001

0800b51c <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 800b51c:	4b04      	ldr	r3, [pc, #16]	; (800b530 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 800b51e:	b510      	push	{r4, lr}
  SysTick->CTRL;
 800b520:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b522:	f001 f8a7 	bl	800c674 <xTaskGetSchedulerState>
 800b526:	2801      	cmp	r0, #1
 800b528:	d001      	beq.n	800b52e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 800b52a:	f001 fb83 	bl	800cc34 <xPortSysTickHandler>
  }
}
 800b52e:	bd10      	pop	{r4, pc}
 800b530:	e000e010 	.word	0xe000e010

0800b534 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b534:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d106      	bne.n	800b54a <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <osKernelInitialize+0x24>)
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	2800      	cmp	r0, #0
 800b542:	d105      	bne.n	800b550 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b544:	2201      	movs	r2, #1
 800b546:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 800b548:	4770      	bx	lr
    stat = osErrorISR;
 800b54a:	2006      	movs	r0, #6
 800b54c:	4240      	negs	r0, r0
 800b54e:	e7fb      	b.n	800b548 <osKernelInitialize+0x14>
      stat = osError;
 800b550:	2001      	movs	r0, #1
 800b552:	4240      	negs	r0, r0
  return (stat);
 800b554:	e7f8      	b.n	800b548 <osKernelInitialize+0x14>
 800b556:	46c0      	nop			; (mov r8, r8)
 800b558:	20004fc0 	.word	0x20004fc0

0800b55c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b55c:	b510      	push	{r4, lr}
 800b55e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b562:	2b00      	cmp	r3, #0
 800b564:	d111      	bne.n	800b58a <osKernelStart+0x2e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b566:	4a0a      	ldr	r2, [pc, #40]	; (800b590 <osKernelStart+0x34>)
 800b568:	6813      	ldr	r3, [r2, #0]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d10a      	bne.n	800b584 <osKernelStart+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b56e:	4909      	ldr	r1, [pc, #36]	; (800b594 <osKernelStart+0x38>)
 800b570:	69cb      	ldr	r3, [r1, #28]
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	0a1b      	lsrs	r3, r3, #8
 800b576:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b578:	2302      	movs	r3, #2
 800b57a:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b57c:	f000 fdc6 	bl	800c10c <vTaskStartScheduler>
      stat = osOK;
 800b580:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800b582:	bd10      	pop	{r4, pc}
      stat = osError;
 800b584:	2001      	movs	r0, #1
 800b586:	4240      	negs	r0, r0
  return (stat);
 800b588:	e7fb      	b.n	800b582 <osKernelStart+0x26>
    stat = osErrorISR;
 800b58a:	2006      	movs	r0, #6
 800b58c:	4240      	negs	r0, r0
 800b58e:	e7f8      	b.n	800b582 <osKernelStart+0x26>
 800b590:	20004fc0 	.word	0x20004fc0
 800b594:	e000ed00 	.word	0xe000ed00

0800b598 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b59a:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b59c:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b59e:	b087      	sub	sp, #28
 800b5a0:	0005      	movs	r5, r0
  hTask = NULL;
 800b5a2:	9205      	str	r2, [sp, #20]
 800b5a4:	f3ef 8205 	mrs	r2, IPSR
  return(result);
 800b5a8:	2000      	movs	r0, #0

  if (!IS_IRQ() && (func != NULL)) {
 800b5aa:	2a00      	cmp	r2, #0
 800b5ac:	d124      	bne.n	800b5f8 <osThreadNew+0x60>
 800b5ae:	2d00      	cmp	r5, #0
 800b5b0:	d022      	beq.n	800b5f8 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b5b2:	2c00      	cmp	r4, #0
 800b5b4:	d028      	beq.n	800b608 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b5b6:	69a3      	ldr	r3, [r4, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d11f      	bne.n	800b5fc <osThreadNew+0x64>
 800b5bc:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5be:	6862      	ldr	r2, [r4, #4]
 800b5c0:	07d2      	lsls	r2, r2, #31
 800b5c2:	d41f      	bmi.n	800b604 <osThreadNew+0x6c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b5c4:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 800b5c6:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 800b5c8:	2e00      	cmp	r6, #0
 800b5ca:	d000      	beq.n	800b5ce <osThreadNew+0x36>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b5cc:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b5ce:	6820      	ldr	r0, [r4, #0]
 800b5d0:	4684      	mov	ip, r0
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5d2:	68a0      	ldr	r0, [r4, #8]
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d027      	beq.n	800b628 <osThreadNew+0x90>
 800b5d8:	68e7      	ldr	r7, [r4, #12]
 800b5da:	2fa7      	cmp	r7, #167	; 0xa7
 800b5dc:	d912      	bls.n	800b604 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5de:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5e0:	2c00      	cmp	r4, #0
 800b5e2:	d00f      	beq.n	800b604 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	d00d      	beq.n	800b604 <osThreadNew+0x6c>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5e8:	9002      	str	r0, [sp, #8]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	0028      	movs	r0, r5
 800b5ee:	000b      	movs	r3, r1
 800b5f0:	9401      	str	r4, [sp, #4]
 800b5f2:	4661      	mov	r1, ip
 800b5f4:	f000 fd2e 	bl	800c054 <xTaskCreateStatic>
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800b5f8:	b007      	add	sp, #28
 800b5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5fc:	1e5a      	subs	r2, r3, #1
 800b5fe:	2a37      	cmp	r2, #55	; 0x37
 800b600:	d9dd      	bls.n	800b5be <osThreadNew+0x26>
 800b602:	e7f9      	b.n	800b5f8 <osThreadNew+0x60>
        return (NULL);
 800b604:	2000      	movs	r0, #0
 800b606:	e7f7      	b.n	800b5f8 <osThreadNew+0x60>
 800b608:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 800b60a:	2318      	movs	r3, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b60c:	a805      	add	r0, sp, #20
 800b60e:	9001      	str	r0, [sp, #4]
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	0028      	movs	r0, r5
 800b614:	000b      	movs	r3, r1
 800b616:	0021      	movs	r1, r4
 800b618:	f000 fd44 	bl	800c0a4 <xTaskCreate>
 800b61c:	0003      	movs	r3, r0
 800b61e:	2000      	movs	r0, #0
 800b620:	2b01      	cmp	r3, #1
 800b622:	d1e9      	bne.n	800b5f8 <osThreadNew+0x60>
  return ((osThreadId_t)hTask);
 800b624:	9805      	ldr	r0, [sp, #20]
 800b626:	e7e7      	b.n	800b5f8 <osThreadNew+0x60>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b628:	68e6      	ldr	r6, [r4, #12]
 800b62a:	2e00      	cmp	r6, #0
 800b62c:	d1e4      	bne.n	800b5f8 <osThreadNew+0x60>
 800b62e:	6924      	ldr	r4, [r4, #16]
 800b630:	2c00      	cmp	r4, #0
 800b632:	d1e1      	bne.n	800b5f8 <osThreadNew+0x60>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b634:	4664      	mov	r4, ip
 800b636:	b292      	uxth	r2, r2
 800b638:	e7e8      	b.n	800b60c <osThreadNew+0x74>
 800b63a:	46c0      	nop			; (mov r8, r8)

0800b63c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b63c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b63e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b642:	2b00      	cmp	r3, #0
 800b644:	d107      	bne.n	800b656 <osDelay+0x1a>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 800b646:	2400      	movs	r4, #0

    if (ticks != 0U) {
 800b648:	2800      	cmp	r0, #0
 800b64a:	d101      	bne.n	800b650 <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800b64c:	0020      	movs	r0, r4
 800b64e:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 800b650:	f000 ff00 	bl	800c454 <vTaskDelay>
 800b654:	e7fa      	b.n	800b64c <osDelay+0x10>
    stat = osErrorISR;
 800b656:	2406      	movs	r4, #6
 800b658:	4264      	negs	r4, r4
 800b65a:	e7f7      	b.n	800b64c <osDelay+0x10>

0800b65c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65e:	0014      	movs	r4, r2
 800b660:	b083      	sub	sp, #12
 800b662:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b666:	2d00      	cmp	r5, #0
 800b668:	d113      	bne.n	800b692 <osMessageQueueNew+0x36>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d011      	beq.n	800b692 <osMessageQueueNew+0x36>
 800b66e:	2900      	cmp	r1, #0
 800b670:	d00f      	beq.n	800b692 <osMessageQueueNew+0x36>
    mem = -1;

    if (attr != NULL) {
 800b672:	2a00      	cmp	r2, #0
 800b674:	d021      	beq.n	800b6ba <osMessageQueueNew+0x5e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b676:	6893      	ldr	r3, [r2, #8]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00e      	beq.n	800b69a <osMessageQueueNew+0x3e>
 800b67c:	68d2      	ldr	r2, [r2, #12]
 800b67e:	2a4f      	cmp	r2, #79	; 0x4f
 800b680:	d907      	bls.n	800b692 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b682:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b684:	2a00      	cmp	r2, #0
 800b686:	d004      	beq.n	800b692 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b688:	000e      	movs	r6, r1
 800b68a:	4346      	muls	r6, r0
 800b68c:	6967      	ldr	r7, [r4, #20]
 800b68e:	42b7      	cmp	r7, r6
 800b690:	d21d      	bcs.n	800b6ce <osMessageQueueNew+0x72>
  hQueue = NULL;
 800b692:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b694:	0028      	movs	r0, r5
 800b696:	b003      	add	sp, #12
 800b698:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b69a:	68d3      	ldr	r3, [r2, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f8      	bne.n	800b692 <osMessageQueueNew+0x36>
 800b6a0:	6913      	ldr	r3, [r2, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1f5      	bne.n	800b692 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b6a6:	6953      	ldr	r3, [r2, #20]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1f2      	bne.n	800b692 <osMessageQueueNew+0x36>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f000 f99b 	bl	800b9e8 <xQueueGenericCreate>
 800b6b2:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b6b4:	d0ed      	beq.n	800b692 <osMessageQueueNew+0x36>
        name = attr->name;
 800b6b6:	6824      	ldr	r4, [r4, #0]
 800b6b8:	e004      	b.n	800b6c4 <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f000 f994 	bl	800b9e8 <xQueueGenericCreate>
 800b6c0:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b6c2:	d0e6      	beq.n	800b692 <osMessageQueueNew+0x36>
      vQueueAddToRegistry (hQueue, name);
 800b6c4:	0021      	movs	r1, r4
 800b6c6:	0028      	movs	r0, r5
 800b6c8:	f000 fb28 	bl	800bd1c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b6cc:	e7e2      	b.n	800b694 <osMessageQueueNew+0x38>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b6ce:	9500      	str	r5, [sp, #0]
 800b6d0:	f000 f954 	bl	800b97c <xQueueGenericCreateStatic>
 800b6d4:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b6d6:	d0dc      	beq.n	800b692 <osMessageQueueNew+0x36>
        name = attr->name;
 800b6d8:	6824      	ldr	r4, [r4, #0]
 800b6da:	e7f3      	b.n	800b6c4 <osMessageQueueNew+0x68>

0800b6dc <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b6dc:	4b03      	ldr	r3, [pc, #12]	; (800b6ec <vApplicationGetIdleTaskMemory+0x10>)
 800b6de:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b6e0:	4b03      	ldr	r3, [pc, #12]	; (800b6f0 <vApplicationGetIdleTaskMemory+0x14>)
 800b6e2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b6e4:	2380      	movs	r3, #128	; 0x80
 800b6e6:	6013      	str	r3, [r2, #0]
}
 800b6e8:	4770      	bx	lr
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	20004f18 	.word	0x20004f18
 800b6f0:	20004d18 	.word	0x20004d18

0800b6f4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b6f4:	4b03      	ldr	r3, [pc, #12]	; (800b704 <vApplicationGetTimerTaskMemory+0x10>)
 800b6f6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b6f8:	4b03      	ldr	r3, [pc, #12]	; (800b708 <vApplicationGetTimerTaskMemory+0x14>)
 800b6fa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b6fc:	2380      	movs	r3, #128	; 0x80
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	6013      	str	r3, [r2, #0]
}
 800b702:	4770      	bx	lr
 800b704:	200053c4 	.word	0x200053c4
 800b708:	20004fc4 	.word	0x20004fc4

0800b70c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b70c:	0003      	movs	r3, r0
 800b70e:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b710:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b712:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b714:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b716:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b718:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b71a:	4252      	negs	r2, r2
 800b71c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b71e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b720:	4770      	bx	lr
 800b722:	46c0      	nop			; (mov r8, r8)

0800b724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b724:	2300      	movs	r3, #0
 800b726:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b728:	4770      	bx	lr
 800b72a:	46c0      	nop			; (mov r8, r8)

0800b72c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b72c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b72e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b730:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b732:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b734:	689a      	ldr	r2, [r3, #8]
 800b736:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b738:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b73a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b73c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b73e:	3301      	adds	r3, #1
 800b740:	6003      	str	r3, [r0, #0]
}
 800b742:	4770      	bx	lr

0800b744 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b744:	0003      	movs	r3, r0
{
 800b746:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b748:	680d      	ldr	r5, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b74a:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800b74c:	1c6a      	adds	r2, r5, #1
 800b74e:	d00d      	beq.n	800b76c <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b750:	001c      	movs	r4, r3
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	42aa      	cmp	r2, r5
 800b758:	d9fa      	bls.n	800b750 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b75a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b75c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b75e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800b760:	608c      	str	r4, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800b762:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800b764:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800b766:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b768:	6003      	str	r3, [r0, #0]
}
 800b76a:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800b76c:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800b76e:	6863      	ldr	r3, [r4, #4]
 800b770:	e7f3      	b.n	800b75a <vListInsert+0x16>
 800b772:	46c0      	nop			; (mov r8, r8)

0800b774 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b774:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b776:	6841      	ldr	r1, [r0, #4]
 800b778:	6882      	ldr	r2, [r0, #8]
 800b77a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b77c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b77e:	6859      	ldr	r1, [r3, #4]
 800b780:	4281      	cmp	r1, r0
 800b782:	d006      	beq.n	800b792 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b784:	2200      	movs	r2, #0
 800b786:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	3a01      	subs	r2, #1
 800b78c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b78e:	6818      	ldr	r0, [r3, #0]
}
 800b790:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b792:	605a      	str	r2, [r3, #4]
 800b794:	e7f6      	b.n	800b784 <uxListRemove+0x10>
 800b796:	46c0      	nop			; (mov r8, r8)

0800b798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b79c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b79e:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7a0:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b7a2:	2a00      	cmp	r2, #0
 800b7a4:	d106      	bne.n	800b7b4 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7a6:	6806      	ldr	r6, [r0, #0]
 800b7a8:	2e00      	cmp	r6, #0
 800b7aa:	d028      	beq.n	800b7fe <prvCopyDataToQueue+0x66>
 800b7ac:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800b7ae:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7b0:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b7b4:	2e00      	cmp	r6, #0
 800b7b6:	d10e      	bne.n	800b7d6 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7b8:	6840      	ldr	r0, [r0, #4]
 800b7ba:	f003 fcc5 	bl	800f148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7be:	6863      	ldr	r3, [r4, #4]
 800b7c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b7c2:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7c4:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7c6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d3ef      	bcc.n	800b7ac <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7cc:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800b7ce:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7d0:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7d2:	3501      	adds	r5, #1
 800b7d4:	e7ec      	b.n	800b7b0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b7d6:	68c0      	ldr	r0, [r0, #12]
 800b7d8:	f003 fcb6 	bl	800f148 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b7de:	68e3      	ldr	r3, [r4, #12]
 800b7e0:	4251      	negs	r1, r2
 800b7e2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7e4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7e6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d202      	bcs.n	800b7f2 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b7ec:	68a3      	ldr	r3, [r4, #8]
 800b7ee:	185b      	adds	r3, r3, r1
 800b7f0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b7f2:	2e02      	cmp	r6, #2
 800b7f4:	d1da      	bne.n	800b7ac <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7f6:	2d00      	cmp	r5, #0
 800b7f8:	d1d9      	bne.n	800b7ae <prvCopyDataToQueue+0x16>
 800b7fa:	3501      	adds	r5, #1
 800b7fc:	e7d7      	b.n	800b7ae <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7fe:	6880      	ldr	r0, [r0, #8]
 800b800:	f000 ff48 	bl	800c694 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b804:	3501      	adds	r5, #1
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b806:	60a6      	str	r6, [r4, #8]
 800b808:	e7d2      	b.n	800b7b0 <prvCopyDataToQueue+0x18>
 800b80a:	46c0      	nop			; (mov r8, r8)

0800b80c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	0005      	movs	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b810:	f001 f9c6 	bl	800cba0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b814:	2345      	movs	r3, #69	; 0x45
 800b816:	5cec      	ldrb	r4, [r5, r3]
 800b818:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b81a:	2c00      	cmp	r4, #0
 800b81c:	dd16      	ble.n	800b84c <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b81e:	002e      	movs	r6, r5
 800b820:	3624      	adds	r6, #36	; 0x24
 800b822:	e004      	b.n	800b82e <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b824:	3c01      	subs	r4, #1
 800b826:	b2e2      	uxtb	r2, r4
 800b828:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b82a:	2a00      	cmp	r2, #0
 800b82c:	d00e      	beq.n	800b84c <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b82e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b834:	0030      	movs	r0, r6
 800b836:	f000 fe91 	bl	800c55c <xTaskRemoveFromEventList>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d0f2      	beq.n	800b824 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800b83e:	3c01      	subs	r4, #1
 800b840:	f000 ff12 	bl	800c668 <vTaskMissedYield>
			--cTxLock;
 800b844:	b2e2      	uxtb	r2, r4
 800b846:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b848:	2a00      	cmp	r2, #0
 800b84a:	d1f0      	bne.n	800b82e <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b84c:	2345      	movs	r3, #69	; 0x45
 800b84e:	22ff      	movs	r2, #255	; 0xff
 800b850:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b852:	f001 f9b1 	bl	800cbb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b856:	f001 f9a3 	bl	800cba0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b85a:	2344      	movs	r3, #68	; 0x44
 800b85c:	5cec      	ldrb	r4, [r5, r3]
 800b85e:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b860:	2c00      	cmp	r4, #0
 800b862:	dd16      	ble.n	800b892 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b864:	002e      	movs	r6, r5
 800b866:	3610      	adds	r6, #16
 800b868:	e004      	b.n	800b874 <prvUnlockQueue+0x68>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b86a:	3c01      	subs	r4, #1
 800b86c:	b2e2      	uxtb	r2, r4
 800b86e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b870:	2a00      	cmp	r2, #0
 800b872:	d00e      	beq.n	800b892 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b874:	692b      	ldr	r3, [r5, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00b      	beq.n	800b892 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b87a:	0030      	movs	r0, r6
 800b87c:	f000 fe6e 	bl	800c55c <xTaskRemoveFromEventList>
 800b880:	2800      	cmp	r0, #0
 800b882:	d0f2      	beq.n	800b86a <prvUnlockQueue+0x5e>
					vTaskMissedYield();
 800b884:	3c01      	subs	r4, #1
 800b886:	f000 feef 	bl	800c668 <vTaskMissedYield>
				--cRxLock;
 800b88a:	b2e2      	uxtb	r2, r4
 800b88c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b88e:	2a00      	cmp	r2, #0
 800b890:	d1f0      	bne.n	800b874 <prvUnlockQueue+0x68>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b892:	2344      	movs	r3, #68	; 0x44
 800b894:	22ff      	movs	r2, #255	; 0xff
 800b896:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b898:	f001 f98e 	bl	800cbb8 <vPortExitCritical>
}
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	46c0      	nop			; (mov r8, r8)

0800b8a0 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	0006      	movs	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a4:	0008      	movs	r0, r1
 800b8a6:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b8a8:	3050      	adds	r0, #80	; 0x50
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b8aa:	000d      	movs	r5, r1
 800b8ac:	0017      	movs	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b8ae:	f001 fa3f 	bl	800cd30 <pvPortMalloc>
 800b8b2:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 800b8b4:	d027      	beq.n	800b906 <xQueueGenericCreate.part.0+0x66>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b8b6:	2346      	movs	r3, #70	; 0x46
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	54c2      	strb	r2, [r0, r3]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b8bc:	0003      	movs	r3, r0
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	d123      	bne.n	800b90a <xQueueGenericCreate.part.0+0x6a>
 800b8c2:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800b8c4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b8c6:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800b8c8:	f001 f96a 	bl	800cba0 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b8ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8d0:	6821      	ldr	r1, [r4, #0]
 800b8d2:	4353      	muls	r3, r2
 800b8d4:	18c8      	adds	r0, r1, r3
 800b8d6:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8d8:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8da:	1a9b      	subs	r3, r3, r2
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8dc:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8de:	2244      	movs	r2, #68	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8e0:	18c9      	adds	r1, r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
 800b8e2:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8e4:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8e6:	0020      	movs	r0, r4
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8e8:	60e1      	str	r1, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8ea:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b8ec:	3201      	adds	r2, #1
 800b8ee:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8f0:	3010      	adds	r0, #16
 800b8f2:	f7ff ff0b 	bl	800b70c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8f6:	0020      	movs	r0, r4
 800b8f8:	3024      	adds	r0, #36	; 0x24
 800b8fa:	f7ff ff07 	bl	800b70c <vListInitialise>
	taskEXIT_CRITICAL();
 800b8fe:	f001 f95b 	bl	800cbb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800b902:	234c      	movs	r3, #76	; 0x4c
 800b904:	54e7      	strb	r7, [r4, r3]
	}
 800b906:	0020      	movs	r0, r4
 800b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b90a:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b90c:	e7d9      	b.n	800b8c2 <xQueueGenericCreate.part.0+0x22>
 800b90e:	46c0      	nop			; (mov r8, r8)

0800b910 <xQueueGenericReset>:
{
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	0004      	movs	r4, r0
 800b914:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800b916:	2800      	cmp	r0, #0
 800b918:	d01b      	beq.n	800b952 <xQueueGenericReset+0x42>
	taskENTER_CRITICAL();
 800b91a:	f001 f941 	bl	800cba0 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b91e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	434b      	muls	r3, r1
 800b926:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b928:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b92a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b92c:	18d2      	adds	r2, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b92e:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b930:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b932:	23ff      	movs	r3, #255	; 0xff
 800b934:	2244      	movs	r2, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b936:	2000      	movs	r0, #0
 800b938:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b93a:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b93c:	3201      	adds	r2, #1
 800b93e:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 800b940:	2d00      	cmp	r5, #0
 800b942:	d108      	bne.n	800b956 <xQueueGenericReset+0x46>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b944:	6923      	ldr	r3, [r4, #16]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10e      	bne.n	800b968 <xQueueGenericReset+0x58>
	taskEXIT_CRITICAL();
 800b94a:	f001 f935 	bl	800cbb8 <vPortExitCritical>
}
 800b94e:	2001      	movs	r0, #1
 800b950:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800b952:	b672      	cpsid	i
 800b954:	e7fe      	b.n	800b954 <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b956:	0020      	movs	r0, r4
 800b958:	3010      	adds	r0, #16
 800b95a:	f7ff fed7 	bl	800b70c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b95e:	0020      	movs	r0, r4
 800b960:	3024      	adds	r0, #36	; 0x24
 800b962:	f7ff fed3 	bl	800b70c <vListInitialise>
 800b966:	e7f0      	b.n	800b94a <xQueueGenericReset+0x3a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b968:	0020      	movs	r0, r4
 800b96a:	3010      	adds	r0, #16
 800b96c:	f000 fdf6 	bl	800c55c <xTaskRemoveFromEventList>
 800b970:	2800      	cmp	r0, #0
 800b972:	d0ea      	beq.n	800b94a <xQueueGenericReset+0x3a>
					queueYIELD_IF_USING_PREEMPTION();
 800b974:	f001 f908 	bl	800cb88 <vPortYield>
 800b978:	e7e7      	b.n	800b94a <xQueueGenericReset+0x3a>
 800b97a:	46c0      	nop			; (mov r8, r8)

0800b97c <xQueueGenericCreateStatic>:
	{
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	ac06      	add	r4, sp, #24
 800b982:	001d      	movs	r5, r3
 800b984:	7824      	ldrb	r4, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b986:	2800      	cmp	r0, #0
 800b988:	d101      	bne.n	800b98e <xQueueGenericCreateStatic+0x12>
 800b98a:	b672      	cpsid	i
 800b98c:	e7fe      	b.n	800b98c <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00a      	beq.n	800b9a8 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b992:	2a00      	cmp	r2, #0
 800b994:	d00c      	beq.n	800b9b0 <xQueueGenericCreateStatic+0x34>
 800b996:	2900      	cmp	r1, #0
 800b998:	d008      	beq.n	800b9ac <xQueueGenericCreateStatic+0x30>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b99a:	2350      	movs	r3, #80	; 0x50
 800b99c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	2b50      	cmp	r3, #80	; 0x50
 800b9a2:	d00f      	beq.n	800b9c4 <xQueueGenericCreateStatic+0x48>
 800b9a4:	b672      	cpsid	i
 800b9a6:	e7fe      	b.n	800b9a6 <xQueueGenericCreateStatic+0x2a>
		configASSERT( pxStaticQueue != NULL );
 800b9a8:	b672      	cpsid	i
 800b9aa:	e7fe      	b.n	800b9aa <xQueueGenericCreateStatic+0x2e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9ac:	b672      	cpsid	i
 800b9ae:	e7fe      	b.n	800b9ae <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9b0:	2900      	cmp	r1, #0
 800b9b2:	d117      	bne.n	800b9e4 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9b4:	2350      	movs	r3, #80	; 0x50
 800b9b6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	2b50      	cmp	r3, #80	; 0x50
 800b9bc:	d1f2      	bne.n	800b9a4 <xQueueGenericCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9be:	002a      	movs	r2, r5
 800b9c0:	9b01      	ldr	r3, [sp, #4]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9c2:	e000      	b.n	800b9c6 <xQueueGenericCreateStatic+0x4a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9c4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9c6:	2346      	movs	r3, #70	; 0x46
 800b9c8:	2601      	movs	r6, #1
 800b9ca:	54ee      	strb	r6, [r5, r3]
	pxNewQueue->uxLength = uxQueueLength;
 800b9cc:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9ce:	6429      	str	r1, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9d0:	0028      	movs	r0, r5
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	602a      	str	r2, [r5, #0]
 800b9d6:	f7ff ff9b 	bl	800b910 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b9da:	234c      	movs	r3, #76	; 0x4c
	}
 800b9dc:	0028      	movs	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 800b9de:	54ec      	strb	r4, [r5, r3]
	}
 800b9e0:	b002      	add	sp, #8
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9e4:	b672      	cpsid	i
 800b9e6:	e7fe      	b.n	800b9e6 <xQueueGenericCreateStatic+0x6a>

0800b9e8 <xQueueGenericCreate>:
	{
 800b9e8:	b510      	push	{r4, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d101      	bne.n	800b9f2 <xQueueGenericCreate+0xa>
 800b9ee:	b672      	cpsid	i
 800b9f0:	e7fe      	b.n	800b9f0 <xQueueGenericCreate+0x8>
 800b9f2:	f7ff ff55 	bl	800b8a0 <xQueueGenericCreate.part.0>
	}
 800b9f6:	bd10      	pop	{r4, pc}

0800b9f8 <xQueueGenericSend>:
{
 800b9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9fa:	46ce      	mov	lr, r9
 800b9fc:	4647      	mov	r7, r8
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b085      	sub	sp, #20
 800ba02:	0004      	movs	r4, r0
 800ba04:	4689      	mov	r9, r1
 800ba06:	001d      	movs	r5, r3
 800ba08:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d04c      	beq.n	800baa8 <xQueueGenericSend+0xb0>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	d045      	beq.n	800ba9e <xQueueGenericSend+0xa6>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba12:	2d02      	cmp	r5, #2
 800ba14:	d104      	bne.n	800ba20 <xQueueGenericSend+0x28>
 800ba16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d001      	beq.n	800ba20 <xQueueGenericSend+0x28>
 800ba1c:	b672      	cpsid	i
 800ba1e:	e7fe      	b.n	800ba1e <xQueueGenericSend+0x26>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba20:	f000 fe28 	bl	800c674 <xTaskGetSchedulerState>
 800ba24:	1e06      	subs	r6, r0, #0
 800ba26:	d041      	beq.n	800baac <xQueueGenericSend+0xb4>
 800ba28:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2744      	movs	r7, #68	; 0x44
 800ba2e:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800ba30:	f001 f8b6 	bl	800cba0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ba36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d352      	bcc.n	800bae2 <xQueueGenericSend+0xea>
 800ba3c:	2d02      	cmp	r5, #2
 800ba3e:	d050      	beq.n	800bae2 <xQueueGenericSend+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d05f      	beq.n	800bb06 <xQueueGenericSend+0x10e>
				else if( xEntryTimeSet == pdFALSE )
 800ba46:	2e00      	cmp	r6, #0
 800ba48:	d047      	beq.n	800bada <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 800ba4a:	f001 f8b5 	bl	800cbb8 <vPortExitCritical>
		vTaskSuspendAll();
 800ba4e:	f000 fb9d 	bl	800c18c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba52:	f001 f8a5 	bl	800cba0 <vPortEnterCritical>
 800ba56:	5de3      	ldrb	r3, [r4, r7]
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	d101      	bne.n	800ba62 <xQueueGenericSend+0x6a>
 800ba5e:	4643      	mov	r3, r8
 800ba60:	55e3      	strb	r3, [r4, r7]
 800ba62:	2345      	movs	r3, #69	; 0x45
 800ba64:	5ce2      	ldrb	r2, [r4, r3]
 800ba66:	b252      	sxtb	r2, r2
 800ba68:	3201      	adds	r2, #1
 800ba6a:	d101      	bne.n	800ba70 <xQueueGenericSend+0x78>
 800ba6c:	4642      	mov	r2, r8
 800ba6e:	54e2      	strb	r2, [r4, r3]
 800ba70:	f001 f8a2 	bl	800cbb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba74:	a901      	add	r1, sp, #4
 800ba76:	a802      	add	r0, sp, #8
 800ba78:	f000 fdbc 	bl	800c5f4 <xTaskCheckForTimeOut>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d146      	bne.n	800bb0e <xQueueGenericSend+0x116>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba80:	f001 f88e 	bl	800cba0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ba86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d014      	beq.n	800bab6 <xQueueGenericSend+0xbe>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ba8c:	f001 f894 	bl	800cbb8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ba90:	0020      	movs	r0, r4
 800ba92:	f7ff febb 	bl	800b80c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba96:	f000 fcd1 	bl	800c43c <xTaskResumeAll>
 800ba9a:	2601      	movs	r6, #1
 800ba9c:	e7c8      	b.n	800ba30 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0b6      	beq.n	800ba12 <xQueueGenericSend+0x1a>
 800baa4:	b672      	cpsid	i
 800baa6:	e7fe      	b.n	800baa6 <xQueueGenericSend+0xae>
	configASSERT( pxQueue );
 800baa8:	b672      	cpsid	i
 800baaa:	e7fe      	b.n	800baaa <xQueueGenericSend+0xb2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baac:	9b01      	ldr	r3, [sp, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0bb      	beq.n	800ba2a <xQueueGenericSend+0x32>
 800bab2:	b672      	cpsid	i
 800bab4:	e7fe      	b.n	800bab4 <xQueueGenericSend+0xbc>
	taskEXIT_CRITICAL();
 800bab6:	f001 f87f 	bl	800cbb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800baba:	0020      	movs	r0, r4
 800babc:	9901      	ldr	r1, [sp, #4]
 800babe:	3010      	adds	r0, #16
 800bac0:	f000 fd22 	bl	800c508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bac4:	0020      	movs	r0, r4
 800bac6:	f7ff fea1 	bl	800b80c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800baca:	f000 fcb7 	bl	800c43c <xTaskResumeAll>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d1e3      	bne.n	800ba9a <xQueueGenericSend+0xa2>
					portYIELD_WITHIN_API();
 800bad2:	f001 f859 	bl	800cb88 <vPortYield>
 800bad6:	2601      	movs	r6, #1
 800bad8:	e7aa      	b.n	800ba30 <xQueueGenericSend+0x38>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bada:	a802      	add	r0, sp, #8
 800badc:	f000 fd7e 	bl	800c5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bae0:	e7b3      	b.n	800ba4a <xQueueGenericSend+0x52>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bae2:	002a      	movs	r2, r5
 800bae4:	4649      	mov	r1, r9
 800bae6:	0020      	movs	r0, r4
 800bae8:	f7ff fe56 	bl	800b798 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d117      	bne.n	800bb22 <xQueueGenericSend+0x12a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d112      	bne.n	800bb1c <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800baf6:	f001 f85f 	bl	800cbb8 <vPortExitCritical>
				return pdPASS;
 800bafa:	2001      	movs	r0, #1
}
 800bafc:	b005      	add	sp, #20
 800bafe:	bcc0      	pop	{r6, r7}
 800bb00:	46b9      	mov	r9, r7
 800bb02:	46b0      	mov	r8, r6
 800bb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800bb06:	f001 f857 	bl	800cbb8 <vPortExitCritical>
					return errQUEUE_FULL;
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	e7f6      	b.n	800bafc <xQueueGenericSend+0x104>
			prvUnlockQueue( pxQueue );
 800bb0e:	0020      	movs	r0, r4
 800bb10:	f7ff fe7c 	bl	800b80c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb14:	f000 fc92 	bl	800c43c <xTaskResumeAll>
			return errQUEUE_FULL;
 800bb18:	2000      	movs	r0, #0
 800bb1a:	e7ef      	b.n	800bafc <xQueueGenericSend+0x104>
							queueYIELD_IF_USING_PREEMPTION();
 800bb1c:	f001 f834 	bl	800cb88 <vPortYield>
 800bb20:	e7e9      	b.n	800baf6 <xQueueGenericSend+0xfe>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb22:	0020      	movs	r0, r4
 800bb24:	3024      	adds	r0, #36	; 0x24
 800bb26:	f000 fd19 	bl	800c55c <xTaskRemoveFromEventList>
 800bb2a:	e7e2      	b.n	800baf2 <xQueueGenericSend+0xfa>

0800bb2c <xQueueGenericSendFromISR>:
{
 800bb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb2e:	464f      	mov	r7, r9
 800bb30:	4646      	mov	r6, r8
 800bb32:	46d6      	mov	lr, sl
 800bb34:	0004      	movs	r4, r0
 800bb36:	b5c0      	push	{r6, r7, lr}
 800bb38:	001d      	movs	r5, r3
 800bb3a:	000f      	movs	r7, r1
 800bb3c:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d037      	beq.n	800bbb2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb42:	2900      	cmp	r1, #0
 800bb44:	d017      	beq.n	800bb76 <xQueueGenericSendFromISR+0x4a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb46:	2d02      	cmp	r5, #2
 800bb48:	d104      	bne.n	800bb54 <xQueueGenericSendFromISR+0x28>
 800bb4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d017      	beq.n	800bb80 <xQueueGenericSendFromISR+0x54>
 800bb50:	b672      	cpsid	i
 800bb52:	e7fe      	b.n	800bb52 <xQueueGenericSendFromISR+0x26>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb54:	f001 f83e 	bl	800cbd4 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bb5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb5c:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d312      	bcc.n	800bb88 <xQueueGenericSendFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800bb62:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800bb64:	4640      	mov	r0, r8
 800bb66:	f001 f839 	bl	800cbdc <vClearInterruptMaskFromISR>
}
 800bb6a:	0028      	movs	r0, r5
 800bb6c:	bce0      	pop	{r5, r6, r7}
 800bb6e:	46ba      	mov	sl, r7
 800bb70:	46b1      	mov	r9, r6
 800bb72:	46a8      	mov	r8, r5
 800bb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d0e4      	beq.n	800bb46 <xQueueGenericSendFromISR+0x1a>
 800bb7c:	b672      	cpsid	i
 800bb7e:	e7fe      	b.n	800bb7e <xQueueGenericSendFromISR+0x52>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb80:	f001 f828 	bl	800cbd4 <ulSetInterruptMaskFromISR>
 800bb84:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb88:	2345      	movs	r3, #69	; 0x45
 800bb8a:	469a      	mov	sl, r3
 800bb8c:	5ce3      	ldrb	r3, [r4, r3]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb8e:	002a      	movs	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb90:	b25b      	sxtb	r3, r3
 800bb92:	4699      	mov	r9, r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb94:	0039      	movs	r1, r7
 800bb96:	0020      	movs	r0, r4
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb9a:	f7ff fdfd 	bl	800b798 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800bb9e:	464b      	mov	r3, r9
 800bba0:	3301      	adds	r3, #1
 800bba2:	d008      	beq.n	800bbb6 <xQueueGenericSendFromISR+0x8a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bba4:	464b      	mov	r3, r9
 800bba6:	4652      	mov	r2, sl
 800bba8:	3301      	adds	r3, #1
 800bbaa:	b25b      	sxtb	r3, r3
			xReturn = pdPASS;
 800bbac:	2501      	movs	r5, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbae:	54a3      	strb	r3, [r4, r2]
 800bbb0:	e7d8      	b.n	800bb64 <xQueueGenericSendFromISR+0x38>
	configASSERT( pxQueue );
 800bbb2:	b672      	cpsid	i
 800bbb4:	e7fe      	b.n	800bbb4 <xQueueGenericSendFromISR+0x88>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800bbb8:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0d2      	beq.n	800bb64 <xQueueGenericSendFromISR+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbbe:	0020      	movs	r0, r4
 800bbc0:	3024      	adds	r0, #36	; 0x24
 800bbc2:	f000 fccb 	bl	800c55c <xTaskRemoveFromEventList>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d0cc      	beq.n	800bb64 <xQueueGenericSendFromISR+0x38>
							if( pxHigherPriorityTaskWoken != NULL )
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	d0ca      	beq.n	800bb64 <xQueueGenericSendFromISR+0x38>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbce:	6035      	str	r5, [r6, #0]
 800bbd0:	e7c8      	b.n	800bb64 <xQueueGenericSendFromISR+0x38>
 800bbd2:	46c0      	nop			; (mov r8, r8)

0800bbd4 <xQueueReceive>:
{
 800bbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbd6:	46ce      	mov	lr, r9
 800bbd8:	4647      	mov	r7, r8
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b085      	sub	sp, #20
 800bbde:	0004      	movs	r4, r0
 800bbe0:	000d      	movs	r5, r1
 800bbe2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d100      	bne.n	800bbea <xQueueReceive+0x16>
 800bbe8:	e074      	b.n	800bcd4 <xQueueReceive+0x100>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbea:	2900      	cmp	r1, #0
 800bbec:	d04a      	beq.n	800bc84 <xQueueReceive+0xb0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbee:	f000 fd41 	bl	800c674 <xTaskGetSchedulerState>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d04b      	beq.n	800bc8e <xQueueReceive+0xba>
		taskENTER_CRITICAL();
 800bbf6:	f000 ffd3 	bl	800cba0 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bbfc:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d16a      	bne.n	800bcd8 <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc02:	9b01      	ldr	r3, [sp, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d035      	beq.n	800bc74 <xQueueReceive+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc08:	a802      	add	r0, sp, #8
 800bc0a:	f000 fce7 	bl	800c5dc <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 800bc0e:	2300      	movs	r3, #0
 800bc10:	2744      	movs	r7, #68	; 0x44
 800bc12:	4698      	mov	r8, r3
 800bc14:	2645      	movs	r6, #69	; 0x45
		taskEXIT_CRITICAL();
 800bc16:	f000 ffcf 	bl	800cbb8 <vPortExitCritical>
		vTaskSuspendAll();
 800bc1a:	f000 fab7 	bl	800c18c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc1e:	f000 ffbf 	bl	800cba0 <vPortEnterCritical>
 800bc22:	5de3      	ldrb	r3, [r4, r7]
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	3301      	adds	r3, #1
 800bc28:	d101      	bne.n	800bc2e <xQueueReceive+0x5a>
 800bc2a:	4643      	mov	r3, r8
 800bc2c:	55e3      	strb	r3, [r4, r7]
 800bc2e:	5da3      	ldrb	r3, [r4, r6]
 800bc30:	b25b      	sxtb	r3, r3
 800bc32:	3301      	adds	r3, #1
 800bc34:	d101      	bne.n	800bc3a <xQueueReceive+0x66>
 800bc36:	4643      	mov	r3, r8
 800bc38:	55a3      	strb	r3, [r4, r6]
 800bc3a:	f000 ffbd 	bl	800cbb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc3e:	a901      	add	r1, sp, #4
 800bc40:	a802      	add	r0, sp, #8
 800bc42:	f000 fcd7 	bl	800c5f4 <xTaskCheckForTimeOut>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d126      	bne.n	800bc98 <xQueueReceive+0xc4>
	taskENTER_CRITICAL();
 800bc4a:	f000 ffa9 	bl	800cba0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d02e      	beq.n	800bcb2 <xQueueReceive+0xde>
	taskEXIT_CRITICAL();
 800bc54:	f000 ffb0 	bl	800cbb8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bc58:	0020      	movs	r0, r4
 800bc5a:	f7ff fdd7 	bl	800b80c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc5e:	f000 fbed 	bl	800c43c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800bc62:	f000 ff9d 	bl	800cba0 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc68:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d134      	bne.n	800bcd8 <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc6e:	9b01      	ldr	r3, [sp, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1d0      	bne.n	800bc16 <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 800bc74:	f000 ffa0 	bl	800cbb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bc78:	2000      	movs	r0, #0
}
 800bc7a:	b005      	add	sp, #20
 800bc7c:	bcc0      	pop	{r6, r7}
 800bc7e:	46b9      	mov	r9, r7
 800bc80:	46b0      	mov	r8, r6
 800bc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0b1      	beq.n	800bbee <xQueueReceive+0x1a>
 800bc8a:	b672      	cpsid	i
 800bc8c:	e7fe      	b.n	800bc8c <xQueueReceive+0xb8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d0b0      	beq.n	800bbf6 <xQueueReceive+0x22>
 800bc94:	b672      	cpsid	i
 800bc96:	e7fe      	b.n	800bc96 <xQueueReceive+0xc2>
			prvUnlockQueue( pxQueue );
 800bc98:	0020      	movs	r0, r4
 800bc9a:	f7ff fdb7 	bl	800b80c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc9e:	f000 fbcd 	bl	800c43c <xTaskResumeAll>
	taskENTER_CRITICAL();
 800bca2:	f000 ff7d 	bl	800cba0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bca6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0e3      	beq.n	800bc74 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 800bcac:	f000 ff84 	bl	800cbb8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800bcb0:	e7d7      	b.n	800bc62 <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 800bcb2:	f000 ff81 	bl	800cbb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcb6:	0020      	movs	r0, r4
 800bcb8:	9901      	ldr	r1, [sp, #4]
 800bcba:	3024      	adds	r0, #36	; 0x24
 800bcbc:	f000 fc24 	bl	800c508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcc0:	0020      	movs	r0, r4
 800bcc2:	f7ff fda3 	bl	800b80c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcc6:	f000 fbb9 	bl	800c43c <xTaskResumeAll>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d1c9      	bne.n	800bc62 <xQueueReceive+0x8e>
					portYIELD_WITHIN_API();
 800bcce:	f000 ff5b 	bl	800cb88 <vPortYield>
		taskENTER_CRITICAL();
 800bcd2:	e7c6      	b.n	800bc62 <xQueueReceive+0x8e>
	configASSERT( ( pxQueue ) );
 800bcd4:	b672      	cpsid	i
 800bcd6:	e7fe      	b.n	800bcd6 <xQueueReceive+0x102>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bcd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	d00a      	beq.n	800bcf4 <xQueueReceive+0x120>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcde:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bce0:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bce2:	1889      	adds	r1, r1, r2
 800bce4:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bce6:	4299      	cmp	r1, r3
 800bce8:	d301      	bcc.n	800bcee <xQueueReceive+0x11a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bcea:	6821      	ldr	r1, [r4, #0]
 800bcec:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcee:	0028      	movs	r0, r5
 800bcf0:	f003 fa2a 	bl	800f148 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcf4:	464b      	mov	r3, r9
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcfa:	6923      	ldr	r3, [r4, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d103      	bne.n	800bd08 <xQueueReceive+0x134>
				taskEXIT_CRITICAL();
 800bd00:	f000 ff5a 	bl	800cbb8 <vPortExitCritical>
				return pdPASS;
 800bd04:	2001      	movs	r0, #1
 800bd06:	e7b8      	b.n	800bc7a <xQueueReceive+0xa6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd08:	0020      	movs	r0, r4
 800bd0a:	3010      	adds	r0, #16
 800bd0c:	f000 fc26 	bl	800c55c <xTaskRemoveFromEventList>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0f5      	beq.n	800bd00 <xQueueReceive+0x12c>
						queueYIELD_IF_USING_PREEMPTION();
 800bd14:	f000 ff38 	bl	800cb88 <vPortYield>
 800bd18:	e7f2      	b.n	800bd00 <xQueueReceive+0x12c>
 800bd1a:	46c0      	nop			; (mov r8, r8)

0800bd1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd1c:	b530      	push	{r4, r5, lr}
 800bd1e:	4d08      	ldr	r5, [pc, #32]	; (800bd40 <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd20:	2300      	movs	r3, #0
 800bd22:	002a      	movs	r2, r5
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd24:	6814      	ldr	r4, [r2, #0]
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	d004      	beq.n	800bd34 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	3208      	adds	r2, #8
 800bd2e:	2b08      	cmp	r3, #8
 800bd30:	d1f8      	bne.n	800bd24 <vQueueAddToRegistry+0x8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd32:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	50e9      	str	r1, [r5, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd38:	18ed      	adds	r5, r5, r3
 800bd3a:	6068      	str	r0, [r5, #4]
				break;
 800bd3c:	e7f9      	b.n	800bd32 <vQueueAddToRegistry+0x16>
 800bd3e:	46c0      	nop			; (mov r8, r8)
 800bd40:	2000546c 	.word	0x2000546c

0800bd44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	0004      	movs	r4, r0
 800bd48:	0016      	movs	r6, r2
 800bd4a:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd4c:	f000 ff28 	bl	800cba0 <vPortEnterCritical>
 800bd50:	2244      	movs	r2, #68	; 0x44
 800bd52:	5ca3      	ldrb	r3, [r4, r2]
 800bd54:	b25b      	sxtb	r3, r3
 800bd56:	3301      	adds	r3, #1
 800bd58:	d101      	bne.n	800bd5e <vQueueWaitForMessageRestricted+0x1a>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	54a3      	strb	r3, [r4, r2]
 800bd5e:	2245      	movs	r2, #69	; 0x45
 800bd60:	5ca3      	ldrb	r3, [r4, r2]
 800bd62:	b25b      	sxtb	r3, r3
 800bd64:	3301      	adds	r3, #1
 800bd66:	d101      	bne.n	800bd6c <vQueueWaitForMessageRestricted+0x28>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	54a3      	strb	r3, [r4, r2]
 800bd6c:	f000 ff24 	bl	800cbb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd76:	0020      	movs	r0, r4
 800bd78:	f7ff fd48 	bl	800b80c <prvUnlockQueue>
	}
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd7e:	0020      	movs	r0, r4
 800bd80:	0032      	movs	r2, r6
 800bd82:	0029      	movs	r1, r5
 800bd84:	3024      	adds	r0, #36	; 0x24
 800bd86:	f000 fbd1 	bl	800c52c <vTaskPlaceOnEventListRestricted>
 800bd8a:	e7f4      	b.n	800bd76 <vQueueWaitForMessageRestricted+0x32>

0800bd8c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8e:	46c6      	mov	lr, r8
 800bd90:	b500      	push	{lr}
 800bd92:	0005      	movs	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd94:	f000 ff04 	bl	800cba0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd98:	4a32      	ldr	r2, [pc, #200]	; (800be64 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 800bd9a:	4f33      	ldr	r7, [pc, #204]	; (800be68 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800bd9c:	6813      	ldr	r3, [r2, #0]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d02b      	beq.n	800be00 <prvAddNewTaskToReadyList+0x74>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bda8:	4c30      	ldr	r4, [pc, #192]	; (800be6c <prvAddNewTaskToReadyList+0xe0>)
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d01f      	beq.n	800bdf0 <prvAddNewTaskToReadyList+0x64>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdb0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800bdb2:	4e2f      	ldr	r6, [pc, #188]	; (800be70 <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bdb4:	492f      	ldr	r1, [pc, #188]	; (800be74 <prvAddNewTaskToReadyList+0xe8>)
 800bdb6:	680b      	ldr	r3, [r1, #0]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	600b      	str	r3, [r1, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bdbc:	646b      	str	r3, [r5, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bdbe:	4b2e      	ldr	r3, [pc, #184]	; (800be78 <prvAddNewTaskToReadyList+0xec>)
 800bdc0:	6819      	ldr	r1, [r3, #0]
 800bdc2:	4291      	cmp	r1, r2
 800bdc4:	d200      	bcs.n	800bdc8 <prvAddNewTaskToReadyList+0x3c>
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	0093      	lsls	r3, r2, #2
 800bdca:	189b      	adds	r3, r3, r2
 800bdcc:	0098      	lsls	r0, r3, #2
 800bdce:	1d29      	adds	r1, r5, #4
 800bdd0:	1830      	adds	r0, r6, r0
 800bdd2:	f7ff fcab 	bl	800b72c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bdd6:	f000 feef 	bl	800cbb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d004      	beq.n	800bdea <prvAddNewTaskToReadyList+0x5e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d312      	bcc.n	800be10 <prvAddNewTaskToReadyList+0x84>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdea:	bc80      	pop	{r7}
 800bdec:	46b8      	mov	r8, r7
 800bdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d800      	bhi.n	800bdfc <prvAddNewTaskToReadyList+0x70>
					pxCurrentTCB = pxNewTCB;
 800bdfa:	603d      	str	r5, [r7, #0]
 800bdfc:	4e1c      	ldr	r6, [pc, #112]	; (800be70 <prvAddNewTaskToReadyList+0xe4>)
 800bdfe:	e7d9      	b.n	800bdb4 <prvAddNewTaskToReadyList+0x28>
			pxCurrentTCB = pxNewTCB;
 800be00:	603d      	str	r5, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be02:	6813      	ldr	r3, [r2, #0]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d006      	beq.n	800be16 <prvAddNewTaskToReadyList+0x8a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be08:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800be0a:	4e19      	ldr	r6, [pc, #100]	; (800be70 <prvAddNewTaskToReadyList+0xe4>)
 800be0c:	4c17      	ldr	r4, [pc, #92]	; (800be6c <prvAddNewTaskToReadyList+0xe0>)
 800be0e:	e7d1      	b.n	800bdb4 <prvAddNewTaskToReadyList+0x28>
			taskYIELD_IF_USING_PREEMPTION();
 800be10:	f000 feba 	bl	800cb88 <vPortYield>
}
 800be14:	e7e9      	b.n	800bdea <prvAddNewTaskToReadyList+0x5e>
 800be16:	238c      	movs	r3, #140	; 0x8c
 800be18:	4e15      	ldr	r6, [pc, #84]	; (800be70 <prvAddNewTaskToReadyList+0xe4>)
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	4698      	mov	r8, r3
 800be1e:	0034      	movs	r4, r6
 800be20:	44b0      	add	r8, r6
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be22:	0020      	movs	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be24:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be26:	f7ff fc71 	bl	800b70c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be2a:	45a0      	cmp	r8, r4
 800be2c:	d1f9      	bne.n	800be22 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be2e:	4b13      	ldr	r3, [pc, #76]	; (800be7c <prvAddNewTaskToReadyList+0xf0>)
 800be30:	4698      	mov	r8, r3
 800be32:	0018      	movs	r0, r3
 800be34:	f7ff fc6a 	bl	800b70c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be38:	4c11      	ldr	r4, [pc, #68]	; (800be80 <prvAddNewTaskToReadyList+0xf4>)
 800be3a:	0020      	movs	r0, r4
 800be3c:	f7ff fc66 	bl	800b70c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be40:	4810      	ldr	r0, [pc, #64]	; (800be84 <prvAddNewTaskToReadyList+0xf8>)
 800be42:	f7ff fc63 	bl	800b70c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be46:	4810      	ldr	r0, [pc, #64]	; (800be88 <prvAddNewTaskToReadyList+0xfc>)
 800be48:	f7ff fc60 	bl	800b70c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be4c:	480f      	ldr	r0, [pc, #60]	; (800be8c <prvAddNewTaskToReadyList+0x100>)
 800be4e:	f7ff fc5d 	bl	800b70c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be52:	4642      	mov	r2, r8
 800be54:	4b0e      	ldr	r3, [pc, #56]	; (800be90 <prvAddNewTaskToReadyList+0x104>)
 800be56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be58:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <prvAddNewTaskToReadyList+0x108>)
		prvAddTaskToReadyList( pxNewTCB );
 800be5a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be5c:	601c      	str	r4, [r3, #0]
 800be5e:	4c03      	ldr	r4, [pc, #12]	; (800be6c <prvAddNewTaskToReadyList+0xe0>)
}
 800be60:	e7a8      	b.n	800bdb4 <prvAddNewTaskToReadyList+0x28>
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	20005918 	.word	0x20005918
 800be68:	200054ac 	.word	0x200054ac
 800be6c:	20005974 	.word	0x20005974
 800be70:	200054b8 	.word	0x200054b8
 800be74:	20005924 	.word	0x20005924
 800be78:	20005928 	.word	0x20005928
 800be7c:	2000592c 	.word	0x2000592c
 800be80:	20005940 	.word	0x20005940
 800be84:	20005960 	.word	0x20005960
 800be88:	2000598c 	.word	0x2000598c
 800be8c:	20005978 	.word	0x20005978
 800be90:	200054b0 	.word	0x200054b0
 800be94:	200054b4 	.word	0x200054b4

0800be98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	0006      	movs	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be9c:	4b14      	ldr	r3, [pc, #80]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be9e:	4c15      	ldr	r4, [pc, #84]	; (800bef4 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800bea0:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea2:	6820      	ldr	r0, [r4, #0]
{
 800bea4:	000d      	movs	r5, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea6:	3004      	adds	r0, #4
 800bea8:	f7ff fc64 	bl	800b774 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beac:	1c73      	adds	r3, r6, #1
 800beae:	d017      	beq.n	800bee0 <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800beb0:	6823      	ldr	r3, [r4, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800beb2:	19be      	adds	r6, r7, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800beb4:	605e      	str	r6, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800beb6:	42b7      	cmp	r7, r6
 800beb8:	d80b      	bhi.n	800bed2 <prvAddCurrentTaskToDelayedList+0x3a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beba:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <prvAddCurrentTaskToDelayedList+0x60>)
 800bebc:	6818      	ldr	r0, [r3, #0]
 800bebe:	6821      	ldr	r1, [r4, #0]
 800bec0:	3104      	adds	r1, #4
 800bec2:	f7ff fc3f 	bl	800b744 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800bec6:	4b0d      	ldr	r3, [pc, #52]	; (800befc <prvAddCurrentTaskToDelayedList+0x64>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	42b2      	cmp	r2, r6
 800becc:	d900      	bls.n	800bed0 <prvAddCurrentTaskToDelayedList+0x38>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800bece:	601e      	str	r6, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bed2:	4b0b      	ldr	r3, [pc, #44]	; (800bf00 <prvAddCurrentTaskToDelayedList+0x68>)
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	6821      	ldr	r1, [r4, #0]
 800bed8:	3104      	adds	r1, #4
 800beda:	f7ff fc33 	bl	800b744 <vListInsert>
 800bede:	e7f7      	b.n	800bed0 <prvAddCurrentTaskToDelayedList+0x38>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bee0:	2d00      	cmp	r5, #0
 800bee2:	d0e5      	beq.n	800beb0 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bee4:	6821      	ldr	r1, [r4, #0]
 800bee6:	4807      	ldr	r0, [pc, #28]	; (800bf04 <prvAddCurrentTaskToDelayedList+0x6c>)
 800bee8:	3104      	adds	r1, #4
 800beea:	f7ff fc1f 	bl	800b72c <vListInsertEnd>
 800beee:	e7ef      	b.n	800bed0 <prvAddCurrentTaskToDelayedList+0x38>
 800bef0:	200059a0 	.word	0x200059a0
 800bef4:	200054ac 	.word	0x200054ac
 800bef8:	200054b0 	.word	0x200054b0
 800befc:	20005954 	.word	0x20005954
 800bf00:	200054b4 	.word	0x200054b4
 800bf04:	20005978 	.word	0x20005978

0800bf08 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0a:	46d6      	mov	lr, sl
 800bf0c:	464f      	mov	r7, r9
 800bf0e:	4646      	mov	r6, r8
 800bf10:	b5c0      	push	{r6, r7, lr}
 800bf12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf14:	0094      	lsls	r4, r2, #2
 800bf16:	0022      	movs	r2, r4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bf18:	4681      	mov	r9, r0
 800bf1a:	000f      	movs	r7, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf1c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800bf1e:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bf20:	469a      	mov	sl, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf22:	f002 ff3f 	bl	800eda4 <memset>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf26:	2207      	movs	r2, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bf2a:	3c04      	subs	r4, #4
 800bf2c:	191b      	adds	r3, r3, r4
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf2e:	4393      	bics	r3, r2
 800bf30:	4698      	mov	r8, r3
	if( pcName != NULL )
 800bf32:	2f00      	cmp	r7, #0
 800bf34:	d040      	beq.n	800bfb8 <prvInitialiseNewTask.constprop.0+0xb0>
 800bf36:	002b      	movs	r3, r5
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf38:	2400      	movs	r4, #0
 800bf3a:	3334      	adds	r3, #52	; 0x34
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf3c:	5d3e      	ldrb	r6, [r7, r4]
 800bf3e:	551e      	strb	r6, [r3, r4]
			if( pcName[ x ] == ( char ) 0x00 )
 800bf40:	2e00      	cmp	r6, #0
 800bf42:	d002      	beq.n	800bf4a <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf44:	3401      	adds	r4, #1
 800bf46:	2c10      	cmp	r4, #16
 800bf48:	d1f8      	bne.n	800bf3c <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf4a:	2343      	movs	r3, #67	; 0x43
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf50:	9c08      	ldr	r4, [sp, #32]
 800bf52:	2c37      	cmp	r4, #55	; 0x37
 800bf54:	d900      	bls.n	800bf58 <prvInitialiseNewTask.constprop.0+0x50>
 800bf56:	2437      	movs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800bf58:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf5a:	1d28      	adds	r0, r5, #4
	pxNewTCB->uxPriority = uxPriority;
 800bf5c:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800bf5e:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf60:	652e      	str	r6, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf62:	f7ff fbdf 	bl	800b724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf66:	0028      	movs	r0, r5
 800bf68:	3018      	adds	r0, #24
 800bf6a:	f7ff fbdb 	bl	800b724 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf6e:	2338      	movs	r3, #56	; 0x38
 800bf70:	1b1b      	subs	r3, r3, r4
 800bf72:	61ab      	str	r3, [r5, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800bf74:	23a0      	movs	r3, #160	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf76:	0028      	movs	r0, r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf78:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf7a:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800bf7c:	50ee      	str	r6, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf7e:	3304      	adds	r3, #4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf80:	224c      	movs	r2, #76	; 0x4c
 800bf82:	2100      	movs	r1, #0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf84:	54ee      	strb	r6, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf86:	3054      	adds	r0, #84	; 0x54
 800bf88:	f002 ff0c 	bl	800eda4 <memset>
 800bf8c:	4b0c      	ldr	r3, [pc, #48]	; (800bfc0 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf8e:	4649      	mov	r1, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf90:	001a      	movs	r2, r3
 800bf92:	65ab      	str	r3, [r5, #88]	; 0x58
 800bf94:	3268      	adds	r2, #104	; 0x68
 800bf96:	33d0      	adds	r3, #208	; 0xd0
 800bf98:	65ea      	str	r2, [r5, #92]	; 0x5c
 800bf9a:	662b      	str	r3, [r5, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf9c:	4652      	mov	r2, sl
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	f000 fde0 	bl	800cb64 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800bfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfa6:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d000      	beq.n	800bfae <prvInitialiseNewTask.constprop.0+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfac:	601d      	str	r5, [r3, #0]
}
 800bfae:	bce0      	pop	{r5, r6, r7}
 800bfb0:	46ba      	mov	sl, r7
 800bfb2:	46b1      	mov	r9, r6
 800bfb4:	46a8      	mov	r8, r5
 800bfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfb8:	2334      	movs	r3, #52	; 0x34
 800bfba:	54ef      	strb	r7, [r5, r3]
 800bfbc:	e7c8      	b.n	800bf50 <prvInitialiseNewTask.constprop.0+0x48>
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	200066fc 	.word	0x200066fc

0800bfc4 <prvIdleTask>:
{
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	4647      	mov	r7, r8
 800bfc8:	46ce      	mov	lr, r9
 800bfca:	4b1e      	ldr	r3, [pc, #120]	; (800c044 <prvIdleTask+0x80>)
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	4698      	mov	r8, r3
 800bfd0:	4b1d      	ldr	r3, [pc, #116]	; (800c048 <prvIdleTask+0x84>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfd2:	27a5      	movs	r7, #165	; 0xa5
 800bfd4:	4699      	mov	r9, r3
 800bfd6:	4d1d      	ldr	r5, [pc, #116]	; (800c04c <prvIdleTask+0x88>)
 800bfd8:	4e1d      	ldr	r6, [pc, #116]	; (800c050 <prvIdleTask+0x8c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfda:	682b      	ldr	r3, [r5, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d025      	beq.n	800c02c <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 800bfe0:	f000 fdde 	bl	800cba0 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe4:	4643      	mov	r3, r8
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfea:	1d20      	adds	r0, r4, #4
 800bfec:	f7ff fbc2 	bl	800b774 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bff0:	6833      	ldr	r3, [r6, #0]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800bffc:	f000 fddc 	bl	800cbb8 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c000:	0020      	movs	r0, r4
 800c002:	3054      	adds	r0, #84	; 0x54
 800c004:	f002 ffb4 	bl	800ef70 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c008:	5de3      	ldrb	r3, [r4, r7]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d005      	beq.n	800c01a <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d013      	beq.n	800c03a <prvIdleTask+0x76>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c012:	2b02      	cmp	r3, #2
 800c014:	d0e1      	beq.n	800bfda <prvIdleTask+0x16>
 800c016:	b672      	cpsid	i
 800c018:	e7fe      	b.n	800c018 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 800c01a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c01c:	f000 ff1c 	bl	800ce58 <vPortFree>
				vPortFree( pxTCB );
 800c020:	0020      	movs	r0, r4
 800c022:	f000 ff19 	bl	800ce58 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c026:	682b      	ldr	r3, [r5, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1d9      	bne.n	800bfe0 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c02c:	464b      	mov	r3, r9
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d9d2      	bls.n	800bfda <prvIdleTask+0x16>
				taskYIELD();
 800c034:	f000 fda8 	bl	800cb88 <vPortYield>
 800c038:	e7cf      	b.n	800bfda <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800c03a:	0020      	movs	r0, r4
 800c03c:	f000 ff0c 	bl	800ce58 <vPortFree>
 800c040:	e7cb      	b.n	800bfda <prvIdleTask+0x16>
 800c042:	46c0      	nop			; (mov r8, r8)
 800c044:	2000598c 	.word	0x2000598c
 800c048:	200054b8 	.word	0x200054b8
 800c04c:	2000591c 	.word	0x2000591c
 800c050:	20005918 	.word	0x20005918

0800c054 <xTaskCreateStatic>:
	{
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800c058:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c05a:	2c00      	cmp	r4, #0
 800c05c:	d00b      	beq.n	800c076 <xTaskCreateStatic+0x22>
		configASSERT( pxTaskBuffer != NULL );
 800c05e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c060:	2c00      	cmp	r4, #0
 800c062:	d006      	beq.n	800c072 <xTaskCreateStatic+0x1e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c064:	24a8      	movs	r4, #168	; 0xa8
 800c066:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c068:	9c05      	ldr	r4, [sp, #20]
 800c06a:	2ca8      	cmp	r4, #168	; 0xa8
 800c06c:	d005      	beq.n	800c07a <xTaskCreateStatic+0x26>
 800c06e:	b672      	cpsid	i
 800c070:	e7fe      	b.n	800c070 <xTaskCreateStatic+0x1c>
		configASSERT( pxTaskBuffer != NULL );
 800c072:	b672      	cpsid	i
 800c074:	e7fe      	b.n	800c074 <xTaskCreateStatic+0x20>
		configASSERT( puxStackBuffer != NULL );
 800c076:	b672      	cpsid	i
 800c078:	e7fe      	b.n	800c078 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c07a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c07c:	9c05      	ldr	r4, [sp, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c07e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c080:	9e0c      	ldr	r6, [sp, #48]	; 0x30
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c082:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c084:	24a5      	movs	r4, #165	; 0xa5
 800c086:	2502      	movs	r5, #2
 800c088:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c08a:	ac04      	add	r4, sp, #16
 800c08c:	9401      	str	r4, [sp, #4]
 800c08e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c090:	9602      	str	r6, [sp, #8]
 800c092:	9400      	str	r4, [sp, #0]
 800c094:	f7ff ff38 	bl	800bf08 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c098:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c09a:	f7ff fe77 	bl	800bd8c <prvAddNewTaskToReadyList>
		return xReturn;
 800c09e:	9804      	ldr	r0, [sp, #16]
	}
 800c0a0:	b006      	add	sp, #24
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}

0800c0a4 <xTaskCreate>:
	{
 800c0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0a6:	46ce      	mov	lr, r9
 800c0a8:	4647      	mov	r7, r8
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	0007      	movs	r7, r0
 800c0ae:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0b0:	0090      	lsls	r0, r2, #2
	{
 800c0b2:	4688      	mov	r8, r1
 800c0b4:	0015      	movs	r5, r2
 800c0b6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0b8:	f000 fe3a 	bl	800cd30 <pvPortMalloc>
 800c0bc:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 800c0be:	d01c      	beq.n	800c0fa <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0c0:	20a8      	movs	r0, #168	; 0xa8
 800c0c2:	f000 fe35 	bl	800cd30 <pvPortMalloc>
 800c0c6:	1e06      	subs	r6, r0, #0
				if( pxNewTCB != NULL )
 800c0c8:	d01a      	beq.n	800c100 <xTaskCreate+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0ca:	23a5      	movs	r3, #165	; 0xa5
 800c0cc:	2200      	movs	r2, #0
					pxNewTCB->pxStack = pxStack;
 800c0ce:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0d0:	54c2      	strb	r2, [r0, r3]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0d4:	002a      	movs	r2, r5
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0da:	4641      	mov	r1, r8
 800c0dc:	9002      	str	r0, [sp, #8]
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	0038      	movs	r0, r7
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	f7ff ff10 	bl	800bf08 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0e8:	0030      	movs	r0, r6
 800c0ea:	f7ff fe4f 	bl	800bd8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0ee:	2001      	movs	r0, #1
	}
 800c0f0:	b005      	add	sp, #20
 800c0f2:	bcc0      	pop	{r6, r7}
 800c0f4:	46b9      	mov	r9, r7
 800c0f6:	46b0      	mov	r8, r6
 800c0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	4240      	negs	r0, r0
		return xReturn;
 800c0fe:	e7f7      	b.n	800c0f0 <xTaskCreate+0x4c>
					vPortFree( pxStack );
 800c100:	0020      	movs	r0, r4
 800c102:	f000 fea9 	bl	800ce58 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c106:	2001      	movs	r0, #1
 800c108:	4240      	negs	r0, r0
 800c10a:	e7f1      	b.n	800c0f0 <xTaskCreate+0x4c>

0800c10c <vTaskStartScheduler>:
{
 800c10c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c10e:	2400      	movs	r4, #0
{
 800c110:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c112:	aa07      	add	r2, sp, #28
 800c114:	a906      	add	r1, sp, #24
 800c116:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c118:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c11a:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c11c:	f7ff fade 	bl	800b6dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c120:	9b05      	ldr	r3, [sp, #20]
 800c122:	9a07      	ldr	r2, [sp, #28]
 800c124:	9302      	str	r3, [sp, #8]
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	4911      	ldr	r1, [pc, #68]	; (800c170 <vTaskStartScheduler+0x64>)
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	4811      	ldr	r0, [pc, #68]	; (800c174 <vTaskStartScheduler+0x68>)
 800c12e:	2300      	movs	r3, #0
 800c130:	9400      	str	r4, [sp, #0]
 800c132:	f7ff ff8f 	bl	800c054 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c136:	2800      	cmp	r0, #0
 800c138:	d013      	beq.n	800c162 <vTaskStartScheduler+0x56>
			xReturn = xTimerCreateTimerTask();
 800c13a:	f000 fb17 	bl	800c76c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c13e:	2801      	cmp	r0, #1
 800c140:	d111      	bne.n	800c166 <vTaskStartScheduler+0x5a>
		portDISABLE_INTERRUPTS();
 800c142:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <vTaskStartScheduler+0x6c>)
 800c146:	4a0d      	ldr	r2, [pc, #52]	; (800c17c <vTaskStartScheduler+0x70>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3354      	adds	r3, #84	; 0x54
 800c14c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800c14e:	2201      	movs	r2, #1
 800c150:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <vTaskStartScheduler+0x74>)
 800c152:	4252      	negs	r2, r2
 800c154:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <vTaskStartScheduler+0x78>)
 800c158:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c15a:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <vTaskStartScheduler+0x7c>)
 800c15c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800c15e:	f000 fd95 	bl	800cc8c <xPortStartScheduler>
}
 800c162:	b008      	add	sp, #32
 800c164:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c166:	3001      	adds	r0, #1
 800c168:	d1fb      	bne.n	800c162 <vTaskStartScheduler+0x56>
 800c16a:	b672      	cpsid	i
 800c16c:	e7fe      	b.n	800c16c <vTaskStartScheduler+0x60>
 800c16e:	46c0      	nop			; (mov r8, r8)
 800c170:	08013b58 	.word	0x08013b58
 800c174:	0800bfc5 	.word	0x0800bfc5
 800c178:	200054ac 	.word	0x200054ac
 800c17c:	200002f0 	.word	0x200002f0
 800c180:	20005954 	.word	0x20005954
 800c184:	20005974 	.word	0x20005974
 800c188:	200059a0 	.word	0x200059a0

0800c18c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c18c:	4a02      	ldr	r2, [pc, #8]	; (800c198 <vTaskSuspendAll+0xc>)
 800c18e:	6813      	ldr	r3, [r2, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	6013      	str	r3, [r2, #0]
}
 800c194:	4770      	bx	lr
 800c196:	46c0      	nop			; (mov r8, r8)
 800c198:	20005920 	.word	0x20005920

0800c19c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c19c:	4b01      	ldr	r3, [pc, #4]	; (800c1a4 <xTaskGetTickCount+0x8>)
 800c19e:	6818      	ldr	r0, [r3, #0]
}
 800c1a0:	4770      	bx	lr
 800c1a2:	46c0      	nop			; (mov r8, r8)
 800c1a4:	200059a0 	.word	0x200059a0

0800c1a8 <xTaskIncrementTick>:
{
 800c1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1aa:	46de      	mov	lr, fp
 800c1ac:	4657      	mov	r7, sl
 800c1ae:	464e      	mov	r6, r9
 800c1b0:	4645      	mov	r5, r8
 800c1b2:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1b4:	4b51      	ldr	r3, [pc, #324]	; (800c2fc <xTaskIncrementTick+0x154>)
{
 800c1b6:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d148      	bne.n	800c250 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1be:	4b50      	ldr	r3, [pc, #320]	; (800c300 <xTaskIncrementTick+0x158>)
 800c1c0:	681d      	ldr	r5, [r3, #0]
 800c1c2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800c1c4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1c6:	2d00      	cmp	r5, #0
 800c1c8:	d050      	beq.n	800c26c <xTaskIncrementTick+0xc4>
 800c1ca:	4b4e      	ldr	r3, [pc, #312]	; (800c304 <xTaskIncrementTick+0x15c>)
 800c1cc:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1ce:	9b01      	ldr	r3, [sp, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	429d      	cmp	r5, r3
 800c1d4:	d351      	bcc.n	800c27a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1d6:	4f4c      	ldr	r7, [pc, #304]	; (800c308 <xTaskIncrementTick+0x160>)
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d100      	bne.n	800c1e2 <xTaskIncrementTick+0x3a>
 800c1e0:	e078      	b.n	800c2d4 <xTaskIncrementTick+0x12c>
BaseType_t xSwitchRequired = pdFALSE;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4698      	mov	r8, r3
 800c1e6:	4b49      	ldr	r3, [pc, #292]	; (800c30c <xTaskIncrementTick+0x164>)
 800c1e8:	469a      	mov	sl, r3
 800c1ea:	4b49      	ldr	r3, [pc, #292]	; (800c310 <xTaskIncrementTick+0x168>)
 800c1ec:	469b      	mov	fp, r3
					prvAddTaskToReadyList( pxTCB );
 800c1ee:	4b49      	ldr	r3, [pc, #292]	; (800c314 <xTaskIncrementTick+0x16c>)
 800c1f0:	4699      	mov	r9, r3
 800c1f2:	e024      	b.n	800c23e <xTaskIncrementTick+0x96>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1f4:	1d26      	adds	r6, r4, #4
 800c1f6:	0030      	movs	r0, r6
 800c1f8:	f7ff fabc 	bl	800b774 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <xTaskIncrementTick+0x62>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c202:	0020      	movs	r0, r4
 800c204:	3018      	adds	r0, #24
 800c206:	f7ff fab5 	bl	800b774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c20a:	464a      	mov	r2, r9
 800c20c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c20e:	6812      	ldr	r2, [r2, #0]
 800c210:	4293      	cmp	r3, r2
 800c212:	d901      	bls.n	800c218 <xTaskIncrementTick+0x70>
 800c214:	464a      	mov	r2, r9
 800c216:	6013      	str	r3, [r2, #0]
 800c218:	0098      	lsls	r0, r3, #2
 800c21a:	18c0      	adds	r0, r0, r3
 800c21c:	0080      	lsls	r0, r0, #2
 800c21e:	0031      	movs	r1, r6
 800c220:	4450      	add	r0, sl
 800c222:	f7ff fa83 	bl	800b72c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c226:	465b      	mov	r3, fp
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22e:	429a      	cmp	r2, r3
 800c230:	d301      	bcc.n	800c236 <xTaskIncrementTick+0x8e>
							xSwitchRequired = pdTRUE;
 800c232:	2301      	movs	r3, #1
 800c234:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d050      	beq.n	800c2e0 <xTaskIncrementTick+0x138>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c244:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800c246:	429d      	cmp	r5, r3
 800c248:	d2d4      	bcs.n	800c1f4 <xTaskIncrementTick+0x4c>
						xNextTaskUnblockTime = xItemValue;
 800c24a:	9a01      	ldr	r2, [sp, #4]
 800c24c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c24e:	e01a      	b.n	800c286 <xTaskIncrementTick+0xde>
		++xPendedTicks;
 800c250:	4a31      	ldr	r2, [pc, #196]	; (800c318 <xTaskIncrementTick+0x170>)
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	3301      	adds	r3, #1
 800c256:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800c258:	2300      	movs	r3, #0
 800c25a:	4698      	mov	r8, r3
}
 800c25c:	4640      	mov	r0, r8
 800c25e:	b003      	add	sp, #12
 800c260:	bcf0      	pop	{r4, r5, r6, r7}
 800c262:	46bb      	mov	fp, r7
 800c264:	46b2      	mov	sl, r6
 800c266:	46a9      	mov	r9, r5
 800c268:	46a0      	mov	r8, r4
 800c26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			taskSWITCH_DELAYED_LISTS();
 800c26c:	4b26      	ldr	r3, [pc, #152]	; (800c308 <xTaskIncrementTick+0x160>)
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	6812      	ldr	r2, [r2, #0]
 800c272:	2a00      	cmp	r2, #0
 800c274:	d01a      	beq.n	800c2ac <xTaskIncrementTick+0x104>
 800c276:	b672      	cpsid	i
 800c278:	e7fe      	b.n	800c278 <xTaskIncrementTick+0xd0>
BaseType_t xSwitchRequired = pdFALSE;
 800c27a:	2300      	movs	r3, #0
 800c27c:	4698      	mov	r8, r3
 800c27e:	4b23      	ldr	r3, [pc, #140]	; (800c30c <xTaskIncrementTick+0x164>)
 800c280:	469a      	mov	sl, r3
 800c282:	4b23      	ldr	r3, [pc, #140]	; (800c310 <xTaskIncrementTick+0x168>)
 800c284:	469b      	mov	fp, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c286:	465b      	mov	r3, fp
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28c:	0093      	lsls	r3, r2, #2
 800c28e:	189b      	adds	r3, r3, r2
 800c290:	4652      	mov	r2, sl
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	58d3      	ldr	r3, [r2, r3]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d901      	bls.n	800c29e <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 800c29a:	2301      	movs	r3, #1
 800c29c:	4698      	mov	r8, r3
			if( xYieldPending != pdFALSE )
 800c29e:	4b1f      	ldr	r3, [pc, #124]	; (800c31c <xTaskIncrementTick+0x174>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d0da      	beq.n	800c25c <xTaskIncrementTick+0xb4>
				xSwitchRequired = pdTRUE;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4698      	mov	r8, r3
 800c2aa:	e7d7      	b.n	800c25c <xTaskIncrementTick+0xb4>
			taskSWITCH_DELAYED_LISTS();
 800c2ac:	4a1c      	ldr	r2, [pc, #112]	; (800c320 <xTaskIncrementTick+0x178>)
 800c2ae:	6819      	ldr	r1, [r3, #0]
 800c2b0:	6810      	ldr	r0, [r2, #0]
 800c2b2:	6018      	str	r0, [r3, #0]
 800c2b4:	6011      	str	r1, [r2, #0]
 800c2b6:	491b      	ldr	r1, [pc, #108]	; (800c324 <xTaskIncrementTick+0x17c>)
 800c2b8:	680a      	ldr	r2, [r1, #0]
 800c2ba:	3201      	adds	r2, #1
 800c2bc:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	6812      	ldr	r2, [r2, #0]
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	d111      	bne.n	800c2ea <xTaskIncrementTick+0x142>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2c6:	4b0f      	ldr	r3, [pc, #60]	; (800c304 <xTaskIncrementTick+0x15c>)
 800c2c8:	001a      	movs	r2, r3
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	425b      	negs	r3, r3
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	e77c      	b.n	800c1ce <xTaskIncrementTick+0x26>
BaseType_t xSwitchRequired = pdFALSE;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4698      	mov	r8, r3
 800c2d8:	4b0c      	ldr	r3, [pc, #48]	; (800c30c <xTaskIncrementTick+0x164>)
 800c2da:	469a      	mov	sl, r3
 800c2dc:	4b0c      	ldr	r3, [pc, #48]	; (800c310 <xTaskIncrementTick+0x168>)
 800c2de:	469b      	mov	fp, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	9a01      	ldr	r2, [sp, #4]
 800c2e4:	425b      	negs	r3, r3
 800c2e6:	6013      	str	r3, [r2, #0]
					break;
 800c2e8:	e7cd      	b.n	800c286 <xTaskIncrementTick+0xde>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ea:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2ec:	4a05      	ldr	r2, [pc, #20]	; (800c304 <xTaskIncrementTick+0x15c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ee:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2f0:	9201      	str	r2, [sp, #4]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	6013      	str	r3, [r2, #0]
}
 800c2f8:	e769      	b.n	800c1ce <xTaskIncrementTick+0x26>
 800c2fa:	46c0      	nop			; (mov r8, r8)
 800c2fc:	20005920 	.word	0x20005920
 800c300:	200059a0 	.word	0x200059a0
 800c304:	20005954 	.word	0x20005954
 800c308:	200054b0 	.word	0x200054b0
 800c30c:	200054b8 	.word	0x200054b8
 800c310:	200054ac 	.word	0x200054ac
 800c314:	20005928 	.word	0x20005928
 800c318:	2000595c 	.word	0x2000595c
 800c31c:	200059a4 	.word	0x200059a4
 800c320:	200054b4 	.word	0x200054b4
 800c324:	20005958 	.word	0x20005958

0800c328 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32a:	46de      	mov	lr, fp
 800c32c:	4657      	mov	r7, sl
 800c32e:	464e      	mov	r6, r9
 800c330:	4645      	mov	r5, r8
 800c332:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 800c334:	f000 fc34 	bl	800cba0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c338:	4b36      	ldr	r3, [pc, #216]	; (800c414 <xTaskResumeAll.part.0+0xec>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	3a01      	subs	r2, #1
 800c33e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d154      	bne.n	800c3f0 <xTaskResumeAll.part.0+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c346:	4b34      	ldr	r3, [pc, #208]	; (800c418 <xTaskResumeAll.part.0+0xf0>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d050      	beq.n	800c3f0 <xTaskResumeAll.part.0+0xc8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c34e:	4e33      	ldr	r6, [pc, #204]	; (800c41c <xTaskResumeAll.part.0+0xf4>)
 800c350:	6833      	ldr	r3, [r6, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d05a      	beq.n	800c40c <xTaskResumeAll.part.0+0xe4>
 800c356:	4b32      	ldr	r3, [pc, #200]	; (800c420 <xTaskResumeAll.part.0+0xf8>)
 800c358:	4f32      	ldr	r7, [pc, #200]	; (800c424 <xTaskResumeAll.part.0+0xfc>)
 800c35a:	4699      	mov	r9, r3
 800c35c:	4b32      	ldr	r3, [pc, #200]	; (800c428 <xTaskResumeAll.part.0+0x100>)
 800c35e:	4698      	mov	r8, r3
 800c360:	4b32      	ldr	r3, [pc, #200]	; (800c42c <xTaskResumeAll.part.0+0x104>)
 800c362:	469a      	mov	sl, r3
						xYieldPending = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	469b      	mov	fp, r3
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c368:	68f3      	ldr	r3, [r6, #12]
 800c36a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c36c:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c36e:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c370:	3018      	adds	r0, #24
 800c372:	f7ff f9ff 	bl	800b774 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c376:	0028      	movs	r0, r5
 800c378:	f7ff f9fc 	bl	800b774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c37c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	4293      	cmp	r3, r2
 800c382:	d900      	bls.n	800c386 <xTaskResumeAll.part.0+0x5e>
 800c384:	603b      	str	r3, [r7, #0]
 800c386:	0098      	lsls	r0, r3, #2
 800c388:	18c0      	adds	r0, r0, r3
 800c38a:	0080      	lsls	r0, r0, #2
 800c38c:	0029      	movs	r1, r5
 800c38e:	4448      	add	r0, r9
 800c390:	f7ff f9cc 	bl	800b72c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c394:	4643      	mov	r3, r8
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d302      	bcc.n	800c3a6 <xTaskResumeAll.part.0+0x7e>
						xYieldPending = pdTRUE;
 800c3a0:	4653      	mov	r3, sl
 800c3a2:	465a      	mov	r2, fp
 800c3a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3a6:	6833      	ldr	r3, [r6, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1dd      	bne.n	800c368 <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3ac:	4b20      	ldr	r3, [pc, #128]	; (800c430 <xTaskResumeAll.part.0+0x108>)
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	6812      	ldr	r2, [r2, #0]
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	d026      	beq.n	800c404 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	4b1d      	ldr	r3, [pc, #116]	; (800c434 <xTaskResumeAll.part.0+0x10c>)
 800c3c0:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c3c2:	4e1d      	ldr	r6, [pc, #116]	; (800c438 <xTaskResumeAll.part.0+0x110>)
 800c3c4:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c3c6:	2c00      	cmp	r4, #0
 800c3c8:	d00a      	beq.n	800c3e0 <xTaskResumeAll.part.0+0xb8>
								xYieldPending = pdTRUE;
 800c3ca:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c3cc:	f7ff feec 	bl	800c1a8 <xTaskIncrementTick>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d001      	beq.n	800c3d8 <xTaskResumeAll.part.0+0xb0>
								xYieldPending = pdTRUE;
 800c3d4:	4653      	mov	r3, sl
 800c3d6:	601d      	str	r5, [r3, #0]
							--xPendedCounts;
 800c3d8:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c3da:	2c00      	cmp	r4, #0
 800c3dc:	d1f6      	bne.n	800c3cc <xTaskResumeAll.part.0+0xa4>
						xPendedTicks = 0;
 800c3de:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800c3e0:	4653      	mov	r3, sl
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <xTaskResumeAll.part.0+0xc8>
					taskYIELD_IF_USING_PREEMPTION();
 800c3e8:	f000 fbce 	bl	800cb88 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800c3ec:	2401      	movs	r4, #1
 800c3ee:	e000      	b.n	800c3f2 <xTaskResumeAll.part.0+0xca>
BaseType_t xAlreadyYielded = pdFALSE;
 800c3f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c3f2:	f000 fbe1 	bl	800cbb8 <vPortExitCritical>
}
 800c3f6:	0020      	movs	r0, r4
 800c3f8:	bcf0      	pop	{r4, r5, r6, r7}
 800c3fa:	46bb      	mov	fp, r7
 800c3fc:	46b2      	mov	sl, r6
 800c3fe:	46a9      	mov	r9, r5
 800c400:	46a0      	mov	r8, r4
 800c402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800c404:	4b0b      	ldr	r3, [pc, #44]	; (800c434 <xTaskResumeAll.part.0+0x10c>)
 800c406:	3a01      	subs	r2, #1
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	e7da      	b.n	800c3c2 <xTaskResumeAll.part.0+0x9a>
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <xTaskResumeAll.part.0+0x104>)
 800c40e:	469a      	mov	sl, r3
 800c410:	e7d7      	b.n	800c3c2 <xTaskResumeAll.part.0+0x9a>
 800c412:	46c0      	nop			; (mov r8, r8)
 800c414:	20005920 	.word	0x20005920
 800c418:	20005918 	.word	0x20005918
 800c41c:	20005960 	.word	0x20005960
 800c420:	200054b8 	.word	0x200054b8
 800c424:	20005928 	.word	0x20005928
 800c428:	200054ac 	.word	0x200054ac
 800c42c:	200059a4 	.word	0x200059a4
 800c430:	200054b0 	.word	0x200054b0
 800c434:	20005954 	.word	0x20005954
 800c438:	2000595c 	.word	0x2000595c

0800c43c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800c43c:	4b04      	ldr	r3, [pc, #16]	; (800c450 <xTaskResumeAll+0x14>)
{
 800c43e:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <xTaskResumeAll+0xe>
 800c446:	b672      	cpsid	i
 800c448:	e7fe      	b.n	800c448 <xTaskResumeAll+0xc>
 800c44a:	f7ff ff6d 	bl	800c328 <xTaskResumeAll.part.0>
}
 800c44e:	bd10      	pop	{r4, pc}
 800c450:	20005920 	.word	0x20005920

0800c454 <vTaskDelay>:
	{
 800c454:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c456:	2800      	cmp	r0, #0
 800c458:	d014      	beq.n	800c484 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 800c45a:	4c0c      	ldr	r4, [pc, #48]	; (800c48c <vTaskDelay+0x38>)
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <vTaskDelay+0x12>
 800c462:	b672      	cpsid	i
 800c464:	e7fe      	b.n	800c464 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	3301      	adds	r3, #1
 800c46a:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c46c:	2100      	movs	r1, #0
 800c46e:	f7ff fd13 	bl	800be98 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d101      	bne.n	800c47c <vTaskDelay+0x28>
 800c478:	b672      	cpsid	i
 800c47a:	e7fe      	b.n	800c47a <vTaskDelay+0x26>
 800c47c:	f7ff ff54 	bl	800c328 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800c480:	2800      	cmp	r0, #0
 800c482:	d101      	bne.n	800c488 <vTaskDelay+0x34>
			portYIELD_WITHIN_API();
 800c484:	f000 fb80 	bl	800cb88 <vPortYield>
	}
 800c488:	bd10      	pop	{r4, pc}
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	20005920 	.word	0x20005920

0800c490 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c490:	4b17      	ldr	r3, [pc, #92]	; (800c4f0 <vTaskSwitchContext+0x60>)
{
 800c492:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800c49a:	2201      	movs	r2, #1
 800c49c:	4b15      	ldr	r3, [pc, #84]	; (800c4f4 <vTaskSwitchContext+0x64>)
 800c49e:	601a      	str	r2, [r3, #0]
}
 800c4a0:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 800c4a2:	4a14      	ldr	r2, [pc, #80]	; (800c4f4 <vTaskSwitchContext+0x64>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4a4:	4c14      	ldr	r4, [pc, #80]	; (800c4f8 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800c4a6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	4814      	ldr	r0, [pc, #80]	; (800c4fc <vTaskSwitchContext+0x6c>)
 800c4ac:	e002      	b.n	800c4b4 <vTaskSwitchContext+0x24>
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d019      	beq.n	800c4e6 <vTaskSwitchContext+0x56>
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	0099      	lsls	r1, r3, #2
 800c4b6:	18ca      	adds	r2, r1, r3
 800c4b8:	0092      	lsls	r2, r2, #2
 800c4ba:	5882      	ldr	r2, [r0, r2]
 800c4bc:	2a00      	cmp	r2, #0
 800c4be:	d0f6      	beq.n	800c4ae <vTaskSwitchContext+0x1e>
 800c4c0:	18c9      	adds	r1, r1, r3
 800c4c2:	0089      	lsls	r1, r1, #2
 800c4c4:	1845      	adds	r5, r0, r1
 800c4c6:	686a      	ldr	r2, [r5, #4]
 800c4c8:	3108      	adds	r1, #8
 800c4ca:	6852      	ldr	r2, [r2, #4]
 800c4cc:	1840      	adds	r0, r0, r1
 800c4ce:	606a      	str	r2, [r5, #4]
 800c4d0:	4282      	cmp	r2, r0
 800c4d2:	d00a      	beq.n	800c4ea <vTaskSwitchContext+0x5a>
 800c4d4:	68d1      	ldr	r1, [r2, #12]
 800c4d6:	4a0a      	ldr	r2, [pc, #40]	; (800c500 <vTaskSwitchContext+0x70>)
 800c4d8:	6011      	str	r1, [r2, #0]
 800c4da:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c4dc:	6813      	ldr	r3, [r2, #0]
 800c4de:	4a09      	ldr	r2, [pc, #36]	; (800c504 <vTaskSwitchContext+0x74>)
 800c4e0:	3354      	adds	r3, #84	; 0x54
 800c4e2:	6013      	str	r3, [r2, #0]
}
 800c4e4:	e7dc      	b.n	800c4a0 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4e6:	b672      	cpsid	i
 800c4e8:	e7fe      	b.n	800c4e8 <vTaskSwitchContext+0x58>
 800c4ea:	6852      	ldr	r2, [r2, #4]
 800c4ec:	606a      	str	r2, [r5, #4]
 800c4ee:	e7f1      	b.n	800c4d4 <vTaskSwitchContext+0x44>
 800c4f0:	20005920 	.word	0x20005920
 800c4f4:	200059a4 	.word	0x200059a4
 800c4f8:	20005928 	.word	0x20005928
 800c4fc:	200054b8 	.word	0x200054b8
 800c500:	200054ac 	.word	0x200054ac
 800c504:	200002f0 	.word	0x200002f0

0800c508 <vTaskPlaceOnEventList>:
{
 800c508:	b510      	push	{r4, lr}
 800c50a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d009      	beq.n	800c524 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c510:	4b05      	ldr	r3, [pc, #20]	; (800c528 <vTaskPlaceOnEventList+0x20>)
 800c512:	6819      	ldr	r1, [r3, #0]
 800c514:	3118      	adds	r1, #24
 800c516:	f7ff f915 	bl	800b744 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c51a:	2101      	movs	r1, #1
 800c51c:	0020      	movs	r0, r4
 800c51e:	f7ff fcbb 	bl	800be98 <prvAddCurrentTaskToDelayedList>
}
 800c522:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 800c524:	b672      	cpsid	i
 800c526:	e7fe      	b.n	800c526 <vTaskPlaceOnEventList+0x1e>
 800c528:	200054ac 	.word	0x200054ac

0800c52c <vTaskPlaceOnEventListRestricted>:
	{
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	000d      	movs	r5, r1
 800c530:	0014      	movs	r4, r2
		configASSERT( pxEventList );
 800c532:	2800      	cmp	r0, #0
 800c534:	d00d      	beq.n	800c552 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c536:	4b08      	ldr	r3, [pc, #32]	; (800c558 <vTaskPlaceOnEventListRestricted+0x2c>)
 800c538:	6819      	ldr	r1, [r3, #0]
 800c53a:	3118      	adds	r1, #24
 800c53c:	f7ff f8f6 	bl	800b72c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800c540:	2c00      	cmp	r4, #0
 800c542:	d001      	beq.n	800c548 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 800c544:	2501      	movs	r5, #1
 800c546:	426d      	negs	r5, r5
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c548:	0028      	movs	r0, r5
 800c54a:	0021      	movs	r1, r4
 800c54c:	f7ff fca4 	bl	800be98 <prvAddCurrentTaskToDelayedList>
	}
 800c550:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800c552:	b672      	cpsid	i
 800c554:	e7fe      	b.n	800c554 <vTaskPlaceOnEventListRestricted+0x28>
 800c556:	46c0      	nop			; (mov r8, r8)
 800c558:	200054ac 	.word	0x200054ac

0800c55c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c55c:	68c3      	ldr	r3, [r0, #12]
{
 800c55e:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c560:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c562:	2c00      	cmp	r4, #0
 800c564:	d02b      	beq.n	800c5be <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c566:	0025      	movs	r5, r4
 800c568:	3518      	adds	r5, #24
 800c56a:	0028      	movs	r0, r5
 800c56c:	f7ff f902 	bl	800b774 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c570:	4b14      	ldr	r3, [pc, #80]	; (800c5c4 <xTaskRemoveFromEventList+0x68>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00f      	beq.n	800c598 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c578:	0029      	movs	r1, r5
 800c57a:	4813      	ldr	r0, [pc, #76]	; (800c5c8 <xTaskRemoveFromEventList+0x6c>)
 800c57c:	f7ff f8d6 	bl	800b72c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c580:	4b12      	ldr	r3, [pc, #72]	; (800c5cc <xTaskRemoveFromEventList+0x70>)
 800c582:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c584:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 800c586:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d903      	bls.n	800c596 <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 800c58e:	2201      	movs	r2, #1
 800c590:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <xTaskRemoveFromEventList+0x74>)
		xReturn = pdTRUE;
 800c592:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800c594:	601a      	str	r2, [r3, #0]
}
 800c596:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c598:	1d25      	adds	r5, r4, #4
 800c59a:	0028      	movs	r0, r5
 800c59c:	f7ff f8ea 	bl	800b774 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c5a0:	4a0c      	ldr	r2, [pc, #48]	; (800c5d4 <xTaskRemoveFromEventList+0x78>)
 800c5a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c5a4:	6811      	ldr	r1, [r2, #0]
 800c5a6:	428b      	cmp	r3, r1
 800c5a8:	d900      	bls.n	800c5ac <xTaskRemoveFromEventList+0x50>
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	0098      	lsls	r0, r3, #2
 800c5ae:	18c0      	adds	r0, r0, r3
 800c5b0:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <xTaskRemoveFromEventList+0x7c>)
 800c5b2:	0080      	lsls	r0, r0, #2
 800c5b4:	0029      	movs	r1, r5
 800c5b6:	18c0      	adds	r0, r0, r3
 800c5b8:	f7ff f8b8 	bl	800b72c <vListInsertEnd>
 800c5bc:	e7e0      	b.n	800c580 <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 800c5be:	b672      	cpsid	i
 800c5c0:	e7fe      	b.n	800c5c0 <xTaskRemoveFromEventList+0x64>
 800c5c2:	46c0      	nop			; (mov r8, r8)
 800c5c4:	20005920 	.word	0x20005920
 800c5c8:	20005960 	.word	0x20005960
 800c5cc:	200054ac 	.word	0x200054ac
 800c5d0:	200059a4 	.word	0x200059a4
 800c5d4:	20005928 	.word	0x20005928
 800c5d8:	200054b8 	.word	0x200054b8

0800c5dc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5dc:	4b03      	ldr	r3, [pc, #12]	; (800c5ec <vTaskInternalSetTimeOutState+0x10>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5e2:	4b03      	ldr	r3, [pc, #12]	; (800c5f0 <vTaskInternalSetTimeOutState+0x14>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6043      	str	r3, [r0, #4]
}
 800c5e8:	4770      	bx	lr
 800c5ea:	46c0      	nop			; (mov r8, r8)
 800c5ec:	20005958 	.word	0x20005958
 800c5f0:	200059a0 	.word	0x200059a0

0800c5f4 <xTaskCheckForTimeOut>:
{
 800c5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5f6:	46c6      	mov	lr, r8
 800c5f8:	0004      	movs	r4, r0
 800c5fa:	000d      	movs	r5, r1
 800c5fc:	b500      	push	{lr}
	configASSERT( pxTimeOut );
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d025      	beq.n	800c64e <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 800c602:	2900      	cmp	r1, #0
 800c604:	d021      	beq.n	800c64a <xTaskCheckForTimeOut+0x56>
	taskENTER_CRITICAL();
 800c606:	f000 facb 	bl	800cba0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c60a:	4a15      	ldr	r2, [pc, #84]	; (800c660 <xTaskCheckForTimeOut+0x6c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800c60c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800c60e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c610:	1c58      	adds	r0, r3, #1
 800c612:	d01e      	beq.n	800c652 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c614:	4f13      	ldr	r7, [pc, #76]	; (800c664 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c616:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c618:	683e      	ldr	r6, [r7, #0]
 800c61a:	46b0      	mov	r8, r6
 800c61c:	6826      	ldr	r6, [r4, #0]
 800c61e:	4546      	cmp	r6, r8
 800c620:	d002      	beq.n	800c628 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 800c622:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c624:	4288      	cmp	r0, r1
 800c626:	d90a      	bls.n	800c63e <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c628:	1a0e      	subs	r6, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c62a:	42b3      	cmp	r3, r6
 800c62c:	d913      	bls.n	800c656 <xTaskCheckForTimeOut+0x62>
			xReturn = pdFALSE;
 800c62e:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 800c630:	1a5b      	subs	r3, r3, r1
 800c632:	181b      	adds	r3, r3, r0
 800c634:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c63a:	6813      	ldr	r3, [r2, #0]
 800c63c:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800c63e:	f000 fabb 	bl	800cbb8 <vPortExitCritical>
}
 800c642:	0030      	movs	r0, r6
 800c644:	bc80      	pop	{r7}
 800c646:	46b8      	mov	r8, r7
 800c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800c64a:	b672      	cpsid	i
 800c64c:	e7fe      	b.n	800c64c <xTaskCheckForTimeOut+0x58>
	configASSERT( pxTimeOut );
 800c64e:	b672      	cpsid	i
 800c650:	e7fe      	b.n	800c650 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
 800c652:	2600      	movs	r6, #0
 800c654:	e7f3      	b.n	800c63e <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
 800c656:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800c658:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800c65a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800c65c:	e7ef      	b.n	800c63e <xTaskCheckForTimeOut+0x4a>
 800c65e:	46c0      	nop			; (mov r8, r8)
 800c660:	200059a0 	.word	0x200059a0
 800c664:	20005958 	.word	0x20005958

0800c668 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c668:	2201      	movs	r2, #1
 800c66a:	4b01      	ldr	r3, [pc, #4]	; (800c670 <vTaskMissedYield+0x8>)
 800c66c:	601a      	str	r2, [r3, #0]
}
 800c66e:	4770      	bx	lr
 800c670:	200059a4 	.word	0x200059a4

0800c674 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c674:	4b05      	ldr	r3, [pc, #20]	; (800c68c <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c676:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d004      	beq.n	800c688 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c67e:	4b04      	ldr	r3, [pc, #16]	; (800c690 <xTaskGetSchedulerState+0x1c>)
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	4243      	negs	r3, r0
 800c684:	4158      	adcs	r0, r3
 800c686:	0040      	lsls	r0, r0, #1
	}
 800c688:	4770      	bx	lr
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	20005974 	.word	0x20005974
 800c690:	20005920 	.word	0x20005920

0800c694 <xTaskPriorityDisinherit>:
	{
 800c694:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800c696:	2800      	cmp	r0, #0
 800c698:	d010      	beq.n	800c6bc <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 800c69a:	4b16      	ldr	r3, [pc, #88]	; (800c6f4 <xTaskPriorityDisinherit+0x60>)
 800c69c:	681c      	ldr	r4, [r3, #0]
 800c69e:	4284      	cmp	r4, r0
 800c6a0:	d001      	beq.n	800c6a6 <xTaskPriorityDisinherit+0x12>
 800c6a2:	b672      	cpsid	i
 800c6a4:	e7fe      	b.n	800c6a4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d009      	beq.n	800c6c0 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c6ae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6b4:	4291      	cmp	r1, r2
 800c6b6:	d001      	beq.n	800c6bc <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 800c6bc:	2000      	movs	r0, #0
	}
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800c6c0:	b672      	cpsid	i
 800c6c2:	e7fe      	b.n	800c6c2 <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6c4:	1d25      	adds	r5, r4, #4
 800c6c6:	0028      	movs	r0, r5
 800c6c8:	f7ff f854 	bl	800b774 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6cc:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6d0:	1ad2      	subs	r2, r2, r3
 800c6d2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6d4:	4a08      	ldr	r2, [pc, #32]	; (800c6f8 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6d6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800c6d8:	6811      	ldr	r1, [r2, #0]
 800c6da:	428b      	cmp	r3, r1
 800c6dc:	d900      	bls.n	800c6e0 <xTaskPriorityDisinherit+0x4c>
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	0098      	lsls	r0, r3, #2
 800c6e2:	18c0      	adds	r0, r0, r3
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <xTaskPriorityDisinherit+0x68>)
 800c6e6:	0080      	lsls	r0, r0, #2
 800c6e8:	18c0      	adds	r0, r0, r3
 800c6ea:	0029      	movs	r1, r5
 800c6ec:	f7ff f81e 	bl	800b72c <vListInsertEnd>
					xReturn = pdTRUE;
 800c6f0:	2001      	movs	r0, #1
		return xReturn;
 800c6f2:	e7e4      	b.n	800c6be <xTaskPriorityDisinherit+0x2a>
 800c6f4:	200054ac 	.word	0x200054ac
 800c6f8:	20005928 	.word	0x20005928
 800c6fc:	200054b8 	.word	0x200054b8

0800c700 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c702:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c704:	f000 fa4c 	bl	800cba0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c708:	4c10      	ldr	r4, [pc, #64]	; (800c74c <prvCheckForValidListAndQueue+0x4c>)
 800c70a:	6825      	ldr	r5, [r4, #0]
 800c70c:	2d00      	cmp	r5, #0
 800c70e:	d003      	beq.n	800c718 <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c710:	f000 fa52 	bl	800cbb8 <vPortExitCritical>
}
 800c714:	b003      	add	sp, #12
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 800c718:	4f0d      	ldr	r7, [pc, #52]	; (800c750 <prvCheckForValidListAndQueue+0x50>)
 800c71a:	0038      	movs	r0, r7
 800c71c:	f7fe fff6 	bl	800b70c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c720:	4e0c      	ldr	r6, [pc, #48]	; (800c754 <prvCheckForValidListAndQueue+0x54>)
 800c722:	0030      	movs	r0, r6
 800c724:	f7fe fff2 	bl	800b70c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c72a:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c72c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c72e:	4b0b      	ldr	r3, [pc, #44]	; (800c75c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c730:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c732:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c734:	4a0a      	ldr	r2, [pc, #40]	; (800c760 <prvCheckForValidListAndQueue+0x60>)
 800c736:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <prvCheckForValidListAndQueue+0x64>)
 800c738:	9500      	str	r5, [sp, #0]
 800c73a:	f7ff f91f 	bl	800b97c <xQueueGenericCreateStatic>
 800c73e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800c740:	2800      	cmp	r0, #0
 800c742:	d0e5      	beq.n	800c710 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c744:	4908      	ldr	r1, [pc, #32]	; (800c768 <prvCheckForValidListAndQueue+0x68>)
 800c746:	f7ff fae9 	bl	800bd1c <vQueueAddToRegistry>
 800c74a:	e7e1      	b.n	800c710 <prvCheckForValidListAndQueue+0x10>
 800c74c:	20005acc 	.word	0x20005acc
 800c750:	20005a50 	.word	0x20005a50
 800c754:	20005a64 	.word	0x20005a64
 800c758:	200059a8 	.word	0x200059a8
 800c75c:	200059ac 	.word	0x200059ac
 800c760:	200059b0 	.word	0x200059b0
 800c764:	20005a7c 	.word	0x20005a7c
 800c768:	08013b60 	.word	0x08013b60

0800c76c <xTimerCreateTimerTask>:
{
 800c76c:	b500      	push	{lr}
 800c76e:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 800c770:	f7ff ffc6 	bl	800c700 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c774:	4b10      	ldr	r3, [pc, #64]	; (800c7b8 <xTimerCreateTimerTask+0x4c>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01a      	beq.n	800c7b2 <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c77c:	2300      	movs	r3, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c77e:	aa07      	add	r2, sp, #28
 800c780:	a906      	add	r1, sp, #24
 800c782:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c784:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c786:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c788:	f7fe ffb4 	bl	800b6f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c78c:	9b05      	ldr	r3, [sp, #20]
 800c78e:	9a07      	ldr	r2, [sp, #28]
 800c790:	9302      	str	r3, [sp, #8]
 800c792:	9b06      	ldr	r3, [sp, #24]
 800c794:	4909      	ldr	r1, [pc, #36]	; (800c7bc <xTimerCreateTimerTask+0x50>)
 800c796:	9301      	str	r3, [sp, #4]
 800c798:	2302      	movs	r3, #2
 800c79a:	4809      	ldr	r0, [pc, #36]	; (800c7c0 <xTimerCreateTimerTask+0x54>)
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f7ff fc58 	bl	800c054 <xTaskCreateStatic>
 800c7a4:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <xTimerCreateTimerTask+0x58>)
 800c7a6:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d002      	beq.n	800c7b2 <xTimerCreateTimerTask+0x46>
}
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	b009      	add	sp, #36	; 0x24
 800c7b0:	bd00      	pop	{pc}
	configASSERT( xReturn );
 800c7b2:	b672      	cpsid	i
 800c7b4:	e7fe      	b.n	800c7b4 <xTimerCreateTimerTask+0x48>
 800c7b6:	46c0      	nop			; (mov r8, r8)
 800c7b8:	20005acc 	.word	0x20005acc
 800c7bc:	08013b68 	.word	0x08013b68
 800c7c0:	0800c8a5 	.word	0x0800c8a5
 800c7c4:	20005ad0 	.word	0x20005ad0

0800c7c8 <xTimerGenericCommand>:
{
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	001c      	movs	r4, r3
 800c7cc:	b084      	sub	sp, #16
	configASSERT( xTimer );
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d016      	beq.n	800c800 <xTimerGenericCommand+0x38>
	if( xTimerQueue != NULL )
 800c7d2:	4e13      	ldr	r6, [pc, #76]	; (800c820 <xTimerGenericCommand+0x58>)
 800c7d4:	6835      	ldr	r5, [r6, #0]
 800c7d6:	2d00      	cmp	r5, #0
 800c7d8:	d00f      	beq.n	800c7fa <xTimerGenericCommand+0x32>
		xMessage.xMessageID = xCommandID;
 800c7da:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c7dc:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c7de:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c7e0:	2905      	cmp	r1, #5
 800c7e2:	dc0f      	bgt.n	800c804 <xTimerGenericCommand+0x3c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c7e4:	f7ff ff46 	bl	800c674 <xTaskGetSchedulerState>
 800c7e8:	2802      	cmp	r0, #2
 800c7ea:	d012      	beq.n	800c812 <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	4669      	mov	r1, sp
 800c7f2:	6830      	ldr	r0, [r6, #0]
 800c7f4:	f7ff f900 	bl	800b9f8 <xQueueGenericSend>
 800c7f8:	e000      	b.n	800c7fc <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 800c7fa:	2000      	movs	r0, #0
}
 800c7fc:	b004      	add	sp, #16
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( xTimer );
 800c800:	b672      	cpsid	i
 800c802:	e7fe      	b.n	800c802 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c804:	2300      	movs	r3, #0
 800c806:	0022      	movs	r2, r4
 800c808:	4669      	mov	r1, sp
 800c80a:	0028      	movs	r0, r5
 800c80c:	f7ff f98e 	bl	800bb2c <xQueueGenericSendFromISR>
 800c810:	e7f4      	b.n	800c7fc <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c812:	2300      	movs	r3, #0
 800c814:	4669      	mov	r1, sp
 800c816:	6830      	ldr	r0, [r6, #0]
 800c818:	9a08      	ldr	r2, [sp, #32]
 800c81a:	f7ff f8ed 	bl	800b9f8 <xQueueGenericSend>
 800c81e:	e7ed      	b.n	800c7fc <xTimerGenericCommand+0x34>
 800c820:	20005acc 	.word	0x20005acc

0800c824 <prvSwitchTimerLists>:
{
 800c824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c826:	4647      	mov	r7, r8
 800c828:	46ce      	mov	lr, r9
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c82a:	2328      	movs	r3, #40	; 0x28
{
 800c82c:	b580      	push	{r7, lr}
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c82e:	4698      	mov	r8, r3
 800c830:	2704      	movs	r7, #4
 800c832:	4e1a      	ldr	r6, [pc, #104]	; (800c89c <prvSwitchTimerLists+0x78>)
{
 800c834:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c836:	e00e      	b.n	800c856 <prvSwitchTimerLists+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c838:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c83a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c83c:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c83e:	1d25      	adds	r5, r4, #4
 800c840:	0028      	movs	r0, r5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c842:	4691      	mov	r9, r2
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c844:	f7fe ff96 	bl	800b774 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c848:	6a23      	ldr	r3, [r4, #32]
 800c84a:	0020      	movs	r0, r4
 800c84c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c84e:	4643      	mov	r3, r8
 800c850:	5ce3      	ldrb	r3, [r4, r3]
 800c852:	421f      	tst	r7, r3
 800c854:	d10c      	bne.n	800c870 <prvSwitchTimerLists+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c856:	6833      	ldr	r3, [r6, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	d1ec      	bne.n	800c838 <prvSwitchTimerLists+0x14>
	pxCurrentTimerList = pxOverflowTimerList;
 800c85e:	4a10      	ldr	r2, [pc, #64]	; (800c8a0 <prvSwitchTimerLists+0x7c>)
 800c860:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c862:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800c864:	6031      	str	r1, [r6, #0]
}
 800c866:	b003      	add	sp, #12
 800c868:	bcc0      	pop	{r6, r7}
 800c86a:	46b9      	mov	r9, r7
 800c86c:	46b0      	mov	r8, r6
 800c86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c870:	69a3      	ldr	r3, [r4, #24]
 800c872:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800c874:	4599      	cmp	r9, r3
 800c876:	d206      	bcs.n	800c886 <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c878:	0029      	movs	r1, r5
 800c87a:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c87c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c87e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c880:	f7fe ff60 	bl	800b744 <vListInsert>
 800c884:	e7e7      	b.n	800c856 <prvSwitchTimerLists+0x32>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c886:	2300      	movs	r3, #0
 800c888:	464a      	mov	r2, r9
 800c88a:	2100      	movs	r1, #0
 800c88c:	0020      	movs	r0, r4
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	f7ff ff9a 	bl	800c7c8 <xTimerGenericCommand>
				configASSERT( xResult );
 800c894:	2800      	cmp	r0, #0
 800c896:	d1de      	bne.n	800c856 <prvSwitchTimerLists+0x32>
 800c898:	b672      	cpsid	i
 800c89a:	e7fe      	b.n	800c89a <prvSwitchTimerLists+0x76>
 800c89c:	200059a8 	.word	0x200059a8
 800c8a0:	200059ac 	.word	0x200059ac

0800c8a4 <prvTimerTask>:
{
 800c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8a6:	4645      	mov	r5, r8
 800c8a8:	4657      	mov	r7, sl
 800c8aa:	464e      	mov	r6, r9
 800c8ac:	46de      	mov	lr, fp
 800c8ae:	b5e0      	push	{r5, r6, r7, lr}
 800c8b0:	4b8f      	ldr	r3, [pc, #572]	; (800caf0 <prvTimerTask+0x24c>)
 800c8b2:	b089      	sub	sp, #36	; 0x24
 800c8b4:	4699      	mov	r9, r3
 800c8b6:	4b8f      	ldr	r3, [pc, #572]	; (800caf4 <prvTimerTask+0x250>)
 800c8b8:	4f8f      	ldr	r7, [pc, #572]	; (800caf8 <prvTimerTask+0x254>)
 800c8ba:	9303      	str	r3, [sp, #12]
 800c8bc:	4b8f      	ldr	r3, [pc, #572]	; (800cafc <prvTimerTask+0x258>)
 800c8be:	4d90      	ldr	r5, [pc, #576]	; (800cb00 <prvTimerTask+0x25c>)
 800c8c0:	9302      	str	r3, [sp, #8]
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8c2:	2328      	movs	r3, #40	; 0x28
 800c8c4:	4698      	mov	r8, r3
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8c6:	464b      	mov	r3, r9
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	681e      	ldr	r6, [r3, #0]
 800c8cc:	2e00      	cmp	r6, #0
 800c8ce:	d100      	bne.n	800c8d2 <prvTimerTask+0x2e>
 800c8d0:	e090      	b.n	800c9f4 <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800c8d6:	f7ff fc59 	bl	800c18c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c8da:	f7ff fc5f 	bl	800c19c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c8de:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c8e0:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800c8e2:	4283      	cmp	r3, r0
 800c8e4:	d900      	bls.n	800c8e8 <prvTimerTask+0x44>
 800c8e6:	e09f      	b.n	800ca28 <prvTimerTask+0x184>
	xLastTime = xTimeNow;
 800c8e8:	6038      	str	r0, [r7, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8ea:	4286      	cmp	r6, r0
 800c8ec:	d800      	bhi.n	800c8f0 <prvTimerTask+0x4c>
 800c8ee:	e0a4      	b.n	800ca3a <prvTimerTask+0x196>
 800c8f0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8f2:	6828      	ldr	r0, [r5, #0]
 800c8f4:	1b31      	subs	r1, r6, r4
 800c8f6:	f7ff fa25 	bl	800bd44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8fa:	f7ff fd9f 	bl	800c43c <xTaskResumeAll>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d100      	bne.n	800c904 <prvTimerTask+0x60>
 800c902:	e08e      	b.n	800ca22 <prvTimerTask+0x17e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c904:	2302      	movs	r3, #2
 800c906:	469b      	mov	fp, r3
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c908:	3b01      	subs	r3, #1
 800c90a:	469a      	mov	sl, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c90c:	2200      	movs	r2, #0
 800c90e:	6828      	ldr	r0, [r5, #0]
 800c910:	a904      	add	r1, sp, #16
 800c912:	f7ff f95f 	bl	800bbd4 <xQueueReceive>
 800c916:	2800      	cmp	r0, #0
 800c918:	d0d5      	beq.n	800c8c6 <prvTimerTask+0x22>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c91a:	9b04      	ldr	r3, [sp, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	db61      	blt.n	800c9e4 <prvTimerTask+0x140>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c920:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c922:	6963      	ldr	r3, [r4, #20]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d002      	beq.n	800c92e <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c928:	1d20      	adds	r0, r4, #4
 800c92a:	f7fe ff23 	bl	800b774 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800c92e:	f7ff fc35 	bl	800c19c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c932:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c934:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800c936:	4298      	cmp	r0, r3
 800c938:	d37c      	bcc.n	800ca34 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 800c93a:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800c93c:	603e      	str	r6, [r7, #0]
			switch( xMessage.xMessageID )
 800c93e:	2b09      	cmp	r3, #9
 800c940:	d8e4      	bhi.n	800c90c <prvTimerTask+0x68>
 800c942:	9a02      	ldr	r2, [sp, #8]
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	58d3      	ldr	r3, [r2, r3]
 800c948:	469f      	mov	pc, r3
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c94a:	4643      	mov	r3, r8
 800c94c:	2201      	movs	r2, #1
 800c94e:	5ce3      	ldrb	r3, [r4, r3]
 800c950:	4313      	orrs	r3, r2
 800c952:	4642      	mov	r2, r8
 800c954:	54a3      	strb	r3, [r4, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c956:	69a1      	ldr	r1, [r4, #24]
 800c958:	9b05      	ldr	r3, [sp, #20]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c95a:	6124      	str	r4, [r4, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c95c:	185a      	adds	r2, r3, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c95e:	6062      	str	r2, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c960:	42b2      	cmp	r2, r6
 800c962:	d900      	bls.n	800c966 <prvTimerTask+0xc2>
 800c964:	e085      	b.n	800ca72 <prvTimerTask+0x1ce>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c966:	1af3      	subs	r3, r6, r3
 800c968:	4299      	cmp	r1, r3
 800c96a:	d900      	bls.n	800c96e <prvTimerTask+0xca>
 800c96c:	e0a3      	b.n	800cab6 <prvTimerTask+0x212>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c96e:	6a23      	ldr	r3, [r4, #32]
 800c970:	0020      	movs	r0, r4
 800c972:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c974:	4643      	mov	r3, r8
 800c976:	5ce3      	ldrb	r3, [r4, r3]
 800c978:	075b      	lsls	r3, r3, #29
 800c97a:	d5c7      	bpl.n	800c90c <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c97c:	69a3      	ldr	r3, [r4, #24]
 800c97e:	9a05      	ldr	r2, [sp, #20]
 800c980:	2100      	movs	r1, #0
 800c982:	18d2      	adds	r2, r2, r3
 800c984:	2300      	movs	r3, #0
 800c986:	0020      	movs	r0, r4
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	f7ff ff1d 	bl	800c7c8 <xTimerGenericCommand>
							configASSERT( xResult );
 800c98e:	2800      	cmp	r0, #0
 800c990:	d1bc      	bne.n	800c90c <prvTimerTask+0x68>
 800c992:	b672      	cpsid	i
 800c994:	e7fe      	b.n	800c994 <prvTimerTask+0xf0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c996:	4643      	mov	r3, r8
 800c998:	2201      	movs	r2, #1
 800c99a:	5ce3      	ldrb	r3, [r4, r3]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	4642      	mov	r2, r8
 800c9a0:	54a3      	strb	r3, [r4, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9a2:	9b05      	ldr	r3, [sp, #20]
 800c9a4:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d100      	bne.n	800c9ac <prvTimerTask+0x108>
 800c9aa:	e098      	b.n	800cade <prvTimerTask+0x23a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9ac:	199b      	adds	r3, r3, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9ae:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9b0:	6124      	str	r4, [r4, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9b2:	1d21      	adds	r1, r4, #4
	if( xNextExpiryTime <= xTimeNow )
 800c9b4:	42b3      	cmp	r3, r6
 800c9b6:	d867      	bhi.n	800ca88 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9b8:	9b03      	ldr	r3, [sp, #12]
 800c9ba:	6818      	ldr	r0, [r3, #0]
 800c9bc:	f7fe fec2 	bl	800b744 <vListInsert>
	return xProcessTimerNow;
 800c9c0:	e7a4      	b.n	800c90c <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9c2:	4643      	mov	r3, r8
 800c9c4:	4652      	mov	r2, sl
 800c9c6:	5ce3      	ldrb	r3, [r4, r3]
 800c9c8:	4393      	bics	r3, r2
 800c9ca:	4642      	mov	r2, r8
 800c9cc:	54a3      	strb	r3, [r4, r2]
					break;
 800c9ce:	e79d      	b.n	800c90c <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c9d0:	4643      	mov	r3, r8
 800c9d2:	465a      	mov	r2, fp
 800c9d4:	5ce3      	ldrb	r3, [r4, r3]
 800c9d6:	421a      	tst	r2, r3
 800c9d8:	d05b      	beq.n	800ca92 <prvTimerTask+0x1ee>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9da:	4652      	mov	r2, sl
 800c9dc:	4393      	bics	r3, r2
 800c9de:	4642      	mov	r2, r8
 800c9e0:	54a3      	strb	r3, [r4, r2]
 800c9e2:	e793      	b.n	800c90c <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c9e4:	9b05      	ldr	r3, [sp, #20]
 800c9e6:	9907      	ldr	r1, [sp, #28]
 800c9e8:	9806      	ldr	r0, [sp, #24]
 800c9ea:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9ec:	9b04      	ldr	r3, [sp, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	db8c      	blt.n	800c90c <prvTimerTask+0x68>
 800c9f2:	e795      	b.n	800c920 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 800c9f4:	f7ff fbca 	bl	800c18c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c9f8:	f7ff fbd0 	bl	800c19c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c9fc:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c9fe:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800ca00:	4283      	cmp	r3, r0
 800ca02:	d811      	bhi.n	800ca28 <prvTimerTask+0x184>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca04:	9b03      	ldr	r3, [sp, #12]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca06:	6828      	ldr	r0, [r5, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca08:	681b      	ldr	r3, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca0a:	1b31      	subs	r1, r6, r4
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca0c:	681a      	ldr	r2, [r3, #0]
	xLastTime = xTimeNow;
 800ca0e:	603c      	str	r4, [r7, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca10:	4253      	negs	r3, r2
 800ca12:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca14:	f7ff f996 	bl	800bd44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca18:	f7ff fd10 	bl	800c43c <xTaskResumeAll>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d000      	beq.n	800ca22 <prvTimerTask+0x17e>
 800ca20:	e770      	b.n	800c904 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 800ca22:	f000 f8b1 	bl	800cb88 <vPortYield>
 800ca26:	e76d      	b.n	800c904 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800ca28:	f7ff fefc 	bl	800c824 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800ca2c:	603c      	str	r4, [r7, #0]
			( void ) xTaskResumeAll();
 800ca2e:	f7ff fd05 	bl	800c43c <xTaskResumeAll>
 800ca32:	e767      	b.n	800c904 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800ca34:	f7ff fef6 	bl	800c824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca38:	e77f      	b.n	800c93a <prvTimerTask+0x96>
				( void ) xTaskResumeAll();
 800ca3a:	f7ff fcff 	bl	800c43c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca3e:	464b      	mov	r3, r9
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	469a      	mov	sl, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca48:	2304      	movs	r3, #4
 800ca4a:	4453      	add	r3, sl
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	469b      	mov	fp, r3
 800ca50:	f7fe fe90 	bl	800b774 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca54:	4653      	mov	r3, sl
 800ca56:	4642      	mov	r2, r8
 800ca58:	5c9b      	ldrb	r3, [r3, r2]
 800ca5a:	075a      	lsls	r2, r3, #29
 800ca5c:	d41d      	bmi.n	800ca9a <prvTimerTask+0x1f6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca5e:	2201      	movs	r2, #1
 800ca60:	4641      	mov	r1, r8
 800ca62:	4393      	bics	r3, r2
 800ca64:	4652      	mov	r2, sl
 800ca66:	5453      	strb	r3, [r2, r1]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca68:	4653      	mov	r3, sl
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	4798      	blx	r3
}
 800ca70:	e748      	b.n	800c904 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca72:	42b3      	cmp	r3, r6
 800ca74:	d902      	bls.n	800ca7c <prvTimerTask+0x1d8>
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d800      	bhi.n	800ca7c <prvTimerTask+0x1d8>
 800ca7a:	e778      	b.n	800c96e <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca7c:	464b      	mov	r3, r9
 800ca7e:	1d21      	adds	r1, r4, #4
 800ca80:	6818      	ldr	r0, [r3, #0]
 800ca82:	f7fe fe5f 	bl	800b744 <vListInsert>
	return xProcessTimerNow;
 800ca86:	e741      	b.n	800c90c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca88:	464b      	mov	r3, r9
 800ca8a:	6818      	ldr	r0, [r3, #0]
 800ca8c:	f7fe fe5a 	bl	800b744 <vListInsert>
 800ca90:	e73c      	b.n	800c90c <prvTimerTask+0x68>
							vPortFree( pxTimer );
 800ca92:	0020      	movs	r0, r4
 800ca94:	f000 f9e0 	bl	800ce58 <vPortFree>
 800ca98:	e738      	b.n	800c90c <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca9a:	4653      	mov	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca9c:	4651      	mov	r1, sl
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca9e:	699a      	ldr	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800caa0:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800caa2:	18b3      	adds	r3, r6, r2
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800caa4:	604b      	str	r3, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 800caa6:	42a3      	cmp	r3, r4
 800caa8:	d90b      	bls.n	800cac2 <prvTimerTask+0x21e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800caaa:	464b      	mov	r3, r9
 800caac:	4659      	mov	r1, fp
 800caae:	6818      	ldr	r0, [r3, #0]
 800cab0:	f7fe fe48 	bl	800b744 <vListInsert>
	return xProcessTimerNow;
 800cab4:	e7d8      	b.n	800ca68 <prvTimerTask+0x1c4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cab6:	9b03      	ldr	r3, [sp, #12]
 800cab8:	1d21      	adds	r1, r4, #4
 800caba:	6818      	ldr	r0, [r3, #0]
 800cabc:	f7fe fe42 	bl	800b744 <vListInsert>
	return xProcessTimerNow;
 800cac0:	e724      	b.n	800c90c <prvTimerTask+0x68>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cac2:	1ba4      	subs	r4, r4, r6
 800cac4:	42a2      	cmp	r2, r4
 800cac6:	d80c      	bhi.n	800cae2 <prvTimerTask+0x23e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cac8:	2300      	movs	r3, #0
 800caca:	0032      	movs	r2, r6
 800cacc:	2100      	movs	r1, #0
 800cace:	4650      	mov	r0, sl
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	f7ff fe79 	bl	800c7c8 <xTimerGenericCommand>
			configASSERT( xResult );
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d1c6      	bne.n	800ca68 <prvTimerTask+0x1c4>
 800cada:	b672      	cpsid	i
 800cadc:	e7fe      	b.n	800cadc <prvTimerTask+0x238>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cade:	b672      	cpsid	i
 800cae0:	e7fe      	b.n	800cae0 <prvTimerTask+0x23c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	4659      	mov	r1, fp
 800cae6:	6818      	ldr	r0, [r3, #0]
 800cae8:	f7fe fe2c 	bl	800b744 <vListInsert>
	return xProcessTimerNow;
 800caec:	e7bc      	b.n	800ca68 <prvTimerTask+0x1c4>
 800caee:	46c0      	nop			; (mov r8, r8)
 800caf0:	200059a8 	.word	0x200059a8
 800caf4:	200059ac 	.word	0x200059ac
 800caf8:	20005a78 	.word	0x20005a78
 800cafc:	08013b70 	.word	0x08013b70
 800cb00:	20005acc 	.word	0x20005acc

0800cb04 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800cb04:	2300      	movs	r3, #0
{
 800cb06:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800cb08:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb0a:	4b06      	ldr	r3, [pc, #24]	; (800cb24 <prvTaskExitError+0x20>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	d001      	beq.n	800cb16 <prvTaskExitError+0x12>
 800cb12:	b672      	cpsid	i
 800cb14:	e7fe      	b.n	800cb14 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800cb16:	b672      	cpsid	i
	while( ulDummy == 0 )
 800cb18:	9b01      	ldr	r3, [sp, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0fc      	beq.n	800cb18 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb1e:	b002      	add	sp, #8
 800cb20:	4770      	bx	lr
 800cb22:	46c0      	nop			; (mov r8, r8)
 800cb24:	20000128 	.word	0x20000128
	...

0800cb30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800cb30:	4a0b      	ldr	r2, [pc, #44]	; (800cb60 <pxCurrentTCBConst2>)
 800cb32:	6813      	ldr	r3, [r2, #0]
 800cb34:	6818      	ldr	r0, [r3, #0]
 800cb36:	3020      	adds	r0, #32
 800cb38:	f380 8809 	msr	PSP, r0
 800cb3c:	2002      	movs	r0, #2
 800cb3e:	f380 8814 	msr	CONTROL, r0
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800cb48:	46ae      	mov	lr, r5
 800cb4a:	bc08      	pop	{r3}
 800cb4c:	bc04      	pop	{r2}
 800cb4e:	b662      	cpsie	i
 800cb50:	4718      	bx	r3
 800cb52:	46c0      	nop			; (mov r8, r8)
 800cb54:	46c0      	nop			; (mov r8, r8)
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	46c0      	nop			; (mov r8, r8)
 800cb5a:	46c0      	nop			; (mov r8, r8)
 800cb5c:	46c0      	nop			; (mov r8, r8)
 800cb5e:	46c0      	nop			; (mov r8, r8)

0800cb60 <pxCurrentTCBConst2>:
 800cb60:	200054ac 	.word	0x200054ac

0800cb64 <pxPortInitialiseStack>:
{
 800cb64:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb66:	2480      	movs	r4, #128	; 0x80
 800cb68:	1f03      	subs	r3, r0, #4
 800cb6a:	0464      	lsls	r4, r4, #17
 800cb6c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800cb6e:	3b04      	subs	r3, #4
 800cb70:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb72:	4903      	ldr	r1, [pc, #12]	; (800cb80 <pxPortInitialiseStack+0x1c>)
 800cb74:	3b04      	subs	r3, #4
 800cb76:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb78:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800cb7a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb7c:	601a      	str	r2, [r3, #0]
}
 800cb7e:	bd10      	pop	{r4, pc}
 800cb80:	0800cb05 	.word	0x0800cb05

0800cb84 <SVC_Handler>:
}
 800cb84:	4770      	bx	lr
 800cb86:	46c0      	nop			; (mov r8, r8)

0800cb88 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb88:	2280      	movs	r2, #128	; 0x80
 800cb8a:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <vPortYield+0x14>)
 800cb8c:	0552      	lsls	r2, r2, #21
 800cb8e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800cb90:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800cb94:	f3bf 8f6f 	isb	sy
}
 800cb98:	4770      	bx	lr
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	e000ed04 	.word	0xe000ed04

0800cba0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800cba0:	b672      	cpsid	i
	uxCriticalNesting++;
 800cba2:	4a04      	ldr	r2, [pc, #16]	; (800cbb4 <vPortEnterCritical+0x14>)
 800cba4:	6813      	ldr	r3, [r2, #0]
 800cba6:	3301      	adds	r3, #1
 800cba8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800cbaa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800cbae:	f3bf 8f6f 	isb	sy
}
 800cbb2:	4770      	bx	lr
 800cbb4:	20000128 	.word	0x20000128

0800cbb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800cbb8:	4a05      	ldr	r2, [pc, #20]	; (800cbd0 <vPortExitCritical+0x18>)
 800cbba:	6813      	ldr	r3, [r2, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d101      	bne.n	800cbc4 <vPortExitCritical+0xc>
 800cbc0:	b672      	cpsid	i
 800cbc2:	e7fe      	b.n	800cbc2 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d100      	bne.n	800cbce <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 800cbcc:	b662      	cpsie	i
	}
}
 800cbce:	4770      	bx	lr
 800cbd0:	20000128 	.word	0x20000128

0800cbd4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800cbd4:	f3ef 8010 	mrs	r0, PRIMASK
 800cbd8:	b672      	cpsid	i
 800cbda:	4770      	bx	lr

0800cbdc <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800cbdc:	f380 8810 	msr	PRIMASK, r0
 800cbe0:	4770      	bx	lr
 800cbe2:	46c0      	nop			; (mov r8, r8)
	...

0800cbf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbf0:	f3ef 8009 	mrs	r0, PSP
 800cbf4:	4b0e      	ldr	r3, [pc, #56]	; (800cc30 <pxCurrentTCBConst>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	3820      	subs	r0, #32
 800cbfa:	6010      	str	r0, [r2, #0]
 800cbfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800cbfe:	4644      	mov	r4, r8
 800cc00:	464d      	mov	r5, r9
 800cc02:	4656      	mov	r6, sl
 800cc04:	465f      	mov	r7, fp
 800cc06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800cc08:	b508      	push	{r3, lr}
 800cc0a:	b672      	cpsid	i
 800cc0c:	f7ff fc40 	bl	800c490 <vTaskSwitchContext>
 800cc10:	b662      	cpsie	i
 800cc12:	bc0c      	pop	{r2, r3}
 800cc14:	6811      	ldr	r1, [r2, #0]
 800cc16:	6808      	ldr	r0, [r1, #0]
 800cc18:	3010      	adds	r0, #16
 800cc1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800cc1c:	46a0      	mov	r8, r4
 800cc1e:	46a9      	mov	r9, r5
 800cc20:	46b2      	mov	sl, r6
 800cc22:	46bb      	mov	fp, r7
 800cc24:	f380 8809 	msr	PSP, r0
 800cc28:	3820      	subs	r0, #32
 800cc2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800cc2c:	4718      	bx	r3
 800cc2e:	46c0      	nop			; (mov r8, r8)

0800cc30 <pxCurrentTCBConst>:
 800cc30:	200054ac 	.word	0x200054ac

0800cc34 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc34:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc36:	f7ff ffcd 	bl	800cbd4 <ulSetInterruptMaskFromISR>
 800cc3a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc3c:	f7ff fab4 	bl	800c1a8 <xTaskIncrementTick>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d003      	beq.n	800cc4c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc44:	2280      	movs	r2, #128	; 0x80
 800cc46:	4b03      	ldr	r3, [pc, #12]	; (800cc54 <xPortSysTickHandler+0x20>)
 800cc48:	0552      	lsls	r2, r2, #21
 800cc4a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800cc4c:	0020      	movs	r0, r4
 800cc4e:	f7ff ffc5 	bl	800cbdc <vClearInterruptMaskFromISR>
}
 800cc52:	bd10      	pop	{r4, pc}
 800cc54:	e000ed04 	.word	0xe000ed04

0800cc58 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc58:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc5a:	21fa      	movs	r1, #250	; 0xfa
{
 800cc5c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc5e:	4a07      	ldr	r2, [pc, #28]	; (800cc7c <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc60:	4c07      	ldr	r4, [pc, #28]	; (800cc80 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc62:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc64:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc68:	4b06      	ldr	r3, [pc, #24]	; (800cc84 <vPortSetupTimerInterrupt+0x2c>)
 800cc6a:	6818      	ldr	r0, [r3, #0]
 800cc6c:	f7f3 fa68 	bl	8000140 <__udivsi3>
 800cc70:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <vPortSetupTimerInterrupt+0x30>)
 800cc72:	3801      	subs	r0, #1
 800cc74:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800cc76:	2307      	movs	r3, #7
 800cc78:	6023      	str	r3, [r4, #0]
}
 800cc7a:	bd10      	pop	{r4, pc}
 800cc7c:	e000e018 	.word	0xe000e018
 800cc80:	e000e010 	.word	0xe000e010
 800cc84:	2000011c 	.word	0x2000011c
 800cc88:	e000e014 	.word	0xe000e014

0800cc8c <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc8c:	22ff      	movs	r2, #255	; 0xff
 800cc8e:	4b11      	ldr	r3, [pc, #68]	; (800ccd4 <xPortStartScheduler+0x48>)
 800cc90:	0412      	lsls	r2, r2, #16
 800cc92:	6819      	ldr	r1, [r3, #0]
{
 800cc94:	b530      	push	{r4, r5, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc96:	430a      	orrs	r2, r1
 800cc98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc9a:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 800cc9c:	2500      	movs	r5, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc9e:	6819      	ldr	r1, [r3, #0]
 800cca0:	0612      	lsls	r2, r2, #24
 800cca2:	430a      	orrs	r2, r1
{
 800cca4:	b083      	sub	sp, #12
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cca6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800cca8:	f7ff ffd6 	bl	800cc58 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ccac:	4c0a      	ldr	r4, [pc, #40]	; (800ccd8 <xPortStartScheduler+0x4c>)
 800ccae:	6025      	str	r5, [r4, #0]
	vPortStartFirstTask();
 800ccb0:	f7ff ff3e 	bl	800cb30 <vPortStartFirstTask>
	vTaskSwitchContext();
 800ccb4:	f7ff fbec 	bl	800c490 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800ccb8:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0UL;
 800ccba:	9501      	str	r5, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	d001      	beq.n	800ccc4 <xPortStartScheduler+0x38>
 800ccc0:	b672      	cpsid	i
 800ccc2:	e7fe      	b.n	800ccc2 <xPortStartScheduler+0x36>
	portDISABLE_INTERRUPTS();
 800ccc4:	b672      	cpsid	i
	while( ulDummy == 0 )
 800ccc6:	9b01      	ldr	r3, [sp, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0fc      	beq.n	800ccc6 <xPortStartScheduler+0x3a>
}
 800cccc:	2000      	movs	r0, #0
 800ccce:	b003      	add	sp, #12
 800ccd0:	bd30      	pop	{r4, r5, pc}
 800ccd2:	46c0      	nop			; (mov r8, r8)
 800ccd4:	e000ed20 	.word	0xe000ed20
 800ccd8:	20000128 	.word	0x20000128

0800ccdc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ccdc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccde:	4b12      	ldr	r3, [pc, #72]	; (800cd28 <prvInsertBlockIntoFreeList+0x4c>)
 800cce0:	001a      	movs	r2, r3
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4283      	cmp	r3, r0
 800cce6:	d3fb      	bcc.n	800cce0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cce8:	6851      	ldr	r1, [r2, #4]
 800ccea:	1854      	adds	r4, r2, r1
 800ccec:	42a0      	cmp	r0, r4
 800ccee:	d012      	beq.n	800cd16 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccf0:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccf2:	1844      	adds	r4, r0, r1
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	d005      	beq.n	800cd04 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccf8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ccfa:	4282      	cmp	r2, r0
 800ccfc:	d000      	beq.n	800cd00 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccfe:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd00:	bd10      	pop	{r4, pc}
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd02:	0010      	movs	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd04:	4c09      	ldr	r4, [pc, #36]	; (800cd2c <prvInsertBlockIntoFreeList+0x50>)
 800cd06:	6824      	ldr	r4, [r4, #0]
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d0f5      	beq.n	800ccf8 <prvInsertBlockIntoFreeList+0x1c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd0c:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd0e:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd10:	1861      	adds	r1, r4, r1
 800cd12:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd14:	e7f0      	b.n	800ccf8 <prvInsertBlockIntoFreeList+0x1c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd16:	6840      	ldr	r0, [r0, #4]
 800cd18:	1809      	adds	r1, r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd1a:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd1c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd1e:	4283      	cmp	r3, r0
 800cd20:	d0ef      	beq.n	800cd02 <prvInsertBlockIntoFreeList+0x26>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd22:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800cd24:	e7ec      	b.n	800cd00 <prvInsertBlockIntoFreeList+0x24>
 800cd26:	46c0      	nop			; (mov r8, r8)
 800cd28:	200066ec 	.word	0x200066ec
 800cd2c:	20005ad4 	.word	0x20005ad4

0800cd30 <pvPortMalloc>:
{
 800cd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd32:	46c6      	mov	lr, r8
 800cd34:	b500      	push	{lr}
 800cd36:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800cd38:	f7ff fa28 	bl	800c18c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800cd3c:	4b3f      	ldr	r3, [pc, #252]	; (800ce3c <pvPortMalloc+0x10c>)
 800cd3e:	469c      	mov	ip, r3
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d054      	beq.n	800cdf0 <pvPortMalloc+0xc0>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd46:	4b3e      	ldr	r3, [pc, #248]	; (800ce40 <pvPortMalloc+0x110>)
 800cd48:	681d      	ldr	r5, [r3, #0]
 800cd4a:	4225      	tst	r5, r4
 800cd4c:	d12c      	bne.n	800cda8 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 800cd4e:	2c00      	cmp	r4, #0
 800cd50:	d02a      	beq.n	800cda8 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 800cd52:	0021      	movs	r1, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd54:	2307      	movs	r3, #7
				xWantedSize += xHeapStructSize;
 800cd56:	3108      	adds	r1, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd58:	420b      	tst	r3, r1
 800cd5a:	d001      	beq.n	800cd60 <pvPortMalloc+0x30>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd5c:	4399      	bics	r1, r3
 800cd5e:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd60:	2900      	cmp	r1, #0
 800cd62:	d021      	beq.n	800cda8 <pvPortMalloc+0x78>
 800cd64:	4f37      	ldr	r7, [pc, #220]	; (800ce44 <pvPortMalloc+0x114>)
 800cd66:	683e      	ldr	r6, [r7, #0]
 800cd68:	428e      	cmp	r6, r1
 800cd6a:	d31d      	bcc.n	800cda8 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800cd6c:	4836      	ldr	r0, [pc, #216]	; (800ce48 <pvPortMalloc+0x118>)
 800cd6e:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd70:	e004      	b.n	800cd7c <pvPortMalloc+0x4c>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d004      	beq.n	800cd82 <pvPortMalloc+0x52>
 800cd78:	0020      	movs	r0, r4
 800cd7a:	001c      	movs	r4, r3
 800cd7c:	6862      	ldr	r2, [r4, #4]
 800cd7e:	428a      	cmp	r2, r1
 800cd80:	d3f7      	bcc.n	800cd72 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800cd82:	4663      	mov	r3, ip
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	42a3      	cmp	r3, r4
 800cd88:	d00e      	beq.n	800cda8 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd8a:	6803      	ldr	r3, [r0, #0]
 800cd8c:	469c      	mov	ip, r3
 800cd8e:	2308      	movs	r3, #8
 800cd90:	4698      	mov	r8, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd92:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd94:	44e0      	add	r8, ip
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd96:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd98:	1a53      	subs	r3, r2, r1
 800cd9a:	2b10      	cmp	r3, #16
 800cd9c:	d911      	bls.n	800cdc2 <pvPortMalloc+0x92>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd9e:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cda0:	0742      	lsls	r2, r0, #29
 800cda2:	d009      	beq.n	800cdb8 <pvPortMalloc+0x88>
 800cda4:	b672      	cpsid	i
 800cda6:	e7fe      	b.n	800cda6 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800cda8:	f7ff fb48 	bl	800c43c <xTaskResumeAll>
 800cdac:	2300      	movs	r3, #0
 800cdae:	4698      	mov	r8, r3
}
 800cdb0:	4640      	mov	r0, r8
 800cdb2:	bc80      	pop	{r7}
 800cdb4:	46b8      	mov	r8, r7
 800cdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdb8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdba:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdbc:	f7ff ff8e 	bl	800ccdc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdc0:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdc2:	4b22      	ldr	r3, [pc, #136]	; (800ce4c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdc4:	1ab6      	subs	r6, r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdc6:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdc8:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdca:	428e      	cmp	r6, r1
 800cdcc:	d30e      	bcc.n	800cdec <pvPortMalloc+0xbc>
					pxBlock->pxNextFreeBlock = NULL;
 800cdce:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdd0:	4315      	orrs	r5, r2
					xNumberOfSuccessfulAllocations++;
 800cdd2:	4a1f      	ldr	r2, [pc, #124]	; (800ce50 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800cdd4:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800cdd6:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdd8:	6065      	str	r5, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 800cdda:	3301      	adds	r3, #1
 800cddc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800cdde:	f7ff fb2d 	bl	800c43c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cde2:	4643      	mov	r3, r8
 800cde4:	075b      	lsls	r3, r3, #29
 800cde6:	d0e3      	beq.n	800cdb0 <pvPortMalloc+0x80>
 800cde8:	b672      	cpsid	i
 800cdea:	e7fe      	b.n	800cdea <pvPortMalloc+0xba>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdec:	601e      	str	r6, [r3, #0]
 800cdee:	e7ee      	b.n	800cdce <pvPortMalloc+0x9e>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdf0:	2107      	movs	r1, #7
	uxAddress = ( size_t ) ucHeap;
 800cdf2:	4b18      	ldr	r3, [pc, #96]	; (800ce54 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdf4:	4219      	tst	r1, r3
 800cdf6:	d119      	bne.n	800ce2c <pvPortMalloc+0xfc>
 800cdf8:	22c0      	movs	r2, #192	; 0xc0
 800cdfa:	0019      	movs	r1, r3
 800cdfc:	0112      	lsls	r2, r2, #4
 800cdfe:	189a      	adds	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800ce00:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce02:	4d11      	ldr	r5, [pc, #68]	; (800ce48 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800ce04:	3a08      	subs	r2, #8
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce06:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce08:	6068      	str	r0, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce0a:	2507      	movs	r5, #7
 800ce0c:	43aa      	bics	r2, r5
	pxEnd = ( void * ) uxAddress;
 800ce0e:	4665      	mov	r5, ip
 800ce10:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce12:	2580      	movs	r5, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce14:	1ad3      	subs	r3, r2, r3
	pxEnd->pxNextFreeBlock = NULL;
 800ce16:	6010      	str	r0, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce18:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce1a:	c10c      	stmia	r1!, {r2, r3}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce1c:	4a0b      	ldr	r2, [pc, #44]	; (800ce4c <pvPortMalloc+0x11c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce1e:	062d      	lsls	r5, r5, #24
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce20:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce22:	4a08      	ldr	r2, [pc, #32]	; (800ce44 <pvPortMalloc+0x114>)
 800ce24:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce26:	4b06      	ldr	r3, [pc, #24]	; (800ce40 <pvPortMalloc+0x110>)
 800ce28:	601d      	str	r5, [r3, #0]
}
 800ce2a:	e78e      	b.n	800cd4a <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce2c:	22c0      	movs	r2, #192	; 0xc0
 800ce2e:	1dd8      	adds	r0, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce30:	0112      	lsls	r2, r2, #4
 800ce32:	189a      	adds	r2, r3, r2
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce34:	0003      	movs	r3, r0
 800ce36:	438b      	bics	r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce38:	0019      	movs	r1, r3
 800ce3a:	e7e1      	b.n	800ce00 <pvPortMalloc+0xd0>
 800ce3c:	20005ad4 	.word	0x20005ad4
 800ce40:	200066d8 	.word	0x200066d8
 800ce44:	200066dc 	.word	0x200066dc
 800ce48:	200066ec 	.word	0x200066ec
 800ce4c:	200066e0 	.word	0x200066e0
 800ce50:	200066e4 	.word	0x200066e4
 800ce54:	20005ad8 	.word	0x20005ad8

0800ce58 <vPortFree>:
{
 800ce58:	b510      	push	{r4, lr}
	if( pv != NULL )
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d01f      	beq.n	800ce9e <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce5e:	4a10      	ldr	r2, [pc, #64]	; (800cea0 <vPortFree+0x48>)
 800ce60:	3808      	subs	r0, #8
 800ce62:	6843      	ldr	r3, [r0, #4]
 800ce64:	6812      	ldr	r2, [r2, #0]
 800ce66:	0004      	movs	r4, r0
 800ce68:	421a      	tst	r2, r3
 800ce6a:	d004      	beq.n	800ce76 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce6c:	6801      	ldr	r1, [r0, #0]
 800ce6e:	2900      	cmp	r1, #0
 800ce70:	d003      	beq.n	800ce7a <vPortFree+0x22>
 800ce72:	b672      	cpsid	i
 800ce74:	e7fe      	b.n	800ce74 <vPortFree+0x1c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce76:	b672      	cpsid	i
 800ce78:	e7fe      	b.n	800ce78 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce7a:	4393      	bics	r3, r2
 800ce7c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800ce7e:	f7ff f985 	bl	800c18c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce82:	4a08      	ldr	r2, [pc, #32]	; (800cea4 <vPortFree+0x4c>)
 800ce84:	6863      	ldr	r3, [r4, #4]
 800ce86:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce88:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce8a:	185b      	adds	r3, r3, r1
 800ce8c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce8e:	f7ff ff25 	bl	800ccdc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce92:	4a05      	ldr	r2, [pc, #20]	; (800cea8 <vPortFree+0x50>)
 800ce94:	6813      	ldr	r3, [r2, #0]
 800ce96:	3301      	adds	r3, #1
 800ce98:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ce9a:	f7ff facf 	bl	800c43c <xTaskResumeAll>
}
 800ce9e:	bd10      	pop	{r4, pc}
 800cea0:	200066d8 	.word	0x200066d8
 800cea4:	200066dc 	.word	0x200066dc
 800cea8:	200066e8 	.word	0x200066e8

0800ceac <atoi>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	220a      	movs	r2, #10
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	f000 ff81 	bl	800ddb8 <strtol>
 800ceb6:	bd10      	pop	{r4, pc}

0800ceb8 <malloc>:
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	4b03      	ldr	r3, [pc, #12]	; (800cec8 <malloc+0x10>)
 800cebc:	0001      	movs	r1, r0
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	f000 f826 	bl	800cf10 <_malloc_r>
 800cec4:	bd10      	pop	{r4, pc}
 800cec6:	46c0      	nop			; (mov r8, r8)
 800cec8:	200002f0 	.word	0x200002f0

0800cecc <sbrk_aligned>:
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	4e0f      	ldr	r6, [pc, #60]	; (800cf0c <sbrk_aligned+0x40>)
 800ced0:	000d      	movs	r5, r1
 800ced2:	6831      	ldr	r1, [r6, #0]
 800ced4:	0004      	movs	r4, r0
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d102      	bne.n	800cee0 <sbrk_aligned+0x14>
 800ceda:	f002 f8cf 	bl	800f07c <_sbrk_r>
 800cede:	6030      	str	r0, [r6, #0]
 800cee0:	0029      	movs	r1, r5
 800cee2:	0020      	movs	r0, r4
 800cee4:	f002 f8ca 	bl	800f07c <_sbrk_r>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d00a      	beq.n	800cf02 <sbrk_aligned+0x36>
 800ceec:	2303      	movs	r3, #3
 800ceee:	1cc5      	adds	r5, r0, #3
 800cef0:	439d      	bics	r5, r3
 800cef2:	42a8      	cmp	r0, r5
 800cef4:	d007      	beq.n	800cf06 <sbrk_aligned+0x3a>
 800cef6:	1a29      	subs	r1, r5, r0
 800cef8:	0020      	movs	r0, r4
 800cefa:	f002 f8bf 	bl	800f07c <_sbrk_r>
 800cefe:	3001      	adds	r0, #1
 800cf00:	d101      	bne.n	800cf06 <sbrk_aligned+0x3a>
 800cf02:	2501      	movs	r5, #1
 800cf04:	426d      	negs	r5, r5
 800cf06:	0028      	movs	r0, r5
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
 800cf0a:	46c0      	nop			; (mov r8, r8)
 800cf0c:	200066f8 	.word	0x200066f8

0800cf10 <_malloc_r>:
 800cf10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf12:	2203      	movs	r2, #3
 800cf14:	1ccb      	adds	r3, r1, #3
 800cf16:	4393      	bics	r3, r2
 800cf18:	3308      	adds	r3, #8
 800cf1a:	0006      	movs	r6, r0
 800cf1c:	001f      	movs	r7, r3
 800cf1e:	2b0c      	cmp	r3, #12
 800cf20:	d238      	bcs.n	800cf94 <_malloc_r+0x84>
 800cf22:	270c      	movs	r7, #12
 800cf24:	42b9      	cmp	r1, r7
 800cf26:	d837      	bhi.n	800cf98 <_malloc_r+0x88>
 800cf28:	0030      	movs	r0, r6
 800cf2a:	f000 f873 	bl	800d014 <__malloc_lock>
 800cf2e:	4b38      	ldr	r3, [pc, #224]	; (800d010 <_malloc_r+0x100>)
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	001c      	movs	r4, r3
 800cf36:	2c00      	cmp	r4, #0
 800cf38:	d133      	bne.n	800cfa2 <_malloc_r+0x92>
 800cf3a:	0039      	movs	r1, r7
 800cf3c:	0030      	movs	r0, r6
 800cf3e:	f7ff ffc5 	bl	800cecc <sbrk_aligned>
 800cf42:	0004      	movs	r4, r0
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d15e      	bne.n	800d006 <_malloc_r+0xf6>
 800cf48:	9b00      	ldr	r3, [sp, #0]
 800cf4a:	681c      	ldr	r4, [r3, #0]
 800cf4c:	0025      	movs	r5, r4
 800cf4e:	2d00      	cmp	r5, #0
 800cf50:	d14e      	bne.n	800cff0 <_malloc_r+0xe0>
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	d051      	beq.n	800cffa <_malloc_r+0xea>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	0029      	movs	r1, r5
 800cf5a:	18e3      	adds	r3, r4, r3
 800cf5c:	0030      	movs	r0, r6
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	f002 f88c 	bl	800f07c <_sbrk_r>
 800cf64:	9b01      	ldr	r3, [sp, #4]
 800cf66:	4283      	cmp	r3, r0
 800cf68:	d147      	bne.n	800cffa <_malloc_r+0xea>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	0030      	movs	r0, r6
 800cf6e:	1aff      	subs	r7, r7, r3
 800cf70:	0039      	movs	r1, r7
 800cf72:	f7ff ffab 	bl	800cecc <sbrk_aligned>
 800cf76:	3001      	adds	r0, #1
 800cf78:	d03f      	beq.n	800cffa <_malloc_r+0xea>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	19db      	adds	r3, r3, r7
 800cf7e:	6023      	str	r3, [r4, #0]
 800cf80:	9b00      	ldr	r3, [sp, #0]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d040      	beq.n	800d00a <_malloc_r+0xfa>
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	42a2      	cmp	r2, r4
 800cf8c:	d133      	bne.n	800cff6 <_malloc_r+0xe6>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	605a      	str	r2, [r3, #4]
 800cf92:	e014      	b.n	800cfbe <_malloc_r+0xae>
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	dac5      	bge.n	800cf24 <_malloc_r+0x14>
 800cf98:	230c      	movs	r3, #12
 800cf9a:	2500      	movs	r5, #0
 800cf9c:	6033      	str	r3, [r6, #0]
 800cf9e:	0028      	movs	r0, r5
 800cfa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfa2:	6821      	ldr	r1, [r4, #0]
 800cfa4:	1bc9      	subs	r1, r1, r7
 800cfa6:	d420      	bmi.n	800cfea <_malloc_r+0xda>
 800cfa8:	290b      	cmp	r1, #11
 800cfaa:	d918      	bls.n	800cfde <_malloc_r+0xce>
 800cfac:	19e2      	adds	r2, r4, r7
 800cfae:	6027      	str	r7, [r4, #0]
 800cfb0:	42a3      	cmp	r3, r4
 800cfb2:	d112      	bne.n	800cfda <_malloc_r+0xca>
 800cfb4:	9b00      	ldr	r3, [sp, #0]
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	6863      	ldr	r3, [r4, #4]
 800cfba:	6011      	str	r1, [r2, #0]
 800cfbc:	6053      	str	r3, [r2, #4]
 800cfbe:	0030      	movs	r0, r6
 800cfc0:	0025      	movs	r5, r4
 800cfc2:	f000 f82f 	bl	800d024 <__malloc_unlock>
 800cfc6:	2207      	movs	r2, #7
 800cfc8:	350b      	adds	r5, #11
 800cfca:	1d23      	adds	r3, r4, #4
 800cfcc:	4395      	bics	r5, r2
 800cfce:	1aea      	subs	r2, r5, r3
 800cfd0:	429d      	cmp	r5, r3
 800cfd2:	d0e4      	beq.n	800cf9e <_malloc_r+0x8e>
 800cfd4:	1b5b      	subs	r3, r3, r5
 800cfd6:	50a3      	str	r3, [r4, r2]
 800cfd8:	e7e1      	b.n	800cf9e <_malloc_r+0x8e>
 800cfda:	605a      	str	r2, [r3, #4]
 800cfdc:	e7ec      	b.n	800cfb8 <_malloc_r+0xa8>
 800cfde:	6862      	ldr	r2, [r4, #4]
 800cfe0:	42a3      	cmp	r3, r4
 800cfe2:	d1d5      	bne.n	800cf90 <_malloc_r+0x80>
 800cfe4:	9b00      	ldr	r3, [sp, #0]
 800cfe6:	601a      	str	r2, [r3, #0]
 800cfe8:	e7e9      	b.n	800cfbe <_malloc_r+0xae>
 800cfea:	0023      	movs	r3, r4
 800cfec:	6864      	ldr	r4, [r4, #4]
 800cfee:	e7a2      	b.n	800cf36 <_malloc_r+0x26>
 800cff0:	002c      	movs	r4, r5
 800cff2:	686d      	ldr	r5, [r5, #4]
 800cff4:	e7ab      	b.n	800cf4e <_malloc_r+0x3e>
 800cff6:	0013      	movs	r3, r2
 800cff8:	e7c4      	b.n	800cf84 <_malloc_r+0x74>
 800cffa:	230c      	movs	r3, #12
 800cffc:	0030      	movs	r0, r6
 800cffe:	6033      	str	r3, [r6, #0]
 800d000:	f000 f810 	bl	800d024 <__malloc_unlock>
 800d004:	e7cb      	b.n	800cf9e <_malloc_r+0x8e>
 800d006:	6027      	str	r7, [r4, #0]
 800d008:	e7d9      	b.n	800cfbe <_malloc_r+0xae>
 800d00a:	605b      	str	r3, [r3, #4]
 800d00c:	deff      	udf	#255	; 0xff
 800d00e:	46c0      	nop			; (mov r8, r8)
 800d010:	200066f4 	.word	0x200066f4

0800d014 <__malloc_lock>:
 800d014:	b510      	push	{r4, lr}
 800d016:	4802      	ldr	r0, [pc, #8]	; (800d020 <__malloc_lock+0xc>)
 800d018:	f002 f881 	bl	800f11e <__retarget_lock_acquire_recursive>
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	46c0      	nop			; (mov r8, r8)
 800d020:	2000683c 	.word	0x2000683c

0800d024 <__malloc_unlock>:
 800d024:	b510      	push	{r4, lr}
 800d026:	4802      	ldr	r0, [pc, #8]	; (800d030 <__malloc_unlock+0xc>)
 800d028:	f002 f87a 	bl	800f120 <__retarget_lock_release_recursive>
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	46c0      	nop			; (mov r8, r8)
 800d030:	2000683c 	.word	0x2000683c

0800d034 <sulp>:
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	0016      	movs	r6, r2
 800d038:	000d      	movs	r5, r1
 800d03a:	f003 fe93 	bl	8010d64 <__ulp>
 800d03e:	2e00      	cmp	r6, #0
 800d040:	d00d      	beq.n	800d05e <sulp+0x2a>
 800d042:	236b      	movs	r3, #107	; 0x6b
 800d044:	006a      	lsls	r2, r5, #1
 800d046:	0d52      	lsrs	r2, r2, #21
 800d048:	1a9b      	subs	r3, r3, r2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	dd07      	ble.n	800d05e <sulp+0x2a>
 800d04e:	2400      	movs	r4, #0
 800d050:	4a03      	ldr	r2, [pc, #12]	; (800d060 <sulp+0x2c>)
 800d052:	051b      	lsls	r3, r3, #20
 800d054:	189d      	adds	r5, r3, r2
 800d056:	002b      	movs	r3, r5
 800d058:	0022      	movs	r2, r4
 800d05a:	f7f5 f93b 	bl	80022d4 <__aeabi_dmul>
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	3ff00000 	.word	0x3ff00000

0800d064 <_strtod_l>:
 800d064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d066:	b0a1      	sub	sp, #132	; 0x84
 800d068:	9219      	str	r2, [sp, #100]	; 0x64
 800d06a:	2200      	movs	r2, #0
 800d06c:	2600      	movs	r6, #0
 800d06e:	2700      	movs	r7, #0
 800d070:	9004      	str	r0, [sp, #16]
 800d072:	9107      	str	r1, [sp, #28]
 800d074:	921c      	str	r2, [sp, #112]	; 0x70
 800d076:	911b      	str	r1, [sp, #108]	; 0x6c
 800d078:	780a      	ldrb	r2, [r1, #0]
 800d07a:	2a2b      	cmp	r2, #43	; 0x2b
 800d07c:	d055      	beq.n	800d12a <_strtod_l+0xc6>
 800d07e:	d841      	bhi.n	800d104 <_strtod_l+0xa0>
 800d080:	2a0d      	cmp	r2, #13
 800d082:	d83b      	bhi.n	800d0fc <_strtod_l+0x98>
 800d084:	2a08      	cmp	r2, #8
 800d086:	d83b      	bhi.n	800d100 <_strtod_l+0x9c>
 800d088:	2a00      	cmp	r2, #0
 800d08a:	d044      	beq.n	800d116 <_strtod_l+0xb2>
 800d08c:	2200      	movs	r2, #0
 800d08e:	920f      	str	r2, [sp, #60]	; 0x3c
 800d090:	2100      	movs	r1, #0
 800d092:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d094:	9109      	str	r1, [sp, #36]	; 0x24
 800d096:	782a      	ldrb	r2, [r5, #0]
 800d098:	2a30      	cmp	r2, #48	; 0x30
 800d09a:	d000      	beq.n	800d09e <_strtod_l+0x3a>
 800d09c:	e085      	b.n	800d1aa <_strtod_l+0x146>
 800d09e:	786a      	ldrb	r2, [r5, #1]
 800d0a0:	3120      	adds	r1, #32
 800d0a2:	438a      	bics	r2, r1
 800d0a4:	2a58      	cmp	r2, #88	; 0x58
 800d0a6:	d000      	beq.n	800d0aa <_strtod_l+0x46>
 800d0a8:	e075      	b.n	800d196 <_strtod_l+0x132>
 800d0aa:	9302      	str	r3, [sp, #8]
 800d0ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0ae:	4a97      	ldr	r2, [pc, #604]	; (800d30c <_strtod_l+0x2a8>)
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	ab1c      	add	r3, sp, #112	; 0x70
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	9804      	ldr	r0, [sp, #16]
 800d0b8:	ab1d      	add	r3, sp, #116	; 0x74
 800d0ba:	a91b      	add	r1, sp, #108	; 0x6c
 800d0bc:	f002 ffc8 	bl	8010050 <__gethex>
 800d0c0:	230f      	movs	r3, #15
 800d0c2:	0002      	movs	r2, r0
 800d0c4:	401a      	ands	r2, r3
 800d0c6:	0004      	movs	r4, r0
 800d0c8:	9205      	str	r2, [sp, #20]
 800d0ca:	4218      	tst	r0, r3
 800d0cc:	d005      	beq.n	800d0da <_strtod_l+0x76>
 800d0ce:	2a06      	cmp	r2, #6
 800d0d0:	d12d      	bne.n	800d12e <_strtod_l+0xca>
 800d0d2:	1c6b      	adds	r3, r5, #1
 800d0d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <_strtod_l+0x82>
 800d0e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d0e4:	6013      	str	r3, [r2, #0]
 800d0e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d01b      	beq.n	800d124 <_strtod_l+0xc0>
 800d0ec:	2380      	movs	r3, #128	; 0x80
 800d0ee:	0032      	movs	r2, r6
 800d0f0:	061b      	lsls	r3, r3, #24
 800d0f2:	18fb      	adds	r3, r7, r3
 800d0f4:	0010      	movs	r0, r2
 800d0f6:	0019      	movs	r1, r3
 800d0f8:	b021      	add	sp, #132	; 0x84
 800d0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0fc:	2a20      	cmp	r2, #32
 800d0fe:	d1c5      	bne.n	800d08c <_strtod_l+0x28>
 800d100:	3101      	adds	r1, #1
 800d102:	e7b8      	b.n	800d076 <_strtod_l+0x12>
 800d104:	2a2d      	cmp	r2, #45	; 0x2d
 800d106:	d1c1      	bne.n	800d08c <_strtod_l+0x28>
 800d108:	3a2c      	subs	r2, #44	; 0x2c
 800d10a:	920f      	str	r2, [sp, #60]	; 0x3c
 800d10c:	1c4a      	adds	r2, r1, #1
 800d10e:	921b      	str	r2, [sp, #108]	; 0x6c
 800d110:	784a      	ldrb	r2, [r1, #1]
 800d112:	2a00      	cmp	r2, #0
 800d114:	d1bc      	bne.n	800d090 <_strtod_l+0x2c>
 800d116:	9b07      	ldr	r3, [sp, #28]
 800d118:	931b      	str	r3, [sp, #108]	; 0x6c
 800d11a:	2300      	movs	r3, #0
 800d11c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d11e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1dd      	bne.n	800d0e0 <_strtod_l+0x7c>
 800d124:	0032      	movs	r2, r6
 800d126:	003b      	movs	r3, r7
 800d128:	e7e4      	b.n	800d0f4 <_strtod_l+0x90>
 800d12a:	2200      	movs	r2, #0
 800d12c:	e7ed      	b.n	800d10a <_strtod_l+0xa6>
 800d12e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d130:	2a00      	cmp	r2, #0
 800d132:	d007      	beq.n	800d144 <_strtod_l+0xe0>
 800d134:	2135      	movs	r1, #53	; 0x35
 800d136:	a81e      	add	r0, sp, #120	; 0x78
 800d138:	f003 ff05 	bl	8010f46 <__copybits>
 800d13c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d13e:	9804      	ldr	r0, [sp, #16]
 800d140:	f003 face 	bl	80106e0 <_Bfree>
 800d144:	9805      	ldr	r0, [sp, #20]
 800d146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d148:	3801      	subs	r0, #1
 800d14a:	2804      	cmp	r0, #4
 800d14c:	d806      	bhi.n	800d15c <_strtod_l+0xf8>
 800d14e:	f7f2 ffe3 	bl	8000118 <__gnu_thumb1_case_uqi>
 800d152:	0312      	.short	0x0312
 800d154:	1e1c      	.short	0x1e1c
 800d156:	12          	.byte	0x12
 800d157:	00          	.byte	0x00
 800d158:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d15a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800d15c:	05e4      	lsls	r4, r4, #23
 800d15e:	d502      	bpl.n	800d166 <_strtod_l+0x102>
 800d160:	2380      	movs	r3, #128	; 0x80
 800d162:	061b      	lsls	r3, r3, #24
 800d164:	431f      	orrs	r7, r3
 800d166:	4b6a      	ldr	r3, [pc, #424]	; (800d310 <_strtod_l+0x2ac>)
 800d168:	423b      	tst	r3, r7
 800d16a:	d1b6      	bne.n	800d0da <_strtod_l+0x76>
 800d16c:	f001 ffac 	bl	800f0c8 <__errno>
 800d170:	2322      	movs	r3, #34	; 0x22
 800d172:	6003      	str	r3, [r0, #0]
 800d174:	e7b1      	b.n	800d0da <_strtod_l+0x76>
 800d176:	4967      	ldr	r1, [pc, #412]	; (800d314 <_strtod_l+0x2b0>)
 800d178:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d17a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d17c:	400a      	ands	r2, r1
 800d17e:	4966      	ldr	r1, [pc, #408]	; (800d318 <_strtod_l+0x2b4>)
 800d180:	185b      	adds	r3, r3, r1
 800d182:	051b      	lsls	r3, r3, #20
 800d184:	431a      	orrs	r2, r3
 800d186:	0017      	movs	r7, r2
 800d188:	e7e8      	b.n	800d15c <_strtod_l+0xf8>
 800d18a:	4f61      	ldr	r7, [pc, #388]	; (800d310 <_strtod_l+0x2ac>)
 800d18c:	e7e6      	b.n	800d15c <_strtod_l+0xf8>
 800d18e:	2601      	movs	r6, #1
 800d190:	4f62      	ldr	r7, [pc, #392]	; (800d31c <_strtod_l+0x2b8>)
 800d192:	4276      	negs	r6, r6
 800d194:	e7e2      	b.n	800d15c <_strtod_l+0xf8>
 800d196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d198:	1c5a      	adds	r2, r3, #1
 800d19a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d19c:	785b      	ldrb	r3, [r3, #1]
 800d19e:	2b30      	cmp	r3, #48	; 0x30
 800d1a0:	d0f9      	beq.n	800d196 <_strtod_l+0x132>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d099      	beq.n	800d0da <_strtod_l+0x76>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1aa:	2500      	movs	r5, #0
 800d1ac:	220a      	movs	r2, #10
 800d1ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1b0:	950d      	str	r5, [sp, #52]	; 0x34
 800d1b2:	9310      	str	r3, [sp, #64]	; 0x40
 800d1b4:	9508      	str	r5, [sp, #32]
 800d1b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d1b8:	7804      	ldrb	r4, [r0, #0]
 800d1ba:	0023      	movs	r3, r4
 800d1bc:	3b30      	subs	r3, #48	; 0x30
 800d1be:	b2d9      	uxtb	r1, r3
 800d1c0:	2909      	cmp	r1, #9
 800d1c2:	d927      	bls.n	800d214 <_strtod_l+0x1b0>
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	4956      	ldr	r1, [pc, #344]	; (800d320 <_strtod_l+0x2bc>)
 800d1c8:	f001 fe0f 	bl	800edea <strncmp>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d031      	beq.n	800d234 <_strtod_l+0x1d0>
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	0023      	movs	r3, r4
 800d1d4:	4684      	mov	ip, r0
 800d1d6:	9a08      	ldr	r2, [sp, #32]
 800d1d8:	900c      	str	r0, [sp, #48]	; 0x30
 800d1da:	9205      	str	r2, [sp, #20]
 800d1dc:	2220      	movs	r2, #32
 800d1de:	0019      	movs	r1, r3
 800d1e0:	4391      	bics	r1, r2
 800d1e2:	000a      	movs	r2, r1
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	9106      	str	r1, [sp, #24]
 800d1e8:	2a45      	cmp	r2, #69	; 0x45
 800d1ea:	d000      	beq.n	800d1ee <_strtod_l+0x18a>
 800d1ec:	e0c2      	b.n	800d374 <_strtod_l+0x310>
 800d1ee:	9b05      	ldr	r3, [sp, #20]
 800d1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f2:	4303      	orrs	r3, r0
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	428b      	cmp	r3, r1
 800d1f8:	d08d      	beq.n	800d116 <_strtod_l+0xb2>
 800d1fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1fc:	9307      	str	r3, [sp, #28]
 800d1fe:	3301      	adds	r3, #1
 800d200:	931b      	str	r3, [sp, #108]	; 0x6c
 800d202:	9b07      	ldr	r3, [sp, #28]
 800d204:	785b      	ldrb	r3, [r3, #1]
 800d206:	2b2b      	cmp	r3, #43	; 0x2b
 800d208:	d071      	beq.n	800d2ee <_strtod_l+0x28a>
 800d20a:	000c      	movs	r4, r1
 800d20c:	2b2d      	cmp	r3, #45	; 0x2d
 800d20e:	d174      	bne.n	800d2fa <_strtod_l+0x296>
 800d210:	2401      	movs	r4, #1
 800d212:	e06d      	b.n	800d2f0 <_strtod_l+0x28c>
 800d214:	9908      	ldr	r1, [sp, #32]
 800d216:	2908      	cmp	r1, #8
 800d218:	dc09      	bgt.n	800d22e <_strtod_l+0x1ca>
 800d21a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d21c:	4351      	muls	r1, r2
 800d21e:	185b      	adds	r3, r3, r1
 800d220:	930d      	str	r3, [sp, #52]	; 0x34
 800d222:	9b08      	ldr	r3, [sp, #32]
 800d224:	3001      	adds	r0, #1
 800d226:	3301      	adds	r3, #1
 800d228:	9308      	str	r3, [sp, #32]
 800d22a:	901b      	str	r0, [sp, #108]	; 0x6c
 800d22c:	e7c3      	b.n	800d1b6 <_strtod_l+0x152>
 800d22e:	4355      	muls	r5, r2
 800d230:	195d      	adds	r5, r3, r5
 800d232:	e7f6      	b.n	800d222 <_strtod_l+0x1be>
 800d234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	921b      	str	r2, [sp, #108]	; 0x6c
 800d23a:	9a08      	ldr	r2, [sp, #32]
 800d23c:	785b      	ldrb	r3, [r3, #1]
 800d23e:	2a00      	cmp	r2, #0
 800d240:	d03a      	beq.n	800d2b8 <_strtod_l+0x254>
 800d242:	900c      	str	r0, [sp, #48]	; 0x30
 800d244:	9205      	str	r2, [sp, #20]
 800d246:	001a      	movs	r2, r3
 800d248:	3a30      	subs	r2, #48	; 0x30
 800d24a:	2a09      	cmp	r2, #9
 800d24c:	d912      	bls.n	800d274 <_strtod_l+0x210>
 800d24e:	2201      	movs	r2, #1
 800d250:	4694      	mov	ip, r2
 800d252:	e7c3      	b.n	800d1dc <_strtod_l+0x178>
 800d254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d256:	3001      	adds	r0, #1
 800d258:	1c5a      	adds	r2, r3, #1
 800d25a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d25c:	785b      	ldrb	r3, [r3, #1]
 800d25e:	2b30      	cmp	r3, #48	; 0x30
 800d260:	d0f8      	beq.n	800d254 <_strtod_l+0x1f0>
 800d262:	001a      	movs	r2, r3
 800d264:	3a31      	subs	r2, #49	; 0x31
 800d266:	2a08      	cmp	r2, #8
 800d268:	d83c      	bhi.n	800d2e4 <_strtod_l+0x280>
 800d26a:	900c      	str	r0, [sp, #48]	; 0x30
 800d26c:	2000      	movs	r0, #0
 800d26e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d270:	9005      	str	r0, [sp, #20]
 800d272:	9210      	str	r2, [sp, #64]	; 0x40
 800d274:	001a      	movs	r2, r3
 800d276:	1c41      	adds	r1, r0, #1
 800d278:	3a30      	subs	r2, #48	; 0x30
 800d27a:	2b30      	cmp	r3, #48	; 0x30
 800d27c:	d016      	beq.n	800d2ac <_strtod_l+0x248>
 800d27e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d280:	185b      	adds	r3, r3, r1
 800d282:	930c      	str	r3, [sp, #48]	; 0x30
 800d284:	9b05      	ldr	r3, [sp, #20]
 800d286:	210a      	movs	r1, #10
 800d288:	469c      	mov	ip, r3
 800d28a:	4484      	add	ip, r0
 800d28c:	4563      	cmp	r3, ip
 800d28e:	d115      	bne.n	800d2bc <_strtod_l+0x258>
 800d290:	9905      	ldr	r1, [sp, #20]
 800d292:	9b05      	ldr	r3, [sp, #20]
 800d294:	3101      	adds	r1, #1
 800d296:	1809      	adds	r1, r1, r0
 800d298:	181b      	adds	r3, r3, r0
 800d29a:	9105      	str	r1, [sp, #20]
 800d29c:	2b08      	cmp	r3, #8
 800d29e:	dc19      	bgt.n	800d2d4 <_strtod_l+0x270>
 800d2a0:	230a      	movs	r3, #10
 800d2a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d2a4:	434b      	muls	r3, r1
 800d2a6:	2100      	movs	r1, #0
 800d2a8:	18d3      	adds	r3, r2, r3
 800d2aa:	930d      	str	r3, [sp, #52]	; 0x34
 800d2ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2ae:	0008      	movs	r0, r1
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800d2b4:	785b      	ldrb	r3, [r3, #1]
 800d2b6:	e7c6      	b.n	800d246 <_strtod_l+0x1e2>
 800d2b8:	9808      	ldr	r0, [sp, #32]
 800d2ba:	e7d0      	b.n	800d25e <_strtod_l+0x1fa>
 800d2bc:	1c5c      	adds	r4, r3, #1
 800d2be:	2b08      	cmp	r3, #8
 800d2c0:	dc04      	bgt.n	800d2cc <_strtod_l+0x268>
 800d2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c4:	434b      	muls	r3, r1
 800d2c6:	930d      	str	r3, [sp, #52]	; 0x34
 800d2c8:	0023      	movs	r3, r4
 800d2ca:	e7df      	b.n	800d28c <_strtod_l+0x228>
 800d2cc:	2c10      	cmp	r4, #16
 800d2ce:	dcfb      	bgt.n	800d2c8 <_strtod_l+0x264>
 800d2d0:	434d      	muls	r5, r1
 800d2d2:	e7f9      	b.n	800d2c8 <_strtod_l+0x264>
 800d2d4:	9b05      	ldr	r3, [sp, #20]
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	2b10      	cmp	r3, #16
 800d2da:	dce7      	bgt.n	800d2ac <_strtod_l+0x248>
 800d2dc:	230a      	movs	r3, #10
 800d2de:	435d      	muls	r5, r3
 800d2e0:	1955      	adds	r5, r2, r5
 800d2e2:	e7e3      	b.n	800d2ac <_strtod_l+0x248>
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	920c      	str	r2, [sp, #48]	; 0x30
 800d2e8:	9205      	str	r2, [sp, #20]
 800d2ea:	3201      	adds	r2, #1
 800d2ec:	e7b0      	b.n	800d250 <_strtod_l+0x1ec>
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	9b07      	ldr	r3, [sp, #28]
 800d2f2:	3302      	adds	r3, #2
 800d2f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2f6:	9b07      	ldr	r3, [sp, #28]
 800d2f8:	789b      	ldrb	r3, [r3, #2]
 800d2fa:	001a      	movs	r2, r3
 800d2fc:	3a30      	subs	r2, #48	; 0x30
 800d2fe:	2a09      	cmp	r2, #9
 800d300:	d914      	bls.n	800d32c <_strtod_l+0x2c8>
 800d302:	9a07      	ldr	r2, [sp, #28]
 800d304:	921b      	str	r2, [sp, #108]	; 0x6c
 800d306:	2200      	movs	r2, #0
 800d308:	e033      	b.n	800d372 <_strtod_l+0x30e>
 800d30a:	46c0      	nop			; (mov r8, r8)
 800d30c:	08013b9c 	.word	0x08013b9c
 800d310:	7ff00000 	.word	0x7ff00000
 800d314:	ffefffff 	.word	0xffefffff
 800d318:	00000433 	.word	0x00000433
 800d31c:	7fffffff 	.word	0x7fffffff
 800d320:	08013b98 	.word	0x08013b98
 800d324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d326:	1c5a      	adds	r2, r3, #1
 800d328:	921b      	str	r2, [sp, #108]	; 0x6c
 800d32a:	785b      	ldrb	r3, [r3, #1]
 800d32c:	2b30      	cmp	r3, #48	; 0x30
 800d32e:	d0f9      	beq.n	800d324 <_strtod_l+0x2c0>
 800d330:	2200      	movs	r2, #0
 800d332:	9206      	str	r2, [sp, #24]
 800d334:	001a      	movs	r2, r3
 800d336:	3a31      	subs	r2, #49	; 0x31
 800d338:	2a08      	cmp	r2, #8
 800d33a:	d81b      	bhi.n	800d374 <_strtod_l+0x310>
 800d33c:	3b30      	subs	r3, #48	; 0x30
 800d33e:	930e      	str	r3, [sp, #56]	; 0x38
 800d340:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d342:	9306      	str	r3, [sp, #24]
 800d344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d346:	1c59      	adds	r1, r3, #1
 800d348:	911b      	str	r1, [sp, #108]	; 0x6c
 800d34a:	785b      	ldrb	r3, [r3, #1]
 800d34c:	001a      	movs	r2, r3
 800d34e:	3a30      	subs	r2, #48	; 0x30
 800d350:	2a09      	cmp	r2, #9
 800d352:	d93a      	bls.n	800d3ca <_strtod_l+0x366>
 800d354:	9a06      	ldr	r2, [sp, #24]
 800d356:	1a8a      	subs	r2, r1, r2
 800d358:	49b2      	ldr	r1, [pc, #712]	; (800d624 <_strtod_l+0x5c0>)
 800d35a:	9106      	str	r1, [sp, #24]
 800d35c:	2a08      	cmp	r2, #8
 800d35e:	dc04      	bgt.n	800d36a <_strtod_l+0x306>
 800d360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d362:	9206      	str	r2, [sp, #24]
 800d364:	428a      	cmp	r2, r1
 800d366:	dd00      	ble.n	800d36a <_strtod_l+0x306>
 800d368:	9106      	str	r1, [sp, #24]
 800d36a:	2c00      	cmp	r4, #0
 800d36c:	d002      	beq.n	800d374 <_strtod_l+0x310>
 800d36e:	9a06      	ldr	r2, [sp, #24]
 800d370:	4252      	negs	r2, r2
 800d372:	9206      	str	r2, [sp, #24]
 800d374:	9a05      	ldr	r2, [sp, #20]
 800d376:	2a00      	cmp	r2, #0
 800d378:	d14d      	bne.n	800d416 <_strtod_l+0x3b2>
 800d37a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d37c:	4310      	orrs	r0, r2
 800d37e:	d000      	beq.n	800d382 <_strtod_l+0x31e>
 800d380:	e6ab      	b.n	800d0da <_strtod_l+0x76>
 800d382:	4662      	mov	r2, ip
 800d384:	2a00      	cmp	r2, #0
 800d386:	d000      	beq.n	800d38a <_strtod_l+0x326>
 800d388:	e6c5      	b.n	800d116 <_strtod_l+0xb2>
 800d38a:	2b69      	cmp	r3, #105	; 0x69
 800d38c:	d027      	beq.n	800d3de <_strtod_l+0x37a>
 800d38e:	dc23      	bgt.n	800d3d8 <_strtod_l+0x374>
 800d390:	2b49      	cmp	r3, #73	; 0x49
 800d392:	d024      	beq.n	800d3de <_strtod_l+0x37a>
 800d394:	2b4e      	cmp	r3, #78	; 0x4e
 800d396:	d000      	beq.n	800d39a <_strtod_l+0x336>
 800d398:	e6bd      	b.n	800d116 <_strtod_l+0xb2>
 800d39a:	49a3      	ldr	r1, [pc, #652]	; (800d628 <_strtod_l+0x5c4>)
 800d39c:	a81b      	add	r0, sp, #108	; 0x6c
 800d39e:	f003 f88d 	bl	80104bc <__match>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d100      	bne.n	800d3a8 <_strtod_l+0x344>
 800d3a6:	e6b6      	b.n	800d116 <_strtod_l+0xb2>
 800d3a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	2b28      	cmp	r3, #40	; 0x28
 800d3ae:	d12c      	bne.n	800d40a <_strtod_l+0x3a6>
 800d3b0:	499e      	ldr	r1, [pc, #632]	; (800d62c <_strtod_l+0x5c8>)
 800d3b2:	aa1e      	add	r2, sp, #120	; 0x78
 800d3b4:	a81b      	add	r0, sp, #108	; 0x6c
 800d3b6:	f003 f895 	bl	80104e4 <__hexnan>
 800d3ba:	2805      	cmp	r0, #5
 800d3bc:	d125      	bne.n	800d40a <_strtod_l+0x3a6>
 800d3be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3c0:	4a9b      	ldr	r2, [pc, #620]	; (800d630 <_strtod_l+0x5cc>)
 800d3c2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d3c4:	431a      	orrs	r2, r3
 800d3c6:	0017      	movs	r7, r2
 800d3c8:	e687      	b.n	800d0da <_strtod_l+0x76>
 800d3ca:	220a      	movs	r2, #10
 800d3cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d3ce:	434a      	muls	r2, r1
 800d3d0:	18d2      	adds	r2, r2, r3
 800d3d2:	3a30      	subs	r2, #48	; 0x30
 800d3d4:	920e      	str	r2, [sp, #56]	; 0x38
 800d3d6:	e7b5      	b.n	800d344 <_strtod_l+0x2e0>
 800d3d8:	2b6e      	cmp	r3, #110	; 0x6e
 800d3da:	d0de      	beq.n	800d39a <_strtod_l+0x336>
 800d3dc:	e69b      	b.n	800d116 <_strtod_l+0xb2>
 800d3de:	4995      	ldr	r1, [pc, #596]	; (800d634 <_strtod_l+0x5d0>)
 800d3e0:	a81b      	add	r0, sp, #108	; 0x6c
 800d3e2:	f003 f86b 	bl	80104bc <__match>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d100      	bne.n	800d3ec <_strtod_l+0x388>
 800d3ea:	e694      	b.n	800d116 <_strtod_l+0xb2>
 800d3ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3ee:	4992      	ldr	r1, [pc, #584]	; (800d638 <_strtod_l+0x5d4>)
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	a81b      	add	r0, sp, #108	; 0x6c
 800d3f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d3f6:	f003 f861 	bl	80104bc <__match>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	d102      	bne.n	800d404 <_strtod_l+0x3a0>
 800d3fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d400:	3301      	adds	r3, #1
 800d402:	931b      	str	r3, [sp, #108]	; 0x6c
 800d404:	2600      	movs	r6, #0
 800d406:	4f8a      	ldr	r7, [pc, #552]	; (800d630 <_strtod_l+0x5cc>)
 800d408:	e667      	b.n	800d0da <_strtod_l+0x76>
 800d40a:	488c      	ldr	r0, [pc, #560]	; (800d63c <_strtod_l+0x5d8>)
 800d40c:	f001 fea6 	bl	800f15c <nan>
 800d410:	0006      	movs	r6, r0
 800d412:	000f      	movs	r7, r1
 800d414:	e661      	b.n	800d0da <_strtod_l+0x76>
 800d416:	9b06      	ldr	r3, [sp, #24]
 800d418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d41a:	1a9b      	subs	r3, r3, r2
 800d41c:	9309      	str	r3, [sp, #36]	; 0x24
 800d41e:	9b08      	ldr	r3, [sp, #32]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <_strtod_l+0x3c4>
 800d424:	9b05      	ldr	r3, [sp, #20]
 800d426:	9308      	str	r3, [sp, #32]
 800d428:	9c05      	ldr	r4, [sp, #20]
 800d42a:	2c10      	cmp	r4, #16
 800d42c:	dd00      	ble.n	800d430 <_strtod_l+0x3cc>
 800d42e:	2410      	movs	r4, #16
 800d430:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d432:	f7f5 fe17 	bl	8003064 <__aeabi_ui2d>
 800d436:	9b05      	ldr	r3, [sp, #20]
 800d438:	0006      	movs	r6, r0
 800d43a:	000f      	movs	r7, r1
 800d43c:	2b09      	cmp	r3, #9
 800d43e:	dd15      	ble.n	800d46c <_strtod_l+0x408>
 800d440:	0022      	movs	r2, r4
 800d442:	4b7f      	ldr	r3, [pc, #508]	; (800d640 <_strtod_l+0x5dc>)
 800d444:	3a09      	subs	r2, #9
 800d446:	00d2      	lsls	r2, r2, #3
 800d448:	189b      	adds	r3, r3, r2
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	f7f4 ff41 	bl	80022d4 <__aeabi_dmul>
 800d452:	0006      	movs	r6, r0
 800d454:	0028      	movs	r0, r5
 800d456:	000f      	movs	r7, r1
 800d458:	f7f5 fe04 	bl	8003064 <__aeabi_ui2d>
 800d45c:	0002      	movs	r2, r0
 800d45e:	000b      	movs	r3, r1
 800d460:	0030      	movs	r0, r6
 800d462:	0039      	movs	r1, r7
 800d464:	f7f3 ffdc 	bl	8001420 <__aeabi_dadd>
 800d468:	0006      	movs	r6, r0
 800d46a:	000f      	movs	r7, r1
 800d46c:	9b05      	ldr	r3, [sp, #20]
 800d46e:	2b0f      	cmp	r3, #15
 800d470:	dc39      	bgt.n	800d4e6 <_strtod_l+0x482>
 800d472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d474:	2b00      	cmp	r3, #0
 800d476:	d100      	bne.n	800d47a <_strtod_l+0x416>
 800d478:	e62f      	b.n	800d0da <_strtod_l+0x76>
 800d47a:	dd24      	ble.n	800d4c6 <_strtod_l+0x462>
 800d47c:	2b16      	cmp	r3, #22
 800d47e:	dc09      	bgt.n	800d494 <_strtod_l+0x430>
 800d480:	496f      	ldr	r1, [pc, #444]	; (800d640 <_strtod_l+0x5dc>)
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	18c9      	adds	r1, r1, r3
 800d486:	0032      	movs	r2, r6
 800d488:	6808      	ldr	r0, [r1, #0]
 800d48a:	6849      	ldr	r1, [r1, #4]
 800d48c:	003b      	movs	r3, r7
 800d48e:	f7f4 ff21 	bl	80022d4 <__aeabi_dmul>
 800d492:	e7bd      	b.n	800d410 <_strtod_l+0x3ac>
 800d494:	2325      	movs	r3, #37	; 0x25
 800d496:	9a05      	ldr	r2, [sp, #20]
 800d498:	1a9b      	subs	r3, r3, r2
 800d49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d49c:	4293      	cmp	r3, r2
 800d49e:	db22      	blt.n	800d4e6 <_strtod_l+0x482>
 800d4a0:	240f      	movs	r4, #15
 800d4a2:	9b05      	ldr	r3, [sp, #20]
 800d4a4:	4d66      	ldr	r5, [pc, #408]	; (800d640 <_strtod_l+0x5dc>)
 800d4a6:	1ae4      	subs	r4, r4, r3
 800d4a8:	00e1      	lsls	r1, r4, #3
 800d4aa:	1869      	adds	r1, r5, r1
 800d4ac:	0032      	movs	r2, r6
 800d4ae:	6808      	ldr	r0, [r1, #0]
 800d4b0:	6849      	ldr	r1, [r1, #4]
 800d4b2:	003b      	movs	r3, r7
 800d4b4:	f7f4 ff0e 	bl	80022d4 <__aeabi_dmul>
 800d4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ba:	1b1c      	subs	r4, r3, r4
 800d4bc:	00e4      	lsls	r4, r4, #3
 800d4be:	192d      	adds	r5, r5, r4
 800d4c0:	682a      	ldr	r2, [r5, #0]
 800d4c2:	686b      	ldr	r3, [r5, #4]
 800d4c4:	e7e3      	b.n	800d48e <_strtod_l+0x42a>
 800d4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c8:	3316      	adds	r3, #22
 800d4ca:	db0c      	blt.n	800d4e6 <_strtod_l+0x482>
 800d4cc:	9906      	ldr	r1, [sp, #24]
 800d4ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4d0:	4b5b      	ldr	r3, [pc, #364]	; (800d640 <_strtod_l+0x5dc>)
 800d4d2:	1a52      	subs	r2, r2, r1
 800d4d4:	00d2      	lsls	r2, r2, #3
 800d4d6:	189b      	adds	r3, r3, r2
 800d4d8:	0030      	movs	r0, r6
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	0039      	movs	r1, r7
 800d4e0:	f7f4 fafe 	bl	8001ae0 <__aeabi_ddiv>
 800d4e4:	e794      	b.n	800d410 <_strtod_l+0x3ac>
 800d4e6:	9b05      	ldr	r3, [sp, #20]
 800d4e8:	1b1c      	subs	r4, r3, r4
 800d4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ec:	18e4      	adds	r4, r4, r3
 800d4ee:	2c00      	cmp	r4, #0
 800d4f0:	dd72      	ble.n	800d5d8 <_strtod_l+0x574>
 800d4f2:	220f      	movs	r2, #15
 800d4f4:	0023      	movs	r3, r4
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	4214      	tst	r4, r2
 800d4fa:	d00a      	beq.n	800d512 <_strtod_l+0x4ae>
 800d4fc:	4950      	ldr	r1, [pc, #320]	; (800d640 <_strtod_l+0x5dc>)
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	18c9      	adds	r1, r1, r3
 800d502:	0032      	movs	r2, r6
 800d504:	6808      	ldr	r0, [r1, #0]
 800d506:	6849      	ldr	r1, [r1, #4]
 800d508:	003b      	movs	r3, r7
 800d50a:	f7f4 fee3 	bl	80022d4 <__aeabi_dmul>
 800d50e:	0006      	movs	r6, r0
 800d510:	000f      	movs	r7, r1
 800d512:	230f      	movs	r3, #15
 800d514:	439c      	bics	r4, r3
 800d516:	d04a      	beq.n	800d5ae <_strtod_l+0x54a>
 800d518:	3326      	adds	r3, #38	; 0x26
 800d51a:	33ff      	adds	r3, #255	; 0xff
 800d51c:	429c      	cmp	r4, r3
 800d51e:	dd22      	ble.n	800d566 <_strtod_l+0x502>
 800d520:	2300      	movs	r3, #0
 800d522:	9305      	str	r3, [sp, #20]
 800d524:	9306      	str	r3, [sp, #24]
 800d526:	930d      	str	r3, [sp, #52]	; 0x34
 800d528:	9308      	str	r3, [sp, #32]
 800d52a:	2322      	movs	r3, #34	; 0x22
 800d52c:	2600      	movs	r6, #0
 800d52e:	9a04      	ldr	r2, [sp, #16]
 800d530:	4f3f      	ldr	r7, [pc, #252]	; (800d630 <_strtod_l+0x5cc>)
 800d532:	6013      	str	r3, [r2, #0]
 800d534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d536:	42b3      	cmp	r3, r6
 800d538:	d100      	bne.n	800d53c <_strtod_l+0x4d8>
 800d53a:	e5ce      	b.n	800d0da <_strtod_l+0x76>
 800d53c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d53e:	9804      	ldr	r0, [sp, #16]
 800d540:	f003 f8ce 	bl	80106e0 <_Bfree>
 800d544:	9908      	ldr	r1, [sp, #32]
 800d546:	9804      	ldr	r0, [sp, #16]
 800d548:	f003 f8ca 	bl	80106e0 <_Bfree>
 800d54c:	9906      	ldr	r1, [sp, #24]
 800d54e:	9804      	ldr	r0, [sp, #16]
 800d550:	f003 f8c6 	bl	80106e0 <_Bfree>
 800d554:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d556:	9804      	ldr	r0, [sp, #16]
 800d558:	f003 f8c2 	bl	80106e0 <_Bfree>
 800d55c:	9905      	ldr	r1, [sp, #20]
 800d55e:	9804      	ldr	r0, [sp, #16]
 800d560:	f003 f8be 	bl	80106e0 <_Bfree>
 800d564:	e5b9      	b.n	800d0da <_strtod_l+0x76>
 800d566:	2300      	movs	r3, #0
 800d568:	0030      	movs	r0, r6
 800d56a:	0039      	movs	r1, r7
 800d56c:	4d35      	ldr	r5, [pc, #212]	; (800d644 <_strtod_l+0x5e0>)
 800d56e:	1124      	asrs	r4, r4, #4
 800d570:	9307      	str	r3, [sp, #28]
 800d572:	2c01      	cmp	r4, #1
 800d574:	dc1e      	bgt.n	800d5b4 <_strtod_l+0x550>
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <_strtod_l+0x51a>
 800d57a:	0006      	movs	r6, r0
 800d57c:	000f      	movs	r7, r1
 800d57e:	4b32      	ldr	r3, [pc, #200]	; (800d648 <_strtod_l+0x5e4>)
 800d580:	9a07      	ldr	r2, [sp, #28]
 800d582:	18ff      	adds	r7, r7, r3
 800d584:	4b2f      	ldr	r3, [pc, #188]	; (800d644 <_strtod_l+0x5e0>)
 800d586:	00d2      	lsls	r2, r2, #3
 800d588:	189d      	adds	r5, r3, r2
 800d58a:	6828      	ldr	r0, [r5, #0]
 800d58c:	6869      	ldr	r1, [r5, #4]
 800d58e:	0032      	movs	r2, r6
 800d590:	003b      	movs	r3, r7
 800d592:	f7f4 fe9f 	bl	80022d4 <__aeabi_dmul>
 800d596:	4b26      	ldr	r3, [pc, #152]	; (800d630 <_strtod_l+0x5cc>)
 800d598:	4a2c      	ldr	r2, [pc, #176]	; (800d64c <_strtod_l+0x5e8>)
 800d59a:	0006      	movs	r6, r0
 800d59c:	400b      	ands	r3, r1
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d8be      	bhi.n	800d520 <_strtod_l+0x4bc>
 800d5a2:	4a2b      	ldr	r2, [pc, #172]	; (800d650 <_strtod_l+0x5ec>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d913      	bls.n	800d5d0 <_strtod_l+0x56c>
 800d5a8:	2601      	movs	r6, #1
 800d5aa:	4f2a      	ldr	r7, [pc, #168]	; (800d654 <_strtod_l+0x5f0>)
 800d5ac:	4276      	negs	r6, r6
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	9307      	str	r3, [sp, #28]
 800d5b2:	e088      	b.n	800d6c6 <_strtod_l+0x662>
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	4214      	tst	r4, r2
 800d5b8:	d004      	beq.n	800d5c4 <_strtod_l+0x560>
 800d5ba:	682a      	ldr	r2, [r5, #0]
 800d5bc:	686b      	ldr	r3, [r5, #4]
 800d5be:	f7f4 fe89 	bl	80022d4 <__aeabi_dmul>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	9a07      	ldr	r2, [sp, #28]
 800d5c6:	1064      	asrs	r4, r4, #1
 800d5c8:	3201      	adds	r2, #1
 800d5ca:	9207      	str	r2, [sp, #28]
 800d5cc:	3508      	adds	r5, #8
 800d5ce:	e7d0      	b.n	800d572 <_strtod_l+0x50e>
 800d5d0:	23d4      	movs	r3, #212	; 0xd4
 800d5d2:	049b      	lsls	r3, r3, #18
 800d5d4:	18cf      	adds	r7, r1, r3
 800d5d6:	e7ea      	b.n	800d5ae <_strtod_l+0x54a>
 800d5d8:	2c00      	cmp	r4, #0
 800d5da:	d0e8      	beq.n	800d5ae <_strtod_l+0x54a>
 800d5dc:	4264      	negs	r4, r4
 800d5de:	230f      	movs	r3, #15
 800d5e0:	0022      	movs	r2, r4
 800d5e2:	401a      	ands	r2, r3
 800d5e4:	421c      	tst	r4, r3
 800d5e6:	d00a      	beq.n	800d5fe <_strtod_l+0x59a>
 800d5e8:	4b15      	ldr	r3, [pc, #84]	; (800d640 <_strtod_l+0x5dc>)
 800d5ea:	00d2      	lsls	r2, r2, #3
 800d5ec:	189b      	adds	r3, r3, r2
 800d5ee:	0030      	movs	r0, r6
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	0039      	movs	r1, r7
 800d5f6:	f7f4 fa73 	bl	8001ae0 <__aeabi_ddiv>
 800d5fa:	0006      	movs	r6, r0
 800d5fc:	000f      	movs	r7, r1
 800d5fe:	1124      	asrs	r4, r4, #4
 800d600:	d0d5      	beq.n	800d5ae <_strtod_l+0x54a>
 800d602:	2c1f      	cmp	r4, #31
 800d604:	dd28      	ble.n	800d658 <_strtod_l+0x5f4>
 800d606:	2300      	movs	r3, #0
 800d608:	9305      	str	r3, [sp, #20]
 800d60a:	9306      	str	r3, [sp, #24]
 800d60c:	930d      	str	r3, [sp, #52]	; 0x34
 800d60e:	9308      	str	r3, [sp, #32]
 800d610:	2322      	movs	r3, #34	; 0x22
 800d612:	9a04      	ldr	r2, [sp, #16]
 800d614:	2600      	movs	r6, #0
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d61a:	2700      	movs	r7, #0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d18d      	bne.n	800d53c <_strtod_l+0x4d8>
 800d620:	e55b      	b.n	800d0da <_strtod_l+0x76>
 800d622:	46c0      	nop			; (mov r8, r8)
 800d624:	00004e1f 	.word	0x00004e1f
 800d628:	08013cfe 	.word	0x08013cfe
 800d62c:	08013bb0 	.word	0x08013bb0
 800d630:	7ff00000 	.word	0x7ff00000
 800d634:	08013cf6 	.word	0x08013cf6
 800d638:	08013de2 	.word	0x08013de2
 800d63c:	08013dde 	.word	0x08013dde
 800d640:	08013f38 	.word	0x08013f38
 800d644:	08013f10 	.word	0x08013f10
 800d648:	fcb00000 	.word	0xfcb00000
 800d64c:	7ca00000 	.word	0x7ca00000
 800d650:	7c900000 	.word	0x7c900000
 800d654:	7fefffff 	.word	0x7fefffff
 800d658:	2310      	movs	r3, #16
 800d65a:	0022      	movs	r2, r4
 800d65c:	401a      	ands	r2, r3
 800d65e:	9207      	str	r2, [sp, #28]
 800d660:	421c      	tst	r4, r3
 800d662:	d001      	beq.n	800d668 <_strtod_l+0x604>
 800d664:	335a      	adds	r3, #90	; 0x5a
 800d666:	9307      	str	r3, [sp, #28]
 800d668:	0030      	movs	r0, r6
 800d66a:	0039      	movs	r1, r7
 800d66c:	2300      	movs	r3, #0
 800d66e:	4dc4      	ldr	r5, [pc, #784]	; (800d980 <_strtod_l+0x91c>)
 800d670:	2201      	movs	r2, #1
 800d672:	4214      	tst	r4, r2
 800d674:	d004      	beq.n	800d680 <_strtod_l+0x61c>
 800d676:	682a      	ldr	r2, [r5, #0]
 800d678:	686b      	ldr	r3, [r5, #4]
 800d67a:	f7f4 fe2b 	bl	80022d4 <__aeabi_dmul>
 800d67e:	2301      	movs	r3, #1
 800d680:	1064      	asrs	r4, r4, #1
 800d682:	3508      	adds	r5, #8
 800d684:	2c00      	cmp	r4, #0
 800d686:	d1f3      	bne.n	800d670 <_strtod_l+0x60c>
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <_strtod_l+0x62c>
 800d68c:	0006      	movs	r6, r0
 800d68e:	000f      	movs	r7, r1
 800d690:	9b07      	ldr	r3, [sp, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00f      	beq.n	800d6b6 <_strtod_l+0x652>
 800d696:	236b      	movs	r3, #107	; 0x6b
 800d698:	007a      	lsls	r2, r7, #1
 800d69a:	0d52      	lsrs	r2, r2, #21
 800d69c:	0039      	movs	r1, r7
 800d69e:	1a9b      	subs	r3, r3, r2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	dd08      	ble.n	800d6b6 <_strtod_l+0x652>
 800d6a4:	2b1f      	cmp	r3, #31
 800d6a6:	dc00      	bgt.n	800d6aa <_strtod_l+0x646>
 800d6a8:	e121      	b.n	800d8ee <_strtod_l+0x88a>
 800d6aa:	2600      	movs	r6, #0
 800d6ac:	2b34      	cmp	r3, #52	; 0x34
 800d6ae:	dc00      	bgt.n	800d6b2 <_strtod_l+0x64e>
 800d6b0:	e116      	b.n	800d8e0 <_strtod_l+0x87c>
 800d6b2:	27dc      	movs	r7, #220	; 0xdc
 800d6b4:	04bf      	lsls	r7, r7, #18
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	0030      	movs	r0, r6
 800d6bc:	0039      	movs	r1, r7
 800d6be:	f7f2 fec5 	bl	800044c <__aeabi_dcmpeq>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d19f      	bne.n	800d606 <_strtod_l+0x5a2>
 800d6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6c8:	9a08      	ldr	r2, [sp, #32]
 800d6ca:	9300      	str	r3, [sp, #0]
 800d6cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d6ce:	9b05      	ldr	r3, [sp, #20]
 800d6d0:	9804      	ldr	r0, [sp, #16]
 800d6d2:	f003 f86d 	bl	80107b0 <__s2b>
 800d6d6:	900d      	str	r0, [sp, #52]	; 0x34
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d100      	bne.n	800d6de <_strtod_l+0x67a>
 800d6dc:	e720      	b.n	800d520 <_strtod_l+0x4bc>
 800d6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e0:	9906      	ldr	r1, [sp, #24]
 800d6e2:	17da      	asrs	r2, r3, #31
 800d6e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6e6:	1a5b      	subs	r3, r3, r1
 800d6e8:	401a      	ands	r2, r3
 800d6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ec:	9215      	str	r2, [sp, #84]	; 0x54
 800d6ee:	43db      	mvns	r3, r3
 800d6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6f2:	17db      	asrs	r3, r3, #31
 800d6f4:	401a      	ands	r2, r3
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	9218      	str	r2, [sp, #96]	; 0x60
 800d6fa:	9305      	str	r3, [sp, #20]
 800d6fc:	9306      	str	r3, [sp, #24]
 800d6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d700:	9804      	ldr	r0, [sp, #16]
 800d702:	6859      	ldr	r1, [r3, #4]
 800d704:	f002 ffa8 	bl	8010658 <_Balloc>
 800d708:	9008      	str	r0, [sp, #32]
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d100      	bne.n	800d710 <_strtod_l+0x6ac>
 800d70e:	e70c      	b.n	800d52a <_strtod_l+0x4c6>
 800d710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d712:	300c      	adds	r0, #12
 800d714:	0019      	movs	r1, r3
 800d716:	691a      	ldr	r2, [r3, #16]
 800d718:	310c      	adds	r1, #12
 800d71a:	3202      	adds	r2, #2
 800d71c:	0092      	lsls	r2, r2, #2
 800d71e:	f001 fd13 	bl	800f148 <memcpy>
 800d722:	ab1e      	add	r3, sp, #120	; 0x78
 800d724:	9301      	str	r3, [sp, #4]
 800d726:	ab1d      	add	r3, sp, #116	; 0x74
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	0032      	movs	r2, r6
 800d72c:	003b      	movs	r3, r7
 800d72e:	9804      	ldr	r0, [sp, #16]
 800d730:	9610      	str	r6, [sp, #64]	; 0x40
 800d732:	9711      	str	r7, [sp, #68]	; 0x44
 800d734:	f003 fb7e 	bl	8010e34 <__d2b>
 800d738:	901c      	str	r0, [sp, #112]	; 0x70
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d100      	bne.n	800d740 <_strtod_l+0x6dc>
 800d73e:	e6f4      	b.n	800d52a <_strtod_l+0x4c6>
 800d740:	2101      	movs	r1, #1
 800d742:	9804      	ldr	r0, [sp, #16]
 800d744:	f003 f8c8 	bl	80108d8 <__i2b>
 800d748:	9006      	str	r0, [sp, #24]
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d100      	bne.n	800d750 <_strtod_l+0x6ec>
 800d74e:	e6ec      	b.n	800d52a <_strtod_l+0x4c6>
 800d750:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d754:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d756:	1ad4      	subs	r4, r2, r3
 800d758:	2b00      	cmp	r3, #0
 800d75a:	db01      	blt.n	800d760 <_strtod_l+0x6fc>
 800d75c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d75e:	195d      	adds	r5, r3, r5
 800d760:	9907      	ldr	r1, [sp, #28]
 800d762:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d764:	1a5b      	subs	r3, r3, r1
 800d766:	2136      	movs	r1, #54	; 0x36
 800d768:	189b      	adds	r3, r3, r2
 800d76a:	1a8a      	subs	r2, r1, r2
 800d76c:	4985      	ldr	r1, [pc, #532]	; (800d984 <_strtod_l+0x920>)
 800d76e:	2001      	movs	r0, #1
 800d770:	468c      	mov	ip, r1
 800d772:	2100      	movs	r1, #0
 800d774:	3b01      	subs	r3, #1
 800d776:	9114      	str	r1, [sp, #80]	; 0x50
 800d778:	9012      	str	r0, [sp, #72]	; 0x48
 800d77a:	4563      	cmp	r3, ip
 800d77c:	da07      	bge.n	800d78e <_strtod_l+0x72a>
 800d77e:	4661      	mov	r1, ip
 800d780:	1ac9      	subs	r1, r1, r3
 800d782:	1a52      	subs	r2, r2, r1
 800d784:	291f      	cmp	r1, #31
 800d786:	dd00      	ble.n	800d78a <_strtod_l+0x726>
 800d788:	e0b6      	b.n	800d8f8 <_strtod_l+0x894>
 800d78a:	4088      	lsls	r0, r1
 800d78c:	9012      	str	r0, [sp, #72]	; 0x48
 800d78e:	18ab      	adds	r3, r5, r2
 800d790:	930c      	str	r3, [sp, #48]	; 0x30
 800d792:	18a4      	adds	r4, r4, r2
 800d794:	9b07      	ldr	r3, [sp, #28]
 800d796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d798:	191c      	adds	r4, r3, r4
 800d79a:	002b      	movs	r3, r5
 800d79c:	4295      	cmp	r5, r2
 800d79e:	dd00      	ble.n	800d7a2 <_strtod_l+0x73e>
 800d7a0:	0013      	movs	r3, r2
 800d7a2:	42a3      	cmp	r3, r4
 800d7a4:	dd00      	ble.n	800d7a8 <_strtod_l+0x744>
 800d7a6:	0023      	movs	r3, r4
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dd04      	ble.n	800d7b6 <_strtod_l+0x752>
 800d7ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7ae:	1ae4      	subs	r4, r4, r3
 800d7b0:	1ad2      	subs	r2, r2, r3
 800d7b2:	920c      	str	r2, [sp, #48]	; 0x30
 800d7b4:	1aed      	subs	r5, r5, r3
 800d7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	dd17      	ble.n	800d7ec <_strtod_l+0x788>
 800d7bc:	001a      	movs	r2, r3
 800d7be:	9906      	ldr	r1, [sp, #24]
 800d7c0:	9804      	ldr	r0, [sp, #16]
 800d7c2:	f003 f951 	bl	8010a68 <__pow5mult>
 800d7c6:	9006      	str	r0, [sp, #24]
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d100      	bne.n	800d7ce <_strtod_l+0x76a>
 800d7cc:	e6ad      	b.n	800d52a <_strtod_l+0x4c6>
 800d7ce:	0001      	movs	r1, r0
 800d7d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d7d2:	9804      	ldr	r0, [sp, #16]
 800d7d4:	f003 f898 	bl	8010908 <__multiply>
 800d7d8:	900e      	str	r0, [sp, #56]	; 0x38
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d100      	bne.n	800d7e0 <_strtod_l+0x77c>
 800d7de:	e6a4      	b.n	800d52a <_strtod_l+0x4c6>
 800d7e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7e2:	9804      	ldr	r0, [sp, #16]
 800d7e4:	f002 ff7c 	bl	80106e0 <_Bfree>
 800d7e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7ea:	931c      	str	r3, [sp, #112]	; 0x70
 800d7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	dd00      	ble.n	800d7f4 <_strtod_l+0x790>
 800d7f2:	e087      	b.n	800d904 <_strtod_l+0x8a0>
 800d7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dd08      	ble.n	800d80c <_strtod_l+0x7a8>
 800d7fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d7fc:	9908      	ldr	r1, [sp, #32]
 800d7fe:	9804      	ldr	r0, [sp, #16]
 800d800:	f003 f932 	bl	8010a68 <__pow5mult>
 800d804:	9008      	str	r0, [sp, #32]
 800d806:	2800      	cmp	r0, #0
 800d808:	d100      	bne.n	800d80c <_strtod_l+0x7a8>
 800d80a:	e68e      	b.n	800d52a <_strtod_l+0x4c6>
 800d80c:	2c00      	cmp	r4, #0
 800d80e:	dd08      	ble.n	800d822 <_strtod_l+0x7be>
 800d810:	0022      	movs	r2, r4
 800d812:	9908      	ldr	r1, [sp, #32]
 800d814:	9804      	ldr	r0, [sp, #16]
 800d816:	f003 f983 	bl	8010b20 <__lshift>
 800d81a:	9008      	str	r0, [sp, #32]
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d100      	bne.n	800d822 <_strtod_l+0x7be>
 800d820:	e683      	b.n	800d52a <_strtod_l+0x4c6>
 800d822:	2d00      	cmp	r5, #0
 800d824:	dd08      	ble.n	800d838 <_strtod_l+0x7d4>
 800d826:	002a      	movs	r2, r5
 800d828:	9906      	ldr	r1, [sp, #24]
 800d82a:	9804      	ldr	r0, [sp, #16]
 800d82c:	f003 f978 	bl	8010b20 <__lshift>
 800d830:	9006      	str	r0, [sp, #24]
 800d832:	2800      	cmp	r0, #0
 800d834:	d100      	bne.n	800d838 <_strtod_l+0x7d4>
 800d836:	e678      	b.n	800d52a <_strtod_l+0x4c6>
 800d838:	9a08      	ldr	r2, [sp, #32]
 800d83a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d83c:	9804      	ldr	r0, [sp, #16]
 800d83e:	f003 f9f9 	bl	8010c34 <__mdiff>
 800d842:	9005      	str	r0, [sp, #20]
 800d844:	2800      	cmp	r0, #0
 800d846:	d100      	bne.n	800d84a <_strtod_l+0x7e6>
 800d848:	e66f      	b.n	800d52a <_strtod_l+0x4c6>
 800d84a:	2200      	movs	r2, #0
 800d84c:	68c3      	ldr	r3, [r0, #12]
 800d84e:	9906      	ldr	r1, [sp, #24]
 800d850:	60c2      	str	r2, [r0, #12]
 800d852:	930c      	str	r3, [sp, #48]	; 0x30
 800d854:	f003 f9d2 	bl	8010bfc <__mcmp>
 800d858:	2800      	cmp	r0, #0
 800d85a:	da5d      	bge.n	800d918 <_strtod_l+0x8b4>
 800d85c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d85e:	4333      	orrs	r3, r6
 800d860:	d000      	beq.n	800d864 <_strtod_l+0x800>
 800d862:	e088      	b.n	800d976 <_strtod_l+0x912>
 800d864:	033b      	lsls	r3, r7, #12
 800d866:	d000      	beq.n	800d86a <_strtod_l+0x806>
 800d868:	e085      	b.n	800d976 <_strtod_l+0x912>
 800d86a:	22d6      	movs	r2, #214	; 0xd6
 800d86c:	4b46      	ldr	r3, [pc, #280]	; (800d988 <_strtod_l+0x924>)
 800d86e:	04d2      	lsls	r2, r2, #19
 800d870:	403b      	ands	r3, r7
 800d872:	4293      	cmp	r3, r2
 800d874:	d97f      	bls.n	800d976 <_strtod_l+0x912>
 800d876:	9b05      	ldr	r3, [sp, #20]
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d103      	bne.n	800d886 <_strtod_l+0x822>
 800d87e:	9b05      	ldr	r3, [sp, #20]
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	2b01      	cmp	r3, #1
 800d884:	dd77      	ble.n	800d976 <_strtod_l+0x912>
 800d886:	9905      	ldr	r1, [sp, #20]
 800d888:	2201      	movs	r2, #1
 800d88a:	9804      	ldr	r0, [sp, #16]
 800d88c:	f003 f948 	bl	8010b20 <__lshift>
 800d890:	9906      	ldr	r1, [sp, #24]
 800d892:	9005      	str	r0, [sp, #20]
 800d894:	f003 f9b2 	bl	8010bfc <__mcmp>
 800d898:	2800      	cmp	r0, #0
 800d89a:	dd6c      	ble.n	800d976 <_strtod_l+0x912>
 800d89c:	9907      	ldr	r1, [sp, #28]
 800d89e:	003b      	movs	r3, r7
 800d8a0:	4a39      	ldr	r2, [pc, #228]	; (800d988 <_strtod_l+0x924>)
 800d8a2:	2900      	cmp	r1, #0
 800d8a4:	d100      	bne.n	800d8a8 <_strtod_l+0x844>
 800d8a6:	e094      	b.n	800d9d2 <_strtod_l+0x96e>
 800d8a8:	0011      	movs	r1, r2
 800d8aa:	20d6      	movs	r0, #214	; 0xd6
 800d8ac:	4039      	ands	r1, r7
 800d8ae:	04c0      	lsls	r0, r0, #19
 800d8b0:	4281      	cmp	r1, r0
 800d8b2:	dd00      	ble.n	800d8b6 <_strtod_l+0x852>
 800d8b4:	e08d      	b.n	800d9d2 <_strtod_l+0x96e>
 800d8b6:	23dc      	movs	r3, #220	; 0xdc
 800d8b8:	049b      	lsls	r3, r3, #18
 800d8ba:	4299      	cmp	r1, r3
 800d8bc:	dc00      	bgt.n	800d8c0 <_strtod_l+0x85c>
 800d8be:	e6a7      	b.n	800d610 <_strtod_l+0x5ac>
 800d8c0:	0030      	movs	r0, r6
 800d8c2:	0039      	movs	r1, r7
 800d8c4:	4b31      	ldr	r3, [pc, #196]	; (800d98c <_strtod_l+0x928>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f7f4 fd04 	bl	80022d4 <__aeabi_dmul>
 800d8cc:	4b2e      	ldr	r3, [pc, #184]	; (800d988 <_strtod_l+0x924>)
 800d8ce:	0006      	movs	r6, r0
 800d8d0:	000f      	movs	r7, r1
 800d8d2:	420b      	tst	r3, r1
 800d8d4:	d000      	beq.n	800d8d8 <_strtod_l+0x874>
 800d8d6:	e631      	b.n	800d53c <_strtod_l+0x4d8>
 800d8d8:	2322      	movs	r3, #34	; 0x22
 800d8da:	9a04      	ldr	r2, [sp, #16]
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	e62d      	b.n	800d53c <_strtod_l+0x4d8>
 800d8e0:	234b      	movs	r3, #75	; 0x4b
 800d8e2:	1a9a      	subs	r2, r3, r2
 800d8e4:	3b4c      	subs	r3, #76	; 0x4c
 800d8e6:	4093      	lsls	r3, r2
 800d8e8:	4019      	ands	r1, r3
 800d8ea:	000f      	movs	r7, r1
 800d8ec:	e6e3      	b.n	800d6b6 <_strtod_l+0x652>
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	4252      	negs	r2, r2
 800d8f2:	409a      	lsls	r2, r3
 800d8f4:	4016      	ands	r6, r2
 800d8f6:	e6de      	b.n	800d6b6 <_strtod_l+0x652>
 800d8f8:	4925      	ldr	r1, [pc, #148]	; (800d990 <_strtod_l+0x92c>)
 800d8fa:	1acb      	subs	r3, r1, r3
 800d8fc:	0001      	movs	r1, r0
 800d8fe:	4099      	lsls	r1, r3
 800d900:	9114      	str	r1, [sp, #80]	; 0x50
 800d902:	e743      	b.n	800d78c <_strtod_l+0x728>
 800d904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d906:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d908:	9804      	ldr	r0, [sp, #16]
 800d90a:	f003 f909 	bl	8010b20 <__lshift>
 800d90e:	901c      	str	r0, [sp, #112]	; 0x70
 800d910:	2800      	cmp	r0, #0
 800d912:	d000      	beq.n	800d916 <_strtod_l+0x8b2>
 800d914:	e76e      	b.n	800d7f4 <_strtod_l+0x790>
 800d916:	e608      	b.n	800d52a <_strtod_l+0x4c6>
 800d918:	970e      	str	r7, [sp, #56]	; 0x38
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d177      	bne.n	800da0e <_strtod_l+0x9aa>
 800d91e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d920:	033b      	lsls	r3, r7, #12
 800d922:	0b1b      	lsrs	r3, r3, #12
 800d924:	2a00      	cmp	r2, #0
 800d926:	d039      	beq.n	800d99c <_strtod_l+0x938>
 800d928:	4a1a      	ldr	r2, [pc, #104]	; (800d994 <_strtod_l+0x930>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d139      	bne.n	800d9a2 <_strtod_l+0x93e>
 800d92e:	2101      	movs	r1, #1
 800d930:	9b07      	ldr	r3, [sp, #28]
 800d932:	4249      	negs	r1, r1
 800d934:	0032      	movs	r2, r6
 800d936:	0008      	movs	r0, r1
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00b      	beq.n	800d954 <_strtod_l+0x8f0>
 800d93c:	24d4      	movs	r4, #212	; 0xd4
 800d93e:	4b12      	ldr	r3, [pc, #72]	; (800d988 <_strtod_l+0x924>)
 800d940:	0008      	movs	r0, r1
 800d942:	403b      	ands	r3, r7
 800d944:	04e4      	lsls	r4, r4, #19
 800d946:	42a3      	cmp	r3, r4
 800d948:	d804      	bhi.n	800d954 <_strtod_l+0x8f0>
 800d94a:	306c      	adds	r0, #108	; 0x6c
 800d94c:	0d1b      	lsrs	r3, r3, #20
 800d94e:	1ac3      	subs	r3, r0, r3
 800d950:	4099      	lsls	r1, r3
 800d952:	0008      	movs	r0, r1
 800d954:	4282      	cmp	r2, r0
 800d956:	d124      	bne.n	800d9a2 <_strtod_l+0x93e>
 800d958:	4b0f      	ldr	r3, [pc, #60]	; (800d998 <_strtod_l+0x934>)
 800d95a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d95c:	4299      	cmp	r1, r3
 800d95e:	d102      	bne.n	800d966 <_strtod_l+0x902>
 800d960:	3201      	adds	r2, #1
 800d962:	d100      	bne.n	800d966 <_strtod_l+0x902>
 800d964:	e5e1      	b.n	800d52a <_strtod_l+0x4c6>
 800d966:	4b08      	ldr	r3, [pc, #32]	; (800d988 <_strtod_l+0x924>)
 800d968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d96a:	2600      	movs	r6, #0
 800d96c:	401a      	ands	r2, r3
 800d96e:	0013      	movs	r3, r2
 800d970:	2280      	movs	r2, #128	; 0x80
 800d972:	0352      	lsls	r2, r2, #13
 800d974:	189f      	adds	r7, r3, r2
 800d976:	9b07      	ldr	r3, [sp, #28]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1a1      	bne.n	800d8c0 <_strtod_l+0x85c>
 800d97c:	e5de      	b.n	800d53c <_strtod_l+0x4d8>
 800d97e:	46c0      	nop			; (mov r8, r8)
 800d980:	08013bc8 	.word	0x08013bc8
 800d984:	fffffc02 	.word	0xfffffc02
 800d988:	7ff00000 	.word	0x7ff00000
 800d98c:	39500000 	.word	0x39500000
 800d990:	fffffbe2 	.word	0xfffffbe2
 800d994:	000fffff 	.word	0x000fffff
 800d998:	7fefffff 	.word	0x7fefffff
 800d99c:	4333      	orrs	r3, r6
 800d99e:	d100      	bne.n	800d9a2 <_strtod_l+0x93e>
 800d9a0:	e77c      	b.n	800d89c <_strtod_l+0x838>
 800d9a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d01d      	beq.n	800d9e4 <_strtod_l+0x980>
 800d9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9ac:	4213      	tst	r3, r2
 800d9ae:	d0e2      	beq.n	800d976 <_strtod_l+0x912>
 800d9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9b2:	0030      	movs	r0, r6
 800d9b4:	0039      	movs	r1, r7
 800d9b6:	9a07      	ldr	r2, [sp, #28]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d017      	beq.n	800d9ec <_strtod_l+0x988>
 800d9bc:	f7ff fb3a 	bl	800d034 <sulp>
 800d9c0:	0002      	movs	r2, r0
 800d9c2:	000b      	movs	r3, r1
 800d9c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9c8:	f7f3 fd2a 	bl	8001420 <__aeabi_dadd>
 800d9cc:	0006      	movs	r6, r0
 800d9ce:	000f      	movs	r7, r1
 800d9d0:	e7d1      	b.n	800d976 <_strtod_l+0x912>
 800d9d2:	2601      	movs	r6, #1
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	4a98      	ldr	r2, [pc, #608]	; (800dc38 <_strtod_l+0xbd4>)
 800d9d8:	4276      	negs	r6, r6
 800d9da:	189b      	adds	r3, r3, r2
 800d9dc:	4a97      	ldr	r2, [pc, #604]	; (800dc3c <_strtod_l+0xbd8>)
 800d9de:	431a      	orrs	r2, r3
 800d9e0:	0017      	movs	r7, r2
 800d9e2:	e7c8      	b.n	800d976 <_strtod_l+0x912>
 800d9e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d9e6:	4233      	tst	r3, r6
 800d9e8:	d0c5      	beq.n	800d976 <_strtod_l+0x912>
 800d9ea:	e7e1      	b.n	800d9b0 <_strtod_l+0x94c>
 800d9ec:	f7ff fb22 	bl	800d034 <sulp>
 800d9f0:	0002      	movs	r2, r0
 800d9f2:	000b      	movs	r3, r1
 800d9f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9f8:	f7f4 ff2e 	bl	8002858 <__aeabi_dsub>
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2300      	movs	r3, #0
 800da00:	0006      	movs	r6, r0
 800da02:	000f      	movs	r7, r1
 800da04:	f7f2 fd22 	bl	800044c <__aeabi_dcmpeq>
 800da08:	2800      	cmp	r0, #0
 800da0a:	d0b4      	beq.n	800d976 <_strtod_l+0x912>
 800da0c:	e600      	b.n	800d610 <_strtod_l+0x5ac>
 800da0e:	9906      	ldr	r1, [sp, #24]
 800da10:	9805      	ldr	r0, [sp, #20]
 800da12:	f003 fa6f 	bl	8010ef4 <__ratio>
 800da16:	2380      	movs	r3, #128	; 0x80
 800da18:	2200      	movs	r2, #0
 800da1a:	05db      	lsls	r3, r3, #23
 800da1c:	0004      	movs	r4, r0
 800da1e:	000d      	movs	r5, r1
 800da20:	f7f2 fd24 	bl	800046c <__aeabi_dcmple>
 800da24:	2800      	cmp	r0, #0
 800da26:	d06d      	beq.n	800db04 <_strtod_l+0xaa0>
 800da28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d000      	beq.n	800da30 <_strtod_l+0x9cc>
 800da2e:	e07e      	b.n	800db2e <_strtod_l+0xaca>
 800da30:	2e00      	cmp	r6, #0
 800da32:	d158      	bne.n	800dae6 <_strtod_l+0xa82>
 800da34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da36:	031b      	lsls	r3, r3, #12
 800da38:	d000      	beq.n	800da3c <_strtod_l+0x9d8>
 800da3a:	e07f      	b.n	800db3c <_strtod_l+0xad8>
 800da3c:	2200      	movs	r2, #0
 800da3e:	0020      	movs	r0, r4
 800da40:	0029      	movs	r1, r5
 800da42:	4b7f      	ldr	r3, [pc, #508]	; (800dc40 <_strtod_l+0xbdc>)
 800da44:	f7f2 fd08 	bl	8000458 <__aeabi_dcmplt>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d158      	bne.n	800dafe <_strtod_l+0xa9a>
 800da4c:	0020      	movs	r0, r4
 800da4e:	0029      	movs	r1, r5
 800da50:	2200      	movs	r2, #0
 800da52:	4b7c      	ldr	r3, [pc, #496]	; (800dc44 <_strtod_l+0xbe0>)
 800da54:	f7f4 fc3e 	bl	80022d4 <__aeabi_dmul>
 800da58:	0004      	movs	r4, r0
 800da5a:	000d      	movs	r5, r1
 800da5c:	2380      	movs	r3, #128	; 0x80
 800da5e:	061b      	lsls	r3, r3, #24
 800da60:	940a      	str	r4, [sp, #40]	; 0x28
 800da62:	18eb      	adds	r3, r5, r3
 800da64:	930b      	str	r3, [sp, #44]	; 0x2c
 800da66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da6a:	9212      	str	r2, [sp, #72]	; 0x48
 800da6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800da6e:	4a76      	ldr	r2, [pc, #472]	; (800dc48 <_strtod_l+0xbe4>)
 800da70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da72:	4013      	ands	r3, r2
 800da74:	9314      	str	r3, [sp, #80]	; 0x50
 800da76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da78:	4b74      	ldr	r3, [pc, #464]	; (800dc4c <_strtod_l+0xbe8>)
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d000      	beq.n	800da80 <_strtod_l+0xa1c>
 800da7e:	e091      	b.n	800dba4 <_strtod_l+0xb40>
 800da80:	4a73      	ldr	r2, [pc, #460]	; (800dc50 <_strtod_l+0xbec>)
 800da82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da84:	4694      	mov	ip, r2
 800da86:	4463      	add	r3, ip
 800da88:	001f      	movs	r7, r3
 800da8a:	0030      	movs	r0, r6
 800da8c:	0019      	movs	r1, r3
 800da8e:	f003 f969 	bl	8010d64 <__ulp>
 800da92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da96:	f7f4 fc1d 	bl	80022d4 <__aeabi_dmul>
 800da9a:	0032      	movs	r2, r6
 800da9c:	003b      	movs	r3, r7
 800da9e:	f7f3 fcbf 	bl	8001420 <__aeabi_dadd>
 800daa2:	4a69      	ldr	r2, [pc, #420]	; (800dc48 <_strtod_l+0xbe4>)
 800daa4:	4b6b      	ldr	r3, [pc, #428]	; (800dc54 <_strtod_l+0xbf0>)
 800daa6:	0006      	movs	r6, r0
 800daa8:	400a      	ands	r2, r1
 800daaa:	429a      	cmp	r2, r3
 800daac:	d949      	bls.n	800db42 <_strtod_l+0xade>
 800daae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dab0:	4b69      	ldr	r3, [pc, #420]	; (800dc58 <_strtod_l+0xbf4>)
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d103      	bne.n	800dabe <_strtod_l+0xa5a>
 800dab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dab8:	3301      	adds	r3, #1
 800daba:	d100      	bne.n	800dabe <_strtod_l+0xa5a>
 800dabc:	e535      	b.n	800d52a <_strtod_l+0x4c6>
 800dabe:	2601      	movs	r6, #1
 800dac0:	4f65      	ldr	r7, [pc, #404]	; (800dc58 <_strtod_l+0xbf4>)
 800dac2:	4276      	negs	r6, r6
 800dac4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dac6:	9804      	ldr	r0, [sp, #16]
 800dac8:	f002 fe0a 	bl	80106e0 <_Bfree>
 800dacc:	9908      	ldr	r1, [sp, #32]
 800dace:	9804      	ldr	r0, [sp, #16]
 800dad0:	f002 fe06 	bl	80106e0 <_Bfree>
 800dad4:	9906      	ldr	r1, [sp, #24]
 800dad6:	9804      	ldr	r0, [sp, #16]
 800dad8:	f002 fe02 	bl	80106e0 <_Bfree>
 800dadc:	9905      	ldr	r1, [sp, #20]
 800dade:	9804      	ldr	r0, [sp, #16]
 800dae0:	f002 fdfe 	bl	80106e0 <_Bfree>
 800dae4:	e60b      	b.n	800d6fe <_strtod_l+0x69a>
 800dae6:	2e01      	cmp	r6, #1
 800dae8:	d103      	bne.n	800daf2 <_strtod_l+0xa8e>
 800daea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daec:	2b00      	cmp	r3, #0
 800daee:	d100      	bne.n	800daf2 <_strtod_l+0xa8e>
 800daf0:	e58e      	b.n	800d610 <_strtod_l+0x5ac>
 800daf2:	2300      	movs	r3, #0
 800daf4:	4c59      	ldr	r4, [pc, #356]	; (800dc5c <_strtod_l+0xbf8>)
 800daf6:	930a      	str	r3, [sp, #40]	; 0x28
 800daf8:	940b      	str	r4, [sp, #44]	; 0x2c
 800dafa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dafc:	e01c      	b.n	800db38 <_strtod_l+0xad4>
 800dafe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800db00:	4d50      	ldr	r5, [pc, #320]	; (800dc44 <_strtod_l+0xbe0>)
 800db02:	e7ab      	b.n	800da5c <_strtod_l+0x9f8>
 800db04:	2200      	movs	r2, #0
 800db06:	0020      	movs	r0, r4
 800db08:	0029      	movs	r1, r5
 800db0a:	4b4e      	ldr	r3, [pc, #312]	; (800dc44 <_strtod_l+0xbe0>)
 800db0c:	f7f4 fbe2 	bl	80022d4 <__aeabi_dmul>
 800db10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db12:	0004      	movs	r4, r0
 800db14:	000b      	movs	r3, r1
 800db16:	000d      	movs	r5, r1
 800db18:	2a00      	cmp	r2, #0
 800db1a:	d104      	bne.n	800db26 <_strtod_l+0xac2>
 800db1c:	2280      	movs	r2, #128	; 0x80
 800db1e:	0612      	lsls	r2, r2, #24
 800db20:	900a      	str	r0, [sp, #40]	; 0x28
 800db22:	188b      	adds	r3, r1, r2
 800db24:	e79e      	b.n	800da64 <_strtod_l+0xa00>
 800db26:	0002      	movs	r2, r0
 800db28:	920a      	str	r2, [sp, #40]	; 0x28
 800db2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800db2c:	e79b      	b.n	800da66 <_strtod_l+0xa02>
 800db2e:	2300      	movs	r3, #0
 800db30:	4c43      	ldr	r4, [pc, #268]	; (800dc40 <_strtod_l+0xbdc>)
 800db32:	930a      	str	r3, [sp, #40]	; 0x28
 800db34:	940b      	str	r4, [sp, #44]	; 0x2c
 800db36:	2400      	movs	r4, #0
 800db38:	4d41      	ldr	r5, [pc, #260]	; (800dc40 <_strtod_l+0xbdc>)
 800db3a:	e794      	b.n	800da66 <_strtod_l+0xa02>
 800db3c:	2300      	movs	r3, #0
 800db3e:	4c47      	ldr	r4, [pc, #284]	; (800dc5c <_strtod_l+0xbf8>)
 800db40:	e7f7      	b.n	800db32 <_strtod_l+0xace>
 800db42:	23d4      	movs	r3, #212	; 0xd4
 800db44:	049b      	lsls	r3, r3, #18
 800db46:	18cf      	adds	r7, r1, r3
 800db48:	9b07      	ldr	r3, [sp, #28]
 800db4a:	970e      	str	r7, [sp, #56]	; 0x38
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1b9      	bne.n	800dac4 <_strtod_l+0xa60>
 800db50:	4b3d      	ldr	r3, [pc, #244]	; (800dc48 <_strtod_l+0xbe4>)
 800db52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db54:	403b      	ands	r3, r7
 800db56:	429a      	cmp	r2, r3
 800db58:	d1b4      	bne.n	800dac4 <_strtod_l+0xa60>
 800db5a:	0020      	movs	r0, r4
 800db5c:	0029      	movs	r1, r5
 800db5e:	f7f2 fcfb 	bl	8000558 <__aeabi_d2lz>
 800db62:	f7f2 fd35 	bl	80005d0 <__aeabi_l2d>
 800db66:	0002      	movs	r2, r0
 800db68:	000b      	movs	r3, r1
 800db6a:	0020      	movs	r0, r4
 800db6c:	0029      	movs	r1, r5
 800db6e:	f7f4 fe73 	bl	8002858 <__aeabi_dsub>
 800db72:	033b      	lsls	r3, r7, #12
 800db74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db76:	0b1b      	lsrs	r3, r3, #12
 800db78:	4333      	orrs	r3, r6
 800db7a:	4313      	orrs	r3, r2
 800db7c:	0004      	movs	r4, r0
 800db7e:	000d      	movs	r5, r1
 800db80:	4a37      	ldr	r2, [pc, #220]	; (800dc60 <_strtod_l+0xbfc>)
 800db82:	2b00      	cmp	r3, #0
 800db84:	d054      	beq.n	800dc30 <_strtod_l+0xbcc>
 800db86:	4b37      	ldr	r3, [pc, #220]	; (800dc64 <_strtod_l+0xc00>)
 800db88:	f7f2 fc66 	bl	8000458 <__aeabi_dcmplt>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d000      	beq.n	800db92 <_strtod_l+0xb2e>
 800db90:	e4d4      	b.n	800d53c <_strtod_l+0x4d8>
 800db92:	0020      	movs	r0, r4
 800db94:	0029      	movs	r1, r5
 800db96:	4a34      	ldr	r2, [pc, #208]	; (800dc68 <_strtod_l+0xc04>)
 800db98:	4b2a      	ldr	r3, [pc, #168]	; (800dc44 <_strtod_l+0xbe0>)
 800db9a:	f7f2 fc71 	bl	8000480 <__aeabi_dcmpgt>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d090      	beq.n	800dac4 <_strtod_l+0xa60>
 800dba2:	e4cb      	b.n	800d53c <_strtod_l+0x4d8>
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d02b      	beq.n	800dc02 <_strtod_l+0xb9e>
 800dbaa:	23d4      	movs	r3, #212	; 0xd4
 800dbac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbae:	04db      	lsls	r3, r3, #19
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d826      	bhi.n	800dc02 <_strtod_l+0xb9e>
 800dbb4:	0020      	movs	r0, r4
 800dbb6:	0029      	movs	r1, r5
 800dbb8:	4a2c      	ldr	r2, [pc, #176]	; (800dc6c <_strtod_l+0xc08>)
 800dbba:	4b2d      	ldr	r3, [pc, #180]	; (800dc70 <_strtod_l+0xc0c>)
 800dbbc:	f7f2 fc56 	bl	800046c <__aeabi_dcmple>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d017      	beq.n	800dbf4 <_strtod_l+0xb90>
 800dbc4:	0020      	movs	r0, r4
 800dbc6:	0029      	movs	r1, r5
 800dbc8:	f7f2 fca8 	bl	800051c <__aeabi_d2uiz>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d100      	bne.n	800dbd2 <_strtod_l+0xb6e>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	f7f5 fa47 	bl	8003064 <__aeabi_ui2d>
 800dbd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbd8:	0004      	movs	r4, r0
 800dbda:	000b      	movs	r3, r1
 800dbdc:	000d      	movs	r5, r1
 800dbde:	2a00      	cmp	r2, #0
 800dbe0:	d122      	bne.n	800dc28 <_strtod_l+0xbc4>
 800dbe2:	2280      	movs	r2, #128	; 0x80
 800dbe4:	0612      	lsls	r2, r2, #24
 800dbe6:	188b      	adds	r3, r1, r2
 800dbe8:	9016      	str	r0, [sp, #88]	; 0x58
 800dbea:	9317      	str	r3, [sp, #92]	; 0x5c
 800dbec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dbee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbf0:	9212      	str	r2, [sp, #72]	; 0x48
 800dbf2:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbf4:	22d6      	movs	r2, #214	; 0xd6
 800dbf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dbf8:	04d2      	lsls	r2, r2, #19
 800dbfa:	189b      	adds	r3, r3, r2
 800dbfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbfe:	1a9b      	subs	r3, r3, r2
 800dc00:	9313      	str	r3, [sp, #76]	; 0x4c
 800dc02:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dc04:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dc06:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800dc08:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800dc0a:	f003 f8ab 	bl	8010d64 <__ulp>
 800dc0e:	0002      	movs	r2, r0
 800dc10:	000b      	movs	r3, r1
 800dc12:	0030      	movs	r0, r6
 800dc14:	0039      	movs	r1, r7
 800dc16:	f7f4 fb5d 	bl	80022d4 <__aeabi_dmul>
 800dc1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dc1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc1e:	f7f3 fbff 	bl	8001420 <__aeabi_dadd>
 800dc22:	0006      	movs	r6, r0
 800dc24:	000f      	movs	r7, r1
 800dc26:	e78f      	b.n	800db48 <_strtod_l+0xae4>
 800dc28:	0002      	movs	r2, r0
 800dc2a:	9216      	str	r2, [sp, #88]	; 0x58
 800dc2c:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc2e:	e7dd      	b.n	800dbec <_strtod_l+0xb88>
 800dc30:	4b10      	ldr	r3, [pc, #64]	; (800dc74 <_strtod_l+0xc10>)
 800dc32:	f7f2 fc11 	bl	8000458 <__aeabi_dcmplt>
 800dc36:	e7b2      	b.n	800db9e <_strtod_l+0xb3a>
 800dc38:	fff00000 	.word	0xfff00000
 800dc3c:	000fffff 	.word	0x000fffff
 800dc40:	3ff00000 	.word	0x3ff00000
 800dc44:	3fe00000 	.word	0x3fe00000
 800dc48:	7ff00000 	.word	0x7ff00000
 800dc4c:	7fe00000 	.word	0x7fe00000
 800dc50:	fcb00000 	.word	0xfcb00000
 800dc54:	7c9fffff 	.word	0x7c9fffff
 800dc58:	7fefffff 	.word	0x7fefffff
 800dc5c:	bff00000 	.word	0xbff00000
 800dc60:	94a03595 	.word	0x94a03595
 800dc64:	3fdfffff 	.word	0x3fdfffff
 800dc68:	35afe535 	.word	0x35afe535
 800dc6c:	ffc00000 	.word	0xffc00000
 800dc70:	41dfffff 	.word	0x41dfffff
 800dc74:	3fcfffff 	.word	0x3fcfffff

0800dc78 <_strtod_r>:
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	4b02      	ldr	r3, [pc, #8]	; (800dc84 <_strtod_r+0xc>)
 800dc7c:	f7ff f9f2 	bl	800d064 <_strtod_l>
 800dc80:	bd10      	pop	{r4, pc}
 800dc82:	46c0      	nop			; (mov r8, r8)
 800dc84:	20000138 	.word	0x20000138

0800dc88 <strtod>:
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	4c04      	ldr	r4, [pc, #16]	; (800dc9c <strtod+0x14>)
 800dc8c:	000a      	movs	r2, r1
 800dc8e:	0001      	movs	r1, r0
 800dc90:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <strtod+0x18>)
 800dc92:	6820      	ldr	r0, [r4, #0]
 800dc94:	f7ff f9e6 	bl	800d064 <_strtod_l>
 800dc98:	bd10      	pop	{r4, pc}
 800dc9a:	46c0      	nop			; (mov r8, r8)
 800dc9c:	200002f0 	.word	0x200002f0
 800dca0:	20000138 	.word	0x20000138

0800dca4 <_strtol_l.constprop.0>:
 800dca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dca6:	b087      	sub	sp, #28
 800dca8:	001e      	movs	r6, r3
 800dcaa:	9005      	str	r0, [sp, #20]
 800dcac:	9101      	str	r1, [sp, #4]
 800dcae:	9202      	str	r2, [sp, #8]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d048      	beq.n	800dd46 <_strtol_l.constprop.0+0xa2>
 800dcb4:	000b      	movs	r3, r1
 800dcb6:	2e24      	cmp	r6, #36	; 0x24
 800dcb8:	d845      	bhi.n	800dd46 <_strtol_l.constprop.0+0xa2>
 800dcba:	4a3b      	ldr	r2, [pc, #236]	; (800dda8 <_strtol_l.constprop.0+0x104>)
 800dcbc:	2108      	movs	r1, #8
 800dcbe:	4694      	mov	ip, r2
 800dcc0:	001a      	movs	r2, r3
 800dcc2:	4660      	mov	r0, ip
 800dcc4:	7814      	ldrb	r4, [r2, #0]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	5d00      	ldrb	r0, [r0, r4]
 800dcca:	001d      	movs	r5, r3
 800dccc:	0007      	movs	r7, r0
 800dcce:	400f      	ands	r7, r1
 800dcd0:	4208      	tst	r0, r1
 800dcd2:	d1f5      	bne.n	800dcc0 <_strtol_l.constprop.0+0x1c>
 800dcd4:	2c2d      	cmp	r4, #45	; 0x2d
 800dcd6:	d13d      	bne.n	800dd54 <_strtol_l.constprop.0+0xb0>
 800dcd8:	2701      	movs	r7, #1
 800dcda:	781c      	ldrb	r4, [r3, #0]
 800dcdc:	1c95      	adds	r5, r2, #2
 800dcde:	2e00      	cmp	r6, #0
 800dce0:	d05e      	beq.n	800dda0 <_strtol_l.constprop.0+0xfc>
 800dce2:	2e10      	cmp	r6, #16
 800dce4:	d109      	bne.n	800dcfa <_strtol_l.constprop.0+0x56>
 800dce6:	2c30      	cmp	r4, #48	; 0x30
 800dce8:	d107      	bne.n	800dcfa <_strtol_l.constprop.0+0x56>
 800dcea:	2220      	movs	r2, #32
 800dcec:	782b      	ldrb	r3, [r5, #0]
 800dcee:	4393      	bics	r3, r2
 800dcf0:	2b58      	cmp	r3, #88	; 0x58
 800dcf2:	d150      	bne.n	800dd96 <_strtol_l.constprop.0+0xf2>
 800dcf4:	2610      	movs	r6, #16
 800dcf6:	786c      	ldrb	r4, [r5, #1]
 800dcf8:	3502      	adds	r5, #2
 800dcfa:	4b2c      	ldr	r3, [pc, #176]	; (800ddac <_strtol_l.constprop.0+0x108>)
 800dcfc:	0031      	movs	r1, r6
 800dcfe:	18fb      	adds	r3, r7, r3
 800dd00:	0018      	movs	r0, r3
 800dd02:	9303      	str	r3, [sp, #12]
 800dd04:	f7f2 faa2 	bl	800024c <__aeabi_uidivmod>
 800dd08:	2200      	movs	r2, #0
 800dd0a:	9104      	str	r1, [sp, #16]
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	4684      	mov	ip, r0
 800dd10:	0010      	movs	r0, r2
 800dd12:	4249      	negs	r1, r1
 800dd14:	0023      	movs	r3, r4
 800dd16:	3b30      	subs	r3, #48	; 0x30
 800dd18:	2b09      	cmp	r3, #9
 800dd1a:	d903      	bls.n	800dd24 <_strtol_l.constprop.0+0x80>
 800dd1c:	3b11      	subs	r3, #17
 800dd1e:	2b19      	cmp	r3, #25
 800dd20:	d81d      	bhi.n	800dd5e <_strtol_l.constprop.0+0xba>
 800dd22:	330a      	adds	r3, #10
 800dd24:	429e      	cmp	r6, r3
 800dd26:	dd1e      	ble.n	800dd66 <_strtol_l.constprop.0+0xc2>
 800dd28:	1c54      	adds	r4, r2, #1
 800dd2a:	d009      	beq.n	800dd40 <_strtol_l.constprop.0+0x9c>
 800dd2c:	000a      	movs	r2, r1
 800dd2e:	4584      	cmp	ip, r0
 800dd30:	d306      	bcc.n	800dd40 <_strtol_l.constprop.0+0x9c>
 800dd32:	d102      	bne.n	800dd3a <_strtol_l.constprop.0+0x96>
 800dd34:	9c04      	ldr	r4, [sp, #16]
 800dd36:	429c      	cmp	r4, r3
 800dd38:	db02      	blt.n	800dd40 <_strtol_l.constprop.0+0x9c>
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	4370      	muls	r0, r6
 800dd3e:	1818      	adds	r0, r3, r0
 800dd40:	782c      	ldrb	r4, [r5, #0]
 800dd42:	3501      	adds	r5, #1
 800dd44:	e7e6      	b.n	800dd14 <_strtol_l.constprop.0+0x70>
 800dd46:	f001 f9bf 	bl	800f0c8 <__errno>
 800dd4a:	2316      	movs	r3, #22
 800dd4c:	6003      	str	r3, [r0, #0]
 800dd4e:	2000      	movs	r0, #0
 800dd50:	b007      	add	sp, #28
 800dd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd54:	2c2b      	cmp	r4, #43	; 0x2b
 800dd56:	d1c2      	bne.n	800dcde <_strtol_l.constprop.0+0x3a>
 800dd58:	781c      	ldrb	r4, [r3, #0]
 800dd5a:	1c95      	adds	r5, r2, #2
 800dd5c:	e7bf      	b.n	800dcde <_strtol_l.constprop.0+0x3a>
 800dd5e:	0023      	movs	r3, r4
 800dd60:	3b61      	subs	r3, #97	; 0x61
 800dd62:	2b19      	cmp	r3, #25
 800dd64:	d9dd      	bls.n	800dd22 <_strtol_l.constprop.0+0x7e>
 800dd66:	1c53      	adds	r3, r2, #1
 800dd68:	d109      	bne.n	800dd7e <_strtol_l.constprop.0+0xda>
 800dd6a:	2322      	movs	r3, #34	; 0x22
 800dd6c:	9a05      	ldr	r2, [sp, #20]
 800dd6e:	9803      	ldr	r0, [sp, #12]
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	9b02      	ldr	r3, [sp, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d0eb      	beq.n	800dd50 <_strtol_l.constprop.0+0xac>
 800dd78:	1e6b      	subs	r3, r5, #1
 800dd7a:	9301      	str	r3, [sp, #4]
 800dd7c:	e007      	b.n	800dd8e <_strtol_l.constprop.0+0xea>
 800dd7e:	2f00      	cmp	r7, #0
 800dd80:	d000      	beq.n	800dd84 <_strtol_l.constprop.0+0xe0>
 800dd82:	4240      	negs	r0, r0
 800dd84:	9b02      	ldr	r3, [sp, #8]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d0e2      	beq.n	800dd50 <_strtol_l.constprop.0+0xac>
 800dd8a:	2a00      	cmp	r2, #0
 800dd8c:	d1f4      	bne.n	800dd78 <_strtol_l.constprop.0+0xd4>
 800dd8e:	9b02      	ldr	r3, [sp, #8]
 800dd90:	9a01      	ldr	r2, [sp, #4]
 800dd92:	601a      	str	r2, [r3, #0]
 800dd94:	e7dc      	b.n	800dd50 <_strtol_l.constprop.0+0xac>
 800dd96:	2430      	movs	r4, #48	; 0x30
 800dd98:	2e00      	cmp	r6, #0
 800dd9a:	d1ae      	bne.n	800dcfa <_strtol_l.constprop.0+0x56>
 800dd9c:	3608      	adds	r6, #8
 800dd9e:	e7ac      	b.n	800dcfa <_strtol_l.constprop.0+0x56>
 800dda0:	2c30      	cmp	r4, #48	; 0x30
 800dda2:	d0a2      	beq.n	800dcea <_strtol_l.constprop.0+0x46>
 800dda4:	260a      	movs	r6, #10
 800dda6:	e7a8      	b.n	800dcfa <_strtol_l.constprop.0+0x56>
 800dda8:	08013bf1 	.word	0x08013bf1
 800ddac:	7fffffff 	.word	0x7fffffff

0800ddb0 <_strtol_r>:
 800ddb0:	b510      	push	{r4, lr}
 800ddb2:	f7ff ff77 	bl	800dca4 <_strtol_l.constprop.0>
 800ddb6:	bd10      	pop	{r4, pc}

0800ddb8 <strtol>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	4c04      	ldr	r4, [pc, #16]	; (800ddcc <strtol+0x14>)
 800ddbc:	0013      	movs	r3, r2
 800ddbe:	000a      	movs	r2, r1
 800ddc0:	0001      	movs	r1, r0
 800ddc2:	6820      	ldr	r0, [r4, #0]
 800ddc4:	f7ff ff6e 	bl	800dca4 <_strtol_l.constprop.0>
 800ddc8:	bd10      	pop	{r4, pc}
 800ddca:	46c0      	nop			; (mov r8, r8)
 800ddcc:	200002f0 	.word	0x200002f0

0800ddd0 <__cvt>:
 800ddd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddd2:	001e      	movs	r6, r3
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	0014      	movs	r4, r2
 800ddd8:	b08b      	sub	sp, #44	; 0x2c
 800ddda:	429e      	cmp	r6, r3
 800dddc:	da04      	bge.n	800dde8 <__cvt+0x18>
 800ddde:	2180      	movs	r1, #128	; 0x80
 800dde0:	0609      	lsls	r1, r1, #24
 800dde2:	1873      	adds	r3, r6, r1
 800dde4:	001e      	movs	r6, r3
 800dde6:	232d      	movs	r3, #45	; 0x2d
 800dde8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ddea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ddec:	7013      	strb	r3, [r2, #0]
 800ddee:	2320      	movs	r3, #32
 800ddf0:	2203      	movs	r2, #3
 800ddf2:	439f      	bics	r7, r3
 800ddf4:	2f46      	cmp	r7, #70	; 0x46
 800ddf6:	d007      	beq.n	800de08 <__cvt+0x38>
 800ddf8:	003b      	movs	r3, r7
 800ddfa:	3b45      	subs	r3, #69	; 0x45
 800ddfc:	4259      	negs	r1, r3
 800ddfe:	414b      	adcs	r3, r1
 800de00:	9910      	ldr	r1, [sp, #64]	; 0x40
 800de02:	3a01      	subs	r2, #1
 800de04:	18cb      	adds	r3, r1, r3
 800de06:	9310      	str	r3, [sp, #64]	; 0x40
 800de08:	ab09      	add	r3, sp, #36	; 0x24
 800de0a:	9304      	str	r3, [sp, #16]
 800de0c:	ab08      	add	r3, sp, #32
 800de0e:	9303      	str	r3, [sp, #12]
 800de10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de12:	9200      	str	r2, [sp, #0]
 800de14:	9302      	str	r3, [sp, #8]
 800de16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de18:	0022      	movs	r2, r4
 800de1a:	9301      	str	r3, [sp, #4]
 800de1c:	0033      	movs	r3, r6
 800de1e:	f001 fa55 	bl	800f2cc <_dtoa_r>
 800de22:	0005      	movs	r5, r0
 800de24:	2f47      	cmp	r7, #71	; 0x47
 800de26:	d102      	bne.n	800de2e <__cvt+0x5e>
 800de28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de2a:	07db      	lsls	r3, r3, #31
 800de2c:	d528      	bpl.n	800de80 <__cvt+0xb0>
 800de2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de30:	18eb      	adds	r3, r5, r3
 800de32:	9307      	str	r3, [sp, #28]
 800de34:	2f46      	cmp	r7, #70	; 0x46
 800de36:	d114      	bne.n	800de62 <__cvt+0x92>
 800de38:	782b      	ldrb	r3, [r5, #0]
 800de3a:	2b30      	cmp	r3, #48	; 0x30
 800de3c:	d10c      	bne.n	800de58 <__cvt+0x88>
 800de3e:	2200      	movs	r2, #0
 800de40:	2300      	movs	r3, #0
 800de42:	0020      	movs	r0, r4
 800de44:	0031      	movs	r1, r6
 800de46:	f7f2 fb01 	bl	800044c <__aeabi_dcmpeq>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d104      	bne.n	800de58 <__cvt+0x88>
 800de4e:	2301      	movs	r3, #1
 800de50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de52:	1a9b      	subs	r3, r3, r2
 800de54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de56:	6013      	str	r3, [r2, #0]
 800de58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de5a:	9a07      	ldr	r2, [sp, #28]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	18d3      	adds	r3, r2, r3
 800de60:	9307      	str	r3, [sp, #28]
 800de62:	2200      	movs	r2, #0
 800de64:	2300      	movs	r3, #0
 800de66:	0020      	movs	r0, r4
 800de68:	0031      	movs	r1, r6
 800de6a:	f7f2 faef 	bl	800044c <__aeabi_dcmpeq>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d001      	beq.n	800de76 <__cvt+0xa6>
 800de72:	9b07      	ldr	r3, [sp, #28]
 800de74:	9309      	str	r3, [sp, #36]	; 0x24
 800de76:	2230      	movs	r2, #48	; 0x30
 800de78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7a:	9907      	ldr	r1, [sp, #28]
 800de7c:	428b      	cmp	r3, r1
 800de7e:	d306      	bcc.n	800de8e <__cvt+0xbe>
 800de80:	0028      	movs	r0, r5
 800de82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800de86:	1b5b      	subs	r3, r3, r5
 800de88:	6013      	str	r3, [r2, #0]
 800de8a:	b00b      	add	sp, #44	; 0x2c
 800de8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de8e:	1c59      	adds	r1, r3, #1
 800de90:	9109      	str	r1, [sp, #36]	; 0x24
 800de92:	701a      	strb	r2, [r3, #0]
 800de94:	e7f0      	b.n	800de78 <__cvt+0xa8>

0800de96 <__exponent>:
 800de96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de98:	1c83      	adds	r3, r0, #2
 800de9a:	b087      	sub	sp, #28
 800de9c:	9303      	str	r3, [sp, #12]
 800de9e:	0005      	movs	r5, r0
 800dea0:	000c      	movs	r4, r1
 800dea2:	232b      	movs	r3, #43	; 0x2b
 800dea4:	7002      	strb	r2, [r0, #0]
 800dea6:	2900      	cmp	r1, #0
 800dea8:	da01      	bge.n	800deae <__exponent+0x18>
 800deaa:	424c      	negs	r4, r1
 800deac:	3302      	adds	r3, #2
 800deae:	706b      	strb	r3, [r5, #1]
 800deb0:	2c09      	cmp	r4, #9
 800deb2:	dd2f      	ble.n	800df14 <__exponent+0x7e>
 800deb4:	270a      	movs	r7, #10
 800deb6:	ab04      	add	r3, sp, #16
 800deb8:	1dde      	adds	r6, r3, #7
 800deba:	0020      	movs	r0, r4
 800debc:	0039      	movs	r1, r7
 800debe:	9601      	str	r6, [sp, #4]
 800dec0:	f7f2 faae 	bl	8000420 <__aeabi_idivmod>
 800dec4:	3e01      	subs	r6, #1
 800dec6:	3130      	adds	r1, #48	; 0x30
 800dec8:	0020      	movs	r0, r4
 800deca:	7031      	strb	r1, [r6, #0]
 800decc:	0039      	movs	r1, r7
 800dece:	9402      	str	r4, [sp, #8]
 800ded0:	f7f2 f9c0 	bl	8000254 <__divsi3>
 800ded4:	9b02      	ldr	r3, [sp, #8]
 800ded6:	0004      	movs	r4, r0
 800ded8:	2b63      	cmp	r3, #99	; 0x63
 800deda:	dcee      	bgt.n	800deba <__exponent+0x24>
 800dedc:	9b01      	ldr	r3, [sp, #4]
 800dede:	3430      	adds	r4, #48	; 0x30
 800dee0:	1e9a      	subs	r2, r3, #2
 800dee2:	0013      	movs	r3, r2
 800dee4:	9903      	ldr	r1, [sp, #12]
 800dee6:	7014      	strb	r4, [r2, #0]
 800dee8:	a804      	add	r0, sp, #16
 800deea:	3007      	adds	r0, #7
 800deec:	4298      	cmp	r0, r3
 800deee:	d80c      	bhi.n	800df0a <__exponent+0x74>
 800def0:	2300      	movs	r3, #0
 800def2:	4282      	cmp	r2, r0
 800def4:	d804      	bhi.n	800df00 <__exponent+0x6a>
 800def6:	aa04      	add	r2, sp, #16
 800def8:	3309      	adds	r3, #9
 800defa:	189b      	adds	r3, r3, r2
 800defc:	9a01      	ldr	r2, [sp, #4]
 800defe:	1a9b      	subs	r3, r3, r2
 800df00:	9a03      	ldr	r2, [sp, #12]
 800df02:	18d3      	adds	r3, r2, r3
 800df04:	1b58      	subs	r0, r3, r5
 800df06:	b007      	add	sp, #28
 800df08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df0a:	7818      	ldrb	r0, [r3, #0]
 800df0c:	3301      	adds	r3, #1
 800df0e:	7008      	strb	r0, [r1, #0]
 800df10:	3101      	adds	r1, #1
 800df12:	e7e9      	b.n	800dee8 <__exponent+0x52>
 800df14:	2330      	movs	r3, #48	; 0x30
 800df16:	3430      	adds	r4, #48	; 0x30
 800df18:	70ab      	strb	r3, [r5, #2]
 800df1a:	70ec      	strb	r4, [r5, #3]
 800df1c:	1d2b      	adds	r3, r5, #4
 800df1e:	e7f1      	b.n	800df04 <__exponent+0x6e>

0800df20 <_printf_float>:
 800df20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df22:	b095      	sub	sp, #84	; 0x54
 800df24:	000c      	movs	r4, r1
 800df26:	9208      	str	r2, [sp, #32]
 800df28:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800df2a:	9309      	str	r3, [sp, #36]	; 0x24
 800df2c:	0007      	movs	r7, r0
 800df2e:	f001 f809 	bl	800ef44 <_localeconv_r>
 800df32:	6803      	ldr	r3, [r0, #0]
 800df34:	0018      	movs	r0, r3
 800df36:	930c      	str	r3, [sp, #48]	; 0x30
 800df38:	f7f2 f8e6 	bl	8000108 <strlen>
 800df3c:	2300      	movs	r3, #0
 800df3e:	9312      	str	r3, [sp, #72]	; 0x48
 800df40:	7e23      	ldrb	r3, [r4, #24]
 800df42:	2207      	movs	r2, #7
 800df44:	930a      	str	r3, [sp, #40]	; 0x28
 800df46:	6823      	ldr	r3, [r4, #0]
 800df48:	900d      	str	r0, [sp, #52]	; 0x34
 800df4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df4e:	682b      	ldr	r3, [r5, #0]
 800df50:	05c9      	lsls	r1, r1, #23
 800df52:	d547      	bpl.n	800dfe4 <_printf_float+0xc4>
 800df54:	189b      	adds	r3, r3, r2
 800df56:	4393      	bics	r3, r2
 800df58:	001a      	movs	r2, r3
 800df5a:	3208      	adds	r2, #8
 800df5c:	602a      	str	r2, [r5, #0]
 800df5e:	681e      	ldr	r6, [r3, #0]
 800df60:	685d      	ldr	r5, [r3, #4]
 800df62:	0032      	movs	r2, r6
 800df64:	002b      	movs	r3, r5
 800df66:	64a2      	str	r2, [r4, #72]	; 0x48
 800df68:	64e3      	str	r3, [r4, #76]	; 0x4c
 800df6a:	2201      	movs	r2, #1
 800df6c:	006b      	lsls	r3, r5, #1
 800df6e:	085b      	lsrs	r3, r3, #1
 800df70:	930e      	str	r3, [sp, #56]	; 0x38
 800df72:	0030      	movs	r0, r6
 800df74:	4bab      	ldr	r3, [pc, #684]	; (800e224 <_printf_float+0x304>)
 800df76:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df78:	4252      	negs	r2, r2
 800df7a:	f7f4 ffef 	bl	8002f5c <__aeabi_dcmpun>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d132      	bne.n	800dfe8 <_printf_float+0xc8>
 800df82:	2201      	movs	r2, #1
 800df84:	0030      	movs	r0, r6
 800df86:	4ba7      	ldr	r3, [pc, #668]	; (800e224 <_printf_float+0x304>)
 800df88:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df8a:	4252      	negs	r2, r2
 800df8c:	f7f2 fa6e 	bl	800046c <__aeabi_dcmple>
 800df90:	2800      	cmp	r0, #0
 800df92:	d129      	bne.n	800dfe8 <_printf_float+0xc8>
 800df94:	2200      	movs	r2, #0
 800df96:	2300      	movs	r3, #0
 800df98:	0030      	movs	r0, r6
 800df9a:	0029      	movs	r1, r5
 800df9c:	f7f2 fa5c 	bl	8000458 <__aeabi_dcmplt>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d003      	beq.n	800dfac <_printf_float+0x8c>
 800dfa4:	0023      	movs	r3, r4
 800dfa6:	222d      	movs	r2, #45	; 0x2d
 800dfa8:	3343      	adds	r3, #67	; 0x43
 800dfaa:	701a      	strb	r2, [r3, #0]
 800dfac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfae:	4d9e      	ldr	r5, [pc, #632]	; (800e228 <_printf_float+0x308>)
 800dfb0:	2b47      	cmp	r3, #71	; 0x47
 800dfb2:	d900      	bls.n	800dfb6 <_printf_float+0x96>
 800dfb4:	4d9d      	ldr	r5, [pc, #628]	; (800e22c <_printf_float+0x30c>)
 800dfb6:	2303      	movs	r3, #3
 800dfb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfba:	6123      	str	r3, [r4, #16]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	439a      	bics	r2, r3
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	6022      	str	r2, [r4, #0]
 800dfc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc8:	0021      	movs	r1, r4
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	0038      	movs	r0, r7
 800dfce:	9b08      	ldr	r3, [sp, #32]
 800dfd0:	aa13      	add	r2, sp, #76	; 0x4c
 800dfd2:	f000 f9fb 	bl	800e3cc <_printf_common>
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	d000      	beq.n	800dfdc <_printf_float+0xbc>
 800dfda:	e0a3      	b.n	800e124 <_printf_float+0x204>
 800dfdc:	2001      	movs	r0, #1
 800dfde:	4240      	negs	r0, r0
 800dfe0:	b015      	add	sp, #84	; 0x54
 800dfe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe4:	3307      	adds	r3, #7
 800dfe6:	e7b6      	b.n	800df56 <_printf_float+0x36>
 800dfe8:	0032      	movs	r2, r6
 800dfea:	002b      	movs	r3, r5
 800dfec:	0030      	movs	r0, r6
 800dfee:	0029      	movs	r1, r5
 800dff0:	f7f4 ffb4 	bl	8002f5c <__aeabi_dcmpun>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d00b      	beq.n	800e010 <_printf_float+0xf0>
 800dff8:	2d00      	cmp	r5, #0
 800dffa:	da03      	bge.n	800e004 <_printf_float+0xe4>
 800dffc:	0023      	movs	r3, r4
 800dffe:	222d      	movs	r2, #45	; 0x2d
 800e000:	3343      	adds	r3, #67	; 0x43
 800e002:	701a      	strb	r2, [r3, #0]
 800e004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e006:	4d8a      	ldr	r5, [pc, #552]	; (800e230 <_printf_float+0x310>)
 800e008:	2b47      	cmp	r3, #71	; 0x47
 800e00a:	d9d4      	bls.n	800dfb6 <_printf_float+0x96>
 800e00c:	4d89      	ldr	r5, [pc, #548]	; (800e234 <_printf_float+0x314>)
 800e00e:	e7d2      	b.n	800dfb6 <_printf_float+0x96>
 800e010:	2220      	movs	r2, #32
 800e012:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e014:	6863      	ldr	r3, [r4, #4]
 800e016:	4391      	bics	r1, r2
 800e018:	910e      	str	r1, [sp, #56]	; 0x38
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	d14a      	bne.n	800e0b4 <_printf_float+0x194>
 800e01e:	3307      	adds	r3, #7
 800e020:	6063      	str	r3, [r4, #4]
 800e022:	2380      	movs	r3, #128	; 0x80
 800e024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e026:	00db      	lsls	r3, r3, #3
 800e028:	4313      	orrs	r3, r2
 800e02a:	2200      	movs	r2, #0
 800e02c:	9206      	str	r2, [sp, #24]
 800e02e:	aa12      	add	r2, sp, #72	; 0x48
 800e030:	9205      	str	r2, [sp, #20]
 800e032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	9204      	str	r2, [sp, #16]
 800e038:	aa11      	add	r2, sp, #68	; 0x44
 800e03a:	9203      	str	r2, [sp, #12]
 800e03c:	2223      	movs	r2, #35	; 0x23
 800e03e:	a908      	add	r1, sp, #32
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	6863      	ldr	r3, [r4, #4]
 800e044:	1852      	adds	r2, r2, r1
 800e046:	9202      	str	r2, [sp, #8]
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	0032      	movs	r2, r6
 800e04c:	002b      	movs	r3, r5
 800e04e:	0038      	movs	r0, r7
 800e050:	f7ff febe 	bl	800ddd0 <__cvt>
 800e054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e056:	0005      	movs	r5, r0
 800e058:	2b47      	cmp	r3, #71	; 0x47
 800e05a:	d109      	bne.n	800e070 <_printf_float+0x150>
 800e05c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e05e:	1cda      	adds	r2, r3, #3
 800e060:	db02      	blt.n	800e068 <_printf_float+0x148>
 800e062:	6862      	ldr	r2, [r4, #4]
 800e064:	4293      	cmp	r3, r2
 800e066:	dd49      	ble.n	800e0fc <_printf_float+0x1dc>
 800e068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e06a:	3b02      	subs	r3, #2
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	930a      	str	r3, [sp, #40]	; 0x28
 800e070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e072:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e074:	2b65      	cmp	r3, #101	; 0x65
 800e076:	d824      	bhi.n	800e0c2 <_printf_float+0x1a2>
 800e078:	0020      	movs	r0, r4
 800e07a:	001a      	movs	r2, r3
 800e07c:	3901      	subs	r1, #1
 800e07e:	3050      	adds	r0, #80	; 0x50
 800e080:	9111      	str	r1, [sp, #68]	; 0x44
 800e082:	f7ff ff08 	bl	800de96 <__exponent>
 800e086:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e088:	900b      	str	r0, [sp, #44]	; 0x2c
 800e08a:	1813      	adds	r3, r2, r0
 800e08c:	6123      	str	r3, [r4, #16]
 800e08e:	2a01      	cmp	r2, #1
 800e090:	dc02      	bgt.n	800e098 <_printf_float+0x178>
 800e092:	6822      	ldr	r2, [r4, #0]
 800e094:	07d2      	lsls	r2, r2, #31
 800e096:	d501      	bpl.n	800e09c <_printf_float+0x17c>
 800e098:	3301      	adds	r3, #1
 800e09a:	6123      	str	r3, [r4, #16]
 800e09c:	2323      	movs	r3, #35	; 0x23
 800e09e:	aa08      	add	r2, sp, #32
 800e0a0:	189b      	adds	r3, r3, r2
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d100      	bne.n	800e0aa <_printf_float+0x18a>
 800e0a8:	e78d      	b.n	800dfc6 <_printf_float+0xa6>
 800e0aa:	0023      	movs	r3, r4
 800e0ac:	222d      	movs	r2, #45	; 0x2d
 800e0ae:	3343      	adds	r3, #67	; 0x43
 800e0b0:	701a      	strb	r2, [r3, #0]
 800e0b2:	e788      	b.n	800dfc6 <_printf_float+0xa6>
 800e0b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0b6:	2a47      	cmp	r2, #71	; 0x47
 800e0b8:	d1b3      	bne.n	800e022 <_printf_float+0x102>
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1b1      	bne.n	800e022 <_printf_float+0x102>
 800e0be:	3301      	adds	r3, #1
 800e0c0:	e7ae      	b.n	800e020 <_printf_float+0x100>
 800e0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c4:	2b66      	cmp	r3, #102	; 0x66
 800e0c6:	d11b      	bne.n	800e100 <_printf_float+0x1e0>
 800e0c8:	6863      	ldr	r3, [r4, #4]
 800e0ca:	2900      	cmp	r1, #0
 800e0cc:	dd09      	ble.n	800e0e2 <_printf_float+0x1c2>
 800e0ce:	6121      	str	r1, [r4, #16]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <_printf_float+0x1ba>
 800e0d4:	6822      	ldr	r2, [r4, #0]
 800e0d6:	07d2      	lsls	r2, r2, #31
 800e0d8:	d50b      	bpl.n	800e0f2 <_printf_float+0x1d2>
 800e0da:	3301      	adds	r3, #1
 800e0dc:	185b      	adds	r3, r3, r1
 800e0de:	6123      	str	r3, [r4, #16]
 800e0e0:	e007      	b.n	800e0f2 <_printf_float+0x1d2>
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d103      	bne.n	800e0ee <_printf_float+0x1ce>
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	6821      	ldr	r1, [r4, #0]
 800e0ea:	4211      	tst	r1, r2
 800e0ec:	d000      	beq.n	800e0f0 <_printf_float+0x1d0>
 800e0ee:	1c9a      	adds	r2, r3, #2
 800e0f0:	6122      	str	r2, [r4, #16]
 800e0f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0f4:	65a3      	str	r3, [r4, #88]	; 0x58
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0fa:	e7cf      	b.n	800e09c <_printf_float+0x17c>
 800e0fc:	2367      	movs	r3, #103	; 0x67
 800e0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e100:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e102:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e104:	4299      	cmp	r1, r3
 800e106:	db06      	blt.n	800e116 <_printf_float+0x1f6>
 800e108:	6823      	ldr	r3, [r4, #0]
 800e10a:	6121      	str	r1, [r4, #16]
 800e10c:	07db      	lsls	r3, r3, #31
 800e10e:	d5f0      	bpl.n	800e0f2 <_printf_float+0x1d2>
 800e110:	3101      	adds	r1, #1
 800e112:	6121      	str	r1, [r4, #16]
 800e114:	e7ed      	b.n	800e0f2 <_printf_float+0x1d2>
 800e116:	2201      	movs	r2, #1
 800e118:	2900      	cmp	r1, #0
 800e11a:	dc01      	bgt.n	800e120 <_printf_float+0x200>
 800e11c:	1892      	adds	r2, r2, r2
 800e11e:	1a52      	subs	r2, r2, r1
 800e120:	189b      	adds	r3, r3, r2
 800e122:	e7dc      	b.n	800e0de <_printf_float+0x1be>
 800e124:	6822      	ldr	r2, [r4, #0]
 800e126:	0553      	lsls	r3, r2, #21
 800e128:	d408      	bmi.n	800e13c <_printf_float+0x21c>
 800e12a:	6923      	ldr	r3, [r4, #16]
 800e12c:	002a      	movs	r2, r5
 800e12e:	0038      	movs	r0, r7
 800e130:	9908      	ldr	r1, [sp, #32]
 800e132:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e134:	47a8      	blx	r5
 800e136:	3001      	adds	r0, #1
 800e138:	d12a      	bne.n	800e190 <_printf_float+0x270>
 800e13a:	e74f      	b.n	800dfdc <_printf_float+0xbc>
 800e13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e13e:	2b65      	cmp	r3, #101	; 0x65
 800e140:	d800      	bhi.n	800e144 <_printf_float+0x224>
 800e142:	e0ec      	b.n	800e31e <_printf_float+0x3fe>
 800e144:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e146:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e148:	2200      	movs	r2, #0
 800e14a:	2300      	movs	r3, #0
 800e14c:	f7f2 f97e 	bl	800044c <__aeabi_dcmpeq>
 800e150:	2800      	cmp	r0, #0
 800e152:	d034      	beq.n	800e1be <_printf_float+0x29e>
 800e154:	2301      	movs	r3, #1
 800e156:	0038      	movs	r0, r7
 800e158:	4a37      	ldr	r2, [pc, #220]	; (800e238 <_printf_float+0x318>)
 800e15a:	9908      	ldr	r1, [sp, #32]
 800e15c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e15e:	47a8      	blx	r5
 800e160:	3001      	adds	r0, #1
 800e162:	d100      	bne.n	800e166 <_printf_float+0x246>
 800e164:	e73a      	b.n	800dfdc <_printf_float+0xbc>
 800e166:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e16a:	429a      	cmp	r2, r3
 800e16c:	db02      	blt.n	800e174 <_printf_float+0x254>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	07db      	lsls	r3, r3, #31
 800e172:	d50d      	bpl.n	800e190 <_printf_float+0x270>
 800e174:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e176:	0038      	movs	r0, r7
 800e178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e17a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e17c:	9908      	ldr	r1, [sp, #32]
 800e17e:	47a8      	blx	r5
 800e180:	2500      	movs	r5, #0
 800e182:	3001      	adds	r0, #1
 800e184:	d100      	bne.n	800e188 <_printf_float+0x268>
 800e186:	e729      	b.n	800dfdc <_printf_float+0xbc>
 800e188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e18a:	3b01      	subs	r3, #1
 800e18c:	42ab      	cmp	r3, r5
 800e18e:	dc0a      	bgt.n	800e1a6 <_printf_float+0x286>
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	079b      	lsls	r3, r3, #30
 800e194:	d500      	bpl.n	800e198 <_printf_float+0x278>
 800e196:	e116      	b.n	800e3c6 <_printf_float+0x4a6>
 800e198:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e19a:	68e0      	ldr	r0, [r4, #12]
 800e19c:	4298      	cmp	r0, r3
 800e19e:	db00      	blt.n	800e1a2 <_printf_float+0x282>
 800e1a0:	e71e      	b.n	800dfe0 <_printf_float+0xc0>
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	e71c      	b.n	800dfe0 <_printf_float+0xc0>
 800e1a6:	0022      	movs	r2, r4
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	0038      	movs	r0, r7
 800e1ac:	9908      	ldr	r1, [sp, #32]
 800e1ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e1b0:	321a      	adds	r2, #26
 800e1b2:	47b0      	blx	r6
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	d100      	bne.n	800e1ba <_printf_float+0x29a>
 800e1b8:	e710      	b.n	800dfdc <_printf_float+0xbc>
 800e1ba:	3501      	adds	r5, #1
 800e1bc:	e7e4      	b.n	800e188 <_printf_float+0x268>
 800e1be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	dc3b      	bgt.n	800e23c <_printf_float+0x31c>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	0038      	movs	r0, r7
 800e1c8:	4a1b      	ldr	r2, [pc, #108]	; (800e238 <_printf_float+0x318>)
 800e1ca:	9908      	ldr	r1, [sp, #32]
 800e1cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e1ce:	47b0      	blx	r6
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	d100      	bne.n	800e1d6 <_printf_float+0x2b6>
 800e1d4:	e702      	b.n	800dfdc <_printf_float+0xbc>
 800e1d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	d102      	bne.n	800e1e4 <_printf_float+0x2c4>
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	07db      	lsls	r3, r3, #31
 800e1e2:	d5d5      	bpl.n	800e190 <_printf_float+0x270>
 800e1e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1e6:	0038      	movs	r0, r7
 800e1e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1ea:	9908      	ldr	r1, [sp, #32]
 800e1ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e1ee:	47b0      	blx	r6
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	d100      	bne.n	800e1f8 <_printf_float+0x2d8>
 800e1f6:	e6f1      	b.n	800dfdc <_printf_float+0xbc>
 800e1f8:	930a      	str	r3, [sp, #40]	; 0x28
 800e1fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1fe:	425b      	negs	r3, r3
 800e200:	4293      	cmp	r3, r2
 800e202:	dc01      	bgt.n	800e208 <_printf_float+0x2e8>
 800e204:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e206:	e791      	b.n	800e12c <_printf_float+0x20c>
 800e208:	0022      	movs	r2, r4
 800e20a:	2301      	movs	r3, #1
 800e20c:	0038      	movs	r0, r7
 800e20e:	9908      	ldr	r1, [sp, #32]
 800e210:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e212:	321a      	adds	r2, #26
 800e214:	47b0      	blx	r6
 800e216:	3001      	adds	r0, #1
 800e218:	d100      	bne.n	800e21c <_printf_float+0x2fc>
 800e21a:	e6df      	b.n	800dfdc <_printf_float+0xbc>
 800e21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e21e:	3301      	adds	r3, #1
 800e220:	e7ea      	b.n	800e1f8 <_printf_float+0x2d8>
 800e222:	46c0      	nop			; (mov r8, r8)
 800e224:	7fefffff 	.word	0x7fefffff
 800e228:	08013cf1 	.word	0x08013cf1
 800e22c:	08013cf5 	.word	0x08013cf5
 800e230:	08013cf9 	.word	0x08013cf9
 800e234:	08013cfd 	.word	0x08013cfd
 800e238:	08013d01 	.word	0x08013d01
 800e23c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e23e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e240:	920a      	str	r2, [sp, #40]	; 0x28
 800e242:	429a      	cmp	r2, r3
 800e244:	dd00      	ble.n	800e248 <_printf_float+0x328>
 800e246:	930a      	str	r3, [sp, #40]	; 0x28
 800e248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	dc3d      	bgt.n	800e2ca <_printf_float+0x3aa>
 800e24e:	2300      	movs	r3, #0
 800e250:	930e      	str	r3, [sp, #56]	; 0x38
 800e252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e254:	43db      	mvns	r3, r3
 800e256:	17db      	asrs	r3, r3, #31
 800e258:	930f      	str	r3, [sp, #60]	; 0x3c
 800e25a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e25e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e262:	4013      	ands	r3, r2
 800e264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e26a:	4293      	cmp	r3, r2
 800e26c:	dc36      	bgt.n	800e2dc <_printf_float+0x3bc>
 800e26e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e272:	429a      	cmp	r2, r3
 800e274:	db40      	blt.n	800e2f8 <_printf_float+0x3d8>
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	07db      	lsls	r3, r3, #31
 800e27a:	d43d      	bmi.n	800e2f8 <_printf_float+0x3d8>
 800e27c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800e27e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e282:	1af3      	subs	r3, r6, r3
 800e284:	1ab6      	subs	r6, r6, r2
 800e286:	429e      	cmp	r6, r3
 800e288:	dd00      	ble.n	800e28c <_printf_float+0x36c>
 800e28a:	001e      	movs	r6, r3
 800e28c:	2e00      	cmp	r6, #0
 800e28e:	dc3c      	bgt.n	800e30a <_printf_float+0x3ea>
 800e290:	2300      	movs	r3, #0
 800e292:	930a      	str	r3, [sp, #40]	; 0x28
 800e294:	43f3      	mvns	r3, r6
 800e296:	17db      	asrs	r3, r3, #31
 800e298:	930b      	str	r3, [sp, #44]	; 0x2c
 800e29a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e29c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e29e:	1a9b      	subs	r3, r3, r2
 800e2a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2a2:	4032      	ands	r2, r6
 800e2a4:	1a9b      	subs	r3, r3, r2
 800e2a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	dc00      	bgt.n	800e2ae <_printf_float+0x38e>
 800e2ac:	e770      	b.n	800e190 <_printf_float+0x270>
 800e2ae:	0022      	movs	r2, r4
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	0038      	movs	r0, r7
 800e2b4:	9908      	ldr	r1, [sp, #32]
 800e2b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e2b8:	321a      	adds	r2, #26
 800e2ba:	47a8      	blx	r5
 800e2bc:	3001      	adds	r0, #1
 800e2be:	d100      	bne.n	800e2c2 <_printf_float+0x3a2>
 800e2c0:	e68c      	b.n	800dfdc <_printf_float+0xbc>
 800e2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e2c8:	e7e7      	b.n	800e29a <_printf_float+0x37a>
 800e2ca:	002a      	movs	r2, r5
 800e2cc:	0038      	movs	r0, r7
 800e2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2d0:	9908      	ldr	r1, [sp, #32]
 800e2d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e2d4:	47b0      	blx	r6
 800e2d6:	3001      	adds	r0, #1
 800e2d8:	d1b9      	bne.n	800e24e <_printf_float+0x32e>
 800e2da:	e67f      	b.n	800dfdc <_printf_float+0xbc>
 800e2dc:	0022      	movs	r2, r4
 800e2de:	2301      	movs	r3, #1
 800e2e0:	0038      	movs	r0, r7
 800e2e2:	9908      	ldr	r1, [sp, #32]
 800e2e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e2e6:	321a      	adds	r2, #26
 800e2e8:	47b0      	blx	r6
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	d100      	bne.n	800e2f0 <_printf_float+0x3d0>
 800e2ee:	e675      	b.n	800dfdc <_printf_float+0xbc>
 800e2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	930e      	str	r3, [sp, #56]	; 0x38
 800e2f6:	e7b0      	b.n	800e25a <_printf_float+0x33a>
 800e2f8:	0038      	movs	r0, r7
 800e2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2fe:	9908      	ldr	r1, [sp, #32]
 800e300:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e302:	47b0      	blx	r6
 800e304:	3001      	adds	r0, #1
 800e306:	d1b9      	bne.n	800e27c <_printf_float+0x35c>
 800e308:	e668      	b.n	800dfdc <_printf_float+0xbc>
 800e30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e30c:	0038      	movs	r0, r7
 800e30e:	18ea      	adds	r2, r5, r3
 800e310:	9908      	ldr	r1, [sp, #32]
 800e312:	0033      	movs	r3, r6
 800e314:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e316:	47a8      	blx	r5
 800e318:	3001      	adds	r0, #1
 800e31a:	d1b9      	bne.n	800e290 <_printf_float+0x370>
 800e31c:	e65e      	b.n	800dfdc <_printf_float+0xbc>
 800e31e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e320:	2b01      	cmp	r3, #1
 800e322:	dc02      	bgt.n	800e32a <_printf_float+0x40a>
 800e324:	2301      	movs	r3, #1
 800e326:	421a      	tst	r2, r3
 800e328:	d03a      	beq.n	800e3a0 <_printf_float+0x480>
 800e32a:	2301      	movs	r3, #1
 800e32c:	002a      	movs	r2, r5
 800e32e:	0038      	movs	r0, r7
 800e330:	9908      	ldr	r1, [sp, #32]
 800e332:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e334:	47b0      	blx	r6
 800e336:	3001      	adds	r0, #1
 800e338:	d100      	bne.n	800e33c <_printf_float+0x41c>
 800e33a:	e64f      	b.n	800dfdc <_printf_float+0xbc>
 800e33c:	0038      	movs	r0, r7
 800e33e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e342:	9908      	ldr	r1, [sp, #32]
 800e344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e346:	47b0      	blx	r6
 800e348:	3001      	adds	r0, #1
 800e34a:	d100      	bne.n	800e34e <_printf_float+0x42e>
 800e34c:	e646      	b.n	800dfdc <_printf_float+0xbc>
 800e34e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e350:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e352:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e354:	2200      	movs	r2, #0
 800e356:	001e      	movs	r6, r3
 800e358:	2300      	movs	r3, #0
 800e35a:	f7f2 f877 	bl	800044c <__aeabi_dcmpeq>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d11c      	bne.n	800e39c <_printf_float+0x47c>
 800e362:	0033      	movs	r3, r6
 800e364:	1c6a      	adds	r2, r5, #1
 800e366:	3b01      	subs	r3, #1
 800e368:	0038      	movs	r0, r7
 800e36a:	9908      	ldr	r1, [sp, #32]
 800e36c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e36e:	47a8      	blx	r5
 800e370:	3001      	adds	r0, #1
 800e372:	d10f      	bne.n	800e394 <_printf_float+0x474>
 800e374:	e632      	b.n	800dfdc <_printf_float+0xbc>
 800e376:	0022      	movs	r2, r4
 800e378:	2301      	movs	r3, #1
 800e37a:	0038      	movs	r0, r7
 800e37c:	9908      	ldr	r1, [sp, #32]
 800e37e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e380:	321a      	adds	r2, #26
 800e382:	47b0      	blx	r6
 800e384:	3001      	adds	r0, #1
 800e386:	d100      	bne.n	800e38a <_printf_float+0x46a>
 800e388:	e628      	b.n	800dfdc <_printf_float+0xbc>
 800e38a:	3501      	adds	r5, #1
 800e38c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e38e:	3b01      	subs	r3, #1
 800e390:	42ab      	cmp	r3, r5
 800e392:	dcf0      	bgt.n	800e376 <_printf_float+0x456>
 800e394:	0022      	movs	r2, r4
 800e396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e398:	3250      	adds	r2, #80	; 0x50
 800e39a:	e6c8      	b.n	800e12e <_printf_float+0x20e>
 800e39c:	2500      	movs	r5, #0
 800e39e:	e7f5      	b.n	800e38c <_printf_float+0x46c>
 800e3a0:	002a      	movs	r2, r5
 800e3a2:	e7e1      	b.n	800e368 <_printf_float+0x448>
 800e3a4:	0022      	movs	r2, r4
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	0038      	movs	r0, r7
 800e3aa:	9908      	ldr	r1, [sp, #32]
 800e3ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e3ae:	3219      	adds	r2, #25
 800e3b0:	47b0      	blx	r6
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	d100      	bne.n	800e3b8 <_printf_float+0x498>
 800e3b6:	e611      	b.n	800dfdc <_printf_float+0xbc>
 800e3b8:	3501      	adds	r5, #1
 800e3ba:	68e3      	ldr	r3, [r4, #12]
 800e3bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e3be:	1a9b      	subs	r3, r3, r2
 800e3c0:	42ab      	cmp	r3, r5
 800e3c2:	dcef      	bgt.n	800e3a4 <_printf_float+0x484>
 800e3c4:	e6e8      	b.n	800e198 <_printf_float+0x278>
 800e3c6:	2500      	movs	r5, #0
 800e3c8:	e7f7      	b.n	800e3ba <_printf_float+0x49a>
 800e3ca:	46c0      	nop			; (mov r8, r8)

0800e3cc <_printf_common>:
 800e3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3ce:	0016      	movs	r6, r2
 800e3d0:	9301      	str	r3, [sp, #4]
 800e3d2:	688a      	ldr	r2, [r1, #8]
 800e3d4:	690b      	ldr	r3, [r1, #16]
 800e3d6:	000c      	movs	r4, r1
 800e3d8:	9000      	str	r0, [sp, #0]
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	da00      	bge.n	800e3e0 <_printf_common+0x14>
 800e3de:	0013      	movs	r3, r2
 800e3e0:	0022      	movs	r2, r4
 800e3e2:	6033      	str	r3, [r6, #0]
 800e3e4:	3243      	adds	r2, #67	; 0x43
 800e3e6:	7812      	ldrb	r2, [r2, #0]
 800e3e8:	2a00      	cmp	r2, #0
 800e3ea:	d001      	beq.n	800e3f0 <_printf_common+0x24>
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	6033      	str	r3, [r6, #0]
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	069b      	lsls	r3, r3, #26
 800e3f4:	d502      	bpl.n	800e3fc <_printf_common+0x30>
 800e3f6:	6833      	ldr	r3, [r6, #0]
 800e3f8:	3302      	adds	r3, #2
 800e3fa:	6033      	str	r3, [r6, #0]
 800e3fc:	6822      	ldr	r2, [r4, #0]
 800e3fe:	2306      	movs	r3, #6
 800e400:	0015      	movs	r5, r2
 800e402:	401d      	ands	r5, r3
 800e404:	421a      	tst	r2, r3
 800e406:	d027      	beq.n	800e458 <_printf_common+0x8c>
 800e408:	0023      	movs	r3, r4
 800e40a:	3343      	adds	r3, #67	; 0x43
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	1e5a      	subs	r2, r3, #1
 800e410:	4193      	sbcs	r3, r2
 800e412:	6822      	ldr	r2, [r4, #0]
 800e414:	0692      	lsls	r2, r2, #26
 800e416:	d430      	bmi.n	800e47a <_printf_common+0xae>
 800e418:	0022      	movs	r2, r4
 800e41a:	9901      	ldr	r1, [sp, #4]
 800e41c:	9800      	ldr	r0, [sp, #0]
 800e41e:	9d08      	ldr	r5, [sp, #32]
 800e420:	3243      	adds	r2, #67	; 0x43
 800e422:	47a8      	blx	r5
 800e424:	3001      	adds	r0, #1
 800e426:	d025      	beq.n	800e474 <_printf_common+0xa8>
 800e428:	2206      	movs	r2, #6
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	2500      	movs	r5, #0
 800e42e:	4013      	ands	r3, r2
 800e430:	2b04      	cmp	r3, #4
 800e432:	d105      	bne.n	800e440 <_printf_common+0x74>
 800e434:	6833      	ldr	r3, [r6, #0]
 800e436:	68e5      	ldr	r5, [r4, #12]
 800e438:	1aed      	subs	r5, r5, r3
 800e43a:	43eb      	mvns	r3, r5
 800e43c:	17db      	asrs	r3, r3, #31
 800e43e:	401d      	ands	r5, r3
 800e440:	68a3      	ldr	r3, [r4, #8]
 800e442:	6922      	ldr	r2, [r4, #16]
 800e444:	4293      	cmp	r3, r2
 800e446:	dd01      	ble.n	800e44c <_printf_common+0x80>
 800e448:	1a9b      	subs	r3, r3, r2
 800e44a:	18ed      	adds	r5, r5, r3
 800e44c:	2600      	movs	r6, #0
 800e44e:	42b5      	cmp	r5, r6
 800e450:	d120      	bne.n	800e494 <_printf_common+0xc8>
 800e452:	2000      	movs	r0, #0
 800e454:	e010      	b.n	800e478 <_printf_common+0xac>
 800e456:	3501      	adds	r5, #1
 800e458:	68e3      	ldr	r3, [r4, #12]
 800e45a:	6832      	ldr	r2, [r6, #0]
 800e45c:	1a9b      	subs	r3, r3, r2
 800e45e:	42ab      	cmp	r3, r5
 800e460:	ddd2      	ble.n	800e408 <_printf_common+0x3c>
 800e462:	0022      	movs	r2, r4
 800e464:	2301      	movs	r3, #1
 800e466:	9901      	ldr	r1, [sp, #4]
 800e468:	9800      	ldr	r0, [sp, #0]
 800e46a:	9f08      	ldr	r7, [sp, #32]
 800e46c:	3219      	adds	r2, #25
 800e46e:	47b8      	blx	r7
 800e470:	3001      	adds	r0, #1
 800e472:	d1f0      	bne.n	800e456 <_printf_common+0x8a>
 800e474:	2001      	movs	r0, #1
 800e476:	4240      	negs	r0, r0
 800e478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e47a:	2030      	movs	r0, #48	; 0x30
 800e47c:	18e1      	adds	r1, r4, r3
 800e47e:	3143      	adds	r1, #67	; 0x43
 800e480:	7008      	strb	r0, [r1, #0]
 800e482:	0021      	movs	r1, r4
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	3145      	adds	r1, #69	; 0x45
 800e488:	7809      	ldrb	r1, [r1, #0]
 800e48a:	18a2      	adds	r2, r4, r2
 800e48c:	3243      	adds	r2, #67	; 0x43
 800e48e:	3302      	adds	r3, #2
 800e490:	7011      	strb	r1, [r2, #0]
 800e492:	e7c1      	b.n	800e418 <_printf_common+0x4c>
 800e494:	0022      	movs	r2, r4
 800e496:	2301      	movs	r3, #1
 800e498:	9901      	ldr	r1, [sp, #4]
 800e49a:	9800      	ldr	r0, [sp, #0]
 800e49c:	9f08      	ldr	r7, [sp, #32]
 800e49e:	321a      	adds	r2, #26
 800e4a0:	47b8      	blx	r7
 800e4a2:	3001      	adds	r0, #1
 800e4a4:	d0e6      	beq.n	800e474 <_printf_common+0xa8>
 800e4a6:	3601      	adds	r6, #1
 800e4a8:	e7d1      	b.n	800e44e <_printf_common+0x82>
	...

0800e4ac <_printf_i>:
 800e4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ae:	b08b      	sub	sp, #44	; 0x2c
 800e4b0:	9206      	str	r2, [sp, #24]
 800e4b2:	000a      	movs	r2, r1
 800e4b4:	3243      	adds	r2, #67	; 0x43
 800e4b6:	9307      	str	r3, [sp, #28]
 800e4b8:	9005      	str	r0, [sp, #20]
 800e4ba:	9204      	str	r2, [sp, #16]
 800e4bc:	7e0a      	ldrb	r2, [r1, #24]
 800e4be:	000c      	movs	r4, r1
 800e4c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4c2:	2a78      	cmp	r2, #120	; 0x78
 800e4c4:	d809      	bhi.n	800e4da <_printf_i+0x2e>
 800e4c6:	2a62      	cmp	r2, #98	; 0x62
 800e4c8:	d80b      	bhi.n	800e4e2 <_printf_i+0x36>
 800e4ca:	2a00      	cmp	r2, #0
 800e4cc:	d100      	bne.n	800e4d0 <_printf_i+0x24>
 800e4ce:	e0be      	b.n	800e64e <_printf_i+0x1a2>
 800e4d0:	497c      	ldr	r1, [pc, #496]	; (800e6c4 <_printf_i+0x218>)
 800e4d2:	9103      	str	r1, [sp, #12]
 800e4d4:	2a58      	cmp	r2, #88	; 0x58
 800e4d6:	d100      	bne.n	800e4da <_printf_i+0x2e>
 800e4d8:	e093      	b.n	800e602 <_printf_i+0x156>
 800e4da:	0026      	movs	r6, r4
 800e4dc:	3642      	adds	r6, #66	; 0x42
 800e4de:	7032      	strb	r2, [r6, #0]
 800e4e0:	e022      	b.n	800e528 <_printf_i+0x7c>
 800e4e2:	0010      	movs	r0, r2
 800e4e4:	3863      	subs	r0, #99	; 0x63
 800e4e6:	2815      	cmp	r0, #21
 800e4e8:	d8f7      	bhi.n	800e4da <_printf_i+0x2e>
 800e4ea:	f7f1 fe1f 	bl	800012c <__gnu_thumb1_case_shi>
 800e4ee:	0016      	.short	0x0016
 800e4f0:	fff6001f 	.word	0xfff6001f
 800e4f4:	fff6fff6 	.word	0xfff6fff6
 800e4f8:	001ffff6 	.word	0x001ffff6
 800e4fc:	fff6fff6 	.word	0xfff6fff6
 800e500:	fff6fff6 	.word	0xfff6fff6
 800e504:	003600a3 	.word	0x003600a3
 800e508:	fff60083 	.word	0xfff60083
 800e50c:	00b4fff6 	.word	0x00b4fff6
 800e510:	0036fff6 	.word	0x0036fff6
 800e514:	fff6fff6 	.word	0xfff6fff6
 800e518:	0087      	.short	0x0087
 800e51a:	0026      	movs	r6, r4
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	3642      	adds	r6, #66	; 0x42
 800e520:	1d11      	adds	r1, r2, #4
 800e522:	6019      	str	r1, [r3, #0]
 800e524:	6813      	ldr	r3, [r2, #0]
 800e526:	7033      	strb	r3, [r6, #0]
 800e528:	2301      	movs	r3, #1
 800e52a:	e0a2      	b.n	800e672 <_printf_i+0x1c6>
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	6809      	ldr	r1, [r1, #0]
 800e530:	1d02      	adds	r2, r0, #4
 800e532:	060d      	lsls	r5, r1, #24
 800e534:	d50b      	bpl.n	800e54e <_printf_i+0xa2>
 800e536:	6805      	ldr	r5, [r0, #0]
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	2d00      	cmp	r5, #0
 800e53c:	da03      	bge.n	800e546 <_printf_i+0x9a>
 800e53e:	232d      	movs	r3, #45	; 0x2d
 800e540:	9a04      	ldr	r2, [sp, #16]
 800e542:	426d      	negs	r5, r5
 800e544:	7013      	strb	r3, [r2, #0]
 800e546:	4b5f      	ldr	r3, [pc, #380]	; (800e6c4 <_printf_i+0x218>)
 800e548:	270a      	movs	r7, #10
 800e54a:	9303      	str	r3, [sp, #12]
 800e54c:	e01b      	b.n	800e586 <_printf_i+0xda>
 800e54e:	6805      	ldr	r5, [r0, #0]
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	0649      	lsls	r1, r1, #25
 800e554:	d5f1      	bpl.n	800e53a <_printf_i+0x8e>
 800e556:	b22d      	sxth	r5, r5
 800e558:	e7ef      	b.n	800e53a <_printf_i+0x8e>
 800e55a:	680d      	ldr	r5, [r1, #0]
 800e55c:	6819      	ldr	r1, [r3, #0]
 800e55e:	1d08      	adds	r0, r1, #4
 800e560:	6018      	str	r0, [r3, #0]
 800e562:	062e      	lsls	r6, r5, #24
 800e564:	d501      	bpl.n	800e56a <_printf_i+0xbe>
 800e566:	680d      	ldr	r5, [r1, #0]
 800e568:	e003      	b.n	800e572 <_printf_i+0xc6>
 800e56a:	066d      	lsls	r5, r5, #25
 800e56c:	d5fb      	bpl.n	800e566 <_printf_i+0xba>
 800e56e:	680d      	ldr	r5, [r1, #0]
 800e570:	b2ad      	uxth	r5, r5
 800e572:	4b54      	ldr	r3, [pc, #336]	; (800e6c4 <_printf_i+0x218>)
 800e574:	2708      	movs	r7, #8
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	2a6f      	cmp	r2, #111	; 0x6f
 800e57a:	d000      	beq.n	800e57e <_printf_i+0xd2>
 800e57c:	3702      	adds	r7, #2
 800e57e:	0023      	movs	r3, r4
 800e580:	2200      	movs	r2, #0
 800e582:	3343      	adds	r3, #67	; 0x43
 800e584:	701a      	strb	r2, [r3, #0]
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	60a3      	str	r3, [r4, #8]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	db03      	blt.n	800e596 <_printf_i+0xea>
 800e58e:	2104      	movs	r1, #4
 800e590:	6822      	ldr	r2, [r4, #0]
 800e592:	438a      	bics	r2, r1
 800e594:	6022      	str	r2, [r4, #0]
 800e596:	2d00      	cmp	r5, #0
 800e598:	d102      	bne.n	800e5a0 <_printf_i+0xf4>
 800e59a:	9e04      	ldr	r6, [sp, #16]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d00c      	beq.n	800e5ba <_printf_i+0x10e>
 800e5a0:	9e04      	ldr	r6, [sp, #16]
 800e5a2:	0028      	movs	r0, r5
 800e5a4:	0039      	movs	r1, r7
 800e5a6:	f7f1 fe51 	bl	800024c <__aeabi_uidivmod>
 800e5aa:	9b03      	ldr	r3, [sp, #12]
 800e5ac:	3e01      	subs	r6, #1
 800e5ae:	5c5b      	ldrb	r3, [r3, r1]
 800e5b0:	7033      	strb	r3, [r6, #0]
 800e5b2:	002b      	movs	r3, r5
 800e5b4:	0005      	movs	r5, r0
 800e5b6:	429f      	cmp	r7, r3
 800e5b8:	d9f3      	bls.n	800e5a2 <_printf_i+0xf6>
 800e5ba:	2f08      	cmp	r7, #8
 800e5bc:	d109      	bne.n	800e5d2 <_printf_i+0x126>
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	07db      	lsls	r3, r3, #31
 800e5c2:	d506      	bpl.n	800e5d2 <_printf_i+0x126>
 800e5c4:	6862      	ldr	r2, [r4, #4]
 800e5c6:	6923      	ldr	r3, [r4, #16]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	dc02      	bgt.n	800e5d2 <_printf_i+0x126>
 800e5cc:	2330      	movs	r3, #48	; 0x30
 800e5ce:	3e01      	subs	r6, #1
 800e5d0:	7033      	strb	r3, [r6, #0]
 800e5d2:	9b04      	ldr	r3, [sp, #16]
 800e5d4:	1b9b      	subs	r3, r3, r6
 800e5d6:	6123      	str	r3, [r4, #16]
 800e5d8:	9b07      	ldr	r3, [sp, #28]
 800e5da:	0021      	movs	r1, r4
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	9805      	ldr	r0, [sp, #20]
 800e5e0:	9b06      	ldr	r3, [sp, #24]
 800e5e2:	aa09      	add	r2, sp, #36	; 0x24
 800e5e4:	f7ff fef2 	bl	800e3cc <_printf_common>
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	d147      	bne.n	800e67c <_printf_i+0x1d0>
 800e5ec:	2001      	movs	r0, #1
 800e5ee:	4240      	negs	r0, r0
 800e5f0:	b00b      	add	sp, #44	; 0x2c
 800e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5f4:	2220      	movs	r2, #32
 800e5f6:	6809      	ldr	r1, [r1, #0]
 800e5f8:	430a      	orrs	r2, r1
 800e5fa:	6022      	str	r2, [r4, #0]
 800e5fc:	2278      	movs	r2, #120	; 0x78
 800e5fe:	4932      	ldr	r1, [pc, #200]	; (800e6c8 <_printf_i+0x21c>)
 800e600:	9103      	str	r1, [sp, #12]
 800e602:	0021      	movs	r1, r4
 800e604:	3145      	adds	r1, #69	; 0x45
 800e606:	700a      	strb	r2, [r1, #0]
 800e608:	6819      	ldr	r1, [r3, #0]
 800e60a:	6822      	ldr	r2, [r4, #0]
 800e60c:	c920      	ldmia	r1!, {r5}
 800e60e:	0610      	lsls	r0, r2, #24
 800e610:	d402      	bmi.n	800e618 <_printf_i+0x16c>
 800e612:	0650      	lsls	r0, r2, #25
 800e614:	d500      	bpl.n	800e618 <_printf_i+0x16c>
 800e616:	b2ad      	uxth	r5, r5
 800e618:	6019      	str	r1, [r3, #0]
 800e61a:	07d3      	lsls	r3, r2, #31
 800e61c:	d502      	bpl.n	800e624 <_printf_i+0x178>
 800e61e:	2320      	movs	r3, #32
 800e620:	4313      	orrs	r3, r2
 800e622:	6023      	str	r3, [r4, #0]
 800e624:	2710      	movs	r7, #16
 800e626:	2d00      	cmp	r5, #0
 800e628:	d1a9      	bne.n	800e57e <_printf_i+0xd2>
 800e62a:	2220      	movs	r2, #32
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	4393      	bics	r3, r2
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	e7a4      	b.n	800e57e <_printf_i+0xd2>
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	680d      	ldr	r5, [r1, #0]
 800e638:	1d10      	adds	r0, r2, #4
 800e63a:	6949      	ldr	r1, [r1, #20]
 800e63c:	6018      	str	r0, [r3, #0]
 800e63e:	6813      	ldr	r3, [r2, #0]
 800e640:	062e      	lsls	r6, r5, #24
 800e642:	d501      	bpl.n	800e648 <_printf_i+0x19c>
 800e644:	6019      	str	r1, [r3, #0]
 800e646:	e002      	b.n	800e64e <_printf_i+0x1a2>
 800e648:	066d      	lsls	r5, r5, #25
 800e64a:	d5fb      	bpl.n	800e644 <_printf_i+0x198>
 800e64c:	8019      	strh	r1, [r3, #0]
 800e64e:	2300      	movs	r3, #0
 800e650:	9e04      	ldr	r6, [sp, #16]
 800e652:	6123      	str	r3, [r4, #16]
 800e654:	e7c0      	b.n	800e5d8 <_printf_i+0x12c>
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	1d11      	adds	r1, r2, #4
 800e65a:	6019      	str	r1, [r3, #0]
 800e65c:	6816      	ldr	r6, [r2, #0]
 800e65e:	2100      	movs	r1, #0
 800e660:	0030      	movs	r0, r6
 800e662:	6862      	ldr	r2, [r4, #4]
 800e664:	f000 fd65 	bl	800f132 <memchr>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d001      	beq.n	800e670 <_printf_i+0x1c4>
 800e66c:	1b80      	subs	r0, r0, r6
 800e66e:	6060      	str	r0, [r4, #4]
 800e670:	6863      	ldr	r3, [r4, #4]
 800e672:	6123      	str	r3, [r4, #16]
 800e674:	2300      	movs	r3, #0
 800e676:	9a04      	ldr	r2, [sp, #16]
 800e678:	7013      	strb	r3, [r2, #0]
 800e67a:	e7ad      	b.n	800e5d8 <_printf_i+0x12c>
 800e67c:	0032      	movs	r2, r6
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	9906      	ldr	r1, [sp, #24]
 800e682:	9805      	ldr	r0, [sp, #20]
 800e684:	9d07      	ldr	r5, [sp, #28]
 800e686:	47a8      	blx	r5
 800e688:	3001      	adds	r0, #1
 800e68a:	d0af      	beq.n	800e5ec <_printf_i+0x140>
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	079b      	lsls	r3, r3, #30
 800e690:	d415      	bmi.n	800e6be <_printf_i+0x212>
 800e692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e694:	68e0      	ldr	r0, [r4, #12]
 800e696:	4298      	cmp	r0, r3
 800e698:	daaa      	bge.n	800e5f0 <_printf_i+0x144>
 800e69a:	0018      	movs	r0, r3
 800e69c:	e7a8      	b.n	800e5f0 <_printf_i+0x144>
 800e69e:	0022      	movs	r2, r4
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	9906      	ldr	r1, [sp, #24]
 800e6a4:	9805      	ldr	r0, [sp, #20]
 800e6a6:	9e07      	ldr	r6, [sp, #28]
 800e6a8:	3219      	adds	r2, #25
 800e6aa:	47b0      	blx	r6
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	d09d      	beq.n	800e5ec <_printf_i+0x140>
 800e6b0:	3501      	adds	r5, #1
 800e6b2:	68e3      	ldr	r3, [r4, #12]
 800e6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6b6:	1a9b      	subs	r3, r3, r2
 800e6b8:	42ab      	cmp	r3, r5
 800e6ba:	dcf0      	bgt.n	800e69e <_printf_i+0x1f2>
 800e6bc:	e7e9      	b.n	800e692 <_printf_i+0x1e6>
 800e6be:	2500      	movs	r5, #0
 800e6c0:	e7f7      	b.n	800e6b2 <_printf_i+0x206>
 800e6c2:	46c0      	nop			; (mov r8, r8)
 800e6c4:	08013d03 	.word	0x08013d03
 800e6c8:	08013d14 	.word	0x08013d14

0800e6cc <_scanf_float>:
 800e6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ce:	b08b      	sub	sp, #44	; 0x2c
 800e6d0:	0016      	movs	r6, r2
 800e6d2:	9002      	str	r0, [sp, #8]
 800e6d4:	22ae      	movs	r2, #174	; 0xae
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	9307      	str	r3, [sp, #28]
 800e6da:	688b      	ldr	r3, [r1, #8]
 800e6dc:	000f      	movs	r7, r1
 800e6de:	1e59      	subs	r1, r3, #1
 800e6e0:	0052      	lsls	r2, r2, #1
 800e6e2:	9006      	str	r0, [sp, #24]
 800e6e4:	4291      	cmp	r1, r2
 800e6e6:	d905      	bls.n	800e6f4 <_scanf_float+0x28>
 800e6e8:	3b5e      	subs	r3, #94	; 0x5e
 800e6ea:	3bff      	subs	r3, #255	; 0xff
 800e6ec:	9306      	str	r3, [sp, #24]
 800e6ee:	235e      	movs	r3, #94	; 0x5e
 800e6f0:	33ff      	adds	r3, #255	; 0xff
 800e6f2:	60bb      	str	r3, [r7, #8]
 800e6f4:	23f0      	movs	r3, #240	; 0xf0
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	603b      	str	r3, [r7, #0]
 800e6fe:	003b      	movs	r3, r7
 800e700:	2400      	movs	r4, #0
 800e702:	331c      	adds	r3, #28
 800e704:	001d      	movs	r5, r3
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	9403      	str	r4, [sp, #12]
 800e70a:	9409      	str	r4, [sp, #36]	; 0x24
 800e70c:	9408      	str	r4, [sp, #32]
 800e70e:	9401      	str	r4, [sp, #4]
 800e710:	9405      	str	r4, [sp, #20]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	2a00      	cmp	r2, #0
 800e716:	d00a      	beq.n	800e72e <_scanf_float+0x62>
 800e718:	6833      	ldr	r3, [r6, #0]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	2b4e      	cmp	r3, #78	; 0x4e
 800e71e:	d844      	bhi.n	800e7aa <_scanf_float+0xde>
 800e720:	0018      	movs	r0, r3
 800e722:	2b40      	cmp	r3, #64	; 0x40
 800e724:	d82c      	bhi.n	800e780 <_scanf_float+0xb4>
 800e726:	382b      	subs	r0, #43	; 0x2b
 800e728:	b2c1      	uxtb	r1, r0
 800e72a:	290e      	cmp	r1, #14
 800e72c:	d92a      	bls.n	800e784 <_scanf_float+0xb8>
 800e72e:	9b01      	ldr	r3, [sp, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d003      	beq.n	800e73c <_scanf_float+0x70>
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	4aa3      	ldr	r2, [pc, #652]	; (800e9c4 <_scanf_float+0x2f8>)
 800e738:	4013      	ands	r3, r2
 800e73a:	603b      	str	r3, [r7, #0]
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	3b01      	subs	r3, #1
 800e740:	2b01      	cmp	r3, #1
 800e742:	d900      	bls.n	800e746 <_scanf_float+0x7a>
 800e744:	e0f9      	b.n	800e93a <_scanf_float+0x26e>
 800e746:	24be      	movs	r4, #190	; 0xbe
 800e748:	0064      	lsls	r4, r4, #1
 800e74a:	9b04      	ldr	r3, [sp, #16]
 800e74c:	429d      	cmp	r5, r3
 800e74e:	d900      	bls.n	800e752 <_scanf_float+0x86>
 800e750:	e0e9      	b.n	800e926 <_scanf_float+0x25a>
 800e752:	2301      	movs	r3, #1
 800e754:	9303      	str	r3, [sp, #12]
 800e756:	e183      	b.n	800ea60 <_scanf_float+0x394>
 800e758:	0018      	movs	r0, r3
 800e75a:	3861      	subs	r0, #97	; 0x61
 800e75c:	280d      	cmp	r0, #13
 800e75e:	d8e6      	bhi.n	800e72e <_scanf_float+0x62>
 800e760:	f7f1 fce4 	bl	800012c <__gnu_thumb1_case_shi>
 800e764:	ffe50083 	.word	0xffe50083
 800e768:	ffe5ffe5 	.word	0xffe5ffe5
 800e76c:	00a200b6 	.word	0x00a200b6
 800e770:	ffe5ffe5 	.word	0xffe5ffe5
 800e774:	ffe50089 	.word	0xffe50089
 800e778:	ffe5ffe5 	.word	0xffe5ffe5
 800e77c:	0065ffe5 	.word	0x0065ffe5
 800e780:	3841      	subs	r0, #65	; 0x41
 800e782:	e7eb      	b.n	800e75c <_scanf_float+0x90>
 800e784:	280e      	cmp	r0, #14
 800e786:	d8d2      	bhi.n	800e72e <_scanf_float+0x62>
 800e788:	f7f1 fcd0 	bl	800012c <__gnu_thumb1_case_shi>
 800e78c:	ffd1004b 	.word	0xffd1004b
 800e790:	0098004b 	.word	0x0098004b
 800e794:	0020ffd1 	.word	0x0020ffd1
 800e798:	00400040 	.word	0x00400040
 800e79c:	00400040 	.word	0x00400040
 800e7a0:	00400040 	.word	0x00400040
 800e7a4:	00400040 	.word	0x00400040
 800e7a8:	0040      	.short	0x0040
 800e7aa:	2b6e      	cmp	r3, #110	; 0x6e
 800e7ac:	d809      	bhi.n	800e7c2 <_scanf_float+0xf6>
 800e7ae:	2b60      	cmp	r3, #96	; 0x60
 800e7b0:	d8d2      	bhi.n	800e758 <_scanf_float+0x8c>
 800e7b2:	2b54      	cmp	r3, #84	; 0x54
 800e7b4:	d07d      	beq.n	800e8b2 <_scanf_float+0x1e6>
 800e7b6:	2b59      	cmp	r3, #89	; 0x59
 800e7b8:	d1b9      	bne.n	800e72e <_scanf_float+0x62>
 800e7ba:	2c07      	cmp	r4, #7
 800e7bc:	d1b7      	bne.n	800e72e <_scanf_float+0x62>
 800e7be:	2408      	movs	r4, #8
 800e7c0:	e02c      	b.n	800e81c <_scanf_float+0x150>
 800e7c2:	2b74      	cmp	r3, #116	; 0x74
 800e7c4:	d075      	beq.n	800e8b2 <_scanf_float+0x1e6>
 800e7c6:	2b79      	cmp	r3, #121	; 0x79
 800e7c8:	d0f7      	beq.n	800e7ba <_scanf_float+0xee>
 800e7ca:	e7b0      	b.n	800e72e <_scanf_float+0x62>
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	05c8      	lsls	r0, r1, #23
 800e7d0:	d51c      	bpl.n	800e80c <_scanf_float+0x140>
 800e7d2:	2380      	movs	r3, #128	; 0x80
 800e7d4:	4399      	bics	r1, r3
 800e7d6:	9b01      	ldr	r3, [sp, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	9301      	str	r3, [sp, #4]
 800e7de:	9b06      	ldr	r3, [sp, #24]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d003      	beq.n	800e7ec <_scanf_float+0x120>
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	3201      	adds	r2, #1
 800e7e8:	9306      	str	r3, [sp, #24]
 800e7ea:	60ba      	str	r2, [r7, #8]
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	60bb      	str	r3, [r7, #8]
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	613b      	str	r3, [r7, #16]
 800e7f8:	6873      	ldr	r3, [r6, #4]
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	6073      	str	r3, [r6, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	dc00      	bgt.n	800e804 <_scanf_float+0x138>
 800e802:	e086      	b.n	800e912 <_scanf_float+0x246>
 800e804:	6833      	ldr	r3, [r6, #0]
 800e806:	3301      	adds	r3, #1
 800e808:	6033      	str	r3, [r6, #0]
 800e80a:	e782      	b.n	800e712 <_scanf_float+0x46>
 800e80c:	9a03      	ldr	r2, [sp, #12]
 800e80e:	1912      	adds	r2, r2, r4
 800e810:	2a00      	cmp	r2, #0
 800e812:	d18c      	bne.n	800e72e <_scanf_float+0x62>
 800e814:	683a      	ldr	r2, [r7, #0]
 800e816:	496c      	ldr	r1, [pc, #432]	; (800e9c8 <_scanf_float+0x2fc>)
 800e818:	400a      	ands	r2, r1
 800e81a:	603a      	str	r2, [r7, #0]
 800e81c:	702b      	strb	r3, [r5, #0]
 800e81e:	3501      	adds	r5, #1
 800e820:	e7e4      	b.n	800e7ec <_scanf_float+0x120>
 800e822:	2180      	movs	r1, #128	; 0x80
 800e824:	683a      	ldr	r2, [r7, #0]
 800e826:	420a      	tst	r2, r1
 800e828:	d081      	beq.n	800e72e <_scanf_float+0x62>
 800e82a:	438a      	bics	r2, r1
 800e82c:	e7f5      	b.n	800e81a <_scanf_float+0x14e>
 800e82e:	9a03      	ldr	r2, [sp, #12]
 800e830:	2a00      	cmp	r2, #0
 800e832:	d10f      	bne.n	800e854 <_scanf_float+0x188>
 800e834:	9a01      	ldr	r2, [sp, #4]
 800e836:	2a00      	cmp	r2, #0
 800e838:	d10f      	bne.n	800e85a <_scanf_float+0x18e>
 800e83a:	683a      	ldr	r2, [r7, #0]
 800e83c:	21e0      	movs	r1, #224	; 0xe0
 800e83e:	0010      	movs	r0, r2
 800e840:	00c9      	lsls	r1, r1, #3
 800e842:	4008      	ands	r0, r1
 800e844:	4288      	cmp	r0, r1
 800e846:	d108      	bne.n	800e85a <_scanf_float+0x18e>
 800e848:	4960      	ldr	r1, [pc, #384]	; (800e9cc <_scanf_float+0x300>)
 800e84a:	400a      	ands	r2, r1
 800e84c:	603a      	str	r2, [r7, #0]
 800e84e:	2201      	movs	r2, #1
 800e850:	9203      	str	r2, [sp, #12]
 800e852:	e7e3      	b.n	800e81c <_scanf_float+0x150>
 800e854:	9a03      	ldr	r2, [sp, #12]
 800e856:	2a02      	cmp	r2, #2
 800e858:	d059      	beq.n	800e90e <_scanf_float+0x242>
 800e85a:	2c01      	cmp	r4, #1
 800e85c:	d002      	beq.n	800e864 <_scanf_float+0x198>
 800e85e:	2c04      	cmp	r4, #4
 800e860:	d000      	beq.n	800e864 <_scanf_float+0x198>
 800e862:	e764      	b.n	800e72e <_scanf_float+0x62>
 800e864:	3401      	adds	r4, #1
 800e866:	b2e4      	uxtb	r4, r4
 800e868:	e7d8      	b.n	800e81c <_scanf_float+0x150>
 800e86a:	9a03      	ldr	r2, [sp, #12]
 800e86c:	2a01      	cmp	r2, #1
 800e86e:	d000      	beq.n	800e872 <_scanf_float+0x1a6>
 800e870:	e75d      	b.n	800e72e <_scanf_float+0x62>
 800e872:	2202      	movs	r2, #2
 800e874:	e7ec      	b.n	800e850 <_scanf_float+0x184>
 800e876:	2c00      	cmp	r4, #0
 800e878:	d110      	bne.n	800e89c <_scanf_float+0x1d0>
 800e87a:	9a01      	ldr	r2, [sp, #4]
 800e87c:	2a00      	cmp	r2, #0
 800e87e:	d000      	beq.n	800e882 <_scanf_float+0x1b6>
 800e880:	e758      	b.n	800e734 <_scanf_float+0x68>
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	21e0      	movs	r1, #224	; 0xe0
 800e886:	0010      	movs	r0, r2
 800e888:	00c9      	lsls	r1, r1, #3
 800e88a:	4008      	ands	r0, r1
 800e88c:	4288      	cmp	r0, r1
 800e88e:	d000      	beq.n	800e892 <_scanf_float+0x1c6>
 800e890:	e754      	b.n	800e73c <_scanf_float+0x70>
 800e892:	494e      	ldr	r1, [pc, #312]	; (800e9cc <_scanf_float+0x300>)
 800e894:	3401      	adds	r4, #1
 800e896:	400a      	ands	r2, r1
 800e898:	603a      	str	r2, [r7, #0]
 800e89a:	e7bf      	b.n	800e81c <_scanf_float+0x150>
 800e89c:	21fd      	movs	r1, #253	; 0xfd
 800e89e:	1ee2      	subs	r2, r4, #3
 800e8a0:	420a      	tst	r2, r1
 800e8a2:	d000      	beq.n	800e8a6 <_scanf_float+0x1da>
 800e8a4:	e743      	b.n	800e72e <_scanf_float+0x62>
 800e8a6:	e7dd      	b.n	800e864 <_scanf_float+0x198>
 800e8a8:	2c02      	cmp	r4, #2
 800e8aa:	d000      	beq.n	800e8ae <_scanf_float+0x1e2>
 800e8ac:	e73f      	b.n	800e72e <_scanf_float+0x62>
 800e8ae:	2403      	movs	r4, #3
 800e8b0:	e7b4      	b.n	800e81c <_scanf_float+0x150>
 800e8b2:	2c06      	cmp	r4, #6
 800e8b4:	d000      	beq.n	800e8b8 <_scanf_float+0x1ec>
 800e8b6:	e73a      	b.n	800e72e <_scanf_float+0x62>
 800e8b8:	2407      	movs	r4, #7
 800e8ba:	e7af      	b.n	800e81c <_scanf_float+0x150>
 800e8bc:	683a      	ldr	r2, [r7, #0]
 800e8be:	0591      	lsls	r1, r2, #22
 800e8c0:	d400      	bmi.n	800e8c4 <_scanf_float+0x1f8>
 800e8c2:	e734      	b.n	800e72e <_scanf_float+0x62>
 800e8c4:	4942      	ldr	r1, [pc, #264]	; (800e9d0 <_scanf_float+0x304>)
 800e8c6:	400a      	ands	r2, r1
 800e8c8:	603a      	str	r2, [r7, #0]
 800e8ca:	9a01      	ldr	r2, [sp, #4]
 800e8cc:	9205      	str	r2, [sp, #20]
 800e8ce:	e7a5      	b.n	800e81c <_scanf_float+0x150>
 800e8d0:	21a0      	movs	r1, #160	; 0xa0
 800e8d2:	2080      	movs	r0, #128	; 0x80
 800e8d4:	683a      	ldr	r2, [r7, #0]
 800e8d6:	00c9      	lsls	r1, r1, #3
 800e8d8:	4011      	ands	r1, r2
 800e8da:	00c0      	lsls	r0, r0, #3
 800e8dc:	4281      	cmp	r1, r0
 800e8de:	d006      	beq.n	800e8ee <_scanf_float+0x222>
 800e8e0:	4202      	tst	r2, r0
 800e8e2:	d100      	bne.n	800e8e6 <_scanf_float+0x21a>
 800e8e4:	e723      	b.n	800e72e <_scanf_float+0x62>
 800e8e6:	9901      	ldr	r1, [sp, #4]
 800e8e8:	2900      	cmp	r1, #0
 800e8ea:	d100      	bne.n	800e8ee <_scanf_float+0x222>
 800e8ec:	e726      	b.n	800e73c <_scanf_float+0x70>
 800e8ee:	0591      	lsls	r1, r2, #22
 800e8f0:	d404      	bmi.n	800e8fc <_scanf_float+0x230>
 800e8f2:	9901      	ldr	r1, [sp, #4]
 800e8f4:	9805      	ldr	r0, [sp, #20]
 800e8f6:	9509      	str	r5, [sp, #36]	; 0x24
 800e8f8:	1a09      	subs	r1, r1, r0
 800e8fa:	9108      	str	r1, [sp, #32]
 800e8fc:	4933      	ldr	r1, [pc, #204]	; (800e9cc <_scanf_float+0x300>)
 800e8fe:	400a      	ands	r2, r1
 800e900:	21c0      	movs	r1, #192	; 0xc0
 800e902:	0049      	lsls	r1, r1, #1
 800e904:	430a      	orrs	r2, r1
 800e906:	603a      	str	r2, [r7, #0]
 800e908:	2200      	movs	r2, #0
 800e90a:	9201      	str	r2, [sp, #4]
 800e90c:	e786      	b.n	800e81c <_scanf_float+0x150>
 800e90e:	2203      	movs	r2, #3
 800e910:	e79e      	b.n	800e850 <_scanf_float+0x184>
 800e912:	23c0      	movs	r3, #192	; 0xc0
 800e914:	005b      	lsls	r3, r3, #1
 800e916:	0031      	movs	r1, r6
 800e918:	58fb      	ldr	r3, [r7, r3]
 800e91a:	9802      	ldr	r0, [sp, #8]
 800e91c:	4798      	blx	r3
 800e91e:	2800      	cmp	r0, #0
 800e920:	d100      	bne.n	800e924 <_scanf_float+0x258>
 800e922:	e6f6      	b.n	800e712 <_scanf_float+0x46>
 800e924:	e703      	b.n	800e72e <_scanf_float+0x62>
 800e926:	3d01      	subs	r5, #1
 800e928:	593b      	ldr	r3, [r7, r4]
 800e92a:	0032      	movs	r2, r6
 800e92c:	7829      	ldrb	r1, [r5, #0]
 800e92e:	9802      	ldr	r0, [sp, #8]
 800e930:	4798      	blx	r3
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	3b01      	subs	r3, #1
 800e936:	613b      	str	r3, [r7, #16]
 800e938:	e707      	b.n	800e74a <_scanf_float+0x7e>
 800e93a:	1e63      	subs	r3, r4, #1
 800e93c:	2b06      	cmp	r3, #6
 800e93e:	d80e      	bhi.n	800e95e <_scanf_float+0x292>
 800e940:	9503      	str	r5, [sp, #12]
 800e942:	2c02      	cmp	r4, #2
 800e944:	d920      	bls.n	800e988 <_scanf_float+0x2bc>
 800e946:	1b63      	subs	r3, r4, r5
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	9306      	str	r3, [sp, #24]
 800e94c:	9b03      	ldr	r3, [sp, #12]
 800e94e:	9a06      	ldr	r2, [sp, #24]
 800e950:	189b      	adds	r3, r3, r2
 800e952:	b2db      	uxtb	r3, r3
 800e954:	2b03      	cmp	r3, #3
 800e956:	d827      	bhi.n	800e9a8 <_scanf_float+0x2dc>
 800e958:	3c03      	subs	r4, #3
 800e95a:	b2e4      	uxtb	r4, r4
 800e95c:	1b2d      	subs	r5, r5, r4
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	05da      	lsls	r2, r3, #23
 800e962:	d552      	bpl.n	800ea0a <_scanf_float+0x33e>
 800e964:	055b      	lsls	r3, r3, #21
 800e966:	d535      	bpl.n	800e9d4 <_scanf_float+0x308>
 800e968:	24be      	movs	r4, #190	; 0xbe
 800e96a:	0064      	lsls	r4, r4, #1
 800e96c:	9b04      	ldr	r3, [sp, #16]
 800e96e:	429d      	cmp	r5, r3
 800e970:	d800      	bhi.n	800e974 <_scanf_float+0x2a8>
 800e972:	e6ee      	b.n	800e752 <_scanf_float+0x86>
 800e974:	3d01      	subs	r5, #1
 800e976:	593b      	ldr	r3, [r7, r4]
 800e978:	0032      	movs	r2, r6
 800e97a:	7829      	ldrb	r1, [r5, #0]
 800e97c:	9802      	ldr	r0, [sp, #8]
 800e97e:	4798      	blx	r3
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	3b01      	subs	r3, #1
 800e984:	613b      	str	r3, [r7, #16]
 800e986:	e7f1      	b.n	800e96c <_scanf_float+0x2a0>
 800e988:	24be      	movs	r4, #190	; 0xbe
 800e98a:	0064      	lsls	r4, r4, #1
 800e98c:	9b04      	ldr	r3, [sp, #16]
 800e98e:	429d      	cmp	r5, r3
 800e990:	d800      	bhi.n	800e994 <_scanf_float+0x2c8>
 800e992:	e6de      	b.n	800e752 <_scanf_float+0x86>
 800e994:	3d01      	subs	r5, #1
 800e996:	593b      	ldr	r3, [r7, r4]
 800e998:	0032      	movs	r2, r6
 800e99a:	7829      	ldrb	r1, [r5, #0]
 800e99c:	9802      	ldr	r0, [sp, #8]
 800e99e:	4798      	blx	r3
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	613b      	str	r3, [r7, #16]
 800e9a6:	e7f1      	b.n	800e98c <_scanf_float+0x2c0>
 800e9a8:	9b03      	ldr	r3, [sp, #12]
 800e9aa:	0032      	movs	r2, r6
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	7819      	ldrb	r1, [r3, #0]
 800e9b0:	9303      	str	r3, [sp, #12]
 800e9b2:	23be      	movs	r3, #190	; 0xbe
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	58fb      	ldr	r3, [r7, r3]
 800e9b8:	9802      	ldr	r0, [sp, #8]
 800e9ba:	4798      	blx	r3
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	613b      	str	r3, [r7, #16]
 800e9c2:	e7c3      	b.n	800e94c <_scanf_float+0x280>
 800e9c4:	fffffeff 	.word	0xfffffeff
 800e9c8:	fffffe7f 	.word	0xfffffe7f
 800e9cc:	fffff87f 	.word	0xfffff87f
 800e9d0:	fffffd7f 	.word	0xfffffd7f
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	1e6c      	subs	r4, r5, #1
 800e9d8:	7821      	ldrb	r1, [r4, #0]
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	613b      	str	r3, [r7, #16]
 800e9de:	2965      	cmp	r1, #101	; 0x65
 800e9e0:	d00c      	beq.n	800e9fc <_scanf_float+0x330>
 800e9e2:	2945      	cmp	r1, #69	; 0x45
 800e9e4:	d00a      	beq.n	800e9fc <_scanf_float+0x330>
 800e9e6:	23be      	movs	r3, #190	; 0xbe
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	58fb      	ldr	r3, [r7, r3]
 800e9ec:	0032      	movs	r2, r6
 800e9ee:	9802      	ldr	r0, [sp, #8]
 800e9f0:	4798      	blx	r3
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	1eac      	subs	r4, r5, #2
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	7821      	ldrb	r1, [r4, #0]
 800e9fa:	613b      	str	r3, [r7, #16]
 800e9fc:	23be      	movs	r3, #190	; 0xbe
 800e9fe:	005b      	lsls	r3, r3, #1
 800ea00:	0032      	movs	r2, r6
 800ea02:	58fb      	ldr	r3, [r7, r3]
 800ea04:	9802      	ldr	r0, [sp, #8]
 800ea06:	4798      	blx	r3
 800ea08:	0025      	movs	r5, r4
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	2310      	movs	r3, #16
 800ea0e:	0011      	movs	r1, r2
 800ea10:	4019      	ands	r1, r3
 800ea12:	9103      	str	r1, [sp, #12]
 800ea14:	421a      	tst	r2, r3
 800ea16:	d15b      	bne.n	800ead0 <_scanf_float+0x404>
 800ea18:	22c0      	movs	r2, #192	; 0xc0
 800ea1a:	7029      	strb	r1, [r5, #0]
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	00d2      	lsls	r2, r2, #3
 800ea20:	4013      	ands	r3, r2
 800ea22:	2280      	movs	r2, #128	; 0x80
 800ea24:	00d2      	lsls	r2, r2, #3
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d11d      	bne.n	800ea66 <_scanf_float+0x39a>
 800ea2a:	9b05      	ldr	r3, [sp, #20]
 800ea2c:	9a01      	ldr	r2, [sp, #4]
 800ea2e:	9901      	ldr	r1, [sp, #4]
 800ea30:	1a9a      	subs	r2, r3, r2
 800ea32:	428b      	cmp	r3, r1
 800ea34:	d124      	bne.n	800ea80 <_scanf_float+0x3b4>
 800ea36:	2200      	movs	r2, #0
 800ea38:	9904      	ldr	r1, [sp, #16]
 800ea3a:	9802      	ldr	r0, [sp, #8]
 800ea3c:	f7ff f91c 	bl	800dc78 <_strtod_r>
 800ea40:	9b07      	ldr	r3, [sp, #28]
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	0004      	movs	r4, r0
 800ea46:	000d      	movs	r5, r1
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	0791      	lsls	r1, r2, #30
 800ea4c:	d525      	bpl.n	800ea9a <_scanf_float+0x3ce>
 800ea4e:	9907      	ldr	r1, [sp, #28]
 800ea50:	1d1a      	adds	r2, r3, #4
 800ea52:	600a      	str	r2, [r1, #0]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	601c      	str	r4, [r3, #0]
 800ea58:	605d      	str	r5, [r3, #4]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	9803      	ldr	r0, [sp, #12]
 800ea62:	b00b      	add	sp, #44	; 0x2c
 800ea64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea66:	9b08      	ldr	r3, [sp, #32]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0e4      	beq.n	800ea36 <_scanf_float+0x36a>
 800ea6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea6e:	9a03      	ldr	r2, [sp, #12]
 800ea70:	1c59      	adds	r1, r3, #1
 800ea72:	9802      	ldr	r0, [sp, #8]
 800ea74:	230a      	movs	r3, #10
 800ea76:	f7ff f99b 	bl	800ddb0 <_strtol_r>
 800ea7a:	9b08      	ldr	r3, [sp, #32]
 800ea7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ea7e:	1ac2      	subs	r2, r0, r3
 800ea80:	003b      	movs	r3, r7
 800ea82:	3370      	adds	r3, #112	; 0x70
 800ea84:	33ff      	adds	r3, #255	; 0xff
 800ea86:	429d      	cmp	r5, r3
 800ea88:	d302      	bcc.n	800ea90 <_scanf_float+0x3c4>
 800ea8a:	003d      	movs	r5, r7
 800ea8c:	356f      	adds	r5, #111	; 0x6f
 800ea8e:	35ff      	adds	r5, #255	; 0xff
 800ea90:	0028      	movs	r0, r5
 800ea92:	4910      	ldr	r1, [pc, #64]	; (800ead4 <_scanf_float+0x408>)
 800ea94:	f000 f91a 	bl	800eccc <siprintf>
 800ea98:	e7cd      	b.n	800ea36 <_scanf_float+0x36a>
 800ea9a:	1d19      	adds	r1, r3, #4
 800ea9c:	0752      	lsls	r2, r2, #29
 800ea9e:	d502      	bpl.n	800eaa6 <_scanf_float+0x3da>
 800eaa0:	9a07      	ldr	r2, [sp, #28]
 800eaa2:	6011      	str	r1, [r2, #0]
 800eaa4:	e7d6      	b.n	800ea54 <_scanf_float+0x388>
 800eaa6:	9a07      	ldr	r2, [sp, #28]
 800eaa8:	0020      	movs	r0, r4
 800eaaa:	6011      	str	r1, [r2, #0]
 800eaac:	681e      	ldr	r6, [r3, #0]
 800eaae:	0022      	movs	r2, r4
 800eab0:	002b      	movs	r3, r5
 800eab2:	0029      	movs	r1, r5
 800eab4:	f7f4 fa52 	bl	8002f5c <__aeabi_dcmpun>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d004      	beq.n	800eac6 <_scanf_float+0x3fa>
 800eabc:	4806      	ldr	r0, [pc, #24]	; (800ead8 <_scanf_float+0x40c>)
 800eabe:	f000 fb53 	bl	800f168 <nanf>
 800eac2:	6030      	str	r0, [r6, #0]
 800eac4:	e7c9      	b.n	800ea5a <_scanf_float+0x38e>
 800eac6:	0020      	movs	r0, r4
 800eac8:	0029      	movs	r1, r5
 800eaca:	f7f4 fb39 	bl	8003140 <__aeabi_d2f>
 800eace:	e7f8      	b.n	800eac2 <_scanf_float+0x3f6>
 800ead0:	2300      	movs	r3, #0
 800ead2:	e63f      	b.n	800e754 <_scanf_float+0x88>
 800ead4:	08013d25 	.word	0x08013d25
 800ead8:	08013dde 	.word	0x08013dde

0800eadc <std>:
 800eadc:	2300      	movs	r3, #0
 800eade:	b510      	push	{r4, lr}
 800eae0:	0004      	movs	r4, r0
 800eae2:	6003      	str	r3, [r0, #0]
 800eae4:	6043      	str	r3, [r0, #4]
 800eae6:	6083      	str	r3, [r0, #8]
 800eae8:	8181      	strh	r1, [r0, #12]
 800eaea:	6643      	str	r3, [r0, #100]	; 0x64
 800eaec:	81c2      	strh	r2, [r0, #14]
 800eaee:	6103      	str	r3, [r0, #16]
 800eaf0:	6143      	str	r3, [r0, #20]
 800eaf2:	6183      	str	r3, [r0, #24]
 800eaf4:	0019      	movs	r1, r3
 800eaf6:	2208      	movs	r2, #8
 800eaf8:	305c      	adds	r0, #92	; 0x5c
 800eafa:	f000 f953 	bl	800eda4 <memset>
 800eafe:	4b0b      	ldr	r3, [pc, #44]	; (800eb2c <std+0x50>)
 800eb00:	6224      	str	r4, [r4, #32]
 800eb02:	6263      	str	r3, [r4, #36]	; 0x24
 800eb04:	4b0a      	ldr	r3, [pc, #40]	; (800eb30 <std+0x54>)
 800eb06:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb08:	4b0a      	ldr	r3, [pc, #40]	; (800eb34 <std+0x58>)
 800eb0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <std+0x5c>)
 800eb0e:	6323      	str	r3, [r4, #48]	; 0x30
 800eb10:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <std+0x60>)
 800eb12:	429c      	cmp	r4, r3
 800eb14:	d005      	beq.n	800eb22 <std+0x46>
 800eb16:	4b0a      	ldr	r3, [pc, #40]	; (800eb40 <std+0x64>)
 800eb18:	429c      	cmp	r4, r3
 800eb1a:	d002      	beq.n	800eb22 <std+0x46>
 800eb1c:	4b09      	ldr	r3, [pc, #36]	; (800eb44 <std+0x68>)
 800eb1e:	429c      	cmp	r4, r3
 800eb20:	d103      	bne.n	800eb2a <std+0x4e>
 800eb22:	0020      	movs	r0, r4
 800eb24:	3058      	adds	r0, #88	; 0x58
 800eb26:	f000 faf9 	bl	800f11c <__retarget_lock_init_recursive>
 800eb2a:	bd10      	pop	{r4, pc}
 800eb2c:	0800ed0d 	.word	0x0800ed0d
 800eb30:	0800ed35 	.word	0x0800ed35
 800eb34:	0800ed6d 	.word	0x0800ed6d
 800eb38:	0800ed99 	.word	0x0800ed99
 800eb3c:	200066fc 	.word	0x200066fc
 800eb40:	20006764 	.word	0x20006764
 800eb44:	200067cc 	.word	0x200067cc

0800eb48 <stdio_exit_handler>:
 800eb48:	b510      	push	{r4, lr}
 800eb4a:	4a03      	ldr	r2, [pc, #12]	; (800eb58 <stdio_exit_handler+0x10>)
 800eb4c:	4903      	ldr	r1, [pc, #12]	; (800eb5c <stdio_exit_handler+0x14>)
 800eb4e:	4804      	ldr	r0, [pc, #16]	; (800eb60 <stdio_exit_handler+0x18>)
 800eb50:	f000 f86c 	bl	800ec2c <_fwalk_sglue>
 800eb54:	bd10      	pop	{r4, pc}
 800eb56:	46c0      	nop			; (mov r8, r8)
 800eb58:	2000012c 	.word	0x2000012c
 800eb5c:	080113c1 	.word	0x080113c1
 800eb60:	200002a4 	.word	0x200002a4

0800eb64 <cleanup_stdio>:
 800eb64:	6841      	ldr	r1, [r0, #4]
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <cleanup_stdio+0x30>)
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	0004      	movs	r4, r0
 800eb6c:	4299      	cmp	r1, r3
 800eb6e:	d001      	beq.n	800eb74 <cleanup_stdio+0x10>
 800eb70:	f002 fc26 	bl	80113c0 <_fflush_r>
 800eb74:	68a1      	ldr	r1, [r4, #8]
 800eb76:	4b08      	ldr	r3, [pc, #32]	; (800eb98 <cleanup_stdio+0x34>)
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <cleanup_stdio+0x1e>
 800eb7c:	0020      	movs	r0, r4
 800eb7e:	f002 fc1f 	bl	80113c0 <_fflush_r>
 800eb82:	68e1      	ldr	r1, [r4, #12]
 800eb84:	4b05      	ldr	r3, [pc, #20]	; (800eb9c <cleanup_stdio+0x38>)
 800eb86:	4299      	cmp	r1, r3
 800eb88:	d002      	beq.n	800eb90 <cleanup_stdio+0x2c>
 800eb8a:	0020      	movs	r0, r4
 800eb8c:	f002 fc18 	bl	80113c0 <_fflush_r>
 800eb90:	bd10      	pop	{r4, pc}
 800eb92:	46c0      	nop			; (mov r8, r8)
 800eb94:	200066fc 	.word	0x200066fc
 800eb98:	20006764 	.word	0x20006764
 800eb9c:	200067cc 	.word	0x200067cc

0800eba0 <global_stdio_init.part.0>:
 800eba0:	b510      	push	{r4, lr}
 800eba2:	4b09      	ldr	r3, [pc, #36]	; (800ebc8 <global_stdio_init.part.0+0x28>)
 800eba4:	4a09      	ldr	r2, [pc, #36]	; (800ebcc <global_stdio_init.part.0+0x2c>)
 800eba6:	2104      	movs	r1, #4
 800eba8:	601a      	str	r2, [r3, #0]
 800ebaa:	4809      	ldr	r0, [pc, #36]	; (800ebd0 <global_stdio_init.part.0+0x30>)
 800ebac:	2200      	movs	r2, #0
 800ebae:	f7ff ff95 	bl	800eadc <std>
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	2109      	movs	r1, #9
 800ebb6:	4807      	ldr	r0, [pc, #28]	; (800ebd4 <global_stdio_init.part.0+0x34>)
 800ebb8:	f7ff ff90 	bl	800eadc <std>
 800ebbc:	2202      	movs	r2, #2
 800ebbe:	2112      	movs	r1, #18
 800ebc0:	4805      	ldr	r0, [pc, #20]	; (800ebd8 <global_stdio_init.part.0+0x38>)
 800ebc2:	f7ff ff8b 	bl	800eadc <std>
 800ebc6:	bd10      	pop	{r4, pc}
 800ebc8:	20006834 	.word	0x20006834
 800ebcc:	0800eb49 	.word	0x0800eb49
 800ebd0:	200066fc 	.word	0x200066fc
 800ebd4:	20006764 	.word	0x20006764
 800ebd8:	200067cc 	.word	0x200067cc

0800ebdc <__sfp_lock_acquire>:
 800ebdc:	b510      	push	{r4, lr}
 800ebde:	4802      	ldr	r0, [pc, #8]	; (800ebe8 <__sfp_lock_acquire+0xc>)
 800ebe0:	f000 fa9d 	bl	800f11e <__retarget_lock_acquire_recursive>
 800ebe4:	bd10      	pop	{r4, pc}
 800ebe6:	46c0      	nop			; (mov r8, r8)
 800ebe8:	2000683d 	.word	0x2000683d

0800ebec <__sfp_lock_release>:
 800ebec:	b510      	push	{r4, lr}
 800ebee:	4802      	ldr	r0, [pc, #8]	; (800ebf8 <__sfp_lock_release+0xc>)
 800ebf0:	f000 fa96 	bl	800f120 <__retarget_lock_release_recursive>
 800ebf4:	bd10      	pop	{r4, pc}
 800ebf6:	46c0      	nop			; (mov r8, r8)
 800ebf8:	2000683d 	.word	0x2000683d

0800ebfc <__sinit>:
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	0004      	movs	r4, r0
 800ec00:	f7ff ffec 	bl	800ebdc <__sfp_lock_acquire>
 800ec04:	6a23      	ldr	r3, [r4, #32]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d002      	beq.n	800ec10 <__sinit+0x14>
 800ec0a:	f7ff ffef 	bl	800ebec <__sfp_lock_release>
 800ec0e:	bd10      	pop	{r4, pc}
 800ec10:	4b04      	ldr	r3, [pc, #16]	; (800ec24 <__sinit+0x28>)
 800ec12:	6223      	str	r3, [r4, #32]
 800ec14:	4b04      	ldr	r3, [pc, #16]	; (800ec28 <__sinit+0x2c>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1f6      	bne.n	800ec0a <__sinit+0xe>
 800ec1c:	f7ff ffc0 	bl	800eba0 <global_stdio_init.part.0>
 800ec20:	e7f3      	b.n	800ec0a <__sinit+0xe>
 800ec22:	46c0      	nop			; (mov r8, r8)
 800ec24:	0800eb65 	.word	0x0800eb65
 800ec28:	20006834 	.word	0x20006834

0800ec2c <_fwalk_sglue>:
 800ec2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec2e:	0014      	movs	r4, r2
 800ec30:	2600      	movs	r6, #0
 800ec32:	9000      	str	r0, [sp, #0]
 800ec34:	9101      	str	r1, [sp, #4]
 800ec36:	68a5      	ldr	r5, [r4, #8]
 800ec38:	6867      	ldr	r7, [r4, #4]
 800ec3a:	3f01      	subs	r7, #1
 800ec3c:	d504      	bpl.n	800ec48 <_fwalk_sglue+0x1c>
 800ec3e:	6824      	ldr	r4, [r4, #0]
 800ec40:	2c00      	cmp	r4, #0
 800ec42:	d1f8      	bne.n	800ec36 <_fwalk_sglue+0xa>
 800ec44:	0030      	movs	r0, r6
 800ec46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec48:	89ab      	ldrh	r3, [r5, #12]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d908      	bls.n	800ec60 <_fwalk_sglue+0x34>
 800ec4e:	220e      	movs	r2, #14
 800ec50:	5eab      	ldrsh	r3, [r5, r2]
 800ec52:	3301      	adds	r3, #1
 800ec54:	d004      	beq.n	800ec60 <_fwalk_sglue+0x34>
 800ec56:	0029      	movs	r1, r5
 800ec58:	9800      	ldr	r0, [sp, #0]
 800ec5a:	9b01      	ldr	r3, [sp, #4]
 800ec5c:	4798      	blx	r3
 800ec5e:	4306      	orrs	r6, r0
 800ec60:	3568      	adds	r5, #104	; 0x68
 800ec62:	e7ea      	b.n	800ec3a <_fwalk_sglue+0xe>

0800ec64 <sniprintf>:
 800ec64:	b40c      	push	{r2, r3}
 800ec66:	b530      	push	{r4, r5, lr}
 800ec68:	4b17      	ldr	r3, [pc, #92]	; (800ecc8 <sniprintf+0x64>)
 800ec6a:	000c      	movs	r4, r1
 800ec6c:	681d      	ldr	r5, [r3, #0]
 800ec6e:	b09d      	sub	sp, #116	; 0x74
 800ec70:	2900      	cmp	r1, #0
 800ec72:	da08      	bge.n	800ec86 <sniprintf+0x22>
 800ec74:	238b      	movs	r3, #139	; 0x8b
 800ec76:	2001      	movs	r0, #1
 800ec78:	602b      	str	r3, [r5, #0]
 800ec7a:	4240      	negs	r0, r0
 800ec7c:	b01d      	add	sp, #116	; 0x74
 800ec7e:	bc30      	pop	{r4, r5}
 800ec80:	bc08      	pop	{r3}
 800ec82:	b002      	add	sp, #8
 800ec84:	4718      	bx	r3
 800ec86:	2382      	movs	r3, #130	; 0x82
 800ec88:	466a      	mov	r2, sp
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	8293      	strh	r3, [r2, #20]
 800ec8e:	2300      	movs	r3, #0
 800ec90:	9002      	str	r0, [sp, #8]
 800ec92:	9006      	str	r0, [sp, #24]
 800ec94:	4299      	cmp	r1, r3
 800ec96:	d000      	beq.n	800ec9a <sniprintf+0x36>
 800ec98:	1e4b      	subs	r3, r1, #1
 800ec9a:	9304      	str	r3, [sp, #16]
 800ec9c:	9307      	str	r3, [sp, #28]
 800ec9e:	2301      	movs	r3, #1
 800eca0:	466a      	mov	r2, sp
 800eca2:	425b      	negs	r3, r3
 800eca4:	82d3      	strh	r3, [r2, #22]
 800eca6:	0028      	movs	r0, r5
 800eca8:	ab21      	add	r3, sp, #132	; 0x84
 800ecaa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ecac:	a902      	add	r1, sp, #8
 800ecae:	9301      	str	r3, [sp, #4]
 800ecb0:	f002 f9fc 	bl	80110ac <_svfiprintf_r>
 800ecb4:	1c43      	adds	r3, r0, #1
 800ecb6:	da01      	bge.n	800ecbc <sniprintf+0x58>
 800ecb8:	238b      	movs	r3, #139	; 0x8b
 800ecba:	602b      	str	r3, [r5, #0]
 800ecbc:	2c00      	cmp	r4, #0
 800ecbe:	d0dd      	beq.n	800ec7c <sniprintf+0x18>
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	9b02      	ldr	r3, [sp, #8]
 800ecc4:	701a      	strb	r2, [r3, #0]
 800ecc6:	e7d9      	b.n	800ec7c <sniprintf+0x18>
 800ecc8:	200002f0 	.word	0x200002f0

0800eccc <siprintf>:
 800eccc:	b40e      	push	{r1, r2, r3}
 800ecce:	b500      	push	{lr}
 800ecd0:	490b      	ldr	r1, [pc, #44]	; (800ed00 <siprintf+0x34>)
 800ecd2:	b09c      	sub	sp, #112	; 0x70
 800ecd4:	ab1d      	add	r3, sp, #116	; 0x74
 800ecd6:	9002      	str	r0, [sp, #8]
 800ecd8:	9006      	str	r0, [sp, #24]
 800ecda:	9107      	str	r1, [sp, #28]
 800ecdc:	9104      	str	r1, [sp, #16]
 800ecde:	4809      	ldr	r0, [pc, #36]	; (800ed04 <siprintf+0x38>)
 800ece0:	4909      	ldr	r1, [pc, #36]	; (800ed08 <siprintf+0x3c>)
 800ece2:	cb04      	ldmia	r3!, {r2}
 800ece4:	9105      	str	r1, [sp, #20]
 800ece6:	6800      	ldr	r0, [r0, #0]
 800ece8:	a902      	add	r1, sp, #8
 800ecea:	9301      	str	r3, [sp, #4]
 800ecec:	f002 f9de 	bl	80110ac <_svfiprintf_r>
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	9b02      	ldr	r3, [sp, #8]
 800ecf4:	701a      	strb	r2, [r3, #0]
 800ecf6:	b01c      	add	sp, #112	; 0x70
 800ecf8:	bc08      	pop	{r3}
 800ecfa:	b003      	add	sp, #12
 800ecfc:	4718      	bx	r3
 800ecfe:	46c0      	nop			; (mov r8, r8)
 800ed00:	7fffffff 	.word	0x7fffffff
 800ed04:	200002f0 	.word	0x200002f0
 800ed08:	ffff0208 	.word	0xffff0208

0800ed0c <__sread>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	000c      	movs	r4, r1
 800ed10:	250e      	movs	r5, #14
 800ed12:	5f49      	ldrsh	r1, [r1, r5]
 800ed14:	f000 f99e 	bl	800f054 <_read_r>
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	db03      	blt.n	800ed24 <__sread+0x18>
 800ed1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ed1e:	181b      	adds	r3, r3, r0
 800ed20:	6563      	str	r3, [r4, #84]	; 0x54
 800ed22:	bd70      	pop	{r4, r5, r6, pc}
 800ed24:	89a3      	ldrh	r3, [r4, #12]
 800ed26:	4a02      	ldr	r2, [pc, #8]	; (800ed30 <__sread+0x24>)
 800ed28:	4013      	ands	r3, r2
 800ed2a:	81a3      	strh	r3, [r4, #12]
 800ed2c:	e7f9      	b.n	800ed22 <__sread+0x16>
 800ed2e:	46c0      	nop			; (mov r8, r8)
 800ed30:	ffffefff 	.word	0xffffefff

0800ed34 <__swrite>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	001f      	movs	r7, r3
 800ed38:	898b      	ldrh	r3, [r1, #12]
 800ed3a:	0005      	movs	r5, r0
 800ed3c:	000c      	movs	r4, r1
 800ed3e:	0016      	movs	r6, r2
 800ed40:	05db      	lsls	r3, r3, #23
 800ed42:	d505      	bpl.n	800ed50 <__swrite+0x1c>
 800ed44:	230e      	movs	r3, #14
 800ed46:	5ec9      	ldrsh	r1, [r1, r3]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	2302      	movs	r3, #2
 800ed4c:	f000 f96e 	bl	800f02c <_lseek_r>
 800ed50:	89a3      	ldrh	r3, [r4, #12]
 800ed52:	4a05      	ldr	r2, [pc, #20]	; (800ed68 <__swrite+0x34>)
 800ed54:	0028      	movs	r0, r5
 800ed56:	4013      	ands	r3, r2
 800ed58:	81a3      	strh	r3, [r4, #12]
 800ed5a:	0032      	movs	r2, r6
 800ed5c:	230e      	movs	r3, #14
 800ed5e:	5ee1      	ldrsh	r1, [r4, r3]
 800ed60:	003b      	movs	r3, r7
 800ed62:	f000 f99d 	bl	800f0a0 <_write_r>
 800ed66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed68:	ffffefff 	.word	0xffffefff

0800ed6c <__sseek>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	000c      	movs	r4, r1
 800ed70:	250e      	movs	r5, #14
 800ed72:	5f49      	ldrsh	r1, [r1, r5]
 800ed74:	f000 f95a 	bl	800f02c <_lseek_r>
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	1c42      	adds	r2, r0, #1
 800ed7c:	d103      	bne.n	800ed86 <__sseek+0x1a>
 800ed7e:	4a05      	ldr	r2, [pc, #20]	; (800ed94 <__sseek+0x28>)
 800ed80:	4013      	ands	r3, r2
 800ed82:	81a3      	strh	r3, [r4, #12]
 800ed84:	bd70      	pop	{r4, r5, r6, pc}
 800ed86:	2280      	movs	r2, #128	; 0x80
 800ed88:	0152      	lsls	r2, r2, #5
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	81a3      	strh	r3, [r4, #12]
 800ed8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ed90:	e7f8      	b.n	800ed84 <__sseek+0x18>
 800ed92:	46c0      	nop			; (mov r8, r8)
 800ed94:	ffffefff 	.word	0xffffefff

0800ed98 <__sclose>:
 800ed98:	b510      	push	{r4, lr}
 800ed9a:	230e      	movs	r3, #14
 800ed9c:	5ec9      	ldrsh	r1, [r1, r3]
 800ed9e:	f000 f8d5 	bl	800ef4c <_close_r>
 800eda2:	bd10      	pop	{r4, pc}

0800eda4 <memset>:
 800eda4:	0003      	movs	r3, r0
 800eda6:	1882      	adds	r2, r0, r2
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d100      	bne.n	800edae <memset+0xa>
 800edac:	4770      	bx	lr
 800edae:	7019      	strb	r1, [r3, #0]
 800edb0:	3301      	adds	r3, #1
 800edb2:	e7f9      	b.n	800eda8 <memset+0x4>

0800edb4 <strcat>:
 800edb4:	0002      	movs	r2, r0
 800edb6:	b510      	push	{r4, lr}
 800edb8:	7813      	ldrb	r3, [r2, #0]
 800edba:	0014      	movs	r4, r2
 800edbc:	3201      	adds	r2, #1
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1fa      	bne.n	800edb8 <strcat+0x4>
 800edc2:	5cca      	ldrb	r2, [r1, r3]
 800edc4:	54e2      	strb	r2, [r4, r3]
 800edc6:	3301      	adds	r3, #1
 800edc8:	2a00      	cmp	r2, #0
 800edca:	d1fa      	bne.n	800edc2 <strcat+0xe>
 800edcc:	bd10      	pop	{r4, pc}

0800edce <strchr>:
 800edce:	b2c9      	uxtb	r1, r1
 800edd0:	7803      	ldrb	r3, [r0, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d004      	beq.n	800ede0 <strchr+0x12>
 800edd6:	428b      	cmp	r3, r1
 800edd8:	d100      	bne.n	800eddc <strchr+0xe>
 800edda:	4770      	bx	lr
 800eddc:	3001      	adds	r0, #1
 800edde:	e7f7      	b.n	800edd0 <strchr+0x2>
 800ede0:	424b      	negs	r3, r1
 800ede2:	4159      	adcs	r1, r3
 800ede4:	4249      	negs	r1, r1
 800ede6:	4008      	ands	r0, r1
 800ede8:	e7f7      	b.n	800edda <strchr+0xc>

0800edea <strncmp>:
 800edea:	b530      	push	{r4, r5, lr}
 800edec:	0005      	movs	r5, r0
 800edee:	1e10      	subs	r0, r2, #0
 800edf0:	d00b      	beq.n	800ee0a <strncmp+0x20>
 800edf2:	2400      	movs	r4, #0
 800edf4:	3a01      	subs	r2, #1
 800edf6:	5d2b      	ldrb	r3, [r5, r4]
 800edf8:	5d08      	ldrb	r0, [r1, r4]
 800edfa:	4283      	cmp	r3, r0
 800edfc:	d104      	bne.n	800ee08 <strncmp+0x1e>
 800edfe:	42a2      	cmp	r2, r4
 800ee00:	d002      	beq.n	800ee08 <strncmp+0x1e>
 800ee02:	3401      	adds	r4, #1
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1f6      	bne.n	800edf6 <strncmp+0xc>
 800ee08:	1a18      	subs	r0, r3, r0
 800ee0a:	bd30      	pop	{r4, r5, pc}

0800ee0c <strncpy>:
 800ee0c:	0003      	movs	r3, r0
 800ee0e:	b530      	push	{r4, r5, lr}
 800ee10:	001d      	movs	r5, r3
 800ee12:	2a00      	cmp	r2, #0
 800ee14:	d006      	beq.n	800ee24 <strncpy+0x18>
 800ee16:	780c      	ldrb	r4, [r1, #0]
 800ee18:	3a01      	subs	r2, #1
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	702c      	strb	r4, [r5, #0]
 800ee1e:	3101      	adds	r1, #1
 800ee20:	2c00      	cmp	r4, #0
 800ee22:	d1f5      	bne.n	800ee10 <strncpy+0x4>
 800ee24:	2100      	movs	r1, #0
 800ee26:	189a      	adds	r2, r3, r2
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d100      	bne.n	800ee2e <strncpy+0x22>
 800ee2c:	bd30      	pop	{r4, r5, pc}
 800ee2e:	7019      	strb	r1, [r3, #0]
 800ee30:	3301      	adds	r3, #1
 800ee32:	e7f9      	b.n	800ee28 <strncpy+0x1c>

0800ee34 <strtok>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	4b16      	ldr	r3, [pc, #88]	; (800ee90 <strtok+0x5c>)
 800ee38:	0005      	movs	r5, r0
 800ee3a:	681f      	ldr	r7, [r3, #0]
 800ee3c:	000e      	movs	r6, r1
 800ee3e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ee40:	2c00      	cmp	r4, #0
 800ee42:	d11d      	bne.n	800ee80 <strtok+0x4c>
 800ee44:	2050      	movs	r0, #80	; 0x50
 800ee46:	f7fe f837 	bl	800ceb8 <malloc>
 800ee4a:	1e02      	subs	r2, r0, #0
 800ee4c:	6478      	str	r0, [r7, #68]	; 0x44
 800ee4e:	d104      	bne.n	800ee5a <strtok+0x26>
 800ee50:	215b      	movs	r1, #91	; 0x5b
 800ee52:	4b10      	ldr	r3, [pc, #64]	; (800ee94 <strtok+0x60>)
 800ee54:	4810      	ldr	r0, [pc, #64]	; (800ee98 <strtok+0x64>)
 800ee56:	f000 f98b 	bl	800f170 <__assert_func>
 800ee5a:	6004      	str	r4, [r0, #0]
 800ee5c:	6044      	str	r4, [r0, #4]
 800ee5e:	6084      	str	r4, [r0, #8]
 800ee60:	60c4      	str	r4, [r0, #12]
 800ee62:	6104      	str	r4, [r0, #16]
 800ee64:	6144      	str	r4, [r0, #20]
 800ee66:	6184      	str	r4, [r0, #24]
 800ee68:	6284      	str	r4, [r0, #40]	; 0x28
 800ee6a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800ee6c:	6304      	str	r4, [r0, #48]	; 0x30
 800ee6e:	6344      	str	r4, [r0, #52]	; 0x34
 800ee70:	6384      	str	r4, [r0, #56]	; 0x38
 800ee72:	63c4      	str	r4, [r0, #60]	; 0x3c
 800ee74:	6404      	str	r4, [r0, #64]	; 0x40
 800ee76:	6444      	str	r4, [r0, #68]	; 0x44
 800ee78:	6484      	str	r4, [r0, #72]	; 0x48
 800ee7a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800ee7c:	7704      	strb	r4, [r0, #28]
 800ee7e:	6244      	str	r4, [r0, #36]	; 0x24
 800ee80:	0031      	movs	r1, r6
 800ee82:	0028      	movs	r0, r5
 800ee84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee86:	2301      	movs	r3, #1
 800ee88:	f000 f808 	bl	800ee9c <__strtok_r>
 800ee8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee8e:	46c0      	nop			; (mov r8, r8)
 800ee90:	200002f0 	.word	0x200002f0
 800ee94:	08013d2a 	.word	0x08013d2a
 800ee98:	08013d41 	.word	0x08013d41

0800ee9c <__strtok_r>:
 800ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d102      	bne.n	800eea8 <__strtok_r+0xc>
 800eea2:	6810      	ldr	r0, [r2, #0]
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d013      	beq.n	800eed0 <__strtok_r+0x34>
 800eea8:	0004      	movs	r4, r0
 800eeaa:	0020      	movs	r0, r4
 800eeac:	000e      	movs	r6, r1
 800eeae:	7805      	ldrb	r5, [r0, #0]
 800eeb0:	3401      	adds	r4, #1
 800eeb2:	7837      	ldrb	r7, [r6, #0]
 800eeb4:	2f00      	cmp	r7, #0
 800eeb6:	d104      	bne.n	800eec2 <__strtok_r+0x26>
 800eeb8:	2d00      	cmp	r5, #0
 800eeba:	d10f      	bne.n	800eedc <__strtok_r+0x40>
 800eebc:	0028      	movs	r0, r5
 800eebe:	6015      	str	r5, [r2, #0]
 800eec0:	e006      	b.n	800eed0 <__strtok_r+0x34>
 800eec2:	3601      	adds	r6, #1
 800eec4:	42bd      	cmp	r5, r7
 800eec6:	d1f4      	bne.n	800eeb2 <__strtok_r+0x16>
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1ee      	bne.n	800eeaa <__strtok_r+0xe>
 800eecc:	6014      	str	r4, [r2, #0]
 800eece:	7003      	strb	r3, [r0, #0]
 800eed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed2:	002f      	movs	r7, r5
 800eed4:	e00f      	b.n	800eef6 <__strtok_r+0x5a>
 800eed6:	3301      	adds	r3, #1
 800eed8:	2e00      	cmp	r6, #0
 800eeda:	d104      	bne.n	800eee6 <__strtok_r+0x4a>
 800eedc:	0023      	movs	r3, r4
 800eede:	3401      	adds	r4, #1
 800eee0:	781d      	ldrb	r5, [r3, #0]
 800eee2:	0027      	movs	r7, r4
 800eee4:	000b      	movs	r3, r1
 800eee6:	781e      	ldrb	r6, [r3, #0]
 800eee8:	42b5      	cmp	r5, r6
 800eeea:	d1f4      	bne.n	800eed6 <__strtok_r+0x3a>
 800eeec:	2d00      	cmp	r5, #0
 800eeee:	d0f0      	beq.n	800eed2 <__strtok_r+0x36>
 800eef0:	2300      	movs	r3, #0
 800eef2:	3c01      	subs	r4, #1
 800eef4:	7023      	strb	r3, [r4, #0]
 800eef6:	6017      	str	r7, [r2, #0]
 800eef8:	e7ea      	b.n	800eed0 <__strtok_r+0x34>

0800eefa <strtok_r>:
 800eefa:	b510      	push	{r4, lr}
 800eefc:	2301      	movs	r3, #1
 800eefe:	f7ff ffcd 	bl	800ee9c <__strtok_r>
 800ef02:	bd10      	pop	{r4, pc}

0800ef04 <strstr>:
 800ef04:	780a      	ldrb	r2, [r1, #0]
 800ef06:	b530      	push	{r4, r5, lr}
 800ef08:	2a00      	cmp	r2, #0
 800ef0a:	d10c      	bne.n	800ef26 <strstr+0x22>
 800ef0c:	bd30      	pop	{r4, r5, pc}
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d108      	bne.n	800ef24 <strstr+0x20>
 800ef12:	2301      	movs	r3, #1
 800ef14:	5ccc      	ldrb	r4, [r1, r3]
 800ef16:	2c00      	cmp	r4, #0
 800ef18:	d0f8      	beq.n	800ef0c <strstr+0x8>
 800ef1a:	5cc5      	ldrb	r5, [r0, r3]
 800ef1c:	42a5      	cmp	r5, r4
 800ef1e:	d101      	bne.n	800ef24 <strstr+0x20>
 800ef20:	3301      	adds	r3, #1
 800ef22:	e7f7      	b.n	800ef14 <strstr+0x10>
 800ef24:	3001      	adds	r0, #1
 800ef26:	7803      	ldrb	r3, [r0, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1f0      	bne.n	800ef0e <strstr+0xa>
 800ef2c:	0018      	movs	r0, r3
 800ef2e:	e7ed      	b.n	800ef0c <strstr+0x8>

0800ef30 <stpcpy>:
 800ef30:	0003      	movs	r3, r0
 800ef32:	780a      	ldrb	r2, [r1, #0]
 800ef34:	0018      	movs	r0, r3
 800ef36:	701a      	strb	r2, [r3, #0]
 800ef38:	3101      	adds	r1, #1
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	2a00      	cmp	r2, #0
 800ef3e:	d1f8      	bne.n	800ef32 <stpcpy+0x2>
 800ef40:	4770      	bx	lr
	...

0800ef44 <_localeconv_r>:
 800ef44:	4800      	ldr	r0, [pc, #0]	; (800ef48 <_localeconv_r+0x4>)
 800ef46:	4770      	bx	lr
 800ef48:	20000228 	.word	0x20000228

0800ef4c <_close_r>:
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	b570      	push	{r4, r5, r6, lr}
 800ef50:	4d06      	ldr	r5, [pc, #24]	; (800ef6c <_close_r+0x20>)
 800ef52:	0004      	movs	r4, r0
 800ef54:	0008      	movs	r0, r1
 800ef56:	602b      	str	r3, [r5, #0]
 800ef58:	f7f8 fed6 	bl	8007d08 <_close>
 800ef5c:	1c43      	adds	r3, r0, #1
 800ef5e:	d103      	bne.n	800ef68 <_close_r+0x1c>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d000      	beq.n	800ef68 <_close_r+0x1c>
 800ef66:	6023      	str	r3, [r4, #0]
 800ef68:	bd70      	pop	{r4, r5, r6, pc}
 800ef6a:	46c0      	nop			; (mov r8, r8)
 800ef6c:	20006838 	.word	0x20006838

0800ef70 <_reclaim_reent>:
 800ef70:	4b2d      	ldr	r3, [pc, #180]	; (800f028 <_reclaim_reent+0xb8>)
 800ef72:	b570      	push	{r4, r5, r6, lr}
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	0004      	movs	r4, r0
 800ef78:	4283      	cmp	r3, r0
 800ef7a:	d042      	beq.n	800f002 <_reclaim_reent+0x92>
 800ef7c:	69c3      	ldr	r3, [r0, #28]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00a      	beq.n	800ef98 <_reclaim_reent+0x28>
 800ef82:	2500      	movs	r5, #0
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	42ab      	cmp	r3, r5
 800ef88:	d140      	bne.n	800f00c <_reclaim_reent+0x9c>
 800ef8a:	69e3      	ldr	r3, [r4, #28]
 800ef8c:	6819      	ldr	r1, [r3, #0]
 800ef8e:	2900      	cmp	r1, #0
 800ef90:	d002      	beq.n	800ef98 <_reclaim_reent+0x28>
 800ef92:	0020      	movs	r0, r4
 800ef94:	f000 ffa8 	bl	800fee8 <_free_r>
 800ef98:	6961      	ldr	r1, [r4, #20]
 800ef9a:	2900      	cmp	r1, #0
 800ef9c:	d002      	beq.n	800efa4 <_reclaim_reent+0x34>
 800ef9e:	0020      	movs	r0, r4
 800efa0:	f000 ffa2 	bl	800fee8 <_free_r>
 800efa4:	69e1      	ldr	r1, [r4, #28]
 800efa6:	2900      	cmp	r1, #0
 800efa8:	d002      	beq.n	800efb0 <_reclaim_reent+0x40>
 800efaa:	0020      	movs	r0, r4
 800efac:	f000 ff9c 	bl	800fee8 <_free_r>
 800efb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800efb2:	2900      	cmp	r1, #0
 800efb4:	d002      	beq.n	800efbc <_reclaim_reent+0x4c>
 800efb6:	0020      	movs	r0, r4
 800efb8:	f000 ff96 	bl	800fee8 <_free_r>
 800efbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efbe:	2900      	cmp	r1, #0
 800efc0:	d002      	beq.n	800efc8 <_reclaim_reent+0x58>
 800efc2:	0020      	movs	r0, r4
 800efc4:	f000 ff90 	bl	800fee8 <_free_r>
 800efc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800efca:	2900      	cmp	r1, #0
 800efcc:	d002      	beq.n	800efd4 <_reclaim_reent+0x64>
 800efce:	0020      	movs	r0, r4
 800efd0:	f000 ff8a 	bl	800fee8 <_free_r>
 800efd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800efd6:	2900      	cmp	r1, #0
 800efd8:	d002      	beq.n	800efe0 <_reclaim_reent+0x70>
 800efda:	0020      	movs	r0, r4
 800efdc:	f000 ff84 	bl	800fee8 <_free_r>
 800efe0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800efe2:	2900      	cmp	r1, #0
 800efe4:	d002      	beq.n	800efec <_reclaim_reent+0x7c>
 800efe6:	0020      	movs	r0, r4
 800efe8:	f000 ff7e 	bl	800fee8 <_free_r>
 800efec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800efee:	2900      	cmp	r1, #0
 800eff0:	d002      	beq.n	800eff8 <_reclaim_reent+0x88>
 800eff2:	0020      	movs	r0, r4
 800eff4:	f000 ff78 	bl	800fee8 <_free_r>
 800eff8:	6a23      	ldr	r3, [r4, #32]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <_reclaim_reent+0x92>
 800effe:	0020      	movs	r0, r4
 800f000:	4798      	blx	r3
 800f002:	bd70      	pop	{r4, r5, r6, pc}
 800f004:	5949      	ldr	r1, [r1, r5]
 800f006:	2900      	cmp	r1, #0
 800f008:	d108      	bne.n	800f01c <_reclaim_reent+0xac>
 800f00a:	3504      	adds	r5, #4
 800f00c:	69e3      	ldr	r3, [r4, #28]
 800f00e:	68d9      	ldr	r1, [r3, #12]
 800f010:	2d80      	cmp	r5, #128	; 0x80
 800f012:	d1f7      	bne.n	800f004 <_reclaim_reent+0x94>
 800f014:	0020      	movs	r0, r4
 800f016:	f000 ff67 	bl	800fee8 <_free_r>
 800f01a:	e7b6      	b.n	800ef8a <_reclaim_reent+0x1a>
 800f01c:	680e      	ldr	r6, [r1, #0]
 800f01e:	0020      	movs	r0, r4
 800f020:	f000 ff62 	bl	800fee8 <_free_r>
 800f024:	0031      	movs	r1, r6
 800f026:	e7ee      	b.n	800f006 <_reclaim_reent+0x96>
 800f028:	200002f0 	.word	0x200002f0

0800f02c <_lseek_r>:
 800f02c:	b570      	push	{r4, r5, r6, lr}
 800f02e:	0004      	movs	r4, r0
 800f030:	0008      	movs	r0, r1
 800f032:	0011      	movs	r1, r2
 800f034:	001a      	movs	r2, r3
 800f036:	2300      	movs	r3, #0
 800f038:	4d05      	ldr	r5, [pc, #20]	; (800f050 <_lseek_r+0x24>)
 800f03a:	602b      	str	r3, [r5, #0]
 800f03c:	f7f8 fe70 	bl	8007d20 <_lseek>
 800f040:	1c43      	adds	r3, r0, #1
 800f042:	d103      	bne.n	800f04c <_lseek_r+0x20>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d000      	beq.n	800f04c <_lseek_r+0x20>
 800f04a:	6023      	str	r3, [r4, #0]
 800f04c:	bd70      	pop	{r4, r5, r6, pc}
 800f04e:	46c0      	nop			; (mov r8, r8)
 800f050:	20006838 	.word	0x20006838

0800f054 <_read_r>:
 800f054:	b570      	push	{r4, r5, r6, lr}
 800f056:	0004      	movs	r4, r0
 800f058:	0008      	movs	r0, r1
 800f05a:	0011      	movs	r1, r2
 800f05c:	001a      	movs	r2, r3
 800f05e:	2300      	movs	r3, #0
 800f060:	4d05      	ldr	r5, [pc, #20]	; (800f078 <_read_r+0x24>)
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	f7f8 fe34 	bl	8007cd0 <_read>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d103      	bne.n	800f074 <_read_r+0x20>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d000      	beq.n	800f074 <_read_r+0x20>
 800f072:	6023      	str	r3, [r4, #0]
 800f074:	bd70      	pop	{r4, r5, r6, pc}
 800f076:	46c0      	nop			; (mov r8, r8)
 800f078:	20006838 	.word	0x20006838

0800f07c <_sbrk_r>:
 800f07c:	2300      	movs	r3, #0
 800f07e:	b570      	push	{r4, r5, r6, lr}
 800f080:	4d06      	ldr	r5, [pc, #24]	; (800f09c <_sbrk_r+0x20>)
 800f082:	0004      	movs	r4, r0
 800f084:	0008      	movs	r0, r1
 800f086:	602b      	str	r3, [r5, #0]
 800f088:	f7f8 fe4c 	bl	8007d24 <_sbrk>
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	d103      	bne.n	800f098 <_sbrk_r+0x1c>
 800f090:	682b      	ldr	r3, [r5, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d000      	beq.n	800f098 <_sbrk_r+0x1c>
 800f096:	6023      	str	r3, [r4, #0]
 800f098:	bd70      	pop	{r4, r5, r6, pc}
 800f09a:	46c0      	nop			; (mov r8, r8)
 800f09c:	20006838 	.word	0x20006838

0800f0a0 <_write_r>:
 800f0a0:	b570      	push	{r4, r5, r6, lr}
 800f0a2:	0004      	movs	r4, r0
 800f0a4:	0008      	movs	r0, r1
 800f0a6:	0011      	movs	r1, r2
 800f0a8:	001a      	movs	r2, r3
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	4d05      	ldr	r5, [pc, #20]	; (800f0c4 <_write_r+0x24>)
 800f0ae:	602b      	str	r3, [r5, #0]
 800f0b0:	f7f8 fe1c 	bl	8007cec <_write>
 800f0b4:	1c43      	adds	r3, r0, #1
 800f0b6:	d103      	bne.n	800f0c0 <_write_r+0x20>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d000      	beq.n	800f0c0 <_write_r+0x20>
 800f0be:	6023      	str	r3, [r4, #0]
 800f0c0:	bd70      	pop	{r4, r5, r6, pc}
 800f0c2:	46c0      	nop			; (mov r8, r8)
 800f0c4:	20006838 	.word	0x20006838

0800f0c8 <__errno>:
 800f0c8:	4b01      	ldr	r3, [pc, #4]	; (800f0d0 <__errno+0x8>)
 800f0ca:	6818      	ldr	r0, [r3, #0]
 800f0cc:	4770      	bx	lr
 800f0ce:	46c0      	nop			; (mov r8, r8)
 800f0d0:	200002f0 	.word	0x200002f0

0800f0d4 <__libc_init_array>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	2600      	movs	r6, #0
 800f0d8:	4c0c      	ldr	r4, [pc, #48]	; (800f10c <__libc_init_array+0x38>)
 800f0da:	4d0d      	ldr	r5, [pc, #52]	; (800f110 <__libc_init_array+0x3c>)
 800f0dc:	1b64      	subs	r4, r4, r5
 800f0de:	10a4      	asrs	r4, r4, #2
 800f0e0:	42a6      	cmp	r6, r4
 800f0e2:	d109      	bne.n	800f0f8 <__libc_init_array+0x24>
 800f0e4:	2600      	movs	r6, #0
 800f0e6:	f003 fbef 	bl	80128c8 <_init>
 800f0ea:	4c0a      	ldr	r4, [pc, #40]	; (800f114 <__libc_init_array+0x40>)
 800f0ec:	4d0a      	ldr	r5, [pc, #40]	; (800f118 <__libc_init_array+0x44>)
 800f0ee:	1b64      	subs	r4, r4, r5
 800f0f0:	10a4      	asrs	r4, r4, #2
 800f0f2:	42a6      	cmp	r6, r4
 800f0f4:	d105      	bne.n	800f102 <__libc_init_array+0x2e>
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	00b3      	lsls	r3, r6, #2
 800f0fa:	58eb      	ldr	r3, [r5, r3]
 800f0fc:	4798      	blx	r3
 800f0fe:	3601      	adds	r6, #1
 800f100:	e7ee      	b.n	800f0e0 <__libc_init_array+0xc>
 800f102:	00b3      	lsls	r3, r6, #2
 800f104:	58eb      	ldr	r3, [r5, r3]
 800f106:	4798      	blx	r3
 800f108:	3601      	adds	r6, #1
 800f10a:	e7f2      	b.n	800f0f2 <__libc_init_array+0x1e>
 800f10c:	08014050 	.word	0x08014050
 800f110:	08014050 	.word	0x08014050
 800f114:	08014054 	.word	0x08014054
 800f118:	08014050 	.word	0x08014050

0800f11c <__retarget_lock_init_recursive>:
 800f11c:	4770      	bx	lr

0800f11e <__retarget_lock_acquire_recursive>:
 800f11e:	4770      	bx	lr

0800f120 <__retarget_lock_release_recursive>:
 800f120:	4770      	bx	lr

0800f122 <strcpy>:
 800f122:	0003      	movs	r3, r0
 800f124:	780a      	ldrb	r2, [r1, #0]
 800f126:	3101      	adds	r1, #1
 800f128:	701a      	strb	r2, [r3, #0]
 800f12a:	3301      	adds	r3, #1
 800f12c:	2a00      	cmp	r2, #0
 800f12e:	d1f9      	bne.n	800f124 <strcpy+0x2>
 800f130:	4770      	bx	lr

0800f132 <memchr>:
 800f132:	b2c9      	uxtb	r1, r1
 800f134:	1882      	adds	r2, r0, r2
 800f136:	4290      	cmp	r0, r2
 800f138:	d101      	bne.n	800f13e <memchr+0xc>
 800f13a:	2000      	movs	r0, #0
 800f13c:	4770      	bx	lr
 800f13e:	7803      	ldrb	r3, [r0, #0]
 800f140:	428b      	cmp	r3, r1
 800f142:	d0fb      	beq.n	800f13c <memchr+0xa>
 800f144:	3001      	adds	r0, #1
 800f146:	e7f6      	b.n	800f136 <memchr+0x4>

0800f148 <memcpy>:
 800f148:	2300      	movs	r3, #0
 800f14a:	b510      	push	{r4, lr}
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d100      	bne.n	800f152 <memcpy+0xa>
 800f150:	bd10      	pop	{r4, pc}
 800f152:	5ccc      	ldrb	r4, [r1, r3]
 800f154:	54c4      	strb	r4, [r0, r3]
 800f156:	3301      	adds	r3, #1
 800f158:	e7f8      	b.n	800f14c <memcpy+0x4>
	...

0800f15c <nan>:
 800f15c:	2000      	movs	r0, #0
 800f15e:	4901      	ldr	r1, [pc, #4]	; (800f164 <nan+0x8>)
 800f160:	4770      	bx	lr
 800f162:	46c0      	nop			; (mov r8, r8)
 800f164:	7ff80000 	.word	0x7ff80000

0800f168 <nanf>:
 800f168:	4800      	ldr	r0, [pc, #0]	; (800f16c <nanf+0x4>)
 800f16a:	4770      	bx	lr
 800f16c:	7fc00000 	.word	0x7fc00000

0800f170 <__assert_func>:
 800f170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f172:	0014      	movs	r4, r2
 800f174:	001a      	movs	r2, r3
 800f176:	4b09      	ldr	r3, [pc, #36]	; (800f19c <__assert_func+0x2c>)
 800f178:	0005      	movs	r5, r0
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	000e      	movs	r6, r1
 800f17e:	68d8      	ldr	r0, [r3, #12]
 800f180:	4b07      	ldr	r3, [pc, #28]	; (800f1a0 <__assert_func+0x30>)
 800f182:	2c00      	cmp	r4, #0
 800f184:	d101      	bne.n	800f18a <__assert_func+0x1a>
 800f186:	4b07      	ldr	r3, [pc, #28]	; (800f1a4 <__assert_func+0x34>)
 800f188:	001c      	movs	r4, r3
 800f18a:	4907      	ldr	r1, [pc, #28]	; (800f1a8 <__assert_func+0x38>)
 800f18c:	9301      	str	r3, [sp, #4]
 800f18e:	9402      	str	r4, [sp, #8]
 800f190:	002b      	movs	r3, r5
 800f192:	9600      	str	r6, [sp, #0]
 800f194:	f002 f940 	bl	8011418 <fiprintf>
 800f198:	f002 f961 	bl	801145e <abort>
 800f19c:	200002f0 	.word	0x200002f0
 800f1a0:	08013da3 	.word	0x08013da3
 800f1a4:	08013dde 	.word	0x08013dde
 800f1a8:	08013db0 	.word	0x08013db0

0800f1ac <quorem>:
 800f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ae:	6902      	ldr	r2, [r0, #16]
 800f1b0:	690b      	ldr	r3, [r1, #16]
 800f1b2:	b089      	sub	sp, #36	; 0x24
 800f1b4:	0007      	movs	r7, r0
 800f1b6:	9104      	str	r1, [sp, #16]
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	db69      	blt.n	800f292 <quorem+0xe6>
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	009c      	lsls	r4, r3, #2
 800f1c2:	9301      	str	r3, [sp, #4]
 800f1c4:	000b      	movs	r3, r1
 800f1c6:	3314      	adds	r3, #20
 800f1c8:	9306      	str	r3, [sp, #24]
 800f1ca:	191b      	adds	r3, r3, r4
 800f1cc:	9305      	str	r3, [sp, #20]
 800f1ce:	003b      	movs	r3, r7
 800f1d0:	3314      	adds	r3, #20
 800f1d2:	9303      	str	r3, [sp, #12]
 800f1d4:	191c      	adds	r4, r3, r4
 800f1d6:	9b05      	ldr	r3, [sp, #20]
 800f1d8:	6826      	ldr	r6, [r4, #0]
 800f1da:	681d      	ldr	r5, [r3, #0]
 800f1dc:	0030      	movs	r0, r6
 800f1de:	3501      	adds	r5, #1
 800f1e0:	0029      	movs	r1, r5
 800f1e2:	f7f0 ffad 	bl	8000140 <__udivsi3>
 800f1e6:	9002      	str	r0, [sp, #8]
 800f1e8:	42ae      	cmp	r6, r5
 800f1ea:	d329      	bcc.n	800f240 <quorem+0x94>
 800f1ec:	9b06      	ldr	r3, [sp, #24]
 800f1ee:	2600      	movs	r6, #0
 800f1f0:	469c      	mov	ip, r3
 800f1f2:	9d03      	ldr	r5, [sp, #12]
 800f1f4:	9606      	str	r6, [sp, #24]
 800f1f6:	4662      	mov	r2, ip
 800f1f8:	ca08      	ldmia	r2!, {r3}
 800f1fa:	6828      	ldr	r0, [r5, #0]
 800f1fc:	4694      	mov	ip, r2
 800f1fe:	9a02      	ldr	r2, [sp, #8]
 800f200:	b299      	uxth	r1, r3
 800f202:	4351      	muls	r1, r2
 800f204:	0c1b      	lsrs	r3, r3, #16
 800f206:	4353      	muls	r3, r2
 800f208:	1989      	adds	r1, r1, r6
 800f20a:	0c0a      	lsrs	r2, r1, #16
 800f20c:	189b      	adds	r3, r3, r2
 800f20e:	9307      	str	r3, [sp, #28]
 800f210:	0c1e      	lsrs	r6, r3, #16
 800f212:	9b06      	ldr	r3, [sp, #24]
 800f214:	b282      	uxth	r2, r0
 800f216:	18d2      	adds	r2, r2, r3
 800f218:	466b      	mov	r3, sp
 800f21a:	b289      	uxth	r1, r1
 800f21c:	8b9b      	ldrh	r3, [r3, #28]
 800f21e:	1a52      	subs	r2, r2, r1
 800f220:	0c01      	lsrs	r1, r0, #16
 800f222:	1ac9      	subs	r1, r1, r3
 800f224:	1413      	asrs	r3, r2, #16
 800f226:	18cb      	adds	r3, r1, r3
 800f228:	1419      	asrs	r1, r3, #16
 800f22a:	b292      	uxth	r2, r2
 800f22c:	041b      	lsls	r3, r3, #16
 800f22e:	4313      	orrs	r3, r2
 800f230:	c508      	stmia	r5!, {r3}
 800f232:	9b05      	ldr	r3, [sp, #20]
 800f234:	9106      	str	r1, [sp, #24]
 800f236:	4563      	cmp	r3, ip
 800f238:	d2dd      	bcs.n	800f1f6 <quorem+0x4a>
 800f23a:	6823      	ldr	r3, [r4, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d030      	beq.n	800f2a2 <quorem+0xf6>
 800f240:	0038      	movs	r0, r7
 800f242:	9904      	ldr	r1, [sp, #16]
 800f244:	f001 fcda 	bl	8010bfc <__mcmp>
 800f248:	2800      	cmp	r0, #0
 800f24a:	db21      	blt.n	800f290 <quorem+0xe4>
 800f24c:	0038      	movs	r0, r7
 800f24e:	2600      	movs	r6, #0
 800f250:	9b02      	ldr	r3, [sp, #8]
 800f252:	9c04      	ldr	r4, [sp, #16]
 800f254:	3301      	adds	r3, #1
 800f256:	9302      	str	r3, [sp, #8]
 800f258:	3014      	adds	r0, #20
 800f25a:	3414      	adds	r4, #20
 800f25c:	6803      	ldr	r3, [r0, #0]
 800f25e:	cc02      	ldmia	r4!, {r1}
 800f260:	b29d      	uxth	r5, r3
 800f262:	19ad      	adds	r5, r5, r6
 800f264:	b28a      	uxth	r2, r1
 800f266:	1aaa      	subs	r2, r5, r2
 800f268:	0c09      	lsrs	r1, r1, #16
 800f26a:	0c1b      	lsrs	r3, r3, #16
 800f26c:	1a5b      	subs	r3, r3, r1
 800f26e:	1411      	asrs	r1, r2, #16
 800f270:	185b      	adds	r3, r3, r1
 800f272:	141e      	asrs	r6, r3, #16
 800f274:	b292      	uxth	r2, r2
 800f276:	041b      	lsls	r3, r3, #16
 800f278:	4313      	orrs	r3, r2
 800f27a:	c008      	stmia	r0!, {r3}
 800f27c:	9b05      	ldr	r3, [sp, #20]
 800f27e:	42a3      	cmp	r3, r4
 800f280:	d2ec      	bcs.n	800f25c <quorem+0xb0>
 800f282:	9b01      	ldr	r3, [sp, #4]
 800f284:	9a03      	ldr	r2, [sp, #12]
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	18d3      	adds	r3, r2, r3
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	2a00      	cmp	r2, #0
 800f28e:	d015      	beq.n	800f2bc <quorem+0x110>
 800f290:	9802      	ldr	r0, [sp, #8]
 800f292:	b009      	add	sp, #36	; 0x24
 800f294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f296:	6823      	ldr	r3, [r4, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d106      	bne.n	800f2aa <quorem+0xfe>
 800f29c:	9b01      	ldr	r3, [sp, #4]
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	9301      	str	r3, [sp, #4]
 800f2a2:	9b03      	ldr	r3, [sp, #12]
 800f2a4:	3c04      	subs	r4, #4
 800f2a6:	42a3      	cmp	r3, r4
 800f2a8:	d3f5      	bcc.n	800f296 <quorem+0xea>
 800f2aa:	9b01      	ldr	r3, [sp, #4]
 800f2ac:	613b      	str	r3, [r7, #16]
 800f2ae:	e7c7      	b.n	800f240 <quorem+0x94>
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	2a00      	cmp	r2, #0
 800f2b4:	d106      	bne.n	800f2c4 <quorem+0x118>
 800f2b6:	9a01      	ldr	r2, [sp, #4]
 800f2b8:	3a01      	subs	r2, #1
 800f2ba:	9201      	str	r2, [sp, #4]
 800f2bc:	9a03      	ldr	r2, [sp, #12]
 800f2be:	3b04      	subs	r3, #4
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d3f5      	bcc.n	800f2b0 <quorem+0x104>
 800f2c4:	9b01      	ldr	r3, [sp, #4]
 800f2c6:	613b      	str	r3, [r7, #16]
 800f2c8:	e7e2      	b.n	800f290 <quorem+0xe4>
	...

0800f2cc <_dtoa_r>:
 800f2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ce:	0014      	movs	r4, r2
 800f2d0:	001d      	movs	r5, r3
 800f2d2:	69c6      	ldr	r6, [r0, #28]
 800f2d4:	b09d      	sub	sp, #116	; 0x74
 800f2d6:	9408      	str	r4, [sp, #32]
 800f2d8:	9509      	str	r5, [sp, #36]	; 0x24
 800f2da:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800f2dc:	9004      	str	r0, [sp, #16]
 800f2de:	2e00      	cmp	r6, #0
 800f2e0:	d10f      	bne.n	800f302 <_dtoa_r+0x36>
 800f2e2:	2010      	movs	r0, #16
 800f2e4:	f7fd fde8 	bl	800ceb8 <malloc>
 800f2e8:	9b04      	ldr	r3, [sp, #16]
 800f2ea:	1e02      	subs	r2, r0, #0
 800f2ec:	61d8      	str	r0, [r3, #28]
 800f2ee:	d104      	bne.n	800f2fa <_dtoa_r+0x2e>
 800f2f0:	21ef      	movs	r1, #239	; 0xef
 800f2f2:	4bc6      	ldr	r3, [pc, #792]	; (800f60c <_dtoa_r+0x340>)
 800f2f4:	48c6      	ldr	r0, [pc, #792]	; (800f610 <_dtoa_r+0x344>)
 800f2f6:	f7ff ff3b 	bl	800f170 <__assert_func>
 800f2fa:	6046      	str	r6, [r0, #4]
 800f2fc:	6086      	str	r6, [r0, #8]
 800f2fe:	6006      	str	r6, [r0, #0]
 800f300:	60c6      	str	r6, [r0, #12]
 800f302:	9b04      	ldr	r3, [sp, #16]
 800f304:	69db      	ldr	r3, [r3, #28]
 800f306:	6819      	ldr	r1, [r3, #0]
 800f308:	2900      	cmp	r1, #0
 800f30a:	d00b      	beq.n	800f324 <_dtoa_r+0x58>
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	2301      	movs	r3, #1
 800f310:	4093      	lsls	r3, r2
 800f312:	604a      	str	r2, [r1, #4]
 800f314:	608b      	str	r3, [r1, #8]
 800f316:	9804      	ldr	r0, [sp, #16]
 800f318:	f001 f9e2 	bl	80106e0 <_Bfree>
 800f31c:	2200      	movs	r2, #0
 800f31e:	9b04      	ldr	r3, [sp, #16]
 800f320:	69db      	ldr	r3, [r3, #28]
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	2d00      	cmp	r5, #0
 800f326:	da1e      	bge.n	800f366 <_dtoa_r+0x9a>
 800f328:	2301      	movs	r3, #1
 800f32a:	603b      	str	r3, [r7, #0]
 800f32c:	006b      	lsls	r3, r5, #1
 800f32e:	085b      	lsrs	r3, r3, #1
 800f330:	9309      	str	r3, [sp, #36]	; 0x24
 800f332:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f334:	4bb7      	ldr	r3, [pc, #732]	; (800f614 <_dtoa_r+0x348>)
 800f336:	4ab7      	ldr	r2, [pc, #732]	; (800f614 <_dtoa_r+0x348>)
 800f338:	403b      	ands	r3, r7
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d116      	bne.n	800f36c <_dtoa_r+0xa0>
 800f33e:	4bb6      	ldr	r3, [pc, #728]	; (800f618 <_dtoa_r+0x34c>)
 800f340:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f342:	6013      	str	r3, [r2, #0]
 800f344:	033b      	lsls	r3, r7, #12
 800f346:	0b1b      	lsrs	r3, r3, #12
 800f348:	4323      	orrs	r3, r4
 800f34a:	d101      	bne.n	800f350 <_dtoa_r+0x84>
 800f34c:	f000 fdb5 	bl	800feba <_dtoa_r+0xbee>
 800f350:	4bb2      	ldr	r3, [pc, #712]	; (800f61c <_dtoa_r+0x350>)
 800f352:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f354:	9306      	str	r3, [sp, #24]
 800f356:	2a00      	cmp	r2, #0
 800f358:	d002      	beq.n	800f360 <_dtoa_r+0x94>
 800f35a:	4bb1      	ldr	r3, [pc, #708]	; (800f620 <_dtoa_r+0x354>)
 800f35c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f35e:	6013      	str	r3, [r2, #0]
 800f360:	9806      	ldr	r0, [sp, #24]
 800f362:	b01d      	add	sp, #116	; 0x74
 800f364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f366:	2300      	movs	r3, #0
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	e7e2      	b.n	800f332 <_dtoa_r+0x66>
 800f36c:	9a08      	ldr	r2, [sp, #32]
 800f36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f370:	9210      	str	r2, [sp, #64]	; 0x40
 800f372:	9311      	str	r3, [sp, #68]	; 0x44
 800f374:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f376:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f378:	2200      	movs	r2, #0
 800f37a:	2300      	movs	r3, #0
 800f37c:	f7f1 f866 	bl	800044c <__aeabi_dcmpeq>
 800f380:	1e06      	subs	r6, r0, #0
 800f382:	d009      	beq.n	800f398 <_dtoa_r+0xcc>
 800f384:	2301      	movs	r3, #1
 800f386:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f388:	6013      	str	r3, [r2, #0]
 800f38a:	4ba6      	ldr	r3, [pc, #664]	; (800f624 <_dtoa_r+0x358>)
 800f38c:	9306      	str	r3, [sp, #24]
 800f38e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f390:	2b00      	cmp	r3, #0
 800f392:	d0e5      	beq.n	800f360 <_dtoa_r+0x94>
 800f394:	4ba4      	ldr	r3, [pc, #656]	; (800f628 <_dtoa_r+0x35c>)
 800f396:	e7e1      	b.n	800f35c <_dtoa_r+0x90>
 800f398:	ab1a      	add	r3, sp, #104	; 0x68
 800f39a:	9301      	str	r3, [sp, #4]
 800f39c:	ab1b      	add	r3, sp, #108	; 0x6c
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	9804      	ldr	r0, [sp, #16]
 800f3a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f3a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3a6:	f001 fd45 	bl	8010e34 <__d2b>
 800f3aa:	007a      	lsls	r2, r7, #1
 800f3ac:	9005      	str	r0, [sp, #20]
 800f3ae:	0d52      	lsrs	r2, r2, #21
 800f3b0:	d100      	bne.n	800f3b4 <_dtoa_r+0xe8>
 800f3b2:	e07b      	b.n	800f4ac <_dtoa_r+0x1e0>
 800f3b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3b6:	9617      	str	r6, [sp, #92]	; 0x5c
 800f3b8:	0319      	lsls	r1, r3, #12
 800f3ba:	4b9c      	ldr	r3, [pc, #624]	; (800f62c <_dtoa_r+0x360>)
 800f3bc:	0b09      	lsrs	r1, r1, #12
 800f3be:	430b      	orrs	r3, r1
 800f3c0:	499b      	ldr	r1, [pc, #620]	; (800f630 <_dtoa_r+0x364>)
 800f3c2:	1857      	adds	r7, r2, r1
 800f3c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f3c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f3c8:	0019      	movs	r1, r3
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	4b99      	ldr	r3, [pc, #612]	; (800f634 <_dtoa_r+0x368>)
 800f3ce:	f7f3 fa43 	bl	8002858 <__aeabi_dsub>
 800f3d2:	4a99      	ldr	r2, [pc, #612]	; (800f638 <_dtoa_r+0x36c>)
 800f3d4:	4b99      	ldr	r3, [pc, #612]	; (800f63c <_dtoa_r+0x370>)
 800f3d6:	f7f2 ff7d 	bl	80022d4 <__aeabi_dmul>
 800f3da:	4a99      	ldr	r2, [pc, #612]	; (800f640 <_dtoa_r+0x374>)
 800f3dc:	4b99      	ldr	r3, [pc, #612]	; (800f644 <_dtoa_r+0x378>)
 800f3de:	f7f2 f81f 	bl	8001420 <__aeabi_dadd>
 800f3e2:	0004      	movs	r4, r0
 800f3e4:	0038      	movs	r0, r7
 800f3e6:	000d      	movs	r5, r1
 800f3e8:	f7f3 fe0c 	bl	8003004 <__aeabi_i2d>
 800f3ec:	4a96      	ldr	r2, [pc, #600]	; (800f648 <_dtoa_r+0x37c>)
 800f3ee:	4b97      	ldr	r3, [pc, #604]	; (800f64c <_dtoa_r+0x380>)
 800f3f0:	f7f2 ff70 	bl	80022d4 <__aeabi_dmul>
 800f3f4:	0002      	movs	r2, r0
 800f3f6:	000b      	movs	r3, r1
 800f3f8:	0020      	movs	r0, r4
 800f3fa:	0029      	movs	r1, r5
 800f3fc:	f7f2 f810 	bl	8001420 <__aeabi_dadd>
 800f400:	0004      	movs	r4, r0
 800f402:	000d      	movs	r5, r1
 800f404:	f7f3 fdc8 	bl	8002f98 <__aeabi_d2iz>
 800f408:	2200      	movs	r2, #0
 800f40a:	9003      	str	r0, [sp, #12]
 800f40c:	2300      	movs	r3, #0
 800f40e:	0020      	movs	r0, r4
 800f410:	0029      	movs	r1, r5
 800f412:	f7f1 f821 	bl	8000458 <__aeabi_dcmplt>
 800f416:	2800      	cmp	r0, #0
 800f418:	d00b      	beq.n	800f432 <_dtoa_r+0x166>
 800f41a:	9803      	ldr	r0, [sp, #12]
 800f41c:	f7f3 fdf2 	bl	8003004 <__aeabi_i2d>
 800f420:	002b      	movs	r3, r5
 800f422:	0022      	movs	r2, r4
 800f424:	f7f1 f812 	bl	800044c <__aeabi_dcmpeq>
 800f428:	4243      	negs	r3, r0
 800f42a:	4158      	adcs	r0, r3
 800f42c:	9b03      	ldr	r3, [sp, #12]
 800f42e:	1a1b      	subs	r3, r3, r0
 800f430:	9303      	str	r3, [sp, #12]
 800f432:	2301      	movs	r3, #1
 800f434:	9316      	str	r3, [sp, #88]	; 0x58
 800f436:	9b03      	ldr	r3, [sp, #12]
 800f438:	2b16      	cmp	r3, #22
 800f43a:	d810      	bhi.n	800f45e <_dtoa_r+0x192>
 800f43c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f43e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f440:	9a03      	ldr	r2, [sp, #12]
 800f442:	4b83      	ldr	r3, [pc, #524]	; (800f650 <_dtoa_r+0x384>)
 800f444:	00d2      	lsls	r2, r2, #3
 800f446:	189b      	adds	r3, r3, r2
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	f7f1 f804 	bl	8000458 <__aeabi_dcmplt>
 800f450:	2800      	cmp	r0, #0
 800f452:	d047      	beq.n	800f4e4 <_dtoa_r+0x218>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	3b01      	subs	r3, #1
 800f458:	9303      	str	r3, [sp, #12]
 800f45a:	2300      	movs	r3, #0
 800f45c:	9316      	str	r3, [sp, #88]	; 0x58
 800f45e:	2200      	movs	r2, #0
 800f460:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f462:	920a      	str	r2, [sp, #40]	; 0x28
 800f464:	1bdb      	subs	r3, r3, r7
 800f466:	1e5a      	subs	r2, r3, #1
 800f468:	d53e      	bpl.n	800f4e8 <_dtoa_r+0x21c>
 800f46a:	2201      	movs	r2, #1
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	930a      	str	r3, [sp, #40]	; 0x28
 800f470:	2300      	movs	r3, #0
 800f472:	930c      	str	r3, [sp, #48]	; 0x30
 800f474:	9b03      	ldr	r3, [sp, #12]
 800f476:	2b00      	cmp	r3, #0
 800f478:	db38      	blt.n	800f4ec <_dtoa_r+0x220>
 800f47a:	9a03      	ldr	r2, [sp, #12]
 800f47c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f47e:	4694      	mov	ip, r2
 800f480:	4463      	add	r3, ip
 800f482:	930c      	str	r3, [sp, #48]	; 0x30
 800f484:	2300      	movs	r3, #0
 800f486:	9213      	str	r2, [sp, #76]	; 0x4c
 800f488:	930d      	str	r3, [sp, #52]	; 0x34
 800f48a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f48c:	2401      	movs	r4, #1
 800f48e:	2b09      	cmp	r3, #9
 800f490:	d867      	bhi.n	800f562 <_dtoa_r+0x296>
 800f492:	2b05      	cmp	r3, #5
 800f494:	dd02      	ble.n	800f49c <_dtoa_r+0x1d0>
 800f496:	2400      	movs	r4, #0
 800f498:	3b04      	subs	r3, #4
 800f49a:	9322      	str	r3, [sp, #136]	; 0x88
 800f49c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f49e:	1e98      	subs	r0, r3, #2
 800f4a0:	2803      	cmp	r0, #3
 800f4a2:	d867      	bhi.n	800f574 <_dtoa_r+0x2a8>
 800f4a4:	f7f0 fe38 	bl	8000118 <__gnu_thumb1_case_uqi>
 800f4a8:	5b383a2b 	.word	0x5b383a2b
 800f4ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4ae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800f4b0:	18f6      	adds	r6, r6, r3
 800f4b2:	4b68      	ldr	r3, [pc, #416]	; (800f654 <_dtoa_r+0x388>)
 800f4b4:	18f2      	adds	r2, r6, r3
 800f4b6:	2a20      	cmp	r2, #32
 800f4b8:	dd0f      	ble.n	800f4da <_dtoa_r+0x20e>
 800f4ba:	2340      	movs	r3, #64	; 0x40
 800f4bc:	1a9b      	subs	r3, r3, r2
 800f4be:	409f      	lsls	r7, r3
 800f4c0:	4b65      	ldr	r3, [pc, #404]	; (800f658 <_dtoa_r+0x38c>)
 800f4c2:	0038      	movs	r0, r7
 800f4c4:	18f3      	adds	r3, r6, r3
 800f4c6:	40dc      	lsrs	r4, r3
 800f4c8:	4320      	orrs	r0, r4
 800f4ca:	f7f3 fdcb 	bl	8003064 <__aeabi_ui2d>
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	4b62      	ldr	r3, [pc, #392]	; (800f65c <_dtoa_r+0x390>)
 800f4d2:	1e77      	subs	r7, r6, #1
 800f4d4:	18cb      	adds	r3, r1, r3
 800f4d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800f4d8:	e776      	b.n	800f3c8 <_dtoa_r+0xfc>
 800f4da:	2320      	movs	r3, #32
 800f4dc:	0020      	movs	r0, r4
 800f4de:	1a9b      	subs	r3, r3, r2
 800f4e0:	4098      	lsls	r0, r3
 800f4e2:	e7f2      	b.n	800f4ca <_dtoa_r+0x1fe>
 800f4e4:	9016      	str	r0, [sp, #88]	; 0x58
 800f4e6:	e7ba      	b.n	800f45e <_dtoa_r+0x192>
 800f4e8:	920c      	str	r2, [sp, #48]	; 0x30
 800f4ea:	e7c3      	b.n	800f474 <_dtoa_r+0x1a8>
 800f4ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4ee:	9a03      	ldr	r2, [sp, #12]
 800f4f0:	1a9b      	subs	r3, r3, r2
 800f4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f4f4:	4253      	negs	r3, r2
 800f4f6:	930d      	str	r3, [sp, #52]	; 0x34
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800f4fc:	e7c5      	b.n	800f48a <_dtoa_r+0x1be>
 800f4fe:	2300      	movs	r3, #0
 800f500:	930f      	str	r3, [sp, #60]	; 0x3c
 800f502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f504:	930b      	str	r3, [sp, #44]	; 0x2c
 800f506:	9307      	str	r3, [sp, #28]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	dc13      	bgt.n	800f534 <_dtoa_r+0x268>
 800f50c:	2301      	movs	r3, #1
 800f50e:	001a      	movs	r2, r3
 800f510:	930b      	str	r3, [sp, #44]	; 0x2c
 800f512:	9307      	str	r3, [sp, #28]
 800f514:	9223      	str	r2, [sp, #140]	; 0x8c
 800f516:	e00d      	b.n	800f534 <_dtoa_r+0x268>
 800f518:	2301      	movs	r3, #1
 800f51a:	e7f1      	b.n	800f500 <_dtoa_r+0x234>
 800f51c:	2300      	movs	r3, #0
 800f51e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f520:	930f      	str	r3, [sp, #60]	; 0x3c
 800f522:	4694      	mov	ip, r2
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	4463      	add	r3, ip
 800f528:	930b      	str	r3, [sp, #44]	; 0x2c
 800f52a:	3301      	adds	r3, #1
 800f52c:	9307      	str	r3, [sp, #28]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	dc00      	bgt.n	800f534 <_dtoa_r+0x268>
 800f532:	2301      	movs	r3, #1
 800f534:	9a04      	ldr	r2, [sp, #16]
 800f536:	2100      	movs	r1, #0
 800f538:	69d0      	ldr	r0, [r2, #28]
 800f53a:	2204      	movs	r2, #4
 800f53c:	0015      	movs	r5, r2
 800f53e:	3514      	adds	r5, #20
 800f540:	429d      	cmp	r5, r3
 800f542:	d91b      	bls.n	800f57c <_dtoa_r+0x2b0>
 800f544:	6041      	str	r1, [r0, #4]
 800f546:	9804      	ldr	r0, [sp, #16]
 800f548:	f001 f886 	bl	8010658 <_Balloc>
 800f54c:	9006      	str	r0, [sp, #24]
 800f54e:	2800      	cmp	r0, #0
 800f550:	d117      	bne.n	800f582 <_dtoa_r+0x2b6>
 800f552:	21b0      	movs	r1, #176	; 0xb0
 800f554:	4b42      	ldr	r3, [pc, #264]	; (800f660 <_dtoa_r+0x394>)
 800f556:	482e      	ldr	r0, [pc, #184]	; (800f610 <_dtoa_r+0x344>)
 800f558:	9a06      	ldr	r2, [sp, #24]
 800f55a:	31ff      	adds	r1, #255	; 0xff
 800f55c:	e6cb      	b.n	800f2f6 <_dtoa_r+0x2a>
 800f55e:	2301      	movs	r3, #1
 800f560:	e7dd      	b.n	800f51e <_dtoa_r+0x252>
 800f562:	2300      	movs	r3, #0
 800f564:	940f      	str	r4, [sp, #60]	; 0x3c
 800f566:	9322      	str	r3, [sp, #136]	; 0x88
 800f568:	3b01      	subs	r3, #1
 800f56a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f56c:	9307      	str	r3, [sp, #28]
 800f56e:	2200      	movs	r2, #0
 800f570:	3313      	adds	r3, #19
 800f572:	e7cf      	b.n	800f514 <_dtoa_r+0x248>
 800f574:	2301      	movs	r3, #1
 800f576:	930f      	str	r3, [sp, #60]	; 0x3c
 800f578:	3b02      	subs	r3, #2
 800f57a:	e7f6      	b.n	800f56a <_dtoa_r+0x29e>
 800f57c:	3101      	adds	r1, #1
 800f57e:	0052      	lsls	r2, r2, #1
 800f580:	e7dc      	b.n	800f53c <_dtoa_r+0x270>
 800f582:	9b04      	ldr	r3, [sp, #16]
 800f584:	9a06      	ldr	r2, [sp, #24]
 800f586:	69db      	ldr	r3, [r3, #28]
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	9b07      	ldr	r3, [sp, #28]
 800f58c:	2b0e      	cmp	r3, #14
 800f58e:	d900      	bls.n	800f592 <_dtoa_r+0x2c6>
 800f590:	e0e5      	b.n	800f75e <_dtoa_r+0x492>
 800f592:	2c00      	cmp	r4, #0
 800f594:	d100      	bne.n	800f598 <_dtoa_r+0x2cc>
 800f596:	e0e2      	b.n	800f75e <_dtoa_r+0x492>
 800f598:	9b03      	ldr	r3, [sp, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	dd64      	ble.n	800f668 <_dtoa_r+0x39c>
 800f59e:	210f      	movs	r1, #15
 800f5a0:	9a03      	ldr	r2, [sp, #12]
 800f5a2:	4b2b      	ldr	r3, [pc, #172]	; (800f650 <_dtoa_r+0x384>)
 800f5a4:	400a      	ands	r2, r1
 800f5a6:	00d2      	lsls	r2, r2, #3
 800f5a8:	189b      	adds	r3, r3, r2
 800f5aa:	681e      	ldr	r6, [r3, #0]
 800f5ac:	685f      	ldr	r7, [r3, #4]
 800f5ae:	9b03      	ldr	r3, [sp, #12]
 800f5b0:	2402      	movs	r4, #2
 800f5b2:	111d      	asrs	r5, r3, #4
 800f5b4:	05db      	lsls	r3, r3, #23
 800f5b6:	d50a      	bpl.n	800f5ce <_dtoa_r+0x302>
 800f5b8:	4b2a      	ldr	r3, [pc, #168]	; (800f664 <_dtoa_r+0x398>)
 800f5ba:	400d      	ands	r5, r1
 800f5bc:	6a1a      	ldr	r2, [r3, #32]
 800f5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f5c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f5c4:	f7f2 fa8c 	bl	8001ae0 <__aeabi_ddiv>
 800f5c8:	9008      	str	r0, [sp, #32]
 800f5ca:	9109      	str	r1, [sp, #36]	; 0x24
 800f5cc:	3401      	adds	r4, #1
 800f5ce:	4b25      	ldr	r3, [pc, #148]	; (800f664 <_dtoa_r+0x398>)
 800f5d0:	930e      	str	r3, [sp, #56]	; 0x38
 800f5d2:	2d00      	cmp	r5, #0
 800f5d4:	d108      	bne.n	800f5e8 <_dtoa_r+0x31c>
 800f5d6:	9808      	ldr	r0, [sp, #32]
 800f5d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5da:	0032      	movs	r2, r6
 800f5dc:	003b      	movs	r3, r7
 800f5de:	f7f2 fa7f 	bl	8001ae0 <__aeabi_ddiv>
 800f5e2:	9008      	str	r0, [sp, #32]
 800f5e4:	9109      	str	r1, [sp, #36]	; 0x24
 800f5e6:	e05a      	b.n	800f69e <_dtoa_r+0x3d2>
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	421d      	tst	r5, r3
 800f5ec:	d009      	beq.n	800f602 <_dtoa_r+0x336>
 800f5ee:	18e4      	adds	r4, r4, r3
 800f5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5f2:	0030      	movs	r0, r6
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	0039      	movs	r1, r7
 800f5fa:	f7f2 fe6b 	bl	80022d4 <__aeabi_dmul>
 800f5fe:	0006      	movs	r6, r0
 800f600:	000f      	movs	r7, r1
 800f602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f604:	106d      	asrs	r5, r5, #1
 800f606:	3308      	adds	r3, #8
 800f608:	e7e2      	b.n	800f5d0 <_dtoa_r+0x304>
 800f60a:	46c0      	nop			; (mov r8, r8)
 800f60c:	08013d2a 	.word	0x08013d2a
 800f610:	08013dec 	.word	0x08013dec
 800f614:	7ff00000 	.word	0x7ff00000
 800f618:	0000270f 	.word	0x0000270f
 800f61c:	08013de8 	.word	0x08013de8
 800f620:	08013deb 	.word	0x08013deb
 800f624:	08013d01 	.word	0x08013d01
 800f628:	08013d02 	.word	0x08013d02
 800f62c:	3ff00000 	.word	0x3ff00000
 800f630:	fffffc01 	.word	0xfffffc01
 800f634:	3ff80000 	.word	0x3ff80000
 800f638:	636f4361 	.word	0x636f4361
 800f63c:	3fd287a7 	.word	0x3fd287a7
 800f640:	8b60c8b3 	.word	0x8b60c8b3
 800f644:	3fc68a28 	.word	0x3fc68a28
 800f648:	509f79fb 	.word	0x509f79fb
 800f64c:	3fd34413 	.word	0x3fd34413
 800f650:	08013f38 	.word	0x08013f38
 800f654:	00000432 	.word	0x00000432
 800f658:	00000412 	.word	0x00000412
 800f65c:	fe100000 	.word	0xfe100000
 800f660:	08013e44 	.word	0x08013e44
 800f664:	08013f10 	.word	0x08013f10
 800f668:	9b03      	ldr	r3, [sp, #12]
 800f66a:	2402      	movs	r4, #2
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d016      	beq.n	800f69e <_dtoa_r+0x3d2>
 800f670:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f672:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f674:	220f      	movs	r2, #15
 800f676:	425d      	negs	r5, r3
 800f678:	402a      	ands	r2, r5
 800f67a:	4bdd      	ldr	r3, [pc, #884]	; (800f9f0 <_dtoa_r+0x724>)
 800f67c:	00d2      	lsls	r2, r2, #3
 800f67e:	189b      	adds	r3, r3, r2
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	f7f2 fe26 	bl	80022d4 <__aeabi_dmul>
 800f688:	2701      	movs	r7, #1
 800f68a:	2300      	movs	r3, #0
 800f68c:	9008      	str	r0, [sp, #32]
 800f68e:	9109      	str	r1, [sp, #36]	; 0x24
 800f690:	4ed8      	ldr	r6, [pc, #864]	; (800f9f4 <_dtoa_r+0x728>)
 800f692:	112d      	asrs	r5, r5, #4
 800f694:	2d00      	cmp	r5, #0
 800f696:	d000      	beq.n	800f69a <_dtoa_r+0x3ce>
 800f698:	e091      	b.n	800f7be <_dtoa_r+0x4f2>
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d1a1      	bne.n	800f5e2 <_dtoa_r+0x316>
 800f69e:	9e08      	ldr	r6, [sp, #32]
 800f6a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f6a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d100      	bne.n	800f6aa <_dtoa_r+0x3de>
 800f6a8:	e094      	b.n	800f7d4 <_dtoa_r+0x508>
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	0030      	movs	r0, r6
 800f6ae:	0039      	movs	r1, r7
 800f6b0:	4bd1      	ldr	r3, [pc, #836]	; (800f9f8 <_dtoa_r+0x72c>)
 800f6b2:	f7f0 fed1 	bl	8000458 <__aeabi_dcmplt>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d100      	bne.n	800f6bc <_dtoa_r+0x3f0>
 800f6ba:	e08b      	b.n	800f7d4 <_dtoa_r+0x508>
 800f6bc:	9b07      	ldr	r3, [sp, #28]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d100      	bne.n	800f6c4 <_dtoa_r+0x3f8>
 800f6c2:	e087      	b.n	800f7d4 <_dtoa_r+0x508>
 800f6c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	dd45      	ble.n	800f756 <_dtoa_r+0x48a>
 800f6ca:	9b03      	ldr	r3, [sp, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	930e      	str	r3, [sp, #56]	; 0x38
 800f6d2:	0030      	movs	r0, r6
 800f6d4:	4bc9      	ldr	r3, [pc, #804]	; (800f9fc <_dtoa_r+0x730>)
 800f6d6:	0039      	movs	r1, r7
 800f6d8:	f7f2 fdfc 	bl	80022d4 <__aeabi_dmul>
 800f6dc:	9008      	str	r0, [sp, #32]
 800f6de:	9109      	str	r1, [sp, #36]	; 0x24
 800f6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6e2:	3401      	adds	r4, #1
 800f6e4:	0020      	movs	r0, r4
 800f6e6:	9e08      	ldr	r6, [sp, #32]
 800f6e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f6ea:	9312      	str	r3, [sp, #72]	; 0x48
 800f6ec:	f7f3 fc8a 	bl	8003004 <__aeabi_i2d>
 800f6f0:	0032      	movs	r2, r6
 800f6f2:	003b      	movs	r3, r7
 800f6f4:	f7f2 fdee 	bl	80022d4 <__aeabi_dmul>
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	4bc1      	ldr	r3, [pc, #772]	; (800fa00 <_dtoa_r+0x734>)
 800f6fc:	f7f1 fe90 	bl	8001420 <__aeabi_dadd>
 800f700:	4ac0      	ldr	r2, [pc, #768]	; (800fa04 <_dtoa_r+0x738>)
 800f702:	9014      	str	r0, [sp, #80]	; 0x50
 800f704:	9115      	str	r1, [sp, #84]	; 0x54
 800f706:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f708:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f70a:	4694      	mov	ip, r2
 800f70c:	9308      	str	r3, [sp, #32]
 800f70e:	9409      	str	r4, [sp, #36]	; 0x24
 800f710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f712:	4463      	add	r3, ip
 800f714:	9318      	str	r3, [sp, #96]	; 0x60
 800f716:	9309      	str	r3, [sp, #36]	; 0x24
 800f718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d15e      	bne.n	800f7dc <_dtoa_r+0x510>
 800f71e:	2200      	movs	r2, #0
 800f720:	4bb9      	ldr	r3, [pc, #740]	; (800fa08 <_dtoa_r+0x73c>)
 800f722:	0030      	movs	r0, r6
 800f724:	0039      	movs	r1, r7
 800f726:	f7f3 f897 	bl	8002858 <__aeabi_dsub>
 800f72a:	9a08      	ldr	r2, [sp, #32]
 800f72c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f72e:	0004      	movs	r4, r0
 800f730:	000d      	movs	r5, r1
 800f732:	f7f0 fea5 	bl	8000480 <__aeabi_dcmpgt>
 800f736:	2800      	cmp	r0, #0
 800f738:	d000      	beq.n	800f73c <_dtoa_r+0x470>
 800f73a:	e2b3      	b.n	800fca4 <_dtoa_r+0x9d8>
 800f73c:	48b3      	ldr	r0, [pc, #716]	; (800fa0c <_dtoa_r+0x740>)
 800f73e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f740:	4684      	mov	ip, r0
 800f742:	4461      	add	r1, ip
 800f744:	000b      	movs	r3, r1
 800f746:	0020      	movs	r0, r4
 800f748:	0029      	movs	r1, r5
 800f74a:	9a08      	ldr	r2, [sp, #32]
 800f74c:	f7f0 fe84 	bl	8000458 <__aeabi_dcmplt>
 800f750:	2800      	cmp	r0, #0
 800f752:	d000      	beq.n	800f756 <_dtoa_r+0x48a>
 800f754:	e2a3      	b.n	800fc9e <_dtoa_r+0x9d2>
 800f756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f758:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f75a:	9308      	str	r3, [sp, #32]
 800f75c:	9409      	str	r4, [sp, #36]	; 0x24
 800f75e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f760:	2b00      	cmp	r3, #0
 800f762:	da00      	bge.n	800f766 <_dtoa_r+0x49a>
 800f764:	e179      	b.n	800fa5a <_dtoa_r+0x78e>
 800f766:	9a03      	ldr	r2, [sp, #12]
 800f768:	2a0e      	cmp	r2, #14
 800f76a:	dd00      	ble.n	800f76e <_dtoa_r+0x4a2>
 800f76c:	e175      	b.n	800fa5a <_dtoa_r+0x78e>
 800f76e:	4ba0      	ldr	r3, [pc, #640]	; (800f9f0 <_dtoa_r+0x724>)
 800f770:	00d2      	lsls	r2, r2, #3
 800f772:	189b      	adds	r3, r3, r2
 800f774:	681e      	ldr	r6, [r3, #0]
 800f776:	685f      	ldr	r7, [r3, #4]
 800f778:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	db00      	blt.n	800f780 <_dtoa_r+0x4b4>
 800f77e:	e0e5      	b.n	800f94c <_dtoa_r+0x680>
 800f780:	9b07      	ldr	r3, [sp, #28]
 800f782:	2b00      	cmp	r3, #0
 800f784:	dd00      	ble.n	800f788 <_dtoa_r+0x4bc>
 800f786:	e0e1      	b.n	800f94c <_dtoa_r+0x680>
 800f788:	d000      	beq.n	800f78c <_dtoa_r+0x4c0>
 800f78a:	e288      	b.n	800fc9e <_dtoa_r+0x9d2>
 800f78c:	2200      	movs	r2, #0
 800f78e:	0030      	movs	r0, r6
 800f790:	0039      	movs	r1, r7
 800f792:	4b9d      	ldr	r3, [pc, #628]	; (800fa08 <_dtoa_r+0x73c>)
 800f794:	f7f2 fd9e 	bl	80022d4 <__aeabi_dmul>
 800f798:	9a08      	ldr	r2, [sp, #32]
 800f79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f79c:	f7f0 fe7a 	bl	8000494 <__aeabi_dcmpge>
 800f7a0:	9e07      	ldr	r6, [sp, #28]
 800f7a2:	0037      	movs	r7, r6
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d000      	beq.n	800f7aa <_dtoa_r+0x4de>
 800f7a8:	e25f      	b.n	800fc6a <_dtoa_r+0x99e>
 800f7aa:	9b06      	ldr	r3, [sp, #24]
 800f7ac:	9a06      	ldr	r2, [sp, #24]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	9308      	str	r3, [sp, #32]
 800f7b2:	2331      	movs	r3, #49	; 0x31
 800f7b4:	7013      	strb	r3, [r2, #0]
 800f7b6:	9b03      	ldr	r3, [sp, #12]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	9303      	str	r3, [sp, #12]
 800f7bc:	e25a      	b.n	800fc74 <_dtoa_r+0x9a8>
 800f7be:	423d      	tst	r5, r7
 800f7c0:	d005      	beq.n	800f7ce <_dtoa_r+0x502>
 800f7c2:	6832      	ldr	r2, [r6, #0]
 800f7c4:	6873      	ldr	r3, [r6, #4]
 800f7c6:	f7f2 fd85 	bl	80022d4 <__aeabi_dmul>
 800f7ca:	003b      	movs	r3, r7
 800f7cc:	3401      	adds	r4, #1
 800f7ce:	106d      	asrs	r5, r5, #1
 800f7d0:	3608      	adds	r6, #8
 800f7d2:	e75f      	b.n	800f694 <_dtoa_r+0x3c8>
 800f7d4:	9b03      	ldr	r3, [sp, #12]
 800f7d6:	930e      	str	r3, [sp, #56]	; 0x38
 800f7d8:	9b07      	ldr	r3, [sp, #28]
 800f7da:	e783      	b.n	800f6e4 <_dtoa_r+0x418>
 800f7dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f7de:	4b84      	ldr	r3, [pc, #528]	; (800f9f0 <_dtoa_r+0x724>)
 800f7e0:	3a01      	subs	r2, #1
 800f7e2:	00d2      	lsls	r2, r2, #3
 800f7e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f7e6:	189b      	adds	r3, r3, r2
 800f7e8:	9c08      	ldr	r4, [sp, #32]
 800f7ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	2900      	cmp	r1, #0
 800f7f2:	d051      	beq.n	800f898 <_dtoa_r+0x5cc>
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	4986      	ldr	r1, [pc, #536]	; (800fa10 <_dtoa_r+0x744>)
 800f7f8:	f7f2 f972 	bl	8001ae0 <__aeabi_ddiv>
 800f7fc:	0022      	movs	r2, r4
 800f7fe:	002b      	movs	r3, r5
 800f800:	f7f3 f82a 	bl	8002858 <__aeabi_dsub>
 800f804:	9a06      	ldr	r2, [sp, #24]
 800f806:	0004      	movs	r4, r0
 800f808:	4694      	mov	ip, r2
 800f80a:	000d      	movs	r5, r1
 800f80c:	9b06      	ldr	r3, [sp, #24]
 800f80e:	9314      	str	r3, [sp, #80]	; 0x50
 800f810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f812:	4463      	add	r3, ip
 800f814:	9318      	str	r3, [sp, #96]	; 0x60
 800f816:	0039      	movs	r1, r7
 800f818:	0030      	movs	r0, r6
 800f81a:	f7f3 fbbd 	bl	8002f98 <__aeabi_d2iz>
 800f81e:	9012      	str	r0, [sp, #72]	; 0x48
 800f820:	f7f3 fbf0 	bl	8003004 <__aeabi_i2d>
 800f824:	0002      	movs	r2, r0
 800f826:	000b      	movs	r3, r1
 800f828:	0030      	movs	r0, r6
 800f82a:	0039      	movs	r1, r7
 800f82c:	f7f3 f814 	bl	8002858 <__aeabi_dsub>
 800f830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f832:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f834:	3301      	adds	r3, #1
 800f836:	9308      	str	r3, [sp, #32]
 800f838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f83a:	0006      	movs	r6, r0
 800f83c:	3330      	adds	r3, #48	; 0x30
 800f83e:	7013      	strb	r3, [r2, #0]
 800f840:	0022      	movs	r2, r4
 800f842:	002b      	movs	r3, r5
 800f844:	000f      	movs	r7, r1
 800f846:	f7f0 fe07 	bl	8000458 <__aeabi_dcmplt>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d174      	bne.n	800f938 <_dtoa_r+0x66c>
 800f84e:	0032      	movs	r2, r6
 800f850:	003b      	movs	r3, r7
 800f852:	2000      	movs	r0, #0
 800f854:	4968      	ldr	r1, [pc, #416]	; (800f9f8 <_dtoa_r+0x72c>)
 800f856:	f7f2 ffff 	bl	8002858 <__aeabi_dsub>
 800f85a:	0022      	movs	r2, r4
 800f85c:	002b      	movs	r3, r5
 800f85e:	f7f0 fdfb 	bl	8000458 <__aeabi_dcmplt>
 800f862:	2800      	cmp	r0, #0
 800f864:	d000      	beq.n	800f868 <_dtoa_r+0x59c>
 800f866:	e0d7      	b.n	800fa18 <_dtoa_r+0x74c>
 800f868:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f86a:	9a08      	ldr	r2, [sp, #32]
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d100      	bne.n	800f872 <_dtoa_r+0x5a6>
 800f870:	e771      	b.n	800f756 <_dtoa_r+0x48a>
 800f872:	2200      	movs	r2, #0
 800f874:	0020      	movs	r0, r4
 800f876:	0029      	movs	r1, r5
 800f878:	4b60      	ldr	r3, [pc, #384]	; (800f9fc <_dtoa_r+0x730>)
 800f87a:	f7f2 fd2b 	bl	80022d4 <__aeabi_dmul>
 800f87e:	4b5f      	ldr	r3, [pc, #380]	; (800f9fc <_dtoa_r+0x730>)
 800f880:	0004      	movs	r4, r0
 800f882:	000d      	movs	r5, r1
 800f884:	0030      	movs	r0, r6
 800f886:	0039      	movs	r1, r7
 800f888:	2200      	movs	r2, #0
 800f88a:	f7f2 fd23 	bl	80022d4 <__aeabi_dmul>
 800f88e:	9b08      	ldr	r3, [sp, #32]
 800f890:	0006      	movs	r6, r0
 800f892:	000f      	movs	r7, r1
 800f894:	9314      	str	r3, [sp, #80]	; 0x50
 800f896:	e7be      	b.n	800f816 <_dtoa_r+0x54a>
 800f898:	0020      	movs	r0, r4
 800f89a:	0029      	movs	r1, r5
 800f89c:	f7f2 fd1a 	bl	80022d4 <__aeabi_dmul>
 800f8a0:	9a06      	ldr	r2, [sp, #24]
 800f8a2:	9b06      	ldr	r3, [sp, #24]
 800f8a4:	4694      	mov	ip, r2
 800f8a6:	9308      	str	r3, [sp, #32]
 800f8a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8aa:	9014      	str	r0, [sp, #80]	; 0x50
 800f8ac:	9115      	str	r1, [sp, #84]	; 0x54
 800f8ae:	4463      	add	r3, ip
 800f8b0:	9319      	str	r3, [sp, #100]	; 0x64
 800f8b2:	0030      	movs	r0, r6
 800f8b4:	0039      	movs	r1, r7
 800f8b6:	f7f3 fb6f 	bl	8002f98 <__aeabi_d2iz>
 800f8ba:	9018      	str	r0, [sp, #96]	; 0x60
 800f8bc:	f7f3 fba2 	bl	8003004 <__aeabi_i2d>
 800f8c0:	0002      	movs	r2, r0
 800f8c2:	000b      	movs	r3, r1
 800f8c4:	0030      	movs	r0, r6
 800f8c6:	0039      	movs	r1, r7
 800f8c8:	f7f2 ffc6 	bl	8002858 <__aeabi_dsub>
 800f8cc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f8ce:	9b08      	ldr	r3, [sp, #32]
 800f8d0:	3630      	adds	r6, #48	; 0x30
 800f8d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f8d4:	701e      	strb	r6, [r3, #0]
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	0004      	movs	r4, r0
 800f8da:	000d      	movs	r5, r1
 800f8dc:	9308      	str	r3, [sp, #32]
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d12d      	bne.n	800f93e <_dtoa_r+0x672>
 800f8e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f8e4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f8e6:	9a06      	ldr	r2, [sp, #24]
 800f8e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8ea:	4694      	mov	ip, r2
 800f8ec:	4463      	add	r3, ip
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	9308      	str	r3, [sp, #32]
 800f8f2:	4b47      	ldr	r3, [pc, #284]	; (800fa10 <_dtoa_r+0x744>)
 800f8f4:	f7f1 fd94 	bl	8001420 <__aeabi_dadd>
 800f8f8:	0002      	movs	r2, r0
 800f8fa:	000b      	movs	r3, r1
 800f8fc:	0020      	movs	r0, r4
 800f8fe:	0029      	movs	r1, r5
 800f900:	f7f0 fdbe 	bl	8000480 <__aeabi_dcmpgt>
 800f904:	2800      	cmp	r0, #0
 800f906:	d000      	beq.n	800f90a <_dtoa_r+0x63e>
 800f908:	e086      	b.n	800fa18 <_dtoa_r+0x74c>
 800f90a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f90c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f90e:	2000      	movs	r0, #0
 800f910:	493f      	ldr	r1, [pc, #252]	; (800fa10 <_dtoa_r+0x744>)
 800f912:	f7f2 ffa1 	bl	8002858 <__aeabi_dsub>
 800f916:	0002      	movs	r2, r0
 800f918:	000b      	movs	r3, r1
 800f91a:	0020      	movs	r0, r4
 800f91c:	0029      	movs	r1, r5
 800f91e:	f7f0 fd9b 	bl	8000458 <__aeabi_dcmplt>
 800f922:	2800      	cmp	r0, #0
 800f924:	d100      	bne.n	800f928 <_dtoa_r+0x65c>
 800f926:	e716      	b.n	800f756 <_dtoa_r+0x48a>
 800f928:	9b08      	ldr	r3, [sp, #32]
 800f92a:	001a      	movs	r2, r3
 800f92c:	3a01      	subs	r2, #1
 800f92e:	9208      	str	r2, [sp, #32]
 800f930:	7812      	ldrb	r2, [r2, #0]
 800f932:	2a30      	cmp	r2, #48	; 0x30
 800f934:	d0f8      	beq.n	800f928 <_dtoa_r+0x65c>
 800f936:	9308      	str	r3, [sp, #32]
 800f938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f93a:	9303      	str	r3, [sp, #12]
 800f93c:	e046      	b.n	800f9cc <_dtoa_r+0x700>
 800f93e:	2200      	movs	r2, #0
 800f940:	4b2e      	ldr	r3, [pc, #184]	; (800f9fc <_dtoa_r+0x730>)
 800f942:	f7f2 fcc7 	bl	80022d4 <__aeabi_dmul>
 800f946:	0006      	movs	r6, r0
 800f948:	000f      	movs	r7, r1
 800f94a:	e7b2      	b.n	800f8b2 <_dtoa_r+0x5e6>
 800f94c:	9b06      	ldr	r3, [sp, #24]
 800f94e:	9a06      	ldr	r2, [sp, #24]
 800f950:	930a      	str	r3, [sp, #40]	; 0x28
 800f952:	9b07      	ldr	r3, [sp, #28]
 800f954:	9c08      	ldr	r4, [sp, #32]
 800f956:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f958:	3b01      	subs	r3, #1
 800f95a:	189b      	adds	r3, r3, r2
 800f95c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f95e:	0032      	movs	r2, r6
 800f960:	003b      	movs	r3, r7
 800f962:	0020      	movs	r0, r4
 800f964:	0029      	movs	r1, r5
 800f966:	f7f2 f8bb 	bl	8001ae0 <__aeabi_ddiv>
 800f96a:	f7f3 fb15 	bl	8002f98 <__aeabi_d2iz>
 800f96e:	9007      	str	r0, [sp, #28]
 800f970:	f7f3 fb48 	bl	8003004 <__aeabi_i2d>
 800f974:	0032      	movs	r2, r6
 800f976:	003b      	movs	r3, r7
 800f978:	f7f2 fcac 	bl	80022d4 <__aeabi_dmul>
 800f97c:	0002      	movs	r2, r0
 800f97e:	000b      	movs	r3, r1
 800f980:	0020      	movs	r0, r4
 800f982:	0029      	movs	r1, r5
 800f984:	f7f2 ff68 	bl	8002858 <__aeabi_dsub>
 800f988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f98a:	001a      	movs	r2, r3
 800f98c:	3201      	adds	r2, #1
 800f98e:	920a      	str	r2, [sp, #40]	; 0x28
 800f990:	9208      	str	r2, [sp, #32]
 800f992:	9a07      	ldr	r2, [sp, #28]
 800f994:	3230      	adds	r2, #48	; 0x30
 800f996:	701a      	strb	r2, [r3, #0]
 800f998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d14f      	bne.n	800fa3e <_dtoa_r+0x772>
 800f99e:	0002      	movs	r2, r0
 800f9a0:	000b      	movs	r3, r1
 800f9a2:	f7f1 fd3d 	bl	8001420 <__aeabi_dadd>
 800f9a6:	0032      	movs	r2, r6
 800f9a8:	003b      	movs	r3, r7
 800f9aa:	0004      	movs	r4, r0
 800f9ac:	000d      	movs	r5, r1
 800f9ae:	f7f0 fd67 	bl	8000480 <__aeabi_dcmpgt>
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d12e      	bne.n	800fa14 <_dtoa_r+0x748>
 800f9b6:	0032      	movs	r2, r6
 800f9b8:	003b      	movs	r3, r7
 800f9ba:	0020      	movs	r0, r4
 800f9bc:	0029      	movs	r1, r5
 800f9be:	f7f0 fd45 	bl	800044c <__aeabi_dcmpeq>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d002      	beq.n	800f9cc <_dtoa_r+0x700>
 800f9c6:	9b07      	ldr	r3, [sp, #28]
 800f9c8:	07de      	lsls	r6, r3, #31
 800f9ca:	d423      	bmi.n	800fa14 <_dtoa_r+0x748>
 800f9cc:	9905      	ldr	r1, [sp, #20]
 800f9ce:	9804      	ldr	r0, [sp, #16]
 800f9d0:	f000 fe86 	bl	80106e0 <_Bfree>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	9a08      	ldr	r2, [sp, #32]
 800f9d8:	7013      	strb	r3, [r2, #0]
 800f9da:	9b03      	ldr	r3, [sp, #12]
 800f9dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f9de:	3301      	adds	r3, #1
 800f9e0:	6013      	str	r3, [r2, #0]
 800f9e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d100      	bne.n	800f9ea <_dtoa_r+0x71e>
 800f9e8:	e4ba      	b.n	800f360 <_dtoa_r+0x94>
 800f9ea:	9a08      	ldr	r2, [sp, #32]
 800f9ec:	601a      	str	r2, [r3, #0]
 800f9ee:	e4b7      	b.n	800f360 <_dtoa_r+0x94>
 800f9f0:	08013f38 	.word	0x08013f38
 800f9f4:	08013f10 	.word	0x08013f10
 800f9f8:	3ff00000 	.word	0x3ff00000
 800f9fc:	40240000 	.word	0x40240000
 800fa00:	401c0000 	.word	0x401c0000
 800fa04:	fcc00000 	.word	0xfcc00000
 800fa08:	40140000 	.word	0x40140000
 800fa0c:	7cc00000 	.word	0x7cc00000
 800fa10:	3fe00000 	.word	0x3fe00000
 800fa14:	9b03      	ldr	r3, [sp, #12]
 800fa16:	930e      	str	r3, [sp, #56]	; 0x38
 800fa18:	9b08      	ldr	r3, [sp, #32]
 800fa1a:	9308      	str	r3, [sp, #32]
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	781a      	ldrb	r2, [r3, #0]
 800fa20:	2a39      	cmp	r2, #57	; 0x39
 800fa22:	d108      	bne.n	800fa36 <_dtoa_r+0x76a>
 800fa24:	9a06      	ldr	r2, [sp, #24]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d1f7      	bne.n	800fa1a <_dtoa_r+0x74e>
 800fa2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa2c:	9906      	ldr	r1, [sp, #24]
 800fa2e:	3201      	adds	r2, #1
 800fa30:	920e      	str	r2, [sp, #56]	; 0x38
 800fa32:	2230      	movs	r2, #48	; 0x30
 800fa34:	700a      	strb	r2, [r1, #0]
 800fa36:	781a      	ldrb	r2, [r3, #0]
 800fa38:	3201      	adds	r2, #1
 800fa3a:	701a      	strb	r2, [r3, #0]
 800fa3c:	e77c      	b.n	800f938 <_dtoa_r+0x66c>
 800fa3e:	2200      	movs	r2, #0
 800fa40:	4ba9      	ldr	r3, [pc, #676]	; (800fce8 <_dtoa_r+0xa1c>)
 800fa42:	f7f2 fc47 	bl	80022d4 <__aeabi_dmul>
 800fa46:	2200      	movs	r2, #0
 800fa48:	2300      	movs	r3, #0
 800fa4a:	0004      	movs	r4, r0
 800fa4c:	000d      	movs	r5, r1
 800fa4e:	f7f0 fcfd 	bl	800044c <__aeabi_dcmpeq>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d100      	bne.n	800fa58 <_dtoa_r+0x78c>
 800fa56:	e782      	b.n	800f95e <_dtoa_r+0x692>
 800fa58:	e7b8      	b.n	800f9cc <_dtoa_r+0x700>
 800fa5a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800fa5c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fa5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa60:	2f00      	cmp	r7, #0
 800fa62:	d012      	beq.n	800fa8a <_dtoa_r+0x7be>
 800fa64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fa66:	2a01      	cmp	r2, #1
 800fa68:	dc6e      	bgt.n	800fb48 <_dtoa_r+0x87c>
 800fa6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa6c:	2a00      	cmp	r2, #0
 800fa6e:	d065      	beq.n	800fb3c <_dtoa_r+0x870>
 800fa70:	4a9e      	ldr	r2, [pc, #632]	; (800fcec <_dtoa_r+0xa20>)
 800fa72:	189b      	adds	r3, r3, r2
 800fa74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa76:	2101      	movs	r1, #1
 800fa78:	18d2      	adds	r2, r2, r3
 800fa7a:	920a      	str	r2, [sp, #40]	; 0x28
 800fa7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa7e:	9804      	ldr	r0, [sp, #16]
 800fa80:	18d3      	adds	r3, r2, r3
 800fa82:	930c      	str	r3, [sp, #48]	; 0x30
 800fa84:	f000 ff28 	bl	80108d8 <__i2b>
 800fa88:	0007      	movs	r7, r0
 800fa8a:	2c00      	cmp	r4, #0
 800fa8c:	d00e      	beq.n	800faac <_dtoa_r+0x7e0>
 800fa8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	dd0b      	ble.n	800faac <_dtoa_r+0x7e0>
 800fa94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa96:	0023      	movs	r3, r4
 800fa98:	4294      	cmp	r4, r2
 800fa9a:	dd00      	ble.n	800fa9e <_dtoa_r+0x7d2>
 800fa9c:	0013      	movs	r3, r2
 800fa9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faa0:	1ae4      	subs	r4, r4, r3
 800faa2:	1ad2      	subs	r2, r2, r3
 800faa4:	920a      	str	r2, [sp, #40]	; 0x28
 800faa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	930c      	str	r3, [sp, #48]	; 0x30
 800faac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d01e      	beq.n	800faf0 <_dtoa_r+0x824>
 800fab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d05c      	beq.n	800fb72 <_dtoa_r+0x8a6>
 800fab8:	2d00      	cmp	r5, #0
 800faba:	dd10      	ble.n	800fade <_dtoa_r+0x812>
 800fabc:	0039      	movs	r1, r7
 800fabe:	002a      	movs	r2, r5
 800fac0:	9804      	ldr	r0, [sp, #16]
 800fac2:	f000 ffd1 	bl	8010a68 <__pow5mult>
 800fac6:	9a05      	ldr	r2, [sp, #20]
 800fac8:	0001      	movs	r1, r0
 800faca:	0007      	movs	r7, r0
 800facc:	9804      	ldr	r0, [sp, #16]
 800face:	f000 ff1b 	bl	8010908 <__multiply>
 800fad2:	0006      	movs	r6, r0
 800fad4:	9905      	ldr	r1, [sp, #20]
 800fad6:	9804      	ldr	r0, [sp, #16]
 800fad8:	f000 fe02 	bl	80106e0 <_Bfree>
 800fadc:	9605      	str	r6, [sp, #20]
 800fade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fae0:	1b5a      	subs	r2, r3, r5
 800fae2:	42ab      	cmp	r3, r5
 800fae4:	d004      	beq.n	800faf0 <_dtoa_r+0x824>
 800fae6:	9905      	ldr	r1, [sp, #20]
 800fae8:	9804      	ldr	r0, [sp, #16]
 800faea:	f000 ffbd 	bl	8010a68 <__pow5mult>
 800faee:	9005      	str	r0, [sp, #20]
 800faf0:	2101      	movs	r1, #1
 800faf2:	9804      	ldr	r0, [sp, #16]
 800faf4:	f000 fef0 	bl	80108d8 <__i2b>
 800faf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fafa:	0006      	movs	r6, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	dd3a      	ble.n	800fb76 <_dtoa_r+0x8aa>
 800fb00:	001a      	movs	r2, r3
 800fb02:	0001      	movs	r1, r0
 800fb04:	9804      	ldr	r0, [sp, #16]
 800fb06:	f000 ffaf 	bl	8010a68 <__pow5mult>
 800fb0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb0c:	0006      	movs	r6, r0
 800fb0e:	2500      	movs	r5, #0
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	dc38      	bgt.n	800fb86 <_dtoa_r+0x8ba>
 800fb14:	2500      	movs	r5, #0
 800fb16:	9b08      	ldr	r3, [sp, #32]
 800fb18:	42ab      	cmp	r3, r5
 800fb1a:	d130      	bne.n	800fb7e <_dtoa_r+0x8b2>
 800fb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb1e:	031b      	lsls	r3, r3, #12
 800fb20:	42ab      	cmp	r3, r5
 800fb22:	d12c      	bne.n	800fb7e <_dtoa_r+0x8b2>
 800fb24:	4b72      	ldr	r3, [pc, #456]	; (800fcf0 <_dtoa_r+0xa24>)
 800fb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb28:	4213      	tst	r3, r2
 800fb2a:	d028      	beq.n	800fb7e <_dtoa_r+0x8b2>
 800fb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb2e:	3501      	adds	r5, #1
 800fb30:	3301      	adds	r3, #1
 800fb32:	930a      	str	r3, [sp, #40]	; 0x28
 800fb34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb36:	3301      	adds	r3, #1
 800fb38:	930c      	str	r3, [sp, #48]	; 0x30
 800fb3a:	e020      	b.n	800fb7e <_dtoa_r+0x8b2>
 800fb3c:	2336      	movs	r3, #54	; 0x36
 800fb3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fb40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fb42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fb44:	1a9b      	subs	r3, r3, r2
 800fb46:	e795      	b.n	800fa74 <_dtoa_r+0x7a8>
 800fb48:	9b07      	ldr	r3, [sp, #28]
 800fb4a:	1e5d      	subs	r5, r3, #1
 800fb4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb4e:	42ab      	cmp	r3, r5
 800fb50:	db07      	blt.n	800fb62 <_dtoa_r+0x896>
 800fb52:	1b5d      	subs	r5, r3, r5
 800fb54:	9b07      	ldr	r3, [sp, #28]
 800fb56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	da8b      	bge.n	800fa74 <_dtoa_r+0x7a8>
 800fb5c:	1ae4      	subs	r4, r4, r3
 800fb5e:	2300      	movs	r3, #0
 800fb60:	e788      	b.n	800fa74 <_dtoa_r+0x7a8>
 800fb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fb66:	1aeb      	subs	r3, r5, r3
 800fb68:	18d3      	adds	r3, r2, r3
 800fb6a:	950d      	str	r5, [sp, #52]	; 0x34
 800fb6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fb6e:	2500      	movs	r5, #0
 800fb70:	e7f0      	b.n	800fb54 <_dtoa_r+0x888>
 800fb72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb74:	e7b7      	b.n	800fae6 <_dtoa_r+0x81a>
 800fb76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb78:	2500      	movs	r5, #0
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	ddca      	ble.n	800fb14 <_dtoa_r+0x848>
 800fb7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb80:	2001      	movs	r0, #1
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d008      	beq.n	800fb98 <_dtoa_r+0x8cc>
 800fb86:	6933      	ldr	r3, [r6, #16]
 800fb88:	3303      	adds	r3, #3
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	18f3      	adds	r3, r6, r3
 800fb8e:	6858      	ldr	r0, [r3, #4]
 800fb90:	f000 fe5a 	bl	8010848 <__hi0bits>
 800fb94:	2320      	movs	r3, #32
 800fb96:	1a18      	subs	r0, r3, r0
 800fb98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb9a:	1818      	adds	r0, r3, r0
 800fb9c:	0002      	movs	r2, r0
 800fb9e:	231f      	movs	r3, #31
 800fba0:	401a      	ands	r2, r3
 800fba2:	4218      	tst	r0, r3
 800fba4:	d047      	beq.n	800fc36 <_dtoa_r+0x96a>
 800fba6:	3301      	adds	r3, #1
 800fba8:	1a9b      	subs	r3, r3, r2
 800fbaa:	2b04      	cmp	r3, #4
 800fbac:	dd3f      	ble.n	800fc2e <_dtoa_r+0x962>
 800fbae:	231c      	movs	r3, #28
 800fbb0:	1a9b      	subs	r3, r3, r2
 800fbb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbb4:	18e4      	adds	r4, r4, r3
 800fbb6:	18d2      	adds	r2, r2, r3
 800fbb8:	920a      	str	r2, [sp, #40]	; 0x28
 800fbba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbbc:	18d3      	adds	r3, r2, r3
 800fbbe:	930c      	str	r3, [sp, #48]	; 0x30
 800fbc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	dd05      	ble.n	800fbd2 <_dtoa_r+0x906>
 800fbc6:	001a      	movs	r2, r3
 800fbc8:	9905      	ldr	r1, [sp, #20]
 800fbca:	9804      	ldr	r0, [sp, #16]
 800fbcc:	f000 ffa8 	bl	8010b20 <__lshift>
 800fbd0:	9005      	str	r0, [sp, #20]
 800fbd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	dd05      	ble.n	800fbe4 <_dtoa_r+0x918>
 800fbd8:	0031      	movs	r1, r6
 800fbda:	001a      	movs	r2, r3
 800fbdc:	9804      	ldr	r0, [sp, #16]
 800fbde:	f000 ff9f 	bl	8010b20 <__lshift>
 800fbe2:	0006      	movs	r6, r0
 800fbe4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d027      	beq.n	800fc3a <_dtoa_r+0x96e>
 800fbea:	0031      	movs	r1, r6
 800fbec:	9805      	ldr	r0, [sp, #20]
 800fbee:	f001 f805 	bl	8010bfc <__mcmp>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	da21      	bge.n	800fc3a <_dtoa_r+0x96e>
 800fbf6:	9b03      	ldr	r3, [sp, #12]
 800fbf8:	220a      	movs	r2, #10
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	9303      	str	r3, [sp, #12]
 800fbfe:	9905      	ldr	r1, [sp, #20]
 800fc00:	2300      	movs	r3, #0
 800fc02:	9804      	ldr	r0, [sp, #16]
 800fc04:	f000 fd90 	bl	8010728 <__multadd>
 800fc08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc0a:	9005      	str	r0, [sp, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d100      	bne.n	800fc12 <_dtoa_r+0x946>
 800fc10:	e15d      	b.n	800fece <_dtoa_r+0xc02>
 800fc12:	2300      	movs	r3, #0
 800fc14:	0039      	movs	r1, r7
 800fc16:	220a      	movs	r2, #10
 800fc18:	9804      	ldr	r0, [sp, #16]
 800fc1a:	f000 fd85 	bl	8010728 <__multadd>
 800fc1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc20:	0007      	movs	r7, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	dc49      	bgt.n	800fcba <_dtoa_r+0x9ee>
 800fc26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc28:	2b02      	cmp	r3, #2
 800fc2a:	dc0e      	bgt.n	800fc4a <_dtoa_r+0x97e>
 800fc2c:	e045      	b.n	800fcba <_dtoa_r+0x9ee>
 800fc2e:	2b04      	cmp	r3, #4
 800fc30:	d0c6      	beq.n	800fbc0 <_dtoa_r+0x8f4>
 800fc32:	331c      	adds	r3, #28
 800fc34:	e7bd      	b.n	800fbb2 <_dtoa_r+0x8e6>
 800fc36:	0013      	movs	r3, r2
 800fc38:	e7fb      	b.n	800fc32 <_dtoa_r+0x966>
 800fc3a:	9b07      	ldr	r3, [sp, #28]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	dc36      	bgt.n	800fcae <_dtoa_r+0x9e2>
 800fc40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	dd33      	ble.n	800fcae <_dtoa_r+0x9e2>
 800fc46:	9b07      	ldr	r3, [sp, #28]
 800fc48:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d10c      	bne.n	800fc6a <_dtoa_r+0x99e>
 800fc50:	0031      	movs	r1, r6
 800fc52:	2205      	movs	r2, #5
 800fc54:	9804      	ldr	r0, [sp, #16]
 800fc56:	f000 fd67 	bl	8010728 <__multadd>
 800fc5a:	0006      	movs	r6, r0
 800fc5c:	0001      	movs	r1, r0
 800fc5e:	9805      	ldr	r0, [sp, #20]
 800fc60:	f000 ffcc 	bl	8010bfc <__mcmp>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	dd00      	ble.n	800fc6a <_dtoa_r+0x99e>
 800fc68:	e59f      	b.n	800f7aa <_dtoa_r+0x4de>
 800fc6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fc6c:	43db      	mvns	r3, r3
 800fc6e:	9303      	str	r3, [sp, #12]
 800fc70:	9b06      	ldr	r3, [sp, #24]
 800fc72:	9308      	str	r3, [sp, #32]
 800fc74:	2500      	movs	r5, #0
 800fc76:	0031      	movs	r1, r6
 800fc78:	9804      	ldr	r0, [sp, #16]
 800fc7a:	f000 fd31 	bl	80106e0 <_Bfree>
 800fc7e:	2f00      	cmp	r7, #0
 800fc80:	d100      	bne.n	800fc84 <_dtoa_r+0x9b8>
 800fc82:	e6a3      	b.n	800f9cc <_dtoa_r+0x700>
 800fc84:	2d00      	cmp	r5, #0
 800fc86:	d005      	beq.n	800fc94 <_dtoa_r+0x9c8>
 800fc88:	42bd      	cmp	r5, r7
 800fc8a:	d003      	beq.n	800fc94 <_dtoa_r+0x9c8>
 800fc8c:	0029      	movs	r1, r5
 800fc8e:	9804      	ldr	r0, [sp, #16]
 800fc90:	f000 fd26 	bl	80106e0 <_Bfree>
 800fc94:	0039      	movs	r1, r7
 800fc96:	9804      	ldr	r0, [sp, #16]
 800fc98:	f000 fd22 	bl	80106e0 <_Bfree>
 800fc9c:	e696      	b.n	800f9cc <_dtoa_r+0x700>
 800fc9e:	2600      	movs	r6, #0
 800fca0:	0037      	movs	r7, r6
 800fca2:	e7e2      	b.n	800fc6a <_dtoa_r+0x99e>
 800fca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fca6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fca8:	9303      	str	r3, [sp, #12]
 800fcaa:	0037      	movs	r7, r6
 800fcac:	e57d      	b.n	800f7aa <_dtoa_r+0x4de>
 800fcae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d100      	bne.n	800fcb6 <_dtoa_r+0x9ea>
 800fcb4:	e0c3      	b.n	800fe3e <_dtoa_r+0xb72>
 800fcb6:	9b07      	ldr	r3, [sp, #28]
 800fcb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcba:	2c00      	cmp	r4, #0
 800fcbc:	dd05      	ble.n	800fcca <_dtoa_r+0x9fe>
 800fcbe:	0039      	movs	r1, r7
 800fcc0:	0022      	movs	r2, r4
 800fcc2:	9804      	ldr	r0, [sp, #16]
 800fcc4:	f000 ff2c 	bl	8010b20 <__lshift>
 800fcc8:	0007      	movs	r7, r0
 800fcca:	0038      	movs	r0, r7
 800fccc:	2d00      	cmp	r5, #0
 800fcce:	d024      	beq.n	800fd1a <_dtoa_r+0xa4e>
 800fcd0:	6879      	ldr	r1, [r7, #4]
 800fcd2:	9804      	ldr	r0, [sp, #16]
 800fcd4:	f000 fcc0 	bl	8010658 <_Balloc>
 800fcd8:	1e04      	subs	r4, r0, #0
 800fcda:	d111      	bne.n	800fd00 <_dtoa_r+0xa34>
 800fcdc:	0022      	movs	r2, r4
 800fcde:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <_dtoa_r+0xa28>)
 800fce0:	4805      	ldr	r0, [pc, #20]	; (800fcf8 <_dtoa_r+0xa2c>)
 800fce2:	4906      	ldr	r1, [pc, #24]	; (800fcfc <_dtoa_r+0xa30>)
 800fce4:	f7ff fb07 	bl	800f2f6 <_dtoa_r+0x2a>
 800fce8:	40240000 	.word	0x40240000
 800fcec:	00000433 	.word	0x00000433
 800fcf0:	7ff00000 	.word	0x7ff00000
 800fcf4:	08013e44 	.word	0x08013e44
 800fcf8:	08013dec 	.word	0x08013dec
 800fcfc:	000002ef 	.word	0x000002ef
 800fd00:	0039      	movs	r1, r7
 800fd02:	693a      	ldr	r2, [r7, #16]
 800fd04:	310c      	adds	r1, #12
 800fd06:	3202      	adds	r2, #2
 800fd08:	0092      	lsls	r2, r2, #2
 800fd0a:	300c      	adds	r0, #12
 800fd0c:	f7ff fa1c 	bl	800f148 <memcpy>
 800fd10:	2201      	movs	r2, #1
 800fd12:	0021      	movs	r1, r4
 800fd14:	9804      	ldr	r0, [sp, #16]
 800fd16:	f000 ff03 	bl	8010b20 <__lshift>
 800fd1a:	9b06      	ldr	r3, [sp, #24]
 800fd1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd1e:	9307      	str	r3, [sp, #28]
 800fd20:	3b01      	subs	r3, #1
 800fd22:	189b      	adds	r3, r3, r2
 800fd24:	2201      	movs	r2, #1
 800fd26:	003d      	movs	r5, r7
 800fd28:	0007      	movs	r7, r0
 800fd2a:	930e      	str	r3, [sp, #56]	; 0x38
 800fd2c:	9b08      	ldr	r3, [sp, #32]
 800fd2e:	4013      	ands	r3, r2
 800fd30:	930d      	str	r3, [sp, #52]	; 0x34
 800fd32:	0031      	movs	r1, r6
 800fd34:	9805      	ldr	r0, [sp, #20]
 800fd36:	f7ff fa39 	bl	800f1ac <quorem>
 800fd3a:	0029      	movs	r1, r5
 800fd3c:	0004      	movs	r4, r0
 800fd3e:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd40:	9805      	ldr	r0, [sp, #20]
 800fd42:	f000 ff5b 	bl	8010bfc <__mcmp>
 800fd46:	003a      	movs	r2, r7
 800fd48:	900c      	str	r0, [sp, #48]	; 0x30
 800fd4a:	0031      	movs	r1, r6
 800fd4c:	9804      	ldr	r0, [sp, #16]
 800fd4e:	f000 ff71 	bl	8010c34 <__mdiff>
 800fd52:	2201      	movs	r2, #1
 800fd54:	68c3      	ldr	r3, [r0, #12]
 800fd56:	3430      	adds	r4, #48	; 0x30
 800fd58:	9008      	str	r0, [sp, #32]
 800fd5a:	920a      	str	r2, [sp, #40]	; 0x28
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d104      	bne.n	800fd6a <_dtoa_r+0xa9e>
 800fd60:	0001      	movs	r1, r0
 800fd62:	9805      	ldr	r0, [sp, #20]
 800fd64:	f000 ff4a 	bl	8010bfc <__mcmp>
 800fd68:	900a      	str	r0, [sp, #40]	; 0x28
 800fd6a:	9908      	ldr	r1, [sp, #32]
 800fd6c:	9804      	ldr	r0, [sp, #16]
 800fd6e:	f000 fcb7 	bl	80106e0 <_Bfree>
 800fd72:	9b07      	ldr	r3, [sp, #28]
 800fd74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd76:	3301      	adds	r3, #1
 800fd78:	9308      	str	r3, [sp, #32]
 800fd7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd80:	4313      	orrs	r3, r2
 800fd82:	d109      	bne.n	800fd98 <_dtoa_r+0xacc>
 800fd84:	2c39      	cmp	r4, #57	; 0x39
 800fd86:	d022      	beq.n	800fdce <_dtoa_r+0xb02>
 800fd88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	dd01      	ble.n	800fd92 <_dtoa_r+0xac6>
 800fd8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fd90:	3431      	adds	r4, #49	; 0x31
 800fd92:	9b07      	ldr	r3, [sp, #28]
 800fd94:	701c      	strb	r4, [r3, #0]
 800fd96:	e76e      	b.n	800fc76 <_dtoa_r+0x9aa>
 800fd98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	db04      	blt.n	800fda8 <_dtoa_r+0xadc>
 800fd9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fda0:	4313      	orrs	r3, r2
 800fda2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fda4:	4313      	orrs	r3, r2
 800fda6:	d11e      	bne.n	800fde6 <_dtoa_r+0xb1a>
 800fda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	ddf1      	ble.n	800fd92 <_dtoa_r+0xac6>
 800fdae:	9905      	ldr	r1, [sp, #20]
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	9804      	ldr	r0, [sp, #16]
 800fdb4:	f000 feb4 	bl	8010b20 <__lshift>
 800fdb8:	0031      	movs	r1, r6
 800fdba:	9005      	str	r0, [sp, #20]
 800fdbc:	f000 ff1e 	bl	8010bfc <__mcmp>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	dc02      	bgt.n	800fdca <_dtoa_r+0xafe>
 800fdc4:	d1e5      	bne.n	800fd92 <_dtoa_r+0xac6>
 800fdc6:	07e3      	lsls	r3, r4, #31
 800fdc8:	d5e3      	bpl.n	800fd92 <_dtoa_r+0xac6>
 800fdca:	2c39      	cmp	r4, #57	; 0x39
 800fdcc:	d1df      	bne.n	800fd8e <_dtoa_r+0xac2>
 800fdce:	2339      	movs	r3, #57	; 0x39
 800fdd0:	9a07      	ldr	r2, [sp, #28]
 800fdd2:	7013      	strb	r3, [r2, #0]
 800fdd4:	9b08      	ldr	r3, [sp, #32]
 800fdd6:	9308      	str	r3, [sp, #32]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	781a      	ldrb	r2, [r3, #0]
 800fddc:	2a39      	cmp	r2, #57	; 0x39
 800fdde:	d063      	beq.n	800fea8 <_dtoa_r+0xbdc>
 800fde0:	3201      	adds	r2, #1
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	e747      	b.n	800fc76 <_dtoa_r+0x9aa>
 800fde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	dd03      	ble.n	800fdf4 <_dtoa_r+0xb28>
 800fdec:	2c39      	cmp	r4, #57	; 0x39
 800fdee:	d0ee      	beq.n	800fdce <_dtoa_r+0xb02>
 800fdf0:	3401      	adds	r4, #1
 800fdf2:	e7ce      	b.n	800fd92 <_dtoa_r+0xac6>
 800fdf4:	9b07      	ldr	r3, [sp, #28]
 800fdf6:	9a07      	ldr	r2, [sp, #28]
 800fdf8:	701c      	strb	r4, [r3, #0]
 800fdfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d03e      	beq.n	800fe7e <_dtoa_r+0xbb2>
 800fe00:	2300      	movs	r3, #0
 800fe02:	220a      	movs	r2, #10
 800fe04:	9905      	ldr	r1, [sp, #20]
 800fe06:	9804      	ldr	r0, [sp, #16]
 800fe08:	f000 fc8e 	bl	8010728 <__multadd>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9005      	str	r0, [sp, #20]
 800fe10:	220a      	movs	r2, #10
 800fe12:	0029      	movs	r1, r5
 800fe14:	9804      	ldr	r0, [sp, #16]
 800fe16:	42bd      	cmp	r5, r7
 800fe18:	d106      	bne.n	800fe28 <_dtoa_r+0xb5c>
 800fe1a:	f000 fc85 	bl	8010728 <__multadd>
 800fe1e:	0005      	movs	r5, r0
 800fe20:	0007      	movs	r7, r0
 800fe22:	9b08      	ldr	r3, [sp, #32]
 800fe24:	9307      	str	r3, [sp, #28]
 800fe26:	e784      	b.n	800fd32 <_dtoa_r+0xa66>
 800fe28:	f000 fc7e 	bl	8010728 <__multadd>
 800fe2c:	0039      	movs	r1, r7
 800fe2e:	0005      	movs	r5, r0
 800fe30:	2300      	movs	r3, #0
 800fe32:	220a      	movs	r2, #10
 800fe34:	9804      	ldr	r0, [sp, #16]
 800fe36:	f000 fc77 	bl	8010728 <__multadd>
 800fe3a:	0007      	movs	r7, r0
 800fe3c:	e7f1      	b.n	800fe22 <_dtoa_r+0xb56>
 800fe3e:	9b07      	ldr	r3, [sp, #28]
 800fe40:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe42:	2500      	movs	r5, #0
 800fe44:	0031      	movs	r1, r6
 800fe46:	9805      	ldr	r0, [sp, #20]
 800fe48:	f7ff f9b0 	bl	800f1ac <quorem>
 800fe4c:	9b06      	ldr	r3, [sp, #24]
 800fe4e:	3030      	adds	r0, #48	; 0x30
 800fe50:	5558      	strb	r0, [r3, r5]
 800fe52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe54:	3501      	adds	r5, #1
 800fe56:	0004      	movs	r4, r0
 800fe58:	42ab      	cmp	r3, r5
 800fe5a:	dd07      	ble.n	800fe6c <_dtoa_r+0xba0>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	220a      	movs	r2, #10
 800fe60:	9905      	ldr	r1, [sp, #20]
 800fe62:	9804      	ldr	r0, [sp, #16]
 800fe64:	f000 fc60 	bl	8010728 <__multadd>
 800fe68:	9005      	str	r0, [sp, #20]
 800fe6a:	e7eb      	b.n	800fe44 <_dtoa_r+0xb78>
 800fe6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe6e:	2301      	movs	r3, #1
 800fe70:	2a00      	cmp	r2, #0
 800fe72:	dd00      	ble.n	800fe76 <_dtoa_r+0xbaa>
 800fe74:	0013      	movs	r3, r2
 800fe76:	2500      	movs	r5, #0
 800fe78:	9a06      	ldr	r2, [sp, #24]
 800fe7a:	18d3      	adds	r3, r2, r3
 800fe7c:	9308      	str	r3, [sp, #32]
 800fe7e:	9905      	ldr	r1, [sp, #20]
 800fe80:	2201      	movs	r2, #1
 800fe82:	9804      	ldr	r0, [sp, #16]
 800fe84:	f000 fe4c 	bl	8010b20 <__lshift>
 800fe88:	0031      	movs	r1, r6
 800fe8a:	9005      	str	r0, [sp, #20]
 800fe8c:	f000 feb6 	bl	8010bfc <__mcmp>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	dc9f      	bgt.n	800fdd4 <_dtoa_r+0xb08>
 800fe94:	d101      	bne.n	800fe9a <_dtoa_r+0xbce>
 800fe96:	07e4      	lsls	r4, r4, #31
 800fe98:	d49c      	bmi.n	800fdd4 <_dtoa_r+0xb08>
 800fe9a:	9b08      	ldr	r3, [sp, #32]
 800fe9c:	9308      	str	r3, [sp, #32]
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	781a      	ldrb	r2, [r3, #0]
 800fea2:	2a30      	cmp	r2, #48	; 0x30
 800fea4:	d0fa      	beq.n	800fe9c <_dtoa_r+0xbd0>
 800fea6:	e6e6      	b.n	800fc76 <_dtoa_r+0x9aa>
 800fea8:	9a06      	ldr	r2, [sp, #24]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d193      	bne.n	800fdd6 <_dtoa_r+0xb0a>
 800feae:	9b03      	ldr	r3, [sp, #12]
 800feb0:	3301      	adds	r3, #1
 800feb2:	9303      	str	r3, [sp, #12]
 800feb4:	2331      	movs	r3, #49	; 0x31
 800feb6:	7013      	strb	r3, [r2, #0]
 800feb8:	e6dd      	b.n	800fc76 <_dtoa_r+0x9aa>
 800feba:	4b09      	ldr	r3, [pc, #36]	; (800fee0 <_dtoa_r+0xc14>)
 800febc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800febe:	9306      	str	r3, [sp, #24]
 800fec0:	4b08      	ldr	r3, [pc, #32]	; (800fee4 <_dtoa_r+0xc18>)
 800fec2:	2a00      	cmp	r2, #0
 800fec4:	d001      	beq.n	800feca <_dtoa_r+0xbfe>
 800fec6:	f7ff fa49 	bl	800f35c <_dtoa_r+0x90>
 800feca:	f7ff fa49 	bl	800f360 <_dtoa_r+0x94>
 800fece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	dcb6      	bgt.n	800fe42 <_dtoa_r+0xb76>
 800fed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	dd00      	ble.n	800fedc <_dtoa_r+0xc10>
 800feda:	e6b6      	b.n	800fc4a <_dtoa_r+0x97e>
 800fedc:	e7b1      	b.n	800fe42 <_dtoa_r+0xb76>
 800fede:	46c0      	nop			; (mov r8, r8)
 800fee0:	08013ddf 	.word	0x08013ddf
 800fee4:	08013de7 	.word	0x08013de7

0800fee8 <_free_r>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	0005      	movs	r5, r0
 800feec:	2900      	cmp	r1, #0
 800feee:	d010      	beq.n	800ff12 <_free_r+0x2a>
 800fef0:	1f0c      	subs	r4, r1, #4
 800fef2:	6823      	ldr	r3, [r4, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	da00      	bge.n	800fefa <_free_r+0x12>
 800fef8:	18e4      	adds	r4, r4, r3
 800fefa:	0028      	movs	r0, r5
 800fefc:	f7fd f88a 	bl	800d014 <__malloc_lock>
 800ff00:	4a1d      	ldr	r2, [pc, #116]	; (800ff78 <_free_r+0x90>)
 800ff02:	6813      	ldr	r3, [r2, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d105      	bne.n	800ff14 <_free_r+0x2c>
 800ff08:	6063      	str	r3, [r4, #4]
 800ff0a:	6014      	str	r4, [r2, #0]
 800ff0c:	0028      	movs	r0, r5
 800ff0e:	f7fd f889 	bl	800d024 <__malloc_unlock>
 800ff12:	bd70      	pop	{r4, r5, r6, pc}
 800ff14:	42a3      	cmp	r3, r4
 800ff16:	d908      	bls.n	800ff2a <_free_r+0x42>
 800ff18:	6820      	ldr	r0, [r4, #0]
 800ff1a:	1821      	adds	r1, r4, r0
 800ff1c:	428b      	cmp	r3, r1
 800ff1e:	d1f3      	bne.n	800ff08 <_free_r+0x20>
 800ff20:	6819      	ldr	r1, [r3, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	1809      	adds	r1, r1, r0
 800ff26:	6021      	str	r1, [r4, #0]
 800ff28:	e7ee      	b.n	800ff08 <_free_r+0x20>
 800ff2a:	001a      	movs	r2, r3
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <_free_r+0x4e>
 800ff32:	42a3      	cmp	r3, r4
 800ff34:	d9f9      	bls.n	800ff2a <_free_r+0x42>
 800ff36:	6811      	ldr	r1, [r2, #0]
 800ff38:	1850      	adds	r0, r2, r1
 800ff3a:	42a0      	cmp	r0, r4
 800ff3c:	d10b      	bne.n	800ff56 <_free_r+0x6e>
 800ff3e:	6820      	ldr	r0, [r4, #0]
 800ff40:	1809      	adds	r1, r1, r0
 800ff42:	1850      	adds	r0, r2, r1
 800ff44:	6011      	str	r1, [r2, #0]
 800ff46:	4283      	cmp	r3, r0
 800ff48:	d1e0      	bne.n	800ff0c <_free_r+0x24>
 800ff4a:	6818      	ldr	r0, [r3, #0]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	1841      	adds	r1, r0, r1
 800ff50:	6011      	str	r1, [r2, #0]
 800ff52:	6053      	str	r3, [r2, #4]
 800ff54:	e7da      	b.n	800ff0c <_free_r+0x24>
 800ff56:	42a0      	cmp	r0, r4
 800ff58:	d902      	bls.n	800ff60 <_free_r+0x78>
 800ff5a:	230c      	movs	r3, #12
 800ff5c:	602b      	str	r3, [r5, #0]
 800ff5e:	e7d5      	b.n	800ff0c <_free_r+0x24>
 800ff60:	6820      	ldr	r0, [r4, #0]
 800ff62:	1821      	adds	r1, r4, r0
 800ff64:	428b      	cmp	r3, r1
 800ff66:	d103      	bne.n	800ff70 <_free_r+0x88>
 800ff68:	6819      	ldr	r1, [r3, #0]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	1809      	adds	r1, r1, r0
 800ff6e:	6021      	str	r1, [r4, #0]
 800ff70:	6063      	str	r3, [r4, #4]
 800ff72:	6054      	str	r4, [r2, #4]
 800ff74:	e7ca      	b.n	800ff0c <_free_r+0x24>
 800ff76:	46c0      	nop			; (mov r8, r8)
 800ff78:	200066f4 	.word	0x200066f4

0800ff7c <rshift>:
 800ff7c:	0002      	movs	r2, r0
 800ff7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff80:	6904      	ldr	r4, [r0, #16]
 800ff82:	114b      	asrs	r3, r1, #5
 800ff84:	b085      	sub	sp, #20
 800ff86:	3214      	adds	r2, #20
 800ff88:	9302      	str	r3, [sp, #8]
 800ff8a:	114d      	asrs	r5, r1, #5
 800ff8c:	0013      	movs	r3, r2
 800ff8e:	42ac      	cmp	r4, r5
 800ff90:	dd32      	ble.n	800fff8 <rshift+0x7c>
 800ff92:	261f      	movs	r6, #31
 800ff94:	000f      	movs	r7, r1
 800ff96:	114b      	asrs	r3, r1, #5
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	00a5      	lsls	r5, r4, #2
 800ff9c:	18d3      	adds	r3, r2, r3
 800ff9e:	4037      	ands	r7, r6
 800ffa0:	1955      	adds	r5, r2, r5
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	9701      	str	r7, [sp, #4]
 800ffa6:	4231      	tst	r1, r6
 800ffa8:	d10d      	bne.n	800ffc6 <rshift+0x4a>
 800ffaa:	0016      	movs	r6, r2
 800ffac:	0019      	movs	r1, r3
 800ffae:	428d      	cmp	r5, r1
 800ffb0:	d836      	bhi.n	8010020 <rshift+0xa4>
 800ffb2:	9900      	ldr	r1, [sp, #0]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	3903      	subs	r1, #3
 800ffb8:	428d      	cmp	r5, r1
 800ffba:	d302      	bcc.n	800ffc2 <rshift+0x46>
 800ffbc:	9b02      	ldr	r3, [sp, #8]
 800ffbe:	1ae4      	subs	r4, r4, r3
 800ffc0:	00a3      	lsls	r3, r4, #2
 800ffc2:	18d3      	adds	r3, r2, r3
 800ffc4:	e018      	b.n	800fff8 <rshift+0x7c>
 800ffc6:	2120      	movs	r1, #32
 800ffc8:	9e01      	ldr	r6, [sp, #4]
 800ffca:	9f01      	ldr	r7, [sp, #4]
 800ffcc:	1b89      	subs	r1, r1, r6
 800ffce:	9e00      	ldr	r6, [sp, #0]
 800ffd0:	9103      	str	r1, [sp, #12]
 800ffd2:	ce02      	ldmia	r6!, {r1}
 800ffd4:	4694      	mov	ip, r2
 800ffd6:	40f9      	lsrs	r1, r7
 800ffd8:	42b5      	cmp	r5, r6
 800ffda:	d816      	bhi.n	801000a <rshift+0x8e>
 800ffdc:	9e00      	ldr	r6, [sp, #0]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	3601      	adds	r6, #1
 800ffe2:	42b5      	cmp	r5, r6
 800ffe4:	d303      	bcc.n	800ffee <rshift+0x72>
 800ffe6:	9b02      	ldr	r3, [sp, #8]
 800ffe8:	1ae3      	subs	r3, r4, r3
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	3b04      	subs	r3, #4
 800ffee:	18d3      	adds	r3, r2, r3
 800fff0:	6019      	str	r1, [r3, #0]
 800fff2:	2900      	cmp	r1, #0
 800fff4:	d000      	beq.n	800fff8 <rshift+0x7c>
 800fff6:	3304      	adds	r3, #4
 800fff8:	1a99      	subs	r1, r3, r2
 800fffa:	1089      	asrs	r1, r1, #2
 800fffc:	6101      	str	r1, [r0, #16]
 800fffe:	4293      	cmp	r3, r2
 8010000:	d101      	bne.n	8010006 <rshift+0x8a>
 8010002:	2300      	movs	r3, #0
 8010004:	6143      	str	r3, [r0, #20]
 8010006:	b005      	add	sp, #20
 8010008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801000a:	6837      	ldr	r7, [r6, #0]
 801000c:	9b03      	ldr	r3, [sp, #12]
 801000e:	409f      	lsls	r7, r3
 8010010:	430f      	orrs	r7, r1
 8010012:	4661      	mov	r1, ip
 8010014:	c180      	stmia	r1!, {r7}
 8010016:	468c      	mov	ip, r1
 8010018:	9b01      	ldr	r3, [sp, #4]
 801001a:	ce02      	ldmia	r6!, {r1}
 801001c:	40d9      	lsrs	r1, r3
 801001e:	e7db      	b.n	800ffd8 <rshift+0x5c>
 8010020:	c980      	ldmia	r1!, {r7}
 8010022:	c680      	stmia	r6!, {r7}
 8010024:	e7c3      	b.n	800ffae <rshift+0x32>

08010026 <__hexdig_fun>:
 8010026:	0002      	movs	r2, r0
 8010028:	3a30      	subs	r2, #48	; 0x30
 801002a:	0003      	movs	r3, r0
 801002c:	2a09      	cmp	r2, #9
 801002e:	d802      	bhi.n	8010036 <__hexdig_fun+0x10>
 8010030:	3b20      	subs	r3, #32
 8010032:	b2d8      	uxtb	r0, r3
 8010034:	4770      	bx	lr
 8010036:	0002      	movs	r2, r0
 8010038:	3a61      	subs	r2, #97	; 0x61
 801003a:	2a05      	cmp	r2, #5
 801003c:	d801      	bhi.n	8010042 <__hexdig_fun+0x1c>
 801003e:	3b47      	subs	r3, #71	; 0x47
 8010040:	e7f7      	b.n	8010032 <__hexdig_fun+0xc>
 8010042:	001a      	movs	r2, r3
 8010044:	3a41      	subs	r2, #65	; 0x41
 8010046:	2000      	movs	r0, #0
 8010048:	2a05      	cmp	r2, #5
 801004a:	d8f3      	bhi.n	8010034 <__hexdig_fun+0xe>
 801004c:	3b27      	subs	r3, #39	; 0x27
 801004e:	e7f0      	b.n	8010032 <__hexdig_fun+0xc>

08010050 <__gethex>:
 8010050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010052:	b089      	sub	sp, #36	; 0x24
 8010054:	9307      	str	r3, [sp, #28]
 8010056:	2302      	movs	r3, #2
 8010058:	9201      	str	r2, [sp, #4]
 801005a:	680a      	ldr	r2, [r1, #0]
 801005c:	425b      	negs	r3, r3
 801005e:	9003      	str	r0, [sp, #12]
 8010060:	9106      	str	r1, [sp, #24]
 8010062:	1c96      	adds	r6, r2, #2
 8010064:	1a9b      	subs	r3, r3, r2
 8010066:	199a      	adds	r2, r3, r6
 8010068:	9600      	str	r6, [sp, #0]
 801006a:	9205      	str	r2, [sp, #20]
 801006c:	9a00      	ldr	r2, [sp, #0]
 801006e:	3601      	adds	r6, #1
 8010070:	7810      	ldrb	r0, [r2, #0]
 8010072:	2830      	cmp	r0, #48	; 0x30
 8010074:	d0f7      	beq.n	8010066 <__gethex+0x16>
 8010076:	f7ff ffd6 	bl	8010026 <__hexdig_fun>
 801007a:	2300      	movs	r3, #0
 801007c:	001d      	movs	r5, r3
 801007e:	9302      	str	r3, [sp, #8]
 8010080:	4298      	cmp	r0, r3
 8010082:	d11d      	bne.n	80100c0 <__gethex+0x70>
 8010084:	2201      	movs	r2, #1
 8010086:	49a6      	ldr	r1, [pc, #664]	; (8010320 <__gethex+0x2d0>)
 8010088:	9800      	ldr	r0, [sp, #0]
 801008a:	f7fe feae 	bl	800edea <strncmp>
 801008e:	0007      	movs	r7, r0
 8010090:	42a8      	cmp	r0, r5
 8010092:	d169      	bne.n	8010168 <__gethex+0x118>
 8010094:	9b00      	ldr	r3, [sp, #0]
 8010096:	0034      	movs	r4, r6
 8010098:	7858      	ldrb	r0, [r3, #1]
 801009a:	f7ff ffc4 	bl	8010026 <__hexdig_fun>
 801009e:	2301      	movs	r3, #1
 80100a0:	9302      	str	r3, [sp, #8]
 80100a2:	42a8      	cmp	r0, r5
 80100a4:	d02f      	beq.n	8010106 <__gethex+0xb6>
 80100a6:	9600      	str	r6, [sp, #0]
 80100a8:	9b00      	ldr	r3, [sp, #0]
 80100aa:	7818      	ldrb	r0, [r3, #0]
 80100ac:	2830      	cmp	r0, #48	; 0x30
 80100ae:	d009      	beq.n	80100c4 <__gethex+0x74>
 80100b0:	f7ff ffb9 	bl	8010026 <__hexdig_fun>
 80100b4:	4242      	negs	r2, r0
 80100b6:	4142      	adcs	r2, r0
 80100b8:	2301      	movs	r3, #1
 80100ba:	0035      	movs	r5, r6
 80100bc:	9202      	str	r2, [sp, #8]
 80100be:	9305      	str	r3, [sp, #20]
 80100c0:	9c00      	ldr	r4, [sp, #0]
 80100c2:	e004      	b.n	80100ce <__gethex+0x7e>
 80100c4:	9b00      	ldr	r3, [sp, #0]
 80100c6:	3301      	adds	r3, #1
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	e7ed      	b.n	80100a8 <__gethex+0x58>
 80100cc:	3401      	adds	r4, #1
 80100ce:	7820      	ldrb	r0, [r4, #0]
 80100d0:	f7ff ffa9 	bl	8010026 <__hexdig_fun>
 80100d4:	1e07      	subs	r7, r0, #0
 80100d6:	d1f9      	bne.n	80100cc <__gethex+0x7c>
 80100d8:	2201      	movs	r2, #1
 80100da:	0020      	movs	r0, r4
 80100dc:	4990      	ldr	r1, [pc, #576]	; (8010320 <__gethex+0x2d0>)
 80100de:	f7fe fe84 	bl	800edea <strncmp>
 80100e2:	2800      	cmp	r0, #0
 80100e4:	d10d      	bne.n	8010102 <__gethex+0xb2>
 80100e6:	2d00      	cmp	r5, #0
 80100e8:	d106      	bne.n	80100f8 <__gethex+0xa8>
 80100ea:	3401      	adds	r4, #1
 80100ec:	0025      	movs	r5, r4
 80100ee:	7820      	ldrb	r0, [r4, #0]
 80100f0:	f7ff ff99 	bl	8010026 <__hexdig_fun>
 80100f4:	2800      	cmp	r0, #0
 80100f6:	d102      	bne.n	80100fe <__gethex+0xae>
 80100f8:	1b2d      	subs	r5, r5, r4
 80100fa:	00af      	lsls	r7, r5, #2
 80100fc:	e003      	b.n	8010106 <__gethex+0xb6>
 80100fe:	3401      	adds	r4, #1
 8010100:	e7f5      	b.n	80100ee <__gethex+0x9e>
 8010102:	2d00      	cmp	r5, #0
 8010104:	d1f8      	bne.n	80100f8 <__gethex+0xa8>
 8010106:	2220      	movs	r2, #32
 8010108:	7823      	ldrb	r3, [r4, #0]
 801010a:	0026      	movs	r6, r4
 801010c:	4393      	bics	r3, r2
 801010e:	2b50      	cmp	r3, #80	; 0x50
 8010110:	d11d      	bne.n	801014e <__gethex+0xfe>
 8010112:	7863      	ldrb	r3, [r4, #1]
 8010114:	2b2b      	cmp	r3, #43	; 0x2b
 8010116:	d02c      	beq.n	8010172 <__gethex+0x122>
 8010118:	2b2d      	cmp	r3, #45	; 0x2d
 801011a:	d02e      	beq.n	801017a <__gethex+0x12a>
 801011c:	2300      	movs	r3, #0
 801011e:	1c66      	adds	r6, r4, #1
 8010120:	9304      	str	r3, [sp, #16]
 8010122:	7830      	ldrb	r0, [r6, #0]
 8010124:	f7ff ff7f 	bl	8010026 <__hexdig_fun>
 8010128:	1e43      	subs	r3, r0, #1
 801012a:	b2db      	uxtb	r3, r3
 801012c:	2b18      	cmp	r3, #24
 801012e:	d82b      	bhi.n	8010188 <__gethex+0x138>
 8010130:	3810      	subs	r0, #16
 8010132:	0005      	movs	r5, r0
 8010134:	7870      	ldrb	r0, [r6, #1]
 8010136:	f7ff ff76 	bl	8010026 <__hexdig_fun>
 801013a:	1e43      	subs	r3, r0, #1
 801013c:	b2db      	uxtb	r3, r3
 801013e:	3601      	adds	r6, #1
 8010140:	2b18      	cmp	r3, #24
 8010142:	d91c      	bls.n	801017e <__gethex+0x12e>
 8010144:	9b04      	ldr	r3, [sp, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d000      	beq.n	801014c <__gethex+0xfc>
 801014a:	426d      	negs	r5, r5
 801014c:	197f      	adds	r7, r7, r5
 801014e:	9b06      	ldr	r3, [sp, #24]
 8010150:	601e      	str	r6, [r3, #0]
 8010152:	9b02      	ldr	r3, [sp, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d019      	beq.n	801018c <__gethex+0x13c>
 8010158:	2600      	movs	r6, #0
 801015a:	9b05      	ldr	r3, [sp, #20]
 801015c:	42b3      	cmp	r3, r6
 801015e:	d100      	bne.n	8010162 <__gethex+0x112>
 8010160:	3606      	adds	r6, #6
 8010162:	0030      	movs	r0, r6
 8010164:	b009      	add	sp, #36	; 0x24
 8010166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010168:	2301      	movs	r3, #1
 801016a:	2700      	movs	r7, #0
 801016c:	9c00      	ldr	r4, [sp, #0]
 801016e:	9302      	str	r3, [sp, #8]
 8010170:	e7c9      	b.n	8010106 <__gethex+0xb6>
 8010172:	2300      	movs	r3, #0
 8010174:	9304      	str	r3, [sp, #16]
 8010176:	1ca6      	adds	r6, r4, #2
 8010178:	e7d3      	b.n	8010122 <__gethex+0xd2>
 801017a:	2301      	movs	r3, #1
 801017c:	e7fa      	b.n	8010174 <__gethex+0x124>
 801017e:	230a      	movs	r3, #10
 8010180:	435d      	muls	r5, r3
 8010182:	182d      	adds	r5, r5, r0
 8010184:	3d10      	subs	r5, #16
 8010186:	e7d5      	b.n	8010134 <__gethex+0xe4>
 8010188:	0026      	movs	r6, r4
 801018a:	e7e0      	b.n	801014e <__gethex+0xfe>
 801018c:	9b00      	ldr	r3, [sp, #0]
 801018e:	9902      	ldr	r1, [sp, #8]
 8010190:	1ae3      	subs	r3, r4, r3
 8010192:	3b01      	subs	r3, #1
 8010194:	2b07      	cmp	r3, #7
 8010196:	dc0a      	bgt.n	80101ae <__gethex+0x15e>
 8010198:	9803      	ldr	r0, [sp, #12]
 801019a:	f000 fa5d 	bl	8010658 <_Balloc>
 801019e:	1e05      	subs	r5, r0, #0
 80101a0:	d108      	bne.n	80101b4 <__gethex+0x164>
 80101a2:	002a      	movs	r2, r5
 80101a4:	21e4      	movs	r1, #228	; 0xe4
 80101a6:	4b5f      	ldr	r3, [pc, #380]	; (8010324 <__gethex+0x2d4>)
 80101a8:	485f      	ldr	r0, [pc, #380]	; (8010328 <__gethex+0x2d8>)
 80101aa:	f7fe ffe1 	bl	800f170 <__assert_func>
 80101ae:	3101      	adds	r1, #1
 80101b0:	105b      	asrs	r3, r3, #1
 80101b2:	e7ef      	b.n	8010194 <__gethex+0x144>
 80101b4:	0003      	movs	r3, r0
 80101b6:	3314      	adds	r3, #20
 80101b8:	9302      	str	r3, [sp, #8]
 80101ba:	9305      	str	r3, [sp, #20]
 80101bc:	2300      	movs	r3, #0
 80101be:	001e      	movs	r6, r3
 80101c0:	9304      	str	r3, [sp, #16]
 80101c2:	9b00      	ldr	r3, [sp, #0]
 80101c4:	42a3      	cmp	r3, r4
 80101c6:	d33f      	bcc.n	8010248 <__gethex+0x1f8>
 80101c8:	9c05      	ldr	r4, [sp, #20]
 80101ca:	9b02      	ldr	r3, [sp, #8]
 80101cc:	c440      	stmia	r4!, {r6}
 80101ce:	1ae4      	subs	r4, r4, r3
 80101d0:	10a4      	asrs	r4, r4, #2
 80101d2:	0030      	movs	r0, r6
 80101d4:	612c      	str	r4, [r5, #16]
 80101d6:	f000 fb37 	bl	8010848 <__hi0bits>
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	0164      	lsls	r4, r4, #5
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	1a26      	subs	r6, r4, r0
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	429e      	cmp	r6, r3
 80101e6:	dd51      	ble.n	801028c <__gethex+0x23c>
 80101e8:	1af6      	subs	r6, r6, r3
 80101ea:	0031      	movs	r1, r6
 80101ec:	0028      	movs	r0, r5
 80101ee:	f000 fecb 	bl	8010f88 <__any_on>
 80101f2:	1e04      	subs	r4, r0, #0
 80101f4:	d016      	beq.n	8010224 <__gethex+0x1d4>
 80101f6:	2401      	movs	r4, #1
 80101f8:	231f      	movs	r3, #31
 80101fa:	0020      	movs	r0, r4
 80101fc:	1e72      	subs	r2, r6, #1
 80101fe:	4013      	ands	r3, r2
 8010200:	4098      	lsls	r0, r3
 8010202:	0003      	movs	r3, r0
 8010204:	1151      	asrs	r1, r2, #5
 8010206:	9802      	ldr	r0, [sp, #8]
 8010208:	0089      	lsls	r1, r1, #2
 801020a:	5809      	ldr	r1, [r1, r0]
 801020c:	4219      	tst	r1, r3
 801020e:	d009      	beq.n	8010224 <__gethex+0x1d4>
 8010210:	42a2      	cmp	r2, r4
 8010212:	dd06      	ble.n	8010222 <__gethex+0x1d2>
 8010214:	0028      	movs	r0, r5
 8010216:	1eb1      	subs	r1, r6, #2
 8010218:	f000 feb6 	bl	8010f88 <__any_on>
 801021c:	3402      	adds	r4, #2
 801021e:	2800      	cmp	r0, #0
 8010220:	d100      	bne.n	8010224 <__gethex+0x1d4>
 8010222:	2402      	movs	r4, #2
 8010224:	0031      	movs	r1, r6
 8010226:	0028      	movs	r0, r5
 8010228:	f7ff fea8 	bl	800ff7c <rshift>
 801022c:	19bf      	adds	r7, r7, r6
 801022e:	9b01      	ldr	r3, [sp, #4]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	42bb      	cmp	r3, r7
 8010234:	da3a      	bge.n	80102ac <__gethex+0x25c>
 8010236:	0029      	movs	r1, r5
 8010238:	9803      	ldr	r0, [sp, #12]
 801023a:	f000 fa51 	bl	80106e0 <_Bfree>
 801023e:	2300      	movs	r3, #0
 8010240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010242:	26a3      	movs	r6, #163	; 0xa3
 8010244:	6013      	str	r3, [r2, #0]
 8010246:	e78c      	b.n	8010162 <__gethex+0x112>
 8010248:	3c01      	subs	r4, #1
 801024a:	7823      	ldrb	r3, [r4, #0]
 801024c:	2b2e      	cmp	r3, #46	; 0x2e
 801024e:	d012      	beq.n	8010276 <__gethex+0x226>
 8010250:	9b04      	ldr	r3, [sp, #16]
 8010252:	2b20      	cmp	r3, #32
 8010254:	d104      	bne.n	8010260 <__gethex+0x210>
 8010256:	9b05      	ldr	r3, [sp, #20]
 8010258:	c340      	stmia	r3!, {r6}
 801025a:	2600      	movs	r6, #0
 801025c:	9305      	str	r3, [sp, #20]
 801025e:	9604      	str	r6, [sp, #16]
 8010260:	7820      	ldrb	r0, [r4, #0]
 8010262:	f7ff fee0 	bl	8010026 <__hexdig_fun>
 8010266:	230f      	movs	r3, #15
 8010268:	4018      	ands	r0, r3
 801026a:	9b04      	ldr	r3, [sp, #16]
 801026c:	4098      	lsls	r0, r3
 801026e:	3304      	adds	r3, #4
 8010270:	4306      	orrs	r6, r0
 8010272:	9304      	str	r3, [sp, #16]
 8010274:	e7a5      	b.n	80101c2 <__gethex+0x172>
 8010276:	9b00      	ldr	r3, [sp, #0]
 8010278:	42a3      	cmp	r3, r4
 801027a:	d8e9      	bhi.n	8010250 <__gethex+0x200>
 801027c:	2201      	movs	r2, #1
 801027e:	0020      	movs	r0, r4
 8010280:	4927      	ldr	r1, [pc, #156]	; (8010320 <__gethex+0x2d0>)
 8010282:	f7fe fdb2 	bl	800edea <strncmp>
 8010286:	2800      	cmp	r0, #0
 8010288:	d1e2      	bne.n	8010250 <__gethex+0x200>
 801028a:	e79a      	b.n	80101c2 <__gethex+0x172>
 801028c:	9b00      	ldr	r3, [sp, #0]
 801028e:	2400      	movs	r4, #0
 8010290:	429e      	cmp	r6, r3
 8010292:	dacc      	bge.n	801022e <__gethex+0x1de>
 8010294:	1b9e      	subs	r6, r3, r6
 8010296:	0029      	movs	r1, r5
 8010298:	0032      	movs	r2, r6
 801029a:	9803      	ldr	r0, [sp, #12]
 801029c:	f000 fc40 	bl	8010b20 <__lshift>
 80102a0:	0003      	movs	r3, r0
 80102a2:	3314      	adds	r3, #20
 80102a4:	0005      	movs	r5, r0
 80102a6:	1bbf      	subs	r7, r7, r6
 80102a8:	9302      	str	r3, [sp, #8]
 80102aa:	e7c0      	b.n	801022e <__gethex+0x1de>
 80102ac:	9b01      	ldr	r3, [sp, #4]
 80102ae:	685e      	ldr	r6, [r3, #4]
 80102b0:	42be      	cmp	r6, r7
 80102b2:	dd70      	ble.n	8010396 <__gethex+0x346>
 80102b4:	9b00      	ldr	r3, [sp, #0]
 80102b6:	1bf6      	subs	r6, r6, r7
 80102b8:	42b3      	cmp	r3, r6
 80102ba:	dc37      	bgt.n	801032c <__gethex+0x2dc>
 80102bc:	9b01      	ldr	r3, [sp, #4]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d024      	beq.n	801030e <__gethex+0x2be>
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d026      	beq.n	8010316 <__gethex+0x2c6>
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d117      	bne.n	80102fc <__gethex+0x2ac>
 80102cc:	9b00      	ldr	r3, [sp, #0]
 80102ce:	42b3      	cmp	r3, r6
 80102d0:	d114      	bne.n	80102fc <__gethex+0x2ac>
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d10b      	bne.n	80102ee <__gethex+0x29e>
 80102d6:	9b01      	ldr	r3, [sp, #4]
 80102d8:	9a07      	ldr	r2, [sp, #28]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	2662      	movs	r6, #98	; 0x62
 80102de:	6013      	str	r3, [r2, #0]
 80102e0:	2301      	movs	r3, #1
 80102e2:	9a02      	ldr	r2, [sp, #8]
 80102e4:	612b      	str	r3, [r5, #16]
 80102e6:	6013      	str	r3, [r2, #0]
 80102e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102ea:	601d      	str	r5, [r3, #0]
 80102ec:	e739      	b.n	8010162 <__gethex+0x112>
 80102ee:	9900      	ldr	r1, [sp, #0]
 80102f0:	0028      	movs	r0, r5
 80102f2:	3901      	subs	r1, #1
 80102f4:	f000 fe48 	bl	8010f88 <__any_on>
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d1ec      	bne.n	80102d6 <__gethex+0x286>
 80102fc:	0029      	movs	r1, r5
 80102fe:	9803      	ldr	r0, [sp, #12]
 8010300:	f000 f9ee 	bl	80106e0 <_Bfree>
 8010304:	2300      	movs	r3, #0
 8010306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010308:	2650      	movs	r6, #80	; 0x50
 801030a:	6013      	str	r3, [r2, #0]
 801030c:	e729      	b.n	8010162 <__gethex+0x112>
 801030e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010310:	2b00      	cmp	r3, #0
 8010312:	d1f3      	bne.n	80102fc <__gethex+0x2ac>
 8010314:	e7df      	b.n	80102d6 <__gethex+0x286>
 8010316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1dc      	bne.n	80102d6 <__gethex+0x286>
 801031c:	e7ee      	b.n	80102fc <__gethex+0x2ac>
 801031e:	46c0      	nop			; (mov r8, r8)
 8010320:	08013b98 	.word	0x08013b98
 8010324:	08013e44 	.word	0x08013e44
 8010328:	08013e55 	.word	0x08013e55
 801032c:	1e77      	subs	r7, r6, #1
 801032e:	2c00      	cmp	r4, #0
 8010330:	d12f      	bne.n	8010392 <__gethex+0x342>
 8010332:	2f00      	cmp	r7, #0
 8010334:	d004      	beq.n	8010340 <__gethex+0x2f0>
 8010336:	0039      	movs	r1, r7
 8010338:	0028      	movs	r0, r5
 801033a:	f000 fe25 	bl	8010f88 <__any_on>
 801033e:	0004      	movs	r4, r0
 8010340:	231f      	movs	r3, #31
 8010342:	117a      	asrs	r2, r7, #5
 8010344:	401f      	ands	r7, r3
 8010346:	3b1e      	subs	r3, #30
 8010348:	40bb      	lsls	r3, r7
 801034a:	9902      	ldr	r1, [sp, #8]
 801034c:	0092      	lsls	r2, r2, #2
 801034e:	5852      	ldr	r2, [r2, r1]
 8010350:	421a      	tst	r2, r3
 8010352:	d001      	beq.n	8010358 <__gethex+0x308>
 8010354:	2302      	movs	r3, #2
 8010356:	431c      	orrs	r4, r3
 8010358:	9b00      	ldr	r3, [sp, #0]
 801035a:	0031      	movs	r1, r6
 801035c:	1b9b      	subs	r3, r3, r6
 801035e:	2602      	movs	r6, #2
 8010360:	0028      	movs	r0, r5
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	f7ff fe0a 	bl	800ff7c <rshift>
 8010368:	9b01      	ldr	r3, [sp, #4]
 801036a:	685f      	ldr	r7, [r3, #4]
 801036c:	2c00      	cmp	r4, #0
 801036e:	d041      	beq.n	80103f4 <__gethex+0x3a4>
 8010370:	9b01      	ldr	r3, [sp, #4]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	2b02      	cmp	r3, #2
 8010376:	d010      	beq.n	801039a <__gethex+0x34a>
 8010378:	2b03      	cmp	r3, #3
 801037a:	d012      	beq.n	80103a2 <__gethex+0x352>
 801037c:	2b01      	cmp	r3, #1
 801037e:	d106      	bne.n	801038e <__gethex+0x33e>
 8010380:	07a2      	lsls	r2, r4, #30
 8010382:	d504      	bpl.n	801038e <__gethex+0x33e>
 8010384:	9a02      	ldr	r2, [sp, #8]
 8010386:	6812      	ldr	r2, [r2, #0]
 8010388:	4314      	orrs	r4, r2
 801038a:	421c      	tst	r4, r3
 801038c:	d10c      	bne.n	80103a8 <__gethex+0x358>
 801038e:	2310      	movs	r3, #16
 8010390:	e02f      	b.n	80103f2 <__gethex+0x3a2>
 8010392:	2401      	movs	r4, #1
 8010394:	e7d4      	b.n	8010340 <__gethex+0x2f0>
 8010396:	2601      	movs	r6, #1
 8010398:	e7e8      	b.n	801036c <__gethex+0x31c>
 801039a:	2301      	movs	r3, #1
 801039c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801039e:	1a9b      	subs	r3, r3, r2
 80103a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80103a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d0f2      	beq.n	801038e <__gethex+0x33e>
 80103a8:	692b      	ldr	r3, [r5, #16]
 80103aa:	2000      	movs	r0, #0
 80103ac:	9302      	str	r3, [sp, #8]
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	9304      	str	r3, [sp, #16]
 80103b2:	002b      	movs	r3, r5
 80103b4:	9a04      	ldr	r2, [sp, #16]
 80103b6:	3314      	adds	r3, #20
 80103b8:	1899      	adds	r1, r3, r2
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	1c54      	adds	r4, r2, #1
 80103be:	d01e      	beq.n	80103fe <__gethex+0x3ae>
 80103c0:	3201      	adds	r2, #1
 80103c2:	601a      	str	r2, [r3, #0]
 80103c4:	002b      	movs	r3, r5
 80103c6:	3314      	adds	r3, #20
 80103c8:	2e02      	cmp	r6, #2
 80103ca:	d141      	bne.n	8010450 <__gethex+0x400>
 80103cc:	9a01      	ldr	r2, [sp, #4]
 80103ce:	9900      	ldr	r1, [sp, #0]
 80103d0:	6812      	ldr	r2, [r2, #0]
 80103d2:	3a01      	subs	r2, #1
 80103d4:	428a      	cmp	r2, r1
 80103d6:	d10b      	bne.n	80103f0 <__gethex+0x3a0>
 80103d8:	221f      	movs	r2, #31
 80103da:	9800      	ldr	r0, [sp, #0]
 80103dc:	1149      	asrs	r1, r1, #5
 80103de:	4002      	ands	r2, r0
 80103e0:	2001      	movs	r0, #1
 80103e2:	0004      	movs	r4, r0
 80103e4:	4094      	lsls	r4, r2
 80103e6:	0089      	lsls	r1, r1, #2
 80103e8:	58cb      	ldr	r3, [r1, r3]
 80103ea:	4223      	tst	r3, r4
 80103ec:	d000      	beq.n	80103f0 <__gethex+0x3a0>
 80103ee:	2601      	movs	r6, #1
 80103f0:	2320      	movs	r3, #32
 80103f2:	431e      	orrs	r6, r3
 80103f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103f6:	601d      	str	r5, [r3, #0]
 80103f8:	9b07      	ldr	r3, [sp, #28]
 80103fa:	601f      	str	r7, [r3, #0]
 80103fc:	e6b1      	b.n	8010162 <__gethex+0x112>
 80103fe:	c301      	stmia	r3!, {r0}
 8010400:	4299      	cmp	r1, r3
 8010402:	d8da      	bhi.n	80103ba <__gethex+0x36a>
 8010404:	68ab      	ldr	r3, [r5, #8]
 8010406:	9a02      	ldr	r2, [sp, #8]
 8010408:	429a      	cmp	r2, r3
 801040a:	db18      	blt.n	801043e <__gethex+0x3ee>
 801040c:	6869      	ldr	r1, [r5, #4]
 801040e:	9803      	ldr	r0, [sp, #12]
 8010410:	3101      	adds	r1, #1
 8010412:	f000 f921 	bl	8010658 <_Balloc>
 8010416:	1e04      	subs	r4, r0, #0
 8010418:	d104      	bne.n	8010424 <__gethex+0x3d4>
 801041a:	0022      	movs	r2, r4
 801041c:	2184      	movs	r1, #132	; 0x84
 801041e:	4b1c      	ldr	r3, [pc, #112]	; (8010490 <__gethex+0x440>)
 8010420:	481c      	ldr	r0, [pc, #112]	; (8010494 <__gethex+0x444>)
 8010422:	e6c2      	b.n	80101aa <__gethex+0x15a>
 8010424:	0029      	movs	r1, r5
 8010426:	692a      	ldr	r2, [r5, #16]
 8010428:	310c      	adds	r1, #12
 801042a:	3202      	adds	r2, #2
 801042c:	0092      	lsls	r2, r2, #2
 801042e:	300c      	adds	r0, #12
 8010430:	f7fe fe8a 	bl	800f148 <memcpy>
 8010434:	0029      	movs	r1, r5
 8010436:	9803      	ldr	r0, [sp, #12]
 8010438:	f000 f952 	bl	80106e0 <_Bfree>
 801043c:	0025      	movs	r5, r4
 801043e:	692b      	ldr	r3, [r5, #16]
 8010440:	1c5a      	adds	r2, r3, #1
 8010442:	612a      	str	r2, [r5, #16]
 8010444:	2201      	movs	r2, #1
 8010446:	3304      	adds	r3, #4
 8010448:	009b      	lsls	r3, r3, #2
 801044a:	18eb      	adds	r3, r5, r3
 801044c:	605a      	str	r2, [r3, #4]
 801044e:	e7b9      	b.n	80103c4 <__gethex+0x374>
 8010450:	692a      	ldr	r2, [r5, #16]
 8010452:	9902      	ldr	r1, [sp, #8]
 8010454:	428a      	cmp	r2, r1
 8010456:	dd09      	ble.n	801046c <__gethex+0x41c>
 8010458:	2101      	movs	r1, #1
 801045a:	0028      	movs	r0, r5
 801045c:	f7ff fd8e 	bl	800ff7c <rshift>
 8010460:	9b01      	ldr	r3, [sp, #4]
 8010462:	3701      	adds	r7, #1
 8010464:	689b      	ldr	r3, [r3, #8]
 8010466:	42bb      	cmp	r3, r7
 8010468:	dac1      	bge.n	80103ee <__gethex+0x39e>
 801046a:	e6e4      	b.n	8010236 <__gethex+0x1e6>
 801046c:	221f      	movs	r2, #31
 801046e:	9c00      	ldr	r4, [sp, #0]
 8010470:	9900      	ldr	r1, [sp, #0]
 8010472:	2601      	movs	r6, #1
 8010474:	4014      	ands	r4, r2
 8010476:	4211      	tst	r1, r2
 8010478:	d0ba      	beq.n	80103f0 <__gethex+0x3a0>
 801047a:	9a04      	ldr	r2, [sp, #16]
 801047c:	189b      	adds	r3, r3, r2
 801047e:	3b04      	subs	r3, #4
 8010480:	6818      	ldr	r0, [r3, #0]
 8010482:	f000 f9e1 	bl	8010848 <__hi0bits>
 8010486:	2320      	movs	r3, #32
 8010488:	1b1b      	subs	r3, r3, r4
 801048a:	4298      	cmp	r0, r3
 801048c:	dbe4      	blt.n	8010458 <__gethex+0x408>
 801048e:	e7af      	b.n	80103f0 <__gethex+0x3a0>
 8010490:	08013e44 	.word	0x08013e44
 8010494:	08013e55 	.word	0x08013e55

08010498 <L_shift>:
 8010498:	2308      	movs	r3, #8
 801049a:	b570      	push	{r4, r5, r6, lr}
 801049c:	2520      	movs	r5, #32
 801049e:	1a9a      	subs	r2, r3, r2
 80104a0:	0092      	lsls	r2, r2, #2
 80104a2:	1aad      	subs	r5, r5, r2
 80104a4:	6843      	ldr	r3, [r0, #4]
 80104a6:	6804      	ldr	r4, [r0, #0]
 80104a8:	001e      	movs	r6, r3
 80104aa:	40ae      	lsls	r6, r5
 80104ac:	40d3      	lsrs	r3, r2
 80104ae:	4334      	orrs	r4, r6
 80104b0:	6004      	str	r4, [r0, #0]
 80104b2:	6043      	str	r3, [r0, #4]
 80104b4:	3004      	adds	r0, #4
 80104b6:	4288      	cmp	r0, r1
 80104b8:	d3f4      	bcc.n	80104a4 <L_shift+0xc>
 80104ba:	bd70      	pop	{r4, r5, r6, pc}

080104bc <__match>:
 80104bc:	b530      	push	{r4, r5, lr}
 80104be:	6803      	ldr	r3, [r0, #0]
 80104c0:	780c      	ldrb	r4, [r1, #0]
 80104c2:	3301      	adds	r3, #1
 80104c4:	2c00      	cmp	r4, #0
 80104c6:	d102      	bne.n	80104ce <__match+0x12>
 80104c8:	6003      	str	r3, [r0, #0]
 80104ca:	2001      	movs	r0, #1
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	781a      	ldrb	r2, [r3, #0]
 80104d0:	0015      	movs	r5, r2
 80104d2:	3d41      	subs	r5, #65	; 0x41
 80104d4:	2d19      	cmp	r5, #25
 80104d6:	d800      	bhi.n	80104da <__match+0x1e>
 80104d8:	3220      	adds	r2, #32
 80104da:	3101      	adds	r1, #1
 80104dc:	42a2      	cmp	r2, r4
 80104de:	d0ef      	beq.n	80104c0 <__match+0x4>
 80104e0:	2000      	movs	r0, #0
 80104e2:	e7f3      	b.n	80104cc <__match+0x10>

080104e4 <__hexnan>:
 80104e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e6:	680b      	ldr	r3, [r1, #0]
 80104e8:	b08b      	sub	sp, #44	; 0x2c
 80104ea:	9201      	str	r2, [sp, #4]
 80104ec:	9901      	ldr	r1, [sp, #4]
 80104ee:	115a      	asrs	r2, r3, #5
 80104f0:	0092      	lsls	r2, r2, #2
 80104f2:	188a      	adds	r2, r1, r2
 80104f4:	9202      	str	r2, [sp, #8]
 80104f6:	0019      	movs	r1, r3
 80104f8:	221f      	movs	r2, #31
 80104fa:	4011      	ands	r1, r2
 80104fc:	9008      	str	r0, [sp, #32]
 80104fe:	9106      	str	r1, [sp, #24]
 8010500:	4213      	tst	r3, r2
 8010502:	d002      	beq.n	801050a <__hexnan+0x26>
 8010504:	9b02      	ldr	r3, [sp, #8]
 8010506:	3304      	adds	r3, #4
 8010508:	9302      	str	r3, [sp, #8]
 801050a:	9b02      	ldr	r3, [sp, #8]
 801050c:	2500      	movs	r5, #0
 801050e:	1f1f      	subs	r7, r3, #4
 8010510:	003e      	movs	r6, r7
 8010512:	003c      	movs	r4, r7
 8010514:	9b08      	ldr	r3, [sp, #32]
 8010516:	603d      	str	r5, [r7, #0]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	9507      	str	r5, [sp, #28]
 801051c:	9305      	str	r3, [sp, #20]
 801051e:	9503      	str	r5, [sp, #12]
 8010520:	9b05      	ldr	r3, [sp, #20]
 8010522:	3301      	adds	r3, #1
 8010524:	9309      	str	r3, [sp, #36]	; 0x24
 8010526:	9b05      	ldr	r3, [sp, #20]
 8010528:	785b      	ldrb	r3, [r3, #1]
 801052a:	9304      	str	r3, [sp, #16]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d028      	beq.n	8010582 <__hexnan+0x9e>
 8010530:	9804      	ldr	r0, [sp, #16]
 8010532:	f7ff fd78 	bl	8010026 <__hexdig_fun>
 8010536:	2800      	cmp	r0, #0
 8010538:	d154      	bne.n	80105e4 <__hexnan+0x100>
 801053a:	9b04      	ldr	r3, [sp, #16]
 801053c:	2b20      	cmp	r3, #32
 801053e:	d819      	bhi.n	8010574 <__hexnan+0x90>
 8010540:	9b03      	ldr	r3, [sp, #12]
 8010542:	9a07      	ldr	r2, [sp, #28]
 8010544:	4293      	cmp	r3, r2
 8010546:	dd12      	ble.n	801056e <__hexnan+0x8a>
 8010548:	42b4      	cmp	r4, r6
 801054a:	d206      	bcs.n	801055a <__hexnan+0x76>
 801054c:	2d07      	cmp	r5, #7
 801054e:	dc04      	bgt.n	801055a <__hexnan+0x76>
 8010550:	002a      	movs	r2, r5
 8010552:	0031      	movs	r1, r6
 8010554:	0020      	movs	r0, r4
 8010556:	f7ff ff9f 	bl	8010498 <L_shift>
 801055a:	9b01      	ldr	r3, [sp, #4]
 801055c:	2508      	movs	r5, #8
 801055e:	429c      	cmp	r4, r3
 8010560:	d905      	bls.n	801056e <__hexnan+0x8a>
 8010562:	1f26      	subs	r6, r4, #4
 8010564:	2500      	movs	r5, #0
 8010566:	0034      	movs	r4, r6
 8010568:	9b03      	ldr	r3, [sp, #12]
 801056a:	6035      	str	r5, [r6, #0]
 801056c:	9307      	str	r3, [sp, #28]
 801056e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010570:	9305      	str	r3, [sp, #20]
 8010572:	e7d5      	b.n	8010520 <__hexnan+0x3c>
 8010574:	9b04      	ldr	r3, [sp, #16]
 8010576:	2b29      	cmp	r3, #41	; 0x29
 8010578:	d159      	bne.n	801062e <__hexnan+0x14a>
 801057a:	9b05      	ldr	r3, [sp, #20]
 801057c:	9a08      	ldr	r2, [sp, #32]
 801057e:	3302      	adds	r3, #2
 8010580:	6013      	str	r3, [r2, #0]
 8010582:	9b03      	ldr	r3, [sp, #12]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d052      	beq.n	801062e <__hexnan+0x14a>
 8010588:	42b4      	cmp	r4, r6
 801058a:	d206      	bcs.n	801059a <__hexnan+0xb6>
 801058c:	2d07      	cmp	r5, #7
 801058e:	dc04      	bgt.n	801059a <__hexnan+0xb6>
 8010590:	002a      	movs	r2, r5
 8010592:	0031      	movs	r1, r6
 8010594:	0020      	movs	r0, r4
 8010596:	f7ff ff7f 	bl	8010498 <L_shift>
 801059a:	9b01      	ldr	r3, [sp, #4]
 801059c:	429c      	cmp	r4, r3
 801059e:	d935      	bls.n	801060c <__hexnan+0x128>
 80105a0:	001a      	movs	r2, r3
 80105a2:	0023      	movs	r3, r4
 80105a4:	cb02      	ldmia	r3!, {r1}
 80105a6:	c202      	stmia	r2!, {r1}
 80105a8:	429f      	cmp	r7, r3
 80105aa:	d2fb      	bcs.n	80105a4 <__hexnan+0xc0>
 80105ac:	9b02      	ldr	r3, [sp, #8]
 80105ae:	1c62      	adds	r2, r4, #1
 80105b0:	1ed9      	subs	r1, r3, #3
 80105b2:	2304      	movs	r3, #4
 80105b4:	4291      	cmp	r1, r2
 80105b6:	d305      	bcc.n	80105c4 <__hexnan+0xe0>
 80105b8:	9b02      	ldr	r3, [sp, #8]
 80105ba:	3b04      	subs	r3, #4
 80105bc:	1b1b      	subs	r3, r3, r4
 80105be:	089b      	lsrs	r3, r3, #2
 80105c0:	3301      	adds	r3, #1
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	9a01      	ldr	r2, [sp, #4]
 80105c6:	18d3      	adds	r3, r2, r3
 80105c8:	2200      	movs	r2, #0
 80105ca:	c304      	stmia	r3!, {r2}
 80105cc:	429f      	cmp	r7, r3
 80105ce:	d2fc      	bcs.n	80105ca <__hexnan+0xe6>
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d104      	bne.n	80105e0 <__hexnan+0xfc>
 80105d6:	9b01      	ldr	r3, [sp, #4]
 80105d8:	429f      	cmp	r7, r3
 80105da:	d126      	bne.n	801062a <__hexnan+0x146>
 80105dc:	2301      	movs	r3, #1
 80105de:	603b      	str	r3, [r7, #0]
 80105e0:	2005      	movs	r0, #5
 80105e2:	e025      	b.n	8010630 <__hexnan+0x14c>
 80105e4:	9b03      	ldr	r3, [sp, #12]
 80105e6:	3501      	adds	r5, #1
 80105e8:	3301      	adds	r3, #1
 80105ea:	9303      	str	r3, [sp, #12]
 80105ec:	2d08      	cmp	r5, #8
 80105ee:	dd06      	ble.n	80105fe <__hexnan+0x11a>
 80105f0:	9b01      	ldr	r3, [sp, #4]
 80105f2:	429c      	cmp	r4, r3
 80105f4:	d9bb      	bls.n	801056e <__hexnan+0x8a>
 80105f6:	2300      	movs	r3, #0
 80105f8:	2501      	movs	r5, #1
 80105fa:	3c04      	subs	r4, #4
 80105fc:	6023      	str	r3, [r4, #0]
 80105fe:	220f      	movs	r2, #15
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	4010      	ands	r0, r2
 8010604:	011b      	lsls	r3, r3, #4
 8010606:	4303      	orrs	r3, r0
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	e7b0      	b.n	801056e <__hexnan+0x8a>
 801060c:	9b06      	ldr	r3, [sp, #24]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d0de      	beq.n	80105d0 <__hexnan+0xec>
 8010612:	2320      	movs	r3, #32
 8010614:	9a06      	ldr	r2, [sp, #24]
 8010616:	9902      	ldr	r1, [sp, #8]
 8010618:	1a9b      	subs	r3, r3, r2
 801061a:	2201      	movs	r2, #1
 801061c:	4252      	negs	r2, r2
 801061e:	40da      	lsrs	r2, r3
 8010620:	3904      	subs	r1, #4
 8010622:	680b      	ldr	r3, [r1, #0]
 8010624:	4013      	ands	r3, r2
 8010626:	600b      	str	r3, [r1, #0]
 8010628:	e7d2      	b.n	80105d0 <__hexnan+0xec>
 801062a:	3f04      	subs	r7, #4
 801062c:	e7d0      	b.n	80105d0 <__hexnan+0xec>
 801062e:	2004      	movs	r0, #4
 8010630:	b00b      	add	sp, #44	; 0x2c
 8010632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010634 <__ascii_mbtowc>:
 8010634:	b082      	sub	sp, #8
 8010636:	2900      	cmp	r1, #0
 8010638:	d100      	bne.n	801063c <__ascii_mbtowc+0x8>
 801063a:	a901      	add	r1, sp, #4
 801063c:	1e10      	subs	r0, r2, #0
 801063e:	d006      	beq.n	801064e <__ascii_mbtowc+0x1a>
 8010640:	2b00      	cmp	r3, #0
 8010642:	d006      	beq.n	8010652 <__ascii_mbtowc+0x1e>
 8010644:	7813      	ldrb	r3, [r2, #0]
 8010646:	600b      	str	r3, [r1, #0]
 8010648:	7810      	ldrb	r0, [r2, #0]
 801064a:	1e43      	subs	r3, r0, #1
 801064c:	4198      	sbcs	r0, r3
 801064e:	b002      	add	sp, #8
 8010650:	4770      	bx	lr
 8010652:	2002      	movs	r0, #2
 8010654:	4240      	negs	r0, r0
 8010656:	e7fa      	b.n	801064e <__ascii_mbtowc+0x1a>

08010658 <_Balloc>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	69c5      	ldr	r5, [r0, #28]
 801065c:	0006      	movs	r6, r0
 801065e:	000c      	movs	r4, r1
 8010660:	2d00      	cmp	r5, #0
 8010662:	d10e      	bne.n	8010682 <_Balloc+0x2a>
 8010664:	2010      	movs	r0, #16
 8010666:	f7fc fc27 	bl	800ceb8 <malloc>
 801066a:	1e02      	subs	r2, r0, #0
 801066c:	61f0      	str	r0, [r6, #28]
 801066e:	d104      	bne.n	801067a <_Balloc+0x22>
 8010670:	216b      	movs	r1, #107	; 0x6b
 8010672:	4b19      	ldr	r3, [pc, #100]	; (80106d8 <_Balloc+0x80>)
 8010674:	4819      	ldr	r0, [pc, #100]	; (80106dc <_Balloc+0x84>)
 8010676:	f7fe fd7b 	bl	800f170 <__assert_func>
 801067a:	6045      	str	r5, [r0, #4]
 801067c:	6085      	str	r5, [r0, #8]
 801067e:	6005      	str	r5, [r0, #0]
 8010680:	60c5      	str	r5, [r0, #12]
 8010682:	69f5      	ldr	r5, [r6, #28]
 8010684:	68eb      	ldr	r3, [r5, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d013      	beq.n	80106b2 <_Balloc+0x5a>
 801068a:	69f3      	ldr	r3, [r6, #28]
 801068c:	00a2      	lsls	r2, r4, #2
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	189b      	adds	r3, r3, r2
 8010692:	6818      	ldr	r0, [r3, #0]
 8010694:	2800      	cmp	r0, #0
 8010696:	d118      	bne.n	80106ca <_Balloc+0x72>
 8010698:	2101      	movs	r1, #1
 801069a:	000d      	movs	r5, r1
 801069c:	40a5      	lsls	r5, r4
 801069e:	1d6a      	adds	r2, r5, #5
 80106a0:	0030      	movs	r0, r6
 80106a2:	0092      	lsls	r2, r2, #2
 80106a4:	f000 fee2 	bl	801146c <_calloc_r>
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d00c      	beq.n	80106c6 <_Balloc+0x6e>
 80106ac:	6044      	str	r4, [r0, #4]
 80106ae:	6085      	str	r5, [r0, #8]
 80106b0:	e00d      	b.n	80106ce <_Balloc+0x76>
 80106b2:	2221      	movs	r2, #33	; 0x21
 80106b4:	2104      	movs	r1, #4
 80106b6:	0030      	movs	r0, r6
 80106b8:	f000 fed8 	bl	801146c <_calloc_r>
 80106bc:	69f3      	ldr	r3, [r6, #28]
 80106be:	60e8      	str	r0, [r5, #12]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d1e1      	bne.n	801068a <_Balloc+0x32>
 80106c6:	2000      	movs	r0, #0
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
 80106ca:	6802      	ldr	r2, [r0, #0]
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	2300      	movs	r3, #0
 80106d0:	6103      	str	r3, [r0, #16]
 80106d2:	60c3      	str	r3, [r0, #12]
 80106d4:	e7f8      	b.n	80106c8 <_Balloc+0x70>
 80106d6:	46c0      	nop			; (mov r8, r8)
 80106d8:	08013d2a 	.word	0x08013d2a
 80106dc:	08013eb5 	.word	0x08013eb5

080106e0 <_Bfree>:
 80106e0:	b570      	push	{r4, r5, r6, lr}
 80106e2:	69c6      	ldr	r6, [r0, #28]
 80106e4:	0005      	movs	r5, r0
 80106e6:	000c      	movs	r4, r1
 80106e8:	2e00      	cmp	r6, #0
 80106ea:	d10e      	bne.n	801070a <_Bfree+0x2a>
 80106ec:	2010      	movs	r0, #16
 80106ee:	f7fc fbe3 	bl	800ceb8 <malloc>
 80106f2:	1e02      	subs	r2, r0, #0
 80106f4:	61e8      	str	r0, [r5, #28]
 80106f6:	d104      	bne.n	8010702 <_Bfree+0x22>
 80106f8:	218f      	movs	r1, #143	; 0x8f
 80106fa:	4b09      	ldr	r3, [pc, #36]	; (8010720 <_Bfree+0x40>)
 80106fc:	4809      	ldr	r0, [pc, #36]	; (8010724 <_Bfree+0x44>)
 80106fe:	f7fe fd37 	bl	800f170 <__assert_func>
 8010702:	6046      	str	r6, [r0, #4]
 8010704:	6086      	str	r6, [r0, #8]
 8010706:	6006      	str	r6, [r0, #0]
 8010708:	60c6      	str	r6, [r0, #12]
 801070a:	2c00      	cmp	r4, #0
 801070c:	d007      	beq.n	801071e <_Bfree+0x3e>
 801070e:	69eb      	ldr	r3, [r5, #28]
 8010710:	6862      	ldr	r2, [r4, #4]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	0092      	lsls	r2, r2, #2
 8010716:	189b      	adds	r3, r3, r2
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	6022      	str	r2, [r4, #0]
 801071c:	601c      	str	r4, [r3, #0]
 801071e:	bd70      	pop	{r4, r5, r6, pc}
 8010720:	08013d2a 	.word	0x08013d2a
 8010724:	08013eb5 	.word	0x08013eb5

08010728 <__multadd>:
 8010728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801072a:	000e      	movs	r6, r1
 801072c:	9001      	str	r0, [sp, #4]
 801072e:	000c      	movs	r4, r1
 8010730:	001d      	movs	r5, r3
 8010732:	2000      	movs	r0, #0
 8010734:	690f      	ldr	r7, [r1, #16]
 8010736:	3614      	adds	r6, #20
 8010738:	6833      	ldr	r3, [r6, #0]
 801073a:	3001      	adds	r0, #1
 801073c:	b299      	uxth	r1, r3
 801073e:	4351      	muls	r1, r2
 8010740:	0c1b      	lsrs	r3, r3, #16
 8010742:	4353      	muls	r3, r2
 8010744:	1949      	adds	r1, r1, r5
 8010746:	0c0d      	lsrs	r5, r1, #16
 8010748:	195b      	adds	r3, r3, r5
 801074a:	0c1d      	lsrs	r5, r3, #16
 801074c:	b289      	uxth	r1, r1
 801074e:	041b      	lsls	r3, r3, #16
 8010750:	185b      	adds	r3, r3, r1
 8010752:	c608      	stmia	r6!, {r3}
 8010754:	4287      	cmp	r7, r0
 8010756:	dcef      	bgt.n	8010738 <__multadd+0x10>
 8010758:	2d00      	cmp	r5, #0
 801075a:	d022      	beq.n	80107a2 <__multadd+0x7a>
 801075c:	68a3      	ldr	r3, [r4, #8]
 801075e:	42bb      	cmp	r3, r7
 8010760:	dc19      	bgt.n	8010796 <__multadd+0x6e>
 8010762:	6861      	ldr	r1, [r4, #4]
 8010764:	9801      	ldr	r0, [sp, #4]
 8010766:	3101      	adds	r1, #1
 8010768:	f7ff ff76 	bl	8010658 <_Balloc>
 801076c:	1e06      	subs	r6, r0, #0
 801076e:	d105      	bne.n	801077c <__multadd+0x54>
 8010770:	0032      	movs	r2, r6
 8010772:	21ba      	movs	r1, #186	; 0xba
 8010774:	4b0c      	ldr	r3, [pc, #48]	; (80107a8 <__multadd+0x80>)
 8010776:	480d      	ldr	r0, [pc, #52]	; (80107ac <__multadd+0x84>)
 8010778:	f7fe fcfa 	bl	800f170 <__assert_func>
 801077c:	0021      	movs	r1, r4
 801077e:	6922      	ldr	r2, [r4, #16]
 8010780:	310c      	adds	r1, #12
 8010782:	3202      	adds	r2, #2
 8010784:	0092      	lsls	r2, r2, #2
 8010786:	300c      	adds	r0, #12
 8010788:	f7fe fcde 	bl	800f148 <memcpy>
 801078c:	0021      	movs	r1, r4
 801078e:	9801      	ldr	r0, [sp, #4]
 8010790:	f7ff ffa6 	bl	80106e0 <_Bfree>
 8010794:	0034      	movs	r4, r6
 8010796:	1d3b      	adds	r3, r7, #4
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	18e3      	adds	r3, r4, r3
 801079c:	605d      	str	r5, [r3, #4]
 801079e:	1c7b      	adds	r3, r7, #1
 80107a0:	6123      	str	r3, [r4, #16]
 80107a2:	0020      	movs	r0, r4
 80107a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107a6:	46c0      	nop			; (mov r8, r8)
 80107a8:	08013e44 	.word	0x08013e44
 80107ac:	08013eb5 	.word	0x08013eb5

080107b0 <__s2b>:
 80107b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107b2:	0006      	movs	r6, r0
 80107b4:	0018      	movs	r0, r3
 80107b6:	000c      	movs	r4, r1
 80107b8:	3008      	adds	r0, #8
 80107ba:	2109      	movs	r1, #9
 80107bc:	9301      	str	r3, [sp, #4]
 80107be:	0015      	movs	r5, r2
 80107c0:	f7ef fd48 	bl	8000254 <__divsi3>
 80107c4:	2301      	movs	r3, #1
 80107c6:	2100      	movs	r1, #0
 80107c8:	4283      	cmp	r3, r0
 80107ca:	db0a      	blt.n	80107e2 <__s2b+0x32>
 80107cc:	0030      	movs	r0, r6
 80107ce:	f7ff ff43 	bl	8010658 <_Balloc>
 80107d2:	1e01      	subs	r1, r0, #0
 80107d4:	d108      	bne.n	80107e8 <__s2b+0x38>
 80107d6:	000a      	movs	r2, r1
 80107d8:	4b19      	ldr	r3, [pc, #100]	; (8010840 <__s2b+0x90>)
 80107da:	481a      	ldr	r0, [pc, #104]	; (8010844 <__s2b+0x94>)
 80107dc:	31d3      	adds	r1, #211	; 0xd3
 80107de:	f7fe fcc7 	bl	800f170 <__assert_func>
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	3101      	adds	r1, #1
 80107e6:	e7ef      	b.n	80107c8 <__s2b+0x18>
 80107e8:	9b08      	ldr	r3, [sp, #32]
 80107ea:	6143      	str	r3, [r0, #20]
 80107ec:	2301      	movs	r3, #1
 80107ee:	6103      	str	r3, [r0, #16]
 80107f0:	2d09      	cmp	r5, #9
 80107f2:	dd18      	ble.n	8010826 <__s2b+0x76>
 80107f4:	0023      	movs	r3, r4
 80107f6:	3309      	adds	r3, #9
 80107f8:	001f      	movs	r7, r3
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	1964      	adds	r4, r4, r5
 80107fe:	783b      	ldrb	r3, [r7, #0]
 8010800:	220a      	movs	r2, #10
 8010802:	0030      	movs	r0, r6
 8010804:	3b30      	subs	r3, #48	; 0x30
 8010806:	f7ff ff8f 	bl	8010728 <__multadd>
 801080a:	3701      	adds	r7, #1
 801080c:	0001      	movs	r1, r0
 801080e:	42a7      	cmp	r7, r4
 8010810:	d1f5      	bne.n	80107fe <__s2b+0x4e>
 8010812:	002c      	movs	r4, r5
 8010814:	9b00      	ldr	r3, [sp, #0]
 8010816:	3c08      	subs	r4, #8
 8010818:	191c      	adds	r4, r3, r4
 801081a:	002f      	movs	r7, r5
 801081c:	9b01      	ldr	r3, [sp, #4]
 801081e:	429f      	cmp	r7, r3
 8010820:	db04      	blt.n	801082c <__s2b+0x7c>
 8010822:	0008      	movs	r0, r1
 8010824:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010826:	2509      	movs	r5, #9
 8010828:	340a      	adds	r4, #10
 801082a:	e7f6      	b.n	801081a <__s2b+0x6a>
 801082c:	1b63      	subs	r3, r4, r5
 801082e:	5ddb      	ldrb	r3, [r3, r7]
 8010830:	220a      	movs	r2, #10
 8010832:	0030      	movs	r0, r6
 8010834:	3b30      	subs	r3, #48	; 0x30
 8010836:	f7ff ff77 	bl	8010728 <__multadd>
 801083a:	3701      	adds	r7, #1
 801083c:	0001      	movs	r1, r0
 801083e:	e7ed      	b.n	801081c <__s2b+0x6c>
 8010840:	08013e44 	.word	0x08013e44
 8010844:	08013eb5 	.word	0x08013eb5

08010848 <__hi0bits>:
 8010848:	0003      	movs	r3, r0
 801084a:	0c02      	lsrs	r2, r0, #16
 801084c:	2000      	movs	r0, #0
 801084e:	4282      	cmp	r2, r0
 8010850:	d101      	bne.n	8010856 <__hi0bits+0xe>
 8010852:	041b      	lsls	r3, r3, #16
 8010854:	3010      	adds	r0, #16
 8010856:	0e1a      	lsrs	r2, r3, #24
 8010858:	d101      	bne.n	801085e <__hi0bits+0x16>
 801085a:	3008      	adds	r0, #8
 801085c:	021b      	lsls	r3, r3, #8
 801085e:	0f1a      	lsrs	r2, r3, #28
 8010860:	d101      	bne.n	8010866 <__hi0bits+0x1e>
 8010862:	3004      	adds	r0, #4
 8010864:	011b      	lsls	r3, r3, #4
 8010866:	0f9a      	lsrs	r2, r3, #30
 8010868:	d101      	bne.n	801086e <__hi0bits+0x26>
 801086a:	3002      	adds	r0, #2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	2b00      	cmp	r3, #0
 8010870:	db03      	blt.n	801087a <__hi0bits+0x32>
 8010872:	3001      	adds	r0, #1
 8010874:	005b      	lsls	r3, r3, #1
 8010876:	d400      	bmi.n	801087a <__hi0bits+0x32>
 8010878:	2020      	movs	r0, #32
 801087a:	4770      	bx	lr

0801087c <__lo0bits>:
 801087c:	6803      	ldr	r3, [r0, #0]
 801087e:	0001      	movs	r1, r0
 8010880:	2207      	movs	r2, #7
 8010882:	0018      	movs	r0, r3
 8010884:	4010      	ands	r0, r2
 8010886:	4213      	tst	r3, r2
 8010888:	d00d      	beq.n	80108a6 <__lo0bits+0x2a>
 801088a:	3a06      	subs	r2, #6
 801088c:	2000      	movs	r0, #0
 801088e:	4213      	tst	r3, r2
 8010890:	d105      	bne.n	801089e <__lo0bits+0x22>
 8010892:	3002      	adds	r0, #2
 8010894:	4203      	tst	r3, r0
 8010896:	d003      	beq.n	80108a0 <__lo0bits+0x24>
 8010898:	40d3      	lsrs	r3, r2
 801089a:	0010      	movs	r0, r2
 801089c:	600b      	str	r3, [r1, #0]
 801089e:	4770      	bx	lr
 80108a0:	089b      	lsrs	r3, r3, #2
 80108a2:	600b      	str	r3, [r1, #0]
 80108a4:	e7fb      	b.n	801089e <__lo0bits+0x22>
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	2a00      	cmp	r2, #0
 80108aa:	d101      	bne.n	80108b0 <__lo0bits+0x34>
 80108ac:	2010      	movs	r0, #16
 80108ae:	0c1b      	lsrs	r3, r3, #16
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	2a00      	cmp	r2, #0
 80108b4:	d101      	bne.n	80108ba <__lo0bits+0x3e>
 80108b6:	3008      	adds	r0, #8
 80108b8:	0a1b      	lsrs	r3, r3, #8
 80108ba:	071a      	lsls	r2, r3, #28
 80108bc:	d101      	bne.n	80108c2 <__lo0bits+0x46>
 80108be:	3004      	adds	r0, #4
 80108c0:	091b      	lsrs	r3, r3, #4
 80108c2:	079a      	lsls	r2, r3, #30
 80108c4:	d101      	bne.n	80108ca <__lo0bits+0x4e>
 80108c6:	3002      	adds	r0, #2
 80108c8:	089b      	lsrs	r3, r3, #2
 80108ca:	07da      	lsls	r2, r3, #31
 80108cc:	d4e9      	bmi.n	80108a2 <__lo0bits+0x26>
 80108ce:	3001      	adds	r0, #1
 80108d0:	085b      	lsrs	r3, r3, #1
 80108d2:	d1e6      	bne.n	80108a2 <__lo0bits+0x26>
 80108d4:	2020      	movs	r0, #32
 80108d6:	e7e2      	b.n	801089e <__lo0bits+0x22>

080108d8 <__i2b>:
 80108d8:	b510      	push	{r4, lr}
 80108da:	000c      	movs	r4, r1
 80108dc:	2101      	movs	r1, #1
 80108de:	f7ff febb 	bl	8010658 <_Balloc>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d107      	bne.n	80108f6 <__i2b+0x1e>
 80108e6:	2146      	movs	r1, #70	; 0x46
 80108e8:	4c05      	ldr	r4, [pc, #20]	; (8010900 <__i2b+0x28>)
 80108ea:	0002      	movs	r2, r0
 80108ec:	4b05      	ldr	r3, [pc, #20]	; (8010904 <__i2b+0x2c>)
 80108ee:	0020      	movs	r0, r4
 80108f0:	31ff      	adds	r1, #255	; 0xff
 80108f2:	f7fe fc3d 	bl	800f170 <__assert_func>
 80108f6:	2301      	movs	r3, #1
 80108f8:	6144      	str	r4, [r0, #20]
 80108fa:	6103      	str	r3, [r0, #16]
 80108fc:	bd10      	pop	{r4, pc}
 80108fe:	46c0      	nop			; (mov r8, r8)
 8010900:	08013eb5 	.word	0x08013eb5
 8010904:	08013e44 	.word	0x08013e44

08010908 <__multiply>:
 8010908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801090a:	0015      	movs	r5, r2
 801090c:	690a      	ldr	r2, [r1, #16]
 801090e:	692b      	ldr	r3, [r5, #16]
 8010910:	000c      	movs	r4, r1
 8010912:	b08b      	sub	sp, #44	; 0x2c
 8010914:	429a      	cmp	r2, r3
 8010916:	da01      	bge.n	801091c <__multiply+0x14>
 8010918:	002c      	movs	r4, r5
 801091a:	000d      	movs	r5, r1
 801091c:	6927      	ldr	r7, [r4, #16]
 801091e:	692e      	ldr	r6, [r5, #16]
 8010920:	6861      	ldr	r1, [r4, #4]
 8010922:	19bb      	adds	r3, r7, r6
 8010924:	9303      	str	r3, [sp, #12]
 8010926:	68a3      	ldr	r3, [r4, #8]
 8010928:	19ba      	adds	r2, r7, r6
 801092a:	4293      	cmp	r3, r2
 801092c:	da00      	bge.n	8010930 <__multiply+0x28>
 801092e:	3101      	adds	r1, #1
 8010930:	f7ff fe92 	bl	8010658 <_Balloc>
 8010934:	9002      	str	r0, [sp, #8]
 8010936:	2800      	cmp	r0, #0
 8010938:	d106      	bne.n	8010948 <__multiply+0x40>
 801093a:	21b1      	movs	r1, #177	; 0xb1
 801093c:	4b48      	ldr	r3, [pc, #288]	; (8010a60 <__multiply+0x158>)
 801093e:	4849      	ldr	r0, [pc, #292]	; (8010a64 <__multiply+0x15c>)
 8010940:	9a02      	ldr	r2, [sp, #8]
 8010942:	0049      	lsls	r1, r1, #1
 8010944:	f7fe fc14 	bl	800f170 <__assert_func>
 8010948:	9b02      	ldr	r3, [sp, #8]
 801094a:	2200      	movs	r2, #0
 801094c:	3314      	adds	r3, #20
 801094e:	469c      	mov	ip, r3
 8010950:	19bb      	adds	r3, r7, r6
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	4463      	add	r3, ip
 8010956:	9304      	str	r3, [sp, #16]
 8010958:	4663      	mov	r3, ip
 801095a:	9904      	ldr	r1, [sp, #16]
 801095c:	428b      	cmp	r3, r1
 801095e:	d32a      	bcc.n	80109b6 <__multiply+0xae>
 8010960:	0023      	movs	r3, r4
 8010962:	00bf      	lsls	r7, r7, #2
 8010964:	3314      	adds	r3, #20
 8010966:	3514      	adds	r5, #20
 8010968:	9308      	str	r3, [sp, #32]
 801096a:	00b6      	lsls	r6, r6, #2
 801096c:	19db      	adds	r3, r3, r7
 801096e:	9305      	str	r3, [sp, #20]
 8010970:	19ab      	adds	r3, r5, r6
 8010972:	9309      	str	r3, [sp, #36]	; 0x24
 8010974:	2304      	movs	r3, #4
 8010976:	9306      	str	r3, [sp, #24]
 8010978:	0023      	movs	r3, r4
 801097a:	9a05      	ldr	r2, [sp, #20]
 801097c:	3315      	adds	r3, #21
 801097e:	9501      	str	r5, [sp, #4]
 8010980:	429a      	cmp	r2, r3
 8010982:	d305      	bcc.n	8010990 <__multiply+0x88>
 8010984:	1b13      	subs	r3, r2, r4
 8010986:	3b15      	subs	r3, #21
 8010988:	089b      	lsrs	r3, r3, #2
 801098a:	3301      	adds	r3, #1
 801098c:	009b      	lsls	r3, r3, #2
 801098e:	9306      	str	r3, [sp, #24]
 8010990:	9b01      	ldr	r3, [sp, #4]
 8010992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010994:	4293      	cmp	r3, r2
 8010996:	d310      	bcc.n	80109ba <__multiply+0xb2>
 8010998:	9b03      	ldr	r3, [sp, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd05      	ble.n	80109aa <__multiply+0xa2>
 801099e:	9b04      	ldr	r3, [sp, #16]
 80109a0:	3b04      	subs	r3, #4
 80109a2:	9304      	str	r3, [sp, #16]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d056      	beq.n	8010a58 <__multiply+0x150>
 80109aa:	9b02      	ldr	r3, [sp, #8]
 80109ac:	9a03      	ldr	r2, [sp, #12]
 80109ae:	0018      	movs	r0, r3
 80109b0:	611a      	str	r2, [r3, #16]
 80109b2:	b00b      	add	sp, #44	; 0x2c
 80109b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109b6:	c304      	stmia	r3!, {r2}
 80109b8:	e7cf      	b.n	801095a <__multiply+0x52>
 80109ba:	9b01      	ldr	r3, [sp, #4]
 80109bc:	6818      	ldr	r0, [r3, #0]
 80109be:	b280      	uxth	r0, r0
 80109c0:	2800      	cmp	r0, #0
 80109c2:	d01e      	beq.n	8010a02 <__multiply+0xfa>
 80109c4:	4667      	mov	r7, ip
 80109c6:	2500      	movs	r5, #0
 80109c8:	9e08      	ldr	r6, [sp, #32]
 80109ca:	ce02      	ldmia	r6!, {r1}
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	9307      	str	r3, [sp, #28]
 80109d0:	b28b      	uxth	r3, r1
 80109d2:	4343      	muls	r3, r0
 80109d4:	001a      	movs	r2, r3
 80109d6:	466b      	mov	r3, sp
 80109d8:	8b9b      	ldrh	r3, [r3, #28]
 80109da:	18d3      	adds	r3, r2, r3
 80109dc:	195b      	adds	r3, r3, r5
 80109de:	0c0d      	lsrs	r5, r1, #16
 80109e0:	4345      	muls	r5, r0
 80109e2:	9a07      	ldr	r2, [sp, #28]
 80109e4:	0c11      	lsrs	r1, r2, #16
 80109e6:	1869      	adds	r1, r5, r1
 80109e8:	0c1a      	lsrs	r2, r3, #16
 80109ea:	188a      	adds	r2, r1, r2
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	0c15      	lsrs	r5, r2, #16
 80109f0:	0412      	lsls	r2, r2, #16
 80109f2:	431a      	orrs	r2, r3
 80109f4:	9b05      	ldr	r3, [sp, #20]
 80109f6:	c704      	stmia	r7!, {r2}
 80109f8:	42b3      	cmp	r3, r6
 80109fa:	d8e6      	bhi.n	80109ca <__multiply+0xc2>
 80109fc:	4663      	mov	r3, ip
 80109fe:	9a06      	ldr	r2, [sp, #24]
 8010a00:	509d      	str	r5, [r3, r2]
 8010a02:	9b01      	ldr	r3, [sp, #4]
 8010a04:	6818      	ldr	r0, [r3, #0]
 8010a06:	0c00      	lsrs	r0, r0, #16
 8010a08:	d020      	beq.n	8010a4c <__multiply+0x144>
 8010a0a:	4663      	mov	r3, ip
 8010a0c:	0025      	movs	r5, r4
 8010a0e:	4661      	mov	r1, ip
 8010a10:	2700      	movs	r7, #0
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	3514      	adds	r5, #20
 8010a16:	682a      	ldr	r2, [r5, #0]
 8010a18:	680e      	ldr	r6, [r1, #0]
 8010a1a:	b292      	uxth	r2, r2
 8010a1c:	4342      	muls	r2, r0
 8010a1e:	0c36      	lsrs	r6, r6, #16
 8010a20:	1992      	adds	r2, r2, r6
 8010a22:	19d2      	adds	r2, r2, r7
 8010a24:	0416      	lsls	r6, r2, #16
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	431e      	orrs	r6, r3
 8010a2a:	600e      	str	r6, [r1, #0]
 8010a2c:	cd40      	ldmia	r5!, {r6}
 8010a2e:	684b      	ldr	r3, [r1, #4]
 8010a30:	0c36      	lsrs	r6, r6, #16
 8010a32:	4346      	muls	r6, r0
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	0c12      	lsrs	r2, r2, #16
 8010a38:	18f3      	adds	r3, r6, r3
 8010a3a:	189b      	adds	r3, r3, r2
 8010a3c:	9a05      	ldr	r2, [sp, #20]
 8010a3e:	0c1f      	lsrs	r7, r3, #16
 8010a40:	3104      	adds	r1, #4
 8010a42:	42aa      	cmp	r2, r5
 8010a44:	d8e7      	bhi.n	8010a16 <__multiply+0x10e>
 8010a46:	4662      	mov	r2, ip
 8010a48:	9906      	ldr	r1, [sp, #24]
 8010a4a:	5053      	str	r3, [r2, r1]
 8010a4c:	9b01      	ldr	r3, [sp, #4]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	2304      	movs	r3, #4
 8010a54:	449c      	add	ip, r3
 8010a56:	e79b      	b.n	8010990 <__multiply+0x88>
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	9303      	str	r3, [sp, #12]
 8010a5e:	e79b      	b.n	8010998 <__multiply+0x90>
 8010a60:	08013e44 	.word	0x08013e44
 8010a64:	08013eb5 	.word	0x08013eb5

08010a68 <__pow5mult>:
 8010a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	0015      	movs	r5, r2
 8010a6e:	0007      	movs	r7, r0
 8010a70:	000e      	movs	r6, r1
 8010a72:	401a      	ands	r2, r3
 8010a74:	421d      	tst	r5, r3
 8010a76:	d008      	beq.n	8010a8a <__pow5mult+0x22>
 8010a78:	4925      	ldr	r1, [pc, #148]	; (8010b10 <__pow5mult+0xa8>)
 8010a7a:	3a01      	subs	r2, #1
 8010a7c:	0092      	lsls	r2, r2, #2
 8010a7e:	5852      	ldr	r2, [r2, r1]
 8010a80:	2300      	movs	r3, #0
 8010a82:	0031      	movs	r1, r6
 8010a84:	f7ff fe50 	bl	8010728 <__multadd>
 8010a88:	0006      	movs	r6, r0
 8010a8a:	10ad      	asrs	r5, r5, #2
 8010a8c:	d03d      	beq.n	8010b0a <__pow5mult+0xa2>
 8010a8e:	69fc      	ldr	r4, [r7, #28]
 8010a90:	2c00      	cmp	r4, #0
 8010a92:	d10f      	bne.n	8010ab4 <__pow5mult+0x4c>
 8010a94:	2010      	movs	r0, #16
 8010a96:	f7fc fa0f 	bl	800ceb8 <malloc>
 8010a9a:	1e02      	subs	r2, r0, #0
 8010a9c:	61f8      	str	r0, [r7, #28]
 8010a9e:	d105      	bne.n	8010aac <__pow5mult+0x44>
 8010aa0:	21b4      	movs	r1, #180	; 0xb4
 8010aa2:	4b1c      	ldr	r3, [pc, #112]	; (8010b14 <__pow5mult+0xac>)
 8010aa4:	481c      	ldr	r0, [pc, #112]	; (8010b18 <__pow5mult+0xb0>)
 8010aa6:	31ff      	adds	r1, #255	; 0xff
 8010aa8:	f7fe fb62 	bl	800f170 <__assert_func>
 8010aac:	6044      	str	r4, [r0, #4]
 8010aae:	6084      	str	r4, [r0, #8]
 8010ab0:	6004      	str	r4, [r0, #0]
 8010ab2:	60c4      	str	r4, [r0, #12]
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	689c      	ldr	r4, [r3, #8]
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	2c00      	cmp	r4, #0
 8010abc:	d108      	bne.n	8010ad0 <__pow5mult+0x68>
 8010abe:	0038      	movs	r0, r7
 8010ac0:	4916      	ldr	r1, [pc, #88]	; (8010b1c <__pow5mult+0xb4>)
 8010ac2:	f7ff ff09 	bl	80108d8 <__i2b>
 8010ac6:	9b01      	ldr	r3, [sp, #4]
 8010ac8:	0004      	movs	r4, r0
 8010aca:	6098      	str	r0, [r3, #8]
 8010acc:	2300      	movs	r3, #0
 8010ace:	6003      	str	r3, [r0, #0]
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	421d      	tst	r5, r3
 8010ad4:	d00a      	beq.n	8010aec <__pow5mult+0x84>
 8010ad6:	0031      	movs	r1, r6
 8010ad8:	0022      	movs	r2, r4
 8010ada:	0038      	movs	r0, r7
 8010adc:	f7ff ff14 	bl	8010908 <__multiply>
 8010ae0:	0031      	movs	r1, r6
 8010ae2:	9001      	str	r0, [sp, #4]
 8010ae4:	0038      	movs	r0, r7
 8010ae6:	f7ff fdfb 	bl	80106e0 <_Bfree>
 8010aea:	9e01      	ldr	r6, [sp, #4]
 8010aec:	106d      	asrs	r5, r5, #1
 8010aee:	d00c      	beq.n	8010b0a <__pow5mult+0xa2>
 8010af0:	6820      	ldr	r0, [r4, #0]
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d107      	bne.n	8010b06 <__pow5mult+0x9e>
 8010af6:	0022      	movs	r2, r4
 8010af8:	0021      	movs	r1, r4
 8010afa:	0038      	movs	r0, r7
 8010afc:	f7ff ff04 	bl	8010908 <__multiply>
 8010b00:	2300      	movs	r3, #0
 8010b02:	6020      	str	r0, [r4, #0]
 8010b04:	6003      	str	r3, [r0, #0]
 8010b06:	0004      	movs	r4, r0
 8010b08:	e7e2      	b.n	8010ad0 <__pow5mult+0x68>
 8010b0a:	0030      	movs	r0, r6
 8010b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b0e:	46c0      	nop			; (mov r8, r8)
 8010b10:	08014000 	.word	0x08014000
 8010b14:	08013d2a 	.word	0x08013d2a
 8010b18:	08013eb5 	.word	0x08013eb5
 8010b1c:	00000271 	.word	0x00000271

08010b20 <__lshift>:
 8010b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b22:	000c      	movs	r4, r1
 8010b24:	0017      	movs	r7, r2
 8010b26:	6923      	ldr	r3, [r4, #16]
 8010b28:	1155      	asrs	r5, r2, #5
 8010b2a:	b087      	sub	sp, #28
 8010b2c:	18eb      	adds	r3, r5, r3
 8010b2e:	9302      	str	r3, [sp, #8]
 8010b30:	3301      	adds	r3, #1
 8010b32:	9301      	str	r3, [sp, #4]
 8010b34:	6849      	ldr	r1, [r1, #4]
 8010b36:	68a3      	ldr	r3, [r4, #8]
 8010b38:	9004      	str	r0, [sp, #16]
 8010b3a:	9a01      	ldr	r2, [sp, #4]
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	db10      	blt.n	8010b62 <__lshift+0x42>
 8010b40:	9804      	ldr	r0, [sp, #16]
 8010b42:	f7ff fd89 	bl	8010658 <_Balloc>
 8010b46:	2300      	movs	r3, #0
 8010b48:	0002      	movs	r2, r0
 8010b4a:	0006      	movs	r6, r0
 8010b4c:	0019      	movs	r1, r3
 8010b4e:	3214      	adds	r2, #20
 8010b50:	4298      	cmp	r0, r3
 8010b52:	d10c      	bne.n	8010b6e <__lshift+0x4e>
 8010b54:	31df      	adds	r1, #223	; 0xdf
 8010b56:	0032      	movs	r2, r6
 8010b58:	4b26      	ldr	r3, [pc, #152]	; (8010bf4 <__lshift+0xd4>)
 8010b5a:	4827      	ldr	r0, [pc, #156]	; (8010bf8 <__lshift+0xd8>)
 8010b5c:	31ff      	adds	r1, #255	; 0xff
 8010b5e:	f7fe fb07 	bl	800f170 <__assert_func>
 8010b62:	3101      	adds	r1, #1
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	e7e8      	b.n	8010b3a <__lshift+0x1a>
 8010b68:	0098      	lsls	r0, r3, #2
 8010b6a:	5011      	str	r1, [r2, r0]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	42ab      	cmp	r3, r5
 8010b70:	dbfa      	blt.n	8010b68 <__lshift+0x48>
 8010b72:	43eb      	mvns	r3, r5
 8010b74:	17db      	asrs	r3, r3, #31
 8010b76:	401d      	ands	r5, r3
 8010b78:	211f      	movs	r1, #31
 8010b7a:	0023      	movs	r3, r4
 8010b7c:	0038      	movs	r0, r7
 8010b7e:	00ad      	lsls	r5, r5, #2
 8010b80:	1955      	adds	r5, r2, r5
 8010b82:	6922      	ldr	r2, [r4, #16]
 8010b84:	3314      	adds	r3, #20
 8010b86:	0092      	lsls	r2, r2, #2
 8010b88:	4008      	ands	r0, r1
 8010b8a:	4684      	mov	ip, r0
 8010b8c:	189a      	adds	r2, r3, r2
 8010b8e:	420f      	tst	r7, r1
 8010b90:	d02a      	beq.n	8010be8 <__lshift+0xc8>
 8010b92:	3101      	adds	r1, #1
 8010b94:	1a09      	subs	r1, r1, r0
 8010b96:	9105      	str	r1, [sp, #20]
 8010b98:	2100      	movs	r1, #0
 8010b9a:	9503      	str	r5, [sp, #12]
 8010b9c:	4667      	mov	r7, ip
 8010b9e:	6818      	ldr	r0, [r3, #0]
 8010ba0:	40b8      	lsls	r0, r7
 8010ba2:	4308      	orrs	r0, r1
 8010ba4:	9903      	ldr	r1, [sp, #12]
 8010ba6:	c101      	stmia	r1!, {r0}
 8010ba8:	9103      	str	r1, [sp, #12]
 8010baa:	9805      	ldr	r0, [sp, #20]
 8010bac:	cb02      	ldmia	r3!, {r1}
 8010bae:	40c1      	lsrs	r1, r0
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d8f3      	bhi.n	8010b9c <__lshift+0x7c>
 8010bb4:	0020      	movs	r0, r4
 8010bb6:	3015      	adds	r0, #21
 8010bb8:	2304      	movs	r3, #4
 8010bba:	4282      	cmp	r2, r0
 8010bbc:	d304      	bcc.n	8010bc8 <__lshift+0xa8>
 8010bbe:	1b13      	subs	r3, r2, r4
 8010bc0:	3b15      	subs	r3, #21
 8010bc2:	089b      	lsrs	r3, r3, #2
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	50e9      	str	r1, [r5, r3]
 8010bca:	2900      	cmp	r1, #0
 8010bcc:	d002      	beq.n	8010bd4 <__lshift+0xb4>
 8010bce:	9b02      	ldr	r3, [sp, #8]
 8010bd0:	3302      	adds	r3, #2
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	9804      	ldr	r0, [sp, #16]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	0021      	movs	r1, r4
 8010bdc:	6133      	str	r3, [r6, #16]
 8010bde:	f7ff fd7f 	bl	80106e0 <_Bfree>
 8010be2:	0030      	movs	r0, r6
 8010be4:	b007      	add	sp, #28
 8010be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010be8:	cb02      	ldmia	r3!, {r1}
 8010bea:	c502      	stmia	r5!, {r1}
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d8fb      	bhi.n	8010be8 <__lshift+0xc8>
 8010bf0:	e7f0      	b.n	8010bd4 <__lshift+0xb4>
 8010bf2:	46c0      	nop			; (mov r8, r8)
 8010bf4:	08013e44 	.word	0x08013e44
 8010bf8:	08013eb5 	.word	0x08013eb5

08010bfc <__mcmp>:
 8010bfc:	b530      	push	{r4, r5, lr}
 8010bfe:	690b      	ldr	r3, [r1, #16]
 8010c00:	6904      	ldr	r4, [r0, #16]
 8010c02:	0002      	movs	r2, r0
 8010c04:	1ae0      	subs	r0, r4, r3
 8010c06:	429c      	cmp	r4, r3
 8010c08:	d10e      	bne.n	8010c28 <__mcmp+0x2c>
 8010c0a:	3214      	adds	r2, #20
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	3114      	adds	r1, #20
 8010c10:	0014      	movs	r4, r2
 8010c12:	18c9      	adds	r1, r1, r3
 8010c14:	18d2      	adds	r2, r2, r3
 8010c16:	3a04      	subs	r2, #4
 8010c18:	3904      	subs	r1, #4
 8010c1a:	6815      	ldr	r5, [r2, #0]
 8010c1c:	680b      	ldr	r3, [r1, #0]
 8010c1e:	429d      	cmp	r5, r3
 8010c20:	d003      	beq.n	8010c2a <__mcmp+0x2e>
 8010c22:	2001      	movs	r0, #1
 8010c24:	429d      	cmp	r5, r3
 8010c26:	d303      	bcc.n	8010c30 <__mcmp+0x34>
 8010c28:	bd30      	pop	{r4, r5, pc}
 8010c2a:	4294      	cmp	r4, r2
 8010c2c:	d3f3      	bcc.n	8010c16 <__mcmp+0x1a>
 8010c2e:	e7fb      	b.n	8010c28 <__mcmp+0x2c>
 8010c30:	4240      	negs	r0, r0
 8010c32:	e7f9      	b.n	8010c28 <__mcmp+0x2c>

08010c34 <__mdiff>:
 8010c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c36:	000e      	movs	r6, r1
 8010c38:	0007      	movs	r7, r0
 8010c3a:	0011      	movs	r1, r2
 8010c3c:	0030      	movs	r0, r6
 8010c3e:	b087      	sub	sp, #28
 8010c40:	0014      	movs	r4, r2
 8010c42:	f7ff ffdb 	bl	8010bfc <__mcmp>
 8010c46:	1e05      	subs	r5, r0, #0
 8010c48:	d110      	bne.n	8010c6c <__mdiff+0x38>
 8010c4a:	0001      	movs	r1, r0
 8010c4c:	0038      	movs	r0, r7
 8010c4e:	f7ff fd03 	bl	8010658 <_Balloc>
 8010c52:	1e02      	subs	r2, r0, #0
 8010c54:	d104      	bne.n	8010c60 <__mdiff+0x2c>
 8010c56:	4b3f      	ldr	r3, [pc, #252]	; (8010d54 <__mdiff+0x120>)
 8010c58:	483f      	ldr	r0, [pc, #252]	; (8010d58 <__mdiff+0x124>)
 8010c5a:	4940      	ldr	r1, [pc, #256]	; (8010d5c <__mdiff+0x128>)
 8010c5c:	f7fe fa88 	bl	800f170 <__assert_func>
 8010c60:	2301      	movs	r3, #1
 8010c62:	6145      	str	r5, [r0, #20]
 8010c64:	6103      	str	r3, [r0, #16]
 8010c66:	0010      	movs	r0, r2
 8010c68:	b007      	add	sp, #28
 8010c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	2800      	cmp	r0, #0
 8010c72:	db04      	blt.n	8010c7e <__mdiff+0x4a>
 8010c74:	0023      	movs	r3, r4
 8010c76:	0034      	movs	r4, r6
 8010c78:	001e      	movs	r6, r3
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	9301      	str	r3, [sp, #4]
 8010c7e:	0038      	movs	r0, r7
 8010c80:	6861      	ldr	r1, [r4, #4]
 8010c82:	f7ff fce9 	bl	8010658 <_Balloc>
 8010c86:	1e02      	subs	r2, r0, #0
 8010c88:	d103      	bne.n	8010c92 <__mdiff+0x5e>
 8010c8a:	4b32      	ldr	r3, [pc, #200]	; (8010d54 <__mdiff+0x120>)
 8010c8c:	4832      	ldr	r0, [pc, #200]	; (8010d58 <__mdiff+0x124>)
 8010c8e:	4934      	ldr	r1, [pc, #208]	; (8010d60 <__mdiff+0x12c>)
 8010c90:	e7e4      	b.n	8010c5c <__mdiff+0x28>
 8010c92:	9b01      	ldr	r3, [sp, #4]
 8010c94:	2700      	movs	r7, #0
 8010c96:	60c3      	str	r3, [r0, #12]
 8010c98:	6920      	ldr	r0, [r4, #16]
 8010c9a:	3414      	adds	r4, #20
 8010c9c:	0083      	lsls	r3, r0, #2
 8010c9e:	18e3      	adds	r3, r4, r3
 8010ca0:	0021      	movs	r1, r4
 8010ca2:	9401      	str	r4, [sp, #4]
 8010ca4:	0034      	movs	r4, r6
 8010ca6:	9302      	str	r3, [sp, #8]
 8010ca8:	6933      	ldr	r3, [r6, #16]
 8010caa:	3414      	adds	r4, #20
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	18e3      	adds	r3, r4, r3
 8010cb0:	9303      	str	r3, [sp, #12]
 8010cb2:	0013      	movs	r3, r2
 8010cb4:	3314      	adds	r3, #20
 8010cb6:	469c      	mov	ip, r3
 8010cb8:	9305      	str	r3, [sp, #20]
 8010cba:	9104      	str	r1, [sp, #16]
 8010cbc:	9b04      	ldr	r3, [sp, #16]
 8010cbe:	cc02      	ldmia	r4!, {r1}
 8010cc0:	cb20      	ldmia	r3!, {r5}
 8010cc2:	9304      	str	r3, [sp, #16]
 8010cc4:	b2ab      	uxth	r3, r5
 8010cc6:	19df      	adds	r7, r3, r7
 8010cc8:	b28b      	uxth	r3, r1
 8010cca:	1afb      	subs	r3, r7, r3
 8010ccc:	0c09      	lsrs	r1, r1, #16
 8010cce:	0c2d      	lsrs	r5, r5, #16
 8010cd0:	1a6d      	subs	r5, r5, r1
 8010cd2:	1419      	asrs	r1, r3, #16
 8010cd4:	1869      	adds	r1, r5, r1
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	140f      	asrs	r7, r1, #16
 8010cda:	0409      	lsls	r1, r1, #16
 8010cdc:	4319      	orrs	r1, r3
 8010cde:	4663      	mov	r3, ip
 8010ce0:	c302      	stmia	r3!, {r1}
 8010ce2:	469c      	mov	ip, r3
 8010ce4:	9b03      	ldr	r3, [sp, #12]
 8010ce6:	42a3      	cmp	r3, r4
 8010ce8:	d8e8      	bhi.n	8010cbc <__mdiff+0x88>
 8010cea:	0031      	movs	r1, r6
 8010cec:	9c03      	ldr	r4, [sp, #12]
 8010cee:	3115      	adds	r1, #21
 8010cf0:	2304      	movs	r3, #4
 8010cf2:	428c      	cmp	r4, r1
 8010cf4:	d304      	bcc.n	8010d00 <__mdiff+0xcc>
 8010cf6:	1ba3      	subs	r3, r4, r6
 8010cf8:	3b15      	subs	r3, #21
 8010cfa:	089b      	lsrs	r3, r3, #2
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	9901      	ldr	r1, [sp, #4]
 8010d02:	18cd      	adds	r5, r1, r3
 8010d04:	9905      	ldr	r1, [sp, #20]
 8010d06:	002e      	movs	r6, r5
 8010d08:	18cb      	adds	r3, r1, r3
 8010d0a:	469c      	mov	ip, r3
 8010d0c:	9902      	ldr	r1, [sp, #8]
 8010d0e:	428e      	cmp	r6, r1
 8010d10:	d310      	bcc.n	8010d34 <__mdiff+0x100>
 8010d12:	9e02      	ldr	r6, [sp, #8]
 8010d14:	1ee9      	subs	r1, r5, #3
 8010d16:	2400      	movs	r4, #0
 8010d18:	428e      	cmp	r6, r1
 8010d1a:	d304      	bcc.n	8010d26 <__mdiff+0xf2>
 8010d1c:	0031      	movs	r1, r6
 8010d1e:	3103      	adds	r1, #3
 8010d20:	1b49      	subs	r1, r1, r5
 8010d22:	0889      	lsrs	r1, r1, #2
 8010d24:	008c      	lsls	r4, r1, #2
 8010d26:	191b      	adds	r3, r3, r4
 8010d28:	3b04      	subs	r3, #4
 8010d2a:	6819      	ldr	r1, [r3, #0]
 8010d2c:	2900      	cmp	r1, #0
 8010d2e:	d00f      	beq.n	8010d50 <__mdiff+0x11c>
 8010d30:	6110      	str	r0, [r2, #16]
 8010d32:	e798      	b.n	8010c66 <__mdiff+0x32>
 8010d34:	ce02      	ldmia	r6!, {r1}
 8010d36:	b28c      	uxth	r4, r1
 8010d38:	19e4      	adds	r4, r4, r7
 8010d3a:	0c0f      	lsrs	r7, r1, #16
 8010d3c:	1421      	asrs	r1, r4, #16
 8010d3e:	1879      	adds	r1, r7, r1
 8010d40:	b2a4      	uxth	r4, r4
 8010d42:	140f      	asrs	r7, r1, #16
 8010d44:	0409      	lsls	r1, r1, #16
 8010d46:	4321      	orrs	r1, r4
 8010d48:	4664      	mov	r4, ip
 8010d4a:	c402      	stmia	r4!, {r1}
 8010d4c:	46a4      	mov	ip, r4
 8010d4e:	e7dd      	b.n	8010d0c <__mdiff+0xd8>
 8010d50:	3801      	subs	r0, #1
 8010d52:	e7e9      	b.n	8010d28 <__mdiff+0xf4>
 8010d54:	08013e44 	.word	0x08013e44
 8010d58:	08013eb5 	.word	0x08013eb5
 8010d5c:	00000237 	.word	0x00000237
 8010d60:	00000245 	.word	0x00000245

08010d64 <__ulp>:
 8010d64:	2000      	movs	r0, #0
 8010d66:	4b0b      	ldr	r3, [pc, #44]	; (8010d94 <__ulp+0x30>)
 8010d68:	4019      	ands	r1, r3
 8010d6a:	4b0b      	ldr	r3, [pc, #44]	; (8010d98 <__ulp+0x34>)
 8010d6c:	18c9      	adds	r1, r1, r3
 8010d6e:	4281      	cmp	r1, r0
 8010d70:	dc06      	bgt.n	8010d80 <__ulp+0x1c>
 8010d72:	4249      	negs	r1, r1
 8010d74:	150b      	asrs	r3, r1, #20
 8010d76:	2b13      	cmp	r3, #19
 8010d78:	dc03      	bgt.n	8010d82 <__ulp+0x1e>
 8010d7a:	2180      	movs	r1, #128	; 0x80
 8010d7c:	0309      	lsls	r1, r1, #12
 8010d7e:	4119      	asrs	r1, r3
 8010d80:	4770      	bx	lr
 8010d82:	3b14      	subs	r3, #20
 8010d84:	2001      	movs	r0, #1
 8010d86:	2b1e      	cmp	r3, #30
 8010d88:	dc02      	bgt.n	8010d90 <__ulp+0x2c>
 8010d8a:	2080      	movs	r0, #128	; 0x80
 8010d8c:	0600      	lsls	r0, r0, #24
 8010d8e:	40d8      	lsrs	r0, r3
 8010d90:	2100      	movs	r1, #0
 8010d92:	e7f5      	b.n	8010d80 <__ulp+0x1c>
 8010d94:	7ff00000 	.word	0x7ff00000
 8010d98:	fcc00000 	.word	0xfcc00000

08010d9c <__b2d>:
 8010d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d9e:	0006      	movs	r6, r0
 8010da0:	6903      	ldr	r3, [r0, #16]
 8010da2:	3614      	adds	r6, #20
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	18f3      	adds	r3, r6, r3
 8010da8:	1f1d      	subs	r5, r3, #4
 8010daa:	682c      	ldr	r4, [r5, #0]
 8010dac:	000f      	movs	r7, r1
 8010dae:	0020      	movs	r0, r4
 8010db0:	9301      	str	r3, [sp, #4]
 8010db2:	f7ff fd49 	bl	8010848 <__hi0bits>
 8010db6:	2220      	movs	r2, #32
 8010db8:	1a12      	subs	r2, r2, r0
 8010dba:	603a      	str	r2, [r7, #0]
 8010dbc:	0003      	movs	r3, r0
 8010dbe:	4a1c      	ldr	r2, [pc, #112]	; (8010e30 <__b2d+0x94>)
 8010dc0:	280a      	cmp	r0, #10
 8010dc2:	dc15      	bgt.n	8010df0 <__b2d+0x54>
 8010dc4:	210b      	movs	r1, #11
 8010dc6:	0027      	movs	r7, r4
 8010dc8:	1a09      	subs	r1, r1, r0
 8010dca:	40cf      	lsrs	r7, r1
 8010dcc:	433a      	orrs	r2, r7
 8010dce:	468c      	mov	ip, r1
 8010dd0:	0011      	movs	r1, r2
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	42ae      	cmp	r6, r5
 8010dd6:	d202      	bcs.n	8010dde <__b2d+0x42>
 8010dd8:	9a01      	ldr	r2, [sp, #4]
 8010dda:	3a08      	subs	r2, #8
 8010ddc:	6812      	ldr	r2, [r2, #0]
 8010dde:	3315      	adds	r3, #21
 8010de0:	409c      	lsls	r4, r3
 8010de2:	4663      	mov	r3, ip
 8010de4:	0027      	movs	r7, r4
 8010de6:	40da      	lsrs	r2, r3
 8010de8:	4317      	orrs	r7, r2
 8010dea:	0038      	movs	r0, r7
 8010dec:	b003      	add	sp, #12
 8010dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010df0:	2700      	movs	r7, #0
 8010df2:	42ae      	cmp	r6, r5
 8010df4:	d202      	bcs.n	8010dfc <__b2d+0x60>
 8010df6:	9d01      	ldr	r5, [sp, #4]
 8010df8:	3d08      	subs	r5, #8
 8010dfa:	682f      	ldr	r7, [r5, #0]
 8010dfc:	210b      	movs	r1, #11
 8010dfe:	4249      	negs	r1, r1
 8010e00:	468c      	mov	ip, r1
 8010e02:	449c      	add	ip, r3
 8010e04:	2b0b      	cmp	r3, #11
 8010e06:	d010      	beq.n	8010e2a <__b2d+0x8e>
 8010e08:	4661      	mov	r1, ip
 8010e0a:	2320      	movs	r3, #32
 8010e0c:	408c      	lsls	r4, r1
 8010e0e:	1a5b      	subs	r3, r3, r1
 8010e10:	0039      	movs	r1, r7
 8010e12:	40d9      	lsrs	r1, r3
 8010e14:	430c      	orrs	r4, r1
 8010e16:	4322      	orrs	r2, r4
 8010e18:	0011      	movs	r1, r2
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	42b5      	cmp	r5, r6
 8010e1e:	d901      	bls.n	8010e24 <__b2d+0x88>
 8010e20:	3d04      	subs	r5, #4
 8010e22:	682a      	ldr	r2, [r5, #0]
 8010e24:	4664      	mov	r4, ip
 8010e26:	40a7      	lsls	r7, r4
 8010e28:	e7dd      	b.n	8010de6 <__b2d+0x4a>
 8010e2a:	4322      	orrs	r2, r4
 8010e2c:	0011      	movs	r1, r2
 8010e2e:	e7dc      	b.n	8010dea <__b2d+0x4e>
 8010e30:	3ff00000 	.word	0x3ff00000

08010e34 <__d2b>:
 8010e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e36:	2101      	movs	r1, #1
 8010e38:	0014      	movs	r4, r2
 8010e3a:	001d      	movs	r5, r3
 8010e3c:	9f08      	ldr	r7, [sp, #32]
 8010e3e:	f7ff fc0b 	bl	8010658 <_Balloc>
 8010e42:	1e06      	subs	r6, r0, #0
 8010e44:	d105      	bne.n	8010e52 <__d2b+0x1e>
 8010e46:	0032      	movs	r2, r6
 8010e48:	4b24      	ldr	r3, [pc, #144]	; (8010edc <__d2b+0xa8>)
 8010e4a:	4825      	ldr	r0, [pc, #148]	; (8010ee0 <__d2b+0xac>)
 8010e4c:	4925      	ldr	r1, [pc, #148]	; (8010ee4 <__d2b+0xb0>)
 8010e4e:	f7fe f98f 	bl	800f170 <__assert_func>
 8010e52:	032b      	lsls	r3, r5, #12
 8010e54:	006d      	lsls	r5, r5, #1
 8010e56:	0b1b      	lsrs	r3, r3, #12
 8010e58:	0d6d      	lsrs	r5, r5, #21
 8010e5a:	d125      	bne.n	8010ea8 <__d2b+0x74>
 8010e5c:	9301      	str	r3, [sp, #4]
 8010e5e:	2c00      	cmp	r4, #0
 8010e60:	d028      	beq.n	8010eb4 <__d2b+0x80>
 8010e62:	4668      	mov	r0, sp
 8010e64:	9400      	str	r4, [sp, #0]
 8010e66:	f7ff fd09 	bl	801087c <__lo0bits>
 8010e6a:	9b01      	ldr	r3, [sp, #4]
 8010e6c:	9900      	ldr	r1, [sp, #0]
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d01e      	beq.n	8010eb0 <__d2b+0x7c>
 8010e72:	2220      	movs	r2, #32
 8010e74:	001c      	movs	r4, r3
 8010e76:	1a12      	subs	r2, r2, r0
 8010e78:	4094      	lsls	r4, r2
 8010e7a:	0022      	movs	r2, r4
 8010e7c:	40c3      	lsrs	r3, r0
 8010e7e:	430a      	orrs	r2, r1
 8010e80:	6172      	str	r2, [r6, #20]
 8010e82:	9301      	str	r3, [sp, #4]
 8010e84:	9c01      	ldr	r4, [sp, #4]
 8010e86:	61b4      	str	r4, [r6, #24]
 8010e88:	1e63      	subs	r3, r4, #1
 8010e8a:	419c      	sbcs	r4, r3
 8010e8c:	3401      	adds	r4, #1
 8010e8e:	6134      	str	r4, [r6, #16]
 8010e90:	2d00      	cmp	r5, #0
 8010e92:	d017      	beq.n	8010ec4 <__d2b+0x90>
 8010e94:	2435      	movs	r4, #53	; 0x35
 8010e96:	4b14      	ldr	r3, [pc, #80]	; (8010ee8 <__d2b+0xb4>)
 8010e98:	18ed      	adds	r5, r5, r3
 8010e9a:	182d      	adds	r5, r5, r0
 8010e9c:	603d      	str	r5, [r7, #0]
 8010e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea0:	1a24      	subs	r4, r4, r0
 8010ea2:	601c      	str	r4, [r3, #0]
 8010ea4:	0030      	movs	r0, r6
 8010ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ea8:	2280      	movs	r2, #128	; 0x80
 8010eaa:	0352      	lsls	r2, r2, #13
 8010eac:	4313      	orrs	r3, r2
 8010eae:	e7d5      	b.n	8010e5c <__d2b+0x28>
 8010eb0:	6171      	str	r1, [r6, #20]
 8010eb2:	e7e7      	b.n	8010e84 <__d2b+0x50>
 8010eb4:	a801      	add	r0, sp, #4
 8010eb6:	f7ff fce1 	bl	801087c <__lo0bits>
 8010eba:	9b01      	ldr	r3, [sp, #4]
 8010ebc:	2401      	movs	r4, #1
 8010ebe:	6173      	str	r3, [r6, #20]
 8010ec0:	3020      	adds	r0, #32
 8010ec2:	e7e4      	b.n	8010e8e <__d2b+0x5a>
 8010ec4:	4b09      	ldr	r3, [pc, #36]	; (8010eec <__d2b+0xb8>)
 8010ec6:	18c0      	adds	r0, r0, r3
 8010ec8:	4b09      	ldr	r3, [pc, #36]	; (8010ef0 <__d2b+0xbc>)
 8010eca:	6038      	str	r0, [r7, #0]
 8010ecc:	18e3      	adds	r3, r4, r3
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	18f3      	adds	r3, r6, r3
 8010ed2:	6958      	ldr	r0, [r3, #20]
 8010ed4:	f7ff fcb8 	bl	8010848 <__hi0bits>
 8010ed8:	0164      	lsls	r4, r4, #5
 8010eda:	e7e0      	b.n	8010e9e <__d2b+0x6a>
 8010edc:	08013e44 	.word	0x08013e44
 8010ee0:	08013eb5 	.word	0x08013eb5
 8010ee4:	0000030f 	.word	0x0000030f
 8010ee8:	fffffbcd 	.word	0xfffffbcd
 8010eec:	fffffbce 	.word	0xfffffbce
 8010ef0:	3fffffff 	.word	0x3fffffff

08010ef4 <__ratio>:
 8010ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	000f      	movs	r7, r1
 8010efa:	a904      	add	r1, sp, #16
 8010efc:	0006      	movs	r6, r0
 8010efe:	f7ff ff4d 	bl	8010d9c <__b2d>
 8010f02:	9000      	str	r0, [sp, #0]
 8010f04:	9101      	str	r1, [sp, #4]
 8010f06:	9c00      	ldr	r4, [sp, #0]
 8010f08:	9d01      	ldr	r5, [sp, #4]
 8010f0a:	0038      	movs	r0, r7
 8010f0c:	a905      	add	r1, sp, #20
 8010f0e:	f7ff ff45 	bl	8010d9c <__b2d>
 8010f12:	9002      	str	r0, [sp, #8]
 8010f14:	9103      	str	r1, [sp, #12]
 8010f16:	9a02      	ldr	r2, [sp, #8]
 8010f18:	9b03      	ldr	r3, [sp, #12]
 8010f1a:	6930      	ldr	r0, [r6, #16]
 8010f1c:	6939      	ldr	r1, [r7, #16]
 8010f1e:	9e04      	ldr	r6, [sp, #16]
 8010f20:	1a40      	subs	r0, r0, r1
 8010f22:	9905      	ldr	r1, [sp, #20]
 8010f24:	0140      	lsls	r0, r0, #5
 8010f26:	1a71      	subs	r1, r6, r1
 8010f28:	1841      	adds	r1, r0, r1
 8010f2a:	0508      	lsls	r0, r1, #20
 8010f2c:	2900      	cmp	r1, #0
 8010f2e:	dd07      	ble.n	8010f40 <__ratio+0x4c>
 8010f30:	9901      	ldr	r1, [sp, #4]
 8010f32:	1845      	adds	r5, r0, r1
 8010f34:	0020      	movs	r0, r4
 8010f36:	0029      	movs	r1, r5
 8010f38:	f7f0 fdd2 	bl	8001ae0 <__aeabi_ddiv>
 8010f3c:	b007      	add	sp, #28
 8010f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f40:	9903      	ldr	r1, [sp, #12]
 8010f42:	1a0b      	subs	r3, r1, r0
 8010f44:	e7f6      	b.n	8010f34 <__ratio+0x40>

08010f46 <__copybits>:
 8010f46:	b570      	push	{r4, r5, r6, lr}
 8010f48:	0014      	movs	r4, r2
 8010f4a:	0005      	movs	r5, r0
 8010f4c:	3901      	subs	r1, #1
 8010f4e:	6913      	ldr	r3, [r2, #16]
 8010f50:	1149      	asrs	r1, r1, #5
 8010f52:	3101      	adds	r1, #1
 8010f54:	0089      	lsls	r1, r1, #2
 8010f56:	3414      	adds	r4, #20
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	1841      	adds	r1, r0, r1
 8010f5c:	18e3      	adds	r3, r4, r3
 8010f5e:	42a3      	cmp	r3, r4
 8010f60:	d80d      	bhi.n	8010f7e <__copybits+0x38>
 8010f62:	0014      	movs	r4, r2
 8010f64:	3411      	adds	r4, #17
 8010f66:	2500      	movs	r5, #0
 8010f68:	429c      	cmp	r4, r3
 8010f6a:	d803      	bhi.n	8010f74 <__copybits+0x2e>
 8010f6c:	1a9b      	subs	r3, r3, r2
 8010f6e:	3b11      	subs	r3, #17
 8010f70:	089b      	lsrs	r3, r3, #2
 8010f72:	009d      	lsls	r5, r3, #2
 8010f74:	2300      	movs	r3, #0
 8010f76:	1940      	adds	r0, r0, r5
 8010f78:	4281      	cmp	r1, r0
 8010f7a:	d803      	bhi.n	8010f84 <__copybits+0x3e>
 8010f7c:	bd70      	pop	{r4, r5, r6, pc}
 8010f7e:	cc40      	ldmia	r4!, {r6}
 8010f80:	c540      	stmia	r5!, {r6}
 8010f82:	e7ec      	b.n	8010f5e <__copybits+0x18>
 8010f84:	c008      	stmia	r0!, {r3}
 8010f86:	e7f7      	b.n	8010f78 <__copybits+0x32>

08010f88 <__any_on>:
 8010f88:	0002      	movs	r2, r0
 8010f8a:	6900      	ldr	r0, [r0, #16]
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	3214      	adds	r2, #20
 8010f90:	114b      	asrs	r3, r1, #5
 8010f92:	4298      	cmp	r0, r3
 8010f94:	db13      	blt.n	8010fbe <__any_on+0x36>
 8010f96:	dd0c      	ble.n	8010fb2 <__any_on+0x2a>
 8010f98:	241f      	movs	r4, #31
 8010f9a:	0008      	movs	r0, r1
 8010f9c:	4020      	ands	r0, r4
 8010f9e:	4221      	tst	r1, r4
 8010fa0:	d007      	beq.n	8010fb2 <__any_on+0x2a>
 8010fa2:	0099      	lsls	r1, r3, #2
 8010fa4:	588c      	ldr	r4, [r1, r2]
 8010fa6:	0021      	movs	r1, r4
 8010fa8:	40c1      	lsrs	r1, r0
 8010faa:	4081      	lsls	r1, r0
 8010fac:	2001      	movs	r0, #1
 8010fae:	428c      	cmp	r4, r1
 8010fb0:	d104      	bne.n	8010fbc <__any_on+0x34>
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	18d3      	adds	r3, r2, r3
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d803      	bhi.n	8010fc2 <__any_on+0x3a>
 8010fba:	2000      	movs	r0, #0
 8010fbc:	bd10      	pop	{r4, pc}
 8010fbe:	0003      	movs	r3, r0
 8010fc0:	e7f7      	b.n	8010fb2 <__any_on+0x2a>
 8010fc2:	3b04      	subs	r3, #4
 8010fc4:	6819      	ldr	r1, [r3, #0]
 8010fc6:	2900      	cmp	r1, #0
 8010fc8:	d0f5      	beq.n	8010fb6 <__any_on+0x2e>
 8010fca:	2001      	movs	r0, #1
 8010fcc:	e7f6      	b.n	8010fbc <__any_on+0x34>

08010fce <__ascii_wctomb>:
 8010fce:	0003      	movs	r3, r0
 8010fd0:	1e08      	subs	r0, r1, #0
 8010fd2:	d005      	beq.n	8010fe0 <__ascii_wctomb+0x12>
 8010fd4:	2aff      	cmp	r2, #255	; 0xff
 8010fd6:	d904      	bls.n	8010fe2 <__ascii_wctomb+0x14>
 8010fd8:	228a      	movs	r2, #138	; 0x8a
 8010fda:	2001      	movs	r0, #1
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	4240      	negs	r0, r0
 8010fe0:	4770      	bx	lr
 8010fe2:	2001      	movs	r0, #1
 8010fe4:	700a      	strb	r2, [r1, #0]
 8010fe6:	e7fb      	b.n	8010fe0 <__ascii_wctomb+0x12>

08010fe8 <__ssputs_r>:
 8010fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fea:	b085      	sub	sp, #20
 8010fec:	9301      	str	r3, [sp, #4]
 8010fee:	9203      	str	r2, [sp, #12]
 8010ff0:	688e      	ldr	r6, [r1, #8]
 8010ff2:	9a01      	ldr	r2, [sp, #4]
 8010ff4:	0007      	movs	r7, r0
 8010ff6:	000c      	movs	r4, r1
 8010ff8:	680b      	ldr	r3, [r1, #0]
 8010ffa:	4296      	cmp	r6, r2
 8010ffc:	d831      	bhi.n	8011062 <__ssputs_r+0x7a>
 8010ffe:	898a      	ldrh	r2, [r1, #12]
 8011000:	2190      	movs	r1, #144	; 0x90
 8011002:	00c9      	lsls	r1, r1, #3
 8011004:	420a      	tst	r2, r1
 8011006:	d029      	beq.n	801105c <__ssputs_r+0x74>
 8011008:	2003      	movs	r0, #3
 801100a:	6921      	ldr	r1, [r4, #16]
 801100c:	1a5b      	subs	r3, r3, r1
 801100e:	9302      	str	r3, [sp, #8]
 8011010:	6963      	ldr	r3, [r4, #20]
 8011012:	4343      	muls	r3, r0
 8011014:	0fdd      	lsrs	r5, r3, #31
 8011016:	18ed      	adds	r5, r5, r3
 8011018:	9b01      	ldr	r3, [sp, #4]
 801101a:	9802      	ldr	r0, [sp, #8]
 801101c:	3301      	adds	r3, #1
 801101e:	181b      	adds	r3, r3, r0
 8011020:	106d      	asrs	r5, r5, #1
 8011022:	42ab      	cmp	r3, r5
 8011024:	d900      	bls.n	8011028 <__ssputs_r+0x40>
 8011026:	001d      	movs	r5, r3
 8011028:	0552      	lsls	r2, r2, #21
 801102a:	d529      	bpl.n	8011080 <__ssputs_r+0x98>
 801102c:	0029      	movs	r1, r5
 801102e:	0038      	movs	r0, r7
 8011030:	f7fb ff6e 	bl	800cf10 <_malloc_r>
 8011034:	1e06      	subs	r6, r0, #0
 8011036:	d02d      	beq.n	8011094 <__ssputs_r+0xac>
 8011038:	9a02      	ldr	r2, [sp, #8]
 801103a:	6921      	ldr	r1, [r4, #16]
 801103c:	f7fe f884 	bl	800f148 <memcpy>
 8011040:	89a2      	ldrh	r2, [r4, #12]
 8011042:	4b19      	ldr	r3, [pc, #100]	; (80110a8 <__ssputs_r+0xc0>)
 8011044:	401a      	ands	r2, r3
 8011046:	2380      	movs	r3, #128	; 0x80
 8011048:	4313      	orrs	r3, r2
 801104a:	81a3      	strh	r3, [r4, #12]
 801104c:	9b02      	ldr	r3, [sp, #8]
 801104e:	6126      	str	r6, [r4, #16]
 8011050:	18f6      	adds	r6, r6, r3
 8011052:	6026      	str	r6, [r4, #0]
 8011054:	6165      	str	r5, [r4, #20]
 8011056:	9e01      	ldr	r6, [sp, #4]
 8011058:	1aed      	subs	r5, r5, r3
 801105a:	60a5      	str	r5, [r4, #8]
 801105c:	9b01      	ldr	r3, [sp, #4]
 801105e:	429e      	cmp	r6, r3
 8011060:	d900      	bls.n	8011064 <__ssputs_r+0x7c>
 8011062:	9e01      	ldr	r6, [sp, #4]
 8011064:	0032      	movs	r2, r6
 8011066:	9903      	ldr	r1, [sp, #12]
 8011068:	6820      	ldr	r0, [r4, #0]
 801106a:	f000 f9e5 	bl	8011438 <memmove>
 801106e:	2000      	movs	r0, #0
 8011070:	68a3      	ldr	r3, [r4, #8]
 8011072:	1b9b      	subs	r3, r3, r6
 8011074:	60a3      	str	r3, [r4, #8]
 8011076:	6823      	ldr	r3, [r4, #0]
 8011078:	199b      	adds	r3, r3, r6
 801107a:	6023      	str	r3, [r4, #0]
 801107c:	b005      	add	sp, #20
 801107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011080:	002a      	movs	r2, r5
 8011082:	0038      	movs	r0, r7
 8011084:	f000 fa1f 	bl	80114c6 <_realloc_r>
 8011088:	1e06      	subs	r6, r0, #0
 801108a:	d1df      	bne.n	801104c <__ssputs_r+0x64>
 801108c:	0038      	movs	r0, r7
 801108e:	6921      	ldr	r1, [r4, #16]
 8011090:	f7fe ff2a 	bl	800fee8 <_free_r>
 8011094:	230c      	movs	r3, #12
 8011096:	2001      	movs	r0, #1
 8011098:	603b      	str	r3, [r7, #0]
 801109a:	89a2      	ldrh	r2, [r4, #12]
 801109c:	3334      	adds	r3, #52	; 0x34
 801109e:	4313      	orrs	r3, r2
 80110a0:	81a3      	strh	r3, [r4, #12]
 80110a2:	4240      	negs	r0, r0
 80110a4:	e7ea      	b.n	801107c <__ssputs_r+0x94>
 80110a6:	46c0      	nop			; (mov r8, r8)
 80110a8:	fffffb7f 	.word	0xfffffb7f

080110ac <_svfiprintf_r>:
 80110ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ae:	b0a1      	sub	sp, #132	; 0x84
 80110b0:	9003      	str	r0, [sp, #12]
 80110b2:	001d      	movs	r5, r3
 80110b4:	898b      	ldrh	r3, [r1, #12]
 80110b6:	000f      	movs	r7, r1
 80110b8:	0016      	movs	r6, r2
 80110ba:	061b      	lsls	r3, r3, #24
 80110bc:	d511      	bpl.n	80110e2 <_svfiprintf_r+0x36>
 80110be:	690b      	ldr	r3, [r1, #16]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d10e      	bne.n	80110e2 <_svfiprintf_r+0x36>
 80110c4:	2140      	movs	r1, #64	; 0x40
 80110c6:	f7fb ff23 	bl	800cf10 <_malloc_r>
 80110ca:	6038      	str	r0, [r7, #0]
 80110cc:	6138      	str	r0, [r7, #16]
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d105      	bne.n	80110de <_svfiprintf_r+0x32>
 80110d2:	230c      	movs	r3, #12
 80110d4:	9a03      	ldr	r2, [sp, #12]
 80110d6:	3801      	subs	r0, #1
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	b021      	add	sp, #132	; 0x84
 80110dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110de:	2340      	movs	r3, #64	; 0x40
 80110e0:	617b      	str	r3, [r7, #20]
 80110e2:	2300      	movs	r3, #0
 80110e4:	ac08      	add	r4, sp, #32
 80110e6:	6163      	str	r3, [r4, #20]
 80110e8:	3320      	adds	r3, #32
 80110ea:	7663      	strb	r3, [r4, #25]
 80110ec:	3310      	adds	r3, #16
 80110ee:	76a3      	strb	r3, [r4, #26]
 80110f0:	9507      	str	r5, [sp, #28]
 80110f2:	0035      	movs	r5, r6
 80110f4:	782b      	ldrb	r3, [r5, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d001      	beq.n	80110fe <_svfiprintf_r+0x52>
 80110fa:	2b25      	cmp	r3, #37	; 0x25
 80110fc:	d148      	bne.n	8011190 <_svfiprintf_r+0xe4>
 80110fe:	1bab      	subs	r3, r5, r6
 8011100:	9305      	str	r3, [sp, #20]
 8011102:	42b5      	cmp	r5, r6
 8011104:	d00b      	beq.n	801111e <_svfiprintf_r+0x72>
 8011106:	0032      	movs	r2, r6
 8011108:	0039      	movs	r1, r7
 801110a:	9803      	ldr	r0, [sp, #12]
 801110c:	f7ff ff6c 	bl	8010fe8 <__ssputs_r>
 8011110:	3001      	adds	r0, #1
 8011112:	d100      	bne.n	8011116 <_svfiprintf_r+0x6a>
 8011114:	e0af      	b.n	8011276 <_svfiprintf_r+0x1ca>
 8011116:	6963      	ldr	r3, [r4, #20]
 8011118:	9a05      	ldr	r2, [sp, #20]
 801111a:	189b      	adds	r3, r3, r2
 801111c:	6163      	str	r3, [r4, #20]
 801111e:	782b      	ldrb	r3, [r5, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d100      	bne.n	8011126 <_svfiprintf_r+0x7a>
 8011124:	e0a7      	b.n	8011276 <_svfiprintf_r+0x1ca>
 8011126:	2201      	movs	r2, #1
 8011128:	2300      	movs	r3, #0
 801112a:	4252      	negs	r2, r2
 801112c:	6062      	str	r2, [r4, #4]
 801112e:	a904      	add	r1, sp, #16
 8011130:	3254      	adds	r2, #84	; 0x54
 8011132:	1852      	adds	r2, r2, r1
 8011134:	1c6e      	adds	r6, r5, #1
 8011136:	6023      	str	r3, [r4, #0]
 8011138:	60e3      	str	r3, [r4, #12]
 801113a:	60a3      	str	r3, [r4, #8]
 801113c:	7013      	strb	r3, [r2, #0]
 801113e:	65a3      	str	r3, [r4, #88]	; 0x58
 8011140:	4b55      	ldr	r3, [pc, #340]	; (8011298 <_svfiprintf_r+0x1ec>)
 8011142:	2205      	movs	r2, #5
 8011144:	0018      	movs	r0, r3
 8011146:	7831      	ldrb	r1, [r6, #0]
 8011148:	9305      	str	r3, [sp, #20]
 801114a:	f7fd fff2 	bl	800f132 <memchr>
 801114e:	1c75      	adds	r5, r6, #1
 8011150:	2800      	cmp	r0, #0
 8011152:	d11f      	bne.n	8011194 <_svfiprintf_r+0xe8>
 8011154:	6822      	ldr	r2, [r4, #0]
 8011156:	06d3      	lsls	r3, r2, #27
 8011158:	d504      	bpl.n	8011164 <_svfiprintf_r+0xb8>
 801115a:	2353      	movs	r3, #83	; 0x53
 801115c:	a904      	add	r1, sp, #16
 801115e:	185b      	adds	r3, r3, r1
 8011160:	2120      	movs	r1, #32
 8011162:	7019      	strb	r1, [r3, #0]
 8011164:	0713      	lsls	r3, r2, #28
 8011166:	d504      	bpl.n	8011172 <_svfiprintf_r+0xc6>
 8011168:	2353      	movs	r3, #83	; 0x53
 801116a:	a904      	add	r1, sp, #16
 801116c:	185b      	adds	r3, r3, r1
 801116e:	212b      	movs	r1, #43	; 0x2b
 8011170:	7019      	strb	r1, [r3, #0]
 8011172:	7833      	ldrb	r3, [r6, #0]
 8011174:	2b2a      	cmp	r3, #42	; 0x2a
 8011176:	d016      	beq.n	80111a6 <_svfiprintf_r+0xfa>
 8011178:	0035      	movs	r5, r6
 801117a:	2100      	movs	r1, #0
 801117c:	200a      	movs	r0, #10
 801117e:	68e3      	ldr	r3, [r4, #12]
 8011180:	782a      	ldrb	r2, [r5, #0]
 8011182:	1c6e      	adds	r6, r5, #1
 8011184:	3a30      	subs	r2, #48	; 0x30
 8011186:	2a09      	cmp	r2, #9
 8011188:	d94e      	bls.n	8011228 <_svfiprintf_r+0x17c>
 801118a:	2900      	cmp	r1, #0
 801118c:	d111      	bne.n	80111b2 <_svfiprintf_r+0x106>
 801118e:	e017      	b.n	80111c0 <_svfiprintf_r+0x114>
 8011190:	3501      	adds	r5, #1
 8011192:	e7af      	b.n	80110f4 <_svfiprintf_r+0x48>
 8011194:	9b05      	ldr	r3, [sp, #20]
 8011196:	6822      	ldr	r2, [r4, #0]
 8011198:	1ac0      	subs	r0, r0, r3
 801119a:	2301      	movs	r3, #1
 801119c:	4083      	lsls	r3, r0
 801119e:	4313      	orrs	r3, r2
 80111a0:	002e      	movs	r6, r5
 80111a2:	6023      	str	r3, [r4, #0]
 80111a4:	e7cc      	b.n	8011140 <_svfiprintf_r+0x94>
 80111a6:	9b07      	ldr	r3, [sp, #28]
 80111a8:	1d19      	adds	r1, r3, #4
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	9107      	str	r1, [sp, #28]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	db01      	blt.n	80111b6 <_svfiprintf_r+0x10a>
 80111b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80111b4:	e004      	b.n	80111c0 <_svfiprintf_r+0x114>
 80111b6:	425b      	negs	r3, r3
 80111b8:	60e3      	str	r3, [r4, #12]
 80111ba:	2302      	movs	r3, #2
 80111bc:	4313      	orrs	r3, r2
 80111be:	6023      	str	r3, [r4, #0]
 80111c0:	782b      	ldrb	r3, [r5, #0]
 80111c2:	2b2e      	cmp	r3, #46	; 0x2e
 80111c4:	d10a      	bne.n	80111dc <_svfiprintf_r+0x130>
 80111c6:	786b      	ldrb	r3, [r5, #1]
 80111c8:	2b2a      	cmp	r3, #42	; 0x2a
 80111ca:	d135      	bne.n	8011238 <_svfiprintf_r+0x18c>
 80111cc:	9b07      	ldr	r3, [sp, #28]
 80111ce:	3502      	adds	r5, #2
 80111d0:	1d1a      	adds	r2, r3, #4
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	9207      	str	r2, [sp, #28]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	db2b      	blt.n	8011232 <_svfiprintf_r+0x186>
 80111da:	9309      	str	r3, [sp, #36]	; 0x24
 80111dc:	4e2f      	ldr	r6, [pc, #188]	; (801129c <_svfiprintf_r+0x1f0>)
 80111de:	2203      	movs	r2, #3
 80111e0:	0030      	movs	r0, r6
 80111e2:	7829      	ldrb	r1, [r5, #0]
 80111e4:	f7fd ffa5 	bl	800f132 <memchr>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d006      	beq.n	80111fa <_svfiprintf_r+0x14e>
 80111ec:	2340      	movs	r3, #64	; 0x40
 80111ee:	1b80      	subs	r0, r0, r6
 80111f0:	4083      	lsls	r3, r0
 80111f2:	6822      	ldr	r2, [r4, #0]
 80111f4:	3501      	adds	r5, #1
 80111f6:	4313      	orrs	r3, r2
 80111f8:	6023      	str	r3, [r4, #0]
 80111fa:	7829      	ldrb	r1, [r5, #0]
 80111fc:	2206      	movs	r2, #6
 80111fe:	4828      	ldr	r0, [pc, #160]	; (80112a0 <_svfiprintf_r+0x1f4>)
 8011200:	1c6e      	adds	r6, r5, #1
 8011202:	7621      	strb	r1, [r4, #24]
 8011204:	f7fd ff95 	bl	800f132 <memchr>
 8011208:	2800      	cmp	r0, #0
 801120a:	d03c      	beq.n	8011286 <_svfiprintf_r+0x1da>
 801120c:	4b25      	ldr	r3, [pc, #148]	; (80112a4 <_svfiprintf_r+0x1f8>)
 801120e:	2b00      	cmp	r3, #0
 8011210:	d125      	bne.n	801125e <_svfiprintf_r+0x1b2>
 8011212:	2207      	movs	r2, #7
 8011214:	9b07      	ldr	r3, [sp, #28]
 8011216:	3307      	adds	r3, #7
 8011218:	4393      	bics	r3, r2
 801121a:	3308      	adds	r3, #8
 801121c:	9307      	str	r3, [sp, #28]
 801121e:	6963      	ldr	r3, [r4, #20]
 8011220:	9a04      	ldr	r2, [sp, #16]
 8011222:	189b      	adds	r3, r3, r2
 8011224:	6163      	str	r3, [r4, #20]
 8011226:	e764      	b.n	80110f2 <_svfiprintf_r+0x46>
 8011228:	4343      	muls	r3, r0
 801122a:	0035      	movs	r5, r6
 801122c:	2101      	movs	r1, #1
 801122e:	189b      	adds	r3, r3, r2
 8011230:	e7a6      	b.n	8011180 <_svfiprintf_r+0xd4>
 8011232:	2301      	movs	r3, #1
 8011234:	425b      	negs	r3, r3
 8011236:	e7d0      	b.n	80111da <_svfiprintf_r+0x12e>
 8011238:	2300      	movs	r3, #0
 801123a:	200a      	movs	r0, #10
 801123c:	001a      	movs	r2, r3
 801123e:	3501      	adds	r5, #1
 8011240:	6063      	str	r3, [r4, #4]
 8011242:	7829      	ldrb	r1, [r5, #0]
 8011244:	1c6e      	adds	r6, r5, #1
 8011246:	3930      	subs	r1, #48	; 0x30
 8011248:	2909      	cmp	r1, #9
 801124a:	d903      	bls.n	8011254 <_svfiprintf_r+0x1a8>
 801124c:	2b00      	cmp	r3, #0
 801124e:	d0c5      	beq.n	80111dc <_svfiprintf_r+0x130>
 8011250:	9209      	str	r2, [sp, #36]	; 0x24
 8011252:	e7c3      	b.n	80111dc <_svfiprintf_r+0x130>
 8011254:	4342      	muls	r2, r0
 8011256:	0035      	movs	r5, r6
 8011258:	2301      	movs	r3, #1
 801125a:	1852      	adds	r2, r2, r1
 801125c:	e7f1      	b.n	8011242 <_svfiprintf_r+0x196>
 801125e:	aa07      	add	r2, sp, #28
 8011260:	9200      	str	r2, [sp, #0]
 8011262:	0021      	movs	r1, r4
 8011264:	003a      	movs	r2, r7
 8011266:	4b10      	ldr	r3, [pc, #64]	; (80112a8 <_svfiprintf_r+0x1fc>)
 8011268:	9803      	ldr	r0, [sp, #12]
 801126a:	f7fc fe59 	bl	800df20 <_printf_float>
 801126e:	9004      	str	r0, [sp, #16]
 8011270:	9b04      	ldr	r3, [sp, #16]
 8011272:	3301      	adds	r3, #1
 8011274:	d1d3      	bne.n	801121e <_svfiprintf_r+0x172>
 8011276:	89bb      	ldrh	r3, [r7, #12]
 8011278:	980d      	ldr	r0, [sp, #52]	; 0x34
 801127a:	065b      	lsls	r3, r3, #25
 801127c:	d400      	bmi.n	8011280 <_svfiprintf_r+0x1d4>
 801127e:	e72c      	b.n	80110da <_svfiprintf_r+0x2e>
 8011280:	2001      	movs	r0, #1
 8011282:	4240      	negs	r0, r0
 8011284:	e729      	b.n	80110da <_svfiprintf_r+0x2e>
 8011286:	aa07      	add	r2, sp, #28
 8011288:	9200      	str	r2, [sp, #0]
 801128a:	0021      	movs	r1, r4
 801128c:	003a      	movs	r2, r7
 801128e:	4b06      	ldr	r3, [pc, #24]	; (80112a8 <_svfiprintf_r+0x1fc>)
 8011290:	9803      	ldr	r0, [sp, #12]
 8011292:	f7fd f90b 	bl	800e4ac <_printf_i>
 8011296:	e7ea      	b.n	801126e <_svfiprintf_r+0x1c2>
 8011298:	0801400c 	.word	0x0801400c
 801129c:	08014012 	.word	0x08014012
 80112a0:	08014016 	.word	0x08014016
 80112a4:	0800df21 	.word	0x0800df21
 80112a8:	08010fe9 	.word	0x08010fe9

080112ac <__sflush_r>:
 80112ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112ae:	898b      	ldrh	r3, [r1, #12]
 80112b0:	0005      	movs	r5, r0
 80112b2:	000c      	movs	r4, r1
 80112b4:	071a      	lsls	r2, r3, #28
 80112b6:	d45c      	bmi.n	8011372 <__sflush_r+0xc6>
 80112b8:	684a      	ldr	r2, [r1, #4]
 80112ba:	2a00      	cmp	r2, #0
 80112bc:	dc04      	bgt.n	80112c8 <__sflush_r+0x1c>
 80112be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80112c0:	2a00      	cmp	r2, #0
 80112c2:	dc01      	bgt.n	80112c8 <__sflush_r+0x1c>
 80112c4:	2000      	movs	r0, #0
 80112c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80112c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80112ca:	2f00      	cmp	r7, #0
 80112cc:	d0fa      	beq.n	80112c4 <__sflush_r+0x18>
 80112ce:	2200      	movs	r2, #0
 80112d0:	2080      	movs	r0, #128	; 0x80
 80112d2:	682e      	ldr	r6, [r5, #0]
 80112d4:	602a      	str	r2, [r5, #0]
 80112d6:	001a      	movs	r2, r3
 80112d8:	0140      	lsls	r0, r0, #5
 80112da:	6a21      	ldr	r1, [r4, #32]
 80112dc:	4002      	ands	r2, r0
 80112de:	4203      	tst	r3, r0
 80112e0:	d034      	beq.n	801134c <__sflush_r+0xa0>
 80112e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112e4:	89a3      	ldrh	r3, [r4, #12]
 80112e6:	075b      	lsls	r3, r3, #29
 80112e8:	d506      	bpl.n	80112f8 <__sflush_r+0x4c>
 80112ea:	6863      	ldr	r3, [r4, #4]
 80112ec:	1ac0      	subs	r0, r0, r3
 80112ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <__sflush_r+0x4c>
 80112f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112f6:	1ac0      	subs	r0, r0, r3
 80112f8:	0002      	movs	r2, r0
 80112fa:	2300      	movs	r3, #0
 80112fc:	0028      	movs	r0, r5
 80112fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011300:	6a21      	ldr	r1, [r4, #32]
 8011302:	47b8      	blx	r7
 8011304:	89a2      	ldrh	r2, [r4, #12]
 8011306:	1c43      	adds	r3, r0, #1
 8011308:	d106      	bne.n	8011318 <__sflush_r+0x6c>
 801130a:	6829      	ldr	r1, [r5, #0]
 801130c:	291d      	cmp	r1, #29
 801130e:	d82c      	bhi.n	801136a <__sflush_r+0xbe>
 8011310:	4b2a      	ldr	r3, [pc, #168]	; (80113bc <__sflush_r+0x110>)
 8011312:	410b      	asrs	r3, r1
 8011314:	07db      	lsls	r3, r3, #31
 8011316:	d428      	bmi.n	801136a <__sflush_r+0xbe>
 8011318:	2300      	movs	r3, #0
 801131a:	6063      	str	r3, [r4, #4]
 801131c:	6923      	ldr	r3, [r4, #16]
 801131e:	6023      	str	r3, [r4, #0]
 8011320:	04d2      	lsls	r2, r2, #19
 8011322:	d505      	bpl.n	8011330 <__sflush_r+0x84>
 8011324:	1c43      	adds	r3, r0, #1
 8011326:	d102      	bne.n	801132e <__sflush_r+0x82>
 8011328:	682b      	ldr	r3, [r5, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d100      	bne.n	8011330 <__sflush_r+0x84>
 801132e:	6560      	str	r0, [r4, #84]	; 0x54
 8011330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011332:	602e      	str	r6, [r5, #0]
 8011334:	2900      	cmp	r1, #0
 8011336:	d0c5      	beq.n	80112c4 <__sflush_r+0x18>
 8011338:	0023      	movs	r3, r4
 801133a:	3344      	adds	r3, #68	; 0x44
 801133c:	4299      	cmp	r1, r3
 801133e:	d002      	beq.n	8011346 <__sflush_r+0x9a>
 8011340:	0028      	movs	r0, r5
 8011342:	f7fe fdd1 	bl	800fee8 <_free_r>
 8011346:	2000      	movs	r0, #0
 8011348:	6360      	str	r0, [r4, #52]	; 0x34
 801134a:	e7bc      	b.n	80112c6 <__sflush_r+0x1a>
 801134c:	2301      	movs	r3, #1
 801134e:	0028      	movs	r0, r5
 8011350:	47b8      	blx	r7
 8011352:	1c43      	adds	r3, r0, #1
 8011354:	d1c6      	bne.n	80112e4 <__sflush_r+0x38>
 8011356:	682b      	ldr	r3, [r5, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d0c3      	beq.n	80112e4 <__sflush_r+0x38>
 801135c:	2b1d      	cmp	r3, #29
 801135e:	d001      	beq.n	8011364 <__sflush_r+0xb8>
 8011360:	2b16      	cmp	r3, #22
 8011362:	d101      	bne.n	8011368 <__sflush_r+0xbc>
 8011364:	602e      	str	r6, [r5, #0]
 8011366:	e7ad      	b.n	80112c4 <__sflush_r+0x18>
 8011368:	89a2      	ldrh	r2, [r4, #12]
 801136a:	2340      	movs	r3, #64	; 0x40
 801136c:	4313      	orrs	r3, r2
 801136e:	81a3      	strh	r3, [r4, #12]
 8011370:	e7a9      	b.n	80112c6 <__sflush_r+0x1a>
 8011372:	690e      	ldr	r6, [r1, #16]
 8011374:	2e00      	cmp	r6, #0
 8011376:	d0a5      	beq.n	80112c4 <__sflush_r+0x18>
 8011378:	680f      	ldr	r7, [r1, #0]
 801137a:	600e      	str	r6, [r1, #0]
 801137c:	1bba      	subs	r2, r7, r6
 801137e:	9201      	str	r2, [sp, #4]
 8011380:	2200      	movs	r2, #0
 8011382:	079b      	lsls	r3, r3, #30
 8011384:	d100      	bne.n	8011388 <__sflush_r+0xdc>
 8011386:	694a      	ldr	r2, [r1, #20]
 8011388:	60a2      	str	r2, [r4, #8]
 801138a:	9b01      	ldr	r3, [sp, #4]
 801138c:	2b00      	cmp	r3, #0
 801138e:	dd99      	ble.n	80112c4 <__sflush_r+0x18>
 8011390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011392:	0032      	movs	r2, r6
 8011394:	001f      	movs	r7, r3
 8011396:	0028      	movs	r0, r5
 8011398:	9b01      	ldr	r3, [sp, #4]
 801139a:	6a21      	ldr	r1, [r4, #32]
 801139c:	47b8      	blx	r7
 801139e:	2800      	cmp	r0, #0
 80113a0:	dc06      	bgt.n	80113b0 <__sflush_r+0x104>
 80113a2:	2340      	movs	r3, #64	; 0x40
 80113a4:	2001      	movs	r0, #1
 80113a6:	89a2      	ldrh	r2, [r4, #12]
 80113a8:	4240      	negs	r0, r0
 80113aa:	4313      	orrs	r3, r2
 80113ac:	81a3      	strh	r3, [r4, #12]
 80113ae:	e78a      	b.n	80112c6 <__sflush_r+0x1a>
 80113b0:	9b01      	ldr	r3, [sp, #4]
 80113b2:	1836      	adds	r6, r6, r0
 80113b4:	1a1b      	subs	r3, r3, r0
 80113b6:	9301      	str	r3, [sp, #4]
 80113b8:	e7e7      	b.n	801138a <__sflush_r+0xde>
 80113ba:	46c0      	nop			; (mov r8, r8)
 80113bc:	dfbffffe 	.word	0xdfbffffe

080113c0 <_fflush_r>:
 80113c0:	690b      	ldr	r3, [r1, #16]
 80113c2:	b570      	push	{r4, r5, r6, lr}
 80113c4:	0005      	movs	r5, r0
 80113c6:	000c      	movs	r4, r1
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d102      	bne.n	80113d2 <_fflush_r+0x12>
 80113cc:	2500      	movs	r5, #0
 80113ce:	0028      	movs	r0, r5
 80113d0:	bd70      	pop	{r4, r5, r6, pc}
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d004      	beq.n	80113e0 <_fflush_r+0x20>
 80113d6:	6a03      	ldr	r3, [r0, #32]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d101      	bne.n	80113e0 <_fflush_r+0x20>
 80113dc:	f7fd fc0e 	bl	800ebfc <__sinit>
 80113e0:	220c      	movs	r2, #12
 80113e2:	5ea3      	ldrsh	r3, [r4, r2]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d0f1      	beq.n	80113cc <_fflush_r+0xc>
 80113e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113ea:	07d2      	lsls	r2, r2, #31
 80113ec:	d404      	bmi.n	80113f8 <_fflush_r+0x38>
 80113ee:	059b      	lsls	r3, r3, #22
 80113f0:	d402      	bmi.n	80113f8 <_fflush_r+0x38>
 80113f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113f4:	f7fd fe93 	bl	800f11e <__retarget_lock_acquire_recursive>
 80113f8:	0028      	movs	r0, r5
 80113fa:	0021      	movs	r1, r4
 80113fc:	f7ff ff56 	bl	80112ac <__sflush_r>
 8011400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011402:	0005      	movs	r5, r0
 8011404:	07db      	lsls	r3, r3, #31
 8011406:	d4e2      	bmi.n	80113ce <_fflush_r+0xe>
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	059b      	lsls	r3, r3, #22
 801140c:	d4df      	bmi.n	80113ce <_fflush_r+0xe>
 801140e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011410:	f7fd fe86 	bl	800f120 <__retarget_lock_release_recursive>
 8011414:	e7db      	b.n	80113ce <_fflush_r+0xe>
	...

08011418 <fiprintf>:
 8011418:	b40e      	push	{r1, r2, r3}
 801141a:	b517      	push	{r0, r1, r2, r4, lr}
 801141c:	4c05      	ldr	r4, [pc, #20]	; (8011434 <fiprintf+0x1c>)
 801141e:	ab05      	add	r3, sp, #20
 8011420:	cb04      	ldmia	r3!, {r2}
 8011422:	0001      	movs	r1, r0
 8011424:	6820      	ldr	r0, [r4, #0]
 8011426:	9301      	str	r3, [sp, #4]
 8011428:	f000 f8a4 	bl	8011574 <_vfiprintf_r>
 801142c:	bc1e      	pop	{r1, r2, r3, r4}
 801142e:	bc08      	pop	{r3}
 8011430:	b003      	add	sp, #12
 8011432:	4718      	bx	r3
 8011434:	200002f0 	.word	0x200002f0

08011438 <memmove>:
 8011438:	b510      	push	{r4, lr}
 801143a:	4288      	cmp	r0, r1
 801143c:	d902      	bls.n	8011444 <memmove+0xc>
 801143e:	188b      	adds	r3, r1, r2
 8011440:	4298      	cmp	r0, r3
 8011442:	d303      	bcc.n	801144c <memmove+0x14>
 8011444:	2300      	movs	r3, #0
 8011446:	e007      	b.n	8011458 <memmove+0x20>
 8011448:	5c8b      	ldrb	r3, [r1, r2]
 801144a:	5483      	strb	r3, [r0, r2]
 801144c:	3a01      	subs	r2, #1
 801144e:	d2fb      	bcs.n	8011448 <memmove+0x10>
 8011450:	bd10      	pop	{r4, pc}
 8011452:	5ccc      	ldrb	r4, [r1, r3]
 8011454:	54c4      	strb	r4, [r0, r3]
 8011456:	3301      	adds	r3, #1
 8011458:	429a      	cmp	r2, r3
 801145a:	d1fa      	bne.n	8011452 <memmove+0x1a>
 801145c:	e7f8      	b.n	8011450 <memmove+0x18>

0801145e <abort>:
 801145e:	2006      	movs	r0, #6
 8011460:	b510      	push	{r4, lr}
 8011462:	f000 fa73 	bl	801194c <raise>
 8011466:	2001      	movs	r0, #1
 8011468:	f7f6 fc2c 	bl	8007cc4 <_exit>

0801146c <_calloc_r>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	0c0b      	lsrs	r3, r1, #16
 8011470:	0c15      	lsrs	r5, r2, #16
 8011472:	2b00      	cmp	r3, #0
 8011474:	d11e      	bne.n	80114b4 <_calloc_r+0x48>
 8011476:	2d00      	cmp	r5, #0
 8011478:	d10c      	bne.n	8011494 <_calloc_r+0x28>
 801147a:	b289      	uxth	r1, r1
 801147c:	b294      	uxth	r4, r2
 801147e:	434c      	muls	r4, r1
 8011480:	0021      	movs	r1, r4
 8011482:	f7fb fd45 	bl	800cf10 <_malloc_r>
 8011486:	1e05      	subs	r5, r0, #0
 8011488:	d01b      	beq.n	80114c2 <_calloc_r+0x56>
 801148a:	0022      	movs	r2, r4
 801148c:	2100      	movs	r1, #0
 801148e:	f7fd fc89 	bl	800eda4 <memset>
 8011492:	e016      	b.n	80114c2 <_calloc_r+0x56>
 8011494:	1c2b      	adds	r3, r5, #0
 8011496:	1c0c      	adds	r4, r1, #0
 8011498:	b289      	uxth	r1, r1
 801149a:	b292      	uxth	r2, r2
 801149c:	434a      	muls	r2, r1
 801149e:	b2a1      	uxth	r1, r4
 80114a0:	b29c      	uxth	r4, r3
 80114a2:	434c      	muls	r4, r1
 80114a4:	0c13      	lsrs	r3, r2, #16
 80114a6:	18e4      	adds	r4, r4, r3
 80114a8:	0c23      	lsrs	r3, r4, #16
 80114aa:	d107      	bne.n	80114bc <_calloc_r+0x50>
 80114ac:	0424      	lsls	r4, r4, #16
 80114ae:	b292      	uxth	r2, r2
 80114b0:	4314      	orrs	r4, r2
 80114b2:	e7e5      	b.n	8011480 <_calloc_r+0x14>
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	d101      	bne.n	80114bc <_calloc_r+0x50>
 80114b8:	1c14      	adds	r4, r2, #0
 80114ba:	e7ed      	b.n	8011498 <_calloc_r+0x2c>
 80114bc:	230c      	movs	r3, #12
 80114be:	2500      	movs	r5, #0
 80114c0:	6003      	str	r3, [r0, #0]
 80114c2:	0028      	movs	r0, r5
 80114c4:	bd70      	pop	{r4, r5, r6, pc}

080114c6 <_realloc_r>:
 80114c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114c8:	0007      	movs	r7, r0
 80114ca:	000e      	movs	r6, r1
 80114cc:	0014      	movs	r4, r2
 80114ce:	2900      	cmp	r1, #0
 80114d0:	d105      	bne.n	80114de <_realloc_r+0x18>
 80114d2:	0011      	movs	r1, r2
 80114d4:	f7fb fd1c 	bl	800cf10 <_malloc_r>
 80114d8:	0005      	movs	r5, r0
 80114da:	0028      	movs	r0, r5
 80114dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114de:	2a00      	cmp	r2, #0
 80114e0:	d103      	bne.n	80114ea <_realloc_r+0x24>
 80114e2:	f7fe fd01 	bl	800fee8 <_free_r>
 80114e6:	0025      	movs	r5, r4
 80114e8:	e7f7      	b.n	80114da <_realloc_r+0x14>
 80114ea:	f000 fa4f 	bl	801198c <_malloc_usable_size_r>
 80114ee:	9001      	str	r0, [sp, #4]
 80114f0:	4284      	cmp	r4, r0
 80114f2:	d803      	bhi.n	80114fc <_realloc_r+0x36>
 80114f4:	0035      	movs	r5, r6
 80114f6:	0843      	lsrs	r3, r0, #1
 80114f8:	42a3      	cmp	r3, r4
 80114fa:	d3ee      	bcc.n	80114da <_realloc_r+0x14>
 80114fc:	0021      	movs	r1, r4
 80114fe:	0038      	movs	r0, r7
 8011500:	f7fb fd06 	bl	800cf10 <_malloc_r>
 8011504:	1e05      	subs	r5, r0, #0
 8011506:	d0e8      	beq.n	80114da <_realloc_r+0x14>
 8011508:	9b01      	ldr	r3, [sp, #4]
 801150a:	0022      	movs	r2, r4
 801150c:	429c      	cmp	r4, r3
 801150e:	d900      	bls.n	8011512 <_realloc_r+0x4c>
 8011510:	001a      	movs	r2, r3
 8011512:	0031      	movs	r1, r6
 8011514:	0028      	movs	r0, r5
 8011516:	f7fd fe17 	bl	800f148 <memcpy>
 801151a:	0031      	movs	r1, r6
 801151c:	0038      	movs	r0, r7
 801151e:	f7fe fce3 	bl	800fee8 <_free_r>
 8011522:	e7da      	b.n	80114da <_realloc_r+0x14>

08011524 <__sfputc_r>:
 8011524:	6893      	ldr	r3, [r2, #8]
 8011526:	b510      	push	{r4, lr}
 8011528:	3b01      	subs	r3, #1
 801152a:	6093      	str	r3, [r2, #8]
 801152c:	2b00      	cmp	r3, #0
 801152e:	da04      	bge.n	801153a <__sfputc_r+0x16>
 8011530:	6994      	ldr	r4, [r2, #24]
 8011532:	42a3      	cmp	r3, r4
 8011534:	db07      	blt.n	8011546 <__sfputc_r+0x22>
 8011536:	290a      	cmp	r1, #10
 8011538:	d005      	beq.n	8011546 <__sfputc_r+0x22>
 801153a:	6813      	ldr	r3, [r2, #0]
 801153c:	1c58      	adds	r0, r3, #1
 801153e:	6010      	str	r0, [r2, #0]
 8011540:	7019      	strb	r1, [r3, #0]
 8011542:	0008      	movs	r0, r1
 8011544:	bd10      	pop	{r4, pc}
 8011546:	f000 f931 	bl	80117ac <__swbuf_r>
 801154a:	0001      	movs	r1, r0
 801154c:	e7f9      	b.n	8011542 <__sfputc_r+0x1e>

0801154e <__sfputs_r>:
 801154e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011550:	0006      	movs	r6, r0
 8011552:	000f      	movs	r7, r1
 8011554:	0014      	movs	r4, r2
 8011556:	18d5      	adds	r5, r2, r3
 8011558:	42ac      	cmp	r4, r5
 801155a:	d101      	bne.n	8011560 <__sfputs_r+0x12>
 801155c:	2000      	movs	r0, #0
 801155e:	e007      	b.n	8011570 <__sfputs_r+0x22>
 8011560:	7821      	ldrb	r1, [r4, #0]
 8011562:	003a      	movs	r2, r7
 8011564:	0030      	movs	r0, r6
 8011566:	f7ff ffdd 	bl	8011524 <__sfputc_r>
 801156a:	3401      	adds	r4, #1
 801156c:	1c43      	adds	r3, r0, #1
 801156e:	d1f3      	bne.n	8011558 <__sfputs_r+0xa>
 8011570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011574 <_vfiprintf_r>:
 8011574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011576:	b0a1      	sub	sp, #132	; 0x84
 8011578:	000f      	movs	r7, r1
 801157a:	0015      	movs	r5, r2
 801157c:	001e      	movs	r6, r3
 801157e:	9003      	str	r0, [sp, #12]
 8011580:	2800      	cmp	r0, #0
 8011582:	d004      	beq.n	801158e <_vfiprintf_r+0x1a>
 8011584:	6a03      	ldr	r3, [r0, #32]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d101      	bne.n	801158e <_vfiprintf_r+0x1a>
 801158a:	f7fd fb37 	bl	800ebfc <__sinit>
 801158e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011590:	07db      	lsls	r3, r3, #31
 8011592:	d405      	bmi.n	80115a0 <_vfiprintf_r+0x2c>
 8011594:	89bb      	ldrh	r3, [r7, #12]
 8011596:	059b      	lsls	r3, r3, #22
 8011598:	d402      	bmi.n	80115a0 <_vfiprintf_r+0x2c>
 801159a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801159c:	f7fd fdbf 	bl	800f11e <__retarget_lock_acquire_recursive>
 80115a0:	89bb      	ldrh	r3, [r7, #12]
 80115a2:	071b      	lsls	r3, r3, #28
 80115a4:	d502      	bpl.n	80115ac <_vfiprintf_r+0x38>
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d113      	bne.n	80115d4 <_vfiprintf_r+0x60>
 80115ac:	0039      	movs	r1, r7
 80115ae:	9803      	ldr	r0, [sp, #12]
 80115b0:	f000 f93e 	bl	8011830 <__swsetup_r>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d00d      	beq.n	80115d4 <_vfiprintf_r+0x60>
 80115b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115ba:	07db      	lsls	r3, r3, #31
 80115bc:	d503      	bpl.n	80115c6 <_vfiprintf_r+0x52>
 80115be:	2001      	movs	r0, #1
 80115c0:	4240      	negs	r0, r0
 80115c2:	b021      	add	sp, #132	; 0x84
 80115c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c6:	89bb      	ldrh	r3, [r7, #12]
 80115c8:	059b      	lsls	r3, r3, #22
 80115ca:	d4f8      	bmi.n	80115be <_vfiprintf_r+0x4a>
 80115cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80115ce:	f7fd fda7 	bl	800f120 <__retarget_lock_release_recursive>
 80115d2:	e7f4      	b.n	80115be <_vfiprintf_r+0x4a>
 80115d4:	2300      	movs	r3, #0
 80115d6:	ac08      	add	r4, sp, #32
 80115d8:	6163      	str	r3, [r4, #20]
 80115da:	3320      	adds	r3, #32
 80115dc:	7663      	strb	r3, [r4, #25]
 80115de:	3310      	adds	r3, #16
 80115e0:	76a3      	strb	r3, [r4, #26]
 80115e2:	9607      	str	r6, [sp, #28]
 80115e4:	002e      	movs	r6, r5
 80115e6:	7833      	ldrb	r3, [r6, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <_vfiprintf_r+0x7c>
 80115ec:	2b25      	cmp	r3, #37	; 0x25
 80115ee:	d148      	bne.n	8011682 <_vfiprintf_r+0x10e>
 80115f0:	1b73      	subs	r3, r6, r5
 80115f2:	9305      	str	r3, [sp, #20]
 80115f4:	42ae      	cmp	r6, r5
 80115f6:	d00b      	beq.n	8011610 <_vfiprintf_r+0x9c>
 80115f8:	002a      	movs	r2, r5
 80115fa:	0039      	movs	r1, r7
 80115fc:	9803      	ldr	r0, [sp, #12]
 80115fe:	f7ff ffa6 	bl	801154e <__sfputs_r>
 8011602:	3001      	adds	r0, #1
 8011604:	d100      	bne.n	8011608 <_vfiprintf_r+0x94>
 8011606:	e0af      	b.n	8011768 <_vfiprintf_r+0x1f4>
 8011608:	6963      	ldr	r3, [r4, #20]
 801160a:	9a05      	ldr	r2, [sp, #20]
 801160c:	189b      	adds	r3, r3, r2
 801160e:	6163      	str	r3, [r4, #20]
 8011610:	7833      	ldrb	r3, [r6, #0]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d100      	bne.n	8011618 <_vfiprintf_r+0xa4>
 8011616:	e0a7      	b.n	8011768 <_vfiprintf_r+0x1f4>
 8011618:	2201      	movs	r2, #1
 801161a:	2300      	movs	r3, #0
 801161c:	4252      	negs	r2, r2
 801161e:	6062      	str	r2, [r4, #4]
 8011620:	a904      	add	r1, sp, #16
 8011622:	3254      	adds	r2, #84	; 0x54
 8011624:	1852      	adds	r2, r2, r1
 8011626:	1c75      	adds	r5, r6, #1
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	60e3      	str	r3, [r4, #12]
 801162c:	60a3      	str	r3, [r4, #8]
 801162e:	7013      	strb	r3, [r2, #0]
 8011630:	65a3      	str	r3, [r4, #88]	; 0x58
 8011632:	4b59      	ldr	r3, [pc, #356]	; (8011798 <_vfiprintf_r+0x224>)
 8011634:	2205      	movs	r2, #5
 8011636:	0018      	movs	r0, r3
 8011638:	7829      	ldrb	r1, [r5, #0]
 801163a:	9305      	str	r3, [sp, #20]
 801163c:	f7fd fd79 	bl	800f132 <memchr>
 8011640:	1c6e      	adds	r6, r5, #1
 8011642:	2800      	cmp	r0, #0
 8011644:	d11f      	bne.n	8011686 <_vfiprintf_r+0x112>
 8011646:	6822      	ldr	r2, [r4, #0]
 8011648:	06d3      	lsls	r3, r2, #27
 801164a:	d504      	bpl.n	8011656 <_vfiprintf_r+0xe2>
 801164c:	2353      	movs	r3, #83	; 0x53
 801164e:	a904      	add	r1, sp, #16
 8011650:	185b      	adds	r3, r3, r1
 8011652:	2120      	movs	r1, #32
 8011654:	7019      	strb	r1, [r3, #0]
 8011656:	0713      	lsls	r3, r2, #28
 8011658:	d504      	bpl.n	8011664 <_vfiprintf_r+0xf0>
 801165a:	2353      	movs	r3, #83	; 0x53
 801165c:	a904      	add	r1, sp, #16
 801165e:	185b      	adds	r3, r3, r1
 8011660:	212b      	movs	r1, #43	; 0x2b
 8011662:	7019      	strb	r1, [r3, #0]
 8011664:	782b      	ldrb	r3, [r5, #0]
 8011666:	2b2a      	cmp	r3, #42	; 0x2a
 8011668:	d016      	beq.n	8011698 <_vfiprintf_r+0x124>
 801166a:	002e      	movs	r6, r5
 801166c:	2100      	movs	r1, #0
 801166e:	200a      	movs	r0, #10
 8011670:	68e3      	ldr	r3, [r4, #12]
 8011672:	7832      	ldrb	r2, [r6, #0]
 8011674:	1c75      	adds	r5, r6, #1
 8011676:	3a30      	subs	r2, #48	; 0x30
 8011678:	2a09      	cmp	r2, #9
 801167a:	d94e      	bls.n	801171a <_vfiprintf_r+0x1a6>
 801167c:	2900      	cmp	r1, #0
 801167e:	d111      	bne.n	80116a4 <_vfiprintf_r+0x130>
 8011680:	e017      	b.n	80116b2 <_vfiprintf_r+0x13e>
 8011682:	3601      	adds	r6, #1
 8011684:	e7af      	b.n	80115e6 <_vfiprintf_r+0x72>
 8011686:	9b05      	ldr	r3, [sp, #20]
 8011688:	6822      	ldr	r2, [r4, #0]
 801168a:	1ac0      	subs	r0, r0, r3
 801168c:	2301      	movs	r3, #1
 801168e:	4083      	lsls	r3, r0
 8011690:	4313      	orrs	r3, r2
 8011692:	0035      	movs	r5, r6
 8011694:	6023      	str	r3, [r4, #0]
 8011696:	e7cc      	b.n	8011632 <_vfiprintf_r+0xbe>
 8011698:	9b07      	ldr	r3, [sp, #28]
 801169a:	1d19      	adds	r1, r3, #4
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	9107      	str	r1, [sp, #28]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	db01      	blt.n	80116a8 <_vfiprintf_r+0x134>
 80116a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80116a6:	e004      	b.n	80116b2 <_vfiprintf_r+0x13e>
 80116a8:	425b      	negs	r3, r3
 80116aa:	60e3      	str	r3, [r4, #12]
 80116ac:	2302      	movs	r3, #2
 80116ae:	4313      	orrs	r3, r2
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	7833      	ldrb	r3, [r6, #0]
 80116b4:	2b2e      	cmp	r3, #46	; 0x2e
 80116b6:	d10a      	bne.n	80116ce <_vfiprintf_r+0x15a>
 80116b8:	7873      	ldrb	r3, [r6, #1]
 80116ba:	2b2a      	cmp	r3, #42	; 0x2a
 80116bc:	d135      	bne.n	801172a <_vfiprintf_r+0x1b6>
 80116be:	9b07      	ldr	r3, [sp, #28]
 80116c0:	3602      	adds	r6, #2
 80116c2:	1d1a      	adds	r2, r3, #4
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	9207      	str	r2, [sp, #28]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	db2b      	blt.n	8011724 <_vfiprintf_r+0x1b0>
 80116cc:	9309      	str	r3, [sp, #36]	; 0x24
 80116ce:	4d33      	ldr	r5, [pc, #204]	; (801179c <_vfiprintf_r+0x228>)
 80116d0:	2203      	movs	r2, #3
 80116d2:	0028      	movs	r0, r5
 80116d4:	7831      	ldrb	r1, [r6, #0]
 80116d6:	f7fd fd2c 	bl	800f132 <memchr>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d006      	beq.n	80116ec <_vfiprintf_r+0x178>
 80116de:	2340      	movs	r3, #64	; 0x40
 80116e0:	1b40      	subs	r0, r0, r5
 80116e2:	4083      	lsls	r3, r0
 80116e4:	6822      	ldr	r2, [r4, #0]
 80116e6:	3601      	adds	r6, #1
 80116e8:	4313      	orrs	r3, r2
 80116ea:	6023      	str	r3, [r4, #0]
 80116ec:	7831      	ldrb	r1, [r6, #0]
 80116ee:	2206      	movs	r2, #6
 80116f0:	482b      	ldr	r0, [pc, #172]	; (80117a0 <_vfiprintf_r+0x22c>)
 80116f2:	1c75      	adds	r5, r6, #1
 80116f4:	7621      	strb	r1, [r4, #24]
 80116f6:	f7fd fd1c 	bl	800f132 <memchr>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	d043      	beq.n	8011786 <_vfiprintf_r+0x212>
 80116fe:	4b29      	ldr	r3, [pc, #164]	; (80117a4 <_vfiprintf_r+0x230>)
 8011700:	2b00      	cmp	r3, #0
 8011702:	d125      	bne.n	8011750 <_vfiprintf_r+0x1dc>
 8011704:	2207      	movs	r2, #7
 8011706:	9b07      	ldr	r3, [sp, #28]
 8011708:	3307      	adds	r3, #7
 801170a:	4393      	bics	r3, r2
 801170c:	3308      	adds	r3, #8
 801170e:	9307      	str	r3, [sp, #28]
 8011710:	6963      	ldr	r3, [r4, #20]
 8011712:	9a04      	ldr	r2, [sp, #16]
 8011714:	189b      	adds	r3, r3, r2
 8011716:	6163      	str	r3, [r4, #20]
 8011718:	e764      	b.n	80115e4 <_vfiprintf_r+0x70>
 801171a:	4343      	muls	r3, r0
 801171c:	002e      	movs	r6, r5
 801171e:	2101      	movs	r1, #1
 8011720:	189b      	adds	r3, r3, r2
 8011722:	e7a6      	b.n	8011672 <_vfiprintf_r+0xfe>
 8011724:	2301      	movs	r3, #1
 8011726:	425b      	negs	r3, r3
 8011728:	e7d0      	b.n	80116cc <_vfiprintf_r+0x158>
 801172a:	2300      	movs	r3, #0
 801172c:	200a      	movs	r0, #10
 801172e:	001a      	movs	r2, r3
 8011730:	3601      	adds	r6, #1
 8011732:	6063      	str	r3, [r4, #4]
 8011734:	7831      	ldrb	r1, [r6, #0]
 8011736:	1c75      	adds	r5, r6, #1
 8011738:	3930      	subs	r1, #48	; 0x30
 801173a:	2909      	cmp	r1, #9
 801173c:	d903      	bls.n	8011746 <_vfiprintf_r+0x1d2>
 801173e:	2b00      	cmp	r3, #0
 8011740:	d0c5      	beq.n	80116ce <_vfiprintf_r+0x15a>
 8011742:	9209      	str	r2, [sp, #36]	; 0x24
 8011744:	e7c3      	b.n	80116ce <_vfiprintf_r+0x15a>
 8011746:	4342      	muls	r2, r0
 8011748:	002e      	movs	r6, r5
 801174a:	2301      	movs	r3, #1
 801174c:	1852      	adds	r2, r2, r1
 801174e:	e7f1      	b.n	8011734 <_vfiprintf_r+0x1c0>
 8011750:	aa07      	add	r2, sp, #28
 8011752:	9200      	str	r2, [sp, #0]
 8011754:	0021      	movs	r1, r4
 8011756:	003a      	movs	r2, r7
 8011758:	4b13      	ldr	r3, [pc, #76]	; (80117a8 <_vfiprintf_r+0x234>)
 801175a:	9803      	ldr	r0, [sp, #12]
 801175c:	f7fc fbe0 	bl	800df20 <_printf_float>
 8011760:	9004      	str	r0, [sp, #16]
 8011762:	9b04      	ldr	r3, [sp, #16]
 8011764:	3301      	adds	r3, #1
 8011766:	d1d3      	bne.n	8011710 <_vfiprintf_r+0x19c>
 8011768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801176a:	07db      	lsls	r3, r3, #31
 801176c:	d405      	bmi.n	801177a <_vfiprintf_r+0x206>
 801176e:	89bb      	ldrh	r3, [r7, #12]
 8011770:	059b      	lsls	r3, r3, #22
 8011772:	d402      	bmi.n	801177a <_vfiprintf_r+0x206>
 8011774:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011776:	f7fd fcd3 	bl	800f120 <__retarget_lock_release_recursive>
 801177a:	89bb      	ldrh	r3, [r7, #12]
 801177c:	065b      	lsls	r3, r3, #25
 801177e:	d500      	bpl.n	8011782 <_vfiprintf_r+0x20e>
 8011780:	e71d      	b.n	80115be <_vfiprintf_r+0x4a>
 8011782:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011784:	e71d      	b.n	80115c2 <_vfiprintf_r+0x4e>
 8011786:	aa07      	add	r2, sp, #28
 8011788:	9200      	str	r2, [sp, #0]
 801178a:	0021      	movs	r1, r4
 801178c:	003a      	movs	r2, r7
 801178e:	4b06      	ldr	r3, [pc, #24]	; (80117a8 <_vfiprintf_r+0x234>)
 8011790:	9803      	ldr	r0, [sp, #12]
 8011792:	f7fc fe8b 	bl	800e4ac <_printf_i>
 8011796:	e7e3      	b.n	8011760 <_vfiprintf_r+0x1ec>
 8011798:	0801400c 	.word	0x0801400c
 801179c:	08014012 	.word	0x08014012
 80117a0:	08014016 	.word	0x08014016
 80117a4:	0800df21 	.word	0x0800df21
 80117a8:	0801154f 	.word	0x0801154f

080117ac <__swbuf_r>:
 80117ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ae:	0006      	movs	r6, r0
 80117b0:	000d      	movs	r5, r1
 80117b2:	0014      	movs	r4, r2
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d004      	beq.n	80117c2 <__swbuf_r+0x16>
 80117b8:	6a03      	ldr	r3, [r0, #32]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d101      	bne.n	80117c2 <__swbuf_r+0x16>
 80117be:	f7fd fa1d 	bl	800ebfc <__sinit>
 80117c2:	69a3      	ldr	r3, [r4, #24]
 80117c4:	60a3      	str	r3, [r4, #8]
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	071b      	lsls	r3, r3, #28
 80117ca:	d528      	bpl.n	801181e <__swbuf_r+0x72>
 80117cc:	6923      	ldr	r3, [r4, #16]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d025      	beq.n	801181e <__swbuf_r+0x72>
 80117d2:	6923      	ldr	r3, [r4, #16]
 80117d4:	6820      	ldr	r0, [r4, #0]
 80117d6:	b2ef      	uxtb	r7, r5
 80117d8:	1ac0      	subs	r0, r0, r3
 80117da:	6963      	ldr	r3, [r4, #20]
 80117dc:	b2ed      	uxtb	r5, r5
 80117de:	4283      	cmp	r3, r0
 80117e0:	dc05      	bgt.n	80117ee <__swbuf_r+0x42>
 80117e2:	0021      	movs	r1, r4
 80117e4:	0030      	movs	r0, r6
 80117e6:	f7ff fdeb 	bl	80113c0 <_fflush_r>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d11d      	bne.n	801182a <__swbuf_r+0x7e>
 80117ee:	68a3      	ldr	r3, [r4, #8]
 80117f0:	3001      	adds	r0, #1
 80117f2:	3b01      	subs	r3, #1
 80117f4:	60a3      	str	r3, [r4, #8]
 80117f6:	6823      	ldr	r3, [r4, #0]
 80117f8:	1c5a      	adds	r2, r3, #1
 80117fa:	6022      	str	r2, [r4, #0]
 80117fc:	701f      	strb	r7, [r3, #0]
 80117fe:	6963      	ldr	r3, [r4, #20]
 8011800:	4283      	cmp	r3, r0
 8011802:	d004      	beq.n	801180e <__swbuf_r+0x62>
 8011804:	89a3      	ldrh	r3, [r4, #12]
 8011806:	07db      	lsls	r3, r3, #31
 8011808:	d507      	bpl.n	801181a <__swbuf_r+0x6e>
 801180a:	2d0a      	cmp	r5, #10
 801180c:	d105      	bne.n	801181a <__swbuf_r+0x6e>
 801180e:	0021      	movs	r1, r4
 8011810:	0030      	movs	r0, r6
 8011812:	f7ff fdd5 	bl	80113c0 <_fflush_r>
 8011816:	2800      	cmp	r0, #0
 8011818:	d107      	bne.n	801182a <__swbuf_r+0x7e>
 801181a:	0028      	movs	r0, r5
 801181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801181e:	0021      	movs	r1, r4
 8011820:	0030      	movs	r0, r6
 8011822:	f000 f805 	bl	8011830 <__swsetup_r>
 8011826:	2800      	cmp	r0, #0
 8011828:	d0d3      	beq.n	80117d2 <__swbuf_r+0x26>
 801182a:	2501      	movs	r5, #1
 801182c:	426d      	negs	r5, r5
 801182e:	e7f4      	b.n	801181a <__swbuf_r+0x6e>

08011830 <__swsetup_r>:
 8011830:	4b30      	ldr	r3, [pc, #192]	; (80118f4 <__swsetup_r+0xc4>)
 8011832:	b570      	push	{r4, r5, r6, lr}
 8011834:	0005      	movs	r5, r0
 8011836:	6818      	ldr	r0, [r3, #0]
 8011838:	000c      	movs	r4, r1
 801183a:	2800      	cmp	r0, #0
 801183c:	d004      	beq.n	8011848 <__swsetup_r+0x18>
 801183e:	6a03      	ldr	r3, [r0, #32]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d101      	bne.n	8011848 <__swsetup_r+0x18>
 8011844:	f7fd f9da 	bl	800ebfc <__sinit>
 8011848:	230c      	movs	r3, #12
 801184a:	5ee2      	ldrsh	r2, [r4, r3]
 801184c:	b293      	uxth	r3, r2
 801184e:	0711      	lsls	r1, r2, #28
 8011850:	d423      	bmi.n	801189a <__swsetup_r+0x6a>
 8011852:	06d9      	lsls	r1, r3, #27
 8011854:	d407      	bmi.n	8011866 <__swsetup_r+0x36>
 8011856:	2309      	movs	r3, #9
 8011858:	2001      	movs	r0, #1
 801185a:	602b      	str	r3, [r5, #0]
 801185c:	3337      	adds	r3, #55	; 0x37
 801185e:	4313      	orrs	r3, r2
 8011860:	81a3      	strh	r3, [r4, #12]
 8011862:	4240      	negs	r0, r0
 8011864:	bd70      	pop	{r4, r5, r6, pc}
 8011866:	075b      	lsls	r3, r3, #29
 8011868:	d513      	bpl.n	8011892 <__swsetup_r+0x62>
 801186a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801186c:	2900      	cmp	r1, #0
 801186e:	d008      	beq.n	8011882 <__swsetup_r+0x52>
 8011870:	0023      	movs	r3, r4
 8011872:	3344      	adds	r3, #68	; 0x44
 8011874:	4299      	cmp	r1, r3
 8011876:	d002      	beq.n	801187e <__swsetup_r+0x4e>
 8011878:	0028      	movs	r0, r5
 801187a:	f7fe fb35 	bl	800fee8 <_free_r>
 801187e:	2300      	movs	r3, #0
 8011880:	6363      	str	r3, [r4, #52]	; 0x34
 8011882:	2224      	movs	r2, #36	; 0x24
 8011884:	89a3      	ldrh	r3, [r4, #12]
 8011886:	4393      	bics	r3, r2
 8011888:	81a3      	strh	r3, [r4, #12]
 801188a:	2300      	movs	r3, #0
 801188c:	6063      	str	r3, [r4, #4]
 801188e:	6923      	ldr	r3, [r4, #16]
 8011890:	6023      	str	r3, [r4, #0]
 8011892:	2308      	movs	r3, #8
 8011894:	89a2      	ldrh	r2, [r4, #12]
 8011896:	4313      	orrs	r3, r2
 8011898:	81a3      	strh	r3, [r4, #12]
 801189a:	6923      	ldr	r3, [r4, #16]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10b      	bne.n	80118b8 <__swsetup_r+0x88>
 80118a0:	21a0      	movs	r1, #160	; 0xa0
 80118a2:	2280      	movs	r2, #128	; 0x80
 80118a4:	89a3      	ldrh	r3, [r4, #12]
 80118a6:	0089      	lsls	r1, r1, #2
 80118a8:	0092      	lsls	r2, r2, #2
 80118aa:	400b      	ands	r3, r1
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d003      	beq.n	80118b8 <__swsetup_r+0x88>
 80118b0:	0021      	movs	r1, r4
 80118b2:	0028      	movs	r0, r5
 80118b4:	f000 f89a 	bl	80119ec <__smakebuf_r>
 80118b8:	220c      	movs	r2, #12
 80118ba:	5ea3      	ldrsh	r3, [r4, r2]
 80118bc:	2001      	movs	r0, #1
 80118be:	001a      	movs	r2, r3
 80118c0:	b299      	uxth	r1, r3
 80118c2:	4002      	ands	r2, r0
 80118c4:	4203      	tst	r3, r0
 80118c6:	d00f      	beq.n	80118e8 <__swsetup_r+0xb8>
 80118c8:	2200      	movs	r2, #0
 80118ca:	60a2      	str	r2, [r4, #8]
 80118cc:	6962      	ldr	r2, [r4, #20]
 80118ce:	4252      	negs	r2, r2
 80118d0:	61a2      	str	r2, [r4, #24]
 80118d2:	2000      	movs	r0, #0
 80118d4:	6922      	ldr	r2, [r4, #16]
 80118d6:	4282      	cmp	r2, r0
 80118d8:	d1c4      	bne.n	8011864 <__swsetup_r+0x34>
 80118da:	0609      	lsls	r1, r1, #24
 80118dc:	d5c2      	bpl.n	8011864 <__swsetup_r+0x34>
 80118de:	2240      	movs	r2, #64	; 0x40
 80118e0:	4313      	orrs	r3, r2
 80118e2:	81a3      	strh	r3, [r4, #12]
 80118e4:	3801      	subs	r0, #1
 80118e6:	e7bd      	b.n	8011864 <__swsetup_r+0x34>
 80118e8:	0788      	lsls	r0, r1, #30
 80118ea:	d400      	bmi.n	80118ee <__swsetup_r+0xbe>
 80118ec:	6962      	ldr	r2, [r4, #20]
 80118ee:	60a2      	str	r2, [r4, #8]
 80118f0:	e7ef      	b.n	80118d2 <__swsetup_r+0xa2>
 80118f2:	46c0      	nop			; (mov r8, r8)
 80118f4:	200002f0 	.word	0x200002f0

080118f8 <_raise_r>:
 80118f8:	b570      	push	{r4, r5, r6, lr}
 80118fa:	0004      	movs	r4, r0
 80118fc:	000d      	movs	r5, r1
 80118fe:	291f      	cmp	r1, #31
 8011900:	d904      	bls.n	801190c <_raise_r+0x14>
 8011902:	2316      	movs	r3, #22
 8011904:	6003      	str	r3, [r0, #0]
 8011906:	2001      	movs	r0, #1
 8011908:	4240      	negs	r0, r0
 801190a:	bd70      	pop	{r4, r5, r6, pc}
 801190c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801190e:	2b00      	cmp	r3, #0
 8011910:	d004      	beq.n	801191c <_raise_r+0x24>
 8011912:	008a      	lsls	r2, r1, #2
 8011914:	189b      	adds	r3, r3, r2
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	2a00      	cmp	r2, #0
 801191a:	d108      	bne.n	801192e <_raise_r+0x36>
 801191c:	0020      	movs	r0, r4
 801191e:	f000 f831 	bl	8011984 <_getpid_r>
 8011922:	002a      	movs	r2, r5
 8011924:	0001      	movs	r1, r0
 8011926:	0020      	movs	r0, r4
 8011928:	f000 f81a 	bl	8011960 <_kill_r>
 801192c:	e7ed      	b.n	801190a <_raise_r+0x12>
 801192e:	2000      	movs	r0, #0
 8011930:	2a01      	cmp	r2, #1
 8011932:	d0ea      	beq.n	801190a <_raise_r+0x12>
 8011934:	1c51      	adds	r1, r2, #1
 8011936:	d103      	bne.n	8011940 <_raise_r+0x48>
 8011938:	2316      	movs	r3, #22
 801193a:	3001      	adds	r0, #1
 801193c:	6023      	str	r3, [r4, #0]
 801193e:	e7e4      	b.n	801190a <_raise_r+0x12>
 8011940:	2400      	movs	r4, #0
 8011942:	0028      	movs	r0, r5
 8011944:	601c      	str	r4, [r3, #0]
 8011946:	4790      	blx	r2
 8011948:	0020      	movs	r0, r4
 801194a:	e7de      	b.n	801190a <_raise_r+0x12>

0801194c <raise>:
 801194c:	b510      	push	{r4, lr}
 801194e:	4b03      	ldr	r3, [pc, #12]	; (801195c <raise+0x10>)
 8011950:	0001      	movs	r1, r0
 8011952:	6818      	ldr	r0, [r3, #0]
 8011954:	f7ff ffd0 	bl	80118f8 <_raise_r>
 8011958:	bd10      	pop	{r4, pc}
 801195a:	46c0      	nop			; (mov r8, r8)
 801195c:	200002f0 	.word	0x200002f0

08011960 <_kill_r>:
 8011960:	2300      	movs	r3, #0
 8011962:	b570      	push	{r4, r5, r6, lr}
 8011964:	4d06      	ldr	r5, [pc, #24]	; (8011980 <_kill_r+0x20>)
 8011966:	0004      	movs	r4, r0
 8011968:	0008      	movs	r0, r1
 801196a:	0011      	movs	r1, r2
 801196c:	602b      	str	r3, [r5, #0]
 801196e:	f7f6 f9a1 	bl	8007cb4 <_kill>
 8011972:	1c43      	adds	r3, r0, #1
 8011974:	d103      	bne.n	801197e <_kill_r+0x1e>
 8011976:	682b      	ldr	r3, [r5, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d000      	beq.n	801197e <_kill_r+0x1e>
 801197c:	6023      	str	r3, [r4, #0]
 801197e:	bd70      	pop	{r4, r5, r6, pc}
 8011980:	20006838 	.word	0x20006838

08011984 <_getpid_r>:
 8011984:	b510      	push	{r4, lr}
 8011986:	f7f6 f993 	bl	8007cb0 <_getpid>
 801198a:	bd10      	pop	{r4, pc}

0801198c <_malloc_usable_size_r>:
 801198c:	1f0b      	subs	r3, r1, #4
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	1f18      	subs	r0, r3, #4
 8011992:	2b00      	cmp	r3, #0
 8011994:	da01      	bge.n	801199a <_malloc_usable_size_r+0xe>
 8011996:	580b      	ldr	r3, [r1, r0]
 8011998:	18c0      	adds	r0, r0, r3
 801199a:	4770      	bx	lr

0801199c <__swhatbuf_r>:
 801199c:	b570      	push	{r4, r5, r6, lr}
 801199e:	000e      	movs	r6, r1
 80119a0:	001d      	movs	r5, r3
 80119a2:	230e      	movs	r3, #14
 80119a4:	5ec9      	ldrsh	r1, [r1, r3]
 80119a6:	0014      	movs	r4, r2
 80119a8:	b096      	sub	sp, #88	; 0x58
 80119aa:	2900      	cmp	r1, #0
 80119ac:	da0c      	bge.n	80119c8 <__swhatbuf_r+0x2c>
 80119ae:	89b2      	ldrh	r2, [r6, #12]
 80119b0:	2380      	movs	r3, #128	; 0x80
 80119b2:	0011      	movs	r1, r2
 80119b4:	4019      	ands	r1, r3
 80119b6:	421a      	tst	r2, r3
 80119b8:	d013      	beq.n	80119e2 <__swhatbuf_r+0x46>
 80119ba:	2100      	movs	r1, #0
 80119bc:	3b40      	subs	r3, #64	; 0x40
 80119be:	2000      	movs	r0, #0
 80119c0:	6029      	str	r1, [r5, #0]
 80119c2:	6023      	str	r3, [r4, #0]
 80119c4:	b016      	add	sp, #88	; 0x58
 80119c6:	bd70      	pop	{r4, r5, r6, pc}
 80119c8:	466a      	mov	r2, sp
 80119ca:	f000 f84d 	bl	8011a68 <_fstat_r>
 80119ce:	2800      	cmp	r0, #0
 80119d0:	dbed      	blt.n	80119ae <__swhatbuf_r+0x12>
 80119d2:	23f0      	movs	r3, #240	; 0xf0
 80119d4:	9901      	ldr	r1, [sp, #4]
 80119d6:	021b      	lsls	r3, r3, #8
 80119d8:	4019      	ands	r1, r3
 80119da:	4b03      	ldr	r3, [pc, #12]	; (80119e8 <__swhatbuf_r+0x4c>)
 80119dc:	18c9      	adds	r1, r1, r3
 80119de:	424b      	negs	r3, r1
 80119e0:	4159      	adcs	r1, r3
 80119e2:	2380      	movs	r3, #128	; 0x80
 80119e4:	00db      	lsls	r3, r3, #3
 80119e6:	e7ea      	b.n	80119be <__swhatbuf_r+0x22>
 80119e8:	ffffe000 	.word	0xffffe000

080119ec <__smakebuf_r>:
 80119ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119ee:	2602      	movs	r6, #2
 80119f0:	898b      	ldrh	r3, [r1, #12]
 80119f2:	0005      	movs	r5, r0
 80119f4:	000c      	movs	r4, r1
 80119f6:	4233      	tst	r3, r6
 80119f8:	d006      	beq.n	8011a08 <__smakebuf_r+0x1c>
 80119fa:	0023      	movs	r3, r4
 80119fc:	3347      	adds	r3, #71	; 0x47
 80119fe:	6023      	str	r3, [r4, #0]
 8011a00:	6123      	str	r3, [r4, #16]
 8011a02:	2301      	movs	r3, #1
 8011a04:	6163      	str	r3, [r4, #20]
 8011a06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011a08:	466a      	mov	r2, sp
 8011a0a:	ab01      	add	r3, sp, #4
 8011a0c:	f7ff ffc6 	bl	801199c <__swhatbuf_r>
 8011a10:	9900      	ldr	r1, [sp, #0]
 8011a12:	0007      	movs	r7, r0
 8011a14:	0028      	movs	r0, r5
 8011a16:	f7fb fa7b 	bl	800cf10 <_malloc_r>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d108      	bne.n	8011a30 <__smakebuf_r+0x44>
 8011a1e:	220c      	movs	r2, #12
 8011a20:	5ea3      	ldrsh	r3, [r4, r2]
 8011a22:	059a      	lsls	r2, r3, #22
 8011a24:	d4ef      	bmi.n	8011a06 <__smakebuf_r+0x1a>
 8011a26:	2203      	movs	r2, #3
 8011a28:	4393      	bics	r3, r2
 8011a2a:	431e      	orrs	r6, r3
 8011a2c:	81a6      	strh	r6, [r4, #12]
 8011a2e:	e7e4      	b.n	80119fa <__smakebuf_r+0xe>
 8011a30:	2380      	movs	r3, #128	; 0x80
 8011a32:	89a2      	ldrh	r2, [r4, #12]
 8011a34:	6020      	str	r0, [r4, #0]
 8011a36:	4313      	orrs	r3, r2
 8011a38:	81a3      	strh	r3, [r4, #12]
 8011a3a:	9b00      	ldr	r3, [sp, #0]
 8011a3c:	6120      	str	r0, [r4, #16]
 8011a3e:	6163      	str	r3, [r4, #20]
 8011a40:	9b01      	ldr	r3, [sp, #4]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d00c      	beq.n	8011a60 <__smakebuf_r+0x74>
 8011a46:	0028      	movs	r0, r5
 8011a48:	230e      	movs	r3, #14
 8011a4a:	5ee1      	ldrsh	r1, [r4, r3]
 8011a4c:	f000 f81e 	bl	8011a8c <_isatty_r>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d005      	beq.n	8011a60 <__smakebuf_r+0x74>
 8011a54:	2303      	movs	r3, #3
 8011a56:	89a2      	ldrh	r2, [r4, #12]
 8011a58:	439a      	bics	r2, r3
 8011a5a:	3b02      	subs	r3, #2
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	81a3      	strh	r3, [r4, #12]
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	433b      	orrs	r3, r7
 8011a64:	81a3      	strh	r3, [r4, #12]
 8011a66:	e7ce      	b.n	8011a06 <__smakebuf_r+0x1a>

08011a68 <_fstat_r>:
 8011a68:	2300      	movs	r3, #0
 8011a6a:	b570      	push	{r4, r5, r6, lr}
 8011a6c:	4d06      	ldr	r5, [pc, #24]	; (8011a88 <_fstat_r+0x20>)
 8011a6e:	0004      	movs	r4, r0
 8011a70:	0008      	movs	r0, r1
 8011a72:	0011      	movs	r1, r2
 8011a74:	602b      	str	r3, [r5, #0]
 8011a76:	f7f6 f94b 	bl	8007d10 <_fstat>
 8011a7a:	1c43      	adds	r3, r0, #1
 8011a7c:	d103      	bne.n	8011a86 <_fstat_r+0x1e>
 8011a7e:	682b      	ldr	r3, [r5, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d000      	beq.n	8011a86 <_fstat_r+0x1e>
 8011a84:	6023      	str	r3, [r4, #0]
 8011a86:	bd70      	pop	{r4, r5, r6, pc}
 8011a88:	20006838 	.word	0x20006838

08011a8c <_isatty_r>:
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	b570      	push	{r4, r5, r6, lr}
 8011a90:	4d06      	ldr	r5, [pc, #24]	; (8011aac <_isatty_r+0x20>)
 8011a92:	0004      	movs	r4, r0
 8011a94:	0008      	movs	r0, r1
 8011a96:	602b      	str	r3, [r5, #0]
 8011a98:	f7f6 f940 	bl	8007d1c <_isatty>
 8011a9c:	1c43      	adds	r3, r0, #1
 8011a9e:	d103      	bne.n	8011aa8 <_isatty_r+0x1c>
 8011aa0:	682b      	ldr	r3, [r5, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d000      	beq.n	8011aa8 <_isatty_r+0x1c>
 8011aa6:	6023      	str	r3, [r4, #0]
 8011aa8:	bd70      	pop	{r4, r5, r6, pc}
 8011aaa:	46c0      	nop			; (mov r8, r8)
 8011aac:	20006838 	.word	0x20006838

08011ab0 <pow>:
 8011ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ab2:	0014      	movs	r4, r2
 8011ab4:	001d      	movs	r5, r3
 8011ab6:	9000      	str	r0, [sp, #0]
 8011ab8:	9101      	str	r1, [sp, #4]
 8011aba:	f000 f86f 	bl	8011b9c <__ieee754_pow>
 8011abe:	0022      	movs	r2, r4
 8011ac0:	0006      	movs	r6, r0
 8011ac2:	000f      	movs	r7, r1
 8011ac4:	002b      	movs	r3, r5
 8011ac6:	0020      	movs	r0, r4
 8011ac8:	0029      	movs	r1, r5
 8011aca:	f7f1 fa47 	bl	8002f5c <__aeabi_dcmpun>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d13f      	bne.n	8011b52 <pow+0xa2>
 8011ad2:	9800      	ldr	r0, [sp, #0]
 8011ad4:	9901      	ldr	r1, [sp, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	2300      	movs	r3, #0
 8011ada:	f7ee fcb7 	bl	800044c <__aeabi_dcmpeq>
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d019      	beq.n	8011b16 <pow+0x66>
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	0020      	movs	r0, r4
 8011ae8:	0029      	movs	r1, r5
 8011aea:	f7ee fcaf 	bl	800044c <__aeabi_dcmpeq>
 8011aee:	2800      	cmp	r0, #0
 8011af0:	d146      	bne.n	8011b80 <pow+0xd0>
 8011af2:	0020      	movs	r0, r4
 8011af4:	0029      	movs	r1, r5
 8011af6:	f000 f849 	bl	8011b8c <finite>
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d029      	beq.n	8011b52 <pow+0xa2>
 8011afe:	2200      	movs	r2, #0
 8011b00:	2300      	movs	r3, #0
 8011b02:	0020      	movs	r0, r4
 8011b04:	0029      	movs	r1, r5
 8011b06:	f7ee fca7 	bl	8000458 <__aeabi_dcmplt>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	d021      	beq.n	8011b52 <pow+0xa2>
 8011b0e:	f7fd fadb 	bl	800f0c8 <__errno>
 8011b12:	2322      	movs	r3, #34	; 0x22
 8011b14:	e01c      	b.n	8011b50 <pow+0xa0>
 8011b16:	0030      	movs	r0, r6
 8011b18:	0039      	movs	r1, r7
 8011b1a:	f000 f837 	bl	8011b8c <finite>
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d11b      	bne.n	8011b5a <pow+0xaa>
 8011b22:	9800      	ldr	r0, [sp, #0]
 8011b24:	9901      	ldr	r1, [sp, #4]
 8011b26:	f000 f831 	bl	8011b8c <finite>
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d015      	beq.n	8011b5a <pow+0xaa>
 8011b2e:	0020      	movs	r0, r4
 8011b30:	0029      	movs	r1, r5
 8011b32:	f000 f82b 	bl	8011b8c <finite>
 8011b36:	2800      	cmp	r0, #0
 8011b38:	d00f      	beq.n	8011b5a <pow+0xaa>
 8011b3a:	0032      	movs	r2, r6
 8011b3c:	003b      	movs	r3, r7
 8011b3e:	0030      	movs	r0, r6
 8011b40:	0039      	movs	r1, r7
 8011b42:	f7f1 fa0b 	bl	8002f5c <__aeabi_dcmpun>
 8011b46:	2800      	cmp	r0, #0
 8011b48:	d0e1      	beq.n	8011b0e <pow+0x5e>
 8011b4a:	f7fd fabd 	bl	800f0c8 <__errno>
 8011b4e:	2321      	movs	r3, #33	; 0x21
 8011b50:	6003      	str	r3, [r0, #0]
 8011b52:	0030      	movs	r0, r6
 8011b54:	0039      	movs	r1, r7
 8011b56:	b003      	add	sp, #12
 8011b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	0030      	movs	r0, r6
 8011b60:	0039      	movs	r1, r7
 8011b62:	f7ee fc73 	bl	800044c <__aeabi_dcmpeq>
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d0f3      	beq.n	8011b52 <pow+0xa2>
 8011b6a:	9800      	ldr	r0, [sp, #0]
 8011b6c:	9901      	ldr	r1, [sp, #4]
 8011b6e:	f000 f80d 	bl	8011b8c <finite>
 8011b72:	2800      	cmp	r0, #0
 8011b74:	d0ed      	beq.n	8011b52 <pow+0xa2>
 8011b76:	0020      	movs	r0, r4
 8011b78:	0029      	movs	r1, r5
 8011b7a:	f000 f807 	bl	8011b8c <finite>
 8011b7e:	e7c4      	b.n	8011b0a <pow+0x5a>
 8011b80:	2600      	movs	r6, #0
 8011b82:	4f01      	ldr	r7, [pc, #4]	; (8011b88 <pow+0xd8>)
 8011b84:	e7e5      	b.n	8011b52 <pow+0xa2>
 8011b86:	46c0      	nop			; (mov r8, r8)
 8011b88:	3ff00000 	.word	0x3ff00000

08011b8c <finite>:
 8011b8c:	4b02      	ldr	r3, [pc, #8]	; (8011b98 <finite+0xc>)
 8011b8e:	0048      	lsls	r0, r1, #1
 8011b90:	0840      	lsrs	r0, r0, #1
 8011b92:	18c0      	adds	r0, r0, r3
 8011b94:	0fc0      	lsrs	r0, r0, #31
 8011b96:	4770      	bx	lr
 8011b98:	80100000 	.word	0x80100000

08011b9c <__ieee754_pow>:
 8011b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b9e:	b095      	sub	sp, #84	; 0x54
 8011ba0:	9202      	str	r2, [sp, #8]
 8011ba2:	9303      	str	r3, [sp, #12]
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	9a03      	ldr	r2, [sp, #12]
 8011ba8:	9304      	str	r3, [sp, #16]
 8011baa:	9b02      	ldr	r3, [sp, #8]
 8011bac:	0056      	lsls	r6, r2, #1
 8011bae:	001a      	movs	r2, r3
 8011bb0:	0876      	lsrs	r6, r6, #1
 8011bb2:	0007      	movs	r7, r0
 8011bb4:	000d      	movs	r5, r1
 8011bb6:	4332      	orrs	r2, r6
 8011bb8:	d119      	bne.n	8011bee <__ieee754_pow+0x52>
 8011bba:	2180      	movs	r1, #128	; 0x80
 8011bbc:	0309      	lsls	r1, r1, #12
 8011bbe:	4069      	eors	r1, r5
 8011bc0:	0002      	movs	r2, r0
 8011bc2:	000b      	movs	r3, r1
 8011bc4:	1892      	adds	r2, r2, r2
 8011bc6:	415b      	adcs	r3, r3
 8011bc8:	4989      	ldr	r1, [pc, #548]	; (8011df0 <__ieee754_pow+0x254>)
 8011bca:	428b      	cmp	r3, r1
 8011bcc:	d806      	bhi.n	8011bdc <__ieee754_pow+0x40>
 8011bce:	d001      	beq.n	8011bd4 <__ieee754_pow+0x38>
 8011bd0:	f000 fcb6 	bl	8012540 <__ieee754_pow+0x9a4>
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	d101      	bne.n	8011bdc <__ieee754_pow+0x40>
 8011bd8:	f000 fcb2 	bl	8012540 <__ieee754_pow+0x9a4>
 8011bdc:	9a02      	ldr	r2, [sp, #8]
 8011bde:	9b03      	ldr	r3, [sp, #12]
 8011be0:	0038      	movs	r0, r7
 8011be2:	0029      	movs	r1, r5
 8011be4:	f7ef fc1c 	bl	8001420 <__aeabi_dadd>
 8011be8:	9000      	str	r0, [sp, #0]
 8011bea:	9101      	str	r1, [sp, #4]
 8011bec:	e0ad      	b.n	8011d4a <__ieee754_pow+0x1ae>
 8011bee:	4a81      	ldr	r2, [pc, #516]	; (8011df4 <__ieee754_pow+0x258>)
 8011bf0:	004c      	lsls	r4, r1, #1
 8011bf2:	9108      	str	r1, [sp, #32]
 8011bf4:	9000      	str	r0, [sp, #0]
 8011bf6:	0864      	lsrs	r4, r4, #1
 8011bf8:	4294      	cmp	r4, r2
 8011bfa:	dc08      	bgt.n	8011c0e <__ieee754_pow+0x72>
 8011bfc:	d101      	bne.n	8011c02 <__ieee754_pow+0x66>
 8011bfe:	2800      	cmp	r0, #0
 8011c00:	d1ec      	bne.n	8011bdc <__ieee754_pow+0x40>
 8011c02:	4a7c      	ldr	r2, [pc, #496]	; (8011df4 <__ieee754_pow+0x258>)
 8011c04:	4296      	cmp	r6, r2
 8011c06:	dc02      	bgt.n	8011c0e <__ieee754_pow+0x72>
 8011c08:	d10c      	bne.n	8011c24 <__ieee754_pow+0x88>
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d00a      	beq.n	8011c24 <__ieee754_pow+0x88>
 8011c0e:	4b7a      	ldr	r3, [pc, #488]	; (8011df8 <__ieee754_pow+0x25c>)
 8011c10:	18eb      	adds	r3, r5, r3
 8011c12:	433b      	orrs	r3, r7
 8011c14:	d1e2      	bne.n	8011bdc <__ieee754_pow+0x40>
 8011c16:	2180      	movs	r1, #128	; 0x80
 8011c18:	9803      	ldr	r0, [sp, #12]
 8011c1a:	0309      	lsls	r1, r1, #12
 8011c1c:	4048      	eors	r0, r1
 8011c1e:	0003      	movs	r3, r0
 8011c20:	9a02      	ldr	r2, [sp, #8]
 8011c22:	e7cf      	b.n	8011bc4 <__ieee754_pow+0x28>
 8011c24:	2200      	movs	r2, #0
 8011c26:	9206      	str	r2, [sp, #24]
 8011c28:	2d00      	cmp	r5, #0
 8011c2a:	da69      	bge.n	8011d00 <__ieee754_pow+0x164>
 8011c2c:	4a73      	ldr	r2, [pc, #460]	; (8011dfc <__ieee754_pow+0x260>)
 8011c2e:	4296      	cmp	r6, r2
 8011c30:	dc64      	bgt.n	8011cfc <__ieee754_pow+0x160>
 8011c32:	4a73      	ldr	r2, [pc, #460]	; (8011e00 <__ieee754_pow+0x264>)
 8011c34:	4296      	cmp	r6, r2
 8011c36:	dd11      	ble.n	8011c5c <__ieee754_pow+0xc0>
 8011c38:	4972      	ldr	r1, [pc, #456]	; (8011e04 <__ieee754_pow+0x268>)
 8011c3a:	1532      	asrs	r2, r6, #20
 8011c3c:	1852      	adds	r2, r2, r1
 8011c3e:	2a14      	cmp	r2, #20
 8011c40:	dd3c      	ble.n	8011cbc <__ieee754_pow+0x120>
 8011c42:	2134      	movs	r1, #52	; 0x34
 8011c44:	1a89      	subs	r1, r1, r2
 8011c46:	9a02      	ldr	r2, [sp, #8]
 8011c48:	40ca      	lsrs	r2, r1
 8011c4a:	0010      	movs	r0, r2
 8011c4c:	4088      	lsls	r0, r1
 8011c4e:	4298      	cmp	r0, r3
 8011c50:	d104      	bne.n	8011c5c <__ieee754_pow+0xc0>
 8011c52:	2101      	movs	r1, #1
 8011c54:	400a      	ands	r2, r1
 8011c56:	1849      	adds	r1, r1, r1
 8011c58:	1a8a      	subs	r2, r1, r2
 8011c5a:	9206      	str	r2, [sp, #24]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d03c      	beq.n	8011cda <__ieee754_pow+0x13e>
 8011c60:	0038      	movs	r0, r7
 8011c62:	0029      	movs	r1, r5
 8011c64:	f000 fca4 	bl	80125b0 <fabs>
 8011c68:	9000      	str	r0, [sp, #0]
 8011c6a:	9101      	str	r1, [sp, #4]
 8011c6c:	2f00      	cmp	r7, #0
 8011c6e:	d000      	beq.n	8011c72 <__ieee754_pow+0xd6>
 8011c70:	e094      	b.n	8011d9c <__ieee754_pow+0x200>
 8011c72:	2c00      	cmp	r4, #0
 8011c74:	d005      	beq.n	8011c82 <__ieee754_pow+0xe6>
 8011c76:	4a64      	ldr	r2, [pc, #400]	; (8011e08 <__ieee754_pow+0x26c>)
 8011c78:	00ab      	lsls	r3, r5, #2
 8011c7a:	089b      	lsrs	r3, r3, #2
 8011c7c:	4293      	cmp	r3, r2
 8011c7e:	d000      	beq.n	8011c82 <__ieee754_pow+0xe6>
 8011c80:	e08c      	b.n	8011d9c <__ieee754_pow+0x200>
 8011c82:	9b04      	ldr	r3, [sp, #16]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	da07      	bge.n	8011c98 <__ieee754_pow+0xfc>
 8011c88:	9a00      	ldr	r2, [sp, #0]
 8011c8a:	9b01      	ldr	r3, [sp, #4]
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	495e      	ldr	r1, [pc, #376]	; (8011e08 <__ieee754_pow+0x26c>)
 8011c90:	f7ef ff26 	bl	8001ae0 <__aeabi_ddiv>
 8011c94:	9000      	str	r0, [sp, #0]
 8011c96:	9101      	str	r1, [sp, #4]
 8011c98:	9b08      	ldr	r3, [sp, #32]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	da55      	bge.n	8011d4a <__ieee754_pow+0x1ae>
 8011c9e:	4b56      	ldr	r3, [pc, #344]	; (8011df8 <__ieee754_pow+0x25c>)
 8011ca0:	18e4      	adds	r4, r4, r3
 8011ca2:	9b06      	ldr	r3, [sp, #24]
 8011ca4:	431c      	orrs	r4, r3
 8011ca6:	d000      	beq.n	8011caa <__ieee754_pow+0x10e>
 8011ca8:	e06c      	b.n	8011d84 <__ieee754_pow+0x1e8>
 8011caa:	9a00      	ldr	r2, [sp, #0]
 8011cac:	9b01      	ldr	r3, [sp, #4]
 8011cae:	0010      	movs	r0, r2
 8011cb0:	0019      	movs	r1, r3
 8011cb2:	f7f0 fdd1 	bl	8002858 <__aeabi_dsub>
 8011cb6:	0002      	movs	r2, r0
 8011cb8:	000b      	movs	r3, r1
 8011cba:	e01c      	b.n	8011cf6 <__ieee754_pow+0x15a>
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1cf      	bne.n	8011c60 <__ieee754_pow+0xc4>
 8011cc0:	3314      	adds	r3, #20
 8011cc2:	1a9a      	subs	r2, r3, r2
 8011cc4:	0033      	movs	r3, r6
 8011cc6:	4113      	asrs	r3, r2
 8011cc8:	0019      	movs	r1, r3
 8011cca:	4091      	lsls	r1, r2
 8011ccc:	42b1      	cmp	r1, r6
 8011cce:	d104      	bne.n	8011cda <__ieee754_pow+0x13e>
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	1892      	adds	r2, r2, r2
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	9306      	str	r3, [sp, #24]
 8011cda:	4b4b      	ldr	r3, [pc, #300]	; (8011e08 <__ieee754_pow+0x26c>)
 8011cdc:	429e      	cmp	r6, r3
 8011cde:	d138      	bne.n	8011d52 <__ieee754_pow+0x1b6>
 8011ce0:	0038      	movs	r0, r7
 8011ce2:	0029      	movs	r1, r5
 8011ce4:	9b04      	ldr	r3, [sp, #16]
 8011ce6:	9000      	str	r0, [sp, #0]
 8011ce8:	9101      	str	r1, [sp, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	da2d      	bge.n	8011d4a <__ieee754_pow+0x1ae>
 8011cee:	003a      	movs	r2, r7
 8011cf0:	002b      	movs	r3, r5
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	4944      	ldr	r1, [pc, #272]	; (8011e08 <__ieee754_pow+0x26c>)
 8011cf6:	f7ef fef3 	bl	8001ae0 <__aeabi_ddiv>
 8011cfa:	e775      	b.n	8011be8 <__ieee754_pow+0x4c>
 8011cfc:	2202      	movs	r2, #2
 8011cfe:	9206      	str	r2, [sp, #24]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1ad      	bne.n	8011c60 <__ieee754_pow+0xc4>
 8011d04:	4b3b      	ldr	r3, [pc, #236]	; (8011df4 <__ieee754_pow+0x258>)
 8011d06:	429e      	cmp	r6, r3
 8011d08:	d1e7      	bne.n	8011cda <__ieee754_pow+0x13e>
 8011d0a:	4b3b      	ldr	r3, [pc, #236]	; (8011df8 <__ieee754_pow+0x25c>)
 8011d0c:	18e3      	adds	r3, r4, r3
 8011d0e:	433b      	orrs	r3, r7
 8011d10:	d101      	bne.n	8011d16 <__ieee754_pow+0x17a>
 8011d12:	f000 fc15 	bl	8012540 <__ieee754_pow+0x9a4>
 8011d16:	4b3a      	ldr	r3, [pc, #232]	; (8011e00 <__ieee754_pow+0x264>)
 8011d18:	429c      	cmp	r4, r3
 8011d1a:	dd09      	ble.n	8011d30 <__ieee754_pow+0x194>
 8011d1c:	9b04      	ldr	r3, [sp, #16]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	da01      	bge.n	8011d26 <__ieee754_pow+0x18a>
 8011d22:	f000 fc11 	bl	8012548 <__ieee754_pow+0x9ac>
 8011d26:	9b02      	ldr	r3, [sp, #8]
 8011d28:	9c03      	ldr	r4, [sp, #12]
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	9401      	str	r4, [sp, #4]
 8011d2e:	e00c      	b.n	8011d4a <__ieee754_pow+0x1ae>
 8011d30:	9b04      	ldr	r3, [sp, #16]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	db01      	blt.n	8011d3a <__ieee754_pow+0x19e>
 8011d36:	f000 fc07 	bl	8012548 <__ieee754_pow+0x9ac>
 8011d3a:	2280      	movs	r2, #128	; 0x80
 8011d3c:	0612      	lsls	r2, r2, #24
 8011d3e:	4694      	mov	ip, r2
 8011d40:	9b02      	ldr	r3, [sp, #8]
 8011d42:	9300      	str	r3, [sp, #0]
 8011d44:	9b03      	ldr	r3, [sp, #12]
 8011d46:	4463      	add	r3, ip
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	9800      	ldr	r0, [sp, #0]
 8011d4c:	9901      	ldr	r1, [sp, #4]
 8011d4e:	b015      	add	sp, #84	; 0x54
 8011d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d52:	2380      	movs	r3, #128	; 0x80
 8011d54:	9a04      	ldr	r2, [sp, #16]
 8011d56:	05db      	lsls	r3, r3, #23
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d106      	bne.n	8011d6a <__ieee754_pow+0x1ce>
 8011d5c:	003a      	movs	r2, r7
 8011d5e:	002b      	movs	r3, r5
 8011d60:	0038      	movs	r0, r7
 8011d62:	0029      	movs	r1, r5
 8011d64:	f7f0 fab6 	bl	80022d4 <__aeabi_dmul>
 8011d68:	e73e      	b.n	8011be8 <__ieee754_pow+0x4c>
 8011d6a:	4b28      	ldr	r3, [pc, #160]	; (8011e0c <__ieee754_pow+0x270>)
 8011d6c:	9a04      	ldr	r2, [sp, #16]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d000      	beq.n	8011d74 <__ieee754_pow+0x1d8>
 8011d72:	e775      	b.n	8011c60 <__ieee754_pow+0xc4>
 8011d74:	2d00      	cmp	r5, #0
 8011d76:	da00      	bge.n	8011d7a <__ieee754_pow+0x1de>
 8011d78:	e772      	b.n	8011c60 <__ieee754_pow+0xc4>
 8011d7a:	0038      	movs	r0, r7
 8011d7c:	0029      	movs	r1, r5
 8011d7e:	f000 fcb7 	bl	80126f0 <__ieee754_sqrt>
 8011d82:	e731      	b.n	8011be8 <__ieee754_pow+0x4c>
 8011d84:	9b06      	ldr	r3, [sp, #24]
 8011d86:	2b01      	cmp	r3, #1
 8011d88:	d1df      	bne.n	8011d4a <__ieee754_pow+0x1ae>
 8011d8a:	9800      	ldr	r0, [sp, #0]
 8011d8c:	2180      	movs	r1, #128	; 0x80
 8011d8e:	0002      	movs	r2, r0
 8011d90:	9801      	ldr	r0, [sp, #4]
 8011d92:	0609      	lsls	r1, r1, #24
 8011d94:	1843      	adds	r3, r0, r1
 8011d96:	9200      	str	r2, [sp, #0]
 8011d98:	9301      	str	r3, [sp, #4]
 8011d9a:	e7d6      	b.n	8011d4a <__ieee754_pow+0x1ae>
 8011d9c:	0feb      	lsrs	r3, r5, #31
 8011d9e:	3b01      	subs	r3, #1
 8011da0:	930e      	str	r3, [sp, #56]	; 0x38
 8011da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011da4:	9b06      	ldr	r3, [sp, #24]
 8011da6:	4313      	orrs	r3, r2
 8011da8:	d104      	bne.n	8011db4 <__ieee754_pow+0x218>
 8011daa:	003a      	movs	r2, r7
 8011dac:	002b      	movs	r3, r5
 8011dae:	0038      	movs	r0, r7
 8011db0:	0029      	movs	r1, r5
 8011db2:	e77e      	b.n	8011cb2 <__ieee754_pow+0x116>
 8011db4:	4b16      	ldr	r3, [pc, #88]	; (8011e10 <__ieee754_pow+0x274>)
 8011db6:	429e      	cmp	r6, r3
 8011db8:	dc00      	bgt.n	8011dbc <__ieee754_pow+0x220>
 8011dba:	e0f1      	b.n	8011fa0 <__ieee754_pow+0x404>
 8011dbc:	4b15      	ldr	r3, [pc, #84]	; (8011e14 <__ieee754_pow+0x278>)
 8011dbe:	429e      	cmp	r6, r3
 8011dc0:	dd09      	ble.n	8011dd6 <__ieee754_pow+0x23a>
 8011dc2:	4b0f      	ldr	r3, [pc, #60]	; (8011e00 <__ieee754_pow+0x264>)
 8011dc4:	429c      	cmp	r4, r3
 8011dc6:	dc0c      	bgt.n	8011de2 <__ieee754_pow+0x246>
 8011dc8:	9b04      	ldr	r3, [sp, #16]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	da0c      	bge.n	8011de8 <__ieee754_pow+0x24c>
 8011dce:	2000      	movs	r0, #0
 8011dd0:	f000 fc86 	bl	80126e0 <__math_oflow>
 8011dd4:	e708      	b.n	8011be8 <__ieee754_pow+0x4c>
 8011dd6:	4b10      	ldr	r3, [pc, #64]	; (8011e18 <__ieee754_pow+0x27c>)
 8011dd8:	429c      	cmp	r4, r3
 8011dda:	ddf5      	ble.n	8011dc8 <__ieee754_pow+0x22c>
 8011ddc:	4b0a      	ldr	r3, [pc, #40]	; (8011e08 <__ieee754_pow+0x26c>)
 8011dde:	429c      	cmp	r4, r3
 8011de0:	dd1c      	ble.n	8011e1c <__ieee754_pow+0x280>
 8011de2:	9b04      	ldr	r3, [sp, #16]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	dcf2      	bgt.n	8011dce <__ieee754_pow+0x232>
 8011de8:	2000      	movs	r0, #0
 8011dea:	f000 fc72 	bl	80126d2 <__math_uflow>
 8011dee:	e6fb      	b.n	8011be8 <__ieee754_pow+0x4c>
 8011df0:	fff00000 	.word	0xfff00000
 8011df4:	7ff00000 	.word	0x7ff00000
 8011df8:	c0100000 	.word	0xc0100000
 8011dfc:	433fffff 	.word	0x433fffff
 8011e00:	3fefffff 	.word	0x3fefffff
 8011e04:	fffffc01 	.word	0xfffffc01
 8011e08:	3ff00000 	.word	0x3ff00000
 8011e0c:	3fe00000 	.word	0x3fe00000
 8011e10:	41e00000 	.word	0x41e00000
 8011e14:	43f00000 	.word	0x43f00000
 8011e18:	3feffffe 	.word	0x3feffffe
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	9800      	ldr	r0, [sp, #0]
 8011e20:	9901      	ldr	r1, [sp, #4]
 8011e22:	4b53      	ldr	r3, [pc, #332]	; (8011f70 <__ieee754_pow+0x3d4>)
 8011e24:	f7f0 fd18 	bl	8002858 <__aeabi_dsub>
 8011e28:	22c0      	movs	r2, #192	; 0xc0
 8011e2a:	4b52      	ldr	r3, [pc, #328]	; (8011f74 <__ieee754_pow+0x3d8>)
 8011e2c:	05d2      	lsls	r2, r2, #23
 8011e2e:	0004      	movs	r4, r0
 8011e30:	000d      	movs	r5, r1
 8011e32:	f7f0 fa4f 	bl	80022d4 <__aeabi_dmul>
 8011e36:	4a50      	ldr	r2, [pc, #320]	; (8011f78 <__ieee754_pow+0x3dc>)
 8011e38:	0006      	movs	r6, r0
 8011e3a:	000f      	movs	r7, r1
 8011e3c:	0020      	movs	r0, r4
 8011e3e:	0029      	movs	r1, r5
 8011e40:	4b4e      	ldr	r3, [pc, #312]	; (8011f7c <__ieee754_pow+0x3e0>)
 8011e42:	f7f0 fa47 	bl	80022d4 <__aeabi_dmul>
 8011e46:	2200      	movs	r2, #0
 8011e48:	9000      	str	r0, [sp, #0]
 8011e4a:	9101      	str	r1, [sp, #4]
 8011e4c:	4b4c      	ldr	r3, [pc, #304]	; (8011f80 <__ieee754_pow+0x3e4>)
 8011e4e:	0020      	movs	r0, r4
 8011e50:	0029      	movs	r1, r5
 8011e52:	f7f0 fa3f 	bl	80022d4 <__aeabi_dmul>
 8011e56:	0002      	movs	r2, r0
 8011e58:	000b      	movs	r3, r1
 8011e5a:	484a      	ldr	r0, [pc, #296]	; (8011f84 <__ieee754_pow+0x3e8>)
 8011e5c:	494a      	ldr	r1, [pc, #296]	; (8011f88 <__ieee754_pow+0x3ec>)
 8011e5e:	f7f0 fcfb 	bl	8002858 <__aeabi_dsub>
 8011e62:	0022      	movs	r2, r4
 8011e64:	002b      	movs	r3, r5
 8011e66:	f7f0 fa35 	bl	80022d4 <__aeabi_dmul>
 8011e6a:	0002      	movs	r2, r0
 8011e6c:	000b      	movs	r3, r1
 8011e6e:	2000      	movs	r0, #0
 8011e70:	4946      	ldr	r1, [pc, #280]	; (8011f8c <__ieee754_pow+0x3f0>)
 8011e72:	f7f0 fcf1 	bl	8002858 <__aeabi_dsub>
 8011e76:	0022      	movs	r2, r4
 8011e78:	002b      	movs	r3, r5
 8011e7a:	9004      	str	r0, [sp, #16]
 8011e7c:	9105      	str	r1, [sp, #20]
 8011e7e:	0020      	movs	r0, r4
 8011e80:	0029      	movs	r1, r5
 8011e82:	f7f0 fa27 	bl	80022d4 <__aeabi_dmul>
 8011e86:	0002      	movs	r2, r0
 8011e88:	000b      	movs	r3, r1
 8011e8a:	9804      	ldr	r0, [sp, #16]
 8011e8c:	9905      	ldr	r1, [sp, #20]
 8011e8e:	f7f0 fa21 	bl	80022d4 <__aeabi_dmul>
 8011e92:	4a3f      	ldr	r2, [pc, #252]	; (8011f90 <__ieee754_pow+0x3f4>)
 8011e94:	4b37      	ldr	r3, [pc, #220]	; (8011f74 <__ieee754_pow+0x3d8>)
 8011e96:	f7f0 fa1d 	bl	80022d4 <__aeabi_dmul>
 8011e9a:	0002      	movs	r2, r0
 8011e9c:	000b      	movs	r3, r1
 8011e9e:	9800      	ldr	r0, [sp, #0]
 8011ea0:	9901      	ldr	r1, [sp, #4]
 8011ea2:	f7f0 fcd9 	bl	8002858 <__aeabi_dsub>
 8011ea6:	0002      	movs	r2, r0
 8011ea8:	000b      	movs	r3, r1
 8011eaa:	0004      	movs	r4, r0
 8011eac:	000d      	movs	r5, r1
 8011eae:	0030      	movs	r0, r6
 8011eb0:	0039      	movs	r1, r7
 8011eb2:	f7ef fab5 	bl	8001420 <__aeabi_dadd>
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	0032      	movs	r2, r6
 8011eba:	003b      	movs	r3, r7
 8011ebc:	9004      	str	r0, [sp, #16]
 8011ebe:	9105      	str	r1, [sp, #20]
 8011ec0:	f7f0 fcca 	bl	8002858 <__aeabi_dsub>
 8011ec4:	0002      	movs	r2, r0
 8011ec6:	000b      	movs	r3, r1
 8011ec8:	0020      	movs	r0, r4
 8011eca:	0029      	movs	r1, r5
 8011ecc:	f7f0 fcc4 	bl	8002858 <__aeabi_dsub>
 8011ed0:	9b06      	ldr	r3, [sp, #24]
 8011ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ed4:	3b01      	subs	r3, #1
 8011ed6:	0006      	movs	r6, r0
 8011ed8:	000f      	movs	r7, r1
 8011eda:	4313      	orrs	r3, r2
 8011edc:	d000      	beq.n	8011ee0 <__ieee754_pow+0x344>
 8011ede:	e1dc      	b.n	801229a <__ieee754_pow+0x6fe>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	4c2c      	ldr	r4, [pc, #176]	; (8011f94 <__ieee754_pow+0x3f8>)
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	9401      	str	r4, [sp, #4]
 8011ee8:	9c02      	ldr	r4, [sp, #8]
 8011eea:	9d03      	ldr	r5, [sp, #12]
 8011eec:	9802      	ldr	r0, [sp, #8]
 8011eee:	9903      	ldr	r1, [sp, #12]
 8011ef0:	2400      	movs	r4, #0
 8011ef2:	002b      	movs	r3, r5
 8011ef4:	0022      	movs	r2, r4
 8011ef6:	f7f0 fcaf 	bl	8002858 <__aeabi_dsub>
 8011efa:	9a04      	ldr	r2, [sp, #16]
 8011efc:	9b05      	ldr	r3, [sp, #20]
 8011efe:	f7f0 f9e9 	bl	80022d4 <__aeabi_dmul>
 8011f02:	9a02      	ldr	r2, [sp, #8]
 8011f04:	9b03      	ldr	r3, [sp, #12]
 8011f06:	9006      	str	r0, [sp, #24]
 8011f08:	9107      	str	r1, [sp, #28]
 8011f0a:	0030      	movs	r0, r6
 8011f0c:	0039      	movs	r1, r7
 8011f0e:	f7f0 f9e1 	bl	80022d4 <__aeabi_dmul>
 8011f12:	0002      	movs	r2, r0
 8011f14:	000b      	movs	r3, r1
 8011f16:	9806      	ldr	r0, [sp, #24]
 8011f18:	9907      	ldr	r1, [sp, #28]
 8011f1a:	f7ef fa81 	bl	8001420 <__aeabi_dadd>
 8011f1e:	0022      	movs	r2, r4
 8011f20:	002b      	movs	r3, r5
 8011f22:	0006      	movs	r6, r0
 8011f24:	000f      	movs	r7, r1
 8011f26:	9804      	ldr	r0, [sp, #16]
 8011f28:	9905      	ldr	r1, [sp, #20]
 8011f2a:	f7f0 f9d3 	bl	80022d4 <__aeabi_dmul>
 8011f2e:	0003      	movs	r3, r0
 8011f30:	000c      	movs	r4, r1
 8011f32:	9004      	str	r0, [sp, #16]
 8011f34:	9105      	str	r1, [sp, #20]
 8011f36:	9306      	str	r3, [sp, #24]
 8011f38:	9407      	str	r4, [sp, #28]
 8011f3a:	0002      	movs	r2, r0
 8011f3c:	000b      	movs	r3, r1
 8011f3e:	0030      	movs	r0, r6
 8011f40:	0039      	movs	r1, r7
 8011f42:	f7ef fa6d 	bl	8001420 <__aeabi_dadd>
 8011f46:	4b14      	ldr	r3, [pc, #80]	; (8011f98 <__ieee754_pow+0x3fc>)
 8011f48:	0005      	movs	r5, r0
 8011f4a:	000c      	movs	r4, r1
 8011f4c:	9108      	str	r1, [sp, #32]
 8011f4e:	4299      	cmp	r1, r3
 8011f50:	dc00      	bgt.n	8011f54 <__ieee754_pow+0x3b8>
 8011f52:	e2d4      	b.n	80124fe <__ieee754_pow+0x962>
 8011f54:	4b11      	ldr	r3, [pc, #68]	; (8011f9c <__ieee754_pow+0x400>)
 8011f56:	18cb      	adds	r3, r1, r3
 8011f58:	4303      	orrs	r3, r0
 8011f5a:	d100      	bne.n	8011f5e <__ieee754_pow+0x3c2>
 8011f5c:	e1d6      	b.n	801230c <__ieee754_pow+0x770>
 8011f5e:	9800      	ldr	r0, [sp, #0]
 8011f60:	9901      	ldr	r1, [sp, #4]
 8011f62:	2300      	movs	r3, #0
 8011f64:	2200      	movs	r2, #0
 8011f66:	f7ee fa77 	bl	8000458 <__aeabi_dcmplt>
 8011f6a:	1e43      	subs	r3, r0, #1
 8011f6c:	4198      	sbcs	r0, r3
 8011f6e:	e72f      	b.n	8011dd0 <__ieee754_pow+0x234>
 8011f70:	3ff00000 	.word	0x3ff00000
 8011f74:	3ff71547 	.word	0x3ff71547
 8011f78:	f85ddf44 	.word	0xf85ddf44
 8011f7c:	3e54ae0b 	.word	0x3e54ae0b
 8011f80:	3fd00000 	.word	0x3fd00000
 8011f84:	55555555 	.word	0x55555555
 8011f88:	3fd55555 	.word	0x3fd55555
 8011f8c:	3fe00000 	.word	0x3fe00000
 8011f90:	652b82fe 	.word	0x652b82fe
 8011f94:	bff00000 	.word	0xbff00000
 8011f98:	408fffff 	.word	0x408fffff
 8011f9c:	bf700000 	.word	0xbf700000
 8011fa0:	4bbf      	ldr	r3, [pc, #764]	; (80122a0 <__ieee754_pow+0x704>)
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	422b      	tst	r3, r5
 8011fa6:	d10a      	bne.n	8011fbe <__ieee754_pow+0x422>
 8011fa8:	9800      	ldr	r0, [sp, #0]
 8011faa:	9901      	ldr	r1, [sp, #4]
 8011fac:	2200      	movs	r2, #0
 8011fae:	4bbd      	ldr	r3, [pc, #756]	; (80122a4 <__ieee754_pow+0x708>)
 8011fb0:	f7f0 f990 	bl	80022d4 <__aeabi_dmul>
 8011fb4:	2235      	movs	r2, #53	; 0x35
 8011fb6:	9000      	str	r0, [sp, #0]
 8011fb8:	9101      	str	r1, [sp, #4]
 8011fba:	9c01      	ldr	r4, [sp, #4]
 8011fbc:	4252      	negs	r2, r2
 8011fbe:	49ba      	ldr	r1, [pc, #744]	; (80122a8 <__ieee754_pow+0x70c>)
 8011fc0:	1523      	asrs	r3, r4, #20
 8011fc2:	185b      	adds	r3, r3, r1
 8011fc4:	189b      	adds	r3, r3, r2
 8011fc6:	0324      	lsls	r4, r4, #12
 8011fc8:	4db8      	ldr	r5, [pc, #736]	; (80122ac <__ieee754_pow+0x710>)
 8011fca:	930d      	str	r3, [sp, #52]	; 0x34
 8011fcc:	4bb8      	ldr	r3, [pc, #736]	; (80122b0 <__ieee754_pow+0x714>)
 8011fce:	0b22      	lsrs	r2, r4, #12
 8011fd0:	4315      	orrs	r5, r2
 8011fd2:	2400      	movs	r4, #0
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	dd09      	ble.n	8011fec <__ieee754_pow+0x450>
 8011fd8:	4bb6      	ldr	r3, [pc, #728]	; (80122b4 <__ieee754_pow+0x718>)
 8011fda:	3401      	adds	r4, #1
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	dd05      	ble.n	8011fec <__ieee754_pow+0x450>
 8011fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fe2:	191b      	adds	r3, r3, r4
 8011fe4:	2400      	movs	r4, #0
 8011fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8011fe8:	4bb3      	ldr	r3, [pc, #716]	; (80122b8 <__ieee754_pow+0x71c>)
 8011fea:	18ed      	adds	r5, r5, r3
 8011fec:	4bb3      	ldr	r3, [pc, #716]	; (80122bc <__ieee754_pow+0x720>)
 8011fee:	00e2      	lsls	r2, r4, #3
 8011ff0:	189b      	adds	r3, r3, r2
 8011ff2:	9800      	ldr	r0, [sp, #0]
 8011ff4:	9901      	ldr	r1, [sp, #4]
 8011ff6:	920f      	str	r2, [sp, #60]	; 0x3c
 8011ff8:	0029      	movs	r1, r5
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	0006      	movs	r6, r0
 8012000:	920a      	str	r2, [sp, #40]	; 0x28
 8012002:	930b      	str	r3, [sp, #44]	; 0x2c
 8012004:	f7f0 fc28 	bl	8002858 <__aeabi_dsub>
 8012008:	0032      	movs	r2, r6
 801200a:	002b      	movs	r3, r5
 801200c:	9010      	str	r0, [sp, #64]	; 0x40
 801200e:	9111      	str	r1, [sp, #68]	; 0x44
 8012010:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012014:	f7ef fa04 	bl	8001420 <__aeabi_dadd>
 8012018:	0002      	movs	r2, r0
 801201a:	000b      	movs	r3, r1
 801201c:	2000      	movs	r0, #0
 801201e:	49a3      	ldr	r1, [pc, #652]	; (80122ac <__ieee754_pow+0x710>)
 8012020:	f7ef fd5e 	bl	8001ae0 <__aeabi_ddiv>
 8012024:	0002      	movs	r2, r0
 8012026:	000b      	movs	r3, r1
 8012028:	9012      	str	r0, [sp, #72]	; 0x48
 801202a:	9113      	str	r1, [sp, #76]	; 0x4c
 801202c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801202e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012030:	f7f0 f950 	bl	80022d4 <__aeabi_dmul>
 8012034:	9008      	str	r0, [sp, #32]
 8012036:	9109      	str	r1, [sp, #36]	; 0x24
 8012038:	9a08      	ldr	r2, [sp, #32]
 801203a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801203c:	9204      	str	r2, [sp, #16]
 801203e:	9305      	str	r3, [sp, #20]
 8012040:	2300      	movs	r3, #0
 8012042:	2180      	movs	r1, #128	; 0x80
 8012044:	2080      	movs	r0, #128	; 0x80
 8012046:	9304      	str	r3, [sp, #16]
 8012048:	9a04      	ldr	r2, [sp, #16]
 801204a:	9b05      	ldr	r3, [sp, #20]
 801204c:	9200      	str	r2, [sp, #0]
 801204e:	9301      	str	r3, [sp, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	002f      	movs	r7, r5
 8012054:	0589      	lsls	r1, r1, #22
 8012056:	106d      	asrs	r5, r5, #1
 8012058:	4329      	orrs	r1, r5
 801205a:	0300      	lsls	r0, r0, #12
 801205c:	1809      	adds	r1, r1, r0
 801205e:	04a0      	lsls	r0, r4, #18
 8012060:	180b      	adds	r3, r1, r0
 8012062:	9800      	ldr	r0, [sp, #0]
 8012064:	9901      	ldr	r1, [sp, #4]
 8012066:	0014      	movs	r4, r2
 8012068:	001d      	movs	r5, r3
 801206a:	f7f0 f933 	bl	80022d4 <__aeabi_dmul>
 801206e:	0002      	movs	r2, r0
 8012070:	000b      	movs	r3, r1
 8012072:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012074:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012076:	f7f0 fbef 	bl	8002858 <__aeabi_dsub>
 801207a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801207c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801207e:	9010      	str	r0, [sp, #64]	; 0x40
 8012080:	9111      	str	r1, [sp, #68]	; 0x44
 8012082:	0020      	movs	r0, r4
 8012084:	0029      	movs	r1, r5
 8012086:	f7f0 fbe7 	bl	8002858 <__aeabi_dsub>
 801208a:	0002      	movs	r2, r0
 801208c:	000b      	movs	r3, r1
 801208e:	0030      	movs	r0, r6
 8012090:	0039      	movs	r1, r7
 8012092:	f7f0 fbe1 	bl	8002858 <__aeabi_dsub>
 8012096:	9a00      	ldr	r2, [sp, #0]
 8012098:	9b01      	ldr	r3, [sp, #4]
 801209a:	f7f0 f91b 	bl	80022d4 <__aeabi_dmul>
 801209e:	0002      	movs	r2, r0
 80120a0:	000b      	movs	r3, r1
 80120a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80120a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80120a6:	f7f0 fbd7 	bl	8002858 <__aeabi_dsub>
 80120aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80120ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80120ae:	f7f0 f911 	bl	80022d4 <__aeabi_dmul>
 80120b2:	9a08      	ldr	r2, [sp, #32]
 80120b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b6:	900a      	str	r0, [sp, #40]	; 0x28
 80120b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80120ba:	0010      	movs	r0, r2
 80120bc:	0019      	movs	r1, r3
 80120be:	f7f0 f909 	bl	80022d4 <__aeabi_dmul>
 80120c2:	0006      	movs	r6, r0
 80120c4:	000f      	movs	r7, r1
 80120c6:	4a7e      	ldr	r2, [pc, #504]	; (80122c0 <__ieee754_pow+0x724>)
 80120c8:	4b7e      	ldr	r3, [pc, #504]	; (80122c4 <__ieee754_pow+0x728>)
 80120ca:	f7f0 f903 	bl	80022d4 <__aeabi_dmul>
 80120ce:	4a7e      	ldr	r2, [pc, #504]	; (80122c8 <__ieee754_pow+0x72c>)
 80120d0:	4b7e      	ldr	r3, [pc, #504]	; (80122cc <__ieee754_pow+0x730>)
 80120d2:	f7ef f9a5 	bl	8001420 <__aeabi_dadd>
 80120d6:	0032      	movs	r2, r6
 80120d8:	003b      	movs	r3, r7
 80120da:	f7f0 f8fb 	bl	80022d4 <__aeabi_dmul>
 80120de:	4a7c      	ldr	r2, [pc, #496]	; (80122d0 <__ieee754_pow+0x734>)
 80120e0:	4b7c      	ldr	r3, [pc, #496]	; (80122d4 <__ieee754_pow+0x738>)
 80120e2:	f7ef f99d 	bl	8001420 <__aeabi_dadd>
 80120e6:	0032      	movs	r2, r6
 80120e8:	003b      	movs	r3, r7
 80120ea:	f7f0 f8f3 	bl	80022d4 <__aeabi_dmul>
 80120ee:	4a7a      	ldr	r2, [pc, #488]	; (80122d8 <__ieee754_pow+0x73c>)
 80120f0:	4b7a      	ldr	r3, [pc, #488]	; (80122dc <__ieee754_pow+0x740>)
 80120f2:	f7ef f995 	bl	8001420 <__aeabi_dadd>
 80120f6:	0032      	movs	r2, r6
 80120f8:	003b      	movs	r3, r7
 80120fa:	f7f0 f8eb 	bl	80022d4 <__aeabi_dmul>
 80120fe:	4a78      	ldr	r2, [pc, #480]	; (80122e0 <__ieee754_pow+0x744>)
 8012100:	4b78      	ldr	r3, [pc, #480]	; (80122e4 <__ieee754_pow+0x748>)
 8012102:	f7ef f98d 	bl	8001420 <__aeabi_dadd>
 8012106:	0032      	movs	r2, r6
 8012108:	003b      	movs	r3, r7
 801210a:	f7f0 f8e3 	bl	80022d4 <__aeabi_dmul>
 801210e:	4a76      	ldr	r2, [pc, #472]	; (80122e8 <__ieee754_pow+0x74c>)
 8012110:	4b76      	ldr	r3, [pc, #472]	; (80122ec <__ieee754_pow+0x750>)
 8012112:	f7ef f985 	bl	8001420 <__aeabi_dadd>
 8012116:	0032      	movs	r2, r6
 8012118:	0004      	movs	r4, r0
 801211a:	000d      	movs	r5, r1
 801211c:	003b      	movs	r3, r7
 801211e:	0030      	movs	r0, r6
 8012120:	0039      	movs	r1, r7
 8012122:	f7f0 f8d7 	bl	80022d4 <__aeabi_dmul>
 8012126:	0002      	movs	r2, r0
 8012128:	000b      	movs	r3, r1
 801212a:	0020      	movs	r0, r4
 801212c:	0029      	movs	r1, r5
 801212e:	f7f0 f8d1 	bl	80022d4 <__aeabi_dmul>
 8012132:	9a00      	ldr	r2, [sp, #0]
 8012134:	9b01      	ldr	r3, [sp, #4]
 8012136:	0004      	movs	r4, r0
 8012138:	000d      	movs	r5, r1
 801213a:	9808      	ldr	r0, [sp, #32]
 801213c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801213e:	f7ef f96f 	bl	8001420 <__aeabi_dadd>
 8012142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012146:	f7f0 f8c5 	bl	80022d4 <__aeabi_dmul>
 801214a:	0022      	movs	r2, r4
 801214c:	002b      	movs	r3, r5
 801214e:	f7ef f967 	bl	8001420 <__aeabi_dadd>
 8012152:	9a00      	ldr	r2, [sp, #0]
 8012154:	9b01      	ldr	r3, [sp, #4]
 8012156:	9010      	str	r0, [sp, #64]	; 0x40
 8012158:	9111      	str	r1, [sp, #68]	; 0x44
 801215a:	0010      	movs	r0, r2
 801215c:	0019      	movs	r1, r3
 801215e:	f7f0 f8b9 	bl	80022d4 <__aeabi_dmul>
 8012162:	2200      	movs	r2, #0
 8012164:	4b62      	ldr	r3, [pc, #392]	; (80122f0 <__ieee754_pow+0x754>)
 8012166:	0004      	movs	r4, r0
 8012168:	000d      	movs	r5, r1
 801216a:	f7ef f959 	bl	8001420 <__aeabi_dadd>
 801216e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012172:	f7ef f955 	bl	8001420 <__aeabi_dadd>
 8012176:	2000      	movs	r0, #0
 8012178:	000f      	movs	r7, r1
 801217a:	0006      	movs	r6, r0
 801217c:	0002      	movs	r2, r0
 801217e:	000b      	movs	r3, r1
 8012180:	9800      	ldr	r0, [sp, #0]
 8012182:	9901      	ldr	r1, [sp, #4]
 8012184:	f7f0 f8a6 	bl	80022d4 <__aeabi_dmul>
 8012188:	2200      	movs	r2, #0
 801218a:	9000      	str	r0, [sp, #0]
 801218c:	9101      	str	r1, [sp, #4]
 801218e:	4b58      	ldr	r3, [pc, #352]	; (80122f0 <__ieee754_pow+0x754>)
 8012190:	0030      	movs	r0, r6
 8012192:	0039      	movs	r1, r7
 8012194:	f7f0 fb60 	bl	8002858 <__aeabi_dsub>
 8012198:	0022      	movs	r2, r4
 801219a:	002b      	movs	r3, r5
 801219c:	f7f0 fb5c 	bl	8002858 <__aeabi_dsub>
 80121a0:	0002      	movs	r2, r0
 80121a2:	000b      	movs	r3, r1
 80121a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80121a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80121a8:	f7f0 fb56 	bl	8002858 <__aeabi_dsub>
 80121ac:	9a08      	ldr	r2, [sp, #32]
 80121ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121b0:	f7f0 f890 	bl	80022d4 <__aeabi_dmul>
 80121b4:	0032      	movs	r2, r6
 80121b6:	0004      	movs	r4, r0
 80121b8:	000d      	movs	r5, r1
 80121ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80121bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80121be:	003b      	movs	r3, r7
 80121c0:	f7f0 f888 	bl	80022d4 <__aeabi_dmul>
 80121c4:	0002      	movs	r2, r0
 80121c6:	000b      	movs	r3, r1
 80121c8:	0020      	movs	r0, r4
 80121ca:	0029      	movs	r1, r5
 80121cc:	f7ef f928 	bl	8001420 <__aeabi_dadd>
 80121d0:	0004      	movs	r4, r0
 80121d2:	000d      	movs	r5, r1
 80121d4:	0002      	movs	r2, r0
 80121d6:	000b      	movs	r3, r1
 80121d8:	9800      	ldr	r0, [sp, #0]
 80121da:	9901      	ldr	r1, [sp, #4]
 80121dc:	f7ef f920 	bl	8001420 <__aeabi_dadd>
 80121e0:	22e0      	movs	r2, #224	; 0xe0
 80121e2:	2000      	movs	r0, #0
 80121e4:	4b43      	ldr	r3, [pc, #268]	; (80122f4 <__ieee754_pow+0x758>)
 80121e6:	0612      	lsls	r2, r2, #24
 80121e8:	0006      	movs	r6, r0
 80121ea:	000f      	movs	r7, r1
 80121ec:	f7f0 f872 	bl	80022d4 <__aeabi_dmul>
 80121f0:	9008      	str	r0, [sp, #32]
 80121f2:	9109      	str	r1, [sp, #36]	; 0x24
 80121f4:	9a00      	ldr	r2, [sp, #0]
 80121f6:	9b01      	ldr	r3, [sp, #4]
 80121f8:	0030      	movs	r0, r6
 80121fa:	0039      	movs	r1, r7
 80121fc:	f7f0 fb2c 	bl	8002858 <__aeabi_dsub>
 8012200:	0002      	movs	r2, r0
 8012202:	000b      	movs	r3, r1
 8012204:	0020      	movs	r0, r4
 8012206:	0029      	movs	r1, r5
 8012208:	f7f0 fb26 	bl	8002858 <__aeabi_dsub>
 801220c:	4a3a      	ldr	r2, [pc, #232]	; (80122f8 <__ieee754_pow+0x75c>)
 801220e:	4b39      	ldr	r3, [pc, #228]	; (80122f4 <__ieee754_pow+0x758>)
 8012210:	f7f0 f860 	bl	80022d4 <__aeabi_dmul>
 8012214:	4a39      	ldr	r2, [pc, #228]	; (80122fc <__ieee754_pow+0x760>)
 8012216:	0004      	movs	r4, r0
 8012218:	000d      	movs	r5, r1
 801221a:	0030      	movs	r0, r6
 801221c:	0039      	movs	r1, r7
 801221e:	4b38      	ldr	r3, [pc, #224]	; (8012300 <__ieee754_pow+0x764>)
 8012220:	f7f0 f858 	bl	80022d4 <__aeabi_dmul>
 8012224:	0002      	movs	r2, r0
 8012226:	000b      	movs	r3, r1
 8012228:	0020      	movs	r0, r4
 801222a:	0029      	movs	r1, r5
 801222c:	f7ef f8f8 	bl	8001420 <__aeabi_dadd>
 8012230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012232:	4b34      	ldr	r3, [pc, #208]	; (8012304 <__ieee754_pow+0x768>)
 8012234:	189b      	adds	r3, r3, r2
 8012236:	681a      	ldr	r2, [r3, #0]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	f7ef f8f1 	bl	8001420 <__aeabi_dadd>
 801223e:	9000      	str	r0, [sp, #0]
 8012240:	9101      	str	r1, [sp, #4]
 8012242:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012244:	f7f0 fede 	bl	8003004 <__aeabi_i2d>
 8012248:	0004      	movs	r4, r0
 801224a:	000d      	movs	r5, r1
 801224c:	9808      	ldr	r0, [sp, #32]
 801224e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012252:	4b2d      	ldr	r3, [pc, #180]	; (8012308 <__ieee754_pow+0x76c>)
 8012254:	189b      	adds	r3, r3, r2
 8012256:	681e      	ldr	r6, [r3, #0]
 8012258:	685f      	ldr	r7, [r3, #4]
 801225a:	9a00      	ldr	r2, [sp, #0]
 801225c:	9b01      	ldr	r3, [sp, #4]
 801225e:	f7ef f8df 	bl	8001420 <__aeabi_dadd>
 8012262:	0032      	movs	r2, r6
 8012264:	003b      	movs	r3, r7
 8012266:	f7ef f8db 	bl	8001420 <__aeabi_dadd>
 801226a:	0022      	movs	r2, r4
 801226c:	002b      	movs	r3, r5
 801226e:	f7ef f8d7 	bl	8001420 <__aeabi_dadd>
 8012272:	2000      	movs	r0, #0
 8012274:	0022      	movs	r2, r4
 8012276:	002b      	movs	r3, r5
 8012278:	9004      	str	r0, [sp, #16]
 801227a:	9105      	str	r1, [sp, #20]
 801227c:	f7f0 faec 	bl	8002858 <__aeabi_dsub>
 8012280:	0032      	movs	r2, r6
 8012282:	003b      	movs	r3, r7
 8012284:	f7f0 fae8 	bl	8002858 <__aeabi_dsub>
 8012288:	9a08      	ldr	r2, [sp, #32]
 801228a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801228c:	f7f0 fae4 	bl	8002858 <__aeabi_dsub>
 8012290:	0002      	movs	r2, r0
 8012292:	000b      	movs	r3, r1
 8012294:	9800      	ldr	r0, [sp, #0]
 8012296:	9901      	ldr	r1, [sp, #4]
 8012298:	e618      	b.n	8011ecc <__ieee754_pow+0x330>
 801229a:	2300      	movs	r3, #0
 801229c:	4c03      	ldr	r4, [pc, #12]	; (80122ac <__ieee754_pow+0x710>)
 801229e:	e621      	b.n	8011ee4 <__ieee754_pow+0x348>
 80122a0:	7ff00000 	.word	0x7ff00000
 80122a4:	43400000 	.word	0x43400000
 80122a8:	fffffc01 	.word	0xfffffc01
 80122ac:	3ff00000 	.word	0x3ff00000
 80122b0:	0003988e 	.word	0x0003988e
 80122b4:	000bb679 	.word	0x000bb679
 80122b8:	fff00000 	.word	0xfff00000
 80122bc:	08014020 	.word	0x08014020
 80122c0:	4a454eef 	.word	0x4a454eef
 80122c4:	3fca7e28 	.word	0x3fca7e28
 80122c8:	93c9db65 	.word	0x93c9db65
 80122cc:	3fcd864a 	.word	0x3fcd864a
 80122d0:	a91d4101 	.word	0xa91d4101
 80122d4:	3fd17460 	.word	0x3fd17460
 80122d8:	518f264d 	.word	0x518f264d
 80122dc:	3fd55555 	.word	0x3fd55555
 80122e0:	db6fabff 	.word	0xdb6fabff
 80122e4:	3fdb6db6 	.word	0x3fdb6db6
 80122e8:	33333303 	.word	0x33333303
 80122ec:	3fe33333 	.word	0x3fe33333
 80122f0:	40080000 	.word	0x40080000
 80122f4:	3feec709 	.word	0x3feec709
 80122f8:	dc3a03fd 	.word	0xdc3a03fd
 80122fc:	145b01f5 	.word	0x145b01f5
 8012300:	be3e2fe0 	.word	0xbe3e2fe0
 8012304:	08014040 	.word	0x08014040
 8012308:	08014030 	.word	0x08014030
 801230c:	4a90      	ldr	r2, [pc, #576]	; (8012550 <__ieee754_pow+0x9b4>)
 801230e:	4b91      	ldr	r3, [pc, #580]	; (8012554 <__ieee754_pow+0x9b8>)
 8012310:	0030      	movs	r0, r6
 8012312:	0039      	movs	r1, r7
 8012314:	f7ef f884 	bl	8001420 <__aeabi_dadd>
 8012318:	9a04      	ldr	r2, [sp, #16]
 801231a:	9b05      	ldr	r3, [sp, #20]
 801231c:	9002      	str	r0, [sp, #8]
 801231e:	9103      	str	r1, [sp, #12]
 8012320:	0028      	movs	r0, r5
 8012322:	0021      	movs	r1, r4
 8012324:	f7f0 fa98 	bl	8002858 <__aeabi_dsub>
 8012328:	0002      	movs	r2, r0
 801232a:	000b      	movs	r3, r1
 801232c:	9802      	ldr	r0, [sp, #8]
 801232e:	9903      	ldr	r1, [sp, #12]
 8012330:	f7ee f8a6 	bl	8000480 <__aeabi_dcmpgt>
 8012334:	2800      	cmp	r0, #0
 8012336:	d000      	beq.n	801233a <__ieee754_pow+0x79e>
 8012338:	e611      	b.n	8011f5e <__ieee754_pow+0x3c2>
 801233a:	2100      	movs	r1, #0
 801233c:	4a86      	ldr	r2, [pc, #536]	; (8012558 <__ieee754_pow+0x9bc>)
 801233e:	0063      	lsls	r3, r4, #1
 8012340:	085b      	lsrs	r3, r3, #1
 8012342:	9102      	str	r1, [sp, #8]
 8012344:	4293      	cmp	r3, r2
 8012346:	dd25      	ble.n	8012394 <__ieee754_pow+0x7f8>
 8012348:	4a84      	ldr	r2, [pc, #528]	; (801255c <__ieee754_pow+0x9c0>)
 801234a:	151b      	asrs	r3, r3, #20
 801234c:	189b      	adds	r3, r3, r2
 801234e:	2280      	movs	r2, #128	; 0x80
 8012350:	0352      	lsls	r2, r2, #13
 8012352:	0011      	movs	r1, r2
 8012354:	4119      	asrs	r1, r3
 8012356:	190b      	adds	r3, r1, r4
 8012358:	005c      	lsls	r4, r3, #1
 801235a:	4981      	ldr	r1, [pc, #516]	; (8012560 <__ieee754_pow+0x9c4>)
 801235c:	4d81      	ldr	r5, [pc, #516]	; (8012564 <__ieee754_pow+0x9c8>)
 801235e:	0d64      	lsrs	r4, r4, #21
 8012360:	1864      	adds	r4, r4, r1
 8012362:	4125      	asrs	r5, r4
 8012364:	401d      	ands	r5, r3
 8012366:	031b      	lsls	r3, r3, #12
 8012368:	0b1b      	lsrs	r3, r3, #12
 801236a:	4313      	orrs	r3, r2
 801236c:	2214      	movs	r2, #20
 801236e:	1b12      	subs	r2, r2, r4
 8012370:	4113      	asrs	r3, r2
 8012372:	9302      	str	r3, [sp, #8]
 8012374:	9b08      	ldr	r3, [sp, #32]
 8012376:	2000      	movs	r0, #0
 8012378:	0029      	movs	r1, r5
 801237a:	2b00      	cmp	r3, #0
 801237c:	da02      	bge.n	8012384 <__ieee754_pow+0x7e8>
 801237e:	9b02      	ldr	r3, [sp, #8]
 8012380:	425b      	negs	r3, r3
 8012382:	9302      	str	r3, [sp, #8]
 8012384:	0002      	movs	r2, r0
 8012386:	000b      	movs	r3, r1
 8012388:	9804      	ldr	r0, [sp, #16]
 801238a:	9905      	ldr	r1, [sp, #20]
 801238c:	f7f0 fa64 	bl	8002858 <__aeabi_dsub>
 8012390:	9006      	str	r0, [sp, #24]
 8012392:	9107      	str	r1, [sp, #28]
 8012394:	9806      	ldr	r0, [sp, #24]
 8012396:	9907      	ldr	r1, [sp, #28]
 8012398:	0032      	movs	r2, r6
 801239a:	003b      	movs	r3, r7
 801239c:	f7ef f840 	bl	8001420 <__aeabi_dadd>
 80123a0:	2000      	movs	r0, #0
 80123a2:	2200      	movs	r2, #0
 80123a4:	4b70      	ldr	r3, [pc, #448]	; (8012568 <__ieee754_pow+0x9cc>)
 80123a6:	9004      	str	r0, [sp, #16]
 80123a8:	9105      	str	r1, [sp, #20]
 80123aa:	f7ef ff93 	bl	80022d4 <__aeabi_dmul>
 80123ae:	9a06      	ldr	r2, [sp, #24]
 80123b0:	9b07      	ldr	r3, [sp, #28]
 80123b2:	9008      	str	r0, [sp, #32]
 80123b4:	9109      	str	r1, [sp, #36]	; 0x24
 80123b6:	9804      	ldr	r0, [sp, #16]
 80123b8:	9905      	ldr	r1, [sp, #20]
 80123ba:	f7f0 fa4d 	bl	8002858 <__aeabi_dsub>
 80123be:	0002      	movs	r2, r0
 80123c0:	000b      	movs	r3, r1
 80123c2:	0030      	movs	r0, r6
 80123c4:	0039      	movs	r1, r7
 80123c6:	f7f0 fa47 	bl	8002858 <__aeabi_dsub>
 80123ca:	4a68      	ldr	r2, [pc, #416]	; (801256c <__ieee754_pow+0x9d0>)
 80123cc:	4b68      	ldr	r3, [pc, #416]	; (8012570 <__ieee754_pow+0x9d4>)
 80123ce:	f7ef ff81 	bl	80022d4 <__aeabi_dmul>
 80123d2:	4a68      	ldr	r2, [pc, #416]	; (8012574 <__ieee754_pow+0x9d8>)
 80123d4:	0004      	movs	r4, r0
 80123d6:	000d      	movs	r5, r1
 80123d8:	9804      	ldr	r0, [sp, #16]
 80123da:	9905      	ldr	r1, [sp, #20]
 80123dc:	4b66      	ldr	r3, [pc, #408]	; (8012578 <__ieee754_pow+0x9dc>)
 80123de:	f7ef ff79 	bl	80022d4 <__aeabi_dmul>
 80123e2:	0002      	movs	r2, r0
 80123e4:	000b      	movs	r3, r1
 80123e6:	0020      	movs	r0, r4
 80123e8:	0029      	movs	r1, r5
 80123ea:	f7ef f819 	bl	8001420 <__aeabi_dadd>
 80123ee:	0004      	movs	r4, r0
 80123f0:	000d      	movs	r5, r1
 80123f2:	0002      	movs	r2, r0
 80123f4:	000b      	movs	r3, r1
 80123f6:	9808      	ldr	r0, [sp, #32]
 80123f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123fa:	f7ef f811 	bl	8001420 <__aeabi_dadd>
 80123fe:	9a08      	ldr	r2, [sp, #32]
 8012400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012402:	0006      	movs	r6, r0
 8012404:	000f      	movs	r7, r1
 8012406:	f7f0 fa27 	bl	8002858 <__aeabi_dsub>
 801240a:	0002      	movs	r2, r0
 801240c:	000b      	movs	r3, r1
 801240e:	0020      	movs	r0, r4
 8012410:	0029      	movs	r1, r5
 8012412:	f7f0 fa21 	bl	8002858 <__aeabi_dsub>
 8012416:	0032      	movs	r2, r6
 8012418:	9004      	str	r0, [sp, #16]
 801241a:	9105      	str	r1, [sp, #20]
 801241c:	003b      	movs	r3, r7
 801241e:	0030      	movs	r0, r6
 8012420:	0039      	movs	r1, r7
 8012422:	f7ef ff57 	bl	80022d4 <__aeabi_dmul>
 8012426:	0004      	movs	r4, r0
 8012428:	000d      	movs	r5, r1
 801242a:	4a54      	ldr	r2, [pc, #336]	; (801257c <__ieee754_pow+0x9e0>)
 801242c:	4b54      	ldr	r3, [pc, #336]	; (8012580 <__ieee754_pow+0x9e4>)
 801242e:	f7ef ff51 	bl	80022d4 <__aeabi_dmul>
 8012432:	4a54      	ldr	r2, [pc, #336]	; (8012584 <__ieee754_pow+0x9e8>)
 8012434:	4b54      	ldr	r3, [pc, #336]	; (8012588 <__ieee754_pow+0x9ec>)
 8012436:	f7f0 fa0f 	bl	8002858 <__aeabi_dsub>
 801243a:	0022      	movs	r2, r4
 801243c:	002b      	movs	r3, r5
 801243e:	f7ef ff49 	bl	80022d4 <__aeabi_dmul>
 8012442:	4a52      	ldr	r2, [pc, #328]	; (801258c <__ieee754_pow+0x9f0>)
 8012444:	4b52      	ldr	r3, [pc, #328]	; (8012590 <__ieee754_pow+0x9f4>)
 8012446:	f7ee ffeb 	bl	8001420 <__aeabi_dadd>
 801244a:	0022      	movs	r2, r4
 801244c:	002b      	movs	r3, r5
 801244e:	f7ef ff41 	bl	80022d4 <__aeabi_dmul>
 8012452:	4a50      	ldr	r2, [pc, #320]	; (8012594 <__ieee754_pow+0x9f8>)
 8012454:	4b50      	ldr	r3, [pc, #320]	; (8012598 <__ieee754_pow+0x9fc>)
 8012456:	f7f0 f9ff 	bl	8002858 <__aeabi_dsub>
 801245a:	0022      	movs	r2, r4
 801245c:	002b      	movs	r3, r5
 801245e:	f7ef ff39 	bl	80022d4 <__aeabi_dmul>
 8012462:	4a4e      	ldr	r2, [pc, #312]	; (801259c <__ieee754_pow+0xa00>)
 8012464:	4b4e      	ldr	r3, [pc, #312]	; (80125a0 <__ieee754_pow+0xa04>)
 8012466:	f7ee ffdb 	bl	8001420 <__aeabi_dadd>
 801246a:	0022      	movs	r2, r4
 801246c:	002b      	movs	r3, r5
 801246e:	f7ef ff31 	bl	80022d4 <__aeabi_dmul>
 8012472:	0002      	movs	r2, r0
 8012474:	000b      	movs	r3, r1
 8012476:	0030      	movs	r0, r6
 8012478:	0039      	movs	r1, r7
 801247a:	f7f0 f9ed 	bl	8002858 <__aeabi_dsub>
 801247e:	0004      	movs	r4, r0
 8012480:	000d      	movs	r5, r1
 8012482:	0002      	movs	r2, r0
 8012484:	000b      	movs	r3, r1
 8012486:	0030      	movs	r0, r6
 8012488:	0039      	movs	r1, r7
 801248a:	f7ef ff23 	bl	80022d4 <__aeabi_dmul>
 801248e:	2380      	movs	r3, #128	; 0x80
 8012490:	9006      	str	r0, [sp, #24]
 8012492:	9107      	str	r1, [sp, #28]
 8012494:	2200      	movs	r2, #0
 8012496:	0020      	movs	r0, r4
 8012498:	0029      	movs	r1, r5
 801249a:	05db      	lsls	r3, r3, #23
 801249c:	f7f0 f9dc 	bl	8002858 <__aeabi_dsub>
 80124a0:	0002      	movs	r2, r0
 80124a2:	000b      	movs	r3, r1
 80124a4:	9806      	ldr	r0, [sp, #24]
 80124a6:	9907      	ldr	r1, [sp, #28]
 80124a8:	f7ef fb1a 	bl	8001ae0 <__aeabi_ddiv>
 80124ac:	9a04      	ldr	r2, [sp, #16]
 80124ae:	9b05      	ldr	r3, [sp, #20]
 80124b0:	0004      	movs	r4, r0
 80124b2:	000d      	movs	r5, r1
 80124b4:	0030      	movs	r0, r6
 80124b6:	0039      	movs	r1, r7
 80124b8:	f7ef ff0c 	bl	80022d4 <__aeabi_dmul>
 80124bc:	9a04      	ldr	r2, [sp, #16]
 80124be:	9b05      	ldr	r3, [sp, #20]
 80124c0:	f7ee ffae 	bl	8001420 <__aeabi_dadd>
 80124c4:	0002      	movs	r2, r0
 80124c6:	000b      	movs	r3, r1
 80124c8:	0020      	movs	r0, r4
 80124ca:	0029      	movs	r1, r5
 80124cc:	f7f0 f9c4 	bl	8002858 <__aeabi_dsub>
 80124d0:	0032      	movs	r2, r6
 80124d2:	003b      	movs	r3, r7
 80124d4:	f7f0 f9c0 	bl	8002858 <__aeabi_dsub>
 80124d8:	0002      	movs	r2, r0
 80124da:	000b      	movs	r3, r1
 80124dc:	2000      	movs	r0, #0
 80124de:	4931      	ldr	r1, [pc, #196]	; (80125a4 <__ieee754_pow+0xa08>)
 80124e0:	f7f0 f9ba 	bl	8002858 <__aeabi_dsub>
 80124e4:	9b02      	ldr	r3, [sp, #8]
 80124e6:	051b      	lsls	r3, r3, #20
 80124e8:	185b      	adds	r3, r3, r1
 80124ea:	151a      	asrs	r2, r3, #20
 80124ec:	2a00      	cmp	r2, #0
 80124ee:	dc25      	bgt.n	801253c <__ieee754_pow+0x9a0>
 80124f0:	9a02      	ldr	r2, [sp, #8]
 80124f2:	f000 f861 	bl	80125b8 <scalbn>
 80124f6:	9a00      	ldr	r2, [sp, #0]
 80124f8:	9b01      	ldr	r3, [sp, #4]
 80124fa:	f7ff fc33 	bl	8011d64 <__ieee754_pow+0x1c8>
 80124fe:	4a2a      	ldr	r2, [pc, #168]	; (80125a8 <__ieee754_pow+0xa0c>)
 8012500:	004b      	lsls	r3, r1, #1
 8012502:	085b      	lsrs	r3, r3, #1
 8012504:	4293      	cmp	r3, r2
 8012506:	dc00      	bgt.n	801250a <__ieee754_pow+0x96e>
 8012508:	e717      	b.n	801233a <__ieee754_pow+0x79e>
 801250a:	4b28      	ldr	r3, [pc, #160]	; (80125ac <__ieee754_pow+0xa10>)
 801250c:	18cb      	adds	r3, r1, r3
 801250e:	4303      	orrs	r3, r0
 8012510:	d008      	beq.n	8012524 <__ieee754_pow+0x988>
 8012512:	9800      	ldr	r0, [sp, #0]
 8012514:	9901      	ldr	r1, [sp, #4]
 8012516:	2300      	movs	r3, #0
 8012518:	2200      	movs	r2, #0
 801251a:	f7ed ff9d 	bl	8000458 <__aeabi_dcmplt>
 801251e:	1e43      	subs	r3, r0, #1
 8012520:	4198      	sbcs	r0, r3
 8012522:	e462      	b.n	8011dea <__ieee754_pow+0x24e>
 8012524:	9a04      	ldr	r2, [sp, #16]
 8012526:	9b05      	ldr	r3, [sp, #20]
 8012528:	f7f0 f996 	bl	8002858 <__aeabi_dsub>
 801252c:	0032      	movs	r2, r6
 801252e:	003b      	movs	r3, r7
 8012530:	f7ed ffb0 	bl	8000494 <__aeabi_dcmpge>
 8012534:	2800      	cmp	r0, #0
 8012536:	d100      	bne.n	801253a <__ieee754_pow+0x99e>
 8012538:	e6ff      	b.n	801233a <__ieee754_pow+0x79e>
 801253a:	e7ea      	b.n	8012512 <__ieee754_pow+0x976>
 801253c:	0019      	movs	r1, r3
 801253e:	e7da      	b.n	80124f6 <__ieee754_pow+0x95a>
 8012540:	2300      	movs	r3, #0
 8012542:	4c18      	ldr	r4, [pc, #96]	; (80125a4 <__ieee754_pow+0xa08>)
 8012544:	f7ff fbf1 	bl	8011d2a <__ieee754_pow+0x18e>
 8012548:	2300      	movs	r3, #0
 801254a:	2400      	movs	r4, #0
 801254c:	f7ff fbed 	bl	8011d2a <__ieee754_pow+0x18e>
 8012550:	652b82fe 	.word	0x652b82fe
 8012554:	3c971547 	.word	0x3c971547
 8012558:	3fe00000 	.word	0x3fe00000
 801255c:	fffffc02 	.word	0xfffffc02
 8012560:	fffffc01 	.word	0xfffffc01
 8012564:	fff00000 	.word	0xfff00000
 8012568:	3fe62e43 	.word	0x3fe62e43
 801256c:	fefa39ef 	.word	0xfefa39ef
 8012570:	3fe62e42 	.word	0x3fe62e42
 8012574:	0ca86c39 	.word	0x0ca86c39
 8012578:	be205c61 	.word	0xbe205c61
 801257c:	72bea4d0 	.word	0x72bea4d0
 8012580:	3e663769 	.word	0x3e663769
 8012584:	c5d26bf1 	.word	0xc5d26bf1
 8012588:	3ebbbd41 	.word	0x3ebbbd41
 801258c:	af25de2c 	.word	0xaf25de2c
 8012590:	3f11566a 	.word	0x3f11566a
 8012594:	16bebd93 	.word	0x16bebd93
 8012598:	3f66c16c 	.word	0x3f66c16c
 801259c:	5555553e 	.word	0x5555553e
 80125a0:	3fc55555 	.word	0x3fc55555
 80125a4:	3ff00000 	.word	0x3ff00000
 80125a8:	4090cbff 	.word	0x4090cbff
 80125ac:	3f6f3400 	.word	0x3f6f3400

080125b0 <fabs>:
 80125b0:	0049      	lsls	r1, r1, #1
 80125b2:	084b      	lsrs	r3, r1, #1
 80125b4:	0019      	movs	r1, r3
 80125b6:	4770      	bx	lr

080125b8 <scalbn>:
 80125b8:	b570      	push	{r4, r5, r6, lr}
 80125ba:	0014      	movs	r4, r2
 80125bc:	004a      	lsls	r2, r1, #1
 80125be:	000b      	movs	r3, r1
 80125c0:	0d52      	lsrs	r2, r2, #21
 80125c2:	d10f      	bne.n	80125e4 <scalbn+0x2c>
 80125c4:	004b      	lsls	r3, r1, #1
 80125c6:	085b      	lsrs	r3, r3, #1
 80125c8:	4303      	orrs	r3, r0
 80125ca:	d011      	beq.n	80125f0 <scalbn+0x38>
 80125cc:	4b22      	ldr	r3, [pc, #136]	; (8012658 <scalbn+0xa0>)
 80125ce:	2200      	movs	r2, #0
 80125d0:	f7ef fe80 	bl	80022d4 <__aeabi_dmul>
 80125d4:	4b21      	ldr	r3, [pc, #132]	; (801265c <scalbn+0xa4>)
 80125d6:	429c      	cmp	r4, r3
 80125d8:	da0b      	bge.n	80125f2 <scalbn+0x3a>
 80125da:	4a21      	ldr	r2, [pc, #132]	; (8012660 <scalbn+0xa8>)
 80125dc:	4b21      	ldr	r3, [pc, #132]	; (8012664 <scalbn+0xac>)
 80125de:	f7ef fe79 	bl	80022d4 <__aeabi_dmul>
 80125e2:	e005      	b.n	80125f0 <scalbn+0x38>
 80125e4:	4d20      	ldr	r5, [pc, #128]	; (8012668 <scalbn+0xb0>)
 80125e6:	42aa      	cmp	r2, r5
 80125e8:	d107      	bne.n	80125fa <scalbn+0x42>
 80125ea:	0002      	movs	r2, r0
 80125ec:	f7ee ff18 	bl	8001420 <__aeabi_dadd>
 80125f0:	bd70      	pop	{r4, r5, r6, pc}
 80125f2:	000b      	movs	r3, r1
 80125f4:	004a      	lsls	r2, r1, #1
 80125f6:	0d52      	lsrs	r2, r2, #21
 80125f8:	3a36      	subs	r2, #54	; 0x36
 80125fa:	4d1c      	ldr	r5, [pc, #112]	; (801266c <scalbn+0xb4>)
 80125fc:	42ac      	cmp	r4, r5
 80125fe:	dd0a      	ble.n	8012616 <scalbn+0x5e>
 8012600:	4c1b      	ldr	r4, [pc, #108]	; (8012670 <scalbn+0xb8>)
 8012602:	4d1c      	ldr	r5, [pc, #112]	; (8012674 <scalbn+0xbc>)
 8012604:	2900      	cmp	r1, #0
 8012606:	da01      	bge.n	801260c <scalbn+0x54>
 8012608:	4c19      	ldr	r4, [pc, #100]	; (8012670 <scalbn+0xb8>)
 801260a:	4d1b      	ldr	r5, [pc, #108]	; (8012678 <scalbn+0xc0>)
 801260c:	4a18      	ldr	r2, [pc, #96]	; (8012670 <scalbn+0xb8>)
 801260e:	4b19      	ldr	r3, [pc, #100]	; (8012674 <scalbn+0xbc>)
 8012610:	0020      	movs	r0, r4
 8012612:	0029      	movs	r1, r5
 8012614:	e7e3      	b.n	80125de <scalbn+0x26>
 8012616:	18a2      	adds	r2, r4, r2
 8012618:	4c18      	ldr	r4, [pc, #96]	; (801267c <scalbn+0xc4>)
 801261a:	42a2      	cmp	r2, r4
 801261c:	dcf0      	bgt.n	8012600 <scalbn+0x48>
 801261e:	2a00      	cmp	r2, #0
 8012620:	dd05      	ble.n	801262e <scalbn+0x76>
 8012622:	4c17      	ldr	r4, [pc, #92]	; (8012680 <scalbn+0xc8>)
 8012624:	0512      	lsls	r2, r2, #20
 8012626:	4023      	ands	r3, r4
 8012628:	4313      	orrs	r3, r2
 801262a:	0019      	movs	r1, r3
 801262c:	e7e0      	b.n	80125f0 <scalbn+0x38>
 801262e:	0014      	movs	r4, r2
 8012630:	3435      	adds	r4, #53	; 0x35
 8012632:	da08      	bge.n	8012646 <scalbn+0x8e>
 8012634:	4c0a      	ldr	r4, [pc, #40]	; (8012660 <scalbn+0xa8>)
 8012636:	4d0b      	ldr	r5, [pc, #44]	; (8012664 <scalbn+0xac>)
 8012638:	2900      	cmp	r1, #0
 801263a:	da01      	bge.n	8012640 <scalbn+0x88>
 801263c:	4c08      	ldr	r4, [pc, #32]	; (8012660 <scalbn+0xa8>)
 801263e:	4d11      	ldr	r5, [pc, #68]	; (8012684 <scalbn+0xcc>)
 8012640:	4a07      	ldr	r2, [pc, #28]	; (8012660 <scalbn+0xa8>)
 8012642:	4b08      	ldr	r3, [pc, #32]	; (8012664 <scalbn+0xac>)
 8012644:	e7e4      	b.n	8012610 <scalbn+0x58>
 8012646:	4c0e      	ldr	r4, [pc, #56]	; (8012680 <scalbn+0xc8>)
 8012648:	3236      	adds	r2, #54	; 0x36
 801264a:	4023      	ands	r3, r4
 801264c:	0512      	lsls	r2, r2, #20
 801264e:	431a      	orrs	r2, r3
 8012650:	0011      	movs	r1, r2
 8012652:	4b0d      	ldr	r3, [pc, #52]	; (8012688 <scalbn+0xd0>)
 8012654:	2200      	movs	r2, #0
 8012656:	e7c2      	b.n	80125de <scalbn+0x26>
 8012658:	43500000 	.word	0x43500000
 801265c:	ffff3cb0 	.word	0xffff3cb0
 8012660:	c2f8f359 	.word	0xc2f8f359
 8012664:	01a56e1f 	.word	0x01a56e1f
 8012668:	000007ff 	.word	0x000007ff
 801266c:	0000c350 	.word	0x0000c350
 8012670:	8800759c 	.word	0x8800759c
 8012674:	7e37e43c 	.word	0x7e37e43c
 8012678:	fe37e43c 	.word	0xfe37e43c
 801267c:	000007fe 	.word	0x000007fe
 8012680:	800fffff 	.word	0x800fffff
 8012684:	81a56e1f 	.word	0x81a56e1f
 8012688:	3c900000 	.word	0x3c900000

0801268c <with_errno>:
 801268c:	b570      	push	{r4, r5, r6, lr}
 801268e:	000d      	movs	r5, r1
 8012690:	0016      	movs	r6, r2
 8012692:	0004      	movs	r4, r0
 8012694:	f7fc fd18 	bl	800f0c8 <__errno>
 8012698:	0029      	movs	r1, r5
 801269a:	6006      	str	r6, [r0, #0]
 801269c:	0020      	movs	r0, r4
 801269e:	bd70      	pop	{r4, r5, r6, pc}

080126a0 <xflow>:
 80126a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126a2:	0015      	movs	r5, r2
 80126a4:	001c      	movs	r4, r3
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d010      	beq.n	80126cc <xflow+0x2c>
 80126aa:	2380      	movs	r3, #128	; 0x80
 80126ac:	0010      	movs	r0, r2
 80126ae:	061b      	lsls	r3, r3, #24
 80126b0:	18e1      	adds	r1, r4, r3
 80126b2:	9000      	str	r0, [sp, #0]
 80126b4:	9101      	str	r1, [sp, #4]
 80126b6:	9a00      	ldr	r2, [sp, #0]
 80126b8:	9b01      	ldr	r3, [sp, #4]
 80126ba:	0028      	movs	r0, r5
 80126bc:	0021      	movs	r1, r4
 80126be:	f7ef fe09 	bl	80022d4 <__aeabi_dmul>
 80126c2:	2222      	movs	r2, #34	; 0x22
 80126c4:	f7ff ffe2 	bl	801268c <with_errno>
 80126c8:	b003      	add	sp, #12
 80126ca:	bd30      	pop	{r4, r5, pc}
 80126cc:	0010      	movs	r0, r2
 80126ce:	0019      	movs	r1, r3
 80126d0:	e7ef      	b.n	80126b2 <xflow+0x12>

080126d2 <__math_uflow>:
 80126d2:	2380      	movs	r3, #128	; 0x80
 80126d4:	b510      	push	{r4, lr}
 80126d6:	2200      	movs	r2, #0
 80126d8:	055b      	lsls	r3, r3, #21
 80126da:	f7ff ffe1 	bl	80126a0 <xflow>
 80126de:	bd10      	pop	{r4, pc}

080126e0 <__math_oflow>:
 80126e0:	23e0      	movs	r3, #224	; 0xe0
 80126e2:	b510      	push	{r4, lr}
 80126e4:	2200      	movs	r2, #0
 80126e6:	05db      	lsls	r3, r3, #23
 80126e8:	f7ff ffda 	bl	80126a0 <xflow>
 80126ec:	bd10      	pop	{r4, pc}
	...

080126f0 <__ieee754_sqrt>:
 80126f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126f2:	000a      	movs	r2, r1
 80126f4:	000c      	movs	r4, r1
 80126f6:	496f      	ldr	r1, [pc, #444]	; (80128b4 <__ieee754_sqrt+0x1c4>)
 80126f8:	0005      	movs	r5, r0
 80126fa:	0003      	movs	r3, r0
 80126fc:	0008      	movs	r0, r1
 80126fe:	b087      	sub	sp, #28
 8012700:	4020      	ands	r0, r4
 8012702:	4288      	cmp	r0, r1
 8012704:	d111      	bne.n	801272a <__ieee754_sqrt+0x3a>
 8012706:	002a      	movs	r2, r5
 8012708:	0023      	movs	r3, r4
 801270a:	0028      	movs	r0, r5
 801270c:	0021      	movs	r1, r4
 801270e:	f7ef fde1 	bl	80022d4 <__aeabi_dmul>
 8012712:	0002      	movs	r2, r0
 8012714:	000b      	movs	r3, r1
 8012716:	0028      	movs	r0, r5
 8012718:	0021      	movs	r1, r4
 801271a:	f7ee fe81 	bl	8001420 <__aeabi_dadd>
 801271e:	0005      	movs	r5, r0
 8012720:	000c      	movs	r4, r1
 8012722:	0028      	movs	r0, r5
 8012724:	0021      	movs	r1, r4
 8012726:	b007      	add	sp, #28
 8012728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801272a:	2c00      	cmp	r4, #0
 801272c:	dc12      	bgt.n	8012754 <__ieee754_sqrt+0x64>
 801272e:	0061      	lsls	r1, r4, #1
 8012730:	0849      	lsrs	r1, r1, #1
 8012732:	4329      	orrs	r1, r5
 8012734:	d0f5      	beq.n	8012722 <__ieee754_sqrt+0x32>
 8012736:	2100      	movs	r1, #0
 8012738:	428c      	cmp	r4, r1
 801273a:	d100      	bne.n	801273e <__ieee754_sqrt+0x4e>
 801273c:	e09f      	b.n	801287e <__ieee754_sqrt+0x18e>
 801273e:	002a      	movs	r2, r5
 8012740:	0023      	movs	r3, r4
 8012742:	0028      	movs	r0, r5
 8012744:	0021      	movs	r1, r4
 8012746:	f7f0 f887 	bl	8002858 <__aeabi_dsub>
 801274a:	0002      	movs	r2, r0
 801274c:	000b      	movs	r3, r1
 801274e:	f7ef f9c7 	bl	8001ae0 <__aeabi_ddiv>
 8012752:	e7e4      	b.n	801271e <__ieee754_sqrt+0x2e>
 8012754:	1521      	asrs	r1, r4, #20
 8012756:	d100      	bne.n	801275a <__ieee754_sqrt+0x6a>
 8012758:	e091      	b.n	801287e <__ieee754_sqrt+0x18e>
 801275a:	4857      	ldr	r0, [pc, #348]	; (80128b8 <__ieee754_sqrt+0x1c8>)
 801275c:	0312      	lsls	r2, r2, #12
 801275e:	180c      	adds	r4, r1, r0
 8012760:	2080      	movs	r0, #128	; 0x80
 8012762:	0b12      	lsrs	r2, r2, #12
 8012764:	0340      	lsls	r0, r0, #13
 8012766:	4310      	orrs	r0, r2
 8012768:	07c9      	lsls	r1, r1, #31
 801276a:	d403      	bmi.n	8012774 <__ieee754_sqrt+0x84>
 801276c:	0fda      	lsrs	r2, r3, #31
 801276e:	0040      	lsls	r0, r0, #1
 8012770:	1810      	adds	r0, r2, r0
 8012772:	005b      	lsls	r3, r3, #1
 8012774:	2500      	movs	r5, #0
 8012776:	1062      	asrs	r2, r4, #1
 8012778:	0040      	lsls	r0, r0, #1
 801277a:	2480      	movs	r4, #128	; 0x80
 801277c:	9205      	str	r2, [sp, #20]
 801277e:	0fda      	lsrs	r2, r3, #31
 8012780:	1812      	adds	r2, r2, r0
 8012782:	0029      	movs	r1, r5
 8012784:	2016      	movs	r0, #22
 8012786:	005b      	lsls	r3, r3, #1
 8012788:	03a4      	lsls	r4, r4, #14
 801278a:	190e      	adds	r6, r1, r4
 801278c:	4296      	cmp	r6, r2
 801278e:	dc02      	bgt.n	8012796 <__ieee754_sqrt+0xa6>
 8012790:	1931      	adds	r1, r6, r4
 8012792:	1b92      	subs	r2, r2, r6
 8012794:	192d      	adds	r5, r5, r4
 8012796:	0fde      	lsrs	r6, r3, #31
 8012798:	0052      	lsls	r2, r2, #1
 801279a:	3801      	subs	r0, #1
 801279c:	18b2      	adds	r2, r6, r2
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	0864      	lsrs	r4, r4, #1
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d1f1      	bne.n	801278a <__ieee754_sqrt+0x9a>
 80127a6:	2620      	movs	r6, #32
 80127a8:	2780      	movs	r7, #128	; 0x80
 80127aa:	0004      	movs	r4, r0
 80127ac:	9604      	str	r6, [sp, #16]
 80127ae:	063f      	lsls	r7, r7, #24
 80127b0:	183e      	adds	r6, r7, r0
 80127b2:	46b4      	mov	ip, r6
 80127b4:	428a      	cmp	r2, r1
 80127b6:	dc02      	bgt.n	80127be <__ieee754_sqrt+0xce>
 80127b8:	d114      	bne.n	80127e4 <__ieee754_sqrt+0xf4>
 80127ba:	429e      	cmp	r6, r3
 80127bc:	d812      	bhi.n	80127e4 <__ieee754_sqrt+0xf4>
 80127be:	4660      	mov	r0, ip
 80127c0:	4666      	mov	r6, ip
 80127c2:	19c0      	adds	r0, r0, r7
 80127c4:	9100      	str	r1, [sp, #0]
 80127c6:	2e00      	cmp	r6, #0
 80127c8:	da03      	bge.n	80127d2 <__ieee754_sqrt+0xe2>
 80127ca:	43c6      	mvns	r6, r0
 80127cc:	0ff6      	lsrs	r6, r6, #31
 80127ce:	198e      	adds	r6, r1, r6
 80127d0:	9600      	str	r6, [sp, #0]
 80127d2:	1a52      	subs	r2, r2, r1
 80127d4:	4563      	cmp	r3, ip
 80127d6:	4189      	sbcs	r1, r1
 80127d8:	4249      	negs	r1, r1
 80127da:	1a52      	subs	r2, r2, r1
 80127dc:	4661      	mov	r1, ip
 80127de:	1a5b      	subs	r3, r3, r1
 80127e0:	9900      	ldr	r1, [sp, #0]
 80127e2:	19e4      	adds	r4, r4, r7
 80127e4:	0fde      	lsrs	r6, r3, #31
 80127e6:	0052      	lsls	r2, r2, #1
 80127e8:	18b2      	adds	r2, r6, r2
 80127ea:	9e04      	ldr	r6, [sp, #16]
 80127ec:	005b      	lsls	r3, r3, #1
 80127ee:	3e01      	subs	r6, #1
 80127f0:	087f      	lsrs	r7, r7, #1
 80127f2:	9604      	str	r6, [sp, #16]
 80127f4:	2e00      	cmp	r6, #0
 80127f6:	d1db      	bne.n	80127b0 <__ieee754_sqrt+0xc0>
 80127f8:	431a      	orrs	r2, r3
 80127fa:	d01f      	beq.n	801283c <__ieee754_sqrt+0x14c>
 80127fc:	4e2f      	ldr	r6, [pc, #188]	; (80128bc <__ieee754_sqrt+0x1cc>)
 80127fe:	4f30      	ldr	r7, [pc, #192]	; (80128c0 <__ieee754_sqrt+0x1d0>)
 8012800:	6830      	ldr	r0, [r6, #0]
 8012802:	6871      	ldr	r1, [r6, #4]
 8012804:	683a      	ldr	r2, [r7, #0]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	9200      	str	r2, [sp, #0]
 801280a:	9301      	str	r3, [sp, #4]
 801280c:	6832      	ldr	r2, [r6, #0]
 801280e:	6873      	ldr	r3, [r6, #4]
 8012810:	9202      	str	r2, [sp, #8]
 8012812:	9303      	str	r3, [sp, #12]
 8012814:	9a00      	ldr	r2, [sp, #0]
 8012816:	9b01      	ldr	r3, [sp, #4]
 8012818:	f7f0 f81e 	bl	8002858 <__aeabi_dsub>
 801281c:	0002      	movs	r2, r0
 801281e:	000b      	movs	r3, r1
 8012820:	9802      	ldr	r0, [sp, #8]
 8012822:	9903      	ldr	r1, [sp, #12]
 8012824:	f7ed fe22 	bl	800046c <__aeabi_dcmple>
 8012828:	2800      	cmp	r0, #0
 801282a:	d007      	beq.n	801283c <__ieee754_sqrt+0x14c>
 801282c:	6830      	ldr	r0, [r6, #0]
 801282e:	6871      	ldr	r1, [r6, #4]
 8012830:	683a      	ldr	r2, [r7, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	1c67      	adds	r7, r4, #1
 8012836:	d127      	bne.n	8012888 <__ieee754_sqrt+0x198>
 8012838:	9c04      	ldr	r4, [sp, #16]
 801283a:	3501      	adds	r5, #1
 801283c:	4b21      	ldr	r3, [pc, #132]	; (80128c4 <__ieee754_sqrt+0x1d4>)
 801283e:	1069      	asrs	r1, r5, #1
 8012840:	18c9      	adds	r1, r1, r3
 8012842:	0864      	lsrs	r4, r4, #1
 8012844:	07ed      	lsls	r5, r5, #31
 8012846:	d502      	bpl.n	801284e <__ieee754_sqrt+0x15e>
 8012848:	2380      	movs	r3, #128	; 0x80
 801284a:	061b      	lsls	r3, r3, #24
 801284c:	431c      	orrs	r4, r3
 801284e:	9b05      	ldr	r3, [sp, #20]
 8012850:	0025      	movs	r5, r4
 8012852:	0518      	lsls	r0, r3, #20
 8012854:	1843      	adds	r3, r0, r1
 8012856:	001c      	movs	r4, r3
 8012858:	e763      	b.n	8012722 <__ieee754_sqrt+0x32>
 801285a:	0ada      	lsrs	r2, r3, #11
 801285c:	3815      	subs	r0, #21
 801285e:	055b      	lsls	r3, r3, #21
 8012860:	2a00      	cmp	r2, #0
 8012862:	d0fa      	beq.n	801285a <__ieee754_sqrt+0x16a>
 8012864:	2480      	movs	r4, #128	; 0x80
 8012866:	0364      	lsls	r4, r4, #13
 8012868:	4222      	tst	r2, r4
 801286a:	d00a      	beq.n	8012882 <__ieee754_sqrt+0x192>
 801286c:	2420      	movs	r4, #32
 801286e:	001e      	movs	r6, r3
 8012870:	1a64      	subs	r4, r4, r1
 8012872:	40e6      	lsrs	r6, r4
 8012874:	1e4d      	subs	r5, r1, #1
 8012876:	408b      	lsls	r3, r1
 8012878:	4332      	orrs	r2, r6
 801287a:	1b41      	subs	r1, r0, r5
 801287c:	e76d      	b.n	801275a <__ieee754_sqrt+0x6a>
 801287e:	2000      	movs	r0, #0
 8012880:	e7ee      	b.n	8012860 <__ieee754_sqrt+0x170>
 8012882:	0052      	lsls	r2, r2, #1
 8012884:	3101      	adds	r1, #1
 8012886:	e7ef      	b.n	8012868 <__ieee754_sqrt+0x178>
 8012888:	f7ee fdca 	bl	8001420 <__aeabi_dadd>
 801288c:	6877      	ldr	r7, [r6, #4]
 801288e:	6836      	ldr	r6, [r6, #0]
 8012890:	0002      	movs	r2, r0
 8012892:	000b      	movs	r3, r1
 8012894:	0030      	movs	r0, r6
 8012896:	0039      	movs	r1, r7
 8012898:	f7ed fdde 	bl	8000458 <__aeabi_dcmplt>
 801289c:	2800      	cmp	r0, #0
 801289e:	d004      	beq.n	80128aa <__ieee754_sqrt+0x1ba>
 80128a0:	3402      	adds	r4, #2
 80128a2:	4263      	negs	r3, r4
 80128a4:	4163      	adcs	r3, r4
 80128a6:	18ed      	adds	r5, r5, r3
 80128a8:	e7c8      	b.n	801283c <__ieee754_sqrt+0x14c>
 80128aa:	2301      	movs	r3, #1
 80128ac:	3401      	adds	r4, #1
 80128ae:	439c      	bics	r4, r3
 80128b0:	e7c4      	b.n	801283c <__ieee754_sqrt+0x14c>
 80128b2:	46c0      	nop			; (mov r8, r8)
 80128b4:	7ff00000 	.word	0x7ff00000
 80128b8:	fffffc01 	.word	0xfffffc01
 80128bc:	200002f8 	.word	0x200002f8
 80128c0:	20000300 	.word	0x20000300
 80128c4:	3fe00000 	.word	0x3fe00000

080128c8 <_init>:
 80128c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ca:	46c0      	nop			; (mov r8, r8)
 80128cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ce:	bc08      	pop	{r3}
 80128d0:	469e      	mov	lr, r3
 80128d2:	4770      	bx	lr

080128d4 <_fini>:
 80128d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128d6:	46c0      	nop			; (mov r8, r8)
 80128d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128da:	bc08      	pop	{r3}
 80128dc:	469e      	mov	lr, r3
 80128de:	4770      	bx	lr
