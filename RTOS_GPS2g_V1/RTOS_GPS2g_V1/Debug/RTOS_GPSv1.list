
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a6c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d38  08015b30  08015b30  00025b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017868  08017868  000302c8  2**0
                  CONTENTS
  4 .ARM          00000000  08017868  08017868  000302c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017868  08017868  000302c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017868  08017868  00027868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801786c  0801786c  0002786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  08017870  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005364  200002c8  08017b38  000302c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000562c  08017b38  0003562c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000255fd  00000000  00000000  00030333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b5  00000000  00000000  00055930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002270  00000000  00000000  0005a2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b0e  00000000  00000000  0005c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000621f  00000000  00000000  0005e066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000267e0  00000000  00000000  00064285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abd86  00000000  00000000  0008aa65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009980  00000000  00000000  001367ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002c8 	.word	0x200002c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08015b14 	.word	0x08015b14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002cc 	.word	0x200002cc
 8000104:	08015b14 	.word	0x08015b14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	080171b8 	.word	0x080171b8
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	080171f8 	.word	0x080171f8

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	08017238 	.word	0x08017238
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800328c:	f3bf 8f4f 	dsb	sy
}
 8003290:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <__NVIC_SystemReset+0x1c>)
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <__NVIC_SystemReset+0x20>)
 8003296:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003298:	f3bf 8f4f 	dsb	sy
}
 800329c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	e7fd      	b.n	800329e <__NVIC_SystemReset+0x16>
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	05fa0004 	.word	0x05fa0004

080032ac <Read_DI_IN1>:

/* Digital Output Function Prototypes-----------------*/


/* Digital Status Read Function Definition-----------------*/
static int Read_DI_IN1(){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	23a0      	movs	r3, #160	; 0xa0
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	0011      	movs	r1, r2
 80032bc:	0018      	movs	r0, r3
 80032be:	f006 f9af 	bl	8009620 <HAL_GPIO_ReadPin>
 80032c2:	0003      	movs	r3, r0
 80032c4:	607b      	str	r3, [r7, #4]
	return val;
 80032c6:	687b      	ldr	r3, [r7, #4]
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <Read_DI_IN2>:
static int Read_DI_IN2(){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <Read_DI_IN2+0x24>)
 80032dc:	0019      	movs	r1, r3
 80032de:	0010      	movs	r0, r2
 80032e0:	f006 f99e 	bl	8009620 <HAL_GPIO_ReadPin>
 80032e4:	0003      	movs	r3, r0
 80032e6:	607b      	str	r3, [r7, #4]
	return val;
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	50000400 	.word	0x50000400

080032f8 <Read_DI_IN3>:
static int Read_DI_IN3(){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <Read_DI_IN3+0x24>)
 8003304:	0019      	movs	r1, r3
 8003306:	0010      	movs	r0, r2
 8003308:	f006 f98a 	bl	8009620 <HAL_GPIO_ReadPin>
 800330c:	0003      	movs	r3, r0
 800330e:	607b      	str	r3, [r7, #4]
	return val;
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	50000400 	.word	0x50000400

08003320 <Read_DI_MAINS_STATE>:
static int Read_DI_MAINS_STATE(){
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	4a06      	ldr	r2, [pc, #24]	; (8003344 <Read_DI_MAINS_STATE+0x24>)
 800332c:	0019      	movs	r1, r3
 800332e:	0010      	movs	r0, r2
 8003330:	f006 f976 	bl	8009620 <HAL_GPIO_ReadPin>
 8003334:	0003      	movs	r3, r0
 8003336:	607b      	str	r3, [r7, #4]
	return val;
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	50000400 	.word	0x50000400

08003348 <Read_DI_ACC_STATE>:
static int Read_DI_ACC_STATE(){
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	01db      	lsls	r3, r3, #7
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <Read_DI_ACC_STATE+0x24>)
 8003354:	0019      	movs	r1, r3
 8003356:	0010      	movs	r0, r2
 8003358:	f006 f962 	bl	8009620 <HAL_GPIO_ReadPin>
 800335c:	0003      	movs	r3, r0
 800335e:	607b      	str	r3, [r7, #4]
	return val;
 8003360:	687b      	ldr	r3, [r7, #4]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	50000400 	.word	0x50000400

08003370 <Read_DI_BOX_STATE>:
static char Read_DI_BOX_STATE(){
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <Read_DI_BOX_STATE+0x40>)
 800337c:	0019      	movs	r1, r3
 800337e:	0010      	movs	r0, r2
 8003380:	f006 f94e 	bl	8009620 <HAL_GPIO_ReadPin>
 8003384:	0003      	movs	r3, r0
 8003386:	603b      	str	r3, [r7, #0]
	char box='O';
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	224f      	movs	r2, #79	; 0x4f
 800338c:	701a      	strb	r2, [r3, #0]
	if(val==1)box='O';
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d103      	bne.n	800339c <Read_DI_BOX_STATE+0x2c>
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	224f      	movs	r2, #79	; 0x4f
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e002      	b.n	80033a2 <Read_DI_BOX_STATE+0x32>
		else box='C';
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	2243      	movs	r2, #67	; 0x43
 80033a0:	701a      	strb	r2, [r3, #0]

	return box;
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	781b      	ldrb	r3, [r3, #0]
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	50000400 	.word	0x50000400

080033b4 <Read_DI_SOS_STATE>:
static int Read_DI_SOS_STATE(){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	005a      	lsls	r2, r3, #1
 80033be:	23a0      	movs	r3, #160	; 0xa0
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f006 f92b 	bl	8009620 <HAL_GPIO_ReadPin>
 80033ca:	0003      	movs	r3, r0
 80033cc:	607b      	str	r3, [r7, #4]
	return val;
 80033ce:	687b      	ldr	r3, [r7, #4]
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <Init_ADC>:


/* Analog Value Read Function Definition-----------------*/


static void Init_ADC(){
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <Init_ADC+0x18>)
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <Init_ADC+0x1c>)
 80033e0:	2204      	movs	r2, #4
 80033e2:	0018      	movs	r0, r3
 80033e4:	f005 f804 	bl	80083f0 <HAL_ADC_Start_DMA>
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	20000900 	.word	0x20000900
 80033f4:	2000046c 	.word	0x2000046c

080033f8 <Read_ADC1>:

static float Read_ADC1(){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
	float val=(float)ADCvalue[0];
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <Read_ADC1+0x34>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0018      	movs	r0, r3
 8003404:	f7fd ffc4 	bl	8001390 <__aeabi_ui2f>
 8003408:	1c03      	adds	r3, r0, #0
 800340a:	607b      	str	r3, [r7, #4]

	return ((float)(val*VSENSE*11));
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <Read_ADC1+0x38>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	1c18      	adds	r0, r3, #0
 8003414:	f7fd fc5c 	bl	8000cd0 <__aeabi_fmul>
 8003418:	1c03      	adds	r3, r0, #0
 800341a:	4906      	ldr	r1, [pc, #24]	; (8003434 <Read_ADC1+0x3c>)
 800341c:	1c18      	adds	r0, r3, #0
 800341e:	f7fd fc57 	bl	8000cd0 <__aeabi_fmul>
 8003422:	1c03      	adds	r3, r0, #0
    	//HAL_Delay(1);
}
 8003424:	1c18      	adds	r0, r3, #0
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000900 	.word	0x20000900
 8003430:	20000008 	.word	0x20000008
 8003434:	41300000 	.word	0x41300000

08003438 <Read_ADC2>:

static float Read_ADC2(){
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	return (ADCvalue[1]*VSENSE*11);
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <Read_ADC2+0x30>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd ffa5 	bl	8001390 <__aeabi_ui2f>
 8003446:	1c02      	adds	r2, r0, #0
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <Read_ADC2+0x34>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c19      	adds	r1, r3, #0
 800344e:	1c10      	adds	r0, r2, #0
 8003450:	f7fd fc3e 	bl	8000cd0 <__aeabi_fmul>
 8003454:	1c03      	adds	r3, r0, #0
 8003456:	4906      	ldr	r1, [pc, #24]	; (8003470 <Read_ADC2+0x38>)
 8003458:	1c18      	adds	r0, r3, #0
 800345a:	f7fd fc39 	bl	8000cd0 <__aeabi_fmul>
 800345e:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 8003460:	1c18      	adds	r0, r3, #0
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	20000900 	.word	0x20000900
 800346c:	20000008 	.word	0x20000008
 8003470:	41300000 	.word	0x41300000

08003474 <Read_EXT_B_SENSE>:
static float Read_EXT_B_SENSE(){
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	return (ADCvalue[2]*VSENSE*16);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <Read_EXT_B_SENSE+0x30>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	0018      	movs	r0, r3
 800347e:	f7fd ff87 	bl	8001390 <__aeabi_ui2f>
 8003482:	1c02      	adds	r2, r0, #0
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <Read_EXT_B_SENSE+0x34>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c19      	adds	r1, r3, #0
 800348a:	1c10      	adds	r0, r2, #0
 800348c:	f7fd fc20 	bl	8000cd0 <__aeabi_fmul>
 8003490:	1c03      	adds	r3, r0, #0
 8003492:	2183      	movs	r1, #131	; 0x83
 8003494:	05c9      	lsls	r1, r1, #23
 8003496:	1c18      	adds	r0, r3, #0
 8003498:	f7fd fc1a 	bl	8000cd0 <__aeabi_fmul>
 800349c:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 800349e:	1c18      	adds	r0, r3, #0
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000900 	.word	0x20000900
 80034a8:	20000008 	.word	0x20000008

080034ac <Read_INT_B_SENSE>:
static float Read_INT_B_SENSE(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	return (ADCvalue[3]*VSENSE*2);
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <Read_INT_B_SENSE+0x30>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7fd ff6b 	bl	8001390 <__aeabi_ui2f>
 80034ba:	1c02      	adds	r2, r0, #0
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <Read_INT_B_SENSE+0x34>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c19      	adds	r1, r3, #0
 80034c2:	1c10      	adds	r0, r2, #0
 80034c4:	f7fd fc04 	bl	8000cd0 <__aeabi_fmul>
 80034c8:	1c03      	adds	r3, r0, #0
 80034ca:	1c19      	adds	r1, r3, #0
 80034cc:	1c18      	adds	r0, r3, #0
 80034ce:	f7fd f895 	bl	80005fc <__aeabi_fadd>
 80034d2:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 80034d4:	1c18      	adds	r0, r3, #0
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	20000900 	.word	0x20000900
 80034e0:	20000008 	.word	0x20000008

080034e4 <SET_5V_OUT_EN>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_OUT3_P_LED_GPIO_Port, DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
	}

}
static void SET_5V_OUT_EN(int val){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	if(val==1){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <SET_5V_OUT_EN+0x1c>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <SET_5V_OUT_EN+0x38>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	2120      	movs	r1, #32
 80034f8:	0018      	movs	r0, r3
 80034fa:	f006 f8ae 	bl	800965a <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_RESET);
	}
}
 80034fe:	e008      	b.n	8003512 <SET_5V_OUT_EN+0x2e>
	else if(val==0){
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <SET_5V_OUT_EN+0x2e>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_RESET);
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <SET_5V_OUT_EN+0x38>)
 8003508:	2200      	movs	r2, #0
 800350a:	2120      	movs	r1, #32
 800350c:	0018      	movs	r0, r3
 800350e:	f006 f8a4 	bl	800965a <HAL_GPIO_WritePin>
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	50000400 	.word	0x50000400

08003520 <SET_LED_GPS>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_OUT1_GPIO_Port, DO_OUT1_Pin, GPIO_PIN_RESET);
	}
}

static void SET_LED_GPS(int val){
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	if(val==1){
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d106      	bne.n	800353c <SET_LED_GPS+0x1c>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <SET_LED_GPS+0x38>)
 8003530:	2201      	movs	r2, #1
 8003532:	2104      	movs	r1, #4
 8003534:	0018      	movs	r0, r3
 8003536:	f006 f890 	bl	800965a <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
	}
}
 800353a:	e008      	b.n	800354e <SET_LED_GPS+0x2e>
	else if(val==0){
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <SET_LED_GPS+0x2e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SET_LED_GPS+0x38>)
 8003544:	2200      	movs	r2, #0
 8003546:	2104      	movs	r1, #4
 8003548:	0018      	movs	r0, r3
 800354a:	f006 f886 	bl	800965a <HAL_GPIO_WritePin>
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	50000c00 	.word	0x50000c00

0800355c <SET_LED_NET>:

static void SET_LED_NET(int val){
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	if(val==1){
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <SET_LED_NET+0x1c>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <SET_LED_NET+0x38>)
 800356c:	2201      	movs	r2, #1
 800356e:	2102      	movs	r1, #2
 8003570:	0018      	movs	r0, r3
 8003572:	f006 f872 	bl	800965a <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
	}
}
 8003576:	e008      	b.n	800358a <SET_LED_NET+0x2e>
	else if(val==0){
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <SET_LED_NET+0x2e>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SET_LED_NET+0x38>)
 8003580:	2200      	movs	r2, #0
 8003582:	2102      	movs	r1, #2
 8003584:	0018      	movs	r0, r3
 8003586:	f006 f868 	bl	800965a <HAL_GPIO_WritePin>
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	50000c00 	.word	0x50000c00

08003598 <SET_GPS_VCC_EN>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
	}
}

static void SET_GPS_VCC_EN(int val){
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	if(val==1){
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d108      	bne.n	80035b8 <SET_GPS_VCC_EN+0x20>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	0219      	lsls	r1, r3, #8
 80035aa:	23a0      	movs	r3, #160	; 0xa0
 80035ac:	05db      	lsls	r3, r3, #23
 80035ae:	2201      	movs	r2, #1
 80035b0:	0018      	movs	r0, r3
 80035b2:	f006 f852 	bl	800965a <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
	}
}
 80035b6:	e00a      	b.n	80035ce <SET_GPS_VCC_EN+0x36>
	else if(val==0){
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <SET_GPS_VCC_EN+0x36>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	0219      	lsls	r1, r3, #8
 80035c2:	23a0      	movs	r3, #160	; 0xa0
 80035c4:	05db      	lsls	r3, r3, #23
 80035c6:	2200      	movs	r2, #0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f006 f846 	bl	800965a <HAL_GPIO_WritePin>
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <SET_PWRKEY>:

static void SET_PWRKEY(int val){
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	if(val==1){
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d106      	bne.n	80035f4 <SET_PWRKEY+0x1c>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <SET_PWRKEY+0x38>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	0018      	movs	r0, r3
 80035ee:	f006 f834 	bl	800965a <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
	}
}
 80035f2:	e008      	b.n	8003606 <SET_PWRKEY+0x2e>
	else if(val==0){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <SET_PWRKEY+0x2e>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <SET_PWRKEY+0x38>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	0018      	movs	r0, r3
 8003602:	f006 f82a 	bl	800965a <HAL_GPIO_WritePin>
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	50000800 	.word	0x50000800

08003614 <SET_GSM_VCC_EN>:

static void SET_GSM_VCC_EN(int val){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	if(val==1){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d106      	bne.n	8003630 <SET_GSM_VCC_EN+0x1c>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <SET_GSM_VCC_EN+0x38>)
 8003624:	2201      	movs	r2, #1
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	0018      	movs	r0, r3
 800362a:	f006 f816 	bl	800965a <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
	}
}
 800362e:	e008      	b.n	8003642 <SET_GSM_VCC_EN+0x2e>
	else if(val==0){
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <SET_GSM_VCC_EN+0x2e>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <SET_GSM_VCC_EN+0x38>)
 8003638:	2200      	movs	r2, #0
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	0018      	movs	r0, r3
 800363e:	f006 f80c 	bl	800965a <HAL_GPIO_WritePin>
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	50000800 	.word	0x50000800

08003650 <SendGSMCode>:
	HAL_Delay(200);
	SET_PWRKEY(0);

}

void SendGSMCode(const char cmd[]){
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	memset(GSMData,0,990);
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <SendGSMCode+0xa0>)
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <SendGSMCode+0xa4>)
 800365c:	2100      	movs	r1, #0
 800365e:	0018      	movs	r0, r3
 8003660:	f00e fcd0 	bl	8012004 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <SendGSMCode+0xa8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	220c      	movs	r2, #12
 800366a:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800366c:	4923      	ldr	r1, [pc, #140]	; (80036fc <SendGSMCode+0xac>)
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <SendGSMCode+0xb0>)
 8003670:	2201      	movs	r2, #1
 8003672:	0018      	movs	r0, r3
 8003674:	f008 ff1c 	bl	800c4b0 <HAL_UART_Receive_DMA>
	memset(GSMTXC,0,100);
 8003678:	4b22      	ldr	r3, [pc, #136]	; (8003704 <SendGSMCode+0xb4>)
 800367a:	2264      	movs	r2, #100	; 0x64
 800367c:	2100      	movs	r1, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f00e fcc0 	bl	8012004 <memset>
	if((strlen(cmd)>90) &(debug==1)){Debug_Tx("Error:GSM Code Length Exceed");}
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0018      	movs	r0, r3
 8003688:	f7fc fd3e 	bl	8000108 <strlen>
 800368c:	0003      	movs	r3, r0
 800368e:	225a      	movs	r2, #90	; 0x5a
 8003690:	429a      	cmp	r2, r3
 8003692:	419b      	sbcs	r3, r3
 8003694:	425b      	negs	r3, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <SendGSMCode+0xb8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	4259      	negs	r1, r3
 80036a0:	414b      	adcs	r3, r1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4013      	ands	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <SendGSMCode+0x64>
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <SendGSMCode+0xbc>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f003 fdc0 	bl	8007234 <Debug_Tx>
	strcpy(GSMTXC,cmd);
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <SendGSMCode+0xb4>)
 80036b8:	0011      	movs	r1, r2
 80036ba:	0018      	movs	r0, r3
 80036bc:	f00e fe57 	bl	801236e <strcpy>
	strcat(GSMTXC,"\r\n");
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <SendGSMCode+0xb4>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fc fd20 	bl	8000108 <strlen>
 80036c8:	0003      	movs	r3, r0
 80036ca:	001a      	movs	r2, r3
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <SendGSMCode+0xb4>)
 80036ce:	18d2      	adds	r2, r2, r3
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <SendGSMCode+0xc0>)
 80036d2:	0010      	movs	r0, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	2303      	movs	r3, #3
 80036d8:	001a      	movs	r2, r3
 80036da:	f00e fe5b 	bl	8012394 <memcpy>

	//Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <SendGSMCode+0xb4>)
 80036e0:	0018      	movs	r0, r3
 80036e2:	f003 fde5 	bl	80072b0 <GSM_Tx>
	//return GSM_Rx();

}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	000003de 	.word	0x000003de
 80036f4:	20000cf8 	.word	0x20000cf8
 80036f8:	200006c4 	.word	0x200006c4
 80036fc:	200012d4 	.word	0x200012d4
 8003700:	20000630 	.word	0x20000630
 8003704:	20001340 	.word	0x20001340
 8003708:	2000000c 	.word	0x2000000c
 800370c:	08015b54 	.word	0x08015b54
 8003710:	08015b74 	.word	0x08015b74

08003714 <SendGSMCodeL>:
	GSM_Tx(cmd);
	//return GSM_Rx();

}

void SendGSMCodeL(const char cmd[]){
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <SendGSMCodeL+0xa0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	220c      	movs	r2, #12
 8003722:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003724:	4924      	ldr	r1, [pc, #144]	; (80037b8 <SendGSMCodeL+0xa4>)
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <SendGSMCodeL+0xa8>)
 8003728:	2201      	movs	r2, #1
 800372a:	0018      	movs	r0, r3
 800372c:	f008 fec0 	bl	800c4b0 <HAL_UART_Receive_DMA>

	memset(GSMData,0,990);
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <SendGSMCodeL+0xac>)
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <SendGSMCodeL+0xb0>)
 8003734:	2100      	movs	r1, #0
 8003736:	0018      	movs	r0, r3
 8003738:	f00e fc64 	bl	8012004 <memset>
	memset(GSMTXC,0,100);
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <SendGSMCodeL+0xb4>)
 800373e:	2264      	movs	r2, #100	; 0x64
 8003740:	2100      	movs	r1, #0
 8003742:	0018      	movs	r0, r3
 8003744:	f00e fc5e 	bl	8012004 <memset>
	if((strlen(cmd)>90) &(debug==1)){Debug_Tx("Error:GSM Code Length Exceed");}
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f7fc fcdc 	bl	8000108 <strlen>
 8003750:	0003      	movs	r3, r0
 8003752:	225a      	movs	r2, #90	; 0x5a
 8003754:	429a      	cmp	r2, r3
 8003756:	419b      	sbcs	r3, r3
 8003758:	425b      	negs	r3, r3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <SendGSMCodeL+0xb8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3b01      	subs	r3, #1
 8003762:	4259      	negs	r1, r3
 8003764:	414b      	adcs	r3, r1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4013      	ands	r3, r2
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <SendGSMCodeL+0x64>
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <SendGSMCodeL+0xbc>)
 8003772:	0018      	movs	r0, r3
 8003774:	f003 fd5e 	bl	8007234 <Debug_Tx>
	strcpy(GSMTXC,cmd);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <SendGSMCodeL+0xb4>)
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f00e fdf5 	bl	801236e <strcpy>
	strcat(GSMTXC,"\r\n");
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <SendGSMCodeL+0xb4>)
 8003786:	0018      	movs	r0, r3
 8003788:	f7fc fcbe 	bl	8000108 <strlen>
 800378c:	0003      	movs	r3, r0
 800378e:	001a      	movs	r2, r3
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <SendGSMCodeL+0xb4>)
 8003792:	18d2      	adds	r2, r2, r3
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <SendGSMCodeL+0xc0>)
 8003796:	0010      	movs	r0, r2
 8003798:	0019      	movs	r1, r3
 800379a:	2303      	movs	r3, #3
 800379c:	001a      	movs	r2, r3
 800379e:	f00e fdf9 	bl	8012394 <memcpy>
	//Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <SendGSMCodeL+0xb4>)
 80037a4:	0018      	movs	r0, r3
 80037a6:	f003 fd83 	bl	80072b0 <GSM_Tx>


	//return GSM_RxL();


}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	200006c4 	.word	0x200006c4
 80037b8:	200012d4 	.word	0x200012d4
 80037bc:	20000630 	.word	0x20000630
 80037c0:	000003de 	.word	0x000003de
 80037c4:	20000cf8 	.word	0x20000cf8
 80037c8:	20001340 	.word	0x20001340
 80037cc:	2000000c 	.word	0x2000000c
 80037d0:	08015b54 	.word	0x08015b54
 80037d4:	08015b74 	.word	0x08015b74

080037d8 <SendGSMData>:


void SendGSMData(const char data[]){
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <SendGSMData+0x54>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	220c      	movs	r2, #12
 80037e6:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80037e8:	4911      	ldr	r1, [pc, #68]	; (8003830 <SendGSMData+0x58>)
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <SendGSMData+0x5c>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	0018      	movs	r0, r3
 80037f0:	f008 fe5e 	bl	800c4b0 <HAL_UART_Receive_DMA>

	memset(GSMData,0,990);
 80037f4:	4a10      	ldr	r2, [pc, #64]	; (8003838 <SendGSMData+0x60>)
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <SendGSMData+0x64>)
 80037f8:	2100      	movs	r1, #0
 80037fa:	0018      	movs	r0, r3
 80037fc:	f00e fc02 	bl	8012004 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 8003800:	240c      	movs	r4, #12
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2203      	movs	r2, #3
 8003806:	2100      	movs	r1, #0
 8003808:	0018      	movs	r0, r3
 800380a:	f00e fbfb 	bl	8012004 <memset>
	end[0]=0x1A;
 800380e:	193b      	adds	r3, r7, r4
 8003810:	221a      	movs	r2, #26
 8003812:	701a      	strb	r2, [r3, #0]
	//memset(GSMTXD,0,300);
	//if((strlen(data)>) &(debug==1)){Debug_Tx("Error:GSM Data Length Exceed");}
	//strcpy(GSMTXD,data);
	//strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0018      	movs	r0, r3
 8003818:	f003 fd64 	bl	80072e4 <GSM_TxL>
	GSM_Tx((char*)end);
 800381c:	193b      	adds	r3, r7, r4
 800381e:	0018      	movs	r0, r3
 8003820:	f003 fd46 	bl	80072b0 <GSM_Tx>


	//return GSM_Rx();

}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b005      	add	sp, #20
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	200006c4 	.word	0x200006c4
 8003830:	200012d4 	.word	0x200012d4
 8003834:	20000630 	.word	0x20000630
 8003838:	000003de 	.word	0x000003de
 800383c:	20000cf8 	.word	0x20000cf8

08003840 <GetGSMReply>:





char * GetGSMReply(int extra,const char* find,int gap,const char* LineEnd,const char* ErrorMsg, int timeout,const char* finChar){
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
	memset(GSMReply,0,100);
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <GetGSMReply+0x168>)
 8003850:	2264      	movs	r2, #100	; 0x64
 8003852:	2100      	movs	r1, #0
 8003854:	0018      	movs	r0, r3
 8003856:	f00e fbd5 	bl	8012004 <memset>
	memset(GSMInData,0,1000);
 800385a:	23fa      	movs	r3, #250	; 0xfa
 800385c:	009a      	lsls	r2, r3, #2
 800385e:	4b53      	ldr	r3, [pc, #332]	; (80039ac <GetGSMReply+0x16c>)
 8003860:	2100      	movs	r1, #0
 8003862:	0018      	movs	r0, r3
 8003864:	f00e fbce 	bl	8012004 <memset>
	int stT=HAL_GetTick();
 8003868:	f004 fa8e 	bl	8007d88 <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	61fb      	str	r3, [r7, #28]
	while(((HAL_GetTick()-stT)<=timeout)){
 8003870:	e079      	b.n	8003966 <GetGSMReply+0x126>
		HAL_Delay(70);
 8003872:	2046      	movs	r0, #70	; 0x46
 8003874:	f004 fa92 	bl	8007d9c <HAL_Delay>
		if(strlen(GSMData)>0){
 8003878:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <GetGSMReply+0x170>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d100      	bne.n	8003882 <GetGSMReply+0x42>
 8003880:	e071      	b.n	8003966 <GetGSMReply+0x126>
			strcpy(GSMInData, GSMData);
 8003882:	4a4b      	ldr	r2, [pc, #300]	; (80039b0 <GetGSMReply+0x170>)
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <GetGSMReply+0x16c>)
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f00e fd70 	bl	801236e <strcpy>
			char *pq=strstr(GSMInData,finChar) ;
 800388e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <GetGSMReply+0x16c>)
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f00e fc65 	bl	8012164 <strstr>
 800389a:	0003      	movs	r3, r0
 800389c:	61bb      	str	r3, [r7, #24]
			if ((pq!= NULL)){// && (strlen(strstr(GSMInData,find))>gap)){
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d04b      	beq.n	800393c <GetGSMReply+0xfc>

				if((strlen(find)<1)){ //Return for
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <GetGSMReply+0x7a>
					strcpy(GSMReply,pq);
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <GetGSMReply+0x168>)
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f00e fd5b 	bl	801236e <strcpy>
					break;
 80038b8:	e05e      	b.n	8003978 <GetGSMReply+0x138>
				}
				char *p=strstr(GSMInData,find) ;
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <GetGSMReply+0x16c>)
 80038be:	0011      	movs	r1, r2
 80038c0:	0018      	movs	r0, r3
 80038c2:	f00e fc4f 	bl	8012164 <strstr>
 80038c6:	0003      	movs	r3, r0
 80038c8:	617b      	str	r3, [r7, #20]
				if((strlen(LineEnd)<1)){ //Return for
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <GetGSMReply+0xa0>
					strcpy(GSMReply,p);
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <GetGSMReply+0x168>)
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f00e fd48 	bl	801236e <strcpy>
					break;
 80038de:	e04b      	b.n	8003978 <GetGSMReply+0x138>
				}
				else{
					if ((strstr(GSMInData,LineEnd)!= NULL)){
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	4b32      	ldr	r3, [pc, #200]	; (80039ac <GetGSMReply+0x16c>)
 80038e4:	0011      	movs	r1, r2
 80038e6:	0018      	movs	r0, r3
 80038e8:	f00e fc3c 	bl	8012164 <strstr>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d03a      	beq.n	8003966 <GetGSMReply+0x126>
						if((strlen(p+gap)>strlen(LineEnd))){
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	18d3      	adds	r3, r2, r3
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fc fc06 	bl	8000108 <strlen>
 80038fc:	0004      	movs	r4, r0
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	0018      	movs	r0, r3
 8003902:	f7fc fc01 	bl	8000108 <strlen>
 8003906:	0003      	movs	r3, r0
 8003908:	429c      	cmp	r4, r3
 800390a:	d92c      	bls.n	8003966 <GetGSMReply+0x126>
							char * p1=strtok_r(p+gap,LineEnd,NULL);//strtok(GSMData, "\n");strtok(p+gap, );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	2200      	movs	r2, #0
 8003916:	0018      	movs	r0, r3
 8003918:	f00e fc1f 	bl	801215a <strtok_r>
 800391c:	0003      	movs	r3, r0
 800391e:	613b      	str	r3, [r7, #16]
							if(strlen(p1)<88){
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	0018      	movs	r0, r3
 8003924:	f7fc fbf0 	bl	8000108 <strlen>
 8003928:	0003      	movs	r3, r0
 800392a:	2b57      	cmp	r3, #87	; 0x57
 800392c:	d81b      	bhi.n	8003966 <GetGSMReply+0x126>
								strcpy(GSMReply,p1);
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <GetGSMReply+0x168>)
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f00e fd1a 	bl	801236e <strcpy>
								break;
 800393a:	e01d      	b.n	8003978 <GetGSMReply+0x138>
						}
					}
				}
			}
			else{
				if ((strstr(GSMInData,"ERROR")!= NULL)||(strstr(GSMInData,"FAIL")!= NULL)){
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <GetGSMReply+0x174>)
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <GetGSMReply+0x16c>)
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f00e fc0e 	bl	8012164 <strstr>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d107      	bne.n	800395c <GetGSMReply+0x11c>
 800394c:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <GetGSMReply+0x178>)
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <GetGSMReply+0x16c>)
 8003950:	0011      	movs	r1, r2
 8003952:	0018      	movs	r0, r3
 8003954:	f00e fc06 	bl	8012164 <strstr>
 8003958:	1e03      	subs	r3, r0, #0
 800395a:	d004      	beq.n	8003966 <GetGSMReply+0x126>

					Debug_Tx("Err Found");
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <GetGSMReply+0x17c>)
 800395e:	0018      	movs	r0, r3
 8003960:	f003 fc68 	bl	8007234 <Debug_Tx>
					break;
 8003964:	e008      	b.n	8003978 <GetGSMReply+0x138>
	while(((HAL_GetTick()-stT)<=timeout)){
 8003966:	f004 fa0f 	bl	8007d88 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	429a      	cmp	r2, r3
 8003974:	d800      	bhi.n	8003978 <GetGSMReply+0x138>
 8003976:	e77c      	b.n	8003872 <GetGSMReply+0x32>


	}

	//Debug_Tx(GSMInData);
	if (strlen(GSMReply)<1){
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <GetGSMReply+0x168>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <GetGSMReply+0x158>
		Debug_Tx("****");
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <GetGSMReply+0x180>)
 8003982:	0018      	movs	r0, r3
 8003984:	f003 fc56 	bl	8007234 <Debug_Tx>
		Debug_Tx(GSMInData);
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <GetGSMReply+0x16c>)
 800398a:	0018      	movs	r0, r3
 800398c:	f003 fc52 	bl	8007234 <Debug_Tx>
		Debug_Tx((char*)ErrorMsg);
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	0018      	movs	r0, r3
 8003994:	f003 fc4e 	bl	8007234 <Debug_Tx>
		//Debug_Tx(GSMData);
		//Debug_Tx("****");
		//Debug_Tx(GSMReply);
		//Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 8003998:	2064      	movs	r0, #100	; 0x64
 800399a:	f004 f9ff 	bl	8007d9c <HAL_Delay>
	//if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
 800399e:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <GetGSMReply+0x168>)
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b009      	add	sp, #36	; 0x24
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	200013f8 	.word	0x200013f8
 80039ac:	20000910 	.word	0x20000910
 80039b0:	20000cf8 	.word	0x20000cf8
 80039b4:	08015bfc 	.word	0x08015bfc
 80039b8:	08015c04 	.word	0x08015c04
 80039bc:	08015c0c 	.word	0x08015c0c
 80039c0:	08015c18 	.word	0x08015c18

080039c4 <GSMSigQuality>:


int GSMSigQuality(){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af04      	add	r7, sp, #16
	GSMSignal=0;
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <GSMSigQuality+0xb0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
	SendGSMCode(" AT+CSQ");HAL_Delay(100);
 80039d0:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <GSMSigQuality+0xb4>)
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7ff fe3c 	bl	8003650 <SendGSMCode>
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	f004 f9df 	bl	8007d9c <HAL_Delay>
	GSMSignal=strtod(GetGSMReply(0,"+CSQ:",5,",","Error: AT+CSQ GSM Sig Quality",gpsto_dev,",0"),NULL);
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <GSMSigQuality+0xb8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4827      	ldr	r0, [pc, #156]	; (8003a80 <GSMSigQuality+0xbc>)
 80039e4:	4927      	ldr	r1, [pc, #156]	; (8003a84 <GSMSigQuality+0xc0>)
 80039e6:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <GSMSigQuality+0xc4>)
 80039e8:	9202      	str	r2, [sp, #8]
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <GSMSigQuality+0xc8>)
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	0003      	movs	r3, r0
 80039f2:	2205      	movs	r2, #5
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7ff ff23 	bl	8003840 <GetGSMReply>
 80039fa:	0003      	movs	r3, r0
 80039fc:	2100      	movs	r1, #0
 80039fe:	0018      	movs	r0, r3
 8003a00:	f00d faa6 	bl	8010f50 <strtod>
 8003a04:	0002      	movs	r2, r0
 8003a06:	000b      	movs	r3, r1
 8003a08:	0010      	movs	r0, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	f7ff fb98 	bl	8003140 <__aeabi_d2f>
 8003a10:	1c02      	adds	r2, r0, #0
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <GSMSigQuality+0xb0>)
 8003a14:	601a      	str	r2, [r3, #0]

	if(GSMSignal>5){
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <GSMSigQuality+0xb0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	491d      	ldr	r1, [pc, #116]	; (8003a90 <GSMSigQuality+0xcc>)
 8003a1c:	1c18      	adds	r0, r3, #0
 8003a1e:	f7fc fd69 	bl	80004f4 <__aeabi_fcmpgt>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d00a      	beq.n	8003a3c <GSMSigQuality+0x78>
		SET_LED_NET(1);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f7ff fd98 	bl	800355c <SET_LED_NET>
		ServerConnected=1;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <GSMSigQuality+0xd0>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
		Debug_Tx("GSM HIGH");
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <GSMSigQuality+0xd4>)
 8003a34:	0018      	movs	r0, r3
 8003a36:	f003 fbfd 	bl	8007234 <Debug_Tx>
 8003a3a:	e011      	b.n	8003a60 <GSMSigQuality+0x9c>
	}
	else{
		Debug_Tx("GSM low");
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <GSMSigQuality+0xd8>)
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f003 fbf8 	bl	8007234 <Debug_Tx>
		Debug_Tx("GSM No Signal");
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <GSMSigQuality+0xdc>)
 8003a46:	0018      	movs	r0, r3
 8003a48:	f003 fbf4 	bl	8007234 <Debug_Tx>

		Debug_Tx(GSMData);
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <GSMSigQuality+0xe0>)
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f003 fbf0 	bl	8007234 <Debug_Tx>
		ServerConnected=0;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <GSMSigQuality+0xd0>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
		SET_LED_NET(0);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7ff fd7e 	bl	800355c <SET_LED_NET>
	}
	return(GSMSignal);//must be higher than 5 ,range 0-33
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <GSMSigQuality+0xb0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	1c18      	adds	r0, r3, #0
 8003a66:	f7fd fc21 	bl	80012ac <__aeabi_f2iz>
 8003a6a:	0003      	movs	r3, r0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	20001460 	.word	0x20001460
 8003a78:	08015c20 	.word	0x08015c20
 8003a7c:	20000014 	.word	0x20000014
 8003a80:	08015c28 	.word	0x08015c28
 8003a84:	08015c2c 	.word	0x08015c2c
 8003a88:	08015c34 	.word	0x08015c34
 8003a8c:	08015c38 	.word	0x08015c38
 8003a90:	40a00000 	.word	0x40a00000
 8003a94:	200014dc 	.word	0x200014dc
 8003a98:	08015c58 	.word	0x08015c58
 8003a9c:	08015c64 	.word	0x08015c64
 8003aa0:	08015c6c 	.word	0x08015c6c
 8003aa4:	20000cf8 	.word	0x20000cf8

08003aa8 <StartTCPConnection>:
*/
return 0;
}


void StartTCPConnection(){
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af04      	add	r7, sp, #16
	int ck=1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
	if(strlen(ip)>4){
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d93b      	bls.n	8003b30 <StartTCPConnection+0x88>
		memset(GSMDataC,0,100);
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <StartTCPConnection+0x144>)
 8003aba:	2264      	movs	r2, #100	; 0x64
 8003abc:	2100      	movs	r1, #0
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f00e faa0 	bl	8012004 <memset>
		strcpy(GSMDataC,(char*)" AT+QIOPEN=0,\"TCP\",\"");
 8003ac4:	4b49      	ldr	r3, [pc, #292]	; (8003bec <StartTCPConnection+0x144>)
 8003ac6:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <StartTCPConnection+0x148>)
 8003ac8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003aca:	c313      	stmia	r3!, {r0, r1, r4}
 8003acc:	ca03      	ldmia	r2!, {r0, r1}
 8003ace:	c303      	stmia	r3!, {r0, r1}
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	701a      	strb	r2, [r3, #0]
		strcat(GSMDataC,ip);
 8003ad4:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <StartTCPConnection+0x14c>)
 8003ad6:	4b45      	ldr	r3, [pc, #276]	; (8003bec <StartTCPConnection+0x144>)
 8003ad8:	0011      	movs	r1, r2
 8003ada:	0018      	movs	r0, r3
 8003adc:	f00e fa9a 	bl	8012014 <strcat>
		gprsok=0;
 8003ae0:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <StartTCPConnection+0x150>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003ae6:	e01c      	b.n	8003b22 <StartTCPConnection+0x7a>
			ck=ck-1;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	607b      	str	r3, [r7, #4]
			SendGSMCode(GSMDataC);
 8003aee:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <StartTCPConnection+0x144>)
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7ff fdad 	bl	8003650 <SendGSMCode>
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QIOPEN 0 TCP Connection open ",gpsto_net,"CONNECT OK"));
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <StartTCPConnection+0x154>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4841      	ldr	r0, [pc, #260]	; (8003c00 <StartTCPConnection+0x158>)
 8003afc:	4940      	ldr	r1, [pc, #256]	; (8003c00 <StartTCPConnection+0x158>)
 8003afe:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <StartTCPConnection+0x15c>)
 8003b00:	9202      	str	r2, [sp, #8]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <StartTCPConnection+0x160>)
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	0003      	movs	r3, r0
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7ff fe97 	bl	8003840 <GetGSMReply>
 8003b12:	0003      	movs	r3, r0
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7fc faf7 	bl	8000108 <strlen>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <StartTCPConnection+0x150>)
 8003b20:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	dd03      	ble.n	8003b30 <StartTCPConnection+0x88>
 8003b28:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <StartTCPConnection+0x150>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	dddb      	ble.n	8003ae8 <StartTCPConnection+0x40>
		}
	}
	HAL_Delay(1500);
 8003b30:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <StartTCPConnection+0x164>)
 8003b32:	0018      	movs	r0, r3
 8003b34:	f004 f932 	bl	8007d9c <HAL_Delay>
	if(strlen(ip2)>4){
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <StartTCPConnection+0x168>)
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fc fae4 	bl	8000108 <strlen>
 8003b40:	0003      	movs	r3, r0
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d93d      	bls.n	8003bc2 <StartTCPConnection+0x11a>
		memset(GSMDataC,0,100);
 8003b46:	4b29      	ldr	r3, [pc, #164]	; (8003bec <StartTCPConnection+0x144>)
 8003b48:	2264      	movs	r2, #100	; 0x64
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f00e fa59 	bl	8012004 <memset>
		strcpy(GSMDataC,(char*)" AT+QIOPEN=1,\"TCP\",\"");
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <StartTCPConnection+0x144>)
 8003b54:	4a2f      	ldr	r2, [pc, #188]	; (8003c14 <StartTCPConnection+0x16c>)
 8003b56:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b58:	c313      	stmia	r3!, {r0, r1, r4}
 8003b5a:	ca03      	ldmia	r2!, {r0, r1}
 8003b5c:	c303      	stmia	r3!, {r0, r1}
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	701a      	strb	r2, [r3, #0]
		strcat(GSMDataC,ip2);
 8003b62:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <StartTCPConnection+0x168>)
 8003b64:	4b21      	ldr	r3, [pc, #132]	; (8003bec <StartTCPConnection+0x144>)
 8003b66:	0011      	movs	r1, r2
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f00e fa53 	bl	8012014 <strcat>
		ck=1;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
		gprsok=0;
 8003b72:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <StartTCPConnection+0x150>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003b78:	e01c      	b.n	8003bb4 <StartTCPConnection+0x10c>
			ck=ck-1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	607b      	str	r3, [r7, #4]
			SendGSMCode(GSMDataC);
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <StartTCPConnection+0x144>)
 8003b82:	0018      	movs	r0, r3
 8003b84:	f7ff fd64 	bl	8003650 <SendGSMCode>
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QIOPEN 1 TCP Connection open ",gpsto_net,"CONNECT OK"));
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <StartTCPConnection+0x154>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	481c      	ldr	r0, [pc, #112]	; (8003c00 <StartTCPConnection+0x158>)
 8003b8e:	491c      	ldr	r1, [pc, #112]	; (8003c00 <StartTCPConnection+0x158>)
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <StartTCPConnection+0x15c>)
 8003b92:	9202      	str	r2, [sp, #8]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <StartTCPConnection+0x170>)
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7ff fe4e 	bl	8003840 <GetGSMReply>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7fc faae 	bl	8000108 <strlen>
 8003bac:	0003      	movs	r3, r0
 8003bae:	001a      	movs	r2, r3
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <StartTCPConnection+0x150>)
 8003bb2:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dd03      	ble.n	8003bc2 <StartTCPConnection+0x11a>
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <StartTCPConnection+0x150>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	dddb      	ble.n	8003b7a <StartTCPConnection+0xd2>
		}
	}
	if (gprsok)	ServerConnected=1;
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <StartTCPConnection+0x150>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <StartTCPConnection+0x12a>
 8003bca:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <StartTCPConnection+0x174>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e002      	b.n	8003bd8 <StartTCPConnection+0x130>
	else ServerConnected=0;
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <StartTCPConnection+0x174>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8003bd8:	23fa      	movs	r3, #250	; 0xfa
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f004 f8dd 	bl	8007d9c <HAL_Delay>
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b003      	add	sp, #12
 8003be8:	bd90      	pop	{r4, r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	200012d8 	.word	0x200012d8
 8003bf0:	08016008 	.word	0x08016008
 8003bf4:	200014d8 	.word	0x200014d8
 8003bf8:	2000133c 	.word	0x2000133c
 8003bfc:	20000010 	.word	0x20000010
 8003c00:	08015d94 	.word	0x08015d94
 8003c04:	08016020 	.word	0x08016020
 8003c08:	0801602c 	.word	0x0801602c
 8003c0c:	000005dc 	.word	0x000005dc
 8003c10:	2000001c 	.word	0x2000001c
 8003c14:	08016054 	.word	0x08016054
 8003c18:	0801606c 	.word	0x0801606c
 8003c1c:	200014dc 	.word	0x200014dc

08003c20 <StopTCPConnection>:
void StopTCPConnection(){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af04      	add	r7, sp, #16
	int ck=1;
 8003c26:	2301      	movs	r3, #1
 8003c28:	607b      	str	r3, [r7, #4]
	gprsok=0;
 8003c2a:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <StopTCPConnection+0xb0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
	while((ck>0) && (gprsok<1)){
 8003c30:	e040      	b.n	8003cb4 <StopTCPConnection+0x94>
		ck=ck-1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	607b      	str	r3, [r7, #4]
		if(strlen(ip)>4){
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d919      	bls.n	8003c72 <StopTCPConnection+0x52>
		SendGSMCode(" AT+QICLOSE=0");
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <StopTCPConnection+0xb4>)
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7ff fd05 	bl	8003650 <SendGSMCode>
		gprsok=strlen(GetGSMReply(5,"",0,"","Error: AT+QICLOSE TCP Send Close",gpsto_dev,"CLOSE OK"));
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <StopTCPConnection+0xb8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4824      	ldr	r0, [pc, #144]	; (8003cdc <StopTCPConnection+0xbc>)
 8003c4c:	4923      	ldr	r1, [pc, #140]	; (8003cdc <StopTCPConnection+0xbc>)
 8003c4e:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <StopTCPConnection+0xc0>)
 8003c50:	9202      	str	r2, [sp, #8]
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <StopTCPConnection+0xc4>)
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	0003      	movs	r3, r0
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2005      	movs	r0, #5
 8003c5e:	f7ff fdef 	bl	8003840 <GetGSMReply>
 8003c62:	0003      	movs	r3, r0
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fc fa4f 	bl	8000108 <strlen>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	001a      	movs	r2, r3
 8003c6e:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <StopTCPConnection+0xb0>)
 8003c70:	601a      	str	r2, [r3, #0]
		}
		if(strlen(ip2)>4){
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <StopTCPConnection+0xc8>)
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fc fa47 	bl	8000108 <strlen>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d919      	bls.n	8003cb4 <StopTCPConnection+0x94>
		SendGSMCode(" AT+QICLOSE=1");
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <StopTCPConnection+0xcc>)
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7ff fce4 	bl	8003650 <SendGSMCode>
		gprsok=strlen(GetGSMReply(5,"",0,"","Error: AT+QICLOSE TCP Send Close",gpsto_dev,"CLOSE OK"));
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <StopTCPConnection+0xb8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4813      	ldr	r0, [pc, #76]	; (8003cdc <StopTCPConnection+0xbc>)
 8003c8e:	4913      	ldr	r1, [pc, #76]	; (8003cdc <StopTCPConnection+0xbc>)
 8003c90:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <StopTCPConnection+0xc0>)
 8003c92:	9202      	str	r2, [sp, #8]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <StopTCPConnection+0xc4>)
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2005      	movs	r0, #5
 8003ca0:	f7ff fdce 	bl	8003840 <GetGSMReply>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fc fa2e 	bl	8000108 <strlen>
 8003cac:	0003      	movs	r3, r0
 8003cae:	001a      	movs	r2, r3
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <StopTCPConnection+0xb0>)
 8003cb2:	601a      	str	r2, [r3, #0]
	while((ck>0) && (gprsok<1)){
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	dd03      	ble.n	8003cc2 <StopTCPConnection+0xa2>
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <StopTCPConnection+0xb0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	ddb7      	ble.n	8003c32 <StopTCPConnection+0x12>
		}
	}
	ServerConnected=0;
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <StopTCPConnection+0xd0>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	2000133c 	.word	0x2000133c
 8003cd4:	08016094 	.word	0x08016094
 8003cd8:	20000014 	.word	0x20000014
 8003cdc:	08015d94 	.word	0x08015d94
 8003ce0:	080160a4 	.word	0x080160a4
 8003ce4:	080160b0 	.word	0x080160b0
 8003ce8:	2000001c 	.word	0x2000001c
 8003cec:	080160d4 	.word	0x080160d4
 8003cf0:	200014dc 	.word	0x200014dc

08003cf4 <SendTCPdata>:
void SendTCPdata(char* data){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af04      	add	r7, sp, #16
 8003cfa:	6078      	str	r0, [r7, #4]
	int ck=1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
	if(gprsok>0){
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <SendTCPdata+0x194>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	dc00      	bgt.n	8003d0a <SendTCPdata+0x16>
 8003d08:	e0b9      	b.n	8003e7e <SendTCPdata+0x18a>
		if(strlen(ip)>4)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d957      	bls.n	8003dc0 <SendTCPdata+0xcc>
		{
		ck=1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
		gprsok=0;
 8003d14:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <SendTCPdata+0x194>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003d1a:	e01c      	b.n	8003d56 <SendTCPdata+0x62>
			ck=ck-1;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
			SendGSMCode(" AT+QISEND=0");
 8003d22:	4b5a      	ldr	r3, [pc, #360]	; (8003e8c <SendTCPdata+0x198>)
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff fc93 	bl	8003650 <SendGSMCode>
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data input",gpsto_dev,">"));
 8003d2a:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <SendTCPdata+0x19c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4859      	ldr	r0, [pc, #356]	; (8003e94 <SendTCPdata+0x1a0>)
 8003d30:	4958      	ldr	r1, [pc, #352]	; (8003e94 <SendTCPdata+0x1a0>)
 8003d32:	4a59      	ldr	r2, [pc, #356]	; (8003e98 <SendTCPdata+0x1a4>)
 8003d34:	9202      	str	r2, [sp, #8]
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	4b58      	ldr	r3, [pc, #352]	; (8003e9c <SendTCPdata+0x1a8>)
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2000      	movs	r0, #0
 8003d42:	f7ff fd7d 	bl	8003840 <GetGSMReply>
 8003d46:	0003      	movs	r3, r0
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fc f9dd 	bl	8000108 <strlen>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	001a      	movs	r2, r3
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <SendTCPdata+0x194>)
 8003d54:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	dd03      	ble.n	8003d64 <SendTCPdata+0x70>
 8003d5c:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <SendTCPdata+0x194>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dddb      	ble.n	8003d1c <SendTCPdata+0x28>
		}
		if(gprsok>0){
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <SendTCPdata+0x194>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	dd29      	ble.n	8003dc0 <SendTCPdata+0xcc>
			ck=1;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
			gprsok=0;
 8003d70:	4b45      	ldr	r3, [pc, #276]	; (8003e88 <SendTCPdata+0x194>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003d76:	e01c      	b.n	8003db2 <SendTCPdata+0xbe>
				ck=ck-1;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
				SendGSMData(data);//Debug_Tx(GSMData);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff fd29 	bl	80037d8 <SendGSMData>
				gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data",gpsto_dev,"SEND OK"));
 8003d86:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <SendTCPdata+0x19c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4842      	ldr	r0, [pc, #264]	; (8003e94 <SendTCPdata+0x1a0>)
 8003d8c:	4941      	ldr	r1, [pc, #260]	; (8003e94 <SendTCPdata+0x1a0>)
 8003d8e:	4a44      	ldr	r2, [pc, #272]	; (8003ea0 <SendTCPdata+0x1ac>)
 8003d90:	9202      	str	r2, [sp, #8]
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	4b43      	ldr	r3, [pc, #268]	; (8003ea4 <SendTCPdata+0x1b0>)
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	0003      	movs	r3, r0
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7ff fd4f 	bl	8003840 <GetGSMReply>
 8003da2:	0003      	movs	r3, r0
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7fc f9af 	bl	8000108 <strlen>
 8003daa:	0003      	movs	r3, r0
 8003dac:	001a      	movs	r2, r3
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <SendTCPdata+0x194>)
 8003db0:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dd03      	ble.n	8003dc0 <SendTCPdata+0xcc>
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <SendTCPdata+0x194>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dddb      	ble.n	8003d78 <SendTCPdata+0x84>

			}
		}
		}
		if(strlen(ip2)>4)
 8003dc0:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <SendTCPdata+0x1b4>)
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7fc f9a0 	bl	8000108 <strlen>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d957      	bls.n	8003e7e <SendTCPdata+0x18a>
		{
		ck=1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
		gprsok=0;
 8003dd2:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <SendTCPdata+0x194>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003dd8:	e01c      	b.n	8003e14 <SendTCPdata+0x120>
			ck=ck-1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
			SendGSMCode(" AT+QISEND=1");
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <SendTCPdata+0x1b8>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff fc34 	bl	8003650 <SendGSMCode>
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data input",gpsto_dev,">"));
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <SendTCPdata+0x19c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4829      	ldr	r0, [pc, #164]	; (8003e94 <SendTCPdata+0x1a0>)
 8003dee:	4929      	ldr	r1, [pc, #164]	; (8003e94 <SendTCPdata+0x1a0>)
 8003df0:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <SendTCPdata+0x1a4>)
 8003df2:	9202      	str	r2, [sp, #8]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <SendTCPdata+0x1a8>)
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7ff fd1e 	bl	8003840 <GetGSMReply>
 8003e04:	0003      	movs	r3, r0
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7fc f97e 	bl	8000108 <strlen>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	001a      	movs	r2, r3
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <SendTCPdata+0x194>)
 8003e12:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dd03      	ble.n	8003e22 <SendTCPdata+0x12e>
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <SendTCPdata+0x194>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dddb      	ble.n	8003dda <SendTCPdata+0xe6>
		}
		if(gprsok>0){
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <SendTCPdata+0x194>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	dd29      	ble.n	8003e7e <SendTCPdata+0x18a>
			ck=1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
			gprsok=0;
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <SendTCPdata+0x194>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003e34:	e01c      	b.n	8003e70 <SendTCPdata+0x17c>
				ck=ck-1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
				SendGSMData(data);//Debug_Tx(GSMData);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7ff fcca 	bl	80037d8 <SendGSMData>
				gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QISEND Send TCP data",gpsto_dev,"SEND OK"));
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <SendTCPdata+0x19c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4812      	ldr	r0, [pc, #72]	; (8003e94 <SendTCPdata+0x1a0>)
 8003e4a:	4912      	ldr	r1, [pc, #72]	; (8003e94 <SendTCPdata+0x1a0>)
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <SendTCPdata+0x1ac>)
 8003e4e:	9202      	str	r2, [sp, #8]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <SendTCPdata+0x1b0>)
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	0003      	movs	r3, r0
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f7ff fcf0 	bl	8003840 <GetGSMReply>
 8003e60:	0003      	movs	r3, r0
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7fc f950 	bl	8000108 <strlen>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <SendTCPdata+0x194>)
 8003e6e:	601a      	str	r2, [r3, #0]
			while((ck>0) && (gprsok<1)){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dd03      	ble.n	8003e7e <SendTCPdata+0x18a>
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <SendTCPdata+0x194>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dddb      	ble.n	8003e36 <SendTCPdata+0x142>

			}
		}
		}
	}
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	2000133c 	.word	0x2000133c
 8003e8c:	080160e4 	.word	0x080160e4
 8003e90:	20000014 	.word	0x20000014
 8003e94:	08015d94 	.word	0x08015d94
 8003e98:	080160f4 	.word	0x080160f4
 8003e9c:	080160f8 	.word	0x080160f8
 8003ea0:	08016120 	.word	0x08016120
 8003ea4:	08016128 	.word	0x08016128
 8003ea8:	2000001c 	.word	0x2000001c
 8003eac:	08016148 	.word	0x08016148

08003eb0 <GSMCellInfo>:



char* GSMCellInfo(){
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b097      	sub	sp, #92	; 0x5c
 8003eb4:	af10      	add	r7, sp, #64	; 0x40


	memset(SS0,0,4);
 8003eb6:	4bcb      	ldr	r3, [pc, #812]	; (80041e4 <GSMCellInfo+0x334>)
 8003eb8:	2204      	movs	r2, #4
 8003eba:	2100      	movs	r1, #0
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f00e f8a1 	bl	8012004 <memset>
	memset(SS1,0,4);
 8003ec2:	4bc9      	ldr	r3, [pc, #804]	; (80041e8 <GSMCellInfo+0x338>)
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f00e f89b 	bl	8012004 <memset>
	memset(SS2,0,4);
 8003ece:	4bc7      	ldr	r3, [pc, #796]	; (80041ec <GSMCellInfo+0x33c>)
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f00e f895 	bl	8012004 <memset>
	memset(SS3,0,4);
 8003eda:	4bc5      	ldr	r3, [pc, #788]	; (80041f0 <GSMCellInfo+0x340>)
 8003edc:	2204      	movs	r2, #4
 8003ede:	2100      	movs	r1, #0
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f00e f88f 	bl	8012004 <memset>
	memset(SS4,0,4);
 8003ee6:	4bc3      	ldr	r3, [pc, #780]	; (80041f4 <GSMCellInfo+0x344>)
 8003ee8:	2204      	movs	r2, #4
 8003eea:	2100      	movs	r1, #0
 8003eec:	0018      	movs	r0, r3
 8003eee:	f00e f889 	bl	8012004 <memset>
	memset(MCC0,0,5);
 8003ef2:	4bc1      	ldr	r3, [pc, #772]	; (80041f8 <GSMCellInfo+0x348>)
 8003ef4:	2205      	movs	r2, #5
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f00e f883 	bl	8012004 <memset>
	memset(MNC0,0,5);
 8003efe:	4bbf      	ldr	r3, [pc, #764]	; (80041fc <GSMCellInfo+0x34c>)
 8003f00:	2205      	movs	r2, #5
 8003f02:	2100      	movs	r1, #0
 8003f04:	0018      	movs	r0, r3
 8003f06:	f00e f87d 	bl	8012004 <memset>
	memset(LAC0,0,6);
 8003f0a:	4bbd      	ldr	r3, [pc, #756]	; (8004200 <GSMCellInfo+0x350>)
 8003f0c:	2206      	movs	r2, #6
 8003f0e:	2100      	movs	r1, #0
 8003f10:	0018      	movs	r0, r3
 8003f12:	f00e f877 	bl	8012004 <memset>
	memset(LAC1,0,6);
 8003f16:	4bbb      	ldr	r3, [pc, #748]	; (8004204 <GSMCellInfo+0x354>)
 8003f18:	2206      	movs	r2, #6
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f00e f871 	bl	8012004 <memset>
	memset(LAC2,0,6);
 8003f22:	4bb9      	ldr	r3, [pc, #740]	; (8004208 <GSMCellInfo+0x358>)
 8003f24:	2206      	movs	r2, #6
 8003f26:	2100      	movs	r1, #0
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f00e f86b 	bl	8012004 <memset>
	memset(LAC3,0,6);
 8003f2e:	4bb7      	ldr	r3, [pc, #732]	; (800420c <GSMCellInfo+0x35c>)
 8003f30:	2206      	movs	r2, #6
 8003f32:	2100      	movs	r1, #0
 8003f34:	0018      	movs	r0, r3
 8003f36:	f00e f865 	bl	8012004 <memset>
	memset(LAC4,0,6);
 8003f3a:	4bb5      	ldr	r3, [pc, #724]	; (8004210 <GSMCellInfo+0x360>)
 8003f3c:	2206      	movs	r2, #6
 8003f3e:	2100      	movs	r1, #0
 8003f40:	0018      	movs	r0, r3
 8003f42:	f00e f85f 	bl	8012004 <memset>
	memset(CID4,0,6);
 8003f46:	4bb3      	ldr	r3, [pc, #716]	; (8004214 <GSMCellInfo+0x364>)
 8003f48:	2206      	movs	r2, #6
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f00e f859 	bl	8012004 <memset>
	memset(CID3,0,6);
 8003f52:	4bb1      	ldr	r3, [pc, #708]	; (8004218 <GSMCellInfo+0x368>)
 8003f54:	2206      	movs	r2, #6
 8003f56:	2100      	movs	r1, #0
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f00e f853 	bl	8012004 <memset>
	memset(CID2,0,6);
 8003f5e:	4baf      	ldr	r3, [pc, #700]	; (800421c <GSMCellInfo+0x36c>)
 8003f60:	2206      	movs	r2, #6
 8003f62:	2100      	movs	r1, #0
 8003f64:	0018      	movs	r0, r3
 8003f66:	f00e f84d 	bl	8012004 <memset>
	memset(CID1,0,6);
 8003f6a:	4bad      	ldr	r3, [pc, #692]	; (8004220 <GSMCellInfo+0x370>)
 8003f6c:	2206      	movs	r2, #6
 8003f6e:	2100      	movs	r1, #0
 8003f70:	0018      	movs	r0, r3
 8003f72:	f00e f847 	bl	8012004 <memset>
	memset(CID0,0,6);
 8003f76:	4bab      	ldr	r3, [pc, #684]	; (8004224 <GSMCellInfo+0x374>)
 8003f78:	2206      	movs	r2, #6
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f00e f841 	bl	8012004 <memset>
	strcpy(MCC0,"x\0");
 8003f82:	4b9d      	ldr	r3, [pc, #628]	; (80041f8 <GSMCellInfo+0x348>)
 8003f84:	2278      	movs	r2, #120	; 0x78
 8003f86:	801a      	strh	r2, [r3, #0]
	strcpy(MNC0,"x\0");
 8003f88:	4b9c      	ldr	r3, [pc, #624]	; (80041fc <GSMCellInfo+0x34c>)
 8003f8a:	2278      	movs	r2, #120	; 0x78
 8003f8c:	801a      	strh	r2, [r3, #0]
	strcpy(LAC0,"x\0");
 8003f8e:	4b9c      	ldr	r3, [pc, #624]	; (8004200 <GSMCellInfo+0x350>)
 8003f90:	2278      	movs	r2, #120	; 0x78
 8003f92:	801a      	strh	r2, [r3, #0]
	strcpy(CID0,"x\0");
 8003f94:	4ba3      	ldr	r3, [pc, #652]	; (8004224 <GSMCellInfo+0x374>)
 8003f96:	2278      	movs	r2, #120	; 0x78
 8003f98:	801a      	strh	r2, [r3, #0]
	strcpy(SS0,"x\0");
 8003f9a:	4b92      	ldr	r3, [pc, #584]	; (80041e4 <GSMCellInfo+0x334>)
 8003f9c:	2278      	movs	r2, #120	; 0x78
 8003f9e:	801a      	strh	r2, [r3, #0]
	strcpy(SS1,"x\0");
 8003fa0:	4b91      	ldr	r3, [pc, #580]	; (80041e8 <GSMCellInfo+0x338>)
 8003fa2:	2278      	movs	r2, #120	; 0x78
 8003fa4:	801a      	strh	r2, [r3, #0]
	strcpy(CID1,"x\0");
 8003fa6:	4b9e      	ldr	r3, [pc, #632]	; (8004220 <GSMCellInfo+0x370>)
 8003fa8:	2278      	movs	r2, #120	; 0x78
 8003faa:	801a      	strh	r2, [r3, #0]
	strcpy(LAC1,"x\0");
 8003fac:	4b95      	ldr	r3, [pc, #596]	; (8004204 <GSMCellInfo+0x354>)
 8003fae:	2278      	movs	r2, #120	; 0x78
 8003fb0:	801a      	strh	r2, [r3, #0]

	strcpy(SS2,"x\0");
 8003fb2:	4b8e      	ldr	r3, [pc, #568]	; (80041ec <GSMCellInfo+0x33c>)
 8003fb4:	2278      	movs	r2, #120	; 0x78
 8003fb6:	801a      	strh	r2, [r3, #0]
	strcpy(CID2,"x\0");
 8003fb8:	4b98      	ldr	r3, [pc, #608]	; (800421c <GSMCellInfo+0x36c>)
 8003fba:	2278      	movs	r2, #120	; 0x78
 8003fbc:	801a      	strh	r2, [r3, #0]
	strcpy(LAC2,"x\0");
 8003fbe:	4b92      	ldr	r3, [pc, #584]	; (8004208 <GSMCellInfo+0x358>)
 8003fc0:	2278      	movs	r2, #120	; 0x78
 8003fc2:	801a      	strh	r2, [r3, #0]

	strcpy(SS3,"x\0");
 8003fc4:	4b8a      	ldr	r3, [pc, #552]	; (80041f0 <GSMCellInfo+0x340>)
 8003fc6:	2278      	movs	r2, #120	; 0x78
 8003fc8:	801a      	strh	r2, [r3, #0]
	strcpy(CID3,"x\0");
 8003fca:	4b93      	ldr	r3, [pc, #588]	; (8004218 <GSMCellInfo+0x368>)
 8003fcc:	2278      	movs	r2, #120	; 0x78
 8003fce:	801a      	strh	r2, [r3, #0]
	strcpy(LAC3,"x\0");
 8003fd0:	4b8e      	ldr	r3, [pc, #568]	; (800420c <GSMCellInfo+0x35c>)
 8003fd2:	2278      	movs	r2, #120	; 0x78
 8003fd4:	801a      	strh	r2, [r3, #0]

	strcpy(SS4,"x\0");
 8003fd6:	4b87      	ldr	r3, [pc, #540]	; (80041f4 <GSMCellInfo+0x344>)
 8003fd8:	2278      	movs	r2, #120	; 0x78
 8003fda:	801a      	strh	r2, [r3, #0]
	strcpy(CID4,"x\0");
 8003fdc:	4b8d      	ldr	r3, [pc, #564]	; (8004214 <GSMCellInfo+0x364>)
 8003fde:	2278      	movs	r2, #120	; 0x78
 8003fe0:	801a      	strh	r2, [r3, #0]
	strcpy(LAC4,"x\0");
 8003fe2:	4b8b      	ldr	r3, [pc, #556]	; (8004210 <GSMCellInfo+0x360>)
 8003fe4:	2278      	movs	r2, #120	; 0x78
 8003fe6:	801a      	strh	r2, [r3, #0]

	memset(GSMData,0,800);
 8003fe8:	23c8      	movs	r3, #200	; 0xc8
 8003fea:	009a      	lsls	r2, r3, #2
 8003fec:	4b8e      	ldr	r3, [pc, #568]	; (8004228 <GSMCellInfo+0x378>)
 8003fee:	2100      	movs	r1, #0
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f00e f807 	bl	8012004 <memset>

	SendGSMCodeL(" AT+QENG?");
 8003ff6:	4b8d      	ldr	r3, [pc, #564]	; (800422c <GSMCellInfo+0x37c>)
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff fb8b 	bl	8003714 <SendGSMCodeL>
	//Debug_Tx(GSMData);

	HAL_Delay(500);
 8003ffe:	23fa      	movs	r3, #250	; 0xfa
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	0018      	movs	r0, r3
 8004004:	f003 feca 	bl	8007d9c <HAL_Delay>

	char* m0=strstr(GSMData, "+QENG: 0");
 8004008:	4a89      	ldr	r2, [pc, #548]	; (8004230 <GSMCellInfo+0x380>)
 800400a:	4b87      	ldr	r3, [pc, #540]	; (8004228 <GSMCellInfo+0x378>)
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f00e f8a8 	bl	8012164 <strstr>
 8004014:	0003      	movs	r3, r0
 8004016:	607b      	str	r3, [r7, #4]
	if((m0 != NULL) &(strlen(m0)>1)){
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	4193      	sbcs	r3, r2
 800401e:	b2dc      	uxtb	r4, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0018      	movs	r0, r3
 8004024:	f7fc f870 	bl	8000108 <strlen>
 8004028:	0003      	movs	r3, r0
 800402a:	2201      	movs	r2, #1
 800402c:	429a      	cmp	r2, r3
 800402e:	419b      	sbcs	r3, r3
 8004030:	425b      	negs	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	4023      	ands	r3, r4
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d042      	beq.n	80040c2 <GSMCellInfo+0x212>

		//Debug_Tx(m0);
		int k=0;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
		char* part;
		while ((part = strtok_r(m0, ",", &m0))){
 8004040:	e033      	b.n	80040aa <GSMCellInfo+0x1fa>
			if(k==1)strcpy(MCC0,part);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <GSMCellInfo+0x1a6>
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4b6b      	ldr	r3, [pc, #428]	; (80041f8 <GSMCellInfo+0x348>)
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f00e f98d 	bl	801236e <strcpy>
 8004054:	e026      	b.n	80040a4 <GSMCellInfo+0x1f4>
			else if(k==2)strcpy(MNC0,part);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d106      	bne.n	800406a <GSMCellInfo+0x1ba>
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <GSMCellInfo+0x34c>)
 8004060:	0011      	movs	r1, r2
 8004062:	0018      	movs	r0, r3
 8004064:	f00e f983 	bl	801236e <strcpy>
 8004068:	e01c      	b.n	80040a4 <GSMCellInfo+0x1f4>
			else if(k==3)strcpy(LAC0,part);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d106      	bne.n	800407e <GSMCellInfo+0x1ce>
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4b63      	ldr	r3, [pc, #396]	; (8004200 <GSMCellInfo+0x350>)
 8004074:	0011      	movs	r1, r2
 8004076:	0018      	movs	r0, r3
 8004078:	f00e f979 	bl	801236e <strcpy>
 800407c:	e012      	b.n	80040a4 <GSMCellInfo+0x1f4>
			else if(k==4)strcpy(CID0,part);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d106      	bne.n	8004092 <GSMCellInfo+0x1e2>
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <GSMCellInfo+0x374>)
 8004088:	0011      	movs	r1, r2
 800408a:	0018      	movs	r0, r3
 800408c:	f00e f96f 	bl	801236e <strcpy>
 8004090:	e008      	b.n	80040a4 <GSMCellInfo+0x1f4>
			else if(k==7)strcpy(SS0,part);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b07      	cmp	r3, #7
 8004096:	d105      	bne.n	80040a4 <GSMCellInfo+0x1f4>
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4b52      	ldr	r3, [pc, #328]	; (80041e4 <GSMCellInfo+0x334>)
 800409c:	0011      	movs	r1, r2
 800409e:	0018      	movs	r0, r3
 80040a0:	f00e f965 	bl	801236e <strcpy>
			k++;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3301      	adds	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
		while ((part = strtok_r(m0, ",", &m0))){
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	1d3a      	adds	r2, r7, #4
 80040ae:	4961      	ldr	r1, [pc, #388]	; (8004234 <GSMCellInfo+0x384>)
 80040b0:	0018      	movs	r0, r3
 80040b2:	f00e f852 	bl	801215a <strtok_r>
 80040b6:	0003      	movs	r3, r0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1c0      	bne.n	8004042 <GSMCellInfo+0x192>
 80040c0:	e003      	b.n	80040ca <GSMCellInfo+0x21a>
		}
	}
	else{
		Debug_Tx("GSM tower data  Signal");}
 80040c2:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <GSMCellInfo+0x388>)
 80040c4:	0018      	movs	r0, r3
 80040c6:	f003 f8b5 	bl	8007234 <Debug_Tx>
	char* m1=strstr(GSMData, "+QENG: 1");
 80040ca:	4a5c      	ldr	r2, [pc, #368]	; (800423c <GSMCellInfo+0x38c>)
 80040cc:	4b56      	ldr	r3, [pc, #344]	; (8004228 <GSMCellInfo+0x378>)
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f00e f847 	bl	8012164 <strstr>
 80040d6:	0003      	movs	r3, r0
 80040d8:	603b      	str	r3, [r7, #0]
	if((m1 != NULL) &(strlen(m1)>1)){
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	4193      	sbcs	r3, r2
 80040e0:	b2dc      	uxtb	r4, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fc f80f 	bl	8000108 <strlen>
 80040ea:	0003      	movs	r3, r0
 80040ec:	2201      	movs	r2, #1
 80040ee:	429a      	cmp	r2, r3
 80040f0:	419b      	sbcs	r3, r3
 80040f2:	425b      	negs	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	4023      	ands	r3, r4
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d100      	bne.n	8004100 <GSMCellInfo+0x250>
 80040fe:	e0b7      	b.n	8004270 <GSMCellInfo+0x3c0>
		//Debug_Tx(m1);
		int k=0;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
		char* part;
		while ((part = strtok_r(m1, ",", &m1))){
 8004104:	e0a8      	b.n	8004258 <GSMCellInfo+0x3a8>
			if(k==3)strcpy(SS1,part);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d106      	bne.n	800411a <GSMCellInfo+0x26a>
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <GSMCellInfo+0x338>)
 8004110:	0011      	movs	r1, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f00e f92b 	bl	801236e <strcpy>
 8004118:	e09b      	b.n	8004252 <GSMCellInfo+0x3a2>
			else if(k==10)strcpy(CID1,part);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b0a      	cmp	r3, #10
 800411e:	d106      	bne.n	800412e <GSMCellInfo+0x27e>
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <GSMCellInfo+0x370>)
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f00e f921 	bl	801236e <strcpy>
 800412c:	e091      	b.n	8004252 <GSMCellInfo+0x3a2>
			else if(k==9)strcpy(LAC1,part);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b09      	cmp	r3, #9
 8004132:	d106      	bne.n	8004142 <GSMCellInfo+0x292>
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <GSMCellInfo+0x354>)
 8004138:	0011      	movs	r1, r2
 800413a:	0018      	movs	r0, r3
 800413c:	f00e f917 	bl	801236e <strcpy>
 8004140:	e087      	b.n	8004252 <GSMCellInfo+0x3a2>

			else if(k==13)strcpy(SS2,part);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b0d      	cmp	r3, #13
 8004146:	d106      	bne.n	8004156 <GSMCellInfo+0x2a6>
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <GSMCellInfo+0x33c>)
 800414c:	0011      	movs	r1, r2
 800414e:	0018      	movs	r0, r3
 8004150:	f00e f90d 	bl	801236e <strcpy>
 8004154:	e07d      	b.n	8004252 <GSMCellInfo+0x3a2>
			else if(k==20)strcpy(CID2,part);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b14      	cmp	r3, #20
 800415a:	d106      	bne.n	800416a <GSMCellInfo+0x2ba>
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	4b2f      	ldr	r3, [pc, #188]	; (800421c <GSMCellInfo+0x36c>)
 8004160:	0011      	movs	r1, r2
 8004162:	0018      	movs	r0, r3
 8004164:	f00e f903 	bl	801236e <strcpy>
 8004168:	e073      	b.n	8004252 <GSMCellInfo+0x3a2>
			else if(k==19)strcpy(LAC2,part);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b13      	cmp	r3, #19
 800416e:	d106      	bne.n	800417e <GSMCellInfo+0x2ce>
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4b25      	ldr	r3, [pc, #148]	; (8004208 <GSMCellInfo+0x358>)
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f00e f8f9 	bl	801236e <strcpy>
 800417c:	e069      	b.n	8004252 <GSMCellInfo+0x3a2>

			else if(k==23)strcpy(SS3,part);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b17      	cmp	r3, #23
 8004182:	d106      	bne.n	8004192 <GSMCellInfo+0x2e2>
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <GSMCellInfo+0x340>)
 8004188:	0011      	movs	r1, r2
 800418a:	0018      	movs	r0, r3
 800418c:	f00e f8ef 	bl	801236e <strcpy>
 8004190:	e05f      	b.n	8004252 <GSMCellInfo+0x3a2>
			else if(k==30)strcpy(CID3,part);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b1e      	cmp	r3, #30
 8004196:	d106      	bne.n	80041a6 <GSMCellInfo+0x2f6>
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <GSMCellInfo+0x368>)
 800419c:	0011      	movs	r1, r2
 800419e:	0018      	movs	r0, r3
 80041a0:	f00e f8e5 	bl	801236e <strcpy>
 80041a4:	e055      	b.n	8004252 <GSMCellInfo+0x3a2>
			else if(k==29)strcpy(LAC3,part);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b1d      	cmp	r3, #29
 80041aa:	d106      	bne.n	80041ba <GSMCellInfo+0x30a>
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <GSMCellInfo+0x35c>)
 80041b0:	0011      	movs	r1, r2
 80041b2:	0018      	movs	r0, r3
 80041b4:	f00e f8db 	bl	801236e <strcpy>
 80041b8:	e04b      	b.n	8004252 <GSMCellInfo+0x3a2>

			else if(k==33)strcpy(SS4,part);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b21      	cmp	r3, #33	; 0x21
 80041be:	d106      	bne.n	80041ce <GSMCellInfo+0x31e>
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <GSMCellInfo+0x344>)
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f00e f8d1 	bl	801236e <strcpy>
 80041cc:	e041      	b.n	8004252 <GSMCellInfo+0x3a2>
			else if(k==40)strcpy(CID4,part);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b28      	cmp	r3, #40	; 0x28
 80041d2:	d135      	bne.n	8004240 <GSMCellInfo+0x390>
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <GSMCellInfo+0x364>)
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f00e f8c7 	bl	801236e <strcpy>
 80041e0:	e037      	b.n	8004252 <GSMCellInfo+0x3a2>
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	20001464 	.word	0x20001464
 80041e8:	20001488 	.word	0x20001488
 80041ec:	2000149c 	.word	0x2000149c
 80041f0:	200014b0 	.word	0x200014b0
 80041f4:	200014c4 	.word	0x200014c4
 80041f8:	20001468 	.word	0x20001468
 80041fc:	20001470 	.word	0x20001470
 8004200:	20001478 	.word	0x20001478
 8004204:	2000148c 	.word	0x2000148c
 8004208:	200014a0 	.word	0x200014a0
 800420c:	200014b4 	.word	0x200014b4
 8004210:	200014c8 	.word	0x200014c8
 8004214:	200014d0 	.word	0x200014d0
 8004218:	200014bc 	.word	0x200014bc
 800421c:	200014a8 	.word	0x200014a8
 8004220:	20001494 	.word	0x20001494
 8004224:	20001480 	.word	0x20001480
 8004228:	20000cf8 	.word	0x20000cf8
 800422c:	08016158 	.word	0x08016158
 8004230:	08016164 	.word	0x08016164
 8004234:	08015c28 	.word	0x08015c28
 8004238:	08016170 	.word	0x08016170
 800423c:	08016188 	.word	0x08016188
			else if(k==39)strcpy(LAC4,part);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b27      	cmp	r3, #39	; 0x27
 8004244:	d105      	bne.n	8004252 <GSMCellInfo+0x3a2>
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <GSMCellInfo+0x42c>)
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f00e f88e 	bl	801236e <strcpy>
			k++;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	3301      	adds	r3, #1
 8004256:	613b      	str	r3, [r7, #16]
		while ((part = strtok_r(m1, ",", &m1))){
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	003a      	movs	r2, r7
 800425c:	4920      	ldr	r1, [pc, #128]	; (80042e0 <GSMCellInfo+0x430>)
 800425e:	0018      	movs	r0, r3
 8004260:	f00d ff7b 	bl	801215a <strtok_r>
 8004264:	0003      	movs	r3, r0
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d000      	beq.n	8004270 <GSMCellInfo+0x3c0>
 800426e:	e74a      	b.n	8004106 <GSMCellInfo+0x256>





	memset(gsminfo,0,80);
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <GSMCellInfo+0x434>)
 8004272:	2250      	movs	r2, #80	; 0x50
 8004274:	2100      	movs	r1, #0
 8004276:	0018      	movs	r0, r3
 8004278:	f00d fec4 	bl	8012004 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",(int)GSMSignal,MCC0,MNC0,LAC0,CID0,CID1,LAC1,SS1,CID2,LAC2,SS2,CID3,LAC3,SS3,CID4,LAC4,SS4);
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <GSMCellInfo+0x438>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	1c18      	adds	r0, r3, #0
 8004282:	f7fd f813 	bl	80012ac <__aeabi_f2iz>
 8004286:	0004      	movs	r4, r0
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <GSMCellInfo+0x43c>)
 800428a:	4919      	ldr	r1, [pc, #100]	; (80042f0 <GSMCellInfo+0x440>)
 800428c:	4815      	ldr	r0, [pc, #84]	; (80042e4 <GSMCellInfo+0x434>)
 800428e:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <GSMCellInfo+0x444>)
 8004290:	930e      	str	r3, [sp, #56]	; 0x38
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <GSMCellInfo+0x42c>)
 8004294:	930d      	str	r3, [sp, #52]	; 0x34
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <GSMCellInfo+0x448>)
 8004298:	930c      	str	r3, [sp, #48]	; 0x30
 800429a:	4b18      	ldr	r3, [pc, #96]	; (80042fc <GSMCellInfo+0x44c>)
 800429c:	930b      	str	r3, [sp, #44]	; 0x2c
 800429e:	4b18      	ldr	r3, [pc, #96]	; (8004300 <GSMCellInfo+0x450>)
 80042a0:	930a      	str	r3, [sp, #40]	; 0x28
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <GSMCellInfo+0x454>)
 80042a4:	9309      	str	r3, [sp, #36]	; 0x24
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <GSMCellInfo+0x458>)
 80042a8:	9308      	str	r3, [sp, #32]
 80042aa:	4b18      	ldr	r3, [pc, #96]	; (800430c <GSMCellInfo+0x45c>)
 80042ac:	9307      	str	r3, [sp, #28]
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <GSMCellInfo+0x460>)
 80042b0:	9306      	str	r3, [sp, #24]
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <GSMCellInfo+0x464>)
 80042b4:	9305      	str	r3, [sp, #20]
 80042b6:	4b18      	ldr	r3, [pc, #96]	; (8004318 <GSMCellInfo+0x468>)
 80042b8:	9304      	str	r3, [sp, #16]
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <GSMCellInfo+0x46c>)
 80042bc:	9303      	str	r3, [sp, #12]
 80042be:	4b18      	ldr	r3, [pc, #96]	; (8004320 <GSMCellInfo+0x470>)
 80042c0:	9302      	str	r3, [sp, #8]
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <GSMCellInfo+0x474>)
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <GSMCellInfo+0x478>)
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	0013      	movs	r3, r2
 80042cc:	0022      	movs	r2, r4
 80042ce:	f00d fe2d 	bl	8011f2c <siprintf>
	//Debug_Tx(gsminfo);

	return(gsminfo);
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <GSMCellInfo+0x434>)

}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b007      	add	sp, #28
 80042da:	bd90      	pop	{r4, r7, pc}
 80042dc:	200014c8 	.word	0x200014c8
 80042e0:	08015c28 	.word	0x08015c28
 80042e4:	200013a8 	.word	0x200013a8
 80042e8:	20001460 	.word	0x20001460
 80042ec:	20001468 	.word	0x20001468
 80042f0:	08016194 	.word	0x08016194
 80042f4:	200014c4 	.word	0x200014c4
 80042f8:	200014d0 	.word	0x200014d0
 80042fc:	200014b0 	.word	0x200014b0
 8004300:	200014b4 	.word	0x200014b4
 8004304:	200014bc 	.word	0x200014bc
 8004308:	2000149c 	.word	0x2000149c
 800430c:	200014a0 	.word	0x200014a0
 8004310:	200014a8 	.word	0x200014a8
 8004314:	20001488 	.word	0x20001488
 8004318:	2000148c 	.word	0x2000148c
 800431c:	20001494 	.word	0x20001494
 8004320:	20001480 	.word	0x20001480
 8004324:	20001478 	.word	0x20001478
 8004328:	20001470 	.word	0x20001470

0800432c <SetTCPMux>:
	strcpy(GSMData,SendGSMCode(" AT+CCED"));
	return(GSMData);
}
*/

char* SetTCPMux(){
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af04      	add	r7, sp, #16
	SendGSMCode(" AT+QIMUX=1");
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <SetTCPMux+0x34>)
 8004334:	0018      	movs	r0, r3
 8004336:	f7ff f98b 	bl	8003650 <SendGSMCode>
	return(GetGSMReply(0,"",0,"","Error: AT+QIMUX=1 set tcpMux",gpsto_dev,"OK"));
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <SetTCPMux+0x38>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	480a      	ldr	r0, [pc, #40]	; (8004368 <SetTCPMux+0x3c>)
 8004340:	4909      	ldr	r1, [pc, #36]	; (8004368 <SetTCPMux+0x3c>)
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <SetTCPMux+0x40>)
 8004344:	9202      	str	r2, [sp, #8]
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <SetTCPMux+0x44>)
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	0003      	movs	r3, r0
 800434e:	2200      	movs	r2, #0
 8004350:	2000      	movs	r0, #0
 8004352:	f7ff fa75 	bl	8003840 <GetGSMReply>
 8004356:	0003      	movs	r3, r0
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	080161c8 	.word	0x080161c8
 8004364:	20000014 	.word	0x20000014
 8004368:	08015d94 	.word	0x08015d94
 800436c:	08015c94 	.word	0x08015c94
 8004370:	080161d4 	.word	0x080161d4

08004374 <ResetTCP>:



void ResetTCP(){
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	//EndTransfer();
	StopTCPConnection();
 8004378:	f7ff fc52 	bl	8003c20 <StopTCPConnection>
	StartTCPConnection();
 800437c:	f7ff fb94 	bl	8003aa8 <StartTCPConnection>

}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <ProcessTCPAll>:

void ProcessTCPAll( char* data){
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	int tcpSENDDATA=tic();
 8004390:	f001 fba8 	bl	8005ae4 <tic>
 8004394:	0003      	movs	r3, r0
 8004396:	60fb      	str	r3, [r7, #12]
	if(ServerConnected>0){
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <ProcessTCPAll+0x4c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	dd04      	ble.n	80043aa <ProcessTCPAll+0x22>
		//$AS01FFA0138,$123456789012345,$1.0.4,$1.0.0,28.609803N077.103198E,F7,*

		SendTCPdata(data);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fca6 	bl	8003cf4 <SendTCPdata>
 80043a8:	e009      	b.n	80043be <ProcessTCPAll+0x36>
	}else{
		if (debug==1){Debug_Tx("Error: ServerSession disconnected ");}
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <ProcessTCPAll+0x50>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d103      	bne.n	80043ba <ProcessTCPAll+0x32>
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <ProcessTCPAll+0x54>)
 80043b4:	0018      	movs	r0, r3
 80043b6:	f002 ff3d 	bl	8007234 <Debug_Tx>

		ResetTCP();
 80043ba:	f7ff ffdb 	bl	8004374 <ResetTCP>

}


 	toc( tcpSENDDATA,"_________________________TCP SEND DATA");
 80043be:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <ProcessTCPAll+0x58>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	0011      	movs	r1, r2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f001 fb95 	bl	8005af4 <toc>


}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	200014dc 	.word	0x200014dc
 80043d8:	2000000c 	.word	0x2000000c
 80043dc:	080161f4 	.word	0x080161f4
 80043e0:	08016218 	.word	0x08016218

080043e4 <SetupGPRS>:
	return smsok;
}



void SetupGPRS(char* apn){
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af04      	add	r7, sp, #16
 80043ea:	6078      	str	r0, [r7, #4]

	int ck=5;
 80043ec:	2305      	movs	r3, #5
 80043ee:	60fb      	str	r3, [r7, #12]

	gprsok=0;
 80043f0:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <SetupGPRS+0xf4>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
	while((ck>0) && (gprsok<1)){
 80043f6:	e064      	b.n	80044c2 <SetupGPRS+0xde>
		HAL_Delay(2000);
 80043f8:	23fa      	movs	r3, #250	; 0xfa
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	0018      	movs	r0, r3
 80043fe:	f003 fccd 	bl	8007d9c <HAL_Delay>
		ck=ck-1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b01      	subs	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
		//SendGSMCode(" AT+CGACT=0,1");
		//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",500));
		memset(GSMDataC,0,100);
 8004408:	4b34      	ldr	r3, [pc, #208]	; (80044dc <SetupGPRS+0xf8>)
 800440a:	2264      	movs	r2, #100	; 0x64
 800440c:	2100      	movs	r1, #0
 800440e:	0018      	movs	r0, r3
 8004410:	f00d fdf8 	bl	8012004 <memset>
		strcpy(GSMDataC,(char*)" AT+QICSGP=1,\"");
 8004414:	4b31      	ldr	r3, [pc, #196]	; (80044dc <SetupGPRS+0xf8>)
 8004416:	4a32      	ldr	r2, [pc, #200]	; (80044e0 <SetupGPRS+0xfc>)
 8004418:	ca13      	ldmia	r2!, {r0, r1, r4}
 800441a:	c313      	stmia	r3!, {r0, r1, r4}
 800441c:	8811      	ldrh	r1, [r2, #0]
 800441e:	8019      	strh	r1, [r3, #0]
 8004420:	7892      	ldrb	r2, [r2, #2]
 8004422:	709a      	strb	r2, [r3, #2]
		strcat(GSMDataC,apn);
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <SetupGPRS+0xf8>)
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f00d fdf2 	bl	8012014 <strcat>
		strcat(GSMDataC,"\",\"\",\"\",0");
 8004430:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <SetupGPRS+0xf8>)
 8004432:	0018      	movs	r0, r3
 8004434:	f7fb fe68 	bl	8000108 <strlen>
 8004438:	0003      	movs	r3, r0
 800443a:	001a      	movs	r2, r3
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <SetupGPRS+0xf8>)
 800443e:	18d2      	adds	r2, r2, r3
 8004440:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <SetupGPRS+0x100>)
 8004442:	0010      	movs	r0, r2
 8004444:	0019      	movs	r1, r3
 8004446:	230a      	movs	r3, #10
 8004448:	001a      	movs	r2, r3
 800444a:	f00d ffa3 	bl	8012394 <memcpy>
		SendGSMCode(GSMDataC);
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <SetupGPRS+0xf8>)
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff f8fd 	bl	8003650 <SendGSMCode>
		gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QICSGP=1 APN Setup",gpsto_dev,"OK"));
 8004456:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <SetupGPRS+0x104>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4824      	ldr	r0, [pc, #144]	; (80044ec <SetupGPRS+0x108>)
 800445c:	4923      	ldr	r1, [pc, #140]	; (80044ec <SetupGPRS+0x108>)
 800445e:	4a24      	ldr	r2, [pc, #144]	; (80044f0 <SetupGPRS+0x10c>)
 8004460:	9202      	str	r2, [sp, #8]
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <SetupGPRS+0x110>)
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	0003      	movs	r3, r0
 800446a:	2200      	movs	r2, #0
 800446c:	2000      	movs	r0, #0
 800446e:	f7ff f9e7 	bl	8003840 <GetGSMReply>
 8004472:	0003      	movs	r3, r0
 8004474:	0018      	movs	r0, r3
 8004476:	f7fb fe47 	bl	8000108 <strlen>
 800447a:	0003      	movs	r3, r0
 800447c:	001a      	movs	r2, r3
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <SetupGPRS+0xf4>)
 8004480:	601a      	str	r2, [r3, #0]

		//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",10));
		if(gprsok>0){
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <SetupGPRS+0xf4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	dd1b      	ble.n	80044c2 <SetupGPRS+0xde>
			//gprsok=0;
			//HAL_Delay(4000);

					SendGSMCode(" AT+QIMODE=0");
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <SetupGPRS+0x114>)
 800448c:	0018      	movs	r0, r3
 800448e:	f7ff f8df 	bl	8003650 <SendGSMCode>
					gprsok=strlen(GetGSMReply(0,"",0,"","Error: QIMODE non transperent mode",gpsto_dev,"OK"));
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <SetupGPRS+0x104>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4815      	ldr	r0, [pc, #84]	; (80044ec <SetupGPRS+0x108>)
 8004498:	4914      	ldr	r1, [pc, #80]	; (80044ec <SetupGPRS+0x108>)
 800449a:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <SetupGPRS+0x10c>)
 800449c:	9202      	str	r2, [sp, #8]
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	4b16      	ldr	r3, [pc, #88]	; (80044fc <SetupGPRS+0x118>)
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	0003      	movs	r3, r0
 80044a6:	2200      	movs	r2, #0
 80044a8:	2000      	movs	r0, #0
 80044aa:	f7ff f9c9 	bl	8003840 <GetGSMReply>
 80044ae:	0003      	movs	r3, r0
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7fb fe29 	bl	8000108 <strlen>
 80044b6:	0003      	movs	r3, r0
 80044b8:	001a      	movs	r2, r3
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <SetupGPRS+0xf4>)
 80044bc:	601a      	str	r2, [r3, #0]
			//SendGSMCode(" AT+CGATT=0");
			//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGATT=1 GPRS Setup",100));

			//SendGSMCode(" AT+CGATT=1");
			//gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGATT=1 GPRS Setup",200));
			if(gprsok>0){
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <SetupGPRS+0xf4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
	while((ck>0) && (gprsok<1)){
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd03      	ble.n	80044d0 <SetupGPRS+0xec>
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <SetupGPRS+0xf4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	dd93      	ble.n	80043f8 <SetupGPRS+0x14>

				}
			}
		}
	}
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b005      	add	sp, #20
 80044d6:	bd90      	pop	{r4, r7, pc}
 80044d8:	2000133c 	.word	0x2000133c
 80044dc:	200012d8 	.word	0x200012d8
 80044e0:	0801626c 	.word	0x0801626c
 80044e4:	0801627c 	.word	0x0801627c
 80044e8:	20000014 	.word	0x20000014
 80044ec:	08015d94 	.word	0x08015d94
 80044f0:	08015c94 	.word	0x08015c94
 80044f4:	08016288 	.word	0x08016288
 80044f8:	080162a8 	.word	0x080162a8
 80044fc:	080162b8 	.word	0x080162b8

08004500 <ShiftGSMProfile>:




void ShiftGSMProfile(){
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af04      	add	r7, sp, #16
	//RestartGSM();
	int ook;
	Debug_Tx("______________Begin_____________________________");
 8004506:	4b8c      	ldr	r3, [pc, #560]	; (8004738 <ShiftGSMProfile+0x238>)
 8004508:	0018      	movs	r0, r3
 800450a:	f002 fe93 	bl	8007234 <Debug_Tx>
	//Debug_Tx(GSMSimOperator());



	//Debug_Tx("______________setup stk_____________________________");
	int ck=10;
 800450e:	230a      	movs	r3, #10
 8004510:	603b      	str	r3, [r7, #0]
	ook=0;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 8004516:	e0d5      	b.n	80046c4 <ShiftGSMProfile+0x1c4>
		HAL_Delay(3000);
 8004518:	4b88      	ldr	r3, [pc, #544]	; (800473c <ShiftGSMProfile+0x23c>)
 800451a:	0018      	movs	r0, r3
 800451c:	f003 fc3e 	bl	8007d9c <HAL_Delay>
		ck=ck-1;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+QSTK=1");
 8004526:	4b86      	ldr	r3, [pc, #536]	; (8004740 <ShiftGSMProfile+0x240>)
 8004528:	0018      	movs	r0, r3
 800452a:	f7ff f891 	bl	8003650 <SendGSMCode>
		ook=strlen(GetGSMReply(0,"",0,"","Error: AT+QSTK=1 Setup STK",gpsto_net,"OK"));
 800452e:	4b85      	ldr	r3, [pc, #532]	; (8004744 <ShiftGSMProfile+0x244>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4885      	ldr	r0, [pc, #532]	; (8004748 <ShiftGSMProfile+0x248>)
 8004534:	4984      	ldr	r1, [pc, #528]	; (8004748 <ShiftGSMProfile+0x248>)
 8004536:	4a85      	ldr	r2, [pc, #532]	; (800474c <ShiftGSMProfile+0x24c>)
 8004538:	9202      	str	r2, [sp, #8]
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	4b84      	ldr	r3, [pc, #528]	; (8004750 <ShiftGSMProfile+0x250>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	0003      	movs	r3, r0
 8004542:	2200      	movs	r2, #0
 8004544:	2000      	movs	r0, #0
 8004546:	f7ff f97b 	bl	8003840 <GetGSMReply>
 800454a:	0003      	movs	r3, r0
 800454c:	0018      	movs	r0, r3
 800454e:	f7fb fddb 	bl	8000108 <strlen>
 8004552:	0003      	movs	r3, r0
 8004554:	607b      	str	r3, [r7, #4]
		if(ook>0){
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	dc00      	bgt.n	800455e <ShiftGSMProfile+0x5e>
 800455c:	e0b2      	b.n	80046c4 <ShiftGSMProfile+0x1c4>
			Debug_Tx("______________Setup Menu_____________________________");
 800455e:	4b7d      	ldr	r3, [pc, #500]	; (8004754 <ShiftGSMProfile+0x254>)
 8004560:	0018      	movs	r0, r3
 8004562:	f002 fe67 	bl	8007234 <Debug_Tx>
			ook=0;
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 800456a:	4b7b      	ldr	r3, [pc, #492]	; (8004758 <ShiftGSMProfile+0x258>)
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff f86f 	bl	8003650 <SendGSMCode>
			ook=strlen(GetGSMReply(0,"",0,"","Error: AT+STKTR= Setup Menue",gpsto_net,"OK"));
 8004572:	4b74      	ldr	r3, [pc, #464]	; (8004744 <ShiftGSMProfile+0x244>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4874      	ldr	r0, [pc, #464]	; (8004748 <ShiftGSMProfile+0x248>)
 8004578:	4973      	ldr	r1, [pc, #460]	; (8004748 <ShiftGSMProfile+0x248>)
 800457a:	4a74      	ldr	r2, [pc, #464]	; (800474c <ShiftGSMProfile+0x24c>)
 800457c:	9202      	str	r2, [sp, #8]
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	4b76      	ldr	r3, [pc, #472]	; (800475c <ShiftGSMProfile+0x25c>)
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	0003      	movs	r3, r0
 8004586:	2200      	movs	r2, #0
 8004588:	2000      	movs	r0, #0
 800458a:	f7ff f959 	bl	8003840 <GetGSMReply>
 800458e:	0003      	movs	r3, r0
 8004590:	0018      	movs	r0, r3
 8004592:	f7fb fdb9 	bl	8000108 <strlen>
 8004596:	0003      	movs	r3, r0
 8004598:	607b      	str	r3, [r7, #4]
			HAL_Delay(3000);
 800459a:	4b68      	ldr	r3, [pc, #416]	; (800473c <ShiftGSMProfile+0x23c>)
 800459c:	0018      	movs	r0, r3
 800459e:	f003 fbfd 	bl	8007d9c <HAL_Delay>
			if(ook>0){
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	dc00      	bgt.n	80045aa <ShiftGSMProfile+0xaa>
 80045a8:	e08c      	b.n	80046c4 <ShiftGSMProfile+0x1c4>
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
 80045aa:	4b6d      	ldr	r3, [pc, #436]	; (8004760 <ShiftGSMProfile+0x260>)
 80045ac:	0018      	movs	r0, r3
 80045ae:	f002 fe41 	bl	8007234 <Debug_Tx>
				ook=0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 80045b6:	4b6b      	ldr	r3, [pc, #428]	; (8004764 <ShiftGSMProfile+0x264>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff f849 	bl	8003650 <SendGSMCode>
				ook=strlen(GetGSMReply(0,"",0,"","Error: AT+STKENV= Profile COnfig",gpsto_net,"OK"));
 80045be:	4b61      	ldr	r3, [pc, #388]	; (8004744 <ShiftGSMProfile+0x244>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4861      	ldr	r0, [pc, #388]	; (8004748 <ShiftGSMProfile+0x248>)
 80045c4:	4960      	ldr	r1, [pc, #384]	; (8004748 <ShiftGSMProfile+0x248>)
 80045c6:	4a61      	ldr	r2, [pc, #388]	; (800474c <ShiftGSMProfile+0x24c>)
 80045c8:	9202      	str	r2, [sp, #8]
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	4b66      	ldr	r3, [pc, #408]	; (8004768 <ShiftGSMProfile+0x268>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	0003      	movs	r3, r0
 80045d2:	2200      	movs	r2, #0
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7ff f933 	bl	8003840 <GetGSMReply>
 80045da:	0003      	movs	r3, r0
 80045dc:	0018      	movs	r0, r3
 80045de:	f7fb fd93 	bl	8000108 <strlen>
 80045e2:	0003      	movs	r3, r0
 80045e4:	607b      	str	r3, [r7, #4]
				if(ook>0){
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dd6b      	ble.n	80046c4 <ShiftGSMProfile+0x1c4>

					if(GSMProf==0){
 80045ec:	4b5f      	ldr	r3, [pc, #380]	; (800476c <ShiftGSMProfile+0x26c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d121      	bne.n	8004638 <ShiftGSMProfile+0x138>
						Debug_Tx("_____________BSNL profile Selection_____________________________");
 80045f4:	4b5e      	ldr	r3, [pc, #376]	; (8004770 <ShiftGSMProfile+0x270>)
 80045f6:	0018      	movs	r0, r3
 80045f8:	f002 fe1c 	bl	8007234 <Debug_Tx>
						ook=0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 8004600:	4b5c      	ldr	r3, [pc, #368]	; (8004774 <ShiftGSMProfile+0x274>)
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff f824 	bl	8003650 <SendGSMCode>
						ook=strlen(GetGSMReply(0,"",0,"","Error:  AT+STKTR=BSNL Config",gpsto_net,"OK"));
 8004608:	4b4e      	ldr	r3, [pc, #312]	; (8004744 <ShiftGSMProfile+0x244>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	484e      	ldr	r0, [pc, #312]	; (8004748 <ShiftGSMProfile+0x248>)
 800460e:	494e      	ldr	r1, [pc, #312]	; (8004748 <ShiftGSMProfile+0x248>)
 8004610:	4a4e      	ldr	r2, [pc, #312]	; (800474c <ShiftGSMProfile+0x24c>)
 8004612:	9202      	str	r2, [sp, #8]
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	4b58      	ldr	r3, [pc, #352]	; (8004778 <ShiftGSMProfile+0x278>)
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	0003      	movs	r3, r0
 800461c:	2200      	movs	r2, #0
 800461e:	2000      	movs	r0, #0
 8004620:	f7ff f90e 	bl	8003840 <GetGSMReply>
 8004624:	0003      	movs	r3, r0
 8004626:	0018      	movs	r0, r3
 8004628:	f7fb fd6e 	bl	8000108 <strlen>
 800462c:	0003      	movs	r3, r0
 800462e:	607b      	str	r3, [r7, #4]
						GSMProf=1;
 8004630:	4b4e      	ldr	r3, [pc, #312]	; (800476c <ShiftGSMProfile+0x26c>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e024      	b.n	8004682 <ShiftGSMProfile+0x182>
					}
					else if(GSMProf==1){
 8004638:	4b4c      	ldr	r3, [pc, #304]	; (800476c <ShiftGSMProfile+0x26c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d120      	bne.n	8004682 <ShiftGSMProfile+0x182>
						Debug_Tx("_____________Airtel profile Selection_____________________________");
 8004640:	4b4e      	ldr	r3, [pc, #312]	; (800477c <ShiftGSMProfile+0x27c>)
 8004642:	0018      	movs	r0, r3
 8004644:	f002 fdf6 	bl	8007234 <Debug_Tx>

						ook=0;
 8004648:	2300      	movs	r3, #0
 800464a:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 800464c:	4b4c      	ldr	r3, [pc, #304]	; (8004780 <ShiftGSMProfile+0x280>)
 800464e:	0018      	movs	r0, r3
 8004650:	f7fe fffe 	bl	8003650 <SendGSMCode>
						ook=strlen(GetGSMReply(0,"",0,"","Error:  AT+STKTR=AIRTEL Config",gpsto_net,"OK"));
 8004654:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <ShiftGSMProfile+0x244>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	483b      	ldr	r0, [pc, #236]	; (8004748 <ShiftGSMProfile+0x248>)
 800465a:	493b      	ldr	r1, [pc, #236]	; (8004748 <ShiftGSMProfile+0x248>)
 800465c:	4a3b      	ldr	r2, [pc, #236]	; (800474c <ShiftGSMProfile+0x24c>)
 800465e:	9202      	str	r2, [sp, #8]
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	4b48      	ldr	r3, [pc, #288]	; (8004784 <ShiftGSMProfile+0x284>)
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	0003      	movs	r3, r0
 8004668:	2200      	movs	r2, #0
 800466a:	2000      	movs	r0, #0
 800466c:	f7ff f8e8 	bl	8003840 <GetGSMReply>
 8004670:	0003      	movs	r3, r0
 8004672:	0018      	movs	r0, r3
 8004674:	f7fb fd48 	bl	8000108 <strlen>
 8004678:	0003      	movs	r3, r0
 800467a:	607b      	str	r3, [r7, #4]
						GSMProf=0;
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <ShiftGSMProfile+0x26c>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

					}
					if(ook>0){
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	dd1d      	ble.n	80046c4 <ShiftGSMProfile+0x1c4>
						Debug_Tx("_____________Refresh_____________________________");
 8004688:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <ShiftGSMProfile+0x288>)
 800468a:	0018      	movs	r0, r3
 800468c:	f002 fdd2 	bl	8007234 <Debug_Tx>
						ook=0;
 8004690:	2300      	movs	r3, #0
 8004692:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 8004694:	4b3d      	ldr	r3, [pc, #244]	; (800478c <ShiftGSMProfile+0x28c>)
 8004696:	0018      	movs	r0, r3
 8004698:	f7fe ffda 	bl	8003650 <SendGSMCode>
						ook=strlen(GetGSMReply(0,"",0,"","Error:  AT+STKTR Refresh",gpsto_net,"OK"));
 800469c:	4b29      	ldr	r3, [pc, #164]	; (8004744 <ShiftGSMProfile+0x244>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4829      	ldr	r0, [pc, #164]	; (8004748 <ShiftGSMProfile+0x248>)
 80046a2:	4929      	ldr	r1, [pc, #164]	; (8004748 <ShiftGSMProfile+0x248>)
 80046a4:	4a29      	ldr	r2, [pc, #164]	; (800474c <ShiftGSMProfile+0x24c>)
 80046a6:	9202      	str	r2, [sp, #8]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	4b39      	ldr	r3, [pc, #228]	; (8004790 <ShiftGSMProfile+0x290>)
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	0003      	movs	r3, r0
 80046b0:	2200      	movs	r2, #0
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7ff f8c4 	bl	8003840 <GetGSMReply>
 80046b8:	0003      	movs	r3, r0
 80046ba:	0018      	movs	r0, r3
 80046bc:	f7fb fd24 	bl	8000108 <strlen>
 80046c0:	0003      	movs	r3, r0
 80046c2:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dd03      	ble.n	80046d2 <ShiftGSMProfile+0x1d2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	dc00      	bgt.n	80046d2 <ShiftGSMProfile+0x1d2>
 80046d0:	e722      	b.n	8004518 <ShiftGSMProfile+0x18>





	Debug_Tx("_____________Restart_____________________________");
 80046d2:	4b30      	ldr	r3, [pc, #192]	; (8004794 <ShiftGSMProfile+0x294>)
 80046d4:	0018      	movs	r0, r3
 80046d6:	f002 fdad 	bl	8007234 <Debug_Tx>


	ck=2;
 80046da:	2302      	movs	r3, #2
 80046dc:	603b      	str	r3, [r7, #0]
	ook=0;
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 80046e2:	e01a      	b.n	800471a <ShiftGSMProfile+0x21a>
		ck=ck-1;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+QPOWD=1");
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <ShiftGSMProfile+0x298>)
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fe ffaf 	bl	8003650 <SendGSMCode>
		ook=strlen(GetGSMReply(15,"",0,"","Error:  AT+QPOWD=1 Restart",gpsto_dev,"NORMAL POWER DOWN"));
 80046f2:	4b2a      	ldr	r3, [pc, #168]	; (800479c <ShiftGSMProfile+0x29c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4814      	ldr	r0, [pc, #80]	; (8004748 <ShiftGSMProfile+0x248>)
 80046f8:	4913      	ldr	r1, [pc, #76]	; (8004748 <ShiftGSMProfile+0x248>)
 80046fa:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <ShiftGSMProfile+0x2a0>)
 80046fc:	9202      	str	r2, [sp, #8]
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <ShiftGSMProfile+0x2a4>)
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	0003      	movs	r3, r0
 8004706:	2200      	movs	r2, #0
 8004708:	200f      	movs	r0, #15
 800470a:	f7ff f899 	bl	8003840 <GetGSMReply>
 800470e:	0003      	movs	r3, r0
 8004710:	0018      	movs	r0, r3
 8004712:	f7fb fcf9 	bl	8000108 <strlen>
 8004716:	0003      	movs	r3, r0
 8004718:	607b      	str	r3, [r7, #4]
	while((ck>0) && (ook<1)){
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	dd02      	ble.n	8004726 <ShiftGSMProfile+0x226>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	ddde      	ble.n	80046e4 <ShiftGSMProfile+0x1e4>
	}
	HAL_Delay(6000);
 8004726:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <ShiftGSMProfile+0x2a8>)
 8004728:	0018      	movs	r0, r3
 800472a:	f003 fb37 	bl	8007d9c <HAL_Delay>
	//HAL_Delay(5000);




}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	080162dc 	.word	0x080162dc
 800473c:	00000bb8 	.word	0x00000bb8
 8004740:	08016310 	.word	0x08016310
 8004744:	20000010 	.word	0x20000010
 8004748:	08015d94 	.word	0x08015d94
 800474c:	08015c94 	.word	0x08015c94
 8004750:	0801631c 	.word	0x0801631c
 8004754:	08016338 	.word	0x08016338
 8004758:	08016370 	.word	0x08016370
 800475c:	08016398 	.word	0x08016398
 8004760:	080163b8 	.word	0x080163b8
 8004764:	080163f8 	.word	0x080163f8
 8004768:	08016418 	.word	0x08016418
 800476c:	20000018 	.word	0x20000018
 8004770:	0801643c 	.word	0x0801643c
 8004774:	08016480 	.word	0x08016480
 8004778:	080164ac 	.word	0x080164ac
 800477c:	080164cc 	.word	0x080164cc
 8004780:	08016510 	.word	0x08016510
 8004784:	0801653c 	.word	0x0801653c
 8004788:	0801655c 	.word	0x0801655c
 800478c:	08016590 	.word	0x08016590
 8004790:	080165b8 	.word	0x080165b8
 8004794:	080165d4 	.word	0x080165d4
 8004798:	08016608 	.word	0x08016608
 800479c:	20000014 	.word	0x20000014
 80047a0:	08016614 	.word	0x08016614
 80047a4:	08016628 	.word	0x08016628
 80047a8:	00001770 	.word	0x00001770

080047ac <InitGSM>:



void InitGSM(){
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af04      	add	r7, sp, #16
	//RestartGSM();
	HAL_Delay(5000);
 80047b2:	4bd0      	ldr	r3, [pc, #832]	; (8004af4 <InitGSM+0x348>)
 80047b4:	0018      	movs	r0, r3
 80047b6:	f003 faf1 	bl	8007d9c <HAL_Delay>

	int i=0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
	int ck=10;
 80047be:	230a      	movs	r3, #10
 80047c0:	603b      	str	r3, [r7, #0]
		//SendGSMCode(" AT+QPOWD=1");
		//i=strlen(GetGSMReply(0,"NORMAL POWER DOWN",0,"","Error:  AT+QPOWD=1 Restart",20));

	//HAL_Delay(10000);
	ck=2;
 80047c2:	2302      	movs	r3, #2
 80047c4:	603b      	str	r3, [r7, #0]
	i=0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 80047ca:	e01a      	b.n	8004802 <InitGSM+0x56>
		ck=ck-1;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	603b      	str	r3, [r7, #0]
		SendGSMCode(" ATE0");
 80047d2:	4bc9      	ldr	r3, [pc, #804]	; (8004af8 <InitGSM+0x34c>)
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7fe ff3b 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(15,"",0,"","Error: ATE no Resp",gpsto_dev,"OK"));
 80047da:	4bc8      	ldr	r3, [pc, #800]	; (8004afc <InitGSM+0x350>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	48c8      	ldr	r0, [pc, #800]	; (8004b00 <InitGSM+0x354>)
 80047e0:	49c7      	ldr	r1, [pc, #796]	; (8004b00 <InitGSM+0x354>)
 80047e2:	4ac8      	ldr	r2, [pc, #800]	; (8004b04 <InitGSM+0x358>)
 80047e4:	9202      	str	r2, [sp, #8]
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	4bc7      	ldr	r3, [pc, #796]	; (8004b08 <InitGSM+0x35c>)
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	0003      	movs	r3, r0
 80047ee:	2200      	movs	r2, #0
 80047f0:	200f      	movs	r0, #15
 80047f2:	f7ff f825 	bl	8003840 <GetGSMReply>
 80047f6:	0003      	movs	r3, r0
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7fb fc85 	bl	8000108 <strlen>
 80047fe:	0003      	movs	r3, r0
 8004800:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	dd02      	ble.n	800480e <InitGSM+0x62>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	ddde      	ble.n	80047cc <InitGSM+0x20>
	}
	ck=2;
 800480e:	2302      	movs	r3, #2
 8004810:	603b      	str	r3, [r7, #0]
	i=0;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004816:	e01a      	b.n	800484e <InitGSM+0xa2>
		ck=ck-1;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	3b01      	subs	r3, #1
 800481c:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT");
 800481e:	4bbb      	ldr	r3, [pc, #748]	; (8004b0c <InitGSM+0x360>)
 8004820:	0018      	movs	r0, r3
 8004822:	f7fe ff15 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(15,"",0,"","Error: AT no Resp",gpsto_dev,"OK"));
 8004826:	4bb5      	ldr	r3, [pc, #724]	; (8004afc <InitGSM+0x350>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	48b5      	ldr	r0, [pc, #724]	; (8004b00 <InitGSM+0x354>)
 800482c:	49b4      	ldr	r1, [pc, #720]	; (8004b00 <InitGSM+0x354>)
 800482e:	4ab5      	ldr	r2, [pc, #724]	; (8004b04 <InitGSM+0x358>)
 8004830:	9202      	str	r2, [sp, #8]
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	4bb6      	ldr	r3, [pc, #728]	; (8004b10 <InitGSM+0x364>)
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	0003      	movs	r3, r0
 800483a:	2200      	movs	r2, #0
 800483c:	200f      	movs	r0, #15
 800483e:	f7fe ffff 	bl	8003840 <GetGSMReply>
 8004842:	0003      	movs	r3, r0
 8004844:	0018      	movs	r0, r3
 8004846:	f7fb fc5f 	bl	8000108 <strlen>
 800484a:	0003      	movs	r3, r0
 800484c:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	dd02      	ble.n	800485a <InitGSM+0xae>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	ddde      	ble.n	8004818 <InitGSM+0x6c>
	}

	HAL_Delay(2000);
 800485a:	23fa      	movs	r3, #250	; 0xfa
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	0018      	movs	r0, r3
 8004860:	f003 fa9c 	bl	8007d9c <HAL_Delay>
	ShiftGSMProfile();
 8004864:	f7ff fe4c 	bl	8004500 <ShiftGSMProfile>


	//HAL_Delay(5000);
	ck=2;
 8004868:	2302      	movs	r3, #2
 800486a:	603b      	str	r3, [r7, #0]
	i=0;
 800486c:	2300      	movs	r3, #0
 800486e:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004870:	e01a      	b.n	80048a8 <InitGSM+0xfc>
		ck=ck-1;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	3b01      	subs	r3, #1
 8004876:	603b      	str	r3, [r7, #0]
		SendGSMCode(" ATE0");
 8004878:	4b9f      	ldr	r3, [pc, #636]	; (8004af8 <InitGSM+0x34c>)
 800487a:	0018      	movs	r0, r3
 800487c:	f7fe fee8 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(10,"",0,"","Error: ATe no Resp",gpsto_dev,"OK"));
 8004880:	4b9e      	ldr	r3, [pc, #632]	; (8004afc <InitGSM+0x350>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	489e      	ldr	r0, [pc, #632]	; (8004b00 <InitGSM+0x354>)
 8004886:	499e      	ldr	r1, [pc, #632]	; (8004b00 <InitGSM+0x354>)
 8004888:	4a9e      	ldr	r2, [pc, #632]	; (8004b04 <InitGSM+0x358>)
 800488a:	9202      	str	r2, [sp, #8]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	4ba1      	ldr	r3, [pc, #644]	; (8004b14 <InitGSM+0x368>)
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	0003      	movs	r3, r0
 8004894:	2200      	movs	r2, #0
 8004896:	200a      	movs	r0, #10
 8004898:	f7fe ffd2 	bl	8003840 <GetGSMReply>
 800489c:	0003      	movs	r3, r0
 800489e:	0018      	movs	r0, r3
 80048a0:	f7fb fc32 	bl	8000108 <strlen>
 80048a4:	0003      	movs	r3, r0
 80048a6:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dd02      	ble.n	80048b4 <InitGSM+0x108>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	ddde      	ble.n	8004872 <InitGSM+0xc6>
	}
	ck=2;
 80048b4:	2302      	movs	r3, #2
 80048b6:	603b      	str	r3, [r7, #0]
	i=0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 80048bc:	e01a      	b.n	80048f4 <InitGSM+0x148>
		ck=ck-1;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT");
 80048c4:	4b91      	ldr	r3, [pc, #580]	; (8004b0c <InitGSM+0x360>)
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fe fec2 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(10,"",0,"","Error: AT no Resp",gpsto_dev,"OK"));
 80048cc:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <InitGSM+0x350>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	488b      	ldr	r0, [pc, #556]	; (8004b00 <InitGSM+0x354>)
 80048d2:	498b      	ldr	r1, [pc, #556]	; (8004b00 <InitGSM+0x354>)
 80048d4:	4a8b      	ldr	r2, [pc, #556]	; (8004b04 <InitGSM+0x358>)
 80048d6:	9202      	str	r2, [sp, #8]
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <InitGSM+0x364>)
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	0003      	movs	r3, r0
 80048e0:	2200      	movs	r2, #0
 80048e2:	200a      	movs	r0, #10
 80048e4:	f7fe ffac 	bl	8003840 <GetGSMReply>
 80048e8:	0003      	movs	r3, r0
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7fb fc0c 	bl	8000108 <strlen>
 80048f0:	0003      	movs	r3, r0
 80048f2:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dd02      	ble.n	8004900 <InitGSM+0x154>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	ddde      	ble.n	80048be <InitGSM+0x112>
	//SendGSMCode(" AT+COLP=1"); //Connected Line Identification Presentation
			//i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+COLP=1 Connected  Line Identification ",10));
	//SendGSMCode(" AT+CSCA=\"+919810051914\",145");	//+CSCA: "+919810051914",145 //+919818023015


	ck=10;
 8004900:	230a      	movs	r3, #10
 8004902:	603b      	str	r3, [r7, #0]
	i=0;
 8004904:	2300      	movs	r3, #0
 8004906:	607b      	str	r3, [r7, #4]
	while((ck>0) && (i<1)){
 8004908:	e0e8      	b.n	8004adc <InitGSM+0x330>
		ck=ck-1;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 8004910:	4b81      	ldr	r3, [pc, #516]	; (8004b18 <InitGSM+0x36c>)
 8004912:	0018      	movs	r0, r3
 8004914:	f7fe fe9c 	bl	8003650 <SendGSMCode>
		i=strlen(GetGSMReply(5,"",0,"","Error: AT+IFC=1,1 Software Flow COntrol",gpsto_dev,"OK"));
 8004918:	4b78      	ldr	r3, [pc, #480]	; (8004afc <InitGSM+0x350>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4878      	ldr	r0, [pc, #480]	; (8004b00 <InitGSM+0x354>)
 800491e:	4978      	ldr	r1, [pc, #480]	; (8004b00 <InitGSM+0x354>)
 8004920:	4a78      	ldr	r2, [pc, #480]	; (8004b04 <InitGSM+0x358>)
 8004922:	9202      	str	r2, [sp, #8]
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	4b7d      	ldr	r3, [pc, #500]	; (8004b1c <InitGSM+0x370>)
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	0003      	movs	r3, r0
 800492c:	2200      	movs	r2, #0
 800492e:	2005      	movs	r0, #5
 8004930:	f7fe ff86 	bl	8003840 <GetGSMReply>
 8004934:	0003      	movs	r3, r0
 8004936:	0018      	movs	r0, r3
 8004938:	f7fb fbe6 	bl	8000108 <strlen>
 800493c:	0003      	movs	r3, r0
 800493e:	607b      	str	r3, [r7, #4]
		//i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
 8004940:	23fa      	movs	r3, #250	; 0xfa
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	0018      	movs	r0, r3
 8004946:	f003 fa29 	bl	8007d9c <HAL_Delay>
		if(i>0){
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	dc00      	bgt.n	8004952 <InitGSM+0x1a6>
 8004950:	e0c4      	b.n	8004adc <InitGSM+0x330>
			SendGSMCode(" AT+CFUN=1"); //Select sms format
 8004952:	4b73      	ldr	r3, [pc, #460]	; (8004b20 <InitGSM+0x374>)
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe fe7b 	bl	8003650 <SendGSMCode>
			i=strlen(GetGSMReply(0,"",0,"","Error: AT+CFUN=1 set gsm full function",gpsto_dev,"OK"));
 800495a:	4b68      	ldr	r3, [pc, #416]	; (8004afc <InitGSM+0x350>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4868      	ldr	r0, [pc, #416]	; (8004b00 <InitGSM+0x354>)
 8004960:	4967      	ldr	r1, [pc, #412]	; (8004b00 <InitGSM+0x354>)
 8004962:	4a68      	ldr	r2, [pc, #416]	; (8004b04 <InitGSM+0x358>)
 8004964:	9202      	str	r2, [sp, #8]
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	4b6e      	ldr	r3, [pc, #440]	; (8004b24 <InitGSM+0x378>)
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	0003      	movs	r3, r0
 800496e:	2200      	movs	r2, #0
 8004970:	2000      	movs	r0, #0
 8004972:	f7fe ff65 	bl	8003840 <GetGSMReply>
 8004976:	0003      	movs	r3, r0
 8004978:	0018      	movs	r0, r3
 800497a:	f7fb fbc5 	bl	8000108 <strlen>
 800497e:	0003      	movs	r3, r0
 8004980:	607b      	str	r3, [r7, #4]

			if(i>0){
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	dc00      	bgt.n	800498a <InitGSM+0x1de>
 8004988:	e0a8      	b.n	8004adc <InitGSM+0x330>
				SendGSMCode(" AT+CMGF=1"); //Select sms format
 800498a:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <InitGSM+0x37c>)
 800498c:	0018      	movs	r0, r3
 800498e:	f7fe fe5f 	bl	8003650 <SendGSMCode>
				i=strlen(GetGSMReply(0,"",0,"","Error: AT+CMGF=1 SMS Mode",gpsto_dev,"OK"));
 8004992:	4b5a      	ldr	r3, [pc, #360]	; (8004afc <InitGSM+0x350>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	485a      	ldr	r0, [pc, #360]	; (8004b00 <InitGSM+0x354>)
 8004998:	4959      	ldr	r1, [pc, #356]	; (8004b00 <InitGSM+0x354>)
 800499a:	4a5a      	ldr	r2, [pc, #360]	; (8004b04 <InitGSM+0x358>)
 800499c:	9202      	str	r2, [sp, #8]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	4b62      	ldr	r3, [pc, #392]	; (8004b2c <InitGSM+0x380>)
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	0003      	movs	r3, r0
 80049a6:	2200      	movs	r2, #0
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7fe ff49 	bl	8003840 <GetGSMReply>
 80049ae:	0003      	movs	r3, r0
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fb fba9 	bl	8000108 <strlen>
 80049b6:	0003      	movs	r3, r0
 80049b8:	607b      	str	r3, [r7, #4]

			if(i>0){
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dc00      	bgt.n	80049c2 <InitGSM+0x216>
 80049c0:	e08c      	b.n	8004adc <InitGSM+0x330>
				SendGSMCode(" AT+CLIP=1"); //Calling Line Identification Presantation
 80049c2:	4b5b      	ldr	r3, [pc, #364]	; (8004b30 <InitGSM+0x384>)
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fe fe43 	bl	8003650 <SendGSMCode>
				i=strlen(GetGSMReply(0,"",0,"","Error: AT+CLIP=1 Calling Line Identification",gpsto_dev,"OK"));
 80049ca:	4b4c      	ldr	r3, [pc, #304]	; (8004afc <InitGSM+0x350>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	484c      	ldr	r0, [pc, #304]	; (8004b00 <InitGSM+0x354>)
 80049d0:	494b      	ldr	r1, [pc, #300]	; (8004b00 <InitGSM+0x354>)
 80049d2:	4a4c      	ldr	r2, [pc, #304]	; (8004b04 <InitGSM+0x358>)
 80049d4:	9202      	str	r2, [sp, #8]
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <InitGSM+0x388>)
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	0003      	movs	r3, r0
 80049de:	2200      	movs	r2, #0
 80049e0:	2000      	movs	r0, #0
 80049e2:	f7fe ff2d 	bl	8003840 <GetGSMReply>
 80049e6:	0003      	movs	r3, r0
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fb fb8d 	bl	8000108 <strlen>
 80049ee:	0003      	movs	r3, r0
 80049f0:	607b      	str	r3, [r7, #4]
				if(i>0){
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	dd71      	ble.n	8004adc <InitGSM+0x330>
					SendGSMCode(" AT+CSCS=\"GSM\""); //Select TE Character Set
 80049f8:	4b4f      	ldr	r3, [pc, #316]	; (8004b38 <InitGSM+0x38c>)
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7fe fe28 	bl	8003650 <SendGSMCode>
					i=strlen(GetGSMReply(0,"",0,"","Error: AT+CSCS=\"GSM\"  SMS TE charecter set ",gpsto_dev,"OK"));
 8004a00:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <InitGSM+0x350>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	483e      	ldr	r0, [pc, #248]	; (8004b00 <InitGSM+0x354>)
 8004a06:	493e      	ldr	r1, [pc, #248]	; (8004b00 <InitGSM+0x354>)
 8004a08:	4a3e      	ldr	r2, [pc, #248]	; (8004b04 <InitGSM+0x358>)
 8004a0a:	9202      	str	r2, [sp, #8]
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <InitGSM+0x390>)
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	0003      	movs	r3, r0
 8004a14:	2200      	movs	r2, #0
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7fe ff12 	bl	8003840 <GetGSMReply>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7fb fb72 	bl	8000108 <strlen>
 8004a24:	0003      	movs	r3, r0
 8004a26:	607b      	str	r3, [r7, #4]
					if(i>0){
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dd56      	ble.n	8004adc <InitGSM+0x330>
						HAL_Delay(3000);
 8004a2e:	4b44      	ldr	r3, [pc, #272]	; (8004b40 <InitGSM+0x394>)
 8004a30:	0018      	movs	r0, r3
 8004a32:	f003 f9b3 	bl	8007d9c <HAL_Delay>
						//SendGSMCode(" AT+CSMP=17,167,0,16");
						//i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
						if(i>0){
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dd4f      	ble.n	8004adc <InitGSM+0x330>
							SendGSMCode(" AT+QENG=1,4");
 8004a3c:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <InitGSM+0x398>)
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7fe fe06 	bl	8003650 <SendGSMCode>
							i=strlen(GetGSMReply(0,"",0,"","Error: QENG=1,4 set eng mode for info ",gpsto_dev,"OK"));
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <InitGSM+0x350>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	482d      	ldr	r0, [pc, #180]	; (8004b00 <InitGSM+0x354>)
 8004a4a:	492d      	ldr	r1, [pc, #180]	; (8004b00 <InitGSM+0x354>)
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <InitGSM+0x358>)
 8004a4e:	9202      	str	r2, [sp, #8]
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	4b3d      	ldr	r3, [pc, #244]	; (8004b48 <InitGSM+0x39c>)
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	0003      	movs	r3, r0
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f7fe fef0 	bl	8003840 <GetGSMReply>
 8004a60:	0003      	movs	r3, r0
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fb fb50 	bl	8000108 <strlen>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	607b      	str	r3, [r7, #4]

							if(i>0){
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	dd34      	ble.n	8004adc <InitGSM+0x330>

								HAL_Delay(1000);
 8004a72:	23fa      	movs	r3, #250	; 0xfa
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f003 f990 	bl	8007d9c <HAL_Delay>
									if(GSMProf==0){
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <InitGSM+0x3a0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <InitGSM+0x2ea>
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <InitGSM+0x3a4>)
 8004a86:	0018      	movs	r0, r3
 8004a88:	f002 fbd4 	bl	8007234 <Debug_Tx>
										SetupGPRS("taisysnet");//taisysnet");
 8004a8c:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <InitGSM+0x3a8>)
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff fca8 	bl	80043e4 <SetupGPRS>
 8004a94:	e00b      	b.n	8004aae <InitGSM+0x302>

									}else if(GSMProf==1){
 8004a96:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <InitGSM+0x3a0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <InitGSM+0x302>
										Debug_Tx("_____________BSNL APN SET_____________________________");
 8004a9e:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <InitGSM+0x3ac>)
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f002 fbc7 	bl	8007234 <Debug_Tx>
										  SetupGPRS("bsnlnet");//taisysnet");
 8004aa6:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <InitGSM+0x3b0>)
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7ff fc9b 	bl	80043e4 <SetupGPRS>
									}
									HAL_Delay(1000);
 8004aae:	23fa      	movs	r3, #250	; 0xfa
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f003 f972 	bl	8007d9c <HAL_Delay>


									Debug_Tx("_____________Operator again_____________________________");
 8004ab8:	4b29      	ldr	r3, [pc, #164]	; (8004b60 <InitGSM+0x3b4>)
 8004aba:	0018      	movs	r0, r3
 8004abc:	f002 fbba 	bl	8007234 <Debug_Tx>
									//Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8004ac0:	23fa      	movs	r3, #250	; 0xfa
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f003 f969 	bl	8007d9c <HAL_Delay>
									SetTCPMux();
 8004aca:	f7ff fc2f 	bl	800432c <SetTCPMux>
									HAL_Delay(1000);
 8004ace:	23fa      	movs	r3, #250	; 0xfa
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f003 f962 	bl	8007d9c <HAL_Delay>
									SetTCPMux();
 8004ad8:	f7ff fc28 	bl	800432c <SetTCPMux>
	while((ck>0) && (i<1)){
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dd03      	ble.n	8004aea <InitGSM+0x33e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	dc00      	bgt.n	8004aea <InitGSM+0x33e>
 8004ae8:	e70f      	b.n	800490a <InitGSM+0x15e>
				}
			}
		}
	}
	}
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b002      	add	sp, #8
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	00001388 	.word	0x00001388
 8004af8:	08016644 	.word	0x08016644
 8004afc:	20000014 	.word	0x20000014
 8004b00:	08015d94 	.word	0x08015d94
 8004b04:	08015c94 	.word	0x08015c94
 8004b08:	0801664c 	.word	0x0801664c
 8004b0c:	08015bf8 	.word	0x08015bf8
 8004b10:	08016660 	.word	0x08016660
 8004b14:	08016674 	.word	0x08016674
 8004b18:	08016688 	.word	0x08016688
 8004b1c:	08016694 	.word	0x08016694
 8004b20:	080166bc 	.word	0x080166bc
 8004b24:	080166c8 	.word	0x080166c8
 8004b28:	080166f0 	.word	0x080166f0
 8004b2c:	080166fc 	.word	0x080166fc
 8004b30:	08016718 	.word	0x08016718
 8004b34:	08016724 	.word	0x08016724
 8004b38:	08016754 	.word	0x08016754
 8004b3c:	08016764 	.word	0x08016764
 8004b40:	00000bb8 	.word	0x00000bb8
 8004b44:	08016790 	.word	0x08016790
 8004b48:	080167a0 	.word	0x080167a0
 8004b4c:	20000018 	.word	0x20000018
 8004b50:	080167c8 	.word	0x080167c8
 8004b54:	08016804 	.word	0x08016804
 8004b58:	08016810 	.word	0x08016810
 8004b5c:	08016848 	.word	0x08016848
 8004b60:	08016850 	.word	0x08016850

08004b64 <SPI_flash_sent_byte>:
uint8_t buffer_SPI_Recive[30];
//The data you want to receive

//This is the definition of an array

void SPI_flash_sent_byte(uint8_t data){
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	1dfb      	adds	r3, r7, #7
 8004b6e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004b70:	23fa      	movs	r3, #250	; 0xfa
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	1df9      	adds	r1, r7, #7
 8004b76:	4804      	ldr	r0, [pc, #16]	; (8004b88 <SPI_flash_sent_byte+0x24>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f006 fb2f 	bl	800b1dc <HAL_SPI_Transmit>
}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b002      	add	sp, #8
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	20000580 	.word	0x20000580

08004b8c <SPI_flash_Write_Enable>:

void SPI_flash_Write_Enable() {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
    SPI_flash_cs_low;
 8004b90:	23a0      	movs	r3, #160	; 0xa0
 8004b92:	05db      	lsls	r3, r3, #23
 8004b94:	2200      	movs	r2, #0
 8004b96:	2110      	movs	r1, #16
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f004 fd5e 	bl	800965a <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004b9e:	2006      	movs	r0, #6
 8004ba0:	f7ff ffe0 	bl	8004b64 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8004ba4:	23a0      	movs	r3, #160	; 0xa0
 8004ba6:	05db      	lsls	r3, r3, #23
 8004ba8:	2201      	movs	r2, #1
 8004baa:	2110      	movs	r1, #16
 8004bac:	0018      	movs	r0, r3
 8004bae:	f004 fd54 	bl	800965a <HAL_GPIO_WritePin>
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <SPI_flash_Write_Disable>:

void SPI_flash_Write_Disable() {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
    SPI_flash_cs_low;
 8004bbc:	23a0      	movs	r3, #160	; 0xa0
 8004bbe:	05db      	lsls	r3, r3, #23
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2110      	movs	r1, #16
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f004 fd48 	bl	800965a <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004bca:	2004      	movs	r0, #4
 8004bcc:	f7ff ffca 	bl	8004b64 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8004bd0:	23a0      	movs	r3, #160	; 0xa0
 8004bd2:	05db      	lsls	r3, r3, #23
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f004 fd3e 	bl	800965a <HAL_GPIO_WritePin>
}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <SPI_flash_sent_address>:

void SPI_flash_sent_address(uint8_t* Sent){
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004bec:	23fa      	movs	r3, #250	; 0xfa
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4804      	ldr	r0, [pc, #16]	; (8004c04 <SPI_flash_sent_address+0x20>)
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	f006 faf1 	bl	800b1dc <HAL_SPI_Transmit>
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b002      	add	sp, #8
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	20000580 	.word	0x20000580

08004c08 <SPI_flash_TransmitReceive>:



void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	000a      	movs	r2, r1
 8004c12:	1cbb      	adds	r3, r7, #2
 8004c14:	801a      	strh	r2, [r3, #0]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004c16:	1cbb      	adds	r3, r7, #2
 8004c18:	881c      	ldrh	r4, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4805      	ldr	r0, [pc, #20]	; (8004c34 <SPI_flash_TransmitReceive+0x2c>)
 8004c20:	23fa      	movs	r3, #250	; 0xfa
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	0023      	movs	r3, r4
 8004c28:	f006 fc30 	bl	800b48c <HAL_SPI_TransmitReceive>
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b003      	add	sp, #12
 8004c32:	bd90      	pop	{r4, r7, pc}
 8004c34:	20000580 	.word	0x20000580

08004c38 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    SPI_flash_Write_Enable();
 8004c40:	f7ff ffa4 	bl	8004b8c <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8004c44:	23a0      	movs	r3, #160	; 0xa0
 8004c46:	05db      	lsls	r3, r3, #23
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2110      	movs	r1, #16
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f004 fd04 	bl	800965a <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8004c52:	2020      	movs	r0, #32
 8004c54:	f7ff ff86 	bl	8004b64 <SPI_flash_sent_byte>
    SPI_flash_sent_address (address);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7ff ffc2 	bl	8004be4 <SPI_flash_sent_address>
    SPI_flash_cs_high;
 8004c60:	23a0      	movs	r3, #160	; 0xa0
 8004c62:	05db      	lsls	r3, r3, #23
 8004c64:	2201      	movs	r2, #1
 8004c66:	2110      	movs	r1, #16
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f004 fcf6 	bl	800965a <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8004c6e:	f7ff ffa3 	bl	8004bb8 <SPI_flash_Write_Disable>
    //HAL_Delay(100);
	Debug_Rx();
 8004c72:	f002 fb07 	bl	8007284 <Debug_Rx>
}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b002      	add	sp, #8
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	1dbb      	adds	r3, r7, #6
 8004c8a:	801a      	strh	r2, [r3, #0]
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
 8004c8c:	f7ff ff7e 	bl	8004b8c <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8004c90:	23a0      	movs	r3, #160	; 0xa0
 8004c92:	05db      	lsls	r3, r3, #23
 8004c94:	2200      	movs	r2, #0
 8004c96:	2110      	movs	r1, #16
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f004 fcde 	bl	800965a <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8004c9e:	2002      	movs	r0, #2
 8004ca0:	f7ff ff60 	bl	8004b64 <SPI_flash_sent_byte>
    SPI_flash_sent_address (data_address);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7ff ff9c 	bl	8004be4 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8004cac:	1dbb      	adds	r3, r7, #6
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	0011      	movs	r1, r2
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7ff ffa7 	bl	8004c08 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8004cba:	23a0      	movs	r3, #160	; 0xa0
 8004cbc:	05db      	lsls	r3, r3, #23
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f004 fcc9 	bl	800965a <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8004cc8:	f7ff ff76 	bl	8004bb8 <SPI_flash_Write_Disable>

	Debug_Rx();
 8004ccc:	f002 fada 	bl	8007284 <Debug_Rx>
    //HAL_Delay(1);
}
 8004cd0:	46c0      	nop			; (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b004      	add	sp, #16
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	1dbb      	adds	r3, r7, #6
 8004ce4:	801a      	strh	r2, [r3, #0]
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 8004ce6:	23a0      	movs	r3, #160	; 0xa0
 8004ce8:	05db      	lsls	r3, r3, #23
 8004cea:	2200      	movs	r2, #0
 8004cec:	2110      	movs	r1, #16
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f004 fcb3 	bl	800965a <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8004cf4:	2003      	movs	r0, #3
 8004cf6:	f7ff ff35 	bl	8004b64 <SPI_flash_sent_byte>
    SPI_flash_sent_address(data_address);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7ff ff71 	bl	8004be4 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8004d02:	1dbb      	adds	r3, r7, #6
 8004d04:	881a      	ldrh	r2, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0011      	movs	r1, r2
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7ff ff7c 	bl	8004c08 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8004d10:	23a0      	movs	r3, #160	; 0xa0
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	2201      	movs	r2, #1
 8004d16:	2110      	movs	r1, #16
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f004 fc9e 	bl	800965a <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b004      	add	sp, #16
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <incrimentAddress2>:


	return add;
}

void incrimentAddress2(int inc){
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <incrimentAddress2+0x74>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <incrimentAddress2+0x74>)
 8004d38:	7852      	ldrb	r2, [r2, #1]
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <incrimentAddress2+0x74>)
 8004d40:	7892      	ldrb	r2, [r2, #2]
 8004d42:	189b      	adds	r3, r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	18d3      	adds	r3, r2, r3
 8004d48:	60fb      	str	r3, [r7, #12]
	WrtAdd[0]=addi/(256*256);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da02      	bge.n	8004d56 <incrimentAddress2+0x2e>
 8004d50:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <incrimentAddress2+0x78>)
 8004d52:	4694      	mov	ip, r2
 8004d54:	4463      	add	r3, ip
 8004d56:	141b      	asrs	r3, r3, #16
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <incrimentAddress2+0x74>)
 8004d5c:	701a      	strb	r2, [r3, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a10      	ldr	r2, [pc, #64]	; (8004da4 <incrimentAddress2+0x7c>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	d503      	bpl.n	8004d6e <incrimentAddress2+0x46>
 8004d66:	3b01      	subs	r3, #1
 8004d68:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <incrimentAddress2+0x80>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da00      	bge.n	8004d74 <incrimentAddress2+0x4c>
 8004d72:	33ff      	adds	r3, #255	; 0xff
 8004d74:	121b      	asrs	r3, r3, #8
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <incrimentAddress2+0x74>)
 8004d7a:	705a      	strb	r2, [r3, #1]
	WrtAdd[2]=(addi)%256;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <incrimentAddress2+0x84>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	d503      	bpl.n	8004d8c <incrimentAddress2+0x64>
 8004d84:	3b01      	subs	r3, #1
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <incrimentAddress2+0x88>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <incrimentAddress2+0x74>)
 8004d90:	709a      	strb	r2, [r3, #2]


}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b004      	add	sp, #16
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	20000030 	.word	0x20000030
 8004da0:	0000ffff 	.word	0x0000ffff
 8004da4:	8000ffff 	.word	0x8000ffff
 8004da8:	ffff0000 	.word	0xffff0000
 8004dac:	800000ff 	.word	0x800000ff
 8004db0:	ffffff00 	.word	0xffffff00

08004db4 <WriteQdata>:
	memset(str,0,20);
	sprintf(str, "MemoryAdd:%X-%X-%X",WrtAdd[0],WrtAdd[1],WrtAdd[2]);
	Debug_Tx(str);
}

void WriteQdata(uint8_t* data, uint16_t len) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	000a      	movs	r2, r1
 8004dbe:	1cbb      	adds	r3, r7, #2
 8004dc0:	801a      	strh	r2, [r3, #0]
	//Writes data at the end of queue
	if (len<255){
 8004dc2:	1cbb      	adds	r3, r7, #2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	2bfe      	cmp	r3, #254	; 0xfe
 8004dc8:	d80b      	bhi.n	8004de2 <WriteQdata+0x2e>
		//Debug_Tx("---------------------\nWriting  Data");
		//printAdd();
		SPI_flash_Page_Program(WrtAdd, data,len);
 8004dca:	1cbb      	adds	r3, r7, #2
 8004dcc:	881a      	ldrh	r2, [r3, #0]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <WriteQdata+0x38>)
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7ff ff53 	bl	8004c7e <SPI_flash_Page_Program>
		incrimentAddress2(256);
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7ff ffa3 	bl	8004d28 <incrimentAddress2>
	}
}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b002      	add	sp, #8
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	20000030 	.word	0x20000030

08004df0 <isQempty>:

int isQempty() {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <isQempty+0x2c>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <isQempty+0x2c>)
 8004dfe:	7852      	ldrb	r2, [r2, #1]
 8004e00:	189b      	adds	r3, r3, r2
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	607b      	str	r3, [r7, #4]
	if(addi<(256*256*3)+256){
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a05      	ldr	r2, [pc, #20]	; (8004e20 <isQempty+0x30>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	dc01      	bgt.n	8004e12 <isQempty+0x22>
		return 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <isQempty+0x24>
	}
	return 0;
 8004e12:	2300      	movs	r3, #0

}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000030 	.word	0x20000030
 8004e20:	000300ff 	.word	0x000300ff

08004e24 <ReadQdata>:

}



int ReadQdata() {
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b0c5      	sub	sp, #276	; 0x114
 8004e28:	af00      	add	r7, sp, #0
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	4b64      	ldr	r3, [pc, #400]	; (8004fc0 <ReadQdata+0x19c>)
 8004e30:	2100      	movs	r1, #0
 8004e32:	0018      	movs	r0, r3
 8004e34:	f00d f8e6 	bl	8012004 <memset>
	memset(ReadMDataS,0,4096);
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	4b61      	ldr	r3, [pc, #388]	; (8004fc4 <ReadQdata+0x1a0>)
 8004e3e:	2100      	movs	r1, #0
 8004e40:	0018      	movs	r0, r3
 8004e42:	f00d f8df 	bl	8012004 <memset>
	if(isQempty()==1){
 8004e46:	f7ff ffd3 	bl	8004df0 <isQempty>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d105      	bne.n	8004e5c <ReadQdata+0x38>
		Debug_Tx("Memory Empty");
 8004e50:	4b5d      	ldr	r3, [pc, #372]	; (8004fc8 <ReadQdata+0x1a4>)
 8004e52:	0018      	movs	r0, r3
 8004e54:	f002 f9ee 	bl	8007234 <Debug_Tx>
		return 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e0ac      	b.n	8004fb6 <ReadQdata+0x192>
	}
	incrimentAddress2(-1);
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	425b      	negs	r3, r3
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7ff ff61 	bl	8004d28 <incrimentAddress2>
	int len=WrtAdd[1]%16;
 8004e66:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <ReadQdata+0x1a8>)
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	4013      	ands	r3, r2
 8004e70:	1d7a      	adds	r2, r7, #5
 8004e72:	32ff      	adds	r2, #255	; 0xff
 8004e74:	6013      	str	r3, [r2, #0]
	len=len+1;
 8004e76:	1d7b      	adds	r3, r7, #5
 8004e78:	33ff      	adds	r3, #255	; 0xff
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	1d7a      	adds	r2, r7, #5
 8004e80:	32ff      	adds	r2, #255	; 0xff
 8004e82:	6013      	str	r3, [r2, #0]
	WrtAdd[1]=WrtAdd[1]/16;
 8004e84:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <ReadQdata+0x1a8>)
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	4b4f      	ldr	r3, [pc, #316]	; (8004fcc <ReadQdata+0x1a8>)
 8004e8e:	705a      	strb	r2, [r3, #1]
	WrtAdd[1]=WrtAdd[1]*16;
 8004e90:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <ReadQdata+0x1a8>)
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <ReadQdata+0x1a8>)
 8004e9a:	705a      	strb	r2, [r3, #1]
	WrtAdd[2]=0;
 8004e9c:	4b4b      	ldr	r3, [pc, #300]	; (8004fcc <ReadQdata+0x1a8>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8004ea2:	1d7b      	adds	r3, r7, #5
 8004ea4:	33ff      	adds	r3, #255	; 0xff
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	4944      	ldr	r1, [pc, #272]	; (8004fc0 <ReadQdata+0x19c>)
 8004eb0:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <ReadQdata+0x1a8>)
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f7ff ff10 	bl	8004cd8 <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 8004eb8:	2301      	movs	r3, #1
 8004eba:	2286      	movs	r2, #134	; 0x86
 8004ebc:	0052      	lsls	r2, r2, #1
 8004ebe:	18ba      	adds	r2, r7, r2
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e06a      	b.n	8004f9a <ReadQdata+0x176>
		memset(temp,0,256);
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	005a      	lsls	r2, r3, #1
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	2100      	movs	r1, #0
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f00d f899 	bl	8012004 <memset>
		for (int j=0;j<256;j++){
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2284      	movs	r2, #132	; 0x84
 8004ed6:	0052      	lsls	r2, r2, #1
 8004ed8:	18ba      	adds	r2, r7, r2
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	e033      	b.n	8004f46 <ReadQdata+0x122>
			temp[j]=ReadMData[(len-i)*256+j];
 8004ede:	1d7b      	adds	r3, r7, #5
 8004ee0:	33ff      	adds	r3, #255	; 0xff
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	2386      	movs	r3, #134	; 0x86
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	021a      	lsls	r2, r3, #8
 8004ef0:	2084      	movs	r0, #132	; 0x84
 8004ef2:	0040      	lsls	r0, r0, #1
 8004ef4:	183b      	adds	r3, r7, r0
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	18d3      	adds	r3, r2, r3
 8004efa:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <ReadQdata+0x19c>)
 8004efc:	5cd1      	ldrb	r1, [r2, r3]
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <ReadQdata+0x1ac>)
 8004f00:	2488      	movs	r4, #136	; 0x88
 8004f02:	0064      	lsls	r4, r4, #1
 8004f04:	191b      	adds	r3, r3, r4
 8004f06:	19da      	adds	r2, r3, r7
 8004f08:	183b      	adds	r3, r7, r0
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	18d3      	adds	r3, r2, r3
 8004f0e:	1c0a      	adds	r2, r1, #0
 8004f10:	701a      	strb	r2, [r3, #0]
			if (temp[j]==255){
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <ReadQdata+0x1ac>)
 8004f14:	191b      	adds	r3, r3, r4
 8004f16:	19da      	adds	r2, r3, r7
 8004f18:	0001      	movs	r1, r0
 8004f1a:	187b      	adds	r3, r7, r1
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	18d3      	adds	r3, r2, r3
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2bff      	cmp	r3, #255	; 0xff
 8004f24:	d108      	bne.n	8004f38 <ReadQdata+0x114>
				temp[j]=0;
 8004f26:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <ReadQdata+0x1ac>)
 8004f28:	191b      	adds	r3, r3, r4
 8004f2a:	19da      	adds	r2, r3, r7
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	18d3      	adds	r3, r2, r3
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
				break;
 8004f36:	e00c      	b.n	8004f52 <ReadQdata+0x12e>
		for (int j=0;j<256;j++){
 8004f38:	2284      	movs	r2, #132	; 0x84
 8004f3a:	0052      	lsls	r2, r2, #1
 8004f3c:	18bb      	adds	r3, r7, r2
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	18ba      	adds	r2, r7, r2
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	2384      	movs	r3, #132	; 0x84
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2bff      	cmp	r3, #255	; 0xff
 8004f50:	ddc5      	ble.n	8004ede <ReadQdata+0xba>
			}
		}
		temp[255]=0;
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <ReadQdata+0x1ac>)
 8004f54:	2288      	movs	r2, #136	; 0x88
 8004f56:	0052      	lsls	r2, r2, #1
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	19db      	adds	r3, r3, r7
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]
		strcat(ReadMDataS,temp);
 8004f62:	1d3a      	adds	r2, r7, #4
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <ReadQdata+0x1a0>)
 8004f66:	0011      	movs	r1, r2
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f00d f853 	bl	8012014 <strcat>
		strcat(ReadMDataS,"\r\n");
 8004f6e:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <ReadQdata+0x1a0>)
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7fb f8c9 	bl	8000108 <strlen>
 8004f76:	0003      	movs	r3, r0
 8004f78:	001a      	movs	r2, r3
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <ReadQdata+0x1a0>)
 8004f7c:	18d2      	adds	r2, r2, r3
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <ReadQdata+0x1b0>)
 8004f80:	0010      	movs	r0, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	2303      	movs	r3, #3
 8004f86:	001a      	movs	r2, r3
 8004f88:	f00d fa04 	bl	8012394 <memcpy>
	for (int i=1;i<=len;i++){
 8004f8c:	2286      	movs	r2, #134	; 0x86
 8004f8e:	0052      	lsls	r2, r2, #1
 8004f90:	18bb      	adds	r3, r7, r2
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	18ba      	adds	r2, r7, r2
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	2386      	movs	r3, #134	; 0x86
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	1d7b      	adds	r3, r7, #5
 8004fa4:	33ff      	adds	r3, #255	; 0xff
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	dd8b      	ble.n	8004ec4 <ReadQdata+0xa0>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 8004fac:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <ReadQdata+0x1a8>)
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f7ff fe42 	bl	8004c38 <SPI_flash_Sector_Erase>
	return 1;
 8004fb4:	2301      	movs	r3, #1
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b045      	add	sp, #276	; 0x114
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	200014e0 	.word	0x200014e0
 8004fc4:	200024e0 	.word	0x200024e0
 8004fc8:	0801691c 	.word	0x0801691c
 8004fcc:	20000030 	.word	0x20000030
 8004fd0:	fffffef4 	.word	0xfffffef4
 8004fd4:	08015b74 	.word	0x08015b74

08004fd8 <initAcc>:
#define WHO_AM_I_REG 0x75

/* Constants for Acc*/


static void initAcc(){
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8004fde:	4858      	ldr	r0, [pc, #352]	; (8005140 <initAcc+0x168>)
 8004fe0:	23fa      	movs	r3, #250	; 0xfa
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	9302      	str	r3, [sp, #8]
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	1dfb      	adds	r3, r7, #7
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2301      	movs	r3, #1
 8004ff0:	2275      	movs	r2, #117	; 0x75
 8004ff2:	21d0      	movs	r1, #208	; 0xd0
 8004ff4:	f004 fd2e 	bl	8009a54 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b68      	cmp	r3, #104	; 0x68
 8004ffe:	d144      	bne.n	800508a <initAcc+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8005006:	484e      	ldr	r0, [pc, #312]	; (8005140 <initAcc+0x168>)
 8005008:	23fa      	movs	r3, #250	; 0xfa
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	9302      	str	r3, [sp, #8]
 800500e:	2301      	movs	r3, #1
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	1dbb      	adds	r3, r7, #6
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2301      	movs	r3, #1
 8005018:	226b      	movs	r2, #107	; 0x6b
 800501a:	21d0      	movs	r1, #208	; 0xd0
 800501c:	f004 fbec 	bl	80097f8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8005020:	1dbb      	adds	r3, r7, #6
 8005022:	2207      	movs	r2, #7
 8005024:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8005026:	4846      	ldr	r0, [pc, #280]	; (8005140 <initAcc+0x168>)
 8005028:	23fa      	movs	r3, #250	; 0xfa
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	9302      	str	r3, [sp, #8]
 800502e:	2301      	movs	r3, #1
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	1dbb      	adds	r3, r7, #6
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2301      	movs	r3, #1
 8005038:	2219      	movs	r2, #25
 800503a:	21d0      	movs	r1, #208	; 0xd0
 800503c:	f004 fbdc 	bl	80097f8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g
		Data = 0x00;
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8005046:	483e      	ldr	r0, [pc, #248]	; (8005140 <initAcc+0x168>)
 8005048:	23fa      	movs	r3, #250	; 0xfa
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	2301      	movs	r3, #1
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	1dbb      	adds	r3, r7, #6
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2301      	movs	r3, #1
 8005058:	221c      	movs	r2, #28
 800505a:	21d0      	movs	r1, #208	; 0xd0
 800505c:	f004 fbcc 	bl	80097f8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 /s
		Data = 0x00;
 8005060:	1dbb      	adds	r3, r7, #6
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8005066:	4836      	ldr	r0, [pc, #216]	; (8005140 <initAcc+0x168>)
 8005068:	23fa      	movs	r3, #250	; 0xfa
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	9302      	str	r3, [sp, #8]
 800506e:	2301      	movs	r3, #1
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	1dbb      	adds	r3, r7, #6
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2301      	movs	r3, #1
 8005078:	221b      	movs	r2, #27
 800507a:	21d0      	movs	r1, #208	; 0xd0
 800507c:	f004 fbbc 	bl	80097f8 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8005080:	4b30      	ldr	r3, [pc, #192]	; (8005144 <initAcc+0x16c>)
 8005082:	0018      	movs	r0, r3
 8005084:	f002 f8d6 	bl	8007234 <Debug_Tx>
 8005088:	e043      	b.n	8005112 <initAcc+0x13a>
	}
	else{
		Data = 0;
 800508a:	1dbb      	adds	r3, r7, #6
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8005090:	482b      	ldr	r0, [pc, #172]	; (8005140 <initAcc+0x168>)
 8005092:	23fa      	movs	r3, #250	; 0xfa
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	9302      	str	r3, [sp, #8]
 8005098:	2301      	movs	r3, #1
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	1dbb      	adds	r3, r7, #6
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2301      	movs	r3, #1
 80050a2:	226b      	movs	r2, #107	; 0x6b
 80050a4:	21d0      	movs	r1, #208	; 0xd0
 80050a6:	f004 fba7 	bl	80097f8 <HAL_I2C_Mem_Write>

				// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
				Data = 0x07;
 80050aa:	1dbb      	adds	r3, r7, #6
 80050ac:	2207      	movs	r2, #7
 80050ae:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80050b0:	4823      	ldr	r0, [pc, #140]	; (8005140 <initAcc+0x168>)
 80050b2:	23fa      	movs	r3, #250	; 0xfa
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	2301      	movs	r3, #1
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	1dbb      	adds	r3, r7, #6
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	2301      	movs	r3, #1
 80050c2:	2219      	movs	r2, #25
 80050c4:	21d0      	movs	r1, #208	; 0xd0
 80050c6:	f004 fb97 	bl	80097f8 <HAL_I2C_Mem_Write>

				// Set accelerometer configuration in ACCEL_CONFIG Register
				// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g
				Data = 0x00;
 80050ca:	1dbb      	adds	r3, r7, #6
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80050d0:	481b      	ldr	r0, [pc, #108]	; (8005140 <initAcc+0x168>)
 80050d2:	23fa      	movs	r3, #250	; 0xfa
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	9302      	str	r3, [sp, #8]
 80050d8:	2301      	movs	r3, #1
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	1dbb      	adds	r3, r7, #6
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	2301      	movs	r3, #1
 80050e2:	221c      	movs	r2, #28
 80050e4:	21d0      	movs	r1, #208	; 0xd0
 80050e6:	f004 fb87 	bl	80097f8 <HAL_I2C_Mem_Write>

				// Set Gyroscopic configuration in GYRO_CONFIG Register
				// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 /s
				Data = 0x00;
 80050ea:	1dbb      	adds	r3, r7, #6
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80050f0:	4813      	ldr	r0, [pc, #76]	; (8005140 <initAcc+0x168>)
 80050f2:	23fa      	movs	r3, #250	; 0xfa
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	2301      	movs	r3, #1
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	1dbb      	adds	r3, r7, #6
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2301      	movs	r3, #1
 8005102:	221b      	movs	r2, #27
 8005104:	21d0      	movs	r1, #208	; 0xd0
 8005106:	f004 fb77 	bl	80097f8 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 800510a:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <initAcc+0x170>)
 800510c:	0018      	movs	r0, r3
 800510e:	f002 f891 	bl	8007234 <Debug_Tx>
	}

	ACC_GYRO_data[0]=0;
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <initAcc+0x174>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <initAcc+0x174>)
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <initAcc+0x174>)
 8005120:	2200      	movs	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <initAcc+0x174>)
 8005126:	2200      	movs	r2, #0
 8005128:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <initAcc+0x174>)
 800512c:	2200      	movs	r2, #0
 800512e:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <initAcc+0x174>)
 8005132:	2200      	movs	r2, #0
 8005134:	615a      	str	r2, [r3, #20]

}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b002      	add	sp, #8
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	2000052c 	.word	0x2000052c
 8005144:	08016a3c 	.word	0x08016a3c
 8005148:	08016a50 	.word	0x08016a50
 800514c:	20003504 	.word	0x20003504

08005150 <readAcc>:





static float* readAcc(){
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af04      	add	r7, sp, #16

	ACC_GYRO_data[0]=0;
 8005156:	4b7e      	ldr	r3, [pc, #504]	; (8005350 <readAcc+0x200>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 800515c:	4b7c      	ldr	r3, [pc, #496]	; (8005350 <readAcc+0x200>)
 800515e:	2200      	movs	r2, #0
 8005160:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 8005162:	4b7b      	ldr	r3, [pc, #492]	; (8005350 <readAcc+0x200>)
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 8005168:	4b79      	ldr	r3, [pc, #484]	; (8005350 <readAcc+0x200>)
 800516a:	2200      	movs	r2, #0
 800516c:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 800516e:	4b78      	ldr	r3, [pc, #480]	; (8005350 <readAcc+0x200>)
 8005170:	2200      	movs	r2, #0
 8005172:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8005174:	4b76      	ldr	r3, [pc, #472]	; (8005350 <readAcc+0x200>)
 8005176:	2200      	movs	r2, #0
 8005178:	615a      	str	r2, [r3, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800517a:	4876      	ldr	r0, [pc, #472]	; (8005354 <readAcc+0x204>)
 800517c:	23fa      	movs	r3, #250	; 0xfa
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	9302      	str	r3, [sp, #8]
 8005182:	2306      	movs	r3, #6
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	003b      	movs	r3, r7
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	2301      	movs	r3, #1
 800518c:	223b      	movs	r2, #59	; 0x3b
 800518e:	21d0      	movs	r1, #208	; 0xd0
 8005190:	f004 fc60 	bl	8009a54 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005194:	003b      	movs	r3, r7
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	b21a      	sxth	r2, r3
 800519c:	003b      	movs	r3, r7
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	b21b      	sxth	r3, r3
 80051a2:	4313      	orrs	r3, r2
 80051a4:	b21a      	sxth	r2, r3
 80051a6:	4b6c      	ldr	r3, [pc, #432]	; (8005358 <readAcc+0x208>)
 80051a8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80051aa:	003b      	movs	r3, r7
 80051ac:	789b      	ldrb	r3, [r3, #2]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	b21a      	sxth	r2, r3
 80051b2:	003b      	movs	r3, r7
 80051b4:	78db      	ldrb	r3, [r3, #3]
 80051b6:	b21b      	sxth	r3, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	b21a      	sxth	r2, r3
 80051bc:	4b67      	ldr	r3, [pc, #412]	; (800535c <readAcc+0x20c>)
 80051be:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80051c0:	003b      	movs	r3, r7
 80051c2:	791b      	ldrb	r3, [r3, #4]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	b21a      	sxth	r2, r3
 80051c8:	003b      	movs	r3, r7
 80051ca:	795b      	ldrb	r3, [r3, #5]
 80051cc:	b21b      	sxth	r3, r3
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b21a      	sxth	r2, r3
 80051d2:	4b63      	ldr	r3, [pc, #396]	; (8005360 <readAcc+0x210>)
 80051d4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 80051d6:	4b60      	ldr	r3, [pc, #384]	; (8005358 <readAcc+0x208>)
 80051d8:	2200      	movs	r2, #0
 80051da:	5e9b      	ldrsh	r3, [r3, r2]
 80051dc:	0018      	movs	r0, r3
 80051de:	f7fd ff11 	bl	8003004 <__aeabi_i2d>
 80051e2:	2200      	movs	r2, #0
 80051e4:	4b5f      	ldr	r3, [pc, #380]	; (8005364 <readAcc+0x214>)
 80051e6:	f7fc fc7b 	bl	8001ae0 <__aeabi_ddiv>
 80051ea:	0002      	movs	r2, r0
 80051ec:	000b      	movs	r3, r1
 80051ee:	0010      	movs	r0, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	f7fd ffa5 	bl	8003140 <__aeabi_d2f>
 80051f6:	1c02      	adds	r2, r0, #0
 80051f8:	4b5b      	ldr	r3, [pc, #364]	; (8005368 <readAcc+0x218>)
 80051fa:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 80051fc:	4b57      	ldr	r3, [pc, #348]	; (800535c <readAcc+0x20c>)
 80051fe:	2200      	movs	r2, #0
 8005200:	5e9b      	ldrsh	r3, [r3, r2]
 8005202:	0018      	movs	r0, r3
 8005204:	f7fd fefe 	bl	8003004 <__aeabi_i2d>
 8005208:	2200      	movs	r2, #0
 800520a:	4b56      	ldr	r3, [pc, #344]	; (8005364 <readAcc+0x214>)
 800520c:	f7fc fc68 	bl	8001ae0 <__aeabi_ddiv>
 8005210:	0002      	movs	r2, r0
 8005212:	000b      	movs	r3, r1
 8005214:	0010      	movs	r0, r2
 8005216:	0019      	movs	r1, r3
 8005218:	f7fd ff92 	bl	8003140 <__aeabi_d2f>
 800521c:	1c02      	adds	r2, r0, #0
 800521e:	4b53      	ldr	r3, [pc, #332]	; (800536c <readAcc+0x21c>)
 8005220:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8005222:	4b4f      	ldr	r3, [pc, #316]	; (8005360 <readAcc+0x210>)
 8005224:	2200      	movs	r2, #0
 8005226:	5e9b      	ldrsh	r3, [r3, r2]
 8005228:	0018      	movs	r0, r3
 800522a:	f7fd feeb 	bl	8003004 <__aeabi_i2d>
 800522e:	2200      	movs	r2, #0
 8005230:	4b4c      	ldr	r3, [pc, #304]	; (8005364 <readAcc+0x214>)
 8005232:	f7fc fc55 	bl	8001ae0 <__aeabi_ddiv>
 8005236:	0002      	movs	r2, r0
 8005238:	000b      	movs	r3, r1
 800523a:	0010      	movs	r0, r2
 800523c:	0019      	movs	r1, r3
 800523e:	f7fd ff7f 	bl	8003140 <__aeabi_d2f>
 8005242:	1c02      	adds	r2, r0, #0
 8005244:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <readAcc+0x220>)
 8005246:	601a      	str	r2, [r3, #0]


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005248:	4842      	ldr	r0, [pc, #264]	; (8005354 <readAcc+0x204>)
 800524a:	23fa      	movs	r3, #250	; 0xfa
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	9302      	str	r3, [sp, #8]
 8005250:	2306      	movs	r3, #6
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	003b      	movs	r3, r7
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2301      	movs	r3, #1
 800525a:	2243      	movs	r2, #67	; 0x43
 800525c:	21d0      	movs	r1, #208	; 0xd0
 800525e:	f004 fbf9 	bl	8009a54 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005262:	003b      	movs	r3, r7
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	b21a      	sxth	r2, r3
 800526a:	003b      	movs	r3, r7
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	b21b      	sxth	r3, r3
 8005270:	4313      	orrs	r3, r2
 8005272:	b21a      	sxth	r2, r3
 8005274:	4b3f      	ldr	r3, [pc, #252]	; (8005374 <readAcc+0x224>)
 8005276:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8005278:	003b      	movs	r3, r7
 800527a:	789b      	ldrb	r3, [r3, #2]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	b21a      	sxth	r2, r3
 8005280:	003b      	movs	r3, r7
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	b21b      	sxth	r3, r3
 8005286:	4313      	orrs	r3, r2
 8005288:	b21a      	sxth	r2, r3
 800528a:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <readAcc+0x228>)
 800528c:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800528e:	003b      	movs	r3, r7
 8005290:	791b      	ldrb	r3, [r3, #4]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	b21a      	sxth	r2, r3
 8005296:	003b      	movs	r3, r7
 8005298:	795b      	ldrb	r3, [r3, #5]
 800529a:	b21b      	sxth	r3, r3
 800529c:	4313      	orrs	r3, r2
 800529e:	b21a      	sxth	r2, r3
 80052a0:	4b36      	ldr	r3, [pc, #216]	; (800537c <readAcc+0x22c>)
 80052a2:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 80052a4:	4b33      	ldr	r3, [pc, #204]	; (8005374 <readAcc+0x224>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	5e9b      	ldrsh	r3, [r3, r2]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f7fd feaa 	bl	8003004 <__aeabi_i2d>
 80052b0:	2200      	movs	r2, #0
 80052b2:	4b33      	ldr	r3, [pc, #204]	; (8005380 <readAcc+0x230>)
 80052b4:	f7fc fc14 	bl	8001ae0 <__aeabi_ddiv>
 80052b8:	0002      	movs	r2, r0
 80052ba:	000b      	movs	r3, r1
 80052bc:	0010      	movs	r0, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	f7fd ff3e 	bl	8003140 <__aeabi_d2f>
 80052c4:	1c02      	adds	r2, r0, #0
 80052c6:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <readAcc+0x234>)
 80052c8:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80052ca:	4b2b      	ldr	r3, [pc, #172]	; (8005378 <readAcc+0x228>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	5e9b      	ldrsh	r3, [r3, r2]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7fd fe97 	bl	8003004 <__aeabi_i2d>
 80052d6:	2200      	movs	r2, #0
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <readAcc+0x230>)
 80052da:	f7fc fc01 	bl	8001ae0 <__aeabi_ddiv>
 80052de:	0002      	movs	r2, r0
 80052e0:	000b      	movs	r3, r1
 80052e2:	0010      	movs	r0, r2
 80052e4:	0019      	movs	r1, r3
 80052e6:	f7fd ff2b 	bl	8003140 <__aeabi_d2f>
 80052ea:	1c02      	adds	r2, r0, #0
 80052ec:	4b26      	ldr	r3, [pc, #152]	; (8005388 <readAcc+0x238>)
 80052ee:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80052f0:	4b22      	ldr	r3, [pc, #136]	; (800537c <readAcc+0x22c>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	5e9b      	ldrsh	r3, [r3, r2]
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7fd fe84 	bl	8003004 <__aeabi_i2d>
 80052fc:	2200      	movs	r2, #0
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <readAcc+0x230>)
 8005300:	f7fc fbee 	bl	8001ae0 <__aeabi_ddiv>
 8005304:	0002      	movs	r2, r0
 8005306:	000b      	movs	r3, r1
 8005308:	0010      	movs	r0, r2
 800530a:	0019      	movs	r1, r3
 800530c:	f7fd ff18 	bl	8003140 <__aeabi_d2f>
 8005310:	1c02      	adds	r2, r0, #0
 8005312:	4b1e      	ldr	r3, [pc, #120]	; (800538c <readAcc+0x23c>)
 8005314:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <readAcc+0x218>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <readAcc+0x200>)
 800531c:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=Ay;
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <readAcc+0x21c>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <readAcc+0x200>)
 8005324:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=Az;
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <readAcc+0x220>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <readAcc+0x200>)
 800532c:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=Gx;
 800532e:	4b15      	ldr	r3, [pc, #84]	; (8005384 <readAcc+0x234>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b07      	ldr	r3, [pc, #28]	; (8005350 <readAcc+0x200>)
 8005334:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=Gy;
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <readAcc+0x238>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b05      	ldr	r3, [pc, #20]	; (8005350 <readAcc+0x200>)
 800533c:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=Gz;
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <readAcc+0x23c>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b03      	ldr	r3, [pc, #12]	; (8005350 <readAcc+0x200>)
 8005344:	615a      	str	r2, [r3, #20]
	return(ACC_GYRO_data);
 8005346:	4b02      	ldr	r3, [pc, #8]	; (8005350 <readAcc+0x200>)

	//sprintf (buf, "%.2f", Ax);
}
 8005348:	0018      	movs	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20003504 	.word	0x20003504
 8005354:	2000052c 	.word	0x2000052c
 8005358:	200034e0 	.word	0x200034e0
 800535c:	200034e2 	.word	0x200034e2
 8005360:	200034e4 	.word	0x200034e4
 8005364:	40d00000 	.word	0x40d00000
 8005368:	200034ec 	.word	0x200034ec
 800536c:	200034f0 	.word	0x200034f0
 8005370:	200034f4 	.word	0x200034f4
 8005374:	200034e6 	.word	0x200034e6
 8005378:	200034e8 	.word	0x200034e8
 800537c:	200034ea 	.word	0x200034ea
 8005380:	40606000 	.word	0x40606000
 8005384:	200034f8 	.word	0x200034f8
 8005388:	200034fc 	.word	0x200034fc
 800538c:	20003500 	.word	0x20003500

08005390 <detectAcc>:


int detectAcc(){
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
	readAcc();
 8005394:	f7ff fedc 	bl	8005150 <readAcc>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8005398:	4b27      	ldr	r3, [pc, #156]	; (8005438 <detectAcc+0xa8>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b26      	ldr	r3, [pc, #152]	; (8005438 <detectAcc+0xa8>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	1c19      	adds	r1, r3, #0
 80053a2:	1c10      	adds	r0, r2, #0
 80053a4:	f7fb f92a 	bl	80005fc <__aeabi_fadd>
 80053a8:	1c03      	adds	r3, r0, #0
 80053aa:	1c1a      	adds	r2, r3, #0
 80053ac:	4b22      	ldr	r3, [pc, #136]	; (8005438 <detectAcc+0xa8>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	1c19      	adds	r1, r3, #0
 80053b2:	1c10      	adds	r0, r2, #0
 80053b4:	f7fb f922 	bl	80005fc <__aeabi_fadd>
 80053b8:	1c03      	adds	r3, r0, #0
 80053ba:	4920      	ldr	r1, [pc, #128]	; (800543c <detectAcc+0xac>)
 80053bc:	1c18      	adds	r0, r3, #0
 80053be:	f7fb f899 	bl	80004f4 <__aeabi_fcmpgt>
 80053c2:	1e03      	subs	r3, r0, #0
 80053c4:	d001      	beq.n	80053ca <detectAcc+0x3a>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e032      	b.n	8005430 <detectAcc+0xa0>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 80053ca:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <detectAcc+0xa8>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <detectAcc+0xa8>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	1c19      	adds	r1, r3, #0
 80053d4:	1c10      	adds	r0, r2, #0
 80053d6:	f7fb f911 	bl	80005fc <__aeabi_fadd>
 80053da:	1c03      	adds	r3, r0, #0
 80053dc:	1c1a      	adds	r2, r3, #0
 80053de:	4b16      	ldr	r3, [pc, #88]	; (8005438 <detectAcc+0xa8>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	1c19      	adds	r1, r3, #0
 80053e4:	1c10      	adds	r0, r2, #0
 80053e6:	f7fb f909 	bl	80005fc <__aeabi_fadd>
 80053ea:	1c03      	adds	r3, r0, #0
 80053ec:	4914      	ldr	r1, [pc, #80]	; (8005440 <detectAcc+0xb0>)
 80053ee:	1c18      	adds	r0, r3, #0
 80053f0:	f7fb f86c 	bl	80004cc <__aeabi_fcmplt>
 80053f4:	1e03      	subs	r3, r0, #0
 80053f6:	d001      	beq.n	80053fc <detectAcc+0x6c>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e019      	b.n	8005430 <detectAcc+0xa0>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <detectAcc+0xa8>)
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <detectAcc+0xa8>)
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	1c19      	adds	r1, r3, #0
 8005406:	1c10      	adds	r0, r2, #0
 8005408:	f7fb f8f8 	bl	80005fc <__aeabi_fadd>
 800540c:	1c03      	adds	r3, r0, #0
 800540e:	1c1a      	adds	r2, r3, #0
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <detectAcc+0xa8>)
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	1c19      	adds	r1, r3, #0
 8005416:	1c10      	adds	r0, r2, #0
 8005418:	f7fb f8f0 	bl	80005fc <__aeabi_fadd>
 800541c:	1c03      	adds	r3, r0, #0
 800541e:	4907      	ldr	r1, [pc, #28]	; (800543c <detectAcc+0xac>)
 8005420:	1c18      	adds	r0, r3, #0
 8005422:	f7fb f867 	bl	80004f4 <__aeabi_fcmpgt>
 8005426:	1e03      	subs	r3, r0, #0
 8005428:	d001      	beq.n	800542e <detectAcc+0x9e>
 800542a:	2303      	movs	r3, #3
 800542c:	e000      	b.n	8005430 <detectAcc+0xa0>


	return 0;
 800542e:	2300      	movs	r3, #0
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	20003504 	.word	0x20003504
 800543c:	44fa0000 	.word	0x44fa0000
 8005440:	c4fa0000 	.word	0xc4fa0000

08005444 <initGPS>:
char printBuf[50];

//char* buffer
//int ProcessRunning_GPS=0;

void initGPS(){
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <initGPS+0x6c>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
	GPSInfo.lon=0.0;
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <initGPS+0x6c>)
 8005450:	2200      	movs	r2, #0
 8005452:	605a      	str	r2, [r3, #4]
	GPSInfo.alt=0.0;
 8005454:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <initGPS+0x6c>)
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
	GPSInfo.hdop=0.0;
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <initGPS+0x6c>)
 800545c:	2200      	movs	r2, #0
 800545e:	60da      	str	r2, [r3, #12]
	GPSInfo.pdop=0.0;
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <initGPS+0x6c>)
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
	GPSInfo.head=0.0;
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <initGPS+0x6c>)
 8005468:	2200      	movs	r2, #0
 800546a:	615a      	str	r2, [r3, #20]
	GPSInfo.speed=0.0;
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <initGPS+0x6c>)
 800546e:	2200      	movs	r2, #0
 8005470:	619a      	str	r2, [r3, #24]
	GPSInfo.fix=0;
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <initGPS+0x6c>)
 8005474:	2200      	movs	r2, #0
 8005476:	61da      	str	r2, [r3, #28]
	GPSInfo.sat=0;
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <initGPS+0x6c>)
 800547a:	2200      	movs	r2, #0
 800547c:	621a      	str	r2, [r3, #32]
	strcpy(GPSInfo.latD,"x");
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <initGPS+0x70>)
 8005480:	2278      	movs	r2, #120	; 0x78
 8005482:	801a      	strh	r2, [r3, #0]
	strcpy(GPSInfo.lonD,"x");
 8005484:	4a0c      	ldr	r2, [pc, #48]	; (80054b8 <initGPS+0x74>)
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <initGPS+0x78>)
 8005488:	0010      	movs	r0, r2
 800548a:	0019      	movs	r1, r3
 800548c:	2302      	movs	r3, #2
 800548e:	001a      	movs	r2, r3
 8005490:	f00c ff80 	bl	8012394 <memcpy>
	strcpy(GPSInfo.time,"x");
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <initGPS+0x7c>)
 8005496:	2278      	movs	r2, #120	; 0x78
 8005498:	801a      	strh	r2, [r3, #0]
	strcpy(GPSInfo.date,"x");
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <initGPS+0x80>)
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <initGPS+0x78>)
 800549e:	0010      	movs	r0, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	2302      	movs	r3, #2
 80054a4:	001a      	movs	r2, r3
 80054a6:	f00c ff75 	bl	8012394 <memcpy>
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	2000351c 	.word	0x2000351c
 80054b4:	20003544 	.word	0x20003544
 80054b8:	20003547 	.word	0x20003547
 80054bc:	08016a8c 	.word	0x08016a8c
 80054c0:	2000354a 	.word	0x2000354a
 80054c4:	20003559 	.word	0x20003559

080054c8 <getGPSString>:
void getGPSString(){
 80054c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ca:	46ce      	mov	lr, r9
 80054cc:	4647      	mov	r7, r8
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b0a1      	sub	sp, #132	; 0x84
 80054d2:	af16      	add	r7, sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 80054d4:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <getGPSString+0xf8>)
 80054d6:	2246      	movs	r2, #70	; 0x46
 80054d8:	2100      	movs	r1, #0
 80054da:	0018      	movs	r0, r3
 80054dc:	f00c fd92 	bl	8012004 <memset>

	if(GPSInfo.fix==1){
 80054e0:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <getGPSString+0xfc>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d103      	bne.n	80054f0 <getGPSString+0x28>
		SET_LED_GPS(1);
 80054e8:	2001      	movs	r0, #1
 80054ea:	f7fe f819 	bl	8003520 <SET_LED_GPS>
 80054ee:	e002      	b.n	80054f6 <getGPSString+0x2e>
	}
	else{
		SET_LED_GPS(0);
 80054f0:	2000      	movs	r0, #0
 80054f2:	f7fe f815 	bl	8003520 <SET_LED_GPS>
	}




	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 80054f6:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <getGPSString+0xfc>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4699      	mov	r9, r3
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 80054fc:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <getGPSString+0xfc>)
 80054fe:	681b      	ldr	r3, [r3, #0]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 8005500:	1c18      	adds	r0, r3, #0
 8005502:	f7fd fdd5 	bl	80030b0 <__aeabi_f2d>
 8005506:	6238      	str	r0, [r7, #32]
 8005508:	6279      	str	r1, [r7, #36]	; 0x24
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800550a:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <getGPSString+0xfc>)
 800550c:	685b      	ldr	r3, [r3, #4]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 800550e:	1c18      	adds	r0, r3, #0
 8005510:	f7fd fdce 	bl	80030b0 <__aeabi_f2d>
 8005514:	61b8      	str	r0, [r7, #24]
 8005516:	61f9      	str	r1, [r7, #28]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005518:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <getGPSString+0xfc>)
 800551a:	699b      	ldr	r3, [r3, #24]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 800551c:	1c18      	adds	r0, r3, #0
 800551e:	f7fd fdc7 	bl	80030b0 <__aeabi_f2d>
 8005522:	6138      	str	r0, [r7, #16]
 8005524:	6179      	str	r1, [r7, #20]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005526:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <getGPSString+0xfc>)
 8005528:	695b      	ldr	r3, [r3, #20]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 800552a:	1c18      	adds	r0, r3, #0
 800552c:	f7fd fdc0 	bl	80030b0 <__aeabi_f2d>
 8005530:	60b8      	str	r0, [r7, #8]
 8005532:	60f9      	str	r1, [r7, #12]
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <getGPSString+0xfc>)
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	4690      	mov	r8, r2
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <getGPSString+0xfc>)
 800553c:	689b      	ldr	r3, [r3, #8]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 800553e:	1c18      	adds	r0, r3, #0
 8005540:	f7fd fdb6 	bl	80030b0 <__aeabi_f2d>
 8005544:	6038      	str	r0, [r7, #0]
 8005546:	6079      	str	r1, [r7, #4]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <getGPSString+0xfc>)
 800554a:	691b      	ldr	r3, [r3, #16]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 800554c:	1c18      	adds	r0, r3, #0
 800554e:	f7fd fdaf 	bl	80030b0 <__aeabi_f2d>
 8005552:	0004      	movs	r4, r0
 8005554:	000d      	movs	r5, r1
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8005556:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <getGPSString+0xfc>)
 8005558:	68db      	ldr	r3, [r3, #12]
	sprintf(gpsDataRet, "%d,%s,%s,%f,%s,%f,%s,%.1f,%.0f,%d,%.1f,%.2f,%.2f",
 800555a:	1c18      	adds	r0, r3, #0
 800555c:	f7fd fda8 	bl	80030b0 <__aeabi_f2d>
 8005560:	0002      	movs	r2, r0
 8005562:	000b      	movs	r3, r1
 8005564:	4e18      	ldr	r6, [pc, #96]	; (80055c8 <getGPSString+0x100>)
 8005566:	4919      	ldr	r1, [pc, #100]	; (80055cc <getGPSString+0x104>)
 8005568:	4815      	ldr	r0, [pc, #84]	; (80055c0 <getGPSString+0xf8>)
 800556a:	9214      	str	r2, [sp, #80]	; 0x50
 800556c:	9315      	str	r3, [sp, #84]	; 0x54
 800556e:	9412      	str	r4, [sp, #72]	; 0x48
 8005570:	9513      	str	r5, [sp, #76]	; 0x4c
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	687c      	ldr	r4, [r7, #4]
 8005576:	9310      	str	r3, [sp, #64]	; 0x40
 8005578:	9411      	str	r4, [sp, #68]	; 0x44
 800557a:	4642      	mov	r2, r8
 800557c:	920e      	str	r2, [sp, #56]	; 0x38
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	68fc      	ldr	r4, [r7, #12]
 8005582:	930c      	str	r3, [sp, #48]	; 0x30
 8005584:	940d      	str	r4, [sp, #52]	; 0x34
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	697c      	ldr	r4, [r7, #20]
 800558a:	930a      	str	r3, [sp, #40]	; 0x28
 800558c:	940b      	str	r4, [sp, #44]	; 0x2c
 800558e:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <getGPSString+0x108>)
 8005590:	9308      	str	r3, [sp, #32]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	69fc      	ldr	r4, [r7, #28]
 8005596:	9306      	str	r3, [sp, #24]
 8005598:	9407      	str	r4, [sp, #28]
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <getGPSString+0x10c>)
 800559c:	9304      	str	r3, [sp, #16]
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80055a2:	9302      	str	r3, [sp, #8]
 80055a4:	9403      	str	r4, [sp, #12]
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <getGPSString+0x110>)
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	0033      	movs	r3, r6
 80055ac:	464a      	mov	r2, r9
 80055ae:	f00c fcbd 	bl	8011f2c <siprintf>
}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b00b      	add	sp, #44	; 0x2c
 80055b8:	bcc0      	pop	{r6, r7}
 80055ba:	46b9      	mov	r9, r7
 80055bc:	46b0      	mov	r8, r6
 80055be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c0:	20003950 	.word	0x20003950
 80055c4:	2000351c 	.word	0x2000351c
 80055c8:	20003559 	.word	0x20003559
 80055cc:	08016a90 	.word	0x08016a90
 80055d0:	20003547 	.word	0x20003547
 80055d4:	20003544 	.word	0x20003544
 80055d8:	2000354a 	.word	0x2000354a

080055dc <DegreeDecimalConvert>:



float DegreeDecimalConvert(float ddmmmm){
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
    // printf("insfunction2 %f",ddmmmm);
    int dd1= ddmmmm/100;
 80055e4:	4915      	ldr	r1, [pc, #84]	; (800563c <DegreeDecimalConvert+0x60>)
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fb f9a8 	bl	800093c <__aeabi_fdiv>
 80055ec:	1c03      	adds	r3, r0, #0
 80055ee:	1c18      	adds	r0, r3, #0
 80055f0:	f7fb fe5c 	bl	80012ac <__aeabi_f2iz>
 80055f4:	0003      	movs	r3, r0
 80055f6:	60fb      	str	r3, [r7, #12]
    float mm=ddmmmm -(dd1*100);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2264      	movs	r2, #100	; 0x64
 80055fc:	4353      	muls	r3, r2
 80055fe:	0018      	movs	r0, r3
 8005600:	f7fb fe74 	bl	80012ec <__aeabi_i2f>
 8005604:	1c03      	adds	r3, r0, #0
 8005606:	1c19      	adds	r1, r3, #0
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb fcaf 	bl	8000f6c <__aeabi_fsub>
 800560e:	1c03      	adds	r3, r0, #0
 8005610:	60bb      	str	r3, [r7, #8]
    mm=mm/60;
 8005612:	490b      	ldr	r1, [pc, #44]	; (8005640 <DegreeDecimalConvert+0x64>)
 8005614:	68b8      	ldr	r0, [r7, #8]
 8005616:	f7fb f991 	bl	800093c <__aeabi_fdiv>
 800561a:	1c03      	adds	r3, r0, #0
 800561c:	60bb      	str	r3, [r7, #8]
    mm=(float)dd1+mm;
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7fb fe64 	bl	80012ec <__aeabi_i2f>
 8005624:	1c03      	adds	r3, r0, #0
 8005626:	1c19      	adds	r1, r3, #0
 8005628:	68b8      	ldr	r0, [r7, #8]
 800562a:	f7fa ffe7 	bl	80005fc <__aeabi_fadd>
 800562e:	1c03      	adds	r3, r0, #0
 8005630:	60bb      	str	r3, [r7, #8]
    return(mm);
 8005632:	68bb      	ldr	r3, [r7, #8]
}
 8005634:	1c18      	adds	r0, r3, #0
 8005636:	46bd      	mov	sp, r7
 8005638:	b004      	add	sp, #16
 800563a:	bd80      	pop	{r7, pc}
 800563c:	42c80000 	.word	0x42c80000
 8005640:	42700000 	.word	0x42700000

08005644 <nmea0183_checksum>:
	snprintf(printBuf, 6, "%d", x);
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);

}
int nmea0183_checksum(char *s){//one extra blank char was found so last 4 char had to remove
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
    int c = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
    while (*s)
 8005650:	e007      	b.n	8005662 <nmea0183_checksum+0x1e>
        c ^= *s++;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	001a      	movs	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4053      	eors	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
    while (*s)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f3      	bne.n	8005652 <nmea0183_checksum+0xe>

    return c;
 800566a:	68fb      	ldr	r3, [r7, #12]

}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b004      	add	sp, #16
 8005672:	bd80      	pop	{r7, pc}

08005674 <getGNRMC>:
        }
    }
}
*/

void getGNRMC(const char * ptra){
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);
	int i=0;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
    char *token = strtok((char *)ptra, ",");
 8005680:	4a5a      	ldr	r2, [pc, #360]	; (80057ec <getGNRMC+0x178>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	0011      	movs	r1, r2
 8005686:	0018      	movs	r0, r3
 8005688:	f00c fd04 	bl	8012094 <strtok>
 800568c:	0003      	movs	r3, r0
 800568e:	613b      	str	r3, [r7, #16]
    while( token != NULL ) {
 8005690:	e0a2      	b.n	80057d8 <getGNRMC+0x164>
  	    if(i==1){ //Getting time
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <getGNRMC+0x30>
  	    	strncpy(GPSInfo.time,token,6);
 8005698:	6939      	ldr	r1, [r7, #16]
 800569a:	4b55      	ldr	r3, [pc, #340]	; (80057f0 <getGNRMC+0x17c>)
 800569c:	2206      	movs	r2, #6
 800569e:	0018      	movs	r0, r3
 80056a0:	f00c fce4 	bl	801206c <strncpy>
  	    }
  	    if(i==10){ //Getting GPS status
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b0a      	cmp	r3, #10
 80056a8:	d10d      	bne.n	80056c6 <getGNRMC+0x52>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	214e      	movs	r1, #78	; 0x4e
 80056ae:	0018      	movs	r0, r3
 80056b0:	f00c fcbd 	bl	801202e <strchr>
 80056b4:	1e03      	subs	r3, r0, #0
 80056b6:	d003      	beq.n	80056c0 <getGNRMC+0x4c>
 80056b8:	4b4e      	ldr	r3, [pc, #312]	; (80057f4 <getGNRMC+0x180>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	e002      	b.n	80056c6 <getGNRMC+0x52>
  	        else{GPSInfo.fix=1;}
 80056c0:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <getGNRMC+0x180>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	61da      	str	r2, [r3, #28]
  	    }
  	    if(i==10){ //Getting GPS status
  	        //if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
  	    }
  	    if(i==3){ //Getting Latitude
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d10a      	bne.n	80056e2 <getGNRMC+0x6e>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 fe28 	bl	8006324 <stor>
 80056d4:	1c03      	adds	r3, r0, #0
 80056d6:	1c18      	adds	r0, r3, #0
 80056d8:	f7ff ff80 	bl	80055dc <DegreeDecimalConvert>
 80056dc:	1c02      	adds	r2, r0, #0
 80056de:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <getGNRMC+0x180>)
 80056e0:	601a      	str	r2, [r3, #0]
  	    }
  	    if(i==4){ //Getting Latitude ind
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d105      	bne.n	80056f4 <getGNRMC+0x80>
  	        strcpy(GPSInfo.latD,token);
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <getGNRMC+0x184>)
 80056ec:	0011      	movs	r1, r2
 80056ee:	0018      	movs	r0, r3
 80056f0:	f00c fe3d 	bl	801236e <strcpy>
  	    }
  	    if(i==5){ //Getting Longitude
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d10a      	bne.n	8005710 <getGNRMC+0x9c>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 fe11 	bl	8006324 <stor>
 8005702:	1c03      	adds	r3, r0, #0
 8005704:	1c18      	adds	r0, r3, #0
 8005706:	f7ff ff69 	bl	80055dc <DegreeDecimalConvert>
 800570a:	1c02      	adds	r2, r0, #0
 800570c:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <getGNRMC+0x180>)
 800570e:	605a      	str	r2, [r3, #4]
  	    }
  	    if(i==6){ //Getting Longitude ind
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b06      	cmp	r3, #6
 8005714:	d105      	bne.n	8005722 <getGNRMC+0xae>
  	    	strcpy(GPSInfo.lonD,token);
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4b38      	ldr	r3, [pc, #224]	; (80057fc <getGNRMC+0x188>)
 800571a:	0011      	movs	r1, r2
 800571c:	0018      	movs	r0, r3
 800571e:	f00c fe26 	bl	801236e <strcpy>
  	    }
  	    if(i==9){ //Getting Date
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b09      	cmp	r3, #9
 8005726:	d139      	bne.n	800579c <getGNRMC+0x128>
  			memset(dd,0,10);
 8005728:	4b35      	ldr	r3, [pc, #212]	; (8005800 <getGNRMC+0x18c>)
 800572a:	220a      	movs	r2, #10
 800572c:	2100      	movs	r1, #0
 800572e:	0018      	movs	r0, r3
 8005730:	f00c fc68 	bl	8012004 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e00b      	b.n	8005752 <getGNRMC+0xde>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	7819      	ldrb	r1, [r3, #0]
 8005742:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <getGNRMC+0x18c>)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	18d3      	adds	r3, r2, r3
 8005748:	1c0a      	adds	r2, r1, #0
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b03      	cmp	r3, #3
 8005756:	ddf0      	ble.n	800573a <getGNRMC+0xc6>
  	        dd[4]='2';
 8005758:	4b29      	ldr	r3, [pc, #164]	; (8005800 <getGNRMC+0x18c>)
 800575a:	2232      	movs	r2, #50	; 0x32
 800575c:	711a      	strb	r2, [r3, #4]
  	        dd[5]='0';
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <getGNRMC+0x18c>)
 8005760:	2230      	movs	r2, #48	; 0x30
 8005762:	715a      	strb	r2, [r3, #5]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8005764:	2306      	movs	r3, #6
 8005766:	60bb      	str	r3, [r7, #8]
 8005768:	e00c      	b.n	8005784 <getGNRMC+0x110>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	3b02      	subs	r3, #2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	18d3      	adds	r3, r2, r3
 8005772:	7819      	ldrb	r1, [r3, #0]
 8005774:	4a22      	ldr	r2, [pc, #136]	; (8005800 <getGNRMC+0x18c>)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	18d3      	adds	r3, r2, r3
 800577a:	1c0a      	adds	r2, r1, #0
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3301      	adds	r3, #1
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b07      	cmp	r3, #7
 8005788:	ddef      	ble.n	800576a <getGNRMC+0xf6>
  	        dd[8]='\0';
 800578a:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <getGNRMC+0x18c>)
 800578c:	2200      	movs	r2, #0
 800578e:	721a      	strb	r2, [r3, #8]
  	        strcpy(GPSInfo.date,dd);
 8005790:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <getGNRMC+0x18c>)
 8005792:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <getGNRMC+0x190>)
 8005794:	0011      	movs	r1, r2
 8005796:	0018      	movs	r0, r3
 8005798:	f00c fde9 	bl	801236e <strcpy>
  	    }
  	    if(i==7){ //Getting Speed
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b07      	cmp	r3, #7
 80057a0:	d106      	bne.n	80057b0 <getGNRMC+0x13c>
  	        GPSInfo.speed=stor(token);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 fdbd 	bl	8006324 <stor>
 80057aa:	1c02      	adds	r2, r0, #0
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <getGNRMC+0x180>)
 80057ae:	619a      	str	r2, [r3, #24]
  	    }
  	    if(i==8){ //Getting Course
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d106      	bne.n	80057c4 <getGNRMC+0x150>
  	        GPSInfo.head=stor(token);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f000 fdb3 	bl	8006324 <stor>
 80057be:	1c02      	adds	r2, r0, #0
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <getGNRMC+0x180>)
 80057c2:	615a      	str	r2, [r3, #20]
  	    }
  	    token = strtok(NULL,",");
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <getGNRMC+0x178>)
 80057c6:	0019      	movs	r1, r3
 80057c8:	2000      	movs	r0, #0
 80057ca:	f00c fc63 	bl	8012094 <strtok>
 80057ce:	0003      	movs	r3, r0
 80057d0:	613b      	str	r3, [r7, #16]
        i++;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	3301      	adds	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
    while( token != NULL ) {
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d000      	beq.n	80057e0 <getGNRMC+0x16c>
 80057de:	e758      	b.n	8005692 <getGNRMC+0x1e>
    }
	//free(token);
}
 80057e0:	46c0      	nop			; (mov r8, r8)
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b006      	add	sp, #24
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	08015c28 	.word	0x08015c28
 80057f0:	2000354a 	.word	0x2000354a
 80057f4:	2000351c 	.word	0x2000351c
 80057f8:	20003544 	.word	0x20003544
 80057fc:	20003547 	.word	0x20003547
 8005800:	20003998 	.word	0x20003998
 8005804:	20003559 	.word	0x20003559

08005808 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);
	int i=0;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
    char *token = strtok((char *)ptra, ",");
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <getGNGSA+0x6c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0011      	movs	r1, r2
 800581a:	0018      	movs	r0, r3
 800581c:	f00c fc3a 	bl	8012094 <strtok>
 8005820:	0003      	movs	r3, r0
 8005822:	60bb      	str	r3, [r7, #8]
    while( token != NULL ) {
 8005824:	e01d      	b.n	8005862 <getGNGSA+0x5a>

        if(i==15){ //Getting PDOP
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b0f      	cmp	r3, #15
 800582a:	d106      	bne.n	800583a <getGNGSA+0x32>
    	    GPSInfo.pdop=stor(token);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 fd78 	bl	8006324 <stor>
 8005834:	1c02      	adds	r2, r0, #0
 8005836:	4b10      	ldr	r3, [pc, #64]	; (8005878 <getGNGSA+0x70>)
 8005838:	611a      	str	r2, [r3, #16]
    	}
    	if(i==16){ //Getting HDOP
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b10      	cmp	r3, #16
 800583e:	d106      	bne.n	800584e <getGNGSA+0x46>
    	    GPSInfo.hdop=stor(token);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	0018      	movs	r0, r3
 8005844:	f000 fd6e 	bl	8006324 <stor>
 8005848:	1c02      	adds	r2, r0, #0
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <getGNGSA+0x70>)
 800584c:	60da      	str	r2, [r3, #12]
        }
  	    token = strtok(NULL,",");
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <getGNGSA+0x6c>)
 8005850:	0019      	movs	r1, r3
 8005852:	2000      	movs	r0, #0
 8005854:	f00c fc1e 	bl	8012094 <strtok>
 8005858:	0003      	movs	r3, r0
 800585a:	60bb      	str	r3, [r7, #8]
        i++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
    while( token != NULL ) {
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1de      	bne.n	8005826 <getGNGSA+0x1e>
    }
	//free(token);
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	46bd      	mov	sp, r7
 800586e:	b004      	add	sp, #16
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	08015c28 	.word	0x08015c28
 8005878:	2000351c 	.word	0x2000351c

0800587c <getGNGGA>:



void getGNGGA(const  char * ptra){
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);

	int i=0;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
    char *token = strtok((char *)ptra, ",");
 8005888:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <getGNGGA+0x6c>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0011      	movs	r1, r2
 800588e:	0018      	movs	r0, r3
 8005890:	f00c fc00 	bl	8012094 <strtok>
 8005894:	0003      	movs	r3, r0
 8005896:	60bb      	str	r3, [r7, #8]
    while( token != NULL ) {
 8005898:	e01d      	b.n	80058d6 <getGNGGA+0x5a>
    	if(i==7){ //Getting Satellites no
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b07      	cmp	r3, #7
 800589e:	d106      	bne.n	80058ae <getGNGGA+0x32>
            GPSInfo.sat = atoi(token);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f00a fc66 	bl	8010174 <atoi>
 80058a8:	0002      	movs	r2, r0
 80058aa:	4b10      	ldr	r3, [pc, #64]	; (80058ec <getGNGGA+0x70>)
 80058ac:	621a      	str	r2, [r3, #32]
        }

    	if(i==9){ //Getting Saltitute
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d106      	bne.n	80058c2 <getGNGGA+0x46>
            GPSInfo.alt = stor(token);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fd34 	bl	8006324 <stor>
 80058bc:	1c02      	adds	r2, r0, #0
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <getGNGGA+0x70>)
 80058c0:	609a      	str	r2, [r3, #8]

  	    if(i==6){ //Getting GPS status
  	        //if(strstr(token,"0") != NULL){GPSInfo.fix=0;}
  	        //else{GPSInfo.fix=1;}
  	    }
  	    token = strtok(NULL,",");
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <getGNGGA+0x6c>)
 80058c4:	0019      	movs	r1, r3
 80058c6:	2000      	movs	r0, #0
 80058c8:	f00c fbe4 	bl	8012094 <strtok>
 80058cc:	0003      	movs	r3, r0
 80058ce:	60bb      	str	r3, [r7, #8]
        i++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
    while( token != NULL ) {
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1de      	bne.n	800589a <getGNGGA+0x1e>
    }
	//free(token);
}
 80058dc:	46c0      	nop			; (mov r8, r8)
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b004      	add	sp, #16
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	08015c28 	.word	0x08015c28
 80058ec:	2000351c 	.word	0x2000351c

080058f0 <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	212a      	movs	r1, #42	; 0x2a
 80058fc:	0018      	movs	r0, r3
 80058fe:	f00c fb96 	bl	801202e <strchr>
 8005902:	0003      	movs	r3, r0
 8005904:	3301      	adds	r3, #1
 8005906:	2210      	movs	r2, #16
 8005908:	2100      	movs	r1, #0
 800590a:	0018      	movs	r0, r3
 800590c:	f00b fbb8 	bl	8011080 <strtol>
 8005910:	0002      	movs	r2, r0
 8005912:	230e      	movs	r3, #14
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	701a      	strb	r2, [r3, #0]

    char p;
    uint8_t sum = 0;
 8005918:	230f      	movs	r3, #15
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
    ++message;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3301      	adds	r3, #1
 8005924:	607b      	str	r3, [r7, #4]
    while ((p = *message++) != '*') {
 8005926:	e008      	b.n	800593a <nmea_valid_checksum+0x4a>
        sum ^= p;
 8005928:	220f      	movs	r2, #15
 800592a:	18bb      	adds	r3, r7, r2
 800592c:	18b9      	adds	r1, r7, r2
 800592e:	220d      	movs	r2, #13
 8005930:	18ba      	adds	r2, r7, r2
 8005932:	7809      	ldrb	r1, [r1, #0]
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	404a      	eors	r2, r1
 8005938:	701a      	strb	r2, [r3, #0]
    while ((p = *message++) != '*') {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	210d      	movs	r1, #13
 8005942:	187a      	adds	r2, r7, r1
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	7013      	strb	r3, [r2, #0]
 8005948:	187b      	adds	r3, r7, r1
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b2a      	cmp	r3, #42	; 0x2a
 800594e:	d1eb      	bne.n	8005928 <nmea_valid_checksum+0x38>
    }

    if (sum != checksum) {
 8005950:	230f      	movs	r3, #15
 8005952:	18fa      	adds	r2, r7, r3
 8005954:	230e      	movs	r3, #14
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <nmea_valid_checksum+0x74>
        return 0;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <nmea_valid_checksum+0x76>
    }

    return 1;
 8005964:	2301      	movs	r3, #1
}
 8005966:	0018      	movs	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	b004      	add	sp, #16
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <validateGPS>:
int validateGPS(const char * str){
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	int GPStyp=0;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]

	uint8_t checksum = 0;
 800597c:	250b      	movs	r5, #11
 800597e:	197b      	adds	r3, r7, r5
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8005984:	197c      	adds	r4, r7, r5
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff ffb1 	bl	80058f0 <nmea_valid_checksum>
 800598e:	0003      	movs	r3, r0
 8005990:	7023      	strb	r3, [r4, #0]
 8005992:	197b      	adds	r3, r7, r5
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d001      	beq.n	800599e <validateGPS+0x2e>
	        return 0;
 800599a:	2300      	movs	r3, #0
 800599c:	e056      	b.n	8005a4c <validateGPS+0xdc>
	    }
	    if(strlen(str)<4){return 0;}
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7fa fbb1 	bl	8000108 <strlen>
 80059a6:	0003      	movs	r3, r0
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d801      	bhi.n	80059b0 <validateGPS+0x40>
 80059ac:	2300      	movs	r3, #0
 80059ae:	e04d      	b.n	8005a4c <validateGPS+0xdc>

	    if (strstr(str, "GNRMC") != NULL) {
 80059b0:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <validateGPS+0xe4>)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	0011      	movs	r1, r2
 80059b6:	0018      	movs	r0, r3
 80059b8:	f00c fbd4 	bl	8012164 <strstr>
 80059bc:	1e03      	subs	r3, r0, #0
 80059be:	d006      	beq.n	80059ce <validateGPS+0x5e>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 80059c0:	2301      	movs	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	0018      	movs	r0, r3
 80059c8:	f7ff fe54 	bl	8005674 <getGNRMC>
 80059cc:	e03d      	b.n	8005a4a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGGA") != NULL) {
 80059ce:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <validateGPS+0xe8>)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0011      	movs	r1, r2
 80059d4:	0018      	movs	r0, r3
 80059d6:	f00c fbc5 	bl	8012164 <strstr>
 80059da:	1e03      	subs	r3, r0, #0
 80059dc:	d006      	beq.n	80059ec <validateGPS+0x7c>
	    	//Debug_Tx(str);
	    	GPStyp=2; getGNGGA(str);
 80059de:	2302      	movs	r3, #2
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	0018      	movs	r0, r3
 80059e6:	f7ff ff49 	bl	800587c <getGNGGA>
 80059ea:	e02e      	b.n	8005a4a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGSA") != NULL) {
 80059ec:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <validateGPS+0xec>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0011      	movs	r1, r2
 80059f2:	0018      	movs	r0, r3
 80059f4:	f00c fbb6 	bl	8012164 <strstr>
 80059f8:	1e03      	subs	r3, r0, #0
 80059fa:	d006      	beq.n	8005a0a <validateGPS+0x9a>
	    	//Debug_Tx(str);
	    	GPStyp=3;getGNGSA(str);
 80059fc:	2303      	movs	r3, #3
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7ff ff00 	bl	8005808 <getGNGSA>
 8005a08:	e01f      	b.n	8005a4a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGSV") != NULL) {
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <validateGPS+0xf0>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	0011      	movs	r1, r2
 8005a10:	0018      	movs	r0, r3
 8005a12:	f00c fba7 	bl	8012164 <strstr>
 8005a16:	1e03      	subs	r3, r0, #0
 8005a18:	d002      	beq.n	8005a20 <validateGPS+0xb0>
	    	GPStyp=4;
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e014      	b.n	8005a4a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGLL") != NULL) {
 8005a20:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <validateGPS+0xf4>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0011      	movs	r1, r2
 8005a26:	0018      	movs	r0, r3
 8005a28:	f00c fb9c 	bl	8012164 <strstr>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d002      	beq.n	8005a36 <validateGPS+0xc6>
	    	GPStyp=5;
 8005a30:	2305      	movs	r3, #5
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e009      	b.n	8005a4a <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
 8005a36:	4a0c      	ldr	r2, [pc, #48]	; (8005a68 <validateGPS+0xf8>)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	0011      	movs	r1, r2
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f00c fb91 	bl	8012164 <strstr>
 8005a42:	1e03      	subs	r3, r0, #0
 8005a44:	d001      	beq.n	8005a4a <validateGPS+0xda>
	    	GPStyp=6;
 8005a46:	2306      	movs	r3, #6
 8005a48:	60fb      	str	r3, [r7, #12]
	    }
    return(GPStyp);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b004      	add	sp, #16
 8005a52:	bdb0      	pop	{r4, r5, r7, pc}
 8005a54:	08016ac8 	.word	0x08016ac8
 8005a58:	08016ad0 	.word	0x08016ad0
 8005a5c:	08016ad8 	.word	0x08016ad8
 8005a60:	08016ae0 	.word	0x08016ae0
 8005a64:	08016ae8 	.word	0x08016ae8
 8005a68:	08016af0 	.word	0x08016af0

08005a6c <getSpeed>:

float getSpeed(){
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
	return GPSInfo.speed;
 8005a70:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <getSpeed+0x10>)
 8005a72:	699b      	ldr	r3, [r3, #24]
}
 8005a74:	1c18      	adds	r0, r3, #0
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	2000351c 	.word	0x2000351c

08005a80 <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
	    //Debug_Tx(gpsData);
		int valid=0 ;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
		if(strlen((char*)gpsData)>5){
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <ProcessGPS+0x5c>)
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f7fa fb3b 	bl	8000108 <strlen>
 8005a92:	0003      	movs	r3, r0
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	d91d      	bls.n	8005ad4 <ProcessGPS+0x54>

			char *tk= NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	607b      	str	r3, [r7, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8005a9c:	1d3a      	adds	r2, r7, #4
 8005a9e:	4910      	ldr	r1, [pc, #64]	; (8005ae0 <ProcessGPS+0x60>)
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <ProcessGPS+0x5c>)
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f00c fb59 	bl	801215a <strtok_r>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	60bb      	str	r3, [r7, #8]
			while( token != NULL ) {
 8005aac:	e00f      	b.n	8005ace <ProcessGPS+0x4e>
				valid=valid+validateGPS(token);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7ff ff5d 	bl	8005970 <validateGPS>
 8005ab6:	0002      	movs	r2, r0
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8005abe:	1d3a      	adds	r2, r7, #4
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <ProcessGPS+0x60>)
 8005ac2:	0019      	movs	r1, r3
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f00c fb48 	bl	801215a <strtok_r>
 8005aca:	0003      	movs	r3, r0
 8005acc:	60bb      	str	r3, [r7, #8]
			while( token != NULL ) {
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1ec      	bne.n	8005aae <ProcessGPS+0x2e>
			}
			//free(token);
		}
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b004      	add	sp, #16
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20003568 	.word	0x20003568
 8005ae0:	08015b74 	.word	0x08015b74

08005ae4 <tic>:

int ticT;
int tocT;
char tocTxt[30];
char time1[10];
int tic(){
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8005ae8:	f002 f94e 	bl	8007d88 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <toc>:
void toc(int tc, char Message[]){
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	strcat(tocTxt,time1);
	Debug_Tx(tocTxt);
	*/


}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b002      	add	sp, #8
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b0c:	f002 f90a 	bl	8007d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b10:	f000 f852 	bl	8005bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b14:	f000 fae4 	bl	80060e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b18:	f000 fab4 	bl	8006084 <MX_DMA_Init>
  MX_ADC1_Init();
 8005b1c:	f000 f896 	bl	8005c4c <MX_ADC1_Init>
  MX_I2C1_Init();
 8005b20:	f000 f926 	bl	8005d70 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005b24:	f000 f964 	bl	8005df0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8005b28:	f000 f9a0 	bl	8005e6c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8005b2c:	f000 f9da 	bl	8005ee4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005b30:	f000 fa26 	bl	8005f80 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005b34:	f000 fa72 	bl	800601c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005b38:	f008 f802 	bl	800db40 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testQ */
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005b3c:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <main+0x84>)
 8005b3e:	001a      	movs	r2, r3
 8005b40:	2102      	movs	r1, #2
 8005b42:	2010      	movs	r0, #16
 8005b44:	f008 f8f6 	bl	800dd34 <osMessageQueueNew>
 8005b48:	0002      	movs	r2, r0
 8005b4a:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <main+0x88>)
 8005b4c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <main+0x8c>)
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <main+0x90>)
 8005b52:	2100      	movs	r1, #0
 8005b54:	0018      	movs	r0, r3
 8005b56:	f008 f83b 	bl	800dbd0 <osThreadNew>
 8005b5a:	0002      	movs	r2, r0
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <main+0x94>)
 8005b5e:	601a      	str	r2, [r3, #0]

  /* creation of GPS_read */
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005b60:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <main+0x98>)
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <main+0x9c>)
 8005b64:	2100      	movs	r1, #0
 8005b66:	0018      	movs	r0, r3
 8005b68:	f008 f832 	bl	800dbd0 <osThreadNew>
 8005b6c:	0002      	movs	r2, r0
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <main+0xa0>)
 8005b70:	601a      	str	r2, [r3, #0]

  /* creation of StatusLED */
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005b72:	4a0e      	ldr	r2, [pc, #56]	; (8005bac <main+0xa4>)
 8005b74:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <main+0xa8>)
 8005b76:	2100      	movs	r1, #0
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f008 f829 	bl	800dbd0 <osThreadNew>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <main+0xac>)
 8005b82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005b84:	f007 fffe 	bl	800db84 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005b88:	e7fe      	b.n	8005b88 <main+0x80>
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	080172e8 	.word	0x080172e8
 8005b90:	20003aa8 	.word	0x20003aa8
 8005b94:	0801727c 	.word	0x0801727c
 8005b98:	08006649 	.word	0x08006649
 8005b9c:	20003a9c 	.word	0x20003a9c
 8005ba0:	080172a0 	.word	0x080172a0
 8005ba4:	080066f1 	.word	0x080066f1
 8005ba8:	20003aa0 	.word	0x20003aa0
 8005bac:	080172c4 	.word	0x080172c4
 8005bb0:	08006701 	.word	0x08006701
 8005bb4:	20003aa4 	.word	0x20003aa4

08005bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b093      	sub	sp, #76	; 0x4c
 8005bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bbe:	2414      	movs	r4, #20
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	2334      	movs	r3, #52	; 0x34
 8005bc6:	001a      	movs	r2, r3
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f00c fa1b 	bl	8012004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005bce:	1d3b      	adds	r3, r7, #4
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	2310      	movs	r3, #16
 8005bd4:	001a      	movs	r2, r3
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	f00c fa14 	bl	8012004 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	0018      	movs	r0, r3
 8005be2:	f004 fbdf 	bl	800a3a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005be6:	193b      	adds	r3, r7, r4
 8005be8:	2202      	movs	r2, #2
 8005bea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005bec:	193b      	adds	r3, r7, r4
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	0052      	lsls	r2, r2, #1
 8005bf2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005bf4:	193b      	adds	r3, r7, r4
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005bfa:	193b      	adds	r3, r7, r4
 8005bfc:	2240      	movs	r2, #64	; 0x40
 8005bfe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005c00:	193b      	adds	r3, r7, r4
 8005c02:	2200      	movs	r2, #0
 8005c04:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c06:	193b      	adds	r3, r7, r4
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f004 fc17 	bl	800a43c <HAL_RCC_OscConfig>
 8005c0e:	1e03      	subs	r3, r0, #0
 8005c10:	d001      	beq.n	8005c16 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8005c12:	f001 fb83 	bl	800731c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	2207      	movs	r2, #7
 8005c1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005c1c:	1d3b      	adds	r3, r7, #4
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	2200      	movs	r2, #0
 8005c26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	22a0      	movs	r2, #160	; 0xa0
 8005c2c:	01d2      	lsls	r2, r2, #7
 8005c2e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005c30:	1d3b      	adds	r3, r7, #4
 8005c32:	2100      	movs	r1, #0
 8005c34:	0018      	movs	r0, r3
 8005c36:	f004 ff11 	bl	800aa5c <HAL_RCC_ClockConfig>
 8005c3a:	1e03      	subs	r3, r0, #0
 8005c3c:	d001      	beq.n	8005c42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8005c3e:	f001 fb6d 	bl	800731c <Error_Handler>
  }
}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	46bd      	mov	sp, r7
 8005c46:	b013      	add	sp, #76	; 0x4c
 8005c48:	bd90      	pop	{r4, r7, pc}
	...

08005c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	0018      	movs	r0, r3
 8005c56:	230c      	movs	r3, #12
 8005c58:	001a      	movs	r2, r3
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	f00c f9d2 	bl	8012004 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005c60:	4b3e      	ldr	r3, [pc, #248]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c62:	4a3f      	ldr	r2, [pc, #252]	; (8005d60 <MX_ADC1_Init+0x114>)
 8005c64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005c66:	4b3d      	ldr	r3, [pc, #244]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	05d2      	lsls	r2, r2, #23
 8005c6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005c6e:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c74:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005c7a:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c7c:	2280      	movs	r2, #128	; 0x80
 8005c7e:	0392      	lsls	r2, r2, #14
 8005c80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c84:	2204      	movs	r2, #4
 8005c86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005c88:	4b34      	ldr	r3, [pc, #208]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8005c8e:	4b33      	ldr	r3, [pc, #204]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005c94:	4b31      	ldr	r3, [pc, #196]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8005c9a:	4b30      	ldr	r3, [pc, #192]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ca0:	4b2e      	ldr	r3, [pc, #184]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ca8:	4b2c      	ldr	r3, [pc, #176]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005cae:	4b2b      	ldr	r3, [pc, #172]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005cb4:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cb6:	222c      	movs	r2, #44	; 0x2c
 8005cb8:	2100      	movs	r1, #0
 8005cba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005cbc:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8005cc2:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8005cc8:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8005cce:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cd0:	223c      	movs	r2, #60	; 0x3c
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8005cd6:	4b21      	ldr	r3, [pc, #132]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f002 f9de 	bl	80080a0 <HAL_ADC_Init>
 8005ce4:	1e03      	subs	r3, r0, #0
 8005ce6:	d001      	beq.n	8005cec <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8005ce8:	f001 fb18 	bl	800731c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005cec:	1d3b      	adds	r3, r7, #4
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <MX_ADC1_Init+0x118>)
 8005cf0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005cfe:	1d3a      	adds	r2, r7, #4
 8005d00:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005d02:	0011      	movs	r1, r2
 8005d04:	0018      	movs	r0, r3
 8005d06:	f002 fc19 	bl	800853c <HAL_ADC_ConfigChannel>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d001      	beq.n	8005d12 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8005d0e:	f001 fb05 	bl	800731c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <MX_ADC1_Init+0x11c>)
 8005d16:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d1e:	1d3a      	adds	r2, r7, #4
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f002 fc09 	bl	800853c <HAL_ADC_ConfigChannel>
 8005d2a:	1e03      	subs	r3, r0, #0
 8005d2c:	d001      	beq.n	8005d32 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8005d2e:	f001 faf5 	bl	800731c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <MX_ADC1_Init+0x120>)
 8005d36:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005d38:	1d3b      	adds	r3, r7, #4
 8005d3a:	220c      	movs	r2, #12
 8005d3c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d3e:	1d3a      	adds	r2, r7, #4
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <MX_ADC1_Init+0x110>)
 8005d42:	0011      	movs	r1, r2
 8005d44:	0018      	movs	r0, r3
 8005d46:	f002 fbf9 	bl	800853c <HAL_ADC_ConfigChannel>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8005d4e:	f001 fae5 	bl	800731c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	46bd      	mov	sp, r7
 8005d56:	b004      	add	sp, #16
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	2000046c 	.word	0x2000046c
 8005d60:	40012400 	.word	0x40012400
 8005d64:	04000002 	.word	0x04000002
 8005d68:	24000200 	.word	0x24000200
 8005d6c:	2c000800 	.word	0x2c000800

08005d70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d74:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <MX_I2C1_Init+0x78>)
 8005d78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <MX_I2C1_Init+0x7c>)
 8005d7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d86:	4b17      	ldr	r3, [pc, #92]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d8c:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005daa:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005dac:	0018      	movs	r0, r3
 8005dae:	f003 fc8d 	bl	80096cc <HAL_I2C_Init>
 8005db2:	1e03      	subs	r3, r0, #0
 8005db4:	d001      	beq.n	8005dba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005db6:	f001 fab1 	bl	800731c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f004 fa58 	bl	800a274 <HAL_I2CEx_ConfigAnalogFilter>
 8005dc4:	1e03      	subs	r3, r0, #0
 8005dc6:	d001      	beq.n	8005dcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005dc8:	f001 faa8 	bl	800731c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <MX_I2C1_Init+0x74>)
 8005dce:	2100      	movs	r1, #0
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f004 fa9b 	bl	800a30c <HAL_I2CEx_ConfigDigitalFilter>
 8005dd6:	1e03      	subs	r3, r0, #0
 8005dd8:	d001      	beq.n	8005dde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005dda:	f001 fa9f 	bl	800731c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	2000052c 	.word	0x2000052c
 8005de8:	40005400 	.word	0x40005400
 8005dec:	00000e14 	.word	0x00000e14

08005df0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005df6:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <MX_SPI1_Init+0x78>)
 8005df8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005dfa:	4b1a      	ldr	r3, [pc, #104]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005dfc:	2282      	movs	r2, #130	; 0x82
 8005dfe:	0052      	lsls	r2, r2, #1
 8005e00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e02:	4b18      	ldr	r3, [pc, #96]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e08:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e0a:	22e0      	movs	r2, #224	; 0xe0
 8005e0c:	00d2      	lsls	r2, r2, #3
 8005e0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e1c:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e1e:	2280      	movs	r2, #128	; 0x80
 8005e20:	0092      	lsls	r2, r2, #2
 8005e22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005e24:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e26:	2208      	movs	r2, #8
 8005e28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e2a:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e3e:	2207      	movs	r2, #7
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <MX_SPI1_Init+0x74>)
 8005e50:	0018      	movs	r0, r3
 8005e52:	f005 f90b 	bl	800b06c <HAL_SPI_Init>
 8005e56:	1e03      	subs	r3, r0, #0
 8005e58:	d001      	beq.n	8005e5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005e5a:	f001 fa5f 	bl	800731c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000580 	.word	0x20000580
 8005e68:	40013000 	.word	0x40013000

08005e6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e72:	1d3b      	adds	r3, r7, #4
 8005e74:	0018      	movs	r0, r3
 8005e76:	230c      	movs	r3, #12
 8005e78:	001a      	movs	r2, r3
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f00c f8c2 	bl	8012004 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005e80:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <MX_TIM6_Init+0x6c>)
 8005e82:	4a16      	ldr	r2, [pc, #88]	; (8005edc <MX_TIM6_Init+0x70>)
 8005e84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <MX_TIM6_Init+0x6c>)
 8005e88:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <MX_TIM6_Init+0x74>)
 8005e8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <MX_TIM6_Init+0x6c>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <MX_TIM6_Init+0x6c>)
 8005e94:	22f4      	movs	r2, #244	; 0xf4
 8005e96:	32ff      	adds	r2, #255	; 0xff
 8005e98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <MX_TIM6_Init+0x6c>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <MX_TIM6_Init+0x6c>)
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f005 fe3a 	bl	800bb1c <HAL_TIM_Base_Init>
 8005ea8:	1e03      	subs	r3, r0, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8005eac:	f001 fa36 	bl	800731c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eb0:	1d3b      	adds	r3, r7, #4
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eb6:	1d3b      	adds	r3, r7, #4
 8005eb8:	2200      	movs	r2, #0
 8005eba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005ebc:	1d3a      	adds	r2, r7, #4
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <MX_TIM6_Init+0x6c>)
 8005ec0:	0011      	movs	r1, r2
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f006 f8a0 	bl	800c008 <HAL_TIMEx_MasterConfigSynchronization>
 8005ec8:	1e03      	subs	r3, r0, #0
 8005eca:	d001      	beq.n	8005ed0 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8005ecc:	f001 fa26 	bl	800731c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b004      	add	sp, #16
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200005e4 	.word	0x200005e4
 8005edc:	40001000 	.word	0x40001000
 8005ee0:	00001f3f 	.word	0x00001f3f

08005ee4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ee8:	4b23      	ldr	r3, [pc, #140]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005eea:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <MX_USART1_UART_Init+0x98>)
 8005eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005eee:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005ef0:	2296      	movs	r2, #150	; 0x96
 8005ef2:	0192      	lsls	r2, r2, #6
 8005ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ef6:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005efc:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f02:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f08:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f0a:	220c      	movs	r2, #12
 8005f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f14:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f20:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f006 f8ea 	bl	800c108 <HAL_UART_Init>
 8005f34:	1e03      	subs	r3, r0, #0
 8005f36:	d001      	beq.n	8005f3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005f38:	f001 f9f0 	bl	800731c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f3e:	2100      	movs	r1, #0
 8005f40:	0018      	movs	r0, r3
 8005f42:	f007 fc93 	bl	800d86c <HAL_UARTEx_SetTxFifoThreshold>
 8005f46:	1e03      	subs	r3, r0, #0
 8005f48:	d001      	beq.n	8005f4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005f4a:	f001 f9e7 	bl	800731c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f50:	2100      	movs	r1, #0
 8005f52:	0018      	movs	r0, r3
 8005f54:	f007 fcca 	bl	800d8ec <HAL_UARTEx_SetRxFifoThreshold>
 8005f58:	1e03      	subs	r3, r0, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005f5c:	f001 f9de 	bl	800731c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <MX_USART1_UART_Init+0x94>)
 8005f62:	0018      	movs	r0, r3
 8005f64:	f007 fc48 	bl	800d7f8 <HAL_UARTEx_DisableFifoMode>
 8005f68:	1e03      	subs	r3, r0, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005f6c:	f001 f9d6 	bl	800731c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f70:	46c0      	nop			; (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	20000630 	.word	0x20000630
 8005f7c:	40013800 	.word	0x40013800

08005f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f84:	4b23      	ldr	r3, [pc, #140]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005f86:	4a24      	ldr	r2, [pc, #144]	; (8006018 <MX_USART2_UART_Init+0x98>)
 8005f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005f8a:	4b22      	ldr	r3, [pc, #136]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005f8c:	2296      	movs	r2, #150	; 0x96
 8005f8e:	0192      	lsls	r2, r2, #6
 8005f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f92:	4b20      	ldr	r3, [pc, #128]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f9e:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005faa:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fb0:	4b18      	ldr	r3, [pc, #96]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fb6:	4b17      	ldr	r3, [pc, #92]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005fbc:	4b15      	ldr	r3, [pc, #84]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fc2:	4b14      	ldr	r3, [pc, #80]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fc8:	4b12      	ldr	r3, [pc, #72]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f006 f89c 	bl	800c108 <HAL_UART_Init>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d001      	beq.n	8005fd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005fd4:	f001 f9a2 	bl	800731c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005fd8:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fda:	2100      	movs	r1, #0
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f007 fc45 	bl	800d86c <HAL_UARTEx_SetTxFifoThreshold>
 8005fe2:	1e03      	subs	r3, r0, #0
 8005fe4:	d001      	beq.n	8005fea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005fe6:	f001 f999 	bl	800731c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005fea:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005fec:	2100      	movs	r1, #0
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f007 fc7c 	bl	800d8ec <HAL_UARTEx_SetRxFifoThreshold>
 8005ff4:	1e03      	subs	r3, r0, #0
 8005ff6:	d001      	beq.n	8005ffc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005ff8:	f001 f990 	bl	800731c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <MX_USART2_UART_Init+0x94>)
 8005ffe:	0018      	movs	r0, r3
 8006000:	f007 fbfa 	bl	800d7f8 <HAL_UARTEx_DisableFifoMode>
 8006004:	1e03      	subs	r3, r0, #0
 8006006:	d001      	beq.n	800600c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006008:	f001 f988 	bl	800731c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	200006c4 	.word	0x200006c4
 8006018:	40004400 	.word	0x40004400

0800601c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006020:	4b16      	ldr	r3, [pc, #88]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006022:	4a17      	ldr	r2, [pc, #92]	; (8006080 <MX_USART3_UART_Init+0x64>)
 8006024:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006028:	2296      	movs	r2, #150	; 0x96
 800602a:	0192      	lsls	r2, r2, #6
 800602c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006030:	2200      	movs	r2, #0
 8006032:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006034:	4b11      	ldr	r3, [pc, #68]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006036:	2200      	movs	r2, #0
 8006038:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800603a:	4b10      	ldr	r3, [pc, #64]	; (800607c <MX_USART3_UART_Init+0x60>)
 800603c:	2200      	movs	r2, #0
 800603e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006040:	4b0e      	ldr	r3, [pc, #56]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006042:	220c      	movs	r2, #12
 8006044:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006046:	4b0d      	ldr	r3, [pc, #52]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006048:	2200      	movs	r2, #0
 800604a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <MX_USART3_UART_Init+0x60>)
 800604e:	2200      	movs	r2, #0
 8006050:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006054:	2200      	movs	r2, #0
 8006056:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <MX_USART3_UART_Init+0x60>)
 800605a:	2200      	movs	r2, #0
 800605c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800605e:	4b07      	ldr	r3, [pc, #28]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006060:	2200      	movs	r2, #0
 8006062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <MX_USART3_UART_Init+0x60>)
 8006066:	0018      	movs	r0, r3
 8006068:	f006 f84e 	bl	800c108 <HAL_UART_Init>
 800606c:	1e03      	subs	r3, r0, #0
 800606e:	d001      	beq.n	8006074 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006070:	f001 f954 	bl	800731c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	20000758 	.word	0x20000758
 8006080:	40004800 	.word	0x40004800

08006084 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <MX_DMA_Init+0x58>)
 800608c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <MX_DMA_Init+0x58>)
 8006090:	2101      	movs	r1, #1
 8006092:	430a      	orrs	r2, r1
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <MX_DMA_Init+0x58>)
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	2201      	movs	r2, #1
 800609c:	4013      	ands	r3, r2
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80060a2:	2200      	movs	r2, #0
 80060a4:	2103      	movs	r1, #3
 80060a6:	2009      	movs	r0, #9
 80060a8:	f002 fdbc 	bl	8008c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80060ac:	2009      	movs	r0, #9
 80060ae:	f002 fdce 	bl	8008c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80060b2:	2200      	movs	r2, #0
 80060b4:	2103      	movs	r1, #3
 80060b6:	200a      	movs	r0, #10
 80060b8:	f002 fdb4 	bl	8008c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80060bc:	200a      	movs	r0, #10
 80060be:	f002 fdc6 	bl	8008c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2103      	movs	r1, #3
 80060c6:	200b      	movs	r0, #11
 80060c8:	f002 fdac 	bl	8008c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 80060cc:	200b      	movs	r0, #11
 80060ce:	f002 fdbe 	bl	8008c4e <HAL_NVIC_EnableIRQ>

}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b002      	add	sp, #8
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	40021000 	.word	0x40021000

080060e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80060e0:	b590      	push	{r4, r7, lr}
 80060e2:	b08b      	sub	sp, #44	; 0x2c
 80060e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e6:	2414      	movs	r4, #20
 80060e8:	193b      	adds	r3, r7, r4
 80060ea:	0018      	movs	r0, r3
 80060ec:	2314      	movs	r3, #20
 80060ee:	001a      	movs	r2, r3
 80060f0:	2100      	movs	r1, #0
 80060f2:	f00b ff87 	bl	8012004 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060f6:	4b75      	ldr	r3, [pc, #468]	; (80062cc <MX_GPIO_Init+0x1ec>)
 80060f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fa:	4b74      	ldr	r3, [pc, #464]	; (80062cc <MX_GPIO_Init+0x1ec>)
 80060fc:	2104      	movs	r1, #4
 80060fe:	430a      	orrs	r2, r1
 8006100:	635a      	str	r2, [r3, #52]	; 0x34
 8006102:	4b72      	ldr	r3, [pc, #456]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	2204      	movs	r2, #4
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800610e:	4b6f      	ldr	r3, [pc, #444]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006112:	4b6e      	ldr	r3, [pc, #440]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006114:	2120      	movs	r1, #32
 8006116:	430a      	orrs	r2, r1
 8006118:	635a      	str	r2, [r3, #52]	; 0x34
 800611a:	4b6c      	ldr	r3, [pc, #432]	; (80062cc <MX_GPIO_Init+0x1ec>)
 800611c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611e:	2220      	movs	r2, #32
 8006120:	4013      	ands	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006126:	4b69      	ldr	r3, [pc, #420]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612a:	4b68      	ldr	r3, [pc, #416]	; (80062cc <MX_GPIO_Init+0x1ec>)
 800612c:	2101      	movs	r1, #1
 800612e:	430a      	orrs	r2, r1
 8006130:	635a      	str	r2, [r3, #52]	; 0x34
 8006132:	4b66      	ldr	r3, [pc, #408]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006136:	2201      	movs	r2, #1
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800613e:	4b63      	ldr	r3, [pc, #396]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006142:	4b62      	ldr	r3, [pc, #392]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006144:	2102      	movs	r1, #2
 8006146:	430a      	orrs	r2, r1
 8006148:	635a      	str	r2, [r3, #52]	; 0x34
 800614a:	4b60      	ldr	r3, [pc, #384]	; (80062cc <MX_GPIO_Init+0x1ec>)
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	2202      	movs	r2, #2
 8006150:	4013      	ands	r3, r2
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006156:	4b5d      	ldr	r3, [pc, #372]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615a:	4b5c      	ldr	r3, [pc, #368]	; (80062cc <MX_GPIO_Init+0x1ec>)
 800615c:	2108      	movs	r1, #8
 800615e:	430a      	orrs	r2, r1
 8006160:	635a      	str	r2, [r3, #52]	; 0x34
 8006162:	4b5a      	ldr	r3, [pc, #360]	; (80062cc <MX_GPIO_Init+0x1ec>)
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	2208      	movs	r2, #8
 8006168:	4013      	ands	r3, r2
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800616e:	4958      	ldr	r1, [pc, #352]	; (80062d0 <MX_GPIO_Init+0x1f0>)
 8006170:	23a0      	movs	r3, #160	; 0xa0
 8006172:	05db      	lsls	r3, r3, #23
 8006174:	2200      	movs	r2, #0
 8006176:	0018      	movs	r0, r3
 8006178:	f003 fa6f 	bl	800965a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800617c:	4b55      	ldr	r3, [pc, #340]	; (80062d4 <MX_GPIO_Init+0x1f4>)
 800617e:	2200      	movs	r2, #0
 8006180:	21c0      	movs	r1, #192	; 0xc0
 8006182:	0018      	movs	r0, r3
 8006184:	f003 fa69 	bl	800965a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8006188:	4b53      	ldr	r3, [pc, #332]	; (80062d8 <MX_GPIO_Init+0x1f8>)
 800618a:	2200      	movs	r2, #0
 800618c:	2107      	movs	r1, #7
 800618e:	0018      	movs	r0, r3
 8006190:	f003 fa63 	bl	800965a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8006194:	238e      	movs	r3, #142	; 0x8e
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4850      	ldr	r0, [pc, #320]	; (80062dc <MX_GPIO_Init+0x1fc>)
 800619a:	2200      	movs	r2, #0
 800619c:	0019      	movs	r1, r3
 800619e:	f003 fa5c 	bl	800965a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_MEM_Pin DO_GPS_VCC_EN_Pin */
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 80061a2:	193b      	adds	r3, r7, r4
 80061a4:	4a4a      	ldr	r2, [pc, #296]	; (80062d0 <MX_GPIO_Init+0x1f0>)
 80061a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	2201      	movs	r2, #1
 80061ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	2200      	movs	r2, #0
 80061b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b4:	193b      	adds	r3, r7, r4
 80061b6:	2200      	movs	r2, #0
 80061b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ba:	193a      	adds	r2, r7, r4
 80061bc:	23a0      	movs	r3, #160	; 0xa0
 80061be:	05db      	lsls	r3, r3, #23
 80061c0:	0011      	movs	r1, r2
 80061c2:	0018      	movs	r0, r3
 80061c4:	f003 f8c8 	bl	8009358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_IN2_Pin DI_IN3_Pin DI_MAINS_STATE_Pin DI_ACC_STATE_Pin
                            DI_INT1_ACCEL_Pin */
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80061c8:	0021      	movs	r1, r4
 80061ca:	187b      	adds	r3, r7, r1
 80061cc:	22f2      	movs	r2, #242	; 0xf2
 80061ce:	01d2      	lsls	r2, r2, #7
 80061d0:	601a      	str	r2, [r3, #0]
                          | DI_INT1_ACCEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061d2:	000c      	movs	r4, r1
 80061d4:	193b      	adds	r3, r7, r4
 80061d6:	2200      	movs	r2, #0
 80061d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061da:	193b      	adds	r3, r7, r4
 80061dc:	2200      	movs	r2, #0
 80061de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061e0:	193b      	adds	r3, r7, r4
 80061e2:	4a3e      	ldr	r2, [pc, #248]	; (80062dc <MX_GPIO_Init+0x1fc>)
 80061e4:	0019      	movs	r1, r3
 80061e6:	0010      	movs	r0, r2
 80061e8:	f003 f8b6 	bl	8009358 <HAL_GPIO_Init>


  /*Configure GPIO pins :  DI_BOX_STATE_Pin  */
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80061ec:	0021      	movs	r1, r4
 80061ee:	187b      	adds	r3, r7, r1
 80061f0:	2280      	movs	r2, #128	; 0x80
 80061f2:	0212      	lsls	r2, r2, #8
 80061f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061f6:	000c      	movs	r4, r1
 80061f8:	193b      	adds	r3, r7, r4
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80061fe:	193b      	adds	r3, r7, r4
 8006200:	2201      	movs	r2, #1
 8006202:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006204:	193b      	adds	r3, r7, r4
 8006206:	4a35      	ldr	r2, [pc, #212]	; (80062dc <MX_GPIO_Init+0x1fc>)
 8006208:	0019      	movs	r1, r3
 800620a:	0010      	movs	r0, r2
 800620c:	f003 f8a4 	bl	8009358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_SOS_STATE_Pin  */
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8006210:	193b      	adds	r3, r7, r4
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	0052      	lsls	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006218:	193b      	adds	r3, r7, r4
 800621a:	2200      	movs	r2, #0
 800621c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 800621e:	193b      	adds	r3, r7, r4
 8006220:	2201      	movs	r2, #1
 8006222:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006224:	193a      	adds	r2, r7, r4
 8006226:	23a0      	movs	r3, #160	; 0xa0
 8006228:	05db      	lsls	r3, r3, #23
 800622a:	0011      	movs	r1, r2
 800622c:	0018      	movs	r0, r3
 800622e:	f003 f893 	bl	8009358 <HAL_GPIO_Init>

  /*Configure GPIO pins :  DI_IN1_Pin */
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8006232:	193b      	adds	r3, r7, r4
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	0152      	lsls	r2, r2, #5
 8006238:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800623a:	193b      	adds	r3, r7, r4
 800623c:	2200      	movs	r2, #0
 800623e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006240:	193b      	adds	r3, r7, r4
 8006242:	2200      	movs	r2, #0
 8006244:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006246:	193a      	adds	r2, r7, r4
 8006248:	23a0      	movs	r3, #160	; 0xa0
 800624a:	05db      	lsls	r3, r3, #23
 800624c:	0011      	movs	r1, r2
 800624e:	0018      	movs	r0, r3
 8006250:	f003 f882 	bl	8009358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_GSM_VCC_EN_Pin DO_PWRKEY_Pin */
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8006254:	193b      	adds	r3, r7, r4
 8006256:	22c0      	movs	r2, #192	; 0xc0
 8006258:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800625a:	193b      	adds	r3, r7, r4
 800625c:	2201      	movs	r2, #1
 800625e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006260:	193b      	adds	r3, r7, r4
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006266:	193b      	adds	r3, r7, r4
 8006268:	2200      	movs	r2, #0
 800626a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626c:	193b      	adds	r3, r7, r4
 800626e:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <MX_GPIO_Init+0x1f4>)
 8006270:	0019      	movs	r1, r3
 8006272:	0010      	movs	r0, r2
 8006274:	f003 f870 	bl	8009358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_LED_PWR_Pin DO_LED_NET_Pin DO_LED_GPS_Pin */
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8006278:	193b      	adds	r3, r7, r4
 800627a:	2207      	movs	r2, #7
 800627c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800627e:	193b      	adds	r3, r7, r4
 8006280:	2201      	movs	r2, #1
 8006282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006284:	193b      	adds	r3, r7, r4
 8006286:	2200      	movs	r2, #0
 8006288:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628a:	193b      	adds	r3, r7, r4
 800628c:	2200      	movs	r2, #0
 800628e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006290:	193b      	adds	r3, r7, r4
 8006292:	4a11      	ldr	r2, [pc, #68]	; (80062d8 <MX_GPIO_Init+0x1f8>)
 8006294:	0019      	movs	r1, r3
 8006296:	0010      	movs	r0, r2
 8006298:	f003 f85e 	bl	8009358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_OUT1_Pin DO_OUT2_Pin DO_5V_OUT_EN_Pin DO_OUT3_P_LED_Pin */
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 800629c:	0021      	movs	r1, r4
 800629e:	187b      	adds	r3, r7, r1
 80062a0:	228e      	movs	r2, #142	; 0x8e
 80062a2:	0092      	lsls	r2, r2, #2
 80062a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062a6:	187b      	adds	r3, r7, r1
 80062a8:	2201      	movs	r2, #1
 80062aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ac:	187b      	adds	r3, r7, r1
 80062ae:	2200      	movs	r2, #0
 80062b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	2200      	movs	r2, #0
 80062b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062b8:	187b      	adds	r3, r7, r1
 80062ba:	4a08      	ldr	r2, [pc, #32]	; (80062dc <MX_GPIO_Init+0x1fc>)
 80062bc:	0019      	movs	r1, r3
 80062be:	0010      	movs	r0, r2
 80062c0:	f003 f84a 	bl	8009358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80062c4:	46c0      	nop			; (mov r8, r8)
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b00b      	add	sp, #44	; 0x2c
 80062ca:	bd90      	pop	{r4, r7, pc}
 80062cc:	40021000 	.word	0x40021000
 80062d0:	00008010 	.word	0x00008010
 80062d4:	50000800 	.word	0x50000800
 80062d8:	50000c00 	.word	0x50000c00
 80062dc:	50000400 	.word	0x50000400

080062e0 <timedWork>:
/* USER CODE END 4 */




void timedWork(){
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <timedWork+0x38>)
 80062e6:	2104      	movs	r1, #4
 80062e8:	0018      	movs	r0, r3
 80062ea:	f003 f9d3 	bl	8009694 <HAL_GPIO_TogglePin>

		//%%%%%%%    AccGyro Rest    %%%%%%
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <timedWork+0x3c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <timedWork+0x20>
 80062f6:	f7ff f84b 	bl	8005390 <detectAcc>
 80062fa:	0002      	movs	r2, r0
 80062fc:	4b08      	ldr	r3, [pc, #32]	; (8006320 <timedWork+0x40>)
 80062fe:	601a      	str	r2, [r3, #0]
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <timedWork+0x40>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dd03      	ble.n	8006310 <timedWork+0x30>
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <timedWork+0x40>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <timedWork+0x3c>)
 800630e:	601a      	str	r2, [r3, #0]

}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	50000c00 	.word	0x50000c00
 800631c:	20000444 	.word	0x20000444
 8006320:	20000440 	.word	0x20000440

08006324 <stor>:

float stor(const char* str) {
 8006324:	b5b0      	push	{r4, r5, r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
    float result = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	61fb      	str	r3, [r7, #28]
    float sign = *str == '-' ? str++, -1 : 1;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b2d      	cmp	r3, #45	; 0x2d
 8006336:	d104      	bne.n	8006342 <stor+0x1e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3301      	adds	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	4b5c      	ldr	r3, [pc, #368]	; (80064b0 <stor+0x18c>)
 8006340:	e001      	b.n	8006346 <stor+0x22>
 8006342:	23fe      	movs	r3, #254	; 0xfe
 8006344:	059b      	lsls	r3, r3, #22
 8006346:	613b      	str	r3, [r7, #16]
    while (*str >= '0' && *str <= '9') {
 8006348:	e015      	b.n	8006376 <stor+0x52>
        result *= 10;
 800634a:	495a      	ldr	r1, [pc, #360]	; (80064b4 <stor+0x190>)
 800634c:	69f8      	ldr	r0, [r7, #28]
 800634e:	f7fa fcbf 	bl	8000cd0 <__aeabi_fmul>
 8006352:	1c03      	adds	r3, r0, #0
 8006354:	61fb      	str	r3, [r7, #28]
        result += *str - '0';
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	3b30      	subs	r3, #48	; 0x30
 800635c:	0018      	movs	r0, r3
 800635e:	f7fa ffc5 	bl	80012ec <__aeabi_i2f>
 8006362:	1c03      	adds	r3, r0, #0
 8006364:	1c19      	adds	r1, r3, #0
 8006366:	69f8      	ldr	r0, [r7, #28]
 8006368:	f7fa f948 	bl	80005fc <__aeabi_fadd>
 800636c:	1c03      	adds	r3, r0, #0
 800636e:	61fb      	str	r3, [r7, #28]
        str++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3301      	adds	r3, #1
 8006374:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b2f      	cmp	r3, #47	; 0x2f
 800637c:	d903      	bls.n	8006386 <stor+0x62>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b39      	cmp	r3, #57	; 0x39
 8006384:	d9e1      	bls.n	800634a <stor+0x26>
    }
    if (*str == ',' || *str == '.') {
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b2c      	cmp	r3, #44	; 0x2c
 800638c:	d003      	beq.n	8006396 <stor+0x72>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b2e      	cmp	r3, #46	; 0x2e
 8006394:	d128      	bne.n	80063e8 <stor+0xc4>
        str++;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3301      	adds	r3, #1
 800639a:	607b      	str	r3, [r7, #4]
        float multiplier = 0.1;
 800639c:	4b46      	ldr	r3, [pc, #280]	; (80064b8 <stor+0x194>)
 800639e:	61bb      	str	r3, [r7, #24]
        while (*str >= '0' && *str <= '9') {
 80063a0:	e01a      	b.n	80063d8 <stor+0xb4>
            result += (*str - '0') * multiplier;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	3b30      	subs	r3, #48	; 0x30
 80063a8:	0018      	movs	r0, r3
 80063aa:	f7fa ff9f 	bl	80012ec <__aeabi_i2f>
 80063ae:	1c03      	adds	r3, r0, #0
 80063b0:	69b9      	ldr	r1, [r7, #24]
 80063b2:	1c18      	adds	r0, r3, #0
 80063b4:	f7fa fc8c 	bl	8000cd0 <__aeabi_fmul>
 80063b8:	1c03      	adds	r3, r0, #0
 80063ba:	1c19      	adds	r1, r3, #0
 80063bc:	69f8      	ldr	r0, [r7, #28]
 80063be:	f7fa f91d 	bl	80005fc <__aeabi_fadd>
 80063c2:	1c03      	adds	r3, r0, #0
 80063c4:	61fb      	str	r3, [r7, #28]
            multiplier /= 10;
 80063c6:	493b      	ldr	r1, [pc, #236]	; (80064b4 <stor+0x190>)
 80063c8:	69b8      	ldr	r0, [r7, #24]
 80063ca:	f7fa fab7 	bl	800093c <__aeabi_fdiv>
 80063ce:	1c03      	adds	r3, r0, #0
 80063d0:	61bb      	str	r3, [r7, #24]
            str++;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3301      	adds	r3, #1
 80063d6:	607b      	str	r3, [r7, #4]
        while (*str >= '0' && *str <= '9') {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b2f      	cmp	r3, #47	; 0x2f
 80063de:	d903      	bls.n	80063e8 <stor+0xc4>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b39      	cmp	r3, #57	; 0x39
 80063e6:	d9dc      	bls.n	80063a2 <stor+0x7e>
        }
    }
    result *= sign;
 80063e8:	6939      	ldr	r1, [r7, #16]
 80063ea:	69f8      	ldr	r0, [r7, #28]
 80063ec:	f7fa fc70 	bl	8000cd0 <__aeabi_fmul>
 80063f0:	1c03      	adds	r3, r0, #0
 80063f2:	61fb      	str	r3, [r7, #28]
    if (*str == 'e' || *str == 'E') {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b65      	cmp	r3, #101	; 0x65
 80063fa:	d003      	beq.n	8006404 <stor+0xe0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b45      	cmp	r3, #69	; 0x45
 8006402:	d14f      	bne.n	80064a4 <stor+0x180>
        str++;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3301      	adds	r3, #1
 8006408:	607b      	str	r3, [r7, #4]
        float powerer = *str == '-'? str++, 0.1 : 10;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b2d      	cmp	r3, #45	; 0x2d
 8006410:	d104      	bne.n	800641c <stor+0xf8>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3301      	adds	r3, #1
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <stor+0x194>)
 800641a:	e000      	b.n	800641e <stor+0xfa>
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <stor+0x190>)
 800641e:	60fb      	str	r3, [r7, #12]
        float power = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
        while (*str >= '0' && *str <= '9') {
 8006424:	e015      	b.n	8006452 <stor+0x12e>
            power *= 10;
 8006426:	4923      	ldr	r1, [pc, #140]	; (80064b4 <stor+0x190>)
 8006428:	6978      	ldr	r0, [r7, #20]
 800642a:	f7fa fc51 	bl	8000cd0 <__aeabi_fmul>
 800642e:	1c03      	adds	r3, r0, #0
 8006430:	617b      	str	r3, [r7, #20]
            power += *str - '0';
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	3b30      	subs	r3, #48	; 0x30
 8006438:	0018      	movs	r0, r3
 800643a:	f7fa ff57 	bl	80012ec <__aeabi_i2f>
 800643e:	1c03      	adds	r3, r0, #0
 8006440:	1c19      	adds	r1, r3, #0
 8006442:	6978      	ldr	r0, [r7, #20]
 8006444:	f7fa f8da 	bl	80005fc <__aeabi_fadd>
 8006448:	1c03      	adds	r3, r0, #0
 800644a:	617b      	str	r3, [r7, #20]
            str++;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3301      	adds	r3, #1
 8006450:	607b      	str	r3, [r7, #4]
        while (*str >= '0' && *str <= '9') {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b2f      	cmp	r3, #47	; 0x2f
 8006458:	d903      	bls.n	8006462 <stor+0x13e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b39      	cmp	r3, #57	; 0x39
 8006460:	d9e1      	bls.n	8006426 <stor+0x102>
        }
        result *= pow(powerer, power);
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f7fc fe24 	bl	80030b0 <__aeabi_f2d>
 8006468:	0004      	movs	r4, r0
 800646a:	000d      	movs	r5, r1
 800646c:	6978      	ldr	r0, [r7, #20]
 800646e:	f7fc fe1f 	bl	80030b0 <__aeabi_f2d>
 8006472:	0002      	movs	r2, r0
 8006474:	000b      	movs	r3, r1
 8006476:	0020      	movs	r0, r4
 8006478:	0029      	movs	r1, r5
 800647a:	f00e fc3f 	bl	8014cfc <pow>
 800647e:	0004      	movs	r4, r0
 8006480:	000d      	movs	r5, r1
 8006482:	69f8      	ldr	r0, [r7, #28]
 8006484:	f7fc fe14 	bl	80030b0 <__aeabi_f2d>
 8006488:	0002      	movs	r2, r0
 800648a:	000b      	movs	r3, r1
 800648c:	0020      	movs	r0, r4
 800648e:	0029      	movs	r1, r5
 8006490:	f7fb ff20 	bl	80022d4 <__aeabi_dmul>
 8006494:	0002      	movs	r2, r0
 8006496:	000b      	movs	r3, r1
 8006498:	0010      	movs	r0, r2
 800649a:	0019      	movs	r1, r3
 800649c:	f7fc fe50 	bl	8003140 <__aeabi_d2f>
 80064a0:	1c03      	adds	r3, r0, #0
 80064a2:	61fb      	str	r3, [r7, #28]
    }
    return result;
 80064a4:	69fb      	ldr	r3, [r7, #28]
}
 80064a6:	1c18      	adds	r0, r3, #0
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b008      	add	sp, #32
 80064ac:	bdb0      	pop	{r4, r5, r7, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	bf800000 	.word	0xbf800000
 80064b4:	41200000 	.word	0x41200000
 80064b8:	3dcccccd 	.word	0x3dcccccd

080064bc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]


}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b002      	add	sp, #8
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	{

	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 80064d4:	4b2d      	ldr	r3, [pc, #180]	; (800658c <HAL_UART_RxCpltCallback+0xc0>)
 80064d6:	2104      	movs	r1, #4
 80064d8:	0018      	movs	r0, r3
 80064da:	f003 f8db 	bl	8009694 <HAL_GPIO_TogglePin>
	//Debug_Tx("V");
	if(huart==&huart2){
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <HAL_UART_RxCpltCallback+0xc4>)
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d129      	bne.n	800653a <HAL_UART_RxCpltCallback+0x6e>
		if(dnlfile==0){
 80064e6:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <HAL_UART_RxCpltCallback+0xc8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d125      	bne.n	800653a <HAL_UART_RxCpltCallback+0x6e>
		if(strlen((char*)gpsData)>10){
 80064ee:	4b2a      	ldr	r3, [pc, #168]	; (8006598 <HAL_UART_RxCpltCallback+0xcc>)
 80064f0:	0018      	movs	r0, r3
 80064f2:	f7f9 fe09 	bl	8000108 <strlen>
 80064f6:	0003      	movs	r3, r0
 80064f8:	2b0a      	cmp	r3, #10
 80064fa:	d909      	bls.n	8006510 <HAL_UART_RxCpltCallback+0x44>

	  		//Debug_Tx((char*)gpsData);
			ProcessGPS((char*)gpsData);
 80064fc:	4b26      	ldr	r3, [pc, #152]	; (8006598 <HAL_UART_RxCpltCallback+0xcc>)
 80064fe:	0018      	movs	r0, r3
 8006500:	f7ff fabe 	bl	8005a80 <ProcessGPS>
			getGPSString();
 8006504:	f7fe ffe0 	bl	80054c8 <getGPSString>
			timedWork();
 8006508:	f7ff feea 	bl	80062e0 <timedWork>
			ReadAllGPIO();
 800650c:	f000 f912 	bl	8006734 <ReadAllGPIO>
		}
		if(DMAon==1){
 8006510:	4b22      	ldr	r3, [pc, #136]	; (800659c <HAL_UART_RxCpltCallback+0xd0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d110      	bne.n	800653a <HAL_UART_RxCpltCallback+0x6e>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8006518:	4b1f      	ldr	r3, [pc, #124]	; (8006598 <HAL_UART_RxCpltCallback+0xcc>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_UART_RxCpltCallback+0x60>
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_UART_RxCpltCallback+0xd4>)
 8006522:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <HAL_UART_RxCpltCallback+0xcc>)
 8006524:	2100      	movs	r1, #0
 8006526:	0018      	movs	r0, r3
 8006528:	f00b fd6c 	bl	8012004 <memset>
		//__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 800652c:	23e1      	movs	r3, #225	; 0xe1
 800652e:	009a      	lsls	r2, r3, #2
 8006530:	4919      	ldr	r1, [pc, #100]	; (8006598 <HAL_UART_RxCpltCallback+0xcc>)
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <HAL_UART_RxCpltCallback+0xc4>)
 8006534:	0018      	movs	r0, r3
 8006536:	f005 ffbb 	bl	800c4b0 <HAL_UART_Receive_DMA>
		}
	}
	if(huart==&huart1){
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_UART_RxCpltCallback+0xd8>)
 800653e:	429a      	cmp	r2, r3
 8006540:	d11f      	bne.n	8006582 <HAL_UART_RxCpltCallback+0xb6>
		if(strlen((char*)GSMData)<900){
 8006542:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <HAL_UART_RxCpltCallback+0xdc>)
 8006544:	0018      	movs	r0, r3
 8006546:	f7f9 fddf 	bl	8000108 <strlen>
 800654a:	0002      	movs	r2, r0
 800654c:	23e1      	movs	r3, #225	; 0xe1
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	429a      	cmp	r2, r3
 8006552:	d209      	bcs.n	8006568 <HAL_UART_RxCpltCallback+0x9c>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8006554:	4b15      	ldr	r3, [pc, #84]	; (80065ac <HAL_UART_RxCpltCallback+0xe0>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_UART_RxCpltCallback+0x9c>
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <HAL_UART_RxCpltCallback+0xe0>)
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_UART_RxCpltCallback+0xdc>)
 8006560:	0011      	movs	r1, r2
 8006562:	0018      	movs	r0, r3
 8006564:	f00b fd56 	bl	8012014 <strcat>
		}


		if(DMAon==1){
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <HAL_UART_RxCpltCallback+0xd0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d108      	bne.n	8006582 <HAL_UART_RxCpltCallback+0xb6>
		GSMBuff[0]=0;
 8006570:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <HAL_UART_RxCpltCallback+0xe0>)
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
		//__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006576:	490d      	ldr	r1, [pc, #52]	; (80065ac <HAL_UART_RxCpltCallback+0xe0>)
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <HAL_UART_RxCpltCallback+0xd8>)
 800657a:	2201      	movs	r2, #1
 800657c:	0018      	movs	r0, r3
 800657e:	f005 ff97 	bl	800c4b0 <HAL_UART_Receive_DMA>
		}
	}
	}

}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	46bd      	mov	sp, r7
 8006586:	b002      	add	sp, #8
 8006588:	bd80      	pop	{r7, pc}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	50000c00 	.word	0x50000c00
 8006590:	200006c4 	.word	0x200006c4
 8006594:	200013a4 	.word	0x200013a4
 8006598:	20003568 	.word	0x20003568
 800659c:	20000004 	.word	0x20000004
 80065a0:	000003e7 	.word	0x000003e7
 80065a4:	20000630 	.word	0x20000630
 80065a8:	20000cf8 	.word	0x20000cf8
 80065ac:	200012d4 	.word	0x200012d4

080065b0 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	4b1c      	ldr	r3, [pc, #112]	; (800662c <HAL_UART_ErrorCallback+0x7c>)
 80065bc:	429a      	cmp	r2, r3
 80065be:	d11c      	bne.n	80065fa <HAL_UART_ErrorCallback+0x4a>

		if(dnlfile==0){
 80065c0:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <HAL_UART_ErrorCallback+0x80>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d118      	bne.n	80065fa <HAL_UART_ErrorCallback+0x4a>
		if(DMAon==1){
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <HAL_UART_ErrorCallback+0x84>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d114      	bne.n	80065fa <HAL_UART_ErrorCallback+0x4a>
		//Debug_Tx("GPSErr");
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <HAL_UART_ErrorCallback+0x88>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <HAL_UART_ErrorCallback+0x34>
 80065d8:	4a18      	ldr	r2, [pc, #96]	; (800663c <HAL_UART_ErrorCallback+0x8c>)
 80065da:	4b17      	ldr	r3, [pc, #92]	; (8006638 <HAL_UART_ErrorCallback+0x88>)
 80065dc:	2100      	movs	r1, #0
 80065de:	0018      	movs	r0, r3
 80065e0:	f00b fd10 	bl	8012004 <memset>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_UART_ErrorCallback+0x7c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	220c      	movs	r2, #12
 80065ea:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80065ec:	23e1      	movs	r3, #225	; 0xe1
 80065ee:	009a      	lsls	r2, r3, #2
 80065f0:	4911      	ldr	r1, [pc, #68]	; (8006638 <HAL_UART_ErrorCallback+0x88>)
 80065f2:	4b0e      	ldr	r3, [pc, #56]	; (800662c <HAL_UART_ErrorCallback+0x7c>)
 80065f4:	0018      	movs	r0, r3
 80065f6:	f005 ff5b 	bl	800c4b0 <HAL_UART_Receive_DMA>
		}
		}
	}
	if(huart==&huart1){
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <HAL_UART_ErrorCallback+0x90>)
 80065fe:	429a      	cmp	r2, r3
 8006600:	d110      	bne.n	8006624 <HAL_UART_ErrorCallback+0x74>

		if(DMAon==1){
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <HAL_UART_ErrorCallback+0x84>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d10c      	bne.n	8006624 <HAL_UART_ErrorCallback+0x74>
		//Debug_Tx("GSMErr");
		GSMBuff[0]=0;
 800660a:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <HAL_UART_ErrorCallback+0x94>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <HAL_UART_ErrorCallback+0x7c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	220c      	movs	r2, #12
 8006616:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006618:	490a      	ldr	r1, [pc, #40]	; (8006644 <HAL_UART_ErrorCallback+0x94>)
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_UART_ErrorCallback+0x90>)
 800661c:	2201      	movs	r2, #1
 800661e:	0018      	movs	r0, r3
 8006620:	f005 ff46 	bl	800c4b0 <HAL_UART_Receive_DMA>





}
 8006624:	46c0      	nop			; (mov r8, r8)
 8006626:	46bd      	mov	sp, r7
 8006628:	b002      	add	sp, #8
 800662a:	bd80      	pop	{r7, pc}
 800662c:	200006c4 	.word	0x200006c4
 8006630:	200013a4 	.word	0x200013a4
 8006634:	20000004 	.word	0x20000004
 8006638:	20003568 	.word	0x20003568
 800663c:	000003e7 	.word	0x000003e7
 8006640:	20000630 	.word	0x20000630
 8006644:	200012d4 	.word	0x200012d4

08006648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

	 // TestDigitalOutput();



 	  initAcc();
 8006650:	f7fe fcc2 	bl	8004fd8 <initAcc>
	//TestDigitalOutput();
	 SET_GPS_VCC_EN(1);
 8006654:	2001      	movs	r0, #1
 8006656:	f7fc ff9f 	bl	8003598 <SET_GPS_VCC_EN>
		  	 	  SET_GSM_VCC_EN(1);
 800665a:	2001      	movs	r0, #1
 800665c:	f7fc ffda 	bl	8003614 <SET_GSM_VCC_EN>
		  	 	  SET_PWRKEY(1);
 8006660:	2001      	movs	r0, #1
 8006662:	f7fc ffb9 	bl	80035d8 <SET_PWRKEY>
		  	  Init_ADC();
 8006666:	f7fc feb7 	bl	80033d8 <Init_ADC>


		  	  SET_5V_OUT_EN(1);
 800666a:	2001      	movs	r0, #1
 800666c:	f7fc ff3a 	bl	80034e4 <SET_5V_OUT_EN>
		  	  SET_GPS_VCC_EN(1);
 8006670:	2001      	movs	r0, #1
 8006672:	f7fc ff91 	bl	8003598 <SET_GPS_VCC_EN>
		  	  SET_GSM_VCC_EN(1);
 8006676:	2001      	movs	r0, #1
 8006678:	f7fc ffcc 	bl	8003614 <SET_GSM_VCC_EN>
		  	  SET_PWRKEY(1);
 800667c:	2001      	movs	r0, #1
 800667e:	f7fc ffab 	bl	80035d8 <SET_PWRKEY>
		  	GSMBuff[0]=0;
 8006682:	4b16      	ldr	r3, [pc, #88]	; (80066dc <StartDefaultTask+0x94>)
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
		      memset((char*)gpsData,0,1000);
 8006688:	23fa      	movs	r3, #250	; 0xfa
 800668a:	009a      	lsls	r2, r3, #2
 800668c:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <StartDefaultTask+0x98>)
 800668e:	2100      	movs	r1, #0
 8006690:	0018      	movs	r0, r3
 8006692:	f00b fcb7 	bl	8012004 <memset>
		  	  __HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <StartDefaultTask+0x9c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	220c      	movs	r2, #12
 800669c:	621a      	str	r2, [r3, #32]
		  	  HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 800669e:	23e1      	movs	r3, #225	; 0xe1
 80066a0:	009a      	lsls	r2, r3, #2
 80066a2:	490f      	ldr	r1, [pc, #60]	; (80066e0 <StartDefaultTask+0x98>)
 80066a4:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <StartDefaultTask+0x9c>)
 80066a6:	0018      	movs	r0, r3
 80066a8:	f005 ff02 	bl	800c4b0 <HAL_UART_Receive_DMA>

		  	__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80066ac:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <StartDefaultTask+0xa0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	220c      	movs	r2, #12
 80066b2:	621a      	str	r2, [r3, #32]
		  	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80066b4:	4909      	ldr	r1, [pc, #36]	; (80066dc <StartDefaultTask+0x94>)
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <StartDefaultTask+0xa0>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	0018      	movs	r0, r3
 80066bc:	f005 fef8 	bl	800c4b0 <HAL_UART_Receive_DMA>
		  	initGPS();
 80066c0:	f7fe fec0 	bl	8005444 <initGPS>
		  	HAL_Delay(10000);
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <StartDefaultTask+0xa4>)
 80066c6:	0018      	movs	r0, r3
 80066c8:	f001 fb68 	bl	8007d9c <HAL_Delay>


		  //		  		   int nn=tic();
		  		  			//HAL_Delay(3000);
		  		  InitGSM();
 80066cc:	f7fe f86e 	bl	80047ac <InitGSM>
			 		  //HAL_UART_Receive_DMA(&huart2, gpsData, 900);
			 			//HAL_GPIO_TogglePin(GPIOD, DO_LED_PWR_Pin);
			 		 // int whiletotal=tic();
				  //TestGPS();
				  	  	// TestGSM();
			 		  GSMSigQuality();
 80066d0:	f7fd f978 	bl	80039c4 <GSMSigQuality>
			 			 TestRun();
 80066d4:	f000 fb72 	bl	8006dbc <TestRun>
			 		  GSMSigQuality();
 80066d8:	e7fa      	b.n	80066d0 <StartDefaultTask+0x88>
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	200012d4 	.word	0x200012d4
 80066e0:	20003568 	.word	0x20003568
 80066e4:	200006c4 	.word	0x200006c4
 80066e8:	20000630 	.word	0x20000630
 80066ec:	00002710 	.word	0x00002710

080066f0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

while(1){osDelay(1);
 80066f8:	2001      	movs	r0, #1
 80066fa:	f007 faff 	bl	800dcfc <osDelay>
 80066fe:	e7fb      	b.n	80066f8 <StartTask02+0x8>

08006700 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006708:	2001      	movs	r0, #1
 800670a:	f007 faf7 	bl	800dcfc <osDelay>
 800670e:	e7fb      	b.n	8006708 <StartTask03+0x8>

08006710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a04      	ldr	r2, [pc, #16]	; (8006730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006722:	f001 fb1f 	bl	8007d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	46bd      	mov	sp, r7
 800672a:	b002      	add	sp, #8
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	40012c00 	.word	0x40012c00

08006734 <ReadAllGPIO>:
}




void ReadAllGPIO(){
 8006734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006736:	46de      	mov	lr, fp
 8006738:	4657      	mov	r7, sl
 800673a:	464e      	mov	r6, r9
 800673c:	4645      	mov	r5, r8
 800673e:	b5e0      	push	{r5, r6, r7, lr}
 8006740:	b08b      	sub	sp, #44	; 0x2c
 8006742:	af08      	add	r7, sp, #32
	memset(StatusStrng,0,20);
 8006744:	4b58      	ldr	r3, [pc, #352]	; (80068a8 <ReadAllGPIO+0x174>)
 8006746:	2214      	movs	r2, #20
 8006748:	2100      	movs	r1, #0
 800674a:	0018      	movs	r0, r3
 800674c:	f00b fc5a 	bl	8012004 <memset>
	memset(Dig_io,0,30);
 8006750:	4b56      	ldr	r3, [pc, #344]	; (80068ac <ReadAllGPIO+0x178>)
 8006752:	221e      	movs	r2, #30
 8006754:	2100      	movs	r1, #0
 8006756:	0018      	movs	r0, r3
 8006758:	f00b fc54 	bl	8012004 <memset>

	//%%%%%%%    GPIO Read    %%%%%%
	Dig_in[0]=Read_DI_IN1();
 800675c:	f7fc fda6 	bl	80032ac <Read_DI_IN1>
 8006760:	0002      	movs	r2, r0
 8006762:	4b53      	ldr	r3, [pc, #332]	; (80068b0 <ReadAllGPIO+0x17c>)
 8006764:	601a      	str	r2, [r3, #0]
	Dig_in[1]=Read_DI_IN2();
 8006766:	f7fc fdb3 	bl	80032d0 <Read_DI_IN2>
 800676a:	0002      	movs	r2, r0
 800676c:	4b50      	ldr	r3, [pc, #320]	; (80068b0 <ReadAllGPIO+0x17c>)
 800676e:	605a      	str	r2, [r3, #4]
	Dig_in[2]=Read_DI_IN3();
 8006770:	f7fc fdc2 	bl	80032f8 <Read_DI_IN3>
 8006774:	0002      	movs	r2, r0
 8006776:	4b4e      	ldr	r3, [pc, #312]	; (80068b0 <ReadAllGPIO+0x17c>)
 8006778:	609a      	str	r2, [r3, #8]

	MAINS_STATE=Read_DI_MAINS_STATE();
 800677a:	f7fc fdd1 	bl	8003320 <Read_DI_MAINS_STATE>
 800677e:	0002      	movs	r2, r0
 8006780:	4b4c      	ldr	r3, [pc, #304]	; (80068b4 <ReadAllGPIO+0x180>)
 8006782:	601a      	str	r2, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 8006784:	f7fc fde0 	bl	8003348 <Read_DI_ACC_STATE>
 8006788:	0002      	movs	r2, r0
 800678a:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <ReadAllGPIO+0x184>)
 800678c:	601a      	str	r2, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 800678e:	f7fc fdef 	bl	8003370 <Read_DI_BOX_STATE>
 8006792:	0003      	movs	r3, r0
 8006794:	001a      	movs	r2, r3
 8006796:	4b49      	ldr	r3, [pc, #292]	; (80068bc <ReadAllGPIO+0x188>)
 8006798:	701a      	strb	r2, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 800679a:	f7fc fe0b 	bl	80033b4 <Read_DI_SOS_STATE>
 800679e:	0002      	movs	r2, r0
 80067a0:	4b47      	ldr	r3, [pc, #284]	; (80068c0 <ReadAllGPIO+0x18c>)
 80067a2:	601a      	str	r2, [r3, #0]
	EXT_B=Read_EXT_B_SENSE();
 80067a4:	f7fc fe66 	bl	8003474 <Read_EXT_B_SENSE>
 80067a8:	1c02      	adds	r2, r0, #0
 80067aa:	4b46      	ldr	r3, [pc, #280]	; (80068c4 <ReadAllGPIO+0x190>)
 80067ac:	601a      	str	r2, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 80067ae:	f7fc fe7d 	bl	80034ac <Read_INT_B_SENSE>
 80067b2:	1c02      	adds	r2, r0, #0
 80067b4:	4b44      	ldr	r3, [pc, #272]	; (80068c8 <ReadAllGPIO+0x194>)
 80067b6:	601a      	str	r2, [r3, #0]


	adc[0]=Read_ADC1();
 80067b8:	f7fc fe1e 	bl	80033f8 <Read_ADC1>
 80067bc:	1c02      	adds	r2, r0, #0
 80067be:	4b43      	ldr	r3, [pc, #268]	; (80068cc <ReadAllGPIO+0x198>)
 80067c0:	601a      	str	r2, [r3, #0]
	adc[1]=Read_ADC2();
 80067c2:	f7fc fe39 	bl	8003438 <Read_ADC2>
 80067c6:	1c02      	adds	r2, r0, #0
 80067c8:	4b40      	ldr	r3, [pc, #256]	; (80068cc <ReadAllGPIO+0x198>)
 80067ca:	605a      	str	r2, [r3, #4]

	memset(StatusStrng,0,20);
 80067cc:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <ReadAllGPIO+0x174>)
 80067ce:	2214      	movs	r2, #20
 80067d0:	2100      	movs	r1, #0
 80067d2:	0018      	movs	r0, r3
 80067d4:	f00b fc16 	bl	8012004 <memset>
	memset(Dig_io,0,30);
 80067d8:	4b34      	ldr	r3, [pc, #208]	; (80068ac <ReadAllGPIO+0x178>)
 80067da:	221e      	movs	r2, #30
 80067dc:	2100      	movs	r1, #0
 80067de:	0018      	movs	r0, r3
 80067e0:	f00b fc10 	bl	8012004 <memset>

    sprintf(Dig_io, "%d%d%d0,%d%d,%d,%.1f,%.1f,,()",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo,adc[0],adc[1]);
 80067e4:	4b32      	ldr	r3, [pc, #200]	; (80068b0 <ReadAllGPIO+0x17c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	469b      	mov	fp, r3
 80067ea:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <ReadAllGPIO+0x17c>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	4b2f      	ldr	r3, [pc, #188]	; (80068b0 <ReadAllGPIO+0x17c>)
 80067f2:	689e      	ldr	r6, [r3, #8]
 80067f4:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <ReadAllGPIO+0x19c>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	4690      	mov	r8, r2
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <ReadAllGPIO+0x1a0>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4691      	mov	r9, r2
 8006800:	4b35      	ldr	r3, [pc, #212]	; (80068d8 <ReadAllGPIO+0x1a4>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	4692      	mov	sl, r2
 8006806:	4b31      	ldr	r3, [pc, #196]	; (80068cc <ReadAllGPIO+0x198>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	1c18      	adds	r0, r3, #0
 800680c:	f7fc fc50 	bl	80030b0 <__aeabi_f2d>
 8006810:	0004      	movs	r4, r0
 8006812:	000d      	movs	r5, r1
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <ReadAllGPIO+0x198>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	1c18      	adds	r0, r3, #0
 800681a:	f7fc fc49 	bl	80030b0 <__aeabi_f2d>
 800681e:	0002      	movs	r2, r0
 8006820:	000b      	movs	r3, r1
 8006822:	492e      	ldr	r1, [pc, #184]	; (80068dc <ReadAllGPIO+0x1a8>)
 8006824:	4821      	ldr	r0, [pc, #132]	; (80068ac <ReadAllGPIO+0x178>)
 8006826:	9206      	str	r2, [sp, #24]
 8006828:	9307      	str	r3, [sp, #28]
 800682a:	9404      	str	r4, [sp, #16]
 800682c:	9505      	str	r5, [sp, #20]
 800682e:	4652      	mov	r2, sl
 8006830:	9203      	str	r2, [sp, #12]
 8006832:	464a      	mov	r2, r9
 8006834:	9202      	str	r2, [sp, #8]
 8006836:	4642      	mov	r2, r8
 8006838:	9201      	str	r2, [sp, #4]
 800683a:	9600      	str	r6, [sp, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	465a      	mov	r2, fp
 8006840:	f00b fb74 	bl	8011f2c <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 8006844:	4b1c      	ldr	r3, [pc, #112]	; (80068b8 <ReadAllGPIO+0x184>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4698      	mov	r8, r3
 800684a:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <ReadAllGPIO+0x180>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4699      	mov	r9, r3
 8006850:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <ReadAllGPIO+0x190>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	1c18      	adds	r0, r3, #0
 8006856:	f7fc fc2b 	bl	80030b0 <__aeabi_f2d>
 800685a:	0004      	movs	r4, r0
 800685c:	000d      	movs	r5, r1
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <ReadAllGPIO+0x194>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	1c18      	adds	r0, r3, #0
 8006864:	f7fc fc24 	bl	80030b0 <__aeabi_f2d>
 8006868:	6038      	str	r0, [r7, #0]
 800686a:	6079      	str	r1, [r7, #4]
 800686c:	4914      	ldr	r1, [pc, #80]	; (80068c0 <ReadAllGPIO+0x18c>)
 800686e:	6809      	ldr	r1, [r1, #0]
 8006870:	4812      	ldr	r0, [pc, #72]	; (80068bc <ReadAllGPIO+0x188>)
 8006872:	7800      	ldrb	r0, [r0, #0]
 8006874:	4684      	mov	ip, r0
 8006876:	4e1a      	ldr	r6, [pc, #104]	; (80068e0 <ReadAllGPIO+0x1ac>)
 8006878:	480b      	ldr	r0, [pc, #44]	; (80068a8 <ReadAllGPIO+0x174>)
 800687a:	4663      	mov	r3, ip
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	9104      	str	r1, [sp, #16]
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	9202      	str	r2, [sp, #8]
 8006886:	9303      	str	r3, [sp, #12]
 8006888:	9400      	str	r4, [sp, #0]
 800688a:	9501      	str	r5, [sp, #4]
 800688c:	464b      	mov	r3, r9
 800688e:	4642      	mov	r2, r8
 8006890:	0031      	movs	r1, r6
 8006892:	f00b fb4b 	bl	8011f2c <siprintf>


}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	46bd      	mov	sp, r7
 800689a:	b003      	add	sp, #12
 800689c:	bcf0      	pop	{r4, r5, r6, r7}
 800689e:	46bb      	mov	fp, r7
 80068a0:	46b2      	mov	sl, r6
 80068a2:	46a9      	mov	r9, r5
 80068a4:	46a0      	mov	r8, r4
 80068a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a8:	20003a58 	.word	0x20003a58
 80068ac:	200039b0 	.word	0x200039b0
 80068b0:	200039a4 	.word	0x200039a4
 80068b4:	200039d8 	.word	0x200039d8
 80068b8:	200039dc 	.word	0x200039dc
 80068bc:	20000033 	.word	0x20000033
 80068c0:	200039e0 	.word	0x200039e0
 80068c4:	200039ec 	.word	0x200039ec
 80068c8:	200039f0 	.word	0x200039f0
 80068cc:	200039e4 	.word	0x200039e4
 80068d0:	200039d0 	.word	0x200039d0
 80068d4:	200039d4 	.word	0x200039d4
 80068d8:	20000410 	.word	0x20000410
 80068dc:	08017018 	.word	0x08017018
 80068e0:	08017038 	.word	0x08017038

080068e4 <GetHead>:


void GetHead(){
 80068e4:	b5b0      	push	{r4, r5, r7, lr}
 80068e6:	af00      	add	r7, sp, #0

	memset(Head,0,100);
 80068e8:	4bd7      	ldr	r3, [pc, #860]	; (8006c48 <GetHead+0x364>)
 80068ea:	2264      	movs	r2, #100	; 0x64
 80068ec:	2100      	movs	r1, #0
 80068ee:	0018      	movs	r0, r3
 80068f0:	f00b fb88 	bl	8012004 <memset>
	strcpy(Head,InitStr);
 80068f4:	4ad5      	ldr	r2, [pc, #852]	; (8006c4c <GetHead+0x368>)
 80068f6:	4bd4      	ldr	r3, [pc, #848]	; (8006c48 <GetHead+0x364>)
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f00b fd37 	bl	801236e <strcpy>
	strcat(Head,VerStr);
 8006900:	4ad3      	ldr	r2, [pc, #844]	; (8006c50 <GetHead+0x36c>)
 8006902:	4bd1      	ldr	r3, [pc, #836]	; (8006c48 <GetHead+0x364>)
 8006904:	0011      	movs	r1, r2
 8006906:	0018      	movs	r0, r3
 8006908:	f00b fb84 	bl	8012014 <strcat>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 800690c:	4bd1      	ldr	r3, [pc, #836]	; (8006c54 <GetHead+0x370>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	425a      	negs	r2, r3
 8006914:	4153      	adcs	r3, r2
 8006916:	b2da      	uxtb	r2, r3
 8006918:	4bcf      	ldr	r3, [pc, #828]	; (8006c58 <GetHead+0x374>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	4259      	negs	r1, r3
 8006920:	414b      	adcs	r3, r1
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4013      	ands	r3, r2
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d006      	beq.n	800693a <GetHead+0x56>
 800692c:	4bc9      	ldr	r3, [pc, #804]	; (8006c54 <GetHead+0x370>)
 800692e:	2201      	movs	r2, #1
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	4bca      	ldr	r3, [pc, #808]	; (8006c5c <GetHead+0x378>)
 8006934:	2201      	movs	r2, #1
 8006936:	4252      	negs	r2, r2
 8006938:	601a      	str	r2, [r3, #0]
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 800693a:	4bc8      	ldr	r3, [pc, #800]	; (8006c5c <GetHead+0x378>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3301      	adds	r3, #1
 8006940:	425a      	negs	r2, r3
 8006942:	4153      	adcs	r3, r2
 8006944:	b2da      	uxtb	r2, r3
 8006946:	4bc4      	ldr	r3, [pc, #784]	; (8006c58 <GetHead+0x374>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4259      	negs	r1, r3
 800694c:	414b      	adcs	r3, r1
 800694e:	b2db      	uxtb	r3, r3
 8006950:	4013      	ands	r3, r2
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d006      	beq.n	8006966 <GetHead+0x82>
 8006958:	4bc0      	ldr	r3, [pc, #768]	; (8006c5c <GetHead+0x378>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	4bbd      	ldr	r3, [pc, #756]	; (8006c54 <GetHead+0x370>)
 8006960:	2201      	movs	r2, #1
 8006962:	4252      	negs	r2, r2
 8006964:	601a      	str	r2, [r3, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 8006966:	4bbe      	ldr	r3, [pc, #760]	; (8006c60 <GetHead+0x37c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	425a      	negs	r2, r3
 800696e:	4153      	adcs	r3, r2
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4bbc      	ldr	r3, [pc, #752]	; (8006c64 <GetHead+0x380>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4259      	negs	r1, r3
 800697a:	414b      	adcs	r3, r1
 800697c:	b2db      	uxtb	r3, r3
 800697e:	4013      	ands	r3, r2
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d006      	beq.n	8006994 <GetHead+0xb0>
 8006986:	4bb6      	ldr	r3, [pc, #728]	; (8006c60 <GetHead+0x37c>)
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	4bb6      	ldr	r3, [pc, #728]	; (8006c68 <GetHead+0x384>)
 800698e:	2201      	movs	r2, #1
 8006990:	4252      	negs	r2, r2
 8006992:	601a      	str	r2, [r3, #0]
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 8006994:	4bb4      	ldr	r3, [pc, #720]	; (8006c68 <GetHead+0x384>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	425a      	negs	r2, r3
 800699c:	4153      	adcs	r3, r2
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	4bb0      	ldr	r3, [pc, #704]	; (8006c64 <GetHead+0x380>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4259      	negs	r1, r3
 80069a6:	414b      	adcs	r3, r1
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	4013      	ands	r3, r2
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d006      	beq.n	80069c0 <GetHead+0xdc>
 80069b2:	4bad      	ldr	r3, [pc, #692]	; (8006c68 <GetHead+0x384>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	4ba9      	ldr	r3, [pc, #676]	; (8006c60 <GetHead+0x37c>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	4252      	negs	r2, r2
 80069be:	601a      	str	r2, [r3, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 80069c0:	4baa      	ldr	r3, [pc, #680]	; (8006c6c <GetHead+0x388>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	425a      	negs	r2, r3
 80069c8:	4153      	adcs	r3, r2
 80069ca:	b2dc      	uxtb	r4, r3
 80069cc:	4ba8      	ldr	r3, [pc, #672]	; (8006c70 <GetHead+0x38c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2201      	movs	r2, #1
 80069d2:	1c15      	adds	r5, r2, #0
 80069d4:	49a7      	ldr	r1, [pc, #668]	; (8006c74 <GetHead+0x390>)
 80069d6:	1c18      	adds	r0, r3, #0
 80069d8:	f7f9 fd78 	bl	80004cc <__aeabi_fcmplt>
 80069dc:	1e03      	subs	r3, r0, #0
 80069de:	d101      	bne.n	80069e4 <GetHead+0x100>
 80069e0:	2300      	movs	r3, #0
 80069e2:	1c1d      	adds	r5, r3, #0
 80069e4:	b2eb      	uxtb	r3, r5
 80069e6:	4023      	ands	r3, r4
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d006      	beq.n	80069fc <GetHead+0x118>
 80069ee:	4b9f      	ldr	r3, [pc, #636]	; (8006c6c <GetHead+0x388>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	4ba0      	ldr	r3, [pc, #640]	; (8006c78 <GetHead+0x394>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	4252      	negs	r2, r2
 80069fa:	601a      	str	r2, [r3, #0]
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 80069fc:	4b9e      	ldr	r3, [pc, #632]	; (8006c78 <GetHead+0x394>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	425a      	negs	r2, r3
 8006a04:	4153      	adcs	r3, r2
 8006a06:	b2dc      	uxtb	r4, r3
 8006a08:	4b99      	ldr	r3, [pc, #612]	; (8006c70 <GetHead+0x38c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	1c15      	adds	r5, r2, #0
 8006a10:	4998      	ldr	r1, [pc, #608]	; (8006c74 <GetHead+0x390>)
 8006a12:	1c18      	adds	r0, r3, #0
 8006a14:	f7f9 fd78 	bl	8000508 <__aeabi_fcmpge>
 8006a18:	1e03      	subs	r3, r0, #0
 8006a1a:	d101      	bne.n	8006a20 <GetHead+0x13c>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	1c1d      	adds	r5, r3, #0
 8006a20:	b2eb      	uxtb	r3, r5
 8006a22:	4023      	ands	r3, r4
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <GetHead+0x154>
 8006a2a:	4b93      	ldr	r3, [pc, #588]	; (8006c78 <GetHead+0x394>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	4b8e      	ldr	r3, [pc, #568]	; (8006c6c <GetHead+0x388>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	4252      	negs	r2, r2
 8006a36:	601a      	str	r2, [r3, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 8006a38:	4b90      	ldr	r3, [pc, #576]	; (8006c7c <GetHead+0x398>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	425a      	negs	r2, r3
 8006a40:	4153      	adcs	r3, r2
 8006a42:	b2dc      	uxtb	r4, r3
 8006a44:	4b8a      	ldr	r3, [pc, #552]	; (8006c70 <GetHead+0x38c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	1c15      	adds	r5, r2, #0
 8006a4c:	4989      	ldr	r1, [pc, #548]	; (8006c74 <GetHead+0x390>)
 8006a4e:	1c18      	adds	r0, r3, #0
 8006a50:	f7f9 fd3c 	bl	80004cc <__aeabi_fcmplt>
 8006a54:	1e03      	subs	r3, r0, #0
 8006a56:	d101      	bne.n	8006a5c <GetHead+0x178>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	1c1d      	adds	r5, r3, #0
 8006a5c:	b2eb      	uxtb	r3, r5
 8006a5e:	4023      	ands	r3, r4
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <GetHead+0x190>
 8006a66:	4b85      	ldr	r3, [pc, #532]	; (8006c7c <GetHead+0x398>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	4b84      	ldr	r3, [pc, #528]	; (8006c80 <GetHead+0x39c>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4252      	negs	r2, r2
 8006a72:	601a      	str	r2, [r3, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8006a74:	4b82      	ldr	r3, [pc, #520]	; (8006c80 <GetHead+0x39c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	425a      	negs	r2, r3
 8006a7c:	4153      	adcs	r3, r2
 8006a7e:	b2dc      	uxtb	r4, r3
 8006a80:	4b7b      	ldr	r3, [pc, #492]	; (8006c70 <GetHead+0x38c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	1c15      	adds	r5, r2, #0
 8006a88:	497a      	ldr	r1, [pc, #488]	; (8006c74 <GetHead+0x390>)
 8006a8a:	1c18      	adds	r0, r3, #0
 8006a8c:	f7f9 fd3c 	bl	8000508 <__aeabi_fcmpge>
 8006a90:	1e03      	subs	r3, r0, #0
 8006a92:	d101      	bne.n	8006a98 <GetHead+0x1b4>
 8006a94:	2300      	movs	r3, #0
 8006a96:	1c1d      	adds	r5, r3, #0
 8006a98:	b2eb      	uxtb	r3, r5
 8006a9a:	4023      	ands	r3, r4
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d006      	beq.n	8006ab0 <GetHead+0x1cc>
 8006aa2:	4b77      	ldr	r3, [pc, #476]	; (8006c80 <GetHead+0x39c>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	4b74      	ldr	r3, [pc, #464]	; (8006c7c <GetHead+0x398>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4252      	negs	r2, r2
 8006aae:	601a      	str	r2, [r3, #0]
	if(GSMSignal<=10){
 8006ab0:	4b74      	ldr	r3, [pc, #464]	; (8006c84 <GetHead+0x3a0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4974      	ldr	r1, [pc, #464]	; (8006c88 <GetHead+0x3a4>)
 8006ab6:	1c18      	adds	r0, r3, #0
 8006ab8:	f7f9 fd12 	bl	80004e0 <__aeabi_fcmple>
 8006abc:	1e03      	subs	r3, r0, #0
 8006abe:	d006      	beq.n	8006ace <GetHead+0x1ea>
		strcat(Head,AlartStr_HistoryPVTData);
 8006ac0:	4a72      	ldr	r2, [pc, #456]	; (8006c8c <GetHead+0x3a8>)
 8006ac2:	4b61      	ldr	r3, [pc, #388]	; (8006c48 <GetHead+0x364>)
 8006ac4:	0011      	movs	r1, r2
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f00b faa4 	bl	8012014 <strcat>
 8006acc:	e134      	b.n	8006d38 <GetHead+0x454>
	}
	else if(getSpeed()>SpeedThr){
 8006ace:	f7fe ffcd 	bl	8005a6c <getSpeed>
 8006ad2:	1c02      	adds	r2, r0, #0
 8006ad4:	4b6e      	ldr	r3, [pc, #440]	; (8006c90 <GetHead+0x3ac>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	1c19      	adds	r1, r3, #0
 8006ada:	1c10      	adds	r0, r2, #0
 8006adc:	f7f9 fd0a 	bl	80004f4 <__aeabi_fcmpgt>
 8006ae0:	1e03      	subs	r3, r0, #0
 8006ae2:	d006      	beq.n	8006af2 <GetHead+0x20e>
		strcat(Head,AlartStr_OverSpeed);
 8006ae4:	4a6b      	ldr	r2, [pc, #428]	; (8006c94 <GetHead+0x3b0>)
 8006ae6:	4b58      	ldr	r3, [pc, #352]	; (8006c48 <GetHead+0x364>)
 8006ae8:	0011      	movs	r1, r2
 8006aea:	0018      	movs	r0, r3
 8006aec:	f00b fa92 	bl	8012014 <strcat>
 8006af0:	e122      	b.n	8006d38 <GetHead+0x454>
	}
	else if(EmergencyWireBreak>0){
 8006af2:	4b69      	ldr	r3, [pc, #420]	; (8006c98 <GetHead+0x3b4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd09      	ble.n	8006b0e <GetHead+0x22a>
		strcat(Head,AlartStr_EmergencyWireBreak);
 8006afa:	4a68      	ldr	r2, [pc, #416]	; (8006c9c <GetHead+0x3b8>)
 8006afc:	4b52      	ldr	r3, [pc, #328]	; (8006c48 <GetHead+0x364>)
 8006afe:	0011      	movs	r1, r2
 8006b00:	0018      	movs	r0, r3
 8006b02:	f00b fa87 	bl	8012014 <strcat>
		EmergencyWireBreak=0;
 8006b06:	4b64      	ldr	r3, [pc, #400]	; (8006c98 <GetHead+0x3b4>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	e114      	b.n	8006d38 <GetHead+0x454>
	}
	else if(AccGyroStatus==1){
 8006b0e:	4b64      	ldr	r3, [pc, #400]	; (8006ca0 <GetHead+0x3bc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d106      	bne.n	8006b24 <GetHead+0x240>
		strcat(Head,AlartStr_HarshAcceleration);
 8006b16:	4a63      	ldr	r2, [pc, #396]	; (8006ca4 <GetHead+0x3c0>)
 8006b18:	4b4b      	ldr	r3, [pc, #300]	; (8006c48 <GetHead+0x364>)
 8006b1a:	0011      	movs	r1, r2
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f00b fa79 	bl	8012014 <strcat>
 8006b22:	e109      	b.n	8006d38 <GetHead+0x454>
	}

	else if(AccGyroStatus==2){
 8006b24:	4b5e      	ldr	r3, [pc, #376]	; (8006ca0 <GetHead+0x3bc>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d106      	bne.n	8006b3a <GetHead+0x256>
		strcat(Head,AlartStr_HarshBreaking);
 8006b2c:	4a5e      	ldr	r2, [pc, #376]	; (8006ca8 <GetHead+0x3c4>)
 8006b2e:	4b46      	ldr	r3, [pc, #280]	; (8006c48 <GetHead+0x364>)
 8006b30:	0011      	movs	r1, r2
 8006b32:	0018      	movs	r0, r3
 8006b34:	f00b fa6e 	bl	8012014 <strcat>
 8006b38:	e0fe      	b.n	8006d38 <GetHead+0x454>
	}
	else if(AccGyroStatus==3){
 8006b3a:	4b59      	ldr	r3, [pc, #356]	; (8006ca0 <GetHead+0x3bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d106      	bne.n	8006b50 <GetHead+0x26c>
		strcat(Head,AlartStr_RashTurning);
 8006b42:	4a5a      	ldr	r2, [pc, #360]	; (8006cac <GetHead+0x3c8>)
 8006b44:	4b40      	ldr	r3, [pc, #256]	; (8006c48 <GetHead+0x364>)
 8006b46:	0011      	movs	r1, r2
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f00b fa63 	bl	8012014 <strcat>
 8006b4e:	e0f3      	b.n	8006d38 <GetHead+0x454>
	}
	else if(EmergencyStateON>0){
 8006b50:	4b40      	ldr	r3, [pc, #256]	; (8006c54 <GetHead+0x370>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd09      	ble.n	8006b6c <GetHead+0x288>
		strcat(Head,AlartStr_EmergencyStateON);
 8006b58:	4a55      	ldr	r2, [pc, #340]	; (8006cb0 <GetHead+0x3cc>)
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <GetHead+0x364>)
 8006b5c:	0011      	movs	r1, r2
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f00b fa58 	bl	8012014 <strcat>
		EmergencyStateON=0;
 8006b64:	4b3b      	ldr	r3, [pc, #236]	; (8006c54 <GetHead+0x370>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e0e5      	b.n	8006d38 <GetHead+0x454>
	}
	else if(EmergencyStateOFF>0){
 8006b6c:	4b3b      	ldr	r3, [pc, #236]	; (8006c5c <GetHead+0x378>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dd09      	ble.n	8006b88 <GetHead+0x2a4>
		strcat(Head,AlartStr_EmergencyStateOFF);
 8006b74:	4a4f      	ldr	r2, [pc, #316]	; (8006cb4 <GetHead+0x3d0>)
 8006b76:	4b34      	ldr	r3, [pc, #208]	; (8006c48 <GetHead+0x364>)
 8006b78:	0011      	movs	r1, r2
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f00b fa4a 	bl	8012014 <strcat>
		EmergencyStateOFF=0;
 8006b80:	4b36      	ldr	r3, [pc, #216]	; (8006c5c <GetHead+0x378>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e0d7      	b.n	8006d38 <GetHead+0x454>
	}
	else if(IgnitionTurnedON>0){
 8006b88:	4b35      	ldr	r3, [pc, #212]	; (8006c60 <GetHead+0x37c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd09      	ble.n	8006ba4 <GetHead+0x2c0>
		strcat(Head,AlartStr_IgnitionTurnedON);
 8006b90:	4a49      	ldr	r2, [pc, #292]	; (8006cb8 <GetHead+0x3d4>)
 8006b92:	4b2d      	ldr	r3, [pc, #180]	; (8006c48 <GetHead+0x364>)
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f00b fa3c 	bl	8012014 <strcat>
		IgnitionTurnedON=0;
 8006b9c:	4b30      	ldr	r3, [pc, #192]	; (8006c60 <GetHead+0x37c>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e0c9      	b.n	8006d38 <GetHead+0x454>
	}
	else if(IgnitionTurnedOFF>0){
 8006ba4:	4b30      	ldr	r3, [pc, #192]	; (8006c68 <GetHead+0x384>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dd09      	ble.n	8006bc0 <GetHead+0x2dc>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 8006bac:	4a43      	ldr	r2, [pc, #268]	; (8006cbc <GetHead+0x3d8>)
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <GetHead+0x364>)
 8006bb0:	0011      	movs	r1, r2
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f00b fa2e 	bl	8012014 <strcat>
		IgnitionTurnedOFF=0;
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <GetHead+0x384>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e0bb      	b.n	8006d38 <GetHead+0x454>
	}
	else if(BOX_STATE=='C'){
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <GetHead+0x3dc>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b43      	cmp	r3, #67	; 0x43
 8006bc6:	d106      	bne.n	8006bd6 <GetHead+0x2f2>
		strcat(Head,AlartStr_BoxTemper);
 8006bc8:	4a3e      	ldr	r2, [pc, #248]	; (8006cc4 <GetHead+0x3e0>)
 8006bca:	4b1f      	ldr	r3, [pc, #124]	; (8006c48 <GetHead+0x364>)
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f00b fa20 	bl	8012014 <strcat>
 8006bd4:	e0b0      	b.n	8006d38 <GetHead+0x454>
	}
	else if(InternalBatterLow>0){
 8006bd6:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <GetHead+0x388>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd09      	ble.n	8006bf2 <GetHead+0x30e>
		strcat(Head,AlartStr_InternalBatterLow);
 8006bde:	4a3a      	ldr	r2, [pc, #232]	; (8006cc8 <GetHead+0x3e4>)
 8006be0:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <GetHead+0x364>)
 8006be2:	0011      	movs	r1, r2
 8006be4:	0018      	movs	r0, r3
 8006be6:	f00b fa15 	bl	8012014 <strcat>
		InternalBatterLow=0;
 8006bea:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <GetHead+0x388>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	e0a2      	b.n	8006d38 <GetHead+0x454>
	}
	else if(InternalBatteryChargedAgain>0){
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <GetHead+0x394>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd09      	ble.n	8006c0e <GetHead+0x32a>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 8006bfa:	4a34      	ldr	r2, [pc, #208]	; (8006ccc <GetHead+0x3e8>)
 8006bfc:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <GetHead+0x364>)
 8006bfe:	0011      	movs	r1, r2
 8006c00:	0018      	movs	r0, r3
 8006c02:	f00b fa07 	bl	8012014 <strcat>
		InternalBatteryChargedAgain=0;
 8006c06:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <GetHead+0x394>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e094      	b.n	8006d38 <GetHead+0x454>
	}
	else if(MainBatteryDisconnect>0){
 8006c0e:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <GetHead+0x398>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	dd09      	ble.n	8006c2a <GetHead+0x346>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 8006c16:	4a2e      	ldr	r2, [pc, #184]	; (8006cd0 <GetHead+0x3ec>)
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <GetHead+0x364>)
 8006c1a:	0011      	movs	r1, r2
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f00b f9f9 	bl	8012014 <strcat>
		MainBatteryDisconnect=0;
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <GetHead+0x398>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e086      	b.n	8006d38 <GetHead+0x454>

	}
	else if(MainBatteryReconnect>0){
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <GetHead+0x39c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dd52      	ble.n	8006cd8 <GetHead+0x3f4>
		strcat(Head,AlartStr_MainBatteryReconnect);
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <GetHead+0x3f0>)
 8006c34:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <GetHead+0x364>)
 8006c36:	0011      	movs	r1, r2
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f00b f9eb 	bl	8012014 <strcat>
		MainBatteryReconnect=0;
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <GetHead+0x39c>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e078      	b.n	8006d38 <GetHead+0x454>
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	200039f4 	.word	0x200039f4
 8006c4c:	20000034 	.word	0x20000034
 8006c50:	20000040 	.word	0x20000040
 8006c54:	200000dc 	.word	0x200000dc
 8006c58:	200039e0 	.word	0x200039e0
 8006c5c:	20003a78 	.word	0x20003a78
 8006c60:	20003a7c 	.word	0x20003a7c
 8006c64:	200039d8 	.word	0x200039d8
 8006c68:	20003a80 	.word	0x20003a80
 8006c6c:	20003a84 	.word	0x20003a84
 8006c70:	200039f0 	.word	0x200039f0
 8006c74:	40400000 	.word	0x40400000
 8006c78:	20003a88 	.word	0x20003a88
 8006c7c:	20003a8c 	.word	0x20003a8c
 8006c80:	20003a90 	.word	0x20003a90
 8006c84:	20001460 	.word	0x20001460
 8006c88:	41200000 	.word	0x41200000
 8006c8c:	20000050 	.word	0x20000050
 8006c90:	20000000 	.word	0x20000000
 8006c94:	200000d0 	.word	0x200000d0
 8006c98:	20003a94 	.word	0x20003a94
 8006c9c:	200000c8 	.word	0x200000c8
 8006ca0:	20000440 	.word	0x20000440
 8006ca4:	200000a0 	.word	0x200000a0
 8006ca8:	200000a8 	.word	0x200000a8
 8006cac:	200000b0 	.word	0x200000b0
 8006cb0:	20000090 	.word	0x20000090
 8006cb4:	20000098 	.word	0x20000098
 8006cb8:	20000080 	.word	0x20000080
 8006cbc:	20000088 	.word	0x20000088
 8006cc0:	20000033 	.word	0x20000033
 8006cc4:	20000078 	.word	0x20000078
 8006cc8:	20000068 	.word	0x20000068
 8006ccc:	20000070 	.word	0x20000070
 8006cd0:	20000058 	.word	0x20000058
 8006cd4:	20000060 	.word	0x20000060
	}
	else if(HistoryPVTData>0){
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <GetHead+0x4a4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dd09      	ble.n	8006cf4 <GetHead+0x410>
		strcat(Head,AlartStr_HistoryPVTData);
 8006ce0:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <GetHead+0x4a8>)
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <GetHead+0x4ac>)
 8006ce4:	0011      	movs	r1, r2
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f00b f994 	bl	8012014 <strcat>
		HistoryPVTData=0;
 8006cec:	4b26      	ldr	r3, [pc, #152]	; (8006d88 <GetHead+0x4a4>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e021      	b.n	8006d38 <GetHead+0x454>
	}
	else if(HealthPacket>0){
 8006cf4:	4b27      	ldr	r3, [pc, #156]	; (8006d94 <GetHead+0x4b0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dd09      	ble.n	8006d10 <GetHead+0x42c>
		strcat(Head,AlartStr_HealthPacket);
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <GetHead+0x4b4>)
 8006cfe:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <GetHead+0x4ac>)
 8006d00:	0011      	movs	r1, r2
 8006d02:	0018      	movs	r0, r3
 8006d04:	f00b f986 	bl	8012014 <strcat>
		HealthPacket=0;
 8006d08:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <GetHead+0x4b0>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	e013      	b.n	8006d38 <GetHead+0x454>
	}
	else if(OTAParameterChange>0){
 8006d10:	4b22      	ldr	r3, [pc, #136]	; (8006d9c <GetHead+0x4b8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dd09      	ble.n	8006d2c <GetHead+0x448>
		strcat(Head,AlartStr_OTAParameterChange);
 8006d18:	4a21      	ldr	r2, [pc, #132]	; (8006da0 <GetHead+0x4bc>)
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <GetHead+0x4ac>)
 8006d1c:	0011      	movs	r1, r2
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f00b f978 	bl	8012014 <strcat>
		OTAParameterChange=0;
 8006d24:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <GetHead+0x4b8>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e005      	b.n	8006d38 <GetHead+0x454>
	}
	else{
		strcat(Head,AlartStr_NormalPkt);
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <GetHead+0x4c0>)
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <GetHead+0x4ac>)
 8006d30:	0011      	movs	r1, r2
 8006d32:	0018      	movs	r0, r3
 8006d34:	f00b f96e 	bl	8012014 <strcat>
	}


	if(GSMSignal<=10){
 8006d38:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <GetHead+0x4c4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	491b      	ldr	r1, [pc, #108]	; (8006dac <GetHead+0x4c8>)
 8006d3e:	1c18      	adds	r0, r3, #0
 8006d40:	f7f9 fbce 	bl	80004e0 <__aeabi_fcmple>
 8006d44:	1e03      	subs	r3, r0, #0
 8006d46:	d00f      	beq.n	8006d68 <GetHead+0x484>
			strcat(Head,PacketStatusStrHist);
 8006d48:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <GetHead+0x4ac>)
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f7f9 f9dc 	bl	8000108 <strlen>
 8006d50:	0003      	movs	r3, r0
 8006d52:	001a      	movs	r2, r3
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <GetHead+0x4ac>)
 8006d56:	18d2      	adds	r2, r2, r3
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <GetHead+0x4cc>)
 8006d5a:	0010      	movs	r0, r2
 8006d5c:	0019      	movs	r1, r3
 8006d5e:	2303      	movs	r3, #3
 8006d60:	001a      	movs	r2, r3
 8006d62:	f00b fb17 	bl	8012394 <memcpy>
 8006d66:	e005      	b.n	8006d74 <GetHead+0x490>
	}else{
		strcat(Head,PacketStatusStrLive);
 8006d68:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <GetHead+0x4d0>)
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <GetHead+0x4ac>)
 8006d6c:	0011      	movs	r1, r2
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f00b f950 	bl	8012014 <strcat>
	}

	//%%%%%%%    AccGyro Rest    %%%%%%
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 8006d74:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <GetHead+0x4d4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dd02      	ble.n	8006d82 <GetHead+0x49e>
 8006d7c:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <GetHead+0x4d4>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]


}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bdb0      	pop	{r4, r5, r7, pc}
 8006d88:	20003a6c 	.word	0x20003a6c
 8006d8c:	20000050 	.word	0x20000050
 8006d90:	200039f4 	.word	0x200039f4
 8006d94:	20003a70 	.word	0x20003a70
 8006d98:	200000c0 	.word	0x200000c0
 8006d9c:	20003a74 	.word	0x20003a74
 8006da0:	200000b8 	.word	0x200000b8
 8006da4:	20000048 	.word	0x20000048
 8006da8:	20001460 	.word	0x20001460
 8006dac:	41200000 	.word	0x41200000
 8006db0:	08017278 	.word	0x08017278
 8006db4:	200000d8 	.word	0x200000d8
 8006db8:	20000444 	.word	0x20000444

08006dbc <TestRun>:

void TestRun(){
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0



	if(errorlen>10){
 8006dc2:	4be0      	ldr	r3, [pc, #896]	; (8007144 <TestRun+0x388>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b0a      	cmp	r3, #10
 8006dc8:	dd05      	ble.n	8006dd6 <TestRun+0x1a>
		Debug_Tx("GSMUART error rebooting device");
 8006dca:	4bdf      	ldr	r3, [pc, #892]	; (8007148 <TestRun+0x38c>)
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f000 fa31 	bl	8007234 <Debug_Tx>
		NVIC_SystemReset();
 8006dd2:	f7fc fa59 	bl	8003288 <__NVIC_SystemReset>




	//%%%%%%%    GSM Info Read    %%%%%%
	int GSMinfoT=tic();
 8006dd6:	f7fe fe85 	bl	8005ae4 <tic>
 8006dda:	0003      	movs	r3, r0
 8006ddc:	607b      	str	r3, [r7, #4]
	GSMCellInfo();
 8006dde:	f7fd f867 	bl	8003eb0 <GSMCellInfo>

	toc(GSMinfoT,"_________________________While loop GSMinfo");
 8006de2:	4ada      	ldr	r2, [pc, #872]	; (800714c <TestRun+0x390>)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	0011      	movs	r1, r2
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7fe fe83 	bl	8005af4 <toc>
	//%%%%%%%    Convert Numbers to string    %%%%%%



	// %%%%%%%%%%%%%%%%%%%%%%%%%Create Protocall %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	GetHead();
 8006dee:	f7ff fd79 	bl	80068e4 <GetHead>
	//Debug_Tx(Head);



	if (debug==1){
 8006df2:	4bd7      	ldr	r3, [pc, #860]	; (8007150 <TestRun+0x394>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d000      	beq.n	8006dfc <TestRun+0x40>
 8006dfa:	e0bd      	b.n	8006f78 <TestRun+0x1bc>
		memset(DataString,0,300);
 8006dfc:	2396      	movs	r3, #150	; 0x96
 8006dfe:	005a      	lsls	r2, r3, #1
 8006e00:	4bd4      	ldr	r3, [pc, #848]	; (8007154 <TestRun+0x398>)
 8006e02:	2100      	movs	r1, #0
 8006e04:	0018      	movs	r0, r3
 8006e06:	f00b f8fd 	bl	8012004 <memset>
		strcat(DataString,"Head:");
 8006e0a:	4bd2      	ldr	r3, [pc, #840]	; (8007154 <TestRun+0x398>)
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7f9 f97b 	bl	8000108 <strlen>
 8006e12:	0003      	movs	r3, r0
 8006e14:	001a      	movs	r2, r3
 8006e16:	4bcf      	ldr	r3, [pc, #828]	; (8007154 <TestRun+0x398>)
 8006e18:	18d2      	adds	r2, r2, r3
 8006e1a:	4bcf      	ldr	r3, [pc, #828]	; (8007158 <TestRun+0x39c>)
 8006e1c:	0010      	movs	r0, r2
 8006e1e:	0019      	movs	r1, r3
 8006e20:	2306      	movs	r3, #6
 8006e22:	001a      	movs	r2, r3
 8006e24:	f00b fab6 	bl	8012394 <memcpy>
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 8006e28:	4acc      	ldr	r2, [pc, #816]	; (800715c <TestRun+0x3a0>)
 8006e2a:	4bca      	ldr	r3, [pc, #808]	; (8007154 <TestRun+0x398>)
 8006e2c:	0011      	movs	r1, r2
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f00b f8f0 	bl	8012014 <strcat>
 8006e34:	4bc7      	ldr	r3, [pc, #796]	; (8007154 <TestRun+0x398>)
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7f9 f966 	bl	8000108 <strlen>
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	001a      	movs	r2, r3
 8006e40:	4bc4      	ldr	r3, [pc, #784]	; (8007154 <TestRun+0x398>)
 8006e42:	18d2      	adds	r2, r2, r3
 8006e44:	4bc6      	ldr	r3, [pc, #792]	; (8007160 <TestRun+0x3a4>)
 8006e46:	0010      	movs	r0, r2
 8006e48:	0019      	movs	r1, r3
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	f00b faa1 	bl	8012394 <memcpy>
		strcat(DataString,Regno);strcat(DataString,"\nGPSDS:");
 8006e52:	4ac4      	ldr	r2, [pc, #784]	; (8007164 <TestRun+0x3a8>)
 8006e54:	4bbf      	ldr	r3, [pc, #764]	; (8007154 <TestRun+0x398>)
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f00b f8db 	bl	8012014 <strcat>
 8006e5e:	4bbd      	ldr	r3, [pc, #756]	; (8007154 <TestRun+0x398>)
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7f9 f951 	bl	8000108 <strlen>
 8006e66:	0003      	movs	r3, r0
 8006e68:	001a      	movs	r2, r3
 8006e6a:	4bba      	ldr	r3, [pc, #744]	; (8007154 <TestRun+0x398>)
 8006e6c:	18d2      	adds	r2, r2, r3
 8006e6e:	4bbe      	ldr	r3, [pc, #760]	; (8007168 <TestRun+0x3ac>)
 8006e70:	0010      	movs	r0, r2
 8006e72:	0019      	movs	r1, r3
 8006e74:	2308      	movs	r3, #8
 8006e76:	001a      	movs	r2, r3
 8006e78:	f00b fa8c 	bl	8012394 <memcpy>
		strcat(DataString,gpsDataRet);strcat(DataString,"\nIMEI:");
 8006e7c:	4abb      	ldr	r2, [pc, #748]	; (800716c <TestRun+0x3b0>)
 8006e7e:	4bb5      	ldr	r3, [pc, #724]	; (8007154 <TestRun+0x398>)
 8006e80:	0011      	movs	r1, r2
 8006e82:	0018      	movs	r0, r3
 8006e84:	f00b f8c6 	bl	8012014 <strcat>
 8006e88:	4bb2      	ldr	r3, [pc, #712]	; (8007154 <TestRun+0x398>)
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7f9 f93c 	bl	8000108 <strlen>
 8006e90:	0003      	movs	r3, r0
 8006e92:	001a      	movs	r2, r3
 8006e94:	4baf      	ldr	r3, [pc, #700]	; (8007154 <TestRun+0x398>)
 8006e96:	18d2      	adds	r2, r2, r3
 8006e98:	4bb5      	ldr	r3, [pc, #724]	; (8007170 <TestRun+0x3b4>)
 8006e9a:	0010      	movs	r0, r2
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	2307      	movs	r3, #7
 8006ea0:	001a      	movs	r2, r3
 8006ea2:	f00b fa77 	bl	8012394 <memcpy>
		strcat(DataString,IMEI);strcat(DataString,"\nSIMOP:");
 8006ea6:	4ab3      	ldr	r2, [pc, #716]	; (8007174 <TestRun+0x3b8>)
 8006ea8:	4baa      	ldr	r3, [pc, #680]	; (8007154 <TestRun+0x398>)
 8006eaa:	0011      	movs	r1, r2
 8006eac:	0018      	movs	r0, r3
 8006eae:	f00b f8b1 	bl	8012014 <strcat>
 8006eb2:	4ba8      	ldr	r3, [pc, #672]	; (8007154 <TestRun+0x398>)
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f7f9 f927 	bl	8000108 <strlen>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	001a      	movs	r2, r3
 8006ebe:	4ba5      	ldr	r3, [pc, #660]	; (8007154 <TestRun+0x398>)
 8006ec0:	18d2      	adds	r2, r2, r3
 8006ec2:	4bad      	ldr	r3, [pc, #692]	; (8007178 <TestRun+0x3bc>)
 8006ec4:	0010      	movs	r0, r2
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	2308      	movs	r3, #8
 8006eca:	001a      	movs	r2, r3
 8006ecc:	f00b fa62 	bl	8012394 <memcpy>
		strcat(DataString,simop);strcat(DataString,"\nStratusString:");
 8006ed0:	4aaa      	ldr	r2, [pc, #680]	; (800717c <TestRun+0x3c0>)
 8006ed2:	4ba0      	ldr	r3, [pc, #640]	; (8007154 <TestRun+0x398>)
 8006ed4:	0011      	movs	r1, r2
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f00b f89c 	bl	8012014 <strcat>
 8006edc:	4b9d      	ldr	r3, [pc, #628]	; (8007154 <TestRun+0x398>)
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f7f9 f912 	bl	8000108 <strlen>
 8006ee4:	0003      	movs	r3, r0
 8006ee6:	001a      	movs	r2, r3
 8006ee8:	4b9a      	ldr	r3, [pc, #616]	; (8007154 <TestRun+0x398>)
 8006eea:	18d2      	adds	r2, r2, r3
 8006eec:	4ba4      	ldr	r3, [pc, #656]	; (8007180 <TestRun+0x3c4>)
 8006eee:	0010      	movs	r0, r2
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	2310      	movs	r3, #16
 8006ef4:	001a      	movs	r2, r3
 8006ef6:	f00b fa4d 	bl	8012394 <memcpy>
		strcat(DataString,StatusStrng);strcat(DataString,"\nGsminfo:");
 8006efa:	4aa2      	ldr	r2, [pc, #648]	; (8007184 <TestRun+0x3c8>)
 8006efc:	4b95      	ldr	r3, [pc, #596]	; (8007154 <TestRun+0x398>)
 8006efe:	0011      	movs	r1, r2
 8006f00:	0018      	movs	r0, r3
 8006f02:	f00b f887 	bl	8012014 <strcat>
 8006f06:	4b93      	ldr	r3, [pc, #588]	; (8007154 <TestRun+0x398>)
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7f9 f8fd 	bl	8000108 <strlen>
 8006f0e:	0003      	movs	r3, r0
 8006f10:	001a      	movs	r2, r3
 8006f12:	4b90      	ldr	r3, [pc, #576]	; (8007154 <TestRun+0x398>)
 8006f14:	18d2      	adds	r2, r2, r3
 8006f16:	4b9c      	ldr	r3, [pc, #624]	; (8007188 <TestRun+0x3cc>)
 8006f18:	0010      	movs	r0, r2
 8006f1a:	0019      	movs	r1, r3
 8006f1c:	230a      	movs	r3, #10
 8006f1e:	001a      	movs	r2, r3
 8006f20:	f00b fa38 	bl	8012394 <memcpy>
		strcat(DataString,gsminfo);strcat(DataString,"\nDig_io:");
 8006f24:	4a99      	ldr	r2, [pc, #612]	; (800718c <TestRun+0x3d0>)
 8006f26:	4b8b      	ldr	r3, [pc, #556]	; (8007154 <TestRun+0x398>)
 8006f28:	0011      	movs	r1, r2
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f00b f872 	bl	8012014 <strcat>
 8006f30:	4b88      	ldr	r3, [pc, #544]	; (8007154 <TestRun+0x398>)
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7f9 f8e8 	bl	8000108 <strlen>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	4b85      	ldr	r3, [pc, #532]	; (8007154 <TestRun+0x398>)
 8006f3e:	18d2      	adds	r2, r2, r3
 8006f40:	4b93      	ldr	r3, [pc, #588]	; (8007190 <TestRun+0x3d4>)
 8006f42:	0010      	movs	r0, r2
 8006f44:	0019      	movs	r1, r3
 8006f46:	2309      	movs	r3, #9
 8006f48:	001a      	movs	r2, r3
 8006f4a:	f00b fa23 	bl	8012394 <memcpy>
		strcat(DataString,Dig_io);strcat(DataString,",\n\0");
 8006f4e:	4a91      	ldr	r2, [pc, #580]	; (8007194 <TestRun+0x3d8>)
 8006f50:	4b80      	ldr	r3, [pc, #512]	; (8007154 <TestRun+0x398>)
 8006f52:	0011      	movs	r1, r2
 8006f54:	0018      	movs	r0, r3
 8006f56:	f00b f85d 	bl	8012014 <strcat>
 8006f5a:	4b7e      	ldr	r3, [pc, #504]	; (8007154 <TestRun+0x398>)
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7f9 f8d3 	bl	8000108 <strlen>
 8006f62:	0003      	movs	r3, r0
 8006f64:	001a      	movs	r2, r3
 8006f66:	4b7b      	ldr	r3, [pc, #492]	; (8007154 <TestRun+0x398>)
 8006f68:	18d2      	adds	r2, r2, r3
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <TestRun+0x3dc>)
 8006f6c:	0010      	movs	r0, r2
 8006f6e:	0019      	movs	r1, r3
 8006f70:	2303      	movs	r3, #3
 8006f72:	001a      	movs	r2, r3
 8006f74:	f00b fa0e 	bl	8012394 <memcpy>
		//Debug_Tx(DataString);
	}
    memset(DataString,0,300);
 8006f78:	2396      	movs	r3, #150	; 0x96
 8006f7a:	005a      	lsls	r2, r3, #1
 8006f7c:	4b75      	ldr	r3, [pc, #468]	; (8007154 <TestRun+0x398>)
 8006f7e:	2100      	movs	r1, #0
 8006f80:	0018      	movs	r0, r3
 8006f82:	f00b f83f 	bl	8012004 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8006f86:	4a75      	ldr	r2, [pc, #468]	; (800715c <TestRun+0x3a0>)
 8006f88:	4b72      	ldr	r3, [pc, #456]	; (8007154 <TestRun+0x398>)
 8006f8a:	0011      	movs	r1, r2
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f00b f841 	bl	8012014 <strcat>
 8006f92:	4b70      	ldr	r3, [pc, #448]	; (8007154 <TestRun+0x398>)
 8006f94:	0018      	movs	r0, r3
 8006f96:	f7f9 f8b7 	bl	8000108 <strlen>
 8006f9a:	0003      	movs	r3, r0
 8006f9c:	001a      	movs	r2, r3
 8006f9e:	4b6d      	ldr	r3, [pc, #436]	; (8007154 <TestRun+0x398>)
 8006fa0:	18d2      	adds	r2, r2, r3
 8006fa2:	4b7e      	ldr	r3, [pc, #504]	; (800719c <TestRun+0x3e0>)
 8006fa4:	0010      	movs	r0, r2
 8006fa6:	0019      	movs	r1, r3
 8006fa8:	2302      	movs	r3, #2
 8006faa:	001a      	movs	r2, r3
 8006fac:	f00b f9f2 	bl	8012394 <memcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8006fb0:	4a70      	ldr	r2, [pc, #448]	; (8007174 <TestRun+0x3b8>)
 8006fb2:	4b68      	ldr	r3, [pc, #416]	; (8007154 <TestRun+0x398>)
 8006fb4:	0011      	movs	r1, r2
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f00b f82c 	bl	8012014 <strcat>
 8006fbc:	4b65      	ldr	r3, [pc, #404]	; (8007154 <TestRun+0x398>)
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f7f9 f8a2 	bl	8000108 <strlen>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	4b62      	ldr	r3, [pc, #392]	; (8007154 <TestRun+0x398>)
 8006fca:	18d2      	adds	r2, r2, r3
 8006fcc:	4b73      	ldr	r3, [pc, #460]	; (800719c <TestRun+0x3e0>)
 8006fce:	0010      	movs	r0, r2
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	f00b f9dd 	bl	8012394 <memcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 8006fda:	4a62      	ldr	r2, [pc, #392]	; (8007164 <TestRun+0x3a8>)
 8006fdc:	4b5d      	ldr	r3, [pc, #372]	; (8007154 <TestRun+0x398>)
 8006fde:	0011      	movs	r1, r2
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f00b f817 	bl	8012014 <strcat>
 8006fe6:	4b5b      	ldr	r3, [pc, #364]	; (8007154 <TestRun+0x398>)
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7f9 f88d 	bl	8000108 <strlen>
 8006fee:	0003      	movs	r3, r0
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	4b58      	ldr	r3, [pc, #352]	; (8007154 <TestRun+0x398>)
 8006ff4:	18d2      	adds	r2, r2, r3
 8006ff6:	4b69      	ldr	r3, [pc, #420]	; (800719c <TestRun+0x3e0>)
 8006ff8:	0010      	movs	r0, r2
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	001a      	movs	r2, r3
 8007000:	f00b f9c8 	bl	8012394 <memcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8007004:	4a59      	ldr	r2, [pc, #356]	; (800716c <TestRun+0x3b0>)
 8007006:	4b53      	ldr	r3, [pc, #332]	; (8007154 <TestRun+0x398>)
 8007008:	0011      	movs	r1, r2
 800700a:	0018      	movs	r0, r3
 800700c:	f00b f802 	bl	8012014 <strcat>
 8007010:	4b50      	ldr	r3, [pc, #320]	; (8007154 <TestRun+0x398>)
 8007012:	0018      	movs	r0, r3
 8007014:	f7f9 f878 	bl	8000108 <strlen>
 8007018:	0003      	movs	r3, r0
 800701a:	001a      	movs	r2, r3
 800701c:	4b4d      	ldr	r3, [pc, #308]	; (8007154 <TestRun+0x398>)
 800701e:	18d2      	adds	r2, r2, r3
 8007020:	4b5e      	ldr	r3, [pc, #376]	; (800719c <TestRun+0x3e0>)
 8007022:	0010      	movs	r0, r2
 8007024:	0019      	movs	r1, r3
 8007026:	2302      	movs	r3, #2
 8007028:	001a      	movs	r2, r3
 800702a:	f00b f9b3 	bl	8012394 <memcpy>
	strcat(DataString,simop);strcat(DataString,",");
 800702e:	4a53      	ldr	r2, [pc, #332]	; (800717c <TestRun+0x3c0>)
 8007030:	4b48      	ldr	r3, [pc, #288]	; (8007154 <TestRun+0x398>)
 8007032:	0011      	movs	r1, r2
 8007034:	0018      	movs	r0, r3
 8007036:	f00a ffed 	bl	8012014 <strcat>
 800703a:	4b46      	ldr	r3, [pc, #280]	; (8007154 <TestRun+0x398>)
 800703c:	0018      	movs	r0, r3
 800703e:	f7f9 f863 	bl	8000108 <strlen>
 8007042:	0003      	movs	r3, r0
 8007044:	001a      	movs	r2, r3
 8007046:	4b43      	ldr	r3, [pc, #268]	; (8007154 <TestRun+0x398>)
 8007048:	18d2      	adds	r2, r2, r3
 800704a:	4b54      	ldr	r3, [pc, #336]	; (800719c <TestRun+0x3e0>)
 800704c:	0010      	movs	r0, r2
 800704e:	0019      	movs	r1, r3
 8007050:	2302      	movs	r3, #2
 8007052:	001a      	movs	r2, r3
 8007054:	f00b f99e 	bl	8012394 <memcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8007058:	4a4a      	ldr	r2, [pc, #296]	; (8007184 <TestRun+0x3c8>)
 800705a:	4b3e      	ldr	r3, [pc, #248]	; (8007154 <TestRun+0x398>)
 800705c:	0011      	movs	r1, r2
 800705e:	0018      	movs	r0, r3
 8007060:	f00a ffd8 	bl	8012014 <strcat>
 8007064:	4b3b      	ldr	r3, [pc, #236]	; (8007154 <TestRun+0x398>)
 8007066:	0018      	movs	r0, r3
 8007068:	f7f9 f84e 	bl	8000108 <strlen>
 800706c:	0003      	movs	r3, r0
 800706e:	001a      	movs	r2, r3
 8007070:	4b38      	ldr	r3, [pc, #224]	; (8007154 <TestRun+0x398>)
 8007072:	18d2      	adds	r2, r2, r3
 8007074:	4b49      	ldr	r3, [pc, #292]	; (800719c <TestRun+0x3e0>)
 8007076:	0010      	movs	r0, r2
 8007078:	0019      	movs	r1, r3
 800707a:	2302      	movs	r3, #2
 800707c:	001a      	movs	r2, r3
 800707e:	f00b f989 	bl	8012394 <memcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8007082:	4a42      	ldr	r2, [pc, #264]	; (800718c <TestRun+0x3d0>)
 8007084:	4b33      	ldr	r3, [pc, #204]	; (8007154 <TestRun+0x398>)
 8007086:	0011      	movs	r1, r2
 8007088:	0018      	movs	r0, r3
 800708a:	f00a ffc3 	bl	8012014 <strcat>
 800708e:	4b31      	ldr	r3, [pc, #196]	; (8007154 <TestRun+0x398>)
 8007090:	0018      	movs	r0, r3
 8007092:	f7f9 f839 	bl	8000108 <strlen>
 8007096:	0003      	movs	r3, r0
 8007098:	001a      	movs	r2, r3
 800709a:	4b2e      	ldr	r3, [pc, #184]	; (8007154 <TestRun+0x398>)
 800709c:	18d2      	adds	r2, r2, r3
 800709e:	4b3f      	ldr	r3, [pc, #252]	; (800719c <TestRun+0x3e0>)
 80070a0:	0010      	movs	r0, r2
 80070a2:	0019      	movs	r1, r3
 80070a4:	2302      	movs	r3, #2
 80070a6:	001a      	movs	r2, r3
 80070a8:	f00b f974 	bl	8012394 <memcpy>
 	strcat(DataString,Dig_io);strcat(DataString,"\0");
 80070ac:	4a39      	ldr	r2, [pc, #228]	; (8007194 <TestRun+0x3d8>)
 80070ae:	4b29      	ldr	r3, [pc, #164]	; (8007154 <TestRun+0x398>)
 80070b0:	0011      	movs	r1, r2
 80070b2:	0018      	movs	r0, r3
 80070b4:	f00a ffae 	bl	8012014 <strcat>
 	// %%%%%%%%%%%%%%%%%%%%%%%%%Add Checksum %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 80070b8:	4b26      	ldr	r3, [pc, #152]	; (8007154 <TestRun+0x398>)
 80070ba:	0018      	movs	r0, r3
 80070bc:	f7fe fac2 	bl	8005644 <nmea0183_checksum>
 80070c0:	0002      	movs	r2, r0
 80070c2:	4937      	ldr	r1, [pc, #220]	; (80071a0 <TestRun+0x3e4>)
 80070c4:	4b37      	ldr	r3, [pc, #220]	; (80071a4 <TestRun+0x3e8>)
 80070c6:	0018      	movs	r0, r3
 80070c8:	f00a ff30 	bl	8011f2c <siprintf>
    strcat(DataString,"*\0");
 80070cc:	4b21      	ldr	r3, [pc, #132]	; (8007154 <TestRun+0x398>)
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7f9 f81a 	bl	8000108 <strlen>
 80070d4:	0003      	movs	r3, r0
 80070d6:	001a      	movs	r2, r3
 80070d8:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <TestRun+0x398>)
 80070da:	18d2      	adds	r2, r2, r3
 80070dc:	4b32      	ldr	r3, [pc, #200]	; (80071a8 <TestRun+0x3ec>)
 80070de:	0010      	movs	r0, r2
 80070e0:	0019      	movs	r1, r3
 80070e2:	2302      	movs	r3, #2
 80070e4:	001a      	movs	r2, r3
 80070e6:	f00b f955 	bl	8012394 <memcpy>
    strcat(DataString,checksum);
 80070ea:	4a2e      	ldr	r2, [pc, #184]	; (80071a4 <TestRun+0x3e8>)
 80070ec:	4b19      	ldr	r3, [pc, #100]	; (8007154 <TestRun+0x398>)
 80070ee:	0011      	movs	r1, r2
 80070f0:	0018      	movs	r0, r3
 80070f2:	f00a ff8f 	bl	8012014 <strcat>



    if (debug==1){
 80070f6:	4b16      	ldr	r3, [pc, #88]	; (8007150 <TestRun+0x394>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d103      	bne.n	8007106 <TestRun+0x34a>
    		Debug_Tx(DataString);
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <TestRun+0x398>)
 8007100:	0018      	movs	r0, r3
 8007102:	f000 f897 	bl	8007234 <Debug_Tx>
    }
    if(ServerConnected==1){
 8007106:	4b29      	ldr	r3, [pc, #164]	; (80071ac <TestRun+0x3f0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d156      	bne.n	80071bc <TestRun+0x400>
    	while(ReadQdata()>0){
 800710e:	e003      	b.n	8007118 <TestRun+0x35c>
			ProcessTCPAll( ReadMDataS);
 8007110:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <TestRun+0x3f4>)
 8007112:	0018      	movs	r0, r3
 8007114:	f7fd f938 	bl	8004388 <ProcessTCPAll>
    	while(ReadQdata()>0){
 8007118:	f7fd fe84 	bl	8004e24 <ReadQdata>
 800711c:	1e03      	subs	r3, r0, #0
 800711e:	dcf7      	bgt.n	8007110 <TestRun+0x354>
    	}
    	// %%%%%%%%%%%%%%%%%%%%%%%%Send Protocall %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    	int tcpsendT=tic();
 8007120:	f7fe fce0 	bl	8005ae4 <tic>
 8007124:	0003      	movs	r3, r0
 8007126:	603b      	str	r3, [r7, #0]

     	ProcessTCPAll(DataString);
 8007128:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <TestRun+0x398>)
 800712a:	0018      	movs	r0, r3
 800712c:	f7fd f92c 	bl	8004388 <ProcessTCPAll>
     	toc( tcpsendT,"_________________________While loop tcp send data");
 8007130:	4a20      	ldr	r2, [pc, #128]	; (80071b4 <TestRun+0x3f8>)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	0011      	movs	r1, r2
 8007136:	0018      	movs	r0, r3
 8007138:	f7fe fcdc 	bl	8005af4 <toc>
     	RunCnt=0;
 800713c:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <TestRun+0x3fc>)
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e05c      	b.n	80071fe <TestRun+0x442>
 8007144:	2000145c 	.word	0x2000145c
 8007148:	08017050 	.word	0x08017050
 800714c:	08017070 	.word	0x08017070
 8007150:	2000000c 	.word	0x2000000c
 8007154:	200002e4 	.word	0x200002e4
 8007158:	0801709c 	.word	0x0801709c
 800715c:	200039f4 	.word	0x200039f4
 8007160:	080170a4 	.word	0x080170a4
 8007164:	20000414 	.word	0x20000414
 8007168:	080170ac 	.word	0x080170ac
 800716c:	20003950 	.word	0x20003950
 8007170:	080170b4 	.word	0x080170b4
 8007174:	20000428 	.word	0x20000428
 8007178:	080170bc 	.word	0x080170bc
 800717c:	20000448 	.word	0x20000448
 8007180:	080170c4 	.word	0x080170c4
 8007184:	20003a58 	.word	0x20003a58
 8007188:	080170d4 	.word	0x080170d4
 800718c:	200013a8 	.word	0x200013a8
 8007190:	080170e0 	.word	0x080170e0
 8007194:	200039b0 	.word	0x200039b0
 8007198:	080170ec 	.word	0x080170ec
 800719c:	08015c28 	.word	0x08015c28
 80071a0:	080170f0 	.word	0x080170f0
 80071a4:	20003a98 	.word	0x20003a98
 80071a8:	080170f8 	.word	0x080170f8
 80071ac:	200014dc 	.word	0x200014dc
 80071b0:	200024e0 	.word	0x200024e0
 80071b4:	080170fc 	.word	0x080170fc
 80071b8:	20000468 	.word	0x20000468
    }
    else{
    	if (debug==1){
 80071bc:	4b17      	ldr	r3, [pc, #92]	; (800721c <TestRun+0x460>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d103      	bne.n	80071cc <TestRun+0x410>
    		Debug_Tx("No GSM Signal Saving Data to Memory----");
 80071c4:	4b16      	ldr	r3, [pc, #88]	; (8007220 <TestRun+0x464>)
 80071c6:	0018      	movs	r0, r3
 80071c8:	f000 f834 	bl	8007234 <Debug_Tx>
    	}
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 80071cc:	4b15      	ldr	r3, [pc, #84]	; (8007224 <TestRun+0x468>)
 80071ce:	0018      	movs	r0, r3
 80071d0:	f7f8 ff9a 	bl	8000108 <strlen>
 80071d4:	0003      	movs	r3, r0
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3301      	adds	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	4b11      	ldr	r3, [pc, #68]	; (8007224 <TestRun+0x468>)
 80071de:	0011      	movs	r1, r2
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7fd fde7 	bl	8004db4 <WriteQdata>
    	RunCnt++;
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <TestRun+0x46c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	4b0e      	ldr	r3, [pc, #56]	; (8007228 <TestRun+0x46c>)
 80071ee:	601a      	str	r2, [r3, #0]
    	if(RunCnt>10){
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <TestRun+0x46c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b0a      	cmp	r3, #10
 80071f6:	dd02      	ble.n	80071fe <TestRun+0x442>
    		//InitGSM();
    		RunCnt=0;
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <TestRun+0x46c>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
		timedWork();

	}
	*/
	TimeCount=tic();
 80071fe:	f7fe fc71 	bl	8005ae4 <tic>
 8007202:	0002      	movs	r2, r0
 8007204:	4b09      	ldr	r3, [pc, #36]	; (800722c <TestRun+0x470>)
 8007206:	601a      	str	r2, [r3, #0]

 	//ProcessTCPAll(TracIP,"6055", DataString);
 	//ProcessTCPAll("34.74.249.18","300", DataString);
 	//ProcessTCPAll("34.74.249.18","300", DataString, "taisysnet");

 	seqNo=seqNo+1;
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <TestRun+0x474>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <TestRun+0x474>)
 8007210:	601a      	str	r2, [r3, #0]


}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	46bd      	mov	sp, r7
 8007216:	b002      	add	sp, #8
 8007218:	bd80      	pop	{r7, pc}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	2000000c 	.word	0x2000000c
 8007220:	08017130 	.word	0x08017130
 8007224:	200002e4 	.word	0x200002e4
 8007228:	20000468 	.word	0x20000468
 800722c:	20000464 	.word	0x20000464
 8007230:	20000410 	.word	0x20000410

08007234 <Debug_Tx>:




static void Debug_Tx(char _out[]){
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <Debug_Tx+0x44>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	220c      	movs	r2, #12
 8007242:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	0018      	movs	r0, r3
 8007248:	f7f8 ff5e 	bl	8000108 <strlen>
 800724c:	0003      	movs	r3, r0
 800724e:	b29a      	uxth	r2, r3
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <Debug_Tx+0x48>)
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4808      	ldr	r0, [pc, #32]	; (8007278 <Debug_Tx+0x44>)
 8007256:	f004 ffad 	bl	800c1b4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800725a:	210c      	movs	r1, #12
 800725c:	187b      	adds	r3, r7, r1
 800725e:	4a08      	ldr	r2, [pc, #32]	; (8007280 <Debug_Tx+0x4c>)
 8007260:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007262:	1879      	adds	r1, r7, r1
 8007264:	4804      	ldr	r0, [pc, #16]	; (8007278 <Debug_Tx+0x44>)
 8007266:	230a      	movs	r3, #10
 8007268:	2202      	movs	r2, #2
 800726a:	f004 ffa3 	bl	800c1b4 <HAL_UART_Transmit>


}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	46bd      	mov	sp, r7
 8007272:	b004      	add	sp, #16
 8007274:	bd80      	pop	{r7, pc}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	20000758 	.word	0x20000758
 800727c:	00001388 	.word	0x00001388
 8007280:	00000a0d 	.word	0x00000a0d

08007284 <Debug_Rx>:


static char* Debug_Rx(){
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <Debug_Rx+0x24>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	220c      	movs	r2, #12
 800728e:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8007290:	2396      	movs	r3, #150	; 0x96
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	22fa      	movs	r2, #250	; 0xfa
 8007296:	0092      	lsls	r2, r2, #2
 8007298:	4904      	ldr	r1, [pc, #16]	; (80072ac <Debug_Rx+0x28>)
 800729a:	4803      	ldr	r0, [pc, #12]	; (80072a8 <Debug_Rx+0x24>)
 800729c:	f005 f826 	bl	800c2ec <HAL_UART_Receive>
	return(inn);
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <Debug_Rx+0x28>)

}
 80072a2:	0018      	movs	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000758 	.word	0x20000758
 80072ac:	2000043c 	.word	0x2000043c

080072b0 <GSM_Tx>:




static void GSM_Tx(const char _out[]){
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80072b8:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <GSM_Tx+0x30>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	220c      	movs	r2, #12
 80072be:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	0018      	movs	r0, r3
 80072c4:	f7f8 ff20 	bl	8000108 <strlen>
 80072c8:	0003      	movs	r3, r0
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	2396      	movs	r3, #150	; 0x96
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4803      	ldr	r0, [pc, #12]	; (80072e0 <GSM_Tx+0x30>)
 80072d4:	f004 ff6e 	bl	800c1b4 <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 80072d8:	46c0      	nop			; (mov r8, r8)
 80072da:	46bd      	mov	sp, r7
 80072dc:	b002      	add	sp, #8
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000630 	.word	0x20000630

080072e4 <GSM_TxL>:

static void GSM_TxL(const char _out[]){
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80072ec:	4b09      	ldr	r3, [pc, #36]	; (8007314 <GSM_TxL+0x30>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	220c      	movs	r2, #12
 80072f2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7f8 ff06 	bl	8000108 <strlen>
 80072fc:	0003      	movs	r3, r0
 80072fe:	b29a      	uxth	r2, r3
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <GSM_TxL+0x34>)
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4803      	ldr	r0, [pc, #12]	; (8007314 <GSM_TxL+0x30>)
 8007306:	f004 ff55 	bl	800c1b4 <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b002      	add	sp, #8
 8007310:	bd80      	pop	{r7, pc}
 8007312:	46c0      	nop			; (mov r8, r8)
 8007314:	20000630 	.word	0x20000630
 8007318:	00001388 	.word	0x00001388

0800731c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007320:	b672      	cpsid	i
}
 8007322:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007324:	e7fe      	b.n	8007324 <Error_Handler+0x8>
	...

08007328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800732e:	4b15      	ldr	r3, [pc, #84]	; (8007384 <HAL_MspInit+0x5c>)
 8007330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007332:	4b14      	ldr	r3, [pc, #80]	; (8007384 <HAL_MspInit+0x5c>)
 8007334:	2101      	movs	r1, #1
 8007336:	430a      	orrs	r2, r1
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <HAL_MspInit+0x5c>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2201      	movs	r2, #1
 8007340:	4013      	ands	r3, r2
 8007342:	607b      	str	r3, [r7, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <HAL_MspInit+0x5c>)
 8007348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800734a:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <HAL_MspInit+0x5c>)
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	0549      	lsls	r1, r1, #21
 8007350:	430a      	orrs	r2, r1
 8007352:	63da      	str	r2, [r3, #60]	; 0x3c
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <HAL_MspInit+0x5c>)
 8007356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	055b      	lsls	r3, r3, #21
 800735c:	4013      	ands	r3, r2
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007362:	2302      	movs	r3, #2
 8007364:	425b      	negs	r3, r3
 8007366:	2200      	movs	r2, #0
 8007368:	2103      	movs	r1, #3
 800736a:	0018      	movs	r0, r3
 800736c:	f001 fc5a 	bl	8008c24 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007370:	23c0      	movs	r3, #192	; 0xc0
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	0018      	movs	r0, r3
 8007376:	f000 fd35 	bl	8007de4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	46bd      	mov	sp, r7
 800737e:	b002      	add	sp, #8
 8007380:	bd80      	pop	{r7, pc}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	40021000 	.word	0x40021000

08007388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b08b      	sub	sp, #44	; 0x2c
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007390:	2414      	movs	r4, #20
 8007392:	193b      	adds	r3, r7, r4
 8007394:	0018      	movs	r0, r3
 8007396:	2314      	movs	r3, #20
 8007398:	001a      	movs	r2, r3
 800739a:	2100      	movs	r1, #0
 800739c:	f00a fe32 	bl	8012004 <memset>
  if(hadc->Instance==ADC1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a3b      	ldr	r2, [pc, #236]	; (8007494 <HAL_ADC_MspInit+0x10c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d16f      	bne.n	800748a <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80073aa:	4b3b      	ldr	r3, [pc, #236]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ae:	4b3a      	ldr	r3, [pc, #232]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073b0:	2180      	movs	r1, #128	; 0x80
 80073b2:	0349      	lsls	r1, r1, #13
 80073b4:	430a      	orrs	r2, r1
 80073b6:	641a      	str	r2, [r3, #64]	; 0x40
 80073b8:	4b37      	ldr	r3, [pc, #220]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073bc:	2380      	movs	r3, #128	; 0x80
 80073be:	035b      	lsls	r3, r3, #13
 80073c0:	4013      	ands	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073c6:	4b34      	ldr	r3, [pc, #208]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ca:	4b33      	ldr	r3, [pc, #204]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073cc:	2101      	movs	r1, #1
 80073ce:	430a      	orrs	r2, r1
 80073d0:	635a      	str	r2, [r3, #52]	; 0x34
 80073d2:	4b31      	ldr	r3, [pc, #196]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	2201      	movs	r2, #1
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073de:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e2:	4b2d      	ldr	r3, [pc, #180]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073e4:	2102      	movs	r1, #2
 80073e6:	430a      	orrs	r2, r1
 80073e8:	635a      	str	r2, [r3, #52]	; 0x34
 80073ea:	4b2b      	ldr	r3, [pc, #172]	; (8007498 <HAL_ADC_MspInit+0x110>)
 80073ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ee:	2202      	movs	r2, #2
 80073f0:	4013      	ands	r3, r2
 80073f2:	60bb      	str	r3, [r7, #8]
 80073f4:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80073f6:	193b      	adds	r3, r7, r4
 80073f8:	2203      	movs	r2, #3
 80073fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073fc:	193b      	adds	r3, r7, r4
 80073fe:	2203      	movs	r2, #3
 8007400:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007402:	193b      	adds	r3, r7, r4
 8007404:	2200      	movs	r2, #0
 8007406:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007408:	193a      	adds	r2, r7, r4
 800740a:	23a0      	movs	r3, #160	; 0xa0
 800740c:	05db      	lsls	r3, r3, #23
 800740e:	0011      	movs	r1, r2
 8007410:	0018      	movs	r0, r3
 8007412:	f001 ffa1 	bl	8009358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8007416:	193b      	adds	r3, r7, r4
 8007418:	4a20      	ldr	r2, [pc, #128]	; (800749c <HAL_ADC_MspInit+0x114>)
 800741a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800741c:	193b      	adds	r3, r7, r4
 800741e:	2203      	movs	r2, #3
 8007420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007422:	193b      	adds	r3, r7, r4
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007428:	193b      	adds	r3, r7, r4
 800742a:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <HAL_ADC_MspInit+0x118>)
 800742c:	0019      	movs	r1, r3
 800742e:	0010      	movs	r0, r2
 8007430:	f001 ff92 	bl	8009358 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007434:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007436:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <HAL_ADC_MspInit+0x120>)
 8007438:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800743a:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 800743c:	2205      	movs	r2, #5
 800743e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007440:	4b18      	ldr	r3, [pc, #96]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007442:	2200      	movs	r2, #0
 8007444:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007446:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007448:	2200      	movs	r2, #0
 800744a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800744c:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 800744e:	2280      	movs	r2, #128	; 0x80
 8007450:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007454:	2280      	movs	r2, #128	; 0x80
 8007456:	0092      	lsls	r2, r2, #2
 8007458:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 800745c:	2280      	movs	r2, #128	; 0x80
 800745e:	0112      	lsls	r2, r2, #4
 8007460:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007464:	2220      	movs	r2, #32
 8007466:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 800746a:	2200      	movs	r2, #0
 800746c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007470:	0018      	movs	r0, r3
 8007472:	f001 fbfd 	bl	8008c70 <HAL_DMA_Init>
 8007476:	1e03      	subs	r3, r0, #0
 8007478:	d001      	beq.n	800747e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800747a:	f7ff ff4f 	bl	800731c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007482:	651a      	str	r2, [r3, #80]	; 0x50
 8007484:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <HAL_ADC_MspInit+0x11c>)
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	46bd      	mov	sp, r7
 800748e:	b00b      	add	sp, #44	; 0x2c
 8007490:	bd90      	pop	{r4, r7, pc}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	40012400 	.word	0x40012400
 8007498:	40021000 	.word	0x40021000
 800749c:	00000402 	.word	0x00000402
 80074a0:	50000400 	.word	0x50000400
 80074a4:	200004d0 	.word	0x200004d0
 80074a8:	40020008 	.word	0x40020008

080074ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b091      	sub	sp, #68	; 0x44
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b4:	232c      	movs	r3, #44	; 0x2c
 80074b6:	18fb      	adds	r3, r7, r3
 80074b8:	0018      	movs	r0, r3
 80074ba:	2314      	movs	r3, #20
 80074bc:	001a      	movs	r2, r3
 80074be:	2100      	movs	r1, #0
 80074c0:	f00a fda0 	bl	8012004 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80074c4:	2410      	movs	r4, #16
 80074c6:	193b      	adds	r3, r7, r4
 80074c8:	0018      	movs	r0, r3
 80074ca:	231c      	movs	r3, #28
 80074cc:	001a      	movs	r2, r3
 80074ce:	2100      	movs	r1, #0
 80074d0:	f00a fd98 	bl	8012004 <memset>
  if(hi2c->Instance==I2C1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a22      	ldr	r2, [pc, #136]	; (8007564 <HAL_I2C_MspInit+0xb8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d13d      	bne.n	800755a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80074de:	193b      	adds	r3, r7, r4
 80074e0:	2220      	movs	r2, #32
 80074e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80074e4:	193b      	adds	r3, r7, r4
 80074e6:	2200      	movs	r2, #0
 80074e8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074ea:	193b      	adds	r3, r7, r4
 80074ec:	0018      	movs	r0, r3
 80074ee:	f003 fc89 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 80074f2:	1e03      	subs	r3, r0, #0
 80074f4:	d001      	beq.n	80074fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80074f6:	f7ff ff11 	bl	800731c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074fa:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <HAL_I2C_MspInit+0xbc>)
 80074fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074fe:	4b1a      	ldr	r3, [pc, #104]	; (8007568 <HAL_I2C_MspInit+0xbc>)
 8007500:	2102      	movs	r1, #2
 8007502:	430a      	orrs	r2, r1
 8007504:	635a      	str	r2, [r3, #52]	; 0x34
 8007506:	4b18      	ldr	r3, [pc, #96]	; (8007568 <HAL_I2C_MspInit+0xbc>)
 8007508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750a:	2202      	movs	r2, #2
 800750c:	4013      	ands	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8007512:	212c      	movs	r1, #44	; 0x2c
 8007514:	187b      	adds	r3, r7, r1
 8007516:	22c0      	movs	r2, #192	; 0xc0
 8007518:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800751a:	187b      	adds	r3, r7, r1
 800751c:	2212      	movs	r2, #18
 800751e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007520:	187b      	adds	r3, r7, r1
 8007522:	2201      	movs	r2, #1
 8007524:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007526:	187b      	adds	r3, r7, r1
 8007528:	2200      	movs	r2, #0
 800752a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800752c:	187b      	adds	r3, r7, r1
 800752e:	2206      	movs	r2, #6
 8007530:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007532:	187b      	adds	r3, r7, r1
 8007534:	4a0d      	ldr	r2, [pc, #52]	; (800756c <HAL_I2C_MspInit+0xc0>)
 8007536:	0019      	movs	r1, r3
 8007538:	0010      	movs	r0, r2
 800753a:	f001 ff0d 	bl	8009358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800753e:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <HAL_I2C_MspInit+0xbc>)
 8007540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007542:	4b09      	ldr	r3, [pc, #36]	; (8007568 <HAL_I2C_MspInit+0xbc>)
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	0389      	lsls	r1, r1, #14
 8007548:	430a      	orrs	r2, r1
 800754a:	63da      	str	r2, [r3, #60]	; 0x3c
 800754c:	4b06      	ldr	r3, [pc, #24]	; (8007568 <HAL_I2C_MspInit+0xbc>)
 800754e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007550:	2380      	movs	r3, #128	; 0x80
 8007552:	039b      	lsls	r3, r3, #14
 8007554:	4013      	ands	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
 8007558:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	b011      	add	sp, #68	; 0x44
 8007560:	bd90      	pop	{r4, r7, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	40005400 	.word	0x40005400
 8007568:	40021000 	.word	0x40021000
 800756c:	50000400 	.word	0x50000400

08007570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b08b      	sub	sp, #44	; 0x2c
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007578:	2414      	movs	r4, #20
 800757a:	193b      	adds	r3, r7, r4
 800757c:	0018      	movs	r0, r3
 800757e:	2314      	movs	r3, #20
 8007580:	001a      	movs	r2, r3
 8007582:	2100      	movs	r1, #0
 8007584:	f00a fd3e 	bl	8012004 <memset>
  if(hspi->Instance==SPI1)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <HAL_SPI_MspInit+0x8c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d130      	bne.n	80075f4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007592:	4b1b      	ldr	r3, [pc, #108]	; (8007600 <HAL_SPI_MspInit+0x90>)
 8007594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007596:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <HAL_SPI_MspInit+0x90>)
 8007598:	2180      	movs	r1, #128	; 0x80
 800759a:	0149      	lsls	r1, r1, #5
 800759c:	430a      	orrs	r2, r1
 800759e:	641a      	str	r2, [r3, #64]	; 0x40
 80075a0:	4b17      	ldr	r3, [pc, #92]	; (8007600 <HAL_SPI_MspInit+0x90>)
 80075a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	015b      	lsls	r3, r3, #5
 80075a8:	4013      	ands	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075ae:	4b14      	ldr	r3, [pc, #80]	; (8007600 <HAL_SPI_MspInit+0x90>)
 80075b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <HAL_SPI_MspInit+0x90>)
 80075b4:	2101      	movs	r1, #1
 80075b6:	430a      	orrs	r2, r1
 80075b8:	635a      	str	r2, [r3, #52]	; 0x34
 80075ba:	4b11      	ldr	r3, [pc, #68]	; (8007600 <HAL_SPI_MspInit+0x90>)
 80075bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075be:	2201      	movs	r2, #1
 80075c0:	4013      	ands	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80075c6:	0021      	movs	r1, r4
 80075c8:	187b      	adds	r3, r7, r1
 80075ca:	22e0      	movs	r2, #224	; 0xe0
 80075cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ce:	187b      	adds	r3, r7, r1
 80075d0:	2202      	movs	r2, #2
 80075d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d4:	187b      	adds	r3, r7, r1
 80075d6:	2200      	movs	r2, #0
 80075d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075da:	187b      	adds	r3, r7, r1
 80075dc:	2200      	movs	r2, #0
 80075de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80075e0:	187b      	adds	r3, r7, r1
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075e6:	187a      	adds	r2, r7, r1
 80075e8:	23a0      	movs	r3, #160	; 0xa0
 80075ea:	05db      	lsls	r3, r3, #23
 80075ec:	0011      	movs	r1, r2
 80075ee:	0018      	movs	r0, r3
 80075f0:	f001 feb2 	bl	8009358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80075f4:	46c0      	nop			; (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b00b      	add	sp, #44	; 0x2c
 80075fa:	bd90      	pop	{r4, r7, pc}
 80075fc:	40013000 	.word	0x40013000
 8007600:	40021000 	.word	0x40021000

08007604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a0d      	ldr	r2, [pc, #52]	; (8007648 <HAL_TIM_Base_MspInit+0x44>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d113      	bne.n	800763e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007616:	4b0d      	ldr	r3, [pc, #52]	; (800764c <HAL_TIM_Base_MspInit+0x48>)
 8007618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <HAL_TIM_Base_MspInit+0x48>)
 800761c:	2110      	movs	r1, #16
 800761e:	430a      	orrs	r2, r1
 8007620:	63da      	str	r2, [r3, #60]	; 0x3c
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <HAL_TIM_Base_MspInit+0x48>)
 8007624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007626:	2210      	movs	r2, #16
 8007628:	4013      	ands	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 800762e:	2200      	movs	r2, #0
 8007630:	2103      	movs	r1, #3
 8007632:	2011      	movs	r0, #17
 8007634:	f001 faf6 	bl	8008c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8007638:	2011      	movs	r0, #17
 800763a:	f001 fb08 	bl	8008c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	46bd      	mov	sp, r7
 8007642:	b004      	add	sp, #16
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	40001000 	.word	0x40001000
 800764c:	40021000 	.word	0x40021000

08007650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b095      	sub	sp, #84	; 0x54
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007658:	233c      	movs	r3, #60	; 0x3c
 800765a:	18fb      	adds	r3, r7, r3
 800765c:	0018      	movs	r0, r3
 800765e:	2314      	movs	r3, #20
 8007660:	001a      	movs	r2, r3
 8007662:	2100      	movs	r1, #0
 8007664:	f00a fcce 	bl	8012004 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007668:	2420      	movs	r4, #32
 800766a:	193b      	adds	r3, r7, r4
 800766c:	0018      	movs	r0, r3
 800766e:	231c      	movs	r3, #28
 8007670:	001a      	movs	r2, r3
 8007672:	2100      	movs	r1, #0
 8007674:	f00a fcc6 	bl	8012004 <memset>
  if(huart->Instance==USART1)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4aab      	ldr	r2, [pc, #684]	; (800792c <HAL_UART_MspInit+0x2dc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d172      	bne.n	8007768 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007682:	193b      	adds	r3, r7, r4
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007688:	193b      	adds	r3, r7, r4
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800768e:	193b      	adds	r3, r7, r4
 8007690:	0018      	movs	r0, r3
 8007692:	f003 fbb7 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 8007696:	1e03      	subs	r3, r0, #0
 8007698:	d001      	beq.n	800769e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800769a:	f7ff fe3f 	bl	800731c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800769e:	4ba4      	ldr	r3, [pc, #656]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80076a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076a2:	4ba3      	ldr	r3, [pc, #652]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80076a4:	2180      	movs	r1, #128	; 0x80
 80076a6:	01c9      	lsls	r1, r1, #7
 80076a8:	430a      	orrs	r2, r1
 80076aa:	641a      	str	r2, [r3, #64]	; 0x40
 80076ac:	4ba0      	ldr	r3, [pc, #640]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80076ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	4013      	ands	r3, r2
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ba:	4b9d      	ldr	r3, [pc, #628]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80076bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076be:	4b9c      	ldr	r3, [pc, #624]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80076c0:	2101      	movs	r1, #1
 80076c2:	430a      	orrs	r2, r1
 80076c4:	635a      	str	r2, [r3, #52]	; 0x34
 80076c6:	4b9a      	ldr	r3, [pc, #616]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80076c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ca:	2201      	movs	r2, #1
 80076cc:	4013      	ands	r3, r2
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 80076d2:	213c      	movs	r1, #60	; 0x3c
 80076d4:	187b      	adds	r3, r7, r1
 80076d6:	22c0      	movs	r2, #192	; 0xc0
 80076d8:	00d2      	lsls	r2, r2, #3
 80076da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076dc:	187b      	adds	r3, r7, r1
 80076de:	2202      	movs	r2, #2
 80076e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e2:	187b      	adds	r3, r7, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e8:	187b      	adds	r3, r7, r1
 80076ea:	2200      	movs	r2, #0
 80076ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80076ee:	187b      	adds	r3, r7, r1
 80076f0:	2201      	movs	r2, #1
 80076f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076f4:	187a      	adds	r2, r7, r1
 80076f6:	23a0      	movs	r3, #160	; 0xa0
 80076f8:	05db      	lsls	r3, r3, #23
 80076fa:	0011      	movs	r1, r2
 80076fc:	0018      	movs	r0, r3
 80076fe:	f001 fe2b 	bl	8009358 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8007702:	4b8c      	ldr	r3, [pc, #560]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 8007704:	4a8c      	ldr	r2, [pc, #560]	; (8007938 <HAL_UART_MspInit+0x2e8>)
 8007706:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8007708:	4b8a      	ldr	r3, [pc, #552]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 800770a:	2232      	movs	r2, #50	; 0x32
 800770c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800770e:	4b89      	ldr	r3, [pc, #548]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 8007710:	2200      	movs	r2, #0
 8007712:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007714:	4b87      	ldr	r3, [pc, #540]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 8007716:	2200      	movs	r2, #0
 8007718:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800771a:	4b86      	ldr	r3, [pc, #536]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 800771c:	2280      	movs	r2, #128	; 0x80
 800771e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007720:	4b84      	ldr	r3, [pc, #528]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 8007722:	2200      	movs	r2, #0
 8007724:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007726:	4b83      	ldr	r3, [pc, #524]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 8007728:	2200      	movs	r2, #0
 800772a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800772c:	4b81      	ldr	r3, [pc, #516]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 800772e:	2200      	movs	r2, #0
 8007730:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007732:	4b80      	ldr	r3, [pc, #512]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 8007734:	2200      	movs	r2, #0
 8007736:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007738:	4b7e      	ldr	r3, [pc, #504]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 800773a:	0018      	movs	r0, r3
 800773c:	f001 fa98 	bl	8008c70 <HAL_DMA_Init>
 8007740:	1e03      	subs	r3, r0, #0
 8007742:	d001      	beq.n	8007748 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8007744:	f7ff fdea 	bl	800731c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2180      	movs	r1, #128	; 0x80
 800774c:	4a79      	ldr	r2, [pc, #484]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 800774e:	505a      	str	r2, [r3, r1]
 8007750:	4b78      	ldr	r3, [pc, #480]	; (8007934 <HAL_UART_MspInit+0x2e4>)
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007756:	2200      	movs	r2, #0
 8007758:	2103      	movs	r1, #3
 800775a:	201b      	movs	r0, #27
 800775c:	f001 fa62 	bl	8008c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007760:	201b      	movs	r0, #27
 8007762:	f001 fa74 	bl	8008c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007766:	e0dd      	b.n	8007924 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART2)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a73      	ldr	r2, [pc, #460]	; (800793c <HAL_UART_MspInit+0x2ec>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d172      	bne.n	8007858 <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007772:	2120      	movs	r1, #32
 8007774:	187b      	adds	r3, r7, r1
 8007776:	2202      	movs	r2, #2
 8007778:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800777a:	187b      	adds	r3, r7, r1
 800777c:	2200      	movs	r2, #0
 800777e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007780:	187b      	adds	r3, r7, r1
 8007782:	0018      	movs	r0, r3
 8007784:	f003 fb3e 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 8007788:	1e03      	subs	r3, r0, #0
 800778a:	d001      	beq.n	8007790 <HAL_UART_MspInit+0x140>
      Error_Handler();
 800778c:	f7ff fdc6 	bl	800731c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007790:	4b67      	ldr	r3, [pc, #412]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 8007792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007794:	4b66      	ldr	r3, [pc, #408]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 8007796:	2180      	movs	r1, #128	; 0x80
 8007798:	0289      	lsls	r1, r1, #10
 800779a:	430a      	orrs	r2, r1
 800779c:	63da      	str	r2, [r3, #60]	; 0x3c
 800779e:	4b64      	ldr	r3, [pc, #400]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80077a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a2:	2380      	movs	r3, #128	; 0x80
 80077a4:	029b      	lsls	r3, r3, #10
 80077a6:	4013      	ands	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077ac:	4b60      	ldr	r3, [pc, #384]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80077ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b0:	4b5f      	ldr	r3, [pc, #380]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80077b2:	2101      	movs	r1, #1
 80077b4:	430a      	orrs	r2, r1
 80077b6:	635a      	str	r2, [r3, #52]	; 0x34
 80077b8:	4b5d      	ldr	r3, [pc, #372]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 80077ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077bc:	2201      	movs	r2, #1
 80077be:	4013      	ands	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 80077c4:	213c      	movs	r1, #60	; 0x3c
 80077c6:	187b      	adds	r3, r7, r1
 80077c8:	220c      	movs	r2, #12
 80077ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077cc:	187b      	adds	r3, r7, r1
 80077ce:	2202      	movs	r2, #2
 80077d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d2:	187b      	adds	r3, r7, r1
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077d8:	187b      	adds	r3, r7, r1
 80077da:	2200      	movs	r2, #0
 80077dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80077de:	187b      	adds	r3, r7, r1
 80077e0:	2201      	movs	r2, #1
 80077e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e4:	187a      	adds	r2, r7, r1
 80077e6:	23a0      	movs	r3, #160	; 0xa0
 80077e8:	05db      	lsls	r3, r3, #23
 80077ea:	0011      	movs	r1, r2
 80077ec:	0018      	movs	r0, r3
 80077ee:	f001 fdb3 	bl	8009358 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80077f2:	4b53      	ldr	r3, [pc, #332]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 80077f4:	4a53      	ldr	r2, [pc, #332]	; (8007944 <HAL_UART_MspInit+0x2f4>)
 80077f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80077f8:	4b51      	ldr	r3, [pc, #324]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 80077fa:	2234      	movs	r2, #52	; 0x34
 80077fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077fe:	4b50      	ldr	r3, [pc, #320]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 8007800:	2200      	movs	r2, #0
 8007802:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007804:	4b4e      	ldr	r3, [pc, #312]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 8007806:	2200      	movs	r2, #0
 8007808:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800780a:	4b4d      	ldr	r3, [pc, #308]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 800780c:	2280      	movs	r2, #128	; 0x80
 800780e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007810:	4b4b      	ldr	r3, [pc, #300]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 8007812:	2200      	movs	r2, #0
 8007814:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007816:	4b4a      	ldr	r3, [pc, #296]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 8007818:	2200      	movs	r2, #0
 800781a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800781c:	4b48      	ldr	r3, [pc, #288]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 800781e:	2200      	movs	r2, #0
 8007820:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007822:	4b47      	ldr	r3, [pc, #284]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 8007824:	2200      	movs	r2, #0
 8007826:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007828:	4b45      	ldr	r3, [pc, #276]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 800782a:	0018      	movs	r0, r3
 800782c:	f001 fa20 	bl	8008c70 <HAL_DMA_Init>
 8007830:	1e03      	subs	r3, r0, #0
 8007832:	d001      	beq.n	8007838 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8007834:	f7ff fd72 	bl	800731c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2180      	movs	r1, #128	; 0x80
 800783c:	4a40      	ldr	r2, [pc, #256]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 800783e:	505a      	str	r2, [r3, r1]
 8007840:	4b3f      	ldr	r3, [pc, #252]	; (8007940 <HAL_UART_MspInit+0x2f0>)
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007846:	2200      	movs	r2, #0
 8007848:	2103      	movs	r1, #3
 800784a:	201c      	movs	r0, #28
 800784c:	f001 f9ea 	bl	8008c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007850:	201c      	movs	r0, #28
 8007852:	f001 f9fc 	bl	8008c4e <HAL_NVIC_EnableIRQ>
}
 8007856:	e065      	b.n	8007924 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a3a      	ldr	r2, [pc, #232]	; (8007948 <HAL_UART_MspInit+0x2f8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d160      	bne.n	8007924 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007862:	4b33      	ldr	r3, [pc, #204]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 8007864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007866:	4b32      	ldr	r3, [pc, #200]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 8007868:	2180      	movs	r1, #128	; 0x80
 800786a:	02c9      	lsls	r1, r1, #11
 800786c:	430a      	orrs	r2, r1
 800786e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007870:	4b2f      	ldr	r3, [pc, #188]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 8007872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007874:	2380      	movs	r3, #128	; 0x80
 8007876:	02db      	lsls	r3, r3, #11
 8007878:	4013      	ands	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800787e:	4b2c      	ldr	r3, [pc, #176]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 8007880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007882:	4b2b      	ldr	r3, [pc, #172]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 8007884:	2102      	movs	r1, #2
 8007886:	430a      	orrs	r2, r1
 8007888:	635a      	str	r2, [r3, #52]	; 0x34
 800788a:	4b29      	ldr	r3, [pc, #164]	; (8007930 <HAL_UART_MspInit+0x2e0>)
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	2202      	movs	r2, #2
 8007890:	4013      	ands	r3, r2
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8007896:	213c      	movs	r1, #60	; 0x3c
 8007898:	187b      	adds	r3, r7, r1
 800789a:	2205      	movs	r2, #5
 800789c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789e:	187b      	adds	r3, r7, r1
 80078a0:	2202      	movs	r2, #2
 80078a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078aa:	187b      	adds	r3, r7, r1
 80078ac:	2200      	movs	r2, #0
 80078ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	2204      	movs	r2, #4
 80078b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	4a24      	ldr	r2, [pc, #144]	; (800794c <HAL_UART_MspInit+0x2fc>)
 80078ba:	0019      	movs	r1, r3
 80078bc:	0010      	movs	r0, r2
 80078be:	f001 fd4b 	bl	8009358 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80078c2:	4b23      	ldr	r3, [pc, #140]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078c4:	4a23      	ldr	r2, [pc, #140]	; (8007954 <HAL_UART_MspInit+0x304>)
 80078c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80078c8:	4b21      	ldr	r3, [pc, #132]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078ca:	2237      	movs	r2, #55	; 0x37
 80078cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80078ce:	4b20      	ldr	r3, [pc, #128]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078d0:	2210      	movs	r2, #16
 80078d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078d4:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80078da:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078e0:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80078ec:	4b18      	ldr	r3, [pc, #96]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80078f2:	4b17      	ldr	r3, [pc, #92]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <HAL_UART_MspInit+0x300>)
 80078fa:	0018      	movs	r0, r3
 80078fc:	f001 f9b8 	bl	8008c70 <HAL_DMA_Init>
 8007900:	1e03      	subs	r3, r0, #0
 8007902:	d001      	beq.n	8007908 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8007904:	f7ff fd0a 	bl	800731c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a11      	ldr	r2, [pc, #68]	; (8007950 <HAL_UART_MspInit+0x300>)
 800790c:	67da      	str	r2, [r3, #124]	; 0x7c
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <HAL_UART_MspInit+0x300>)
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007914:	2200      	movs	r2, #0
 8007916:	2103      	movs	r1, #3
 8007918:	201d      	movs	r0, #29
 800791a:	f001 f983 	bl	8008c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800791e:	201d      	movs	r0, #29
 8007920:	f001 f995 	bl	8008c4e <HAL_NVIC_EnableIRQ>
}
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	46bd      	mov	sp, r7
 8007928:	b015      	add	sp, #84	; 0x54
 800792a:	bd90      	pop	{r4, r7, pc}
 800792c:	40013800 	.word	0x40013800
 8007930:	40021000 	.word	0x40021000
 8007934:	200007ec 	.word	0x200007ec
 8007938:	4002001c 	.word	0x4002001c
 800793c:	40004400 	.word	0x40004400
 8007940:	20000848 	.word	0x20000848
 8007944:	40020030 	.word	0x40020030
 8007948:	40004800 	.word	0x40004800
 800794c:	50000400 	.word	0x50000400
 8007950:	200008a4 	.word	0x200008a4
 8007954:	40020044 	.word	0x40020044

08007958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007958:	b5b0      	push	{r4, r5, r7, lr}
 800795a:	b08c      	sub	sp, #48	; 0x30
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8007960:	232b      	movs	r3, #43	; 0x2b
 8007962:	18fb      	adds	r3, r7, r3
 8007964:	2200      	movs	r2, #0
 8007966:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007968:	4b38      	ldr	r3, [pc, #224]	; (8007a4c <HAL_InitTick+0xf4>)
 800796a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800796c:	4b37      	ldr	r3, [pc, #220]	; (8007a4c <HAL_InitTick+0xf4>)
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	0109      	lsls	r1, r1, #4
 8007972:	430a      	orrs	r2, r1
 8007974:	641a      	str	r2, [r3, #64]	; 0x40
 8007976:	4b35      	ldr	r3, [pc, #212]	; (8007a4c <HAL_InitTick+0xf4>)
 8007978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800797a:	2380      	movs	r3, #128	; 0x80
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	4013      	ands	r3, r2
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007984:	230c      	movs	r3, #12
 8007986:	18fa      	adds	r2, r7, r3
 8007988:	2410      	movs	r4, #16
 800798a:	193b      	adds	r3, r7, r4
 800798c:	0011      	movs	r1, r2
 800798e:	0018      	movs	r0, r3
 8007990:	f003 fa0e 	bl	800adb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007994:	193b      	adds	r3, r7, r4
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80079a0:	f003 f9f0 	bl	800ad84 <HAL_RCC_GetPCLK1Freq>
 80079a4:	0003      	movs	r3, r0
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079a8:	e004      	b.n	80079b4 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80079aa:	f003 f9eb 	bl	800ad84 <HAL_RCC_GetPCLK1Freq>
 80079ae:	0003      	movs	r3, r0
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	4926      	ldr	r1, [pc, #152]	; (8007a50 <HAL_InitTick+0xf8>)
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7f8 fbc1 	bl	8000140 <__udivsi3>
 80079be:	0003      	movs	r3, r0
 80079c0:	3b01      	subs	r3, #1
 80079c2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80079c4:	4b23      	ldr	r3, [pc, #140]	; (8007a54 <HAL_InitTick+0xfc>)
 80079c6:	4a24      	ldr	r2, [pc, #144]	; (8007a58 <HAL_InitTick+0x100>)
 80079c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80079ca:	4b22      	ldr	r3, [pc, #136]	; (8007a54 <HAL_InitTick+0xfc>)
 80079cc:	4a23      	ldr	r2, [pc, #140]	; (8007a5c <HAL_InitTick+0x104>)
 80079ce:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80079d0:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <HAL_InitTick+0xfc>)
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80079d6:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <HAL_InitTick+0xfc>)
 80079d8:	2200      	movs	r2, #0
 80079da:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079dc:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <HAL_InitTick+0xfc>)
 80079de:	2200      	movs	r2, #0
 80079e0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <HAL_InitTick+0xfc>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80079e8:	252b      	movs	r5, #43	; 0x2b
 80079ea:	197c      	adds	r4, r7, r5
 80079ec:	4b19      	ldr	r3, [pc, #100]	; (8007a54 <HAL_InitTick+0xfc>)
 80079ee:	0018      	movs	r0, r3
 80079f0:	f004 f894 	bl	800bb1c <HAL_TIM_Base_Init>
 80079f4:	0003      	movs	r3, r0
 80079f6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80079f8:	197b      	adds	r3, r7, r5
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d11e      	bne.n	8007a3e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007a00:	197c      	adds	r4, r7, r5
 8007a02:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <HAL_InitTick+0xfc>)
 8007a04:	0018      	movs	r0, r3
 8007a06:	f004 f8e1 	bl	800bbcc <HAL_TIM_Base_Start_IT>
 8007a0a:	0003      	movs	r3, r0
 8007a0c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8007a0e:	197b      	adds	r3, r7, r5
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d113      	bne.n	8007a3e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8007a16:	200d      	movs	r0, #13
 8007a18:	f001 f919 	bl	8008c4e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d809      	bhi.n	8007a36 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	0019      	movs	r1, r3
 8007a28:	200d      	movs	r0, #13
 8007a2a:	f001 f8fb 	bl	8008c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <HAL_InitTick+0x108>)
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	e003      	b.n	8007a3e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8007a36:	232b      	movs	r3, #43	; 0x2b
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8007a3e:	232b      	movs	r3, #43	; 0x2b
 8007a40:	18fb      	adds	r3, r7, r3
 8007a42:	781b      	ldrb	r3, [r3, #0]
}
 8007a44:	0018      	movs	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b00c      	add	sp, #48	; 0x30
 8007a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	000f4240 	.word	0x000f4240
 8007a54:	20003aac 	.word	0x20003aac
 8007a58:	40012c00 	.word	0x40012c00
 8007a5c:	000003e7 	.word	0x000003e7
 8007a60:	200000e4 	.word	0x200000e4

08007a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007a68:	e7fe      	b.n	8007a68 <NMI_Handler+0x4>

08007a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a6e:	e7fe      	b.n	8007a6e <HardFault_Handler+0x4>

08007a70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007a74:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <DMA1_Channel1_IRQHandler+0x14>)
 8007a76:	0018      	movs	r0, r3
 8007a78:	f001 fad6 	bl	8009028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007a7c:	46c0      	nop			; (mov r8, r8)
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	200004d0 	.word	0x200004d0

08007a88 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f001 faca 	bl	8009028 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8007a96:	0018      	movs	r0, r3
 8007a98:	f001 fac6 	bl	8009028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	200007ec 	.word	0x200007ec
 8007aa8:	20000848 	.word	0x20000848

08007aac <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f001 fab8 	bl	8009028 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8007aba:	0018      	movs	r0, r3
 8007abc:	f001 fbf6 	bl	80092ac <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	200008a4 	.word	0x200008a4
 8007acc:	200004d0 	.word	0x200004d0

08007ad0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007ad4:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f004 f8ce 	bl	800bc78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8007adc:	46c0      	nop			; (mov r8, r8)
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	20003aac 	.word	0x20003aac

08007ae8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007aec:	4b03      	ldr	r3, [pc, #12]	; (8007afc <TIM6_IRQHandler+0x14>)
 8007aee:	0018      	movs	r0, r3
 8007af0:	f004 f8c2 	bl	800bc78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8007af4:	46c0      	nop			; (mov r8, r8)
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	200005e4 	.word	0x200005e4

08007b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007b04:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <USART1_IRQHandler+0x14>)
 8007b06:	0018      	movs	r0, r3
 8007b08:	f004 fd2a 	bl	800c560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	20000630 	.word	0x20000630

08007b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007b1c:	4b03      	ldr	r3, [pc, #12]	; (8007b2c <USART2_IRQHandler+0x14>)
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f004 fd1e 	bl	800c560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	200006c4 	.word	0x200006c4

08007b30 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007b34:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <USART3_4_IRQHandler+0x14>)
 8007b36:	0018      	movs	r0, r3
 8007b38:	f004 fd12 	bl	800c560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8007b3c:	46c0      	nop			; (mov r8, r8)
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	46c0      	nop			; (mov r8, r8)
 8007b44:	20000758 	.word	0x20000758

08007b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  return 1;
 8007b4c:	2301      	movs	r3, #1
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <_kill>:

int _kill(int pid, int sig)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007b5e:	f00a fbd9 	bl	8012314 <__errno>
 8007b62:	0003      	movs	r3, r0
 8007b64:	2216      	movs	r2, #22
 8007b66:	601a      	str	r2, [r3, #0]
  return -1;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	425b      	negs	r3, r3
}
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b002      	add	sp, #8
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <_exit>:

void _exit (int status)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	425a      	negs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	0011      	movs	r1, r2
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7ff ffe5 	bl	8007b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007b8a:	e7fe      	b.n	8007b8a <_exit+0x16>

08007b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	e00a      	b.n	8007bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007b9e:	e000      	b.n	8007ba2 <_read+0x16>
 8007ba0:	bf00      	nop
 8007ba2:	0001      	movs	r1, r0
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	60ba      	str	r2, [r7, #8]
 8007baa:	b2ca      	uxtb	r2, r1
 8007bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	dbf0      	blt.n	8007b9e <_read+0x12>
  }

  return len;
 8007bbc:	687b      	ldr	r3, [r7, #4]
}
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	b006      	add	sp, #24
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b086      	sub	sp, #24
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e009      	b.n	8007bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	60ba      	str	r2, [r7, #8]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	0018      	movs	r0, r3
 8007be2:	e000      	b.n	8007be6 <_write+0x20>
 8007be4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	3301      	adds	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	dbf1      	blt.n	8007bd8 <_write+0x12>
  }
  return len;
 8007bf4:	687b      	ldr	r3, [r7, #4]
}
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b006      	add	sp, #24
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <_close>:

int _close(int file)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007c06:	2301      	movs	r3, #1
 8007c08:	425b      	negs	r3, r3
}
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b002      	add	sp, #8
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2280      	movs	r2, #128	; 0x80
 8007c20:	0192      	lsls	r2, r2, #6
 8007c22:	605a      	str	r2, [r3, #4]
  return 0;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	0018      	movs	r0, r3
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b002      	add	sp, #8
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <_isatty>:

int _isatty(int file)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007c36:	2301      	movs	r3, #1
}
 8007c38:	0018      	movs	r0, r3
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	b002      	add	sp, #8
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	0018      	movs	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b004      	add	sp, #16
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c60:	4a14      	ldr	r2, [pc, #80]	; (8007cb4 <_sbrk+0x5c>)
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <_sbrk+0x60>)
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c6c:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <_sbrk+0x64>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c74:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <_sbrk+0x64>)
 8007c76:	4a12      	ldr	r2, [pc, #72]	; (8007cc0 <_sbrk+0x68>)
 8007c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c7a:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <_sbrk+0x64>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	18d3      	adds	r3, r2, r3
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d207      	bcs.n	8007c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c88:	f00a fb44 	bl	8012314 <__errno>
 8007c8c:	0003      	movs	r3, r0
 8007c8e:	220c      	movs	r2, #12
 8007c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c92:	2301      	movs	r3, #1
 8007c94:	425b      	negs	r3, r3
 8007c96:	e009      	b.n	8007cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c98:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <_sbrk+0x64>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <_sbrk+0x64>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	18d2      	adds	r2, r2, r3
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <_sbrk+0x64>)
 8007ca8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	0018      	movs	r0, r3
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b006      	add	sp, #24
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20009000 	.word	0x20009000
 8007cb8:	00000400 	.word	0x00000400
 8007cbc:	20003af8 	.word	0x20003af8
 8007cc0:	20005630 	.word	0x20005630

08007cc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007cc8:	46c0      	nop			; (mov r8, r8)
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007cd0:	480d      	ldr	r0, [pc, #52]	; (8007d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007cd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007cd4:	f7ff fff6 	bl	8007cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007cd8:	480c      	ldr	r0, [pc, #48]	; (8007d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8007cda:	490d      	ldr	r1, [pc, #52]	; (8007d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007cdc:	4a0d      	ldr	r2, [pc, #52]	; (8007d14 <LoopForever+0xe>)
  movs r3, #0
 8007cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ce0:	e002      	b.n	8007ce8 <LoopCopyDataInit>

08007ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ce6:	3304      	adds	r3, #4

08007ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cec:	d3f9      	bcc.n	8007ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cee:	4a0a      	ldr	r2, [pc, #40]	; (8007d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007cf0:	4c0a      	ldr	r4, [pc, #40]	; (8007d1c <LoopForever+0x16>)
  movs r3, #0
 8007cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007cf4:	e001      	b.n	8007cfa <LoopFillZerobss>

08007cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007cf8:	3204      	adds	r2, #4

08007cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007cfc:	d3fb      	bcc.n	8007cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007cfe:	f00a fb0f 	bl	8012320 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007d02:	f7fd ff01 	bl	8005b08 <main>

08007d06 <LoopForever>:

LoopForever:
  b LoopForever
 8007d06:	e7fe      	b.n	8007d06 <LoopForever>
  ldr   r0, =_estack
 8007d08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d10:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8007d14:	08017870 	.word	0x08017870
  ldr r2, =_sbss
 8007d18:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8007d1c:	2000562c 	.word	0x2000562c

08007d20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007d20:	e7fe      	b.n	8007d20 <ADC1_IRQHandler>
	...

08007d24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007d2a:	1dfb      	adds	r3, r7, #7
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <HAL_Init+0x3c>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <HAL_Init+0x3c>)
 8007d36:	2180      	movs	r1, #128	; 0x80
 8007d38:	0049      	lsls	r1, r1, #1
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d3e:	2003      	movs	r0, #3
 8007d40:	f7ff fe0a 	bl	8007958 <HAL_InitTick>
 8007d44:	1e03      	subs	r3, r0, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007d48:	1dfb      	adds	r3, r7, #7
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e001      	b.n	8007d54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007d50:	f7ff faea 	bl	8007328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007d54:	1dfb      	adds	r3, r7, #7
 8007d56:	781b      	ldrb	r3, [r3, #0]
}
 8007d58:	0018      	movs	r0, r3
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40022000 	.word	0x40022000

08007d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <HAL_IncTick+0x1c>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	001a      	movs	r2, r3
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <HAL_IncTick+0x20>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	18d2      	adds	r2, r2, r3
 8007d74:	4b03      	ldr	r3, [pc, #12]	; (8007d84 <HAL_IncTick+0x20>)
 8007d76:	601a      	str	r2, [r3, #0]
}
 8007d78:	46c0      	nop			; (mov r8, r8)
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	200000e8 	.word	0x200000e8
 8007d84:	20003afc 	.word	0x20003afc

08007d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8007d8c:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <HAL_GetTick+0x10>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
}
 8007d90:	0018      	movs	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	20003afc 	.word	0x20003afc

08007d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007da4:	f7ff fff0 	bl	8007d88 <HAL_GetTick>
 8007da8:	0003      	movs	r3, r0
 8007daa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	d005      	beq.n	8007dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007db6:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <HAL_Delay+0x44>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	001a      	movs	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	189b      	adds	r3, r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	f7ff ffe0 	bl	8007d88 <HAL_GetTick>
 8007dc8:	0002      	movs	r2, r0
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d8f7      	bhi.n	8007dc4 <HAL_Delay+0x28>
  {
  }
}
 8007dd4:	46c0      	nop			; (mov r8, r8)
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	b004      	add	sp, #16
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	200000e8 	.word	0x200000e8

08007de4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a06      	ldr	r2, [pc, #24]	; (8007e0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	0019      	movs	r1, r3
 8007df6:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	46bd      	mov	sp, r7
 8007e02:	b002      	add	sp, #8
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	fffff9ff 	.word	0xfffff9ff

08007e10 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a05      	ldr	r2, [pc, #20]	; (8007e34 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8007e20:	401a      	ands	r2, r3
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b002      	add	sp, #8
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	fe3fffff 	.word	0xfe3fffff

08007e38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	23e0      	movs	r3, #224	; 0xe0
 8007e46:	045b      	lsls	r3, r3, #17
 8007e48:	4013      	ands	r3, r2
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b002      	add	sp, #8
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	2104      	movs	r1, #4
 8007e66:	400a      	ands	r2, r1
 8007e68:	2107      	movs	r1, #7
 8007e6a:	4091      	lsls	r1, r2
 8007e6c:	000a      	movs	r2, r1
 8007e6e:	43d2      	mvns	r2, r2
 8007e70:	401a      	ands	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2104      	movs	r1, #4
 8007e76:	400b      	ands	r3, r1
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4099      	lsls	r1, r3
 8007e7c:	000b      	movs	r3, r1
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b004      	add	sp, #16
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	2104      	movs	r1, #4
 8007e9e:	400a      	ands	r2, r1
 8007ea0:	2107      	movs	r1, #7
 8007ea2:	4091      	lsls	r1, r2
 8007ea4:	000a      	movs	r2, r1
 8007ea6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2104      	movs	r1, #4
 8007eac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007eae:	40da      	lsrs	r2, r3
 8007eb0:	0013      	movs	r3, r2
}
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	b002      	add	sp, #8
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	23c0      	movs	r3, #192	; 0xc0
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	4013      	ands	r3, r2
 8007ecc:	d101      	bne.n	8007ed2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b002      	add	sp, #8
 8007eda:	bd80      	pop	{r7, pc}

08007edc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	211f      	movs	r1, #31
 8007ef0:	400a      	ands	r2, r1
 8007ef2:	210f      	movs	r1, #15
 8007ef4:	4091      	lsls	r1, r2
 8007ef6:	000a      	movs	r2, r1
 8007ef8:	43d2      	mvns	r2, r2
 8007efa:	401a      	ands	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	0e9b      	lsrs	r3, r3, #26
 8007f00:	210f      	movs	r1, #15
 8007f02:	4019      	ands	r1, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	201f      	movs	r0, #31
 8007f08:	4003      	ands	r3, r0
 8007f0a:	4099      	lsls	r1, r3
 8007f0c:	000b      	movs	r3, r1
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007f14:	46c0      	nop			; (mov r8, r8)
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b004      	add	sp, #16
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	035b      	lsls	r3, r3, #13
 8007f2e:	0b5b      	lsrs	r3, r3, #13
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b002      	add	sp, #8
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	0352      	lsls	r2, r2, #13
 8007f50:	0b52      	lsrs	r2, r2, #13
 8007f52:	43d2      	mvns	r2, r2
 8007f54:	401a      	ands	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b002      	add	sp, #8
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	0212      	lsls	r2, r2, #8
 8007f78:	43d2      	mvns	r2, r2
 8007f7a:	401a      	ands	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	400b      	ands	r3, r1
 8007f84:	4904      	ldr	r1, [pc, #16]	; (8007f98 <LL_ADC_SetChannelSamplingTime+0x34>)
 8007f86:	400b      	ands	r3, r1
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8007f8e:	46c0      	nop			; (mov r8, r8)
 8007f90:	46bd      	mov	sp, r7
 8007f92:	b004      	add	sp, #16
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	07ffff00 	.word	0x07ffff00

08007f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	4a05      	ldr	r2, [pc, #20]	; (8007fc0 <LL_ADC_EnableInternalRegulator+0x24>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	2280      	movs	r2, #128	; 0x80
 8007fae:	0552      	lsls	r2, r2, #21
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b002      	add	sp, #8
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	6fffffe8 	.word	0x6fffffe8

08007fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	2380      	movs	r3, #128	; 0x80
 8007fd2:	055b      	lsls	r3, r3, #21
 8007fd4:	401a      	ands	r2, r3
 8007fd6:	2380      	movs	r3, #128	; 0x80
 8007fd8:	055b      	lsls	r3, r3, #21
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d101      	bne.n	8007fe2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd80      	pop	{r7, pc}

08007fec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	4a04      	ldr	r2, [pc, #16]	; (800800c <LL_ADC_Enable+0x20>)
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008004:	46c0      	nop			; (mov r8, r8)
 8008006:	46bd      	mov	sp, r7
 8008008:	b002      	add	sp, #8
 800800a:	bd80      	pop	{r7, pc}
 800800c:	7fffffe8 	.word	0x7fffffe8

08008010 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4a04      	ldr	r2, [pc, #16]	; (8008030 <LL_ADC_Disable+0x20>)
 800801e:	4013      	ands	r3, r2
 8008020:	2202      	movs	r2, #2
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008028:	46c0      	nop			; (mov r8, r8)
 800802a:	46bd      	mov	sp, r7
 800802c:	b002      	add	sp, #8
 800802e:	bd80      	pop	{r7, pc}
 8008030:	7fffffe8 	.word	0x7fffffe8

08008034 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	2201      	movs	r2, #1
 8008042:	4013      	ands	r3, r2
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <LL_ADC_IsEnabled+0x18>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <LL_ADC_IsEnabled+0x1a>
 800804c:	2300      	movs	r3, #0
}
 800804e:	0018      	movs	r0, r3
 8008050:	46bd      	mov	sp, r7
 8008052:	b002      	add	sp, #8
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	4a04      	ldr	r2, [pc, #16]	; (8008078 <LL_ADC_REG_StartConversion+0x20>)
 8008066:	4013      	ands	r3, r2
 8008068:	2204      	movs	r2, #4
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008070:	46c0      	nop			; (mov r8, r8)
 8008072:	46bd      	mov	sp, r7
 8008074:	b002      	add	sp, #8
 8008076:	bd80      	pop	{r7, pc}
 8008078:	7fffffe8 	.word	0x7fffffe8

0800807c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	2204      	movs	r2, #4
 800808a:	4013      	ands	r3, r2
 800808c:	2b04      	cmp	r3, #4
 800808e:	d101      	bne.n	8008094 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008094:	2300      	movs	r3, #0
}
 8008096:	0018      	movs	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	b002      	add	sp, #8
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080a8:	231f      	movs	r3, #31
 80080aa:	18fb      	adds	r3, r7, r3
 80080ac:	2200      	movs	r2, #0
 80080ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e17f      	b.n	80083c6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7ff f959 	bl	8007388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2254      	movs	r2, #84	; 0x54
 80080e0:	2100      	movs	r1, #0
 80080e2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	0018      	movs	r0, r3
 80080ea:	f7ff ff6b 	bl	8007fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80080ee:	1e03      	subs	r3, r0, #0
 80080f0:	d115      	bne.n	800811e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	0018      	movs	r0, r3
 80080f8:	f7ff ff50 	bl	8007f9c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80080fc:	4bb4      	ldr	r3, [pc, #720]	; (80083d0 <HAL_ADC_Init+0x330>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	49b4      	ldr	r1, [pc, #720]	; (80083d4 <HAL_ADC_Init+0x334>)
 8008102:	0018      	movs	r0, r3
 8008104:	f7f8 f81c 	bl	8000140 <__udivsi3>
 8008108:	0003      	movs	r3, r0
 800810a:	3301      	adds	r3, #1
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008110:	e002      	b.n	8008118 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3b01      	subs	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1f9      	bne.n	8008112 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	0018      	movs	r0, r3
 8008124:	f7ff ff4e 	bl	8007fc4 <LL_ADC_IsInternalRegulatorEnabled>
 8008128:	1e03      	subs	r3, r0, #0
 800812a:	d10f      	bne.n	800814c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008130:	2210      	movs	r2, #16
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813c:	2201      	movs	r2, #1
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008144:	231f      	movs	r3, #31
 8008146:	18fb      	adds	r3, r7, r3
 8008148:	2201      	movs	r2, #1
 800814a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	0018      	movs	r0, r3
 8008152:	f7ff ff93 	bl	800807c <LL_ADC_REG_IsConversionOngoing>
 8008156:	0003      	movs	r3, r0
 8008158:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815e:	2210      	movs	r2, #16
 8008160:	4013      	ands	r3, r2
 8008162:	d000      	beq.n	8008166 <HAL_ADC_Init+0xc6>
 8008164:	e122      	b.n	80083ac <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d000      	beq.n	800816e <HAL_ADC_Init+0xce>
 800816c:	e11e      	b.n	80083ac <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008172:	4a99      	ldr	r2, [pc, #612]	; (80083d8 <HAL_ADC_Init+0x338>)
 8008174:	4013      	ands	r3, r2
 8008176:	2202      	movs	r2, #2
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	0018      	movs	r0, r3
 8008184:	f7ff ff56 	bl	8008034 <LL_ADC_IsEnabled>
 8008188:	1e03      	subs	r3, r0, #0
 800818a:	d000      	beq.n	800818e <HAL_ADC_Init+0xee>
 800818c:	e0ad      	b.n	80082ea <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7e1b      	ldrb	r3, [r3, #24]
 8008196:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8008198:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	7e5b      	ldrb	r3, [r3, #25]
 800819e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80081a0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	7e9b      	ldrb	r3, [r3, #26]
 80081a6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80081a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_ADC_Init+0x118>
 80081b2:	2380      	movs	r3, #128	; 0x80
 80081b4:	015b      	lsls	r3, r3, #5
 80081b6:	e000      	b.n	80081ba <HAL_ADC_Init+0x11a>
 80081b8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80081ba:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80081c0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da04      	bge.n	80081d4 <HAL_ADC_Init+0x134>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	085b      	lsrs	r3, r3, #1
 80081d2:	e001      	b.n	80081d8 <HAL_ADC_Init+0x138>
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80081d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	212c      	movs	r1, #44	; 0x2c
 80081de:	5c5b      	ldrb	r3, [r3, r1]
 80081e0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80081e2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	5c9b      	ldrb	r3, [r3, r2]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d115      	bne.n	8008220 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7e9b      	ldrb	r3, [r3, #26]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2280      	movs	r2, #128	; 0x80
 8008200:	0252      	lsls	r2, r2, #9
 8008202:	4313      	orrs	r3, r2
 8008204:	61bb      	str	r3, [r7, #24]
 8008206:	e00b      	b.n	8008220 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820c:	2220      	movs	r2, #32
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008218:	2201      	movs	r2, #1
 800821a:	431a      	orrs	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800822c:	23e0      	movs	r3, #224	; 0xe0
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008236:	4313      	orrs	r3, r2
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	4313      	orrs	r3, r2
 800823c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	4a65      	ldr	r2, [pc, #404]	; (80083dc <HAL_ADC_Init+0x33c>)
 8008246:	4013      	ands	r3, r2
 8008248:	0019      	movs	r1, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	430a      	orrs	r2, r1
 8008252:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	0f9b      	lsrs	r3, r3, #30
 800825a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008260:	4313      	orrs	r3, r2
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	223c      	movs	r2, #60	; 0x3c
 800826c:	5c9b      	ldrb	r3, [r3, r2]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d111      	bne.n	8008296 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	0f9b      	lsrs	r3, r3, #30
 8008278:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800827e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8008284:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800828a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	4313      	orrs	r3, r2
 8008290:	2201      	movs	r2, #1
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	4a50      	ldr	r2, [pc, #320]	; (80083e0 <HAL_ADC_Init+0x340>)
 800829e:	4013      	ands	r3, r2
 80082a0:	0019      	movs	r1, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	23c0      	movs	r3, #192	; 0xc0
 80082b2:	061b      	lsls	r3, r3, #24
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d018      	beq.n	80082ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80082bc:	2380      	movs	r3, #128	; 0x80
 80082be:	05db      	lsls	r3, r3, #23
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d012      	beq.n	80082ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	061b      	lsls	r3, r3, #24
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d00c      	beq.n	80082ea <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80082d0:	4b44      	ldr	r3, [pc, #272]	; (80083e4 <HAL_ADC_Init+0x344>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a44      	ldr	r2, [pc, #272]	; (80083e8 <HAL_ADC_Init+0x348>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	0019      	movs	r1, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	23f0      	movs	r3, #240	; 0xf0
 80082e0:	039b      	lsls	r3, r3, #14
 80082e2:	401a      	ands	r2, r3
 80082e4:	4b3f      	ldr	r3, [pc, #252]	; (80083e4 <HAL_ADC_Init+0x344>)
 80082e6:	430a      	orrs	r2, r1
 80082e8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f2:	001a      	movs	r2, r3
 80082f4:	2100      	movs	r1, #0
 80082f6:	f7ff fdac 	bl	8007e52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	493a      	ldr	r1, [pc, #232]	; (80083ec <HAL_ADC_Init+0x34c>)
 8008304:	001a      	movs	r2, r3
 8008306:	f7ff fda4 	bl	8007e52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2110      	movs	r1, #16
 800831e:	4249      	negs	r1, r1
 8008320:	430a      	orrs	r2, r1
 8008322:	629a      	str	r2, [r3, #40]	; 0x28
 8008324:	e018      	b.n	8008358 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	2380      	movs	r3, #128	; 0x80
 800832c:	039b      	lsls	r3, r3, #14
 800832e:	429a      	cmp	r2, r3
 8008330:	d112      	bne.n	8008358 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	3b01      	subs	r3, #1
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	221c      	movs	r2, #28
 8008342:	4013      	ands	r3, r2
 8008344:	2210      	movs	r2, #16
 8008346:	4252      	negs	r2, r2
 8008348:	409a      	lsls	r2, r3
 800834a:	0011      	movs	r1, r2
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2100      	movs	r1, #0
 800835e:	0018      	movs	r0, r3
 8008360:	f7ff fd94 	bl	8007e8c <LL_ADC_GetSamplingTimeCommonChannels>
 8008364:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800836a:	429a      	cmp	r2, r3
 800836c:	d10b      	bne.n	8008386 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	2203      	movs	r2, #3
 800837a:	4393      	bics	r3, r2
 800837c:	2201      	movs	r2, #1
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008384:	e01c      	b.n	80083c0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838a:	2212      	movs	r2, #18
 800838c:	4393      	bics	r3, r2
 800838e:	2210      	movs	r2, #16
 8008390:	431a      	orrs	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839a:	2201      	movs	r2, #1
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80083a2:	231f      	movs	r3, #31
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	2201      	movs	r2, #1
 80083a8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80083aa:	e009      	b.n	80083c0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b0:	2210      	movs	r2, #16
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80083b8:	231f      	movs	r3, #31
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	2201      	movs	r2, #1
 80083be:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80083c0:	231f      	movs	r3, #31
 80083c2:	18fb      	adds	r3, r7, r3
 80083c4:	781b      	ldrb	r3, [r3, #0]
}
 80083c6:	0018      	movs	r0, r3
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b008      	add	sp, #32
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	200000e0 	.word	0x200000e0
 80083d4:	00030d40 	.word	0x00030d40
 80083d8:	fffffefd 	.word	0xfffffefd
 80083dc:	fffe0201 	.word	0xfffe0201
 80083e0:	1ffffc02 	.word	0x1ffffc02
 80083e4:	40012708 	.word	0x40012708
 80083e8:	ffc3ffff 	.word	0xffc3ffff
 80083ec:	07ffff04 	.word	0x07ffff04

080083f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	0018      	movs	r0, r3
 8008402:	f7ff fe3b 	bl	800807c <LL_ADC_REG_IsConversionOngoing>
 8008406:	1e03      	subs	r3, r0, #0
 8008408:	d16c      	bne.n	80084e4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2254      	movs	r2, #84	; 0x54
 800840e:	5c9b      	ldrb	r3, [r3, r2]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_ADC_Start_DMA+0x28>
 8008414:	2302      	movs	r3, #2
 8008416:	e06c      	b.n	80084f2 <HAL_ADC_Start_DMA+0x102>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2254      	movs	r2, #84	; 0x54
 800841c:	2101      	movs	r1, #1
 800841e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	4013      	ands	r3, r2
 800842a:	d113      	bne.n	8008454 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	0018      	movs	r0, r3
 8008432:	f7ff fdff 	bl	8008034 <LL_ADC_IsEnabled>
 8008436:	1e03      	subs	r3, r0, #0
 8008438:	d004      	beq.n	8008444 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	0018      	movs	r0, r3
 8008440:	f7ff fde6 	bl	8008010 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2101      	movs	r1, #1
 8008450:	430a      	orrs	r2, r1
 8008452:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008454:	2517      	movs	r5, #23
 8008456:	197c      	adds	r4, r7, r5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0018      	movs	r0, r3
 800845c:	f000 fa46 	bl	80088ec <ADC_Enable>
 8008460:	0003      	movs	r3, r0
 8008462:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008464:	002c      	movs	r4, r5
 8008466:	193b      	adds	r3, r7, r4
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d13e      	bne.n	80084ec <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008472:	4a22      	ldr	r2, [pc, #136]	; (80084fc <HAL_ADC_Start_DMA+0x10c>)
 8008474:	4013      	ands	r3, r2
 8008476:	2280      	movs	r2, #128	; 0x80
 8008478:	0052      	lsls	r2, r2, #1
 800847a:	431a      	orrs	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848a:	4a1d      	ldr	r2, [pc, #116]	; (8008500 <HAL_ADC_Start_DMA+0x110>)
 800848c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008492:	4a1c      	ldr	r2, [pc, #112]	; (8008504 <HAL_ADC_Start_DMA+0x114>)
 8008494:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849a:	4a1b      	ldr	r2, [pc, #108]	; (8008508 <HAL_ADC_Start_DMA+0x118>)
 800849c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	221c      	movs	r2, #28
 80084a4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2254      	movs	r2, #84	; 0x54
 80084aa:	2100      	movs	r1, #0
 80084ac:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2110      	movs	r1, #16
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3340      	adds	r3, #64	; 0x40
 80084c8:	0019      	movs	r1, r3
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	193c      	adds	r4, r7, r4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f000 fc58 	bl	8008d84 <HAL_DMA_Start_IT>
 80084d4:	0003      	movs	r3, r0
 80084d6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	0018      	movs	r0, r3
 80084de:	f7ff fdbb 	bl	8008058 <LL_ADC_REG_StartConversion>
 80084e2:	e003      	b.n	80084ec <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80084e4:	2317      	movs	r3, #23
 80084e6:	18fb      	adds	r3, r7, r3
 80084e8:	2202      	movs	r2, #2
 80084ea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80084ec:	2317      	movs	r3, #23
 80084ee:	18fb      	adds	r3, r7, r3
 80084f0:	781b      	ldrb	r3, [r3, #0]
}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b006      	add	sp, #24
 80084f8:	bdb0      	pop	{r4, r5, r7, pc}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	fffff0fe 	.word	0xfffff0fe
 8008500:	080089f9 	.word	0x080089f9
 8008504:	08008ac1 	.word	0x08008ac1
 8008508:	08008adf 	.word	0x08008adf

0800850c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008514:	46c0      	nop			; (mov r8, r8)
 8008516:	46bd      	mov	sp, r7
 8008518:	b002      	add	sp, #8
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008524:	46c0      	nop			; (mov r8, r8)
 8008526:	46bd      	mov	sp, r7
 8008528:	b002      	add	sp, #8
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008534:	46c0      	nop			; (mov r8, r8)
 8008536:	46bd      	mov	sp, r7
 8008538:	b002      	add	sp, #8
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008546:	2317      	movs	r3, #23
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2254      	movs	r2, #84	; 0x54
 8008556:	5c9b      	ldrb	r3, [r3, r2]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_ADC_ConfigChannel+0x24>
 800855c:	2302      	movs	r3, #2
 800855e:	e1c0      	b.n	80088e2 <HAL_ADC_ConfigChannel+0x3a6>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2254      	movs	r2, #84	; 0x54
 8008564:	2101      	movs	r1, #1
 8008566:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	0018      	movs	r0, r3
 800856e:	f7ff fd85 	bl	800807c <LL_ADC_REG_IsConversionOngoing>
 8008572:	1e03      	subs	r3, r0, #0
 8008574:	d000      	beq.n	8008578 <HAL_ADC_ConfigChannel+0x3c>
 8008576:	e1a3      	b.n	80088c0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d100      	bne.n	8008582 <HAL_ADC_ConfigChannel+0x46>
 8008580:	e143      	b.n	800880a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	2380      	movs	r3, #128	; 0x80
 8008588:	061b      	lsls	r3, r3, #24
 800858a:	429a      	cmp	r2, r3
 800858c:	d004      	beq.n	8008598 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8008592:	4ac1      	ldr	r2, [pc, #772]	; (8008898 <HAL_ADC_ConfigChannel+0x35c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d108      	bne.n	80085aa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	0019      	movs	r1, r3
 80085a2:	0010      	movs	r0, r2
 80085a4:	f7ff fcba 	bl	8007f1c <LL_ADC_REG_SetSequencerChAdd>
 80085a8:	e0c9      	b.n	800873e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	211f      	movs	r1, #31
 80085b4:	400b      	ands	r3, r1
 80085b6:	210f      	movs	r1, #15
 80085b8:	4099      	lsls	r1, r3
 80085ba:	000b      	movs	r3, r1
 80085bc:	43db      	mvns	r3, r3
 80085be:	4013      	ands	r3, r2
 80085c0:	0019      	movs	r1, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	035b      	lsls	r3, r3, #13
 80085c8:	0b5b      	lsrs	r3, r3, #13
 80085ca:	d105      	bne.n	80085d8 <HAL_ADC_ConfigChannel+0x9c>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	0e9b      	lsrs	r3, r3, #26
 80085d2:	221f      	movs	r2, #31
 80085d4:	4013      	ands	r3, r2
 80085d6:	e098      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2201      	movs	r2, #1
 80085de:	4013      	ands	r3, r2
 80085e0:	d000      	beq.n	80085e4 <HAL_ADC_ConfigChannel+0xa8>
 80085e2:	e091      	b.n	8008708 <HAL_ADC_ConfigChannel+0x1cc>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2202      	movs	r2, #2
 80085ea:	4013      	ands	r3, r2
 80085ec:	d000      	beq.n	80085f0 <HAL_ADC_ConfigChannel+0xb4>
 80085ee:	e089      	b.n	8008704 <HAL_ADC_ConfigChannel+0x1c8>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2204      	movs	r2, #4
 80085f6:	4013      	ands	r3, r2
 80085f8:	d000      	beq.n	80085fc <HAL_ADC_ConfigChannel+0xc0>
 80085fa:	e081      	b.n	8008700 <HAL_ADC_ConfigChannel+0x1c4>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2208      	movs	r2, #8
 8008602:	4013      	ands	r3, r2
 8008604:	d000      	beq.n	8008608 <HAL_ADC_ConfigChannel+0xcc>
 8008606:	e079      	b.n	80086fc <HAL_ADC_ConfigChannel+0x1c0>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2210      	movs	r2, #16
 800860e:	4013      	ands	r3, r2
 8008610:	d000      	beq.n	8008614 <HAL_ADC_ConfigChannel+0xd8>
 8008612:	e071      	b.n	80086f8 <HAL_ADC_ConfigChannel+0x1bc>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2220      	movs	r2, #32
 800861a:	4013      	ands	r3, r2
 800861c:	d000      	beq.n	8008620 <HAL_ADC_ConfigChannel+0xe4>
 800861e:	e069      	b.n	80086f4 <HAL_ADC_ConfigChannel+0x1b8>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2240      	movs	r2, #64	; 0x40
 8008626:	4013      	ands	r3, r2
 8008628:	d000      	beq.n	800862c <HAL_ADC_ConfigChannel+0xf0>
 800862a:	e061      	b.n	80086f0 <HAL_ADC_ConfigChannel+0x1b4>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2280      	movs	r2, #128	; 0x80
 8008632:	4013      	ands	r3, r2
 8008634:	d000      	beq.n	8008638 <HAL_ADC_ConfigChannel+0xfc>
 8008636:	e059      	b.n	80086ec <HAL_ADC_ConfigChannel+0x1b0>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	2380      	movs	r3, #128	; 0x80
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4013      	ands	r3, r2
 8008642:	d151      	bne.n	80086e8 <HAL_ADC_ConfigChannel+0x1ac>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	2380      	movs	r3, #128	; 0x80
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4013      	ands	r3, r2
 800864e:	d149      	bne.n	80086e4 <HAL_ADC_ConfigChannel+0x1a8>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	2380      	movs	r3, #128	; 0x80
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4013      	ands	r3, r2
 800865a:	d141      	bne.n	80086e0 <HAL_ADC_ConfigChannel+0x1a4>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	2380      	movs	r3, #128	; 0x80
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	4013      	ands	r3, r2
 8008666:	d139      	bne.n	80086dc <HAL_ADC_ConfigChannel+0x1a0>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	2380      	movs	r3, #128	; 0x80
 800866e:	015b      	lsls	r3, r3, #5
 8008670:	4013      	ands	r3, r2
 8008672:	d131      	bne.n	80086d8 <HAL_ADC_ConfigChannel+0x19c>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	2380      	movs	r3, #128	; 0x80
 800867a:	019b      	lsls	r3, r3, #6
 800867c:	4013      	ands	r3, r2
 800867e:	d129      	bne.n	80086d4 <HAL_ADC_ConfigChannel+0x198>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	2380      	movs	r3, #128	; 0x80
 8008686:	01db      	lsls	r3, r3, #7
 8008688:	4013      	ands	r3, r2
 800868a:	d121      	bne.n	80086d0 <HAL_ADC_ConfigChannel+0x194>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	4013      	ands	r3, r2
 8008696:	d119      	bne.n	80086cc <HAL_ADC_ConfigChannel+0x190>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	2380      	movs	r3, #128	; 0x80
 800869e:	025b      	lsls	r3, r3, #9
 80086a0:	4013      	ands	r3, r2
 80086a2:	d111      	bne.n	80086c8 <HAL_ADC_ConfigChannel+0x18c>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	2380      	movs	r3, #128	; 0x80
 80086aa:	029b      	lsls	r3, r3, #10
 80086ac:	4013      	ands	r3, r2
 80086ae:	d109      	bne.n	80086c4 <HAL_ADC_ConfigChannel+0x188>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	02db      	lsls	r3, r3, #11
 80086b8:	4013      	ands	r3, r2
 80086ba:	d001      	beq.n	80086c0 <HAL_ADC_ConfigChannel+0x184>
 80086bc:	2312      	movs	r3, #18
 80086be:	e024      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086c0:	2300      	movs	r3, #0
 80086c2:	e022      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086c4:	2311      	movs	r3, #17
 80086c6:	e020      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086c8:	2310      	movs	r3, #16
 80086ca:	e01e      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086cc:	230f      	movs	r3, #15
 80086ce:	e01c      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086d0:	230e      	movs	r3, #14
 80086d2:	e01a      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086d4:	230d      	movs	r3, #13
 80086d6:	e018      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086d8:	230c      	movs	r3, #12
 80086da:	e016      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086dc:	230b      	movs	r3, #11
 80086de:	e014      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086e0:	230a      	movs	r3, #10
 80086e2:	e012      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086e4:	2309      	movs	r3, #9
 80086e6:	e010      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086e8:	2308      	movs	r3, #8
 80086ea:	e00e      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086ec:	2307      	movs	r3, #7
 80086ee:	e00c      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086f0:	2306      	movs	r3, #6
 80086f2:	e00a      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086f4:	2305      	movs	r3, #5
 80086f6:	e008      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086f8:	2304      	movs	r3, #4
 80086fa:	e006      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 80086fc:	2303      	movs	r3, #3
 80086fe:	e004      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 8008700:	2302      	movs	r3, #2
 8008702:	e002      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <HAL_ADC_ConfigChannel+0x1ce>
 8008708:	2300      	movs	r3, #0
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	6852      	ldr	r2, [r2, #4]
 800870e:	201f      	movs	r0, #31
 8008710:	4002      	ands	r2, r0
 8008712:	4093      	lsls	r3, r2
 8008714:	000a      	movs	r2, r1
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	089b      	lsrs	r3, r3, #2
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	429a      	cmp	r2, r3
 800872a:	d808      	bhi.n	800873e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6859      	ldr	r1, [r3, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	001a      	movs	r2, r3
 800873a:	f7ff fbcf 	bl	8007edc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	001a      	movs	r2, r3
 800874c:	f7ff fc0a 	bl	8007f64 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	db00      	blt.n	800875a <HAL_ADC_ConfigChannel+0x21e>
 8008758:	e0bc      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800875a:	4b50      	ldr	r3, [pc, #320]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 800875c:	0018      	movs	r0, r3
 800875e:	f7ff fb6b 	bl	8007e38 <LL_ADC_GetCommonPathInternalCh>
 8008762:	0003      	movs	r3, r0
 8008764:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a4d      	ldr	r2, [pc, #308]	; (80088a0 <HAL_ADC_ConfigChannel+0x364>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d122      	bne.n	80087b6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008778:	d11d      	bne.n	80087b6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2280      	movs	r2, #128	; 0x80
 800877e:	0412      	lsls	r2, r2, #16
 8008780:	4313      	orrs	r3, r2
 8008782:	4a46      	ldr	r2, [pc, #280]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 8008784:	0019      	movs	r1, r3
 8008786:	0010      	movs	r0, r2
 8008788:	f7ff fb42 	bl	8007e10 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800878c:	4b45      	ldr	r3, [pc, #276]	; (80088a4 <HAL_ADC_ConfigChannel+0x368>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4945      	ldr	r1, [pc, #276]	; (80088a8 <HAL_ADC_ConfigChannel+0x36c>)
 8008792:	0018      	movs	r0, r3
 8008794:	f7f7 fcd4 	bl	8000140 <__udivsi3>
 8008798:	0003      	movs	r3, r0
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	0013      	movs	r3, r2
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	189b      	adds	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087a6:	e002      	b.n	80087ae <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f9      	bne.n	80087a8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80087b4:	e08e      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3c      	ldr	r2, [pc, #240]	; (80088ac <HAL_ADC_ConfigChannel+0x370>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d10e      	bne.n	80087de <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	2380      	movs	r3, #128	; 0x80
 80087c4:	045b      	lsls	r3, r3, #17
 80087c6:	4013      	ands	r3, r2
 80087c8:	d109      	bne.n	80087de <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2280      	movs	r2, #128	; 0x80
 80087ce:	0452      	lsls	r2, r2, #17
 80087d0:	4313      	orrs	r3, r2
 80087d2:	4a32      	ldr	r2, [pc, #200]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 80087d4:	0019      	movs	r1, r3
 80087d6:	0010      	movs	r0, r2
 80087d8:	f7ff fb1a 	bl	8007e10 <LL_ADC_SetCommonPathInternalCh>
 80087dc:	e07a      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a33      	ldr	r2, [pc, #204]	; (80088b0 <HAL_ADC_ConfigChannel+0x374>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d000      	beq.n	80087ea <HAL_ADC_ConfigChannel+0x2ae>
 80087e8:	e074      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	03db      	lsls	r3, r3, #15
 80087f0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80087f2:	d000      	beq.n	80087f6 <HAL_ADC_ConfigChannel+0x2ba>
 80087f4:	e06e      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2280      	movs	r2, #128	; 0x80
 80087fa:	03d2      	lsls	r2, r2, #15
 80087fc:	4313      	orrs	r3, r2
 80087fe:	4a27      	ldr	r2, [pc, #156]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 8008800:	0019      	movs	r1, r3
 8008802:	0010      	movs	r0, r2
 8008804:	f7ff fb04 	bl	8007e10 <LL_ADC_SetCommonPathInternalCh>
 8008808:	e064      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	2380      	movs	r3, #128	; 0x80
 8008810:	061b      	lsls	r3, r3, #24
 8008812:	429a      	cmp	r2, r3
 8008814:	d004      	beq.n	8008820 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800881a:	4a1f      	ldr	r2, [pc, #124]	; (8008898 <HAL_ADC_ConfigChannel+0x35c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d107      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	0019      	movs	r1, r3
 800882a:	0010      	movs	r0, r2
 800882c:	f7ff fb87 	bl	8007f3e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	da4d      	bge.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008838:	4b18      	ldr	r3, [pc, #96]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 800883a:	0018      	movs	r0, r3
 800883c:	f7ff fafc 	bl	8007e38 <LL_ADC_GetCommonPathInternalCh>
 8008840:	0003      	movs	r3, r0
 8008842:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <HAL_ADC_ConfigChannel+0x364>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d108      	bne.n	8008860 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	4a18      	ldr	r2, [pc, #96]	; (80088b4 <HAL_ADC_ConfigChannel+0x378>)
 8008852:	4013      	ands	r3, r2
 8008854:	4a11      	ldr	r2, [pc, #68]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 8008856:	0019      	movs	r1, r3
 8008858:	0010      	movs	r0, r2
 800885a:	f7ff fad9 	bl	8007e10 <LL_ADC_SetCommonPathInternalCh>
 800885e:	e039      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <HAL_ADC_ConfigChannel+0x370>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d108      	bne.n	800887c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <HAL_ADC_ConfigChannel+0x37c>)
 800886e:	4013      	ands	r3, r2
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 8008872:	0019      	movs	r1, r3
 8008874:	0010      	movs	r0, r2
 8008876:	f7ff facb 	bl	8007e10 <LL_ADC_SetCommonPathInternalCh>
 800887a:	e02b      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0b      	ldr	r2, [pc, #44]	; (80088b0 <HAL_ADC_ConfigChannel+0x374>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d126      	bne.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	4a0c      	ldr	r2, [pc, #48]	; (80088bc <HAL_ADC_ConfigChannel+0x380>)
 800888a:	4013      	ands	r3, r2
 800888c:	4a03      	ldr	r2, [pc, #12]	; (800889c <HAL_ADC_ConfigChannel+0x360>)
 800888e:	0019      	movs	r1, r3
 8008890:	0010      	movs	r0, r2
 8008892:	f7ff fabd 	bl	8007e10 <LL_ADC_SetCommonPathInternalCh>
 8008896:	e01d      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x398>
 8008898:	80000004 	.word	0x80000004
 800889c:	40012708 	.word	0x40012708
 80088a0:	b0001000 	.word	0xb0001000
 80088a4:	200000e0 	.word	0x200000e0
 80088a8:	00030d40 	.word	0x00030d40
 80088ac:	b8004000 	.word	0xb8004000
 80088b0:	b4002000 	.word	0xb4002000
 80088b4:	ff7fffff 	.word	0xff7fffff
 80088b8:	feffffff 	.word	0xfeffffff
 80088bc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c4:	2220      	movs	r2, #32
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80088cc:	2317      	movs	r3, #23
 80088ce:	18fb      	adds	r3, r7, r3
 80088d0:	2201      	movs	r2, #1
 80088d2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2254      	movs	r2, #84	; 0x54
 80088d8:	2100      	movs	r1, #0
 80088da:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80088dc:	2317      	movs	r3, #23
 80088de:	18fb      	adds	r3, r7, r3
 80088e0:	781b      	ldrb	r3, [r3, #0]
}
 80088e2:	0018      	movs	r0, r3
 80088e4:	46bd      	mov	sp, r7
 80088e6:	b006      	add	sp, #24
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	46c0      	nop			; (mov r8, r8)

080088ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	0018      	movs	r0, r3
 80088fe:	f7ff fb99 	bl	8008034 <LL_ADC_IsEnabled>
 8008902:	1e03      	subs	r3, r0, #0
 8008904:	d000      	beq.n	8008908 <ADC_Enable+0x1c>
 8008906:	e069      	b.n	80089dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	4a36      	ldr	r2, [pc, #216]	; (80089e8 <ADC_Enable+0xfc>)
 8008910:	4013      	ands	r3, r2
 8008912:	d00d      	beq.n	8008930 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008918:	2210      	movs	r2, #16
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008924:	2201      	movs	r2, #1
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e056      	b.n	80089de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	0018      	movs	r0, r3
 8008936:	f7ff fb59 	bl	8007fec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800893a:	4b2c      	ldr	r3, [pc, #176]	; (80089ec <ADC_Enable+0x100>)
 800893c:	0018      	movs	r0, r3
 800893e:	f7ff fa7b 	bl	8007e38 <LL_ADC_GetCommonPathInternalCh>
 8008942:	0002      	movs	r2, r0
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	041b      	lsls	r3, r3, #16
 8008948:	4013      	ands	r3, r2
 800894a:	d00f      	beq.n	800896c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800894c:	4b28      	ldr	r3, [pc, #160]	; (80089f0 <ADC_Enable+0x104>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4928      	ldr	r1, [pc, #160]	; (80089f4 <ADC_Enable+0x108>)
 8008952:	0018      	movs	r0, r3
 8008954:	f7f7 fbf4 	bl	8000140 <__udivsi3>
 8008958:	0003      	movs	r3, r0
 800895a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800895c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800895e:	e002      	b.n	8008966 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3b01      	subs	r3, #1
 8008964:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f9      	bne.n	8008960 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7e5b      	ldrb	r3, [r3, #25]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d033      	beq.n	80089dc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8008974:	f7ff fa08 	bl	8007d88 <HAL_GetTick>
 8008978:	0003      	movs	r3, r0
 800897a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800897c:	e027      	b.n	80089ce <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	0018      	movs	r0, r3
 8008984:	f7ff fb56 	bl	8008034 <LL_ADC_IsEnabled>
 8008988:	1e03      	subs	r3, r0, #0
 800898a:	d104      	bne.n	8008996 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	0018      	movs	r0, r3
 8008992:	f7ff fb2b 	bl	8007fec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008996:	f7ff f9f7 	bl	8007d88 <HAL_GetTick>
 800899a:	0002      	movs	r2, r0
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d914      	bls.n	80089ce <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2201      	movs	r2, #1
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d00d      	beq.n	80089ce <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b6:	2210      	movs	r2, #16
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c2:	2201      	movs	r2, #1
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e007      	b.n	80089de <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2201      	movs	r2, #1
 80089d6:	4013      	ands	r3, r2
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d1d0      	bne.n	800897e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	0018      	movs	r0, r3
 80089e0:	46bd      	mov	sp, r7
 80089e2:	b004      	add	sp, #16
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	46c0      	nop			; (mov r8, r8)
 80089e8:	80000017 	.word	0x80000017
 80089ec:	40012708 	.word	0x40012708
 80089f0:	200000e0 	.word	0x200000e0
 80089f4:	00030d40 	.word	0x00030d40

080089f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	2250      	movs	r2, #80	; 0x50
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	d141      	bne.n	8008a94 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a14:	2280      	movs	r2, #128	; 0x80
 8008a16:	0092      	lsls	r2, r2, #2
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	0018      	movs	r0, r3
 8008a24:	f7ff fa49 	bl	8007eba <LL_ADC_REG_IsTriggerSourceSWStart>
 8008a28:	1e03      	subs	r3, r0, #0
 8008a2a:	d02e      	beq.n	8008a8a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	7e9b      	ldrb	r3, [r3, #26]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d12a      	bne.n	8008a8a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2208      	movs	r2, #8
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d123      	bne.n	8008a8a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7ff fb18 	bl	800807c <LL_ADC_REG_IsConversionOngoing>
 8008a4c:	1e03      	subs	r3, r0, #0
 8008a4e:	d110      	bne.n	8008a72 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	210c      	movs	r1, #12
 8008a5c:	438a      	bics	r2, r1
 8008a5e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a64:	4a15      	ldr	r2, [pc, #84]	; (8008abc <ADC_DMAConvCplt+0xc4>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	2201      	movs	r2, #1
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8008a70:	e00b      	b.n	8008a8a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a76:	2220      	movs	r2, #32
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a82:	2201      	movs	r2, #1
 8008a84:	431a      	orrs	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f7ff fd3d 	bl	800850c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008a92:	e00f      	b.n	8008ab4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a98:	2210      	movs	r2, #16
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	d004      	beq.n	8008aa8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f7ff fd43 	bl	800852c <HAL_ADC_ErrorCallback>
}
 8008aa6:	e005      	b.n	8008ab4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	0010      	movs	r0, r2
 8008ab2:	4798      	blx	r3
}
 8008ab4:	46c0      	nop			; (mov r8, r8)
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	b004      	add	sp, #16
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	fffffefe 	.word	0xfffffefe

08008ac0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f7ff fd23 	bl	800851c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	b004      	add	sp, #16
 8008adc:	bd80      	pop	{r7, pc}

08008ade <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b084      	sub	sp, #16
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af0:	2240      	movs	r2, #64	; 0x40
 8008af2:	431a      	orrs	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008afc:	2204      	movs	r2, #4
 8008afe:	431a      	orrs	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	0018      	movs	r0, r3
 8008b08:	f7ff fd10 	bl	800852c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008b0c:	46c0      	nop			; (mov r8, r8)
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b004      	add	sp, #16
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <__NVIC_EnableIRQ>:
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	0002      	movs	r2, r0
 8008b1c:	1dfb      	adds	r3, r7, #7
 8008b1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008b20:	1dfb      	adds	r3, r7, #7
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b7f      	cmp	r3, #127	; 0x7f
 8008b26:	d809      	bhi.n	8008b3c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b28:	1dfb      	adds	r3, r7, #7
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	001a      	movs	r2, r3
 8008b2e:	231f      	movs	r3, #31
 8008b30:	401a      	ands	r2, r3
 8008b32:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <__NVIC_EnableIRQ+0x30>)
 8008b34:	2101      	movs	r1, #1
 8008b36:	4091      	lsls	r1, r2
 8008b38:	000a      	movs	r2, r1
 8008b3a:	601a      	str	r2, [r3, #0]
}
 8008b3c:	46c0      	nop			; (mov r8, r8)
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b002      	add	sp, #8
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	e000e100 	.word	0xe000e100

08008b48 <__NVIC_SetPriority>:
{
 8008b48:	b590      	push	{r4, r7, lr}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	0002      	movs	r2, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	1dfb      	adds	r3, r7, #7
 8008b54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008b56:	1dfb      	adds	r3, r7, #7
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b5c:	d828      	bhi.n	8008bb0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008b5e:	4a2f      	ldr	r2, [pc, #188]	; (8008c1c <__NVIC_SetPriority+0xd4>)
 8008b60:	1dfb      	adds	r3, r7, #7
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	089b      	lsrs	r3, r3, #2
 8008b68:	33c0      	adds	r3, #192	; 0xc0
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	589b      	ldr	r3, [r3, r2]
 8008b6e:	1dfa      	adds	r2, r7, #7
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	0011      	movs	r1, r2
 8008b74:	2203      	movs	r2, #3
 8008b76:	400a      	ands	r2, r1
 8008b78:	00d2      	lsls	r2, r2, #3
 8008b7a:	21ff      	movs	r1, #255	; 0xff
 8008b7c:	4091      	lsls	r1, r2
 8008b7e:	000a      	movs	r2, r1
 8008b80:	43d2      	mvns	r2, r2
 8008b82:	401a      	ands	r2, r3
 8008b84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	019b      	lsls	r3, r3, #6
 8008b8a:	22ff      	movs	r2, #255	; 0xff
 8008b8c:	401a      	ands	r2, r3
 8008b8e:	1dfb      	adds	r3, r7, #7
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	0018      	movs	r0, r3
 8008b94:	2303      	movs	r3, #3
 8008b96:	4003      	ands	r3, r0
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008b9c:	481f      	ldr	r0, [pc, #124]	; (8008c1c <__NVIC_SetPriority+0xd4>)
 8008b9e:	1dfb      	adds	r3, r7, #7
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	b25b      	sxtb	r3, r3
 8008ba4:	089b      	lsrs	r3, r3, #2
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	33c0      	adds	r3, #192	; 0xc0
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	501a      	str	r2, [r3, r0]
}
 8008bae:	e031      	b.n	8008c14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008bb0:	4a1b      	ldr	r2, [pc, #108]	; (8008c20 <__NVIC_SetPriority+0xd8>)
 8008bb2:	1dfb      	adds	r3, r7, #7
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	230f      	movs	r3, #15
 8008bba:	400b      	ands	r3, r1
 8008bbc:	3b08      	subs	r3, #8
 8008bbe:	089b      	lsrs	r3, r3, #2
 8008bc0:	3306      	adds	r3, #6
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	18d3      	adds	r3, r2, r3
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	1dfa      	adds	r2, r7, #7
 8008bcc:	7812      	ldrb	r2, [r2, #0]
 8008bce:	0011      	movs	r1, r2
 8008bd0:	2203      	movs	r2, #3
 8008bd2:	400a      	ands	r2, r1
 8008bd4:	00d2      	lsls	r2, r2, #3
 8008bd6:	21ff      	movs	r1, #255	; 0xff
 8008bd8:	4091      	lsls	r1, r2
 8008bda:	000a      	movs	r2, r1
 8008bdc:	43d2      	mvns	r2, r2
 8008bde:	401a      	ands	r2, r3
 8008be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	019b      	lsls	r3, r3, #6
 8008be6:	22ff      	movs	r2, #255	; 0xff
 8008be8:	401a      	ands	r2, r3
 8008bea:	1dfb      	adds	r3, r7, #7
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	0018      	movs	r0, r3
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	4003      	ands	r3, r0
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008bf8:	4809      	ldr	r0, [pc, #36]	; (8008c20 <__NVIC_SetPriority+0xd8>)
 8008bfa:	1dfb      	adds	r3, r7, #7
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	001c      	movs	r4, r3
 8008c00:	230f      	movs	r3, #15
 8008c02:	4023      	ands	r3, r4
 8008c04:	3b08      	subs	r3, #8
 8008c06:	089b      	lsrs	r3, r3, #2
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	3306      	adds	r3, #6
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	18c3      	adds	r3, r0, r3
 8008c10:	3304      	adds	r3, #4
 8008c12:	601a      	str	r2, [r3, #0]
}
 8008c14:	46c0      	nop			; (mov r8, r8)
 8008c16:	46bd      	mov	sp, r7
 8008c18:	b003      	add	sp, #12
 8008c1a:	bd90      	pop	{r4, r7, pc}
 8008c1c:	e000e100 	.word	0xe000e100
 8008c20:	e000ed00 	.word	0xe000ed00

08008c24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	210f      	movs	r1, #15
 8008c30:	187b      	adds	r3, r7, r1
 8008c32:	1c02      	adds	r2, r0, #0
 8008c34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	b25b      	sxtb	r3, r3
 8008c3e:	0011      	movs	r1, r2
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7ff ff81 	bl	8008b48 <__NVIC_SetPriority>
}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	b004      	add	sp, #16
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	0002      	movs	r2, r0
 8008c56:	1dfb      	adds	r3, r7, #7
 8008c58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c5a:	1dfb      	adds	r3, r7, #7
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7ff ff57 	bl	8008b14 <__NVIC_EnableIRQ>
}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	b002      	add	sp, #8
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e077      	b.n	8008d72 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a3d      	ldr	r2, [pc, #244]	; (8008d7c <HAL_DMA_Init+0x10c>)
 8008c88:	4694      	mov	ip, r2
 8008c8a:	4463      	add	r3, ip
 8008c8c:	2114      	movs	r1, #20
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f7f7 fa56 	bl	8000140 <__udivsi3>
 8008c94:	0003      	movs	r3, r0
 8008c96:	009a      	lsls	r2, r3, #2
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2225      	movs	r2, #37	; 0x25
 8008ca0:	2102      	movs	r1, #2
 8008ca2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4934      	ldr	r1, [pc, #208]	; (8008d80 <HAL_DMA_Init+0x110>)
 8008cb0:	400a      	ands	r2, r1
 8008cb2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0018      	movs	r0, r3
 8008cee:	f000 fa8d 	bl	800920c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	2380      	movs	r3, #128	; 0x80
 8008cf8:	01db      	lsls	r3, r3, #7
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d102      	bne.n	8008d04 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0c:	213f      	movs	r1, #63	; 0x3f
 8008d0e:	400a      	ands	r2, r1
 8008d10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008d1a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d011      	beq.n	8008d48 <HAL_DMA_Init+0xd8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d80d      	bhi.n	8008d48 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f000 fa98 	bl	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008d44:	605a      	str	r2, [r3, #4]
 8008d46:	e008      	b.n	8008d5a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2225      	movs	r2, #37	; 0x25
 8008d64:	2101      	movs	r1, #1
 8008d66:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2224      	movs	r2, #36	; 0x24
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	0018      	movs	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	b002      	add	sp, #8
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	bffdfff8 	.word	0xbffdfff8
 8008d80:	ffff800f 	.word	0xffff800f

08008d84 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d92:	2317      	movs	r3, #23
 8008d94:	18fb      	adds	r3, r7, r3
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2224      	movs	r2, #36	; 0x24
 8008d9e:	5c9b      	ldrb	r3, [r3, r2]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_DMA_Start_IT+0x24>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e06f      	b.n	8008e88 <HAL_DMA_Start_IT+0x104>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2224      	movs	r2, #36	; 0x24
 8008dac:	2101      	movs	r1, #1
 8008dae:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2225      	movs	r2, #37	; 0x25
 8008db4:	5c9b      	ldrb	r3, [r3, r2]
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d157      	bne.n	8008e6c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2225      	movs	r2, #37	; 0x25
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	438a      	bics	r2, r1
 8008dd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68b9      	ldr	r1, [r7, #8]
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f9d3 	bl	800918c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d008      	beq.n	8008e00 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	210e      	movs	r1, #14
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	e00f      	b.n	8008e20 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2104      	movs	r1, #4
 8008e0c:	438a      	bics	r2, r1
 8008e0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	210a      	movs	r1, #10
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	2380      	movs	r3, #128	; 0x80
 8008e28:	025b      	lsls	r3, r3, #9
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	d008      	beq.n	8008e40 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e38:	2180      	movs	r1, #128	; 0x80
 8008e3a:	0049      	lsls	r1, r1, #1
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d008      	beq.n	8008e5a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e52:	2180      	movs	r1, #128	; 0x80
 8008e54:	0049      	lsls	r1, r1, #1
 8008e56:	430a      	orrs	r2, r1
 8008e58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2101      	movs	r1, #1
 8008e66:	430a      	orrs	r2, r1
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e00a      	b.n	8008e82 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2280      	movs	r2, #128	; 0x80
 8008e70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2224      	movs	r2, #36	; 0x24
 8008e76:	2100      	movs	r1, #0
 8008e78:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8008e7a:	2317      	movs	r3, #23
 8008e7c:	18fb      	adds	r3, r7, r3
 8008e7e:	2201      	movs	r2, #1
 8008e80:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008e82:	2317      	movs	r3, #23
 8008e84:	18fb      	adds	r3, r7, r3
 8008e86:	781b      	ldrb	r3, [r3, #0]
}
 8008e88:	0018      	movs	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b006      	add	sp, #24
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e050      	b.n	8008f44 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2225      	movs	r2, #37	; 0x25
 8008ea6:	5c9b      	ldrb	r3, [r3, r2]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d008      	beq.n	8008ec0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2224      	movs	r2, #36	; 0x24
 8008eb8:	2100      	movs	r1, #0
 8008eba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e041      	b.n	8008f44 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	210e      	movs	r1, #14
 8008ecc:	438a      	bics	r2, r1
 8008ece:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eda:	491c      	ldr	r1, [pc, #112]	; (8008f4c <HAL_DMA_Abort+0xbc>)
 8008edc:	400a      	ands	r2, r1
 8008ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2101      	movs	r1, #1
 8008eec:	438a      	bics	r2, r1
 8008eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008ef0:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <HAL_DMA_Abort+0xc0>)
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	221c      	movs	r2, #28
 8008efa:	4013      	ands	r3, r2
 8008efc:	2201      	movs	r2, #1
 8008efe:	409a      	lsls	r2, r3
 8008f00:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <HAL_DMA_Abort+0xc0>)
 8008f02:	430a      	orrs	r2, r1
 8008f04:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008f0e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00c      	beq.n	8008f32 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f22:	490a      	ldr	r1, [pc, #40]	; (8008f4c <HAL_DMA_Abort+0xbc>)
 8008f24:	400a      	ands	r2, r1
 8008f26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008f30:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2225      	movs	r2, #37	; 0x25
 8008f36:	2101      	movs	r1, #1
 8008f38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2224      	movs	r2, #36	; 0x24
 8008f3e:	2100      	movs	r1, #0
 8008f40:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	0018      	movs	r0, r3
 8008f46:	46bd      	mov	sp, r7
 8008f48:	b002      	add	sp, #8
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	fffffeff 	.word	0xfffffeff
 8008f50:	40020000 	.word	0x40020000

08008f54 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f5c:	210f      	movs	r1, #15
 8008f5e:	187b      	adds	r3, r7, r1
 8008f60:	2200      	movs	r2, #0
 8008f62:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2225      	movs	r2, #37	; 0x25
 8008f68:	5c9b      	ldrb	r3, [r3, r2]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d006      	beq.n	8008f7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2204      	movs	r2, #4
 8008f74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008f76:	187b      	adds	r3, r7, r1
 8008f78:	2201      	movs	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	e049      	b.n	8009012 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	210e      	movs	r1, #14
 8008f8a:	438a      	bics	r2, r1
 8008f8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2101      	movs	r1, #1
 8008f9a:	438a      	bics	r2, r1
 8008f9c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa8:	491d      	ldr	r1, [pc, #116]	; (8009020 <HAL_DMA_Abort_IT+0xcc>)
 8008faa:	400a      	ands	r2, r1
 8008fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8008fae:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <HAL_DMA_Abort_IT+0xd0>)
 8008fb0:	6859      	ldr	r1, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	221c      	movs	r2, #28
 8008fb8:	4013      	ands	r3, r2
 8008fba:	2201      	movs	r2, #1
 8008fbc:	409a      	lsls	r2, r3
 8008fbe:	4b19      	ldr	r3, [pc, #100]	; (8009024 <HAL_DMA_Abort_IT+0xd0>)
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008fcc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00c      	beq.n	8008ff0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe0:	490f      	ldr	r1, [pc, #60]	; (8009020 <HAL_DMA_Abort_IT+0xcc>)
 8008fe2:	400a      	ands	r2, r1
 8008fe4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008fee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2225      	movs	r2, #37	; 0x25
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2224      	movs	r2, #36	; 0x24
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	0010      	movs	r0, r2
 8009010:	4798      	blx	r3
    }
  }
  return status;
 8009012:	230f      	movs	r3, #15
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	781b      	ldrb	r3, [r3, #0]
}
 8009018:	0018      	movs	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	b004      	add	sp, #16
 800901e:	bd80      	pop	{r7, pc}
 8009020:	fffffeff 	.word	0xfffffeff
 8009024:	40020000 	.word	0x40020000

08009028 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8009030:	4b55      	ldr	r3, [pc, #340]	; (8009188 <HAL_DMA_IRQHandler+0x160>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	221c      	movs	r2, #28
 8009044:	4013      	ands	r3, r2
 8009046:	2204      	movs	r2, #4
 8009048:	409a      	lsls	r2, r3
 800904a:	0013      	movs	r3, r2
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4013      	ands	r3, r2
 8009050:	d027      	beq.n	80090a2 <HAL_DMA_IRQHandler+0x7a>
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2204      	movs	r2, #4
 8009056:	4013      	ands	r3, r2
 8009058:	d023      	beq.n	80090a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2220      	movs	r2, #32
 8009062:	4013      	ands	r3, r2
 8009064:	d107      	bne.n	8009076 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2104      	movs	r1, #4
 8009072:	438a      	bics	r2, r1
 8009074:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8009076:	4b44      	ldr	r3, [pc, #272]	; (8009188 <HAL_DMA_IRQHandler+0x160>)
 8009078:	6859      	ldr	r1, [r3, #4]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	221c      	movs	r2, #28
 8009080:	4013      	ands	r3, r2
 8009082:	2204      	movs	r2, #4
 8009084:	409a      	lsls	r2, r3
 8009086:	4b40      	ldr	r3, [pc, #256]	; (8009188 <HAL_DMA_IRQHandler+0x160>)
 8009088:	430a      	orrs	r2, r1
 800908a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	2b00      	cmp	r3, #0
 8009092:	d100      	bne.n	8009096 <HAL_DMA_IRQHandler+0x6e>
 8009094:	e073      	b.n	800917e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	0010      	movs	r0, r2
 800909e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80090a0:	e06d      	b.n	800917e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	221c      	movs	r2, #28
 80090a8:	4013      	ands	r3, r2
 80090aa:	2202      	movs	r2, #2
 80090ac:	409a      	lsls	r2, r3
 80090ae:	0013      	movs	r3, r2
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4013      	ands	r3, r2
 80090b4:	d02e      	beq.n	8009114 <HAL_DMA_IRQHandler+0xec>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2202      	movs	r2, #2
 80090ba:	4013      	ands	r3, r2
 80090bc:	d02a      	beq.n	8009114 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2220      	movs	r2, #32
 80090c6:	4013      	ands	r3, r2
 80090c8:	d10b      	bne.n	80090e2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	210a      	movs	r1, #10
 80090d6:	438a      	bics	r2, r1
 80090d8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2225      	movs	r2, #37	; 0x25
 80090de:	2101      	movs	r1, #1
 80090e0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80090e2:	4b29      	ldr	r3, [pc, #164]	; (8009188 <HAL_DMA_IRQHandler+0x160>)
 80090e4:	6859      	ldr	r1, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	221c      	movs	r2, #28
 80090ec:	4013      	ands	r3, r2
 80090ee:	2202      	movs	r2, #2
 80090f0:	409a      	lsls	r2, r3
 80090f2:	4b25      	ldr	r3, [pc, #148]	; (8009188 <HAL_DMA_IRQHandler+0x160>)
 80090f4:	430a      	orrs	r2, r1
 80090f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2224      	movs	r2, #36	; 0x24
 80090fc:	2100      	movs	r1, #0
 80090fe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d03a      	beq.n	800917e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	0010      	movs	r0, r2
 8009110:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8009112:	e034      	b.n	800917e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	221c      	movs	r2, #28
 800911a:	4013      	ands	r3, r2
 800911c:	2208      	movs	r2, #8
 800911e:	409a      	lsls	r2, r3
 8009120:	0013      	movs	r3, r2
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4013      	ands	r3, r2
 8009126:	d02b      	beq.n	8009180 <HAL_DMA_IRQHandler+0x158>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2208      	movs	r2, #8
 800912c:	4013      	ands	r3, r2
 800912e:	d027      	beq.n	8009180 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	210e      	movs	r1, #14
 800913c:	438a      	bics	r2, r1
 800913e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8009140:	4b11      	ldr	r3, [pc, #68]	; (8009188 <HAL_DMA_IRQHandler+0x160>)
 8009142:	6859      	ldr	r1, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009148:	221c      	movs	r2, #28
 800914a:	4013      	ands	r3, r2
 800914c:	2201      	movs	r2, #1
 800914e:	409a      	lsls	r2, r3
 8009150:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <HAL_DMA_IRQHandler+0x160>)
 8009152:	430a      	orrs	r2, r1
 8009154:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2225      	movs	r2, #37	; 0x25
 8009160:	2101      	movs	r1, #1
 8009162:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2224      	movs	r2, #36	; 0x24
 8009168:	2100      	movs	r1, #0
 800916a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	0010      	movs	r0, r2
 800917c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	46c0      	nop			; (mov r8, r8)
}
 8009182:	46bd      	mov	sp, r7
 8009184:	b004      	add	sp, #16
 8009186:	bd80      	pop	{r7, pc}
 8009188:	40020000 	.word	0x40020000

0800918c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80091a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80091b4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80091b6:	4b14      	ldr	r3, [pc, #80]	; (8009208 <DMA_SetConfig+0x7c>)
 80091b8:	6859      	ldr	r1, [r3, #4]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	221c      	movs	r2, #28
 80091c0:	4013      	ands	r3, r2
 80091c2:	2201      	movs	r2, #1
 80091c4:	409a      	lsls	r2, r3
 80091c6:	4b10      	ldr	r3, [pc, #64]	; (8009208 <DMA_SetConfig+0x7c>)
 80091c8:	430a      	orrs	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2b10      	cmp	r3, #16
 80091da:	d108      	bne.n	80091ee <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80091ec:	e007      	b.n	80091fe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	60da      	str	r2, [r3, #12]
}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	46bd      	mov	sp, r7
 8009202:	b004      	add	sp, #16
 8009204:	bd80      	pop	{r7, pc}
 8009206:	46c0      	nop			; (mov r8, r8)
 8009208:	40020000 	.word	0x40020000

0800920c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	089b      	lsrs	r3, r3, #2
 800921a:	4a10      	ldr	r2, [pc, #64]	; (800925c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800921c:	4694      	mov	ip, r2
 800921e:	4463      	add	r3, ip
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	001a      	movs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	001a      	movs	r2, r3
 800922e:	23ff      	movs	r3, #255	; 0xff
 8009230:	4013      	ands	r3, r2
 8009232:	3b08      	subs	r3, #8
 8009234:	2114      	movs	r1, #20
 8009236:	0018      	movs	r0, r3
 8009238:	f7f6 ff82 	bl	8000140 <__udivsi3>
 800923c:	0003      	movs	r3, r0
 800923e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a07      	ldr	r2, [pc, #28]	; (8009260 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8009244:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	221f      	movs	r2, #31
 800924a:	4013      	ands	r3, r2
 800924c:	2201      	movs	r2, #1
 800924e:	409a      	lsls	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009254:	46c0      	nop			; (mov r8, r8)
 8009256:	46bd      	mov	sp, r7
 8009258:	b004      	add	sp, #16
 800925a:	bd80      	pop	{r7, pc}
 800925c:	10008200 	.word	0x10008200
 8009260:	40020880 	.word	0x40020880

08009264 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	223f      	movs	r2, #63	; 0x3f
 8009272:	4013      	ands	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4a0a      	ldr	r2, [pc, #40]	; (80092a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800927a:	4694      	mov	ip, r2
 800927c:	4463      	add	r3, ip
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	001a      	movs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a07      	ldr	r2, [pc, #28]	; (80092a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800928a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3b01      	subs	r3, #1
 8009290:	2203      	movs	r2, #3
 8009292:	4013      	ands	r3, r2
 8009294:	2201      	movs	r2, #1
 8009296:	409a      	lsls	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800929c:	46c0      	nop			; (mov r8, r8)
 800929e:	46bd      	mov	sp, r7
 80092a0:	b004      	add	sp, #16
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	1000823f 	.word	0x1000823f
 80092a8:	40020940 	.word	0x40020940

080092ac <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092be:	4013      	ands	r3, r2
 80092c0:	d01c      	beq.n	80092fc <HAL_DMAEx_MUX_IRQHandler+0x50>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092cc:	4921      	ldr	r1, [pc, #132]	; (8009354 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 80092ce:	400a      	ands	r2, r1
 80092d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80092da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e0:	2280      	movs	r2, #128	; 0x80
 80092e2:	0092      	lsls	r2, r2, #2
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <HAL_DMAEx_MUX_IRQHandler+0x50>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	0010      	movs	r0, r2
 80092fa:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009300:	2b00      	cmp	r3, #0
 8009302:	d023      	beq.n	800934c <HAL_DMAEx_MUX_IRQHandler+0xa0>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800930e:	4013      	ands	r3, r2
 8009310:	d01c      	beq.n	800934c <HAL_DMAEx_MUX_IRQHandler+0xa0>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931c:	490d      	ldr	r1, [pc, #52]	; (8009354 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 800931e:	400a      	ands	r2, r1
 8009320:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800932a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009330:	2280      	movs	r2, #128	; 0x80
 8009332:	00d2      	lsls	r2, r2, #3
 8009334:	431a      	orrs	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <HAL_DMAEx_MUX_IRQHandler+0xa0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	0010      	movs	r0, r2
 800934a:	4798      	blx	r3
      }
    }
  }
}
 800934c:	46c0      	nop			; (mov r8, r8)
 800934e:	46bd      	mov	sp, r7
 8009350:	b002      	add	sp, #8
 8009352:	bd80      	pop	{r7, pc}
 8009354:	fffffeff 	.word	0xfffffeff

08009358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009366:	e147      	b.n	80095f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2101      	movs	r1, #1
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4091      	lsls	r1, r2
 8009372:	000a      	movs	r2, r1
 8009374:	4013      	ands	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d100      	bne.n	8009380 <HAL_GPIO_Init+0x28>
 800937e:	e138      	b.n	80095f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2203      	movs	r2, #3
 8009386:	4013      	ands	r3, r2
 8009388:	2b01      	cmp	r3, #1
 800938a:	d005      	beq.n	8009398 <HAL_GPIO_Init+0x40>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2203      	movs	r2, #3
 8009392:	4013      	ands	r3, r2
 8009394:	2b02      	cmp	r3, #2
 8009396:	d130      	bne.n	80093fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	2203      	movs	r2, #3
 80093a4:	409a      	lsls	r2, r3
 80093a6:	0013      	movs	r3, r2
 80093a8:	43da      	mvns	r2, r3
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	4013      	ands	r3, r2
 80093ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	409a      	lsls	r2, r3
 80093ba:	0013      	movs	r3, r2
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80093ce:	2201      	movs	r2, #1
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	409a      	lsls	r2, r3
 80093d4:	0013      	movs	r3, r2
 80093d6:	43da      	mvns	r2, r3
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	4013      	ands	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	091b      	lsrs	r3, r3, #4
 80093e4:	2201      	movs	r2, #1
 80093e6:	401a      	ands	r2, r3
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	409a      	lsls	r2, r3
 80093ec:	0013      	movs	r3, r2
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2203      	movs	r2, #3
 8009400:	4013      	ands	r3, r2
 8009402:	2b03      	cmp	r3, #3
 8009404:	d017      	beq.n	8009436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	2203      	movs	r2, #3
 8009412:	409a      	lsls	r2, r3
 8009414:	0013      	movs	r3, r2
 8009416:	43da      	mvns	r2, r3
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	4013      	ands	r3, r2
 800941c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	409a      	lsls	r2, r3
 8009428:	0013      	movs	r3, r2
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2203      	movs	r2, #3
 800943c:	4013      	ands	r3, r2
 800943e:	2b02      	cmp	r3, #2
 8009440:	d123      	bne.n	800948a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	08da      	lsrs	r2, r3, #3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3208      	adds	r2, #8
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	58d3      	ldr	r3, [r2, r3]
 800944e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2207      	movs	r2, #7
 8009454:	4013      	ands	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	220f      	movs	r2, #15
 800945a:	409a      	lsls	r2, r3
 800945c:	0013      	movs	r3, r2
 800945e:	43da      	mvns	r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	4013      	ands	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	691a      	ldr	r2, [r3, #16]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2107      	movs	r1, #7
 800946e:	400b      	ands	r3, r1
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	409a      	lsls	r2, r3
 8009474:	0013      	movs	r3, r2
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	08da      	lsrs	r2, r3, #3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3208      	adds	r2, #8
 8009484:	0092      	lsls	r2, r2, #2
 8009486:	6939      	ldr	r1, [r7, #16]
 8009488:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	2203      	movs	r2, #3
 8009496:	409a      	lsls	r2, r3
 8009498:	0013      	movs	r3, r2
 800949a:	43da      	mvns	r2, r3
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4013      	ands	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2203      	movs	r2, #3
 80094a8:	401a      	ands	r2, r3
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	409a      	lsls	r2, r3
 80094b0:	0013      	movs	r3, r2
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	23c0      	movs	r3, #192	; 0xc0
 80094c4:	029b      	lsls	r3, r3, #10
 80094c6:	4013      	ands	r3, r2
 80094c8:	d100      	bne.n	80094cc <HAL_GPIO_Init+0x174>
 80094ca:	e092      	b.n	80095f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80094cc:	4a50      	ldr	r2, [pc, #320]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	089b      	lsrs	r3, r3, #2
 80094d2:	3318      	adds	r3, #24
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	589b      	ldr	r3, [r3, r2]
 80094d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2203      	movs	r2, #3
 80094de:	4013      	ands	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	220f      	movs	r2, #15
 80094e4:	409a      	lsls	r2, r3
 80094e6:	0013      	movs	r3, r2
 80094e8:	43da      	mvns	r2, r3
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	4013      	ands	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	23a0      	movs	r3, #160	; 0xa0
 80094f4:	05db      	lsls	r3, r3, #23
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d013      	beq.n	8009522 <HAL_GPIO_Init+0x1ca>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a45      	ldr	r2, [pc, #276]	; (8009614 <HAL_GPIO_Init+0x2bc>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00d      	beq.n	800951e <HAL_GPIO_Init+0x1c6>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a44      	ldr	r2, [pc, #272]	; (8009618 <HAL_GPIO_Init+0x2c0>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d007      	beq.n	800951a <HAL_GPIO_Init+0x1c2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a43      	ldr	r2, [pc, #268]	; (800961c <HAL_GPIO_Init+0x2c4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d101      	bne.n	8009516 <HAL_GPIO_Init+0x1be>
 8009512:	2303      	movs	r3, #3
 8009514:	e006      	b.n	8009524 <HAL_GPIO_Init+0x1cc>
 8009516:	2305      	movs	r3, #5
 8009518:	e004      	b.n	8009524 <HAL_GPIO_Init+0x1cc>
 800951a:	2302      	movs	r3, #2
 800951c:	e002      	b.n	8009524 <HAL_GPIO_Init+0x1cc>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <HAL_GPIO_Init+0x1cc>
 8009522:	2300      	movs	r3, #0
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	2103      	movs	r1, #3
 8009528:	400a      	ands	r2, r1
 800952a:	00d2      	lsls	r2, r2, #3
 800952c:	4093      	lsls	r3, r2
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	4313      	orrs	r3, r2
 8009532:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8009534:	4936      	ldr	r1, [pc, #216]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	089b      	lsrs	r3, r3, #2
 800953a:	3318      	adds	r3, #24
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009542:	4b33      	ldr	r3, [pc, #204]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	43da      	mvns	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4013      	ands	r3, r2
 8009550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	2380      	movs	r3, #128	; 0x80
 8009558:	035b      	lsls	r3, r3, #13
 800955a:	4013      	ands	r3, r2
 800955c:	d003      	beq.n	8009566 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009566:	4b2a      	ldr	r3, [pc, #168]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800956c:	4b28      	ldr	r3, [pc, #160]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	43da      	mvns	r2, r3
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	4013      	ands	r3, r2
 800957a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	2380      	movs	r3, #128	; 0x80
 8009582:	039b      	lsls	r3, r3, #14
 8009584:	4013      	ands	r3, r2
 8009586:	d003      	beq.n	8009590 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4313      	orrs	r3, r2
 800958e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009590:	4b1f      	ldr	r3, [pc, #124]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009596:	4a1e      	ldr	r2, [pc, #120]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 8009598:	2384      	movs	r3, #132	; 0x84
 800959a:	58d3      	ldr	r3, [r2, r3]
 800959c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	43da      	mvns	r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	4013      	ands	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	2380      	movs	r3, #128	; 0x80
 80095ae:	029b      	lsls	r3, r3, #10
 80095b0:	4013      	ands	r3, r2
 80095b2:	d003      	beq.n	80095bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80095bc:	4914      	ldr	r1, [pc, #80]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 80095be:	2284      	movs	r2, #132	; 0x84
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80095c4:	4a12      	ldr	r2, [pc, #72]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 80095c6:	2380      	movs	r3, #128	; 0x80
 80095c8:	58d3      	ldr	r3, [r2, r3]
 80095ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	43da      	mvns	r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	4013      	ands	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	2380      	movs	r3, #128	; 0x80
 80095dc:	025b      	lsls	r3, r3, #9
 80095de:	4013      	ands	r3, r2
 80095e0:	d003      	beq.n	80095ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80095ea:	4909      	ldr	r1, [pc, #36]	; (8009610 <HAL_GPIO_Init+0x2b8>)
 80095ec:	2280      	movs	r2, #128	; 0x80
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	3301      	adds	r3, #1
 80095f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	40da      	lsrs	r2, r3
 8009600:	1e13      	subs	r3, r2, #0
 8009602:	d000      	beq.n	8009606 <HAL_GPIO_Init+0x2ae>
 8009604:	e6b0      	b.n	8009368 <HAL_GPIO_Init+0x10>
  }
}
 8009606:	46c0      	nop			; (mov r8, r8)
 8009608:	46c0      	nop			; (mov r8, r8)
 800960a:	46bd      	mov	sp, r7
 800960c:	b006      	add	sp, #24
 800960e:	bd80      	pop	{r7, pc}
 8009610:	40021800 	.word	0x40021800
 8009614:	50000400 	.word	0x50000400
 8009618:	50000800 	.word	0x50000800
 800961c:	50000c00 	.word	0x50000c00

08009620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	000a      	movs	r2, r1
 800962a:	1cbb      	adds	r3, r7, #2
 800962c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	1cba      	adds	r2, r7, #2
 8009634:	8812      	ldrh	r2, [r2, #0]
 8009636:	4013      	ands	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800963a:	230f      	movs	r3, #15
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	e003      	b.n	800964c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009644:	230f      	movs	r3, #15
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800964c:	230f      	movs	r3, #15
 800964e:	18fb      	adds	r3, r7, r3
 8009650:	781b      	ldrb	r3, [r3, #0]
}
 8009652:	0018      	movs	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	b004      	add	sp, #16
 8009658:	bd80      	pop	{r7, pc}

0800965a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	0008      	movs	r0, r1
 8009664:	0011      	movs	r1, r2
 8009666:	1cbb      	adds	r3, r7, #2
 8009668:	1c02      	adds	r2, r0, #0
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	1c7b      	adds	r3, r7, #1
 800966e:	1c0a      	adds	r2, r1, #0
 8009670:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009672:	1c7b      	adds	r3, r7, #1
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800967a:	1cbb      	adds	r3, r7, #2
 800967c:	881a      	ldrh	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009682:	e003      	b.n	800968c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009684:	1cbb      	adds	r3, r7, #2
 8009686:	881a      	ldrh	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800968c:	46c0      	nop			; (mov r8, r8)
 800968e:	46bd      	mov	sp, r7
 8009690:	b002      	add	sp, #8
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	000a      	movs	r2, r1
 800969e:	1cbb      	adds	r3, r7, #2
 80096a0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80096a8:	1cbb      	adds	r3, r7, #2
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4013      	ands	r3, r2
 80096b0:	041a      	lsls	r2, r3, #16
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	43db      	mvns	r3, r3
 80096b6:	1cb9      	adds	r1, r7, #2
 80096b8:	8809      	ldrh	r1, [r1, #0]
 80096ba:	400b      	ands	r3, r1
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	619a      	str	r2, [r3, #24]
}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	46bd      	mov	sp, r7
 80096c6:	b004      	add	sp, #16
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e082      	b.n	80097e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2241      	movs	r2, #65	; 0x41
 80096e2:	5c9b      	ldrb	r3, [r3, r2]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d107      	bne.n	80096fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2240      	movs	r2, #64	; 0x40
 80096ee:	2100      	movs	r1, #0
 80096f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	0018      	movs	r0, r3
 80096f6:	f7fd fed9 	bl	80074ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2241      	movs	r2, #65	; 0x41
 80096fe:	2124      	movs	r1, #36	; 0x24
 8009700:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2101      	movs	r1, #1
 800970e:	438a      	bics	r2, r1
 8009710:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4934      	ldr	r1, [pc, #208]	; (80097ec <HAL_I2C_Init+0x120>)
 800971c:	400a      	ands	r2, r1
 800971e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689a      	ldr	r2, [r3, #8]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4931      	ldr	r1, [pc, #196]	; (80097f0 <HAL_I2C_Init+0x124>)
 800972c:	400a      	ands	r2, r1
 800972e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d108      	bne.n	800974a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2180      	movs	r1, #128	; 0x80
 8009742:	0209      	lsls	r1, r1, #8
 8009744:	430a      	orrs	r2, r1
 8009746:	609a      	str	r2, [r3, #8]
 8009748:	e007      	b.n	800975a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2184      	movs	r1, #132	; 0x84
 8009754:	0209      	lsls	r1, r1, #8
 8009756:	430a      	orrs	r2, r1
 8009758:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d104      	bne.n	800976c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2280      	movs	r2, #128	; 0x80
 8009768:	0112      	lsls	r2, r2, #4
 800976a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	491f      	ldr	r1, [pc, #124]	; (80097f4 <HAL_I2C_Init+0x128>)
 8009778:	430a      	orrs	r2, r1
 800977a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	491a      	ldr	r1, [pc, #104]	; (80097f0 <HAL_I2C_Init+0x124>)
 8009788:	400a      	ands	r2, r1
 800978a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	431a      	orrs	r2, r3
 8009796:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	69d9      	ldr	r1, [r3, #28]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1a      	ldr	r2, [r3, #32]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2101      	movs	r1, #1
 80097c2:	430a      	orrs	r2, r1
 80097c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2241      	movs	r2, #65	; 0x41
 80097d0:	2120      	movs	r1, #32
 80097d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2242      	movs	r2, #66	; 0x42
 80097de:	2100      	movs	r1, #0
 80097e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	0018      	movs	r0, r3
 80097e6:	46bd      	mov	sp, r7
 80097e8:	b002      	add	sp, #8
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	f0ffffff 	.word	0xf0ffffff
 80097f0:	ffff7fff 	.word	0xffff7fff
 80097f4:	02008000 	.word	0x02008000

080097f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b089      	sub	sp, #36	; 0x24
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	000c      	movs	r4, r1
 8009802:	0010      	movs	r0, r2
 8009804:	0019      	movs	r1, r3
 8009806:	230a      	movs	r3, #10
 8009808:	18fb      	adds	r3, r7, r3
 800980a:	1c22      	adds	r2, r4, #0
 800980c:	801a      	strh	r2, [r3, #0]
 800980e:	2308      	movs	r3, #8
 8009810:	18fb      	adds	r3, r7, r3
 8009812:	1c02      	adds	r2, r0, #0
 8009814:	801a      	strh	r2, [r3, #0]
 8009816:	1dbb      	adds	r3, r7, #6
 8009818:	1c0a      	adds	r2, r1, #0
 800981a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2241      	movs	r2, #65	; 0x41
 8009820:	5c9b      	ldrb	r3, [r3, r2]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b20      	cmp	r3, #32
 8009826:	d000      	beq.n	800982a <HAL_I2C_Mem_Write+0x32>
 8009828:	e10c      	b.n	8009a44 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <HAL_I2C_Mem_Write+0x42>
 8009830:	232c      	movs	r3, #44	; 0x2c
 8009832:	18fb      	adds	r3, r7, r3
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d105      	bne.n	8009846 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2280      	movs	r2, #128	; 0x80
 800983e:	0092      	lsls	r2, r2, #2
 8009840:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e0ff      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2240      	movs	r2, #64	; 0x40
 800984a:	5c9b      	ldrb	r3, [r3, r2]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d101      	bne.n	8009854 <HAL_I2C_Mem_Write+0x5c>
 8009850:	2302      	movs	r3, #2
 8009852:	e0f8      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2240      	movs	r2, #64	; 0x40
 8009858:	2101      	movs	r1, #1
 800985a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800985c:	f7fe fa94 	bl	8007d88 <HAL_GetTick>
 8009860:	0003      	movs	r3, r0
 8009862:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009864:	2380      	movs	r3, #128	; 0x80
 8009866:	0219      	lsls	r1, r3, #8
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	2319      	movs	r3, #25
 8009870:	2201      	movs	r2, #1
 8009872:	f000 fb0b 	bl	8009e8c <I2C_WaitOnFlagUntilTimeout>
 8009876:	1e03      	subs	r3, r0, #0
 8009878:	d001      	beq.n	800987e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e0e3      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2241      	movs	r2, #65	; 0x41
 8009882:	2121      	movs	r1, #33	; 0x21
 8009884:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2242      	movs	r2, #66	; 0x42
 800988a:	2140      	movs	r1, #64	; 0x40
 800988c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	222c      	movs	r2, #44	; 0x2c
 800989e:	18ba      	adds	r2, r7, r2
 80098a0:	8812      	ldrh	r2, [r2, #0]
 80098a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098aa:	1dbb      	adds	r3, r7, #6
 80098ac:	881c      	ldrh	r4, [r3, #0]
 80098ae:	2308      	movs	r3, #8
 80098b0:	18fb      	adds	r3, r7, r3
 80098b2:	881a      	ldrh	r2, [r3, #0]
 80098b4:	230a      	movs	r3, #10
 80098b6:	18fb      	adds	r3, r7, r3
 80098b8:	8819      	ldrh	r1, [r3, #0]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	0023      	movs	r3, r4
 80098c6:	f000 f9f9 	bl	8009cbc <I2C_RequestMemoryWrite>
 80098ca:	1e03      	subs	r3, r0, #0
 80098cc:	d005      	beq.n	80098da <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2240      	movs	r2, #64	; 0x40
 80098d2:	2100      	movs	r1, #0
 80098d4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e0b5      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2bff      	cmp	r3, #255	; 0xff
 80098e2:	d911      	bls.n	8009908 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	22ff      	movs	r2, #255	; 0xff
 80098e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	2380      	movs	r3, #128	; 0x80
 80098f2:	045c      	lsls	r4, r3, #17
 80098f4:	230a      	movs	r3, #10
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	8819      	ldrh	r1, [r3, #0]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	2300      	movs	r3, #0
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	0023      	movs	r3, r4
 8009902:	f000 fc7d 	bl	800a200 <I2C_TransferConfig>
 8009906:	e012      	b.n	800992e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990c:	b29a      	uxth	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009916:	b2da      	uxtb	r2, r3
 8009918:	2380      	movs	r3, #128	; 0x80
 800991a:	049c      	lsls	r4, r3, #18
 800991c:	230a      	movs	r3, #10
 800991e:	18fb      	adds	r3, r7, r3
 8009920:	8819      	ldrh	r1, [r3, #0]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	2300      	movs	r3, #0
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	0023      	movs	r3, r4
 800992a:	f000 fc69 	bl	800a200 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	0018      	movs	r0, r3
 8009936:	f000 fae8 	bl	8009f0a <I2C_WaitOnTXISFlagUntilTimeout>
 800993a:	1e03      	subs	r3, r0, #0
 800993c:	d001      	beq.n	8009942 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e081      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995c:	b29b      	uxth	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	b29a      	uxth	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800996a:	3b01      	subs	r3, #1
 800996c:	b29a      	uxth	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d03a      	beq.n	80099f2 <HAL_I2C_Mem_Write+0x1fa>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	d136      	bne.n	80099f2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	0013      	movs	r3, r2
 800998e:	2200      	movs	r2, #0
 8009990:	2180      	movs	r1, #128	; 0x80
 8009992:	f000 fa7b 	bl	8009e8c <I2C_WaitOnFlagUntilTimeout>
 8009996:	1e03      	subs	r3, r0, #0
 8009998:	d001      	beq.n	800999e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e053      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2bff      	cmp	r3, #255	; 0xff
 80099a6:	d911      	bls.n	80099cc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	22ff      	movs	r2, #255	; 0xff
 80099ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	2380      	movs	r3, #128	; 0x80
 80099b6:	045c      	lsls	r4, r3, #17
 80099b8:	230a      	movs	r3, #10
 80099ba:	18fb      	adds	r3, r7, r3
 80099bc:	8819      	ldrh	r1, [r3, #0]
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	2300      	movs	r3, #0
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	0023      	movs	r3, r4
 80099c6:	f000 fc1b 	bl	800a200 <I2C_TransferConfig>
 80099ca:	e012      	b.n	80099f2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	2380      	movs	r3, #128	; 0x80
 80099de:	049c      	lsls	r4, r3, #18
 80099e0:	230a      	movs	r3, #10
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	8819      	ldrh	r1, [r3, #0]
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	2300      	movs	r3, #0
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	0023      	movs	r3, r4
 80099ee:	f000 fc07 	bl	800a200 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d198      	bne.n	800992e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	0018      	movs	r0, r3
 8009a04:	f000 fac0 	bl	8009f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a08:	1e03      	subs	r3, r0, #0
 8009a0a:	d001      	beq.n	8009a10 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e01a      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2220      	movs	r2, #32
 8009a16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	490b      	ldr	r1, [pc, #44]	; (8009a50 <HAL_I2C_Mem_Write+0x258>)
 8009a24:	400a      	ands	r2, r1
 8009a26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2241      	movs	r2, #65	; 0x41
 8009a2c:	2120      	movs	r1, #32
 8009a2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2242      	movs	r2, #66	; 0x42
 8009a34:	2100      	movs	r1, #0
 8009a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2240      	movs	r2, #64	; 0x40
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e000      	b.n	8009a46 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8009a44:	2302      	movs	r3, #2
  }
}
 8009a46:	0018      	movs	r0, r3
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	b007      	add	sp, #28
 8009a4c:	bd90      	pop	{r4, r7, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	fe00e800 	.word	0xfe00e800

08009a54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b089      	sub	sp, #36	; 0x24
 8009a58:	af02      	add	r7, sp, #8
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	000c      	movs	r4, r1
 8009a5e:	0010      	movs	r0, r2
 8009a60:	0019      	movs	r1, r3
 8009a62:	230a      	movs	r3, #10
 8009a64:	18fb      	adds	r3, r7, r3
 8009a66:	1c22      	adds	r2, r4, #0
 8009a68:	801a      	strh	r2, [r3, #0]
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	18fb      	adds	r3, r7, r3
 8009a6e:	1c02      	adds	r2, r0, #0
 8009a70:	801a      	strh	r2, [r3, #0]
 8009a72:	1dbb      	adds	r3, r7, #6
 8009a74:	1c0a      	adds	r2, r1, #0
 8009a76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2241      	movs	r2, #65	; 0x41
 8009a7c:	5c9b      	ldrb	r3, [r3, r2]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	d000      	beq.n	8009a86 <HAL_I2C_Mem_Read+0x32>
 8009a84:	e110      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <HAL_I2C_Mem_Read+0x42>
 8009a8c:	232c      	movs	r3, #44	; 0x2c
 8009a8e:	18fb      	adds	r3, r7, r3
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2280      	movs	r2, #128	; 0x80
 8009a9a:	0092      	lsls	r2, r2, #2
 8009a9c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e103      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2240      	movs	r2, #64	; 0x40
 8009aa6:	5c9b      	ldrb	r3, [r3, r2]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d101      	bne.n	8009ab0 <HAL_I2C_Mem_Read+0x5c>
 8009aac:	2302      	movs	r3, #2
 8009aae:	e0fc      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2240      	movs	r2, #64	; 0x40
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ab8:	f7fe f966 	bl	8007d88 <HAL_GetTick>
 8009abc:	0003      	movs	r3, r0
 8009abe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ac0:	2380      	movs	r3, #128	; 0x80
 8009ac2:	0219      	lsls	r1, r3, #8
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2319      	movs	r3, #25
 8009acc:	2201      	movs	r2, #1
 8009ace:	f000 f9dd 	bl	8009e8c <I2C_WaitOnFlagUntilTimeout>
 8009ad2:	1e03      	subs	r3, r0, #0
 8009ad4:	d001      	beq.n	8009ada <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e0e7      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2241      	movs	r2, #65	; 0x41
 8009ade:	2122      	movs	r1, #34	; 0x22
 8009ae0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2242      	movs	r2, #66	; 0x42
 8009ae6:	2140      	movs	r1, #64	; 0x40
 8009ae8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	222c      	movs	r2, #44	; 0x2c
 8009afa:	18ba      	adds	r2, r7, r2
 8009afc:	8812      	ldrh	r2, [r2, #0]
 8009afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b06:	1dbb      	adds	r3, r7, #6
 8009b08:	881c      	ldrh	r4, [r3, #0]
 8009b0a:	2308      	movs	r3, #8
 8009b0c:	18fb      	adds	r3, r7, r3
 8009b0e:	881a      	ldrh	r2, [r3, #0]
 8009b10:	230a      	movs	r3, #10
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	8819      	ldrh	r1, [r3, #0]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	0023      	movs	r3, r4
 8009b22:	f000 f92f 	bl	8009d84 <I2C_RequestMemoryRead>
 8009b26:	1e03      	subs	r3, r0, #0
 8009b28:	d005      	beq.n	8009b36 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2240      	movs	r2, #64	; 0x40
 8009b2e:	2100      	movs	r1, #0
 8009b30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e0b9      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	2bff      	cmp	r3, #255	; 0xff
 8009b3e:	d911      	bls.n	8009b64 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	22ff      	movs	r2, #255	; 0xff
 8009b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	2380      	movs	r3, #128	; 0x80
 8009b4e:	045c      	lsls	r4, r3, #17
 8009b50:	230a      	movs	r3, #10
 8009b52:	18fb      	adds	r3, r7, r3
 8009b54:	8819      	ldrh	r1, [r3, #0]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	4b56      	ldr	r3, [pc, #344]	; (8009cb4 <HAL_I2C_Mem_Read+0x260>)
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	0023      	movs	r3, r4
 8009b5e:	f000 fb4f 	bl	800a200 <I2C_TransferConfig>
 8009b62:	e012      	b.n	8009b8a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	2380      	movs	r3, #128	; 0x80
 8009b76:	049c      	lsls	r4, r3, #18
 8009b78:	230a      	movs	r3, #10
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	8819      	ldrh	r1, [r3, #0]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	4b4c      	ldr	r3, [pc, #304]	; (8009cb4 <HAL_I2C_Mem_Read+0x260>)
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	0023      	movs	r3, r4
 8009b86:	f000 fb3b 	bl	800a200 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	0013      	movs	r3, r2
 8009b94:	2200      	movs	r2, #0
 8009b96:	2104      	movs	r1, #4
 8009b98:	f000 f978 	bl	8009e8c <I2C_WaitOnFlagUntilTimeout>
 8009b9c:	1e03      	subs	r3, r0, #0
 8009b9e:	d001      	beq.n	8009ba4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e082      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d03a      	beq.n	8009c56 <HAL_I2C_Mem_Read+0x202>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d136      	bne.n	8009c56 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	0013      	movs	r3, r2
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2180      	movs	r1, #128	; 0x80
 8009bf6:	f000 f949 	bl	8009e8c <I2C_WaitOnFlagUntilTimeout>
 8009bfa:	1e03      	subs	r3, r0, #0
 8009bfc:	d001      	beq.n	8009c02 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e053      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2bff      	cmp	r3, #255	; 0xff
 8009c0a:	d911      	bls.n	8009c30 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	22ff      	movs	r2, #255	; 0xff
 8009c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	2380      	movs	r3, #128	; 0x80
 8009c1a:	045c      	lsls	r4, r3, #17
 8009c1c:	230a      	movs	r3, #10
 8009c1e:	18fb      	adds	r3, r7, r3
 8009c20:	8819      	ldrh	r1, [r3, #0]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	2300      	movs	r3, #0
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	0023      	movs	r3, r4
 8009c2a:	f000 fae9 	bl	800a200 <I2C_TransferConfig>
 8009c2e:	e012      	b.n	8009c56 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	2380      	movs	r3, #128	; 0x80
 8009c42:	049c      	lsls	r4, r3, #18
 8009c44:	230a      	movs	r3, #10
 8009c46:	18fb      	adds	r3, r7, r3
 8009c48:	8819      	ldrh	r1, [r3, #0]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	0023      	movs	r3, r4
 8009c52:	f000 fad5 	bl	800a200 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d194      	bne.n	8009b8a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	0018      	movs	r0, r3
 8009c68:	f000 f98e 	bl	8009f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c6c:	1e03      	subs	r3, r0, #0
 8009c6e:	d001      	beq.n	8009c74 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e01a      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	490c      	ldr	r1, [pc, #48]	; (8009cb8 <HAL_I2C_Mem_Read+0x264>)
 8009c88:	400a      	ands	r2, r1
 8009c8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2241      	movs	r2, #65	; 0x41
 8009c90:	2120      	movs	r1, #32
 8009c92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2242      	movs	r2, #66	; 0x42
 8009c98:	2100      	movs	r1, #0
 8009c9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2240      	movs	r2, #64	; 0x40
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e000      	b.n	8009caa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8009ca8:	2302      	movs	r3, #2
  }
}
 8009caa:	0018      	movs	r0, r3
 8009cac:	46bd      	mov	sp, r7
 8009cae:	b007      	add	sp, #28
 8009cb0:	bd90      	pop	{r4, r7, pc}
 8009cb2:	46c0      	nop			; (mov r8, r8)
 8009cb4:	80002400 	.word	0x80002400
 8009cb8:	fe00e800 	.word	0xfe00e800

08009cbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009cbc:	b5b0      	push	{r4, r5, r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af02      	add	r7, sp, #8
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	000c      	movs	r4, r1
 8009cc6:	0010      	movs	r0, r2
 8009cc8:	0019      	movs	r1, r3
 8009cca:	250a      	movs	r5, #10
 8009ccc:	197b      	adds	r3, r7, r5
 8009cce:	1c22      	adds	r2, r4, #0
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	2308      	movs	r3, #8
 8009cd4:	18fb      	adds	r3, r7, r3
 8009cd6:	1c02      	adds	r2, r0, #0
 8009cd8:	801a      	strh	r2, [r3, #0]
 8009cda:	1dbb      	adds	r3, r7, #6
 8009cdc:	1c0a      	adds	r2, r1, #0
 8009cde:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ce0:	1dbb      	adds	r3, r7, #6
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	2380      	movs	r3, #128	; 0x80
 8009ce8:	045c      	lsls	r4, r3, #17
 8009cea:	197b      	adds	r3, r7, r5
 8009cec:	8819      	ldrh	r1, [r3, #0]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	4b23      	ldr	r3, [pc, #140]	; (8009d80 <I2C_RequestMemoryWrite+0xc4>)
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	0023      	movs	r3, r4
 8009cf6:	f000 fa83 	bl	800a200 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfc:	6a39      	ldr	r1, [r7, #32]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	0018      	movs	r0, r3
 8009d02:	f000 f902 	bl	8009f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009d06:	1e03      	subs	r3, r0, #0
 8009d08:	d001      	beq.n	8009d0e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e033      	b.n	8009d76 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d0e:	1dbb      	adds	r3, r7, #6
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d107      	bne.n	8009d26 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d16:	2308      	movs	r3, #8
 8009d18:	18fb      	adds	r3, r7, r3
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	629a      	str	r2, [r3, #40]	; 0x28
 8009d24:	e019      	b.n	8009d5a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d26:	2308      	movs	r3, #8
 8009d28:	18fb      	adds	r3, r7, r3
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	6a39      	ldr	r1, [r7, #32]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f000 f8e3 	bl	8009f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009d44:	1e03      	subs	r3, r0, #0
 8009d46:	d001      	beq.n	8009d4c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e014      	b.n	8009d76 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	18fb      	adds	r3, r7, r3
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009d5a:	6a3a      	ldr	r2, [r7, #32]
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	0013      	movs	r3, r2
 8009d64:	2200      	movs	r2, #0
 8009d66:	2180      	movs	r1, #128	; 0x80
 8009d68:	f000 f890 	bl	8009e8c <I2C_WaitOnFlagUntilTimeout>
 8009d6c:	1e03      	subs	r3, r0, #0
 8009d6e:	d001      	beq.n	8009d74 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	0018      	movs	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	b004      	add	sp, #16
 8009d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d7e:	46c0      	nop			; (mov r8, r8)
 8009d80:	80002000 	.word	0x80002000

08009d84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009d84:	b5b0      	push	{r4, r5, r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	000c      	movs	r4, r1
 8009d8e:	0010      	movs	r0, r2
 8009d90:	0019      	movs	r1, r3
 8009d92:	250a      	movs	r5, #10
 8009d94:	197b      	adds	r3, r7, r5
 8009d96:	1c22      	adds	r2, r4, #0
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	18fb      	adds	r3, r7, r3
 8009d9e:	1c02      	adds	r2, r0, #0
 8009da0:	801a      	strh	r2, [r3, #0]
 8009da2:	1dbb      	adds	r3, r7, #6
 8009da4:	1c0a      	adds	r2, r1, #0
 8009da6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009da8:	1dbb      	adds	r3, r7, #6
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	197b      	adds	r3, r7, r5
 8009db0:	8819      	ldrh	r1, [r3, #0]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	4b23      	ldr	r3, [pc, #140]	; (8009e44 <I2C_RequestMemoryRead+0xc0>)
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	2300      	movs	r3, #0
 8009dba:	f000 fa21 	bl	800a200 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc0:	6a39      	ldr	r1, [r7, #32]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	f000 f8a0 	bl	8009f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009dca:	1e03      	subs	r3, r0, #0
 8009dcc:	d001      	beq.n	8009dd2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e033      	b.n	8009e3a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dd2:	1dbb      	adds	r3, r7, #6
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d107      	bne.n	8009dea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dda:	2308      	movs	r3, #8
 8009ddc:	18fb      	adds	r3, r7, r3
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	629a      	str	r2, [r3, #40]	; 0x28
 8009de8:	e019      	b.n	8009e1e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009dea:	2308      	movs	r3, #8
 8009dec:	18fb      	adds	r3, r7, r3
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	0a1b      	lsrs	r3, r3, #8
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfe:	6a39      	ldr	r1, [r7, #32]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	0018      	movs	r0, r3
 8009e04:	f000 f881 	bl	8009f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009e08:	1e03      	subs	r3, r0, #0
 8009e0a:	d001      	beq.n	8009e10 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e014      	b.n	8009e3a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e10:	2308      	movs	r3, #8
 8009e12:	18fb      	adds	r3, r7, r3
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e1e:	6a3a      	ldr	r2, [r7, #32]
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	0013      	movs	r3, r2
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2140      	movs	r1, #64	; 0x40
 8009e2c:	f000 f82e 	bl	8009e8c <I2C_WaitOnFlagUntilTimeout>
 8009e30:	1e03      	subs	r3, r0, #0
 8009e32:	d001      	beq.n	8009e38 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e000      	b.n	8009e3a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	b004      	add	sp, #16
 8009e40:	bdb0      	pop	{r4, r5, r7, pc}
 8009e42:	46c0      	nop			; (mov r8, r8)
 8009e44:	80002000 	.word	0x80002000

08009e48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	2202      	movs	r2, #2
 8009e58:	4013      	ands	r3, r2
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d103      	bne.n	8009e66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	4013      	ands	r3, r2
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d007      	beq.n	8009e84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699a      	ldr	r2, [r3, #24]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2101      	movs	r1, #1
 8009e80:	430a      	orrs	r2, r1
 8009e82:	619a      	str	r2, [r3, #24]
  }
}
 8009e84:	46c0      	nop			; (mov r8, r8)
 8009e86:	46bd      	mov	sp, r7
 8009e88:	b002      	add	sp, #8
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	603b      	str	r3, [r7, #0]
 8009e98:	1dfb      	adds	r3, r7, #7
 8009e9a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e9c:	e021      	b.n	8009ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	d01e      	beq.n	8009ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ea4:	f7fd ff70 	bl	8007d88 <HAL_GetTick>
 8009ea8:	0002      	movs	r2, r0
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d302      	bcc.n	8009eba <I2C_WaitOnFlagUntilTimeout+0x2e>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d113      	bne.n	8009ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2241      	movs	r2, #65	; 0x41
 8009eca:	2120      	movs	r1, #32
 8009ecc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2242      	movs	r2, #66	; 0x42
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2240      	movs	r2, #64	; 0x40
 8009eda:	2100      	movs	r1, #0
 8009edc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e00f      	b.n	8009f02 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	4013      	ands	r3, r2
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	425a      	negs	r2, r3
 8009ef2:	4153      	adcs	r3, r2
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	001a      	movs	r2, r3
 8009ef8:	1dfb      	adds	r3, r7, #7
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d0ce      	beq.n	8009e9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	0018      	movs	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	b004      	add	sp, #16
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f16:	e02b      	b.n	8009f70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	68b9      	ldr	r1, [r7, #8]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f000 f86e 	bl	800a000 <I2C_IsErrorOccurred>
 8009f24:	1e03      	subs	r3, r0, #0
 8009f26:	d001      	beq.n	8009f2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e029      	b.n	8009f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	d01e      	beq.n	8009f70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f32:	f7fd ff29 	bl	8007d88 <HAL_GetTick>
 8009f36:	0002      	movs	r2, r0
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d302      	bcc.n	8009f48 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d113      	bne.n	8009f70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2241      	movs	r2, #65	; 0x41
 8009f58:	2120      	movs	r1, #32
 8009f5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2242      	movs	r2, #66	; 0x42
 8009f60:	2100      	movs	r1, #0
 8009f62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2240      	movs	r2, #64	; 0x40
 8009f68:	2100      	movs	r1, #0
 8009f6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e007      	b.n	8009f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	2202      	movs	r2, #2
 8009f78:	4013      	ands	r3, r2
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d1cc      	bne.n	8009f18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	0018      	movs	r0, r3
 8009f82:	46bd      	mov	sp, r7
 8009f84:	b004      	add	sp, #16
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f94:	e028      	b.n	8009fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	f000 f82f 	bl	800a000 <I2C_IsErrorOccurred>
 8009fa2:	1e03      	subs	r3, r0, #0
 8009fa4:	d001      	beq.n	8009faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e026      	b.n	8009ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009faa:	f7fd feed 	bl	8007d88 <HAL_GetTick>
 8009fae:	0002      	movs	r2, r0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d302      	bcc.n	8009fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d113      	bne.n	8009fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2241      	movs	r2, #65	; 0x41
 8009fd0:	2120      	movs	r1, #32
 8009fd2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2242      	movs	r2, #66	; 0x42
 8009fd8:	2100      	movs	r1, #0
 8009fda:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2240      	movs	r2, #64	; 0x40
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e007      	b.n	8009ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d1cf      	bne.n	8009f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	b004      	add	sp, #16
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b08b      	sub	sp, #44	; 0x2c
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a00c:	2327      	movs	r3, #39	; 0x27
 800a00e:	18fb      	adds	r3, r7, r3
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a01c:	2300      	movs	r3, #0
 800a01e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	2210      	movs	r2, #16
 800a028:	4013      	ands	r3, r2
 800a02a:	d100      	bne.n	800a02e <I2C_IsErrorOccurred+0x2e>
 800a02c:	e082      	b.n	800a134 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2210      	movs	r2, #16
 800a034:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a036:	e060      	b.n	800a0fa <I2C_IsErrorOccurred+0xfa>
 800a038:	2427      	movs	r4, #39	; 0x27
 800a03a:	193b      	adds	r3, r7, r4
 800a03c:	193a      	adds	r2, r7, r4
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	3301      	adds	r3, #1
 800a046:	d058      	beq.n	800a0fa <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a048:	f7fd fe9e 	bl	8007d88 <HAL_GetTick>
 800a04c:	0002      	movs	r2, r0
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	429a      	cmp	r2, r3
 800a056:	d306      	bcc.n	800a066 <I2C_IsErrorOccurred+0x66>
 800a058:	193b      	adds	r3, r7, r4
 800a05a:	193a      	adds	r2, r7, r4
 800a05c:	7812      	ldrb	r2, [r2, #0]
 800a05e:	701a      	strb	r2, [r3, #0]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d149      	bne.n	800a0fa <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	2380      	movs	r3, #128	; 0x80
 800a06e:	01db      	lsls	r3, r3, #7
 800a070:	4013      	ands	r3, r2
 800a072:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a074:	2013      	movs	r0, #19
 800a076:	183b      	adds	r3, r7, r0
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	2142      	movs	r1, #66	; 0x42
 800a07c:	5c52      	ldrb	r2, [r2, r1]
 800a07e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699a      	ldr	r2, [r3, #24]
 800a086:	2380      	movs	r3, #128	; 0x80
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	401a      	ands	r2, r3
 800a08c:	2380      	movs	r3, #128	; 0x80
 800a08e:	021b      	lsls	r3, r3, #8
 800a090:	429a      	cmp	r2, r3
 800a092:	d126      	bne.n	800a0e2 <I2C_IsErrorOccurred+0xe2>
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	2380      	movs	r3, #128	; 0x80
 800a098:	01db      	lsls	r3, r3, #7
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d021      	beq.n	800a0e2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800a09e:	183b      	adds	r3, r7, r0
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d01d      	beq.n	800a0e2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2180      	movs	r1, #128	; 0x80
 800a0b2:	01c9      	lsls	r1, r1, #7
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a0b8:	f7fd fe66 	bl	8007d88 <HAL_GetTick>
 800a0bc:	0003      	movs	r3, r0
 800a0be:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0c0:	e00f      	b.n	800a0e2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a0c2:	f7fd fe61 	bl	8007d88 <HAL_GetTick>
 800a0c6:	0002      	movs	r2, r0
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	2b19      	cmp	r3, #25
 800a0ce:	d908      	bls.n	800a0e2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a0d8:	2327      	movs	r3, #39	; 0x27
 800a0da:	18fb      	adds	r3, r7, r3
 800a0dc:	2201      	movs	r2, #1
 800a0de:	701a      	strb	r2, [r3, #0]

              break;
 800a0e0:	e00b      	b.n	800a0fa <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2127      	movs	r1, #39	; 0x27
 800a0ee:	187a      	adds	r2, r7, r1
 800a0f0:	1879      	adds	r1, r7, r1
 800a0f2:	7809      	ldrb	r1, [r1, #0]
 800a0f4:	7011      	strb	r1, [r2, #0]
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d1e3      	bne.n	800a0c2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2220      	movs	r2, #32
 800a102:	4013      	ands	r3, r2
 800a104:	2b20      	cmp	r3, #32
 800a106:	d004      	beq.n	800a112 <I2C_IsErrorOccurred+0x112>
 800a108:	2327      	movs	r3, #39	; 0x27
 800a10a:	18fb      	adds	r3, r7, r3
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d092      	beq.n	800a038 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a112:	2327      	movs	r3, #39	; 0x27
 800a114:	18fb      	adds	r3, r7, r3
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d103      	bne.n	800a124 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2220      	movs	r2, #32
 800a122:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	2204      	movs	r2, #4
 800a128:	4313      	orrs	r3, r2
 800a12a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a12c:	2327      	movs	r3, #39	; 0x27
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	2201      	movs	r2, #1
 800a132:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	2380      	movs	r3, #128	; 0x80
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	4013      	ands	r3, r2
 800a144:	d00c      	beq.n	800a160 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	2201      	movs	r2, #1
 800a14a:	4313      	orrs	r3, r2
 800a14c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2280      	movs	r2, #128	; 0x80
 800a154:	0052      	lsls	r2, r2, #1
 800a156:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a158:	2327      	movs	r3, #39	; 0x27
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	2201      	movs	r2, #1
 800a15e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	2380      	movs	r3, #128	; 0x80
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	4013      	ands	r3, r2
 800a168:	d00c      	beq.n	800a184 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	2208      	movs	r2, #8
 800a16e:	4313      	orrs	r3, r2
 800a170:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2280      	movs	r2, #128	; 0x80
 800a178:	00d2      	lsls	r2, r2, #3
 800a17a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a17c:	2327      	movs	r3, #39	; 0x27
 800a17e:	18fb      	adds	r3, r7, r3
 800a180:	2201      	movs	r2, #1
 800a182:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	2380      	movs	r3, #128	; 0x80
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4013      	ands	r3, r2
 800a18c:	d00c      	beq.n	800a1a8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	2202      	movs	r2, #2
 800a192:	4313      	orrs	r3, r2
 800a194:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2280      	movs	r2, #128	; 0x80
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a1a0:	2327      	movs	r3, #39	; 0x27
 800a1a2:	18fb      	adds	r3, r7, r3
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800a1a8:	2327      	movs	r3, #39	; 0x27
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d01d      	beq.n	800a1ee <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f7ff fe47 	bl	8009e48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	490d      	ldr	r1, [pc, #52]	; (800a1fc <I2C_IsErrorOccurred+0x1fc>)
 800a1c6:	400a      	ands	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2241      	movs	r2, #65	; 0x41
 800a1da:	2120      	movs	r1, #32
 800a1dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2242      	movs	r2, #66	; 0x42
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2240      	movs	r2, #64	; 0x40
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a1ee:	2327      	movs	r3, #39	; 0x27
 800a1f0:	18fb      	adds	r3, r7, r3
 800a1f2:	781b      	ldrb	r3, [r3, #0]
}
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	b00b      	add	sp, #44	; 0x2c
 800a1fa:	bd90      	pop	{r4, r7, pc}
 800a1fc:	fe00e800 	.word	0xfe00e800

0800a200 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a200:	b590      	push	{r4, r7, lr}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	0008      	movs	r0, r1
 800a20a:	0011      	movs	r1, r2
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	240a      	movs	r4, #10
 800a210:	193b      	adds	r3, r7, r4
 800a212:	1c02      	adds	r2, r0, #0
 800a214:	801a      	strh	r2, [r3, #0]
 800a216:	2009      	movs	r0, #9
 800a218:	183b      	adds	r3, r7, r0
 800a21a:	1c0a      	adds	r2, r1, #0
 800a21c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a21e:	193b      	adds	r3, r7, r4
 800a220:	881b      	ldrh	r3, [r3, #0]
 800a222:	059b      	lsls	r3, r3, #22
 800a224:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a226:	183b      	adds	r3, r7, r0
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	0419      	lsls	r1, r3, #16
 800a22c:	23ff      	movs	r3, #255	; 0xff
 800a22e:	041b      	lsls	r3, r3, #16
 800a230:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a232:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	4313      	orrs	r3, r2
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a24a:	0d51      	lsrs	r1, r2, #21
 800a24c:	2280      	movs	r2, #128	; 0x80
 800a24e:	00d2      	lsls	r2, r2, #3
 800a250:	400a      	ands	r2, r1
 800a252:	4907      	ldr	r1, [pc, #28]	; (800a270 <I2C_TransferConfig+0x70>)
 800a254:	430a      	orrs	r2, r1
 800a256:	43d2      	mvns	r2, r2
 800a258:	401a      	ands	r2, r3
 800a25a:	0011      	movs	r1, r2
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	46bd      	mov	sp, r7
 800a26a:	b007      	add	sp, #28
 800a26c:	bd90      	pop	{r4, r7, pc}
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	03ff63ff 	.word	0x03ff63ff

0800a274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2241      	movs	r2, #65	; 0x41
 800a282:	5c9b      	ldrb	r3, [r3, r2]
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b20      	cmp	r3, #32
 800a288:	d138      	bne.n	800a2fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2240      	movs	r2, #64	; 0x40
 800a28e:	5c9b      	ldrb	r3, [r3, r2]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a294:	2302      	movs	r3, #2
 800a296:	e032      	b.n	800a2fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2240      	movs	r2, #64	; 0x40
 800a29c:	2101      	movs	r1, #1
 800a29e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2241      	movs	r2, #65	; 0x41
 800a2a4:	2124      	movs	r1, #36	; 0x24
 800a2a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	438a      	bics	r2, r1
 800a2b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4911      	ldr	r1, [pc, #68]	; (800a308 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800a2c4:	400a      	ands	r2, r1
 800a2c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6819      	ldr	r1, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2241      	movs	r2, #65	; 0x41
 800a2ec:	2120      	movs	r1, #32
 800a2ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2240      	movs	r2, #64	; 0x40
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e000      	b.n	800a2fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a2fc:	2302      	movs	r3, #2
  }
}
 800a2fe:	0018      	movs	r0, r3
 800a300:	46bd      	mov	sp, r7
 800a302:	b002      	add	sp, #8
 800a304:	bd80      	pop	{r7, pc}
 800a306:	46c0      	nop			; (mov r8, r8)
 800a308:	ffffefff 	.word	0xffffefff

0800a30c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2241      	movs	r2, #65	; 0x41
 800a31a:	5c9b      	ldrb	r3, [r3, r2]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b20      	cmp	r3, #32
 800a320:	d139      	bne.n	800a396 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2240      	movs	r2, #64	; 0x40
 800a326:	5c9b      	ldrb	r3, [r3, r2]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e033      	b.n	800a398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2240      	movs	r2, #64	; 0x40
 800a334:	2101      	movs	r1, #1
 800a336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2241      	movs	r2, #65	; 0x41
 800a33c:	2124      	movs	r1, #36	; 0x24
 800a33e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2101      	movs	r1, #1
 800a34c:	438a      	bics	r2, r1
 800a34e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	4a11      	ldr	r2, [pc, #68]	; (800a3a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	021b      	lsls	r3, r3, #8
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4313      	orrs	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2101      	movs	r1, #1
 800a37e:	430a      	orrs	r2, r1
 800a380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2241      	movs	r2, #65	; 0x41
 800a386:	2120      	movs	r1, #32
 800a388:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2240      	movs	r2, #64	; 0x40
 800a38e:	2100      	movs	r1, #0
 800a390:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	e000      	b.n	800a398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a396:	2302      	movs	r3, #2
  }
}
 800a398:	0018      	movs	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b004      	add	sp, #16
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	fffff0ff 	.word	0xfffff0ff

0800a3a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a3ac:	4b19      	ldr	r3, [pc, #100]	; (800a414 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a19      	ldr	r2, [pc, #100]	; (800a418 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	0019      	movs	r1, r3
 800a3b6:	4b17      	ldr	r3, [pc, #92]	; (800a414 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	2380      	movs	r3, #128	; 0x80
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d11f      	bne.n	800a408 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a3c8:	4b14      	ldr	r3, [pc, #80]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	0013      	movs	r3, r2
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	189b      	adds	r3, r3, r2
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	4912      	ldr	r1, [pc, #72]	; (800a420 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f7f5 feb2 	bl	8000140 <__udivsi3>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3e2:	e008      	b.n	800a3f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	e001      	b.n	800a3f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e009      	b.n	800a40a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3f6:	4b07      	ldr	r3, [pc, #28]	; (800a414 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a3f8:	695a      	ldr	r2, [r3, #20]
 800a3fa:	2380      	movs	r3, #128	; 0x80
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	401a      	ands	r2, r3
 800a400:	2380      	movs	r3, #128	; 0x80
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	429a      	cmp	r2, r3
 800a406:	d0ed      	beq.n	800a3e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	0018      	movs	r0, r3
 800a40c:	46bd      	mov	sp, r7
 800a40e:	b004      	add	sp, #16
 800a410:	bd80      	pop	{r7, pc}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	40007000 	.word	0x40007000
 800a418:	fffff9ff 	.word	0xfffff9ff
 800a41c:	200000e0 	.word	0x200000e0
 800a420:	000f4240 	.word	0x000f4240

0800a424 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a428:	4b03      	ldr	r3, [pc, #12]	; (800a438 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	23e0      	movs	r3, #224	; 0xe0
 800a42e:	01db      	lsls	r3, r3, #7
 800a430:	4013      	ands	r3, r2
}
 800a432:	0018      	movs	r0, r3
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	40021000 	.word	0x40021000

0800a43c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b088      	sub	sp, #32
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e2f3      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2201      	movs	r2, #1
 800a454:	4013      	ands	r3, r2
 800a456:	d100      	bne.n	800a45a <HAL_RCC_OscConfig+0x1e>
 800a458:	e07c      	b.n	800a554 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a45a:	4bc3      	ldr	r3, [pc, #780]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	2238      	movs	r2, #56	; 0x38
 800a460:	4013      	ands	r3, r2
 800a462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a464:	4bc0      	ldr	r3, [pc, #768]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	2203      	movs	r2, #3
 800a46a:	4013      	ands	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2b10      	cmp	r3, #16
 800a472:	d102      	bne.n	800a47a <HAL_RCC_OscConfig+0x3e>
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2b03      	cmp	r3, #3
 800a478:	d002      	beq.n	800a480 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	2b08      	cmp	r3, #8
 800a47e:	d10b      	bne.n	800a498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a480:	4bb9      	ldr	r3, [pc, #740]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	2380      	movs	r3, #128	; 0x80
 800a486:	029b      	lsls	r3, r3, #10
 800a488:	4013      	ands	r3, r2
 800a48a:	d062      	beq.n	800a552 <HAL_RCC_OscConfig+0x116>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d15e      	bne.n	800a552 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e2ce      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	2380      	movs	r3, #128	; 0x80
 800a49e:	025b      	lsls	r3, r3, #9
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCC_OscConfig+0x78>
 800a4a4:	4bb0      	ldr	r3, [pc, #704]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	4baf      	ldr	r3, [pc, #700]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4aa:	2180      	movs	r1, #128	; 0x80
 800a4ac:	0249      	lsls	r1, r1, #9
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e020      	b.n	800a4f6 <HAL_RCC_OscConfig+0xba>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	23a0      	movs	r3, #160	; 0xa0
 800a4ba:	02db      	lsls	r3, r3, #11
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d10e      	bne.n	800a4de <HAL_RCC_OscConfig+0xa2>
 800a4c0:	4ba9      	ldr	r3, [pc, #676]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	4ba8      	ldr	r3, [pc, #672]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4c6:	2180      	movs	r1, #128	; 0x80
 800a4c8:	02c9      	lsls	r1, r1, #11
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	4ba6      	ldr	r3, [pc, #664]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4ba5      	ldr	r3, [pc, #660]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4d4:	2180      	movs	r1, #128	; 0x80
 800a4d6:	0249      	lsls	r1, r1, #9
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	e00b      	b.n	800a4f6 <HAL_RCC_OscConfig+0xba>
 800a4de:	4ba2      	ldr	r3, [pc, #648]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4ba1      	ldr	r3, [pc, #644]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4e4:	49a1      	ldr	r1, [pc, #644]	; (800a76c <HAL_RCC_OscConfig+0x330>)
 800a4e6:	400a      	ands	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	4b9f      	ldr	r3, [pc, #636]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4b9e      	ldr	r3, [pc, #632]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a4f0:	499f      	ldr	r1, [pc, #636]	; (800a770 <HAL_RCC_OscConfig+0x334>)
 800a4f2:	400a      	ands	r2, r1
 800a4f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d014      	beq.n	800a528 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4fe:	f7fd fc43 	bl	8007d88 <HAL_GetTick>
 800a502:	0003      	movs	r3, r0
 800a504:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a508:	f7fd fc3e 	bl	8007d88 <HAL_GetTick>
 800a50c:	0002      	movs	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b64      	cmp	r3, #100	; 0x64
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e28d      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a51a:	4b93      	ldr	r3, [pc, #588]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	2380      	movs	r3, #128	; 0x80
 800a520:	029b      	lsls	r3, r3, #10
 800a522:	4013      	ands	r3, r2
 800a524:	d0f0      	beq.n	800a508 <HAL_RCC_OscConfig+0xcc>
 800a526:	e015      	b.n	800a554 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a528:	f7fd fc2e 	bl	8007d88 <HAL_GetTick>
 800a52c:	0003      	movs	r3, r0
 800a52e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a530:	e008      	b.n	800a544 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a532:	f7fd fc29 	bl	8007d88 <HAL_GetTick>
 800a536:	0002      	movs	r2, r0
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	2b64      	cmp	r3, #100	; 0x64
 800a53e:	d901      	bls.n	800a544 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e278      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a544:	4b88      	ldr	r3, [pc, #544]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	2380      	movs	r3, #128	; 0x80
 800a54a:	029b      	lsls	r3, r3, #10
 800a54c:	4013      	ands	r3, r2
 800a54e:	d1f0      	bne.n	800a532 <HAL_RCC_OscConfig+0xf6>
 800a550:	e000      	b.n	800a554 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a552:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2202      	movs	r2, #2
 800a55a:	4013      	ands	r3, r2
 800a55c:	d100      	bne.n	800a560 <HAL_RCC_OscConfig+0x124>
 800a55e:	e099      	b.n	800a694 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a560:	4b81      	ldr	r3, [pc, #516]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	2238      	movs	r2, #56	; 0x38
 800a566:	4013      	ands	r3, r2
 800a568:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a56a:	4b7f      	ldr	r3, [pc, #508]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	2203      	movs	r2, #3
 800a570:	4013      	ands	r3, r2
 800a572:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	2b10      	cmp	r3, #16
 800a578:	d102      	bne.n	800a580 <HAL_RCC_OscConfig+0x144>
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d002      	beq.n	800a586 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d135      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a586:	4b78      	ldr	r3, [pc, #480]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	2380      	movs	r3, #128	; 0x80
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	4013      	ands	r3, r2
 800a590:	d005      	beq.n	800a59e <HAL_RCC_OscConfig+0x162>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e24b      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a59e:	4b72      	ldr	r3, [pc, #456]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	4a74      	ldr	r2, [pc, #464]	; (800a774 <HAL_RCC_OscConfig+0x338>)
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	0019      	movs	r1, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	021a      	lsls	r2, r3, #8
 800a5ae:	4b6e      	ldr	r3, [pc, #440]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d112      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a5ba:	4b6b      	ldr	r3, [pc, #428]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a6e      	ldr	r2, [pc, #440]	; (800a778 <HAL_RCC_OscConfig+0x33c>)
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	0019      	movs	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	4b67      	ldr	r3, [pc, #412]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a5ce:	4b66      	ldr	r3, [pc, #408]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	0adb      	lsrs	r3, r3, #11
 800a5d4:	2207      	movs	r2, #7
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	4a68      	ldr	r2, [pc, #416]	; (800a77c <HAL_RCC_OscConfig+0x340>)
 800a5da:	40da      	lsrs	r2, r3
 800a5dc:	4b68      	ldr	r3, [pc, #416]	; (800a780 <HAL_RCC_OscConfig+0x344>)
 800a5de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a5e0:	4b68      	ldr	r3, [pc, #416]	; (800a784 <HAL_RCC_OscConfig+0x348>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	f7fd f9b7 	bl	8007958 <HAL_InitTick>
 800a5ea:	1e03      	subs	r3, r0, #0
 800a5ec:	d051      	beq.n	800a692 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e221      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d030      	beq.n	800a65c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a5fa:	4b5b      	ldr	r3, [pc, #364]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a5e      	ldr	r2, [pc, #376]	; (800a778 <HAL_RCC_OscConfig+0x33c>)
 800a600:	4013      	ands	r3, r2
 800a602:	0019      	movs	r1, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691a      	ldr	r2, [r3, #16]
 800a608:	4b57      	ldr	r3, [pc, #348]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a60a:	430a      	orrs	r2, r1
 800a60c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a60e:	4b56      	ldr	r3, [pc, #344]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4b55      	ldr	r3, [pc, #340]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a614:	2180      	movs	r1, #128	; 0x80
 800a616:	0049      	lsls	r1, r1, #1
 800a618:	430a      	orrs	r2, r1
 800a61a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a61c:	f7fd fbb4 	bl	8007d88 <HAL_GetTick>
 800a620:	0003      	movs	r3, r0
 800a622:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a624:	e008      	b.n	800a638 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a626:	f7fd fbaf 	bl	8007d88 <HAL_GetTick>
 800a62a:	0002      	movs	r2, r0
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	2b02      	cmp	r3, #2
 800a632:	d901      	bls.n	800a638 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e1fe      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a638:	4b4b      	ldr	r3, [pc, #300]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	2380      	movs	r3, #128	; 0x80
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	4013      	ands	r3, r2
 800a642:	d0f0      	beq.n	800a626 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a644:	4b48      	ldr	r3, [pc, #288]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	4a4a      	ldr	r2, [pc, #296]	; (800a774 <HAL_RCC_OscConfig+0x338>)
 800a64a:	4013      	ands	r3, r2
 800a64c:	0019      	movs	r1, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	021a      	lsls	r2, r3, #8
 800a654:	4b44      	ldr	r3, [pc, #272]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a656:	430a      	orrs	r2, r1
 800a658:	605a      	str	r2, [r3, #4]
 800a65a:	e01b      	b.n	800a694 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a65c:	4b42      	ldr	r3, [pc, #264]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	4b41      	ldr	r3, [pc, #260]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a662:	4949      	ldr	r1, [pc, #292]	; (800a788 <HAL_RCC_OscConfig+0x34c>)
 800a664:	400a      	ands	r2, r1
 800a666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a668:	f7fd fb8e 	bl	8007d88 <HAL_GetTick>
 800a66c:	0003      	movs	r3, r0
 800a66e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a670:	e008      	b.n	800a684 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a672:	f7fd fb89 	bl	8007d88 <HAL_GetTick>
 800a676:	0002      	movs	r2, r0
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d901      	bls.n	800a684 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e1d8      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a684:	4b38      	ldr	r3, [pc, #224]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	2380      	movs	r3, #128	; 0x80
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	4013      	ands	r3, r2
 800a68e:	d1f0      	bne.n	800a672 <HAL_RCC_OscConfig+0x236>
 800a690:	e000      	b.n	800a694 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a692:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2208      	movs	r2, #8
 800a69a:	4013      	ands	r3, r2
 800a69c:	d047      	beq.n	800a72e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a69e:	4b32      	ldr	r3, [pc, #200]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	2238      	movs	r2, #56	; 0x38
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b18      	cmp	r3, #24
 800a6a8:	d10a      	bne.n	800a6c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a6aa:	4b2f      	ldr	r3, [pc, #188]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a6ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	d03c      	beq.n	800a72e <HAL_RCC_OscConfig+0x2f2>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d138      	bne.n	800a72e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e1ba      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d019      	beq.n	800a6fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a6c8:	4b27      	ldr	r3, [pc, #156]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a6ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a6cc:	4b26      	ldr	r3, [pc, #152]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d4:	f7fd fb58 	bl	8007d88 <HAL_GetTick>
 800a6d8:	0003      	movs	r3, r0
 800a6da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a6dc:	e008      	b.n	800a6f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6de:	f7fd fb53 	bl	8007d88 <HAL_GetTick>
 800a6e2:	0002      	movs	r2, r0
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d901      	bls.n	800a6f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e1a2      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a6f0:	4b1d      	ldr	r3, [pc, #116]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a6f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	d0f1      	beq.n	800a6de <HAL_RCC_OscConfig+0x2a2>
 800a6fa:	e018      	b.n	800a72e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a6fc:	4b1a      	ldr	r3, [pc, #104]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a6fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a700:	4b19      	ldr	r3, [pc, #100]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a702:	2101      	movs	r1, #1
 800a704:	438a      	bics	r2, r1
 800a706:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a708:	f7fd fb3e 	bl	8007d88 <HAL_GetTick>
 800a70c:	0003      	movs	r3, r0
 800a70e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a710:	e008      	b.n	800a724 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a712:	f7fd fb39 	bl	8007d88 <HAL_GetTick>
 800a716:	0002      	movs	r2, r0
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d901      	bls.n	800a724 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e188      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a724:	4b10      	ldr	r3, [pc, #64]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a728:	2202      	movs	r2, #2
 800a72a:	4013      	ands	r3, r2
 800a72c:	d1f1      	bne.n	800a712 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2204      	movs	r2, #4
 800a734:	4013      	ands	r3, r2
 800a736:	d100      	bne.n	800a73a <HAL_RCC_OscConfig+0x2fe>
 800a738:	e0c6      	b.n	800a8c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a73a:	231f      	movs	r3, #31
 800a73c:	18fb      	adds	r3, r7, r3
 800a73e:	2200      	movs	r2, #0
 800a740:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	2238      	movs	r2, #56	; 0x38
 800a748:	4013      	ands	r3, r2
 800a74a:	2b20      	cmp	r3, #32
 800a74c:	d11e      	bne.n	800a78c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a74e:	4b06      	ldr	r3, [pc, #24]	; (800a768 <HAL_RCC_OscConfig+0x32c>)
 800a750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a752:	2202      	movs	r2, #2
 800a754:	4013      	ands	r3, r2
 800a756:	d100      	bne.n	800a75a <HAL_RCC_OscConfig+0x31e>
 800a758:	e0b6      	b.n	800a8c8 <HAL_RCC_OscConfig+0x48c>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d000      	beq.n	800a764 <HAL_RCC_OscConfig+0x328>
 800a762:	e0b1      	b.n	800a8c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e166      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
 800a768:	40021000 	.word	0x40021000
 800a76c:	fffeffff 	.word	0xfffeffff
 800a770:	fffbffff 	.word	0xfffbffff
 800a774:	ffff80ff 	.word	0xffff80ff
 800a778:	ffffc7ff 	.word	0xffffc7ff
 800a77c:	00f42400 	.word	0x00f42400
 800a780:	200000e0 	.word	0x200000e0
 800a784:	200000e4 	.word	0x200000e4
 800a788:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a78c:	4bac      	ldr	r3, [pc, #688]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a78e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	055b      	lsls	r3, r3, #21
 800a794:	4013      	ands	r3, r2
 800a796:	d101      	bne.n	800a79c <HAL_RCC_OscConfig+0x360>
 800a798:	2301      	movs	r3, #1
 800a79a:	e000      	b.n	800a79e <HAL_RCC_OscConfig+0x362>
 800a79c:	2300      	movs	r3, #0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d011      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a7a2:	4ba7      	ldr	r3, [pc, #668]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a7a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7a6:	4ba6      	ldr	r3, [pc, #664]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a7a8:	2180      	movs	r1, #128	; 0x80
 800a7aa:	0549      	lsls	r1, r1, #21
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	63da      	str	r2, [r3, #60]	; 0x3c
 800a7b0:	4ba3      	ldr	r3, [pc, #652]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a7b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7b4:	2380      	movs	r3, #128	; 0x80
 800a7b6:	055b      	lsls	r3, r3, #21
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a7be:	231f      	movs	r3, #31
 800a7c0:	18fb      	adds	r3, r7, r3
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7c6:	4b9f      	ldr	r3, [pc, #636]	; (800aa44 <HAL_RCC_OscConfig+0x608>)
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	2380      	movs	r3, #128	; 0x80
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	d11a      	bne.n	800a808 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7d2:	4b9c      	ldr	r3, [pc, #624]	; (800aa44 <HAL_RCC_OscConfig+0x608>)
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	4b9b      	ldr	r3, [pc, #620]	; (800aa44 <HAL_RCC_OscConfig+0x608>)
 800a7d8:	2180      	movs	r1, #128	; 0x80
 800a7da:	0049      	lsls	r1, r1, #1
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a7e0:	f7fd fad2 	bl	8007d88 <HAL_GetTick>
 800a7e4:	0003      	movs	r3, r0
 800a7e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7e8:	e008      	b.n	800a7fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7ea:	f7fd facd 	bl	8007d88 <HAL_GetTick>
 800a7ee:	0002      	movs	r2, r0
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d901      	bls.n	800a7fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e11c      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7fc:	4b91      	ldr	r3, [pc, #580]	; (800aa44 <HAL_RCC_OscConfig+0x608>)
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	2380      	movs	r3, #128	; 0x80
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	4013      	ands	r3, r2
 800a806:	d0f0      	beq.n	800a7ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d106      	bne.n	800a81e <HAL_RCC_OscConfig+0x3e2>
 800a810:	4b8b      	ldr	r3, [pc, #556]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a812:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a814:	4b8a      	ldr	r3, [pc, #552]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a816:	2101      	movs	r1, #1
 800a818:	430a      	orrs	r2, r1
 800a81a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a81c:	e01c      	b.n	800a858 <HAL_RCC_OscConfig+0x41c>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2b05      	cmp	r3, #5
 800a824:	d10c      	bne.n	800a840 <HAL_RCC_OscConfig+0x404>
 800a826:	4b86      	ldr	r3, [pc, #536]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a82a:	4b85      	ldr	r3, [pc, #532]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a82c:	2104      	movs	r1, #4
 800a82e:	430a      	orrs	r2, r1
 800a830:	65da      	str	r2, [r3, #92]	; 0x5c
 800a832:	4b83      	ldr	r3, [pc, #524]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a834:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a836:	4b82      	ldr	r3, [pc, #520]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a838:	2101      	movs	r1, #1
 800a83a:	430a      	orrs	r2, r1
 800a83c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a83e:	e00b      	b.n	800a858 <HAL_RCC_OscConfig+0x41c>
 800a840:	4b7f      	ldr	r3, [pc, #508]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a844:	4b7e      	ldr	r3, [pc, #504]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a846:	2101      	movs	r1, #1
 800a848:	438a      	bics	r2, r1
 800a84a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a84c:	4b7c      	ldr	r3, [pc, #496]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a84e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a850:	4b7b      	ldr	r3, [pc, #492]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a852:	2104      	movs	r1, #4
 800a854:	438a      	bics	r2, r1
 800a856:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d014      	beq.n	800a88a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a860:	f7fd fa92 	bl	8007d88 <HAL_GetTick>
 800a864:	0003      	movs	r3, r0
 800a866:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a868:	e009      	b.n	800a87e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a86a:	f7fd fa8d 	bl	8007d88 <HAL_GetTick>
 800a86e:	0002      	movs	r2, r0
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	4a74      	ldr	r2, [pc, #464]	; (800aa48 <HAL_RCC_OscConfig+0x60c>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e0db      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a87e:	4b70      	ldr	r3, [pc, #448]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a882:	2202      	movs	r2, #2
 800a884:	4013      	ands	r3, r2
 800a886:	d0f0      	beq.n	800a86a <HAL_RCC_OscConfig+0x42e>
 800a888:	e013      	b.n	800a8b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a88a:	f7fd fa7d 	bl	8007d88 <HAL_GetTick>
 800a88e:	0003      	movs	r3, r0
 800a890:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a892:	e009      	b.n	800a8a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a894:	f7fd fa78 	bl	8007d88 <HAL_GetTick>
 800a898:	0002      	movs	r2, r0
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	4a6a      	ldr	r2, [pc, #424]	; (800aa48 <HAL_RCC_OscConfig+0x60c>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e0c6      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8a8:	4b65      	ldr	r3, [pc, #404]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a8aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	d1f0      	bne.n	800a894 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a8b2:	231f      	movs	r3, #31
 800a8b4:	18fb      	adds	r3, r7, r3
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d105      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a8bc:	4b60      	ldr	r3, [pc, #384]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a8be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8c0:	4b5f      	ldr	r3, [pc, #380]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a8c2:	4962      	ldr	r1, [pc, #392]	; (800aa4c <HAL_RCC_OscConfig+0x610>)
 800a8c4:	400a      	ands	r2, r1
 800a8c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d100      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x496>
 800a8d0:	e0b0      	b.n	800aa34 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8d2:	4b5b      	ldr	r3, [pc, #364]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	2238      	movs	r2, #56	; 0x38
 800a8d8:	4013      	ands	r3, r2
 800a8da:	2b10      	cmp	r3, #16
 800a8dc:	d100      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x4a4>
 800a8de:	e078      	b.n	800a9d2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d153      	bne.n	800a990 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8e8:	4b55      	ldr	r3, [pc, #340]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	4b54      	ldr	r3, [pc, #336]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a8ee:	4958      	ldr	r1, [pc, #352]	; (800aa50 <HAL_RCC_OscConfig+0x614>)
 800a8f0:	400a      	ands	r2, r1
 800a8f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f4:	f7fd fa48 	bl	8007d88 <HAL_GetTick>
 800a8f8:	0003      	movs	r3, r0
 800a8fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8fc:	e008      	b.n	800a910 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8fe:	f7fd fa43 	bl	8007d88 <HAL_GetTick>
 800a902:	0002      	movs	r2, r0
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d901      	bls.n	800a910 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e092      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a910:	4b4b      	ldr	r3, [pc, #300]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	2380      	movs	r3, #128	; 0x80
 800a916:	049b      	lsls	r3, r3, #18
 800a918:	4013      	ands	r3, r2
 800a91a:	d1f0      	bne.n	800a8fe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a91c:	4b48      	ldr	r3, [pc, #288]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	4a4c      	ldr	r2, [pc, #304]	; (800aa54 <HAL_RCC_OscConfig+0x618>)
 800a922:	4013      	ands	r3, r2
 800a924:	0019      	movs	r1, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1a      	ldr	r2, [r3, #32]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	431a      	orrs	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a934:	021b      	lsls	r3, r3, #8
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	431a      	orrs	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a942:	431a      	orrs	r2, r3
 800a944:	4b3e      	ldr	r3, [pc, #248]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a946:	430a      	orrs	r2, r1
 800a948:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a94a:	4b3d      	ldr	r3, [pc, #244]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	4b3c      	ldr	r3, [pc, #240]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a950:	2180      	movs	r1, #128	; 0x80
 800a952:	0449      	lsls	r1, r1, #17
 800a954:	430a      	orrs	r2, r1
 800a956:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a958:	4b39      	ldr	r3, [pc, #228]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	4b38      	ldr	r3, [pc, #224]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a95e:	2180      	movs	r1, #128	; 0x80
 800a960:	0549      	lsls	r1, r1, #21
 800a962:	430a      	orrs	r2, r1
 800a964:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a966:	f7fd fa0f 	bl	8007d88 <HAL_GetTick>
 800a96a:	0003      	movs	r3, r0
 800a96c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a96e:	e008      	b.n	800a982 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a970:	f7fd fa0a 	bl	8007d88 <HAL_GetTick>
 800a974:	0002      	movs	r2, r0
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d901      	bls.n	800a982 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e059      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	2380      	movs	r3, #128	; 0x80
 800a988:	049b      	lsls	r3, r3, #18
 800a98a:	4013      	ands	r3, r2
 800a98c:	d0f0      	beq.n	800a970 <HAL_RCC_OscConfig+0x534>
 800a98e:	e051      	b.n	800aa34 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a990:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	4b2a      	ldr	r3, [pc, #168]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a996:	492e      	ldr	r1, [pc, #184]	; (800aa50 <HAL_RCC_OscConfig+0x614>)
 800a998:	400a      	ands	r2, r1
 800a99a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a99c:	f7fd f9f4 	bl	8007d88 <HAL_GetTick>
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9a4:	e008      	b.n	800a9b8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9a6:	f7fd f9ef 	bl	8007d88 <HAL_GetTick>
 800a9aa:	0002      	movs	r2, r0
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d901      	bls.n	800a9b8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e03e      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9b8:	4b21      	ldr	r3, [pc, #132]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	2380      	movs	r3, #128	; 0x80
 800a9be:	049b      	lsls	r3, r3, #18
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	d1f0      	bne.n	800a9a6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a9c4:	4b1e      	ldr	r3, [pc, #120]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	4b1d      	ldr	r3, [pc, #116]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a9ca:	4923      	ldr	r1, [pc, #140]	; (800aa58 <HAL_RCC_OscConfig+0x61c>)
 800a9cc:	400a      	ands	r2, r1
 800a9ce:	60da      	str	r2, [r3, #12]
 800a9d0:	e030      	b.n	800aa34 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d101      	bne.n	800a9de <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e02b      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a9de:	4b18      	ldr	r3, [pc, #96]	; (800aa40 <HAL_RCC_OscConfig+0x604>)
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2203      	movs	r2, #3
 800a9e8:	401a      	ands	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d11e      	bne.n	800aa30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2270      	movs	r2, #112	; 0x70
 800a9f6:	401a      	ands	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d117      	bne.n	800aa30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	23fe      	movs	r3, #254	; 0xfe
 800aa04:	01db      	lsls	r3, r3, #7
 800aa06:	401a      	ands	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d10e      	bne.n	800aa30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	23f8      	movs	r3, #248	; 0xf8
 800aa16:	039b      	lsls	r3, r3, #14
 800aa18:	401a      	ands	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d106      	bne.n	800aa30 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	0f5b      	lsrs	r3, r3, #29
 800aa26:	075a      	lsls	r2, r3, #29
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d001      	beq.n	800aa34 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e000      	b.n	800aa36 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	0018      	movs	r0, r3
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	b008      	add	sp, #32
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	46c0      	nop			; (mov r8, r8)
 800aa40:	40021000 	.word	0x40021000
 800aa44:	40007000 	.word	0x40007000
 800aa48:	00001388 	.word	0x00001388
 800aa4c:	efffffff 	.word	0xefffffff
 800aa50:	feffffff 	.word	0xfeffffff
 800aa54:	1fc1808c 	.word	0x1fc1808c
 800aa58:	effefffc 	.word	0xeffefffc

0800aa5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e0e9      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa70:	4b76      	ldr	r3, [pc, #472]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2207      	movs	r2, #7
 800aa76:	4013      	ands	r3, r2
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d91e      	bls.n	800aabc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa7e:	4b73      	ldr	r3, [pc, #460]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2207      	movs	r2, #7
 800aa84:	4393      	bics	r3, r2
 800aa86:	0019      	movs	r1, r3
 800aa88:	4b70      	ldr	r3, [pc, #448]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aa90:	f7fd f97a 	bl	8007d88 <HAL_GetTick>
 800aa94:	0003      	movs	r3, r0
 800aa96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aa98:	e009      	b.n	800aaae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa9a:	f7fd f975 	bl	8007d88 <HAL_GetTick>
 800aa9e:	0002      	movs	r2, r0
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	4a6a      	ldr	r2, [pc, #424]	; (800ac50 <HAL_RCC_ClockConfig+0x1f4>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d901      	bls.n	800aaae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e0ca      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aaae:	4b67      	ldr	r3, [pc, #412]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2207      	movs	r2, #7
 800aab4:	4013      	ands	r3, r2
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d1ee      	bne.n	800aa9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2202      	movs	r2, #2
 800aac2:	4013      	ands	r3, r2
 800aac4:	d015      	beq.n	800aaf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2204      	movs	r2, #4
 800aacc:	4013      	ands	r3, r2
 800aace:	d006      	beq.n	800aade <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800aad0:	4b60      	ldr	r3, [pc, #384]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	4b5f      	ldr	r3, [pc, #380]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800aad6:	21e0      	movs	r1, #224	; 0xe0
 800aad8:	01c9      	lsls	r1, r1, #7
 800aada:	430a      	orrs	r2, r1
 800aadc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aade:	4b5d      	ldr	r3, [pc, #372]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	4a5d      	ldr	r2, [pc, #372]	; (800ac58 <HAL_RCC_ClockConfig+0x1fc>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	0019      	movs	r1, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689a      	ldr	r2, [r3, #8]
 800aaec:	4b59      	ldr	r3, [pc, #356]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	4013      	ands	r3, r2
 800aafa:	d057      	beq.n	800abac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d107      	bne.n	800ab14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab04:	4b53      	ldr	r3, [pc, #332]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	2380      	movs	r3, #128	; 0x80
 800ab0a:	029b      	lsls	r3, r3, #10
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	d12b      	bne.n	800ab68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	e097      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d107      	bne.n	800ab2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab1c:	4b4d      	ldr	r3, [pc, #308]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	2380      	movs	r3, #128	; 0x80
 800ab22:	049b      	lsls	r3, r3, #18
 800ab24:	4013      	ands	r3, r2
 800ab26:	d11f      	bne.n	800ab68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e08b      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d107      	bne.n	800ab44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab34:	4b47      	ldr	r3, [pc, #284]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	2380      	movs	r3, #128	; 0x80
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	d113      	bne.n	800ab68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e07f      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d106      	bne.n	800ab5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab4c:	4b41      	ldr	r3, [pc, #260]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab50:	2202      	movs	r2, #2
 800ab52:	4013      	ands	r3, r2
 800ab54:	d108      	bne.n	800ab68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e074      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab5a:	4b3e      	ldr	r3, [pc, #248]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5e:	2202      	movs	r2, #2
 800ab60:	4013      	ands	r3, r2
 800ab62:	d101      	bne.n	800ab68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e06d      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab68:	4b3a      	ldr	r3, [pc, #232]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2207      	movs	r2, #7
 800ab6e:	4393      	bics	r3, r2
 800ab70:	0019      	movs	r1, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4b37      	ldr	r3, [pc, #220]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab7c:	f7fd f904 	bl	8007d88 <HAL_GetTick>
 800ab80:	0003      	movs	r3, r0
 800ab82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab84:	e009      	b.n	800ab9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab86:	f7fd f8ff 	bl	8007d88 <HAL_GetTick>
 800ab8a:	0002      	movs	r2, r0
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	4a2f      	ldr	r2, [pc, #188]	; (800ac50 <HAL_RCC_ClockConfig+0x1f4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d901      	bls.n	800ab9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e054      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab9a:	4b2e      	ldr	r3, [pc, #184]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	2238      	movs	r2, #56	; 0x38
 800aba0:	401a      	ands	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d1ec      	bne.n	800ab86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abac:	4b27      	ldr	r3, [pc, #156]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2207      	movs	r2, #7
 800abb2:	4013      	ands	r3, r2
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d21e      	bcs.n	800abf8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abba:	4b24      	ldr	r3, [pc, #144]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2207      	movs	r2, #7
 800abc0:	4393      	bics	r3, r2
 800abc2:	0019      	movs	r1, r3
 800abc4:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800abcc:	f7fd f8dc 	bl	8007d88 <HAL_GetTick>
 800abd0:	0003      	movs	r3, r0
 800abd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800abd4:	e009      	b.n	800abea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abd6:	f7fd f8d7 	bl	8007d88 <HAL_GetTick>
 800abda:	0002      	movs	r2, r0
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	4a1b      	ldr	r2, [pc, #108]	; (800ac50 <HAL_RCC_ClockConfig+0x1f4>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d901      	bls.n	800abea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e02c      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800abea:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <HAL_RCC_ClockConfig+0x1f0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2207      	movs	r2, #7
 800abf0:	4013      	ands	r3, r2
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d1ee      	bne.n	800abd6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2204      	movs	r2, #4
 800abfe:	4013      	ands	r3, r2
 800ac00:	d009      	beq.n	800ac16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ac02:	4b14      	ldr	r3, [pc, #80]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	4a15      	ldr	r2, [pc, #84]	; (800ac5c <HAL_RCC_ClockConfig+0x200>)
 800ac08:	4013      	ands	r3, r2
 800ac0a:	0019      	movs	r1, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	4b10      	ldr	r3, [pc, #64]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ac12:	430a      	orrs	r2, r1
 800ac14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ac16:	f000 f829 	bl	800ac6c <HAL_RCC_GetSysClockFreq>
 800ac1a:	0001      	movs	r1, r0
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <HAL_RCC_ClockConfig+0x1f8>)
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	0a1b      	lsrs	r3, r3, #8
 800ac22:	220f      	movs	r2, #15
 800ac24:	401a      	ands	r2, r3
 800ac26:	4b0e      	ldr	r3, [pc, #56]	; (800ac60 <HAL_RCC_ClockConfig+0x204>)
 800ac28:	0092      	lsls	r2, r2, #2
 800ac2a:	58d3      	ldr	r3, [r2, r3]
 800ac2c:	221f      	movs	r2, #31
 800ac2e:	4013      	ands	r3, r2
 800ac30:	000a      	movs	r2, r1
 800ac32:	40da      	lsrs	r2, r3
 800ac34:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <HAL_RCC_ClockConfig+0x208>)
 800ac36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ac38:	4b0b      	ldr	r3, [pc, #44]	; (800ac68 <HAL_RCC_ClockConfig+0x20c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	f7fc fe8b 	bl	8007958 <HAL_InitTick>
 800ac42:	0003      	movs	r3, r0
}
 800ac44:	0018      	movs	r0, r3
 800ac46:	46bd      	mov	sp, r7
 800ac48:	b004      	add	sp, #16
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	40022000 	.word	0x40022000
 800ac50:	00001388 	.word	0x00001388
 800ac54:	40021000 	.word	0x40021000
 800ac58:	fffff0ff 	.word	0xfffff0ff
 800ac5c:	ffff8fff 	.word	0xffff8fff
 800ac60:	08017300 	.word	0x08017300
 800ac64:	200000e0 	.word	0x200000e0
 800ac68:	200000e4 	.word	0x200000e4

0800ac6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac72:	4b3c      	ldr	r3, [pc, #240]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	2238      	movs	r2, #56	; 0x38
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d10f      	bne.n	800ac9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800ac7c:	4b39      	ldr	r3, [pc, #228]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	0adb      	lsrs	r3, r3, #11
 800ac82:	2207      	movs	r2, #7
 800ac84:	4013      	ands	r3, r2
 800ac86:	2201      	movs	r2, #1
 800ac88:	409a      	lsls	r2, r3
 800ac8a:	0013      	movs	r3, r2
 800ac8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	4835      	ldr	r0, [pc, #212]	; (800ad68 <HAL_RCC_GetSysClockFreq+0xfc>)
 800ac92:	f7f5 fa55 	bl	8000140 <__udivsi3>
 800ac96:	0003      	movs	r3, r0
 800ac98:	613b      	str	r3, [r7, #16]
 800ac9a:	e05d      	b.n	800ad58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac9c:	4b31      	ldr	r3, [pc, #196]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	2238      	movs	r2, #56	; 0x38
 800aca2:	4013      	ands	r3, r2
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d102      	bne.n	800acae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aca8:	4b30      	ldr	r3, [pc, #192]	; (800ad6c <HAL_RCC_GetSysClockFreq+0x100>)
 800acaa:	613b      	str	r3, [r7, #16]
 800acac:	e054      	b.n	800ad58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acae:	4b2d      	ldr	r3, [pc, #180]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	2238      	movs	r2, #56	; 0x38
 800acb4:	4013      	ands	r3, r2
 800acb6:	2b10      	cmp	r3, #16
 800acb8:	d138      	bne.n	800ad2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800acba:	4b2a      	ldr	r3, [pc, #168]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	2203      	movs	r2, #3
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800acc4:	4b27      	ldr	r3, [pc, #156]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	091b      	lsrs	r3, r3, #4
 800acca:	2207      	movs	r2, #7
 800accc:	4013      	ands	r3, r2
 800acce:	3301      	adds	r3, #1
 800acd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d10d      	bne.n	800acf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	4824      	ldr	r0, [pc, #144]	; (800ad6c <HAL_RCC_GetSysClockFreq+0x100>)
 800acdc:	f7f5 fa30 	bl	8000140 <__udivsi3>
 800ace0:	0003      	movs	r3, r0
 800ace2:	0019      	movs	r1, r3
 800ace4:	4b1f      	ldr	r3, [pc, #124]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	0a1b      	lsrs	r3, r3, #8
 800acea:	227f      	movs	r2, #127	; 0x7f
 800acec:	4013      	ands	r3, r2
 800acee:	434b      	muls	r3, r1
 800acf0:	617b      	str	r3, [r7, #20]
        break;
 800acf2:	e00d      	b.n	800ad10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	481c      	ldr	r0, [pc, #112]	; (800ad68 <HAL_RCC_GetSysClockFreq+0xfc>)
 800acf8:	f7f5 fa22 	bl	8000140 <__udivsi3>
 800acfc:	0003      	movs	r3, r0
 800acfe:	0019      	movs	r1, r3
 800ad00:	4b18      	ldr	r3, [pc, #96]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	0a1b      	lsrs	r3, r3, #8
 800ad06:	227f      	movs	r2, #127	; 0x7f
 800ad08:	4013      	ands	r3, r2
 800ad0a:	434b      	muls	r3, r1
 800ad0c:	617b      	str	r3, [r7, #20]
        break;
 800ad0e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800ad10:	4b14      	ldr	r3, [pc, #80]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	0f5b      	lsrs	r3, r3, #29
 800ad16:	2207      	movs	r2, #7
 800ad18:	4013      	ands	r3, r2
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	6978      	ldr	r0, [r7, #20]
 800ad22:	f7f5 fa0d 	bl	8000140 <__udivsi3>
 800ad26:	0003      	movs	r3, r0
 800ad28:	613b      	str	r3, [r7, #16]
 800ad2a:	e015      	b.n	800ad58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800ad2c:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	2238      	movs	r2, #56	; 0x38
 800ad32:	4013      	ands	r3, r2
 800ad34:	2b20      	cmp	r3, #32
 800ad36:	d103      	bne.n	800ad40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800ad38:	2380      	movs	r3, #128	; 0x80
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	613b      	str	r3, [r7, #16]
 800ad3e:	e00b      	b.n	800ad58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800ad40:	4b08      	ldr	r3, [pc, #32]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	2238      	movs	r2, #56	; 0x38
 800ad46:	4013      	ands	r3, r2
 800ad48:	2b18      	cmp	r3, #24
 800ad4a:	d103      	bne.n	800ad54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800ad4c:	23fa      	movs	r3, #250	; 0xfa
 800ad4e:	01db      	lsls	r3, r3, #7
 800ad50:	613b      	str	r3, [r7, #16]
 800ad52:	e001      	b.n	800ad58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ad58:	693b      	ldr	r3, [r7, #16]
}
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	b006      	add	sp, #24
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	40021000 	.word	0x40021000
 800ad68:	00f42400 	.word	0x00f42400
 800ad6c:	007a1200 	.word	0x007a1200

0800ad70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad74:	4b02      	ldr	r3, [pc, #8]	; (800ad80 <HAL_RCC_GetHCLKFreq+0x10>)
 800ad76:	681b      	ldr	r3, [r3, #0]
}
 800ad78:	0018      	movs	r0, r3
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	46c0      	nop			; (mov r8, r8)
 800ad80:	200000e0 	.word	0x200000e0

0800ad84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad84:	b5b0      	push	{r4, r5, r7, lr}
 800ad86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ad88:	f7ff fff2 	bl	800ad70 <HAL_RCC_GetHCLKFreq>
 800ad8c:	0004      	movs	r4, r0
 800ad8e:	f7ff fb49 	bl	800a424 <LL_RCC_GetAPB1Prescaler>
 800ad92:	0003      	movs	r3, r0
 800ad94:	0b1a      	lsrs	r2, r3, #12
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad98:	0092      	lsls	r2, r2, #2
 800ad9a:	58d3      	ldr	r3, [r2, r3]
 800ad9c:	221f      	movs	r2, #31
 800ad9e:	4013      	ands	r3, r2
 800ada0:	40dc      	lsrs	r4, r3
 800ada2:	0023      	movs	r3, r4
}
 800ada4:	0018      	movs	r0, r3
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bdb0      	pop	{r4, r5, r7, pc}
 800adaa:	46c0      	nop			; (mov r8, r8)
 800adac:	08017340 	.word	0x08017340

0800adb0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2207      	movs	r2, #7
 800adbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800adc0:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <HAL_RCC_GetClockConfig+0x4c>)
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	2207      	movs	r2, #7
 800adc6:	401a      	ands	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800adcc:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <HAL_RCC_GetClockConfig+0x4c>)
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	23f0      	movs	r3, #240	; 0xf0
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	401a      	ands	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800adda:	4b08      	ldr	r3, [pc, #32]	; (800adfc <HAL_RCC_GetClockConfig+0x4c>)
 800addc:	689a      	ldr	r2, [r3, #8]
 800adde:	23e0      	movs	r3, #224	; 0xe0
 800ade0:	01db      	lsls	r3, r3, #7
 800ade2:	401a      	ands	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ade8:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <HAL_RCC_GetClockConfig+0x50>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2207      	movs	r2, #7
 800adee:	401a      	ands	r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	601a      	str	r2, [r3, #0]
}
 800adf4:	46c0      	nop			; (mov r8, r8)
 800adf6:	46bd      	mov	sp, r7
 800adf8:	b002      	add	sp, #8
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	40021000 	.word	0x40021000
 800ae00:	40022000 	.word	0x40022000

0800ae04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800ae0c:	2313      	movs	r3, #19
 800ae0e:	18fb      	adds	r3, r7, r3
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae14:	2312      	movs	r3, #18
 800ae16:	18fb      	adds	r3, r7, r3
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	2380      	movs	r3, #128	; 0x80
 800ae22:	029b      	lsls	r3, r3, #10
 800ae24:	4013      	ands	r3, r2
 800ae26:	d100      	bne.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ae28:	e0a3      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae2a:	2011      	movs	r0, #17
 800ae2c:	183b      	adds	r3, r7, r0
 800ae2e:	2200      	movs	r2, #0
 800ae30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae32:	4b86      	ldr	r3, [pc, #536]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae36:	2380      	movs	r3, #128	; 0x80
 800ae38:	055b      	lsls	r3, r3, #21
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	d110      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae3e:	4b83      	ldr	r3, [pc, #524]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae42:	4b82      	ldr	r3, [pc, #520]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae44:	2180      	movs	r1, #128	; 0x80
 800ae46:	0549      	lsls	r1, r1, #21
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	63da      	str	r2, [r3, #60]	; 0x3c
 800ae4c:	4b7f      	ldr	r3, [pc, #508]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae50:	2380      	movs	r3, #128	; 0x80
 800ae52:	055b      	lsls	r3, r3, #21
 800ae54:	4013      	ands	r3, r2
 800ae56:	60bb      	str	r3, [r7, #8]
 800ae58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae5a:	183b      	adds	r3, r7, r0
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae60:	4b7b      	ldr	r3, [pc, #492]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	4b7a      	ldr	r3, [pc, #488]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ae66:	2180      	movs	r1, #128	; 0x80
 800ae68:	0049      	lsls	r1, r1, #1
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae6e:	f7fc ff8b 	bl	8007d88 <HAL_GetTick>
 800ae72:	0003      	movs	r3, r0
 800ae74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae76:	e00b      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae78:	f7fc ff86 	bl	8007d88 <HAL_GetTick>
 800ae7c:	0002      	movs	r2, r0
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d904      	bls.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800ae86:	2313      	movs	r3, #19
 800ae88:	18fb      	adds	r3, r7, r3
 800ae8a:	2203      	movs	r2, #3
 800ae8c:	701a      	strb	r2, [r3, #0]
        break;
 800ae8e:	e005      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae90:	4b6f      	ldr	r3, [pc, #444]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	2380      	movs	r3, #128	; 0x80
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	4013      	ands	r3, r2
 800ae9a:	d0ed      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800ae9c:	2313      	movs	r3, #19
 800ae9e:	18fb      	adds	r3, r7, r3
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d154      	bne.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aea6:	4b69      	ldr	r3, [pc, #420]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aeaa:	23c0      	movs	r3, #192	; 0xc0
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4013      	ands	r3, r2
 800aeb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d019      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d014      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aec2:	4b62      	ldr	r3, [pc, #392]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aec6:	4a63      	ldr	r2, [pc, #396]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800aec8:	4013      	ands	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aecc:	4b5f      	ldr	r3, [pc, #380]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aed0:	4b5e      	ldr	r3, [pc, #376]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aed2:	2180      	movs	r1, #128	; 0x80
 800aed4:	0249      	lsls	r1, r1, #9
 800aed6:	430a      	orrs	r2, r1
 800aed8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aeda:	4b5c      	ldr	r3, [pc, #368]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aedc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aede:	4b5b      	ldr	r3, [pc, #364]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aee0:	495d      	ldr	r1, [pc, #372]	; (800b058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800aee2:	400a      	ands	r2, r1
 800aee4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aee6:	4b59      	ldr	r3, [pc, #356]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2201      	movs	r2, #1
 800aef0:	4013      	ands	r3, r2
 800aef2:	d016      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aef4:	f7fc ff48 	bl	8007d88 <HAL_GetTick>
 800aef8:	0003      	movs	r3, r0
 800aefa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aefc:	e00c      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aefe:	f7fc ff43 	bl	8007d88 <HAL_GetTick>
 800af02:	0002      	movs	r2, r0
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	4a54      	ldr	r2, [pc, #336]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d904      	bls.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800af0e:	2313      	movs	r3, #19
 800af10:	18fb      	adds	r3, r7, r3
 800af12:	2203      	movs	r2, #3
 800af14:	701a      	strb	r2, [r3, #0]
            break;
 800af16:	e004      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af18:	4b4c      	ldr	r3, [pc, #304]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af1c:	2202      	movs	r2, #2
 800af1e:	4013      	ands	r3, r2
 800af20:	d0ed      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800af22:	2313      	movs	r3, #19
 800af24:	18fb      	adds	r3, r7, r3
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10a      	bne.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af2c:	4b47      	ldr	r3, [pc, #284]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af30:	4a48      	ldr	r2, [pc, #288]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800af32:	4013      	ands	r3, r2
 800af34:	0019      	movs	r1, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	699a      	ldr	r2, [r3, #24]
 800af3a:	4b44      	ldr	r3, [pc, #272]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af3c:	430a      	orrs	r2, r1
 800af3e:	65da      	str	r2, [r3, #92]	; 0x5c
 800af40:	e00c      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af42:	2312      	movs	r3, #18
 800af44:	18fb      	adds	r3, r7, r3
 800af46:	2213      	movs	r2, #19
 800af48:	18ba      	adds	r2, r7, r2
 800af4a:	7812      	ldrb	r2, [r2, #0]
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e005      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af50:	2312      	movs	r3, #18
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	2213      	movs	r2, #19
 800af56:	18ba      	adds	r2, r7, r2
 800af58:	7812      	ldrb	r2, [r2, #0]
 800af5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800af5c:	2311      	movs	r3, #17
 800af5e:	18fb      	adds	r3, r7, r3
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d105      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af66:	4b39      	ldr	r3, [pc, #228]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af6a:	4b38      	ldr	r3, [pc, #224]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af6c:	493c      	ldr	r1, [pc, #240]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800af6e:	400a      	ands	r2, r1
 800af70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2201      	movs	r2, #1
 800af78:	4013      	ands	r3, r2
 800af7a:	d009      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af7c:	4b33      	ldr	r3, [pc, #204]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af80:	2203      	movs	r2, #3
 800af82:	4393      	bics	r3, r2
 800af84:	0019      	movs	r1, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	4b30      	ldr	r3, [pc, #192]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af8c:	430a      	orrs	r2, r1
 800af8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2202      	movs	r2, #2
 800af96:	4013      	ands	r3, r2
 800af98:	d009      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af9a:	4b2c      	ldr	r3, [pc, #176]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9e:	220c      	movs	r2, #12
 800afa0:	4393      	bics	r3, r2
 800afa2:	0019      	movs	r1, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	4b28      	ldr	r3, [pc, #160]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afaa:	430a      	orrs	r2, r1
 800afac:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2220      	movs	r2, #32
 800afb4:	4013      	ands	r3, r2
 800afb6:	d009      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800afb8:	4b24      	ldr	r3, [pc, #144]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afbc:	4a29      	ldr	r2, [pc, #164]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afbe:	4013      	ands	r3, r2
 800afc0:	0019      	movs	r1, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68da      	ldr	r2, [r3, #12]
 800afc6:	4b21      	ldr	r3, [pc, #132]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afc8:	430a      	orrs	r2, r1
 800afca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	2380      	movs	r3, #128	; 0x80
 800afd2:	01db      	lsls	r3, r3, #7
 800afd4:	4013      	ands	r3, r2
 800afd6:	d015      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800afd8:	4b1c      	ldr	r3, [pc, #112]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	0899      	lsrs	r1, r3, #2
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	695a      	ldr	r2, [r3, #20]
 800afe4:	4b19      	ldr	r3, [pc, #100]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afe6:	430a      	orrs	r2, r1
 800afe8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	695a      	ldr	r2, [r3, #20]
 800afee:	2380      	movs	r3, #128	; 0x80
 800aff0:	05db      	lsls	r3, r3, #23
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d106      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aff6:	4b15      	ldr	r3, [pc, #84]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	4b14      	ldr	r3, [pc, #80]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800affc:	2180      	movs	r1, #128	; 0x80
 800affe:	0249      	lsls	r1, r1, #9
 800b000:	430a      	orrs	r2, r1
 800b002:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	2380      	movs	r3, #128	; 0x80
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	4013      	ands	r3, r2
 800b00e:	d016      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800b010:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800b012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b014:	4a14      	ldr	r2, [pc, #80]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b016:	4013      	ands	r3, r2
 800b018:	0019      	movs	r1, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800b020:	430a      	orrs	r2, r1
 800b022:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	691a      	ldr	r2, [r3, #16]
 800b028:	2380      	movs	r3, #128	; 0x80
 800b02a:	01db      	lsls	r3, r3, #7
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d106      	bne.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b030:	4b06      	ldr	r3, [pc, #24]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800b036:	2180      	movs	r1, #128	; 0x80
 800b038:	0249      	lsls	r1, r1, #9
 800b03a:	430a      	orrs	r2, r1
 800b03c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800b03e:	2312      	movs	r3, #18
 800b040:	18fb      	adds	r3, r7, r3
 800b042:	781b      	ldrb	r3, [r3, #0]
}
 800b044:	0018      	movs	r0, r3
 800b046:	46bd      	mov	sp, r7
 800b048:	b006      	add	sp, #24
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	40021000 	.word	0x40021000
 800b050:	40007000 	.word	0x40007000
 800b054:	fffffcff 	.word	0xfffffcff
 800b058:	fffeffff 	.word	0xfffeffff
 800b05c:	00001388 	.word	0x00001388
 800b060:	efffffff 	.word	0xefffffff
 800b064:	ffffcfff 	.word	0xffffcfff
 800b068:	ffff3fff 	.word	0xffff3fff

0800b06c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e0a8      	b.n	800b1d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	2b00      	cmp	r3, #0
 800b084:	d109      	bne.n	800b09a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	2382      	movs	r3, #130	; 0x82
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	429a      	cmp	r2, r3
 800b090:	d009      	beq.n	800b0a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	61da      	str	r2, [r3, #28]
 800b098:	e005      	b.n	800b0a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	225d      	movs	r2, #93	; 0x5d
 800b0b0:	5c9b      	ldrb	r3, [r3, r2]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d107      	bne.n	800b0c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	225c      	movs	r2, #92	; 0x5c
 800b0bc:	2100      	movs	r1, #0
 800b0be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f7fc fa54 	bl	8007570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	225d      	movs	r2, #93	; 0x5d
 800b0cc:	2102      	movs	r1, #2
 800b0ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2140      	movs	r1, #64	; 0x40
 800b0dc:	438a      	bics	r2, r1
 800b0de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68da      	ldr	r2, [r3, #12]
 800b0e4:	23e0      	movs	r3, #224	; 0xe0
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d902      	bls.n	800b0f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	e002      	b.n	800b0f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b0f2:	2380      	movs	r3, #128	; 0x80
 800b0f4:	015b      	lsls	r3, r3, #5
 800b0f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	23f0      	movs	r3, #240	; 0xf0
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	429a      	cmp	r2, r3
 800b102:	d008      	beq.n	800b116 <HAL_SPI_Init+0xaa>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	23e0      	movs	r3, #224	; 0xe0
 800b10a:	00db      	lsls	r3, r3, #3
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d002      	beq.n	800b116 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	2382      	movs	r3, #130	; 0x82
 800b11c:	005b      	lsls	r3, r3, #1
 800b11e:	401a      	ands	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6899      	ldr	r1, [r3, #8]
 800b124:	2384      	movs	r3, #132	; 0x84
 800b126:	021b      	lsls	r3, r3, #8
 800b128:	400b      	ands	r3, r1
 800b12a:	431a      	orrs	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	2102      	movs	r1, #2
 800b132:	400b      	ands	r3, r1
 800b134:	431a      	orrs	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	2101      	movs	r1, #1
 800b13c:	400b      	ands	r3, r1
 800b13e:	431a      	orrs	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6999      	ldr	r1, [r3, #24]
 800b144:	2380      	movs	r3, #128	; 0x80
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	400b      	ands	r3, r1
 800b14a:	431a      	orrs	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	69db      	ldr	r3, [r3, #28]
 800b150:	2138      	movs	r1, #56	; 0x38
 800b152:	400b      	ands	r3, r1
 800b154:	431a      	orrs	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	2180      	movs	r1, #128	; 0x80
 800b15c:	400b      	ands	r3, r1
 800b15e:	431a      	orrs	r2, r3
 800b160:	0011      	movs	r1, r2
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b166:	2380      	movs	r3, #128	; 0x80
 800b168:	019b      	lsls	r3, r3, #6
 800b16a:	401a      	ands	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	430a      	orrs	r2, r1
 800b172:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	0c1b      	lsrs	r3, r3, #16
 800b17a:	2204      	movs	r2, #4
 800b17c:	401a      	ands	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2110      	movs	r1, #16
 800b184:	400b      	ands	r3, r1
 800b186:	431a      	orrs	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18c:	2108      	movs	r1, #8
 800b18e:	400b      	ands	r3, r1
 800b190:	431a      	orrs	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68d9      	ldr	r1, [r3, #12]
 800b196:	23f0      	movs	r3, #240	; 0xf0
 800b198:	011b      	lsls	r3, r3, #4
 800b19a:	400b      	ands	r3, r1
 800b19c:	431a      	orrs	r2, r3
 800b19e:	0011      	movs	r1, r2
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	2380      	movs	r3, #128	; 0x80
 800b1a4:	015b      	lsls	r3, r3, #5
 800b1a6:	401a      	ands	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	69da      	ldr	r2, [r3, #28]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4907      	ldr	r1, [pc, #28]	; (800b1d8 <HAL_SPI_Init+0x16c>)
 800b1bc:	400a      	ands	r2, r1
 800b1be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	225d      	movs	r2, #93	; 0x5d
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	b004      	add	sp, #16
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	fffff7ff 	.word	0xfffff7ff

0800b1dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	1dbb      	adds	r3, r7, #6
 800b1ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1ec:	231f      	movs	r3, #31
 800b1ee:	18fb      	adds	r3, r7, r3
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	225c      	movs	r2, #92	; 0x5c
 800b1f8:	5c9b      	ldrb	r3, [r3, r2]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d101      	bne.n	800b202 <HAL_SPI_Transmit+0x26>
 800b1fe:	2302      	movs	r3, #2
 800b200:	e140      	b.n	800b484 <HAL_SPI_Transmit+0x2a8>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	225c      	movs	r2, #92	; 0x5c
 800b206:	2101      	movs	r1, #1
 800b208:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b20a:	f7fc fdbd 	bl	8007d88 <HAL_GetTick>
 800b20e:	0003      	movs	r3, r0
 800b210:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b212:	2316      	movs	r3, #22
 800b214:	18fb      	adds	r3, r7, r3
 800b216:	1dba      	adds	r2, r7, #6
 800b218:	8812      	ldrh	r2, [r2, #0]
 800b21a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	225d      	movs	r2, #93	; 0x5d
 800b220:	5c9b      	ldrb	r3, [r3, r2]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b01      	cmp	r3, #1
 800b226:	d004      	beq.n	800b232 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b228:	231f      	movs	r3, #31
 800b22a:	18fb      	adds	r3, r7, r3
 800b22c:	2202      	movs	r2, #2
 800b22e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b230:	e11d      	b.n	800b46e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <HAL_SPI_Transmit+0x64>
 800b238:	1dbb      	adds	r3, r7, #6
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d104      	bne.n	800b24a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b240:	231f      	movs	r3, #31
 800b242:	18fb      	adds	r3, r7, r3
 800b244:	2201      	movs	r2, #1
 800b246:	701a      	strb	r2, [r3, #0]
    goto error;
 800b248:	e111      	b.n	800b46e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	225d      	movs	r2, #93	; 0x5d
 800b24e:	2103      	movs	r1, #3
 800b250:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	1dba      	adds	r2, r7, #6
 800b262:	8812      	ldrh	r2, [r2, #0]
 800b264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	1dba      	adds	r2, r7, #6
 800b26a:	8812      	ldrh	r2, [r2, #0]
 800b26c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2244      	movs	r2, #68	; 0x44
 800b278:	2100      	movs	r1, #0
 800b27a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2246      	movs	r2, #70	; 0x46
 800b280:	2100      	movs	r1, #0
 800b282:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	689a      	ldr	r2, [r3, #8]
 800b294:	2380      	movs	r3, #128	; 0x80
 800b296:	021b      	lsls	r3, r3, #8
 800b298:	429a      	cmp	r2, r3
 800b29a:	d110      	bne.n	800b2be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2140      	movs	r1, #64	; 0x40
 800b2a8:	438a      	bics	r2, r1
 800b2aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2180      	movs	r1, #128	; 0x80
 800b2b8:	01c9      	lsls	r1, r1, #7
 800b2ba:	430a      	orrs	r2, r1
 800b2bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2240      	movs	r2, #64	; 0x40
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	2b40      	cmp	r3, #64	; 0x40
 800b2ca:	d007      	beq.n	800b2dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2140      	movs	r1, #64	; 0x40
 800b2d8:	430a      	orrs	r2, r1
 800b2da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68da      	ldr	r2, [r3, #12]
 800b2e0:	23e0      	movs	r3, #224	; 0xe0
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d94e      	bls.n	800b386 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d004      	beq.n	800b2fa <HAL_SPI_Transmit+0x11e>
 800b2f0:	2316      	movs	r3, #22
 800b2f2:	18fb      	adds	r3, r7, r3
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d13f      	bne.n	800b37a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fe:	881a      	ldrh	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30a:	1c9a      	adds	r2, r3, #2
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b314:	b29b      	uxth	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b31e:	e02c      	b.n	800b37a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	2202      	movs	r2, #2
 800b328:	4013      	ands	r3, r2
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d112      	bne.n	800b354 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	881a      	ldrh	r2, [r3, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33e:	1c9a      	adds	r2, r3, #2
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b348:	b29b      	uxth	r3, r3
 800b34a:	3b01      	subs	r3, #1
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b352:	e012      	b.n	800b37a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b354:	f7fc fd18 	bl	8007d88 <HAL_GetTick>
 800b358:	0002      	movs	r2, r0
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d802      	bhi.n	800b36a <HAL_SPI_Transmit+0x18e>
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	3301      	adds	r3, #1
 800b368:	d102      	bne.n	800b370 <HAL_SPI_Transmit+0x194>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d104      	bne.n	800b37a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b370:	231f      	movs	r3, #31
 800b372:	18fb      	adds	r3, r7, r3
 800b374:	2203      	movs	r2, #3
 800b376:	701a      	strb	r2, [r3, #0]
          goto error;
 800b378:	e079      	b.n	800b46e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b37e:	b29b      	uxth	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1cd      	bne.n	800b320 <HAL_SPI_Transmit+0x144>
 800b384:	e04f      	b.n	800b426 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d004      	beq.n	800b398 <HAL_SPI_Transmit+0x1bc>
 800b38e:	2316      	movs	r3, #22
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	881b      	ldrh	r3, [r3, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d141      	bne.n	800b41c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	330c      	adds	r3, #12
 800b3a2:	7812      	ldrb	r2, [r2, #0]
 800b3a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b3be:	e02d      	b.n	800b41c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d113      	bne.n	800b3f6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	7812      	ldrb	r2, [r2, #0]
 800b3da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b3f4:	e012      	b.n	800b41c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3f6:	f7fc fcc7 	bl	8007d88 <HAL_GetTick>
 800b3fa:	0002      	movs	r2, r0
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	429a      	cmp	r2, r3
 800b404:	d802      	bhi.n	800b40c <HAL_SPI_Transmit+0x230>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	3301      	adds	r3, #1
 800b40a:	d102      	bne.n	800b412 <HAL_SPI_Transmit+0x236>
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d104      	bne.n	800b41c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b412:	231f      	movs	r3, #31
 800b414:	18fb      	adds	r3, r7, r3
 800b416:	2203      	movs	r2, #3
 800b418:	701a      	strb	r2, [r3, #0]
          goto error;
 800b41a:	e028      	b.n	800b46e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b420:	b29b      	uxth	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1cc      	bne.n	800b3c0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b426:	69ba      	ldr	r2, [r7, #24]
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	0018      	movs	r0, r3
 800b42e:	f000 fb2f 	bl	800ba90 <SPI_EndRxTxTransaction>
 800b432:	1e03      	subs	r3, r0, #0
 800b434:	d002      	beq.n	800b43c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2220      	movs	r2, #32
 800b43a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b444:	2300      	movs	r3, #0
 800b446:	613b      	str	r3, [r7, #16]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	613b      	str	r3, [r7, #16]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	613b      	str	r3, [r7, #16]
 800b458:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b462:	231f      	movs	r3, #31
 800b464:	18fb      	adds	r3, r7, r3
 800b466:	2201      	movs	r2, #1
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	e000      	b.n	800b46e <HAL_SPI_Transmit+0x292>
  }

error:
 800b46c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	225d      	movs	r2, #93	; 0x5d
 800b472:	2101      	movs	r1, #1
 800b474:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	225c      	movs	r2, #92	; 0x5c
 800b47a:	2100      	movs	r1, #0
 800b47c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b47e:	231f      	movs	r3, #31
 800b480:	18fb      	adds	r3, r7, r3
 800b482:	781b      	ldrb	r3, [r3, #0]
}
 800b484:	0018      	movs	r0, r3
 800b486:	46bd      	mov	sp, r7
 800b488:	b008      	add	sp, #32
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	001a      	movs	r2, r3
 800b49a:	1cbb      	adds	r3, r7, #2
 800b49c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b4a2:	2323      	movs	r3, #35	; 0x23
 800b4a4:	18fb      	adds	r3, r7, r3
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	225c      	movs	r2, #92	; 0x5c
 800b4ae:	5c9b      	ldrb	r3, [r3, r2]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_SPI_TransmitReceive+0x2c>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e1b5      	b.n	800b824 <HAL_SPI_TransmitReceive+0x398>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	225c      	movs	r2, #92	; 0x5c
 800b4bc:	2101      	movs	r1, #1
 800b4be:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4c0:	f7fc fc62 	bl	8007d88 <HAL_GetTick>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b4c8:	201b      	movs	r0, #27
 800b4ca:	183b      	adds	r3, r7, r0
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	215d      	movs	r1, #93	; 0x5d
 800b4d0:	5c52      	ldrb	r2, [r2, r1]
 800b4d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b4da:	2312      	movs	r3, #18
 800b4dc:	18fb      	adds	r3, r7, r3
 800b4de:	1cba      	adds	r2, r7, #2
 800b4e0:	8812      	ldrh	r2, [r2, #0]
 800b4e2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b4e4:	183b      	adds	r3, r7, r0
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d011      	beq.n	800b510 <HAL_SPI_TransmitReceive+0x84>
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	2382      	movs	r3, #130	; 0x82
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d107      	bne.n	800b506 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d103      	bne.n	800b506 <HAL_SPI_TransmitReceive+0x7a>
 800b4fe:	183b      	adds	r3, r7, r0
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b04      	cmp	r3, #4
 800b504:	d004      	beq.n	800b510 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b506:	2323      	movs	r3, #35	; 0x23
 800b508:	18fb      	adds	r3, r7, r3
 800b50a:	2202      	movs	r2, #2
 800b50c:	701a      	strb	r2, [r3, #0]
    goto error;
 800b50e:	e17e      	b.n	800b80e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d006      	beq.n	800b524 <HAL_SPI_TransmitReceive+0x98>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <HAL_SPI_TransmitReceive+0x98>
 800b51c:	1cbb      	adds	r3, r7, #2
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d104      	bne.n	800b52e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b524:	2323      	movs	r3, #35	; 0x23
 800b526:	18fb      	adds	r3, r7, r3
 800b528:	2201      	movs	r2, #1
 800b52a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b52c:	e16f      	b.n	800b80e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	225d      	movs	r2, #93	; 0x5d
 800b532:	5c9b      	ldrb	r3, [r3, r2]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b04      	cmp	r3, #4
 800b538:	d003      	beq.n	800b542 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	225d      	movs	r2, #93	; 0x5d
 800b53e:	2105      	movs	r1, #5
 800b540:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	1cba      	adds	r2, r7, #2
 800b552:	2146      	movs	r1, #70	; 0x46
 800b554:	8812      	ldrh	r2, [r2, #0]
 800b556:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	1cba      	adds	r2, r7, #2
 800b55c:	2144      	movs	r1, #68	; 0x44
 800b55e:	8812      	ldrh	r2, [r2, #0]
 800b560:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	1cba      	adds	r2, r7, #2
 800b56c:	8812      	ldrh	r2, [r2, #0]
 800b56e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	1cba      	adds	r2, r7, #2
 800b574:	8812      	ldrh	r2, [r2, #0]
 800b576:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	23e0      	movs	r3, #224	; 0xe0
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d908      	bls.n	800b5a2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	49a4      	ldr	r1, [pc, #656]	; (800b82c <HAL_SPI_TransmitReceive+0x3a0>)
 800b59c:	400a      	ands	r2, r1
 800b59e:	605a      	str	r2, [r3, #4]
 800b5a0:	e008      	b.n	800b5b4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2180      	movs	r1, #128	; 0x80
 800b5ae:	0149      	lsls	r1, r1, #5
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2240      	movs	r2, #64	; 0x40
 800b5bc:	4013      	ands	r3, r2
 800b5be:	2b40      	cmp	r3, #64	; 0x40
 800b5c0:	d007      	beq.n	800b5d2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2140      	movs	r1, #64	; 0x40
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	68da      	ldr	r2, [r3, #12]
 800b5d6:	23e0      	movs	r3, #224	; 0xe0
 800b5d8:	00db      	lsls	r3, r3, #3
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d800      	bhi.n	800b5e0 <HAL_SPI_TransmitReceive+0x154>
 800b5de:	e07f      	b.n	800b6e0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d005      	beq.n	800b5f4 <HAL_SPI_TransmitReceive+0x168>
 800b5e8:	2312      	movs	r3, #18
 800b5ea:	18fb      	adds	r3, r7, r3
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d000      	beq.n	800b5f4 <HAL_SPI_TransmitReceive+0x168>
 800b5f2:	e069      	b.n	800b6c8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	881a      	ldrh	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b604:	1c9a      	adds	r2, r3, #2
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b60e:	b29b      	uxth	r3, r3
 800b610:	3b01      	subs	r3, #1
 800b612:	b29a      	uxth	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b618:	e056      	b.n	800b6c8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2202      	movs	r2, #2
 800b622:	4013      	ands	r3, r2
 800b624:	2b02      	cmp	r3, #2
 800b626:	d11b      	bne.n	800b660 <HAL_SPI_TransmitReceive+0x1d4>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d016      	beq.n	800b660 <HAL_SPI_TransmitReceive+0x1d4>
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	2b01      	cmp	r3, #1
 800b636:	d113      	bne.n	800b660 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63c:	881a      	ldrh	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b648:	1c9a      	adds	r2, r3, #2
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b652:	b29b      	uxth	r3, r3
 800b654:	3b01      	subs	r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	2201      	movs	r2, #1
 800b668:	4013      	ands	r3, r2
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d11c      	bne.n	800b6a8 <HAL_SPI_TransmitReceive+0x21c>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2246      	movs	r2, #70	; 0x46
 800b672:	5a9b      	ldrh	r3, [r3, r2]
 800b674:	b29b      	uxth	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d016      	beq.n	800b6a8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68da      	ldr	r2, [r3, #12]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b684:	b292      	uxth	r2, r2
 800b686:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68c:	1c9a      	adds	r2, r3, #2
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2246      	movs	r2, #70	; 0x46
 800b696:	5a9b      	ldrh	r3, [r3, r2]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	3b01      	subs	r3, #1
 800b69c:	b299      	uxth	r1, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2246      	movs	r2, #70	; 0x46
 800b6a2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b6a8:	f7fc fb6e 	bl	8007d88 <HAL_GetTick>
 800b6ac:	0002      	movs	r2, r0
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d807      	bhi.n	800b6c8 <HAL_SPI_TransmitReceive+0x23c>
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	d004      	beq.n	800b6c8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b6be:	2323      	movs	r3, #35	; 0x23
 800b6c0:	18fb      	adds	r3, r7, r3
 800b6c2:	2203      	movs	r2, #3
 800b6c4:	701a      	strb	r2, [r3, #0]
        goto error;
 800b6c6:	e0a2      	b.n	800b80e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1a3      	bne.n	800b61a <HAL_SPI_TransmitReceive+0x18e>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2246      	movs	r2, #70	; 0x46
 800b6d6:	5a9b      	ldrh	r3, [r3, r2]
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d19d      	bne.n	800b61a <HAL_SPI_TransmitReceive+0x18e>
 800b6de:	e085      	b.n	800b7ec <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d005      	beq.n	800b6f4 <HAL_SPI_TransmitReceive+0x268>
 800b6e8:	2312      	movs	r3, #18
 800b6ea:	18fb      	adds	r3, r7, r3
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d000      	beq.n	800b6f4 <HAL_SPI_TransmitReceive+0x268>
 800b6f2:	e070      	b.n	800b7d6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	330c      	adds	r3, #12
 800b6fe:	7812      	ldrb	r2, [r2, #0]
 800b700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b710:	b29b      	uxth	r3, r3
 800b712:	3b01      	subs	r3, #1
 800b714:	b29a      	uxth	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b71a:	e05c      	b.n	800b7d6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	2202      	movs	r2, #2
 800b724:	4013      	ands	r3, r2
 800b726:	2b02      	cmp	r3, #2
 800b728:	d11c      	bne.n	800b764 <HAL_SPI_TransmitReceive+0x2d8>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b72e:	b29b      	uxth	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d017      	beq.n	800b764 <HAL_SPI_TransmitReceive+0x2d8>
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	2b01      	cmp	r3, #1
 800b738:	d114      	bne.n	800b764 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	330c      	adds	r3, #12
 800b744:	7812      	ldrb	r2, [r2, #0]
 800b746:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b756:	b29b      	uxth	r3, r3
 800b758:	3b01      	subs	r3, #1
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	2201      	movs	r2, #1
 800b76c:	4013      	ands	r3, r2
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d11e      	bne.n	800b7b0 <HAL_SPI_TransmitReceive+0x324>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2246      	movs	r2, #70	; 0x46
 800b776:	5a9b      	ldrh	r3, [r3, r2]
 800b778:	b29b      	uxth	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d018      	beq.n	800b7b0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	330c      	adds	r3, #12
 800b784:	001a      	movs	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78a:	7812      	ldrb	r2, [r2, #0]
 800b78c:	b2d2      	uxtb	r2, r2
 800b78e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2246      	movs	r2, #70	; 0x46
 800b79e:	5a9b      	ldrh	r3, [r3, r2]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	b299      	uxth	r1, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2246      	movs	r2, #70	; 0x46
 800b7aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b7b0:	f7fc faea 	bl	8007d88 <HAL_GetTick>
 800b7b4:	0002      	movs	r2, r0
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d802      	bhi.n	800b7c6 <HAL_SPI_TransmitReceive+0x33a>
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	d102      	bne.n	800b7cc <HAL_SPI_TransmitReceive+0x340>
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d104      	bne.n	800b7d6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800b7cc:	2323      	movs	r3, #35	; 0x23
 800b7ce:	18fb      	adds	r3, r7, r3
 800b7d0:	2203      	movs	r2, #3
 800b7d2:	701a      	strb	r2, [r3, #0]
        goto error;
 800b7d4:	e01b      	b.n	800b80e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d19d      	bne.n	800b71c <HAL_SPI_TransmitReceive+0x290>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2246      	movs	r2, #70	; 0x46
 800b7e4:	5a9b      	ldrh	r3, [r3, r2]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d197      	bne.n	800b71c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	f000 f94c 	bl	800ba90 <SPI_EndRxTxTransaction>
 800b7f8:	1e03      	subs	r3, r0, #0
 800b7fa:	d007      	beq.n	800b80c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800b7fc:	2323      	movs	r3, #35	; 0x23
 800b7fe:	18fb      	adds	r3, r7, r3
 800b800:	2201      	movs	r2, #1
 800b802:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2220      	movs	r2, #32
 800b808:	661a      	str	r2, [r3, #96]	; 0x60
 800b80a:	e000      	b.n	800b80e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b80c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	225d      	movs	r2, #93	; 0x5d
 800b812:	2101      	movs	r1, #1
 800b814:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	225c      	movs	r2, #92	; 0x5c
 800b81a:	2100      	movs	r1, #0
 800b81c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b81e:	2323      	movs	r3, #35	; 0x23
 800b820:	18fb      	adds	r3, r7, r3
 800b822:	781b      	ldrb	r3, [r3, #0]
}
 800b824:	0018      	movs	r0, r3
 800b826:	46bd      	mov	sp, r7
 800b828:	b00a      	add	sp, #40	; 0x28
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	ffffefff 	.word	0xffffefff

0800b830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	1dfb      	adds	r3, r7, #7
 800b83e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b840:	f7fc faa2 	bl	8007d88 <HAL_GetTick>
 800b844:	0002      	movs	r2, r0
 800b846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b848:	1a9b      	subs	r3, r3, r2
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	18d3      	adds	r3, r2, r3
 800b84e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b850:	f7fc fa9a 	bl	8007d88 <HAL_GetTick>
 800b854:	0003      	movs	r3, r0
 800b856:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b858:	4b3a      	ldr	r3, [pc, #232]	; (800b944 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	015b      	lsls	r3, r3, #5
 800b85e:	0d1b      	lsrs	r3, r3, #20
 800b860:	69fa      	ldr	r2, [r7, #28]
 800b862:	4353      	muls	r3, r2
 800b864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b866:	e058      	b.n	800b91a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	3301      	adds	r3, #1
 800b86c:	d055      	beq.n	800b91a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b86e:	f7fc fa8b 	bl	8007d88 <HAL_GetTick>
 800b872:	0002      	movs	r2, r0
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d902      	bls.n	800b884 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d142      	bne.n	800b90a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	21e0      	movs	r1, #224	; 0xe0
 800b890:	438a      	bics	r2, r1
 800b892:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	2382      	movs	r3, #130	; 0x82
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d113      	bne.n	800b8c8 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	2380      	movs	r3, #128	; 0x80
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d005      	beq.n	800b8b8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	689a      	ldr	r2, [r3, #8]
 800b8b0:	2380      	movs	r3, #128	; 0x80
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d107      	bne.n	800b8c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2140      	movs	r1, #64	; 0x40
 800b8c4:	438a      	bics	r2, r1
 800b8c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8cc:	2380      	movs	r3, #128	; 0x80
 800b8ce:	019b      	lsls	r3, r3, #6
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d110      	bne.n	800b8f6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	491a      	ldr	r1, [pc, #104]	; (800b948 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b8e0:	400a      	ands	r2, r1
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2180      	movs	r1, #128	; 0x80
 800b8f0:	0189      	lsls	r1, r1, #6
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	225d      	movs	r2, #93	; 0x5d
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	225c      	movs	r2, #92	; 0x5c
 800b902:	2100      	movs	r1, #0
 800b904:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e017      	b.n	800b93a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	3b01      	subs	r3, #1
 800b918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	4013      	ands	r3, r2
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	425a      	negs	r2, r3
 800b92a:	4153      	adcs	r3, r2
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	001a      	movs	r2, r3
 800b930:	1dfb      	adds	r3, r7, #7
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d197      	bne.n	800b868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	0018      	movs	r0, r3
 800b93c:	46bd      	mov	sp, r7
 800b93e:	b008      	add	sp, #32
 800b940:	bd80      	pop	{r7, pc}
 800b942:	46c0      	nop			; (mov r8, r8)
 800b944:	200000e0 	.word	0x200000e0
 800b948:	ffffdfff 	.word	0xffffdfff

0800b94c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b95a:	2317      	movs	r3, #23
 800b95c:	18fb      	adds	r3, r7, r3
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b962:	f7fc fa11 	bl	8007d88 <HAL_GetTick>
 800b966:	0002      	movs	r2, r0
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	1a9b      	subs	r3, r3, r2
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	18d3      	adds	r3, r2, r3
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b972:	f7fc fa09 	bl	8007d88 <HAL_GetTick>
 800b976:	0003      	movs	r3, r0
 800b978:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	330c      	adds	r3, #12
 800b980:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b982:	4b41      	ldr	r3, [pc, #260]	; (800ba88 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	0013      	movs	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	189b      	adds	r3, r3, r2
 800b98c:	00da      	lsls	r2, r3, #3
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	0d1b      	lsrs	r3, r3, #20
 800b992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b994:	4353      	muls	r3, r2
 800b996:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b998:	e068      	b.n	800ba6c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	23c0      	movs	r3, #192	; 0xc0
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d10a      	bne.n	800b9ba <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d107      	bne.n	800b9ba <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	2117      	movs	r1, #23
 800b9b2:	187b      	adds	r3, r7, r1
 800b9b4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b9b6:	187b      	adds	r3, r7, r1
 800b9b8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	d055      	beq.n	800ba6c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9c0:	f7fc f9e2 	bl	8007d88 <HAL_GetTick>
 800b9c4:	0002      	movs	r2, r0
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d902      	bls.n	800b9d6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d142      	bne.n	800ba5c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	21e0      	movs	r1, #224	; 0xe0
 800b9e2:	438a      	bics	r2, r1
 800b9e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	2382      	movs	r3, #130	; 0x82
 800b9ec:	005b      	lsls	r3, r3, #1
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d113      	bne.n	800ba1a <SPI_WaitFifoStateUntilTimeout+0xce>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	2380      	movs	r3, #128	; 0x80
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d005      	beq.n	800ba0a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	2380      	movs	r3, #128	; 0x80
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d107      	bne.n	800ba1a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2140      	movs	r1, #64	; 0x40
 800ba16:	438a      	bics	r2, r1
 800ba18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba1e:	2380      	movs	r3, #128	; 0x80
 800ba20:	019b      	lsls	r3, r3, #6
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d110      	bne.n	800ba48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4916      	ldr	r1, [pc, #88]	; (800ba8c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800ba32:	400a      	ands	r2, r1
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2180      	movs	r1, #128	; 0x80
 800ba42:	0189      	lsls	r1, r1, #6
 800ba44:	430a      	orrs	r2, r1
 800ba46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	225d      	movs	r2, #93	; 0x5d
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	225c      	movs	r2, #92	; 0x5c
 800ba54:	2100      	movs	r1, #0
 800ba56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e010      	b.n	800ba7e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	4013      	ands	r3, r2
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d18e      	bne.n	800b99a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	0018      	movs	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	b00a      	add	sp, #40	; 0x28
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	200000e0 	.word	0x200000e0
 800ba8c:	ffffdfff 	.word	0xffffdfff

0800ba90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af02      	add	r7, sp, #8
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	23c0      	movs	r3, #192	; 0xc0
 800baa0:	0159      	lsls	r1, r3, #5
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	0013      	movs	r3, r2
 800baaa:	2200      	movs	r2, #0
 800baac:	f7ff ff4e 	bl	800b94c <SPI_WaitFifoStateUntilTimeout>
 800bab0:	1e03      	subs	r3, r0, #0
 800bab2:	d007      	beq.n	800bac4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bab8:	2220      	movs	r2, #32
 800baba:	431a      	orrs	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bac0:	2303      	movs	r3, #3
 800bac2:	e027      	b.n	800bb14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	0013      	movs	r3, r2
 800bace:	2200      	movs	r2, #0
 800bad0:	2180      	movs	r1, #128	; 0x80
 800bad2:	f7ff fead 	bl	800b830 <SPI_WaitFlagStateUntilTimeout>
 800bad6:	1e03      	subs	r3, r0, #0
 800bad8:	d007      	beq.n	800baea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bade:	2220      	movs	r2, #32
 800bae0:	431a      	orrs	r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bae6:	2303      	movs	r3, #3
 800bae8:	e014      	b.n	800bb14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	23c0      	movs	r3, #192	; 0xc0
 800baee:	00d9      	lsls	r1, r3, #3
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	0013      	movs	r3, r2
 800baf8:	2200      	movs	r2, #0
 800bafa:	f7ff ff27 	bl	800b94c <SPI_WaitFifoStateUntilTimeout>
 800bafe:	1e03      	subs	r3, r0, #0
 800bb00:	d007      	beq.n	800bb12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb06:	2220      	movs	r2, #32
 800bb08:	431a      	orrs	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e000      	b.n	800bb14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	0018      	movs	r0, r3
 800bb16:	46bd      	mov	sp, r7
 800bb18:	b004      	add	sp, #16
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e04a      	b.n	800bbc4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	223d      	movs	r2, #61	; 0x3d
 800bb32:	5c9b      	ldrb	r3, [r3, r2]
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d107      	bne.n	800bb4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	223c      	movs	r2, #60	; 0x3c
 800bb3e:	2100      	movs	r1, #0
 800bb40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	0018      	movs	r0, r3
 800bb46:	f7fb fd5d 	bl	8007604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	223d      	movs	r2, #61	; 0x3d
 800bb4e:	2102      	movs	r1, #2
 800bb50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	3304      	adds	r3, #4
 800bb5a:	0019      	movs	r1, r3
 800bb5c:	0010      	movs	r0, r2
 800bb5e:	f000 f9dd 	bl	800bf1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2248      	movs	r2, #72	; 0x48
 800bb66:	2101      	movs	r1, #1
 800bb68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	223e      	movs	r2, #62	; 0x3e
 800bb6e:	2101      	movs	r1, #1
 800bb70:	5499      	strb	r1, [r3, r2]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	223f      	movs	r2, #63	; 0x3f
 800bb76:	2101      	movs	r1, #1
 800bb78:	5499      	strb	r1, [r3, r2]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2240      	movs	r2, #64	; 0x40
 800bb7e:	2101      	movs	r1, #1
 800bb80:	5499      	strb	r1, [r3, r2]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2241      	movs	r2, #65	; 0x41
 800bb86:	2101      	movs	r1, #1
 800bb88:	5499      	strb	r1, [r3, r2]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2242      	movs	r2, #66	; 0x42
 800bb8e:	2101      	movs	r1, #1
 800bb90:	5499      	strb	r1, [r3, r2]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2243      	movs	r2, #67	; 0x43
 800bb96:	2101      	movs	r1, #1
 800bb98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2244      	movs	r2, #68	; 0x44
 800bb9e:	2101      	movs	r1, #1
 800bba0:	5499      	strb	r1, [r3, r2]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2245      	movs	r2, #69	; 0x45
 800bba6:	2101      	movs	r1, #1
 800bba8:	5499      	strb	r1, [r3, r2]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2246      	movs	r2, #70	; 0x46
 800bbae:	2101      	movs	r1, #1
 800bbb0:	5499      	strb	r1, [r3, r2]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2247      	movs	r2, #71	; 0x47
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	223d      	movs	r2, #61	; 0x3d
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	b002      	add	sp, #8
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	223d      	movs	r2, #61	; 0x3d
 800bbd8:	5c9b      	ldrb	r3, [r3, r2]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d001      	beq.n	800bbe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e03c      	b.n	800bc5e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	223d      	movs	r2, #61	; 0x3d
 800bbe8:	2102      	movs	r1, #2
 800bbea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68da      	ldr	r2, [r3, #12]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a19      	ldr	r2, [pc, #100]	; (800bc68 <HAL_TIM_Base_Start_IT+0x9c>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d009      	beq.n	800bc1a <HAL_TIM_Base_Start_IT+0x4e>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a18      	ldr	r2, [pc, #96]	; (800bc6c <HAL_TIM_Base_Start_IT+0xa0>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d004      	beq.n	800bc1a <HAL_TIM_Base_Start_IT+0x4e>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a16      	ldr	r2, [pc, #88]	; (800bc70 <HAL_TIM_Base_Start_IT+0xa4>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d116      	bne.n	800bc48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	4a14      	ldr	r2, [pc, #80]	; (800bc74 <HAL_TIM_Base_Start_IT+0xa8>)
 800bc22:	4013      	ands	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2b06      	cmp	r3, #6
 800bc2a:	d016      	beq.n	800bc5a <HAL_TIM_Base_Start_IT+0x8e>
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	2380      	movs	r3, #128	; 0x80
 800bc30:	025b      	lsls	r3, r3, #9
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d011      	beq.n	800bc5a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2101      	movs	r1, #1
 800bc42:	430a      	orrs	r2, r1
 800bc44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc46:	e008      	b.n	800bc5a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2101      	movs	r1, #1
 800bc54:	430a      	orrs	r2, r1
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e000      	b.n	800bc5c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc5a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	0018      	movs	r0, r3
 800bc60:	46bd      	mov	sp, r7
 800bc62:	b004      	add	sp, #16
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	46c0      	nop			; (mov r8, r8)
 800bc68:	40012c00 	.word	0x40012c00
 800bc6c:	40000400 	.word	0x40000400
 800bc70:	40014000 	.word	0x40014000
 800bc74:	00010007 	.word	0x00010007

0800bc78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	2202      	movs	r2, #2
 800bc88:	4013      	ands	r3, r2
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d124      	bne.n	800bcd8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	2202      	movs	r2, #2
 800bc96:	4013      	ands	r3, r2
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d11d      	bne.n	800bcd8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2203      	movs	r2, #3
 800bca2:	4252      	negs	r2, r2
 800bca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	2203      	movs	r2, #3
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	d004      	beq.n	800bcc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	0018      	movs	r0, r3
 800bcbc:	f000 f916 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bcc0:	e007      	b.n	800bcd2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	f000 f909 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	0018      	movs	r0, r3
 800bcce:	f000 f915 	bl	800befc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	2204      	movs	r2, #4
 800bce0:	4013      	ands	r3, r2
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d125      	bne.n	800bd32 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	2204      	movs	r2, #4
 800bcee:	4013      	ands	r3, r2
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d11e      	bne.n	800bd32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2205      	movs	r2, #5
 800bcfa:	4252      	negs	r2, r2
 800bcfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2202      	movs	r2, #2
 800bd02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	699a      	ldr	r2, [r3, #24]
 800bd0a:	23c0      	movs	r3, #192	; 0xc0
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4013      	ands	r3, r2
 800bd10:	d004      	beq.n	800bd1c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	0018      	movs	r0, r3
 800bd16:	f000 f8e9 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bd1a:	e007      	b.n	800bd2c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f000 f8dc 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	0018      	movs	r0, r3
 800bd28:	f000 f8e8 	bl	800befc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	2208      	movs	r2, #8
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	2b08      	cmp	r3, #8
 800bd3e:	d124      	bne.n	800bd8a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	2208      	movs	r2, #8
 800bd48:	4013      	ands	r3, r2
 800bd4a:	2b08      	cmp	r3, #8
 800bd4c:	d11d      	bne.n	800bd8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2209      	movs	r2, #9
 800bd54:	4252      	negs	r2, r2
 800bd56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2204      	movs	r2, #4
 800bd5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	69db      	ldr	r3, [r3, #28]
 800bd64:	2203      	movs	r2, #3
 800bd66:	4013      	ands	r3, r2
 800bd68:	d004      	beq.n	800bd74 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	f000 f8bd 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bd72:	e007      	b.n	800bd84 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	0018      	movs	r0, r3
 800bd78:	f000 f8b0 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	0018      	movs	r0, r3
 800bd80:	f000 f8bc 	bl	800befc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	2210      	movs	r2, #16
 800bd92:	4013      	ands	r3, r2
 800bd94:	2b10      	cmp	r3, #16
 800bd96:	d125      	bne.n	800bde4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	2210      	movs	r2, #16
 800bda0:	4013      	ands	r3, r2
 800bda2:	2b10      	cmp	r3, #16
 800bda4:	d11e      	bne.n	800bde4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2211      	movs	r2, #17
 800bdac:	4252      	negs	r2, r2
 800bdae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2208      	movs	r2, #8
 800bdb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	69da      	ldr	r2, [r3, #28]
 800bdbc:	23c0      	movs	r3, #192	; 0xc0
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	d004      	beq.n	800bdce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	0018      	movs	r0, r3
 800bdc8:	f000 f890 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bdcc:	e007      	b.n	800bdde <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	f000 f883 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	0018      	movs	r0, r3
 800bdda:	f000 f88f 	bl	800befc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2201      	movs	r2, #1
 800bdec:	4013      	ands	r3, r2
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d10f      	bne.n	800be12 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d108      	bne.n	800be12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2202      	movs	r2, #2
 800be06:	4252      	negs	r2, r2
 800be08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	0018      	movs	r0, r3
 800be0e:	f7fa fc7f 	bl	8006710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	2280      	movs	r2, #128	; 0x80
 800be1a:	4013      	ands	r3, r2
 800be1c:	2b80      	cmp	r3, #128	; 0x80
 800be1e:	d10f      	bne.n	800be40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	2280      	movs	r2, #128	; 0x80
 800be28:	4013      	ands	r3, r2
 800be2a:	2b80      	cmp	r3, #128	; 0x80
 800be2c:	d108      	bne.n	800be40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2281      	movs	r2, #129	; 0x81
 800be34:	4252      	negs	r2, r2
 800be36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	0018      	movs	r0, r3
 800be3c:	f000 f954 	bl	800c0e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	691a      	ldr	r2, [r3, #16]
 800be46:	2380      	movs	r3, #128	; 0x80
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	401a      	ands	r2, r3
 800be4c:	2380      	movs	r3, #128	; 0x80
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	429a      	cmp	r2, r3
 800be52:	d10e      	bne.n	800be72 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	2280      	movs	r2, #128	; 0x80
 800be5c:	4013      	ands	r3, r2
 800be5e:	2b80      	cmp	r3, #128	; 0x80
 800be60:	d107      	bne.n	800be72 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a1c      	ldr	r2, [pc, #112]	; (800bed8 <HAL_TIM_IRQHandler+0x260>)
 800be68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	0018      	movs	r0, r3
 800be6e:	f000 f943 	bl	800c0f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	2240      	movs	r2, #64	; 0x40
 800be7a:	4013      	ands	r3, r2
 800be7c:	2b40      	cmp	r3, #64	; 0x40
 800be7e:	d10f      	bne.n	800bea0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	2240      	movs	r2, #64	; 0x40
 800be88:	4013      	ands	r3, r2
 800be8a:	2b40      	cmp	r3, #64	; 0x40
 800be8c:	d108      	bne.n	800bea0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2241      	movs	r2, #65	; 0x41
 800be94:	4252      	negs	r2, r2
 800be96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	0018      	movs	r0, r3
 800be9c:	f000 f836 	bl	800bf0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2220      	movs	r2, #32
 800bea8:	4013      	ands	r3, r2
 800beaa:	2b20      	cmp	r3, #32
 800beac:	d10f      	bne.n	800bece <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	2220      	movs	r2, #32
 800beb6:	4013      	ands	r3, r2
 800beb8:	2b20      	cmp	r3, #32
 800beba:	d108      	bne.n	800bece <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2221      	movs	r2, #33	; 0x21
 800bec2:	4252      	negs	r2, r2
 800bec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	0018      	movs	r0, r3
 800beca:	f000 f905 	bl	800c0d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bece:	46c0      	nop			; (mov r8, r8)
 800bed0:	46bd      	mov	sp, r7
 800bed2:	b002      	add	sp, #8
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	46c0      	nop			; (mov r8, r8)
 800bed8:	fffffeff 	.word	0xfffffeff

0800bedc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bee4:	46c0      	nop			; (mov r8, r8)
 800bee6:	46bd      	mov	sp, r7
 800bee8:	b002      	add	sp, #8
 800beea:	bd80      	pop	{r7, pc}

0800beec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bef4:	46c0      	nop			; (mov r8, r8)
 800bef6:	46bd      	mov	sp, r7
 800bef8:	b002      	add	sp, #8
 800befa:	bd80      	pop	{r7, pc}

0800befc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf04:	46c0      	nop			; (mov r8, r8)
 800bf06:	46bd      	mov	sp, r7
 800bf08:	b002      	add	sp, #8
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf14:	46c0      	nop			; (mov r8, r8)
 800bf16:	46bd      	mov	sp, r7
 800bf18:	b002      	add	sp, #8
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a2f      	ldr	r2, [pc, #188]	; (800bfec <TIM_Base_SetConfig+0xd0>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d003      	beq.n	800bf3c <TIM_Base_SetConfig+0x20>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a2e      	ldr	r2, [pc, #184]	; (800bff0 <TIM_Base_SetConfig+0xd4>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d108      	bne.n	800bf4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2270      	movs	r2, #112	; 0x70
 800bf40:	4393      	bics	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a26      	ldr	r2, [pc, #152]	; (800bfec <TIM_Base_SetConfig+0xd0>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d013      	beq.n	800bf7e <TIM_Base_SetConfig+0x62>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a25      	ldr	r2, [pc, #148]	; (800bff0 <TIM_Base_SetConfig+0xd4>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d00f      	beq.n	800bf7e <TIM_Base_SetConfig+0x62>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a24      	ldr	r2, [pc, #144]	; (800bff4 <TIM_Base_SetConfig+0xd8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d00b      	beq.n	800bf7e <TIM_Base_SetConfig+0x62>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a23      	ldr	r2, [pc, #140]	; (800bff8 <TIM_Base_SetConfig+0xdc>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d007      	beq.n	800bf7e <TIM_Base_SetConfig+0x62>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a22      	ldr	r2, [pc, #136]	; (800bffc <TIM_Base_SetConfig+0xe0>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d003      	beq.n	800bf7e <TIM_Base_SetConfig+0x62>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a21      	ldr	r2, [pc, #132]	; (800c000 <TIM_Base_SetConfig+0xe4>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d108      	bne.n	800bf90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4a20      	ldr	r2, [pc, #128]	; (800c004 <TIM_Base_SetConfig+0xe8>)
 800bf82:	4013      	ands	r3, r2
 800bf84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2280      	movs	r2, #128	; 0x80
 800bf94:	4393      	bics	r3, r2
 800bf96:	001a      	movs	r2, r3
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a0c      	ldr	r2, [pc, #48]	; (800bfec <TIM_Base_SetConfig+0xd0>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00b      	beq.n	800bfd6 <TIM_Base_SetConfig+0xba>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a0d      	ldr	r2, [pc, #52]	; (800bff8 <TIM_Base_SetConfig+0xdc>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d007      	beq.n	800bfd6 <TIM_Base_SetConfig+0xba>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a0c      	ldr	r2, [pc, #48]	; (800bffc <TIM_Base_SetConfig+0xe0>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d003      	beq.n	800bfd6 <TIM_Base_SetConfig+0xba>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a0b      	ldr	r2, [pc, #44]	; (800c000 <TIM_Base_SetConfig+0xe4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d103      	bne.n	800bfde <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	691a      	ldr	r2, [r3, #16]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	615a      	str	r2, [r3, #20]
}
 800bfe4:	46c0      	nop			; (mov r8, r8)
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	b004      	add	sp, #16
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	40012c00 	.word	0x40012c00
 800bff0:	40000400 	.word	0x40000400
 800bff4:	40002000 	.word	0x40002000
 800bff8:	40014000 	.word	0x40014000
 800bffc:	40014400 	.word	0x40014400
 800c000:	40014800 	.word	0x40014800
 800c004:	fffffcff 	.word	0xfffffcff

0800c008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	223c      	movs	r2, #60	; 0x3c
 800c016:	5c9b      	ldrb	r3, [r3, r2]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d101      	bne.n	800c020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c01c:	2302      	movs	r3, #2
 800c01e:	e04f      	b.n	800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	223c      	movs	r2, #60	; 0x3c
 800c024:	2101      	movs	r1, #1
 800c026:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	223d      	movs	r2, #61	; 0x3d
 800c02c:	2102      	movs	r1, #2
 800c02e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a20      	ldr	r2, [pc, #128]	; (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d108      	bne.n	800c05c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	4a1f      	ldr	r2, [pc, #124]	; (800c0cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c04e:	4013      	ands	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	4313      	orrs	r3, r2
 800c05a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2270      	movs	r2, #112	; 0x70
 800c060:	4393      	bics	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a13      	ldr	r2, [pc, #76]	; (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d009      	beq.n	800c094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a12      	ldr	r2, [pc, #72]	; (800c0d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d004      	beq.n	800c094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a11      	ldr	r2, [pc, #68]	; (800c0d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d10c      	bne.n	800c0ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2280      	movs	r2, #128	; 0x80
 800c098:	4393      	bics	r3, r2
 800c09a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	223d      	movs	r2, #61	; 0x3d
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	223c      	movs	r2, #60	; 0x3c
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	b004      	add	sp, #16
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	40012c00 	.word	0x40012c00
 800c0cc:	ff0fffff 	.word	0xff0fffff
 800c0d0:	40000400 	.word	0x40000400
 800c0d4:	40014000 	.word	0x40014000

0800c0d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0e0:	46c0      	nop			; (mov r8, r8)
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	b002      	add	sp, #8
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0f0:	46c0      	nop			; (mov r8, r8)
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	b002      	add	sp, #8
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c100:	46c0      	nop			; (mov r8, r8)
 800c102:	46bd      	mov	sp, r7
 800c104:	b002      	add	sp, #8
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d101      	bne.n	800c11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e046      	b.n	800c1a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2288      	movs	r2, #136	; 0x88
 800c11e:	589b      	ldr	r3, [r3, r2]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d107      	bne.n	800c134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2284      	movs	r2, #132	; 0x84
 800c128:	2100      	movs	r1, #0
 800c12a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	0018      	movs	r0, r3
 800c130:	f7fb fa8e 	bl	8007650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2288      	movs	r2, #136	; 0x88
 800c138:	2124      	movs	r1, #36	; 0x24
 800c13a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2101      	movs	r1, #1
 800c148:	438a      	bics	r2, r1
 800c14a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	0018      	movs	r0, r3
 800c150:	f000 fd40 	bl	800cbd4 <UART_SetConfig>
 800c154:	0003      	movs	r3, r0
 800c156:	2b01      	cmp	r3, #1
 800c158:	d101      	bne.n	800c15e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e024      	b.n	800c1a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	0018      	movs	r0, r3
 800c16a:	f000 fed7 	bl	800cf1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	490d      	ldr	r1, [pc, #52]	; (800c1b0 <HAL_UART_Init+0xa8>)
 800c17a:	400a      	ands	r2, r1
 800c17c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	689a      	ldr	r2, [r3, #8]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	212a      	movs	r1, #42	; 0x2a
 800c18a:	438a      	bics	r2, r1
 800c18c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2101      	movs	r1, #1
 800c19a:	430a      	orrs	r2, r1
 800c19c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	0018      	movs	r0, r3
 800c1a2:	f000 ff6f 	bl	800d084 <UART_CheckIdleState>
 800c1a6:	0003      	movs	r3, r0
}
 800c1a8:	0018      	movs	r0, r3
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	b002      	add	sp, #8
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	ffffb7ff 	.word	0xffffb7ff

0800c1b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08a      	sub	sp, #40	; 0x28
 800c1b8:	af02      	add	r7, sp, #8
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	1dbb      	adds	r3, r7, #6
 800c1c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2288      	movs	r2, #136	; 0x88
 800c1c8:	589b      	ldr	r3, [r3, r2]
 800c1ca:	2b20      	cmp	r3, #32
 800c1cc:	d000      	beq.n	800c1d0 <HAL_UART_Transmit+0x1c>
 800c1ce:	e088      	b.n	800c2e2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <HAL_UART_Transmit+0x2a>
 800c1d6:	1dbb      	adds	r3, r7, #6
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e080      	b.n	800c2e4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	689a      	ldr	r2, [r3, #8]
 800c1e6:	2380      	movs	r3, #128	; 0x80
 800c1e8:	015b      	lsls	r3, r3, #5
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d109      	bne.n	800c202 <HAL_UART_Transmit+0x4e>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d105      	bne.n	800c202 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	d001      	beq.n	800c202 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e070      	b.n	800c2e4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2290      	movs	r2, #144	; 0x90
 800c206:	2100      	movs	r1, #0
 800c208:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2288      	movs	r2, #136	; 0x88
 800c20e:	2121      	movs	r1, #33	; 0x21
 800c210:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c212:	f7fb fdb9 	bl	8007d88 <HAL_GetTick>
 800c216:	0003      	movs	r3, r0
 800c218:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	1dba      	adds	r2, r7, #6
 800c21e:	2154      	movs	r1, #84	; 0x54
 800c220:	8812      	ldrh	r2, [r2, #0]
 800c222:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	1dba      	adds	r2, r7, #6
 800c228:	2156      	movs	r1, #86	; 0x56
 800c22a:	8812      	ldrh	r2, [r2, #0]
 800c22c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	689a      	ldr	r2, [r3, #8]
 800c232:	2380      	movs	r3, #128	; 0x80
 800c234:	015b      	lsls	r3, r3, #5
 800c236:	429a      	cmp	r2, r3
 800c238:	d108      	bne.n	800c24c <HAL_UART_Transmit+0x98>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d104      	bne.n	800c24c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c242:	2300      	movs	r3, #0
 800c244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	61bb      	str	r3, [r7, #24]
 800c24a:	e003      	b.n	800c254 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c254:	e02c      	b.n	800c2b0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	0013      	movs	r3, r2
 800c260:	2200      	movs	r2, #0
 800c262:	2180      	movs	r1, #128	; 0x80
 800c264:	f000 ff5c 	bl	800d120 <UART_WaitOnFlagUntilTimeout>
 800c268:	1e03      	subs	r3, r0, #0
 800c26a:	d001      	beq.n	800c270 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e039      	b.n	800c2e4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10b      	bne.n	800c28e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	881b      	ldrh	r3, [r3, #0]
 800c27a:	001a      	movs	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	05d2      	lsls	r2, r2, #23
 800c282:	0dd2      	lsrs	r2, r2, #23
 800c284:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	3302      	adds	r3, #2
 800c28a:	61bb      	str	r3, [r7, #24]
 800c28c:	e007      	b.n	800c29e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	3301      	adds	r3, #1
 800c29c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2256      	movs	r2, #86	; 0x56
 800c2a2:	5a9b      	ldrh	r3, [r3, r2]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	b299      	uxth	r1, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2256      	movs	r2, #86	; 0x56
 800c2ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2256      	movs	r2, #86	; 0x56
 800c2b4:	5a9b      	ldrh	r3, [r3, r2]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1cc      	bne.n	800c256 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	0013      	movs	r3, r2
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2140      	movs	r1, #64	; 0x40
 800c2ca:	f000 ff29 	bl	800d120 <UART_WaitOnFlagUntilTimeout>
 800c2ce:	1e03      	subs	r3, r0, #0
 800c2d0:	d001      	beq.n	800c2d6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e006      	b.n	800c2e4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2288      	movs	r2, #136	; 0x88
 800c2da:	2120      	movs	r1, #32
 800c2dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e000      	b.n	800c2e4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800c2e2:	2302      	movs	r3, #2
  }
}
 800c2e4:	0018      	movs	r0, r3
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b008      	add	sp, #32
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08a      	sub	sp, #40	; 0x28
 800c2f0:	af02      	add	r7, sp, #8
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	603b      	str	r3, [r7, #0]
 800c2f8:	1dbb      	adds	r3, r7, #6
 800c2fa:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	228c      	movs	r2, #140	; 0x8c
 800c300:	589b      	ldr	r3, [r3, r2]
 800c302:	2b20      	cmp	r3, #32
 800c304:	d000      	beq.n	800c308 <HAL_UART_Receive+0x1c>
 800c306:	e0cc      	b.n	800c4a2 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <HAL_UART_Receive+0x2a>
 800c30e:	1dbb      	adds	r3, r7, #6
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e0c4      	b.n	800c4a4 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	2380      	movs	r3, #128	; 0x80
 800c320:	015b      	lsls	r3, r3, #5
 800c322:	429a      	cmp	r2, r3
 800c324:	d109      	bne.n	800c33a <HAL_UART_Receive+0x4e>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d105      	bne.n	800c33a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2201      	movs	r2, #1
 800c332:	4013      	ands	r3, r2
 800c334:	d001      	beq.n	800c33a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e0b4      	b.n	800c4a4 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2290      	movs	r2, #144	; 0x90
 800c33e:	2100      	movs	r1, #0
 800c340:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	228c      	movs	r2, #140	; 0x8c
 800c346:	2122      	movs	r1, #34	; 0x22
 800c348:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c350:	f7fb fd1a 	bl	8007d88 <HAL_GetTick>
 800c354:	0003      	movs	r3, r0
 800c356:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	1dba      	adds	r2, r7, #6
 800c35c:	215c      	movs	r1, #92	; 0x5c
 800c35e:	8812      	ldrh	r2, [r2, #0]
 800c360:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	1dba      	adds	r2, r7, #6
 800c366:	215e      	movs	r1, #94	; 0x5e
 800c368:	8812      	ldrh	r2, [r2, #0]
 800c36a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	689a      	ldr	r2, [r3, #8]
 800c370:	2380      	movs	r3, #128	; 0x80
 800c372:	015b      	lsls	r3, r3, #5
 800c374:	429a      	cmp	r2, r3
 800c376:	d10d      	bne.n	800c394 <HAL_UART_Receive+0xa8>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <HAL_UART_Receive+0x9e>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2260      	movs	r2, #96	; 0x60
 800c384:	4949      	ldr	r1, [pc, #292]	; (800c4ac <HAL_UART_Receive+0x1c0>)
 800c386:	5299      	strh	r1, [r3, r2]
 800c388:	e02e      	b.n	800c3e8 <HAL_UART_Receive+0xfc>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2260      	movs	r2, #96	; 0x60
 800c38e:	21ff      	movs	r1, #255	; 0xff
 800c390:	5299      	strh	r1, [r3, r2]
 800c392:	e029      	b.n	800c3e8 <HAL_UART_Receive+0xfc>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10d      	bne.n	800c3b8 <HAL_UART_Receive+0xcc>
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d104      	bne.n	800c3ae <HAL_UART_Receive+0xc2>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2260      	movs	r2, #96	; 0x60
 800c3a8:	21ff      	movs	r1, #255	; 0xff
 800c3aa:	5299      	strh	r1, [r3, r2]
 800c3ac:	e01c      	b.n	800c3e8 <HAL_UART_Receive+0xfc>
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2260      	movs	r2, #96	; 0x60
 800c3b2:	217f      	movs	r1, #127	; 0x7f
 800c3b4:	5299      	strh	r1, [r3, r2]
 800c3b6:	e017      	b.n	800c3e8 <HAL_UART_Receive+0xfc>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	689a      	ldr	r2, [r3, #8]
 800c3bc:	2380      	movs	r3, #128	; 0x80
 800c3be:	055b      	lsls	r3, r3, #21
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d10d      	bne.n	800c3e0 <HAL_UART_Receive+0xf4>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d104      	bne.n	800c3d6 <HAL_UART_Receive+0xea>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2260      	movs	r2, #96	; 0x60
 800c3d0:	217f      	movs	r1, #127	; 0x7f
 800c3d2:	5299      	strh	r1, [r3, r2]
 800c3d4:	e008      	b.n	800c3e8 <HAL_UART_Receive+0xfc>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2260      	movs	r2, #96	; 0x60
 800c3da:	213f      	movs	r1, #63	; 0x3f
 800c3dc:	5299      	strh	r1, [r3, r2]
 800c3de:	e003      	b.n	800c3e8 <HAL_UART_Receive+0xfc>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2260      	movs	r2, #96	; 0x60
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800c3e8:	2312      	movs	r3, #18
 800c3ea:	18fb      	adds	r3, r7, r3
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	2160      	movs	r1, #96	; 0x60
 800c3f0:	5a52      	ldrh	r2, [r2, r1]
 800c3f2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	689a      	ldr	r2, [r3, #8]
 800c3f8:	2380      	movs	r3, #128	; 0x80
 800c3fa:	015b      	lsls	r3, r3, #5
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d108      	bne.n	800c412 <HAL_UART_Receive+0x126>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d104      	bne.n	800c412 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	61bb      	str	r3, [r7, #24]
 800c410:	e003      	b.n	800c41a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c41a:	e036      	b.n	800c48a <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	0013      	movs	r3, r2
 800c426:	2200      	movs	r2, #0
 800c428:	2120      	movs	r1, #32
 800c42a:	f000 fe79 	bl	800d120 <UART_WaitOnFlagUntilTimeout>
 800c42e:	1e03      	subs	r3, r0, #0
 800c430:	d001      	beq.n	800c436 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e036      	b.n	800c4a4 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10e      	bne.n	800c45a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c442:	b29b      	uxth	r3, r3
 800c444:	2212      	movs	r2, #18
 800c446:	18ba      	adds	r2, r7, r2
 800c448:	8812      	ldrh	r2, [r2, #0]
 800c44a:	4013      	ands	r3, r2
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	3302      	adds	r3, #2
 800c456:	61bb      	str	r3, [r7, #24]
 800c458:	e00e      	b.n	800c478 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2212      	movs	r2, #18
 800c464:	18ba      	adds	r2, r7, r2
 800c466:	8812      	ldrh	r2, [r2, #0]
 800c468:	b2d2      	uxtb	r2, r2
 800c46a:	4013      	ands	r3, r2
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	3301      	adds	r3, #1
 800c476:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	225e      	movs	r2, #94	; 0x5e
 800c47c:	5a9b      	ldrh	r3, [r3, r2]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	3b01      	subs	r3, #1
 800c482:	b299      	uxth	r1, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	225e      	movs	r2, #94	; 0x5e
 800c488:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	225e      	movs	r2, #94	; 0x5e
 800c48e:	5a9b      	ldrh	r3, [r3, r2]
 800c490:	b29b      	uxth	r3, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1c2      	bne.n	800c41c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	228c      	movs	r2, #140	; 0x8c
 800c49a:	2120      	movs	r1, #32
 800c49c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	e000      	b.n	800c4a4 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800c4a2:	2302      	movs	r3, #2
  }
}
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	b008      	add	sp, #32
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	000001ff 	.word	0x000001ff

0800c4b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	1dbb      	adds	r3, r7, #6
 800c4bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	228c      	movs	r2, #140	; 0x8c
 800c4c2:	589b      	ldr	r3, [r3, r2]
 800c4c4:	2b20      	cmp	r3, #32
 800c4c6:	d145      	bne.n	800c554 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_UART_Receive_DMA+0x26>
 800c4ce:	1dbb      	adds	r3, r7, #6
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e03d      	b.n	800c556 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	689a      	ldr	r2, [r3, #8]
 800c4de:	2380      	movs	r3, #128	; 0x80
 800c4e0:	015b      	lsls	r3, r3, #5
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d109      	bne.n	800c4fa <HAL_UART_Receive_DMA+0x4a>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	691b      	ldr	r3, [r3, #16]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d105      	bne.n	800c4fa <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	d001      	beq.n	800c4fa <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e02d      	b.n	800c556 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	2380      	movs	r3, #128	; 0x80
 800c508:	041b      	lsls	r3, r3, #16
 800c50a:	4013      	ands	r3, r2
 800c50c:	d019      	beq.n	800c542 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c50e:	f3ef 8310 	mrs	r3, PRIMASK
 800c512:	613b      	str	r3, [r7, #16]
  return(result);
 800c514:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c516:	61fb      	str	r3, [r7, #28]
 800c518:	2301      	movs	r3, #1
 800c51a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	f383 8810 	msr	PRIMASK, r3
}
 800c522:	46c0      	nop			; (mov r8, r8)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2180      	movs	r1, #128	; 0x80
 800c530:	04c9      	lsls	r1, r1, #19
 800c532:	430a      	orrs	r2, r1
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	f383 8810 	msr	PRIMASK, r3
}
 800c540:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c542:	1dbb      	adds	r3, r7, #6
 800c544:	881a      	ldrh	r2, [r3, #0]
 800c546:	68b9      	ldr	r1, [r7, #8]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	0018      	movs	r0, r3
 800c54c:	f000 feb0 	bl	800d2b0 <UART_Start_Receive_DMA>
 800c550:	0003      	movs	r3, r0
 800c552:	e000      	b.n	800c556 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800c554:	2302      	movs	r3, #2
  }
}
 800c556:	0018      	movs	r0, r3
 800c558:	46bd      	mov	sp, r7
 800c55a:	b008      	add	sp, #32
 800c55c:	bd80      	pop	{r7, pc}
	...

0800c560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c560:	b5b0      	push	{r4, r5, r7, lr}
 800c562:	b0aa      	sub	sp, #168	; 0xa8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	22a4      	movs	r2, #164	; 0xa4
 800c570:	18b9      	adds	r1, r7, r2
 800c572:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	20a0      	movs	r0, #160	; 0xa0
 800c57c:	1839      	adds	r1, r7, r0
 800c57e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	249c      	movs	r4, #156	; 0x9c
 800c588:	1939      	adds	r1, r7, r4
 800c58a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c58c:	0011      	movs	r1, r2
 800c58e:	18bb      	adds	r3, r7, r2
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4aa2      	ldr	r2, [pc, #648]	; (800c81c <HAL_UART_IRQHandler+0x2bc>)
 800c594:	4013      	ands	r3, r2
 800c596:	2298      	movs	r2, #152	; 0x98
 800c598:	18bd      	adds	r5, r7, r2
 800c59a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800c59c:	18bb      	adds	r3, r7, r2
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d11a      	bne.n	800c5da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5a4:	187b      	adds	r3, r7, r1
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	d015      	beq.n	800c5da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5ae:	183b      	adds	r3, r7, r0
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	d105      	bne.n	800c5c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5b8:	193b      	adds	r3, r7, r4
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	2380      	movs	r3, #128	; 0x80
 800c5be:	055b      	lsls	r3, r3, #21
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	d00a      	beq.n	800c5da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d100      	bne.n	800c5ce <HAL_UART_IRQHandler+0x6e>
 800c5cc:	e2dc      	b.n	800cb88 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	0010      	movs	r0, r2
 800c5d6:	4798      	blx	r3
      }
      return;
 800c5d8:	e2d6      	b.n	800cb88 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c5da:	2398      	movs	r3, #152	; 0x98
 800c5dc:	18fb      	adds	r3, r7, r3
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d100      	bne.n	800c5e6 <HAL_UART_IRQHandler+0x86>
 800c5e4:	e122      	b.n	800c82c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c5e6:	239c      	movs	r3, #156	; 0x9c
 800c5e8:	18fb      	adds	r3, r7, r3
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a8c      	ldr	r2, [pc, #560]	; (800c820 <HAL_UART_IRQHandler+0x2c0>)
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	d106      	bne.n	800c600 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c5f2:	23a0      	movs	r3, #160	; 0xa0
 800c5f4:	18fb      	adds	r3, r7, r3
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a8a      	ldr	r2, [pc, #552]	; (800c824 <HAL_UART_IRQHandler+0x2c4>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	d100      	bne.n	800c600 <HAL_UART_IRQHandler+0xa0>
 800c5fe:	e115      	b.n	800c82c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c600:	23a4      	movs	r3, #164	; 0xa4
 800c602:	18fb      	adds	r3, r7, r3
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2201      	movs	r2, #1
 800c608:	4013      	ands	r3, r2
 800c60a:	d012      	beq.n	800c632 <HAL_UART_IRQHandler+0xd2>
 800c60c:	23a0      	movs	r3, #160	; 0xa0
 800c60e:	18fb      	adds	r3, r7, r3
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	2380      	movs	r3, #128	; 0x80
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4013      	ands	r3, r2
 800c618:	d00b      	beq.n	800c632 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2201      	movs	r2, #1
 800c620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2290      	movs	r2, #144	; 0x90
 800c626:	589b      	ldr	r3, [r3, r2]
 800c628:	2201      	movs	r2, #1
 800c62a:	431a      	orrs	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2190      	movs	r1, #144	; 0x90
 800c630:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c632:	23a4      	movs	r3, #164	; 0xa4
 800c634:	18fb      	adds	r3, r7, r3
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2202      	movs	r2, #2
 800c63a:	4013      	ands	r3, r2
 800c63c:	d011      	beq.n	800c662 <HAL_UART_IRQHandler+0x102>
 800c63e:	239c      	movs	r3, #156	; 0x9c
 800c640:	18fb      	adds	r3, r7, r3
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2201      	movs	r2, #1
 800c646:	4013      	ands	r3, r2
 800c648:	d00b      	beq.n	800c662 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2202      	movs	r2, #2
 800c650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2290      	movs	r2, #144	; 0x90
 800c656:	589b      	ldr	r3, [r3, r2]
 800c658:	2204      	movs	r2, #4
 800c65a:	431a      	orrs	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2190      	movs	r1, #144	; 0x90
 800c660:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c662:	23a4      	movs	r3, #164	; 0xa4
 800c664:	18fb      	adds	r3, r7, r3
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2204      	movs	r2, #4
 800c66a:	4013      	ands	r3, r2
 800c66c:	d011      	beq.n	800c692 <HAL_UART_IRQHandler+0x132>
 800c66e:	239c      	movs	r3, #156	; 0x9c
 800c670:	18fb      	adds	r3, r7, r3
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2201      	movs	r2, #1
 800c676:	4013      	ands	r3, r2
 800c678:	d00b      	beq.n	800c692 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2204      	movs	r2, #4
 800c680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2290      	movs	r2, #144	; 0x90
 800c686:	589b      	ldr	r3, [r3, r2]
 800c688:	2202      	movs	r2, #2
 800c68a:	431a      	orrs	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2190      	movs	r1, #144	; 0x90
 800c690:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c692:	23a4      	movs	r3, #164	; 0xa4
 800c694:	18fb      	adds	r3, r7, r3
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2208      	movs	r2, #8
 800c69a:	4013      	ands	r3, r2
 800c69c:	d017      	beq.n	800c6ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c69e:	23a0      	movs	r3, #160	; 0xa0
 800c6a0:	18fb      	adds	r3, r7, r3
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	d105      	bne.n	800c6b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6aa:	239c      	movs	r3, #156	; 0x9c
 800c6ac:	18fb      	adds	r3, r7, r3
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a5b      	ldr	r2, [pc, #364]	; (800c820 <HAL_UART_IRQHandler+0x2c0>)
 800c6b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6b4:	d00b      	beq.n	800c6ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2208      	movs	r2, #8
 800c6bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2290      	movs	r2, #144	; 0x90
 800c6c2:	589b      	ldr	r3, [r3, r2]
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2190      	movs	r1, #144	; 0x90
 800c6cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6ce:	23a4      	movs	r3, #164	; 0xa4
 800c6d0:	18fb      	adds	r3, r7, r3
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	2380      	movs	r3, #128	; 0x80
 800c6d6:	011b      	lsls	r3, r3, #4
 800c6d8:	4013      	ands	r3, r2
 800c6da:	d013      	beq.n	800c704 <HAL_UART_IRQHandler+0x1a4>
 800c6dc:	23a0      	movs	r3, #160	; 0xa0
 800c6de:	18fb      	adds	r3, r7, r3
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	2380      	movs	r3, #128	; 0x80
 800c6e4:	04db      	lsls	r3, r3, #19
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	d00c      	beq.n	800c704 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2280      	movs	r2, #128	; 0x80
 800c6f0:	0112      	lsls	r2, r2, #4
 800c6f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2290      	movs	r2, #144	; 0x90
 800c6f8:	589b      	ldr	r3, [r3, r2]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	431a      	orrs	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2190      	movs	r1, #144	; 0x90
 800c702:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2290      	movs	r2, #144	; 0x90
 800c708:	589b      	ldr	r3, [r3, r2]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d100      	bne.n	800c710 <HAL_UART_IRQHandler+0x1b0>
 800c70e:	e23d      	b.n	800cb8c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c710:	23a4      	movs	r3, #164	; 0xa4
 800c712:	18fb      	adds	r3, r7, r3
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2220      	movs	r2, #32
 800c718:	4013      	ands	r3, r2
 800c71a:	d015      	beq.n	800c748 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c71c:	23a0      	movs	r3, #160	; 0xa0
 800c71e:	18fb      	adds	r3, r7, r3
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2220      	movs	r2, #32
 800c724:	4013      	ands	r3, r2
 800c726:	d106      	bne.n	800c736 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c728:	239c      	movs	r3, #156	; 0x9c
 800c72a:	18fb      	adds	r3, r7, r3
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	2380      	movs	r3, #128	; 0x80
 800c730:	055b      	lsls	r3, r3, #21
 800c732:	4013      	ands	r3, r2
 800c734:	d008      	beq.n	800c748 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d004      	beq.n	800c748 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	0010      	movs	r0, r2
 800c746:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2290      	movs	r2, #144	; 0x90
 800c74c:	589b      	ldr	r3, [r3, r2]
 800c74e:	2194      	movs	r1, #148	; 0x94
 800c750:	187a      	adds	r2, r7, r1
 800c752:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	2240      	movs	r2, #64	; 0x40
 800c75c:	4013      	ands	r3, r2
 800c75e:	2b40      	cmp	r3, #64	; 0x40
 800c760:	d004      	beq.n	800c76c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c762:	187b      	adds	r3, r7, r1
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2228      	movs	r2, #40	; 0x28
 800c768:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c76a:	d04c      	beq.n	800c806 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	0018      	movs	r0, r3
 800c770:	f000 fe84 	bl	800d47c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	2240      	movs	r2, #64	; 0x40
 800c77c:	4013      	ands	r3, r2
 800c77e:	2b40      	cmp	r3, #64	; 0x40
 800c780:	d13c      	bne.n	800c7fc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c782:	f3ef 8310 	mrs	r3, PRIMASK
 800c786:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800c788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c78a:	2090      	movs	r0, #144	; 0x90
 800c78c:	183a      	adds	r2, r7, r0
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	2301      	movs	r3, #1
 800c792:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c796:	f383 8810 	msr	PRIMASK, r3
}
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2140      	movs	r1, #64	; 0x40
 800c7a8:	438a      	bics	r2, r1
 800c7aa:	609a      	str	r2, [r3, #8]
 800c7ac:	183b      	adds	r3, r7, r0
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7b4:	f383 8810 	msr	PRIMASK, r3
}
 800c7b8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2280      	movs	r2, #128	; 0x80
 800c7be:	589b      	ldr	r3, [r3, r2]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d016      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2280      	movs	r2, #128	; 0x80
 800c7c8:	589b      	ldr	r3, [r3, r2]
 800c7ca:	4a17      	ldr	r2, [pc, #92]	; (800c828 <HAL_UART_IRQHandler+0x2c8>)
 800c7cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2280      	movs	r2, #128	; 0x80
 800c7d2:	589b      	ldr	r3, [r3, r2]
 800c7d4:	0018      	movs	r0, r3
 800c7d6:	f7fc fbbd 	bl	8008f54 <HAL_DMA_Abort_IT>
 800c7da:	1e03      	subs	r3, r0, #0
 800c7dc:	d01c      	beq.n	800c818 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2280      	movs	r2, #128	; 0x80
 800c7e2:	589b      	ldr	r3, [r3, r2]
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	2180      	movs	r1, #128	; 0x80
 800c7ea:	5852      	ldr	r2, [r2, r1]
 800c7ec:	0010      	movs	r0, r2
 800c7ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7f0:	e012      	b.n	800c818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	0018      	movs	r0, r3
 800c7f6:	f7f9 fedb 	bl	80065b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7fa:	e00d      	b.n	800c818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	0018      	movs	r0, r3
 800c800:	f7f9 fed6 	bl	80065b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c804:	e008      	b.n	800c818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	0018      	movs	r0, r3
 800c80a:	f7f9 fed1 	bl	80065b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2290      	movs	r2, #144	; 0x90
 800c812:	2100      	movs	r1, #0
 800c814:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c816:	e1b9      	b.n	800cb8c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c818:	46c0      	nop			; (mov r8, r8)
    return;
 800c81a:	e1b7      	b.n	800cb8c <HAL_UART_IRQHandler+0x62c>
 800c81c:	0000080f 	.word	0x0000080f
 800c820:	10000001 	.word	0x10000001
 800c824:	04000120 	.word	0x04000120
 800c828:	0800d741 	.word	0x0800d741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c830:	2b01      	cmp	r3, #1
 800c832:	d000      	beq.n	800c836 <HAL_UART_IRQHandler+0x2d6>
 800c834:	e13e      	b.n	800cab4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c836:	23a4      	movs	r3, #164	; 0xa4
 800c838:	18fb      	adds	r3, r7, r3
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2210      	movs	r2, #16
 800c83e:	4013      	ands	r3, r2
 800c840:	d100      	bne.n	800c844 <HAL_UART_IRQHandler+0x2e4>
 800c842:	e137      	b.n	800cab4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c844:	23a0      	movs	r3, #160	; 0xa0
 800c846:	18fb      	adds	r3, r7, r3
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2210      	movs	r2, #16
 800c84c:	4013      	ands	r3, r2
 800c84e:	d100      	bne.n	800c852 <HAL_UART_IRQHandler+0x2f2>
 800c850:	e130      	b.n	800cab4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2210      	movs	r2, #16
 800c858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	2240      	movs	r2, #64	; 0x40
 800c862:	4013      	ands	r3, r2
 800c864:	2b40      	cmp	r3, #64	; 0x40
 800c866:	d000      	beq.n	800c86a <HAL_UART_IRQHandler+0x30a>
 800c868:	e0a4      	b.n	800c9b4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2280      	movs	r2, #128	; 0x80
 800c86e:	589b      	ldr	r3, [r3, r2]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	217e      	movs	r1, #126	; 0x7e
 800c876:	187b      	adds	r3, r7, r1
 800c878:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c87a:	187b      	adds	r3, r7, r1
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d100      	bne.n	800c884 <HAL_UART_IRQHandler+0x324>
 800c882:	e185      	b.n	800cb90 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	225c      	movs	r2, #92	; 0x5c
 800c888:	5a9b      	ldrh	r3, [r3, r2]
 800c88a:	187a      	adds	r2, r7, r1
 800c88c:	8812      	ldrh	r2, [r2, #0]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d300      	bcc.n	800c894 <HAL_UART_IRQHandler+0x334>
 800c892:	e17d      	b.n	800cb90 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	187a      	adds	r2, r7, r1
 800c898:	215e      	movs	r1, #94	; 0x5e
 800c89a:	8812      	ldrh	r2, [r2, #0]
 800c89c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2280      	movs	r2, #128	; 0x80
 800c8a2:	589b      	ldr	r3, [r3, r2]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2220      	movs	r2, #32
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	d170      	bne.n	800c990 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c8b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8b6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8be:	f383 8810 	msr	PRIMASK, r3
}
 800c8c2:	46c0      	nop			; (mov r8, r8)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	49b4      	ldr	r1, [pc, #720]	; (800cba0 <HAL_UART_IRQHandler+0x640>)
 800c8d0:	400a      	ands	r2, r1
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8da:	f383 8810 	msr	PRIMASK, r3
}
 800c8de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800c8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8e8:	677b      	str	r3, [r7, #116]	; 0x74
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f0:	f383 8810 	msr	PRIMASK, r3
}
 800c8f4:	46c0      	nop			; (mov r8, r8)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	689a      	ldr	r2, [r3, #8]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2101      	movs	r1, #1
 800c902:	438a      	bics	r2, r1
 800c904:	609a      	str	r2, [r3, #8]
 800c906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c908:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c90c:	f383 8810 	msr	PRIMASK, r3
}
 800c910:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c912:	f3ef 8310 	mrs	r3, PRIMASK
 800c916:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800c918:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c91a:	673b      	str	r3, [r7, #112]	; 0x70
 800c91c:	2301      	movs	r3, #1
 800c91e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c922:	f383 8810 	msr	PRIMASK, r3
}
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	689a      	ldr	r2, [r3, #8]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2140      	movs	r1, #64	; 0x40
 800c934:	438a      	bics	r2, r1
 800c936:	609a      	str	r2, [r3, #8]
 800c938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c93a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c93e:	f383 8810 	msr	PRIMASK, r3
}
 800c942:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	228c      	movs	r2, #140	; 0x8c
 800c948:	2120      	movs	r1, #32
 800c94a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c952:	f3ef 8310 	mrs	r3, PRIMASK
 800c956:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800c958:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c95a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c95c:	2301      	movs	r3, #1
 800c95e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c962:	f383 8810 	msr	PRIMASK, r3
}
 800c966:	46c0      	nop			; (mov r8, r8)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2110      	movs	r1, #16
 800c974:	438a      	bics	r2, r1
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c97a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c97e:	f383 8810 	msr	PRIMASK, r3
}
 800c982:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2280      	movs	r2, #128	; 0x80
 800c988:	589b      	ldr	r3, [r3, r2]
 800c98a:	0018      	movs	r0, r3
 800c98c:	f7fc fa80 	bl	8008e90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2202      	movs	r2, #2
 800c994:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	225c      	movs	r2, #92	; 0x5c
 800c99a:	5a9a      	ldrh	r2, [r3, r2]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	215e      	movs	r1, #94	; 0x5e
 800c9a0:	5a5b      	ldrh	r3, [r3, r1]
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	0011      	movs	r1, r2
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	f000 f905 	bl	800cbbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9b2:	e0ed      	b.n	800cb90 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	225c      	movs	r2, #92	; 0x5c
 800c9b8:	5a99      	ldrh	r1, [r3, r2]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	225e      	movs	r2, #94	; 0x5e
 800c9be:	5a9b      	ldrh	r3, [r3, r2]
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	208e      	movs	r0, #142	; 0x8e
 800c9c4:	183b      	adds	r3, r7, r0
 800c9c6:	1a8a      	subs	r2, r1, r2
 800c9c8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	225e      	movs	r2, #94	; 0x5e
 800c9ce:	5a9b      	ldrh	r3, [r3, r2]
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d100      	bne.n	800c9d8 <HAL_UART_IRQHandler+0x478>
 800c9d6:	e0dd      	b.n	800cb94 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800c9d8:	183b      	adds	r3, r7, r0
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d100      	bne.n	800c9e2 <HAL_UART_IRQHandler+0x482>
 800c9e0:	e0d8      	b.n	800cb94 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9ea:	2488      	movs	r4, #136	; 0x88
 800c9ec:	193a      	adds	r2, r7, r4
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	f383 8810 	msr	PRIMASK, r3
}
 800c9fa:	46c0      	nop			; (mov r8, r8)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4967      	ldr	r1, [pc, #412]	; (800cba4 <HAL_UART_IRQHandler+0x644>)
 800ca08:	400a      	ands	r2, r1
 800ca0a:	601a      	str	r2, [r3, #0]
 800ca0c:	193b      	adds	r3, r7, r4
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f383 8810 	msr	PRIMASK, r3
}
 800ca18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca1e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ca20:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca22:	2484      	movs	r4, #132	; 0x84
 800ca24:	193a      	adds	r2, r7, r4
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	2301      	movs	r3, #1
 800ca2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	f383 8810 	msr	PRIMASK, r3
}
 800ca32:	46c0      	nop			; (mov r8, r8)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689a      	ldr	r2, [r3, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	495a      	ldr	r1, [pc, #360]	; (800cba8 <HAL_UART_IRQHandler+0x648>)
 800ca40:	400a      	ands	r2, r1
 800ca42:	609a      	str	r2, [r3, #8]
 800ca44:	193b      	adds	r3, r7, r4
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	f383 8810 	msr	PRIMASK, r3
}
 800ca50:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	228c      	movs	r2, #140	; 0x8c
 800ca56:	2120      	movs	r1, #32
 800ca58:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca66:	f3ef 8310 	mrs	r3, PRIMASK
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca6e:	2480      	movs	r4, #128	; 0x80
 800ca70:	193a      	adds	r2, r7, r4
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	2301      	movs	r3, #1
 800ca76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	f383 8810 	msr	PRIMASK, r3
}
 800ca7e:	46c0      	nop			; (mov r8, r8)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2110      	movs	r1, #16
 800ca8c:	438a      	bics	r2, r1
 800ca8e:	601a      	str	r2, [r3, #0]
 800ca90:	193b      	adds	r3, r7, r4
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	f383 8810 	msr	PRIMASK, r3
}
 800ca9c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2202      	movs	r2, #2
 800caa2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800caa4:	183b      	adds	r3, r7, r0
 800caa6:	881a      	ldrh	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	0011      	movs	r1, r2
 800caac:	0018      	movs	r0, r3
 800caae:	f000 f885 	bl	800cbbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cab2:	e06f      	b.n	800cb94 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cab4:	23a4      	movs	r3, #164	; 0xa4
 800cab6:	18fb      	adds	r3, r7, r3
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	2380      	movs	r3, #128	; 0x80
 800cabc:	035b      	lsls	r3, r3, #13
 800cabe:	4013      	ands	r3, r2
 800cac0:	d010      	beq.n	800cae4 <HAL_UART_IRQHandler+0x584>
 800cac2:	239c      	movs	r3, #156	; 0x9c
 800cac4:	18fb      	adds	r3, r7, r3
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	2380      	movs	r3, #128	; 0x80
 800caca:	03db      	lsls	r3, r3, #15
 800cacc:	4013      	ands	r3, r2
 800cace:	d009      	beq.n	800cae4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2280      	movs	r2, #128	; 0x80
 800cad6:	0352      	lsls	r2, r2, #13
 800cad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	0018      	movs	r0, r3
 800cade:	f000 fe72 	bl	800d7c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cae2:	e05a      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cae4:	23a4      	movs	r3, #164	; 0xa4
 800cae6:	18fb      	adds	r3, r7, r3
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2280      	movs	r2, #128	; 0x80
 800caec:	4013      	ands	r3, r2
 800caee:	d016      	beq.n	800cb1e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800caf0:	23a0      	movs	r3, #160	; 0xa0
 800caf2:	18fb      	adds	r3, r7, r3
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2280      	movs	r2, #128	; 0x80
 800caf8:	4013      	ands	r3, r2
 800cafa:	d106      	bne.n	800cb0a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cafc:	239c      	movs	r3, #156	; 0x9c
 800cafe:	18fb      	adds	r3, r7, r3
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	2380      	movs	r3, #128	; 0x80
 800cb04:	041b      	lsls	r3, r3, #16
 800cb06:	4013      	ands	r3, r2
 800cb08:	d009      	beq.n	800cb1e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d042      	beq.n	800cb98 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	0010      	movs	r0, r2
 800cb1a:	4798      	blx	r3
    }
    return;
 800cb1c:	e03c      	b.n	800cb98 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb1e:	23a4      	movs	r3, #164	; 0xa4
 800cb20:	18fb      	adds	r3, r7, r3
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2240      	movs	r2, #64	; 0x40
 800cb26:	4013      	ands	r3, r2
 800cb28:	d00a      	beq.n	800cb40 <HAL_UART_IRQHandler+0x5e0>
 800cb2a:	23a0      	movs	r3, #160	; 0xa0
 800cb2c:	18fb      	adds	r3, r7, r3
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2240      	movs	r2, #64	; 0x40
 800cb32:	4013      	ands	r3, r2
 800cb34:	d004      	beq.n	800cb40 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	0018      	movs	r0, r3
 800cb3a:	f000 fe18 	bl	800d76e <UART_EndTransmit_IT>
    return;
 800cb3e:	e02c      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb40:	23a4      	movs	r3, #164	; 0xa4
 800cb42:	18fb      	adds	r3, r7, r3
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	2380      	movs	r3, #128	; 0x80
 800cb48:	041b      	lsls	r3, r3, #16
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	d00b      	beq.n	800cb66 <HAL_UART_IRQHandler+0x606>
 800cb4e:	23a0      	movs	r3, #160	; 0xa0
 800cb50:	18fb      	adds	r3, r7, r3
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	2380      	movs	r3, #128	; 0x80
 800cb56:	05db      	lsls	r3, r3, #23
 800cb58:	4013      	ands	r3, r2
 800cb5a:	d004      	beq.n	800cb66 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	0018      	movs	r0, r3
 800cb60:	f000 fe41 	bl	800d7e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb64:	e019      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb66:	23a4      	movs	r3, #164	; 0xa4
 800cb68:	18fb      	adds	r3, r7, r3
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	2380      	movs	r3, #128	; 0x80
 800cb6e:	045b      	lsls	r3, r3, #17
 800cb70:	4013      	ands	r3, r2
 800cb72:	d012      	beq.n	800cb9a <HAL_UART_IRQHandler+0x63a>
 800cb74:	23a0      	movs	r3, #160	; 0xa0
 800cb76:	18fb      	adds	r3, r7, r3
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	da0d      	bge.n	800cb9a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	0018      	movs	r0, r3
 800cb82:	f000 fe28 	bl	800d7d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb86:	e008      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
      return;
 800cb88:	46c0      	nop			; (mov r8, r8)
 800cb8a:	e006      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
    return;
 800cb8c:	46c0      	nop			; (mov r8, r8)
 800cb8e:	e004      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
      return;
 800cb90:	46c0      	nop			; (mov r8, r8)
 800cb92:	e002      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
      return;
 800cb94:	46c0      	nop			; (mov r8, r8)
 800cb96:	e000      	b.n	800cb9a <HAL_UART_IRQHandler+0x63a>
    return;
 800cb98:	46c0      	nop			; (mov r8, r8)
  }
}
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	b02a      	add	sp, #168	; 0xa8
 800cb9e:	bdb0      	pop	{r4, r5, r7, pc}
 800cba0:	fffffeff 	.word	0xfffffeff
 800cba4:	fffffedf 	.word	0xfffffedf
 800cba8:	effffffe 	.word	0xeffffffe

0800cbac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cbb4:	46c0      	nop			; (mov r8, r8)
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	b002      	add	sp, #8
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	000a      	movs	r2, r1
 800cbc6:	1cbb      	adds	r3, r7, #2
 800cbc8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbca:	46c0      	nop			; (mov r8, r8)
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	b002      	add	sp, #8
 800cbd0:	bd80      	pop	{r7, pc}
	...

0800cbd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbdc:	231a      	movs	r3, #26
 800cbde:	18fb      	adds	r3, r7, r3
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	689a      	ldr	r2, [r3, #8]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	431a      	orrs	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	69db      	ldr	r3, [r3, #28]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4abc      	ldr	r2, [pc, #752]	; (800cef4 <UART_SetConfig+0x320>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	0019      	movs	r1, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	69fa      	ldr	r2, [r7, #28]
 800cc0e:	430a      	orrs	r2, r1
 800cc10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	4ab7      	ldr	r2, [pc, #732]	; (800cef8 <UART_SetConfig+0x324>)
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	0019      	movs	r1, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68da      	ldr	r2, [r3, #12]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	69fa      	ldr	r2, [r7, #28]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	4aae      	ldr	r2, [pc, #696]	; (800cefc <UART_SetConfig+0x328>)
 800cc42:	4013      	ands	r3, r2
 800cc44:	0019      	movs	r1, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	69fa      	ldr	r2, [r7, #28]
 800cc4c:	430a      	orrs	r2, r1
 800cc4e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc56:	220f      	movs	r2, #15
 800cc58:	4393      	bics	r3, r2
 800cc5a:	0019      	movs	r1, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	430a      	orrs	r2, r1
 800cc66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4aa4      	ldr	r2, [pc, #656]	; (800cf00 <UART_SetConfig+0x32c>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d127      	bne.n	800ccc2 <UART_SetConfig+0xee>
 800cc72:	4ba4      	ldr	r3, [pc, #656]	; (800cf04 <UART_SetConfig+0x330>)
 800cc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc76:	2203      	movs	r2, #3
 800cc78:	4013      	ands	r3, r2
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d017      	beq.n	800ccae <UART_SetConfig+0xda>
 800cc7e:	d81b      	bhi.n	800ccb8 <UART_SetConfig+0xe4>
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d00a      	beq.n	800cc9a <UART_SetConfig+0xc6>
 800cc84:	d818      	bhi.n	800ccb8 <UART_SetConfig+0xe4>
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d002      	beq.n	800cc90 <UART_SetConfig+0xbc>
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d00a      	beq.n	800cca4 <UART_SetConfig+0xd0>
 800cc8e:	e013      	b.n	800ccb8 <UART_SetConfig+0xe4>
 800cc90:	231b      	movs	r3, #27
 800cc92:	18fb      	adds	r3, r7, r3
 800cc94:	2200      	movs	r2, #0
 800cc96:	701a      	strb	r2, [r3, #0]
 800cc98:	e058      	b.n	800cd4c <UART_SetConfig+0x178>
 800cc9a:	231b      	movs	r3, #27
 800cc9c:	18fb      	adds	r3, r7, r3
 800cc9e:	2202      	movs	r2, #2
 800cca0:	701a      	strb	r2, [r3, #0]
 800cca2:	e053      	b.n	800cd4c <UART_SetConfig+0x178>
 800cca4:	231b      	movs	r3, #27
 800cca6:	18fb      	adds	r3, r7, r3
 800cca8:	2204      	movs	r2, #4
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	e04e      	b.n	800cd4c <UART_SetConfig+0x178>
 800ccae:	231b      	movs	r3, #27
 800ccb0:	18fb      	adds	r3, r7, r3
 800ccb2:	2208      	movs	r2, #8
 800ccb4:	701a      	strb	r2, [r3, #0]
 800ccb6:	e049      	b.n	800cd4c <UART_SetConfig+0x178>
 800ccb8:	231b      	movs	r3, #27
 800ccba:	18fb      	adds	r3, r7, r3
 800ccbc:	2210      	movs	r2, #16
 800ccbe:	701a      	strb	r2, [r3, #0]
 800ccc0:	e044      	b.n	800cd4c <UART_SetConfig+0x178>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a90      	ldr	r2, [pc, #576]	; (800cf08 <UART_SetConfig+0x334>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d127      	bne.n	800cd1c <UART_SetConfig+0x148>
 800cccc:	4b8d      	ldr	r3, [pc, #564]	; (800cf04 <UART_SetConfig+0x330>)
 800ccce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd0:	220c      	movs	r2, #12
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	2b0c      	cmp	r3, #12
 800ccd6:	d017      	beq.n	800cd08 <UART_SetConfig+0x134>
 800ccd8:	d81b      	bhi.n	800cd12 <UART_SetConfig+0x13e>
 800ccda:	2b08      	cmp	r3, #8
 800ccdc:	d00a      	beq.n	800ccf4 <UART_SetConfig+0x120>
 800ccde:	d818      	bhi.n	800cd12 <UART_SetConfig+0x13e>
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d002      	beq.n	800ccea <UART_SetConfig+0x116>
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d00a      	beq.n	800ccfe <UART_SetConfig+0x12a>
 800cce8:	e013      	b.n	800cd12 <UART_SetConfig+0x13e>
 800ccea:	231b      	movs	r3, #27
 800ccec:	18fb      	adds	r3, r7, r3
 800ccee:	2200      	movs	r2, #0
 800ccf0:	701a      	strb	r2, [r3, #0]
 800ccf2:	e02b      	b.n	800cd4c <UART_SetConfig+0x178>
 800ccf4:	231b      	movs	r3, #27
 800ccf6:	18fb      	adds	r3, r7, r3
 800ccf8:	2202      	movs	r2, #2
 800ccfa:	701a      	strb	r2, [r3, #0]
 800ccfc:	e026      	b.n	800cd4c <UART_SetConfig+0x178>
 800ccfe:	231b      	movs	r3, #27
 800cd00:	18fb      	adds	r3, r7, r3
 800cd02:	2204      	movs	r2, #4
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e021      	b.n	800cd4c <UART_SetConfig+0x178>
 800cd08:	231b      	movs	r3, #27
 800cd0a:	18fb      	adds	r3, r7, r3
 800cd0c:	2208      	movs	r2, #8
 800cd0e:	701a      	strb	r2, [r3, #0]
 800cd10:	e01c      	b.n	800cd4c <UART_SetConfig+0x178>
 800cd12:	231b      	movs	r3, #27
 800cd14:	18fb      	adds	r3, r7, r3
 800cd16:	2210      	movs	r2, #16
 800cd18:	701a      	strb	r2, [r3, #0]
 800cd1a:	e017      	b.n	800cd4c <UART_SetConfig+0x178>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a7a      	ldr	r2, [pc, #488]	; (800cf0c <UART_SetConfig+0x338>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d104      	bne.n	800cd30 <UART_SetConfig+0x15c>
 800cd26:	231b      	movs	r3, #27
 800cd28:	18fb      	adds	r3, r7, r3
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	701a      	strb	r2, [r3, #0]
 800cd2e:	e00d      	b.n	800cd4c <UART_SetConfig+0x178>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a76      	ldr	r2, [pc, #472]	; (800cf10 <UART_SetConfig+0x33c>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d104      	bne.n	800cd44 <UART_SetConfig+0x170>
 800cd3a:	231b      	movs	r3, #27
 800cd3c:	18fb      	adds	r3, r7, r3
 800cd3e:	2200      	movs	r2, #0
 800cd40:	701a      	strb	r2, [r3, #0]
 800cd42:	e003      	b.n	800cd4c <UART_SetConfig+0x178>
 800cd44:	231b      	movs	r3, #27
 800cd46:	18fb      	adds	r3, r7, r3
 800cd48:	2210      	movs	r2, #16
 800cd4a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	69da      	ldr	r2, [r3, #28]
 800cd50:	2380      	movs	r3, #128	; 0x80
 800cd52:	021b      	lsls	r3, r3, #8
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d000      	beq.n	800cd5a <UART_SetConfig+0x186>
 800cd58:	e065      	b.n	800ce26 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800cd5a:	231b      	movs	r3, #27
 800cd5c:	18fb      	adds	r3, r7, r3
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b08      	cmp	r3, #8
 800cd62:	d015      	beq.n	800cd90 <UART_SetConfig+0x1bc>
 800cd64:	dc18      	bgt.n	800cd98 <UART_SetConfig+0x1c4>
 800cd66:	2b04      	cmp	r3, #4
 800cd68:	d00d      	beq.n	800cd86 <UART_SetConfig+0x1b2>
 800cd6a:	dc15      	bgt.n	800cd98 <UART_SetConfig+0x1c4>
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <UART_SetConfig+0x1a2>
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d005      	beq.n	800cd80 <UART_SetConfig+0x1ac>
 800cd74:	e010      	b.n	800cd98 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd76:	f7fe f805 	bl	800ad84 <HAL_RCC_GetPCLK1Freq>
 800cd7a:	0003      	movs	r3, r0
 800cd7c:	617b      	str	r3, [r7, #20]
        break;
 800cd7e:	e012      	b.n	800cda6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd80:	4b64      	ldr	r3, [pc, #400]	; (800cf14 <UART_SetConfig+0x340>)
 800cd82:	617b      	str	r3, [r7, #20]
        break;
 800cd84:	e00f      	b.n	800cda6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd86:	f7fd ff71 	bl	800ac6c <HAL_RCC_GetSysClockFreq>
 800cd8a:	0003      	movs	r3, r0
 800cd8c:	617b      	str	r3, [r7, #20]
        break;
 800cd8e:	e00a      	b.n	800cda6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd90:	2380      	movs	r3, #128	; 0x80
 800cd92:	021b      	lsls	r3, r3, #8
 800cd94:	617b      	str	r3, [r7, #20]
        break;
 800cd96:	e006      	b.n	800cda6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cd9c:	231a      	movs	r3, #26
 800cd9e:	18fb      	adds	r3, r7, r3
 800cda0:	2201      	movs	r2, #1
 800cda2:	701a      	strb	r2, [r3, #0]
        break;
 800cda4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d100      	bne.n	800cdae <UART_SetConfig+0x1da>
 800cdac:	e08d      	b.n	800ceca <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdb2:	4b59      	ldr	r3, [pc, #356]	; (800cf18 <UART_SetConfig+0x344>)
 800cdb4:	0052      	lsls	r2, r2, #1
 800cdb6:	5ad3      	ldrh	r3, [r2, r3]
 800cdb8:	0019      	movs	r1, r3
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f7f3 f9c0 	bl	8000140 <__udivsi3>
 800cdc0:	0003      	movs	r3, r0
 800cdc2:	005a      	lsls	r2, r3, #1
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	085b      	lsrs	r3, r3, #1
 800cdca:	18d2      	adds	r2, r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	0010      	movs	r0, r2
 800cdd4:	f7f3 f9b4 	bl	8000140 <__udivsi3>
 800cdd8:	0003      	movs	r3, r0
 800cdda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	2b0f      	cmp	r3, #15
 800cde0:	d91c      	bls.n	800ce1c <UART_SetConfig+0x248>
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	2380      	movs	r3, #128	; 0x80
 800cde6:	025b      	lsls	r3, r3, #9
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d217      	bcs.n	800ce1c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	200e      	movs	r0, #14
 800cdf2:	183b      	adds	r3, r7, r0
 800cdf4:	210f      	movs	r1, #15
 800cdf6:	438a      	bics	r2, r1
 800cdf8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	085b      	lsrs	r3, r3, #1
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	2207      	movs	r2, #7
 800ce02:	4013      	ands	r3, r2
 800ce04:	b299      	uxth	r1, r3
 800ce06:	183b      	adds	r3, r7, r0
 800ce08:	183a      	adds	r2, r7, r0
 800ce0a:	8812      	ldrh	r2, [r2, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	183a      	adds	r2, r7, r0
 800ce16:	8812      	ldrh	r2, [r2, #0]
 800ce18:	60da      	str	r2, [r3, #12]
 800ce1a:	e056      	b.n	800ceca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800ce1c:	231a      	movs	r3, #26
 800ce1e:	18fb      	adds	r3, r7, r3
 800ce20:	2201      	movs	r2, #1
 800ce22:	701a      	strb	r2, [r3, #0]
 800ce24:	e051      	b.n	800ceca <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce26:	231b      	movs	r3, #27
 800ce28:	18fb      	adds	r3, r7, r3
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b08      	cmp	r3, #8
 800ce2e:	d015      	beq.n	800ce5c <UART_SetConfig+0x288>
 800ce30:	dc18      	bgt.n	800ce64 <UART_SetConfig+0x290>
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	d00d      	beq.n	800ce52 <UART_SetConfig+0x27e>
 800ce36:	dc15      	bgt.n	800ce64 <UART_SetConfig+0x290>
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <UART_SetConfig+0x26e>
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d005      	beq.n	800ce4c <UART_SetConfig+0x278>
 800ce40:	e010      	b.n	800ce64 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce42:	f7fd ff9f 	bl	800ad84 <HAL_RCC_GetPCLK1Freq>
 800ce46:	0003      	movs	r3, r0
 800ce48:	617b      	str	r3, [r7, #20]
        break;
 800ce4a:	e012      	b.n	800ce72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce4c:	4b31      	ldr	r3, [pc, #196]	; (800cf14 <UART_SetConfig+0x340>)
 800ce4e:	617b      	str	r3, [r7, #20]
        break;
 800ce50:	e00f      	b.n	800ce72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce52:	f7fd ff0b 	bl	800ac6c <HAL_RCC_GetSysClockFreq>
 800ce56:	0003      	movs	r3, r0
 800ce58:	617b      	str	r3, [r7, #20]
        break;
 800ce5a:	e00a      	b.n	800ce72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce5c:	2380      	movs	r3, #128	; 0x80
 800ce5e:	021b      	lsls	r3, r3, #8
 800ce60:	617b      	str	r3, [r7, #20]
        break;
 800ce62:	e006      	b.n	800ce72 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800ce64:	2300      	movs	r3, #0
 800ce66:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ce68:	231a      	movs	r3, #26
 800ce6a:	18fb      	adds	r3, r7, r3
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	701a      	strb	r2, [r3, #0]
        break;
 800ce70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d028      	beq.n	800ceca <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce7c:	4b26      	ldr	r3, [pc, #152]	; (800cf18 <UART_SetConfig+0x344>)
 800ce7e:	0052      	lsls	r2, r2, #1
 800ce80:	5ad3      	ldrh	r3, [r2, r3]
 800ce82:	0019      	movs	r1, r3
 800ce84:	6978      	ldr	r0, [r7, #20]
 800ce86:	f7f3 f95b 	bl	8000140 <__udivsi3>
 800ce8a:	0003      	movs	r3, r0
 800ce8c:	001a      	movs	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	085b      	lsrs	r3, r3, #1
 800ce94:	18d2      	adds	r2, r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	0019      	movs	r1, r3
 800ce9c:	0010      	movs	r0, r2
 800ce9e:	f7f3 f94f 	bl	8000140 <__udivsi3>
 800cea2:	0003      	movs	r3, r0
 800cea4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	2b0f      	cmp	r3, #15
 800ceaa:	d90a      	bls.n	800cec2 <UART_SetConfig+0x2ee>
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	2380      	movs	r3, #128	; 0x80
 800ceb0:	025b      	lsls	r3, r3, #9
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d205      	bcs.n	800cec2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	60da      	str	r2, [r3, #12]
 800cec0:	e003      	b.n	800ceca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800cec2:	231a      	movs	r3, #26
 800cec4:	18fb      	adds	r3, r7, r3
 800cec6:	2201      	movs	r2, #1
 800cec8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	226a      	movs	r2, #106	; 0x6a
 800cece:	2101      	movs	r1, #1
 800ced0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2268      	movs	r2, #104	; 0x68
 800ced6:	2101      	movs	r1, #1
 800ced8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cee6:	231a      	movs	r3, #26
 800cee8:	18fb      	adds	r3, r7, r3
 800ceea:	781b      	ldrb	r3, [r3, #0]
}
 800ceec:	0018      	movs	r0, r3
 800ceee:	46bd      	mov	sp, r7
 800cef0:	b008      	add	sp, #32
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	cfff69f3 	.word	0xcfff69f3
 800cef8:	ffffcfff 	.word	0xffffcfff
 800cefc:	11fff4ff 	.word	0x11fff4ff
 800cf00:	40013800 	.word	0x40013800
 800cf04:	40021000 	.word	0x40021000
 800cf08:	40004400 	.word	0x40004400
 800cf0c:	40004800 	.word	0x40004800
 800cf10:	40004c00 	.word	0x40004c00
 800cf14:	00f42400 	.word	0x00f42400
 800cf18:	08017360 	.word	0x08017360

0800cf1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf28:	2201      	movs	r2, #1
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	d00b      	beq.n	800cf46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	4a4a      	ldr	r2, [pc, #296]	; (800d060 <UART_AdvFeatureConfig+0x144>)
 800cf36:	4013      	ands	r3, r2
 800cf38:	0019      	movs	r1, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	430a      	orrs	r2, r1
 800cf44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	d00b      	beq.n	800cf68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	4a43      	ldr	r2, [pc, #268]	; (800d064 <UART_AdvFeatureConfig+0x148>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	0019      	movs	r1, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	430a      	orrs	r2, r1
 800cf66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6c:	2204      	movs	r2, #4
 800cf6e:	4013      	ands	r3, r2
 800cf70:	d00b      	beq.n	800cf8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	4a3b      	ldr	r2, [pc, #236]	; (800d068 <UART_AdvFeatureConfig+0x14c>)
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	0019      	movs	r1, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	430a      	orrs	r2, r1
 800cf88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf8e:	2208      	movs	r2, #8
 800cf90:	4013      	ands	r3, r2
 800cf92:	d00b      	beq.n	800cfac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	4a34      	ldr	r2, [pc, #208]	; (800d06c <UART_AdvFeatureConfig+0x150>)
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	0019      	movs	r1, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	430a      	orrs	r2, r1
 800cfaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb0:	2210      	movs	r2, #16
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	d00b      	beq.n	800cfce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	4a2c      	ldr	r2, [pc, #176]	; (800d070 <UART_AdvFeatureConfig+0x154>)
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	0019      	movs	r1, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	430a      	orrs	r2, r1
 800cfcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	d00b      	beq.n	800cff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	4a25      	ldr	r2, [pc, #148]	; (800d074 <UART_AdvFeatureConfig+0x158>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	0019      	movs	r1, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	430a      	orrs	r2, r1
 800cfee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff4:	2240      	movs	r2, #64	; 0x40
 800cff6:	4013      	ands	r3, r2
 800cff8:	d01d      	beq.n	800d036 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	4a1d      	ldr	r2, [pc, #116]	; (800d078 <UART_AdvFeatureConfig+0x15c>)
 800d002:	4013      	ands	r3, r2
 800d004:	0019      	movs	r1, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	430a      	orrs	r2, r1
 800d010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d016:	2380      	movs	r3, #128	; 0x80
 800d018:	035b      	lsls	r3, r3, #13
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d10b      	bne.n	800d036 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	4a15      	ldr	r2, [pc, #84]	; (800d07c <UART_AdvFeatureConfig+0x160>)
 800d026:	4013      	ands	r3, r2
 800d028:	0019      	movs	r1, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03a:	2280      	movs	r2, #128	; 0x80
 800d03c:	4013      	ands	r3, r2
 800d03e:	d00b      	beq.n	800d058 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	4a0e      	ldr	r2, [pc, #56]	; (800d080 <UART_AdvFeatureConfig+0x164>)
 800d048:	4013      	ands	r3, r2
 800d04a:	0019      	movs	r1, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	430a      	orrs	r2, r1
 800d056:	605a      	str	r2, [r3, #4]
  }
}
 800d058:	46c0      	nop			; (mov r8, r8)
 800d05a:	46bd      	mov	sp, r7
 800d05c:	b002      	add	sp, #8
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	fffdffff 	.word	0xfffdffff
 800d064:	fffeffff 	.word	0xfffeffff
 800d068:	fffbffff 	.word	0xfffbffff
 800d06c:	ffff7fff 	.word	0xffff7fff
 800d070:	ffffefff 	.word	0xffffefff
 800d074:	ffffdfff 	.word	0xffffdfff
 800d078:	ffefffff 	.word	0xffefffff
 800d07c:	ff9fffff 	.word	0xff9fffff
 800d080:	fff7ffff 	.word	0xfff7ffff

0800d084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af02      	add	r7, sp, #8
 800d08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2290      	movs	r2, #144	; 0x90
 800d090:	2100      	movs	r1, #0
 800d092:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d094:	f7fa fe78 	bl	8007d88 <HAL_GetTick>
 800d098:	0003      	movs	r3, r0
 800d09a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2208      	movs	r2, #8
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	2b08      	cmp	r3, #8
 800d0a8:	d10c      	bne.n	800d0c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2280      	movs	r2, #128	; 0x80
 800d0ae:	0391      	lsls	r1, r2, #14
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	4a1a      	ldr	r2, [pc, #104]	; (800d11c <UART_CheckIdleState+0x98>)
 800d0b4:	9200      	str	r2, [sp, #0]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f000 f832 	bl	800d120 <UART_WaitOnFlagUntilTimeout>
 800d0bc:	1e03      	subs	r3, r0, #0
 800d0be:	d001      	beq.n	800d0c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e026      	b.n	800d112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d10c      	bne.n	800d0ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2280      	movs	r2, #128	; 0x80
 800d0d6:	03d1      	lsls	r1, r2, #15
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	4a10      	ldr	r2, [pc, #64]	; (800d11c <UART_CheckIdleState+0x98>)
 800d0dc:	9200      	str	r2, [sp, #0]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f000 f81e 	bl	800d120 <UART_WaitOnFlagUntilTimeout>
 800d0e4:	1e03      	subs	r3, r0, #0
 800d0e6:	d001      	beq.n	800d0ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	e012      	b.n	800d112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2288      	movs	r2, #136	; 0x88
 800d0f0:	2120      	movs	r1, #32
 800d0f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	228c      	movs	r2, #140	; 0x8c
 800d0f8:	2120      	movs	r1, #32
 800d0fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2284      	movs	r2, #132	; 0x84
 800d10c:	2100      	movs	r1, #0
 800d10e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	0018      	movs	r0, r3
 800d114:	46bd      	mov	sp, r7
 800d116:	b004      	add	sp, #16
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	46c0      	nop			; (mov r8, r8)
 800d11c:	01ffffff 	.word	0x01ffffff

0800d120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b094      	sub	sp, #80	; 0x50
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	603b      	str	r3, [r7, #0]
 800d12c:	1dfb      	adds	r3, r7, #7
 800d12e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d130:	e0a7      	b.n	800d282 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d134:	3301      	adds	r3, #1
 800d136:	d100      	bne.n	800d13a <UART_WaitOnFlagUntilTimeout+0x1a>
 800d138:	e0a3      	b.n	800d282 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d13a:	f7fa fe25 	bl	8007d88 <HAL_GetTick>
 800d13e:	0002      	movs	r2, r0
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d146:	429a      	cmp	r2, r3
 800d148:	d302      	bcc.n	800d150 <UART_WaitOnFlagUntilTimeout+0x30>
 800d14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d13f      	bne.n	800d1d0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d150:	f3ef 8310 	mrs	r3, PRIMASK
 800d154:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d158:	647b      	str	r3, [r7, #68]	; 0x44
 800d15a:	2301      	movs	r3, #1
 800d15c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	f383 8810 	msr	PRIMASK, r3
}
 800d164:	46c0      	nop			; (mov r8, r8)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	494e      	ldr	r1, [pc, #312]	; (800d2ac <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d172:	400a      	ands	r2, r1
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d178:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	f383 8810 	msr	PRIMASK, r3
}
 800d180:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d182:	f3ef 8310 	mrs	r3, PRIMASK
 800d186:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d18a:	643b      	str	r3, [r7, #64]	; 0x40
 800d18c:	2301      	movs	r3, #1
 800d18e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	f383 8810 	msr	PRIMASK, r3
}
 800d196:	46c0      	nop			; (mov r8, r8)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	689a      	ldr	r2, [r3, #8]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	438a      	bics	r2, r1
 800d1a6:	609a      	str	r2, [r3, #8]
 800d1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ae:	f383 8810 	msr	PRIMASK, r3
}
 800d1b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2288      	movs	r2, #136	; 0x88
 800d1b8:	2120      	movs	r1, #32
 800d1ba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	228c      	movs	r2, #140	; 0x8c
 800d1c0:	2120      	movs	r1, #32
 800d1c2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2284      	movs	r2, #132	; 0x84
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e069      	b.n	800d2a4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2204      	movs	r2, #4
 800d1d8:	4013      	ands	r3, r2
 800d1da:	d052      	beq.n	800d282 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	69da      	ldr	r2, [r3, #28]
 800d1e2:	2380      	movs	r3, #128	; 0x80
 800d1e4:	011b      	lsls	r3, r3, #4
 800d1e6:	401a      	ands	r2, r3
 800d1e8:	2380      	movs	r3, #128	; 0x80
 800d1ea:	011b      	lsls	r3, r3, #4
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d148      	bne.n	800d282 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2280      	movs	r2, #128	; 0x80
 800d1f6:	0112      	lsls	r2, r2, #4
 800d1f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d1fe:	613b      	str	r3, [r7, #16]
  return(result);
 800d200:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d202:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d204:	2301      	movs	r3, #1
 800d206:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	f383 8810 	msr	PRIMASK, r3
}
 800d20e:	46c0      	nop			; (mov r8, r8)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4924      	ldr	r1, [pc, #144]	; (800d2ac <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d21c:	400a      	ands	r2, r1
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d222:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	f383 8810 	msr	PRIMASK, r3
}
 800d22a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d22c:	f3ef 8310 	mrs	r3, PRIMASK
 800d230:	61fb      	str	r3, [r7, #28]
  return(result);
 800d232:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d234:	64bb      	str	r3, [r7, #72]	; 0x48
 800d236:	2301      	movs	r3, #1
 800d238:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	f383 8810 	msr	PRIMASK, r3
}
 800d240:	46c0      	nop			; (mov r8, r8)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	689a      	ldr	r2, [r3, #8]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2101      	movs	r1, #1
 800d24e:	438a      	bics	r2, r1
 800d250:	609a      	str	r2, [r3, #8]
 800d252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d254:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d258:	f383 8810 	msr	PRIMASK, r3
}
 800d25c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2288      	movs	r2, #136	; 0x88
 800d262:	2120      	movs	r1, #32
 800d264:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	228c      	movs	r2, #140	; 0x8c
 800d26a:	2120      	movs	r1, #32
 800d26c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2290      	movs	r2, #144	; 0x90
 800d272:	2120      	movs	r1, #32
 800d274:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2284      	movs	r2, #132	; 0x84
 800d27a:	2100      	movs	r1, #0
 800d27c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d27e:	2303      	movs	r3, #3
 800d280:	e010      	b.n	800d2a4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	69db      	ldr	r3, [r3, #28]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	4013      	ands	r3, r2
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	425a      	negs	r2, r3
 800d292:	4153      	adcs	r3, r2
 800d294:	b2db      	uxtb	r3, r3
 800d296:	001a      	movs	r2, r3
 800d298:	1dfb      	adds	r3, r7, #7
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d100      	bne.n	800d2a2 <UART_WaitOnFlagUntilTimeout+0x182>
 800d2a0:	e747      	b.n	800d132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	b014      	add	sp, #80	; 0x50
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	fffffe5f 	.word	0xfffffe5f

0800d2b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b090      	sub	sp, #64	; 0x40
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	1dbb      	adds	r3, r7, #6
 800d2bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	1dba      	adds	r2, r7, #6
 800d2c8:	215c      	movs	r1, #92	; 0x5c
 800d2ca:	8812      	ldrh	r2, [r2, #0]
 800d2cc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2290      	movs	r2, #144	; 0x90
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	228c      	movs	r2, #140	; 0x8c
 800d2da:	2122      	movs	r1, #34	; 0x22
 800d2dc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2280      	movs	r2, #128	; 0x80
 800d2e2:	589b      	ldr	r3, [r3, r2]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d02d      	beq.n	800d344 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2280      	movs	r2, #128	; 0x80
 800d2ec:	589b      	ldr	r3, [r3, r2]
 800d2ee:	4a40      	ldr	r2, [pc, #256]	; (800d3f0 <UART_Start_Receive_DMA+0x140>)
 800d2f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2280      	movs	r2, #128	; 0x80
 800d2f6:	589b      	ldr	r3, [r3, r2]
 800d2f8:	4a3e      	ldr	r2, [pc, #248]	; (800d3f4 <UART_Start_Receive_DMA+0x144>)
 800d2fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2280      	movs	r2, #128	; 0x80
 800d300:	589b      	ldr	r3, [r3, r2]
 800d302:	4a3d      	ldr	r2, [pc, #244]	; (800d3f8 <UART_Start_Receive_DMA+0x148>)
 800d304:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2280      	movs	r2, #128	; 0x80
 800d30a:	589b      	ldr	r3, [r3, r2]
 800d30c:	2200      	movs	r2, #0
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2280      	movs	r2, #128	; 0x80
 800d314:	5898      	ldr	r0, [r3, r2]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3324      	adds	r3, #36	; 0x24
 800d31c:	0019      	movs	r1, r3
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d322:	001a      	movs	r2, r3
 800d324:	1dbb      	adds	r3, r7, #6
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	f7fb fd2c 	bl	8008d84 <HAL_DMA_Start_IT>
 800d32c:	1e03      	subs	r3, r0, #0
 800d32e:	d009      	beq.n	800d344 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2290      	movs	r2, #144	; 0x90
 800d334:	2110      	movs	r1, #16
 800d336:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	228c      	movs	r2, #140	; 0x8c
 800d33c:	2120      	movs	r1, #32
 800d33e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	e050      	b.n	800d3e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d019      	beq.n	800d380 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d34c:	f3ef 8310 	mrs	r3, PRIMASK
 800d350:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d354:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d356:	2301      	movs	r3, #1
 800d358:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	f383 8810 	msr	PRIMASK, r3
}
 800d360:	46c0      	nop			; (mov r8, r8)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2180      	movs	r1, #128	; 0x80
 800d36e:	0049      	lsls	r1, r1, #1
 800d370:	430a      	orrs	r2, r1
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d376:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	f383 8810 	msr	PRIMASK, r3
}
 800d37e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d380:	f3ef 8310 	mrs	r3, PRIMASK
 800d384:	613b      	str	r3, [r7, #16]
  return(result);
 800d386:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d388:	63bb      	str	r3, [r7, #56]	; 0x38
 800d38a:	2301      	movs	r3, #1
 800d38c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f383 8810 	msr	PRIMASK, r3
}
 800d394:	46c0      	nop			; (mov r8, r8)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	689a      	ldr	r2, [r3, #8]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	430a      	orrs	r2, r1
 800d3a4:	609a      	str	r2, [r3, #8]
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	f383 8810 	msr	PRIMASK, r3
}
 800d3b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d3b6:	61fb      	str	r3, [r7, #28]
  return(result);
 800d3b8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d3bc:	2301      	movs	r3, #1
 800d3be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3c0:	6a3b      	ldr	r3, [r7, #32]
 800d3c2:	f383 8810 	msr	PRIMASK, r3
}
 800d3c6:	46c0      	nop			; (mov r8, r8)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	689a      	ldr	r2, [r3, #8]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2140      	movs	r1, #64	; 0x40
 800d3d4:	430a      	orrs	r2, r1
 800d3d6:	609a      	str	r2, [r3, #8]
 800d3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	f383 8810 	msr	PRIMASK, r3
}
 800d3e2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	0018      	movs	r0, r3
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	b010      	add	sp, #64	; 0x40
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	0800d549 	.word	0x0800d549
 800d3f4:	0800d679 	.word	0x0800d679
 800d3f8:	0800d6bb 	.word	0x0800d6bb

0800d3fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08a      	sub	sp, #40	; 0x28
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d404:	f3ef 8310 	mrs	r3, PRIMASK
 800d408:	60bb      	str	r3, [r7, #8]
  return(result);
 800d40a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d40c:	627b      	str	r3, [r7, #36]	; 0x24
 800d40e:	2301      	movs	r3, #1
 800d410:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f383 8810 	msr	PRIMASK, r3
}
 800d418:	46c0      	nop			; (mov r8, r8)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	21c0      	movs	r1, #192	; 0xc0
 800d426:	438a      	bics	r2, r1
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	f383 8810 	msr	PRIMASK, r3
}
 800d434:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d436:	f3ef 8310 	mrs	r3, PRIMASK
 800d43a:	617b      	str	r3, [r7, #20]
  return(result);
 800d43c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d43e:	623b      	str	r3, [r7, #32]
 800d440:	2301      	movs	r3, #1
 800d442:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	f383 8810 	msr	PRIMASK, r3
}
 800d44a:	46c0      	nop			; (mov r8, r8)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	689a      	ldr	r2, [r3, #8]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4908      	ldr	r1, [pc, #32]	; (800d478 <UART_EndTxTransfer+0x7c>)
 800d458:	400a      	ands	r2, r1
 800d45a:	609a      	str	r2, [r3, #8]
 800d45c:	6a3b      	ldr	r3, [r7, #32]
 800d45e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	f383 8810 	msr	PRIMASK, r3
}
 800d466:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2288      	movs	r2, #136	; 0x88
 800d46c:	2120      	movs	r1, #32
 800d46e:	5099      	str	r1, [r3, r2]
}
 800d470:	46c0      	nop			; (mov r8, r8)
 800d472:	46bd      	mov	sp, r7
 800d474:	b00a      	add	sp, #40	; 0x28
 800d476:	bd80      	pop	{r7, pc}
 800d478:	ff7fffff 	.word	0xff7fffff

0800d47c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b08e      	sub	sp, #56	; 0x38
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d484:	f3ef 8310 	mrs	r3, PRIMASK
 800d488:	617b      	str	r3, [r7, #20]
  return(result);
 800d48a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d48c:	637b      	str	r3, [r7, #52]	; 0x34
 800d48e:	2301      	movs	r3, #1
 800d490:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	f383 8810 	msr	PRIMASK, r3
}
 800d498:	46c0      	nop			; (mov r8, r8)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4926      	ldr	r1, [pc, #152]	; (800d540 <UART_EndRxTransfer+0xc4>)
 800d4a6:	400a      	ands	r2, r1
 800d4a8:	601a      	str	r2, [r3, #0]
 800d4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	f383 8810 	msr	PRIMASK, r3
}
 800d4b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ba:	623b      	str	r3, [r7, #32]
  return(result);
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4be:	633b      	str	r3, [r7, #48]	; 0x30
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	f383 8810 	msr	PRIMASK, r3
}
 800d4ca:	46c0      	nop			; (mov r8, r8)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	689a      	ldr	r2, [r3, #8]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	491b      	ldr	r1, [pc, #108]	; (800d544 <UART_EndRxTransfer+0xc8>)
 800d4d8:	400a      	ands	r2, r1
 800d4da:	609a      	str	r2, [r3, #8]
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	f383 8810 	msr	PRIMASK, r3
}
 800d4e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d118      	bne.n	800d522 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4f0:	f3ef 8310 	mrs	r3, PRIMASK
 800d4f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f383 8810 	msr	PRIMASK, r3
}
 800d504:	46c0      	nop			; (mov r8, r8)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2110      	movs	r1, #16
 800d512:	438a      	bics	r2, r1
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	f383 8810 	msr	PRIMASK, r3
}
 800d520:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	228c      	movs	r2, #140	; 0x8c
 800d526:	2120      	movs	r1, #32
 800d528:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d536:	46c0      	nop			; (mov r8, r8)
 800d538:	46bd      	mov	sp, r7
 800d53a:	b00e      	add	sp, #56	; 0x38
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	46c0      	nop			; (mov r8, r8)
 800d540:	fffffedf 	.word	0xfffffedf
 800d544:	effffffe 	.word	0xeffffffe

0800d548 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b094      	sub	sp, #80	; 0x50
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d554:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2220      	movs	r2, #32
 800d55e:	4013      	ands	r3, r2
 800d560:	d16f      	bne.n	800d642 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d564:	225e      	movs	r2, #94	; 0x5e
 800d566:	2100      	movs	r1, #0
 800d568:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d56a:	f3ef 8310 	mrs	r3, PRIMASK
 800d56e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d570:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d572:	64bb      	str	r3, [r7, #72]	; 0x48
 800d574:	2301      	movs	r3, #1
 800d576:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	f383 8810 	msr	PRIMASK, r3
}
 800d57e:	46c0      	nop			; (mov r8, r8)
 800d580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	493a      	ldr	r1, [pc, #232]	; (800d674 <UART_DMAReceiveCplt+0x12c>)
 800d58c:	400a      	ands	r2, r1
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d592:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	f383 8810 	msr	PRIMASK, r3
}
 800d59a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d59c:	f3ef 8310 	mrs	r3, PRIMASK
 800d5a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	f383 8810 	msr	PRIMASK, r3
}
 800d5b0:	46c0      	nop			; (mov r8, r8)
 800d5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	689a      	ldr	r2, [r3, #8]
 800d5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2101      	movs	r1, #1
 800d5be:	438a      	bics	r2, r1
 800d5c0:	609a      	str	r2, [r3, #8]
 800d5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c8:	f383 8810 	msr	PRIMASK, r3
}
 800d5cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d5d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d6:	643b      	str	r3, [r7, #64]	; 0x40
 800d5d8:	2301      	movs	r3, #1
 800d5da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5de:	f383 8810 	msr	PRIMASK, r3
}
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	689a      	ldr	r2, [r3, #8]
 800d5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2140      	movs	r1, #64	; 0x40
 800d5f0:	438a      	bics	r2, r1
 800d5f2:	609a      	str	r2, [r3, #8]
 800d5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fa:	f383 8810 	msr	PRIMASK, r3
}
 800d5fe:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d602:	228c      	movs	r2, #140	; 0x8c
 800d604:	2120      	movs	r1, #32
 800d606:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d118      	bne.n	800d642 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d610:	f3ef 8310 	mrs	r3, PRIMASK
 800d614:	60fb      	str	r3, [r7, #12]
  return(result);
 800d616:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d61a:	2301      	movs	r3, #1
 800d61c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	f383 8810 	msr	PRIMASK, r3
}
 800d624:	46c0      	nop			; (mov r8, r8)
 800d626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2110      	movs	r1, #16
 800d632:	438a      	bics	r2, r1
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	f383 8810 	msr	PRIMASK, r3
}
 800d640:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d644:	2200      	movs	r2, #0
 800d646:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d108      	bne.n	800d662 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d652:	225c      	movs	r2, #92	; 0x5c
 800d654:	5a9a      	ldrh	r2, [r3, r2]
 800d656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d658:	0011      	movs	r1, r2
 800d65a:	0018      	movs	r0, r3
 800d65c:	f7ff faae 	bl	800cbbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d660:	e003      	b.n	800d66a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800d662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d664:	0018      	movs	r0, r3
 800d666:	f7f8 ff31 	bl	80064cc <HAL_UART_RxCpltCallback>
}
 800d66a:	46c0      	nop			; (mov r8, r8)
 800d66c:	46bd      	mov	sp, r7
 800d66e:	b014      	add	sp, #80	; 0x50
 800d670:	bd80      	pop	{r7, pc}
 800d672:	46c0      	nop			; (mov r8, r8)
 800d674:	fffffeff 	.word	0xfffffeff

0800d678 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d684:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2201      	movs	r2, #1
 800d68a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d690:	2b01      	cmp	r3, #1
 800d692:	d10a      	bne.n	800d6aa <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	225c      	movs	r2, #92	; 0x5c
 800d698:	5a9b      	ldrh	r3, [r3, r2]
 800d69a:	085b      	lsrs	r3, r3, #1
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	0011      	movs	r1, r2
 800d6a2:	0018      	movs	r0, r3
 800d6a4:	f7ff fa8a 	bl	800cbbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6a8:	e003      	b.n	800d6b2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	0018      	movs	r0, r3
 800d6ae:	f7ff fa7d 	bl	800cbac <HAL_UART_RxHalfCpltCallback>
}
 800d6b2:	46c0      	nop			; (mov r8, r8)
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	b004      	add	sp, #16
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b086      	sub	sp, #24
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2288      	movs	r2, #136	; 0x88
 800d6cc:	589b      	ldr	r3, [r3, r2]
 800d6ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	228c      	movs	r2, #140	; 0x8c
 800d6d4:	589b      	ldr	r3, [r3, r2]
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	2280      	movs	r2, #128	; 0x80
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	2b80      	cmp	r3, #128	; 0x80
 800d6e4:	d10a      	bne.n	800d6fc <UART_DMAError+0x42>
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	2b21      	cmp	r3, #33	; 0x21
 800d6ea:	d107      	bne.n	800d6fc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2256      	movs	r2, #86	; 0x56
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	0018      	movs	r0, r3
 800d6f8:	f7ff fe80 	bl	800d3fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	2240      	movs	r2, #64	; 0x40
 800d704:	4013      	ands	r3, r2
 800d706:	2b40      	cmp	r3, #64	; 0x40
 800d708:	d10a      	bne.n	800d720 <UART_DMAError+0x66>
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b22      	cmp	r3, #34	; 0x22
 800d70e:	d107      	bne.n	800d720 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	225e      	movs	r2, #94	; 0x5e
 800d714:	2100      	movs	r1, #0
 800d716:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	0018      	movs	r0, r3
 800d71c:	f7ff feae 	bl	800d47c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	2290      	movs	r2, #144	; 0x90
 800d724:	589b      	ldr	r3, [r3, r2]
 800d726:	2210      	movs	r2, #16
 800d728:	431a      	orrs	r2, r3
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2190      	movs	r1, #144	; 0x90
 800d72e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	0018      	movs	r0, r3
 800d734:	f7f8 ff3c 	bl	80065b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d738:	46c0      	nop			; (mov r8, r8)
 800d73a:	46bd      	mov	sp, r7
 800d73c:	b006      	add	sp, #24
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d74c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	225e      	movs	r2, #94	; 0x5e
 800d752:	2100      	movs	r1, #0
 800d754:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2256      	movs	r2, #86	; 0x56
 800d75a:	2100      	movs	r1, #0
 800d75c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	0018      	movs	r0, r3
 800d762:	f7f8 ff25 	bl	80065b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d766:	46c0      	nop			; (mov r8, r8)
 800d768:	46bd      	mov	sp, r7
 800d76a:	b004      	add	sp, #16
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b086      	sub	sp, #24
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d776:	f3ef 8310 	mrs	r3, PRIMASK
 800d77a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d77c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d77e:	617b      	str	r3, [r7, #20]
 800d780:	2301      	movs	r3, #1
 800d782:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f383 8810 	msr	PRIMASK, r3
}
 800d78a:	46c0      	nop			; (mov r8, r8)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2140      	movs	r1, #64	; 0x40
 800d798:	438a      	bics	r2, r1
 800d79a:	601a      	str	r2, [r3, #0]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	f383 8810 	msr	PRIMASK, r3
}
 800d7a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2288      	movs	r2, #136	; 0x88
 800d7ac:	2120      	movs	r1, #32
 800d7ae:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	0018      	movs	r0, r3
 800d7ba:	f7f8 fe7f 	bl	80064bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7be:	46c0      	nop			; (mov r8, r8)
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	b006      	add	sp, #24
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b082      	sub	sp, #8
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d7ce:	46c0      	nop			; (mov r8, r8)
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	b002      	add	sp, #8
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b082      	sub	sp, #8
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d7de:	46c0      	nop			; (mov r8, r8)
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	b002      	add	sp, #8
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d7ee:	46c0      	nop			; (mov r8, r8)
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	b002      	add	sp, #8
 800d7f4:	bd80      	pop	{r7, pc}
	...

0800d7f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2284      	movs	r2, #132	; 0x84
 800d804:	5c9b      	ldrb	r3, [r3, r2]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d101      	bne.n	800d80e <HAL_UARTEx_DisableFifoMode+0x16>
 800d80a:	2302      	movs	r3, #2
 800d80c:	e027      	b.n	800d85e <HAL_UARTEx_DisableFifoMode+0x66>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2284      	movs	r2, #132	; 0x84
 800d812:	2101      	movs	r1, #1
 800d814:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2288      	movs	r2, #136	; 0x88
 800d81a:	2124      	movs	r1, #36	; 0x24
 800d81c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2101      	movs	r1, #1
 800d832:	438a      	bics	r2, r1
 800d834:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4a0b      	ldr	r2, [pc, #44]	; (800d868 <HAL_UARTEx_DisableFifoMode+0x70>)
 800d83a:	4013      	ands	r3, r2
 800d83c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2288      	movs	r2, #136	; 0x88
 800d850:	2120      	movs	r1, #32
 800d852:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2284      	movs	r2, #132	; 0x84
 800d858:	2100      	movs	r1, #0
 800d85a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	0018      	movs	r0, r3
 800d860:	46bd      	mov	sp, r7
 800d862:	b004      	add	sp, #16
 800d864:	bd80      	pop	{r7, pc}
 800d866:	46c0      	nop			; (mov r8, r8)
 800d868:	dfffffff 	.word	0xdfffffff

0800d86c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2284      	movs	r2, #132	; 0x84
 800d87a:	5c9b      	ldrb	r3, [r3, r2]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d101      	bne.n	800d884 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d880:	2302      	movs	r3, #2
 800d882:	e02e      	b.n	800d8e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2284      	movs	r2, #132	; 0x84
 800d888:	2101      	movs	r1, #1
 800d88a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2288      	movs	r2, #136	; 0x88
 800d890:	2124      	movs	r1, #36	; 0x24
 800d892:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2101      	movs	r1, #1
 800d8a8:	438a      	bics	r2, r1
 800d8aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	08d9      	lsrs	r1, r3, #3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	430a      	orrs	r2, r1
 800d8be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	0018      	movs	r0, r3
 800d8c4:	f000 f854 	bl	800d970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2288      	movs	r2, #136	; 0x88
 800d8d4:	2120      	movs	r1, #32
 800d8d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2284      	movs	r2, #132	; 0x84
 800d8dc:	2100      	movs	r1, #0
 800d8de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8e0:	2300      	movs	r3, #0
}
 800d8e2:	0018      	movs	r0, r3
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	b004      	add	sp, #16
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2284      	movs	r2, #132	; 0x84
 800d8fa:	5c9b      	ldrb	r3, [r3, r2]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d101      	bne.n	800d904 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d900:	2302      	movs	r3, #2
 800d902:	e02f      	b.n	800d964 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2284      	movs	r2, #132	; 0x84
 800d908:	2101      	movs	r1, #1
 800d90a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2288      	movs	r2, #136	; 0x88
 800d910:	2124      	movs	r1, #36	; 0x24
 800d912:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2101      	movs	r1, #1
 800d928:	438a      	bics	r2, r1
 800d92a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	4a0e      	ldr	r2, [pc, #56]	; (800d96c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800d934:	4013      	ands	r3, r2
 800d936:	0019      	movs	r1, r3
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	430a      	orrs	r2, r1
 800d940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	0018      	movs	r0, r3
 800d946:	f000 f813 	bl	800d970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2288      	movs	r2, #136	; 0x88
 800d956:	2120      	movs	r1, #32
 800d958:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2284      	movs	r2, #132	; 0x84
 800d95e:	2100      	movs	r1, #0
 800d960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	0018      	movs	r0, r3
 800d966:	46bd      	mov	sp, r7
 800d968:	b004      	add	sp, #16
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	f1ffffff 	.word	0xf1ffffff

0800d970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d108      	bne.n	800d992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	226a      	movs	r2, #106	; 0x6a
 800d984:	2101      	movs	r1, #1
 800d986:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2268      	movs	r2, #104	; 0x68
 800d98c:	2101      	movs	r1, #1
 800d98e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d990:	e043      	b.n	800da1a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d992:	260f      	movs	r6, #15
 800d994:	19bb      	adds	r3, r7, r6
 800d996:	2208      	movs	r2, #8
 800d998:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d99a:	200e      	movs	r0, #14
 800d99c:	183b      	adds	r3, r7, r0
 800d99e:	2208      	movs	r2, #8
 800d9a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	0e5b      	lsrs	r3, r3, #25
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	240d      	movs	r4, #13
 800d9ae:	193b      	adds	r3, r7, r4
 800d9b0:	2107      	movs	r1, #7
 800d9b2:	400a      	ands	r2, r1
 800d9b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	0f5b      	lsrs	r3, r3, #29
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	250c      	movs	r5, #12
 800d9c2:	197b      	adds	r3, r7, r5
 800d9c4:	2107      	movs	r1, #7
 800d9c6:	400a      	ands	r2, r1
 800d9c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9ca:	183b      	adds	r3, r7, r0
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	197a      	adds	r2, r7, r5
 800d9d0:	7812      	ldrb	r2, [r2, #0]
 800d9d2:	4914      	ldr	r1, [pc, #80]	; (800da24 <UARTEx_SetNbDataToProcess+0xb4>)
 800d9d4:	5c8a      	ldrb	r2, [r1, r2]
 800d9d6:	435a      	muls	r2, r3
 800d9d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800d9da:	197b      	adds	r3, r7, r5
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	4a12      	ldr	r2, [pc, #72]	; (800da28 <UARTEx_SetNbDataToProcess+0xb8>)
 800d9e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9e2:	0019      	movs	r1, r3
 800d9e4:	f7f2 fc36 	bl	8000254 <__divsi3>
 800d9e8:	0003      	movs	r3, r0
 800d9ea:	b299      	uxth	r1, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	226a      	movs	r2, #106	; 0x6a
 800d9f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9f2:	19bb      	adds	r3, r7, r6
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	193a      	adds	r2, r7, r4
 800d9f8:	7812      	ldrb	r2, [r2, #0]
 800d9fa:	490a      	ldr	r1, [pc, #40]	; (800da24 <UARTEx_SetNbDataToProcess+0xb4>)
 800d9fc:	5c8a      	ldrb	r2, [r1, r2]
 800d9fe:	435a      	muls	r2, r3
 800da00:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800da02:	193b      	adds	r3, r7, r4
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	4a08      	ldr	r2, [pc, #32]	; (800da28 <UARTEx_SetNbDataToProcess+0xb8>)
 800da08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da0a:	0019      	movs	r1, r3
 800da0c:	f7f2 fc22 	bl	8000254 <__divsi3>
 800da10:	0003      	movs	r3, r0
 800da12:	b299      	uxth	r1, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2268      	movs	r2, #104	; 0x68
 800da18:	5299      	strh	r1, [r3, r2]
}
 800da1a:	46c0      	nop			; (mov r8, r8)
 800da1c:	46bd      	mov	sp, r7
 800da1e:	b005      	add	sp, #20
 800da20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da22:	46c0      	nop			; (mov r8, r8)
 800da24:	08017378 	.word	0x08017378
 800da28:	08017380 	.word	0x08017380

0800da2c <__NVIC_SetPriority>:
{
 800da2c:	b590      	push	{r4, r7, lr}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	0002      	movs	r2, r0
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	1dfb      	adds	r3, r7, #7
 800da38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800da3a:	1dfb      	adds	r3, r7, #7
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b7f      	cmp	r3, #127	; 0x7f
 800da40:	d828      	bhi.n	800da94 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800da42:	4a2f      	ldr	r2, [pc, #188]	; (800db00 <__NVIC_SetPriority+0xd4>)
 800da44:	1dfb      	adds	r3, r7, #7
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	b25b      	sxtb	r3, r3
 800da4a:	089b      	lsrs	r3, r3, #2
 800da4c:	33c0      	adds	r3, #192	; 0xc0
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	589b      	ldr	r3, [r3, r2]
 800da52:	1dfa      	adds	r2, r7, #7
 800da54:	7812      	ldrb	r2, [r2, #0]
 800da56:	0011      	movs	r1, r2
 800da58:	2203      	movs	r2, #3
 800da5a:	400a      	ands	r2, r1
 800da5c:	00d2      	lsls	r2, r2, #3
 800da5e:	21ff      	movs	r1, #255	; 0xff
 800da60:	4091      	lsls	r1, r2
 800da62:	000a      	movs	r2, r1
 800da64:	43d2      	mvns	r2, r2
 800da66:	401a      	ands	r2, r3
 800da68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	019b      	lsls	r3, r3, #6
 800da6e:	22ff      	movs	r2, #255	; 0xff
 800da70:	401a      	ands	r2, r3
 800da72:	1dfb      	adds	r3, r7, #7
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	0018      	movs	r0, r3
 800da78:	2303      	movs	r3, #3
 800da7a:	4003      	ands	r3, r0
 800da7c:	00db      	lsls	r3, r3, #3
 800da7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800da80:	481f      	ldr	r0, [pc, #124]	; (800db00 <__NVIC_SetPriority+0xd4>)
 800da82:	1dfb      	adds	r3, r7, #7
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	b25b      	sxtb	r3, r3
 800da88:	089b      	lsrs	r3, r3, #2
 800da8a:	430a      	orrs	r2, r1
 800da8c:	33c0      	adds	r3, #192	; 0xc0
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	501a      	str	r2, [r3, r0]
}
 800da92:	e031      	b.n	800daf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800da94:	4a1b      	ldr	r2, [pc, #108]	; (800db04 <__NVIC_SetPriority+0xd8>)
 800da96:	1dfb      	adds	r3, r7, #7
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	0019      	movs	r1, r3
 800da9c:	230f      	movs	r3, #15
 800da9e:	400b      	ands	r3, r1
 800daa0:	3b08      	subs	r3, #8
 800daa2:	089b      	lsrs	r3, r3, #2
 800daa4:	3306      	adds	r3, #6
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	18d3      	adds	r3, r2, r3
 800daaa:	3304      	adds	r3, #4
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	1dfa      	adds	r2, r7, #7
 800dab0:	7812      	ldrb	r2, [r2, #0]
 800dab2:	0011      	movs	r1, r2
 800dab4:	2203      	movs	r2, #3
 800dab6:	400a      	ands	r2, r1
 800dab8:	00d2      	lsls	r2, r2, #3
 800daba:	21ff      	movs	r1, #255	; 0xff
 800dabc:	4091      	lsls	r1, r2
 800dabe:	000a      	movs	r2, r1
 800dac0:	43d2      	mvns	r2, r2
 800dac2:	401a      	ands	r2, r3
 800dac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	019b      	lsls	r3, r3, #6
 800daca:	22ff      	movs	r2, #255	; 0xff
 800dacc:	401a      	ands	r2, r3
 800dace:	1dfb      	adds	r3, r7, #7
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	0018      	movs	r0, r3
 800dad4:	2303      	movs	r3, #3
 800dad6:	4003      	ands	r3, r0
 800dad8:	00db      	lsls	r3, r3, #3
 800dada:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dadc:	4809      	ldr	r0, [pc, #36]	; (800db04 <__NVIC_SetPriority+0xd8>)
 800dade:	1dfb      	adds	r3, r7, #7
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	001c      	movs	r4, r3
 800dae4:	230f      	movs	r3, #15
 800dae6:	4023      	ands	r3, r4
 800dae8:	3b08      	subs	r3, #8
 800daea:	089b      	lsrs	r3, r3, #2
 800daec:	430a      	orrs	r2, r1
 800daee:	3306      	adds	r3, #6
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	18c3      	adds	r3, r0, r3
 800daf4:	3304      	adds	r3, #4
 800daf6:	601a      	str	r2, [r3, #0]
}
 800daf8:	46c0      	nop			; (mov r8, r8)
 800dafa:	46bd      	mov	sp, r7
 800dafc:	b003      	add	sp, #12
 800dafe:	bd90      	pop	{r4, r7, pc}
 800db00:	e000e100 	.word	0xe000e100
 800db04:	e000ed00 	.word	0xe000ed00

0800db08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800db0c:	4b05      	ldr	r3, [pc, #20]	; (800db24 <SysTick_Handler+0x1c>)
 800db0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800db10:	f001 fc6a 	bl	800f3e8 <xTaskGetSchedulerState>
 800db14:	0003      	movs	r3, r0
 800db16:	2b01      	cmp	r3, #1
 800db18:	d001      	beq.n	800db1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800db1a:	f002 f93d 	bl	800fd98 <xPortSysTickHandler>
  }
}
 800db1e:	46c0      	nop			; (mov r8, r8)
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	e000e010 	.word	0xe000e010

0800db28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800db2c:	2305      	movs	r3, #5
 800db2e:	425b      	negs	r3, r3
 800db30:	2100      	movs	r1, #0
 800db32:	0018      	movs	r0, r3
 800db34:	f7ff ff7a 	bl	800da2c <__NVIC_SetPriority>
#endif
}
 800db38:	46c0      	nop			; (mov r8, r8)
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
	...

0800db40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db46:	f3ef 8305 	mrs	r3, IPSR
 800db4a:	603b      	str	r3, [r7, #0]
  return(result);
 800db4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800db52:	2306      	movs	r3, #6
 800db54:	425b      	negs	r3, r3
 800db56:	607b      	str	r3, [r7, #4]
 800db58:	e00c      	b.n	800db74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800db5a:	4b09      	ldr	r3, [pc, #36]	; (800db80 <osKernelInitialize+0x40>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d105      	bne.n	800db6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800db62:	4b07      	ldr	r3, [pc, #28]	; (800db80 <osKernelInitialize+0x40>)
 800db64:	2201      	movs	r2, #1
 800db66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800db68:	2300      	movs	r3, #0
 800db6a:	607b      	str	r3, [r7, #4]
 800db6c:	e002      	b.n	800db74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800db6e:	2301      	movs	r3, #1
 800db70:	425b      	negs	r3, r3
 800db72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800db74:	687b      	ldr	r3, [r7, #4]
}
 800db76:	0018      	movs	r0, r3
 800db78:	46bd      	mov	sp, r7
 800db7a:	b002      	add	sp, #8
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	46c0      	nop			; (mov r8, r8)
 800db80:	20003b00 	.word	0x20003b00

0800db84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db8a:	f3ef 8305 	mrs	r3, IPSR
 800db8e:	603b      	str	r3, [r7, #0]
  return(result);
 800db90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <osKernelStart+0x1a>
    stat = osErrorISR;
 800db96:	2306      	movs	r3, #6
 800db98:	425b      	negs	r3, r3
 800db9a:	607b      	str	r3, [r7, #4]
 800db9c:	e010      	b.n	800dbc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800db9e:	4b0b      	ldr	r3, [pc, #44]	; (800dbcc <osKernelStart+0x48>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d109      	bne.n	800dbba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dba6:	f7ff ffbf 	bl	800db28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dbaa:	4b08      	ldr	r3, [pc, #32]	; (800dbcc <osKernelStart+0x48>)
 800dbac:	2202      	movs	r2, #2
 800dbae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dbb0:	f001 f830 	bl	800ec14 <vTaskStartScheduler>
      stat = osOK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	607b      	str	r3, [r7, #4]
 800dbb8:	e002      	b.n	800dbc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	425b      	negs	r3, r3
 800dbbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dbc0:	687b      	ldr	r3, [r7, #4]
}
 800dbc2:	0018      	movs	r0, r3
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	b002      	add	sp, #8
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	46c0      	nop			; (mov r8, r8)
 800dbcc:	20003b00 	.word	0x20003b00

0800dbd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dbd0:	b5b0      	push	{r4, r5, r7, lr}
 800dbd2:	b08e      	sub	sp, #56	; 0x38
 800dbd4:	af04      	add	r7, sp, #16
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe0:	f3ef 8305 	mrs	r3, IPSR
 800dbe4:	617b      	str	r3, [r7, #20]
  return(result);
 800dbe6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d000      	beq.n	800dbee <osThreadNew+0x1e>
 800dbec:	e081      	b.n	800dcf2 <osThreadNew+0x122>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d100      	bne.n	800dbf6 <osThreadNew+0x26>
 800dbf4:	e07d      	b.n	800dcf2 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800dbf6:	2380      	movs	r3, #128	; 0x80
 800dbf8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dbfa:	2318      	movs	r3, #24
 800dbfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dc02:	2301      	movs	r3, #1
 800dc04:	425b      	negs	r3, r3
 800dc06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d044      	beq.n	800dc98 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <osThreadNew+0x4c>
        name = attr->name;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d007      	beq.n	800dc40 <osThreadNew+0x70>
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	2b38      	cmp	r3, #56	; 0x38
 800dc34:	d804      	bhi.n	800dc40 <osThreadNew+0x70>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	d001      	beq.n	800dc44 <osThreadNew+0x74>
        return (NULL);
 800dc40:	2300      	movs	r3, #0
 800dc42:	e057      	b.n	800dcf4 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d003      	beq.n	800dc54 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	695b      	ldr	r3, [r3, #20]
 800dc50:	089b      	lsrs	r3, r3, #2
 800dc52:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00e      	beq.n	800dc7a <osThreadNew+0xaa>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	2ba7      	cmp	r3, #167	; 0xa7
 800dc62:	d90a      	bls.n	800dc7a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d006      	beq.n	800dc7a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <osThreadNew+0xaa>
        mem = 1;
 800dc74:	2301      	movs	r3, #1
 800dc76:	61bb      	str	r3, [r7, #24]
 800dc78:	e010      	b.n	800dc9c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d10c      	bne.n	800dc9c <osThreadNew+0xcc>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d108      	bne.n	800dc9c <osThreadNew+0xcc>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d104      	bne.n	800dc9c <osThreadNew+0xcc>
          mem = 0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	61bb      	str	r3, [r7, #24]
 800dc96:	e001      	b.n	800dc9c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d112      	bne.n	800dcc8 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dcaa:	68bd      	ldr	r5, [r7, #8]
 800dcac:	6a3c      	ldr	r4, [r7, #32]
 800dcae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	9302      	str	r3, [sp, #8]
 800dcb4:	9201      	str	r2, [sp, #4]
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	002b      	movs	r3, r5
 800dcbc:	0022      	movs	r2, r4
 800dcbe:	f000 fdea 	bl	800e896 <xTaskCreateStatic>
 800dcc2:	0003      	movs	r3, r0
 800dcc4:	613b      	str	r3, [r7, #16]
 800dcc6:	e014      	b.n	800dcf2 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d111      	bne.n	800dcf2 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dcce:	6a3b      	ldr	r3, [r7, #32]
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	68bc      	ldr	r4, [r7, #8]
 800dcd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	2310      	movs	r3, #16
 800dcda:	18fb      	adds	r3, r7, r3
 800dcdc:	9301      	str	r3, [sp, #4]
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	0023      	movs	r3, r4
 800dce4:	f000 fe1b 	bl	800e91e <xTaskCreate>
 800dce8:	0003      	movs	r3, r0
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d001      	beq.n	800dcf2 <osThreadNew+0x122>
            hTask = NULL;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dcf2:	693b      	ldr	r3, [r7, #16]
}
 800dcf4:	0018      	movs	r0, r3
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	b00a      	add	sp, #40	; 0x28
 800dcfa:	bdb0      	pop	{r4, r5, r7, pc}

0800dcfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd04:	f3ef 8305 	mrs	r3, IPSR
 800dd08:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d003      	beq.n	800dd18 <osDelay+0x1c>
    stat = osErrorISR;
 800dd10:	2306      	movs	r3, #6
 800dd12:	425b      	negs	r3, r3
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	e008      	b.n	800dd2a <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <osDelay+0x2e>
      vTaskDelay(ticks);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	0018      	movs	r0, r3
 800dd26:	f000 ff4f 	bl	800ebc8 <vTaskDelay>
    }
  }

  return (stat);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
}
 800dd2c:	0018      	movs	r0, r3
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	b004      	add	sp, #16
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b08b      	sub	sp, #44	; 0x2c
 800dd38:	af02      	add	r7, sp, #8
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dd40:	2300      	movs	r3, #0
 800dd42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd44:	f3ef 8305 	mrs	r3, IPSR
 800dd48:	613b      	str	r3, [r7, #16]
  return(result);
 800dd4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d000      	beq.n	800dd52 <osMessageQueueNew+0x1e>
 800dd50:	e064      	b.n	800de1c <osMessageQueueNew+0xe8>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d100      	bne.n	800dd5a <osMessageQueueNew+0x26>
 800dd58:	e060      	b.n	800de1c <osMessageQueueNew+0xe8>
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d05d      	beq.n	800de1c <osMessageQueueNew+0xe8>
    mem = -1;
 800dd60:	2301      	movs	r3, #1
 800dd62:	425b      	negs	r3, r3
 800dd64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d028      	beq.n	800ddbe <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d011      	beq.n	800dd98 <osMessageQueueNew+0x64>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	2b4f      	cmp	r3, #79	; 0x4f
 800dd7a:	d90d      	bls.n	800dd98 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d009      	beq.n	800dd98 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	695a      	ldr	r2, [r3, #20]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	68b9      	ldr	r1, [r7, #8]
 800dd8c:	434b      	muls	r3, r1
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d302      	bcc.n	800dd98 <osMessageQueueNew+0x64>
        mem = 1;
 800dd92:	2301      	movs	r3, #1
 800dd94:	61bb      	str	r3, [r7, #24]
 800dd96:	e014      	b.n	800ddc2 <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d110      	bne.n	800ddc2 <osMessageQueueNew+0x8e>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10c      	bne.n	800ddc2 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d108      	bne.n	800ddc2 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	695b      	ldr	r3, [r3, #20]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d104      	bne.n	800ddc2 <osMessageQueueNew+0x8e>
          mem = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	61bb      	str	r3, [r7, #24]
 800ddbc:	e001      	b.n	800ddc2 <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d10c      	bne.n	800dde2 <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	691a      	ldr	r2, [r3, #16]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	68b9      	ldr	r1, [r7, #8]
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	2400      	movs	r4, #0
 800ddd6:	9400      	str	r4, [sp, #0]
 800ddd8:	f000 f953 	bl	800e082 <xQueueGenericCreateStatic>
 800dddc:	0003      	movs	r3, r0
 800ddde:	61fb      	str	r3, [r7, #28]
 800dde0:	e00a      	b.n	800ddf8 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d107      	bne.n	800ddf8 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dde8:	68b9      	ldr	r1, [r7, #8]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2200      	movs	r2, #0
 800ddee:	0018      	movs	r0, r3
 800ddf0:	f000 f993 	bl	800e11a <xQueueGenericCreate>
 800ddf4:	0003      	movs	r3, r0
 800ddf6:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00e      	beq.n	800de1c <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <osMessageQueueNew+0xd8>
        name = attr->name;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	617b      	str	r3, [r7, #20]
 800de0a:	e001      	b.n	800de10 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 800de0c:	2300      	movs	r3, #0
 800de0e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800de10:	697a      	ldr	r2, [r7, #20]
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	0011      	movs	r1, r2
 800de16:	0018      	movs	r0, r3
 800de18:	f000 fce2 	bl	800e7e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800de1c:	69fb      	ldr	r3, [r7, #28]
}
 800de1e:	0018      	movs	r0, r3
 800de20:	46bd      	mov	sp, r7
 800de22:	b009      	add	sp, #36	; 0x24
 800de24:	bd90      	pop	{r4, r7, pc}
	...

0800de28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	4a06      	ldr	r2, [pc, #24]	; (800de50 <vApplicationGetIdleTaskMemory+0x28>)
 800de38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	4a05      	ldr	r2, [pc, #20]	; (800de54 <vApplicationGetIdleTaskMemory+0x2c>)
 800de3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2280      	movs	r2, #128	; 0x80
 800de44:	601a      	str	r2, [r3, #0]
}
 800de46:	46c0      	nop			; (mov r8, r8)
 800de48:	46bd      	mov	sp, r7
 800de4a:	b004      	add	sp, #16
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	46c0      	nop			; (mov r8, r8)
 800de50:	20003b04 	.word	0x20003b04
 800de54:	20003bac 	.word	0x20003bac

0800de58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4a06      	ldr	r2, [pc, #24]	; (800de80 <vApplicationGetTimerTaskMemory+0x28>)
 800de68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	4a05      	ldr	r2, [pc, #20]	; (800de84 <vApplicationGetTimerTaskMemory+0x2c>)
 800de6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2280      	movs	r2, #128	; 0x80
 800de74:	0052      	lsls	r2, r2, #1
 800de76:	601a      	str	r2, [r3, #0]
}
 800de78:	46c0      	nop			; (mov r8, r8)
 800de7a:	46bd      	mov	sp, r7
 800de7c:	b004      	add	sp, #16
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	20003dac 	.word	0x20003dac
 800de84:	20003e54 	.word	0x20003e54

0800de88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3308      	adds	r3, #8
 800de94:	001a      	movs	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	4252      	negs	r2, r2
 800dea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	3308      	adds	r3, #8
 800dea6:	001a      	movs	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	3308      	adds	r3, #8
 800deb0:	001a      	movs	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800debc:	46c0      	nop			; (mov r8, r8)
 800debe:	46bd      	mov	sp, r7
 800dec0:	b002      	add	sp, #8
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ded2:	46c0      	nop			; (mov r8, r8)
 800ded4:	46bd      	mov	sp, r7
 800ded6:	b002      	add	sp, #8
 800ded8:	bd80      	pop	{r7, pc}

0800deda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	689a      	ldr	r2, [r3, #8]
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	683a      	ldr	r2, [r7, #0]
 800df04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	1c5a      	adds	r2, r3, #1
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	601a      	str	r2, [r3, #0]
}
 800df16:	46c0      	nop			; (mov r8, r8)
 800df18:	46bd      	mov	sp, r7
 800df1a:	b004      	add	sp, #16
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b084      	sub	sp, #16
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	3301      	adds	r3, #1
 800df32:	d103      	bne.n	800df3c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	60fb      	str	r3, [r7, #12]
 800df3a:	e00c      	b.n	800df56 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3308      	adds	r3, #8
 800df40:	60fb      	str	r3, [r7, #12]
 800df42:	e002      	b.n	800df4a <vListInsert+0x2c>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	60fb      	str	r3, [r7, #12]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	429a      	cmp	r2, r3
 800df54:	d2f6      	bcs.n	800df44 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	601a      	str	r2, [r3, #0]
}
 800df82:	46c0      	nop			; (mov r8, r8)
 800df84:	46bd      	mov	sp, r7
 800df86:	b004      	add	sp, #16
 800df88:	bd80      	pop	{r7, pc}

0800df8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b084      	sub	sp, #16
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	6892      	ldr	r2, [r2, #8]
 800dfa0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	689b      	ldr	r3, [r3, #8]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	6852      	ldr	r2, [r2, #4]
 800dfaa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d103      	bne.n	800dfbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	689a      	ldr	r2, [r3, #8]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	1e5a      	subs	r2, r3, #1
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
}
 800dfd2:	0018      	movs	r0, r3
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	b004      	add	sp, #16
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b084      	sub	sp, #16
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <xQueueGenericReset+0x18>
 800dfee:	b672      	cpsid	i
 800dff0:	e7fe      	b.n	800dff0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800dff2:	f001 fe75 	bl	800fce0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e002:	434b      	muls	r3, r1
 800e004:	18d2      	adds	r2, r2, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e020:	1e59      	subs	r1, r3, #1
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e026:	434b      	muls	r3, r1
 800e028:	18d2      	adds	r2, r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2244      	movs	r2, #68	; 0x44
 800e032:	21ff      	movs	r1, #255	; 0xff
 800e034:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2245      	movs	r2, #69	; 0x45
 800e03a:	21ff      	movs	r1, #255	; 0xff
 800e03c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10d      	bne.n	800e060 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d013      	beq.n	800e074 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	3310      	adds	r3, #16
 800e050:	0018      	movs	r0, r3
 800e052:	f001 f831 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e056:	1e03      	subs	r3, r0, #0
 800e058:	d00c      	beq.n	800e074 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e05a:	f001 fe31 	bl	800fcc0 <vPortYield>
 800e05e:	e009      	b.n	800e074 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3310      	adds	r3, #16
 800e064:	0018      	movs	r0, r3
 800e066:	f7ff ff0f 	bl	800de88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3324      	adds	r3, #36	; 0x24
 800e06e:	0018      	movs	r0, r3
 800e070:	f7ff ff0a 	bl	800de88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e074:	f001 fe46 	bl	800fd04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e078:	2301      	movs	r3, #1
}
 800e07a:	0018      	movs	r0, r3
 800e07c:	46bd      	mov	sp, r7
 800e07e:	b004      	add	sp, #16
 800e080:	bd80      	pop	{r7, pc}

0800e082 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e082:	b590      	push	{r4, r7, lr}
 800e084:	b089      	sub	sp, #36	; 0x24
 800e086:	af02      	add	r7, sp, #8
 800e088:	60f8      	str	r0, [r7, #12]
 800e08a:	60b9      	str	r1, [r7, #8]
 800e08c:	607a      	str	r2, [r7, #4]
 800e08e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <xQueueGenericCreateStatic+0x18>
 800e096:	b672      	cpsid	i
 800e098:	e7fe      	b.n	800e098 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <xQueueGenericCreateStatic+0x22>
 800e0a0:	b672      	cpsid	i
 800e0a2:	e7fe      	b.n	800e0a2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <xQueueGenericCreateStatic+0x2e>
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <xQueueGenericCreateStatic+0x32>
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e000      	b.n	800e0b6 <xQueueGenericCreateStatic+0x34>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <xQueueGenericCreateStatic+0x3c>
 800e0ba:	b672      	cpsid	i
 800e0bc:	e7fe      	b.n	800e0bc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d102      	bne.n	800e0ca <xQueueGenericCreateStatic+0x48>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <xQueueGenericCreateStatic+0x4c>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e000      	b.n	800e0d0 <xQueueGenericCreateStatic+0x4e>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <xQueueGenericCreateStatic+0x56>
 800e0d4:	b672      	cpsid	i
 800e0d6:	e7fe      	b.n	800e0d6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e0d8:	2350      	movs	r3, #80	; 0x50
 800e0da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	2b50      	cmp	r3, #80	; 0x50
 800e0e0:	d001      	beq.n	800e0e6 <xQueueGenericCreateStatic+0x64>
 800e0e2:	b672      	cpsid	i
 800e0e4:	e7fe      	b.n	800e0e4 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e0e6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00e      	beq.n	800e110 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2246      	movs	r2, #70	; 0x46
 800e0f6:	2101      	movs	r1, #1
 800e0f8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0fa:	2328      	movs	r3, #40	; 0x28
 800e0fc:	18fb      	adds	r3, r7, r3
 800e0fe:	781c      	ldrb	r4, [r3, #0]
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	68b9      	ldr	r1, [r7, #8]
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	0023      	movs	r3, r4
 800e10c:	f000 f837 	bl	800e17e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e110:	697b      	ldr	r3, [r7, #20]
	}
 800e112:	0018      	movs	r0, r3
 800e114:	46bd      	mov	sp, r7
 800e116:	b007      	add	sp, #28
 800e118:	bd90      	pop	{r4, r7, pc}

0800e11a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e11a:	b590      	push	{r4, r7, lr}
 800e11c:	b08b      	sub	sp, #44	; 0x2c
 800e11e:	af02      	add	r7, sp, #8
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	1dfb      	adds	r3, r7, #7
 800e126:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <xQueueGenericCreate+0x18>
 800e12e:	b672      	cpsid	i
 800e130:	e7fe      	b.n	800e130 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	4353      	muls	r3, r2
 800e138:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	3350      	adds	r3, #80	; 0x50
 800e13e:	0018      	movs	r0, r3
 800e140:	f001 fe66 	bl	800fe10 <pvPortMalloc>
 800e144:	0003      	movs	r3, r0
 800e146:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d012      	beq.n	800e174 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	3350      	adds	r3, #80	; 0x50
 800e156:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	2246      	movs	r2, #70	; 0x46
 800e15c:	2100      	movs	r1, #0
 800e15e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e160:	1dfb      	adds	r3, r7, #7
 800e162:	781c      	ldrb	r4, [r3, #0]
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	68b9      	ldr	r1, [r7, #8]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	0023      	movs	r3, r4
 800e170:	f000 f805 	bl	800e17e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e174:	69bb      	ldr	r3, [r7, #24]
	}
 800e176:	0018      	movs	r0, r3
 800e178:	46bd      	mov	sp, r7
 800e17a:	b009      	add	sp, #36	; 0x24
 800e17c:	bd90      	pop	{r4, r7, pc}

0800e17e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b084      	sub	sp, #16
 800e182:	af00      	add	r7, sp, #0
 800e184:	60f8      	str	r0, [r7, #12]
 800e186:	60b9      	str	r1, [r7, #8]
 800e188:	607a      	str	r2, [r7, #4]
 800e18a:	001a      	movs	r2, r3
 800e18c:	1cfb      	adds	r3, r7, #3
 800e18e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d103      	bne.n	800e19e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	69ba      	ldr	r2, [r7, #24]
 800e19a:	601a      	str	r2, [r3, #0]
 800e19c:	e002      	b.n	800e1a4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	f7ff ff10 	bl	800dfda <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	1cfa      	adds	r2, r7, #3
 800e1be:	214c      	movs	r1, #76	; 0x4c
 800e1c0:	7812      	ldrb	r2, [r2, #0]
 800e1c2:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e1c4:	46c0      	nop			; (mov r8, r8)
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	b004      	add	sp, #16
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08a      	sub	sp, #40	; 0x28
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d101      	bne.n	800e1ec <xQueueGenericSend+0x20>
 800e1e8:	b672      	cpsid	i
 800e1ea:	e7fe      	b.n	800e1ea <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d103      	bne.n	800e1fa <xQueueGenericSend+0x2e>
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d101      	bne.n	800e1fe <xQueueGenericSend+0x32>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e000      	b.n	800e200 <xQueueGenericSend+0x34>
 800e1fe:	2300      	movs	r3, #0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <xQueueGenericSend+0x3c>
 800e204:	b672      	cpsid	i
 800e206:	e7fe      	b.n	800e206 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b02      	cmp	r3, #2
 800e20c:	d103      	bne.n	800e216 <xQueueGenericSend+0x4a>
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e212:	2b01      	cmp	r3, #1
 800e214:	d101      	bne.n	800e21a <xQueueGenericSend+0x4e>
 800e216:	2301      	movs	r3, #1
 800e218:	e000      	b.n	800e21c <xQueueGenericSend+0x50>
 800e21a:	2300      	movs	r3, #0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d101      	bne.n	800e224 <xQueueGenericSend+0x58>
 800e220:	b672      	cpsid	i
 800e222:	e7fe      	b.n	800e222 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e224:	f001 f8e0 	bl	800f3e8 <xTaskGetSchedulerState>
 800e228:	1e03      	subs	r3, r0, #0
 800e22a:	d102      	bne.n	800e232 <xQueueGenericSend+0x66>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d101      	bne.n	800e236 <xQueueGenericSend+0x6a>
 800e232:	2301      	movs	r3, #1
 800e234:	e000      	b.n	800e238 <xQueueGenericSend+0x6c>
 800e236:	2300      	movs	r3, #0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d101      	bne.n	800e240 <xQueueGenericSend+0x74>
 800e23c:	b672      	cpsid	i
 800e23e:	e7fe      	b.n	800e23e <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e240:	f001 fd4e 	bl	800fce0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d302      	bcc.n	800e256 <xQueueGenericSend+0x8a>
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	2b02      	cmp	r3, #2
 800e254:	d11e      	bne.n	800e294 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	68b9      	ldr	r1, [r7, #8]
 800e25a:	6a3b      	ldr	r3, [r7, #32]
 800e25c:	0018      	movs	r0, r3
 800e25e:	f000 f9a2 	bl	800e5a6 <prvCopyDataToQueue>
 800e262:	0003      	movs	r3, r0
 800e264:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d009      	beq.n	800e282 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	3324      	adds	r3, #36	; 0x24
 800e272:	0018      	movs	r0, r3
 800e274:	f000 ff20 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e278:	1e03      	subs	r3, r0, #0
 800e27a:	d007      	beq.n	800e28c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e27c:	f001 fd20 	bl	800fcc0 <vPortYield>
 800e280:	e004      	b.n	800e28c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e288:	f001 fd1a 	bl	800fcc0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e28c:	f001 fd3a 	bl	800fd04 <vPortExitCritical>
				return pdPASS;
 800e290:	2301      	movs	r3, #1
 800e292:	e05b      	b.n	800e34c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d103      	bne.n	800e2a2 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e29a:	f001 fd33 	bl	800fd04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	e054      	b.n	800e34c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d106      	bne.n	800e2b6 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2a8:	2314      	movs	r3, #20
 800e2aa:	18fb      	adds	r3, r7, r3
 800e2ac:	0018      	movs	r0, r3
 800e2ae:	f000 ff5f 	bl	800f170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2b6:	f001 fd25 	bl	800fd04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2ba:	f000 fd09 	bl	800ecd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2be:	f001 fd0f 	bl	800fce0 <vPortEnterCritical>
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	2244      	movs	r2, #68	; 0x44
 800e2c6:	5c9b      	ldrb	r3, [r3, r2]
 800e2c8:	b25b      	sxtb	r3, r3
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	d103      	bne.n	800e2d6 <xQueueGenericSend+0x10a>
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	2244      	movs	r2, #68	; 0x44
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	5499      	strb	r1, [r3, r2]
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	2245      	movs	r2, #69	; 0x45
 800e2da:	5c9b      	ldrb	r3, [r3, r2]
 800e2dc:	b25b      	sxtb	r3, r3
 800e2de:	3301      	adds	r3, #1
 800e2e0:	d103      	bne.n	800e2ea <xQueueGenericSend+0x11e>
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	2245      	movs	r2, #69	; 0x45
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	5499      	strb	r1, [r3, r2]
 800e2ea:	f001 fd0b 	bl	800fd04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2ee:	1d3a      	adds	r2, r7, #4
 800e2f0:	2314      	movs	r3, #20
 800e2f2:	18fb      	adds	r3, r7, r3
 800e2f4:	0011      	movs	r1, r2
 800e2f6:	0018      	movs	r0, r3
 800e2f8:	f000 ff4e 	bl	800f198 <xTaskCheckForTimeOut>
 800e2fc:	1e03      	subs	r3, r0, #0
 800e2fe:	d11e      	bne.n	800e33e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	0018      	movs	r0, r3
 800e304:	f000 fa54 	bl	800e7b0 <prvIsQueueFull>
 800e308:	1e03      	subs	r3, r0, #0
 800e30a:	d011      	beq.n	800e330 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	3310      	adds	r3, #16
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	0011      	movs	r1, r2
 800e314:	0018      	movs	r0, r3
 800e316:	f000 fe8b 	bl	800f030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	0018      	movs	r0, r3
 800e31e:	f000 f9d3 	bl	800e6c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e322:	f000 fce1 	bl	800ece8 <xTaskResumeAll>
 800e326:	1e03      	subs	r3, r0, #0
 800e328:	d18a      	bne.n	800e240 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800e32a:	f001 fcc9 	bl	800fcc0 <vPortYield>
 800e32e:	e787      	b.n	800e240 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	0018      	movs	r0, r3
 800e334:	f000 f9c8 	bl	800e6c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e338:	f000 fcd6 	bl	800ece8 <xTaskResumeAll>
 800e33c:	e780      	b.n	800e240 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e33e:	6a3b      	ldr	r3, [r7, #32]
 800e340:	0018      	movs	r0, r3
 800e342:	f000 f9c1 	bl	800e6c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e346:	f000 fccf 	bl	800ece8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e34a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e34c:	0018      	movs	r0, r3
 800e34e:	46bd      	mov	sp, r7
 800e350:	b00a      	add	sp, #40	; 0x28
 800e352:	bd80      	pop	{r7, pc}

0800e354 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e354:	b590      	push	{r4, r7, lr}
 800e356:	b08b      	sub	sp, #44	; 0x2c
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800e366:	6a3b      	ldr	r3, [r7, #32]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <xQueueGenericSendFromISR+0x1c>
 800e36c:	b672      	cpsid	i
 800e36e:	e7fe      	b.n	800e36e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d103      	bne.n	800e37e <xQueueGenericSendFromISR+0x2a>
 800e376:	6a3b      	ldr	r3, [r7, #32]
 800e378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <xQueueGenericSendFromISR+0x2e>
 800e37e:	2301      	movs	r3, #1
 800e380:	e000      	b.n	800e384 <xQueueGenericSendFromISR+0x30>
 800e382:	2300      	movs	r3, #0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <xQueueGenericSendFromISR+0x38>
 800e388:	b672      	cpsid	i
 800e38a:	e7fe      	b.n	800e38a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d103      	bne.n	800e39a <xQueueGenericSendFromISR+0x46>
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e396:	2b01      	cmp	r3, #1
 800e398:	d101      	bne.n	800e39e <xQueueGenericSendFromISR+0x4a>
 800e39a:	2301      	movs	r3, #1
 800e39c:	e000      	b.n	800e3a0 <xQueueGenericSendFromISR+0x4c>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <xQueueGenericSendFromISR+0x54>
 800e3a4:	b672      	cpsid	i
 800e3a6:	e7fe      	b.n	800e3a6 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3a8:	f001 fcc4 	bl	800fd34 <ulSetInterruptMaskFromISR>
 800e3ac:	0003      	movs	r3, r0
 800e3ae:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3b0:	6a3b      	ldr	r3, [r7, #32]
 800e3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d302      	bcc.n	800e3c2 <xQueueGenericSendFromISR+0x6e>
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d131      	bne.n	800e426 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3c2:	241b      	movs	r4, #27
 800e3c4:	193b      	adds	r3, r7, r4
 800e3c6:	6a3a      	ldr	r2, [r7, #32]
 800e3c8:	2145      	movs	r1, #69	; 0x45
 800e3ca:	5c52      	ldrb	r2, [r2, r1]
 800e3cc:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3ce:	6a3b      	ldr	r3, [r7, #32]
 800e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	68b9      	ldr	r1, [r7, #8]
 800e3d8:	6a3b      	ldr	r3, [r7, #32]
 800e3da:	0018      	movs	r0, r3
 800e3dc:	f000 f8e3 	bl	800e5a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e3e0:	193b      	adds	r3, r7, r4
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	b25b      	sxtb	r3, r3
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	d111      	bne.n	800e40e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3ea:	6a3b      	ldr	r3, [r7, #32]
 800e3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d016      	beq.n	800e420 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	3324      	adds	r3, #36	; 0x24
 800e3f6:	0018      	movs	r0, r3
 800e3f8:	f000 fe5e 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e3fc:	1e03      	subs	r3, r0, #0
 800e3fe:	d00f      	beq.n	800e420 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00c      	beq.n	800e420 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	601a      	str	r2, [r3, #0]
 800e40c:	e008      	b.n	800e420 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e40e:	231b      	movs	r3, #27
 800e410:	18fb      	adds	r3, r7, r3
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	3301      	adds	r3, #1
 800e416:	b2db      	uxtb	r3, r3
 800e418:	b259      	sxtb	r1, r3
 800e41a:	6a3b      	ldr	r3, [r7, #32]
 800e41c:	2245      	movs	r2, #69	; 0x45
 800e41e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800e420:	2301      	movs	r3, #1
 800e422:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800e424:	e001      	b.n	800e42a <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e426:	2300      	movs	r3, #0
 800e428:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	0018      	movs	r0, r3
 800e42e:	f001 fc87 	bl	800fd40 <vClearInterruptMaskFromISR>

	return xReturn;
 800e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e434:	0018      	movs	r0, r3
 800e436:	46bd      	mov	sp, r7
 800e438:	b00b      	add	sp, #44	; 0x2c
 800e43a:	bd90      	pop	{r4, r7, pc}

0800e43c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08a      	sub	sp, #40	; 0x28
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e448:	2300      	movs	r3, #0
 800e44a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e450:	6a3b      	ldr	r3, [r7, #32]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <xQueueReceive+0x1e>
 800e456:	b672      	cpsid	i
 800e458:	e7fe      	b.n	800e458 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d103      	bne.n	800e468 <xQueueReceive+0x2c>
 800e460:	6a3b      	ldr	r3, [r7, #32]
 800e462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e464:	2b00      	cmp	r3, #0
 800e466:	d101      	bne.n	800e46c <xQueueReceive+0x30>
 800e468:	2301      	movs	r3, #1
 800e46a:	e000      	b.n	800e46e <xQueueReceive+0x32>
 800e46c:	2300      	movs	r3, #0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <xQueueReceive+0x3a>
 800e472:	b672      	cpsid	i
 800e474:	e7fe      	b.n	800e474 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e476:	f000 ffb7 	bl	800f3e8 <xTaskGetSchedulerState>
 800e47a:	1e03      	subs	r3, r0, #0
 800e47c:	d102      	bne.n	800e484 <xQueueReceive+0x48>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d101      	bne.n	800e488 <xQueueReceive+0x4c>
 800e484:	2301      	movs	r3, #1
 800e486:	e000      	b.n	800e48a <xQueueReceive+0x4e>
 800e488:	2300      	movs	r3, #0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d101      	bne.n	800e492 <xQueueReceive+0x56>
 800e48e:	b672      	cpsid	i
 800e490:	e7fe      	b.n	800e490 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e492:	f001 fc25 	bl	800fce0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d01a      	beq.n	800e4d8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	6a3b      	ldr	r3, [r7, #32]
 800e4a6:	0011      	movs	r1, r2
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f000 f8e7 	bl	800e67c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	1e5a      	subs	r2, r3, #1
 800e4b2:	6a3b      	ldr	r3, [r7, #32]
 800e4b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d008      	beq.n	800e4d0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4be:	6a3b      	ldr	r3, [r7, #32]
 800e4c0:	3310      	adds	r3, #16
 800e4c2:	0018      	movs	r0, r3
 800e4c4:	f000 fdf8 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e4c8:	1e03      	subs	r3, r0, #0
 800e4ca:	d001      	beq.n	800e4d0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e4cc:	f001 fbf8 	bl	800fcc0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e4d0:	f001 fc18 	bl	800fd04 <vPortExitCritical>
				return pdPASS;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e062      	b.n	800e59e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d103      	bne.n	800e4e6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4de:	f001 fc11 	bl	800fd04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e05b      	b.n	800e59e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d106      	bne.n	800e4fa <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4ec:	2314      	movs	r3, #20
 800e4ee:	18fb      	adds	r3, r7, r3
 800e4f0:	0018      	movs	r0, r3
 800e4f2:	f000 fe3d 	bl	800f170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4fa:	f001 fc03 	bl	800fd04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4fe:	f000 fbe7 	bl	800ecd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e502:	f001 fbed 	bl	800fce0 <vPortEnterCritical>
 800e506:	6a3b      	ldr	r3, [r7, #32]
 800e508:	2244      	movs	r2, #68	; 0x44
 800e50a:	5c9b      	ldrb	r3, [r3, r2]
 800e50c:	b25b      	sxtb	r3, r3
 800e50e:	3301      	adds	r3, #1
 800e510:	d103      	bne.n	800e51a <xQueueReceive+0xde>
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	2244      	movs	r2, #68	; 0x44
 800e516:	2100      	movs	r1, #0
 800e518:	5499      	strb	r1, [r3, r2]
 800e51a:	6a3b      	ldr	r3, [r7, #32]
 800e51c:	2245      	movs	r2, #69	; 0x45
 800e51e:	5c9b      	ldrb	r3, [r3, r2]
 800e520:	b25b      	sxtb	r3, r3
 800e522:	3301      	adds	r3, #1
 800e524:	d103      	bne.n	800e52e <xQueueReceive+0xf2>
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	2245      	movs	r2, #69	; 0x45
 800e52a:	2100      	movs	r1, #0
 800e52c:	5499      	strb	r1, [r3, r2]
 800e52e:	f001 fbe9 	bl	800fd04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e532:	1d3a      	adds	r2, r7, #4
 800e534:	2314      	movs	r3, #20
 800e536:	18fb      	adds	r3, r7, r3
 800e538:	0011      	movs	r1, r2
 800e53a:	0018      	movs	r0, r3
 800e53c:	f000 fe2c 	bl	800f198 <xTaskCheckForTimeOut>
 800e540:	1e03      	subs	r3, r0, #0
 800e542:	d11e      	bne.n	800e582 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	0018      	movs	r0, r3
 800e548:	f000 f91c 	bl	800e784 <prvIsQueueEmpty>
 800e54c:	1e03      	subs	r3, r0, #0
 800e54e:	d011      	beq.n	800e574 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e550:	6a3b      	ldr	r3, [r7, #32]
 800e552:	3324      	adds	r3, #36	; 0x24
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	0011      	movs	r1, r2
 800e558:	0018      	movs	r0, r3
 800e55a:	f000 fd69 	bl	800f030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	0018      	movs	r0, r3
 800e562:	f000 f8b1 	bl	800e6c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e566:	f000 fbbf 	bl	800ece8 <xTaskResumeAll>
 800e56a:	1e03      	subs	r3, r0, #0
 800e56c:	d191      	bne.n	800e492 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800e56e:	f001 fba7 	bl	800fcc0 <vPortYield>
 800e572:	e78e      	b.n	800e492 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e574:	6a3b      	ldr	r3, [r7, #32]
 800e576:	0018      	movs	r0, r3
 800e578:	f000 f8a6 	bl	800e6c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e57c:	f000 fbb4 	bl	800ece8 <xTaskResumeAll>
 800e580:	e787      	b.n	800e492 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	0018      	movs	r0, r3
 800e586:	f000 f89f 	bl	800e6c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e58a:	f000 fbad 	bl	800ece8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e58e:	6a3b      	ldr	r3, [r7, #32]
 800e590:	0018      	movs	r0, r3
 800e592:	f000 f8f7 	bl	800e784 <prvIsQueueEmpty>
 800e596:	1e03      	subs	r3, r0, #0
 800e598:	d100      	bne.n	800e59c <xQueueReceive+0x160>
 800e59a:	e77a      	b.n	800e492 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e59c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e59e:	0018      	movs	r0, r3
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	b00a      	add	sp, #40	; 0x28
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b086      	sub	sp, #24
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	60f8      	str	r0, [r7, #12]
 800e5ae:	60b9      	str	r1, [r7, #8]
 800e5b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10e      	bne.n	800e5e2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d14e      	bne.n	800e66a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	0018      	movs	r0, r3
 800e5d2:	f000 ff25 	bl	800f420 <xTaskPriorityDisinherit>
 800e5d6:	0003      	movs	r3, r0
 800e5d8:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	609a      	str	r2, [r3, #8]
 800e5e0:	e043      	b.n	800e66a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d119      	bne.n	800e61c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6858      	ldr	r0, [r3, #4]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	0019      	movs	r1, r3
 800e5f4:	f003 fece 	bl	8012394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	685a      	ldr	r2, [r3, #4]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e600:	18d2      	adds	r2, r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	685a      	ldr	r2, [r3, #4]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d32b      	bcc.n	800e66a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	605a      	str	r2, [r3, #4]
 800e61a:	e026      	b.n	800e66a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	68d8      	ldr	r0, [r3, #12]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	0019      	movs	r1, r3
 800e628:	f003 feb4 	bl	8012394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	68da      	ldr	r2, [r3, #12]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e634:	425b      	negs	r3, r3
 800e636:	18d2      	adds	r2, r2, r3
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	68da      	ldr	r2, [r3, #12]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	d207      	bcs.n	800e658 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	689a      	ldr	r2, [r3, #8]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e650:	425b      	negs	r3, r3
 800e652:	18d2      	adds	r2, r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d105      	bne.n	800e66a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d002      	beq.n	800e66a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	3b01      	subs	r3, #1
 800e668:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	1c5a      	adds	r2, r3, #1
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e672:	697b      	ldr	r3, [r7, #20]
}
 800e674:	0018      	movs	r0, r3
 800e676:	46bd      	mov	sp, r7
 800e678:	b006      	add	sp, #24
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d018      	beq.n	800e6c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68da      	ldr	r2, [r3, #12]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e696:	18d2      	adds	r2, r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68da      	ldr	r2, [r3, #12]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d303      	bcc.n	800e6b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68d9      	ldr	r1, [r3, #12]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	0018      	movs	r0, r3
 800e6bc:	f003 fe6a 	bl	8012394 <memcpy>
	}
}
 800e6c0:	46c0      	nop			; (mov r8, r8)
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	b002      	add	sp, #8
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e6d0:	f001 fb06 	bl	800fce0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e6d4:	230f      	movs	r3, #15
 800e6d6:	18fb      	adds	r3, r7, r3
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	2145      	movs	r1, #69	; 0x45
 800e6dc:	5c52      	ldrb	r2, [r2, r1]
 800e6de:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6e0:	e013      	b.n	800e70a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d016      	beq.n	800e718 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	3324      	adds	r3, #36	; 0x24
 800e6ee:	0018      	movs	r0, r3
 800e6f0:	f000 fce2 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e6f4:	1e03      	subs	r3, r0, #0
 800e6f6:	d001      	beq.n	800e6fc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e6f8:	f000 fd9e 	bl	800f238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e6fc:	210f      	movs	r1, #15
 800e6fe:	187b      	adds	r3, r7, r1
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	3b01      	subs	r3, #1
 800e704:	b2da      	uxtb	r2, r3
 800e706:	187b      	adds	r3, r7, r1
 800e708:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e70a:	230f      	movs	r3, #15
 800e70c:	18fb      	adds	r3, r7, r3
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	b25b      	sxtb	r3, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	dce5      	bgt.n	800e6e2 <prvUnlockQueue+0x1a>
 800e716:	e000      	b.n	800e71a <prvUnlockQueue+0x52>
					break;
 800e718:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2245      	movs	r2, #69	; 0x45
 800e71e:	21ff      	movs	r1, #255	; 0xff
 800e720:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800e722:	f001 faef 	bl	800fd04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e726:	f001 fadb 	bl	800fce0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e72a:	230e      	movs	r3, #14
 800e72c:	18fb      	adds	r3, r7, r3
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	2144      	movs	r1, #68	; 0x44
 800e732:	5c52      	ldrb	r2, [r2, r1]
 800e734:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e736:	e013      	b.n	800e760 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	691b      	ldr	r3, [r3, #16]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d016      	beq.n	800e76e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3310      	adds	r3, #16
 800e744:	0018      	movs	r0, r3
 800e746:	f000 fcb7 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e74a:	1e03      	subs	r3, r0, #0
 800e74c:	d001      	beq.n	800e752 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800e74e:	f000 fd73 	bl	800f238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e752:	210e      	movs	r1, #14
 800e754:	187b      	adds	r3, r7, r1
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	3b01      	subs	r3, #1
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	187b      	adds	r3, r7, r1
 800e75e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e760:	230e      	movs	r3, #14
 800e762:	18fb      	adds	r3, r7, r3
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	b25b      	sxtb	r3, r3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	dce5      	bgt.n	800e738 <prvUnlockQueue+0x70>
 800e76c:	e000      	b.n	800e770 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800e76e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2244      	movs	r2, #68	; 0x44
 800e774:	21ff      	movs	r1, #255	; 0xff
 800e776:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800e778:	f001 fac4 	bl	800fd04 <vPortExitCritical>
}
 800e77c:	46c0      	nop			; (mov r8, r8)
 800e77e:	46bd      	mov	sp, r7
 800e780:	b004      	add	sp, #16
 800e782:	bd80      	pop	{r7, pc}

0800e784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e78c:	f001 faa8 	bl	800fce0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e794:	2b00      	cmp	r3, #0
 800e796:	d102      	bne.n	800e79e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e798:	2301      	movs	r3, #1
 800e79a:	60fb      	str	r3, [r7, #12]
 800e79c:	e001      	b.n	800e7a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7a2:	f001 faaf 	bl	800fd04 <vPortExitCritical>

	return xReturn;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
}
 800e7a8:	0018      	movs	r0, r3
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	b004      	add	sp, #16
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7b8:	f001 fa92 	bl	800fce0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d102      	bne.n	800e7ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	e001      	b.n	800e7d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7d2:	f001 fa97 	bl	800fd04 <vPortExitCritical>

	return xReturn;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
}
 800e7d8:	0018      	movs	r0, r3
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	b004      	add	sp, #16
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60fb      	str	r3, [r7, #12]
 800e7ee:	e015      	b.n	800e81c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e7f0:	4b0e      	ldr	r3, [pc, #56]	; (800e82c <vQueueAddToRegistry+0x4c>)
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	00d2      	lsls	r2, r2, #3
 800e7f6:	58d3      	ldr	r3, [r2, r3]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10c      	bne.n	800e816 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e7fc:	4b0b      	ldr	r3, [pc, #44]	; (800e82c <vQueueAddToRegistry+0x4c>)
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	00d2      	lsls	r2, r2, #3
 800e802:	6839      	ldr	r1, [r7, #0]
 800e804:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e806:	4a09      	ldr	r2, [pc, #36]	; (800e82c <vQueueAddToRegistry+0x4c>)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	00db      	lsls	r3, r3, #3
 800e80c:	18d3      	adds	r3, r2, r3
 800e80e:	3304      	adds	r3, #4
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e814:	e006      	b.n	800e824 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	3301      	adds	r3, #1
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b07      	cmp	r3, #7
 800e820:	d9e6      	bls.n	800e7f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e822:	46c0      	nop			; (mov r8, r8)
 800e824:	46c0      	nop			; (mov r8, r8)
 800e826:	46bd      	mov	sp, r7
 800e828:	b004      	add	sp, #16
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	20004254 	.word	0x20004254

0800e830 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e830:	b580      	push	{r7, lr}
 800e832:	b086      	sub	sp, #24
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e840:	f001 fa4e 	bl	800fce0 <vPortEnterCritical>
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2244      	movs	r2, #68	; 0x44
 800e848:	5c9b      	ldrb	r3, [r3, r2]
 800e84a:	b25b      	sxtb	r3, r3
 800e84c:	3301      	adds	r3, #1
 800e84e:	d103      	bne.n	800e858 <vQueueWaitForMessageRestricted+0x28>
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	2244      	movs	r2, #68	; 0x44
 800e854:	2100      	movs	r1, #0
 800e856:	5499      	strb	r1, [r3, r2]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2245      	movs	r2, #69	; 0x45
 800e85c:	5c9b      	ldrb	r3, [r3, r2]
 800e85e:	b25b      	sxtb	r3, r3
 800e860:	3301      	adds	r3, #1
 800e862:	d103      	bne.n	800e86c <vQueueWaitForMessageRestricted+0x3c>
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2245      	movs	r2, #69	; 0x45
 800e868:	2100      	movs	r1, #0
 800e86a:	5499      	strb	r1, [r3, r2]
 800e86c:	f001 fa4a 	bl	800fd04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	3324      	adds	r3, #36	; 0x24
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	68b9      	ldr	r1, [r7, #8]
 800e880:	0018      	movs	r0, r3
 800e882:	f000 fbf3 	bl	800f06c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	0018      	movs	r0, r3
 800e88a:	f7ff ff1d 	bl	800e6c8 <prvUnlockQueue>
	}
 800e88e:	46c0      	nop			; (mov r8, r8)
 800e890:	46bd      	mov	sp, r7
 800e892:	b006      	add	sp, #24
 800e894:	bd80      	pop	{r7, pc}

0800e896 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e896:	b590      	push	{r4, r7, lr}
 800e898:	b08d      	sub	sp, #52	; 0x34
 800e89a:	af04      	add	r7, sp, #16
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	60b9      	str	r1, [r7, #8]
 800e8a0:	607a      	str	r2, [r7, #4]
 800e8a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d101      	bne.n	800e8ae <xTaskCreateStatic+0x18>
 800e8aa:	b672      	cpsid	i
 800e8ac:	e7fe      	b.n	800e8ac <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <xTaskCreateStatic+0x22>
 800e8b4:	b672      	cpsid	i
 800e8b6:	e7fe      	b.n	800e8b6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e8b8:	23a8      	movs	r3, #168	; 0xa8
 800e8ba:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	2ba8      	cmp	r3, #168	; 0xa8
 800e8c0:	d001      	beq.n	800e8c6 <xTaskCreateStatic+0x30>
 800e8c2:	b672      	cpsid	i
 800e8c4:	e7fe      	b.n	800e8c4 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e8c6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d020      	beq.n	800e910 <xTaskCreateStatic+0x7a>
 800e8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d01d      	beq.n	800e910 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	22a5      	movs	r2, #165	; 0xa5
 800e8e2:	2102      	movs	r1, #2
 800e8e4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e8e6:	683c      	ldr	r4, [r7, #0]
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	68b9      	ldr	r1, [r7, #8]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	9303      	str	r3, [sp, #12]
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	9302      	str	r3, [sp, #8]
 800e8f6:	2318      	movs	r3, #24
 800e8f8:	18fb      	adds	r3, r7, r3
 800e8fa:	9301      	str	r3, [sp, #4]
 800e8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	0023      	movs	r3, r4
 800e902:	f000 f859 	bl	800e9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	0018      	movs	r0, r3
 800e90a:	f000 f8f5 	bl	800eaf8 <prvAddNewTaskToReadyList>
 800e90e:	e001      	b.n	800e914 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800e910:	2300      	movs	r3, #0
 800e912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e914:	69bb      	ldr	r3, [r7, #24]
	}
 800e916:	0018      	movs	r0, r3
 800e918:	46bd      	mov	sp, r7
 800e91a:	b009      	add	sp, #36	; 0x24
 800e91c:	bd90      	pop	{r4, r7, pc}

0800e91e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e91e:	b590      	push	{r4, r7, lr}
 800e920:	b08d      	sub	sp, #52	; 0x34
 800e922:	af04      	add	r7, sp, #16
 800e924:	60f8      	str	r0, [r7, #12]
 800e926:	60b9      	str	r1, [r7, #8]
 800e928:	603b      	str	r3, [r7, #0]
 800e92a:	1dbb      	adds	r3, r7, #6
 800e92c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e92e:	1dbb      	adds	r3, r7, #6
 800e930:	881b      	ldrh	r3, [r3, #0]
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	0018      	movs	r0, r3
 800e936:	f001 fa6b 	bl	800fe10 <pvPortMalloc>
 800e93a:	0003      	movs	r3, r0
 800e93c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d010      	beq.n	800e966 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e944:	20a8      	movs	r0, #168	; 0xa8
 800e946:	f001 fa63 	bl	800fe10 <pvPortMalloc>
 800e94a:	0003      	movs	r3, r0
 800e94c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d003      	beq.n	800e95c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	631a      	str	r2, [r3, #48]	; 0x30
 800e95a:	e006      	b.n	800e96a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	0018      	movs	r0, r3
 800e960:	f001 fb02 	bl	800ff68 <vPortFree>
 800e964:	e001      	b.n	800e96a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e966:	2300      	movs	r3, #0
 800e968:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01a      	beq.n	800e9a6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	22a5      	movs	r2, #165	; 0xa5
 800e974:	2100      	movs	r1, #0
 800e976:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e978:	1dbb      	adds	r3, r7, #6
 800e97a:	881a      	ldrh	r2, [r3, #0]
 800e97c:	683c      	ldr	r4, [r7, #0]
 800e97e:	68b9      	ldr	r1, [r7, #8]
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	2300      	movs	r3, #0
 800e984:	9303      	str	r3, [sp, #12]
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	9302      	str	r3, [sp, #8]
 800e98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e98c:	9301      	str	r3, [sp, #4]
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	0023      	movs	r3, r4
 800e994:	f000 f810 	bl	800e9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	0018      	movs	r0, r3
 800e99c:	f000 f8ac 	bl	800eaf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	61bb      	str	r3, [r7, #24]
 800e9a4:	e002      	b.n	800e9ac <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	425b      	negs	r3, r3
 800e9aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e9ac:	69bb      	ldr	r3, [r7, #24]
	}
 800e9ae:	0018      	movs	r0, r3
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	b009      	add	sp, #36	; 0x24
 800e9b4:	bd90      	pop	{r4, r7, pc}
	...

0800e9b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	001a      	movs	r2, r3
 800e9d0:	21a5      	movs	r1, #165	; 0xa5
 800e9d2:	f003 fb17 	bl	8012004 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4942      	ldr	r1, [pc, #264]	; (800eae8 <prvInitialiseNewTask+0x130>)
 800e9de:	468c      	mov	ip, r1
 800e9e0:	4463      	add	r3, ip
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	18d3      	adds	r3, r2, r3
 800e9e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	2207      	movs	r2, #7
 800e9ec:	4393      	bics	r3, r2
 800e9ee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	2207      	movs	r2, #7
 800e9f4:	4013      	ands	r3, r2
 800e9f6:	d001      	beq.n	800e9fc <prvInitialiseNewTask+0x44>
 800e9f8:	b672      	cpsid	i
 800e9fa:	e7fe      	b.n	800e9fa <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d020      	beq.n	800ea44 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea02:	2300      	movs	r3, #0
 800ea04:	617b      	str	r3, [r7, #20]
 800ea06:	e013      	b.n	800ea30 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	18d3      	adds	r3, r2, r3
 800ea0e:	7818      	ldrb	r0, [r3, #0]
 800ea10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea12:	2134      	movs	r1, #52	; 0x34
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	18d3      	adds	r3, r2, r3
 800ea18:	185b      	adds	r3, r3, r1
 800ea1a:	1c02      	adds	r2, r0, #0
 800ea1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ea1e:	68ba      	ldr	r2, [r7, #8]
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	18d3      	adds	r3, r2, r3
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d006      	beq.n	800ea38 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	617b      	str	r3, [r7, #20]
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	2b0f      	cmp	r3, #15
 800ea34:	d9e8      	bls.n	800ea08 <prvInitialiseNewTask+0x50>
 800ea36:	e000      	b.n	800ea3a <prvInitialiseNewTask+0x82>
			{
				break;
 800ea38:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3c:	2243      	movs	r2, #67	; 0x43
 800ea3e:	2100      	movs	r1, #0
 800ea40:	5499      	strb	r1, [r3, r2]
 800ea42:	e003      	b.n	800ea4c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	2234      	movs	r2, #52	; 0x34
 800ea48:	2100      	movs	r1, #0
 800ea4a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	2b37      	cmp	r3, #55	; 0x37
 800ea50:	d901      	bls.n	800ea56 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea52:	2337      	movs	r3, #55	; 0x37
 800ea54:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea58:	6a3a      	ldr	r2, [r7, #32]
 800ea5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5e:	6a3a      	ldr	r2, [r7, #32]
 800ea60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	2200      	movs	r2, #0
 800ea66:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	0018      	movs	r0, r3
 800ea6e:	f7ff fa29 	bl	800dec4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	3318      	adds	r3, #24
 800ea76:	0018      	movs	r0, r3
 800ea78:	f7ff fa24 	bl	800dec4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ea7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	2238      	movs	r2, #56	; 0x38
 800ea86:	1ad2      	subs	r2, r2, r3
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	22a0      	movs	r2, #160	; 0xa0
 800ea96:	2100      	movs	r1, #0
 800ea98:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9c:	22a4      	movs	r2, #164	; 0xa4
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa4:	3354      	adds	r3, #84	; 0x54
 800eaa6:	224c      	movs	r2, #76	; 0x4c
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	0018      	movs	r0, r3
 800eaac:	f003 faaa 	bl	8012004 <memset>
 800eab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab2:	4a0e      	ldr	r2, [pc, #56]	; (800eaec <prvInitialiseNewTask+0x134>)
 800eab4:	659a      	str	r2, [r3, #88]	; 0x58
 800eab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab8:	4a0d      	ldr	r2, [pc, #52]	; (800eaf0 <prvInitialiseNewTask+0x138>)
 800eaba:	65da      	str	r2, [r3, #92]	; 0x5c
 800eabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabe:	4a0d      	ldr	r2, [pc, #52]	; (800eaf4 <prvInitialiseNewTask+0x13c>)
 800eac0:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	68f9      	ldr	r1, [r7, #12]
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	0018      	movs	r0, r3
 800eaca:	f001 f86b 	bl	800fba4 <pxPortInitialiseStack>
 800eace:	0002      	movs	r2, r0
 800ead0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d002      	beq.n	800eae0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eae0:	46c0      	nop			; (mov r8, r8)
 800eae2:	46bd      	mov	sp, r7
 800eae4:	b006      	add	sp, #24
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	3fffffff 	.word	0x3fffffff
 800eaec:	200054e8 	.word	0x200054e8
 800eaf0:	20005550 	.word	0x20005550
 800eaf4:	200055b8 	.word	0x200055b8

0800eaf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb00:	f001 f8ee 	bl	800fce0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb04:	4b2a      	ldr	r3, [pc, #168]	; (800ebb0 <prvAddNewTaskToReadyList+0xb8>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	1c5a      	adds	r2, r3, #1
 800eb0a:	4b29      	ldr	r3, [pc, #164]	; (800ebb0 <prvAddNewTaskToReadyList+0xb8>)
 800eb0c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800eb0e:	4b29      	ldr	r3, [pc, #164]	; (800ebb4 <prvAddNewTaskToReadyList+0xbc>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d109      	bne.n	800eb2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb16:	4b27      	ldr	r3, [pc, #156]	; (800ebb4 <prvAddNewTaskToReadyList+0xbc>)
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb1c:	4b24      	ldr	r3, [pc, #144]	; (800ebb0 <prvAddNewTaskToReadyList+0xb8>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d110      	bne.n	800eb46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eb24:	f000 fba2 	bl	800f26c <prvInitialiseTaskLists>
 800eb28:	e00d      	b.n	800eb46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eb2a:	4b23      	ldr	r3, [pc, #140]	; (800ebb8 <prvAddNewTaskToReadyList+0xc0>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d109      	bne.n	800eb46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eb32:	4b20      	ldr	r3, [pc, #128]	; (800ebb4 <prvAddNewTaskToReadyList+0xbc>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d802      	bhi.n	800eb46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eb40:	4b1c      	ldr	r3, [pc, #112]	; (800ebb4 <prvAddNewTaskToReadyList+0xbc>)
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eb46:	4b1d      	ldr	r3, [pc, #116]	; (800ebbc <prvAddNewTaskToReadyList+0xc4>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	4b1b      	ldr	r3, [pc, #108]	; (800ebbc <prvAddNewTaskToReadyList+0xc4>)
 800eb4e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eb50:	4b1a      	ldr	r3, [pc, #104]	; (800ebbc <prvAddNewTaskToReadyList+0xc4>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb5c:	4b18      	ldr	r3, [pc, #96]	; (800ebc0 <prvAddNewTaskToReadyList+0xc8>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d903      	bls.n	800eb6c <prvAddNewTaskToReadyList+0x74>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb68:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <prvAddNewTaskToReadyList+0xc8>)
 800eb6a:	601a      	str	r2, [r3, #0]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb70:	0013      	movs	r3, r2
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	189b      	adds	r3, r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4a12      	ldr	r2, [pc, #72]	; (800ebc4 <prvAddNewTaskToReadyList+0xcc>)
 800eb7a:	189a      	adds	r2, r3, r2
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3304      	adds	r3, #4
 800eb80:	0019      	movs	r1, r3
 800eb82:	0010      	movs	r0, r2
 800eb84:	f7ff f9a9 	bl	800deda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eb88:	f001 f8bc 	bl	800fd04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eb8c:	4b0a      	ldr	r3, [pc, #40]	; (800ebb8 <prvAddNewTaskToReadyList+0xc0>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d008      	beq.n	800eba6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eb94:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <prvAddNewTaskToReadyList+0xbc>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d201      	bcs.n	800eba6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eba2:	f001 f88d 	bl	800fcc0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eba6:	46c0      	nop			; (mov r8, r8)
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	b002      	add	sp, #8
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	46c0      	nop			; (mov r8, r8)
 800ebb0:	20004768 	.word	0x20004768
 800ebb4:	20004294 	.word	0x20004294
 800ebb8:	20004774 	.word	0x20004774
 800ebbc:	20004784 	.word	0x20004784
 800ebc0:	20004770 	.word	0x20004770
 800ebc4:	20004298 	.word	0x20004298

0800ebc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d010      	beq.n	800ebfc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ebda:	4b0d      	ldr	r3, [pc, #52]	; (800ec10 <vTaskDelay+0x48>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <vTaskDelay+0x1e>
 800ebe2:	b672      	cpsid	i
 800ebe4:	e7fe      	b.n	800ebe4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800ebe6:	f000 f873 	bl	800ecd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2100      	movs	r1, #0
 800ebee:	0018      	movs	r0, r3
 800ebf0:	f000 fc72 	bl	800f4d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ebf4:	f000 f878 	bl	800ece8 <xTaskResumeAll>
 800ebf8:	0003      	movs	r3, r0
 800ebfa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d101      	bne.n	800ec06 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800ec02:	f001 f85d 	bl	800fcc0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec06:	46c0      	nop			; (mov r8, r8)
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	b004      	add	sp, #16
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	46c0      	nop			; (mov r8, r8)
 800ec10:	20004790 	.word	0x20004790

0800ec14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ec14:	b590      	push	{r4, r7, lr}
 800ec16:	b089      	sub	sp, #36	; 0x24
 800ec18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ec22:	003a      	movs	r2, r7
 800ec24:	1d39      	adds	r1, r7, #4
 800ec26:	2308      	movs	r3, #8
 800ec28:	18fb      	adds	r3, r7, r3
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	f7ff f8fc 	bl	800de28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ec30:	683c      	ldr	r4, [r7, #0]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	491e      	ldr	r1, [pc, #120]	; (800ecb0 <vTaskStartScheduler+0x9c>)
 800ec38:	481e      	ldr	r0, [pc, #120]	; (800ecb4 <vTaskStartScheduler+0xa0>)
 800ec3a:	9202      	str	r2, [sp, #8]
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	2300      	movs	r3, #0
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	2300      	movs	r3, #0
 800ec44:	0022      	movs	r2, r4
 800ec46:	f7ff fe26 	bl	800e896 <xTaskCreateStatic>
 800ec4a:	0002      	movs	r2, r0
 800ec4c:	4b1a      	ldr	r3, [pc, #104]	; (800ecb8 <vTaskStartScheduler+0xa4>)
 800ec4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ec50:	4b19      	ldr	r3, [pc, #100]	; (800ecb8 <vTaskStartScheduler+0xa4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	e001      	b.n	800ec62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d103      	bne.n	800ec70 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800ec68:	f000 fc8a 	bl	800f580 <xTimerCreateTimerTask>
 800ec6c:	0003      	movs	r3, r0
 800ec6e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d113      	bne.n	800ec9e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800ec76:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec78:	4b10      	ldr	r3, [pc, #64]	; (800ecbc <vTaskStartScheduler+0xa8>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	3354      	adds	r3, #84	; 0x54
 800ec7e:	001a      	movs	r2, r3
 800ec80:	4b0f      	ldr	r3, [pc, #60]	; (800ecc0 <vTaskStartScheduler+0xac>)
 800ec82:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ec84:	4b0f      	ldr	r3, [pc, #60]	; (800ecc4 <vTaskStartScheduler+0xb0>)
 800ec86:	2201      	movs	r2, #1
 800ec88:	4252      	negs	r2, r2
 800ec8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec8c:	4b0e      	ldr	r3, [pc, #56]	; (800ecc8 <vTaskStartScheduler+0xb4>)
 800ec8e:	2201      	movs	r2, #1
 800ec90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec92:	4b0e      	ldr	r3, [pc, #56]	; (800eccc <vTaskStartScheduler+0xb8>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec98:	f000 ffee 	bl	800fc78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec9c:	e004      	b.n	800eca8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	3301      	adds	r3, #1
 800eca2:	d101      	bne.n	800eca8 <vTaskStartScheduler+0x94>
 800eca4:	b672      	cpsid	i
 800eca6:	e7fe      	b.n	800eca6 <vTaskStartScheduler+0x92>
}
 800eca8:	46c0      	nop			; (mov r8, r8)
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	b005      	add	sp, #20
 800ecae:	bd90      	pop	{r4, r7, pc}
 800ecb0:	080171a0 	.word	0x080171a0
 800ecb4:	0800f24d 	.word	0x0800f24d
 800ecb8:	2000478c 	.word	0x2000478c
 800ecbc:	20004294 	.word	0x20004294
 800ecc0:	200002b4 	.word	0x200002b4
 800ecc4:	20004788 	.word	0x20004788
 800ecc8:	20004774 	.word	0x20004774
 800eccc:	2000476c 	.word	0x2000476c

0800ecd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ecd4:	4b03      	ldr	r3, [pc, #12]	; (800ece4 <vTaskSuspendAll+0x14>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	4b02      	ldr	r3, [pc, #8]	; (800ece4 <vTaskSuspendAll+0x14>)
 800ecdc:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ecde:	46c0      	nop			; (mov r8, r8)
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20004790 	.word	0x20004790

0800ece8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ecf6:	4b3a      	ldr	r3, [pc, #232]	; (800ede0 <xTaskResumeAll+0xf8>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <xTaskResumeAll+0x1a>
 800ecfe:	b672      	cpsid	i
 800ed00:	e7fe      	b.n	800ed00 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ed02:	f000 ffed 	bl	800fce0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ed06:	4b36      	ldr	r3, [pc, #216]	; (800ede0 <xTaskResumeAll+0xf8>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	1e5a      	subs	r2, r3, #1
 800ed0c:	4b34      	ldr	r3, [pc, #208]	; (800ede0 <xTaskResumeAll+0xf8>)
 800ed0e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed10:	4b33      	ldr	r3, [pc, #204]	; (800ede0 <xTaskResumeAll+0xf8>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d15b      	bne.n	800edd0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ed18:	4b32      	ldr	r3, [pc, #200]	; (800ede4 <xTaskResumeAll+0xfc>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d057      	beq.n	800edd0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed20:	e02f      	b.n	800ed82 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed22:	4b31      	ldr	r3, [pc, #196]	; (800ede8 <xTaskResumeAll+0x100>)
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	3318      	adds	r3, #24
 800ed2e:	0018      	movs	r0, r3
 800ed30:	f7ff f92b 	bl	800df8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	3304      	adds	r3, #4
 800ed38:	0018      	movs	r0, r3
 800ed3a:	f7ff f926 	bl	800df8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed42:	4b2a      	ldr	r3, [pc, #168]	; (800edec <xTaskResumeAll+0x104>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d903      	bls.n	800ed52 <xTaskResumeAll+0x6a>
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed4e:	4b27      	ldr	r3, [pc, #156]	; (800edec <xTaskResumeAll+0x104>)
 800ed50:	601a      	str	r2, [r3, #0]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed56:	0013      	movs	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	189b      	adds	r3, r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4a24      	ldr	r2, [pc, #144]	; (800edf0 <xTaskResumeAll+0x108>)
 800ed60:	189a      	adds	r2, r3, r2
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3304      	adds	r3, #4
 800ed66:	0019      	movs	r1, r3
 800ed68:	0010      	movs	r0, r2
 800ed6a:	f7ff f8b6 	bl	800deda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed72:	4b20      	ldr	r3, [pc, #128]	; (800edf4 <xTaskResumeAll+0x10c>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d302      	bcc.n	800ed82 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800ed7c:	4b1e      	ldr	r3, [pc, #120]	; (800edf8 <xTaskResumeAll+0x110>)
 800ed7e:	2201      	movs	r2, #1
 800ed80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed82:	4b19      	ldr	r3, [pc, #100]	; (800ede8 <xTaskResumeAll+0x100>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1cb      	bne.n	800ed22 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d001      	beq.n	800ed94 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed90:	f000 fb0c 	bl	800f3ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed94:	4b19      	ldr	r3, [pc, #100]	; (800edfc <xTaskResumeAll+0x114>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00f      	beq.n	800edc0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eda0:	f000 f83c 	bl	800ee1c <xTaskIncrementTick>
 800eda4:	1e03      	subs	r3, r0, #0
 800eda6:	d002      	beq.n	800edae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800eda8:	4b13      	ldr	r3, [pc, #76]	; (800edf8 <xTaskResumeAll+0x110>)
 800edaa:	2201      	movs	r2, #1
 800edac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	3b01      	subs	r3, #1
 800edb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1f2      	bne.n	800eda0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800edba:	4b10      	ldr	r3, [pc, #64]	; (800edfc <xTaskResumeAll+0x114>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800edc0:	4b0d      	ldr	r3, [pc, #52]	; (800edf8 <xTaskResumeAll+0x110>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d003      	beq.n	800edd0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800edc8:	2301      	movs	r3, #1
 800edca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800edcc:	f000 ff78 	bl	800fcc0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800edd0:	f000 ff98 	bl	800fd04 <vPortExitCritical>

	return xAlreadyYielded;
 800edd4:	68bb      	ldr	r3, [r7, #8]
}
 800edd6:	0018      	movs	r0, r3
 800edd8:	46bd      	mov	sp, r7
 800edda:	b004      	add	sp, #16
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	46c0      	nop			; (mov r8, r8)
 800ede0:	20004790 	.word	0x20004790
 800ede4:	20004768 	.word	0x20004768
 800ede8:	20004728 	.word	0x20004728
 800edec:	20004770 	.word	0x20004770
 800edf0:	20004298 	.word	0x20004298
 800edf4:	20004294 	.word	0x20004294
 800edf8:	2000477c 	.word	0x2000477c
 800edfc:	20004778 	.word	0x20004778

0800ee00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ee06:	4b04      	ldr	r3, [pc, #16]	; (800ee18 <xTaskGetTickCount+0x18>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ee0c:	687b      	ldr	r3, [r7, #4]
}
 800ee0e:	0018      	movs	r0, r3
 800ee10:	46bd      	mov	sp, r7
 800ee12:	b002      	add	sp, #8
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	46c0      	nop			; (mov r8, r8)
 800ee18:	2000476c 	.word	0x2000476c

0800ee1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ee22:	2300      	movs	r3, #0
 800ee24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee26:	4b4a      	ldr	r3, [pc, #296]	; (800ef50 <xTaskIncrementTick+0x134>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d000      	beq.n	800ee30 <xTaskIncrementTick+0x14>
 800ee2e:	e084      	b.n	800ef3a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ee30:	4b48      	ldr	r3, [pc, #288]	; (800ef54 <xTaskIncrementTick+0x138>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3301      	adds	r3, #1
 800ee36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee38:	4b46      	ldr	r3, [pc, #280]	; (800ef54 <xTaskIncrementTick+0x138>)
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d117      	bne.n	800ee74 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee44:	4b44      	ldr	r3, [pc, #272]	; (800ef58 <xTaskIncrementTick+0x13c>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d001      	beq.n	800ee52 <xTaskIncrementTick+0x36>
 800ee4e:	b672      	cpsid	i
 800ee50:	e7fe      	b.n	800ee50 <xTaskIncrementTick+0x34>
 800ee52:	4b41      	ldr	r3, [pc, #260]	; (800ef58 <xTaskIncrementTick+0x13c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	60fb      	str	r3, [r7, #12]
 800ee58:	4b40      	ldr	r3, [pc, #256]	; (800ef5c <xTaskIncrementTick+0x140>)
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	4b3e      	ldr	r3, [pc, #248]	; (800ef58 <xTaskIncrementTick+0x13c>)
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	4b3e      	ldr	r3, [pc, #248]	; (800ef5c <xTaskIncrementTick+0x140>)
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	4b3e      	ldr	r3, [pc, #248]	; (800ef60 <xTaskIncrementTick+0x144>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	1c5a      	adds	r2, r3, #1
 800ee6c:	4b3c      	ldr	r3, [pc, #240]	; (800ef60 <xTaskIncrementTick+0x144>)
 800ee6e:	601a      	str	r2, [r3, #0]
 800ee70:	f000 fa9c 	bl	800f3ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee74:	4b3b      	ldr	r3, [pc, #236]	; (800ef64 <xTaskIncrementTick+0x148>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	693a      	ldr	r2, [r7, #16]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d349      	bcc.n	800ef12 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee7e:	4b36      	ldr	r3, [pc, #216]	; (800ef58 <xTaskIncrementTick+0x13c>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d104      	bne.n	800ee92 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee88:	4b36      	ldr	r3, [pc, #216]	; (800ef64 <xTaskIncrementTick+0x148>)
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	4252      	negs	r2, r2
 800ee8e:	601a      	str	r2, [r3, #0]
					break;
 800ee90:	e03f      	b.n	800ef12 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee92:	4b31      	ldr	r3, [pc, #196]	; (800ef58 <xTaskIncrementTick+0x13c>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eea2:	693a      	ldr	r2, [r7, #16]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d203      	bcs.n	800eeb2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eeaa:	4b2e      	ldr	r3, [pc, #184]	; (800ef64 <xTaskIncrementTick+0x148>)
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eeb0:	e02f      	b.n	800ef12 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	0018      	movs	r0, r3
 800eeb8:	f7ff f867 	bl	800df8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d004      	beq.n	800eece <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	3318      	adds	r3, #24
 800eec8:	0018      	movs	r0, r3
 800eeca:	f7ff f85e 	bl	800df8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed2:	4b25      	ldr	r3, [pc, #148]	; (800ef68 <xTaskIncrementTick+0x14c>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d903      	bls.n	800eee2 <xTaskIncrementTick+0xc6>
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eede:	4b22      	ldr	r3, [pc, #136]	; (800ef68 <xTaskIncrementTick+0x14c>)
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee6:	0013      	movs	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	189b      	adds	r3, r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4a1f      	ldr	r2, [pc, #124]	; (800ef6c <xTaskIncrementTick+0x150>)
 800eef0:	189a      	adds	r2, r3, r2
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	3304      	adds	r3, #4
 800eef6:	0019      	movs	r1, r3
 800eef8:	0010      	movs	r0, r2
 800eefa:	f7fe ffee 	bl	800deda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef02:	4b1b      	ldr	r3, [pc, #108]	; (800ef70 <xTaskIncrementTick+0x154>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d3b8      	bcc.n	800ee7e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef10:	e7b5      	b.n	800ee7e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef12:	4b17      	ldr	r3, [pc, #92]	; (800ef70 <xTaskIncrementTick+0x154>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef18:	4914      	ldr	r1, [pc, #80]	; (800ef6c <xTaskIncrementTick+0x150>)
 800ef1a:	0013      	movs	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	189b      	adds	r3, r3, r2
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	585b      	ldr	r3, [r3, r1]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d901      	bls.n	800ef2c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ef2c:	4b11      	ldr	r3, [pc, #68]	; (800ef74 <xTaskIncrementTick+0x158>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d007      	beq.n	800ef44 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800ef34:	2301      	movs	r3, #1
 800ef36:	617b      	str	r3, [r7, #20]
 800ef38:	e004      	b.n	800ef44 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ef3a:	4b0f      	ldr	r3, [pc, #60]	; (800ef78 <xTaskIncrementTick+0x15c>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	1c5a      	adds	r2, r3, #1
 800ef40:	4b0d      	ldr	r3, [pc, #52]	; (800ef78 <xTaskIncrementTick+0x15c>)
 800ef42:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ef44:	697b      	ldr	r3, [r7, #20]
}
 800ef46:	0018      	movs	r0, r3
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	b006      	add	sp, #24
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	46c0      	nop			; (mov r8, r8)
 800ef50:	20004790 	.word	0x20004790
 800ef54:	2000476c 	.word	0x2000476c
 800ef58:	20004720 	.word	0x20004720
 800ef5c:	20004724 	.word	0x20004724
 800ef60:	20004780 	.word	0x20004780
 800ef64:	20004788 	.word	0x20004788
 800ef68:	20004770 	.word	0x20004770
 800ef6c:	20004298 	.word	0x20004298
 800ef70:	20004294 	.word	0x20004294
 800ef74:	2000477c 	.word	0x2000477c
 800ef78:	20004778 	.word	0x20004778

0800ef7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef82:	4b25      	ldr	r3, [pc, #148]	; (800f018 <vTaskSwitchContext+0x9c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d003      	beq.n	800ef92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef8a:	4b24      	ldr	r3, [pc, #144]	; (800f01c <vTaskSwitchContext+0xa0>)
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef90:	e03d      	b.n	800f00e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800ef92:	4b22      	ldr	r3, [pc, #136]	; (800f01c <vTaskSwitchContext+0xa0>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef98:	4b21      	ldr	r3, [pc, #132]	; (800f020 <vTaskSwitchContext+0xa4>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	607b      	str	r3, [r7, #4]
 800ef9e:	e007      	b.n	800efb0 <vTaskSwitchContext+0x34>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <vTaskSwitchContext+0x2e>
 800efa6:	b672      	cpsid	i
 800efa8:	e7fe      	b.n	800efa8 <vTaskSwitchContext+0x2c>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	3b01      	subs	r3, #1
 800efae:	607b      	str	r3, [r7, #4]
 800efb0:	491c      	ldr	r1, [pc, #112]	; (800f024 <vTaskSwitchContext+0xa8>)
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	0013      	movs	r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	189b      	adds	r3, r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	585b      	ldr	r3, [r3, r1]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d0ee      	beq.n	800efa0 <vTaskSwitchContext+0x24>
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	0013      	movs	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	189b      	adds	r3, r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4a15      	ldr	r2, [pc, #84]	; (800f024 <vTaskSwitchContext+0xa8>)
 800efce:	189b      	adds	r3, r3, r2
 800efd0:	603b      	str	r3, [r7, #0]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	605a      	str	r2, [r3, #4]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	685a      	ldr	r2, [r3, #4]
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	3308      	adds	r3, #8
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d104      	bne.n	800eff2 <vTaskSwitchContext+0x76>
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	685a      	ldr	r2, [r3, #4]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	605a      	str	r2, [r3, #4]
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	68da      	ldr	r2, [r3, #12]
 800eff8:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <vTaskSwitchContext+0xac>)
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	4b08      	ldr	r3, [pc, #32]	; (800f020 <vTaskSwitchContext+0xa4>)
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <vTaskSwitchContext+0xac>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3354      	adds	r3, #84	; 0x54
 800f008:	001a      	movs	r2, r3
 800f00a:	4b08      	ldr	r3, [pc, #32]	; (800f02c <vTaskSwitchContext+0xb0>)
 800f00c:	601a      	str	r2, [r3, #0]
}
 800f00e:	46c0      	nop			; (mov r8, r8)
 800f010:	46bd      	mov	sp, r7
 800f012:	b002      	add	sp, #8
 800f014:	bd80      	pop	{r7, pc}
 800f016:	46c0      	nop			; (mov r8, r8)
 800f018:	20004790 	.word	0x20004790
 800f01c:	2000477c 	.word	0x2000477c
 800f020:	20004770 	.word	0x20004770
 800f024:	20004298 	.word	0x20004298
 800f028:	20004294 	.word	0x20004294
 800f02c:	200002b4 	.word	0x200002b4

0800f030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <vTaskPlaceOnEventList+0x14>
 800f040:	b672      	cpsid	i
 800f042:	e7fe      	b.n	800f042 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f044:	4b08      	ldr	r3, [pc, #32]	; (800f068 <vTaskPlaceOnEventList+0x38>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3318      	adds	r3, #24
 800f04a:	001a      	movs	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	0011      	movs	r1, r2
 800f050:	0018      	movs	r0, r3
 800f052:	f7fe ff64 	bl	800df1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	2101      	movs	r1, #1
 800f05a:	0018      	movs	r0, r3
 800f05c:	f000 fa3c 	bl	800f4d8 <prvAddCurrentTaskToDelayedList>
}
 800f060:	46c0      	nop			; (mov r8, r8)
 800f062:	46bd      	mov	sp, r7
 800f064:	b002      	add	sp, #8
 800f066:	bd80      	pop	{r7, pc}
 800f068:	20004294 	.word	0x20004294

0800f06c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <vTaskPlaceOnEventListRestricted+0x16>
 800f07e:	b672      	cpsid	i
 800f080:	e7fe      	b.n	800f080 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f082:	4b0c      	ldr	r3, [pc, #48]	; (800f0b4 <vTaskPlaceOnEventListRestricted+0x48>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3318      	adds	r3, #24
 800f088:	001a      	movs	r2, r3
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	0011      	movs	r1, r2
 800f08e:	0018      	movs	r0, r3
 800f090:	f7fe ff23 	bl	800deda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d002      	beq.n	800f0a0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800f09a:	2301      	movs	r3, #1
 800f09c:	425b      	negs	r3, r3
 800f09e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	0011      	movs	r1, r2
 800f0a6:	0018      	movs	r0, r3
 800f0a8:	f000 fa16 	bl	800f4d8 <prvAddCurrentTaskToDelayedList>
	}
 800f0ac:	46c0      	nop			; (mov r8, r8)
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	b004      	add	sp, #16
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	20004294 	.word	0x20004294

0800f0b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	68db      	ldr	r3, [r3, #12]
 800f0c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <xTaskRemoveFromEventList+0x1a>
 800f0ce:	b672      	cpsid	i
 800f0d0:	e7fe      	b.n	800f0d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	3318      	adds	r3, #24
 800f0d6:	0018      	movs	r0, r3
 800f0d8:	f7fe ff57 	bl	800df8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0dc:	4b1e      	ldr	r3, [pc, #120]	; (800f158 <xTaskRemoveFromEventList+0xa0>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d11d      	bne.n	800f120 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	0018      	movs	r0, r3
 800f0ea:	f7fe ff4e 	bl	800df8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f2:	4b1a      	ldr	r3, [pc, #104]	; (800f15c <xTaskRemoveFromEventList+0xa4>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d903      	bls.n	800f102 <xTaskRemoveFromEventList+0x4a>
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0fe:	4b17      	ldr	r3, [pc, #92]	; (800f15c <xTaskRemoveFromEventList+0xa4>)
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f106:	0013      	movs	r3, r2
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	189b      	adds	r3, r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4a14      	ldr	r2, [pc, #80]	; (800f160 <xTaskRemoveFromEventList+0xa8>)
 800f110:	189a      	adds	r2, r3, r2
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	3304      	adds	r3, #4
 800f116:	0019      	movs	r1, r3
 800f118:	0010      	movs	r0, r2
 800f11a:	f7fe fede 	bl	800deda <vListInsertEnd>
 800f11e:	e007      	b.n	800f130 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	3318      	adds	r3, #24
 800f124:	001a      	movs	r2, r3
 800f126:	4b0f      	ldr	r3, [pc, #60]	; (800f164 <xTaskRemoveFromEventList+0xac>)
 800f128:	0011      	movs	r1, r2
 800f12a:	0018      	movs	r0, r3
 800f12c:	f7fe fed5 	bl	800deda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f134:	4b0c      	ldr	r3, [pc, #48]	; (800f168 <xTaskRemoveFromEventList+0xb0>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d905      	bls.n	800f14a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f13e:	2301      	movs	r3, #1
 800f140:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <xTaskRemoveFromEventList+0xb4>)
 800f144:	2201      	movs	r2, #1
 800f146:	601a      	str	r2, [r3, #0]
 800f148:	e001      	b.n	800f14e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800f14a:	2300      	movs	r3, #0
 800f14c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800f14e:	68fb      	ldr	r3, [r7, #12]
}
 800f150:	0018      	movs	r0, r3
 800f152:	46bd      	mov	sp, r7
 800f154:	b004      	add	sp, #16
 800f156:	bd80      	pop	{r7, pc}
 800f158:	20004790 	.word	0x20004790
 800f15c:	20004770 	.word	0x20004770
 800f160:	20004298 	.word	0x20004298
 800f164:	20004728 	.word	0x20004728
 800f168:	20004294 	.word	0x20004294
 800f16c:	2000477c 	.word	0x2000477c

0800f170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f178:	4b05      	ldr	r3, [pc, #20]	; (800f190 <vTaskInternalSetTimeOutState+0x20>)
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f180:	4b04      	ldr	r3, [pc, #16]	; (800f194 <vTaskInternalSetTimeOutState+0x24>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	605a      	str	r2, [r3, #4]
}
 800f188:	46c0      	nop			; (mov r8, r8)
 800f18a:	46bd      	mov	sp, r7
 800f18c:	b002      	add	sp, #8
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	20004780 	.word	0x20004780
 800f194:	2000476c 	.word	0x2000476c

0800f198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d101      	bne.n	800f1ac <xTaskCheckForTimeOut+0x14>
 800f1a8:	b672      	cpsid	i
 800f1aa:	e7fe      	b.n	800f1aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <xTaskCheckForTimeOut+0x1e>
 800f1b2:	b672      	cpsid	i
 800f1b4:	e7fe      	b.n	800f1b4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800f1b6:	f000 fd93 	bl	800fce0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1ba:	4b1d      	ldr	r3, [pc, #116]	; (800f230 <xTaskCheckForTimeOut+0x98>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	d102      	bne.n	800f1d8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	617b      	str	r3, [r7, #20]
 800f1d6:	e024      	b.n	800f222 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	4b15      	ldr	r3, [pc, #84]	; (800f234 <xTaskCheckForTimeOut+0x9c>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d007      	beq.n	800f1f4 <xTaskCheckForTimeOut+0x5c>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	693a      	ldr	r2, [r7, #16]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d302      	bcc.n	800f1f4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	e016      	b.n	800f222 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d20c      	bcs.n	800f218 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	1ad2      	subs	r2, r2, r3
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	0018      	movs	r0, r3
 800f20e:	f7ff ffaf 	bl	800f170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f212:	2300      	movs	r3, #0
 800f214:	617b      	str	r3, [r7, #20]
 800f216:	e004      	b.n	800f222 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	2200      	movs	r2, #0
 800f21c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f21e:	2301      	movs	r3, #1
 800f220:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800f222:	f000 fd6f 	bl	800fd04 <vPortExitCritical>

	return xReturn;
 800f226:	697b      	ldr	r3, [r7, #20]
}
 800f228:	0018      	movs	r0, r3
 800f22a:	46bd      	mov	sp, r7
 800f22c:	b006      	add	sp, #24
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	2000476c 	.word	0x2000476c
 800f234:	20004780 	.word	0x20004780

0800f238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f23c:	4b02      	ldr	r3, [pc, #8]	; (800f248 <vTaskMissedYield+0x10>)
 800f23e:	2201      	movs	r2, #1
 800f240:	601a      	str	r2, [r3, #0]
}
 800f242:	46c0      	nop			; (mov r8, r8)
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	2000477c 	.word	0x2000477c

0800f24c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f254:	f000 f84e 	bl	800f2f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f258:	4b03      	ldr	r3, [pc, #12]	; (800f268 <prvIdleTask+0x1c>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d9f9      	bls.n	800f254 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f260:	f000 fd2e 	bl	800fcc0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800f264:	e7f6      	b.n	800f254 <prvIdleTask+0x8>
 800f266:	46c0      	nop			; (mov r8, r8)
 800f268:	20004298 	.word	0x20004298

0800f26c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f272:	2300      	movs	r3, #0
 800f274:	607b      	str	r3, [r7, #4]
 800f276:	e00c      	b.n	800f292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	0013      	movs	r3, r2
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	189b      	adds	r3, r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	4a14      	ldr	r2, [pc, #80]	; (800f2d4 <prvInitialiseTaskLists+0x68>)
 800f284:	189b      	adds	r3, r3, r2
 800f286:	0018      	movs	r0, r3
 800f288:	f7fe fdfe 	bl	800de88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3301      	adds	r3, #1
 800f290:	607b      	str	r3, [r7, #4]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b37      	cmp	r3, #55	; 0x37
 800f296:	d9ef      	bls.n	800f278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f298:	4b0f      	ldr	r3, [pc, #60]	; (800f2d8 <prvInitialiseTaskLists+0x6c>)
 800f29a:	0018      	movs	r0, r3
 800f29c:	f7fe fdf4 	bl	800de88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2a0:	4b0e      	ldr	r3, [pc, #56]	; (800f2dc <prvInitialiseTaskLists+0x70>)
 800f2a2:	0018      	movs	r0, r3
 800f2a4:	f7fe fdf0 	bl	800de88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2a8:	4b0d      	ldr	r3, [pc, #52]	; (800f2e0 <prvInitialiseTaskLists+0x74>)
 800f2aa:	0018      	movs	r0, r3
 800f2ac:	f7fe fdec 	bl	800de88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2b0:	4b0c      	ldr	r3, [pc, #48]	; (800f2e4 <prvInitialiseTaskLists+0x78>)
 800f2b2:	0018      	movs	r0, r3
 800f2b4:	f7fe fde8 	bl	800de88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2b8:	4b0b      	ldr	r3, [pc, #44]	; (800f2e8 <prvInitialiseTaskLists+0x7c>)
 800f2ba:	0018      	movs	r0, r3
 800f2bc:	f7fe fde4 	bl	800de88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2c0:	4b0a      	ldr	r3, [pc, #40]	; (800f2ec <prvInitialiseTaskLists+0x80>)
 800f2c2:	4a05      	ldr	r2, [pc, #20]	; (800f2d8 <prvInitialiseTaskLists+0x6c>)
 800f2c4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f2c6:	4b0a      	ldr	r3, [pc, #40]	; (800f2f0 <prvInitialiseTaskLists+0x84>)
 800f2c8:	4a04      	ldr	r2, [pc, #16]	; (800f2dc <prvInitialiseTaskLists+0x70>)
 800f2ca:	601a      	str	r2, [r3, #0]
}
 800f2cc:	46c0      	nop			; (mov r8, r8)
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	b002      	add	sp, #8
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	20004298 	.word	0x20004298
 800f2d8:	200046f8 	.word	0x200046f8
 800f2dc:	2000470c 	.word	0x2000470c
 800f2e0:	20004728 	.word	0x20004728
 800f2e4:	2000473c 	.word	0x2000473c
 800f2e8:	20004754 	.word	0x20004754
 800f2ec:	20004720 	.word	0x20004720
 800f2f0:	20004724 	.word	0x20004724

0800f2f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f2fa:	e01a      	b.n	800f332 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800f2fc:	f000 fcf0 	bl	800fce0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f300:	4b10      	ldr	r3, [pc, #64]	; (800f344 <prvCheckTasksWaitingTermination+0x50>)
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3304      	adds	r3, #4
 800f30c:	0018      	movs	r0, r3
 800f30e:	f7fe fe3c 	bl	800df8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f312:	4b0d      	ldr	r3, [pc, #52]	; (800f348 <prvCheckTasksWaitingTermination+0x54>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	1e5a      	subs	r2, r3, #1
 800f318:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <prvCheckTasksWaitingTermination+0x54>)
 800f31a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f31c:	4b0b      	ldr	r3, [pc, #44]	; (800f34c <prvCheckTasksWaitingTermination+0x58>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	1e5a      	subs	r2, r3, #1
 800f322:	4b0a      	ldr	r3, [pc, #40]	; (800f34c <prvCheckTasksWaitingTermination+0x58>)
 800f324:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800f326:	f000 fced 	bl	800fd04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	0018      	movs	r0, r3
 800f32e:	f000 f80f 	bl	800f350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f332:	4b06      	ldr	r3, [pc, #24]	; (800f34c <prvCheckTasksWaitingTermination+0x58>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1e0      	bne.n	800f2fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f33a:	46c0      	nop			; (mov r8, r8)
 800f33c:	46c0      	nop			; (mov r8, r8)
 800f33e:	46bd      	mov	sp, r7
 800f340:	b002      	add	sp, #8
 800f342:	bd80      	pop	{r7, pc}
 800f344:	2000473c 	.word	0x2000473c
 800f348:	20004768 	.word	0x20004768
 800f34c:	20004750 	.word	0x20004750

0800f350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	3354      	adds	r3, #84	; 0x54
 800f35c:	0018      	movs	r0, r3
 800f35e:	f002 ff2d 	bl	80121bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	22a5      	movs	r2, #165	; 0xa5
 800f366:	5c9b      	ldrb	r3, [r3, r2]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d109      	bne.n	800f380 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f370:	0018      	movs	r0, r3
 800f372:	f000 fdf9 	bl	800ff68 <vPortFree>
				vPortFree( pxTCB );
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	0018      	movs	r0, r3
 800f37a:	f000 fdf5 	bl	800ff68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f37e:	e010      	b.n	800f3a2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	22a5      	movs	r2, #165	; 0xa5
 800f384:	5c9b      	ldrb	r3, [r3, r2]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d104      	bne.n	800f394 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	0018      	movs	r0, r3
 800f38e:	f000 fdeb 	bl	800ff68 <vPortFree>
	}
 800f392:	e006      	b.n	800f3a2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	22a5      	movs	r2, #165	; 0xa5
 800f398:	5c9b      	ldrb	r3, [r3, r2]
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d001      	beq.n	800f3a2 <prvDeleteTCB+0x52>
 800f39e:	b672      	cpsid	i
 800f3a0:	e7fe      	b.n	800f3a0 <prvDeleteTCB+0x50>
	}
 800f3a2:	46c0      	nop			; (mov r8, r8)
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	b002      	add	sp, #8
 800f3a8:	bd80      	pop	{r7, pc}
	...

0800f3ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3b2:	4b0b      	ldr	r3, [pc, #44]	; (800f3e0 <prvResetNextTaskUnblockTime+0x34>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d104      	bne.n	800f3c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f3bc:	4b09      	ldr	r3, [pc, #36]	; (800f3e4 <prvResetNextTaskUnblockTime+0x38>)
 800f3be:	2201      	movs	r2, #1
 800f3c0:	4252      	negs	r2, r2
 800f3c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f3c4:	e008      	b.n	800f3d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3c6:	4b06      	ldr	r3, [pc, #24]	; (800f3e0 <prvResetNextTaskUnblockTime+0x34>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68db      	ldr	r3, [r3, #12]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	685a      	ldr	r2, [r3, #4]
 800f3d4:	4b03      	ldr	r3, [pc, #12]	; (800f3e4 <prvResetNextTaskUnblockTime+0x38>)
 800f3d6:	601a      	str	r2, [r3, #0]
}
 800f3d8:	46c0      	nop			; (mov r8, r8)
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	b002      	add	sp, #8
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20004720 	.word	0x20004720
 800f3e4:	20004788 	.word	0x20004788

0800f3e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f3ee:	4b0a      	ldr	r3, [pc, #40]	; (800f418 <xTaskGetSchedulerState+0x30>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d102      	bne.n	800f3fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	607b      	str	r3, [r7, #4]
 800f3fa:	e008      	b.n	800f40e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3fc:	4b07      	ldr	r3, [pc, #28]	; (800f41c <xTaskGetSchedulerState+0x34>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d102      	bne.n	800f40a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f404:	2302      	movs	r3, #2
 800f406:	607b      	str	r3, [r7, #4]
 800f408:	e001      	b.n	800f40e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f40a:	2300      	movs	r3, #0
 800f40c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f40e:	687b      	ldr	r3, [r7, #4]
	}
 800f410:	0018      	movs	r0, r3
 800f412:	46bd      	mov	sp, r7
 800f414:	b002      	add	sp, #8
 800f416:	bd80      	pop	{r7, pc}
 800f418:	20004774 	.word	0x20004774
 800f41c:	20004790 	.word	0x20004790

0800f420 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f42c:	2300      	movs	r3, #0
 800f42e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d044      	beq.n	800f4c0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f436:	4b25      	ldr	r3, [pc, #148]	; (800f4cc <xTaskPriorityDisinherit+0xac>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	68ba      	ldr	r2, [r7, #8]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d001      	beq.n	800f444 <xTaskPriorityDisinherit+0x24>
 800f440:	b672      	cpsid	i
 800f442:	e7fe      	b.n	800f442 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d101      	bne.n	800f450 <xTaskPriorityDisinherit+0x30>
 800f44c:	b672      	cpsid	i
 800f44e:	e7fe      	b.n	800f44e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f454:	1e5a      	subs	r2, r3, #1
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f462:	429a      	cmp	r2, r3
 800f464:	d02c      	beq.n	800f4c0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d128      	bne.n	800f4c0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	3304      	adds	r3, #4
 800f472:	0018      	movs	r0, r3
 800f474:	f7fe fd89 	bl	800df8a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f484:	2238      	movs	r2, #56	; 0x38
 800f486:	1ad2      	subs	r2, r2, r3
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f490:	4b0f      	ldr	r3, [pc, #60]	; (800f4d0 <xTaskPriorityDisinherit+0xb0>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	429a      	cmp	r2, r3
 800f496:	d903      	bls.n	800f4a0 <xTaskPriorityDisinherit+0x80>
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f49c:	4b0c      	ldr	r3, [pc, #48]	; (800f4d0 <xTaskPriorityDisinherit+0xb0>)
 800f49e:	601a      	str	r2, [r3, #0]
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a4:	0013      	movs	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	189b      	adds	r3, r3, r2
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4a09      	ldr	r2, [pc, #36]	; (800f4d4 <xTaskPriorityDisinherit+0xb4>)
 800f4ae:	189a      	adds	r2, r3, r2
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	0019      	movs	r1, r3
 800f4b6:	0010      	movs	r0, r2
 800f4b8:	f7fe fd0f 	bl	800deda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
	}
 800f4c2:	0018      	movs	r0, r3
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	b004      	add	sp, #16
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	46c0      	nop			; (mov r8, r8)
 800f4cc:	20004294 	.word	0x20004294
 800f4d0:	20004770 	.word	0x20004770
 800f4d4:	20004298 	.word	0x20004298

0800f4d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4e2:	4b21      	ldr	r3, [pc, #132]	; (800f568 <prvAddCurrentTaskToDelayedList+0x90>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4e8:	4b20      	ldr	r3, [pc, #128]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	f7fe fd4b 	bl	800df8a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	d10b      	bne.n	800f512 <prvAddCurrentTaskToDelayedList+0x3a>
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d008      	beq.n	800f512 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f500:	4b1a      	ldr	r3, [pc, #104]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	1d1a      	adds	r2, r3, #4
 800f506:	4b1a      	ldr	r3, [pc, #104]	; (800f570 <prvAddCurrentTaskToDelayedList+0x98>)
 800f508:	0011      	movs	r1, r2
 800f50a:	0018      	movs	r0, r3
 800f50c:	f7fe fce5 	bl	800deda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f510:	e026      	b.n	800f560 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	18d3      	adds	r3, r2, r3
 800f518:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f51a:	4b14      	ldr	r3, [pc, #80]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	429a      	cmp	r2, r3
 800f528:	d209      	bcs.n	800f53e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f52a:	4b12      	ldr	r3, [pc, #72]	; (800f574 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	4b0f      	ldr	r3, [pc, #60]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	3304      	adds	r3, #4
 800f534:	0019      	movs	r1, r3
 800f536:	0010      	movs	r0, r2
 800f538:	f7fe fcf1 	bl	800df1e <vListInsert>
}
 800f53c:	e010      	b.n	800f560 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f53e:	4b0e      	ldr	r3, [pc, #56]	; (800f578 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	4b0a      	ldr	r3, [pc, #40]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3304      	adds	r3, #4
 800f548:	0019      	movs	r1, r3
 800f54a:	0010      	movs	r0, r2
 800f54c:	f7fe fce7 	bl	800df1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f550:	4b0a      	ldr	r3, [pc, #40]	; (800f57c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	429a      	cmp	r2, r3
 800f558:	d202      	bcs.n	800f560 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f55a:	4b08      	ldr	r3, [pc, #32]	; (800f57c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	601a      	str	r2, [r3, #0]
}
 800f560:	46c0      	nop			; (mov r8, r8)
 800f562:	46bd      	mov	sp, r7
 800f564:	b004      	add	sp, #16
 800f566:	bd80      	pop	{r7, pc}
 800f568:	2000476c 	.word	0x2000476c
 800f56c:	20004294 	.word	0x20004294
 800f570:	20004754 	.word	0x20004754
 800f574:	20004724 	.word	0x20004724
 800f578:	20004720 	.word	0x20004720
 800f57c:	20004788 	.word	0x20004788

0800f580 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f580:	b590      	push	{r4, r7, lr}
 800f582:	b089      	sub	sp, #36	; 0x24
 800f584:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f586:	2300      	movs	r3, #0
 800f588:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f58a:	f000 fac9 	bl	800fb20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f58e:	4b17      	ldr	r3, [pc, #92]	; (800f5ec <xTimerCreateTimerTask+0x6c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d020      	beq.n	800f5d8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f59a:	2300      	movs	r3, #0
 800f59c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f59e:	003a      	movs	r2, r7
 800f5a0:	1d39      	adds	r1, r7, #4
 800f5a2:	2308      	movs	r3, #8
 800f5a4:	18fb      	adds	r3, r7, r3
 800f5a6:	0018      	movs	r0, r3
 800f5a8:	f7fe fc56 	bl	800de58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f5ac:	683c      	ldr	r4, [r7, #0]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	68ba      	ldr	r2, [r7, #8]
 800f5b2:	490f      	ldr	r1, [pc, #60]	; (800f5f0 <xTimerCreateTimerTask+0x70>)
 800f5b4:	480f      	ldr	r0, [pc, #60]	; (800f5f4 <xTimerCreateTimerTask+0x74>)
 800f5b6:	9202      	str	r2, [sp, #8]
 800f5b8:	9301      	str	r3, [sp, #4]
 800f5ba:	2302      	movs	r3, #2
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	2300      	movs	r3, #0
 800f5c0:	0022      	movs	r2, r4
 800f5c2:	f7ff f968 	bl	800e896 <xTaskCreateStatic>
 800f5c6:	0002      	movs	r2, r0
 800f5c8:	4b0b      	ldr	r3, [pc, #44]	; (800f5f8 <xTimerCreateTimerTask+0x78>)
 800f5ca:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f5cc:	4b0a      	ldr	r3, [pc, #40]	; (800f5f8 <xTimerCreateTimerTask+0x78>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d001      	beq.n	800f5d8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <xTimerCreateTimerTask+0x62>
 800f5de:	b672      	cpsid	i
 800f5e0:	e7fe      	b.n	800f5e0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
}
 800f5e4:	0018      	movs	r0, r3
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	b005      	add	sp, #20
 800f5ea:	bd90      	pop	{r4, r7, pc}
 800f5ec:	200047c4 	.word	0x200047c4
 800f5f0:	080171a8 	.word	0x080171a8
 800f5f4:	0800f719 	.word	0x0800f719
 800f5f8:	200047c8 	.word	0x200047c8

0800f5fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f5fc:	b590      	push	{r4, r7, lr}
 800f5fe:	b08b      	sub	sp, #44	; 0x2c
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
 800f608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f60a:	2300      	movs	r3, #0
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <xTimerGenericCommand+0x1c>
 800f614:	b672      	cpsid	i
 800f616:	e7fe      	b.n	800f616 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f618:	4b1c      	ldr	r3, [pc, #112]	; (800f68c <xTimerGenericCommand+0x90>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d030      	beq.n	800f682 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f620:	2414      	movs	r4, #20
 800f622:	193b      	adds	r3, r7, r4
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f628:	193b      	adds	r3, r7, r4
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f62e:	193b      	adds	r3, r7, r4
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b05      	cmp	r3, #5
 800f638:	dc19      	bgt.n	800f66e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f63a:	f7ff fed5 	bl	800f3e8 <xTaskGetSchedulerState>
 800f63e:	0003      	movs	r3, r0
 800f640:	2b02      	cmp	r3, #2
 800f642:	d109      	bne.n	800f658 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f644:	4b11      	ldr	r3, [pc, #68]	; (800f68c <xTimerGenericCommand+0x90>)
 800f646:	6818      	ldr	r0, [r3, #0]
 800f648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f64a:	1939      	adds	r1, r7, r4
 800f64c:	2300      	movs	r3, #0
 800f64e:	f7fe fdbd 	bl	800e1cc <xQueueGenericSend>
 800f652:	0003      	movs	r3, r0
 800f654:	627b      	str	r3, [r7, #36]	; 0x24
 800f656:	e014      	b.n	800f682 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f658:	4b0c      	ldr	r3, [pc, #48]	; (800f68c <xTimerGenericCommand+0x90>)
 800f65a:	6818      	ldr	r0, [r3, #0]
 800f65c:	2314      	movs	r3, #20
 800f65e:	18f9      	adds	r1, r7, r3
 800f660:	2300      	movs	r3, #0
 800f662:	2200      	movs	r2, #0
 800f664:	f7fe fdb2 	bl	800e1cc <xQueueGenericSend>
 800f668:	0003      	movs	r3, r0
 800f66a:	627b      	str	r3, [r7, #36]	; 0x24
 800f66c:	e009      	b.n	800f682 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f66e:	4b07      	ldr	r3, [pc, #28]	; (800f68c <xTimerGenericCommand+0x90>)
 800f670:	6818      	ldr	r0, [r3, #0]
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	2314      	movs	r3, #20
 800f676:	18f9      	adds	r1, r7, r3
 800f678:	2300      	movs	r3, #0
 800f67a:	f7fe fe6b 	bl	800e354 <xQueueGenericSendFromISR>
 800f67e:	0003      	movs	r3, r0
 800f680:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f684:	0018      	movs	r0, r3
 800f686:	46bd      	mov	sp, r7
 800f688:	b00b      	add	sp, #44	; 0x2c
 800f68a:	bd90      	pop	{r4, r7, pc}
 800f68c:	200047c4 	.word	0x200047c4

0800f690 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af02      	add	r7, sp, #8
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f69a:	4b1e      	ldr	r3, [pc, #120]	; (800f714 <prvProcessExpiredTimer+0x84>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	0018      	movs	r0, r3
 800f6aa:	f7fe fc6e 	bl	800df8a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2228      	movs	r2, #40	; 0x28
 800f6b2:	5c9b      	ldrb	r3, [r3, r2]
 800f6b4:	001a      	movs	r2, r3
 800f6b6:	2304      	movs	r3, #4
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	d019      	beq.n	800f6f0 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	699a      	ldr	r2, [r3, #24]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	18d1      	adds	r1, r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	683a      	ldr	r2, [r7, #0]
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f000 f8c3 	bl	800f854 <prvInsertTimerInActiveList>
 800f6ce:	1e03      	subs	r3, r0, #0
 800f6d0:	d017      	beq.n	800f702 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	2300      	movs	r3, #0
 800f6dc:	2100      	movs	r1, #0
 800f6de:	f7ff ff8d 	bl	800f5fc <xTimerGenericCommand>
 800f6e2:	0003      	movs	r3, r0
 800f6e4:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d10a      	bne.n	800f702 <prvProcessExpiredTimer+0x72>
 800f6ec:	b672      	cpsid	i
 800f6ee:	e7fe      	b.n	800f6ee <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2228      	movs	r2, #40	; 0x28
 800f6f4:	5c9b      	ldrb	r3, [r3, r2]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	4393      	bics	r3, r2
 800f6fa:	b2d9      	uxtb	r1, r3
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2228      	movs	r2, #40	; 0x28
 800f700:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6a1b      	ldr	r3, [r3, #32]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	0010      	movs	r0, r2
 800f70a:	4798      	blx	r3
}
 800f70c:	46c0      	nop			; (mov r8, r8)
 800f70e:	46bd      	mov	sp, r7
 800f710:	b004      	add	sp, #16
 800f712:	bd80      	pop	{r7, pc}
 800f714:	200047bc 	.word	0x200047bc

0800f718 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f720:	2308      	movs	r3, #8
 800f722:	18fb      	adds	r3, r7, r3
 800f724:	0018      	movs	r0, r3
 800f726:	f000 f853 	bl	800f7d0 <prvGetNextExpireTime>
 800f72a:	0003      	movs	r3, r0
 800f72c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f72e:	68ba      	ldr	r2, [r7, #8]
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	0011      	movs	r1, r2
 800f734:	0018      	movs	r0, r3
 800f736:	f000 f803 	bl	800f740 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f73a:	f000 f8cd 	bl	800f8d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f73e:	e7ef      	b.n	800f720 <prvTimerTask+0x8>

0800f740 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f74a:	f7ff fac1 	bl	800ecd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f74e:	2308      	movs	r3, #8
 800f750:	18fb      	adds	r3, r7, r3
 800f752:	0018      	movs	r0, r3
 800f754:	f000 f85e 	bl	800f814 <prvSampleTimeNow>
 800f758:	0003      	movs	r3, r0
 800f75a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d12b      	bne.n	800f7ba <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d10c      	bne.n	800f782 <prvProcessTimerOrBlockTask+0x42>
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d808      	bhi.n	800f782 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800f770:	f7ff faba 	bl	800ece8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	0011      	movs	r1, r2
 800f77a:	0018      	movs	r0, r3
 800f77c:	f7ff ff88 	bl	800f690 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f780:	e01d      	b.n	800f7be <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d008      	beq.n	800f79a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f788:	4b0f      	ldr	r3, [pc, #60]	; (800f7c8 <prvProcessTimerOrBlockTask+0x88>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <prvProcessTimerOrBlockTask+0x56>
 800f792:	2301      	movs	r3, #1
 800f794:	e000      	b.n	800f798 <prvProcessTimerOrBlockTask+0x58>
 800f796:	2300      	movs	r3, #0
 800f798:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f79a:	4b0c      	ldr	r3, [pc, #48]	; (800f7cc <prvProcessTimerOrBlockTask+0x8c>)
 800f79c:	6818      	ldr	r0, [r3, #0]
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	683a      	ldr	r2, [r7, #0]
 800f7a6:	0019      	movs	r1, r3
 800f7a8:	f7ff f842 	bl	800e830 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f7ac:	f7ff fa9c 	bl	800ece8 <xTaskResumeAll>
 800f7b0:	1e03      	subs	r3, r0, #0
 800f7b2:	d104      	bne.n	800f7be <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800f7b4:	f000 fa84 	bl	800fcc0 <vPortYield>
}
 800f7b8:	e001      	b.n	800f7be <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800f7ba:	f7ff fa95 	bl	800ece8 <xTaskResumeAll>
}
 800f7be:	46c0      	nop			; (mov r8, r8)
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	b004      	add	sp, #16
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	46c0      	nop			; (mov r8, r8)
 800f7c8:	200047c0 	.word	0x200047c0
 800f7cc:	200047c4 	.word	0x200047c4

0800f7d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f7d8:	4b0d      	ldr	r3, [pc, #52]	; (800f810 <prvGetNextExpireTime+0x40>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <prvGetNextExpireTime+0x16>
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	e000      	b.n	800f7e8 <prvGetNextExpireTime+0x18>
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d105      	bne.n	800f800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f7f4:	4b06      	ldr	r3, [pc, #24]	; (800f810 <prvGetNextExpireTime+0x40>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	60fb      	str	r3, [r7, #12]
 800f7fe:	e001      	b.n	800f804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f800:	2300      	movs	r3, #0
 800f802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f804:	68fb      	ldr	r3, [r7, #12]
}
 800f806:	0018      	movs	r0, r3
 800f808:	46bd      	mov	sp, r7
 800f80a:	b004      	add	sp, #16
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	46c0      	nop			; (mov r8, r8)
 800f810:	200047bc 	.word	0x200047bc

0800f814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f81c:	f7ff faf0 	bl	800ee00 <xTaskGetTickCount>
 800f820:	0003      	movs	r3, r0
 800f822:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800f824:	4b0a      	ldr	r3, [pc, #40]	; (800f850 <prvSampleTimeNow+0x3c>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d205      	bcs.n	800f83a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800f82e:	f000 f919 	bl	800fa64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2201      	movs	r2, #1
 800f836:	601a      	str	r2, [r3, #0]
 800f838:	e002      	b.n	800f840 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2200      	movs	r2, #0
 800f83e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f840:	4b03      	ldr	r3, [pc, #12]	; (800f850 <prvSampleTimeNow+0x3c>)
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800f846:	68fb      	ldr	r3, [r7, #12]
}
 800f848:	0018      	movs	r0, r3
 800f84a:	46bd      	mov	sp, r7
 800f84c:	b004      	add	sp, #16
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	200047cc 	.word	0x200047cc

0800f854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b086      	sub	sp, #24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
 800f860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f862:	2300      	movs	r3, #0
 800f864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f872:	68ba      	ldr	r2, [r7, #8]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	429a      	cmp	r2, r3
 800f878:	d812      	bhi.n	800f8a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	1ad2      	subs	r2, r2, r3
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	699b      	ldr	r3, [r3, #24]
 800f884:	429a      	cmp	r2, r3
 800f886:	d302      	bcc.n	800f88e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f888:	2301      	movs	r3, #1
 800f88a:	617b      	str	r3, [r7, #20]
 800f88c:	e01b      	b.n	800f8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f88e:	4b10      	ldr	r3, [pc, #64]	; (800f8d0 <prvInsertTimerInActiveList+0x7c>)
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3304      	adds	r3, #4
 800f896:	0019      	movs	r1, r3
 800f898:	0010      	movs	r0, r2
 800f89a:	f7fe fb40 	bl	800df1e <vListInsert>
 800f89e:	e012      	b.n	800f8c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d206      	bcs.n	800f8b6 <prvInsertTimerInActiveList+0x62>
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d302      	bcc.n	800f8b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	617b      	str	r3, [r7, #20]
 800f8b4:	e007      	b.n	800f8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f8b6:	4b07      	ldr	r3, [pc, #28]	; (800f8d4 <prvInsertTimerInActiveList+0x80>)
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	3304      	adds	r3, #4
 800f8be:	0019      	movs	r1, r3
 800f8c0:	0010      	movs	r0, r2
 800f8c2:	f7fe fb2c 	bl	800df1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f8c6:	697b      	ldr	r3, [r7, #20]
}
 800f8c8:	0018      	movs	r0, r3
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	b006      	add	sp, #24
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	200047c0 	.word	0x200047c0
 800f8d4:	200047bc 	.word	0x200047bc

0800f8d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f8d8:	b590      	push	{r4, r7, lr}
 800f8da:	b08d      	sub	sp, #52	; 0x34
 800f8dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8de:	e0ac      	b.n	800fa3a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f8e0:	2208      	movs	r2, #8
 800f8e2:	18bb      	adds	r3, r7, r2
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	da0f      	bge.n	800f90a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f8ea:	18bb      	adds	r3, r7, r2
 800f8ec:	3304      	adds	r3, #4
 800f8ee:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d101      	bne.n	800f8fa <prvProcessReceivedCommands+0x22>
 800f8f6:	b672      	cpsid	i
 800f8f8:	e7fe      	b.n	800f8f8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	6858      	ldr	r0, [r3, #4]
 800f902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f904:	689b      	ldr	r3, [r3, #8]
 800f906:	0019      	movs	r1, r3
 800f908:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f90a:	2208      	movs	r2, #8
 800f90c:	18bb      	adds	r3, r7, r2
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	da00      	bge.n	800f916 <prvProcessReceivedCommands+0x3e>
 800f914:	e091      	b.n	800fa3a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f916:	18bb      	adds	r3, r7, r2
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f91c:	6a3b      	ldr	r3, [r7, #32]
 800f91e:	695b      	ldr	r3, [r3, #20]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d004      	beq.n	800f92e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f924:	6a3b      	ldr	r3, [r7, #32]
 800f926:	3304      	adds	r3, #4
 800f928:	0018      	movs	r0, r3
 800f92a:	f7fe fb2e 	bl	800df8a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f92e:	1d3b      	adds	r3, r7, #4
 800f930:	0018      	movs	r0, r3
 800f932:	f7ff ff6f 	bl	800f814 <prvSampleTimeNow>
 800f936:	0003      	movs	r3, r0
 800f938:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800f93a:	2308      	movs	r3, #8
 800f93c:	18fb      	adds	r3, r7, r3
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b09      	cmp	r3, #9
 800f942:	d900      	bls.n	800f946 <prvProcessReceivedCommands+0x6e>
 800f944:	e078      	b.n	800fa38 <prvProcessReceivedCommands+0x160>
 800f946:	009a      	lsls	r2, r3, #2
 800f948:	4b44      	ldr	r3, [pc, #272]	; (800fa5c <prvProcessReceivedCommands+0x184>)
 800f94a:	18d3      	adds	r3, r2, r3
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f950:	6a3b      	ldr	r3, [r7, #32]
 800f952:	2228      	movs	r2, #40	; 0x28
 800f954:	5c9b      	ldrb	r3, [r3, r2]
 800f956:	2201      	movs	r2, #1
 800f958:	4313      	orrs	r3, r2
 800f95a:	b2d9      	uxtb	r1, r3
 800f95c:	6a3b      	ldr	r3, [r7, #32]
 800f95e:	2228      	movs	r2, #40	; 0x28
 800f960:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f962:	2408      	movs	r4, #8
 800f964:	193b      	adds	r3, r7, r4
 800f966:	685a      	ldr	r2, [r3, #4]
 800f968:	6a3b      	ldr	r3, [r7, #32]
 800f96a:	699b      	ldr	r3, [r3, #24]
 800f96c:	18d1      	adds	r1, r2, r3
 800f96e:	193b      	adds	r3, r7, r4
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	69fa      	ldr	r2, [r7, #28]
 800f974:	6a38      	ldr	r0, [r7, #32]
 800f976:	f7ff ff6d 	bl	800f854 <prvInsertTimerInActiveList>
 800f97a:	1e03      	subs	r3, r0, #0
 800f97c:	d05d      	beq.n	800fa3a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f97e:	6a3b      	ldr	r3, [r7, #32]
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	6a3a      	ldr	r2, [r7, #32]
 800f984:	0010      	movs	r0, r2
 800f986:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	2228      	movs	r2, #40	; 0x28
 800f98c:	5c9b      	ldrb	r3, [r3, r2]
 800f98e:	001a      	movs	r2, r3
 800f990:	2304      	movs	r3, #4
 800f992:	4013      	ands	r3, r2
 800f994:	d051      	beq.n	800fa3a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f996:	193b      	adds	r3, r7, r4
 800f998:	685a      	ldr	r2, [r3, #4]
 800f99a:	6a3b      	ldr	r3, [r7, #32]
 800f99c:	699b      	ldr	r3, [r3, #24]
 800f99e:	18d2      	adds	r2, r2, r3
 800f9a0:	6a38      	ldr	r0, [r7, #32]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	f7ff fe27 	bl	800f5fc <xTimerGenericCommand>
 800f9ae:	0003      	movs	r3, r0
 800f9b0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d140      	bne.n	800fa3a <prvProcessReceivedCommands+0x162>
 800f9b8:	b672      	cpsid	i
 800f9ba:	e7fe      	b.n	800f9ba <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	2228      	movs	r2, #40	; 0x28
 800f9c0:	5c9b      	ldrb	r3, [r3, r2]
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	4393      	bics	r3, r2
 800f9c6:	b2d9      	uxtb	r1, r3
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	2228      	movs	r2, #40	; 0x28
 800f9cc:	5499      	strb	r1, [r3, r2]
					break;
 800f9ce:	e034      	b.n	800fa3a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	2228      	movs	r2, #40	; 0x28
 800f9d4:	5c9b      	ldrb	r3, [r3, r2]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	b2d9      	uxtb	r1, r3
 800f9dc:	6a3b      	ldr	r3, [r7, #32]
 800f9de:	2228      	movs	r2, #40	; 0x28
 800f9e0:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f9e2:	2308      	movs	r3, #8
 800f9e4:	18fb      	adds	r3, r7, r3
 800f9e6:	685a      	ldr	r2, [r3, #4]
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f9ec:	6a3b      	ldr	r3, [r7, #32]
 800f9ee:	699b      	ldr	r3, [r3, #24]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <prvProcessReceivedCommands+0x120>
 800f9f4:	b672      	cpsid	i
 800f9f6:	e7fe      	b.n	800f9f6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f9f8:	6a3b      	ldr	r3, [r7, #32]
 800f9fa:	699a      	ldr	r2, [r3, #24]
 800f9fc:	69fb      	ldr	r3, [r7, #28]
 800f9fe:	18d1      	adds	r1, r2, r3
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	69fa      	ldr	r2, [r7, #28]
 800fa04:	6a38      	ldr	r0, [r7, #32]
 800fa06:	f7ff ff25 	bl	800f854 <prvInsertTimerInActiveList>
					break;
 800fa0a:	e016      	b.n	800fa3a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fa0c:	6a3b      	ldr	r3, [r7, #32]
 800fa0e:	2228      	movs	r2, #40	; 0x28
 800fa10:	5c9b      	ldrb	r3, [r3, r2]
 800fa12:	001a      	movs	r2, r3
 800fa14:	2302      	movs	r3, #2
 800fa16:	4013      	ands	r3, r2
 800fa18:	d104      	bne.n	800fa24 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800fa1a:	6a3b      	ldr	r3, [r7, #32]
 800fa1c:	0018      	movs	r0, r3
 800fa1e:	f000 faa3 	bl	800ff68 <vPortFree>
 800fa22:	e00a      	b.n	800fa3a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	2228      	movs	r2, #40	; 0x28
 800fa28:	5c9b      	ldrb	r3, [r3, r2]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	4393      	bics	r3, r2
 800fa2e:	b2d9      	uxtb	r1, r3
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	2228      	movs	r2, #40	; 0x28
 800fa34:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fa36:	e000      	b.n	800fa3a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 800fa38:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa3a:	4b09      	ldr	r3, [pc, #36]	; (800fa60 <prvProcessReceivedCommands+0x188>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2208      	movs	r2, #8
 800fa40:	18b9      	adds	r1, r7, r2
 800fa42:	2200      	movs	r2, #0
 800fa44:	0018      	movs	r0, r3
 800fa46:	f7fe fcf9 	bl	800e43c <xQueueReceive>
 800fa4a:	1e03      	subs	r3, r0, #0
 800fa4c:	d000      	beq.n	800fa50 <prvProcessReceivedCommands+0x178>
 800fa4e:	e747      	b.n	800f8e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fa50:	46c0      	nop			; (mov r8, r8)
 800fa52:	46c0      	nop			; (mov r8, r8)
 800fa54:	46bd      	mov	sp, r7
 800fa56:	b00b      	add	sp, #44	; 0x2c
 800fa58:	bd90      	pop	{r4, r7, pc}
 800fa5a:	46c0      	nop			; (mov r8, r8)
 800fa5c:	08017388 	.word	0x08017388
 800fa60:	200047c4 	.word	0x200047c4

0800fa64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b088      	sub	sp, #32
 800fa68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa6a:	e041      	b.n	800faf0 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa6c:	4b2a      	ldr	r3, [pc, #168]	; (800fb18 <prvSwitchTimerLists+0xb4>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa76:	4b28      	ldr	r3, [pc, #160]	; (800fb18 <prvSwitchTimerLists+0xb4>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	3304      	adds	r3, #4
 800fa84:	0018      	movs	r0, r3
 800fa86:	f7fe fa80 	bl	800df8a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	0010      	movs	r0, r2
 800fa92:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2228      	movs	r2, #40	; 0x28
 800fa98:	5c9b      	ldrb	r3, [r3, r2]
 800fa9a:	001a      	movs	r2, r3
 800fa9c:	2304      	movs	r3, #4
 800fa9e:	4013      	ands	r3, r2
 800faa0:	d026      	beq.n	800faf0 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	699b      	ldr	r3, [r3, #24]
 800faa6:	693a      	ldr	r2, [r7, #16]
 800faa8:	18d3      	adds	r3, r2, r3
 800faaa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d90e      	bls.n	800fad2 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fac0:	4b15      	ldr	r3, [pc, #84]	; (800fb18 <prvSwitchTimerLists+0xb4>)
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	3304      	adds	r3, #4
 800fac8:	0019      	movs	r1, r3
 800faca:	0010      	movs	r0, r2
 800facc:	f7fe fa27 	bl	800df1e <vListInsert>
 800fad0:	e00e      	b.n	800faf0 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	2300      	movs	r3, #0
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	2300      	movs	r3, #0
 800fadc:	2100      	movs	r1, #0
 800fade:	f7ff fd8d 	bl	800f5fc <xTimerGenericCommand>
 800fae2:	0003      	movs	r3, r0
 800fae4:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d101      	bne.n	800faf0 <prvSwitchTimerLists+0x8c>
 800faec:	b672      	cpsid	i
 800faee:	e7fe      	b.n	800faee <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800faf0:	4b09      	ldr	r3, [pc, #36]	; (800fb18 <prvSwitchTimerLists+0xb4>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1b8      	bne.n	800fa6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fafa:	4b07      	ldr	r3, [pc, #28]	; (800fb18 <prvSwitchTimerLists+0xb4>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fb00:	4b06      	ldr	r3, [pc, #24]	; (800fb1c <prvSwitchTimerLists+0xb8>)
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	4b04      	ldr	r3, [pc, #16]	; (800fb18 <prvSwitchTimerLists+0xb4>)
 800fb06:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800fb08:	4b04      	ldr	r3, [pc, #16]	; (800fb1c <prvSwitchTimerLists+0xb8>)
 800fb0a:	697a      	ldr	r2, [r7, #20]
 800fb0c:	601a      	str	r2, [r3, #0]
}
 800fb0e:	46c0      	nop			; (mov r8, r8)
 800fb10:	46bd      	mov	sp, r7
 800fb12:	b006      	add	sp, #24
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	46c0      	nop			; (mov r8, r8)
 800fb18:	200047bc 	.word	0x200047bc
 800fb1c:	200047c0 	.word	0x200047c0

0800fb20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fb26:	f000 f8db 	bl	800fce0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fb2a:	4b16      	ldr	r3, [pc, #88]	; (800fb84 <prvCheckForValidListAndQueue+0x64>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d123      	bne.n	800fb7a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800fb32:	4b15      	ldr	r3, [pc, #84]	; (800fb88 <prvCheckForValidListAndQueue+0x68>)
 800fb34:	0018      	movs	r0, r3
 800fb36:	f7fe f9a7 	bl	800de88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fb3a:	4b14      	ldr	r3, [pc, #80]	; (800fb8c <prvCheckForValidListAndQueue+0x6c>)
 800fb3c:	0018      	movs	r0, r3
 800fb3e:	f7fe f9a3 	bl	800de88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fb42:	4b13      	ldr	r3, [pc, #76]	; (800fb90 <prvCheckForValidListAndQueue+0x70>)
 800fb44:	4a10      	ldr	r2, [pc, #64]	; (800fb88 <prvCheckForValidListAndQueue+0x68>)
 800fb46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fb48:	4b12      	ldr	r3, [pc, #72]	; (800fb94 <prvCheckForValidListAndQueue+0x74>)
 800fb4a:	4a10      	ldr	r2, [pc, #64]	; (800fb8c <prvCheckForValidListAndQueue+0x6c>)
 800fb4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fb4e:	4b12      	ldr	r3, [pc, #72]	; (800fb98 <prvCheckForValidListAndQueue+0x78>)
 800fb50:	4a12      	ldr	r2, [pc, #72]	; (800fb9c <prvCheckForValidListAndQueue+0x7c>)
 800fb52:	2100      	movs	r1, #0
 800fb54:	9100      	str	r1, [sp, #0]
 800fb56:	2110      	movs	r1, #16
 800fb58:	200a      	movs	r0, #10
 800fb5a:	f7fe fa92 	bl	800e082 <xQueueGenericCreateStatic>
 800fb5e:	0002      	movs	r2, r0
 800fb60:	4b08      	ldr	r3, [pc, #32]	; (800fb84 <prvCheckForValidListAndQueue+0x64>)
 800fb62:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fb64:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <prvCheckForValidListAndQueue+0x64>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d006      	beq.n	800fb7a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fb6c:	4b05      	ldr	r3, [pc, #20]	; (800fb84 <prvCheckForValidListAndQueue+0x64>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a0b      	ldr	r2, [pc, #44]	; (800fba0 <prvCheckForValidListAndQueue+0x80>)
 800fb72:	0011      	movs	r1, r2
 800fb74:	0018      	movs	r0, r3
 800fb76:	f7fe fe33 	bl	800e7e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb7a:	f000 f8c3 	bl	800fd04 <vPortExitCritical>
}
 800fb7e:	46c0      	nop			; (mov r8, r8)
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	200047c4 	.word	0x200047c4
 800fb88:	20004794 	.word	0x20004794
 800fb8c:	200047a8 	.word	0x200047a8
 800fb90:	200047bc 	.word	0x200047bc
 800fb94:	200047c0 	.word	0x200047c0
 800fb98:	20004870 	.word	0x20004870
 800fb9c:	200047d0 	.word	0x200047d0
 800fba0:	080171b0 	.word	0x080171b0

0800fba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	3b04      	subs	r3, #4
 800fbb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2280      	movs	r2, #128	; 0x80
 800fbba:	0452      	lsls	r2, r2, #17
 800fbbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	3b04      	subs	r3, #4
 800fbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3b04      	subs	r3, #4
 800fbce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fbd0:	4a08      	ldr	r2, [pc, #32]	; (800fbf4 <pxPortInitialiseStack+0x50>)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	3b14      	subs	r3, #20
 800fbda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	3b20      	subs	r3, #32
 800fbe6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
}
 800fbea:	0018      	movs	r0, r3
 800fbec:	46bd      	mov	sp, r7
 800fbee:	b004      	add	sp, #16
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	46c0      	nop			; (mov r8, r8)
 800fbf4:	0800fbf9 	.word	0x0800fbf9

0800fbf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc02:	4b08      	ldr	r3, [pc, #32]	; (800fc24 <prvTaskExitError+0x2c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3301      	adds	r3, #1
 800fc08:	d001      	beq.n	800fc0e <prvTaskExitError+0x16>
 800fc0a:	b672      	cpsid	i
 800fc0c:	e7fe      	b.n	800fc0c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800fc0e:	b672      	cpsid	i
	while( ulDummy == 0 )
 800fc10:	46c0      	nop			; (mov r8, r8)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d0fc      	beq.n	800fc12 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc18:	46c0      	nop			; (mov r8, r8)
 800fc1a:	46c0      	nop			; (mov r8, r8)
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	b002      	add	sp, #8
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	46c0      	nop			; (mov r8, r8)
 800fc24:	200000ec 	.word	0x200000ec

0800fc28 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800fc2c:	46c0      	nop			; (mov r8, r8)
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
	...

0800fc40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fc40:	4a0b      	ldr	r2, [pc, #44]	; (800fc70 <pxCurrentTCBConst2>)
 800fc42:	6813      	ldr	r3, [r2, #0]
 800fc44:	6818      	ldr	r0, [r3, #0]
 800fc46:	3020      	adds	r0, #32
 800fc48:	f380 8809 	msr	PSP, r0
 800fc4c:	2002      	movs	r0, #2
 800fc4e:	f380 8814 	msr	CONTROL, r0
 800fc52:	f3bf 8f6f 	isb	sy
 800fc56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fc58:	46ae      	mov	lr, r5
 800fc5a:	bc08      	pop	{r3}
 800fc5c:	bc04      	pop	{r2}
 800fc5e:	b662      	cpsie	i
 800fc60:	4718      	bx	r3
 800fc62:	46c0      	nop			; (mov r8, r8)
 800fc64:	46c0      	nop			; (mov r8, r8)
 800fc66:	46c0      	nop			; (mov r8, r8)
 800fc68:	46c0      	nop			; (mov r8, r8)
 800fc6a:	46c0      	nop			; (mov r8, r8)
 800fc6c:	46c0      	nop			; (mov r8, r8)
 800fc6e:	46c0      	nop			; (mov r8, r8)

0800fc70 <pxCurrentTCBConst2>:
 800fc70:	20004294 	.word	0x20004294
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800fc74:	46c0      	nop			; (mov r8, r8)
 800fc76:	46c0      	nop			; (mov r8, r8)

0800fc78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc7c:	4b0e      	ldr	r3, [pc, #56]	; (800fcb8 <xPortStartScheduler+0x40>)
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	4b0d      	ldr	r3, [pc, #52]	; (800fcb8 <xPortStartScheduler+0x40>)
 800fc82:	21ff      	movs	r1, #255	; 0xff
 800fc84:	0409      	lsls	r1, r1, #16
 800fc86:	430a      	orrs	r2, r1
 800fc88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc8a:	4b0b      	ldr	r3, [pc, #44]	; (800fcb8 <xPortStartScheduler+0x40>)
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	4b0a      	ldr	r3, [pc, #40]	; (800fcb8 <xPortStartScheduler+0x40>)
 800fc90:	21ff      	movs	r1, #255	; 0xff
 800fc92:	0609      	lsls	r1, r1, #24
 800fc94:	430a      	orrs	r2, r1
 800fc96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc98:	f000 f898 	bl	800fdcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc9c:	4b07      	ldr	r3, [pc, #28]	; (800fcbc <xPortStartScheduler+0x44>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800fca2:	f7ff ffcd 	bl	800fc40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fca6:	f7ff f969 	bl	800ef7c <vTaskSwitchContext>
	prvTaskExitError();
 800fcaa:	f7ff ffa5 	bl	800fbf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcae:	2300      	movs	r3, #0
}
 800fcb0:	0018      	movs	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	46c0      	nop			; (mov r8, r8)
 800fcb8:	e000ed20 	.word	0xe000ed20
 800fcbc:	200000ec 	.word	0x200000ec

0800fcc0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fcc4:	4b05      	ldr	r3, [pc, #20]	; (800fcdc <vPortYield+0x1c>)
 800fcc6:	2280      	movs	r2, #128	; 0x80
 800fcc8:	0552      	lsls	r2, r2, #21
 800fcca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800fccc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fcd0:	f3bf 8f6f 	isb	sy
}
 800fcd4:	46c0      	nop			; (mov r8, r8)
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	46c0      	nop			; (mov r8, r8)
 800fcdc:	e000ed04 	.word	0xe000ed04

0800fce0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800fce4:	b672      	cpsid	i
	uxCriticalNesting++;
 800fce6:	4b06      	ldr	r3, [pc, #24]	; (800fd00 <vPortEnterCritical+0x20>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	1c5a      	adds	r2, r3, #1
 800fcec:	4b04      	ldr	r3, [pc, #16]	; (800fd00 <vPortEnterCritical+0x20>)
 800fcee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800fcf0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fcf4:	f3bf 8f6f 	isb	sy
}
 800fcf8:	46c0      	nop			; (mov r8, r8)
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	46c0      	nop			; (mov r8, r8)
 800fd00:	200000ec 	.word	0x200000ec

0800fd04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd08:	4b09      	ldr	r3, [pc, #36]	; (800fd30 <vPortExitCritical+0x2c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d101      	bne.n	800fd14 <vPortExitCritical+0x10>
 800fd10:	b672      	cpsid	i
 800fd12:	e7fe      	b.n	800fd12 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800fd14:	4b06      	ldr	r3, [pc, #24]	; (800fd30 <vPortExitCritical+0x2c>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	1e5a      	subs	r2, r3, #1
 800fd1a:	4b05      	ldr	r3, [pc, #20]	; (800fd30 <vPortExitCritical+0x2c>)
 800fd1c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800fd1e:	4b04      	ldr	r3, [pc, #16]	; (800fd30 <vPortExitCritical+0x2c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d100      	bne.n	800fd28 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800fd26:	b662      	cpsie	i
	}
}
 800fd28:	46c0      	nop			; (mov r8, r8)
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	46c0      	nop			; (mov r8, r8)
 800fd30:	200000ec 	.word	0x200000ec

0800fd34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800fd34:	f3ef 8010 	mrs	r0, PRIMASK
 800fd38:	b672      	cpsid	i
 800fd3a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800fd3c:	46c0      	nop			; (mov r8, r8)
 800fd3e:	0018      	movs	r0, r3

0800fd40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800fd40:	f380 8810 	msr	PRIMASK, r0
 800fd44:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800fd46:	46c0      	nop			; (mov r8, r8)
	...

0800fd50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd50:	f3ef 8009 	mrs	r0, PSP
 800fd54:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <pxCurrentTCBConst>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	3820      	subs	r0, #32
 800fd5a:	6010      	str	r0, [r2, #0]
 800fd5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fd5e:	4644      	mov	r4, r8
 800fd60:	464d      	mov	r5, r9
 800fd62:	4656      	mov	r6, sl
 800fd64:	465f      	mov	r7, fp
 800fd66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fd68:	b508      	push	{r3, lr}
 800fd6a:	b672      	cpsid	i
 800fd6c:	f7ff f906 	bl	800ef7c <vTaskSwitchContext>
 800fd70:	b662      	cpsie	i
 800fd72:	bc0c      	pop	{r2, r3}
 800fd74:	6811      	ldr	r1, [r2, #0]
 800fd76:	6808      	ldr	r0, [r1, #0]
 800fd78:	3010      	adds	r0, #16
 800fd7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fd7c:	46a0      	mov	r8, r4
 800fd7e:	46a9      	mov	r9, r5
 800fd80:	46b2      	mov	sl, r6
 800fd82:	46bb      	mov	fp, r7
 800fd84:	f380 8809 	msr	PSP, r0
 800fd88:	3820      	subs	r0, #32
 800fd8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fd8c:	4718      	bx	r3
 800fd8e:	46c0      	nop			; (mov r8, r8)

0800fd90 <pxCurrentTCBConst>:
 800fd90:	20004294 	.word	0x20004294
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800fd94:	46c0      	nop			; (mov r8, r8)
 800fd96:	46c0      	nop			; (mov r8, r8)

0800fd98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd9e:	f7ff ffc9 	bl	800fd34 <ulSetInterruptMaskFromISR>
 800fda2:	0003      	movs	r3, r0
 800fda4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fda6:	f7ff f839 	bl	800ee1c <xTaskIncrementTick>
 800fdaa:	1e03      	subs	r3, r0, #0
 800fdac:	d003      	beq.n	800fdb6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fdae:	4b06      	ldr	r3, [pc, #24]	; (800fdc8 <xPortSysTickHandler+0x30>)
 800fdb0:	2280      	movs	r2, #128	; 0x80
 800fdb2:	0552      	lsls	r2, r2, #21
 800fdb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	0018      	movs	r0, r3
 800fdba:	f7ff ffc1 	bl	800fd40 <vClearInterruptMaskFromISR>
}
 800fdbe:	46c0      	nop			; (mov r8, r8)
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	b002      	add	sp, #8
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	46c0      	nop			; (mov r8, r8)
 800fdc8:	e000ed04 	.word	0xe000ed04

0800fdcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fdd0:	4b0b      	ldr	r3, [pc, #44]	; (800fe00 <vPortSetupTimerInterrupt+0x34>)
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fdd6:	4b0b      	ldr	r3, [pc, #44]	; (800fe04 <vPortSetupTimerInterrupt+0x38>)
 800fdd8:	2200      	movs	r2, #0
 800fdda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fddc:	4b0a      	ldr	r3, [pc, #40]	; (800fe08 <vPortSetupTimerInterrupt+0x3c>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	22fa      	movs	r2, #250	; 0xfa
 800fde2:	0091      	lsls	r1, r2, #2
 800fde4:	0018      	movs	r0, r3
 800fde6:	f7f0 f9ab 	bl	8000140 <__udivsi3>
 800fdea:	0003      	movs	r3, r0
 800fdec:	001a      	movs	r2, r3
 800fdee:	4b07      	ldr	r3, [pc, #28]	; (800fe0c <vPortSetupTimerInterrupt+0x40>)
 800fdf0:	3a01      	subs	r2, #1
 800fdf2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800fdf4:	4b02      	ldr	r3, [pc, #8]	; (800fe00 <vPortSetupTimerInterrupt+0x34>)
 800fdf6:	2207      	movs	r2, #7
 800fdf8:	601a      	str	r2, [r3, #0]
}
 800fdfa:	46c0      	nop			; (mov r8, r8)
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	e000e010 	.word	0xe000e010
 800fe04:	e000e018 	.word	0xe000e018
 800fe08:	200000e0 	.word	0x200000e0
 800fe0c:	e000e014 	.word	0xe000e014

0800fe10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b086      	sub	sp, #24
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800fe1c:	f7fe ff58 	bl	800ecd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fe20:	4b4b      	ldr	r3, [pc, #300]	; (800ff50 <pvPortMalloc+0x140>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d101      	bne.n	800fe2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fe28:	f000 f8ec 	bl	8010004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe2c:	4b49      	ldr	r3, [pc, #292]	; (800ff54 <pvPortMalloc+0x144>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	4013      	ands	r3, r2
 800fe34:	d000      	beq.n	800fe38 <pvPortMalloc+0x28>
 800fe36:	e07e      	b.n	800ff36 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d012      	beq.n	800fe64 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800fe3e:	2208      	movs	r2, #8
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	189b      	adds	r3, r3, r2
 800fe44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2207      	movs	r2, #7
 800fe4a:	4013      	ands	r3, r2
 800fe4c:	d00a      	beq.n	800fe64 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2207      	movs	r2, #7
 800fe52:	4393      	bics	r3, r2
 800fe54:	3308      	adds	r3, #8
 800fe56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2207      	movs	r2, #7
 800fe5c:	4013      	ands	r3, r2
 800fe5e:	d001      	beq.n	800fe64 <pvPortMalloc+0x54>
 800fe60:	b672      	cpsid	i
 800fe62:	e7fe      	b.n	800fe62 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d065      	beq.n	800ff36 <pvPortMalloc+0x126>
 800fe6a:	4b3b      	ldr	r3, [pc, #236]	; (800ff58 <pvPortMalloc+0x148>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d860      	bhi.n	800ff36 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe74:	4b39      	ldr	r3, [pc, #228]	; (800ff5c <pvPortMalloc+0x14c>)
 800fe76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800fe78:	4b38      	ldr	r3, [pc, #224]	; (800ff5c <pvPortMalloc+0x14c>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe7e:	e004      	b.n	800fe8a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d903      	bls.n	800fe9c <pvPortMalloc+0x8c>
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1f1      	bne.n	800fe80 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe9c:	4b2c      	ldr	r3, [pc, #176]	; (800ff50 <pvPortMalloc+0x140>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	697a      	ldr	r2, [r7, #20]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d047      	beq.n	800ff36 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	2208      	movs	r2, #8
 800feac:	189b      	adds	r3, r3, r2
 800feae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	1ad2      	subs	r2, r2, r3
 800fec0:	2308      	movs	r3, #8
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d916      	bls.n	800fef6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fec8:	697a      	ldr	r2, [r7, #20]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	18d3      	adds	r3, r2, r3
 800fece:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2207      	movs	r2, #7
 800fed4:	4013      	ands	r3, r2
 800fed6:	d001      	beq.n	800fedc <pvPortMalloc+0xcc>
 800fed8:	b672      	cpsid	i
 800feda:	e7fe      	b.n	800feda <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	685a      	ldr	r2, [r3, #4]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	1ad2      	subs	r2, r2, r3
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	0018      	movs	r0, r3
 800fef2:	f000 f8e7 	bl	80100c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fef6:	4b18      	ldr	r3, [pc, #96]	; (800ff58 <pvPortMalloc+0x148>)
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	1ad2      	subs	r2, r2, r3
 800ff00:	4b15      	ldr	r3, [pc, #84]	; (800ff58 <pvPortMalloc+0x148>)
 800ff02:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff04:	4b14      	ldr	r3, [pc, #80]	; (800ff58 <pvPortMalloc+0x148>)
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	4b15      	ldr	r3, [pc, #84]	; (800ff60 <pvPortMalloc+0x150>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d203      	bcs.n	800ff18 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff10:	4b11      	ldr	r3, [pc, #68]	; (800ff58 <pvPortMalloc+0x148>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	4b12      	ldr	r3, [pc, #72]	; (800ff60 <pvPortMalloc+0x150>)
 800ff16:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	685a      	ldr	r2, [r3, #4]
 800ff1c:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <pvPortMalloc+0x144>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	431a      	orrs	r2, r3
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ff2c:	4b0d      	ldr	r3, [pc, #52]	; (800ff64 <pvPortMalloc+0x154>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	1c5a      	adds	r2, r3, #1
 800ff32:	4b0c      	ldr	r3, [pc, #48]	; (800ff64 <pvPortMalloc+0x154>)
 800ff34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff36:	f7fe fed7 	bl	800ece8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2207      	movs	r2, #7
 800ff3e:	4013      	ands	r3, r2
 800ff40:	d001      	beq.n	800ff46 <pvPortMalloc+0x136>
 800ff42:	b672      	cpsid	i
 800ff44:	e7fe      	b.n	800ff44 <pvPortMalloc+0x134>
	return pvReturn;
 800ff46:	68fb      	ldr	r3, [r7, #12]
}
 800ff48:	0018      	movs	r0, r3
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	b006      	add	sp, #24
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	200054c8 	.word	0x200054c8
 800ff54:	200054dc 	.word	0x200054dc
 800ff58:	200054cc 	.word	0x200054cc
 800ff5c:	200054c0 	.word	0x200054c0
 800ff60:	200054d0 	.word	0x200054d0
 800ff64:	200054d4 	.word	0x200054d4

0800ff68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d03a      	beq.n	800fff0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff7a:	2308      	movs	r3, #8
 800ff7c:	425b      	negs	r3, r3
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	18d3      	adds	r3, r2, r3
 800ff82:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	685a      	ldr	r2, [r3, #4]
 800ff8c:	4b1a      	ldr	r3, [pc, #104]	; (800fff8 <vPortFree+0x90>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4013      	ands	r3, r2
 800ff92:	d101      	bne.n	800ff98 <vPortFree+0x30>
 800ff94:	b672      	cpsid	i
 800ff96:	e7fe      	b.n	800ff96 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <vPortFree+0x3c>
 800ffa0:	b672      	cpsid	i
 800ffa2:	e7fe      	b.n	800ffa2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	685a      	ldr	r2, [r3, #4]
 800ffa8:	4b13      	ldr	r3, [pc, #76]	; (800fff8 <vPortFree+0x90>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4013      	ands	r3, r2
 800ffae:	d01f      	beq.n	800fff0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d11b      	bne.n	800fff0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	685a      	ldr	r2, [r3, #4]
 800ffbc:	4b0e      	ldr	r3, [pc, #56]	; (800fff8 <vPortFree+0x90>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	43db      	mvns	r3, r3
 800ffc2:	401a      	ands	r2, r3
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ffc8:	f7fe fe82 	bl	800ecd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	685a      	ldr	r2, [r3, #4]
 800ffd0:	4b0a      	ldr	r3, [pc, #40]	; (800fffc <vPortFree+0x94>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	18d2      	adds	r2, r2, r3
 800ffd6:	4b09      	ldr	r3, [pc, #36]	; (800fffc <vPortFree+0x94>)
 800ffd8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	0018      	movs	r0, r3
 800ffde:	f000 f871 	bl	80100c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ffe2:	4b07      	ldr	r3, [pc, #28]	; (8010000 <vPortFree+0x98>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	1c5a      	adds	r2, r3, #1
 800ffe8:	4b05      	ldr	r3, [pc, #20]	; (8010000 <vPortFree+0x98>)
 800ffea:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800ffec:	f7fe fe7c 	bl	800ece8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fff0:	46c0      	nop			; (mov r8, r8)
 800fff2:	46bd      	mov	sp, r7
 800fff4:	b004      	add	sp, #16
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	200054dc 	.word	0x200054dc
 800fffc:	200054cc 	.word	0x200054cc
 8010000:	200054d8 	.word	0x200054d8

08010004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801000a:	23c0      	movs	r3, #192	; 0xc0
 801000c:	011b      	lsls	r3, r3, #4
 801000e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010010:	4b26      	ldr	r3, [pc, #152]	; (80100ac <prvHeapInit+0xa8>)
 8010012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2207      	movs	r2, #7
 8010018:	4013      	ands	r3, r2
 801001a:	d00c      	beq.n	8010036 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	3307      	adds	r3, #7
 8010020:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2207      	movs	r2, #7
 8010026:	4393      	bics	r3, r2
 8010028:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	1ad2      	subs	r2, r2, r3
 8010030:	4b1e      	ldr	r3, [pc, #120]	; (80100ac <prvHeapInit+0xa8>)
 8010032:	18d3      	adds	r3, r2, r3
 8010034:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801003a:	4b1d      	ldr	r3, [pc, #116]	; (80100b0 <prvHeapInit+0xac>)
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010040:	4b1b      	ldr	r3, [pc, #108]	; (80100b0 <prvHeapInit+0xac>)
 8010042:	2200      	movs	r2, #0
 8010044:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	68ba      	ldr	r2, [r7, #8]
 801004a:	18d3      	adds	r3, r2, r3
 801004c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801004e:	2208      	movs	r2, #8
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	1a9b      	subs	r3, r3, r2
 8010054:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2207      	movs	r2, #7
 801005a:	4393      	bics	r3, r2
 801005c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801005e:	68fa      	ldr	r2, [r7, #12]
 8010060:	4b14      	ldr	r3, [pc, #80]	; (80100b4 <prvHeapInit+0xb0>)
 8010062:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8010064:	4b13      	ldr	r3, [pc, #76]	; (80100b4 <prvHeapInit+0xb0>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2200      	movs	r2, #0
 801006a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801006c:	4b11      	ldr	r3, [pc, #68]	; (80100b4 <prvHeapInit+0xb0>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	1ad2      	subs	r2, r2, r3
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010082:	4b0c      	ldr	r3, [pc, #48]	; (80100b4 <prvHeapInit+0xb0>)
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	685a      	ldr	r2, [r3, #4]
 801008e:	4b0a      	ldr	r3, [pc, #40]	; (80100b8 <prvHeapInit+0xb4>)
 8010090:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	685a      	ldr	r2, [r3, #4]
 8010096:	4b09      	ldr	r3, [pc, #36]	; (80100bc <prvHeapInit+0xb8>)
 8010098:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801009a:	4b09      	ldr	r3, [pc, #36]	; (80100c0 <prvHeapInit+0xbc>)
 801009c:	2280      	movs	r2, #128	; 0x80
 801009e:	0612      	lsls	r2, r2, #24
 80100a0:	601a      	str	r2, [r3, #0]
}
 80100a2:	46c0      	nop			; (mov r8, r8)
 80100a4:	46bd      	mov	sp, r7
 80100a6:	b004      	add	sp, #16
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	46c0      	nop			; (mov r8, r8)
 80100ac:	200048c0 	.word	0x200048c0
 80100b0:	200054c0 	.word	0x200054c0
 80100b4:	200054c8 	.word	0x200054c8
 80100b8:	200054d0 	.word	0x200054d0
 80100bc:	200054cc 	.word	0x200054cc
 80100c0:	200054dc 	.word	0x200054dc

080100c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80100cc:	4b27      	ldr	r3, [pc, #156]	; (801016c <prvInsertBlockIntoFreeList+0xa8>)
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e002      	b.n	80100d8 <prvInsertBlockIntoFreeList+0x14>
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d8f7      	bhi.n	80100d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	18d3      	adds	r3, r2, r3
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d108      	bne.n	8010106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	685a      	ldr	r2, [r3, #4]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	18d2      	adds	r2, r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	18d2      	adds	r2, r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	429a      	cmp	r2, r3
 8010118:	d118      	bne.n	801014c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	4b14      	ldr	r3, [pc, #80]	; (8010170 <prvInsertBlockIntoFreeList+0xac>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	d00d      	beq.n	8010142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	685a      	ldr	r2, [r3, #4]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	18d2      	adds	r2, r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	e008      	b.n	8010154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <prvInsertBlockIntoFreeList+0xac>)
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	e003      	b.n	8010154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	429a      	cmp	r2, r3
 801015a:	d002      	beq.n	8010162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010162:	46c0      	nop			; (mov r8, r8)
 8010164:	46bd      	mov	sp, r7
 8010166:	b004      	add	sp, #16
 8010168:	bd80      	pop	{r7, pc}
 801016a:	46c0      	nop			; (mov r8, r8)
 801016c:	200054c0 	.word	0x200054c0
 8010170:	200054c8 	.word	0x200054c8

08010174 <atoi>:
 8010174:	b510      	push	{r4, lr}
 8010176:	220a      	movs	r2, #10
 8010178:	2100      	movs	r1, #0
 801017a:	f000 ff81 	bl	8011080 <strtol>
 801017e:	bd10      	pop	{r4, pc}

08010180 <malloc>:
 8010180:	b510      	push	{r4, lr}
 8010182:	4b03      	ldr	r3, [pc, #12]	; (8010190 <malloc+0x10>)
 8010184:	0001      	movs	r1, r0
 8010186:	6818      	ldr	r0, [r3, #0]
 8010188:	f000 f826 	bl	80101d8 <_malloc_r>
 801018c:	bd10      	pop	{r4, pc}
 801018e:	46c0      	nop			; (mov r8, r8)
 8010190:	200002b4 	.word	0x200002b4

08010194 <sbrk_aligned>:
 8010194:	b570      	push	{r4, r5, r6, lr}
 8010196:	4e0f      	ldr	r6, [pc, #60]	; (80101d4 <sbrk_aligned+0x40>)
 8010198:	000d      	movs	r5, r1
 801019a:	6831      	ldr	r1, [r6, #0]
 801019c:	0004      	movs	r4, r0
 801019e:	2900      	cmp	r1, #0
 80101a0:	d102      	bne.n	80101a8 <sbrk_aligned+0x14>
 80101a2:	f002 f891 	bl	80122c8 <_sbrk_r>
 80101a6:	6030      	str	r0, [r6, #0]
 80101a8:	0029      	movs	r1, r5
 80101aa:	0020      	movs	r0, r4
 80101ac:	f002 f88c 	bl	80122c8 <_sbrk_r>
 80101b0:	1c43      	adds	r3, r0, #1
 80101b2:	d00a      	beq.n	80101ca <sbrk_aligned+0x36>
 80101b4:	2303      	movs	r3, #3
 80101b6:	1cc5      	adds	r5, r0, #3
 80101b8:	439d      	bics	r5, r3
 80101ba:	42a8      	cmp	r0, r5
 80101bc:	d007      	beq.n	80101ce <sbrk_aligned+0x3a>
 80101be:	1a29      	subs	r1, r5, r0
 80101c0:	0020      	movs	r0, r4
 80101c2:	f002 f881 	bl	80122c8 <_sbrk_r>
 80101c6:	3001      	adds	r0, #1
 80101c8:	d101      	bne.n	80101ce <sbrk_aligned+0x3a>
 80101ca:	2501      	movs	r5, #1
 80101cc:	426d      	negs	r5, r5
 80101ce:	0028      	movs	r0, r5
 80101d0:	bd70      	pop	{r4, r5, r6, pc}
 80101d2:	46c0      	nop			; (mov r8, r8)
 80101d4:	200054e4 	.word	0x200054e4

080101d8 <_malloc_r>:
 80101d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101da:	2203      	movs	r2, #3
 80101dc:	1ccb      	adds	r3, r1, #3
 80101de:	4393      	bics	r3, r2
 80101e0:	3308      	adds	r3, #8
 80101e2:	0006      	movs	r6, r0
 80101e4:	001f      	movs	r7, r3
 80101e6:	2b0c      	cmp	r3, #12
 80101e8:	d238      	bcs.n	801025c <_malloc_r+0x84>
 80101ea:	270c      	movs	r7, #12
 80101ec:	42b9      	cmp	r1, r7
 80101ee:	d837      	bhi.n	8010260 <_malloc_r+0x88>
 80101f0:	0030      	movs	r0, r6
 80101f2:	f000 f873 	bl	80102dc <__malloc_lock>
 80101f6:	4b38      	ldr	r3, [pc, #224]	; (80102d8 <_malloc_r+0x100>)
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	001c      	movs	r4, r3
 80101fe:	2c00      	cmp	r4, #0
 8010200:	d133      	bne.n	801026a <_malloc_r+0x92>
 8010202:	0039      	movs	r1, r7
 8010204:	0030      	movs	r0, r6
 8010206:	f7ff ffc5 	bl	8010194 <sbrk_aligned>
 801020a:	0004      	movs	r4, r0
 801020c:	1c43      	adds	r3, r0, #1
 801020e:	d15e      	bne.n	80102ce <_malloc_r+0xf6>
 8010210:	9b00      	ldr	r3, [sp, #0]
 8010212:	681c      	ldr	r4, [r3, #0]
 8010214:	0025      	movs	r5, r4
 8010216:	2d00      	cmp	r5, #0
 8010218:	d14e      	bne.n	80102b8 <_malloc_r+0xe0>
 801021a:	2c00      	cmp	r4, #0
 801021c:	d051      	beq.n	80102c2 <_malloc_r+0xea>
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	0029      	movs	r1, r5
 8010222:	18e3      	adds	r3, r4, r3
 8010224:	0030      	movs	r0, r6
 8010226:	9301      	str	r3, [sp, #4]
 8010228:	f002 f84e 	bl	80122c8 <_sbrk_r>
 801022c:	9b01      	ldr	r3, [sp, #4]
 801022e:	4283      	cmp	r3, r0
 8010230:	d147      	bne.n	80102c2 <_malloc_r+0xea>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	0030      	movs	r0, r6
 8010236:	1aff      	subs	r7, r7, r3
 8010238:	0039      	movs	r1, r7
 801023a:	f7ff ffab 	bl	8010194 <sbrk_aligned>
 801023e:	3001      	adds	r0, #1
 8010240:	d03f      	beq.n	80102c2 <_malloc_r+0xea>
 8010242:	6823      	ldr	r3, [r4, #0]
 8010244:	19db      	adds	r3, r3, r7
 8010246:	6023      	str	r3, [r4, #0]
 8010248:	9b00      	ldr	r3, [sp, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d040      	beq.n	80102d2 <_malloc_r+0xfa>
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	42a2      	cmp	r2, r4
 8010254:	d133      	bne.n	80102be <_malloc_r+0xe6>
 8010256:	2200      	movs	r2, #0
 8010258:	605a      	str	r2, [r3, #4]
 801025a:	e014      	b.n	8010286 <_malloc_r+0xae>
 801025c:	2b00      	cmp	r3, #0
 801025e:	dac5      	bge.n	80101ec <_malloc_r+0x14>
 8010260:	230c      	movs	r3, #12
 8010262:	2500      	movs	r5, #0
 8010264:	6033      	str	r3, [r6, #0]
 8010266:	0028      	movs	r0, r5
 8010268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801026a:	6821      	ldr	r1, [r4, #0]
 801026c:	1bc9      	subs	r1, r1, r7
 801026e:	d420      	bmi.n	80102b2 <_malloc_r+0xda>
 8010270:	290b      	cmp	r1, #11
 8010272:	d918      	bls.n	80102a6 <_malloc_r+0xce>
 8010274:	19e2      	adds	r2, r4, r7
 8010276:	6027      	str	r7, [r4, #0]
 8010278:	42a3      	cmp	r3, r4
 801027a:	d112      	bne.n	80102a2 <_malloc_r+0xca>
 801027c:	9b00      	ldr	r3, [sp, #0]
 801027e:	601a      	str	r2, [r3, #0]
 8010280:	6863      	ldr	r3, [r4, #4]
 8010282:	6011      	str	r1, [r2, #0]
 8010284:	6053      	str	r3, [r2, #4]
 8010286:	0030      	movs	r0, r6
 8010288:	0025      	movs	r5, r4
 801028a:	f000 f82f 	bl	80102ec <__malloc_unlock>
 801028e:	2207      	movs	r2, #7
 8010290:	350b      	adds	r5, #11
 8010292:	1d23      	adds	r3, r4, #4
 8010294:	4395      	bics	r5, r2
 8010296:	1aea      	subs	r2, r5, r3
 8010298:	429d      	cmp	r5, r3
 801029a:	d0e4      	beq.n	8010266 <_malloc_r+0x8e>
 801029c:	1b5b      	subs	r3, r3, r5
 801029e:	50a3      	str	r3, [r4, r2]
 80102a0:	e7e1      	b.n	8010266 <_malloc_r+0x8e>
 80102a2:	605a      	str	r2, [r3, #4]
 80102a4:	e7ec      	b.n	8010280 <_malloc_r+0xa8>
 80102a6:	6862      	ldr	r2, [r4, #4]
 80102a8:	42a3      	cmp	r3, r4
 80102aa:	d1d5      	bne.n	8010258 <_malloc_r+0x80>
 80102ac:	9b00      	ldr	r3, [sp, #0]
 80102ae:	601a      	str	r2, [r3, #0]
 80102b0:	e7e9      	b.n	8010286 <_malloc_r+0xae>
 80102b2:	0023      	movs	r3, r4
 80102b4:	6864      	ldr	r4, [r4, #4]
 80102b6:	e7a2      	b.n	80101fe <_malloc_r+0x26>
 80102b8:	002c      	movs	r4, r5
 80102ba:	686d      	ldr	r5, [r5, #4]
 80102bc:	e7ab      	b.n	8010216 <_malloc_r+0x3e>
 80102be:	0013      	movs	r3, r2
 80102c0:	e7c4      	b.n	801024c <_malloc_r+0x74>
 80102c2:	230c      	movs	r3, #12
 80102c4:	0030      	movs	r0, r6
 80102c6:	6033      	str	r3, [r6, #0]
 80102c8:	f000 f810 	bl	80102ec <__malloc_unlock>
 80102cc:	e7cb      	b.n	8010266 <_malloc_r+0x8e>
 80102ce:	6027      	str	r7, [r4, #0]
 80102d0:	e7d9      	b.n	8010286 <_malloc_r+0xae>
 80102d2:	605b      	str	r3, [r3, #4]
 80102d4:	deff      	udf	#255	; 0xff
 80102d6:	46c0      	nop			; (mov r8, r8)
 80102d8:	200054e0 	.word	0x200054e0

080102dc <__malloc_lock>:
 80102dc:	b510      	push	{r4, lr}
 80102de:	4802      	ldr	r0, [pc, #8]	; (80102e8 <__malloc_lock+0xc>)
 80102e0:	f002 f843 	bl	801236a <__retarget_lock_acquire_recursive>
 80102e4:	bd10      	pop	{r4, pc}
 80102e6:	46c0      	nop			; (mov r8, r8)
 80102e8:	20005628 	.word	0x20005628

080102ec <__malloc_unlock>:
 80102ec:	b510      	push	{r4, lr}
 80102ee:	4802      	ldr	r0, [pc, #8]	; (80102f8 <__malloc_unlock+0xc>)
 80102f0:	f002 f83c 	bl	801236c <__retarget_lock_release_recursive>
 80102f4:	bd10      	pop	{r4, pc}
 80102f6:	46c0      	nop			; (mov r8, r8)
 80102f8:	20005628 	.word	0x20005628

080102fc <sulp>:
 80102fc:	b570      	push	{r4, r5, r6, lr}
 80102fe:	0016      	movs	r6, r2
 8010300:	000d      	movs	r5, r1
 8010302:	f003 fe55 	bl	8013fb0 <__ulp>
 8010306:	2e00      	cmp	r6, #0
 8010308:	d00d      	beq.n	8010326 <sulp+0x2a>
 801030a:	236b      	movs	r3, #107	; 0x6b
 801030c:	006a      	lsls	r2, r5, #1
 801030e:	0d52      	lsrs	r2, r2, #21
 8010310:	1a9b      	subs	r3, r3, r2
 8010312:	2b00      	cmp	r3, #0
 8010314:	dd07      	ble.n	8010326 <sulp+0x2a>
 8010316:	2400      	movs	r4, #0
 8010318:	4a03      	ldr	r2, [pc, #12]	; (8010328 <sulp+0x2c>)
 801031a:	051b      	lsls	r3, r3, #20
 801031c:	189d      	adds	r5, r3, r2
 801031e:	002b      	movs	r3, r5
 8010320:	0022      	movs	r2, r4
 8010322:	f7f1 ffd7 	bl	80022d4 <__aeabi_dmul>
 8010326:	bd70      	pop	{r4, r5, r6, pc}
 8010328:	3ff00000 	.word	0x3ff00000

0801032c <_strtod_l>:
 801032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801032e:	b0a1      	sub	sp, #132	; 0x84
 8010330:	9219      	str	r2, [sp, #100]	; 0x64
 8010332:	2200      	movs	r2, #0
 8010334:	2600      	movs	r6, #0
 8010336:	2700      	movs	r7, #0
 8010338:	9004      	str	r0, [sp, #16]
 801033a:	9107      	str	r1, [sp, #28]
 801033c:	921c      	str	r2, [sp, #112]	; 0x70
 801033e:	911b      	str	r1, [sp, #108]	; 0x6c
 8010340:	780a      	ldrb	r2, [r1, #0]
 8010342:	2a2b      	cmp	r2, #43	; 0x2b
 8010344:	d055      	beq.n	80103f2 <_strtod_l+0xc6>
 8010346:	d841      	bhi.n	80103cc <_strtod_l+0xa0>
 8010348:	2a0d      	cmp	r2, #13
 801034a:	d83b      	bhi.n	80103c4 <_strtod_l+0x98>
 801034c:	2a08      	cmp	r2, #8
 801034e:	d83b      	bhi.n	80103c8 <_strtod_l+0x9c>
 8010350:	2a00      	cmp	r2, #0
 8010352:	d044      	beq.n	80103de <_strtod_l+0xb2>
 8010354:	2200      	movs	r2, #0
 8010356:	920f      	str	r2, [sp, #60]	; 0x3c
 8010358:	2100      	movs	r1, #0
 801035a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801035c:	9109      	str	r1, [sp, #36]	; 0x24
 801035e:	782a      	ldrb	r2, [r5, #0]
 8010360:	2a30      	cmp	r2, #48	; 0x30
 8010362:	d000      	beq.n	8010366 <_strtod_l+0x3a>
 8010364:	e085      	b.n	8010472 <_strtod_l+0x146>
 8010366:	786a      	ldrb	r2, [r5, #1]
 8010368:	3120      	adds	r1, #32
 801036a:	438a      	bics	r2, r1
 801036c:	2a58      	cmp	r2, #88	; 0x58
 801036e:	d000      	beq.n	8010372 <_strtod_l+0x46>
 8010370:	e075      	b.n	801045e <_strtod_l+0x132>
 8010372:	9302      	str	r3, [sp, #8]
 8010374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010376:	4a97      	ldr	r2, [pc, #604]	; (80105d4 <_strtod_l+0x2a8>)
 8010378:	9301      	str	r3, [sp, #4]
 801037a:	ab1c      	add	r3, sp, #112	; 0x70
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	9804      	ldr	r0, [sp, #16]
 8010380:	ab1d      	add	r3, sp, #116	; 0x74
 8010382:	a91b      	add	r1, sp, #108	; 0x6c
 8010384:	f002 ff8a 	bl	801329c <__gethex>
 8010388:	230f      	movs	r3, #15
 801038a:	0002      	movs	r2, r0
 801038c:	401a      	ands	r2, r3
 801038e:	0004      	movs	r4, r0
 8010390:	9205      	str	r2, [sp, #20]
 8010392:	4218      	tst	r0, r3
 8010394:	d005      	beq.n	80103a2 <_strtod_l+0x76>
 8010396:	2a06      	cmp	r2, #6
 8010398:	d12d      	bne.n	80103f6 <_strtod_l+0xca>
 801039a:	1c6b      	adds	r3, r5, #1
 801039c:	931b      	str	r3, [sp, #108]	; 0x6c
 801039e:	2300      	movs	r3, #0
 80103a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80103a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d002      	beq.n	80103ae <_strtod_l+0x82>
 80103a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80103aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80103ac:	6013      	str	r3, [r2, #0]
 80103ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d01b      	beq.n	80103ec <_strtod_l+0xc0>
 80103b4:	2380      	movs	r3, #128	; 0x80
 80103b6:	0032      	movs	r2, r6
 80103b8:	061b      	lsls	r3, r3, #24
 80103ba:	18fb      	adds	r3, r7, r3
 80103bc:	0010      	movs	r0, r2
 80103be:	0019      	movs	r1, r3
 80103c0:	b021      	add	sp, #132	; 0x84
 80103c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103c4:	2a20      	cmp	r2, #32
 80103c6:	d1c5      	bne.n	8010354 <_strtod_l+0x28>
 80103c8:	3101      	adds	r1, #1
 80103ca:	e7b8      	b.n	801033e <_strtod_l+0x12>
 80103cc:	2a2d      	cmp	r2, #45	; 0x2d
 80103ce:	d1c1      	bne.n	8010354 <_strtod_l+0x28>
 80103d0:	3a2c      	subs	r2, #44	; 0x2c
 80103d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80103d4:	1c4a      	adds	r2, r1, #1
 80103d6:	921b      	str	r2, [sp, #108]	; 0x6c
 80103d8:	784a      	ldrb	r2, [r1, #1]
 80103da:	2a00      	cmp	r2, #0
 80103dc:	d1bc      	bne.n	8010358 <_strtod_l+0x2c>
 80103de:	9b07      	ldr	r3, [sp, #28]
 80103e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80103e2:	2300      	movs	r3, #0
 80103e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80103e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d1dd      	bne.n	80103a8 <_strtod_l+0x7c>
 80103ec:	0032      	movs	r2, r6
 80103ee:	003b      	movs	r3, r7
 80103f0:	e7e4      	b.n	80103bc <_strtod_l+0x90>
 80103f2:	2200      	movs	r2, #0
 80103f4:	e7ed      	b.n	80103d2 <_strtod_l+0xa6>
 80103f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80103f8:	2a00      	cmp	r2, #0
 80103fa:	d007      	beq.n	801040c <_strtod_l+0xe0>
 80103fc:	2135      	movs	r1, #53	; 0x35
 80103fe:	a81e      	add	r0, sp, #120	; 0x78
 8010400:	f003 fec7 	bl	8014192 <__copybits>
 8010404:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010406:	9804      	ldr	r0, [sp, #16]
 8010408:	f003 fa90 	bl	801392c <_Bfree>
 801040c:	9805      	ldr	r0, [sp, #20]
 801040e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010410:	3801      	subs	r0, #1
 8010412:	2804      	cmp	r0, #4
 8010414:	d806      	bhi.n	8010424 <_strtod_l+0xf8>
 8010416:	f7ef fe7f 	bl	8000118 <__gnu_thumb1_case_uqi>
 801041a:	0312      	.short	0x0312
 801041c:	1e1c      	.short	0x1e1c
 801041e:	12          	.byte	0x12
 801041f:	00          	.byte	0x00
 8010420:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010422:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8010424:	05e4      	lsls	r4, r4, #23
 8010426:	d502      	bpl.n	801042e <_strtod_l+0x102>
 8010428:	2380      	movs	r3, #128	; 0x80
 801042a:	061b      	lsls	r3, r3, #24
 801042c:	431f      	orrs	r7, r3
 801042e:	4b6a      	ldr	r3, [pc, #424]	; (80105d8 <_strtod_l+0x2ac>)
 8010430:	423b      	tst	r3, r7
 8010432:	d1b6      	bne.n	80103a2 <_strtod_l+0x76>
 8010434:	f001 ff6e 	bl	8012314 <__errno>
 8010438:	2322      	movs	r3, #34	; 0x22
 801043a:	6003      	str	r3, [r0, #0]
 801043c:	e7b1      	b.n	80103a2 <_strtod_l+0x76>
 801043e:	4967      	ldr	r1, [pc, #412]	; (80105dc <_strtod_l+0x2b0>)
 8010440:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010442:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010444:	400a      	ands	r2, r1
 8010446:	4966      	ldr	r1, [pc, #408]	; (80105e0 <_strtod_l+0x2b4>)
 8010448:	185b      	adds	r3, r3, r1
 801044a:	051b      	lsls	r3, r3, #20
 801044c:	431a      	orrs	r2, r3
 801044e:	0017      	movs	r7, r2
 8010450:	e7e8      	b.n	8010424 <_strtod_l+0xf8>
 8010452:	4f61      	ldr	r7, [pc, #388]	; (80105d8 <_strtod_l+0x2ac>)
 8010454:	e7e6      	b.n	8010424 <_strtod_l+0xf8>
 8010456:	2601      	movs	r6, #1
 8010458:	4f62      	ldr	r7, [pc, #392]	; (80105e4 <_strtod_l+0x2b8>)
 801045a:	4276      	negs	r6, r6
 801045c:	e7e2      	b.n	8010424 <_strtod_l+0xf8>
 801045e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010460:	1c5a      	adds	r2, r3, #1
 8010462:	921b      	str	r2, [sp, #108]	; 0x6c
 8010464:	785b      	ldrb	r3, [r3, #1]
 8010466:	2b30      	cmp	r3, #48	; 0x30
 8010468:	d0f9      	beq.n	801045e <_strtod_l+0x132>
 801046a:	2b00      	cmp	r3, #0
 801046c:	d099      	beq.n	80103a2 <_strtod_l+0x76>
 801046e:	2301      	movs	r3, #1
 8010470:	9309      	str	r3, [sp, #36]	; 0x24
 8010472:	2500      	movs	r5, #0
 8010474:	220a      	movs	r2, #10
 8010476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010478:	950d      	str	r5, [sp, #52]	; 0x34
 801047a:	9310      	str	r3, [sp, #64]	; 0x40
 801047c:	9508      	str	r5, [sp, #32]
 801047e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010480:	7804      	ldrb	r4, [r0, #0]
 8010482:	0023      	movs	r3, r4
 8010484:	3b30      	subs	r3, #48	; 0x30
 8010486:	b2d9      	uxtb	r1, r3
 8010488:	2909      	cmp	r1, #9
 801048a:	d927      	bls.n	80104dc <_strtod_l+0x1b0>
 801048c:	2201      	movs	r2, #1
 801048e:	4956      	ldr	r1, [pc, #344]	; (80105e8 <_strtod_l+0x2bc>)
 8010490:	f001 fddb 	bl	801204a <strncmp>
 8010494:	2800      	cmp	r0, #0
 8010496:	d031      	beq.n	80104fc <_strtod_l+0x1d0>
 8010498:	2000      	movs	r0, #0
 801049a:	0023      	movs	r3, r4
 801049c:	4684      	mov	ip, r0
 801049e:	9a08      	ldr	r2, [sp, #32]
 80104a0:	900c      	str	r0, [sp, #48]	; 0x30
 80104a2:	9205      	str	r2, [sp, #20]
 80104a4:	2220      	movs	r2, #32
 80104a6:	0019      	movs	r1, r3
 80104a8:	4391      	bics	r1, r2
 80104aa:	000a      	movs	r2, r1
 80104ac:	2100      	movs	r1, #0
 80104ae:	9106      	str	r1, [sp, #24]
 80104b0:	2a45      	cmp	r2, #69	; 0x45
 80104b2:	d000      	beq.n	80104b6 <_strtod_l+0x18a>
 80104b4:	e0c2      	b.n	801063c <_strtod_l+0x310>
 80104b6:	9b05      	ldr	r3, [sp, #20]
 80104b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ba:	4303      	orrs	r3, r0
 80104bc:	4313      	orrs	r3, r2
 80104be:	428b      	cmp	r3, r1
 80104c0:	d08d      	beq.n	80103de <_strtod_l+0xb2>
 80104c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104c4:	9307      	str	r3, [sp, #28]
 80104c6:	3301      	adds	r3, #1
 80104c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80104ca:	9b07      	ldr	r3, [sp, #28]
 80104cc:	785b      	ldrb	r3, [r3, #1]
 80104ce:	2b2b      	cmp	r3, #43	; 0x2b
 80104d0:	d071      	beq.n	80105b6 <_strtod_l+0x28a>
 80104d2:	000c      	movs	r4, r1
 80104d4:	2b2d      	cmp	r3, #45	; 0x2d
 80104d6:	d174      	bne.n	80105c2 <_strtod_l+0x296>
 80104d8:	2401      	movs	r4, #1
 80104da:	e06d      	b.n	80105b8 <_strtod_l+0x28c>
 80104dc:	9908      	ldr	r1, [sp, #32]
 80104de:	2908      	cmp	r1, #8
 80104e0:	dc09      	bgt.n	80104f6 <_strtod_l+0x1ca>
 80104e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80104e4:	4351      	muls	r1, r2
 80104e6:	185b      	adds	r3, r3, r1
 80104e8:	930d      	str	r3, [sp, #52]	; 0x34
 80104ea:	9b08      	ldr	r3, [sp, #32]
 80104ec:	3001      	adds	r0, #1
 80104ee:	3301      	adds	r3, #1
 80104f0:	9308      	str	r3, [sp, #32]
 80104f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80104f4:	e7c3      	b.n	801047e <_strtod_l+0x152>
 80104f6:	4355      	muls	r5, r2
 80104f8:	195d      	adds	r5, r3, r5
 80104fa:	e7f6      	b.n	80104ea <_strtod_l+0x1be>
 80104fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	921b      	str	r2, [sp, #108]	; 0x6c
 8010502:	9a08      	ldr	r2, [sp, #32]
 8010504:	785b      	ldrb	r3, [r3, #1]
 8010506:	2a00      	cmp	r2, #0
 8010508:	d03a      	beq.n	8010580 <_strtod_l+0x254>
 801050a:	900c      	str	r0, [sp, #48]	; 0x30
 801050c:	9205      	str	r2, [sp, #20]
 801050e:	001a      	movs	r2, r3
 8010510:	3a30      	subs	r2, #48	; 0x30
 8010512:	2a09      	cmp	r2, #9
 8010514:	d912      	bls.n	801053c <_strtod_l+0x210>
 8010516:	2201      	movs	r2, #1
 8010518:	4694      	mov	ip, r2
 801051a:	e7c3      	b.n	80104a4 <_strtod_l+0x178>
 801051c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801051e:	3001      	adds	r0, #1
 8010520:	1c5a      	adds	r2, r3, #1
 8010522:	921b      	str	r2, [sp, #108]	; 0x6c
 8010524:	785b      	ldrb	r3, [r3, #1]
 8010526:	2b30      	cmp	r3, #48	; 0x30
 8010528:	d0f8      	beq.n	801051c <_strtod_l+0x1f0>
 801052a:	001a      	movs	r2, r3
 801052c:	3a31      	subs	r2, #49	; 0x31
 801052e:	2a08      	cmp	r2, #8
 8010530:	d83c      	bhi.n	80105ac <_strtod_l+0x280>
 8010532:	900c      	str	r0, [sp, #48]	; 0x30
 8010534:	2000      	movs	r0, #0
 8010536:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010538:	9005      	str	r0, [sp, #20]
 801053a:	9210      	str	r2, [sp, #64]	; 0x40
 801053c:	001a      	movs	r2, r3
 801053e:	1c41      	adds	r1, r0, #1
 8010540:	3a30      	subs	r2, #48	; 0x30
 8010542:	2b30      	cmp	r3, #48	; 0x30
 8010544:	d016      	beq.n	8010574 <_strtod_l+0x248>
 8010546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010548:	185b      	adds	r3, r3, r1
 801054a:	930c      	str	r3, [sp, #48]	; 0x30
 801054c:	9b05      	ldr	r3, [sp, #20]
 801054e:	210a      	movs	r1, #10
 8010550:	469c      	mov	ip, r3
 8010552:	4484      	add	ip, r0
 8010554:	4563      	cmp	r3, ip
 8010556:	d115      	bne.n	8010584 <_strtod_l+0x258>
 8010558:	9905      	ldr	r1, [sp, #20]
 801055a:	9b05      	ldr	r3, [sp, #20]
 801055c:	3101      	adds	r1, #1
 801055e:	1809      	adds	r1, r1, r0
 8010560:	181b      	adds	r3, r3, r0
 8010562:	9105      	str	r1, [sp, #20]
 8010564:	2b08      	cmp	r3, #8
 8010566:	dc19      	bgt.n	801059c <_strtod_l+0x270>
 8010568:	230a      	movs	r3, #10
 801056a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801056c:	434b      	muls	r3, r1
 801056e:	2100      	movs	r1, #0
 8010570:	18d3      	adds	r3, r2, r3
 8010572:	930d      	str	r3, [sp, #52]	; 0x34
 8010574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010576:	0008      	movs	r0, r1
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	921b      	str	r2, [sp, #108]	; 0x6c
 801057c:	785b      	ldrb	r3, [r3, #1]
 801057e:	e7c6      	b.n	801050e <_strtod_l+0x1e2>
 8010580:	9808      	ldr	r0, [sp, #32]
 8010582:	e7d0      	b.n	8010526 <_strtod_l+0x1fa>
 8010584:	1c5c      	adds	r4, r3, #1
 8010586:	2b08      	cmp	r3, #8
 8010588:	dc04      	bgt.n	8010594 <_strtod_l+0x268>
 801058a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801058c:	434b      	muls	r3, r1
 801058e:	930d      	str	r3, [sp, #52]	; 0x34
 8010590:	0023      	movs	r3, r4
 8010592:	e7df      	b.n	8010554 <_strtod_l+0x228>
 8010594:	2c10      	cmp	r4, #16
 8010596:	dcfb      	bgt.n	8010590 <_strtod_l+0x264>
 8010598:	434d      	muls	r5, r1
 801059a:	e7f9      	b.n	8010590 <_strtod_l+0x264>
 801059c:	9b05      	ldr	r3, [sp, #20]
 801059e:	2100      	movs	r1, #0
 80105a0:	2b10      	cmp	r3, #16
 80105a2:	dce7      	bgt.n	8010574 <_strtod_l+0x248>
 80105a4:	230a      	movs	r3, #10
 80105a6:	435d      	muls	r5, r3
 80105a8:	1955      	adds	r5, r2, r5
 80105aa:	e7e3      	b.n	8010574 <_strtod_l+0x248>
 80105ac:	2200      	movs	r2, #0
 80105ae:	920c      	str	r2, [sp, #48]	; 0x30
 80105b0:	9205      	str	r2, [sp, #20]
 80105b2:	3201      	adds	r2, #1
 80105b4:	e7b0      	b.n	8010518 <_strtod_l+0x1ec>
 80105b6:	2400      	movs	r4, #0
 80105b8:	9b07      	ldr	r3, [sp, #28]
 80105ba:	3302      	adds	r3, #2
 80105bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80105be:	9b07      	ldr	r3, [sp, #28]
 80105c0:	789b      	ldrb	r3, [r3, #2]
 80105c2:	001a      	movs	r2, r3
 80105c4:	3a30      	subs	r2, #48	; 0x30
 80105c6:	2a09      	cmp	r2, #9
 80105c8:	d914      	bls.n	80105f4 <_strtod_l+0x2c8>
 80105ca:	9a07      	ldr	r2, [sp, #28]
 80105cc:	921b      	str	r2, [sp, #108]	; 0x6c
 80105ce:	2200      	movs	r2, #0
 80105d0:	e033      	b.n	801063a <_strtod_l+0x30e>
 80105d2:	46c0      	nop			; (mov r8, r8)
 80105d4:	080173b4 	.word	0x080173b4
 80105d8:	7ff00000 	.word	0x7ff00000
 80105dc:	ffefffff 	.word	0xffefffff
 80105e0:	00000433 	.word	0x00000433
 80105e4:	7fffffff 	.word	0x7fffffff
 80105e8:	080173b0 	.word	0x080173b0
 80105ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80105ee:	1c5a      	adds	r2, r3, #1
 80105f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80105f2:	785b      	ldrb	r3, [r3, #1]
 80105f4:	2b30      	cmp	r3, #48	; 0x30
 80105f6:	d0f9      	beq.n	80105ec <_strtod_l+0x2c0>
 80105f8:	2200      	movs	r2, #0
 80105fa:	9206      	str	r2, [sp, #24]
 80105fc:	001a      	movs	r2, r3
 80105fe:	3a31      	subs	r2, #49	; 0x31
 8010600:	2a08      	cmp	r2, #8
 8010602:	d81b      	bhi.n	801063c <_strtod_l+0x310>
 8010604:	3b30      	subs	r3, #48	; 0x30
 8010606:	930e      	str	r3, [sp, #56]	; 0x38
 8010608:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801060a:	9306      	str	r3, [sp, #24]
 801060c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801060e:	1c59      	adds	r1, r3, #1
 8010610:	911b      	str	r1, [sp, #108]	; 0x6c
 8010612:	785b      	ldrb	r3, [r3, #1]
 8010614:	001a      	movs	r2, r3
 8010616:	3a30      	subs	r2, #48	; 0x30
 8010618:	2a09      	cmp	r2, #9
 801061a:	d93a      	bls.n	8010692 <_strtod_l+0x366>
 801061c:	9a06      	ldr	r2, [sp, #24]
 801061e:	1a8a      	subs	r2, r1, r2
 8010620:	49b2      	ldr	r1, [pc, #712]	; (80108ec <_strtod_l+0x5c0>)
 8010622:	9106      	str	r1, [sp, #24]
 8010624:	2a08      	cmp	r2, #8
 8010626:	dc04      	bgt.n	8010632 <_strtod_l+0x306>
 8010628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801062a:	9206      	str	r2, [sp, #24]
 801062c:	428a      	cmp	r2, r1
 801062e:	dd00      	ble.n	8010632 <_strtod_l+0x306>
 8010630:	9106      	str	r1, [sp, #24]
 8010632:	2c00      	cmp	r4, #0
 8010634:	d002      	beq.n	801063c <_strtod_l+0x310>
 8010636:	9a06      	ldr	r2, [sp, #24]
 8010638:	4252      	negs	r2, r2
 801063a:	9206      	str	r2, [sp, #24]
 801063c:	9a05      	ldr	r2, [sp, #20]
 801063e:	2a00      	cmp	r2, #0
 8010640:	d14d      	bne.n	80106de <_strtod_l+0x3b2>
 8010642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010644:	4310      	orrs	r0, r2
 8010646:	d000      	beq.n	801064a <_strtod_l+0x31e>
 8010648:	e6ab      	b.n	80103a2 <_strtod_l+0x76>
 801064a:	4662      	mov	r2, ip
 801064c:	2a00      	cmp	r2, #0
 801064e:	d000      	beq.n	8010652 <_strtod_l+0x326>
 8010650:	e6c5      	b.n	80103de <_strtod_l+0xb2>
 8010652:	2b69      	cmp	r3, #105	; 0x69
 8010654:	d027      	beq.n	80106a6 <_strtod_l+0x37a>
 8010656:	dc23      	bgt.n	80106a0 <_strtod_l+0x374>
 8010658:	2b49      	cmp	r3, #73	; 0x49
 801065a:	d024      	beq.n	80106a6 <_strtod_l+0x37a>
 801065c:	2b4e      	cmp	r3, #78	; 0x4e
 801065e:	d000      	beq.n	8010662 <_strtod_l+0x336>
 8010660:	e6bd      	b.n	80103de <_strtod_l+0xb2>
 8010662:	49a3      	ldr	r1, [pc, #652]	; (80108f0 <_strtod_l+0x5c4>)
 8010664:	a81b      	add	r0, sp, #108	; 0x6c
 8010666:	f003 f84f 	bl	8013708 <__match>
 801066a:	2800      	cmp	r0, #0
 801066c:	d100      	bne.n	8010670 <_strtod_l+0x344>
 801066e:	e6b6      	b.n	80103de <_strtod_l+0xb2>
 8010670:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	2b28      	cmp	r3, #40	; 0x28
 8010676:	d12c      	bne.n	80106d2 <_strtod_l+0x3a6>
 8010678:	499e      	ldr	r1, [pc, #632]	; (80108f4 <_strtod_l+0x5c8>)
 801067a:	aa1e      	add	r2, sp, #120	; 0x78
 801067c:	a81b      	add	r0, sp, #108	; 0x6c
 801067e:	f003 f857 	bl	8013730 <__hexnan>
 8010682:	2805      	cmp	r0, #5
 8010684:	d125      	bne.n	80106d2 <_strtod_l+0x3a6>
 8010686:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010688:	4a9b      	ldr	r2, [pc, #620]	; (80108f8 <_strtod_l+0x5cc>)
 801068a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801068c:	431a      	orrs	r2, r3
 801068e:	0017      	movs	r7, r2
 8010690:	e687      	b.n	80103a2 <_strtod_l+0x76>
 8010692:	220a      	movs	r2, #10
 8010694:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010696:	434a      	muls	r2, r1
 8010698:	18d2      	adds	r2, r2, r3
 801069a:	3a30      	subs	r2, #48	; 0x30
 801069c:	920e      	str	r2, [sp, #56]	; 0x38
 801069e:	e7b5      	b.n	801060c <_strtod_l+0x2e0>
 80106a0:	2b6e      	cmp	r3, #110	; 0x6e
 80106a2:	d0de      	beq.n	8010662 <_strtod_l+0x336>
 80106a4:	e69b      	b.n	80103de <_strtod_l+0xb2>
 80106a6:	4995      	ldr	r1, [pc, #596]	; (80108fc <_strtod_l+0x5d0>)
 80106a8:	a81b      	add	r0, sp, #108	; 0x6c
 80106aa:	f003 f82d 	bl	8013708 <__match>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	d100      	bne.n	80106b4 <_strtod_l+0x388>
 80106b2:	e694      	b.n	80103de <_strtod_l+0xb2>
 80106b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80106b6:	4992      	ldr	r1, [pc, #584]	; (8010900 <_strtod_l+0x5d4>)
 80106b8:	3b01      	subs	r3, #1
 80106ba:	a81b      	add	r0, sp, #108	; 0x6c
 80106bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80106be:	f003 f823 	bl	8013708 <__match>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	d102      	bne.n	80106cc <_strtod_l+0x3a0>
 80106c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80106c8:	3301      	adds	r3, #1
 80106ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80106cc:	2600      	movs	r6, #0
 80106ce:	4f8a      	ldr	r7, [pc, #552]	; (80108f8 <_strtod_l+0x5cc>)
 80106d0:	e667      	b.n	80103a2 <_strtod_l+0x76>
 80106d2:	488c      	ldr	r0, [pc, #560]	; (8010904 <_strtod_l+0x5d8>)
 80106d4:	f001 fe68 	bl	80123a8 <nan>
 80106d8:	0006      	movs	r6, r0
 80106da:	000f      	movs	r7, r1
 80106dc:	e661      	b.n	80103a2 <_strtod_l+0x76>
 80106de:	9b06      	ldr	r3, [sp, #24]
 80106e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106e2:	1a9b      	subs	r3, r3, r2
 80106e4:	9309      	str	r3, [sp, #36]	; 0x24
 80106e6:	9b08      	ldr	r3, [sp, #32]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d101      	bne.n	80106f0 <_strtod_l+0x3c4>
 80106ec:	9b05      	ldr	r3, [sp, #20]
 80106ee:	9308      	str	r3, [sp, #32]
 80106f0:	9c05      	ldr	r4, [sp, #20]
 80106f2:	2c10      	cmp	r4, #16
 80106f4:	dd00      	ble.n	80106f8 <_strtod_l+0x3cc>
 80106f6:	2410      	movs	r4, #16
 80106f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80106fa:	f7f2 fcb3 	bl	8003064 <__aeabi_ui2d>
 80106fe:	9b05      	ldr	r3, [sp, #20]
 8010700:	0006      	movs	r6, r0
 8010702:	000f      	movs	r7, r1
 8010704:	2b09      	cmp	r3, #9
 8010706:	dd15      	ble.n	8010734 <_strtod_l+0x408>
 8010708:	0022      	movs	r2, r4
 801070a:	4b7f      	ldr	r3, [pc, #508]	; (8010908 <_strtod_l+0x5dc>)
 801070c:	3a09      	subs	r2, #9
 801070e:	00d2      	lsls	r2, r2, #3
 8010710:	189b      	adds	r3, r3, r2
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	f7f1 fddd 	bl	80022d4 <__aeabi_dmul>
 801071a:	0006      	movs	r6, r0
 801071c:	0028      	movs	r0, r5
 801071e:	000f      	movs	r7, r1
 8010720:	f7f2 fca0 	bl	8003064 <__aeabi_ui2d>
 8010724:	0002      	movs	r2, r0
 8010726:	000b      	movs	r3, r1
 8010728:	0030      	movs	r0, r6
 801072a:	0039      	movs	r1, r7
 801072c:	f7f0 fe78 	bl	8001420 <__aeabi_dadd>
 8010730:	0006      	movs	r6, r0
 8010732:	000f      	movs	r7, r1
 8010734:	9b05      	ldr	r3, [sp, #20]
 8010736:	2b0f      	cmp	r3, #15
 8010738:	dc39      	bgt.n	80107ae <_strtod_l+0x482>
 801073a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801073c:	2b00      	cmp	r3, #0
 801073e:	d100      	bne.n	8010742 <_strtod_l+0x416>
 8010740:	e62f      	b.n	80103a2 <_strtod_l+0x76>
 8010742:	dd24      	ble.n	801078e <_strtod_l+0x462>
 8010744:	2b16      	cmp	r3, #22
 8010746:	dc09      	bgt.n	801075c <_strtod_l+0x430>
 8010748:	496f      	ldr	r1, [pc, #444]	; (8010908 <_strtod_l+0x5dc>)
 801074a:	00db      	lsls	r3, r3, #3
 801074c:	18c9      	adds	r1, r1, r3
 801074e:	0032      	movs	r2, r6
 8010750:	6808      	ldr	r0, [r1, #0]
 8010752:	6849      	ldr	r1, [r1, #4]
 8010754:	003b      	movs	r3, r7
 8010756:	f7f1 fdbd 	bl	80022d4 <__aeabi_dmul>
 801075a:	e7bd      	b.n	80106d8 <_strtod_l+0x3ac>
 801075c:	2325      	movs	r3, #37	; 0x25
 801075e:	9a05      	ldr	r2, [sp, #20]
 8010760:	1a9b      	subs	r3, r3, r2
 8010762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010764:	4293      	cmp	r3, r2
 8010766:	db22      	blt.n	80107ae <_strtod_l+0x482>
 8010768:	240f      	movs	r4, #15
 801076a:	9b05      	ldr	r3, [sp, #20]
 801076c:	4d66      	ldr	r5, [pc, #408]	; (8010908 <_strtod_l+0x5dc>)
 801076e:	1ae4      	subs	r4, r4, r3
 8010770:	00e1      	lsls	r1, r4, #3
 8010772:	1869      	adds	r1, r5, r1
 8010774:	0032      	movs	r2, r6
 8010776:	6808      	ldr	r0, [r1, #0]
 8010778:	6849      	ldr	r1, [r1, #4]
 801077a:	003b      	movs	r3, r7
 801077c:	f7f1 fdaa 	bl	80022d4 <__aeabi_dmul>
 8010780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010782:	1b1c      	subs	r4, r3, r4
 8010784:	00e4      	lsls	r4, r4, #3
 8010786:	192d      	adds	r5, r5, r4
 8010788:	682a      	ldr	r2, [r5, #0]
 801078a:	686b      	ldr	r3, [r5, #4]
 801078c:	e7e3      	b.n	8010756 <_strtod_l+0x42a>
 801078e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010790:	3316      	adds	r3, #22
 8010792:	db0c      	blt.n	80107ae <_strtod_l+0x482>
 8010794:	9906      	ldr	r1, [sp, #24]
 8010796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010798:	4b5b      	ldr	r3, [pc, #364]	; (8010908 <_strtod_l+0x5dc>)
 801079a:	1a52      	subs	r2, r2, r1
 801079c:	00d2      	lsls	r2, r2, #3
 801079e:	189b      	adds	r3, r3, r2
 80107a0:	0030      	movs	r0, r6
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	0039      	movs	r1, r7
 80107a8:	f7f1 f99a 	bl	8001ae0 <__aeabi_ddiv>
 80107ac:	e794      	b.n	80106d8 <_strtod_l+0x3ac>
 80107ae:	9b05      	ldr	r3, [sp, #20]
 80107b0:	1b1c      	subs	r4, r3, r4
 80107b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b4:	18e4      	adds	r4, r4, r3
 80107b6:	2c00      	cmp	r4, #0
 80107b8:	dd72      	ble.n	80108a0 <_strtod_l+0x574>
 80107ba:	220f      	movs	r2, #15
 80107bc:	0023      	movs	r3, r4
 80107be:	4013      	ands	r3, r2
 80107c0:	4214      	tst	r4, r2
 80107c2:	d00a      	beq.n	80107da <_strtod_l+0x4ae>
 80107c4:	4950      	ldr	r1, [pc, #320]	; (8010908 <_strtod_l+0x5dc>)
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	18c9      	adds	r1, r1, r3
 80107ca:	0032      	movs	r2, r6
 80107cc:	6808      	ldr	r0, [r1, #0]
 80107ce:	6849      	ldr	r1, [r1, #4]
 80107d0:	003b      	movs	r3, r7
 80107d2:	f7f1 fd7f 	bl	80022d4 <__aeabi_dmul>
 80107d6:	0006      	movs	r6, r0
 80107d8:	000f      	movs	r7, r1
 80107da:	230f      	movs	r3, #15
 80107dc:	439c      	bics	r4, r3
 80107de:	d04a      	beq.n	8010876 <_strtod_l+0x54a>
 80107e0:	3326      	adds	r3, #38	; 0x26
 80107e2:	33ff      	adds	r3, #255	; 0xff
 80107e4:	429c      	cmp	r4, r3
 80107e6:	dd22      	ble.n	801082e <_strtod_l+0x502>
 80107e8:	2300      	movs	r3, #0
 80107ea:	9305      	str	r3, [sp, #20]
 80107ec:	9306      	str	r3, [sp, #24]
 80107ee:	930d      	str	r3, [sp, #52]	; 0x34
 80107f0:	9308      	str	r3, [sp, #32]
 80107f2:	2322      	movs	r3, #34	; 0x22
 80107f4:	2600      	movs	r6, #0
 80107f6:	9a04      	ldr	r2, [sp, #16]
 80107f8:	4f3f      	ldr	r7, [pc, #252]	; (80108f8 <_strtod_l+0x5cc>)
 80107fa:	6013      	str	r3, [r2, #0]
 80107fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107fe:	42b3      	cmp	r3, r6
 8010800:	d100      	bne.n	8010804 <_strtod_l+0x4d8>
 8010802:	e5ce      	b.n	80103a2 <_strtod_l+0x76>
 8010804:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010806:	9804      	ldr	r0, [sp, #16]
 8010808:	f003 f890 	bl	801392c <_Bfree>
 801080c:	9908      	ldr	r1, [sp, #32]
 801080e:	9804      	ldr	r0, [sp, #16]
 8010810:	f003 f88c 	bl	801392c <_Bfree>
 8010814:	9906      	ldr	r1, [sp, #24]
 8010816:	9804      	ldr	r0, [sp, #16]
 8010818:	f003 f888 	bl	801392c <_Bfree>
 801081c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801081e:	9804      	ldr	r0, [sp, #16]
 8010820:	f003 f884 	bl	801392c <_Bfree>
 8010824:	9905      	ldr	r1, [sp, #20]
 8010826:	9804      	ldr	r0, [sp, #16]
 8010828:	f003 f880 	bl	801392c <_Bfree>
 801082c:	e5b9      	b.n	80103a2 <_strtod_l+0x76>
 801082e:	2300      	movs	r3, #0
 8010830:	0030      	movs	r0, r6
 8010832:	0039      	movs	r1, r7
 8010834:	4d35      	ldr	r5, [pc, #212]	; (801090c <_strtod_l+0x5e0>)
 8010836:	1124      	asrs	r4, r4, #4
 8010838:	9307      	str	r3, [sp, #28]
 801083a:	2c01      	cmp	r4, #1
 801083c:	dc1e      	bgt.n	801087c <_strtod_l+0x550>
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <_strtod_l+0x51a>
 8010842:	0006      	movs	r6, r0
 8010844:	000f      	movs	r7, r1
 8010846:	4b32      	ldr	r3, [pc, #200]	; (8010910 <_strtod_l+0x5e4>)
 8010848:	9a07      	ldr	r2, [sp, #28]
 801084a:	18ff      	adds	r7, r7, r3
 801084c:	4b2f      	ldr	r3, [pc, #188]	; (801090c <_strtod_l+0x5e0>)
 801084e:	00d2      	lsls	r2, r2, #3
 8010850:	189d      	adds	r5, r3, r2
 8010852:	6828      	ldr	r0, [r5, #0]
 8010854:	6869      	ldr	r1, [r5, #4]
 8010856:	0032      	movs	r2, r6
 8010858:	003b      	movs	r3, r7
 801085a:	f7f1 fd3b 	bl	80022d4 <__aeabi_dmul>
 801085e:	4b26      	ldr	r3, [pc, #152]	; (80108f8 <_strtod_l+0x5cc>)
 8010860:	4a2c      	ldr	r2, [pc, #176]	; (8010914 <_strtod_l+0x5e8>)
 8010862:	0006      	movs	r6, r0
 8010864:	400b      	ands	r3, r1
 8010866:	4293      	cmp	r3, r2
 8010868:	d8be      	bhi.n	80107e8 <_strtod_l+0x4bc>
 801086a:	4a2b      	ldr	r2, [pc, #172]	; (8010918 <_strtod_l+0x5ec>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d913      	bls.n	8010898 <_strtod_l+0x56c>
 8010870:	2601      	movs	r6, #1
 8010872:	4f2a      	ldr	r7, [pc, #168]	; (801091c <_strtod_l+0x5f0>)
 8010874:	4276      	negs	r6, r6
 8010876:	2300      	movs	r3, #0
 8010878:	9307      	str	r3, [sp, #28]
 801087a:	e088      	b.n	801098e <_strtod_l+0x662>
 801087c:	2201      	movs	r2, #1
 801087e:	4214      	tst	r4, r2
 8010880:	d004      	beq.n	801088c <_strtod_l+0x560>
 8010882:	682a      	ldr	r2, [r5, #0]
 8010884:	686b      	ldr	r3, [r5, #4]
 8010886:	f7f1 fd25 	bl	80022d4 <__aeabi_dmul>
 801088a:	2301      	movs	r3, #1
 801088c:	9a07      	ldr	r2, [sp, #28]
 801088e:	1064      	asrs	r4, r4, #1
 8010890:	3201      	adds	r2, #1
 8010892:	9207      	str	r2, [sp, #28]
 8010894:	3508      	adds	r5, #8
 8010896:	e7d0      	b.n	801083a <_strtod_l+0x50e>
 8010898:	23d4      	movs	r3, #212	; 0xd4
 801089a:	049b      	lsls	r3, r3, #18
 801089c:	18cf      	adds	r7, r1, r3
 801089e:	e7ea      	b.n	8010876 <_strtod_l+0x54a>
 80108a0:	2c00      	cmp	r4, #0
 80108a2:	d0e8      	beq.n	8010876 <_strtod_l+0x54a>
 80108a4:	4264      	negs	r4, r4
 80108a6:	230f      	movs	r3, #15
 80108a8:	0022      	movs	r2, r4
 80108aa:	401a      	ands	r2, r3
 80108ac:	421c      	tst	r4, r3
 80108ae:	d00a      	beq.n	80108c6 <_strtod_l+0x59a>
 80108b0:	4b15      	ldr	r3, [pc, #84]	; (8010908 <_strtod_l+0x5dc>)
 80108b2:	00d2      	lsls	r2, r2, #3
 80108b4:	189b      	adds	r3, r3, r2
 80108b6:	0030      	movs	r0, r6
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	0039      	movs	r1, r7
 80108be:	f7f1 f90f 	bl	8001ae0 <__aeabi_ddiv>
 80108c2:	0006      	movs	r6, r0
 80108c4:	000f      	movs	r7, r1
 80108c6:	1124      	asrs	r4, r4, #4
 80108c8:	d0d5      	beq.n	8010876 <_strtod_l+0x54a>
 80108ca:	2c1f      	cmp	r4, #31
 80108cc:	dd28      	ble.n	8010920 <_strtod_l+0x5f4>
 80108ce:	2300      	movs	r3, #0
 80108d0:	9305      	str	r3, [sp, #20]
 80108d2:	9306      	str	r3, [sp, #24]
 80108d4:	930d      	str	r3, [sp, #52]	; 0x34
 80108d6:	9308      	str	r3, [sp, #32]
 80108d8:	2322      	movs	r3, #34	; 0x22
 80108da:	9a04      	ldr	r2, [sp, #16]
 80108dc:	2600      	movs	r6, #0
 80108de:	6013      	str	r3, [r2, #0]
 80108e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108e2:	2700      	movs	r7, #0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d18d      	bne.n	8010804 <_strtod_l+0x4d8>
 80108e8:	e55b      	b.n	80103a2 <_strtod_l+0x76>
 80108ea:	46c0      	nop			; (mov r8, r8)
 80108ec:	00004e1f 	.word	0x00004e1f
 80108f0:	08017516 	.word	0x08017516
 80108f4:	080173c8 	.word	0x080173c8
 80108f8:	7ff00000 	.word	0x7ff00000
 80108fc:	0801750e 	.word	0x0801750e
 8010900:	080175fa 	.word	0x080175fa
 8010904:	080175f6 	.word	0x080175f6
 8010908:	08017750 	.word	0x08017750
 801090c:	08017728 	.word	0x08017728
 8010910:	fcb00000 	.word	0xfcb00000
 8010914:	7ca00000 	.word	0x7ca00000
 8010918:	7c900000 	.word	0x7c900000
 801091c:	7fefffff 	.word	0x7fefffff
 8010920:	2310      	movs	r3, #16
 8010922:	0022      	movs	r2, r4
 8010924:	401a      	ands	r2, r3
 8010926:	9207      	str	r2, [sp, #28]
 8010928:	421c      	tst	r4, r3
 801092a:	d001      	beq.n	8010930 <_strtod_l+0x604>
 801092c:	335a      	adds	r3, #90	; 0x5a
 801092e:	9307      	str	r3, [sp, #28]
 8010930:	0030      	movs	r0, r6
 8010932:	0039      	movs	r1, r7
 8010934:	2300      	movs	r3, #0
 8010936:	4dc4      	ldr	r5, [pc, #784]	; (8010c48 <_strtod_l+0x91c>)
 8010938:	2201      	movs	r2, #1
 801093a:	4214      	tst	r4, r2
 801093c:	d004      	beq.n	8010948 <_strtod_l+0x61c>
 801093e:	682a      	ldr	r2, [r5, #0]
 8010940:	686b      	ldr	r3, [r5, #4]
 8010942:	f7f1 fcc7 	bl	80022d4 <__aeabi_dmul>
 8010946:	2301      	movs	r3, #1
 8010948:	1064      	asrs	r4, r4, #1
 801094a:	3508      	adds	r5, #8
 801094c:	2c00      	cmp	r4, #0
 801094e:	d1f3      	bne.n	8010938 <_strtod_l+0x60c>
 8010950:	2b00      	cmp	r3, #0
 8010952:	d001      	beq.n	8010958 <_strtod_l+0x62c>
 8010954:	0006      	movs	r6, r0
 8010956:	000f      	movs	r7, r1
 8010958:	9b07      	ldr	r3, [sp, #28]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00f      	beq.n	801097e <_strtod_l+0x652>
 801095e:	236b      	movs	r3, #107	; 0x6b
 8010960:	007a      	lsls	r2, r7, #1
 8010962:	0d52      	lsrs	r2, r2, #21
 8010964:	0039      	movs	r1, r7
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	2b00      	cmp	r3, #0
 801096a:	dd08      	ble.n	801097e <_strtod_l+0x652>
 801096c:	2b1f      	cmp	r3, #31
 801096e:	dc00      	bgt.n	8010972 <_strtod_l+0x646>
 8010970:	e121      	b.n	8010bb6 <_strtod_l+0x88a>
 8010972:	2600      	movs	r6, #0
 8010974:	2b34      	cmp	r3, #52	; 0x34
 8010976:	dc00      	bgt.n	801097a <_strtod_l+0x64e>
 8010978:	e116      	b.n	8010ba8 <_strtod_l+0x87c>
 801097a:	27dc      	movs	r7, #220	; 0xdc
 801097c:	04bf      	lsls	r7, r7, #18
 801097e:	2200      	movs	r2, #0
 8010980:	2300      	movs	r3, #0
 8010982:	0030      	movs	r0, r6
 8010984:	0039      	movs	r1, r7
 8010986:	f7ef fd61 	bl	800044c <__aeabi_dcmpeq>
 801098a:	2800      	cmp	r0, #0
 801098c:	d19f      	bne.n	80108ce <_strtod_l+0x5a2>
 801098e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010990:	9a08      	ldr	r2, [sp, #32]
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010996:	9b05      	ldr	r3, [sp, #20]
 8010998:	9804      	ldr	r0, [sp, #16]
 801099a:	f003 f82f 	bl	80139fc <__s2b>
 801099e:	900d      	str	r0, [sp, #52]	; 0x34
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d100      	bne.n	80109a6 <_strtod_l+0x67a>
 80109a4:	e720      	b.n	80107e8 <_strtod_l+0x4bc>
 80109a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109a8:	9906      	ldr	r1, [sp, #24]
 80109aa:	17da      	asrs	r2, r3, #31
 80109ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109ae:	1a5b      	subs	r3, r3, r1
 80109b0:	401a      	ands	r2, r3
 80109b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b4:	9215      	str	r2, [sp, #84]	; 0x54
 80109b6:	43db      	mvns	r3, r3
 80109b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109ba:	17db      	asrs	r3, r3, #31
 80109bc:	401a      	ands	r2, r3
 80109be:	2300      	movs	r3, #0
 80109c0:	9218      	str	r2, [sp, #96]	; 0x60
 80109c2:	9305      	str	r3, [sp, #20]
 80109c4:	9306      	str	r3, [sp, #24]
 80109c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109c8:	9804      	ldr	r0, [sp, #16]
 80109ca:	6859      	ldr	r1, [r3, #4]
 80109cc:	f002 ff6a 	bl	80138a4 <_Balloc>
 80109d0:	9008      	str	r0, [sp, #32]
 80109d2:	2800      	cmp	r0, #0
 80109d4:	d100      	bne.n	80109d8 <_strtod_l+0x6ac>
 80109d6:	e70c      	b.n	80107f2 <_strtod_l+0x4c6>
 80109d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109da:	300c      	adds	r0, #12
 80109dc:	0019      	movs	r1, r3
 80109de:	691a      	ldr	r2, [r3, #16]
 80109e0:	310c      	adds	r1, #12
 80109e2:	3202      	adds	r2, #2
 80109e4:	0092      	lsls	r2, r2, #2
 80109e6:	f001 fcd5 	bl	8012394 <memcpy>
 80109ea:	ab1e      	add	r3, sp, #120	; 0x78
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	ab1d      	add	r3, sp, #116	; 0x74
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	0032      	movs	r2, r6
 80109f4:	003b      	movs	r3, r7
 80109f6:	9804      	ldr	r0, [sp, #16]
 80109f8:	9610      	str	r6, [sp, #64]	; 0x40
 80109fa:	9711      	str	r7, [sp, #68]	; 0x44
 80109fc:	f003 fb40 	bl	8014080 <__d2b>
 8010a00:	901c      	str	r0, [sp, #112]	; 0x70
 8010a02:	2800      	cmp	r0, #0
 8010a04:	d100      	bne.n	8010a08 <_strtod_l+0x6dc>
 8010a06:	e6f4      	b.n	80107f2 <_strtod_l+0x4c6>
 8010a08:	2101      	movs	r1, #1
 8010a0a:	9804      	ldr	r0, [sp, #16]
 8010a0c:	f003 f88a 	bl	8013b24 <__i2b>
 8010a10:	9006      	str	r0, [sp, #24]
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d100      	bne.n	8010a18 <_strtod_l+0x6ec>
 8010a16:	e6ec      	b.n	80107f2 <_strtod_l+0x4c6>
 8010a18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a1c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010a1e:	1ad4      	subs	r4, r2, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	db01      	blt.n	8010a28 <_strtod_l+0x6fc>
 8010a24:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8010a26:	195d      	adds	r5, r3, r5
 8010a28:	9907      	ldr	r1, [sp, #28]
 8010a2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010a2c:	1a5b      	subs	r3, r3, r1
 8010a2e:	2136      	movs	r1, #54	; 0x36
 8010a30:	189b      	adds	r3, r3, r2
 8010a32:	1a8a      	subs	r2, r1, r2
 8010a34:	4985      	ldr	r1, [pc, #532]	; (8010c4c <_strtod_l+0x920>)
 8010a36:	2001      	movs	r0, #1
 8010a38:	468c      	mov	ip, r1
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	9114      	str	r1, [sp, #80]	; 0x50
 8010a40:	9012      	str	r0, [sp, #72]	; 0x48
 8010a42:	4563      	cmp	r3, ip
 8010a44:	da07      	bge.n	8010a56 <_strtod_l+0x72a>
 8010a46:	4661      	mov	r1, ip
 8010a48:	1ac9      	subs	r1, r1, r3
 8010a4a:	1a52      	subs	r2, r2, r1
 8010a4c:	291f      	cmp	r1, #31
 8010a4e:	dd00      	ble.n	8010a52 <_strtod_l+0x726>
 8010a50:	e0b6      	b.n	8010bc0 <_strtod_l+0x894>
 8010a52:	4088      	lsls	r0, r1
 8010a54:	9012      	str	r0, [sp, #72]	; 0x48
 8010a56:	18ab      	adds	r3, r5, r2
 8010a58:	930c      	str	r3, [sp, #48]	; 0x30
 8010a5a:	18a4      	adds	r4, r4, r2
 8010a5c:	9b07      	ldr	r3, [sp, #28]
 8010a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a60:	191c      	adds	r4, r3, r4
 8010a62:	002b      	movs	r3, r5
 8010a64:	4295      	cmp	r5, r2
 8010a66:	dd00      	ble.n	8010a6a <_strtod_l+0x73e>
 8010a68:	0013      	movs	r3, r2
 8010a6a:	42a3      	cmp	r3, r4
 8010a6c:	dd00      	ble.n	8010a70 <_strtod_l+0x744>
 8010a6e:	0023      	movs	r3, r4
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	dd04      	ble.n	8010a7e <_strtod_l+0x752>
 8010a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a76:	1ae4      	subs	r4, r4, r3
 8010a78:	1ad2      	subs	r2, r2, r3
 8010a7a:	920c      	str	r2, [sp, #48]	; 0x30
 8010a7c:	1aed      	subs	r5, r5, r3
 8010a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	dd17      	ble.n	8010ab4 <_strtod_l+0x788>
 8010a84:	001a      	movs	r2, r3
 8010a86:	9906      	ldr	r1, [sp, #24]
 8010a88:	9804      	ldr	r0, [sp, #16]
 8010a8a:	f003 f913 	bl	8013cb4 <__pow5mult>
 8010a8e:	9006      	str	r0, [sp, #24]
 8010a90:	2800      	cmp	r0, #0
 8010a92:	d100      	bne.n	8010a96 <_strtod_l+0x76a>
 8010a94:	e6ad      	b.n	80107f2 <_strtod_l+0x4c6>
 8010a96:	0001      	movs	r1, r0
 8010a98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010a9a:	9804      	ldr	r0, [sp, #16]
 8010a9c:	f003 f85a 	bl	8013b54 <__multiply>
 8010aa0:	900e      	str	r0, [sp, #56]	; 0x38
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	d100      	bne.n	8010aa8 <_strtod_l+0x77c>
 8010aa6:	e6a4      	b.n	80107f2 <_strtod_l+0x4c6>
 8010aa8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010aaa:	9804      	ldr	r0, [sp, #16]
 8010aac:	f002 ff3e 	bl	801392c <_Bfree>
 8010ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ab2:	931c      	str	r3, [sp, #112]	; 0x70
 8010ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dd00      	ble.n	8010abc <_strtod_l+0x790>
 8010aba:	e087      	b.n	8010bcc <_strtod_l+0x8a0>
 8010abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	dd08      	ble.n	8010ad4 <_strtod_l+0x7a8>
 8010ac2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010ac4:	9908      	ldr	r1, [sp, #32]
 8010ac6:	9804      	ldr	r0, [sp, #16]
 8010ac8:	f003 f8f4 	bl	8013cb4 <__pow5mult>
 8010acc:	9008      	str	r0, [sp, #32]
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d100      	bne.n	8010ad4 <_strtod_l+0x7a8>
 8010ad2:	e68e      	b.n	80107f2 <_strtod_l+0x4c6>
 8010ad4:	2c00      	cmp	r4, #0
 8010ad6:	dd08      	ble.n	8010aea <_strtod_l+0x7be>
 8010ad8:	0022      	movs	r2, r4
 8010ada:	9908      	ldr	r1, [sp, #32]
 8010adc:	9804      	ldr	r0, [sp, #16]
 8010ade:	f003 f945 	bl	8013d6c <__lshift>
 8010ae2:	9008      	str	r0, [sp, #32]
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d100      	bne.n	8010aea <_strtod_l+0x7be>
 8010ae8:	e683      	b.n	80107f2 <_strtod_l+0x4c6>
 8010aea:	2d00      	cmp	r5, #0
 8010aec:	dd08      	ble.n	8010b00 <_strtod_l+0x7d4>
 8010aee:	002a      	movs	r2, r5
 8010af0:	9906      	ldr	r1, [sp, #24]
 8010af2:	9804      	ldr	r0, [sp, #16]
 8010af4:	f003 f93a 	bl	8013d6c <__lshift>
 8010af8:	9006      	str	r0, [sp, #24]
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d100      	bne.n	8010b00 <_strtod_l+0x7d4>
 8010afe:	e678      	b.n	80107f2 <_strtod_l+0x4c6>
 8010b00:	9a08      	ldr	r2, [sp, #32]
 8010b02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010b04:	9804      	ldr	r0, [sp, #16]
 8010b06:	f003 f9bb 	bl	8013e80 <__mdiff>
 8010b0a:	9005      	str	r0, [sp, #20]
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	d100      	bne.n	8010b12 <_strtod_l+0x7e6>
 8010b10:	e66f      	b.n	80107f2 <_strtod_l+0x4c6>
 8010b12:	2200      	movs	r2, #0
 8010b14:	68c3      	ldr	r3, [r0, #12]
 8010b16:	9906      	ldr	r1, [sp, #24]
 8010b18:	60c2      	str	r2, [r0, #12]
 8010b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8010b1c:	f003 f994 	bl	8013e48 <__mcmp>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	da5d      	bge.n	8010be0 <_strtod_l+0x8b4>
 8010b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b26:	4333      	orrs	r3, r6
 8010b28:	d000      	beq.n	8010b2c <_strtod_l+0x800>
 8010b2a:	e088      	b.n	8010c3e <_strtod_l+0x912>
 8010b2c:	033b      	lsls	r3, r7, #12
 8010b2e:	d000      	beq.n	8010b32 <_strtod_l+0x806>
 8010b30:	e085      	b.n	8010c3e <_strtod_l+0x912>
 8010b32:	22d6      	movs	r2, #214	; 0xd6
 8010b34:	4b46      	ldr	r3, [pc, #280]	; (8010c50 <_strtod_l+0x924>)
 8010b36:	04d2      	lsls	r2, r2, #19
 8010b38:	403b      	ands	r3, r7
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d97f      	bls.n	8010c3e <_strtod_l+0x912>
 8010b3e:	9b05      	ldr	r3, [sp, #20]
 8010b40:	695b      	ldr	r3, [r3, #20]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d103      	bne.n	8010b4e <_strtod_l+0x822>
 8010b46:	9b05      	ldr	r3, [sp, #20]
 8010b48:	691b      	ldr	r3, [r3, #16]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	dd77      	ble.n	8010c3e <_strtod_l+0x912>
 8010b4e:	9905      	ldr	r1, [sp, #20]
 8010b50:	2201      	movs	r2, #1
 8010b52:	9804      	ldr	r0, [sp, #16]
 8010b54:	f003 f90a 	bl	8013d6c <__lshift>
 8010b58:	9906      	ldr	r1, [sp, #24]
 8010b5a:	9005      	str	r0, [sp, #20]
 8010b5c:	f003 f974 	bl	8013e48 <__mcmp>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	dd6c      	ble.n	8010c3e <_strtod_l+0x912>
 8010b64:	9907      	ldr	r1, [sp, #28]
 8010b66:	003b      	movs	r3, r7
 8010b68:	4a39      	ldr	r2, [pc, #228]	; (8010c50 <_strtod_l+0x924>)
 8010b6a:	2900      	cmp	r1, #0
 8010b6c:	d100      	bne.n	8010b70 <_strtod_l+0x844>
 8010b6e:	e094      	b.n	8010c9a <_strtod_l+0x96e>
 8010b70:	0011      	movs	r1, r2
 8010b72:	20d6      	movs	r0, #214	; 0xd6
 8010b74:	4039      	ands	r1, r7
 8010b76:	04c0      	lsls	r0, r0, #19
 8010b78:	4281      	cmp	r1, r0
 8010b7a:	dd00      	ble.n	8010b7e <_strtod_l+0x852>
 8010b7c:	e08d      	b.n	8010c9a <_strtod_l+0x96e>
 8010b7e:	23dc      	movs	r3, #220	; 0xdc
 8010b80:	049b      	lsls	r3, r3, #18
 8010b82:	4299      	cmp	r1, r3
 8010b84:	dc00      	bgt.n	8010b88 <_strtod_l+0x85c>
 8010b86:	e6a7      	b.n	80108d8 <_strtod_l+0x5ac>
 8010b88:	0030      	movs	r0, r6
 8010b8a:	0039      	movs	r1, r7
 8010b8c:	4b31      	ldr	r3, [pc, #196]	; (8010c54 <_strtod_l+0x928>)
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f7f1 fba0 	bl	80022d4 <__aeabi_dmul>
 8010b94:	4b2e      	ldr	r3, [pc, #184]	; (8010c50 <_strtod_l+0x924>)
 8010b96:	0006      	movs	r6, r0
 8010b98:	000f      	movs	r7, r1
 8010b9a:	420b      	tst	r3, r1
 8010b9c:	d000      	beq.n	8010ba0 <_strtod_l+0x874>
 8010b9e:	e631      	b.n	8010804 <_strtod_l+0x4d8>
 8010ba0:	2322      	movs	r3, #34	; 0x22
 8010ba2:	9a04      	ldr	r2, [sp, #16]
 8010ba4:	6013      	str	r3, [r2, #0]
 8010ba6:	e62d      	b.n	8010804 <_strtod_l+0x4d8>
 8010ba8:	234b      	movs	r3, #75	; 0x4b
 8010baa:	1a9a      	subs	r2, r3, r2
 8010bac:	3b4c      	subs	r3, #76	; 0x4c
 8010bae:	4093      	lsls	r3, r2
 8010bb0:	4019      	ands	r1, r3
 8010bb2:	000f      	movs	r7, r1
 8010bb4:	e6e3      	b.n	801097e <_strtod_l+0x652>
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	4252      	negs	r2, r2
 8010bba:	409a      	lsls	r2, r3
 8010bbc:	4016      	ands	r6, r2
 8010bbe:	e6de      	b.n	801097e <_strtod_l+0x652>
 8010bc0:	4925      	ldr	r1, [pc, #148]	; (8010c58 <_strtod_l+0x92c>)
 8010bc2:	1acb      	subs	r3, r1, r3
 8010bc4:	0001      	movs	r1, r0
 8010bc6:	4099      	lsls	r1, r3
 8010bc8:	9114      	str	r1, [sp, #80]	; 0x50
 8010bca:	e743      	b.n	8010a54 <_strtod_l+0x728>
 8010bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010bd0:	9804      	ldr	r0, [sp, #16]
 8010bd2:	f003 f8cb 	bl	8013d6c <__lshift>
 8010bd6:	901c      	str	r0, [sp, #112]	; 0x70
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d000      	beq.n	8010bde <_strtod_l+0x8b2>
 8010bdc:	e76e      	b.n	8010abc <_strtod_l+0x790>
 8010bde:	e608      	b.n	80107f2 <_strtod_l+0x4c6>
 8010be0:	970e      	str	r7, [sp, #56]	; 0x38
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d177      	bne.n	8010cd6 <_strtod_l+0x9aa>
 8010be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010be8:	033b      	lsls	r3, r7, #12
 8010bea:	0b1b      	lsrs	r3, r3, #12
 8010bec:	2a00      	cmp	r2, #0
 8010bee:	d039      	beq.n	8010c64 <_strtod_l+0x938>
 8010bf0:	4a1a      	ldr	r2, [pc, #104]	; (8010c5c <_strtod_l+0x930>)
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d139      	bne.n	8010c6a <_strtod_l+0x93e>
 8010bf6:	2101      	movs	r1, #1
 8010bf8:	9b07      	ldr	r3, [sp, #28]
 8010bfa:	4249      	negs	r1, r1
 8010bfc:	0032      	movs	r2, r6
 8010bfe:	0008      	movs	r0, r1
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00b      	beq.n	8010c1c <_strtod_l+0x8f0>
 8010c04:	24d4      	movs	r4, #212	; 0xd4
 8010c06:	4b12      	ldr	r3, [pc, #72]	; (8010c50 <_strtod_l+0x924>)
 8010c08:	0008      	movs	r0, r1
 8010c0a:	403b      	ands	r3, r7
 8010c0c:	04e4      	lsls	r4, r4, #19
 8010c0e:	42a3      	cmp	r3, r4
 8010c10:	d804      	bhi.n	8010c1c <_strtod_l+0x8f0>
 8010c12:	306c      	adds	r0, #108	; 0x6c
 8010c14:	0d1b      	lsrs	r3, r3, #20
 8010c16:	1ac3      	subs	r3, r0, r3
 8010c18:	4099      	lsls	r1, r3
 8010c1a:	0008      	movs	r0, r1
 8010c1c:	4282      	cmp	r2, r0
 8010c1e:	d124      	bne.n	8010c6a <_strtod_l+0x93e>
 8010c20:	4b0f      	ldr	r3, [pc, #60]	; (8010c60 <_strtod_l+0x934>)
 8010c22:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010c24:	4299      	cmp	r1, r3
 8010c26:	d102      	bne.n	8010c2e <_strtod_l+0x902>
 8010c28:	3201      	adds	r2, #1
 8010c2a:	d100      	bne.n	8010c2e <_strtod_l+0x902>
 8010c2c:	e5e1      	b.n	80107f2 <_strtod_l+0x4c6>
 8010c2e:	4b08      	ldr	r3, [pc, #32]	; (8010c50 <_strtod_l+0x924>)
 8010c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c32:	2600      	movs	r6, #0
 8010c34:	401a      	ands	r2, r3
 8010c36:	0013      	movs	r3, r2
 8010c38:	2280      	movs	r2, #128	; 0x80
 8010c3a:	0352      	lsls	r2, r2, #13
 8010c3c:	189f      	adds	r7, r3, r2
 8010c3e:	9b07      	ldr	r3, [sp, #28]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1a1      	bne.n	8010b88 <_strtod_l+0x85c>
 8010c44:	e5de      	b.n	8010804 <_strtod_l+0x4d8>
 8010c46:	46c0      	nop			; (mov r8, r8)
 8010c48:	080173e0 	.word	0x080173e0
 8010c4c:	fffffc02 	.word	0xfffffc02
 8010c50:	7ff00000 	.word	0x7ff00000
 8010c54:	39500000 	.word	0x39500000
 8010c58:	fffffbe2 	.word	0xfffffbe2
 8010c5c:	000fffff 	.word	0x000fffff
 8010c60:	7fefffff 	.word	0x7fefffff
 8010c64:	4333      	orrs	r3, r6
 8010c66:	d100      	bne.n	8010c6a <_strtod_l+0x93e>
 8010c68:	e77c      	b.n	8010b64 <_strtod_l+0x838>
 8010c6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d01d      	beq.n	8010cac <_strtod_l+0x980>
 8010c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c74:	4213      	tst	r3, r2
 8010c76:	d0e2      	beq.n	8010c3e <_strtod_l+0x912>
 8010c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c7a:	0030      	movs	r0, r6
 8010c7c:	0039      	movs	r1, r7
 8010c7e:	9a07      	ldr	r2, [sp, #28]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d017      	beq.n	8010cb4 <_strtod_l+0x988>
 8010c84:	f7ff fb3a 	bl	80102fc <sulp>
 8010c88:	0002      	movs	r2, r0
 8010c8a:	000b      	movs	r3, r1
 8010c8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010c8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010c90:	f7f0 fbc6 	bl	8001420 <__aeabi_dadd>
 8010c94:	0006      	movs	r6, r0
 8010c96:	000f      	movs	r7, r1
 8010c98:	e7d1      	b.n	8010c3e <_strtod_l+0x912>
 8010c9a:	2601      	movs	r6, #1
 8010c9c:	4013      	ands	r3, r2
 8010c9e:	4a98      	ldr	r2, [pc, #608]	; (8010f00 <_strtod_l+0xbd4>)
 8010ca0:	4276      	negs	r6, r6
 8010ca2:	189b      	adds	r3, r3, r2
 8010ca4:	4a97      	ldr	r2, [pc, #604]	; (8010f04 <_strtod_l+0xbd8>)
 8010ca6:	431a      	orrs	r2, r3
 8010ca8:	0017      	movs	r7, r2
 8010caa:	e7c8      	b.n	8010c3e <_strtod_l+0x912>
 8010cac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010cae:	4233      	tst	r3, r6
 8010cb0:	d0c5      	beq.n	8010c3e <_strtod_l+0x912>
 8010cb2:	e7e1      	b.n	8010c78 <_strtod_l+0x94c>
 8010cb4:	f7ff fb22 	bl	80102fc <sulp>
 8010cb8:	0002      	movs	r2, r0
 8010cba:	000b      	movs	r3, r1
 8010cbc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010cbe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010cc0:	f7f1 fdca 	bl	8002858 <__aeabi_dsub>
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	0006      	movs	r6, r0
 8010cca:	000f      	movs	r7, r1
 8010ccc:	f7ef fbbe 	bl	800044c <__aeabi_dcmpeq>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d0b4      	beq.n	8010c3e <_strtod_l+0x912>
 8010cd4:	e600      	b.n	80108d8 <_strtod_l+0x5ac>
 8010cd6:	9906      	ldr	r1, [sp, #24]
 8010cd8:	9805      	ldr	r0, [sp, #20]
 8010cda:	f003 fa31 	bl	8014140 <__ratio>
 8010cde:	2380      	movs	r3, #128	; 0x80
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	05db      	lsls	r3, r3, #23
 8010ce4:	0004      	movs	r4, r0
 8010ce6:	000d      	movs	r5, r1
 8010ce8:	f7ef fbc0 	bl	800046c <__aeabi_dcmple>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	d06d      	beq.n	8010dcc <_strtod_l+0xaa0>
 8010cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d000      	beq.n	8010cf8 <_strtod_l+0x9cc>
 8010cf6:	e07e      	b.n	8010df6 <_strtod_l+0xaca>
 8010cf8:	2e00      	cmp	r6, #0
 8010cfa:	d158      	bne.n	8010dae <_strtod_l+0xa82>
 8010cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cfe:	031b      	lsls	r3, r3, #12
 8010d00:	d000      	beq.n	8010d04 <_strtod_l+0x9d8>
 8010d02:	e07f      	b.n	8010e04 <_strtod_l+0xad8>
 8010d04:	2200      	movs	r2, #0
 8010d06:	0020      	movs	r0, r4
 8010d08:	0029      	movs	r1, r5
 8010d0a:	4b7f      	ldr	r3, [pc, #508]	; (8010f08 <_strtod_l+0xbdc>)
 8010d0c:	f7ef fba4 	bl	8000458 <__aeabi_dcmplt>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	d158      	bne.n	8010dc6 <_strtod_l+0xa9a>
 8010d14:	0020      	movs	r0, r4
 8010d16:	0029      	movs	r1, r5
 8010d18:	2200      	movs	r2, #0
 8010d1a:	4b7c      	ldr	r3, [pc, #496]	; (8010f0c <_strtod_l+0xbe0>)
 8010d1c:	f7f1 fada 	bl	80022d4 <__aeabi_dmul>
 8010d20:	0004      	movs	r4, r0
 8010d22:	000d      	movs	r5, r1
 8010d24:	2380      	movs	r3, #128	; 0x80
 8010d26:	061b      	lsls	r3, r3, #24
 8010d28:	940a      	str	r4, [sp, #40]	; 0x28
 8010d2a:	18eb      	adds	r3, r5, r3
 8010d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d32:	9212      	str	r2, [sp, #72]	; 0x48
 8010d34:	9313      	str	r3, [sp, #76]	; 0x4c
 8010d36:	4a76      	ldr	r2, [pc, #472]	; (8010f10 <_strtod_l+0xbe4>)
 8010d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d3a:	4013      	ands	r3, r2
 8010d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8010d3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d40:	4b74      	ldr	r3, [pc, #464]	; (8010f14 <_strtod_l+0xbe8>)
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d000      	beq.n	8010d48 <_strtod_l+0xa1c>
 8010d46:	e091      	b.n	8010e6c <_strtod_l+0xb40>
 8010d48:	4a73      	ldr	r2, [pc, #460]	; (8010f18 <_strtod_l+0xbec>)
 8010d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d4c:	4694      	mov	ip, r2
 8010d4e:	4463      	add	r3, ip
 8010d50:	001f      	movs	r7, r3
 8010d52:	0030      	movs	r0, r6
 8010d54:	0019      	movs	r1, r3
 8010d56:	f003 f92b 	bl	8013fb0 <__ulp>
 8010d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d5e:	f7f1 fab9 	bl	80022d4 <__aeabi_dmul>
 8010d62:	0032      	movs	r2, r6
 8010d64:	003b      	movs	r3, r7
 8010d66:	f7f0 fb5b 	bl	8001420 <__aeabi_dadd>
 8010d6a:	4a69      	ldr	r2, [pc, #420]	; (8010f10 <_strtod_l+0xbe4>)
 8010d6c:	4b6b      	ldr	r3, [pc, #428]	; (8010f1c <_strtod_l+0xbf0>)
 8010d6e:	0006      	movs	r6, r0
 8010d70:	400a      	ands	r2, r1
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d949      	bls.n	8010e0a <_strtod_l+0xade>
 8010d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d78:	4b69      	ldr	r3, [pc, #420]	; (8010f20 <_strtod_l+0xbf4>)
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d103      	bne.n	8010d86 <_strtod_l+0xa5a>
 8010d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d80:	3301      	adds	r3, #1
 8010d82:	d100      	bne.n	8010d86 <_strtod_l+0xa5a>
 8010d84:	e535      	b.n	80107f2 <_strtod_l+0x4c6>
 8010d86:	2601      	movs	r6, #1
 8010d88:	4f65      	ldr	r7, [pc, #404]	; (8010f20 <_strtod_l+0xbf4>)
 8010d8a:	4276      	negs	r6, r6
 8010d8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010d8e:	9804      	ldr	r0, [sp, #16]
 8010d90:	f002 fdcc 	bl	801392c <_Bfree>
 8010d94:	9908      	ldr	r1, [sp, #32]
 8010d96:	9804      	ldr	r0, [sp, #16]
 8010d98:	f002 fdc8 	bl	801392c <_Bfree>
 8010d9c:	9906      	ldr	r1, [sp, #24]
 8010d9e:	9804      	ldr	r0, [sp, #16]
 8010da0:	f002 fdc4 	bl	801392c <_Bfree>
 8010da4:	9905      	ldr	r1, [sp, #20]
 8010da6:	9804      	ldr	r0, [sp, #16]
 8010da8:	f002 fdc0 	bl	801392c <_Bfree>
 8010dac:	e60b      	b.n	80109c6 <_strtod_l+0x69a>
 8010dae:	2e01      	cmp	r6, #1
 8010db0:	d103      	bne.n	8010dba <_strtod_l+0xa8e>
 8010db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d100      	bne.n	8010dba <_strtod_l+0xa8e>
 8010db8:	e58e      	b.n	80108d8 <_strtod_l+0x5ac>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	4c59      	ldr	r4, [pc, #356]	; (8010f24 <_strtod_l+0xbf8>)
 8010dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8010dc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8010dc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010dc4:	e01c      	b.n	8010e00 <_strtod_l+0xad4>
 8010dc6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010dc8:	4d50      	ldr	r5, [pc, #320]	; (8010f0c <_strtod_l+0xbe0>)
 8010dca:	e7ab      	b.n	8010d24 <_strtod_l+0x9f8>
 8010dcc:	2200      	movs	r2, #0
 8010dce:	0020      	movs	r0, r4
 8010dd0:	0029      	movs	r1, r5
 8010dd2:	4b4e      	ldr	r3, [pc, #312]	; (8010f0c <_strtod_l+0xbe0>)
 8010dd4:	f7f1 fa7e 	bl	80022d4 <__aeabi_dmul>
 8010dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dda:	0004      	movs	r4, r0
 8010ddc:	000b      	movs	r3, r1
 8010dde:	000d      	movs	r5, r1
 8010de0:	2a00      	cmp	r2, #0
 8010de2:	d104      	bne.n	8010dee <_strtod_l+0xac2>
 8010de4:	2280      	movs	r2, #128	; 0x80
 8010de6:	0612      	lsls	r2, r2, #24
 8010de8:	900a      	str	r0, [sp, #40]	; 0x28
 8010dea:	188b      	adds	r3, r1, r2
 8010dec:	e79e      	b.n	8010d2c <_strtod_l+0xa00>
 8010dee:	0002      	movs	r2, r0
 8010df0:	920a      	str	r2, [sp, #40]	; 0x28
 8010df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010df4:	e79b      	b.n	8010d2e <_strtod_l+0xa02>
 8010df6:	2300      	movs	r3, #0
 8010df8:	4c43      	ldr	r4, [pc, #268]	; (8010f08 <_strtod_l+0xbdc>)
 8010dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8010dfc:	940b      	str	r4, [sp, #44]	; 0x2c
 8010dfe:	2400      	movs	r4, #0
 8010e00:	4d41      	ldr	r5, [pc, #260]	; (8010f08 <_strtod_l+0xbdc>)
 8010e02:	e794      	b.n	8010d2e <_strtod_l+0xa02>
 8010e04:	2300      	movs	r3, #0
 8010e06:	4c47      	ldr	r4, [pc, #284]	; (8010f24 <_strtod_l+0xbf8>)
 8010e08:	e7f7      	b.n	8010dfa <_strtod_l+0xace>
 8010e0a:	23d4      	movs	r3, #212	; 0xd4
 8010e0c:	049b      	lsls	r3, r3, #18
 8010e0e:	18cf      	adds	r7, r1, r3
 8010e10:	9b07      	ldr	r3, [sp, #28]
 8010e12:	970e      	str	r7, [sp, #56]	; 0x38
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d1b9      	bne.n	8010d8c <_strtod_l+0xa60>
 8010e18:	4b3d      	ldr	r3, [pc, #244]	; (8010f10 <_strtod_l+0xbe4>)
 8010e1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e1c:	403b      	ands	r3, r7
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d1b4      	bne.n	8010d8c <_strtod_l+0xa60>
 8010e22:	0020      	movs	r0, r4
 8010e24:	0029      	movs	r1, r5
 8010e26:	f7ef fb97 	bl	8000558 <__aeabi_d2lz>
 8010e2a:	f7ef fbd1 	bl	80005d0 <__aeabi_l2d>
 8010e2e:	0002      	movs	r2, r0
 8010e30:	000b      	movs	r3, r1
 8010e32:	0020      	movs	r0, r4
 8010e34:	0029      	movs	r1, r5
 8010e36:	f7f1 fd0f 	bl	8002858 <__aeabi_dsub>
 8010e3a:	033b      	lsls	r3, r7, #12
 8010e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e3e:	0b1b      	lsrs	r3, r3, #12
 8010e40:	4333      	orrs	r3, r6
 8010e42:	4313      	orrs	r3, r2
 8010e44:	0004      	movs	r4, r0
 8010e46:	000d      	movs	r5, r1
 8010e48:	4a37      	ldr	r2, [pc, #220]	; (8010f28 <_strtod_l+0xbfc>)
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d054      	beq.n	8010ef8 <_strtod_l+0xbcc>
 8010e4e:	4b37      	ldr	r3, [pc, #220]	; (8010f2c <_strtod_l+0xc00>)
 8010e50:	f7ef fb02 	bl	8000458 <__aeabi_dcmplt>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	d000      	beq.n	8010e5a <_strtod_l+0xb2e>
 8010e58:	e4d4      	b.n	8010804 <_strtod_l+0x4d8>
 8010e5a:	0020      	movs	r0, r4
 8010e5c:	0029      	movs	r1, r5
 8010e5e:	4a34      	ldr	r2, [pc, #208]	; (8010f30 <_strtod_l+0xc04>)
 8010e60:	4b2a      	ldr	r3, [pc, #168]	; (8010f0c <_strtod_l+0xbe0>)
 8010e62:	f7ef fb0d 	bl	8000480 <__aeabi_dcmpgt>
 8010e66:	2800      	cmp	r0, #0
 8010e68:	d090      	beq.n	8010d8c <_strtod_l+0xa60>
 8010e6a:	e4cb      	b.n	8010804 <_strtod_l+0x4d8>
 8010e6c:	9b07      	ldr	r3, [sp, #28]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d02b      	beq.n	8010eca <_strtod_l+0xb9e>
 8010e72:	23d4      	movs	r3, #212	; 0xd4
 8010e74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e76:	04db      	lsls	r3, r3, #19
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d826      	bhi.n	8010eca <_strtod_l+0xb9e>
 8010e7c:	0020      	movs	r0, r4
 8010e7e:	0029      	movs	r1, r5
 8010e80:	4a2c      	ldr	r2, [pc, #176]	; (8010f34 <_strtod_l+0xc08>)
 8010e82:	4b2d      	ldr	r3, [pc, #180]	; (8010f38 <_strtod_l+0xc0c>)
 8010e84:	f7ef faf2 	bl	800046c <__aeabi_dcmple>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	d017      	beq.n	8010ebc <_strtod_l+0xb90>
 8010e8c:	0020      	movs	r0, r4
 8010e8e:	0029      	movs	r1, r5
 8010e90:	f7ef fb44 	bl	800051c <__aeabi_d2uiz>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d100      	bne.n	8010e9a <_strtod_l+0xb6e>
 8010e98:	3001      	adds	r0, #1
 8010e9a:	f7f2 f8e3 	bl	8003064 <__aeabi_ui2d>
 8010e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ea0:	0004      	movs	r4, r0
 8010ea2:	000b      	movs	r3, r1
 8010ea4:	000d      	movs	r5, r1
 8010ea6:	2a00      	cmp	r2, #0
 8010ea8:	d122      	bne.n	8010ef0 <_strtod_l+0xbc4>
 8010eaa:	2280      	movs	r2, #128	; 0x80
 8010eac:	0612      	lsls	r2, r2, #24
 8010eae:	188b      	adds	r3, r1, r2
 8010eb0:	9016      	str	r0, [sp, #88]	; 0x58
 8010eb2:	9317      	str	r3, [sp, #92]	; 0x5c
 8010eb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010eb8:	9212      	str	r2, [sp, #72]	; 0x48
 8010eba:	9313      	str	r3, [sp, #76]	; 0x4c
 8010ebc:	22d6      	movs	r2, #214	; 0xd6
 8010ebe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ec0:	04d2      	lsls	r2, r2, #19
 8010ec2:	189b      	adds	r3, r3, r2
 8010ec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010ec6:	1a9b      	subs	r3, r3, r2
 8010ec8:	9313      	str	r3, [sp, #76]	; 0x4c
 8010eca:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010ecc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010ece:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010ed0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8010ed2:	f003 f86d 	bl	8013fb0 <__ulp>
 8010ed6:	0002      	movs	r2, r0
 8010ed8:	000b      	movs	r3, r1
 8010eda:	0030      	movs	r0, r6
 8010edc:	0039      	movs	r1, r7
 8010ede:	f7f1 f9f9 	bl	80022d4 <__aeabi_dmul>
 8010ee2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ee6:	f7f0 fa9b 	bl	8001420 <__aeabi_dadd>
 8010eea:	0006      	movs	r6, r0
 8010eec:	000f      	movs	r7, r1
 8010eee:	e78f      	b.n	8010e10 <_strtod_l+0xae4>
 8010ef0:	0002      	movs	r2, r0
 8010ef2:	9216      	str	r2, [sp, #88]	; 0x58
 8010ef4:	9317      	str	r3, [sp, #92]	; 0x5c
 8010ef6:	e7dd      	b.n	8010eb4 <_strtod_l+0xb88>
 8010ef8:	4b10      	ldr	r3, [pc, #64]	; (8010f3c <_strtod_l+0xc10>)
 8010efa:	f7ef faad 	bl	8000458 <__aeabi_dcmplt>
 8010efe:	e7b2      	b.n	8010e66 <_strtod_l+0xb3a>
 8010f00:	fff00000 	.word	0xfff00000
 8010f04:	000fffff 	.word	0x000fffff
 8010f08:	3ff00000 	.word	0x3ff00000
 8010f0c:	3fe00000 	.word	0x3fe00000
 8010f10:	7ff00000 	.word	0x7ff00000
 8010f14:	7fe00000 	.word	0x7fe00000
 8010f18:	fcb00000 	.word	0xfcb00000
 8010f1c:	7c9fffff 	.word	0x7c9fffff
 8010f20:	7fefffff 	.word	0x7fefffff
 8010f24:	bff00000 	.word	0xbff00000
 8010f28:	94a03595 	.word	0x94a03595
 8010f2c:	3fdfffff 	.word	0x3fdfffff
 8010f30:	35afe535 	.word	0x35afe535
 8010f34:	ffc00000 	.word	0xffc00000
 8010f38:	41dfffff 	.word	0x41dfffff
 8010f3c:	3fcfffff 	.word	0x3fcfffff

08010f40 <_strtod_r>:
 8010f40:	b510      	push	{r4, lr}
 8010f42:	4b02      	ldr	r3, [pc, #8]	; (8010f4c <_strtod_r+0xc>)
 8010f44:	f7ff f9f2 	bl	801032c <_strtod_l>
 8010f48:	bd10      	pop	{r4, pc}
 8010f4a:	46c0      	nop			; (mov r8, r8)
 8010f4c:	200000fc 	.word	0x200000fc

08010f50 <strtod>:
 8010f50:	b510      	push	{r4, lr}
 8010f52:	4c04      	ldr	r4, [pc, #16]	; (8010f64 <strtod+0x14>)
 8010f54:	000a      	movs	r2, r1
 8010f56:	0001      	movs	r1, r0
 8010f58:	4b03      	ldr	r3, [pc, #12]	; (8010f68 <strtod+0x18>)
 8010f5a:	6820      	ldr	r0, [r4, #0]
 8010f5c:	f7ff f9e6 	bl	801032c <_strtod_l>
 8010f60:	bd10      	pop	{r4, pc}
 8010f62:	46c0      	nop			; (mov r8, r8)
 8010f64:	200002b4 	.word	0x200002b4
 8010f68:	200000fc 	.word	0x200000fc

08010f6c <_strtol_l.constprop.0>:
 8010f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f6e:	b087      	sub	sp, #28
 8010f70:	001e      	movs	r6, r3
 8010f72:	9005      	str	r0, [sp, #20]
 8010f74:	9101      	str	r1, [sp, #4]
 8010f76:	9202      	str	r2, [sp, #8]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d048      	beq.n	801100e <_strtol_l.constprop.0+0xa2>
 8010f7c:	000b      	movs	r3, r1
 8010f7e:	2e24      	cmp	r6, #36	; 0x24
 8010f80:	d845      	bhi.n	801100e <_strtol_l.constprop.0+0xa2>
 8010f82:	4a3b      	ldr	r2, [pc, #236]	; (8011070 <_strtol_l.constprop.0+0x104>)
 8010f84:	2108      	movs	r1, #8
 8010f86:	4694      	mov	ip, r2
 8010f88:	001a      	movs	r2, r3
 8010f8a:	4660      	mov	r0, ip
 8010f8c:	7814      	ldrb	r4, [r2, #0]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	5d00      	ldrb	r0, [r0, r4]
 8010f92:	001d      	movs	r5, r3
 8010f94:	0007      	movs	r7, r0
 8010f96:	400f      	ands	r7, r1
 8010f98:	4208      	tst	r0, r1
 8010f9a:	d1f5      	bne.n	8010f88 <_strtol_l.constprop.0+0x1c>
 8010f9c:	2c2d      	cmp	r4, #45	; 0x2d
 8010f9e:	d13d      	bne.n	801101c <_strtol_l.constprop.0+0xb0>
 8010fa0:	2701      	movs	r7, #1
 8010fa2:	781c      	ldrb	r4, [r3, #0]
 8010fa4:	1c95      	adds	r5, r2, #2
 8010fa6:	2e00      	cmp	r6, #0
 8010fa8:	d05e      	beq.n	8011068 <_strtol_l.constprop.0+0xfc>
 8010faa:	2e10      	cmp	r6, #16
 8010fac:	d109      	bne.n	8010fc2 <_strtol_l.constprop.0+0x56>
 8010fae:	2c30      	cmp	r4, #48	; 0x30
 8010fb0:	d107      	bne.n	8010fc2 <_strtol_l.constprop.0+0x56>
 8010fb2:	2220      	movs	r2, #32
 8010fb4:	782b      	ldrb	r3, [r5, #0]
 8010fb6:	4393      	bics	r3, r2
 8010fb8:	2b58      	cmp	r3, #88	; 0x58
 8010fba:	d150      	bne.n	801105e <_strtol_l.constprop.0+0xf2>
 8010fbc:	2610      	movs	r6, #16
 8010fbe:	786c      	ldrb	r4, [r5, #1]
 8010fc0:	3502      	adds	r5, #2
 8010fc2:	4b2c      	ldr	r3, [pc, #176]	; (8011074 <_strtol_l.constprop.0+0x108>)
 8010fc4:	0031      	movs	r1, r6
 8010fc6:	18fb      	adds	r3, r7, r3
 8010fc8:	0018      	movs	r0, r3
 8010fca:	9303      	str	r3, [sp, #12]
 8010fcc:	f7ef f93e 	bl	800024c <__aeabi_uidivmod>
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	9104      	str	r1, [sp, #16]
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	4684      	mov	ip, r0
 8010fd8:	0010      	movs	r0, r2
 8010fda:	4249      	negs	r1, r1
 8010fdc:	0023      	movs	r3, r4
 8010fde:	3b30      	subs	r3, #48	; 0x30
 8010fe0:	2b09      	cmp	r3, #9
 8010fe2:	d903      	bls.n	8010fec <_strtol_l.constprop.0+0x80>
 8010fe4:	3b11      	subs	r3, #17
 8010fe6:	2b19      	cmp	r3, #25
 8010fe8:	d81d      	bhi.n	8011026 <_strtol_l.constprop.0+0xba>
 8010fea:	330a      	adds	r3, #10
 8010fec:	429e      	cmp	r6, r3
 8010fee:	dd1e      	ble.n	801102e <_strtol_l.constprop.0+0xc2>
 8010ff0:	1c54      	adds	r4, r2, #1
 8010ff2:	d009      	beq.n	8011008 <_strtol_l.constprop.0+0x9c>
 8010ff4:	000a      	movs	r2, r1
 8010ff6:	4584      	cmp	ip, r0
 8010ff8:	d306      	bcc.n	8011008 <_strtol_l.constprop.0+0x9c>
 8010ffa:	d102      	bne.n	8011002 <_strtol_l.constprop.0+0x96>
 8010ffc:	9c04      	ldr	r4, [sp, #16]
 8010ffe:	429c      	cmp	r4, r3
 8011000:	db02      	blt.n	8011008 <_strtol_l.constprop.0+0x9c>
 8011002:	2201      	movs	r2, #1
 8011004:	4370      	muls	r0, r6
 8011006:	1818      	adds	r0, r3, r0
 8011008:	782c      	ldrb	r4, [r5, #0]
 801100a:	3501      	adds	r5, #1
 801100c:	e7e6      	b.n	8010fdc <_strtol_l.constprop.0+0x70>
 801100e:	f001 f981 	bl	8012314 <__errno>
 8011012:	2316      	movs	r3, #22
 8011014:	6003      	str	r3, [r0, #0]
 8011016:	2000      	movs	r0, #0
 8011018:	b007      	add	sp, #28
 801101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801101c:	2c2b      	cmp	r4, #43	; 0x2b
 801101e:	d1c2      	bne.n	8010fa6 <_strtol_l.constprop.0+0x3a>
 8011020:	781c      	ldrb	r4, [r3, #0]
 8011022:	1c95      	adds	r5, r2, #2
 8011024:	e7bf      	b.n	8010fa6 <_strtol_l.constprop.0+0x3a>
 8011026:	0023      	movs	r3, r4
 8011028:	3b61      	subs	r3, #97	; 0x61
 801102a:	2b19      	cmp	r3, #25
 801102c:	d9dd      	bls.n	8010fea <_strtol_l.constprop.0+0x7e>
 801102e:	1c53      	adds	r3, r2, #1
 8011030:	d109      	bne.n	8011046 <_strtol_l.constprop.0+0xda>
 8011032:	2322      	movs	r3, #34	; 0x22
 8011034:	9a05      	ldr	r2, [sp, #20]
 8011036:	9803      	ldr	r0, [sp, #12]
 8011038:	6013      	str	r3, [r2, #0]
 801103a:	9b02      	ldr	r3, [sp, #8]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d0eb      	beq.n	8011018 <_strtol_l.constprop.0+0xac>
 8011040:	1e6b      	subs	r3, r5, #1
 8011042:	9301      	str	r3, [sp, #4]
 8011044:	e007      	b.n	8011056 <_strtol_l.constprop.0+0xea>
 8011046:	2f00      	cmp	r7, #0
 8011048:	d000      	beq.n	801104c <_strtol_l.constprop.0+0xe0>
 801104a:	4240      	negs	r0, r0
 801104c:	9b02      	ldr	r3, [sp, #8]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d0e2      	beq.n	8011018 <_strtol_l.constprop.0+0xac>
 8011052:	2a00      	cmp	r2, #0
 8011054:	d1f4      	bne.n	8011040 <_strtol_l.constprop.0+0xd4>
 8011056:	9b02      	ldr	r3, [sp, #8]
 8011058:	9a01      	ldr	r2, [sp, #4]
 801105a:	601a      	str	r2, [r3, #0]
 801105c:	e7dc      	b.n	8011018 <_strtol_l.constprop.0+0xac>
 801105e:	2430      	movs	r4, #48	; 0x30
 8011060:	2e00      	cmp	r6, #0
 8011062:	d1ae      	bne.n	8010fc2 <_strtol_l.constprop.0+0x56>
 8011064:	3608      	adds	r6, #8
 8011066:	e7ac      	b.n	8010fc2 <_strtol_l.constprop.0+0x56>
 8011068:	2c30      	cmp	r4, #48	; 0x30
 801106a:	d0a2      	beq.n	8010fb2 <_strtol_l.constprop.0+0x46>
 801106c:	260a      	movs	r6, #10
 801106e:	e7a8      	b.n	8010fc2 <_strtol_l.constprop.0+0x56>
 8011070:	08017409 	.word	0x08017409
 8011074:	7fffffff 	.word	0x7fffffff

08011078 <_strtol_r>:
 8011078:	b510      	push	{r4, lr}
 801107a:	f7ff ff77 	bl	8010f6c <_strtol_l.constprop.0>
 801107e:	bd10      	pop	{r4, pc}

08011080 <strtol>:
 8011080:	b510      	push	{r4, lr}
 8011082:	4c04      	ldr	r4, [pc, #16]	; (8011094 <strtol+0x14>)
 8011084:	0013      	movs	r3, r2
 8011086:	000a      	movs	r2, r1
 8011088:	0001      	movs	r1, r0
 801108a:	6820      	ldr	r0, [r4, #0]
 801108c:	f7ff ff6e 	bl	8010f6c <_strtol_l.constprop.0>
 8011090:	bd10      	pop	{r4, pc}
 8011092:	46c0      	nop			; (mov r8, r8)
 8011094:	200002b4 	.word	0x200002b4

08011098 <__cvt>:
 8011098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801109a:	001e      	movs	r6, r3
 801109c:	2300      	movs	r3, #0
 801109e:	0014      	movs	r4, r2
 80110a0:	b08b      	sub	sp, #44	; 0x2c
 80110a2:	429e      	cmp	r6, r3
 80110a4:	da04      	bge.n	80110b0 <__cvt+0x18>
 80110a6:	2180      	movs	r1, #128	; 0x80
 80110a8:	0609      	lsls	r1, r1, #24
 80110aa:	1873      	adds	r3, r6, r1
 80110ac:	001e      	movs	r6, r3
 80110ae:	232d      	movs	r3, #45	; 0x2d
 80110b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80110b4:	7013      	strb	r3, [r2, #0]
 80110b6:	2320      	movs	r3, #32
 80110b8:	2203      	movs	r2, #3
 80110ba:	439f      	bics	r7, r3
 80110bc:	2f46      	cmp	r7, #70	; 0x46
 80110be:	d007      	beq.n	80110d0 <__cvt+0x38>
 80110c0:	003b      	movs	r3, r7
 80110c2:	3b45      	subs	r3, #69	; 0x45
 80110c4:	4259      	negs	r1, r3
 80110c6:	414b      	adcs	r3, r1
 80110c8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80110ca:	3a01      	subs	r2, #1
 80110cc:	18cb      	adds	r3, r1, r3
 80110ce:	9310      	str	r3, [sp, #64]	; 0x40
 80110d0:	ab09      	add	r3, sp, #36	; 0x24
 80110d2:	9304      	str	r3, [sp, #16]
 80110d4:	ab08      	add	r3, sp, #32
 80110d6:	9303      	str	r3, [sp, #12]
 80110d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80110da:	9200      	str	r2, [sp, #0]
 80110dc:	9302      	str	r3, [sp, #8]
 80110de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110e0:	0022      	movs	r2, r4
 80110e2:	9301      	str	r3, [sp, #4]
 80110e4:	0033      	movs	r3, r6
 80110e6:	f001 fa17 	bl	8012518 <_dtoa_r>
 80110ea:	0005      	movs	r5, r0
 80110ec:	2f47      	cmp	r7, #71	; 0x47
 80110ee:	d102      	bne.n	80110f6 <__cvt+0x5e>
 80110f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110f2:	07db      	lsls	r3, r3, #31
 80110f4:	d528      	bpl.n	8011148 <__cvt+0xb0>
 80110f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110f8:	18eb      	adds	r3, r5, r3
 80110fa:	9307      	str	r3, [sp, #28]
 80110fc:	2f46      	cmp	r7, #70	; 0x46
 80110fe:	d114      	bne.n	801112a <__cvt+0x92>
 8011100:	782b      	ldrb	r3, [r5, #0]
 8011102:	2b30      	cmp	r3, #48	; 0x30
 8011104:	d10c      	bne.n	8011120 <__cvt+0x88>
 8011106:	2200      	movs	r2, #0
 8011108:	2300      	movs	r3, #0
 801110a:	0020      	movs	r0, r4
 801110c:	0031      	movs	r1, r6
 801110e:	f7ef f99d 	bl	800044c <__aeabi_dcmpeq>
 8011112:	2800      	cmp	r0, #0
 8011114:	d104      	bne.n	8011120 <__cvt+0x88>
 8011116:	2301      	movs	r3, #1
 8011118:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801111a:	1a9b      	subs	r3, r3, r2
 801111c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801111e:	6013      	str	r3, [r2, #0]
 8011120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011122:	9a07      	ldr	r2, [sp, #28]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	18d3      	adds	r3, r2, r3
 8011128:	9307      	str	r3, [sp, #28]
 801112a:	2200      	movs	r2, #0
 801112c:	2300      	movs	r3, #0
 801112e:	0020      	movs	r0, r4
 8011130:	0031      	movs	r1, r6
 8011132:	f7ef f98b 	bl	800044c <__aeabi_dcmpeq>
 8011136:	2800      	cmp	r0, #0
 8011138:	d001      	beq.n	801113e <__cvt+0xa6>
 801113a:	9b07      	ldr	r3, [sp, #28]
 801113c:	9309      	str	r3, [sp, #36]	; 0x24
 801113e:	2230      	movs	r2, #48	; 0x30
 8011140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011142:	9907      	ldr	r1, [sp, #28]
 8011144:	428b      	cmp	r3, r1
 8011146:	d306      	bcc.n	8011156 <__cvt+0xbe>
 8011148:	0028      	movs	r0, r5
 801114a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801114c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801114e:	1b5b      	subs	r3, r3, r5
 8011150:	6013      	str	r3, [r2, #0]
 8011152:	b00b      	add	sp, #44	; 0x2c
 8011154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011156:	1c59      	adds	r1, r3, #1
 8011158:	9109      	str	r1, [sp, #36]	; 0x24
 801115a:	701a      	strb	r2, [r3, #0]
 801115c:	e7f0      	b.n	8011140 <__cvt+0xa8>

0801115e <__exponent>:
 801115e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011160:	1c83      	adds	r3, r0, #2
 8011162:	b087      	sub	sp, #28
 8011164:	9303      	str	r3, [sp, #12]
 8011166:	0005      	movs	r5, r0
 8011168:	000c      	movs	r4, r1
 801116a:	232b      	movs	r3, #43	; 0x2b
 801116c:	7002      	strb	r2, [r0, #0]
 801116e:	2900      	cmp	r1, #0
 8011170:	da01      	bge.n	8011176 <__exponent+0x18>
 8011172:	424c      	negs	r4, r1
 8011174:	3302      	adds	r3, #2
 8011176:	706b      	strb	r3, [r5, #1]
 8011178:	2c09      	cmp	r4, #9
 801117a:	dd2f      	ble.n	80111dc <__exponent+0x7e>
 801117c:	270a      	movs	r7, #10
 801117e:	ab04      	add	r3, sp, #16
 8011180:	1dde      	adds	r6, r3, #7
 8011182:	0020      	movs	r0, r4
 8011184:	0039      	movs	r1, r7
 8011186:	9601      	str	r6, [sp, #4]
 8011188:	f7ef f94a 	bl	8000420 <__aeabi_idivmod>
 801118c:	3e01      	subs	r6, #1
 801118e:	3130      	adds	r1, #48	; 0x30
 8011190:	0020      	movs	r0, r4
 8011192:	7031      	strb	r1, [r6, #0]
 8011194:	0039      	movs	r1, r7
 8011196:	9402      	str	r4, [sp, #8]
 8011198:	f7ef f85c 	bl	8000254 <__divsi3>
 801119c:	9b02      	ldr	r3, [sp, #8]
 801119e:	0004      	movs	r4, r0
 80111a0:	2b63      	cmp	r3, #99	; 0x63
 80111a2:	dcee      	bgt.n	8011182 <__exponent+0x24>
 80111a4:	9b01      	ldr	r3, [sp, #4]
 80111a6:	3430      	adds	r4, #48	; 0x30
 80111a8:	1e9a      	subs	r2, r3, #2
 80111aa:	0013      	movs	r3, r2
 80111ac:	9903      	ldr	r1, [sp, #12]
 80111ae:	7014      	strb	r4, [r2, #0]
 80111b0:	a804      	add	r0, sp, #16
 80111b2:	3007      	adds	r0, #7
 80111b4:	4298      	cmp	r0, r3
 80111b6:	d80c      	bhi.n	80111d2 <__exponent+0x74>
 80111b8:	2300      	movs	r3, #0
 80111ba:	4282      	cmp	r2, r0
 80111bc:	d804      	bhi.n	80111c8 <__exponent+0x6a>
 80111be:	aa04      	add	r2, sp, #16
 80111c0:	3309      	adds	r3, #9
 80111c2:	189b      	adds	r3, r3, r2
 80111c4:	9a01      	ldr	r2, [sp, #4]
 80111c6:	1a9b      	subs	r3, r3, r2
 80111c8:	9a03      	ldr	r2, [sp, #12]
 80111ca:	18d3      	adds	r3, r2, r3
 80111cc:	1b58      	subs	r0, r3, r5
 80111ce:	b007      	add	sp, #28
 80111d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d2:	7818      	ldrb	r0, [r3, #0]
 80111d4:	3301      	adds	r3, #1
 80111d6:	7008      	strb	r0, [r1, #0]
 80111d8:	3101      	adds	r1, #1
 80111da:	e7e9      	b.n	80111b0 <__exponent+0x52>
 80111dc:	2330      	movs	r3, #48	; 0x30
 80111de:	3430      	adds	r4, #48	; 0x30
 80111e0:	70ab      	strb	r3, [r5, #2]
 80111e2:	70ec      	strb	r4, [r5, #3]
 80111e4:	1d2b      	adds	r3, r5, #4
 80111e6:	e7f1      	b.n	80111cc <__exponent+0x6e>

080111e8 <_printf_float>:
 80111e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ea:	b095      	sub	sp, #84	; 0x54
 80111ec:	000c      	movs	r4, r1
 80111ee:	9208      	str	r2, [sp, #32]
 80111f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80111f2:	9309      	str	r3, [sp, #36]	; 0x24
 80111f4:	0007      	movs	r7, r0
 80111f6:	f000 ffcb 	bl	8012190 <_localeconv_r>
 80111fa:	6803      	ldr	r3, [r0, #0]
 80111fc:	0018      	movs	r0, r3
 80111fe:	930c      	str	r3, [sp, #48]	; 0x30
 8011200:	f7ee ff82 	bl	8000108 <strlen>
 8011204:	2300      	movs	r3, #0
 8011206:	9312      	str	r3, [sp, #72]	; 0x48
 8011208:	7e23      	ldrb	r3, [r4, #24]
 801120a:	2207      	movs	r2, #7
 801120c:	930a      	str	r3, [sp, #40]	; 0x28
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	900d      	str	r0, [sp, #52]	; 0x34
 8011212:	930b      	str	r3, [sp, #44]	; 0x2c
 8011214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011216:	682b      	ldr	r3, [r5, #0]
 8011218:	05c9      	lsls	r1, r1, #23
 801121a:	d547      	bpl.n	80112ac <_printf_float+0xc4>
 801121c:	189b      	adds	r3, r3, r2
 801121e:	4393      	bics	r3, r2
 8011220:	001a      	movs	r2, r3
 8011222:	3208      	adds	r2, #8
 8011224:	602a      	str	r2, [r5, #0]
 8011226:	681e      	ldr	r6, [r3, #0]
 8011228:	685d      	ldr	r5, [r3, #4]
 801122a:	0032      	movs	r2, r6
 801122c:	002b      	movs	r3, r5
 801122e:	64a2      	str	r2, [r4, #72]	; 0x48
 8011230:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011232:	2201      	movs	r2, #1
 8011234:	006b      	lsls	r3, r5, #1
 8011236:	085b      	lsrs	r3, r3, #1
 8011238:	930e      	str	r3, [sp, #56]	; 0x38
 801123a:	0030      	movs	r0, r6
 801123c:	4bab      	ldr	r3, [pc, #684]	; (80114ec <_printf_float+0x304>)
 801123e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011240:	4252      	negs	r2, r2
 8011242:	f7f1 fe8b 	bl	8002f5c <__aeabi_dcmpun>
 8011246:	2800      	cmp	r0, #0
 8011248:	d132      	bne.n	80112b0 <_printf_float+0xc8>
 801124a:	2201      	movs	r2, #1
 801124c:	0030      	movs	r0, r6
 801124e:	4ba7      	ldr	r3, [pc, #668]	; (80114ec <_printf_float+0x304>)
 8011250:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011252:	4252      	negs	r2, r2
 8011254:	f7ef f90a 	bl	800046c <__aeabi_dcmple>
 8011258:	2800      	cmp	r0, #0
 801125a:	d129      	bne.n	80112b0 <_printf_float+0xc8>
 801125c:	2200      	movs	r2, #0
 801125e:	2300      	movs	r3, #0
 8011260:	0030      	movs	r0, r6
 8011262:	0029      	movs	r1, r5
 8011264:	f7ef f8f8 	bl	8000458 <__aeabi_dcmplt>
 8011268:	2800      	cmp	r0, #0
 801126a:	d003      	beq.n	8011274 <_printf_float+0x8c>
 801126c:	0023      	movs	r3, r4
 801126e:	222d      	movs	r2, #45	; 0x2d
 8011270:	3343      	adds	r3, #67	; 0x43
 8011272:	701a      	strb	r2, [r3, #0]
 8011274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011276:	4d9e      	ldr	r5, [pc, #632]	; (80114f0 <_printf_float+0x308>)
 8011278:	2b47      	cmp	r3, #71	; 0x47
 801127a:	d900      	bls.n	801127e <_printf_float+0x96>
 801127c:	4d9d      	ldr	r5, [pc, #628]	; (80114f4 <_printf_float+0x30c>)
 801127e:	2303      	movs	r3, #3
 8011280:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011282:	6123      	str	r3, [r4, #16]
 8011284:	3301      	adds	r3, #1
 8011286:	439a      	bics	r2, r3
 8011288:	2300      	movs	r3, #0
 801128a:	6022      	str	r2, [r4, #0]
 801128c:	930b      	str	r3, [sp, #44]	; 0x2c
 801128e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011290:	0021      	movs	r1, r4
 8011292:	9300      	str	r3, [sp, #0]
 8011294:	0038      	movs	r0, r7
 8011296:	9b08      	ldr	r3, [sp, #32]
 8011298:	aa13      	add	r2, sp, #76	; 0x4c
 801129a:	f000 f9fb 	bl	8011694 <_printf_common>
 801129e:	3001      	adds	r0, #1
 80112a0:	d000      	beq.n	80112a4 <_printf_float+0xbc>
 80112a2:	e0a3      	b.n	80113ec <_printf_float+0x204>
 80112a4:	2001      	movs	r0, #1
 80112a6:	4240      	negs	r0, r0
 80112a8:	b015      	add	sp, #84	; 0x54
 80112aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ac:	3307      	adds	r3, #7
 80112ae:	e7b6      	b.n	801121e <_printf_float+0x36>
 80112b0:	0032      	movs	r2, r6
 80112b2:	002b      	movs	r3, r5
 80112b4:	0030      	movs	r0, r6
 80112b6:	0029      	movs	r1, r5
 80112b8:	f7f1 fe50 	bl	8002f5c <__aeabi_dcmpun>
 80112bc:	2800      	cmp	r0, #0
 80112be:	d00b      	beq.n	80112d8 <_printf_float+0xf0>
 80112c0:	2d00      	cmp	r5, #0
 80112c2:	da03      	bge.n	80112cc <_printf_float+0xe4>
 80112c4:	0023      	movs	r3, r4
 80112c6:	222d      	movs	r2, #45	; 0x2d
 80112c8:	3343      	adds	r3, #67	; 0x43
 80112ca:	701a      	strb	r2, [r3, #0]
 80112cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112ce:	4d8a      	ldr	r5, [pc, #552]	; (80114f8 <_printf_float+0x310>)
 80112d0:	2b47      	cmp	r3, #71	; 0x47
 80112d2:	d9d4      	bls.n	801127e <_printf_float+0x96>
 80112d4:	4d89      	ldr	r5, [pc, #548]	; (80114fc <_printf_float+0x314>)
 80112d6:	e7d2      	b.n	801127e <_printf_float+0x96>
 80112d8:	2220      	movs	r2, #32
 80112da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80112dc:	6863      	ldr	r3, [r4, #4]
 80112de:	4391      	bics	r1, r2
 80112e0:	910e      	str	r1, [sp, #56]	; 0x38
 80112e2:	1c5a      	adds	r2, r3, #1
 80112e4:	d14a      	bne.n	801137c <_printf_float+0x194>
 80112e6:	3307      	adds	r3, #7
 80112e8:	6063      	str	r3, [r4, #4]
 80112ea:	2380      	movs	r3, #128	; 0x80
 80112ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112ee:	00db      	lsls	r3, r3, #3
 80112f0:	4313      	orrs	r3, r2
 80112f2:	2200      	movs	r2, #0
 80112f4:	9206      	str	r2, [sp, #24]
 80112f6:	aa12      	add	r2, sp, #72	; 0x48
 80112f8:	9205      	str	r2, [sp, #20]
 80112fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	9204      	str	r2, [sp, #16]
 8011300:	aa11      	add	r2, sp, #68	; 0x44
 8011302:	9203      	str	r2, [sp, #12]
 8011304:	2223      	movs	r2, #35	; 0x23
 8011306:	a908      	add	r1, sp, #32
 8011308:	9301      	str	r3, [sp, #4]
 801130a:	6863      	ldr	r3, [r4, #4]
 801130c:	1852      	adds	r2, r2, r1
 801130e:	9202      	str	r2, [sp, #8]
 8011310:	9300      	str	r3, [sp, #0]
 8011312:	0032      	movs	r2, r6
 8011314:	002b      	movs	r3, r5
 8011316:	0038      	movs	r0, r7
 8011318:	f7ff febe 	bl	8011098 <__cvt>
 801131c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801131e:	0005      	movs	r5, r0
 8011320:	2b47      	cmp	r3, #71	; 0x47
 8011322:	d109      	bne.n	8011338 <_printf_float+0x150>
 8011324:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011326:	1cda      	adds	r2, r3, #3
 8011328:	db02      	blt.n	8011330 <_printf_float+0x148>
 801132a:	6862      	ldr	r2, [r4, #4]
 801132c:	4293      	cmp	r3, r2
 801132e:	dd49      	ble.n	80113c4 <_printf_float+0x1dc>
 8011330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011332:	3b02      	subs	r3, #2
 8011334:	b2db      	uxtb	r3, r3
 8011336:	930a      	str	r3, [sp, #40]	; 0x28
 8011338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801133a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801133c:	2b65      	cmp	r3, #101	; 0x65
 801133e:	d824      	bhi.n	801138a <_printf_float+0x1a2>
 8011340:	0020      	movs	r0, r4
 8011342:	001a      	movs	r2, r3
 8011344:	3901      	subs	r1, #1
 8011346:	3050      	adds	r0, #80	; 0x50
 8011348:	9111      	str	r1, [sp, #68]	; 0x44
 801134a:	f7ff ff08 	bl	801115e <__exponent>
 801134e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011350:	900b      	str	r0, [sp, #44]	; 0x2c
 8011352:	1813      	adds	r3, r2, r0
 8011354:	6123      	str	r3, [r4, #16]
 8011356:	2a01      	cmp	r2, #1
 8011358:	dc02      	bgt.n	8011360 <_printf_float+0x178>
 801135a:	6822      	ldr	r2, [r4, #0]
 801135c:	07d2      	lsls	r2, r2, #31
 801135e:	d501      	bpl.n	8011364 <_printf_float+0x17c>
 8011360:	3301      	adds	r3, #1
 8011362:	6123      	str	r3, [r4, #16]
 8011364:	2323      	movs	r3, #35	; 0x23
 8011366:	aa08      	add	r2, sp, #32
 8011368:	189b      	adds	r3, r3, r2
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d100      	bne.n	8011372 <_printf_float+0x18a>
 8011370:	e78d      	b.n	801128e <_printf_float+0xa6>
 8011372:	0023      	movs	r3, r4
 8011374:	222d      	movs	r2, #45	; 0x2d
 8011376:	3343      	adds	r3, #67	; 0x43
 8011378:	701a      	strb	r2, [r3, #0]
 801137a:	e788      	b.n	801128e <_printf_float+0xa6>
 801137c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801137e:	2a47      	cmp	r2, #71	; 0x47
 8011380:	d1b3      	bne.n	80112ea <_printf_float+0x102>
 8011382:	2b00      	cmp	r3, #0
 8011384:	d1b1      	bne.n	80112ea <_printf_float+0x102>
 8011386:	3301      	adds	r3, #1
 8011388:	e7ae      	b.n	80112e8 <_printf_float+0x100>
 801138a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801138c:	2b66      	cmp	r3, #102	; 0x66
 801138e:	d11b      	bne.n	80113c8 <_printf_float+0x1e0>
 8011390:	6863      	ldr	r3, [r4, #4]
 8011392:	2900      	cmp	r1, #0
 8011394:	dd09      	ble.n	80113aa <_printf_float+0x1c2>
 8011396:	6121      	str	r1, [r4, #16]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d102      	bne.n	80113a2 <_printf_float+0x1ba>
 801139c:	6822      	ldr	r2, [r4, #0]
 801139e:	07d2      	lsls	r2, r2, #31
 80113a0:	d50b      	bpl.n	80113ba <_printf_float+0x1d2>
 80113a2:	3301      	adds	r3, #1
 80113a4:	185b      	adds	r3, r3, r1
 80113a6:	6123      	str	r3, [r4, #16]
 80113a8:	e007      	b.n	80113ba <_printf_float+0x1d2>
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d103      	bne.n	80113b6 <_printf_float+0x1ce>
 80113ae:	2201      	movs	r2, #1
 80113b0:	6821      	ldr	r1, [r4, #0]
 80113b2:	4211      	tst	r1, r2
 80113b4:	d000      	beq.n	80113b8 <_printf_float+0x1d0>
 80113b6:	1c9a      	adds	r2, r3, #2
 80113b8:	6122      	str	r2, [r4, #16]
 80113ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80113be:	2300      	movs	r3, #0
 80113c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80113c2:	e7cf      	b.n	8011364 <_printf_float+0x17c>
 80113c4:	2367      	movs	r3, #103	; 0x67
 80113c6:	930a      	str	r3, [sp, #40]	; 0x28
 80113c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80113ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80113cc:	4299      	cmp	r1, r3
 80113ce:	db06      	blt.n	80113de <_printf_float+0x1f6>
 80113d0:	6823      	ldr	r3, [r4, #0]
 80113d2:	6121      	str	r1, [r4, #16]
 80113d4:	07db      	lsls	r3, r3, #31
 80113d6:	d5f0      	bpl.n	80113ba <_printf_float+0x1d2>
 80113d8:	3101      	adds	r1, #1
 80113da:	6121      	str	r1, [r4, #16]
 80113dc:	e7ed      	b.n	80113ba <_printf_float+0x1d2>
 80113de:	2201      	movs	r2, #1
 80113e0:	2900      	cmp	r1, #0
 80113e2:	dc01      	bgt.n	80113e8 <_printf_float+0x200>
 80113e4:	1892      	adds	r2, r2, r2
 80113e6:	1a52      	subs	r2, r2, r1
 80113e8:	189b      	adds	r3, r3, r2
 80113ea:	e7dc      	b.n	80113a6 <_printf_float+0x1be>
 80113ec:	6822      	ldr	r2, [r4, #0]
 80113ee:	0553      	lsls	r3, r2, #21
 80113f0:	d408      	bmi.n	8011404 <_printf_float+0x21c>
 80113f2:	6923      	ldr	r3, [r4, #16]
 80113f4:	002a      	movs	r2, r5
 80113f6:	0038      	movs	r0, r7
 80113f8:	9908      	ldr	r1, [sp, #32]
 80113fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80113fc:	47a8      	blx	r5
 80113fe:	3001      	adds	r0, #1
 8011400:	d12a      	bne.n	8011458 <_printf_float+0x270>
 8011402:	e74f      	b.n	80112a4 <_printf_float+0xbc>
 8011404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011406:	2b65      	cmp	r3, #101	; 0x65
 8011408:	d800      	bhi.n	801140c <_printf_float+0x224>
 801140a:	e0ec      	b.n	80115e6 <_printf_float+0x3fe>
 801140c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801140e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011410:	2200      	movs	r2, #0
 8011412:	2300      	movs	r3, #0
 8011414:	f7ef f81a 	bl	800044c <__aeabi_dcmpeq>
 8011418:	2800      	cmp	r0, #0
 801141a:	d034      	beq.n	8011486 <_printf_float+0x29e>
 801141c:	2301      	movs	r3, #1
 801141e:	0038      	movs	r0, r7
 8011420:	4a37      	ldr	r2, [pc, #220]	; (8011500 <_printf_float+0x318>)
 8011422:	9908      	ldr	r1, [sp, #32]
 8011424:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011426:	47a8      	blx	r5
 8011428:	3001      	adds	r0, #1
 801142a:	d100      	bne.n	801142e <_printf_float+0x246>
 801142c:	e73a      	b.n	80112a4 <_printf_float+0xbc>
 801142e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011432:	429a      	cmp	r2, r3
 8011434:	db02      	blt.n	801143c <_printf_float+0x254>
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	07db      	lsls	r3, r3, #31
 801143a:	d50d      	bpl.n	8011458 <_printf_float+0x270>
 801143c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801143e:	0038      	movs	r0, r7
 8011440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011444:	9908      	ldr	r1, [sp, #32]
 8011446:	47a8      	blx	r5
 8011448:	2500      	movs	r5, #0
 801144a:	3001      	adds	r0, #1
 801144c:	d100      	bne.n	8011450 <_printf_float+0x268>
 801144e:	e729      	b.n	80112a4 <_printf_float+0xbc>
 8011450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011452:	3b01      	subs	r3, #1
 8011454:	42ab      	cmp	r3, r5
 8011456:	dc0a      	bgt.n	801146e <_printf_float+0x286>
 8011458:	6823      	ldr	r3, [r4, #0]
 801145a:	079b      	lsls	r3, r3, #30
 801145c:	d500      	bpl.n	8011460 <_printf_float+0x278>
 801145e:	e116      	b.n	801168e <_printf_float+0x4a6>
 8011460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011462:	68e0      	ldr	r0, [r4, #12]
 8011464:	4298      	cmp	r0, r3
 8011466:	db00      	blt.n	801146a <_printf_float+0x282>
 8011468:	e71e      	b.n	80112a8 <_printf_float+0xc0>
 801146a:	0018      	movs	r0, r3
 801146c:	e71c      	b.n	80112a8 <_printf_float+0xc0>
 801146e:	0022      	movs	r2, r4
 8011470:	2301      	movs	r3, #1
 8011472:	0038      	movs	r0, r7
 8011474:	9908      	ldr	r1, [sp, #32]
 8011476:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011478:	321a      	adds	r2, #26
 801147a:	47b0      	blx	r6
 801147c:	3001      	adds	r0, #1
 801147e:	d100      	bne.n	8011482 <_printf_float+0x29a>
 8011480:	e710      	b.n	80112a4 <_printf_float+0xbc>
 8011482:	3501      	adds	r5, #1
 8011484:	e7e4      	b.n	8011450 <_printf_float+0x268>
 8011486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011488:	2b00      	cmp	r3, #0
 801148a:	dc3b      	bgt.n	8011504 <_printf_float+0x31c>
 801148c:	2301      	movs	r3, #1
 801148e:	0038      	movs	r0, r7
 8011490:	4a1b      	ldr	r2, [pc, #108]	; (8011500 <_printf_float+0x318>)
 8011492:	9908      	ldr	r1, [sp, #32]
 8011494:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011496:	47b0      	blx	r6
 8011498:	3001      	adds	r0, #1
 801149a:	d100      	bne.n	801149e <_printf_float+0x2b6>
 801149c:	e702      	b.n	80112a4 <_printf_float+0xbc>
 801149e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80114a2:	4313      	orrs	r3, r2
 80114a4:	d102      	bne.n	80114ac <_printf_float+0x2c4>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	07db      	lsls	r3, r3, #31
 80114aa:	d5d5      	bpl.n	8011458 <_printf_float+0x270>
 80114ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114ae:	0038      	movs	r0, r7
 80114b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80114b2:	9908      	ldr	r1, [sp, #32]
 80114b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80114b6:	47b0      	blx	r6
 80114b8:	2300      	movs	r3, #0
 80114ba:	3001      	adds	r0, #1
 80114bc:	d100      	bne.n	80114c0 <_printf_float+0x2d8>
 80114be:	e6f1      	b.n	80112a4 <_printf_float+0xbc>
 80114c0:	930a      	str	r3, [sp, #40]	; 0x28
 80114c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114c6:	425b      	negs	r3, r3
 80114c8:	4293      	cmp	r3, r2
 80114ca:	dc01      	bgt.n	80114d0 <_printf_float+0x2e8>
 80114cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80114ce:	e791      	b.n	80113f4 <_printf_float+0x20c>
 80114d0:	0022      	movs	r2, r4
 80114d2:	2301      	movs	r3, #1
 80114d4:	0038      	movs	r0, r7
 80114d6:	9908      	ldr	r1, [sp, #32]
 80114d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80114da:	321a      	adds	r2, #26
 80114dc:	47b0      	blx	r6
 80114de:	3001      	adds	r0, #1
 80114e0:	d100      	bne.n	80114e4 <_printf_float+0x2fc>
 80114e2:	e6df      	b.n	80112a4 <_printf_float+0xbc>
 80114e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114e6:	3301      	adds	r3, #1
 80114e8:	e7ea      	b.n	80114c0 <_printf_float+0x2d8>
 80114ea:	46c0      	nop			; (mov r8, r8)
 80114ec:	7fefffff 	.word	0x7fefffff
 80114f0:	08017509 	.word	0x08017509
 80114f4:	0801750d 	.word	0x0801750d
 80114f8:	08017511 	.word	0x08017511
 80114fc:	08017515 	.word	0x08017515
 8011500:	08017519 	.word	0x08017519
 8011504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011508:	920a      	str	r2, [sp, #40]	; 0x28
 801150a:	429a      	cmp	r2, r3
 801150c:	dd00      	ble.n	8011510 <_printf_float+0x328>
 801150e:	930a      	str	r3, [sp, #40]	; 0x28
 8011510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011512:	2b00      	cmp	r3, #0
 8011514:	dc3d      	bgt.n	8011592 <_printf_float+0x3aa>
 8011516:	2300      	movs	r3, #0
 8011518:	930e      	str	r3, [sp, #56]	; 0x38
 801151a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801151c:	43db      	mvns	r3, r3
 801151e:	17db      	asrs	r3, r3, #31
 8011520:	930f      	str	r3, [sp, #60]	; 0x3c
 8011522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011526:	930b      	str	r3, [sp, #44]	; 0x2c
 8011528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801152a:	4013      	ands	r3, r2
 801152c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011532:	4293      	cmp	r3, r2
 8011534:	dc36      	bgt.n	80115a4 <_printf_float+0x3bc>
 8011536:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801153a:	429a      	cmp	r2, r3
 801153c:	db40      	blt.n	80115c0 <_printf_float+0x3d8>
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	07db      	lsls	r3, r3, #31
 8011542:	d43d      	bmi.n	80115c0 <_printf_float+0x3d8>
 8011544:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011546:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801154a:	1af3      	subs	r3, r6, r3
 801154c:	1ab6      	subs	r6, r6, r2
 801154e:	429e      	cmp	r6, r3
 8011550:	dd00      	ble.n	8011554 <_printf_float+0x36c>
 8011552:	001e      	movs	r6, r3
 8011554:	2e00      	cmp	r6, #0
 8011556:	dc3c      	bgt.n	80115d2 <_printf_float+0x3ea>
 8011558:	2300      	movs	r3, #0
 801155a:	930a      	str	r3, [sp, #40]	; 0x28
 801155c:	43f3      	mvns	r3, r6
 801155e:	17db      	asrs	r3, r3, #31
 8011560:	930b      	str	r3, [sp, #44]	; 0x2c
 8011562:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011566:	1a9b      	subs	r3, r3, r2
 8011568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801156a:	4032      	ands	r2, r6
 801156c:	1a9b      	subs	r3, r3, r2
 801156e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011570:	4293      	cmp	r3, r2
 8011572:	dc00      	bgt.n	8011576 <_printf_float+0x38e>
 8011574:	e770      	b.n	8011458 <_printf_float+0x270>
 8011576:	0022      	movs	r2, r4
 8011578:	2301      	movs	r3, #1
 801157a:	0038      	movs	r0, r7
 801157c:	9908      	ldr	r1, [sp, #32]
 801157e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011580:	321a      	adds	r2, #26
 8011582:	47a8      	blx	r5
 8011584:	3001      	adds	r0, #1
 8011586:	d100      	bne.n	801158a <_printf_float+0x3a2>
 8011588:	e68c      	b.n	80112a4 <_printf_float+0xbc>
 801158a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801158c:	3301      	adds	r3, #1
 801158e:	930a      	str	r3, [sp, #40]	; 0x28
 8011590:	e7e7      	b.n	8011562 <_printf_float+0x37a>
 8011592:	002a      	movs	r2, r5
 8011594:	0038      	movs	r0, r7
 8011596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011598:	9908      	ldr	r1, [sp, #32]
 801159a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801159c:	47b0      	blx	r6
 801159e:	3001      	adds	r0, #1
 80115a0:	d1b9      	bne.n	8011516 <_printf_float+0x32e>
 80115a2:	e67f      	b.n	80112a4 <_printf_float+0xbc>
 80115a4:	0022      	movs	r2, r4
 80115a6:	2301      	movs	r3, #1
 80115a8:	0038      	movs	r0, r7
 80115aa:	9908      	ldr	r1, [sp, #32]
 80115ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80115ae:	321a      	adds	r2, #26
 80115b0:	47b0      	blx	r6
 80115b2:	3001      	adds	r0, #1
 80115b4:	d100      	bne.n	80115b8 <_printf_float+0x3d0>
 80115b6:	e675      	b.n	80112a4 <_printf_float+0xbc>
 80115b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115ba:	3301      	adds	r3, #1
 80115bc:	930e      	str	r3, [sp, #56]	; 0x38
 80115be:	e7b0      	b.n	8011522 <_printf_float+0x33a>
 80115c0:	0038      	movs	r0, r7
 80115c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115c6:	9908      	ldr	r1, [sp, #32]
 80115c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80115ca:	47b0      	blx	r6
 80115cc:	3001      	adds	r0, #1
 80115ce:	d1b9      	bne.n	8011544 <_printf_float+0x35c>
 80115d0:	e668      	b.n	80112a4 <_printf_float+0xbc>
 80115d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115d4:	0038      	movs	r0, r7
 80115d6:	18ea      	adds	r2, r5, r3
 80115d8:	9908      	ldr	r1, [sp, #32]
 80115da:	0033      	movs	r3, r6
 80115dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80115de:	47a8      	blx	r5
 80115e0:	3001      	adds	r0, #1
 80115e2:	d1b9      	bne.n	8011558 <_printf_float+0x370>
 80115e4:	e65e      	b.n	80112a4 <_printf_float+0xbc>
 80115e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	dc02      	bgt.n	80115f2 <_printf_float+0x40a>
 80115ec:	2301      	movs	r3, #1
 80115ee:	421a      	tst	r2, r3
 80115f0:	d03a      	beq.n	8011668 <_printf_float+0x480>
 80115f2:	2301      	movs	r3, #1
 80115f4:	002a      	movs	r2, r5
 80115f6:	0038      	movs	r0, r7
 80115f8:	9908      	ldr	r1, [sp, #32]
 80115fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80115fc:	47b0      	blx	r6
 80115fe:	3001      	adds	r0, #1
 8011600:	d100      	bne.n	8011604 <_printf_float+0x41c>
 8011602:	e64f      	b.n	80112a4 <_printf_float+0xbc>
 8011604:	0038      	movs	r0, r7
 8011606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801160a:	9908      	ldr	r1, [sp, #32]
 801160c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801160e:	47b0      	blx	r6
 8011610:	3001      	adds	r0, #1
 8011612:	d100      	bne.n	8011616 <_printf_float+0x42e>
 8011614:	e646      	b.n	80112a4 <_printf_float+0xbc>
 8011616:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011618:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801161a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801161c:	2200      	movs	r2, #0
 801161e:	001e      	movs	r6, r3
 8011620:	2300      	movs	r3, #0
 8011622:	f7ee ff13 	bl	800044c <__aeabi_dcmpeq>
 8011626:	2800      	cmp	r0, #0
 8011628:	d11c      	bne.n	8011664 <_printf_float+0x47c>
 801162a:	0033      	movs	r3, r6
 801162c:	1c6a      	adds	r2, r5, #1
 801162e:	3b01      	subs	r3, #1
 8011630:	0038      	movs	r0, r7
 8011632:	9908      	ldr	r1, [sp, #32]
 8011634:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011636:	47a8      	blx	r5
 8011638:	3001      	adds	r0, #1
 801163a:	d10f      	bne.n	801165c <_printf_float+0x474>
 801163c:	e632      	b.n	80112a4 <_printf_float+0xbc>
 801163e:	0022      	movs	r2, r4
 8011640:	2301      	movs	r3, #1
 8011642:	0038      	movs	r0, r7
 8011644:	9908      	ldr	r1, [sp, #32]
 8011646:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011648:	321a      	adds	r2, #26
 801164a:	47b0      	blx	r6
 801164c:	3001      	adds	r0, #1
 801164e:	d100      	bne.n	8011652 <_printf_float+0x46a>
 8011650:	e628      	b.n	80112a4 <_printf_float+0xbc>
 8011652:	3501      	adds	r5, #1
 8011654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011656:	3b01      	subs	r3, #1
 8011658:	42ab      	cmp	r3, r5
 801165a:	dcf0      	bgt.n	801163e <_printf_float+0x456>
 801165c:	0022      	movs	r2, r4
 801165e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011660:	3250      	adds	r2, #80	; 0x50
 8011662:	e6c8      	b.n	80113f6 <_printf_float+0x20e>
 8011664:	2500      	movs	r5, #0
 8011666:	e7f5      	b.n	8011654 <_printf_float+0x46c>
 8011668:	002a      	movs	r2, r5
 801166a:	e7e1      	b.n	8011630 <_printf_float+0x448>
 801166c:	0022      	movs	r2, r4
 801166e:	2301      	movs	r3, #1
 8011670:	0038      	movs	r0, r7
 8011672:	9908      	ldr	r1, [sp, #32]
 8011674:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011676:	3219      	adds	r2, #25
 8011678:	47b0      	blx	r6
 801167a:	3001      	adds	r0, #1
 801167c:	d100      	bne.n	8011680 <_printf_float+0x498>
 801167e:	e611      	b.n	80112a4 <_printf_float+0xbc>
 8011680:	3501      	adds	r5, #1
 8011682:	68e3      	ldr	r3, [r4, #12]
 8011684:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011686:	1a9b      	subs	r3, r3, r2
 8011688:	42ab      	cmp	r3, r5
 801168a:	dcef      	bgt.n	801166c <_printf_float+0x484>
 801168c:	e6e8      	b.n	8011460 <_printf_float+0x278>
 801168e:	2500      	movs	r5, #0
 8011690:	e7f7      	b.n	8011682 <_printf_float+0x49a>
 8011692:	46c0      	nop			; (mov r8, r8)

08011694 <_printf_common>:
 8011694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011696:	0016      	movs	r6, r2
 8011698:	9301      	str	r3, [sp, #4]
 801169a:	688a      	ldr	r2, [r1, #8]
 801169c:	690b      	ldr	r3, [r1, #16]
 801169e:	000c      	movs	r4, r1
 80116a0:	9000      	str	r0, [sp, #0]
 80116a2:	4293      	cmp	r3, r2
 80116a4:	da00      	bge.n	80116a8 <_printf_common+0x14>
 80116a6:	0013      	movs	r3, r2
 80116a8:	0022      	movs	r2, r4
 80116aa:	6033      	str	r3, [r6, #0]
 80116ac:	3243      	adds	r2, #67	; 0x43
 80116ae:	7812      	ldrb	r2, [r2, #0]
 80116b0:	2a00      	cmp	r2, #0
 80116b2:	d001      	beq.n	80116b8 <_printf_common+0x24>
 80116b4:	3301      	adds	r3, #1
 80116b6:	6033      	str	r3, [r6, #0]
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	069b      	lsls	r3, r3, #26
 80116bc:	d502      	bpl.n	80116c4 <_printf_common+0x30>
 80116be:	6833      	ldr	r3, [r6, #0]
 80116c0:	3302      	adds	r3, #2
 80116c2:	6033      	str	r3, [r6, #0]
 80116c4:	6822      	ldr	r2, [r4, #0]
 80116c6:	2306      	movs	r3, #6
 80116c8:	0015      	movs	r5, r2
 80116ca:	401d      	ands	r5, r3
 80116cc:	421a      	tst	r2, r3
 80116ce:	d027      	beq.n	8011720 <_printf_common+0x8c>
 80116d0:	0023      	movs	r3, r4
 80116d2:	3343      	adds	r3, #67	; 0x43
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	1e5a      	subs	r2, r3, #1
 80116d8:	4193      	sbcs	r3, r2
 80116da:	6822      	ldr	r2, [r4, #0]
 80116dc:	0692      	lsls	r2, r2, #26
 80116de:	d430      	bmi.n	8011742 <_printf_common+0xae>
 80116e0:	0022      	movs	r2, r4
 80116e2:	9901      	ldr	r1, [sp, #4]
 80116e4:	9800      	ldr	r0, [sp, #0]
 80116e6:	9d08      	ldr	r5, [sp, #32]
 80116e8:	3243      	adds	r2, #67	; 0x43
 80116ea:	47a8      	blx	r5
 80116ec:	3001      	adds	r0, #1
 80116ee:	d025      	beq.n	801173c <_printf_common+0xa8>
 80116f0:	2206      	movs	r2, #6
 80116f2:	6823      	ldr	r3, [r4, #0]
 80116f4:	2500      	movs	r5, #0
 80116f6:	4013      	ands	r3, r2
 80116f8:	2b04      	cmp	r3, #4
 80116fa:	d105      	bne.n	8011708 <_printf_common+0x74>
 80116fc:	6833      	ldr	r3, [r6, #0]
 80116fe:	68e5      	ldr	r5, [r4, #12]
 8011700:	1aed      	subs	r5, r5, r3
 8011702:	43eb      	mvns	r3, r5
 8011704:	17db      	asrs	r3, r3, #31
 8011706:	401d      	ands	r5, r3
 8011708:	68a3      	ldr	r3, [r4, #8]
 801170a:	6922      	ldr	r2, [r4, #16]
 801170c:	4293      	cmp	r3, r2
 801170e:	dd01      	ble.n	8011714 <_printf_common+0x80>
 8011710:	1a9b      	subs	r3, r3, r2
 8011712:	18ed      	adds	r5, r5, r3
 8011714:	2600      	movs	r6, #0
 8011716:	42b5      	cmp	r5, r6
 8011718:	d120      	bne.n	801175c <_printf_common+0xc8>
 801171a:	2000      	movs	r0, #0
 801171c:	e010      	b.n	8011740 <_printf_common+0xac>
 801171e:	3501      	adds	r5, #1
 8011720:	68e3      	ldr	r3, [r4, #12]
 8011722:	6832      	ldr	r2, [r6, #0]
 8011724:	1a9b      	subs	r3, r3, r2
 8011726:	42ab      	cmp	r3, r5
 8011728:	ddd2      	ble.n	80116d0 <_printf_common+0x3c>
 801172a:	0022      	movs	r2, r4
 801172c:	2301      	movs	r3, #1
 801172e:	9901      	ldr	r1, [sp, #4]
 8011730:	9800      	ldr	r0, [sp, #0]
 8011732:	9f08      	ldr	r7, [sp, #32]
 8011734:	3219      	adds	r2, #25
 8011736:	47b8      	blx	r7
 8011738:	3001      	adds	r0, #1
 801173a:	d1f0      	bne.n	801171e <_printf_common+0x8a>
 801173c:	2001      	movs	r0, #1
 801173e:	4240      	negs	r0, r0
 8011740:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011742:	2030      	movs	r0, #48	; 0x30
 8011744:	18e1      	adds	r1, r4, r3
 8011746:	3143      	adds	r1, #67	; 0x43
 8011748:	7008      	strb	r0, [r1, #0]
 801174a:	0021      	movs	r1, r4
 801174c:	1c5a      	adds	r2, r3, #1
 801174e:	3145      	adds	r1, #69	; 0x45
 8011750:	7809      	ldrb	r1, [r1, #0]
 8011752:	18a2      	adds	r2, r4, r2
 8011754:	3243      	adds	r2, #67	; 0x43
 8011756:	3302      	adds	r3, #2
 8011758:	7011      	strb	r1, [r2, #0]
 801175a:	e7c1      	b.n	80116e0 <_printf_common+0x4c>
 801175c:	0022      	movs	r2, r4
 801175e:	2301      	movs	r3, #1
 8011760:	9901      	ldr	r1, [sp, #4]
 8011762:	9800      	ldr	r0, [sp, #0]
 8011764:	9f08      	ldr	r7, [sp, #32]
 8011766:	321a      	adds	r2, #26
 8011768:	47b8      	blx	r7
 801176a:	3001      	adds	r0, #1
 801176c:	d0e6      	beq.n	801173c <_printf_common+0xa8>
 801176e:	3601      	adds	r6, #1
 8011770:	e7d1      	b.n	8011716 <_printf_common+0x82>
	...

08011774 <_printf_i>:
 8011774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011776:	b08b      	sub	sp, #44	; 0x2c
 8011778:	9206      	str	r2, [sp, #24]
 801177a:	000a      	movs	r2, r1
 801177c:	3243      	adds	r2, #67	; 0x43
 801177e:	9307      	str	r3, [sp, #28]
 8011780:	9005      	str	r0, [sp, #20]
 8011782:	9204      	str	r2, [sp, #16]
 8011784:	7e0a      	ldrb	r2, [r1, #24]
 8011786:	000c      	movs	r4, r1
 8011788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801178a:	2a78      	cmp	r2, #120	; 0x78
 801178c:	d809      	bhi.n	80117a2 <_printf_i+0x2e>
 801178e:	2a62      	cmp	r2, #98	; 0x62
 8011790:	d80b      	bhi.n	80117aa <_printf_i+0x36>
 8011792:	2a00      	cmp	r2, #0
 8011794:	d100      	bne.n	8011798 <_printf_i+0x24>
 8011796:	e0be      	b.n	8011916 <_printf_i+0x1a2>
 8011798:	497c      	ldr	r1, [pc, #496]	; (801198c <_printf_i+0x218>)
 801179a:	9103      	str	r1, [sp, #12]
 801179c:	2a58      	cmp	r2, #88	; 0x58
 801179e:	d100      	bne.n	80117a2 <_printf_i+0x2e>
 80117a0:	e093      	b.n	80118ca <_printf_i+0x156>
 80117a2:	0026      	movs	r6, r4
 80117a4:	3642      	adds	r6, #66	; 0x42
 80117a6:	7032      	strb	r2, [r6, #0]
 80117a8:	e022      	b.n	80117f0 <_printf_i+0x7c>
 80117aa:	0010      	movs	r0, r2
 80117ac:	3863      	subs	r0, #99	; 0x63
 80117ae:	2815      	cmp	r0, #21
 80117b0:	d8f7      	bhi.n	80117a2 <_printf_i+0x2e>
 80117b2:	f7ee fcbb 	bl	800012c <__gnu_thumb1_case_shi>
 80117b6:	0016      	.short	0x0016
 80117b8:	fff6001f 	.word	0xfff6001f
 80117bc:	fff6fff6 	.word	0xfff6fff6
 80117c0:	001ffff6 	.word	0x001ffff6
 80117c4:	fff6fff6 	.word	0xfff6fff6
 80117c8:	fff6fff6 	.word	0xfff6fff6
 80117cc:	003600a3 	.word	0x003600a3
 80117d0:	fff60083 	.word	0xfff60083
 80117d4:	00b4fff6 	.word	0x00b4fff6
 80117d8:	0036fff6 	.word	0x0036fff6
 80117dc:	fff6fff6 	.word	0xfff6fff6
 80117e0:	0087      	.short	0x0087
 80117e2:	0026      	movs	r6, r4
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	3642      	adds	r6, #66	; 0x42
 80117e8:	1d11      	adds	r1, r2, #4
 80117ea:	6019      	str	r1, [r3, #0]
 80117ec:	6813      	ldr	r3, [r2, #0]
 80117ee:	7033      	strb	r3, [r6, #0]
 80117f0:	2301      	movs	r3, #1
 80117f2:	e0a2      	b.n	801193a <_printf_i+0x1c6>
 80117f4:	6818      	ldr	r0, [r3, #0]
 80117f6:	6809      	ldr	r1, [r1, #0]
 80117f8:	1d02      	adds	r2, r0, #4
 80117fa:	060d      	lsls	r5, r1, #24
 80117fc:	d50b      	bpl.n	8011816 <_printf_i+0xa2>
 80117fe:	6805      	ldr	r5, [r0, #0]
 8011800:	601a      	str	r2, [r3, #0]
 8011802:	2d00      	cmp	r5, #0
 8011804:	da03      	bge.n	801180e <_printf_i+0x9a>
 8011806:	232d      	movs	r3, #45	; 0x2d
 8011808:	9a04      	ldr	r2, [sp, #16]
 801180a:	426d      	negs	r5, r5
 801180c:	7013      	strb	r3, [r2, #0]
 801180e:	4b5f      	ldr	r3, [pc, #380]	; (801198c <_printf_i+0x218>)
 8011810:	270a      	movs	r7, #10
 8011812:	9303      	str	r3, [sp, #12]
 8011814:	e01b      	b.n	801184e <_printf_i+0xda>
 8011816:	6805      	ldr	r5, [r0, #0]
 8011818:	601a      	str	r2, [r3, #0]
 801181a:	0649      	lsls	r1, r1, #25
 801181c:	d5f1      	bpl.n	8011802 <_printf_i+0x8e>
 801181e:	b22d      	sxth	r5, r5
 8011820:	e7ef      	b.n	8011802 <_printf_i+0x8e>
 8011822:	680d      	ldr	r5, [r1, #0]
 8011824:	6819      	ldr	r1, [r3, #0]
 8011826:	1d08      	adds	r0, r1, #4
 8011828:	6018      	str	r0, [r3, #0]
 801182a:	062e      	lsls	r6, r5, #24
 801182c:	d501      	bpl.n	8011832 <_printf_i+0xbe>
 801182e:	680d      	ldr	r5, [r1, #0]
 8011830:	e003      	b.n	801183a <_printf_i+0xc6>
 8011832:	066d      	lsls	r5, r5, #25
 8011834:	d5fb      	bpl.n	801182e <_printf_i+0xba>
 8011836:	680d      	ldr	r5, [r1, #0]
 8011838:	b2ad      	uxth	r5, r5
 801183a:	4b54      	ldr	r3, [pc, #336]	; (801198c <_printf_i+0x218>)
 801183c:	2708      	movs	r7, #8
 801183e:	9303      	str	r3, [sp, #12]
 8011840:	2a6f      	cmp	r2, #111	; 0x6f
 8011842:	d000      	beq.n	8011846 <_printf_i+0xd2>
 8011844:	3702      	adds	r7, #2
 8011846:	0023      	movs	r3, r4
 8011848:	2200      	movs	r2, #0
 801184a:	3343      	adds	r3, #67	; 0x43
 801184c:	701a      	strb	r2, [r3, #0]
 801184e:	6863      	ldr	r3, [r4, #4]
 8011850:	60a3      	str	r3, [r4, #8]
 8011852:	2b00      	cmp	r3, #0
 8011854:	db03      	blt.n	801185e <_printf_i+0xea>
 8011856:	2104      	movs	r1, #4
 8011858:	6822      	ldr	r2, [r4, #0]
 801185a:	438a      	bics	r2, r1
 801185c:	6022      	str	r2, [r4, #0]
 801185e:	2d00      	cmp	r5, #0
 8011860:	d102      	bne.n	8011868 <_printf_i+0xf4>
 8011862:	9e04      	ldr	r6, [sp, #16]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00c      	beq.n	8011882 <_printf_i+0x10e>
 8011868:	9e04      	ldr	r6, [sp, #16]
 801186a:	0028      	movs	r0, r5
 801186c:	0039      	movs	r1, r7
 801186e:	f7ee fced 	bl	800024c <__aeabi_uidivmod>
 8011872:	9b03      	ldr	r3, [sp, #12]
 8011874:	3e01      	subs	r6, #1
 8011876:	5c5b      	ldrb	r3, [r3, r1]
 8011878:	7033      	strb	r3, [r6, #0]
 801187a:	002b      	movs	r3, r5
 801187c:	0005      	movs	r5, r0
 801187e:	429f      	cmp	r7, r3
 8011880:	d9f3      	bls.n	801186a <_printf_i+0xf6>
 8011882:	2f08      	cmp	r7, #8
 8011884:	d109      	bne.n	801189a <_printf_i+0x126>
 8011886:	6823      	ldr	r3, [r4, #0]
 8011888:	07db      	lsls	r3, r3, #31
 801188a:	d506      	bpl.n	801189a <_printf_i+0x126>
 801188c:	6862      	ldr	r2, [r4, #4]
 801188e:	6923      	ldr	r3, [r4, #16]
 8011890:	429a      	cmp	r2, r3
 8011892:	dc02      	bgt.n	801189a <_printf_i+0x126>
 8011894:	2330      	movs	r3, #48	; 0x30
 8011896:	3e01      	subs	r6, #1
 8011898:	7033      	strb	r3, [r6, #0]
 801189a:	9b04      	ldr	r3, [sp, #16]
 801189c:	1b9b      	subs	r3, r3, r6
 801189e:	6123      	str	r3, [r4, #16]
 80118a0:	9b07      	ldr	r3, [sp, #28]
 80118a2:	0021      	movs	r1, r4
 80118a4:	9300      	str	r3, [sp, #0]
 80118a6:	9805      	ldr	r0, [sp, #20]
 80118a8:	9b06      	ldr	r3, [sp, #24]
 80118aa:	aa09      	add	r2, sp, #36	; 0x24
 80118ac:	f7ff fef2 	bl	8011694 <_printf_common>
 80118b0:	3001      	adds	r0, #1
 80118b2:	d147      	bne.n	8011944 <_printf_i+0x1d0>
 80118b4:	2001      	movs	r0, #1
 80118b6:	4240      	negs	r0, r0
 80118b8:	b00b      	add	sp, #44	; 0x2c
 80118ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118bc:	2220      	movs	r2, #32
 80118be:	6809      	ldr	r1, [r1, #0]
 80118c0:	430a      	orrs	r2, r1
 80118c2:	6022      	str	r2, [r4, #0]
 80118c4:	2278      	movs	r2, #120	; 0x78
 80118c6:	4932      	ldr	r1, [pc, #200]	; (8011990 <_printf_i+0x21c>)
 80118c8:	9103      	str	r1, [sp, #12]
 80118ca:	0021      	movs	r1, r4
 80118cc:	3145      	adds	r1, #69	; 0x45
 80118ce:	700a      	strb	r2, [r1, #0]
 80118d0:	6819      	ldr	r1, [r3, #0]
 80118d2:	6822      	ldr	r2, [r4, #0]
 80118d4:	c920      	ldmia	r1!, {r5}
 80118d6:	0610      	lsls	r0, r2, #24
 80118d8:	d402      	bmi.n	80118e0 <_printf_i+0x16c>
 80118da:	0650      	lsls	r0, r2, #25
 80118dc:	d500      	bpl.n	80118e0 <_printf_i+0x16c>
 80118de:	b2ad      	uxth	r5, r5
 80118e0:	6019      	str	r1, [r3, #0]
 80118e2:	07d3      	lsls	r3, r2, #31
 80118e4:	d502      	bpl.n	80118ec <_printf_i+0x178>
 80118e6:	2320      	movs	r3, #32
 80118e8:	4313      	orrs	r3, r2
 80118ea:	6023      	str	r3, [r4, #0]
 80118ec:	2710      	movs	r7, #16
 80118ee:	2d00      	cmp	r5, #0
 80118f0:	d1a9      	bne.n	8011846 <_printf_i+0xd2>
 80118f2:	2220      	movs	r2, #32
 80118f4:	6823      	ldr	r3, [r4, #0]
 80118f6:	4393      	bics	r3, r2
 80118f8:	6023      	str	r3, [r4, #0]
 80118fa:	e7a4      	b.n	8011846 <_printf_i+0xd2>
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	680d      	ldr	r5, [r1, #0]
 8011900:	1d10      	adds	r0, r2, #4
 8011902:	6949      	ldr	r1, [r1, #20]
 8011904:	6018      	str	r0, [r3, #0]
 8011906:	6813      	ldr	r3, [r2, #0]
 8011908:	062e      	lsls	r6, r5, #24
 801190a:	d501      	bpl.n	8011910 <_printf_i+0x19c>
 801190c:	6019      	str	r1, [r3, #0]
 801190e:	e002      	b.n	8011916 <_printf_i+0x1a2>
 8011910:	066d      	lsls	r5, r5, #25
 8011912:	d5fb      	bpl.n	801190c <_printf_i+0x198>
 8011914:	8019      	strh	r1, [r3, #0]
 8011916:	2300      	movs	r3, #0
 8011918:	9e04      	ldr	r6, [sp, #16]
 801191a:	6123      	str	r3, [r4, #16]
 801191c:	e7c0      	b.n	80118a0 <_printf_i+0x12c>
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	1d11      	adds	r1, r2, #4
 8011922:	6019      	str	r1, [r3, #0]
 8011924:	6816      	ldr	r6, [r2, #0]
 8011926:	2100      	movs	r1, #0
 8011928:	0030      	movs	r0, r6
 801192a:	6862      	ldr	r2, [r4, #4]
 801192c:	f000 fd27 	bl	801237e <memchr>
 8011930:	2800      	cmp	r0, #0
 8011932:	d001      	beq.n	8011938 <_printf_i+0x1c4>
 8011934:	1b80      	subs	r0, r0, r6
 8011936:	6060      	str	r0, [r4, #4]
 8011938:	6863      	ldr	r3, [r4, #4]
 801193a:	6123      	str	r3, [r4, #16]
 801193c:	2300      	movs	r3, #0
 801193e:	9a04      	ldr	r2, [sp, #16]
 8011940:	7013      	strb	r3, [r2, #0]
 8011942:	e7ad      	b.n	80118a0 <_printf_i+0x12c>
 8011944:	0032      	movs	r2, r6
 8011946:	6923      	ldr	r3, [r4, #16]
 8011948:	9906      	ldr	r1, [sp, #24]
 801194a:	9805      	ldr	r0, [sp, #20]
 801194c:	9d07      	ldr	r5, [sp, #28]
 801194e:	47a8      	blx	r5
 8011950:	3001      	adds	r0, #1
 8011952:	d0af      	beq.n	80118b4 <_printf_i+0x140>
 8011954:	6823      	ldr	r3, [r4, #0]
 8011956:	079b      	lsls	r3, r3, #30
 8011958:	d415      	bmi.n	8011986 <_printf_i+0x212>
 801195a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801195c:	68e0      	ldr	r0, [r4, #12]
 801195e:	4298      	cmp	r0, r3
 8011960:	daaa      	bge.n	80118b8 <_printf_i+0x144>
 8011962:	0018      	movs	r0, r3
 8011964:	e7a8      	b.n	80118b8 <_printf_i+0x144>
 8011966:	0022      	movs	r2, r4
 8011968:	2301      	movs	r3, #1
 801196a:	9906      	ldr	r1, [sp, #24]
 801196c:	9805      	ldr	r0, [sp, #20]
 801196e:	9e07      	ldr	r6, [sp, #28]
 8011970:	3219      	adds	r2, #25
 8011972:	47b0      	blx	r6
 8011974:	3001      	adds	r0, #1
 8011976:	d09d      	beq.n	80118b4 <_printf_i+0x140>
 8011978:	3501      	adds	r5, #1
 801197a:	68e3      	ldr	r3, [r4, #12]
 801197c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801197e:	1a9b      	subs	r3, r3, r2
 8011980:	42ab      	cmp	r3, r5
 8011982:	dcf0      	bgt.n	8011966 <_printf_i+0x1f2>
 8011984:	e7e9      	b.n	801195a <_printf_i+0x1e6>
 8011986:	2500      	movs	r5, #0
 8011988:	e7f7      	b.n	801197a <_printf_i+0x206>
 801198a:	46c0      	nop			; (mov r8, r8)
 801198c:	0801751b 	.word	0x0801751b
 8011990:	0801752c 	.word	0x0801752c

08011994 <_scanf_float>:
 8011994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011996:	b08b      	sub	sp, #44	; 0x2c
 8011998:	0016      	movs	r6, r2
 801199a:	9002      	str	r0, [sp, #8]
 801199c:	22ae      	movs	r2, #174	; 0xae
 801199e:	2000      	movs	r0, #0
 80119a0:	9307      	str	r3, [sp, #28]
 80119a2:	688b      	ldr	r3, [r1, #8]
 80119a4:	000f      	movs	r7, r1
 80119a6:	1e59      	subs	r1, r3, #1
 80119a8:	0052      	lsls	r2, r2, #1
 80119aa:	9006      	str	r0, [sp, #24]
 80119ac:	4291      	cmp	r1, r2
 80119ae:	d905      	bls.n	80119bc <_scanf_float+0x28>
 80119b0:	3b5e      	subs	r3, #94	; 0x5e
 80119b2:	3bff      	subs	r3, #255	; 0xff
 80119b4:	9306      	str	r3, [sp, #24]
 80119b6:	235e      	movs	r3, #94	; 0x5e
 80119b8:	33ff      	adds	r3, #255	; 0xff
 80119ba:	60bb      	str	r3, [r7, #8]
 80119bc:	23f0      	movs	r3, #240	; 0xf0
 80119be:	683a      	ldr	r2, [r7, #0]
 80119c0:	00db      	lsls	r3, r3, #3
 80119c2:	4313      	orrs	r3, r2
 80119c4:	603b      	str	r3, [r7, #0]
 80119c6:	003b      	movs	r3, r7
 80119c8:	2400      	movs	r4, #0
 80119ca:	331c      	adds	r3, #28
 80119cc:	001d      	movs	r5, r3
 80119ce:	9304      	str	r3, [sp, #16]
 80119d0:	9403      	str	r4, [sp, #12]
 80119d2:	9409      	str	r4, [sp, #36]	; 0x24
 80119d4:	9408      	str	r4, [sp, #32]
 80119d6:	9401      	str	r4, [sp, #4]
 80119d8:	9405      	str	r4, [sp, #20]
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	2a00      	cmp	r2, #0
 80119de:	d00a      	beq.n	80119f6 <_scanf_float+0x62>
 80119e0:	6833      	ldr	r3, [r6, #0]
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	2b4e      	cmp	r3, #78	; 0x4e
 80119e6:	d844      	bhi.n	8011a72 <_scanf_float+0xde>
 80119e8:	0018      	movs	r0, r3
 80119ea:	2b40      	cmp	r3, #64	; 0x40
 80119ec:	d82c      	bhi.n	8011a48 <_scanf_float+0xb4>
 80119ee:	382b      	subs	r0, #43	; 0x2b
 80119f0:	b2c1      	uxtb	r1, r0
 80119f2:	290e      	cmp	r1, #14
 80119f4:	d92a      	bls.n	8011a4c <_scanf_float+0xb8>
 80119f6:	9b01      	ldr	r3, [sp, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d003      	beq.n	8011a04 <_scanf_float+0x70>
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	4aa3      	ldr	r2, [pc, #652]	; (8011c8c <_scanf_float+0x2f8>)
 8011a00:	4013      	ands	r3, r2
 8011a02:	603b      	str	r3, [r7, #0]
 8011a04:	9b03      	ldr	r3, [sp, #12]
 8011a06:	3b01      	subs	r3, #1
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d900      	bls.n	8011a0e <_scanf_float+0x7a>
 8011a0c:	e0f9      	b.n	8011c02 <_scanf_float+0x26e>
 8011a0e:	24be      	movs	r4, #190	; 0xbe
 8011a10:	0064      	lsls	r4, r4, #1
 8011a12:	9b04      	ldr	r3, [sp, #16]
 8011a14:	429d      	cmp	r5, r3
 8011a16:	d900      	bls.n	8011a1a <_scanf_float+0x86>
 8011a18:	e0e9      	b.n	8011bee <_scanf_float+0x25a>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	9303      	str	r3, [sp, #12]
 8011a1e:	e183      	b.n	8011d28 <_scanf_float+0x394>
 8011a20:	0018      	movs	r0, r3
 8011a22:	3861      	subs	r0, #97	; 0x61
 8011a24:	280d      	cmp	r0, #13
 8011a26:	d8e6      	bhi.n	80119f6 <_scanf_float+0x62>
 8011a28:	f7ee fb80 	bl	800012c <__gnu_thumb1_case_shi>
 8011a2c:	ffe50083 	.word	0xffe50083
 8011a30:	ffe5ffe5 	.word	0xffe5ffe5
 8011a34:	00a200b6 	.word	0x00a200b6
 8011a38:	ffe5ffe5 	.word	0xffe5ffe5
 8011a3c:	ffe50089 	.word	0xffe50089
 8011a40:	ffe5ffe5 	.word	0xffe5ffe5
 8011a44:	0065ffe5 	.word	0x0065ffe5
 8011a48:	3841      	subs	r0, #65	; 0x41
 8011a4a:	e7eb      	b.n	8011a24 <_scanf_float+0x90>
 8011a4c:	280e      	cmp	r0, #14
 8011a4e:	d8d2      	bhi.n	80119f6 <_scanf_float+0x62>
 8011a50:	f7ee fb6c 	bl	800012c <__gnu_thumb1_case_shi>
 8011a54:	ffd1004b 	.word	0xffd1004b
 8011a58:	0098004b 	.word	0x0098004b
 8011a5c:	0020ffd1 	.word	0x0020ffd1
 8011a60:	00400040 	.word	0x00400040
 8011a64:	00400040 	.word	0x00400040
 8011a68:	00400040 	.word	0x00400040
 8011a6c:	00400040 	.word	0x00400040
 8011a70:	0040      	.short	0x0040
 8011a72:	2b6e      	cmp	r3, #110	; 0x6e
 8011a74:	d809      	bhi.n	8011a8a <_scanf_float+0xf6>
 8011a76:	2b60      	cmp	r3, #96	; 0x60
 8011a78:	d8d2      	bhi.n	8011a20 <_scanf_float+0x8c>
 8011a7a:	2b54      	cmp	r3, #84	; 0x54
 8011a7c:	d07d      	beq.n	8011b7a <_scanf_float+0x1e6>
 8011a7e:	2b59      	cmp	r3, #89	; 0x59
 8011a80:	d1b9      	bne.n	80119f6 <_scanf_float+0x62>
 8011a82:	2c07      	cmp	r4, #7
 8011a84:	d1b7      	bne.n	80119f6 <_scanf_float+0x62>
 8011a86:	2408      	movs	r4, #8
 8011a88:	e02c      	b.n	8011ae4 <_scanf_float+0x150>
 8011a8a:	2b74      	cmp	r3, #116	; 0x74
 8011a8c:	d075      	beq.n	8011b7a <_scanf_float+0x1e6>
 8011a8e:	2b79      	cmp	r3, #121	; 0x79
 8011a90:	d0f7      	beq.n	8011a82 <_scanf_float+0xee>
 8011a92:	e7b0      	b.n	80119f6 <_scanf_float+0x62>
 8011a94:	6839      	ldr	r1, [r7, #0]
 8011a96:	05c8      	lsls	r0, r1, #23
 8011a98:	d51c      	bpl.n	8011ad4 <_scanf_float+0x140>
 8011a9a:	2380      	movs	r3, #128	; 0x80
 8011a9c:	4399      	bics	r1, r3
 8011a9e:	9b01      	ldr	r3, [sp, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	9b06      	ldr	r3, [sp, #24]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d003      	beq.n	8011ab4 <_scanf_float+0x120>
 8011aac:	3b01      	subs	r3, #1
 8011aae:	3201      	adds	r2, #1
 8011ab0:	9306      	str	r3, [sp, #24]
 8011ab2:	60ba      	str	r2, [r7, #8]
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	60bb      	str	r3, [r7, #8]
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	3301      	adds	r3, #1
 8011abe:	613b      	str	r3, [r7, #16]
 8011ac0:	6873      	ldr	r3, [r6, #4]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	6073      	str	r3, [r6, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	dc00      	bgt.n	8011acc <_scanf_float+0x138>
 8011aca:	e086      	b.n	8011bda <_scanf_float+0x246>
 8011acc:	6833      	ldr	r3, [r6, #0]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	6033      	str	r3, [r6, #0]
 8011ad2:	e782      	b.n	80119da <_scanf_float+0x46>
 8011ad4:	9a03      	ldr	r2, [sp, #12]
 8011ad6:	1912      	adds	r2, r2, r4
 8011ad8:	2a00      	cmp	r2, #0
 8011ada:	d18c      	bne.n	80119f6 <_scanf_float+0x62>
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	496c      	ldr	r1, [pc, #432]	; (8011c90 <_scanf_float+0x2fc>)
 8011ae0:	400a      	ands	r2, r1
 8011ae2:	603a      	str	r2, [r7, #0]
 8011ae4:	702b      	strb	r3, [r5, #0]
 8011ae6:	3501      	adds	r5, #1
 8011ae8:	e7e4      	b.n	8011ab4 <_scanf_float+0x120>
 8011aea:	2180      	movs	r1, #128	; 0x80
 8011aec:	683a      	ldr	r2, [r7, #0]
 8011aee:	420a      	tst	r2, r1
 8011af0:	d081      	beq.n	80119f6 <_scanf_float+0x62>
 8011af2:	438a      	bics	r2, r1
 8011af4:	e7f5      	b.n	8011ae2 <_scanf_float+0x14e>
 8011af6:	9a03      	ldr	r2, [sp, #12]
 8011af8:	2a00      	cmp	r2, #0
 8011afa:	d10f      	bne.n	8011b1c <_scanf_float+0x188>
 8011afc:	9a01      	ldr	r2, [sp, #4]
 8011afe:	2a00      	cmp	r2, #0
 8011b00:	d10f      	bne.n	8011b22 <_scanf_float+0x18e>
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	21e0      	movs	r1, #224	; 0xe0
 8011b06:	0010      	movs	r0, r2
 8011b08:	00c9      	lsls	r1, r1, #3
 8011b0a:	4008      	ands	r0, r1
 8011b0c:	4288      	cmp	r0, r1
 8011b0e:	d108      	bne.n	8011b22 <_scanf_float+0x18e>
 8011b10:	4960      	ldr	r1, [pc, #384]	; (8011c94 <_scanf_float+0x300>)
 8011b12:	400a      	ands	r2, r1
 8011b14:	603a      	str	r2, [r7, #0]
 8011b16:	2201      	movs	r2, #1
 8011b18:	9203      	str	r2, [sp, #12]
 8011b1a:	e7e3      	b.n	8011ae4 <_scanf_float+0x150>
 8011b1c:	9a03      	ldr	r2, [sp, #12]
 8011b1e:	2a02      	cmp	r2, #2
 8011b20:	d059      	beq.n	8011bd6 <_scanf_float+0x242>
 8011b22:	2c01      	cmp	r4, #1
 8011b24:	d002      	beq.n	8011b2c <_scanf_float+0x198>
 8011b26:	2c04      	cmp	r4, #4
 8011b28:	d000      	beq.n	8011b2c <_scanf_float+0x198>
 8011b2a:	e764      	b.n	80119f6 <_scanf_float+0x62>
 8011b2c:	3401      	adds	r4, #1
 8011b2e:	b2e4      	uxtb	r4, r4
 8011b30:	e7d8      	b.n	8011ae4 <_scanf_float+0x150>
 8011b32:	9a03      	ldr	r2, [sp, #12]
 8011b34:	2a01      	cmp	r2, #1
 8011b36:	d000      	beq.n	8011b3a <_scanf_float+0x1a6>
 8011b38:	e75d      	b.n	80119f6 <_scanf_float+0x62>
 8011b3a:	2202      	movs	r2, #2
 8011b3c:	e7ec      	b.n	8011b18 <_scanf_float+0x184>
 8011b3e:	2c00      	cmp	r4, #0
 8011b40:	d110      	bne.n	8011b64 <_scanf_float+0x1d0>
 8011b42:	9a01      	ldr	r2, [sp, #4]
 8011b44:	2a00      	cmp	r2, #0
 8011b46:	d000      	beq.n	8011b4a <_scanf_float+0x1b6>
 8011b48:	e758      	b.n	80119fc <_scanf_float+0x68>
 8011b4a:	683a      	ldr	r2, [r7, #0]
 8011b4c:	21e0      	movs	r1, #224	; 0xe0
 8011b4e:	0010      	movs	r0, r2
 8011b50:	00c9      	lsls	r1, r1, #3
 8011b52:	4008      	ands	r0, r1
 8011b54:	4288      	cmp	r0, r1
 8011b56:	d000      	beq.n	8011b5a <_scanf_float+0x1c6>
 8011b58:	e754      	b.n	8011a04 <_scanf_float+0x70>
 8011b5a:	494e      	ldr	r1, [pc, #312]	; (8011c94 <_scanf_float+0x300>)
 8011b5c:	3401      	adds	r4, #1
 8011b5e:	400a      	ands	r2, r1
 8011b60:	603a      	str	r2, [r7, #0]
 8011b62:	e7bf      	b.n	8011ae4 <_scanf_float+0x150>
 8011b64:	21fd      	movs	r1, #253	; 0xfd
 8011b66:	1ee2      	subs	r2, r4, #3
 8011b68:	420a      	tst	r2, r1
 8011b6a:	d000      	beq.n	8011b6e <_scanf_float+0x1da>
 8011b6c:	e743      	b.n	80119f6 <_scanf_float+0x62>
 8011b6e:	e7dd      	b.n	8011b2c <_scanf_float+0x198>
 8011b70:	2c02      	cmp	r4, #2
 8011b72:	d000      	beq.n	8011b76 <_scanf_float+0x1e2>
 8011b74:	e73f      	b.n	80119f6 <_scanf_float+0x62>
 8011b76:	2403      	movs	r4, #3
 8011b78:	e7b4      	b.n	8011ae4 <_scanf_float+0x150>
 8011b7a:	2c06      	cmp	r4, #6
 8011b7c:	d000      	beq.n	8011b80 <_scanf_float+0x1ec>
 8011b7e:	e73a      	b.n	80119f6 <_scanf_float+0x62>
 8011b80:	2407      	movs	r4, #7
 8011b82:	e7af      	b.n	8011ae4 <_scanf_float+0x150>
 8011b84:	683a      	ldr	r2, [r7, #0]
 8011b86:	0591      	lsls	r1, r2, #22
 8011b88:	d400      	bmi.n	8011b8c <_scanf_float+0x1f8>
 8011b8a:	e734      	b.n	80119f6 <_scanf_float+0x62>
 8011b8c:	4942      	ldr	r1, [pc, #264]	; (8011c98 <_scanf_float+0x304>)
 8011b8e:	400a      	ands	r2, r1
 8011b90:	603a      	str	r2, [r7, #0]
 8011b92:	9a01      	ldr	r2, [sp, #4]
 8011b94:	9205      	str	r2, [sp, #20]
 8011b96:	e7a5      	b.n	8011ae4 <_scanf_float+0x150>
 8011b98:	21a0      	movs	r1, #160	; 0xa0
 8011b9a:	2080      	movs	r0, #128	; 0x80
 8011b9c:	683a      	ldr	r2, [r7, #0]
 8011b9e:	00c9      	lsls	r1, r1, #3
 8011ba0:	4011      	ands	r1, r2
 8011ba2:	00c0      	lsls	r0, r0, #3
 8011ba4:	4281      	cmp	r1, r0
 8011ba6:	d006      	beq.n	8011bb6 <_scanf_float+0x222>
 8011ba8:	4202      	tst	r2, r0
 8011baa:	d100      	bne.n	8011bae <_scanf_float+0x21a>
 8011bac:	e723      	b.n	80119f6 <_scanf_float+0x62>
 8011bae:	9901      	ldr	r1, [sp, #4]
 8011bb0:	2900      	cmp	r1, #0
 8011bb2:	d100      	bne.n	8011bb6 <_scanf_float+0x222>
 8011bb4:	e726      	b.n	8011a04 <_scanf_float+0x70>
 8011bb6:	0591      	lsls	r1, r2, #22
 8011bb8:	d404      	bmi.n	8011bc4 <_scanf_float+0x230>
 8011bba:	9901      	ldr	r1, [sp, #4]
 8011bbc:	9805      	ldr	r0, [sp, #20]
 8011bbe:	9509      	str	r5, [sp, #36]	; 0x24
 8011bc0:	1a09      	subs	r1, r1, r0
 8011bc2:	9108      	str	r1, [sp, #32]
 8011bc4:	4933      	ldr	r1, [pc, #204]	; (8011c94 <_scanf_float+0x300>)
 8011bc6:	400a      	ands	r2, r1
 8011bc8:	21c0      	movs	r1, #192	; 0xc0
 8011bca:	0049      	lsls	r1, r1, #1
 8011bcc:	430a      	orrs	r2, r1
 8011bce:	603a      	str	r2, [r7, #0]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	9201      	str	r2, [sp, #4]
 8011bd4:	e786      	b.n	8011ae4 <_scanf_float+0x150>
 8011bd6:	2203      	movs	r2, #3
 8011bd8:	e79e      	b.n	8011b18 <_scanf_float+0x184>
 8011bda:	23c0      	movs	r3, #192	; 0xc0
 8011bdc:	005b      	lsls	r3, r3, #1
 8011bde:	0031      	movs	r1, r6
 8011be0:	58fb      	ldr	r3, [r7, r3]
 8011be2:	9802      	ldr	r0, [sp, #8]
 8011be4:	4798      	blx	r3
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d100      	bne.n	8011bec <_scanf_float+0x258>
 8011bea:	e6f6      	b.n	80119da <_scanf_float+0x46>
 8011bec:	e703      	b.n	80119f6 <_scanf_float+0x62>
 8011bee:	3d01      	subs	r5, #1
 8011bf0:	593b      	ldr	r3, [r7, r4]
 8011bf2:	0032      	movs	r2, r6
 8011bf4:	7829      	ldrb	r1, [r5, #0]
 8011bf6:	9802      	ldr	r0, [sp, #8]
 8011bf8:	4798      	blx	r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	613b      	str	r3, [r7, #16]
 8011c00:	e707      	b.n	8011a12 <_scanf_float+0x7e>
 8011c02:	1e63      	subs	r3, r4, #1
 8011c04:	2b06      	cmp	r3, #6
 8011c06:	d80e      	bhi.n	8011c26 <_scanf_float+0x292>
 8011c08:	9503      	str	r5, [sp, #12]
 8011c0a:	2c02      	cmp	r4, #2
 8011c0c:	d920      	bls.n	8011c50 <_scanf_float+0x2bc>
 8011c0e:	1b63      	subs	r3, r4, r5
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	9306      	str	r3, [sp, #24]
 8011c14:	9b03      	ldr	r3, [sp, #12]
 8011c16:	9a06      	ldr	r2, [sp, #24]
 8011c18:	189b      	adds	r3, r3, r2
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	2b03      	cmp	r3, #3
 8011c1e:	d827      	bhi.n	8011c70 <_scanf_float+0x2dc>
 8011c20:	3c03      	subs	r4, #3
 8011c22:	b2e4      	uxtb	r4, r4
 8011c24:	1b2d      	subs	r5, r5, r4
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	05da      	lsls	r2, r3, #23
 8011c2a:	d552      	bpl.n	8011cd2 <_scanf_float+0x33e>
 8011c2c:	055b      	lsls	r3, r3, #21
 8011c2e:	d535      	bpl.n	8011c9c <_scanf_float+0x308>
 8011c30:	24be      	movs	r4, #190	; 0xbe
 8011c32:	0064      	lsls	r4, r4, #1
 8011c34:	9b04      	ldr	r3, [sp, #16]
 8011c36:	429d      	cmp	r5, r3
 8011c38:	d800      	bhi.n	8011c3c <_scanf_float+0x2a8>
 8011c3a:	e6ee      	b.n	8011a1a <_scanf_float+0x86>
 8011c3c:	3d01      	subs	r5, #1
 8011c3e:	593b      	ldr	r3, [r7, r4]
 8011c40:	0032      	movs	r2, r6
 8011c42:	7829      	ldrb	r1, [r5, #0]
 8011c44:	9802      	ldr	r0, [sp, #8]
 8011c46:	4798      	blx	r3
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	3b01      	subs	r3, #1
 8011c4c:	613b      	str	r3, [r7, #16]
 8011c4e:	e7f1      	b.n	8011c34 <_scanf_float+0x2a0>
 8011c50:	24be      	movs	r4, #190	; 0xbe
 8011c52:	0064      	lsls	r4, r4, #1
 8011c54:	9b04      	ldr	r3, [sp, #16]
 8011c56:	429d      	cmp	r5, r3
 8011c58:	d800      	bhi.n	8011c5c <_scanf_float+0x2c8>
 8011c5a:	e6de      	b.n	8011a1a <_scanf_float+0x86>
 8011c5c:	3d01      	subs	r5, #1
 8011c5e:	593b      	ldr	r3, [r7, r4]
 8011c60:	0032      	movs	r2, r6
 8011c62:	7829      	ldrb	r1, [r5, #0]
 8011c64:	9802      	ldr	r0, [sp, #8]
 8011c66:	4798      	blx	r3
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	613b      	str	r3, [r7, #16]
 8011c6e:	e7f1      	b.n	8011c54 <_scanf_float+0x2c0>
 8011c70:	9b03      	ldr	r3, [sp, #12]
 8011c72:	0032      	movs	r2, r6
 8011c74:	3b01      	subs	r3, #1
 8011c76:	7819      	ldrb	r1, [r3, #0]
 8011c78:	9303      	str	r3, [sp, #12]
 8011c7a:	23be      	movs	r3, #190	; 0xbe
 8011c7c:	005b      	lsls	r3, r3, #1
 8011c7e:	58fb      	ldr	r3, [r7, r3]
 8011c80:	9802      	ldr	r0, [sp, #8]
 8011c82:	4798      	blx	r3
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	3b01      	subs	r3, #1
 8011c88:	613b      	str	r3, [r7, #16]
 8011c8a:	e7c3      	b.n	8011c14 <_scanf_float+0x280>
 8011c8c:	fffffeff 	.word	0xfffffeff
 8011c90:	fffffe7f 	.word	0xfffffe7f
 8011c94:	fffff87f 	.word	0xfffff87f
 8011c98:	fffffd7f 	.word	0xfffffd7f
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	1e6c      	subs	r4, r5, #1
 8011ca0:	7821      	ldrb	r1, [r4, #0]
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	613b      	str	r3, [r7, #16]
 8011ca6:	2965      	cmp	r1, #101	; 0x65
 8011ca8:	d00c      	beq.n	8011cc4 <_scanf_float+0x330>
 8011caa:	2945      	cmp	r1, #69	; 0x45
 8011cac:	d00a      	beq.n	8011cc4 <_scanf_float+0x330>
 8011cae:	23be      	movs	r3, #190	; 0xbe
 8011cb0:	005b      	lsls	r3, r3, #1
 8011cb2:	58fb      	ldr	r3, [r7, r3]
 8011cb4:	0032      	movs	r2, r6
 8011cb6:	9802      	ldr	r0, [sp, #8]
 8011cb8:	4798      	blx	r3
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	1eac      	subs	r4, r5, #2
 8011cbe:	3b01      	subs	r3, #1
 8011cc0:	7821      	ldrb	r1, [r4, #0]
 8011cc2:	613b      	str	r3, [r7, #16]
 8011cc4:	23be      	movs	r3, #190	; 0xbe
 8011cc6:	005b      	lsls	r3, r3, #1
 8011cc8:	0032      	movs	r2, r6
 8011cca:	58fb      	ldr	r3, [r7, r3]
 8011ccc:	9802      	ldr	r0, [sp, #8]
 8011cce:	4798      	blx	r3
 8011cd0:	0025      	movs	r5, r4
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	2310      	movs	r3, #16
 8011cd6:	0011      	movs	r1, r2
 8011cd8:	4019      	ands	r1, r3
 8011cda:	9103      	str	r1, [sp, #12]
 8011cdc:	421a      	tst	r2, r3
 8011cde:	d15b      	bne.n	8011d98 <_scanf_float+0x404>
 8011ce0:	22c0      	movs	r2, #192	; 0xc0
 8011ce2:	7029      	strb	r1, [r5, #0]
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	00d2      	lsls	r2, r2, #3
 8011ce8:	4013      	ands	r3, r2
 8011cea:	2280      	movs	r2, #128	; 0x80
 8011cec:	00d2      	lsls	r2, r2, #3
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d11d      	bne.n	8011d2e <_scanf_float+0x39a>
 8011cf2:	9b05      	ldr	r3, [sp, #20]
 8011cf4:	9a01      	ldr	r2, [sp, #4]
 8011cf6:	9901      	ldr	r1, [sp, #4]
 8011cf8:	1a9a      	subs	r2, r3, r2
 8011cfa:	428b      	cmp	r3, r1
 8011cfc:	d124      	bne.n	8011d48 <_scanf_float+0x3b4>
 8011cfe:	2200      	movs	r2, #0
 8011d00:	9904      	ldr	r1, [sp, #16]
 8011d02:	9802      	ldr	r0, [sp, #8]
 8011d04:	f7ff f91c 	bl	8010f40 <_strtod_r>
 8011d08:	9b07      	ldr	r3, [sp, #28]
 8011d0a:	683a      	ldr	r2, [r7, #0]
 8011d0c:	0004      	movs	r4, r0
 8011d0e:	000d      	movs	r5, r1
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	0791      	lsls	r1, r2, #30
 8011d14:	d525      	bpl.n	8011d62 <_scanf_float+0x3ce>
 8011d16:	9907      	ldr	r1, [sp, #28]
 8011d18:	1d1a      	adds	r2, r3, #4
 8011d1a:	600a      	str	r2, [r1, #0]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	601c      	str	r4, [r3, #0]
 8011d20:	605d      	str	r5, [r3, #4]
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	3301      	adds	r3, #1
 8011d26:	60fb      	str	r3, [r7, #12]
 8011d28:	9803      	ldr	r0, [sp, #12]
 8011d2a:	b00b      	add	sp, #44	; 0x2c
 8011d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d2e:	9b08      	ldr	r3, [sp, #32]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d0e4      	beq.n	8011cfe <_scanf_float+0x36a>
 8011d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d36:	9a03      	ldr	r2, [sp, #12]
 8011d38:	1c59      	adds	r1, r3, #1
 8011d3a:	9802      	ldr	r0, [sp, #8]
 8011d3c:	230a      	movs	r3, #10
 8011d3e:	f7ff f99b 	bl	8011078 <_strtol_r>
 8011d42:	9b08      	ldr	r3, [sp, #32]
 8011d44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011d46:	1ac2      	subs	r2, r0, r3
 8011d48:	003b      	movs	r3, r7
 8011d4a:	3370      	adds	r3, #112	; 0x70
 8011d4c:	33ff      	adds	r3, #255	; 0xff
 8011d4e:	429d      	cmp	r5, r3
 8011d50:	d302      	bcc.n	8011d58 <_scanf_float+0x3c4>
 8011d52:	003d      	movs	r5, r7
 8011d54:	356f      	adds	r5, #111	; 0x6f
 8011d56:	35ff      	adds	r5, #255	; 0xff
 8011d58:	0028      	movs	r0, r5
 8011d5a:	4910      	ldr	r1, [pc, #64]	; (8011d9c <_scanf_float+0x408>)
 8011d5c:	f000 f8e6 	bl	8011f2c <siprintf>
 8011d60:	e7cd      	b.n	8011cfe <_scanf_float+0x36a>
 8011d62:	1d19      	adds	r1, r3, #4
 8011d64:	0752      	lsls	r2, r2, #29
 8011d66:	d502      	bpl.n	8011d6e <_scanf_float+0x3da>
 8011d68:	9a07      	ldr	r2, [sp, #28]
 8011d6a:	6011      	str	r1, [r2, #0]
 8011d6c:	e7d6      	b.n	8011d1c <_scanf_float+0x388>
 8011d6e:	9a07      	ldr	r2, [sp, #28]
 8011d70:	0020      	movs	r0, r4
 8011d72:	6011      	str	r1, [r2, #0]
 8011d74:	681e      	ldr	r6, [r3, #0]
 8011d76:	0022      	movs	r2, r4
 8011d78:	002b      	movs	r3, r5
 8011d7a:	0029      	movs	r1, r5
 8011d7c:	f7f1 f8ee 	bl	8002f5c <__aeabi_dcmpun>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	d004      	beq.n	8011d8e <_scanf_float+0x3fa>
 8011d84:	4806      	ldr	r0, [pc, #24]	; (8011da0 <_scanf_float+0x40c>)
 8011d86:	f000 fb15 	bl	80123b4 <nanf>
 8011d8a:	6030      	str	r0, [r6, #0]
 8011d8c:	e7c9      	b.n	8011d22 <_scanf_float+0x38e>
 8011d8e:	0020      	movs	r0, r4
 8011d90:	0029      	movs	r1, r5
 8011d92:	f7f1 f9d5 	bl	8003140 <__aeabi_d2f>
 8011d96:	e7f8      	b.n	8011d8a <_scanf_float+0x3f6>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	e63f      	b.n	8011a1c <_scanf_float+0x88>
 8011d9c:	0801753d 	.word	0x0801753d
 8011da0:	080175f6 	.word	0x080175f6

08011da4 <std>:
 8011da4:	2300      	movs	r3, #0
 8011da6:	b510      	push	{r4, lr}
 8011da8:	0004      	movs	r4, r0
 8011daa:	6003      	str	r3, [r0, #0]
 8011dac:	6043      	str	r3, [r0, #4]
 8011dae:	6083      	str	r3, [r0, #8]
 8011db0:	8181      	strh	r1, [r0, #12]
 8011db2:	6643      	str	r3, [r0, #100]	; 0x64
 8011db4:	81c2      	strh	r2, [r0, #14]
 8011db6:	6103      	str	r3, [r0, #16]
 8011db8:	6143      	str	r3, [r0, #20]
 8011dba:	6183      	str	r3, [r0, #24]
 8011dbc:	0019      	movs	r1, r3
 8011dbe:	2208      	movs	r2, #8
 8011dc0:	305c      	adds	r0, #92	; 0x5c
 8011dc2:	f000 f91f 	bl	8012004 <memset>
 8011dc6:	4b0b      	ldr	r3, [pc, #44]	; (8011df4 <std+0x50>)
 8011dc8:	6224      	str	r4, [r4, #32]
 8011dca:	6263      	str	r3, [r4, #36]	; 0x24
 8011dcc:	4b0a      	ldr	r3, [pc, #40]	; (8011df8 <std+0x54>)
 8011dce:	62a3      	str	r3, [r4, #40]	; 0x28
 8011dd0:	4b0a      	ldr	r3, [pc, #40]	; (8011dfc <std+0x58>)
 8011dd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011dd4:	4b0a      	ldr	r3, [pc, #40]	; (8011e00 <std+0x5c>)
 8011dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8011dd8:	4b0a      	ldr	r3, [pc, #40]	; (8011e04 <std+0x60>)
 8011dda:	429c      	cmp	r4, r3
 8011ddc:	d005      	beq.n	8011dea <std+0x46>
 8011dde:	4b0a      	ldr	r3, [pc, #40]	; (8011e08 <std+0x64>)
 8011de0:	429c      	cmp	r4, r3
 8011de2:	d002      	beq.n	8011dea <std+0x46>
 8011de4:	4b09      	ldr	r3, [pc, #36]	; (8011e0c <std+0x68>)
 8011de6:	429c      	cmp	r4, r3
 8011de8:	d103      	bne.n	8011df2 <std+0x4e>
 8011dea:	0020      	movs	r0, r4
 8011dec:	3058      	adds	r0, #88	; 0x58
 8011dee:	f000 fabb 	bl	8012368 <__retarget_lock_init_recursive>
 8011df2:	bd10      	pop	{r4, pc}
 8011df4:	08011f6d 	.word	0x08011f6d
 8011df8:	08011f95 	.word	0x08011f95
 8011dfc:	08011fcd 	.word	0x08011fcd
 8011e00:	08011ff9 	.word	0x08011ff9
 8011e04:	200054e8 	.word	0x200054e8
 8011e08:	20005550 	.word	0x20005550
 8011e0c:	200055b8 	.word	0x200055b8

08011e10 <stdio_exit_handler>:
 8011e10:	b510      	push	{r4, lr}
 8011e12:	4a03      	ldr	r2, [pc, #12]	; (8011e20 <stdio_exit_handler+0x10>)
 8011e14:	4903      	ldr	r1, [pc, #12]	; (8011e24 <stdio_exit_handler+0x14>)
 8011e16:	4804      	ldr	r0, [pc, #16]	; (8011e28 <stdio_exit_handler+0x18>)
 8011e18:	f000 f86c 	bl	8011ef4 <_fwalk_sglue>
 8011e1c:	bd10      	pop	{r4, pc}
 8011e1e:	46c0      	nop			; (mov r8, r8)
 8011e20:	200000f0 	.word	0x200000f0
 8011e24:	0801460d 	.word	0x0801460d
 8011e28:	20000268 	.word	0x20000268

08011e2c <cleanup_stdio>:
 8011e2c:	6841      	ldr	r1, [r0, #4]
 8011e2e:	4b0b      	ldr	r3, [pc, #44]	; (8011e5c <cleanup_stdio+0x30>)
 8011e30:	b510      	push	{r4, lr}
 8011e32:	0004      	movs	r4, r0
 8011e34:	4299      	cmp	r1, r3
 8011e36:	d001      	beq.n	8011e3c <cleanup_stdio+0x10>
 8011e38:	f002 fbe8 	bl	801460c <_fflush_r>
 8011e3c:	68a1      	ldr	r1, [r4, #8]
 8011e3e:	4b08      	ldr	r3, [pc, #32]	; (8011e60 <cleanup_stdio+0x34>)
 8011e40:	4299      	cmp	r1, r3
 8011e42:	d002      	beq.n	8011e4a <cleanup_stdio+0x1e>
 8011e44:	0020      	movs	r0, r4
 8011e46:	f002 fbe1 	bl	801460c <_fflush_r>
 8011e4a:	68e1      	ldr	r1, [r4, #12]
 8011e4c:	4b05      	ldr	r3, [pc, #20]	; (8011e64 <cleanup_stdio+0x38>)
 8011e4e:	4299      	cmp	r1, r3
 8011e50:	d002      	beq.n	8011e58 <cleanup_stdio+0x2c>
 8011e52:	0020      	movs	r0, r4
 8011e54:	f002 fbda 	bl	801460c <_fflush_r>
 8011e58:	bd10      	pop	{r4, pc}
 8011e5a:	46c0      	nop			; (mov r8, r8)
 8011e5c:	200054e8 	.word	0x200054e8
 8011e60:	20005550 	.word	0x20005550
 8011e64:	200055b8 	.word	0x200055b8

08011e68 <global_stdio_init.part.0>:
 8011e68:	b510      	push	{r4, lr}
 8011e6a:	4b09      	ldr	r3, [pc, #36]	; (8011e90 <global_stdio_init.part.0+0x28>)
 8011e6c:	4a09      	ldr	r2, [pc, #36]	; (8011e94 <global_stdio_init.part.0+0x2c>)
 8011e6e:	2104      	movs	r1, #4
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	4809      	ldr	r0, [pc, #36]	; (8011e98 <global_stdio_init.part.0+0x30>)
 8011e74:	2200      	movs	r2, #0
 8011e76:	f7ff ff95 	bl	8011da4 <std>
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	2109      	movs	r1, #9
 8011e7e:	4807      	ldr	r0, [pc, #28]	; (8011e9c <global_stdio_init.part.0+0x34>)
 8011e80:	f7ff ff90 	bl	8011da4 <std>
 8011e84:	2202      	movs	r2, #2
 8011e86:	2112      	movs	r1, #18
 8011e88:	4805      	ldr	r0, [pc, #20]	; (8011ea0 <global_stdio_init.part.0+0x38>)
 8011e8a:	f7ff ff8b 	bl	8011da4 <std>
 8011e8e:	bd10      	pop	{r4, pc}
 8011e90:	20005620 	.word	0x20005620
 8011e94:	08011e11 	.word	0x08011e11
 8011e98:	200054e8 	.word	0x200054e8
 8011e9c:	20005550 	.word	0x20005550
 8011ea0:	200055b8 	.word	0x200055b8

08011ea4 <__sfp_lock_acquire>:
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	4802      	ldr	r0, [pc, #8]	; (8011eb0 <__sfp_lock_acquire+0xc>)
 8011ea8:	f000 fa5f 	bl	801236a <__retarget_lock_acquire_recursive>
 8011eac:	bd10      	pop	{r4, pc}
 8011eae:	46c0      	nop			; (mov r8, r8)
 8011eb0:	20005629 	.word	0x20005629

08011eb4 <__sfp_lock_release>:
 8011eb4:	b510      	push	{r4, lr}
 8011eb6:	4802      	ldr	r0, [pc, #8]	; (8011ec0 <__sfp_lock_release+0xc>)
 8011eb8:	f000 fa58 	bl	801236c <__retarget_lock_release_recursive>
 8011ebc:	bd10      	pop	{r4, pc}
 8011ebe:	46c0      	nop			; (mov r8, r8)
 8011ec0:	20005629 	.word	0x20005629

08011ec4 <__sinit>:
 8011ec4:	b510      	push	{r4, lr}
 8011ec6:	0004      	movs	r4, r0
 8011ec8:	f7ff ffec 	bl	8011ea4 <__sfp_lock_acquire>
 8011ecc:	6a23      	ldr	r3, [r4, #32]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d002      	beq.n	8011ed8 <__sinit+0x14>
 8011ed2:	f7ff ffef 	bl	8011eb4 <__sfp_lock_release>
 8011ed6:	bd10      	pop	{r4, pc}
 8011ed8:	4b04      	ldr	r3, [pc, #16]	; (8011eec <__sinit+0x28>)
 8011eda:	6223      	str	r3, [r4, #32]
 8011edc:	4b04      	ldr	r3, [pc, #16]	; (8011ef0 <__sinit+0x2c>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d1f6      	bne.n	8011ed2 <__sinit+0xe>
 8011ee4:	f7ff ffc0 	bl	8011e68 <global_stdio_init.part.0>
 8011ee8:	e7f3      	b.n	8011ed2 <__sinit+0xe>
 8011eea:	46c0      	nop			; (mov r8, r8)
 8011eec:	08011e2d 	.word	0x08011e2d
 8011ef0:	20005620 	.word	0x20005620

08011ef4 <_fwalk_sglue>:
 8011ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ef6:	0014      	movs	r4, r2
 8011ef8:	2600      	movs	r6, #0
 8011efa:	9000      	str	r0, [sp, #0]
 8011efc:	9101      	str	r1, [sp, #4]
 8011efe:	68a5      	ldr	r5, [r4, #8]
 8011f00:	6867      	ldr	r7, [r4, #4]
 8011f02:	3f01      	subs	r7, #1
 8011f04:	d504      	bpl.n	8011f10 <_fwalk_sglue+0x1c>
 8011f06:	6824      	ldr	r4, [r4, #0]
 8011f08:	2c00      	cmp	r4, #0
 8011f0a:	d1f8      	bne.n	8011efe <_fwalk_sglue+0xa>
 8011f0c:	0030      	movs	r0, r6
 8011f0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011f10:	89ab      	ldrh	r3, [r5, #12]
 8011f12:	2b01      	cmp	r3, #1
 8011f14:	d908      	bls.n	8011f28 <_fwalk_sglue+0x34>
 8011f16:	220e      	movs	r2, #14
 8011f18:	5eab      	ldrsh	r3, [r5, r2]
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	d004      	beq.n	8011f28 <_fwalk_sglue+0x34>
 8011f1e:	0029      	movs	r1, r5
 8011f20:	9800      	ldr	r0, [sp, #0]
 8011f22:	9b01      	ldr	r3, [sp, #4]
 8011f24:	4798      	blx	r3
 8011f26:	4306      	orrs	r6, r0
 8011f28:	3568      	adds	r5, #104	; 0x68
 8011f2a:	e7ea      	b.n	8011f02 <_fwalk_sglue+0xe>

08011f2c <siprintf>:
 8011f2c:	b40e      	push	{r1, r2, r3}
 8011f2e:	b500      	push	{lr}
 8011f30:	490b      	ldr	r1, [pc, #44]	; (8011f60 <siprintf+0x34>)
 8011f32:	b09c      	sub	sp, #112	; 0x70
 8011f34:	ab1d      	add	r3, sp, #116	; 0x74
 8011f36:	9002      	str	r0, [sp, #8]
 8011f38:	9006      	str	r0, [sp, #24]
 8011f3a:	9107      	str	r1, [sp, #28]
 8011f3c:	9104      	str	r1, [sp, #16]
 8011f3e:	4809      	ldr	r0, [pc, #36]	; (8011f64 <siprintf+0x38>)
 8011f40:	4909      	ldr	r1, [pc, #36]	; (8011f68 <siprintf+0x3c>)
 8011f42:	cb04      	ldmia	r3!, {r2}
 8011f44:	9105      	str	r1, [sp, #20]
 8011f46:	6800      	ldr	r0, [r0, #0]
 8011f48:	a902      	add	r1, sp, #8
 8011f4a:	9301      	str	r3, [sp, #4]
 8011f4c:	f002 f9d4 	bl	80142f8 <_svfiprintf_r>
 8011f50:	2200      	movs	r2, #0
 8011f52:	9b02      	ldr	r3, [sp, #8]
 8011f54:	701a      	strb	r2, [r3, #0]
 8011f56:	b01c      	add	sp, #112	; 0x70
 8011f58:	bc08      	pop	{r3}
 8011f5a:	b003      	add	sp, #12
 8011f5c:	4718      	bx	r3
 8011f5e:	46c0      	nop			; (mov r8, r8)
 8011f60:	7fffffff 	.word	0x7fffffff
 8011f64:	200002b4 	.word	0x200002b4
 8011f68:	ffff0208 	.word	0xffff0208

08011f6c <__sread>:
 8011f6c:	b570      	push	{r4, r5, r6, lr}
 8011f6e:	000c      	movs	r4, r1
 8011f70:	250e      	movs	r5, #14
 8011f72:	5f49      	ldrsh	r1, [r1, r5]
 8011f74:	f000 f994 	bl	80122a0 <_read_r>
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	db03      	blt.n	8011f84 <__sread+0x18>
 8011f7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011f7e:	181b      	adds	r3, r3, r0
 8011f80:	6563      	str	r3, [r4, #84]	; 0x54
 8011f82:	bd70      	pop	{r4, r5, r6, pc}
 8011f84:	89a3      	ldrh	r3, [r4, #12]
 8011f86:	4a02      	ldr	r2, [pc, #8]	; (8011f90 <__sread+0x24>)
 8011f88:	4013      	ands	r3, r2
 8011f8a:	81a3      	strh	r3, [r4, #12]
 8011f8c:	e7f9      	b.n	8011f82 <__sread+0x16>
 8011f8e:	46c0      	nop			; (mov r8, r8)
 8011f90:	ffffefff 	.word	0xffffefff

08011f94 <__swrite>:
 8011f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f96:	001f      	movs	r7, r3
 8011f98:	898b      	ldrh	r3, [r1, #12]
 8011f9a:	0005      	movs	r5, r0
 8011f9c:	000c      	movs	r4, r1
 8011f9e:	0016      	movs	r6, r2
 8011fa0:	05db      	lsls	r3, r3, #23
 8011fa2:	d505      	bpl.n	8011fb0 <__swrite+0x1c>
 8011fa4:	230e      	movs	r3, #14
 8011fa6:	5ec9      	ldrsh	r1, [r1, r3]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	2302      	movs	r3, #2
 8011fac:	f000 f964 	bl	8012278 <_lseek_r>
 8011fb0:	89a3      	ldrh	r3, [r4, #12]
 8011fb2:	4a05      	ldr	r2, [pc, #20]	; (8011fc8 <__swrite+0x34>)
 8011fb4:	0028      	movs	r0, r5
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	81a3      	strh	r3, [r4, #12]
 8011fba:	0032      	movs	r2, r6
 8011fbc:	230e      	movs	r3, #14
 8011fbe:	5ee1      	ldrsh	r1, [r4, r3]
 8011fc0:	003b      	movs	r3, r7
 8011fc2:	f000 f993 	bl	80122ec <_write_r>
 8011fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc8:	ffffefff 	.word	0xffffefff

08011fcc <__sseek>:
 8011fcc:	b570      	push	{r4, r5, r6, lr}
 8011fce:	000c      	movs	r4, r1
 8011fd0:	250e      	movs	r5, #14
 8011fd2:	5f49      	ldrsh	r1, [r1, r5]
 8011fd4:	f000 f950 	bl	8012278 <_lseek_r>
 8011fd8:	89a3      	ldrh	r3, [r4, #12]
 8011fda:	1c42      	adds	r2, r0, #1
 8011fdc:	d103      	bne.n	8011fe6 <__sseek+0x1a>
 8011fde:	4a05      	ldr	r2, [pc, #20]	; (8011ff4 <__sseek+0x28>)
 8011fe0:	4013      	ands	r3, r2
 8011fe2:	81a3      	strh	r3, [r4, #12]
 8011fe4:	bd70      	pop	{r4, r5, r6, pc}
 8011fe6:	2280      	movs	r2, #128	; 0x80
 8011fe8:	0152      	lsls	r2, r2, #5
 8011fea:	4313      	orrs	r3, r2
 8011fec:	81a3      	strh	r3, [r4, #12]
 8011fee:	6560      	str	r0, [r4, #84]	; 0x54
 8011ff0:	e7f8      	b.n	8011fe4 <__sseek+0x18>
 8011ff2:	46c0      	nop			; (mov r8, r8)
 8011ff4:	ffffefff 	.word	0xffffefff

08011ff8 <__sclose>:
 8011ff8:	b510      	push	{r4, lr}
 8011ffa:	230e      	movs	r3, #14
 8011ffc:	5ec9      	ldrsh	r1, [r1, r3]
 8011ffe:	f000 f8cb 	bl	8012198 <_close_r>
 8012002:	bd10      	pop	{r4, pc}

08012004 <memset>:
 8012004:	0003      	movs	r3, r0
 8012006:	1882      	adds	r2, r0, r2
 8012008:	4293      	cmp	r3, r2
 801200a:	d100      	bne.n	801200e <memset+0xa>
 801200c:	4770      	bx	lr
 801200e:	7019      	strb	r1, [r3, #0]
 8012010:	3301      	adds	r3, #1
 8012012:	e7f9      	b.n	8012008 <memset+0x4>

08012014 <strcat>:
 8012014:	0002      	movs	r2, r0
 8012016:	b510      	push	{r4, lr}
 8012018:	7813      	ldrb	r3, [r2, #0]
 801201a:	0014      	movs	r4, r2
 801201c:	3201      	adds	r2, #1
 801201e:	2b00      	cmp	r3, #0
 8012020:	d1fa      	bne.n	8012018 <strcat+0x4>
 8012022:	5cca      	ldrb	r2, [r1, r3]
 8012024:	54e2      	strb	r2, [r4, r3]
 8012026:	3301      	adds	r3, #1
 8012028:	2a00      	cmp	r2, #0
 801202a:	d1fa      	bne.n	8012022 <strcat+0xe>
 801202c:	bd10      	pop	{r4, pc}

0801202e <strchr>:
 801202e:	b2c9      	uxtb	r1, r1
 8012030:	7803      	ldrb	r3, [r0, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d004      	beq.n	8012040 <strchr+0x12>
 8012036:	428b      	cmp	r3, r1
 8012038:	d100      	bne.n	801203c <strchr+0xe>
 801203a:	4770      	bx	lr
 801203c:	3001      	adds	r0, #1
 801203e:	e7f7      	b.n	8012030 <strchr+0x2>
 8012040:	424b      	negs	r3, r1
 8012042:	4159      	adcs	r1, r3
 8012044:	4249      	negs	r1, r1
 8012046:	4008      	ands	r0, r1
 8012048:	e7f7      	b.n	801203a <strchr+0xc>

0801204a <strncmp>:
 801204a:	b530      	push	{r4, r5, lr}
 801204c:	0005      	movs	r5, r0
 801204e:	1e10      	subs	r0, r2, #0
 8012050:	d00b      	beq.n	801206a <strncmp+0x20>
 8012052:	2400      	movs	r4, #0
 8012054:	3a01      	subs	r2, #1
 8012056:	5d2b      	ldrb	r3, [r5, r4]
 8012058:	5d08      	ldrb	r0, [r1, r4]
 801205a:	4283      	cmp	r3, r0
 801205c:	d104      	bne.n	8012068 <strncmp+0x1e>
 801205e:	42a2      	cmp	r2, r4
 8012060:	d002      	beq.n	8012068 <strncmp+0x1e>
 8012062:	3401      	adds	r4, #1
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1f6      	bne.n	8012056 <strncmp+0xc>
 8012068:	1a18      	subs	r0, r3, r0
 801206a:	bd30      	pop	{r4, r5, pc}

0801206c <strncpy>:
 801206c:	0003      	movs	r3, r0
 801206e:	b530      	push	{r4, r5, lr}
 8012070:	001d      	movs	r5, r3
 8012072:	2a00      	cmp	r2, #0
 8012074:	d006      	beq.n	8012084 <strncpy+0x18>
 8012076:	780c      	ldrb	r4, [r1, #0]
 8012078:	3a01      	subs	r2, #1
 801207a:	3301      	adds	r3, #1
 801207c:	702c      	strb	r4, [r5, #0]
 801207e:	3101      	adds	r1, #1
 8012080:	2c00      	cmp	r4, #0
 8012082:	d1f5      	bne.n	8012070 <strncpy+0x4>
 8012084:	2100      	movs	r1, #0
 8012086:	189a      	adds	r2, r3, r2
 8012088:	4293      	cmp	r3, r2
 801208a:	d100      	bne.n	801208e <strncpy+0x22>
 801208c:	bd30      	pop	{r4, r5, pc}
 801208e:	7019      	strb	r1, [r3, #0]
 8012090:	3301      	adds	r3, #1
 8012092:	e7f9      	b.n	8012088 <strncpy+0x1c>

08012094 <strtok>:
 8012094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012096:	4b16      	ldr	r3, [pc, #88]	; (80120f0 <strtok+0x5c>)
 8012098:	0005      	movs	r5, r0
 801209a:	681f      	ldr	r7, [r3, #0]
 801209c:	000e      	movs	r6, r1
 801209e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80120a0:	2c00      	cmp	r4, #0
 80120a2:	d11d      	bne.n	80120e0 <strtok+0x4c>
 80120a4:	2050      	movs	r0, #80	; 0x50
 80120a6:	f7fe f86b 	bl	8010180 <malloc>
 80120aa:	1e02      	subs	r2, r0, #0
 80120ac:	6478      	str	r0, [r7, #68]	; 0x44
 80120ae:	d104      	bne.n	80120ba <strtok+0x26>
 80120b0:	215b      	movs	r1, #91	; 0x5b
 80120b2:	4b10      	ldr	r3, [pc, #64]	; (80120f4 <strtok+0x60>)
 80120b4:	4810      	ldr	r0, [pc, #64]	; (80120f8 <strtok+0x64>)
 80120b6:	f000 f981 	bl	80123bc <__assert_func>
 80120ba:	6004      	str	r4, [r0, #0]
 80120bc:	6044      	str	r4, [r0, #4]
 80120be:	6084      	str	r4, [r0, #8]
 80120c0:	60c4      	str	r4, [r0, #12]
 80120c2:	6104      	str	r4, [r0, #16]
 80120c4:	6144      	str	r4, [r0, #20]
 80120c6:	6184      	str	r4, [r0, #24]
 80120c8:	6284      	str	r4, [r0, #40]	; 0x28
 80120ca:	62c4      	str	r4, [r0, #44]	; 0x2c
 80120cc:	6304      	str	r4, [r0, #48]	; 0x30
 80120ce:	6344      	str	r4, [r0, #52]	; 0x34
 80120d0:	6384      	str	r4, [r0, #56]	; 0x38
 80120d2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80120d4:	6404      	str	r4, [r0, #64]	; 0x40
 80120d6:	6444      	str	r4, [r0, #68]	; 0x44
 80120d8:	6484      	str	r4, [r0, #72]	; 0x48
 80120da:	64c4      	str	r4, [r0, #76]	; 0x4c
 80120dc:	7704      	strb	r4, [r0, #28]
 80120de:	6244      	str	r4, [r0, #36]	; 0x24
 80120e0:	0031      	movs	r1, r6
 80120e2:	0028      	movs	r0, r5
 80120e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120e6:	2301      	movs	r3, #1
 80120e8:	f000 f808 	bl	80120fc <__strtok_r>
 80120ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ee:	46c0      	nop			; (mov r8, r8)
 80120f0:	200002b4 	.word	0x200002b4
 80120f4:	08017542 	.word	0x08017542
 80120f8:	08017559 	.word	0x08017559

080120fc <__strtok_r>:
 80120fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120fe:	2800      	cmp	r0, #0
 8012100:	d102      	bne.n	8012108 <__strtok_r+0xc>
 8012102:	6810      	ldr	r0, [r2, #0]
 8012104:	2800      	cmp	r0, #0
 8012106:	d013      	beq.n	8012130 <__strtok_r+0x34>
 8012108:	0004      	movs	r4, r0
 801210a:	0020      	movs	r0, r4
 801210c:	000e      	movs	r6, r1
 801210e:	7805      	ldrb	r5, [r0, #0]
 8012110:	3401      	adds	r4, #1
 8012112:	7837      	ldrb	r7, [r6, #0]
 8012114:	2f00      	cmp	r7, #0
 8012116:	d104      	bne.n	8012122 <__strtok_r+0x26>
 8012118:	2d00      	cmp	r5, #0
 801211a:	d10f      	bne.n	801213c <__strtok_r+0x40>
 801211c:	0028      	movs	r0, r5
 801211e:	6015      	str	r5, [r2, #0]
 8012120:	e006      	b.n	8012130 <__strtok_r+0x34>
 8012122:	3601      	adds	r6, #1
 8012124:	42bd      	cmp	r5, r7
 8012126:	d1f4      	bne.n	8012112 <__strtok_r+0x16>
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1ee      	bne.n	801210a <__strtok_r+0xe>
 801212c:	6014      	str	r4, [r2, #0]
 801212e:	7003      	strb	r3, [r0, #0]
 8012130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012132:	002f      	movs	r7, r5
 8012134:	e00f      	b.n	8012156 <__strtok_r+0x5a>
 8012136:	3301      	adds	r3, #1
 8012138:	2e00      	cmp	r6, #0
 801213a:	d104      	bne.n	8012146 <__strtok_r+0x4a>
 801213c:	0023      	movs	r3, r4
 801213e:	3401      	adds	r4, #1
 8012140:	781d      	ldrb	r5, [r3, #0]
 8012142:	0027      	movs	r7, r4
 8012144:	000b      	movs	r3, r1
 8012146:	781e      	ldrb	r6, [r3, #0]
 8012148:	42b5      	cmp	r5, r6
 801214a:	d1f4      	bne.n	8012136 <__strtok_r+0x3a>
 801214c:	2d00      	cmp	r5, #0
 801214e:	d0f0      	beq.n	8012132 <__strtok_r+0x36>
 8012150:	2300      	movs	r3, #0
 8012152:	3c01      	subs	r4, #1
 8012154:	7023      	strb	r3, [r4, #0]
 8012156:	6017      	str	r7, [r2, #0]
 8012158:	e7ea      	b.n	8012130 <__strtok_r+0x34>

0801215a <strtok_r>:
 801215a:	b510      	push	{r4, lr}
 801215c:	2301      	movs	r3, #1
 801215e:	f7ff ffcd 	bl	80120fc <__strtok_r>
 8012162:	bd10      	pop	{r4, pc}

08012164 <strstr>:
 8012164:	780a      	ldrb	r2, [r1, #0]
 8012166:	b530      	push	{r4, r5, lr}
 8012168:	2a00      	cmp	r2, #0
 801216a:	d10c      	bne.n	8012186 <strstr+0x22>
 801216c:	bd30      	pop	{r4, r5, pc}
 801216e:	429a      	cmp	r2, r3
 8012170:	d108      	bne.n	8012184 <strstr+0x20>
 8012172:	2301      	movs	r3, #1
 8012174:	5ccc      	ldrb	r4, [r1, r3]
 8012176:	2c00      	cmp	r4, #0
 8012178:	d0f8      	beq.n	801216c <strstr+0x8>
 801217a:	5cc5      	ldrb	r5, [r0, r3]
 801217c:	42a5      	cmp	r5, r4
 801217e:	d101      	bne.n	8012184 <strstr+0x20>
 8012180:	3301      	adds	r3, #1
 8012182:	e7f7      	b.n	8012174 <strstr+0x10>
 8012184:	3001      	adds	r0, #1
 8012186:	7803      	ldrb	r3, [r0, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1f0      	bne.n	801216e <strstr+0xa>
 801218c:	0018      	movs	r0, r3
 801218e:	e7ed      	b.n	801216c <strstr+0x8>

08012190 <_localeconv_r>:
 8012190:	4800      	ldr	r0, [pc, #0]	; (8012194 <_localeconv_r+0x4>)
 8012192:	4770      	bx	lr
 8012194:	200001ec 	.word	0x200001ec

08012198 <_close_r>:
 8012198:	2300      	movs	r3, #0
 801219a:	b570      	push	{r4, r5, r6, lr}
 801219c:	4d06      	ldr	r5, [pc, #24]	; (80121b8 <_close_r+0x20>)
 801219e:	0004      	movs	r4, r0
 80121a0:	0008      	movs	r0, r1
 80121a2:	602b      	str	r3, [r5, #0]
 80121a4:	f7f5 fd2b 	bl	8007bfe <_close>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d103      	bne.n	80121b4 <_close_r+0x1c>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d000      	beq.n	80121b4 <_close_r+0x1c>
 80121b2:	6023      	str	r3, [r4, #0]
 80121b4:	bd70      	pop	{r4, r5, r6, pc}
 80121b6:	46c0      	nop			; (mov r8, r8)
 80121b8:	20005624 	.word	0x20005624

080121bc <_reclaim_reent>:
 80121bc:	4b2d      	ldr	r3, [pc, #180]	; (8012274 <_reclaim_reent+0xb8>)
 80121be:	b570      	push	{r4, r5, r6, lr}
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	0004      	movs	r4, r0
 80121c4:	4283      	cmp	r3, r0
 80121c6:	d042      	beq.n	801224e <_reclaim_reent+0x92>
 80121c8:	69c3      	ldr	r3, [r0, #28]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00a      	beq.n	80121e4 <_reclaim_reent+0x28>
 80121ce:	2500      	movs	r5, #0
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	42ab      	cmp	r3, r5
 80121d4:	d140      	bne.n	8012258 <_reclaim_reent+0x9c>
 80121d6:	69e3      	ldr	r3, [r4, #28]
 80121d8:	6819      	ldr	r1, [r3, #0]
 80121da:	2900      	cmp	r1, #0
 80121dc:	d002      	beq.n	80121e4 <_reclaim_reent+0x28>
 80121de:	0020      	movs	r0, r4
 80121e0:	f000 ffa8 	bl	8013134 <_free_r>
 80121e4:	6961      	ldr	r1, [r4, #20]
 80121e6:	2900      	cmp	r1, #0
 80121e8:	d002      	beq.n	80121f0 <_reclaim_reent+0x34>
 80121ea:	0020      	movs	r0, r4
 80121ec:	f000 ffa2 	bl	8013134 <_free_r>
 80121f0:	69e1      	ldr	r1, [r4, #28]
 80121f2:	2900      	cmp	r1, #0
 80121f4:	d002      	beq.n	80121fc <_reclaim_reent+0x40>
 80121f6:	0020      	movs	r0, r4
 80121f8:	f000 ff9c 	bl	8013134 <_free_r>
 80121fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80121fe:	2900      	cmp	r1, #0
 8012200:	d002      	beq.n	8012208 <_reclaim_reent+0x4c>
 8012202:	0020      	movs	r0, r4
 8012204:	f000 ff96 	bl	8013134 <_free_r>
 8012208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801220a:	2900      	cmp	r1, #0
 801220c:	d002      	beq.n	8012214 <_reclaim_reent+0x58>
 801220e:	0020      	movs	r0, r4
 8012210:	f000 ff90 	bl	8013134 <_free_r>
 8012214:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012216:	2900      	cmp	r1, #0
 8012218:	d002      	beq.n	8012220 <_reclaim_reent+0x64>
 801221a:	0020      	movs	r0, r4
 801221c:	f000 ff8a 	bl	8013134 <_free_r>
 8012220:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012222:	2900      	cmp	r1, #0
 8012224:	d002      	beq.n	801222c <_reclaim_reent+0x70>
 8012226:	0020      	movs	r0, r4
 8012228:	f000 ff84 	bl	8013134 <_free_r>
 801222c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801222e:	2900      	cmp	r1, #0
 8012230:	d002      	beq.n	8012238 <_reclaim_reent+0x7c>
 8012232:	0020      	movs	r0, r4
 8012234:	f000 ff7e 	bl	8013134 <_free_r>
 8012238:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801223a:	2900      	cmp	r1, #0
 801223c:	d002      	beq.n	8012244 <_reclaim_reent+0x88>
 801223e:	0020      	movs	r0, r4
 8012240:	f000 ff78 	bl	8013134 <_free_r>
 8012244:	6a23      	ldr	r3, [r4, #32]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <_reclaim_reent+0x92>
 801224a:	0020      	movs	r0, r4
 801224c:	4798      	blx	r3
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	5949      	ldr	r1, [r1, r5]
 8012252:	2900      	cmp	r1, #0
 8012254:	d108      	bne.n	8012268 <_reclaim_reent+0xac>
 8012256:	3504      	adds	r5, #4
 8012258:	69e3      	ldr	r3, [r4, #28]
 801225a:	68d9      	ldr	r1, [r3, #12]
 801225c:	2d80      	cmp	r5, #128	; 0x80
 801225e:	d1f7      	bne.n	8012250 <_reclaim_reent+0x94>
 8012260:	0020      	movs	r0, r4
 8012262:	f000 ff67 	bl	8013134 <_free_r>
 8012266:	e7b6      	b.n	80121d6 <_reclaim_reent+0x1a>
 8012268:	680e      	ldr	r6, [r1, #0]
 801226a:	0020      	movs	r0, r4
 801226c:	f000 ff62 	bl	8013134 <_free_r>
 8012270:	0031      	movs	r1, r6
 8012272:	e7ee      	b.n	8012252 <_reclaim_reent+0x96>
 8012274:	200002b4 	.word	0x200002b4

08012278 <_lseek_r>:
 8012278:	b570      	push	{r4, r5, r6, lr}
 801227a:	0004      	movs	r4, r0
 801227c:	0008      	movs	r0, r1
 801227e:	0011      	movs	r1, r2
 8012280:	001a      	movs	r2, r3
 8012282:	2300      	movs	r3, #0
 8012284:	4d05      	ldr	r5, [pc, #20]	; (801229c <_lseek_r+0x24>)
 8012286:	602b      	str	r3, [r5, #0]
 8012288:	f7f5 fcda 	bl	8007c40 <_lseek>
 801228c:	1c43      	adds	r3, r0, #1
 801228e:	d103      	bne.n	8012298 <_lseek_r+0x20>
 8012290:	682b      	ldr	r3, [r5, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d000      	beq.n	8012298 <_lseek_r+0x20>
 8012296:	6023      	str	r3, [r4, #0]
 8012298:	bd70      	pop	{r4, r5, r6, pc}
 801229a:	46c0      	nop			; (mov r8, r8)
 801229c:	20005624 	.word	0x20005624

080122a0 <_read_r>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	0004      	movs	r4, r0
 80122a4:	0008      	movs	r0, r1
 80122a6:	0011      	movs	r1, r2
 80122a8:	001a      	movs	r2, r3
 80122aa:	2300      	movs	r3, #0
 80122ac:	4d05      	ldr	r5, [pc, #20]	; (80122c4 <_read_r+0x24>)
 80122ae:	602b      	str	r3, [r5, #0]
 80122b0:	f7f5 fc6c 	bl	8007b8c <_read>
 80122b4:	1c43      	adds	r3, r0, #1
 80122b6:	d103      	bne.n	80122c0 <_read_r+0x20>
 80122b8:	682b      	ldr	r3, [r5, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d000      	beq.n	80122c0 <_read_r+0x20>
 80122be:	6023      	str	r3, [r4, #0]
 80122c0:	bd70      	pop	{r4, r5, r6, pc}
 80122c2:	46c0      	nop			; (mov r8, r8)
 80122c4:	20005624 	.word	0x20005624

080122c8 <_sbrk_r>:
 80122c8:	2300      	movs	r3, #0
 80122ca:	b570      	push	{r4, r5, r6, lr}
 80122cc:	4d06      	ldr	r5, [pc, #24]	; (80122e8 <_sbrk_r+0x20>)
 80122ce:	0004      	movs	r4, r0
 80122d0:	0008      	movs	r0, r1
 80122d2:	602b      	str	r3, [r5, #0]
 80122d4:	f7f5 fcc0 	bl	8007c58 <_sbrk>
 80122d8:	1c43      	adds	r3, r0, #1
 80122da:	d103      	bne.n	80122e4 <_sbrk_r+0x1c>
 80122dc:	682b      	ldr	r3, [r5, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d000      	beq.n	80122e4 <_sbrk_r+0x1c>
 80122e2:	6023      	str	r3, [r4, #0]
 80122e4:	bd70      	pop	{r4, r5, r6, pc}
 80122e6:	46c0      	nop			; (mov r8, r8)
 80122e8:	20005624 	.word	0x20005624

080122ec <_write_r>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	0004      	movs	r4, r0
 80122f0:	0008      	movs	r0, r1
 80122f2:	0011      	movs	r1, r2
 80122f4:	001a      	movs	r2, r3
 80122f6:	2300      	movs	r3, #0
 80122f8:	4d05      	ldr	r5, [pc, #20]	; (8012310 <_write_r+0x24>)
 80122fa:	602b      	str	r3, [r5, #0]
 80122fc:	f7f5 fc63 	bl	8007bc6 <_write>
 8012300:	1c43      	adds	r3, r0, #1
 8012302:	d103      	bne.n	801230c <_write_r+0x20>
 8012304:	682b      	ldr	r3, [r5, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d000      	beq.n	801230c <_write_r+0x20>
 801230a:	6023      	str	r3, [r4, #0]
 801230c:	bd70      	pop	{r4, r5, r6, pc}
 801230e:	46c0      	nop			; (mov r8, r8)
 8012310:	20005624 	.word	0x20005624

08012314 <__errno>:
 8012314:	4b01      	ldr	r3, [pc, #4]	; (801231c <__errno+0x8>)
 8012316:	6818      	ldr	r0, [r3, #0]
 8012318:	4770      	bx	lr
 801231a:	46c0      	nop			; (mov r8, r8)
 801231c:	200002b4 	.word	0x200002b4

08012320 <__libc_init_array>:
 8012320:	b570      	push	{r4, r5, r6, lr}
 8012322:	2600      	movs	r6, #0
 8012324:	4c0c      	ldr	r4, [pc, #48]	; (8012358 <__libc_init_array+0x38>)
 8012326:	4d0d      	ldr	r5, [pc, #52]	; (801235c <__libc_init_array+0x3c>)
 8012328:	1b64      	subs	r4, r4, r5
 801232a:	10a4      	asrs	r4, r4, #2
 801232c:	42a6      	cmp	r6, r4
 801232e:	d109      	bne.n	8012344 <__libc_init_array+0x24>
 8012330:	2600      	movs	r6, #0
 8012332:	f003 fbef 	bl	8015b14 <_init>
 8012336:	4c0a      	ldr	r4, [pc, #40]	; (8012360 <__libc_init_array+0x40>)
 8012338:	4d0a      	ldr	r5, [pc, #40]	; (8012364 <__libc_init_array+0x44>)
 801233a:	1b64      	subs	r4, r4, r5
 801233c:	10a4      	asrs	r4, r4, #2
 801233e:	42a6      	cmp	r6, r4
 8012340:	d105      	bne.n	801234e <__libc_init_array+0x2e>
 8012342:	bd70      	pop	{r4, r5, r6, pc}
 8012344:	00b3      	lsls	r3, r6, #2
 8012346:	58eb      	ldr	r3, [r5, r3]
 8012348:	4798      	blx	r3
 801234a:	3601      	adds	r6, #1
 801234c:	e7ee      	b.n	801232c <__libc_init_array+0xc>
 801234e:	00b3      	lsls	r3, r6, #2
 8012350:	58eb      	ldr	r3, [r5, r3]
 8012352:	4798      	blx	r3
 8012354:	3601      	adds	r6, #1
 8012356:	e7f2      	b.n	801233e <__libc_init_array+0x1e>
 8012358:	08017868 	.word	0x08017868
 801235c:	08017868 	.word	0x08017868
 8012360:	0801786c 	.word	0x0801786c
 8012364:	08017868 	.word	0x08017868

08012368 <__retarget_lock_init_recursive>:
 8012368:	4770      	bx	lr

0801236a <__retarget_lock_acquire_recursive>:
 801236a:	4770      	bx	lr

0801236c <__retarget_lock_release_recursive>:
 801236c:	4770      	bx	lr

0801236e <strcpy>:
 801236e:	0003      	movs	r3, r0
 8012370:	780a      	ldrb	r2, [r1, #0]
 8012372:	3101      	adds	r1, #1
 8012374:	701a      	strb	r2, [r3, #0]
 8012376:	3301      	adds	r3, #1
 8012378:	2a00      	cmp	r2, #0
 801237a:	d1f9      	bne.n	8012370 <strcpy+0x2>
 801237c:	4770      	bx	lr

0801237e <memchr>:
 801237e:	b2c9      	uxtb	r1, r1
 8012380:	1882      	adds	r2, r0, r2
 8012382:	4290      	cmp	r0, r2
 8012384:	d101      	bne.n	801238a <memchr+0xc>
 8012386:	2000      	movs	r0, #0
 8012388:	4770      	bx	lr
 801238a:	7803      	ldrb	r3, [r0, #0]
 801238c:	428b      	cmp	r3, r1
 801238e:	d0fb      	beq.n	8012388 <memchr+0xa>
 8012390:	3001      	adds	r0, #1
 8012392:	e7f6      	b.n	8012382 <memchr+0x4>

08012394 <memcpy>:
 8012394:	2300      	movs	r3, #0
 8012396:	b510      	push	{r4, lr}
 8012398:	429a      	cmp	r2, r3
 801239a:	d100      	bne.n	801239e <memcpy+0xa>
 801239c:	bd10      	pop	{r4, pc}
 801239e:	5ccc      	ldrb	r4, [r1, r3]
 80123a0:	54c4      	strb	r4, [r0, r3]
 80123a2:	3301      	adds	r3, #1
 80123a4:	e7f8      	b.n	8012398 <memcpy+0x4>
	...

080123a8 <nan>:
 80123a8:	2000      	movs	r0, #0
 80123aa:	4901      	ldr	r1, [pc, #4]	; (80123b0 <nan+0x8>)
 80123ac:	4770      	bx	lr
 80123ae:	46c0      	nop			; (mov r8, r8)
 80123b0:	7ff80000 	.word	0x7ff80000

080123b4 <nanf>:
 80123b4:	4800      	ldr	r0, [pc, #0]	; (80123b8 <nanf+0x4>)
 80123b6:	4770      	bx	lr
 80123b8:	7fc00000 	.word	0x7fc00000

080123bc <__assert_func>:
 80123bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80123be:	0014      	movs	r4, r2
 80123c0:	001a      	movs	r2, r3
 80123c2:	4b09      	ldr	r3, [pc, #36]	; (80123e8 <__assert_func+0x2c>)
 80123c4:	0005      	movs	r5, r0
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	000e      	movs	r6, r1
 80123ca:	68d8      	ldr	r0, [r3, #12]
 80123cc:	4b07      	ldr	r3, [pc, #28]	; (80123ec <__assert_func+0x30>)
 80123ce:	2c00      	cmp	r4, #0
 80123d0:	d101      	bne.n	80123d6 <__assert_func+0x1a>
 80123d2:	4b07      	ldr	r3, [pc, #28]	; (80123f0 <__assert_func+0x34>)
 80123d4:	001c      	movs	r4, r3
 80123d6:	4907      	ldr	r1, [pc, #28]	; (80123f4 <__assert_func+0x38>)
 80123d8:	9301      	str	r3, [sp, #4]
 80123da:	9402      	str	r4, [sp, #8]
 80123dc:	002b      	movs	r3, r5
 80123de:	9600      	str	r6, [sp, #0]
 80123e0:	f002 f940 	bl	8014664 <fiprintf>
 80123e4:	f002 f961 	bl	80146aa <abort>
 80123e8:	200002b4 	.word	0x200002b4
 80123ec:	080175bb 	.word	0x080175bb
 80123f0:	080175f6 	.word	0x080175f6
 80123f4:	080175c8 	.word	0x080175c8

080123f8 <quorem>:
 80123f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123fa:	6902      	ldr	r2, [r0, #16]
 80123fc:	690b      	ldr	r3, [r1, #16]
 80123fe:	b089      	sub	sp, #36	; 0x24
 8012400:	0007      	movs	r7, r0
 8012402:	9104      	str	r1, [sp, #16]
 8012404:	2000      	movs	r0, #0
 8012406:	429a      	cmp	r2, r3
 8012408:	db69      	blt.n	80124de <quorem+0xe6>
 801240a:	3b01      	subs	r3, #1
 801240c:	009c      	lsls	r4, r3, #2
 801240e:	9301      	str	r3, [sp, #4]
 8012410:	000b      	movs	r3, r1
 8012412:	3314      	adds	r3, #20
 8012414:	9306      	str	r3, [sp, #24]
 8012416:	191b      	adds	r3, r3, r4
 8012418:	9305      	str	r3, [sp, #20]
 801241a:	003b      	movs	r3, r7
 801241c:	3314      	adds	r3, #20
 801241e:	9303      	str	r3, [sp, #12]
 8012420:	191c      	adds	r4, r3, r4
 8012422:	9b05      	ldr	r3, [sp, #20]
 8012424:	6826      	ldr	r6, [r4, #0]
 8012426:	681d      	ldr	r5, [r3, #0]
 8012428:	0030      	movs	r0, r6
 801242a:	3501      	adds	r5, #1
 801242c:	0029      	movs	r1, r5
 801242e:	f7ed fe87 	bl	8000140 <__udivsi3>
 8012432:	9002      	str	r0, [sp, #8]
 8012434:	42ae      	cmp	r6, r5
 8012436:	d329      	bcc.n	801248c <quorem+0x94>
 8012438:	9b06      	ldr	r3, [sp, #24]
 801243a:	2600      	movs	r6, #0
 801243c:	469c      	mov	ip, r3
 801243e:	9d03      	ldr	r5, [sp, #12]
 8012440:	9606      	str	r6, [sp, #24]
 8012442:	4662      	mov	r2, ip
 8012444:	ca08      	ldmia	r2!, {r3}
 8012446:	6828      	ldr	r0, [r5, #0]
 8012448:	4694      	mov	ip, r2
 801244a:	9a02      	ldr	r2, [sp, #8]
 801244c:	b299      	uxth	r1, r3
 801244e:	4351      	muls	r1, r2
 8012450:	0c1b      	lsrs	r3, r3, #16
 8012452:	4353      	muls	r3, r2
 8012454:	1989      	adds	r1, r1, r6
 8012456:	0c0a      	lsrs	r2, r1, #16
 8012458:	189b      	adds	r3, r3, r2
 801245a:	9307      	str	r3, [sp, #28]
 801245c:	0c1e      	lsrs	r6, r3, #16
 801245e:	9b06      	ldr	r3, [sp, #24]
 8012460:	b282      	uxth	r2, r0
 8012462:	18d2      	adds	r2, r2, r3
 8012464:	466b      	mov	r3, sp
 8012466:	b289      	uxth	r1, r1
 8012468:	8b9b      	ldrh	r3, [r3, #28]
 801246a:	1a52      	subs	r2, r2, r1
 801246c:	0c01      	lsrs	r1, r0, #16
 801246e:	1ac9      	subs	r1, r1, r3
 8012470:	1413      	asrs	r3, r2, #16
 8012472:	18cb      	adds	r3, r1, r3
 8012474:	1419      	asrs	r1, r3, #16
 8012476:	b292      	uxth	r2, r2
 8012478:	041b      	lsls	r3, r3, #16
 801247a:	4313      	orrs	r3, r2
 801247c:	c508      	stmia	r5!, {r3}
 801247e:	9b05      	ldr	r3, [sp, #20]
 8012480:	9106      	str	r1, [sp, #24]
 8012482:	4563      	cmp	r3, ip
 8012484:	d2dd      	bcs.n	8012442 <quorem+0x4a>
 8012486:	6823      	ldr	r3, [r4, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d030      	beq.n	80124ee <quorem+0xf6>
 801248c:	0038      	movs	r0, r7
 801248e:	9904      	ldr	r1, [sp, #16]
 8012490:	f001 fcda 	bl	8013e48 <__mcmp>
 8012494:	2800      	cmp	r0, #0
 8012496:	db21      	blt.n	80124dc <quorem+0xe4>
 8012498:	0038      	movs	r0, r7
 801249a:	2600      	movs	r6, #0
 801249c:	9b02      	ldr	r3, [sp, #8]
 801249e:	9c04      	ldr	r4, [sp, #16]
 80124a0:	3301      	adds	r3, #1
 80124a2:	9302      	str	r3, [sp, #8]
 80124a4:	3014      	adds	r0, #20
 80124a6:	3414      	adds	r4, #20
 80124a8:	6803      	ldr	r3, [r0, #0]
 80124aa:	cc02      	ldmia	r4!, {r1}
 80124ac:	b29d      	uxth	r5, r3
 80124ae:	19ad      	adds	r5, r5, r6
 80124b0:	b28a      	uxth	r2, r1
 80124b2:	1aaa      	subs	r2, r5, r2
 80124b4:	0c09      	lsrs	r1, r1, #16
 80124b6:	0c1b      	lsrs	r3, r3, #16
 80124b8:	1a5b      	subs	r3, r3, r1
 80124ba:	1411      	asrs	r1, r2, #16
 80124bc:	185b      	adds	r3, r3, r1
 80124be:	141e      	asrs	r6, r3, #16
 80124c0:	b292      	uxth	r2, r2
 80124c2:	041b      	lsls	r3, r3, #16
 80124c4:	4313      	orrs	r3, r2
 80124c6:	c008      	stmia	r0!, {r3}
 80124c8:	9b05      	ldr	r3, [sp, #20]
 80124ca:	42a3      	cmp	r3, r4
 80124cc:	d2ec      	bcs.n	80124a8 <quorem+0xb0>
 80124ce:	9b01      	ldr	r3, [sp, #4]
 80124d0:	9a03      	ldr	r2, [sp, #12]
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	18d3      	adds	r3, r2, r3
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	2a00      	cmp	r2, #0
 80124da:	d015      	beq.n	8012508 <quorem+0x110>
 80124dc:	9802      	ldr	r0, [sp, #8]
 80124de:	b009      	add	sp, #36	; 0x24
 80124e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124e2:	6823      	ldr	r3, [r4, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d106      	bne.n	80124f6 <quorem+0xfe>
 80124e8:	9b01      	ldr	r3, [sp, #4]
 80124ea:	3b01      	subs	r3, #1
 80124ec:	9301      	str	r3, [sp, #4]
 80124ee:	9b03      	ldr	r3, [sp, #12]
 80124f0:	3c04      	subs	r4, #4
 80124f2:	42a3      	cmp	r3, r4
 80124f4:	d3f5      	bcc.n	80124e2 <quorem+0xea>
 80124f6:	9b01      	ldr	r3, [sp, #4]
 80124f8:	613b      	str	r3, [r7, #16]
 80124fa:	e7c7      	b.n	801248c <quorem+0x94>
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	2a00      	cmp	r2, #0
 8012500:	d106      	bne.n	8012510 <quorem+0x118>
 8012502:	9a01      	ldr	r2, [sp, #4]
 8012504:	3a01      	subs	r2, #1
 8012506:	9201      	str	r2, [sp, #4]
 8012508:	9a03      	ldr	r2, [sp, #12]
 801250a:	3b04      	subs	r3, #4
 801250c:	429a      	cmp	r2, r3
 801250e:	d3f5      	bcc.n	80124fc <quorem+0x104>
 8012510:	9b01      	ldr	r3, [sp, #4]
 8012512:	613b      	str	r3, [r7, #16]
 8012514:	e7e2      	b.n	80124dc <quorem+0xe4>
	...

08012518 <_dtoa_r>:
 8012518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801251a:	0014      	movs	r4, r2
 801251c:	001d      	movs	r5, r3
 801251e:	69c6      	ldr	r6, [r0, #28]
 8012520:	b09d      	sub	sp, #116	; 0x74
 8012522:	9408      	str	r4, [sp, #32]
 8012524:	9509      	str	r5, [sp, #36]	; 0x24
 8012526:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012528:	9004      	str	r0, [sp, #16]
 801252a:	2e00      	cmp	r6, #0
 801252c:	d10f      	bne.n	801254e <_dtoa_r+0x36>
 801252e:	2010      	movs	r0, #16
 8012530:	f7fd fe26 	bl	8010180 <malloc>
 8012534:	9b04      	ldr	r3, [sp, #16]
 8012536:	1e02      	subs	r2, r0, #0
 8012538:	61d8      	str	r0, [r3, #28]
 801253a:	d104      	bne.n	8012546 <_dtoa_r+0x2e>
 801253c:	21ef      	movs	r1, #239	; 0xef
 801253e:	4bc6      	ldr	r3, [pc, #792]	; (8012858 <_dtoa_r+0x340>)
 8012540:	48c6      	ldr	r0, [pc, #792]	; (801285c <_dtoa_r+0x344>)
 8012542:	f7ff ff3b 	bl	80123bc <__assert_func>
 8012546:	6046      	str	r6, [r0, #4]
 8012548:	6086      	str	r6, [r0, #8]
 801254a:	6006      	str	r6, [r0, #0]
 801254c:	60c6      	str	r6, [r0, #12]
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	69db      	ldr	r3, [r3, #28]
 8012552:	6819      	ldr	r1, [r3, #0]
 8012554:	2900      	cmp	r1, #0
 8012556:	d00b      	beq.n	8012570 <_dtoa_r+0x58>
 8012558:	685a      	ldr	r2, [r3, #4]
 801255a:	2301      	movs	r3, #1
 801255c:	4093      	lsls	r3, r2
 801255e:	604a      	str	r2, [r1, #4]
 8012560:	608b      	str	r3, [r1, #8]
 8012562:	9804      	ldr	r0, [sp, #16]
 8012564:	f001 f9e2 	bl	801392c <_Bfree>
 8012568:	2200      	movs	r2, #0
 801256a:	9b04      	ldr	r3, [sp, #16]
 801256c:	69db      	ldr	r3, [r3, #28]
 801256e:	601a      	str	r2, [r3, #0]
 8012570:	2d00      	cmp	r5, #0
 8012572:	da1e      	bge.n	80125b2 <_dtoa_r+0x9a>
 8012574:	2301      	movs	r3, #1
 8012576:	603b      	str	r3, [r7, #0]
 8012578:	006b      	lsls	r3, r5, #1
 801257a:	085b      	lsrs	r3, r3, #1
 801257c:	9309      	str	r3, [sp, #36]	; 0x24
 801257e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012580:	4bb7      	ldr	r3, [pc, #732]	; (8012860 <_dtoa_r+0x348>)
 8012582:	4ab7      	ldr	r2, [pc, #732]	; (8012860 <_dtoa_r+0x348>)
 8012584:	403b      	ands	r3, r7
 8012586:	4293      	cmp	r3, r2
 8012588:	d116      	bne.n	80125b8 <_dtoa_r+0xa0>
 801258a:	4bb6      	ldr	r3, [pc, #728]	; (8012864 <_dtoa_r+0x34c>)
 801258c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801258e:	6013      	str	r3, [r2, #0]
 8012590:	033b      	lsls	r3, r7, #12
 8012592:	0b1b      	lsrs	r3, r3, #12
 8012594:	4323      	orrs	r3, r4
 8012596:	d101      	bne.n	801259c <_dtoa_r+0x84>
 8012598:	f000 fdb5 	bl	8013106 <_dtoa_r+0xbee>
 801259c:	4bb2      	ldr	r3, [pc, #712]	; (8012868 <_dtoa_r+0x350>)
 801259e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80125a0:	9306      	str	r3, [sp, #24]
 80125a2:	2a00      	cmp	r2, #0
 80125a4:	d002      	beq.n	80125ac <_dtoa_r+0x94>
 80125a6:	4bb1      	ldr	r3, [pc, #708]	; (801286c <_dtoa_r+0x354>)
 80125a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80125aa:	6013      	str	r3, [r2, #0]
 80125ac:	9806      	ldr	r0, [sp, #24]
 80125ae:	b01d      	add	sp, #116	; 0x74
 80125b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125b2:	2300      	movs	r3, #0
 80125b4:	603b      	str	r3, [r7, #0]
 80125b6:	e7e2      	b.n	801257e <_dtoa_r+0x66>
 80125b8:	9a08      	ldr	r2, [sp, #32]
 80125ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125bc:	9210      	str	r2, [sp, #64]	; 0x40
 80125be:	9311      	str	r3, [sp, #68]	; 0x44
 80125c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80125c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80125c4:	2200      	movs	r2, #0
 80125c6:	2300      	movs	r3, #0
 80125c8:	f7ed ff40 	bl	800044c <__aeabi_dcmpeq>
 80125cc:	1e06      	subs	r6, r0, #0
 80125ce:	d009      	beq.n	80125e4 <_dtoa_r+0xcc>
 80125d0:	2301      	movs	r3, #1
 80125d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80125d4:	6013      	str	r3, [r2, #0]
 80125d6:	4ba6      	ldr	r3, [pc, #664]	; (8012870 <_dtoa_r+0x358>)
 80125d8:	9306      	str	r3, [sp, #24]
 80125da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d0e5      	beq.n	80125ac <_dtoa_r+0x94>
 80125e0:	4ba4      	ldr	r3, [pc, #656]	; (8012874 <_dtoa_r+0x35c>)
 80125e2:	e7e1      	b.n	80125a8 <_dtoa_r+0x90>
 80125e4:	ab1a      	add	r3, sp, #104	; 0x68
 80125e6:	9301      	str	r3, [sp, #4]
 80125e8:	ab1b      	add	r3, sp, #108	; 0x6c
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	9804      	ldr	r0, [sp, #16]
 80125ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125f2:	f001 fd45 	bl	8014080 <__d2b>
 80125f6:	007a      	lsls	r2, r7, #1
 80125f8:	9005      	str	r0, [sp, #20]
 80125fa:	0d52      	lsrs	r2, r2, #21
 80125fc:	d100      	bne.n	8012600 <_dtoa_r+0xe8>
 80125fe:	e07b      	b.n	80126f8 <_dtoa_r+0x1e0>
 8012600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012602:	9617      	str	r6, [sp, #92]	; 0x5c
 8012604:	0319      	lsls	r1, r3, #12
 8012606:	4b9c      	ldr	r3, [pc, #624]	; (8012878 <_dtoa_r+0x360>)
 8012608:	0b09      	lsrs	r1, r1, #12
 801260a:	430b      	orrs	r3, r1
 801260c:	499b      	ldr	r1, [pc, #620]	; (801287c <_dtoa_r+0x364>)
 801260e:	1857      	adds	r7, r2, r1
 8012610:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012612:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012614:	0019      	movs	r1, r3
 8012616:	2200      	movs	r2, #0
 8012618:	4b99      	ldr	r3, [pc, #612]	; (8012880 <_dtoa_r+0x368>)
 801261a:	f7f0 f91d 	bl	8002858 <__aeabi_dsub>
 801261e:	4a99      	ldr	r2, [pc, #612]	; (8012884 <_dtoa_r+0x36c>)
 8012620:	4b99      	ldr	r3, [pc, #612]	; (8012888 <_dtoa_r+0x370>)
 8012622:	f7ef fe57 	bl	80022d4 <__aeabi_dmul>
 8012626:	4a99      	ldr	r2, [pc, #612]	; (801288c <_dtoa_r+0x374>)
 8012628:	4b99      	ldr	r3, [pc, #612]	; (8012890 <_dtoa_r+0x378>)
 801262a:	f7ee fef9 	bl	8001420 <__aeabi_dadd>
 801262e:	0004      	movs	r4, r0
 8012630:	0038      	movs	r0, r7
 8012632:	000d      	movs	r5, r1
 8012634:	f7f0 fce6 	bl	8003004 <__aeabi_i2d>
 8012638:	4a96      	ldr	r2, [pc, #600]	; (8012894 <_dtoa_r+0x37c>)
 801263a:	4b97      	ldr	r3, [pc, #604]	; (8012898 <_dtoa_r+0x380>)
 801263c:	f7ef fe4a 	bl	80022d4 <__aeabi_dmul>
 8012640:	0002      	movs	r2, r0
 8012642:	000b      	movs	r3, r1
 8012644:	0020      	movs	r0, r4
 8012646:	0029      	movs	r1, r5
 8012648:	f7ee feea 	bl	8001420 <__aeabi_dadd>
 801264c:	0004      	movs	r4, r0
 801264e:	000d      	movs	r5, r1
 8012650:	f7f0 fca2 	bl	8002f98 <__aeabi_d2iz>
 8012654:	2200      	movs	r2, #0
 8012656:	9003      	str	r0, [sp, #12]
 8012658:	2300      	movs	r3, #0
 801265a:	0020      	movs	r0, r4
 801265c:	0029      	movs	r1, r5
 801265e:	f7ed fefb 	bl	8000458 <__aeabi_dcmplt>
 8012662:	2800      	cmp	r0, #0
 8012664:	d00b      	beq.n	801267e <_dtoa_r+0x166>
 8012666:	9803      	ldr	r0, [sp, #12]
 8012668:	f7f0 fccc 	bl	8003004 <__aeabi_i2d>
 801266c:	002b      	movs	r3, r5
 801266e:	0022      	movs	r2, r4
 8012670:	f7ed feec 	bl	800044c <__aeabi_dcmpeq>
 8012674:	4243      	negs	r3, r0
 8012676:	4158      	adcs	r0, r3
 8012678:	9b03      	ldr	r3, [sp, #12]
 801267a:	1a1b      	subs	r3, r3, r0
 801267c:	9303      	str	r3, [sp, #12]
 801267e:	2301      	movs	r3, #1
 8012680:	9316      	str	r3, [sp, #88]	; 0x58
 8012682:	9b03      	ldr	r3, [sp, #12]
 8012684:	2b16      	cmp	r3, #22
 8012686:	d810      	bhi.n	80126aa <_dtoa_r+0x192>
 8012688:	9810      	ldr	r0, [sp, #64]	; 0x40
 801268a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801268c:	9a03      	ldr	r2, [sp, #12]
 801268e:	4b83      	ldr	r3, [pc, #524]	; (801289c <_dtoa_r+0x384>)
 8012690:	00d2      	lsls	r2, r2, #3
 8012692:	189b      	adds	r3, r3, r2
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	f7ed fede 	bl	8000458 <__aeabi_dcmplt>
 801269c:	2800      	cmp	r0, #0
 801269e:	d047      	beq.n	8012730 <_dtoa_r+0x218>
 80126a0:	9b03      	ldr	r3, [sp, #12]
 80126a2:	3b01      	subs	r3, #1
 80126a4:	9303      	str	r3, [sp, #12]
 80126a6:	2300      	movs	r3, #0
 80126a8:	9316      	str	r3, [sp, #88]	; 0x58
 80126aa:	2200      	movs	r2, #0
 80126ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80126ae:	920a      	str	r2, [sp, #40]	; 0x28
 80126b0:	1bdb      	subs	r3, r3, r7
 80126b2:	1e5a      	subs	r2, r3, #1
 80126b4:	d53e      	bpl.n	8012734 <_dtoa_r+0x21c>
 80126b6:	2201      	movs	r2, #1
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	930a      	str	r3, [sp, #40]	; 0x28
 80126bc:	2300      	movs	r3, #0
 80126be:	930c      	str	r3, [sp, #48]	; 0x30
 80126c0:	9b03      	ldr	r3, [sp, #12]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	db38      	blt.n	8012738 <_dtoa_r+0x220>
 80126c6:	9a03      	ldr	r2, [sp, #12]
 80126c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126ca:	4694      	mov	ip, r2
 80126cc:	4463      	add	r3, ip
 80126ce:	930c      	str	r3, [sp, #48]	; 0x30
 80126d0:	2300      	movs	r3, #0
 80126d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80126d4:	930d      	str	r3, [sp, #52]	; 0x34
 80126d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126d8:	2401      	movs	r4, #1
 80126da:	2b09      	cmp	r3, #9
 80126dc:	d867      	bhi.n	80127ae <_dtoa_r+0x296>
 80126de:	2b05      	cmp	r3, #5
 80126e0:	dd02      	ble.n	80126e8 <_dtoa_r+0x1d0>
 80126e2:	2400      	movs	r4, #0
 80126e4:	3b04      	subs	r3, #4
 80126e6:	9322      	str	r3, [sp, #136]	; 0x88
 80126e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126ea:	1e98      	subs	r0, r3, #2
 80126ec:	2803      	cmp	r0, #3
 80126ee:	d867      	bhi.n	80127c0 <_dtoa_r+0x2a8>
 80126f0:	f7ed fd12 	bl	8000118 <__gnu_thumb1_case_uqi>
 80126f4:	5b383a2b 	.word	0x5b383a2b
 80126f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126fa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80126fc:	18f6      	adds	r6, r6, r3
 80126fe:	4b68      	ldr	r3, [pc, #416]	; (80128a0 <_dtoa_r+0x388>)
 8012700:	18f2      	adds	r2, r6, r3
 8012702:	2a20      	cmp	r2, #32
 8012704:	dd0f      	ble.n	8012726 <_dtoa_r+0x20e>
 8012706:	2340      	movs	r3, #64	; 0x40
 8012708:	1a9b      	subs	r3, r3, r2
 801270a:	409f      	lsls	r7, r3
 801270c:	4b65      	ldr	r3, [pc, #404]	; (80128a4 <_dtoa_r+0x38c>)
 801270e:	0038      	movs	r0, r7
 8012710:	18f3      	adds	r3, r6, r3
 8012712:	40dc      	lsrs	r4, r3
 8012714:	4320      	orrs	r0, r4
 8012716:	f7f0 fca5 	bl	8003064 <__aeabi_ui2d>
 801271a:	2201      	movs	r2, #1
 801271c:	4b62      	ldr	r3, [pc, #392]	; (80128a8 <_dtoa_r+0x390>)
 801271e:	1e77      	subs	r7, r6, #1
 8012720:	18cb      	adds	r3, r1, r3
 8012722:	9217      	str	r2, [sp, #92]	; 0x5c
 8012724:	e776      	b.n	8012614 <_dtoa_r+0xfc>
 8012726:	2320      	movs	r3, #32
 8012728:	0020      	movs	r0, r4
 801272a:	1a9b      	subs	r3, r3, r2
 801272c:	4098      	lsls	r0, r3
 801272e:	e7f2      	b.n	8012716 <_dtoa_r+0x1fe>
 8012730:	9016      	str	r0, [sp, #88]	; 0x58
 8012732:	e7ba      	b.n	80126aa <_dtoa_r+0x192>
 8012734:	920c      	str	r2, [sp, #48]	; 0x30
 8012736:	e7c3      	b.n	80126c0 <_dtoa_r+0x1a8>
 8012738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801273a:	9a03      	ldr	r2, [sp, #12]
 801273c:	1a9b      	subs	r3, r3, r2
 801273e:	930a      	str	r3, [sp, #40]	; 0x28
 8012740:	4253      	negs	r3, r2
 8012742:	930d      	str	r3, [sp, #52]	; 0x34
 8012744:	2300      	movs	r3, #0
 8012746:	9313      	str	r3, [sp, #76]	; 0x4c
 8012748:	e7c5      	b.n	80126d6 <_dtoa_r+0x1be>
 801274a:	2300      	movs	r3, #0
 801274c:	930f      	str	r3, [sp, #60]	; 0x3c
 801274e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012750:	930b      	str	r3, [sp, #44]	; 0x2c
 8012752:	9307      	str	r3, [sp, #28]
 8012754:	2b00      	cmp	r3, #0
 8012756:	dc13      	bgt.n	8012780 <_dtoa_r+0x268>
 8012758:	2301      	movs	r3, #1
 801275a:	001a      	movs	r2, r3
 801275c:	930b      	str	r3, [sp, #44]	; 0x2c
 801275e:	9307      	str	r3, [sp, #28]
 8012760:	9223      	str	r2, [sp, #140]	; 0x8c
 8012762:	e00d      	b.n	8012780 <_dtoa_r+0x268>
 8012764:	2301      	movs	r3, #1
 8012766:	e7f1      	b.n	801274c <_dtoa_r+0x234>
 8012768:	2300      	movs	r3, #0
 801276a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801276c:	930f      	str	r3, [sp, #60]	; 0x3c
 801276e:	4694      	mov	ip, r2
 8012770:	9b03      	ldr	r3, [sp, #12]
 8012772:	4463      	add	r3, ip
 8012774:	930b      	str	r3, [sp, #44]	; 0x2c
 8012776:	3301      	adds	r3, #1
 8012778:	9307      	str	r3, [sp, #28]
 801277a:	2b00      	cmp	r3, #0
 801277c:	dc00      	bgt.n	8012780 <_dtoa_r+0x268>
 801277e:	2301      	movs	r3, #1
 8012780:	9a04      	ldr	r2, [sp, #16]
 8012782:	2100      	movs	r1, #0
 8012784:	69d0      	ldr	r0, [r2, #28]
 8012786:	2204      	movs	r2, #4
 8012788:	0015      	movs	r5, r2
 801278a:	3514      	adds	r5, #20
 801278c:	429d      	cmp	r5, r3
 801278e:	d91b      	bls.n	80127c8 <_dtoa_r+0x2b0>
 8012790:	6041      	str	r1, [r0, #4]
 8012792:	9804      	ldr	r0, [sp, #16]
 8012794:	f001 f886 	bl	80138a4 <_Balloc>
 8012798:	9006      	str	r0, [sp, #24]
 801279a:	2800      	cmp	r0, #0
 801279c:	d117      	bne.n	80127ce <_dtoa_r+0x2b6>
 801279e:	21b0      	movs	r1, #176	; 0xb0
 80127a0:	4b42      	ldr	r3, [pc, #264]	; (80128ac <_dtoa_r+0x394>)
 80127a2:	482e      	ldr	r0, [pc, #184]	; (801285c <_dtoa_r+0x344>)
 80127a4:	9a06      	ldr	r2, [sp, #24]
 80127a6:	31ff      	adds	r1, #255	; 0xff
 80127a8:	e6cb      	b.n	8012542 <_dtoa_r+0x2a>
 80127aa:	2301      	movs	r3, #1
 80127ac:	e7dd      	b.n	801276a <_dtoa_r+0x252>
 80127ae:	2300      	movs	r3, #0
 80127b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80127b2:	9322      	str	r3, [sp, #136]	; 0x88
 80127b4:	3b01      	subs	r3, #1
 80127b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80127b8:	9307      	str	r3, [sp, #28]
 80127ba:	2200      	movs	r2, #0
 80127bc:	3313      	adds	r3, #19
 80127be:	e7cf      	b.n	8012760 <_dtoa_r+0x248>
 80127c0:	2301      	movs	r3, #1
 80127c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80127c4:	3b02      	subs	r3, #2
 80127c6:	e7f6      	b.n	80127b6 <_dtoa_r+0x29e>
 80127c8:	3101      	adds	r1, #1
 80127ca:	0052      	lsls	r2, r2, #1
 80127cc:	e7dc      	b.n	8012788 <_dtoa_r+0x270>
 80127ce:	9b04      	ldr	r3, [sp, #16]
 80127d0:	9a06      	ldr	r2, [sp, #24]
 80127d2:	69db      	ldr	r3, [r3, #28]
 80127d4:	601a      	str	r2, [r3, #0]
 80127d6:	9b07      	ldr	r3, [sp, #28]
 80127d8:	2b0e      	cmp	r3, #14
 80127da:	d900      	bls.n	80127de <_dtoa_r+0x2c6>
 80127dc:	e0e5      	b.n	80129aa <_dtoa_r+0x492>
 80127de:	2c00      	cmp	r4, #0
 80127e0:	d100      	bne.n	80127e4 <_dtoa_r+0x2cc>
 80127e2:	e0e2      	b.n	80129aa <_dtoa_r+0x492>
 80127e4:	9b03      	ldr	r3, [sp, #12]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	dd64      	ble.n	80128b4 <_dtoa_r+0x39c>
 80127ea:	210f      	movs	r1, #15
 80127ec:	9a03      	ldr	r2, [sp, #12]
 80127ee:	4b2b      	ldr	r3, [pc, #172]	; (801289c <_dtoa_r+0x384>)
 80127f0:	400a      	ands	r2, r1
 80127f2:	00d2      	lsls	r2, r2, #3
 80127f4:	189b      	adds	r3, r3, r2
 80127f6:	681e      	ldr	r6, [r3, #0]
 80127f8:	685f      	ldr	r7, [r3, #4]
 80127fa:	9b03      	ldr	r3, [sp, #12]
 80127fc:	2402      	movs	r4, #2
 80127fe:	111d      	asrs	r5, r3, #4
 8012800:	05db      	lsls	r3, r3, #23
 8012802:	d50a      	bpl.n	801281a <_dtoa_r+0x302>
 8012804:	4b2a      	ldr	r3, [pc, #168]	; (80128b0 <_dtoa_r+0x398>)
 8012806:	400d      	ands	r5, r1
 8012808:	6a1a      	ldr	r2, [r3, #32]
 801280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801280c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801280e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012810:	f7ef f966 	bl	8001ae0 <__aeabi_ddiv>
 8012814:	9008      	str	r0, [sp, #32]
 8012816:	9109      	str	r1, [sp, #36]	; 0x24
 8012818:	3401      	adds	r4, #1
 801281a:	4b25      	ldr	r3, [pc, #148]	; (80128b0 <_dtoa_r+0x398>)
 801281c:	930e      	str	r3, [sp, #56]	; 0x38
 801281e:	2d00      	cmp	r5, #0
 8012820:	d108      	bne.n	8012834 <_dtoa_r+0x31c>
 8012822:	9808      	ldr	r0, [sp, #32]
 8012824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012826:	0032      	movs	r2, r6
 8012828:	003b      	movs	r3, r7
 801282a:	f7ef f959 	bl	8001ae0 <__aeabi_ddiv>
 801282e:	9008      	str	r0, [sp, #32]
 8012830:	9109      	str	r1, [sp, #36]	; 0x24
 8012832:	e05a      	b.n	80128ea <_dtoa_r+0x3d2>
 8012834:	2301      	movs	r3, #1
 8012836:	421d      	tst	r5, r3
 8012838:	d009      	beq.n	801284e <_dtoa_r+0x336>
 801283a:	18e4      	adds	r4, r4, r3
 801283c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801283e:	0030      	movs	r0, r6
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	0039      	movs	r1, r7
 8012846:	f7ef fd45 	bl	80022d4 <__aeabi_dmul>
 801284a:	0006      	movs	r6, r0
 801284c:	000f      	movs	r7, r1
 801284e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012850:	106d      	asrs	r5, r5, #1
 8012852:	3308      	adds	r3, #8
 8012854:	e7e2      	b.n	801281c <_dtoa_r+0x304>
 8012856:	46c0      	nop			; (mov r8, r8)
 8012858:	08017542 	.word	0x08017542
 801285c:	08017604 	.word	0x08017604
 8012860:	7ff00000 	.word	0x7ff00000
 8012864:	0000270f 	.word	0x0000270f
 8012868:	08017600 	.word	0x08017600
 801286c:	08017603 	.word	0x08017603
 8012870:	08017519 	.word	0x08017519
 8012874:	0801751a 	.word	0x0801751a
 8012878:	3ff00000 	.word	0x3ff00000
 801287c:	fffffc01 	.word	0xfffffc01
 8012880:	3ff80000 	.word	0x3ff80000
 8012884:	636f4361 	.word	0x636f4361
 8012888:	3fd287a7 	.word	0x3fd287a7
 801288c:	8b60c8b3 	.word	0x8b60c8b3
 8012890:	3fc68a28 	.word	0x3fc68a28
 8012894:	509f79fb 	.word	0x509f79fb
 8012898:	3fd34413 	.word	0x3fd34413
 801289c:	08017750 	.word	0x08017750
 80128a0:	00000432 	.word	0x00000432
 80128a4:	00000412 	.word	0x00000412
 80128a8:	fe100000 	.word	0xfe100000
 80128ac:	0801765c 	.word	0x0801765c
 80128b0:	08017728 	.word	0x08017728
 80128b4:	9b03      	ldr	r3, [sp, #12]
 80128b6:	2402      	movs	r4, #2
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d016      	beq.n	80128ea <_dtoa_r+0x3d2>
 80128bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80128be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80128c0:	220f      	movs	r2, #15
 80128c2:	425d      	negs	r5, r3
 80128c4:	402a      	ands	r2, r5
 80128c6:	4bdd      	ldr	r3, [pc, #884]	; (8012c3c <_dtoa_r+0x724>)
 80128c8:	00d2      	lsls	r2, r2, #3
 80128ca:	189b      	adds	r3, r3, r2
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	f7ef fd00 	bl	80022d4 <__aeabi_dmul>
 80128d4:	2701      	movs	r7, #1
 80128d6:	2300      	movs	r3, #0
 80128d8:	9008      	str	r0, [sp, #32]
 80128da:	9109      	str	r1, [sp, #36]	; 0x24
 80128dc:	4ed8      	ldr	r6, [pc, #864]	; (8012c40 <_dtoa_r+0x728>)
 80128de:	112d      	asrs	r5, r5, #4
 80128e0:	2d00      	cmp	r5, #0
 80128e2:	d000      	beq.n	80128e6 <_dtoa_r+0x3ce>
 80128e4:	e091      	b.n	8012a0a <_dtoa_r+0x4f2>
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1a1      	bne.n	801282e <_dtoa_r+0x316>
 80128ea:	9e08      	ldr	r6, [sp, #32]
 80128ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80128ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d100      	bne.n	80128f6 <_dtoa_r+0x3de>
 80128f4:	e094      	b.n	8012a20 <_dtoa_r+0x508>
 80128f6:	2200      	movs	r2, #0
 80128f8:	0030      	movs	r0, r6
 80128fa:	0039      	movs	r1, r7
 80128fc:	4bd1      	ldr	r3, [pc, #836]	; (8012c44 <_dtoa_r+0x72c>)
 80128fe:	f7ed fdab 	bl	8000458 <__aeabi_dcmplt>
 8012902:	2800      	cmp	r0, #0
 8012904:	d100      	bne.n	8012908 <_dtoa_r+0x3f0>
 8012906:	e08b      	b.n	8012a20 <_dtoa_r+0x508>
 8012908:	9b07      	ldr	r3, [sp, #28]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d100      	bne.n	8012910 <_dtoa_r+0x3f8>
 801290e:	e087      	b.n	8012a20 <_dtoa_r+0x508>
 8012910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012912:	2b00      	cmp	r3, #0
 8012914:	dd45      	ble.n	80129a2 <_dtoa_r+0x48a>
 8012916:	9b03      	ldr	r3, [sp, #12]
 8012918:	2200      	movs	r2, #0
 801291a:	3b01      	subs	r3, #1
 801291c:	930e      	str	r3, [sp, #56]	; 0x38
 801291e:	0030      	movs	r0, r6
 8012920:	4bc9      	ldr	r3, [pc, #804]	; (8012c48 <_dtoa_r+0x730>)
 8012922:	0039      	movs	r1, r7
 8012924:	f7ef fcd6 	bl	80022d4 <__aeabi_dmul>
 8012928:	9008      	str	r0, [sp, #32]
 801292a:	9109      	str	r1, [sp, #36]	; 0x24
 801292c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801292e:	3401      	adds	r4, #1
 8012930:	0020      	movs	r0, r4
 8012932:	9e08      	ldr	r6, [sp, #32]
 8012934:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012936:	9312      	str	r3, [sp, #72]	; 0x48
 8012938:	f7f0 fb64 	bl	8003004 <__aeabi_i2d>
 801293c:	0032      	movs	r2, r6
 801293e:	003b      	movs	r3, r7
 8012940:	f7ef fcc8 	bl	80022d4 <__aeabi_dmul>
 8012944:	2200      	movs	r2, #0
 8012946:	4bc1      	ldr	r3, [pc, #772]	; (8012c4c <_dtoa_r+0x734>)
 8012948:	f7ee fd6a 	bl	8001420 <__aeabi_dadd>
 801294c:	4ac0      	ldr	r2, [pc, #768]	; (8012c50 <_dtoa_r+0x738>)
 801294e:	9014      	str	r0, [sp, #80]	; 0x50
 8012950:	9115      	str	r1, [sp, #84]	; 0x54
 8012952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012954:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8012956:	4694      	mov	ip, r2
 8012958:	9308      	str	r3, [sp, #32]
 801295a:	9409      	str	r4, [sp, #36]	; 0x24
 801295c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801295e:	4463      	add	r3, ip
 8012960:	9318      	str	r3, [sp, #96]	; 0x60
 8012962:	9309      	str	r3, [sp, #36]	; 0x24
 8012964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012966:	2b00      	cmp	r3, #0
 8012968:	d15e      	bne.n	8012a28 <_dtoa_r+0x510>
 801296a:	2200      	movs	r2, #0
 801296c:	4bb9      	ldr	r3, [pc, #740]	; (8012c54 <_dtoa_r+0x73c>)
 801296e:	0030      	movs	r0, r6
 8012970:	0039      	movs	r1, r7
 8012972:	f7ef ff71 	bl	8002858 <__aeabi_dsub>
 8012976:	9a08      	ldr	r2, [sp, #32]
 8012978:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801297a:	0004      	movs	r4, r0
 801297c:	000d      	movs	r5, r1
 801297e:	f7ed fd7f 	bl	8000480 <__aeabi_dcmpgt>
 8012982:	2800      	cmp	r0, #0
 8012984:	d000      	beq.n	8012988 <_dtoa_r+0x470>
 8012986:	e2b3      	b.n	8012ef0 <_dtoa_r+0x9d8>
 8012988:	48b3      	ldr	r0, [pc, #716]	; (8012c58 <_dtoa_r+0x740>)
 801298a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801298c:	4684      	mov	ip, r0
 801298e:	4461      	add	r1, ip
 8012990:	000b      	movs	r3, r1
 8012992:	0020      	movs	r0, r4
 8012994:	0029      	movs	r1, r5
 8012996:	9a08      	ldr	r2, [sp, #32]
 8012998:	f7ed fd5e 	bl	8000458 <__aeabi_dcmplt>
 801299c:	2800      	cmp	r0, #0
 801299e:	d000      	beq.n	80129a2 <_dtoa_r+0x48a>
 80129a0:	e2a3      	b.n	8012eea <_dtoa_r+0x9d2>
 80129a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80129a6:	9308      	str	r3, [sp, #32]
 80129a8:	9409      	str	r4, [sp, #36]	; 0x24
 80129aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	da00      	bge.n	80129b2 <_dtoa_r+0x49a>
 80129b0:	e179      	b.n	8012ca6 <_dtoa_r+0x78e>
 80129b2:	9a03      	ldr	r2, [sp, #12]
 80129b4:	2a0e      	cmp	r2, #14
 80129b6:	dd00      	ble.n	80129ba <_dtoa_r+0x4a2>
 80129b8:	e175      	b.n	8012ca6 <_dtoa_r+0x78e>
 80129ba:	4ba0      	ldr	r3, [pc, #640]	; (8012c3c <_dtoa_r+0x724>)
 80129bc:	00d2      	lsls	r2, r2, #3
 80129be:	189b      	adds	r3, r3, r2
 80129c0:	681e      	ldr	r6, [r3, #0]
 80129c2:	685f      	ldr	r7, [r3, #4]
 80129c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	db00      	blt.n	80129cc <_dtoa_r+0x4b4>
 80129ca:	e0e5      	b.n	8012b98 <_dtoa_r+0x680>
 80129cc:	9b07      	ldr	r3, [sp, #28]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	dd00      	ble.n	80129d4 <_dtoa_r+0x4bc>
 80129d2:	e0e1      	b.n	8012b98 <_dtoa_r+0x680>
 80129d4:	d000      	beq.n	80129d8 <_dtoa_r+0x4c0>
 80129d6:	e288      	b.n	8012eea <_dtoa_r+0x9d2>
 80129d8:	2200      	movs	r2, #0
 80129da:	0030      	movs	r0, r6
 80129dc:	0039      	movs	r1, r7
 80129de:	4b9d      	ldr	r3, [pc, #628]	; (8012c54 <_dtoa_r+0x73c>)
 80129e0:	f7ef fc78 	bl	80022d4 <__aeabi_dmul>
 80129e4:	9a08      	ldr	r2, [sp, #32]
 80129e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e8:	f7ed fd54 	bl	8000494 <__aeabi_dcmpge>
 80129ec:	9e07      	ldr	r6, [sp, #28]
 80129ee:	0037      	movs	r7, r6
 80129f0:	2800      	cmp	r0, #0
 80129f2:	d000      	beq.n	80129f6 <_dtoa_r+0x4de>
 80129f4:	e25f      	b.n	8012eb6 <_dtoa_r+0x99e>
 80129f6:	9b06      	ldr	r3, [sp, #24]
 80129f8:	9a06      	ldr	r2, [sp, #24]
 80129fa:	3301      	adds	r3, #1
 80129fc:	9308      	str	r3, [sp, #32]
 80129fe:	2331      	movs	r3, #49	; 0x31
 8012a00:	7013      	strb	r3, [r2, #0]
 8012a02:	9b03      	ldr	r3, [sp, #12]
 8012a04:	3301      	adds	r3, #1
 8012a06:	9303      	str	r3, [sp, #12]
 8012a08:	e25a      	b.n	8012ec0 <_dtoa_r+0x9a8>
 8012a0a:	423d      	tst	r5, r7
 8012a0c:	d005      	beq.n	8012a1a <_dtoa_r+0x502>
 8012a0e:	6832      	ldr	r2, [r6, #0]
 8012a10:	6873      	ldr	r3, [r6, #4]
 8012a12:	f7ef fc5f 	bl	80022d4 <__aeabi_dmul>
 8012a16:	003b      	movs	r3, r7
 8012a18:	3401      	adds	r4, #1
 8012a1a:	106d      	asrs	r5, r5, #1
 8012a1c:	3608      	adds	r6, #8
 8012a1e:	e75f      	b.n	80128e0 <_dtoa_r+0x3c8>
 8012a20:	9b03      	ldr	r3, [sp, #12]
 8012a22:	930e      	str	r3, [sp, #56]	; 0x38
 8012a24:	9b07      	ldr	r3, [sp, #28]
 8012a26:	e783      	b.n	8012930 <_dtoa_r+0x418>
 8012a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a2a:	4b84      	ldr	r3, [pc, #528]	; (8012c3c <_dtoa_r+0x724>)
 8012a2c:	3a01      	subs	r2, #1
 8012a2e:	00d2      	lsls	r2, r2, #3
 8012a30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a32:	189b      	adds	r3, r3, r2
 8012a34:	9c08      	ldr	r4, [sp, #32]
 8012a36:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	2900      	cmp	r1, #0
 8012a3e:	d051      	beq.n	8012ae4 <_dtoa_r+0x5cc>
 8012a40:	2000      	movs	r0, #0
 8012a42:	4986      	ldr	r1, [pc, #536]	; (8012c5c <_dtoa_r+0x744>)
 8012a44:	f7ef f84c 	bl	8001ae0 <__aeabi_ddiv>
 8012a48:	0022      	movs	r2, r4
 8012a4a:	002b      	movs	r3, r5
 8012a4c:	f7ef ff04 	bl	8002858 <__aeabi_dsub>
 8012a50:	9a06      	ldr	r2, [sp, #24]
 8012a52:	0004      	movs	r4, r0
 8012a54:	4694      	mov	ip, r2
 8012a56:	000d      	movs	r5, r1
 8012a58:	9b06      	ldr	r3, [sp, #24]
 8012a5a:	9314      	str	r3, [sp, #80]	; 0x50
 8012a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a5e:	4463      	add	r3, ip
 8012a60:	9318      	str	r3, [sp, #96]	; 0x60
 8012a62:	0039      	movs	r1, r7
 8012a64:	0030      	movs	r0, r6
 8012a66:	f7f0 fa97 	bl	8002f98 <__aeabi_d2iz>
 8012a6a:	9012      	str	r0, [sp, #72]	; 0x48
 8012a6c:	f7f0 faca 	bl	8003004 <__aeabi_i2d>
 8012a70:	0002      	movs	r2, r0
 8012a72:	000b      	movs	r3, r1
 8012a74:	0030      	movs	r0, r6
 8012a76:	0039      	movs	r1, r7
 8012a78:	f7ef feee 	bl	8002858 <__aeabi_dsub>
 8012a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a80:	3301      	adds	r3, #1
 8012a82:	9308      	str	r3, [sp, #32]
 8012a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a86:	0006      	movs	r6, r0
 8012a88:	3330      	adds	r3, #48	; 0x30
 8012a8a:	7013      	strb	r3, [r2, #0]
 8012a8c:	0022      	movs	r2, r4
 8012a8e:	002b      	movs	r3, r5
 8012a90:	000f      	movs	r7, r1
 8012a92:	f7ed fce1 	bl	8000458 <__aeabi_dcmplt>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d174      	bne.n	8012b84 <_dtoa_r+0x66c>
 8012a9a:	0032      	movs	r2, r6
 8012a9c:	003b      	movs	r3, r7
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	4968      	ldr	r1, [pc, #416]	; (8012c44 <_dtoa_r+0x72c>)
 8012aa2:	f7ef fed9 	bl	8002858 <__aeabi_dsub>
 8012aa6:	0022      	movs	r2, r4
 8012aa8:	002b      	movs	r3, r5
 8012aaa:	f7ed fcd5 	bl	8000458 <__aeabi_dcmplt>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d000      	beq.n	8012ab4 <_dtoa_r+0x59c>
 8012ab2:	e0d7      	b.n	8012c64 <_dtoa_r+0x74c>
 8012ab4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012ab6:	9a08      	ldr	r2, [sp, #32]
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d100      	bne.n	8012abe <_dtoa_r+0x5a6>
 8012abc:	e771      	b.n	80129a2 <_dtoa_r+0x48a>
 8012abe:	2200      	movs	r2, #0
 8012ac0:	0020      	movs	r0, r4
 8012ac2:	0029      	movs	r1, r5
 8012ac4:	4b60      	ldr	r3, [pc, #384]	; (8012c48 <_dtoa_r+0x730>)
 8012ac6:	f7ef fc05 	bl	80022d4 <__aeabi_dmul>
 8012aca:	4b5f      	ldr	r3, [pc, #380]	; (8012c48 <_dtoa_r+0x730>)
 8012acc:	0004      	movs	r4, r0
 8012ace:	000d      	movs	r5, r1
 8012ad0:	0030      	movs	r0, r6
 8012ad2:	0039      	movs	r1, r7
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	f7ef fbfd 	bl	80022d4 <__aeabi_dmul>
 8012ada:	9b08      	ldr	r3, [sp, #32]
 8012adc:	0006      	movs	r6, r0
 8012ade:	000f      	movs	r7, r1
 8012ae0:	9314      	str	r3, [sp, #80]	; 0x50
 8012ae2:	e7be      	b.n	8012a62 <_dtoa_r+0x54a>
 8012ae4:	0020      	movs	r0, r4
 8012ae6:	0029      	movs	r1, r5
 8012ae8:	f7ef fbf4 	bl	80022d4 <__aeabi_dmul>
 8012aec:	9a06      	ldr	r2, [sp, #24]
 8012aee:	9b06      	ldr	r3, [sp, #24]
 8012af0:	4694      	mov	ip, r2
 8012af2:	9308      	str	r3, [sp, #32]
 8012af4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012af6:	9014      	str	r0, [sp, #80]	; 0x50
 8012af8:	9115      	str	r1, [sp, #84]	; 0x54
 8012afa:	4463      	add	r3, ip
 8012afc:	9319      	str	r3, [sp, #100]	; 0x64
 8012afe:	0030      	movs	r0, r6
 8012b00:	0039      	movs	r1, r7
 8012b02:	f7f0 fa49 	bl	8002f98 <__aeabi_d2iz>
 8012b06:	9018      	str	r0, [sp, #96]	; 0x60
 8012b08:	f7f0 fa7c 	bl	8003004 <__aeabi_i2d>
 8012b0c:	0002      	movs	r2, r0
 8012b0e:	000b      	movs	r3, r1
 8012b10:	0030      	movs	r0, r6
 8012b12:	0039      	movs	r1, r7
 8012b14:	f7ef fea0 	bl	8002858 <__aeabi_dsub>
 8012b18:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8012b1a:	9b08      	ldr	r3, [sp, #32]
 8012b1c:	3630      	adds	r6, #48	; 0x30
 8012b1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012b20:	701e      	strb	r6, [r3, #0]
 8012b22:	3301      	adds	r3, #1
 8012b24:	0004      	movs	r4, r0
 8012b26:	000d      	movs	r5, r1
 8012b28:	9308      	str	r3, [sp, #32]
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d12d      	bne.n	8012b8a <_dtoa_r+0x672>
 8012b2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012b30:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012b32:	9a06      	ldr	r2, [sp, #24]
 8012b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b36:	4694      	mov	ip, r2
 8012b38:	4463      	add	r3, ip
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	9308      	str	r3, [sp, #32]
 8012b3e:	4b47      	ldr	r3, [pc, #284]	; (8012c5c <_dtoa_r+0x744>)
 8012b40:	f7ee fc6e 	bl	8001420 <__aeabi_dadd>
 8012b44:	0002      	movs	r2, r0
 8012b46:	000b      	movs	r3, r1
 8012b48:	0020      	movs	r0, r4
 8012b4a:	0029      	movs	r1, r5
 8012b4c:	f7ed fc98 	bl	8000480 <__aeabi_dcmpgt>
 8012b50:	2800      	cmp	r0, #0
 8012b52:	d000      	beq.n	8012b56 <_dtoa_r+0x63e>
 8012b54:	e086      	b.n	8012c64 <_dtoa_r+0x74c>
 8012b56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	493f      	ldr	r1, [pc, #252]	; (8012c5c <_dtoa_r+0x744>)
 8012b5e:	f7ef fe7b 	bl	8002858 <__aeabi_dsub>
 8012b62:	0002      	movs	r2, r0
 8012b64:	000b      	movs	r3, r1
 8012b66:	0020      	movs	r0, r4
 8012b68:	0029      	movs	r1, r5
 8012b6a:	f7ed fc75 	bl	8000458 <__aeabi_dcmplt>
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d100      	bne.n	8012b74 <_dtoa_r+0x65c>
 8012b72:	e716      	b.n	80129a2 <_dtoa_r+0x48a>
 8012b74:	9b08      	ldr	r3, [sp, #32]
 8012b76:	001a      	movs	r2, r3
 8012b78:	3a01      	subs	r2, #1
 8012b7a:	9208      	str	r2, [sp, #32]
 8012b7c:	7812      	ldrb	r2, [r2, #0]
 8012b7e:	2a30      	cmp	r2, #48	; 0x30
 8012b80:	d0f8      	beq.n	8012b74 <_dtoa_r+0x65c>
 8012b82:	9308      	str	r3, [sp, #32]
 8012b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b86:	9303      	str	r3, [sp, #12]
 8012b88:	e046      	b.n	8012c18 <_dtoa_r+0x700>
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	4b2e      	ldr	r3, [pc, #184]	; (8012c48 <_dtoa_r+0x730>)
 8012b8e:	f7ef fba1 	bl	80022d4 <__aeabi_dmul>
 8012b92:	0006      	movs	r6, r0
 8012b94:	000f      	movs	r7, r1
 8012b96:	e7b2      	b.n	8012afe <_dtoa_r+0x5e6>
 8012b98:	9b06      	ldr	r3, [sp, #24]
 8012b9a:	9a06      	ldr	r2, [sp, #24]
 8012b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8012b9e:	9b07      	ldr	r3, [sp, #28]
 8012ba0:	9c08      	ldr	r4, [sp, #32]
 8012ba2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012ba4:	3b01      	subs	r3, #1
 8012ba6:	189b      	adds	r3, r3, r2
 8012ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012baa:	0032      	movs	r2, r6
 8012bac:	003b      	movs	r3, r7
 8012bae:	0020      	movs	r0, r4
 8012bb0:	0029      	movs	r1, r5
 8012bb2:	f7ee ff95 	bl	8001ae0 <__aeabi_ddiv>
 8012bb6:	f7f0 f9ef 	bl	8002f98 <__aeabi_d2iz>
 8012bba:	9007      	str	r0, [sp, #28]
 8012bbc:	f7f0 fa22 	bl	8003004 <__aeabi_i2d>
 8012bc0:	0032      	movs	r2, r6
 8012bc2:	003b      	movs	r3, r7
 8012bc4:	f7ef fb86 	bl	80022d4 <__aeabi_dmul>
 8012bc8:	0002      	movs	r2, r0
 8012bca:	000b      	movs	r3, r1
 8012bcc:	0020      	movs	r0, r4
 8012bce:	0029      	movs	r1, r5
 8012bd0:	f7ef fe42 	bl	8002858 <__aeabi_dsub>
 8012bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bd6:	001a      	movs	r2, r3
 8012bd8:	3201      	adds	r2, #1
 8012bda:	920a      	str	r2, [sp, #40]	; 0x28
 8012bdc:	9208      	str	r2, [sp, #32]
 8012bde:	9a07      	ldr	r2, [sp, #28]
 8012be0:	3230      	adds	r2, #48	; 0x30
 8012be2:	701a      	strb	r2, [r3, #0]
 8012be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d14f      	bne.n	8012c8a <_dtoa_r+0x772>
 8012bea:	0002      	movs	r2, r0
 8012bec:	000b      	movs	r3, r1
 8012bee:	f7ee fc17 	bl	8001420 <__aeabi_dadd>
 8012bf2:	0032      	movs	r2, r6
 8012bf4:	003b      	movs	r3, r7
 8012bf6:	0004      	movs	r4, r0
 8012bf8:	000d      	movs	r5, r1
 8012bfa:	f7ed fc41 	bl	8000480 <__aeabi_dcmpgt>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	d12e      	bne.n	8012c60 <_dtoa_r+0x748>
 8012c02:	0032      	movs	r2, r6
 8012c04:	003b      	movs	r3, r7
 8012c06:	0020      	movs	r0, r4
 8012c08:	0029      	movs	r1, r5
 8012c0a:	f7ed fc1f 	bl	800044c <__aeabi_dcmpeq>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d002      	beq.n	8012c18 <_dtoa_r+0x700>
 8012c12:	9b07      	ldr	r3, [sp, #28]
 8012c14:	07de      	lsls	r6, r3, #31
 8012c16:	d423      	bmi.n	8012c60 <_dtoa_r+0x748>
 8012c18:	9905      	ldr	r1, [sp, #20]
 8012c1a:	9804      	ldr	r0, [sp, #16]
 8012c1c:	f000 fe86 	bl	801392c <_Bfree>
 8012c20:	2300      	movs	r3, #0
 8012c22:	9a08      	ldr	r2, [sp, #32]
 8012c24:	7013      	strb	r3, [r2, #0]
 8012c26:	9b03      	ldr	r3, [sp, #12]
 8012c28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	6013      	str	r3, [r2, #0]
 8012c2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d100      	bne.n	8012c36 <_dtoa_r+0x71e>
 8012c34:	e4ba      	b.n	80125ac <_dtoa_r+0x94>
 8012c36:	9a08      	ldr	r2, [sp, #32]
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	e4b7      	b.n	80125ac <_dtoa_r+0x94>
 8012c3c:	08017750 	.word	0x08017750
 8012c40:	08017728 	.word	0x08017728
 8012c44:	3ff00000 	.word	0x3ff00000
 8012c48:	40240000 	.word	0x40240000
 8012c4c:	401c0000 	.word	0x401c0000
 8012c50:	fcc00000 	.word	0xfcc00000
 8012c54:	40140000 	.word	0x40140000
 8012c58:	7cc00000 	.word	0x7cc00000
 8012c5c:	3fe00000 	.word	0x3fe00000
 8012c60:	9b03      	ldr	r3, [sp, #12]
 8012c62:	930e      	str	r3, [sp, #56]	; 0x38
 8012c64:	9b08      	ldr	r3, [sp, #32]
 8012c66:	9308      	str	r3, [sp, #32]
 8012c68:	3b01      	subs	r3, #1
 8012c6a:	781a      	ldrb	r2, [r3, #0]
 8012c6c:	2a39      	cmp	r2, #57	; 0x39
 8012c6e:	d108      	bne.n	8012c82 <_dtoa_r+0x76a>
 8012c70:	9a06      	ldr	r2, [sp, #24]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d1f7      	bne.n	8012c66 <_dtoa_r+0x74e>
 8012c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c78:	9906      	ldr	r1, [sp, #24]
 8012c7a:	3201      	adds	r2, #1
 8012c7c:	920e      	str	r2, [sp, #56]	; 0x38
 8012c7e:	2230      	movs	r2, #48	; 0x30
 8012c80:	700a      	strb	r2, [r1, #0]
 8012c82:	781a      	ldrb	r2, [r3, #0]
 8012c84:	3201      	adds	r2, #1
 8012c86:	701a      	strb	r2, [r3, #0]
 8012c88:	e77c      	b.n	8012b84 <_dtoa_r+0x66c>
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	4ba9      	ldr	r3, [pc, #676]	; (8012f34 <_dtoa_r+0xa1c>)
 8012c8e:	f7ef fb21 	bl	80022d4 <__aeabi_dmul>
 8012c92:	2200      	movs	r2, #0
 8012c94:	2300      	movs	r3, #0
 8012c96:	0004      	movs	r4, r0
 8012c98:	000d      	movs	r5, r1
 8012c9a:	f7ed fbd7 	bl	800044c <__aeabi_dcmpeq>
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	d100      	bne.n	8012ca4 <_dtoa_r+0x78c>
 8012ca2:	e782      	b.n	8012baa <_dtoa_r+0x692>
 8012ca4:	e7b8      	b.n	8012c18 <_dtoa_r+0x700>
 8012ca6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012ca8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012caa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012cac:	2f00      	cmp	r7, #0
 8012cae:	d012      	beq.n	8012cd6 <_dtoa_r+0x7be>
 8012cb0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012cb2:	2a01      	cmp	r2, #1
 8012cb4:	dc6e      	bgt.n	8012d94 <_dtoa_r+0x87c>
 8012cb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012cb8:	2a00      	cmp	r2, #0
 8012cba:	d065      	beq.n	8012d88 <_dtoa_r+0x870>
 8012cbc:	4a9e      	ldr	r2, [pc, #632]	; (8012f38 <_dtoa_r+0xa20>)
 8012cbe:	189b      	adds	r3, r3, r2
 8012cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cc2:	2101      	movs	r1, #1
 8012cc4:	18d2      	adds	r2, r2, r3
 8012cc6:	920a      	str	r2, [sp, #40]	; 0x28
 8012cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cca:	9804      	ldr	r0, [sp, #16]
 8012ccc:	18d3      	adds	r3, r2, r3
 8012cce:	930c      	str	r3, [sp, #48]	; 0x30
 8012cd0:	f000 ff28 	bl	8013b24 <__i2b>
 8012cd4:	0007      	movs	r7, r0
 8012cd6:	2c00      	cmp	r4, #0
 8012cd8:	d00e      	beq.n	8012cf8 <_dtoa_r+0x7e0>
 8012cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	dd0b      	ble.n	8012cf8 <_dtoa_r+0x7e0>
 8012ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ce2:	0023      	movs	r3, r4
 8012ce4:	4294      	cmp	r4, r2
 8012ce6:	dd00      	ble.n	8012cea <_dtoa_r+0x7d2>
 8012ce8:	0013      	movs	r3, r2
 8012cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cec:	1ae4      	subs	r4, r4, r3
 8012cee:	1ad2      	subs	r2, r2, r3
 8012cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8012cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cf4:	1ad3      	subs	r3, r2, r3
 8012cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8012cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d01e      	beq.n	8012d3c <_dtoa_r+0x824>
 8012cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d05c      	beq.n	8012dbe <_dtoa_r+0x8a6>
 8012d04:	2d00      	cmp	r5, #0
 8012d06:	dd10      	ble.n	8012d2a <_dtoa_r+0x812>
 8012d08:	0039      	movs	r1, r7
 8012d0a:	002a      	movs	r2, r5
 8012d0c:	9804      	ldr	r0, [sp, #16]
 8012d0e:	f000 ffd1 	bl	8013cb4 <__pow5mult>
 8012d12:	9a05      	ldr	r2, [sp, #20]
 8012d14:	0001      	movs	r1, r0
 8012d16:	0007      	movs	r7, r0
 8012d18:	9804      	ldr	r0, [sp, #16]
 8012d1a:	f000 ff1b 	bl	8013b54 <__multiply>
 8012d1e:	0006      	movs	r6, r0
 8012d20:	9905      	ldr	r1, [sp, #20]
 8012d22:	9804      	ldr	r0, [sp, #16]
 8012d24:	f000 fe02 	bl	801392c <_Bfree>
 8012d28:	9605      	str	r6, [sp, #20]
 8012d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d2c:	1b5a      	subs	r2, r3, r5
 8012d2e:	42ab      	cmp	r3, r5
 8012d30:	d004      	beq.n	8012d3c <_dtoa_r+0x824>
 8012d32:	9905      	ldr	r1, [sp, #20]
 8012d34:	9804      	ldr	r0, [sp, #16]
 8012d36:	f000 ffbd 	bl	8013cb4 <__pow5mult>
 8012d3a:	9005      	str	r0, [sp, #20]
 8012d3c:	2101      	movs	r1, #1
 8012d3e:	9804      	ldr	r0, [sp, #16]
 8012d40:	f000 fef0 	bl	8013b24 <__i2b>
 8012d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012d46:	0006      	movs	r6, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	dd3a      	ble.n	8012dc2 <_dtoa_r+0x8aa>
 8012d4c:	001a      	movs	r2, r3
 8012d4e:	0001      	movs	r1, r0
 8012d50:	9804      	ldr	r0, [sp, #16]
 8012d52:	f000 ffaf 	bl	8013cb4 <__pow5mult>
 8012d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012d58:	0006      	movs	r6, r0
 8012d5a:	2500      	movs	r5, #0
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	dc38      	bgt.n	8012dd2 <_dtoa_r+0x8ba>
 8012d60:	2500      	movs	r5, #0
 8012d62:	9b08      	ldr	r3, [sp, #32]
 8012d64:	42ab      	cmp	r3, r5
 8012d66:	d130      	bne.n	8012dca <_dtoa_r+0x8b2>
 8012d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d6a:	031b      	lsls	r3, r3, #12
 8012d6c:	42ab      	cmp	r3, r5
 8012d6e:	d12c      	bne.n	8012dca <_dtoa_r+0x8b2>
 8012d70:	4b72      	ldr	r3, [pc, #456]	; (8012f3c <_dtoa_r+0xa24>)
 8012d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d74:	4213      	tst	r3, r2
 8012d76:	d028      	beq.n	8012dca <_dtoa_r+0x8b2>
 8012d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d7a:	3501      	adds	r5, #1
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8012d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d82:	3301      	adds	r3, #1
 8012d84:	930c      	str	r3, [sp, #48]	; 0x30
 8012d86:	e020      	b.n	8012dca <_dtoa_r+0x8b2>
 8012d88:	2336      	movs	r3, #54	; 0x36
 8012d8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012d8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012d8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012d90:	1a9b      	subs	r3, r3, r2
 8012d92:	e795      	b.n	8012cc0 <_dtoa_r+0x7a8>
 8012d94:	9b07      	ldr	r3, [sp, #28]
 8012d96:	1e5d      	subs	r5, r3, #1
 8012d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d9a:	42ab      	cmp	r3, r5
 8012d9c:	db07      	blt.n	8012dae <_dtoa_r+0x896>
 8012d9e:	1b5d      	subs	r5, r3, r5
 8012da0:	9b07      	ldr	r3, [sp, #28]
 8012da2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	da8b      	bge.n	8012cc0 <_dtoa_r+0x7a8>
 8012da8:	1ae4      	subs	r4, r4, r3
 8012daa:	2300      	movs	r3, #0
 8012dac:	e788      	b.n	8012cc0 <_dtoa_r+0x7a8>
 8012dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012db0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012db2:	1aeb      	subs	r3, r5, r3
 8012db4:	18d3      	adds	r3, r2, r3
 8012db6:	950d      	str	r5, [sp, #52]	; 0x34
 8012db8:	9313      	str	r3, [sp, #76]	; 0x4c
 8012dba:	2500      	movs	r5, #0
 8012dbc:	e7f0      	b.n	8012da0 <_dtoa_r+0x888>
 8012dbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012dc0:	e7b7      	b.n	8012d32 <_dtoa_r+0x81a>
 8012dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012dc4:	2500      	movs	r5, #0
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	ddca      	ble.n	8012d60 <_dtoa_r+0x848>
 8012dca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012dcc:	2001      	movs	r0, #1
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d008      	beq.n	8012de4 <_dtoa_r+0x8cc>
 8012dd2:	6933      	ldr	r3, [r6, #16]
 8012dd4:	3303      	adds	r3, #3
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	18f3      	adds	r3, r6, r3
 8012dda:	6858      	ldr	r0, [r3, #4]
 8012ddc:	f000 fe5a 	bl	8013a94 <__hi0bits>
 8012de0:	2320      	movs	r3, #32
 8012de2:	1a18      	subs	r0, r3, r0
 8012de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012de6:	1818      	adds	r0, r3, r0
 8012de8:	0002      	movs	r2, r0
 8012dea:	231f      	movs	r3, #31
 8012dec:	401a      	ands	r2, r3
 8012dee:	4218      	tst	r0, r3
 8012df0:	d047      	beq.n	8012e82 <_dtoa_r+0x96a>
 8012df2:	3301      	adds	r3, #1
 8012df4:	1a9b      	subs	r3, r3, r2
 8012df6:	2b04      	cmp	r3, #4
 8012df8:	dd3f      	ble.n	8012e7a <_dtoa_r+0x962>
 8012dfa:	231c      	movs	r3, #28
 8012dfc:	1a9b      	subs	r3, r3, r2
 8012dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e00:	18e4      	adds	r4, r4, r3
 8012e02:	18d2      	adds	r2, r2, r3
 8012e04:	920a      	str	r2, [sp, #40]	; 0x28
 8012e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e08:	18d3      	adds	r3, r2, r3
 8012e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8012e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	dd05      	ble.n	8012e1e <_dtoa_r+0x906>
 8012e12:	001a      	movs	r2, r3
 8012e14:	9905      	ldr	r1, [sp, #20]
 8012e16:	9804      	ldr	r0, [sp, #16]
 8012e18:	f000 ffa8 	bl	8013d6c <__lshift>
 8012e1c:	9005      	str	r0, [sp, #20]
 8012e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	dd05      	ble.n	8012e30 <_dtoa_r+0x918>
 8012e24:	0031      	movs	r1, r6
 8012e26:	001a      	movs	r2, r3
 8012e28:	9804      	ldr	r0, [sp, #16]
 8012e2a:	f000 ff9f 	bl	8013d6c <__lshift>
 8012e2e:	0006      	movs	r6, r0
 8012e30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d027      	beq.n	8012e86 <_dtoa_r+0x96e>
 8012e36:	0031      	movs	r1, r6
 8012e38:	9805      	ldr	r0, [sp, #20]
 8012e3a:	f001 f805 	bl	8013e48 <__mcmp>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	da21      	bge.n	8012e86 <_dtoa_r+0x96e>
 8012e42:	9b03      	ldr	r3, [sp, #12]
 8012e44:	220a      	movs	r2, #10
 8012e46:	3b01      	subs	r3, #1
 8012e48:	9303      	str	r3, [sp, #12]
 8012e4a:	9905      	ldr	r1, [sp, #20]
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9804      	ldr	r0, [sp, #16]
 8012e50:	f000 fd90 	bl	8013974 <__multadd>
 8012e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e56:	9005      	str	r0, [sp, #20]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d100      	bne.n	8012e5e <_dtoa_r+0x946>
 8012e5c:	e15d      	b.n	801311a <_dtoa_r+0xc02>
 8012e5e:	2300      	movs	r3, #0
 8012e60:	0039      	movs	r1, r7
 8012e62:	220a      	movs	r2, #10
 8012e64:	9804      	ldr	r0, [sp, #16]
 8012e66:	f000 fd85 	bl	8013974 <__multadd>
 8012e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e6c:	0007      	movs	r7, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	dc49      	bgt.n	8012f06 <_dtoa_r+0x9ee>
 8012e72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e74:	2b02      	cmp	r3, #2
 8012e76:	dc0e      	bgt.n	8012e96 <_dtoa_r+0x97e>
 8012e78:	e045      	b.n	8012f06 <_dtoa_r+0x9ee>
 8012e7a:	2b04      	cmp	r3, #4
 8012e7c:	d0c6      	beq.n	8012e0c <_dtoa_r+0x8f4>
 8012e7e:	331c      	adds	r3, #28
 8012e80:	e7bd      	b.n	8012dfe <_dtoa_r+0x8e6>
 8012e82:	0013      	movs	r3, r2
 8012e84:	e7fb      	b.n	8012e7e <_dtoa_r+0x966>
 8012e86:	9b07      	ldr	r3, [sp, #28]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	dc36      	bgt.n	8012efa <_dtoa_r+0x9e2>
 8012e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	dd33      	ble.n	8012efa <_dtoa_r+0x9e2>
 8012e92:	9b07      	ldr	r3, [sp, #28]
 8012e94:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d10c      	bne.n	8012eb6 <_dtoa_r+0x99e>
 8012e9c:	0031      	movs	r1, r6
 8012e9e:	2205      	movs	r2, #5
 8012ea0:	9804      	ldr	r0, [sp, #16]
 8012ea2:	f000 fd67 	bl	8013974 <__multadd>
 8012ea6:	0006      	movs	r6, r0
 8012ea8:	0001      	movs	r1, r0
 8012eaa:	9805      	ldr	r0, [sp, #20]
 8012eac:	f000 ffcc 	bl	8013e48 <__mcmp>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	dd00      	ble.n	8012eb6 <_dtoa_r+0x99e>
 8012eb4:	e59f      	b.n	80129f6 <_dtoa_r+0x4de>
 8012eb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012eb8:	43db      	mvns	r3, r3
 8012eba:	9303      	str	r3, [sp, #12]
 8012ebc:	9b06      	ldr	r3, [sp, #24]
 8012ebe:	9308      	str	r3, [sp, #32]
 8012ec0:	2500      	movs	r5, #0
 8012ec2:	0031      	movs	r1, r6
 8012ec4:	9804      	ldr	r0, [sp, #16]
 8012ec6:	f000 fd31 	bl	801392c <_Bfree>
 8012eca:	2f00      	cmp	r7, #0
 8012ecc:	d100      	bne.n	8012ed0 <_dtoa_r+0x9b8>
 8012ece:	e6a3      	b.n	8012c18 <_dtoa_r+0x700>
 8012ed0:	2d00      	cmp	r5, #0
 8012ed2:	d005      	beq.n	8012ee0 <_dtoa_r+0x9c8>
 8012ed4:	42bd      	cmp	r5, r7
 8012ed6:	d003      	beq.n	8012ee0 <_dtoa_r+0x9c8>
 8012ed8:	0029      	movs	r1, r5
 8012eda:	9804      	ldr	r0, [sp, #16]
 8012edc:	f000 fd26 	bl	801392c <_Bfree>
 8012ee0:	0039      	movs	r1, r7
 8012ee2:	9804      	ldr	r0, [sp, #16]
 8012ee4:	f000 fd22 	bl	801392c <_Bfree>
 8012ee8:	e696      	b.n	8012c18 <_dtoa_r+0x700>
 8012eea:	2600      	movs	r6, #0
 8012eec:	0037      	movs	r7, r6
 8012eee:	e7e2      	b.n	8012eb6 <_dtoa_r+0x99e>
 8012ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ef2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012ef4:	9303      	str	r3, [sp, #12]
 8012ef6:	0037      	movs	r7, r6
 8012ef8:	e57d      	b.n	80129f6 <_dtoa_r+0x4de>
 8012efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d100      	bne.n	8012f02 <_dtoa_r+0x9ea>
 8012f00:	e0c3      	b.n	801308a <_dtoa_r+0xb72>
 8012f02:	9b07      	ldr	r3, [sp, #28]
 8012f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f06:	2c00      	cmp	r4, #0
 8012f08:	dd05      	ble.n	8012f16 <_dtoa_r+0x9fe>
 8012f0a:	0039      	movs	r1, r7
 8012f0c:	0022      	movs	r2, r4
 8012f0e:	9804      	ldr	r0, [sp, #16]
 8012f10:	f000 ff2c 	bl	8013d6c <__lshift>
 8012f14:	0007      	movs	r7, r0
 8012f16:	0038      	movs	r0, r7
 8012f18:	2d00      	cmp	r5, #0
 8012f1a:	d024      	beq.n	8012f66 <_dtoa_r+0xa4e>
 8012f1c:	6879      	ldr	r1, [r7, #4]
 8012f1e:	9804      	ldr	r0, [sp, #16]
 8012f20:	f000 fcc0 	bl	80138a4 <_Balloc>
 8012f24:	1e04      	subs	r4, r0, #0
 8012f26:	d111      	bne.n	8012f4c <_dtoa_r+0xa34>
 8012f28:	0022      	movs	r2, r4
 8012f2a:	4b05      	ldr	r3, [pc, #20]	; (8012f40 <_dtoa_r+0xa28>)
 8012f2c:	4805      	ldr	r0, [pc, #20]	; (8012f44 <_dtoa_r+0xa2c>)
 8012f2e:	4906      	ldr	r1, [pc, #24]	; (8012f48 <_dtoa_r+0xa30>)
 8012f30:	f7ff fb07 	bl	8012542 <_dtoa_r+0x2a>
 8012f34:	40240000 	.word	0x40240000
 8012f38:	00000433 	.word	0x00000433
 8012f3c:	7ff00000 	.word	0x7ff00000
 8012f40:	0801765c 	.word	0x0801765c
 8012f44:	08017604 	.word	0x08017604
 8012f48:	000002ef 	.word	0x000002ef
 8012f4c:	0039      	movs	r1, r7
 8012f4e:	693a      	ldr	r2, [r7, #16]
 8012f50:	310c      	adds	r1, #12
 8012f52:	3202      	adds	r2, #2
 8012f54:	0092      	lsls	r2, r2, #2
 8012f56:	300c      	adds	r0, #12
 8012f58:	f7ff fa1c 	bl	8012394 <memcpy>
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	0021      	movs	r1, r4
 8012f60:	9804      	ldr	r0, [sp, #16]
 8012f62:	f000 ff03 	bl	8013d6c <__lshift>
 8012f66:	9b06      	ldr	r3, [sp, #24]
 8012f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f6a:	9307      	str	r3, [sp, #28]
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	189b      	adds	r3, r3, r2
 8012f70:	2201      	movs	r2, #1
 8012f72:	003d      	movs	r5, r7
 8012f74:	0007      	movs	r7, r0
 8012f76:	930e      	str	r3, [sp, #56]	; 0x38
 8012f78:	9b08      	ldr	r3, [sp, #32]
 8012f7a:	4013      	ands	r3, r2
 8012f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8012f7e:	0031      	movs	r1, r6
 8012f80:	9805      	ldr	r0, [sp, #20]
 8012f82:	f7ff fa39 	bl	80123f8 <quorem>
 8012f86:	0029      	movs	r1, r5
 8012f88:	0004      	movs	r4, r0
 8012f8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8012f8c:	9805      	ldr	r0, [sp, #20]
 8012f8e:	f000 ff5b 	bl	8013e48 <__mcmp>
 8012f92:	003a      	movs	r2, r7
 8012f94:	900c      	str	r0, [sp, #48]	; 0x30
 8012f96:	0031      	movs	r1, r6
 8012f98:	9804      	ldr	r0, [sp, #16]
 8012f9a:	f000 ff71 	bl	8013e80 <__mdiff>
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	68c3      	ldr	r3, [r0, #12]
 8012fa2:	3430      	adds	r4, #48	; 0x30
 8012fa4:	9008      	str	r0, [sp, #32]
 8012fa6:	920a      	str	r2, [sp, #40]	; 0x28
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d104      	bne.n	8012fb6 <_dtoa_r+0xa9e>
 8012fac:	0001      	movs	r1, r0
 8012fae:	9805      	ldr	r0, [sp, #20]
 8012fb0:	f000 ff4a 	bl	8013e48 <__mcmp>
 8012fb4:	900a      	str	r0, [sp, #40]	; 0x28
 8012fb6:	9908      	ldr	r1, [sp, #32]
 8012fb8:	9804      	ldr	r0, [sp, #16]
 8012fba:	f000 fcb7 	bl	801392c <_Bfree>
 8012fbe:	9b07      	ldr	r3, [sp, #28]
 8012fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	9308      	str	r3, [sp, #32]
 8012fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012fc8:	4313      	orrs	r3, r2
 8012fca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	d109      	bne.n	8012fe4 <_dtoa_r+0xacc>
 8012fd0:	2c39      	cmp	r4, #57	; 0x39
 8012fd2:	d022      	beq.n	801301a <_dtoa_r+0xb02>
 8012fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	dd01      	ble.n	8012fde <_dtoa_r+0xac6>
 8012fda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012fdc:	3431      	adds	r4, #49	; 0x31
 8012fde:	9b07      	ldr	r3, [sp, #28]
 8012fe0:	701c      	strb	r4, [r3, #0]
 8012fe2:	e76e      	b.n	8012ec2 <_dtoa_r+0x9aa>
 8012fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	db04      	blt.n	8012ff4 <_dtoa_r+0xadc>
 8012fea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012fec:	4313      	orrs	r3, r2
 8012fee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ff0:	4313      	orrs	r3, r2
 8012ff2:	d11e      	bne.n	8013032 <_dtoa_r+0xb1a>
 8012ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	ddf1      	ble.n	8012fde <_dtoa_r+0xac6>
 8012ffa:	9905      	ldr	r1, [sp, #20]
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	9804      	ldr	r0, [sp, #16]
 8013000:	f000 feb4 	bl	8013d6c <__lshift>
 8013004:	0031      	movs	r1, r6
 8013006:	9005      	str	r0, [sp, #20]
 8013008:	f000 ff1e 	bl	8013e48 <__mcmp>
 801300c:	2800      	cmp	r0, #0
 801300e:	dc02      	bgt.n	8013016 <_dtoa_r+0xafe>
 8013010:	d1e5      	bne.n	8012fde <_dtoa_r+0xac6>
 8013012:	07e3      	lsls	r3, r4, #31
 8013014:	d5e3      	bpl.n	8012fde <_dtoa_r+0xac6>
 8013016:	2c39      	cmp	r4, #57	; 0x39
 8013018:	d1df      	bne.n	8012fda <_dtoa_r+0xac2>
 801301a:	2339      	movs	r3, #57	; 0x39
 801301c:	9a07      	ldr	r2, [sp, #28]
 801301e:	7013      	strb	r3, [r2, #0]
 8013020:	9b08      	ldr	r3, [sp, #32]
 8013022:	9308      	str	r3, [sp, #32]
 8013024:	3b01      	subs	r3, #1
 8013026:	781a      	ldrb	r2, [r3, #0]
 8013028:	2a39      	cmp	r2, #57	; 0x39
 801302a:	d063      	beq.n	80130f4 <_dtoa_r+0xbdc>
 801302c:	3201      	adds	r2, #1
 801302e:	701a      	strb	r2, [r3, #0]
 8013030:	e747      	b.n	8012ec2 <_dtoa_r+0x9aa>
 8013032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013034:	2b00      	cmp	r3, #0
 8013036:	dd03      	ble.n	8013040 <_dtoa_r+0xb28>
 8013038:	2c39      	cmp	r4, #57	; 0x39
 801303a:	d0ee      	beq.n	801301a <_dtoa_r+0xb02>
 801303c:	3401      	adds	r4, #1
 801303e:	e7ce      	b.n	8012fde <_dtoa_r+0xac6>
 8013040:	9b07      	ldr	r3, [sp, #28]
 8013042:	9a07      	ldr	r2, [sp, #28]
 8013044:	701c      	strb	r4, [r3, #0]
 8013046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013048:	4293      	cmp	r3, r2
 801304a:	d03e      	beq.n	80130ca <_dtoa_r+0xbb2>
 801304c:	2300      	movs	r3, #0
 801304e:	220a      	movs	r2, #10
 8013050:	9905      	ldr	r1, [sp, #20]
 8013052:	9804      	ldr	r0, [sp, #16]
 8013054:	f000 fc8e 	bl	8013974 <__multadd>
 8013058:	2300      	movs	r3, #0
 801305a:	9005      	str	r0, [sp, #20]
 801305c:	220a      	movs	r2, #10
 801305e:	0029      	movs	r1, r5
 8013060:	9804      	ldr	r0, [sp, #16]
 8013062:	42bd      	cmp	r5, r7
 8013064:	d106      	bne.n	8013074 <_dtoa_r+0xb5c>
 8013066:	f000 fc85 	bl	8013974 <__multadd>
 801306a:	0005      	movs	r5, r0
 801306c:	0007      	movs	r7, r0
 801306e:	9b08      	ldr	r3, [sp, #32]
 8013070:	9307      	str	r3, [sp, #28]
 8013072:	e784      	b.n	8012f7e <_dtoa_r+0xa66>
 8013074:	f000 fc7e 	bl	8013974 <__multadd>
 8013078:	0039      	movs	r1, r7
 801307a:	0005      	movs	r5, r0
 801307c:	2300      	movs	r3, #0
 801307e:	220a      	movs	r2, #10
 8013080:	9804      	ldr	r0, [sp, #16]
 8013082:	f000 fc77 	bl	8013974 <__multadd>
 8013086:	0007      	movs	r7, r0
 8013088:	e7f1      	b.n	801306e <_dtoa_r+0xb56>
 801308a:	9b07      	ldr	r3, [sp, #28]
 801308c:	930b      	str	r3, [sp, #44]	; 0x2c
 801308e:	2500      	movs	r5, #0
 8013090:	0031      	movs	r1, r6
 8013092:	9805      	ldr	r0, [sp, #20]
 8013094:	f7ff f9b0 	bl	80123f8 <quorem>
 8013098:	9b06      	ldr	r3, [sp, #24]
 801309a:	3030      	adds	r0, #48	; 0x30
 801309c:	5558      	strb	r0, [r3, r5]
 801309e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130a0:	3501      	adds	r5, #1
 80130a2:	0004      	movs	r4, r0
 80130a4:	42ab      	cmp	r3, r5
 80130a6:	dd07      	ble.n	80130b8 <_dtoa_r+0xba0>
 80130a8:	2300      	movs	r3, #0
 80130aa:	220a      	movs	r2, #10
 80130ac:	9905      	ldr	r1, [sp, #20]
 80130ae:	9804      	ldr	r0, [sp, #16]
 80130b0:	f000 fc60 	bl	8013974 <__multadd>
 80130b4:	9005      	str	r0, [sp, #20]
 80130b6:	e7eb      	b.n	8013090 <_dtoa_r+0xb78>
 80130b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130ba:	2301      	movs	r3, #1
 80130bc:	2a00      	cmp	r2, #0
 80130be:	dd00      	ble.n	80130c2 <_dtoa_r+0xbaa>
 80130c0:	0013      	movs	r3, r2
 80130c2:	2500      	movs	r5, #0
 80130c4:	9a06      	ldr	r2, [sp, #24]
 80130c6:	18d3      	adds	r3, r2, r3
 80130c8:	9308      	str	r3, [sp, #32]
 80130ca:	9905      	ldr	r1, [sp, #20]
 80130cc:	2201      	movs	r2, #1
 80130ce:	9804      	ldr	r0, [sp, #16]
 80130d0:	f000 fe4c 	bl	8013d6c <__lshift>
 80130d4:	0031      	movs	r1, r6
 80130d6:	9005      	str	r0, [sp, #20]
 80130d8:	f000 feb6 	bl	8013e48 <__mcmp>
 80130dc:	2800      	cmp	r0, #0
 80130de:	dc9f      	bgt.n	8013020 <_dtoa_r+0xb08>
 80130e0:	d101      	bne.n	80130e6 <_dtoa_r+0xbce>
 80130e2:	07e4      	lsls	r4, r4, #31
 80130e4:	d49c      	bmi.n	8013020 <_dtoa_r+0xb08>
 80130e6:	9b08      	ldr	r3, [sp, #32]
 80130e8:	9308      	str	r3, [sp, #32]
 80130ea:	3b01      	subs	r3, #1
 80130ec:	781a      	ldrb	r2, [r3, #0]
 80130ee:	2a30      	cmp	r2, #48	; 0x30
 80130f0:	d0fa      	beq.n	80130e8 <_dtoa_r+0xbd0>
 80130f2:	e6e6      	b.n	8012ec2 <_dtoa_r+0x9aa>
 80130f4:	9a06      	ldr	r2, [sp, #24]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d193      	bne.n	8013022 <_dtoa_r+0xb0a>
 80130fa:	9b03      	ldr	r3, [sp, #12]
 80130fc:	3301      	adds	r3, #1
 80130fe:	9303      	str	r3, [sp, #12]
 8013100:	2331      	movs	r3, #49	; 0x31
 8013102:	7013      	strb	r3, [r2, #0]
 8013104:	e6dd      	b.n	8012ec2 <_dtoa_r+0x9aa>
 8013106:	4b09      	ldr	r3, [pc, #36]	; (801312c <_dtoa_r+0xc14>)
 8013108:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801310a:	9306      	str	r3, [sp, #24]
 801310c:	4b08      	ldr	r3, [pc, #32]	; (8013130 <_dtoa_r+0xc18>)
 801310e:	2a00      	cmp	r2, #0
 8013110:	d001      	beq.n	8013116 <_dtoa_r+0xbfe>
 8013112:	f7ff fa49 	bl	80125a8 <_dtoa_r+0x90>
 8013116:	f7ff fa49 	bl	80125ac <_dtoa_r+0x94>
 801311a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801311c:	2b00      	cmp	r3, #0
 801311e:	dcb6      	bgt.n	801308e <_dtoa_r+0xb76>
 8013120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013122:	2b02      	cmp	r3, #2
 8013124:	dd00      	ble.n	8013128 <_dtoa_r+0xc10>
 8013126:	e6b6      	b.n	8012e96 <_dtoa_r+0x97e>
 8013128:	e7b1      	b.n	801308e <_dtoa_r+0xb76>
 801312a:	46c0      	nop			; (mov r8, r8)
 801312c:	080175f7 	.word	0x080175f7
 8013130:	080175ff 	.word	0x080175ff

08013134 <_free_r>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	0005      	movs	r5, r0
 8013138:	2900      	cmp	r1, #0
 801313a:	d010      	beq.n	801315e <_free_r+0x2a>
 801313c:	1f0c      	subs	r4, r1, #4
 801313e:	6823      	ldr	r3, [r4, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	da00      	bge.n	8013146 <_free_r+0x12>
 8013144:	18e4      	adds	r4, r4, r3
 8013146:	0028      	movs	r0, r5
 8013148:	f7fd f8c8 	bl	80102dc <__malloc_lock>
 801314c:	4a1d      	ldr	r2, [pc, #116]	; (80131c4 <_free_r+0x90>)
 801314e:	6813      	ldr	r3, [r2, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d105      	bne.n	8013160 <_free_r+0x2c>
 8013154:	6063      	str	r3, [r4, #4]
 8013156:	6014      	str	r4, [r2, #0]
 8013158:	0028      	movs	r0, r5
 801315a:	f7fd f8c7 	bl	80102ec <__malloc_unlock>
 801315e:	bd70      	pop	{r4, r5, r6, pc}
 8013160:	42a3      	cmp	r3, r4
 8013162:	d908      	bls.n	8013176 <_free_r+0x42>
 8013164:	6820      	ldr	r0, [r4, #0]
 8013166:	1821      	adds	r1, r4, r0
 8013168:	428b      	cmp	r3, r1
 801316a:	d1f3      	bne.n	8013154 <_free_r+0x20>
 801316c:	6819      	ldr	r1, [r3, #0]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	1809      	adds	r1, r1, r0
 8013172:	6021      	str	r1, [r4, #0]
 8013174:	e7ee      	b.n	8013154 <_free_r+0x20>
 8013176:	001a      	movs	r2, r3
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <_free_r+0x4e>
 801317e:	42a3      	cmp	r3, r4
 8013180:	d9f9      	bls.n	8013176 <_free_r+0x42>
 8013182:	6811      	ldr	r1, [r2, #0]
 8013184:	1850      	adds	r0, r2, r1
 8013186:	42a0      	cmp	r0, r4
 8013188:	d10b      	bne.n	80131a2 <_free_r+0x6e>
 801318a:	6820      	ldr	r0, [r4, #0]
 801318c:	1809      	adds	r1, r1, r0
 801318e:	1850      	adds	r0, r2, r1
 8013190:	6011      	str	r1, [r2, #0]
 8013192:	4283      	cmp	r3, r0
 8013194:	d1e0      	bne.n	8013158 <_free_r+0x24>
 8013196:	6818      	ldr	r0, [r3, #0]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	1841      	adds	r1, r0, r1
 801319c:	6011      	str	r1, [r2, #0]
 801319e:	6053      	str	r3, [r2, #4]
 80131a0:	e7da      	b.n	8013158 <_free_r+0x24>
 80131a2:	42a0      	cmp	r0, r4
 80131a4:	d902      	bls.n	80131ac <_free_r+0x78>
 80131a6:	230c      	movs	r3, #12
 80131a8:	602b      	str	r3, [r5, #0]
 80131aa:	e7d5      	b.n	8013158 <_free_r+0x24>
 80131ac:	6820      	ldr	r0, [r4, #0]
 80131ae:	1821      	adds	r1, r4, r0
 80131b0:	428b      	cmp	r3, r1
 80131b2:	d103      	bne.n	80131bc <_free_r+0x88>
 80131b4:	6819      	ldr	r1, [r3, #0]
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	1809      	adds	r1, r1, r0
 80131ba:	6021      	str	r1, [r4, #0]
 80131bc:	6063      	str	r3, [r4, #4]
 80131be:	6054      	str	r4, [r2, #4]
 80131c0:	e7ca      	b.n	8013158 <_free_r+0x24>
 80131c2:	46c0      	nop			; (mov r8, r8)
 80131c4:	200054e0 	.word	0x200054e0

080131c8 <rshift>:
 80131c8:	0002      	movs	r2, r0
 80131ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131cc:	6904      	ldr	r4, [r0, #16]
 80131ce:	114b      	asrs	r3, r1, #5
 80131d0:	b085      	sub	sp, #20
 80131d2:	3214      	adds	r2, #20
 80131d4:	9302      	str	r3, [sp, #8]
 80131d6:	114d      	asrs	r5, r1, #5
 80131d8:	0013      	movs	r3, r2
 80131da:	42ac      	cmp	r4, r5
 80131dc:	dd32      	ble.n	8013244 <rshift+0x7c>
 80131de:	261f      	movs	r6, #31
 80131e0:	000f      	movs	r7, r1
 80131e2:	114b      	asrs	r3, r1, #5
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	00a5      	lsls	r5, r4, #2
 80131e8:	18d3      	adds	r3, r2, r3
 80131ea:	4037      	ands	r7, r6
 80131ec:	1955      	adds	r5, r2, r5
 80131ee:	9300      	str	r3, [sp, #0]
 80131f0:	9701      	str	r7, [sp, #4]
 80131f2:	4231      	tst	r1, r6
 80131f4:	d10d      	bne.n	8013212 <rshift+0x4a>
 80131f6:	0016      	movs	r6, r2
 80131f8:	0019      	movs	r1, r3
 80131fa:	428d      	cmp	r5, r1
 80131fc:	d836      	bhi.n	801326c <rshift+0xa4>
 80131fe:	9900      	ldr	r1, [sp, #0]
 8013200:	2300      	movs	r3, #0
 8013202:	3903      	subs	r1, #3
 8013204:	428d      	cmp	r5, r1
 8013206:	d302      	bcc.n	801320e <rshift+0x46>
 8013208:	9b02      	ldr	r3, [sp, #8]
 801320a:	1ae4      	subs	r4, r4, r3
 801320c:	00a3      	lsls	r3, r4, #2
 801320e:	18d3      	adds	r3, r2, r3
 8013210:	e018      	b.n	8013244 <rshift+0x7c>
 8013212:	2120      	movs	r1, #32
 8013214:	9e01      	ldr	r6, [sp, #4]
 8013216:	9f01      	ldr	r7, [sp, #4]
 8013218:	1b89      	subs	r1, r1, r6
 801321a:	9e00      	ldr	r6, [sp, #0]
 801321c:	9103      	str	r1, [sp, #12]
 801321e:	ce02      	ldmia	r6!, {r1}
 8013220:	4694      	mov	ip, r2
 8013222:	40f9      	lsrs	r1, r7
 8013224:	42b5      	cmp	r5, r6
 8013226:	d816      	bhi.n	8013256 <rshift+0x8e>
 8013228:	9e00      	ldr	r6, [sp, #0]
 801322a:	2300      	movs	r3, #0
 801322c:	3601      	adds	r6, #1
 801322e:	42b5      	cmp	r5, r6
 8013230:	d303      	bcc.n	801323a <rshift+0x72>
 8013232:	9b02      	ldr	r3, [sp, #8]
 8013234:	1ae3      	subs	r3, r4, r3
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	3b04      	subs	r3, #4
 801323a:	18d3      	adds	r3, r2, r3
 801323c:	6019      	str	r1, [r3, #0]
 801323e:	2900      	cmp	r1, #0
 8013240:	d000      	beq.n	8013244 <rshift+0x7c>
 8013242:	3304      	adds	r3, #4
 8013244:	1a99      	subs	r1, r3, r2
 8013246:	1089      	asrs	r1, r1, #2
 8013248:	6101      	str	r1, [r0, #16]
 801324a:	4293      	cmp	r3, r2
 801324c:	d101      	bne.n	8013252 <rshift+0x8a>
 801324e:	2300      	movs	r3, #0
 8013250:	6143      	str	r3, [r0, #20]
 8013252:	b005      	add	sp, #20
 8013254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013256:	6837      	ldr	r7, [r6, #0]
 8013258:	9b03      	ldr	r3, [sp, #12]
 801325a:	409f      	lsls	r7, r3
 801325c:	430f      	orrs	r7, r1
 801325e:	4661      	mov	r1, ip
 8013260:	c180      	stmia	r1!, {r7}
 8013262:	468c      	mov	ip, r1
 8013264:	9b01      	ldr	r3, [sp, #4]
 8013266:	ce02      	ldmia	r6!, {r1}
 8013268:	40d9      	lsrs	r1, r3
 801326a:	e7db      	b.n	8013224 <rshift+0x5c>
 801326c:	c980      	ldmia	r1!, {r7}
 801326e:	c680      	stmia	r6!, {r7}
 8013270:	e7c3      	b.n	80131fa <rshift+0x32>

08013272 <__hexdig_fun>:
 8013272:	0002      	movs	r2, r0
 8013274:	3a30      	subs	r2, #48	; 0x30
 8013276:	0003      	movs	r3, r0
 8013278:	2a09      	cmp	r2, #9
 801327a:	d802      	bhi.n	8013282 <__hexdig_fun+0x10>
 801327c:	3b20      	subs	r3, #32
 801327e:	b2d8      	uxtb	r0, r3
 8013280:	4770      	bx	lr
 8013282:	0002      	movs	r2, r0
 8013284:	3a61      	subs	r2, #97	; 0x61
 8013286:	2a05      	cmp	r2, #5
 8013288:	d801      	bhi.n	801328e <__hexdig_fun+0x1c>
 801328a:	3b47      	subs	r3, #71	; 0x47
 801328c:	e7f7      	b.n	801327e <__hexdig_fun+0xc>
 801328e:	001a      	movs	r2, r3
 8013290:	3a41      	subs	r2, #65	; 0x41
 8013292:	2000      	movs	r0, #0
 8013294:	2a05      	cmp	r2, #5
 8013296:	d8f3      	bhi.n	8013280 <__hexdig_fun+0xe>
 8013298:	3b27      	subs	r3, #39	; 0x27
 801329a:	e7f0      	b.n	801327e <__hexdig_fun+0xc>

0801329c <__gethex>:
 801329c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801329e:	b089      	sub	sp, #36	; 0x24
 80132a0:	9307      	str	r3, [sp, #28]
 80132a2:	2302      	movs	r3, #2
 80132a4:	9201      	str	r2, [sp, #4]
 80132a6:	680a      	ldr	r2, [r1, #0]
 80132a8:	425b      	negs	r3, r3
 80132aa:	9003      	str	r0, [sp, #12]
 80132ac:	9106      	str	r1, [sp, #24]
 80132ae:	1c96      	adds	r6, r2, #2
 80132b0:	1a9b      	subs	r3, r3, r2
 80132b2:	199a      	adds	r2, r3, r6
 80132b4:	9600      	str	r6, [sp, #0]
 80132b6:	9205      	str	r2, [sp, #20]
 80132b8:	9a00      	ldr	r2, [sp, #0]
 80132ba:	3601      	adds	r6, #1
 80132bc:	7810      	ldrb	r0, [r2, #0]
 80132be:	2830      	cmp	r0, #48	; 0x30
 80132c0:	d0f7      	beq.n	80132b2 <__gethex+0x16>
 80132c2:	f7ff ffd6 	bl	8013272 <__hexdig_fun>
 80132c6:	2300      	movs	r3, #0
 80132c8:	001d      	movs	r5, r3
 80132ca:	9302      	str	r3, [sp, #8]
 80132cc:	4298      	cmp	r0, r3
 80132ce:	d11d      	bne.n	801330c <__gethex+0x70>
 80132d0:	2201      	movs	r2, #1
 80132d2:	49a6      	ldr	r1, [pc, #664]	; (801356c <__gethex+0x2d0>)
 80132d4:	9800      	ldr	r0, [sp, #0]
 80132d6:	f7fe feb8 	bl	801204a <strncmp>
 80132da:	0007      	movs	r7, r0
 80132dc:	42a8      	cmp	r0, r5
 80132de:	d169      	bne.n	80133b4 <__gethex+0x118>
 80132e0:	9b00      	ldr	r3, [sp, #0]
 80132e2:	0034      	movs	r4, r6
 80132e4:	7858      	ldrb	r0, [r3, #1]
 80132e6:	f7ff ffc4 	bl	8013272 <__hexdig_fun>
 80132ea:	2301      	movs	r3, #1
 80132ec:	9302      	str	r3, [sp, #8]
 80132ee:	42a8      	cmp	r0, r5
 80132f0:	d02f      	beq.n	8013352 <__gethex+0xb6>
 80132f2:	9600      	str	r6, [sp, #0]
 80132f4:	9b00      	ldr	r3, [sp, #0]
 80132f6:	7818      	ldrb	r0, [r3, #0]
 80132f8:	2830      	cmp	r0, #48	; 0x30
 80132fa:	d009      	beq.n	8013310 <__gethex+0x74>
 80132fc:	f7ff ffb9 	bl	8013272 <__hexdig_fun>
 8013300:	4242      	negs	r2, r0
 8013302:	4142      	adcs	r2, r0
 8013304:	2301      	movs	r3, #1
 8013306:	0035      	movs	r5, r6
 8013308:	9202      	str	r2, [sp, #8]
 801330a:	9305      	str	r3, [sp, #20]
 801330c:	9c00      	ldr	r4, [sp, #0]
 801330e:	e004      	b.n	801331a <__gethex+0x7e>
 8013310:	9b00      	ldr	r3, [sp, #0]
 8013312:	3301      	adds	r3, #1
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	e7ed      	b.n	80132f4 <__gethex+0x58>
 8013318:	3401      	adds	r4, #1
 801331a:	7820      	ldrb	r0, [r4, #0]
 801331c:	f7ff ffa9 	bl	8013272 <__hexdig_fun>
 8013320:	1e07      	subs	r7, r0, #0
 8013322:	d1f9      	bne.n	8013318 <__gethex+0x7c>
 8013324:	2201      	movs	r2, #1
 8013326:	0020      	movs	r0, r4
 8013328:	4990      	ldr	r1, [pc, #576]	; (801356c <__gethex+0x2d0>)
 801332a:	f7fe fe8e 	bl	801204a <strncmp>
 801332e:	2800      	cmp	r0, #0
 8013330:	d10d      	bne.n	801334e <__gethex+0xb2>
 8013332:	2d00      	cmp	r5, #0
 8013334:	d106      	bne.n	8013344 <__gethex+0xa8>
 8013336:	3401      	adds	r4, #1
 8013338:	0025      	movs	r5, r4
 801333a:	7820      	ldrb	r0, [r4, #0]
 801333c:	f7ff ff99 	bl	8013272 <__hexdig_fun>
 8013340:	2800      	cmp	r0, #0
 8013342:	d102      	bne.n	801334a <__gethex+0xae>
 8013344:	1b2d      	subs	r5, r5, r4
 8013346:	00af      	lsls	r7, r5, #2
 8013348:	e003      	b.n	8013352 <__gethex+0xb6>
 801334a:	3401      	adds	r4, #1
 801334c:	e7f5      	b.n	801333a <__gethex+0x9e>
 801334e:	2d00      	cmp	r5, #0
 8013350:	d1f8      	bne.n	8013344 <__gethex+0xa8>
 8013352:	2220      	movs	r2, #32
 8013354:	7823      	ldrb	r3, [r4, #0]
 8013356:	0026      	movs	r6, r4
 8013358:	4393      	bics	r3, r2
 801335a:	2b50      	cmp	r3, #80	; 0x50
 801335c:	d11d      	bne.n	801339a <__gethex+0xfe>
 801335e:	7863      	ldrb	r3, [r4, #1]
 8013360:	2b2b      	cmp	r3, #43	; 0x2b
 8013362:	d02c      	beq.n	80133be <__gethex+0x122>
 8013364:	2b2d      	cmp	r3, #45	; 0x2d
 8013366:	d02e      	beq.n	80133c6 <__gethex+0x12a>
 8013368:	2300      	movs	r3, #0
 801336a:	1c66      	adds	r6, r4, #1
 801336c:	9304      	str	r3, [sp, #16]
 801336e:	7830      	ldrb	r0, [r6, #0]
 8013370:	f7ff ff7f 	bl	8013272 <__hexdig_fun>
 8013374:	1e43      	subs	r3, r0, #1
 8013376:	b2db      	uxtb	r3, r3
 8013378:	2b18      	cmp	r3, #24
 801337a:	d82b      	bhi.n	80133d4 <__gethex+0x138>
 801337c:	3810      	subs	r0, #16
 801337e:	0005      	movs	r5, r0
 8013380:	7870      	ldrb	r0, [r6, #1]
 8013382:	f7ff ff76 	bl	8013272 <__hexdig_fun>
 8013386:	1e43      	subs	r3, r0, #1
 8013388:	b2db      	uxtb	r3, r3
 801338a:	3601      	adds	r6, #1
 801338c:	2b18      	cmp	r3, #24
 801338e:	d91c      	bls.n	80133ca <__gethex+0x12e>
 8013390:	9b04      	ldr	r3, [sp, #16]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d000      	beq.n	8013398 <__gethex+0xfc>
 8013396:	426d      	negs	r5, r5
 8013398:	197f      	adds	r7, r7, r5
 801339a:	9b06      	ldr	r3, [sp, #24]
 801339c:	601e      	str	r6, [r3, #0]
 801339e:	9b02      	ldr	r3, [sp, #8]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d019      	beq.n	80133d8 <__gethex+0x13c>
 80133a4:	2600      	movs	r6, #0
 80133a6:	9b05      	ldr	r3, [sp, #20]
 80133a8:	42b3      	cmp	r3, r6
 80133aa:	d100      	bne.n	80133ae <__gethex+0x112>
 80133ac:	3606      	adds	r6, #6
 80133ae:	0030      	movs	r0, r6
 80133b0:	b009      	add	sp, #36	; 0x24
 80133b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133b4:	2301      	movs	r3, #1
 80133b6:	2700      	movs	r7, #0
 80133b8:	9c00      	ldr	r4, [sp, #0]
 80133ba:	9302      	str	r3, [sp, #8]
 80133bc:	e7c9      	b.n	8013352 <__gethex+0xb6>
 80133be:	2300      	movs	r3, #0
 80133c0:	9304      	str	r3, [sp, #16]
 80133c2:	1ca6      	adds	r6, r4, #2
 80133c4:	e7d3      	b.n	801336e <__gethex+0xd2>
 80133c6:	2301      	movs	r3, #1
 80133c8:	e7fa      	b.n	80133c0 <__gethex+0x124>
 80133ca:	230a      	movs	r3, #10
 80133cc:	435d      	muls	r5, r3
 80133ce:	182d      	adds	r5, r5, r0
 80133d0:	3d10      	subs	r5, #16
 80133d2:	e7d5      	b.n	8013380 <__gethex+0xe4>
 80133d4:	0026      	movs	r6, r4
 80133d6:	e7e0      	b.n	801339a <__gethex+0xfe>
 80133d8:	9b00      	ldr	r3, [sp, #0]
 80133da:	9902      	ldr	r1, [sp, #8]
 80133dc:	1ae3      	subs	r3, r4, r3
 80133de:	3b01      	subs	r3, #1
 80133e0:	2b07      	cmp	r3, #7
 80133e2:	dc0a      	bgt.n	80133fa <__gethex+0x15e>
 80133e4:	9803      	ldr	r0, [sp, #12]
 80133e6:	f000 fa5d 	bl	80138a4 <_Balloc>
 80133ea:	1e05      	subs	r5, r0, #0
 80133ec:	d108      	bne.n	8013400 <__gethex+0x164>
 80133ee:	002a      	movs	r2, r5
 80133f0:	21e4      	movs	r1, #228	; 0xe4
 80133f2:	4b5f      	ldr	r3, [pc, #380]	; (8013570 <__gethex+0x2d4>)
 80133f4:	485f      	ldr	r0, [pc, #380]	; (8013574 <__gethex+0x2d8>)
 80133f6:	f7fe ffe1 	bl	80123bc <__assert_func>
 80133fa:	3101      	adds	r1, #1
 80133fc:	105b      	asrs	r3, r3, #1
 80133fe:	e7ef      	b.n	80133e0 <__gethex+0x144>
 8013400:	0003      	movs	r3, r0
 8013402:	3314      	adds	r3, #20
 8013404:	9302      	str	r3, [sp, #8]
 8013406:	9305      	str	r3, [sp, #20]
 8013408:	2300      	movs	r3, #0
 801340a:	001e      	movs	r6, r3
 801340c:	9304      	str	r3, [sp, #16]
 801340e:	9b00      	ldr	r3, [sp, #0]
 8013410:	42a3      	cmp	r3, r4
 8013412:	d33f      	bcc.n	8013494 <__gethex+0x1f8>
 8013414:	9c05      	ldr	r4, [sp, #20]
 8013416:	9b02      	ldr	r3, [sp, #8]
 8013418:	c440      	stmia	r4!, {r6}
 801341a:	1ae4      	subs	r4, r4, r3
 801341c:	10a4      	asrs	r4, r4, #2
 801341e:	0030      	movs	r0, r6
 8013420:	612c      	str	r4, [r5, #16]
 8013422:	f000 fb37 	bl	8013a94 <__hi0bits>
 8013426:	9b01      	ldr	r3, [sp, #4]
 8013428:	0164      	lsls	r4, r4, #5
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	1a26      	subs	r6, r4, r0
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	429e      	cmp	r6, r3
 8013432:	dd51      	ble.n	80134d8 <__gethex+0x23c>
 8013434:	1af6      	subs	r6, r6, r3
 8013436:	0031      	movs	r1, r6
 8013438:	0028      	movs	r0, r5
 801343a:	f000 fecb 	bl	80141d4 <__any_on>
 801343e:	1e04      	subs	r4, r0, #0
 8013440:	d016      	beq.n	8013470 <__gethex+0x1d4>
 8013442:	2401      	movs	r4, #1
 8013444:	231f      	movs	r3, #31
 8013446:	0020      	movs	r0, r4
 8013448:	1e72      	subs	r2, r6, #1
 801344a:	4013      	ands	r3, r2
 801344c:	4098      	lsls	r0, r3
 801344e:	0003      	movs	r3, r0
 8013450:	1151      	asrs	r1, r2, #5
 8013452:	9802      	ldr	r0, [sp, #8]
 8013454:	0089      	lsls	r1, r1, #2
 8013456:	5809      	ldr	r1, [r1, r0]
 8013458:	4219      	tst	r1, r3
 801345a:	d009      	beq.n	8013470 <__gethex+0x1d4>
 801345c:	42a2      	cmp	r2, r4
 801345e:	dd06      	ble.n	801346e <__gethex+0x1d2>
 8013460:	0028      	movs	r0, r5
 8013462:	1eb1      	subs	r1, r6, #2
 8013464:	f000 feb6 	bl	80141d4 <__any_on>
 8013468:	3402      	adds	r4, #2
 801346a:	2800      	cmp	r0, #0
 801346c:	d100      	bne.n	8013470 <__gethex+0x1d4>
 801346e:	2402      	movs	r4, #2
 8013470:	0031      	movs	r1, r6
 8013472:	0028      	movs	r0, r5
 8013474:	f7ff fea8 	bl	80131c8 <rshift>
 8013478:	19bf      	adds	r7, r7, r6
 801347a:	9b01      	ldr	r3, [sp, #4]
 801347c:	689b      	ldr	r3, [r3, #8]
 801347e:	42bb      	cmp	r3, r7
 8013480:	da3a      	bge.n	80134f8 <__gethex+0x25c>
 8013482:	0029      	movs	r1, r5
 8013484:	9803      	ldr	r0, [sp, #12]
 8013486:	f000 fa51 	bl	801392c <_Bfree>
 801348a:	2300      	movs	r3, #0
 801348c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801348e:	26a3      	movs	r6, #163	; 0xa3
 8013490:	6013      	str	r3, [r2, #0]
 8013492:	e78c      	b.n	80133ae <__gethex+0x112>
 8013494:	3c01      	subs	r4, #1
 8013496:	7823      	ldrb	r3, [r4, #0]
 8013498:	2b2e      	cmp	r3, #46	; 0x2e
 801349a:	d012      	beq.n	80134c2 <__gethex+0x226>
 801349c:	9b04      	ldr	r3, [sp, #16]
 801349e:	2b20      	cmp	r3, #32
 80134a0:	d104      	bne.n	80134ac <__gethex+0x210>
 80134a2:	9b05      	ldr	r3, [sp, #20]
 80134a4:	c340      	stmia	r3!, {r6}
 80134a6:	2600      	movs	r6, #0
 80134a8:	9305      	str	r3, [sp, #20]
 80134aa:	9604      	str	r6, [sp, #16]
 80134ac:	7820      	ldrb	r0, [r4, #0]
 80134ae:	f7ff fee0 	bl	8013272 <__hexdig_fun>
 80134b2:	230f      	movs	r3, #15
 80134b4:	4018      	ands	r0, r3
 80134b6:	9b04      	ldr	r3, [sp, #16]
 80134b8:	4098      	lsls	r0, r3
 80134ba:	3304      	adds	r3, #4
 80134bc:	4306      	orrs	r6, r0
 80134be:	9304      	str	r3, [sp, #16]
 80134c0:	e7a5      	b.n	801340e <__gethex+0x172>
 80134c2:	9b00      	ldr	r3, [sp, #0]
 80134c4:	42a3      	cmp	r3, r4
 80134c6:	d8e9      	bhi.n	801349c <__gethex+0x200>
 80134c8:	2201      	movs	r2, #1
 80134ca:	0020      	movs	r0, r4
 80134cc:	4927      	ldr	r1, [pc, #156]	; (801356c <__gethex+0x2d0>)
 80134ce:	f7fe fdbc 	bl	801204a <strncmp>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	d1e2      	bne.n	801349c <__gethex+0x200>
 80134d6:	e79a      	b.n	801340e <__gethex+0x172>
 80134d8:	9b00      	ldr	r3, [sp, #0]
 80134da:	2400      	movs	r4, #0
 80134dc:	429e      	cmp	r6, r3
 80134de:	dacc      	bge.n	801347a <__gethex+0x1de>
 80134e0:	1b9e      	subs	r6, r3, r6
 80134e2:	0029      	movs	r1, r5
 80134e4:	0032      	movs	r2, r6
 80134e6:	9803      	ldr	r0, [sp, #12]
 80134e8:	f000 fc40 	bl	8013d6c <__lshift>
 80134ec:	0003      	movs	r3, r0
 80134ee:	3314      	adds	r3, #20
 80134f0:	0005      	movs	r5, r0
 80134f2:	1bbf      	subs	r7, r7, r6
 80134f4:	9302      	str	r3, [sp, #8]
 80134f6:	e7c0      	b.n	801347a <__gethex+0x1de>
 80134f8:	9b01      	ldr	r3, [sp, #4]
 80134fa:	685e      	ldr	r6, [r3, #4]
 80134fc:	42be      	cmp	r6, r7
 80134fe:	dd70      	ble.n	80135e2 <__gethex+0x346>
 8013500:	9b00      	ldr	r3, [sp, #0]
 8013502:	1bf6      	subs	r6, r6, r7
 8013504:	42b3      	cmp	r3, r6
 8013506:	dc37      	bgt.n	8013578 <__gethex+0x2dc>
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	68db      	ldr	r3, [r3, #12]
 801350c:	2b02      	cmp	r3, #2
 801350e:	d024      	beq.n	801355a <__gethex+0x2be>
 8013510:	2b03      	cmp	r3, #3
 8013512:	d026      	beq.n	8013562 <__gethex+0x2c6>
 8013514:	2b01      	cmp	r3, #1
 8013516:	d117      	bne.n	8013548 <__gethex+0x2ac>
 8013518:	9b00      	ldr	r3, [sp, #0]
 801351a:	42b3      	cmp	r3, r6
 801351c:	d114      	bne.n	8013548 <__gethex+0x2ac>
 801351e:	2b01      	cmp	r3, #1
 8013520:	d10b      	bne.n	801353a <__gethex+0x29e>
 8013522:	9b01      	ldr	r3, [sp, #4]
 8013524:	9a07      	ldr	r2, [sp, #28]
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	2662      	movs	r6, #98	; 0x62
 801352a:	6013      	str	r3, [r2, #0]
 801352c:	2301      	movs	r3, #1
 801352e:	9a02      	ldr	r2, [sp, #8]
 8013530:	612b      	str	r3, [r5, #16]
 8013532:	6013      	str	r3, [r2, #0]
 8013534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013536:	601d      	str	r5, [r3, #0]
 8013538:	e739      	b.n	80133ae <__gethex+0x112>
 801353a:	9900      	ldr	r1, [sp, #0]
 801353c:	0028      	movs	r0, r5
 801353e:	3901      	subs	r1, #1
 8013540:	f000 fe48 	bl	80141d4 <__any_on>
 8013544:	2800      	cmp	r0, #0
 8013546:	d1ec      	bne.n	8013522 <__gethex+0x286>
 8013548:	0029      	movs	r1, r5
 801354a:	9803      	ldr	r0, [sp, #12]
 801354c:	f000 f9ee 	bl	801392c <_Bfree>
 8013550:	2300      	movs	r3, #0
 8013552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013554:	2650      	movs	r6, #80	; 0x50
 8013556:	6013      	str	r3, [r2, #0]
 8013558:	e729      	b.n	80133ae <__gethex+0x112>
 801355a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801355c:	2b00      	cmp	r3, #0
 801355e:	d1f3      	bne.n	8013548 <__gethex+0x2ac>
 8013560:	e7df      	b.n	8013522 <__gethex+0x286>
 8013562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013564:	2b00      	cmp	r3, #0
 8013566:	d1dc      	bne.n	8013522 <__gethex+0x286>
 8013568:	e7ee      	b.n	8013548 <__gethex+0x2ac>
 801356a:	46c0      	nop			; (mov r8, r8)
 801356c:	080173b0 	.word	0x080173b0
 8013570:	0801765c 	.word	0x0801765c
 8013574:	0801766d 	.word	0x0801766d
 8013578:	1e77      	subs	r7, r6, #1
 801357a:	2c00      	cmp	r4, #0
 801357c:	d12f      	bne.n	80135de <__gethex+0x342>
 801357e:	2f00      	cmp	r7, #0
 8013580:	d004      	beq.n	801358c <__gethex+0x2f0>
 8013582:	0039      	movs	r1, r7
 8013584:	0028      	movs	r0, r5
 8013586:	f000 fe25 	bl	80141d4 <__any_on>
 801358a:	0004      	movs	r4, r0
 801358c:	231f      	movs	r3, #31
 801358e:	117a      	asrs	r2, r7, #5
 8013590:	401f      	ands	r7, r3
 8013592:	3b1e      	subs	r3, #30
 8013594:	40bb      	lsls	r3, r7
 8013596:	9902      	ldr	r1, [sp, #8]
 8013598:	0092      	lsls	r2, r2, #2
 801359a:	5852      	ldr	r2, [r2, r1]
 801359c:	421a      	tst	r2, r3
 801359e:	d001      	beq.n	80135a4 <__gethex+0x308>
 80135a0:	2302      	movs	r3, #2
 80135a2:	431c      	orrs	r4, r3
 80135a4:	9b00      	ldr	r3, [sp, #0]
 80135a6:	0031      	movs	r1, r6
 80135a8:	1b9b      	subs	r3, r3, r6
 80135aa:	2602      	movs	r6, #2
 80135ac:	0028      	movs	r0, r5
 80135ae:	9300      	str	r3, [sp, #0]
 80135b0:	f7ff fe0a 	bl	80131c8 <rshift>
 80135b4:	9b01      	ldr	r3, [sp, #4]
 80135b6:	685f      	ldr	r7, [r3, #4]
 80135b8:	2c00      	cmp	r4, #0
 80135ba:	d041      	beq.n	8013640 <__gethex+0x3a4>
 80135bc:	9b01      	ldr	r3, [sp, #4]
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	2b02      	cmp	r3, #2
 80135c2:	d010      	beq.n	80135e6 <__gethex+0x34a>
 80135c4:	2b03      	cmp	r3, #3
 80135c6:	d012      	beq.n	80135ee <__gethex+0x352>
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d106      	bne.n	80135da <__gethex+0x33e>
 80135cc:	07a2      	lsls	r2, r4, #30
 80135ce:	d504      	bpl.n	80135da <__gethex+0x33e>
 80135d0:	9a02      	ldr	r2, [sp, #8]
 80135d2:	6812      	ldr	r2, [r2, #0]
 80135d4:	4314      	orrs	r4, r2
 80135d6:	421c      	tst	r4, r3
 80135d8:	d10c      	bne.n	80135f4 <__gethex+0x358>
 80135da:	2310      	movs	r3, #16
 80135dc:	e02f      	b.n	801363e <__gethex+0x3a2>
 80135de:	2401      	movs	r4, #1
 80135e0:	e7d4      	b.n	801358c <__gethex+0x2f0>
 80135e2:	2601      	movs	r6, #1
 80135e4:	e7e8      	b.n	80135b8 <__gethex+0x31c>
 80135e6:	2301      	movs	r3, #1
 80135e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135ea:	1a9b      	subs	r3, r3, r2
 80135ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80135ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d0f2      	beq.n	80135da <__gethex+0x33e>
 80135f4:	692b      	ldr	r3, [r5, #16]
 80135f6:	2000      	movs	r0, #0
 80135f8:	9302      	str	r3, [sp, #8]
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	9304      	str	r3, [sp, #16]
 80135fe:	002b      	movs	r3, r5
 8013600:	9a04      	ldr	r2, [sp, #16]
 8013602:	3314      	adds	r3, #20
 8013604:	1899      	adds	r1, r3, r2
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	1c54      	adds	r4, r2, #1
 801360a:	d01e      	beq.n	801364a <__gethex+0x3ae>
 801360c:	3201      	adds	r2, #1
 801360e:	601a      	str	r2, [r3, #0]
 8013610:	002b      	movs	r3, r5
 8013612:	3314      	adds	r3, #20
 8013614:	2e02      	cmp	r6, #2
 8013616:	d141      	bne.n	801369c <__gethex+0x400>
 8013618:	9a01      	ldr	r2, [sp, #4]
 801361a:	9900      	ldr	r1, [sp, #0]
 801361c:	6812      	ldr	r2, [r2, #0]
 801361e:	3a01      	subs	r2, #1
 8013620:	428a      	cmp	r2, r1
 8013622:	d10b      	bne.n	801363c <__gethex+0x3a0>
 8013624:	221f      	movs	r2, #31
 8013626:	9800      	ldr	r0, [sp, #0]
 8013628:	1149      	asrs	r1, r1, #5
 801362a:	4002      	ands	r2, r0
 801362c:	2001      	movs	r0, #1
 801362e:	0004      	movs	r4, r0
 8013630:	4094      	lsls	r4, r2
 8013632:	0089      	lsls	r1, r1, #2
 8013634:	58cb      	ldr	r3, [r1, r3]
 8013636:	4223      	tst	r3, r4
 8013638:	d000      	beq.n	801363c <__gethex+0x3a0>
 801363a:	2601      	movs	r6, #1
 801363c:	2320      	movs	r3, #32
 801363e:	431e      	orrs	r6, r3
 8013640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013642:	601d      	str	r5, [r3, #0]
 8013644:	9b07      	ldr	r3, [sp, #28]
 8013646:	601f      	str	r7, [r3, #0]
 8013648:	e6b1      	b.n	80133ae <__gethex+0x112>
 801364a:	c301      	stmia	r3!, {r0}
 801364c:	4299      	cmp	r1, r3
 801364e:	d8da      	bhi.n	8013606 <__gethex+0x36a>
 8013650:	68ab      	ldr	r3, [r5, #8]
 8013652:	9a02      	ldr	r2, [sp, #8]
 8013654:	429a      	cmp	r2, r3
 8013656:	db18      	blt.n	801368a <__gethex+0x3ee>
 8013658:	6869      	ldr	r1, [r5, #4]
 801365a:	9803      	ldr	r0, [sp, #12]
 801365c:	3101      	adds	r1, #1
 801365e:	f000 f921 	bl	80138a4 <_Balloc>
 8013662:	1e04      	subs	r4, r0, #0
 8013664:	d104      	bne.n	8013670 <__gethex+0x3d4>
 8013666:	0022      	movs	r2, r4
 8013668:	2184      	movs	r1, #132	; 0x84
 801366a:	4b1c      	ldr	r3, [pc, #112]	; (80136dc <__gethex+0x440>)
 801366c:	481c      	ldr	r0, [pc, #112]	; (80136e0 <__gethex+0x444>)
 801366e:	e6c2      	b.n	80133f6 <__gethex+0x15a>
 8013670:	0029      	movs	r1, r5
 8013672:	692a      	ldr	r2, [r5, #16]
 8013674:	310c      	adds	r1, #12
 8013676:	3202      	adds	r2, #2
 8013678:	0092      	lsls	r2, r2, #2
 801367a:	300c      	adds	r0, #12
 801367c:	f7fe fe8a 	bl	8012394 <memcpy>
 8013680:	0029      	movs	r1, r5
 8013682:	9803      	ldr	r0, [sp, #12]
 8013684:	f000 f952 	bl	801392c <_Bfree>
 8013688:	0025      	movs	r5, r4
 801368a:	692b      	ldr	r3, [r5, #16]
 801368c:	1c5a      	adds	r2, r3, #1
 801368e:	612a      	str	r2, [r5, #16]
 8013690:	2201      	movs	r2, #1
 8013692:	3304      	adds	r3, #4
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	18eb      	adds	r3, r5, r3
 8013698:	605a      	str	r2, [r3, #4]
 801369a:	e7b9      	b.n	8013610 <__gethex+0x374>
 801369c:	692a      	ldr	r2, [r5, #16]
 801369e:	9902      	ldr	r1, [sp, #8]
 80136a0:	428a      	cmp	r2, r1
 80136a2:	dd09      	ble.n	80136b8 <__gethex+0x41c>
 80136a4:	2101      	movs	r1, #1
 80136a6:	0028      	movs	r0, r5
 80136a8:	f7ff fd8e 	bl	80131c8 <rshift>
 80136ac:	9b01      	ldr	r3, [sp, #4]
 80136ae:	3701      	adds	r7, #1
 80136b0:	689b      	ldr	r3, [r3, #8]
 80136b2:	42bb      	cmp	r3, r7
 80136b4:	dac1      	bge.n	801363a <__gethex+0x39e>
 80136b6:	e6e4      	b.n	8013482 <__gethex+0x1e6>
 80136b8:	221f      	movs	r2, #31
 80136ba:	9c00      	ldr	r4, [sp, #0]
 80136bc:	9900      	ldr	r1, [sp, #0]
 80136be:	2601      	movs	r6, #1
 80136c0:	4014      	ands	r4, r2
 80136c2:	4211      	tst	r1, r2
 80136c4:	d0ba      	beq.n	801363c <__gethex+0x3a0>
 80136c6:	9a04      	ldr	r2, [sp, #16]
 80136c8:	189b      	adds	r3, r3, r2
 80136ca:	3b04      	subs	r3, #4
 80136cc:	6818      	ldr	r0, [r3, #0]
 80136ce:	f000 f9e1 	bl	8013a94 <__hi0bits>
 80136d2:	2320      	movs	r3, #32
 80136d4:	1b1b      	subs	r3, r3, r4
 80136d6:	4298      	cmp	r0, r3
 80136d8:	dbe4      	blt.n	80136a4 <__gethex+0x408>
 80136da:	e7af      	b.n	801363c <__gethex+0x3a0>
 80136dc:	0801765c 	.word	0x0801765c
 80136e0:	0801766d 	.word	0x0801766d

080136e4 <L_shift>:
 80136e4:	2308      	movs	r3, #8
 80136e6:	b570      	push	{r4, r5, r6, lr}
 80136e8:	2520      	movs	r5, #32
 80136ea:	1a9a      	subs	r2, r3, r2
 80136ec:	0092      	lsls	r2, r2, #2
 80136ee:	1aad      	subs	r5, r5, r2
 80136f0:	6843      	ldr	r3, [r0, #4]
 80136f2:	6804      	ldr	r4, [r0, #0]
 80136f4:	001e      	movs	r6, r3
 80136f6:	40ae      	lsls	r6, r5
 80136f8:	40d3      	lsrs	r3, r2
 80136fa:	4334      	orrs	r4, r6
 80136fc:	6004      	str	r4, [r0, #0]
 80136fe:	6043      	str	r3, [r0, #4]
 8013700:	3004      	adds	r0, #4
 8013702:	4288      	cmp	r0, r1
 8013704:	d3f4      	bcc.n	80136f0 <L_shift+0xc>
 8013706:	bd70      	pop	{r4, r5, r6, pc}

08013708 <__match>:
 8013708:	b530      	push	{r4, r5, lr}
 801370a:	6803      	ldr	r3, [r0, #0]
 801370c:	780c      	ldrb	r4, [r1, #0]
 801370e:	3301      	adds	r3, #1
 8013710:	2c00      	cmp	r4, #0
 8013712:	d102      	bne.n	801371a <__match+0x12>
 8013714:	6003      	str	r3, [r0, #0]
 8013716:	2001      	movs	r0, #1
 8013718:	bd30      	pop	{r4, r5, pc}
 801371a:	781a      	ldrb	r2, [r3, #0]
 801371c:	0015      	movs	r5, r2
 801371e:	3d41      	subs	r5, #65	; 0x41
 8013720:	2d19      	cmp	r5, #25
 8013722:	d800      	bhi.n	8013726 <__match+0x1e>
 8013724:	3220      	adds	r2, #32
 8013726:	3101      	adds	r1, #1
 8013728:	42a2      	cmp	r2, r4
 801372a:	d0ef      	beq.n	801370c <__match+0x4>
 801372c:	2000      	movs	r0, #0
 801372e:	e7f3      	b.n	8013718 <__match+0x10>

08013730 <__hexnan>:
 8013730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013732:	680b      	ldr	r3, [r1, #0]
 8013734:	b08b      	sub	sp, #44	; 0x2c
 8013736:	9201      	str	r2, [sp, #4]
 8013738:	9901      	ldr	r1, [sp, #4]
 801373a:	115a      	asrs	r2, r3, #5
 801373c:	0092      	lsls	r2, r2, #2
 801373e:	188a      	adds	r2, r1, r2
 8013740:	9202      	str	r2, [sp, #8]
 8013742:	0019      	movs	r1, r3
 8013744:	221f      	movs	r2, #31
 8013746:	4011      	ands	r1, r2
 8013748:	9008      	str	r0, [sp, #32]
 801374a:	9106      	str	r1, [sp, #24]
 801374c:	4213      	tst	r3, r2
 801374e:	d002      	beq.n	8013756 <__hexnan+0x26>
 8013750:	9b02      	ldr	r3, [sp, #8]
 8013752:	3304      	adds	r3, #4
 8013754:	9302      	str	r3, [sp, #8]
 8013756:	9b02      	ldr	r3, [sp, #8]
 8013758:	2500      	movs	r5, #0
 801375a:	1f1f      	subs	r7, r3, #4
 801375c:	003e      	movs	r6, r7
 801375e:	003c      	movs	r4, r7
 8013760:	9b08      	ldr	r3, [sp, #32]
 8013762:	603d      	str	r5, [r7, #0]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	9507      	str	r5, [sp, #28]
 8013768:	9305      	str	r3, [sp, #20]
 801376a:	9503      	str	r5, [sp, #12]
 801376c:	9b05      	ldr	r3, [sp, #20]
 801376e:	3301      	adds	r3, #1
 8013770:	9309      	str	r3, [sp, #36]	; 0x24
 8013772:	9b05      	ldr	r3, [sp, #20]
 8013774:	785b      	ldrb	r3, [r3, #1]
 8013776:	9304      	str	r3, [sp, #16]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d028      	beq.n	80137ce <__hexnan+0x9e>
 801377c:	9804      	ldr	r0, [sp, #16]
 801377e:	f7ff fd78 	bl	8013272 <__hexdig_fun>
 8013782:	2800      	cmp	r0, #0
 8013784:	d154      	bne.n	8013830 <__hexnan+0x100>
 8013786:	9b04      	ldr	r3, [sp, #16]
 8013788:	2b20      	cmp	r3, #32
 801378a:	d819      	bhi.n	80137c0 <__hexnan+0x90>
 801378c:	9b03      	ldr	r3, [sp, #12]
 801378e:	9a07      	ldr	r2, [sp, #28]
 8013790:	4293      	cmp	r3, r2
 8013792:	dd12      	ble.n	80137ba <__hexnan+0x8a>
 8013794:	42b4      	cmp	r4, r6
 8013796:	d206      	bcs.n	80137a6 <__hexnan+0x76>
 8013798:	2d07      	cmp	r5, #7
 801379a:	dc04      	bgt.n	80137a6 <__hexnan+0x76>
 801379c:	002a      	movs	r2, r5
 801379e:	0031      	movs	r1, r6
 80137a0:	0020      	movs	r0, r4
 80137a2:	f7ff ff9f 	bl	80136e4 <L_shift>
 80137a6:	9b01      	ldr	r3, [sp, #4]
 80137a8:	2508      	movs	r5, #8
 80137aa:	429c      	cmp	r4, r3
 80137ac:	d905      	bls.n	80137ba <__hexnan+0x8a>
 80137ae:	1f26      	subs	r6, r4, #4
 80137b0:	2500      	movs	r5, #0
 80137b2:	0034      	movs	r4, r6
 80137b4:	9b03      	ldr	r3, [sp, #12]
 80137b6:	6035      	str	r5, [r6, #0]
 80137b8:	9307      	str	r3, [sp, #28]
 80137ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137bc:	9305      	str	r3, [sp, #20]
 80137be:	e7d5      	b.n	801376c <__hexnan+0x3c>
 80137c0:	9b04      	ldr	r3, [sp, #16]
 80137c2:	2b29      	cmp	r3, #41	; 0x29
 80137c4:	d159      	bne.n	801387a <__hexnan+0x14a>
 80137c6:	9b05      	ldr	r3, [sp, #20]
 80137c8:	9a08      	ldr	r2, [sp, #32]
 80137ca:	3302      	adds	r3, #2
 80137cc:	6013      	str	r3, [r2, #0]
 80137ce:	9b03      	ldr	r3, [sp, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d052      	beq.n	801387a <__hexnan+0x14a>
 80137d4:	42b4      	cmp	r4, r6
 80137d6:	d206      	bcs.n	80137e6 <__hexnan+0xb6>
 80137d8:	2d07      	cmp	r5, #7
 80137da:	dc04      	bgt.n	80137e6 <__hexnan+0xb6>
 80137dc:	002a      	movs	r2, r5
 80137de:	0031      	movs	r1, r6
 80137e0:	0020      	movs	r0, r4
 80137e2:	f7ff ff7f 	bl	80136e4 <L_shift>
 80137e6:	9b01      	ldr	r3, [sp, #4]
 80137e8:	429c      	cmp	r4, r3
 80137ea:	d935      	bls.n	8013858 <__hexnan+0x128>
 80137ec:	001a      	movs	r2, r3
 80137ee:	0023      	movs	r3, r4
 80137f0:	cb02      	ldmia	r3!, {r1}
 80137f2:	c202      	stmia	r2!, {r1}
 80137f4:	429f      	cmp	r7, r3
 80137f6:	d2fb      	bcs.n	80137f0 <__hexnan+0xc0>
 80137f8:	9b02      	ldr	r3, [sp, #8]
 80137fa:	1c62      	adds	r2, r4, #1
 80137fc:	1ed9      	subs	r1, r3, #3
 80137fe:	2304      	movs	r3, #4
 8013800:	4291      	cmp	r1, r2
 8013802:	d305      	bcc.n	8013810 <__hexnan+0xe0>
 8013804:	9b02      	ldr	r3, [sp, #8]
 8013806:	3b04      	subs	r3, #4
 8013808:	1b1b      	subs	r3, r3, r4
 801380a:	089b      	lsrs	r3, r3, #2
 801380c:	3301      	adds	r3, #1
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	9a01      	ldr	r2, [sp, #4]
 8013812:	18d3      	adds	r3, r2, r3
 8013814:	2200      	movs	r2, #0
 8013816:	c304      	stmia	r3!, {r2}
 8013818:	429f      	cmp	r7, r3
 801381a:	d2fc      	bcs.n	8013816 <__hexnan+0xe6>
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d104      	bne.n	801382c <__hexnan+0xfc>
 8013822:	9b01      	ldr	r3, [sp, #4]
 8013824:	429f      	cmp	r7, r3
 8013826:	d126      	bne.n	8013876 <__hexnan+0x146>
 8013828:	2301      	movs	r3, #1
 801382a:	603b      	str	r3, [r7, #0]
 801382c:	2005      	movs	r0, #5
 801382e:	e025      	b.n	801387c <__hexnan+0x14c>
 8013830:	9b03      	ldr	r3, [sp, #12]
 8013832:	3501      	adds	r5, #1
 8013834:	3301      	adds	r3, #1
 8013836:	9303      	str	r3, [sp, #12]
 8013838:	2d08      	cmp	r5, #8
 801383a:	dd06      	ble.n	801384a <__hexnan+0x11a>
 801383c:	9b01      	ldr	r3, [sp, #4]
 801383e:	429c      	cmp	r4, r3
 8013840:	d9bb      	bls.n	80137ba <__hexnan+0x8a>
 8013842:	2300      	movs	r3, #0
 8013844:	2501      	movs	r5, #1
 8013846:	3c04      	subs	r4, #4
 8013848:	6023      	str	r3, [r4, #0]
 801384a:	220f      	movs	r2, #15
 801384c:	6823      	ldr	r3, [r4, #0]
 801384e:	4010      	ands	r0, r2
 8013850:	011b      	lsls	r3, r3, #4
 8013852:	4303      	orrs	r3, r0
 8013854:	6023      	str	r3, [r4, #0]
 8013856:	e7b0      	b.n	80137ba <__hexnan+0x8a>
 8013858:	9b06      	ldr	r3, [sp, #24]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d0de      	beq.n	801381c <__hexnan+0xec>
 801385e:	2320      	movs	r3, #32
 8013860:	9a06      	ldr	r2, [sp, #24]
 8013862:	9902      	ldr	r1, [sp, #8]
 8013864:	1a9b      	subs	r3, r3, r2
 8013866:	2201      	movs	r2, #1
 8013868:	4252      	negs	r2, r2
 801386a:	40da      	lsrs	r2, r3
 801386c:	3904      	subs	r1, #4
 801386e:	680b      	ldr	r3, [r1, #0]
 8013870:	4013      	ands	r3, r2
 8013872:	600b      	str	r3, [r1, #0]
 8013874:	e7d2      	b.n	801381c <__hexnan+0xec>
 8013876:	3f04      	subs	r7, #4
 8013878:	e7d0      	b.n	801381c <__hexnan+0xec>
 801387a:	2004      	movs	r0, #4
 801387c:	b00b      	add	sp, #44	; 0x2c
 801387e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013880 <__ascii_mbtowc>:
 8013880:	b082      	sub	sp, #8
 8013882:	2900      	cmp	r1, #0
 8013884:	d100      	bne.n	8013888 <__ascii_mbtowc+0x8>
 8013886:	a901      	add	r1, sp, #4
 8013888:	1e10      	subs	r0, r2, #0
 801388a:	d006      	beq.n	801389a <__ascii_mbtowc+0x1a>
 801388c:	2b00      	cmp	r3, #0
 801388e:	d006      	beq.n	801389e <__ascii_mbtowc+0x1e>
 8013890:	7813      	ldrb	r3, [r2, #0]
 8013892:	600b      	str	r3, [r1, #0]
 8013894:	7810      	ldrb	r0, [r2, #0]
 8013896:	1e43      	subs	r3, r0, #1
 8013898:	4198      	sbcs	r0, r3
 801389a:	b002      	add	sp, #8
 801389c:	4770      	bx	lr
 801389e:	2002      	movs	r0, #2
 80138a0:	4240      	negs	r0, r0
 80138a2:	e7fa      	b.n	801389a <__ascii_mbtowc+0x1a>

080138a4 <_Balloc>:
 80138a4:	b570      	push	{r4, r5, r6, lr}
 80138a6:	69c5      	ldr	r5, [r0, #28]
 80138a8:	0006      	movs	r6, r0
 80138aa:	000c      	movs	r4, r1
 80138ac:	2d00      	cmp	r5, #0
 80138ae:	d10e      	bne.n	80138ce <_Balloc+0x2a>
 80138b0:	2010      	movs	r0, #16
 80138b2:	f7fc fc65 	bl	8010180 <malloc>
 80138b6:	1e02      	subs	r2, r0, #0
 80138b8:	61f0      	str	r0, [r6, #28]
 80138ba:	d104      	bne.n	80138c6 <_Balloc+0x22>
 80138bc:	216b      	movs	r1, #107	; 0x6b
 80138be:	4b19      	ldr	r3, [pc, #100]	; (8013924 <_Balloc+0x80>)
 80138c0:	4819      	ldr	r0, [pc, #100]	; (8013928 <_Balloc+0x84>)
 80138c2:	f7fe fd7b 	bl	80123bc <__assert_func>
 80138c6:	6045      	str	r5, [r0, #4]
 80138c8:	6085      	str	r5, [r0, #8]
 80138ca:	6005      	str	r5, [r0, #0]
 80138cc:	60c5      	str	r5, [r0, #12]
 80138ce:	69f5      	ldr	r5, [r6, #28]
 80138d0:	68eb      	ldr	r3, [r5, #12]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d013      	beq.n	80138fe <_Balloc+0x5a>
 80138d6:	69f3      	ldr	r3, [r6, #28]
 80138d8:	00a2      	lsls	r2, r4, #2
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	189b      	adds	r3, r3, r2
 80138de:	6818      	ldr	r0, [r3, #0]
 80138e0:	2800      	cmp	r0, #0
 80138e2:	d118      	bne.n	8013916 <_Balloc+0x72>
 80138e4:	2101      	movs	r1, #1
 80138e6:	000d      	movs	r5, r1
 80138e8:	40a5      	lsls	r5, r4
 80138ea:	1d6a      	adds	r2, r5, #5
 80138ec:	0030      	movs	r0, r6
 80138ee:	0092      	lsls	r2, r2, #2
 80138f0:	f000 fee2 	bl	80146b8 <_calloc_r>
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d00c      	beq.n	8013912 <_Balloc+0x6e>
 80138f8:	6044      	str	r4, [r0, #4]
 80138fa:	6085      	str	r5, [r0, #8]
 80138fc:	e00d      	b.n	801391a <_Balloc+0x76>
 80138fe:	2221      	movs	r2, #33	; 0x21
 8013900:	2104      	movs	r1, #4
 8013902:	0030      	movs	r0, r6
 8013904:	f000 fed8 	bl	80146b8 <_calloc_r>
 8013908:	69f3      	ldr	r3, [r6, #28]
 801390a:	60e8      	str	r0, [r5, #12]
 801390c:	68db      	ldr	r3, [r3, #12]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d1e1      	bne.n	80138d6 <_Balloc+0x32>
 8013912:	2000      	movs	r0, #0
 8013914:	bd70      	pop	{r4, r5, r6, pc}
 8013916:	6802      	ldr	r2, [r0, #0]
 8013918:	601a      	str	r2, [r3, #0]
 801391a:	2300      	movs	r3, #0
 801391c:	6103      	str	r3, [r0, #16]
 801391e:	60c3      	str	r3, [r0, #12]
 8013920:	e7f8      	b.n	8013914 <_Balloc+0x70>
 8013922:	46c0      	nop			; (mov r8, r8)
 8013924:	08017542 	.word	0x08017542
 8013928:	080176cd 	.word	0x080176cd

0801392c <_Bfree>:
 801392c:	b570      	push	{r4, r5, r6, lr}
 801392e:	69c6      	ldr	r6, [r0, #28]
 8013930:	0005      	movs	r5, r0
 8013932:	000c      	movs	r4, r1
 8013934:	2e00      	cmp	r6, #0
 8013936:	d10e      	bne.n	8013956 <_Bfree+0x2a>
 8013938:	2010      	movs	r0, #16
 801393a:	f7fc fc21 	bl	8010180 <malloc>
 801393e:	1e02      	subs	r2, r0, #0
 8013940:	61e8      	str	r0, [r5, #28]
 8013942:	d104      	bne.n	801394e <_Bfree+0x22>
 8013944:	218f      	movs	r1, #143	; 0x8f
 8013946:	4b09      	ldr	r3, [pc, #36]	; (801396c <_Bfree+0x40>)
 8013948:	4809      	ldr	r0, [pc, #36]	; (8013970 <_Bfree+0x44>)
 801394a:	f7fe fd37 	bl	80123bc <__assert_func>
 801394e:	6046      	str	r6, [r0, #4]
 8013950:	6086      	str	r6, [r0, #8]
 8013952:	6006      	str	r6, [r0, #0]
 8013954:	60c6      	str	r6, [r0, #12]
 8013956:	2c00      	cmp	r4, #0
 8013958:	d007      	beq.n	801396a <_Bfree+0x3e>
 801395a:	69eb      	ldr	r3, [r5, #28]
 801395c:	6862      	ldr	r2, [r4, #4]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	0092      	lsls	r2, r2, #2
 8013962:	189b      	adds	r3, r3, r2
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	6022      	str	r2, [r4, #0]
 8013968:	601c      	str	r4, [r3, #0]
 801396a:	bd70      	pop	{r4, r5, r6, pc}
 801396c:	08017542 	.word	0x08017542
 8013970:	080176cd 	.word	0x080176cd

08013974 <__multadd>:
 8013974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013976:	000e      	movs	r6, r1
 8013978:	9001      	str	r0, [sp, #4]
 801397a:	000c      	movs	r4, r1
 801397c:	001d      	movs	r5, r3
 801397e:	2000      	movs	r0, #0
 8013980:	690f      	ldr	r7, [r1, #16]
 8013982:	3614      	adds	r6, #20
 8013984:	6833      	ldr	r3, [r6, #0]
 8013986:	3001      	adds	r0, #1
 8013988:	b299      	uxth	r1, r3
 801398a:	4351      	muls	r1, r2
 801398c:	0c1b      	lsrs	r3, r3, #16
 801398e:	4353      	muls	r3, r2
 8013990:	1949      	adds	r1, r1, r5
 8013992:	0c0d      	lsrs	r5, r1, #16
 8013994:	195b      	adds	r3, r3, r5
 8013996:	0c1d      	lsrs	r5, r3, #16
 8013998:	b289      	uxth	r1, r1
 801399a:	041b      	lsls	r3, r3, #16
 801399c:	185b      	adds	r3, r3, r1
 801399e:	c608      	stmia	r6!, {r3}
 80139a0:	4287      	cmp	r7, r0
 80139a2:	dcef      	bgt.n	8013984 <__multadd+0x10>
 80139a4:	2d00      	cmp	r5, #0
 80139a6:	d022      	beq.n	80139ee <__multadd+0x7a>
 80139a8:	68a3      	ldr	r3, [r4, #8]
 80139aa:	42bb      	cmp	r3, r7
 80139ac:	dc19      	bgt.n	80139e2 <__multadd+0x6e>
 80139ae:	6861      	ldr	r1, [r4, #4]
 80139b0:	9801      	ldr	r0, [sp, #4]
 80139b2:	3101      	adds	r1, #1
 80139b4:	f7ff ff76 	bl	80138a4 <_Balloc>
 80139b8:	1e06      	subs	r6, r0, #0
 80139ba:	d105      	bne.n	80139c8 <__multadd+0x54>
 80139bc:	0032      	movs	r2, r6
 80139be:	21ba      	movs	r1, #186	; 0xba
 80139c0:	4b0c      	ldr	r3, [pc, #48]	; (80139f4 <__multadd+0x80>)
 80139c2:	480d      	ldr	r0, [pc, #52]	; (80139f8 <__multadd+0x84>)
 80139c4:	f7fe fcfa 	bl	80123bc <__assert_func>
 80139c8:	0021      	movs	r1, r4
 80139ca:	6922      	ldr	r2, [r4, #16]
 80139cc:	310c      	adds	r1, #12
 80139ce:	3202      	adds	r2, #2
 80139d0:	0092      	lsls	r2, r2, #2
 80139d2:	300c      	adds	r0, #12
 80139d4:	f7fe fcde 	bl	8012394 <memcpy>
 80139d8:	0021      	movs	r1, r4
 80139da:	9801      	ldr	r0, [sp, #4]
 80139dc:	f7ff ffa6 	bl	801392c <_Bfree>
 80139e0:	0034      	movs	r4, r6
 80139e2:	1d3b      	adds	r3, r7, #4
 80139e4:	009b      	lsls	r3, r3, #2
 80139e6:	18e3      	adds	r3, r4, r3
 80139e8:	605d      	str	r5, [r3, #4]
 80139ea:	1c7b      	adds	r3, r7, #1
 80139ec:	6123      	str	r3, [r4, #16]
 80139ee:	0020      	movs	r0, r4
 80139f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80139f2:	46c0      	nop			; (mov r8, r8)
 80139f4:	0801765c 	.word	0x0801765c
 80139f8:	080176cd 	.word	0x080176cd

080139fc <__s2b>:
 80139fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139fe:	0006      	movs	r6, r0
 8013a00:	0018      	movs	r0, r3
 8013a02:	000c      	movs	r4, r1
 8013a04:	3008      	adds	r0, #8
 8013a06:	2109      	movs	r1, #9
 8013a08:	9301      	str	r3, [sp, #4]
 8013a0a:	0015      	movs	r5, r2
 8013a0c:	f7ec fc22 	bl	8000254 <__divsi3>
 8013a10:	2301      	movs	r3, #1
 8013a12:	2100      	movs	r1, #0
 8013a14:	4283      	cmp	r3, r0
 8013a16:	db0a      	blt.n	8013a2e <__s2b+0x32>
 8013a18:	0030      	movs	r0, r6
 8013a1a:	f7ff ff43 	bl	80138a4 <_Balloc>
 8013a1e:	1e01      	subs	r1, r0, #0
 8013a20:	d108      	bne.n	8013a34 <__s2b+0x38>
 8013a22:	000a      	movs	r2, r1
 8013a24:	4b19      	ldr	r3, [pc, #100]	; (8013a8c <__s2b+0x90>)
 8013a26:	481a      	ldr	r0, [pc, #104]	; (8013a90 <__s2b+0x94>)
 8013a28:	31d3      	adds	r1, #211	; 0xd3
 8013a2a:	f7fe fcc7 	bl	80123bc <__assert_func>
 8013a2e:	005b      	lsls	r3, r3, #1
 8013a30:	3101      	adds	r1, #1
 8013a32:	e7ef      	b.n	8013a14 <__s2b+0x18>
 8013a34:	9b08      	ldr	r3, [sp, #32]
 8013a36:	6143      	str	r3, [r0, #20]
 8013a38:	2301      	movs	r3, #1
 8013a3a:	6103      	str	r3, [r0, #16]
 8013a3c:	2d09      	cmp	r5, #9
 8013a3e:	dd18      	ble.n	8013a72 <__s2b+0x76>
 8013a40:	0023      	movs	r3, r4
 8013a42:	3309      	adds	r3, #9
 8013a44:	001f      	movs	r7, r3
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	1964      	adds	r4, r4, r5
 8013a4a:	783b      	ldrb	r3, [r7, #0]
 8013a4c:	220a      	movs	r2, #10
 8013a4e:	0030      	movs	r0, r6
 8013a50:	3b30      	subs	r3, #48	; 0x30
 8013a52:	f7ff ff8f 	bl	8013974 <__multadd>
 8013a56:	3701      	adds	r7, #1
 8013a58:	0001      	movs	r1, r0
 8013a5a:	42a7      	cmp	r7, r4
 8013a5c:	d1f5      	bne.n	8013a4a <__s2b+0x4e>
 8013a5e:	002c      	movs	r4, r5
 8013a60:	9b00      	ldr	r3, [sp, #0]
 8013a62:	3c08      	subs	r4, #8
 8013a64:	191c      	adds	r4, r3, r4
 8013a66:	002f      	movs	r7, r5
 8013a68:	9b01      	ldr	r3, [sp, #4]
 8013a6a:	429f      	cmp	r7, r3
 8013a6c:	db04      	blt.n	8013a78 <__s2b+0x7c>
 8013a6e:	0008      	movs	r0, r1
 8013a70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013a72:	2509      	movs	r5, #9
 8013a74:	340a      	adds	r4, #10
 8013a76:	e7f6      	b.n	8013a66 <__s2b+0x6a>
 8013a78:	1b63      	subs	r3, r4, r5
 8013a7a:	5ddb      	ldrb	r3, [r3, r7]
 8013a7c:	220a      	movs	r2, #10
 8013a7e:	0030      	movs	r0, r6
 8013a80:	3b30      	subs	r3, #48	; 0x30
 8013a82:	f7ff ff77 	bl	8013974 <__multadd>
 8013a86:	3701      	adds	r7, #1
 8013a88:	0001      	movs	r1, r0
 8013a8a:	e7ed      	b.n	8013a68 <__s2b+0x6c>
 8013a8c:	0801765c 	.word	0x0801765c
 8013a90:	080176cd 	.word	0x080176cd

08013a94 <__hi0bits>:
 8013a94:	0003      	movs	r3, r0
 8013a96:	0c02      	lsrs	r2, r0, #16
 8013a98:	2000      	movs	r0, #0
 8013a9a:	4282      	cmp	r2, r0
 8013a9c:	d101      	bne.n	8013aa2 <__hi0bits+0xe>
 8013a9e:	041b      	lsls	r3, r3, #16
 8013aa0:	3010      	adds	r0, #16
 8013aa2:	0e1a      	lsrs	r2, r3, #24
 8013aa4:	d101      	bne.n	8013aaa <__hi0bits+0x16>
 8013aa6:	3008      	adds	r0, #8
 8013aa8:	021b      	lsls	r3, r3, #8
 8013aaa:	0f1a      	lsrs	r2, r3, #28
 8013aac:	d101      	bne.n	8013ab2 <__hi0bits+0x1e>
 8013aae:	3004      	adds	r0, #4
 8013ab0:	011b      	lsls	r3, r3, #4
 8013ab2:	0f9a      	lsrs	r2, r3, #30
 8013ab4:	d101      	bne.n	8013aba <__hi0bits+0x26>
 8013ab6:	3002      	adds	r0, #2
 8013ab8:	009b      	lsls	r3, r3, #2
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	db03      	blt.n	8013ac6 <__hi0bits+0x32>
 8013abe:	3001      	adds	r0, #1
 8013ac0:	005b      	lsls	r3, r3, #1
 8013ac2:	d400      	bmi.n	8013ac6 <__hi0bits+0x32>
 8013ac4:	2020      	movs	r0, #32
 8013ac6:	4770      	bx	lr

08013ac8 <__lo0bits>:
 8013ac8:	6803      	ldr	r3, [r0, #0]
 8013aca:	0001      	movs	r1, r0
 8013acc:	2207      	movs	r2, #7
 8013ace:	0018      	movs	r0, r3
 8013ad0:	4010      	ands	r0, r2
 8013ad2:	4213      	tst	r3, r2
 8013ad4:	d00d      	beq.n	8013af2 <__lo0bits+0x2a>
 8013ad6:	3a06      	subs	r2, #6
 8013ad8:	2000      	movs	r0, #0
 8013ada:	4213      	tst	r3, r2
 8013adc:	d105      	bne.n	8013aea <__lo0bits+0x22>
 8013ade:	3002      	adds	r0, #2
 8013ae0:	4203      	tst	r3, r0
 8013ae2:	d003      	beq.n	8013aec <__lo0bits+0x24>
 8013ae4:	40d3      	lsrs	r3, r2
 8013ae6:	0010      	movs	r0, r2
 8013ae8:	600b      	str	r3, [r1, #0]
 8013aea:	4770      	bx	lr
 8013aec:	089b      	lsrs	r3, r3, #2
 8013aee:	600b      	str	r3, [r1, #0]
 8013af0:	e7fb      	b.n	8013aea <__lo0bits+0x22>
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	2a00      	cmp	r2, #0
 8013af6:	d101      	bne.n	8013afc <__lo0bits+0x34>
 8013af8:	2010      	movs	r0, #16
 8013afa:	0c1b      	lsrs	r3, r3, #16
 8013afc:	b2da      	uxtb	r2, r3
 8013afe:	2a00      	cmp	r2, #0
 8013b00:	d101      	bne.n	8013b06 <__lo0bits+0x3e>
 8013b02:	3008      	adds	r0, #8
 8013b04:	0a1b      	lsrs	r3, r3, #8
 8013b06:	071a      	lsls	r2, r3, #28
 8013b08:	d101      	bne.n	8013b0e <__lo0bits+0x46>
 8013b0a:	3004      	adds	r0, #4
 8013b0c:	091b      	lsrs	r3, r3, #4
 8013b0e:	079a      	lsls	r2, r3, #30
 8013b10:	d101      	bne.n	8013b16 <__lo0bits+0x4e>
 8013b12:	3002      	adds	r0, #2
 8013b14:	089b      	lsrs	r3, r3, #2
 8013b16:	07da      	lsls	r2, r3, #31
 8013b18:	d4e9      	bmi.n	8013aee <__lo0bits+0x26>
 8013b1a:	3001      	adds	r0, #1
 8013b1c:	085b      	lsrs	r3, r3, #1
 8013b1e:	d1e6      	bne.n	8013aee <__lo0bits+0x26>
 8013b20:	2020      	movs	r0, #32
 8013b22:	e7e2      	b.n	8013aea <__lo0bits+0x22>

08013b24 <__i2b>:
 8013b24:	b510      	push	{r4, lr}
 8013b26:	000c      	movs	r4, r1
 8013b28:	2101      	movs	r1, #1
 8013b2a:	f7ff febb 	bl	80138a4 <_Balloc>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d107      	bne.n	8013b42 <__i2b+0x1e>
 8013b32:	2146      	movs	r1, #70	; 0x46
 8013b34:	4c05      	ldr	r4, [pc, #20]	; (8013b4c <__i2b+0x28>)
 8013b36:	0002      	movs	r2, r0
 8013b38:	4b05      	ldr	r3, [pc, #20]	; (8013b50 <__i2b+0x2c>)
 8013b3a:	0020      	movs	r0, r4
 8013b3c:	31ff      	adds	r1, #255	; 0xff
 8013b3e:	f7fe fc3d 	bl	80123bc <__assert_func>
 8013b42:	2301      	movs	r3, #1
 8013b44:	6144      	str	r4, [r0, #20]
 8013b46:	6103      	str	r3, [r0, #16]
 8013b48:	bd10      	pop	{r4, pc}
 8013b4a:	46c0      	nop			; (mov r8, r8)
 8013b4c:	080176cd 	.word	0x080176cd
 8013b50:	0801765c 	.word	0x0801765c

08013b54 <__multiply>:
 8013b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b56:	0015      	movs	r5, r2
 8013b58:	690a      	ldr	r2, [r1, #16]
 8013b5a:	692b      	ldr	r3, [r5, #16]
 8013b5c:	000c      	movs	r4, r1
 8013b5e:	b08b      	sub	sp, #44	; 0x2c
 8013b60:	429a      	cmp	r2, r3
 8013b62:	da01      	bge.n	8013b68 <__multiply+0x14>
 8013b64:	002c      	movs	r4, r5
 8013b66:	000d      	movs	r5, r1
 8013b68:	6927      	ldr	r7, [r4, #16]
 8013b6a:	692e      	ldr	r6, [r5, #16]
 8013b6c:	6861      	ldr	r1, [r4, #4]
 8013b6e:	19bb      	adds	r3, r7, r6
 8013b70:	9303      	str	r3, [sp, #12]
 8013b72:	68a3      	ldr	r3, [r4, #8]
 8013b74:	19ba      	adds	r2, r7, r6
 8013b76:	4293      	cmp	r3, r2
 8013b78:	da00      	bge.n	8013b7c <__multiply+0x28>
 8013b7a:	3101      	adds	r1, #1
 8013b7c:	f7ff fe92 	bl	80138a4 <_Balloc>
 8013b80:	9002      	str	r0, [sp, #8]
 8013b82:	2800      	cmp	r0, #0
 8013b84:	d106      	bne.n	8013b94 <__multiply+0x40>
 8013b86:	21b1      	movs	r1, #177	; 0xb1
 8013b88:	4b48      	ldr	r3, [pc, #288]	; (8013cac <__multiply+0x158>)
 8013b8a:	4849      	ldr	r0, [pc, #292]	; (8013cb0 <__multiply+0x15c>)
 8013b8c:	9a02      	ldr	r2, [sp, #8]
 8013b8e:	0049      	lsls	r1, r1, #1
 8013b90:	f7fe fc14 	bl	80123bc <__assert_func>
 8013b94:	9b02      	ldr	r3, [sp, #8]
 8013b96:	2200      	movs	r2, #0
 8013b98:	3314      	adds	r3, #20
 8013b9a:	469c      	mov	ip, r3
 8013b9c:	19bb      	adds	r3, r7, r6
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	4463      	add	r3, ip
 8013ba2:	9304      	str	r3, [sp, #16]
 8013ba4:	4663      	mov	r3, ip
 8013ba6:	9904      	ldr	r1, [sp, #16]
 8013ba8:	428b      	cmp	r3, r1
 8013baa:	d32a      	bcc.n	8013c02 <__multiply+0xae>
 8013bac:	0023      	movs	r3, r4
 8013bae:	00bf      	lsls	r7, r7, #2
 8013bb0:	3314      	adds	r3, #20
 8013bb2:	3514      	adds	r5, #20
 8013bb4:	9308      	str	r3, [sp, #32]
 8013bb6:	00b6      	lsls	r6, r6, #2
 8013bb8:	19db      	adds	r3, r3, r7
 8013bba:	9305      	str	r3, [sp, #20]
 8013bbc:	19ab      	adds	r3, r5, r6
 8013bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc0:	2304      	movs	r3, #4
 8013bc2:	9306      	str	r3, [sp, #24]
 8013bc4:	0023      	movs	r3, r4
 8013bc6:	9a05      	ldr	r2, [sp, #20]
 8013bc8:	3315      	adds	r3, #21
 8013bca:	9501      	str	r5, [sp, #4]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d305      	bcc.n	8013bdc <__multiply+0x88>
 8013bd0:	1b13      	subs	r3, r2, r4
 8013bd2:	3b15      	subs	r3, #21
 8013bd4:	089b      	lsrs	r3, r3, #2
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	9306      	str	r3, [sp, #24]
 8013bdc:	9b01      	ldr	r3, [sp, #4]
 8013bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d310      	bcc.n	8013c06 <__multiply+0xb2>
 8013be4:	9b03      	ldr	r3, [sp, #12]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	dd05      	ble.n	8013bf6 <__multiply+0xa2>
 8013bea:	9b04      	ldr	r3, [sp, #16]
 8013bec:	3b04      	subs	r3, #4
 8013bee:	9304      	str	r3, [sp, #16]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d056      	beq.n	8013ca4 <__multiply+0x150>
 8013bf6:	9b02      	ldr	r3, [sp, #8]
 8013bf8:	9a03      	ldr	r2, [sp, #12]
 8013bfa:	0018      	movs	r0, r3
 8013bfc:	611a      	str	r2, [r3, #16]
 8013bfe:	b00b      	add	sp, #44	; 0x2c
 8013c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c02:	c304      	stmia	r3!, {r2}
 8013c04:	e7cf      	b.n	8013ba6 <__multiply+0x52>
 8013c06:	9b01      	ldr	r3, [sp, #4]
 8013c08:	6818      	ldr	r0, [r3, #0]
 8013c0a:	b280      	uxth	r0, r0
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d01e      	beq.n	8013c4e <__multiply+0xfa>
 8013c10:	4667      	mov	r7, ip
 8013c12:	2500      	movs	r5, #0
 8013c14:	9e08      	ldr	r6, [sp, #32]
 8013c16:	ce02      	ldmia	r6!, {r1}
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	9307      	str	r3, [sp, #28]
 8013c1c:	b28b      	uxth	r3, r1
 8013c1e:	4343      	muls	r3, r0
 8013c20:	001a      	movs	r2, r3
 8013c22:	466b      	mov	r3, sp
 8013c24:	8b9b      	ldrh	r3, [r3, #28]
 8013c26:	18d3      	adds	r3, r2, r3
 8013c28:	195b      	adds	r3, r3, r5
 8013c2a:	0c0d      	lsrs	r5, r1, #16
 8013c2c:	4345      	muls	r5, r0
 8013c2e:	9a07      	ldr	r2, [sp, #28]
 8013c30:	0c11      	lsrs	r1, r2, #16
 8013c32:	1869      	adds	r1, r5, r1
 8013c34:	0c1a      	lsrs	r2, r3, #16
 8013c36:	188a      	adds	r2, r1, r2
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	0c15      	lsrs	r5, r2, #16
 8013c3c:	0412      	lsls	r2, r2, #16
 8013c3e:	431a      	orrs	r2, r3
 8013c40:	9b05      	ldr	r3, [sp, #20]
 8013c42:	c704      	stmia	r7!, {r2}
 8013c44:	42b3      	cmp	r3, r6
 8013c46:	d8e6      	bhi.n	8013c16 <__multiply+0xc2>
 8013c48:	4663      	mov	r3, ip
 8013c4a:	9a06      	ldr	r2, [sp, #24]
 8013c4c:	509d      	str	r5, [r3, r2]
 8013c4e:	9b01      	ldr	r3, [sp, #4]
 8013c50:	6818      	ldr	r0, [r3, #0]
 8013c52:	0c00      	lsrs	r0, r0, #16
 8013c54:	d020      	beq.n	8013c98 <__multiply+0x144>
 8013c56:	4663      	mov	r3, ip
 8013c58:	0025      	movs	r5, r4
 8013c5a:	4661      	mov	r1, ip
 8013c5c:	2700      	movs	r7, #0
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	3514      	adds	r5, #20
 8013c62:	682a      	ldr	r2, [r5, #0]
 8013c64:	680e      	ldr	r6, [r1, #0]
 8013c66:	b292      	uxth	r2, r2
 8013c68:	4342      	muls	r2, r0
 8013c6a:	0c36      	lsrs	r6, r6, #16
 8013c6c:	1992      	adds	r2, r2, r6
 8013c6e:	19d2      	adds	r2, r2, r7
 8013c70:	0416      	lsls	r6, r2, #16
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	431e      	orrs	r6, r3
 8013c76:	600e      	str	r6, [r1, #0]
 8013c78:	cd40      	ldmia	r5!, {r6}
 8013c7a:	684b      	ldr	r3, [r1, #4]
 8013c7c:	0c36      	lsrs	r6, r6, #16
 8013c7e:	4346      	muls	r6, r0
 8013c80:	b29b      	uxth	r3, r3
 8013c82:	0c12      	lsrs	r2, r2, #16
 8013c84:	18f3      	adds	r3, r6, r3
 8013c86:	189b      	adds	r3, r3, r2
 8013c88:	9a05      	ldr	r2, [sp, #20]
 8013c8a:	0c1f      	lsrs	r7, r3, #16
 8013c8c:	3104      	adds	r1, #4
 8013c8e:	42aa      	cmp	r2, r5
 8013c90:	d8e7      	bhi.n	8013c62 <__multiply+0x10e>
 8013c92:	4662      	mov	r2, ip
 8013c94:	9906      	ldr	r1, [sp, #24]
 8013c96:	5053      	str	r3, [r2, r1]
 8013c98:	9b01      	ldr	r3, [sp, #4]
 8013c9a:	3304      	adds	r3, #4
 8013c9c:	9301      	str	r3, [sp, #4]
 8013c9e:	2304      	movs	r3, #4
 8013ca0:	449c      	add	ip, r3
 8013ca2:	e79b      	b.n	8013bdc <__multiply+0x88>
 8013ca4:	9b03      	ldr	r3, [sp, #12]
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	9303      	str	r3, [sp, #12]
 8013caa:	e79b      	b.n	8013be4 <__multiply+0x90>
 8013cac:	0801765c 	.word	0x0801765c
 8013cb0:	080176cd 	.word	0x080176cd

08013cb4 <__pow5mult>:
 8013cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cb6:	2303      	movs	r3, #3
 8013cb8:	0015      	movs	r5, r2
 8013cba:	0007      	movs	r7, r0
 8013cbc:	000e      	movs	r6, r1
 8013cbe:	401a      	ands	r2, r3
 8013cc0:	421d      	tst	r5, r3
 8013cc2:	d008      	beq.n	8013cd6 <__pow5mult+0x22>
 8013cc4:	4925      	ldr	r1, [pc, #148]	; (8013d5c <__pow5mult+0xa8>)
 8013cc6:	3a01      	subs	r2, #1
 8013cc8:	0092      	lsls	r2, r2, #2
 8013cca:	5852      	ldr	r2, [r2, r1]
 8013ccc:	2300      	movs	r3, #0
 8013cce:	0031      	movs	r1, r6
 8013cd0:	f7ff fe50 	bl	8013974 <__multadd>
 8013cd4:	0006      	movs	r6, r0
 8013cd6:	10ad      	asrs	r5, r5, #2
 8013cd8:	d03d      	beq.n	8013d56 <__pow5mult+0xa2>
 8013cda:	69fc      	ldr	r4, [r7, #28]
 8013cdc:	2c00      	cmp	r4, #0
 8013cde:	d10f      	bne.n	8013d00 <__pow5mult+0x4c>
 8013ce0:	2010      	movs	r0, #16
 8013ce2:	f7fc fa4d 	bl	8010180 <malloc>
 8013ce6:	1e02      	subs	r2, r0, #0
 8013ce8:	61f8      	str	r0, [r7, #28]
 8013cea:	d105      	bne.n	8013cf8 <__pow5mult+0x44>
 8013cec:	21b4      	movs	r1, #180	; 0xb4
 8013cee:	4b1c      	ldr	r3, [pc, #112]	; (8013d60 <__pow5mult+0xac>)
 8013cf0:	481c      	ldr	r0, [pc, #112]	; (8013d64 <__pow5mult+0xb0>)
 8013cf2:	31ff      	adds	r1, #255	; 0xff
 8013cf4:	f7fe fb62 	bl	80123bc <__assert_func>
 8013cf8:	6044      	str	r4, [r0, #4]
 8013cfa:	6084      	str	r4, [r0, #8]
 8013cfc:	6004      	str	r4, [r0, #0]
 8013cfe:	60c4      	str	r4, [r0, #12]
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	689c      	ldr	r4, [r3, #8]
 8013d04:	9301      	str	r3, [sp, #4]
 8013d06:	2c00      	cmp	r4, #0
 8013d08:	d108      	bne.n	8013d1c <__pow5mult+0x68>
 8013d0a:	0038      	movs	r0, r7
 8013d0c:	4916      	ldr	r1, [pc, #88]	; (8013d68 <__pow5mult+0xb4>)
 8013d0e:	f7ff ff09 	bl	8013b24 <__i2b>
 8013d12:	9b01      	ldr	r3, [sp, #4]
 8013d14:	0004      	movs	r4, r0
 8013d16:	6098      	str	r0, [r3, #8]
 8013d18:	2300      	movs	r3, #0
 8013d1a:	6003      	str	r3, [r0, #0]
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	421d      	tst	r5, r3
 8013d20:	d00a      	beq.n	8013d38 <__pow5mult+0x84>
 8013d22:	0031      	movs	r1, r6
 8013d24:	0022      	movs	r2, r4
 8013d26:	0038      	movs	r0, r7
 8013d28:	f7ff ff14 	bl	8013b54 <__multiply>
 8013d2c:	0031      	movs	r1, r6
 8013d2e:	9001      	str	r0, [sp, #4]
 8013d30:	0038      	movs	r0, r7
 8013d32:	f7ff fdfb 	bl	801392c <_Bfree>
 8013d36:	9e01      	ldr	r6, [sp, #4]
 8013d38:	106d      	asrs	r5, r5, #1
 8013d3a:	d00c      	beq.n	8013d56 <__pow5mult+0xa2>
 8013d3c:	6820      	ldr	r0, [r4, #0]
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	d107      	bne.n	8013d52 <__pow5mult+0x9e>
 8013d42:	0022      	movs	r2, r4
 8013d44:	0021      	movs	r1, r4
 8013d46:	0038      	movs	r0, r7
 8013d48:	f7ff ff04 	bl	8013b54 <__multiply>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	6020      	str	r0, [r4, #0]
 8013d50:	6003      	str	r3, [r0, #0]
 8013d52:	0004      	movs	r4, r0
 8013d54:	e7e2      	b.n	8013d1c <__pow5mult+0x68>
 8013d56:	0030      	movs	r0, r6
 8013d58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013d5a:	46c0      	nop			; (mov r8, r8)
 8013d5c:	08017818 	.word	0x08017818
 8013d60:	08017542 	.word	0x08017542
 8013d64:	080176cd 	.word	0x080176cd
 8013d68:	00000271 	.word	0x00000271

08013d6c <__lshift>:
 8013d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d6e:	000c      	movs	r4, r1
 8013d70:	0017      	movs	r7, r2
 8013d72:	6923      	ldr	r3, [r4, #16]
 8013d74:	1155      	asrs	r5, r2, #5
 8013d76:	b087      	sub	sp, #28
 8013d78:	18eb      	adds	r3, r5, r3
 8013d7a:	9302      	str	r3, [sp, #8]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	9301      	str	r3, [sp, #4]
 8013d80:	6849      	ldr	r1, [r1, #4]
 8013d82:	68a3      	ldr	r3, [r4, #8]
 8013d84:	9004      	str	r0, [sp, #16]
 8013d86:	9a01      	ldr	r2, [sp, #4]
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	db10      	blt.n	8013dae <__lshift+0x42>
 8013d8c:	9804      	ldr	r0, [sp, #16]
 8013d8e:	f7ff fd89 	bl	80138a4 <_Balloc>
 8013d92:	2300      	movs	r3, #0
 8013d94:	0002      	movs	r2, r0
 8013d96:	0006      	movs	r6, r0
 8013d98:	0019      	movs	r1, r3
 8013d9a:	3214      	adds	r2, #20
 8013d9c:	4298      	cmp	r0, r3
 8013d9e:	d10c      	bne.n	8013dba <__lshift+0x4e>
 8013da0:	31df      	adds	r1, #223	; 0xdf
 8013da2:	0032      	movs	r2, r6
 8013da4:	4b26      	ldr	r3, [pc, #152]	; (8013e40 <__lshift+0xd4>)
 8013da6:	4827      	ldr	r0, [pc, #156]	; (8013e44 <__lshift+0xd8>)
 8013da8:	31ff      	adds	r1, #255	; 0xff
 8013daa:	f7fe fb07 	bl	80123bc <__assert_func>
 8013dae:	3101      	adds	r1, #1
 8013db0:	005b      	lsls	r3, r3, #1
 8013db2:	e7e8      	b.n	8013d86 <__lshift+0x1a>
 8013db4:	0098      	lsls	r0, r3, #2
 8013db6:	5011      	str	r1, [r2, r0]
 8013db8:	3301      	adds	r3, #1
 8013dba:	42ab      	cmp	r3, r5
 8013dbc:	dbfa      	blt.n	8013db4 <__lshift+0x48>
 8013dbe:	43eb      	mvns	r3, r5
 8013dc0:	17db      	asrs	r3, r3, #31
 8013dc2:	401d      	ands	r5, r3
 8013dc4:	211f      	movs	r1, #31
 8013dc6:	0023      	movs	r3, r4
 8013dc8:	0038      	movs	r0, r7
 8013dca:	00ad      	lsls	r5, r5, #2
 8013dcc:	1955      	adds	r5, r2, r5
 8013dce:	6922      	ldr	r2, [r4, #16]
 8013dd0:	3314      	adds	r3, #20
 8013dd2:	0092      	lsls	r2, r2, #2
 8013dd4:	4008      	ands	r0, r1
 8013dd6:	4684      	mov	ip, r0
 8013dd8:	189a      	adds	r2, r3, r2
 8013dda:	420f      	tst	r7, r1
 8013ddc:	d02a      	beq.n	8013e34 <__lshift+0xc8>
 8013dde:	3101      	adds	r1, #1
 8013de0:	1a09      	subs	r1, r1, r0
 8013de2:	9105      	str	r1, [sp, #20]
 8013de4:	2100      	movs	r1, #0
 8013de6:	9503      	str	r5, [sp, #12]
 8013de8:	4667      	mov	r7, ip
 8013dea:	6818      	ldr	r0, [r3, #0]
 8013dec:	40b8      	lsls	r0, r7
 8013dee:	4308      	orrs	r0, r1
 8013df0:	9903      	ldr	r1, [sp, #12]
 8013df2:	c101      	stmia	r1!, {r0}
 8013df4:	9103      	str	r1, [sp, #12]
 8013df6:	9805      	ldr	r0, [sp, #20]
 8013df8:	cb02      	ldmia	r3!, {r1}
 8013dfa:	40c1      	lsrs	r1, r0
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d8f3      	bhi.n	8013de8 <__lshift+0x7c>
 8013e00:	0020      	movs	r0, r4
 8013e02:	3015      	adds	r0, #21
 8013e04:	2304      	movs	r3, #4
 8013e06:	4282      	cmp	r2, r0
 8013e08:	d304      	bcc.n	8013e14 <__lshift+0xa8>
 8013e0a:	1b13      	subs	r3, r2, r4
 8013e0c:	3b15      	subs	r3, #21
 8013e0e:	089b      	lsrs	r3, r3, #2
 8013e10:	3301      	adds	r3, #1
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	50e9      	str	r1, [r5, r3]
 8013e16:	2900      	cmp	r1, #0
 8013e18:	d002      	beq.n	8013e20 <__lshift+0xb4>
 8013e1a:	9b02      	ldr	r3, [sp, #8]
 8013e1c:	3302      	adds	r3, #2
 8013e1e:	9301      	str	r3, [sp, #4]
 8013e20:	9b01      	ldr	r3, [sp, #4]
 8013e22:	9804      	ldr	r0, [sp, #16]
 8013e24:	3b01      	subs	r3, #1
 8013e26:	0021      	movs	r1, r4
 8013e28:	6133      	str	r3, [r6, #16]
 8013e2a:	f7ff fd7f 	bl	801392c <_Bfree>
 8013e2e:	0030      	movs	r0, r6
 8013e30:	b007      	add	sp, #28
 8013e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e34:	cb02      	ldmia	r3!, {r1}
 8013e36:	c502      	stmia	r5!, {r1}
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d8fb      	bhi.n	8013e34 <__lshift+0xc8>
 8013e3c:	e7f0      	b.n	8013e20 <__lshift+0xb4>
 8013e3e:	46c0      	nop			; (mov r8, r8)
 8013e40:	0801765c 	.word	0x0801765c
 8013e44:	080176cd 	.word	0x080176cd

08013e48 <__mcmp>:
 8013e48:	b530      	push	{r4, r5, lr}
 8013e4a:	690b      	ldr	r3, [r1, #16]
 8013e4c:	6904      	ldr	r4, [r0, #16]
 8013e4e:	0002      	movs	r2, r0
 8013e50:	1ae0      	subs	r0, r4, r3
 8013e52:	429c      	cmp	r4, r3
 8013e54:	d10e      	bne.n	8013e74 <__mcmp+0x2c>
 8013e56:	3214      	adds	r2, #20
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	3114      	adds	r1, #20
 8013e5c:	0014      	movs	r4, r2
 8013e5e:	18c9      	adds	r1, r1, r3
 8013e60:	18d2      	adds	r2, r2, r3
 8013e62:	3a04      	subs	r2, #4
 8013e64:	3904      	subs	r1, #4
 8013e66:	6815      	ldr	r5, [r2, #0]
 8013e68:	680b      	ldr	r3, [r1, #0]
 8013e6a:	429d      	cmp	r5, r3
 8013e6c:	d003      	beq.n	8013e76 <__mcmp+0x2e>
 8013e6e:	2001      	movs	r0, #1
 8013e70:	429d      	cmp	r5, r3
 8013e72:	d303      	bcc.n	8013e7c <__mcmp+0x34>
 8013e74:	bd30      	pop	{r4, r5, pc}
 8013e76:	4294      	cmp	r4, r2
 8013e78:	d3f3      	bcc.n	8013e62 <__mcmp+0x1a>
 8013e7a:	e7fb      	b.n	8013e74 <__mcmp+0x2c>
 8013e7c:	4240      	negs	r0, r0
 8013e7e:	e7f9      	b.n	8013e74 <__mcmp+0x2c>

08013e80 <__mdiff>:
 8013e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e82:	000e      	movs	r6, r1
 8013e84:	0007      	movs	r7, r0
 8013e86:	0011      	movs	r1, r2
 8013e88:	0030      	movs	r0, r6
 8013e8a:	b087      	sub	sp, #28
 8013e8c:	0014      	movs	r4, r2
 8013e8e:	f7ff ffdb 	bl	8013e48 <__mcmp>
 8013e92:	1e05      	subs	r5, r0, #0
 8013e94:	d110      	bne.n	8013eb8 <__mdiff+0x38>
 8013e96:	0001      	movs	r1, r0
 8013e98:	0038      	movs	r0, r7
 8013e9a:	f7ff fd03 	bl	80138a4 <_Balloc>
 8013e9e:	1e02      	subs	r2, r0, #0
 8013ea0:	d104      	bne.n	8013eac <__mdiff+0x2c>
 8013ea2:	4b3f      	ldr	r3, [pc, #252]	; (8013fa0 <__mdiff+0x120>)
 8013ea4:	483f      	ldr	r0, [pc, #252]	; (8013fa4 <__mdiff+0x124>)
 8013ea6:	4940      	ldr	r1, [pc, #256]	; (8013fa8 <__mdiff+0x128>)
 8013ea8:	f7fe fa88 	bl	80123bc <__assert_func>
 8013eac:	2301      	movs	r3, #1
 8013eae:	6145      	str	r5, [r0, #20]
 8013eb0:	6103      	str	r3, [r0, #16]
 8013eb2:	0010      	movs	r0, r2
 8013eb4:	b007      	add	sp, #28
 8013eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eb8:	2301      	movs	r3, #1
 8013eba:	9301      	str	r3, [sp, #4]
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	db04      	blt.n	8013eca <__mdiff+0x4a>
 8013ec0:	0023      	movs	r3, r4
 8013ec2:	0034      	movs	r4, r6
 8013ec4:	001e      	movs	r6, r3
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	9301      	str	r3, [sp, #4]
 8013eca:	0038      	movs	r0, r7
 8013ecc:	6861      	ldr	r1, [r4, #4]
 8013ece:	f7ff fce9 	bl	80138a4 <_Balloc>
 8013ed2:	1e02      	subs	r2, r0, #0
 8013ed4:	d103      	bne.n	8013ede <__mdiff+0x5e>
 8013ed6:	4b32      	ldr	r3, [pc, #200]	; (8013fa0 <__mdiff+0x120>)
 8013ed8:	4832      	ldr	r0, [pc, #200]	; (8013fa4 <__mdiff+0x124>)
 8013eda:	4934      	ldr	r1, [pc, #208]	; (8013fac <__mdiff+0x12c>)
 8013edc:	e7e4      	b.n	8013ea8 <__mdiff+0x28>
 8013ede:	9b01      	ldr	r3, [sp, #4]
 8013ee0:	2700      	movs	r7, #0
 8013ee2:	60c3      	str	r3, [r0, #12]
 8013ee4:	6920      	ldr	r0, [r4, #16]
 8013ee6:	3414      	adds	r4, #20
 8013ee8:	0083      	lsls	r3, r0, #2
 8013eea:	18e3      	adds	r3, r4, r3
 8013eec:	0021      	movs	r1, r4
 8013eee:	9401      	str	r4, [sp, #4]
 8013ef0:	0034      	movs	r4, r6
 8013ef2:	9302      	str	r3, [sp, #8]
 8013ef4:	6933      	ldr	r3, [r6, #16]
 8013ef6:	3414      	adds	r4, #20
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	18e3      	adds	r3, r4, r3
 8013efc:	9303      	str	r3, [sp, #12]
 8013efe:	0013      	movs	r3, r2
 8013f00:	3314      	adds	r3, #20
 8013f02:	469c      	mov	ip, r3
 8013f04:	9305      	str	r3, [sp, #20]
 8013f06:	9104      	str	r1, [sp, #16]
 8013f08:	9b04      	ldr	r3, [sp, #16]
 8013f0a:	cc02      	ldmia	r4!, {r1}
 8013f0c:	cb20      	ldmia	r3!, {r5}
 8013f0e:	9304      	str	r3, [sp, #16]
 8013f10:	b2ab      	uxth	r3, r5
 8013f12:	19df      	adds	r7, r3, r7
 8013f14:	b28b      	uxth	r3, r1
 8013f16:	1afb      	subs	r3, r7, r3
 8013f18:	0c09      	lsrs	r1, r1, #16
 8013f1a:	0c2d      	lsrs	r5, r5, #16
 8013f1c:	1a6d      	subs	r5, r5, r1
 8013f1e:	1419      	asrs	r1, r3, #16
 8013f20:	1869      	adds	r1, r5, r1
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	140f      	asrs	r7, r1, #16
 8013f26:	0409      	lsls	r1, r1, #16
 8013f28:	4319      	orrs	r1, r3
 8013f2a:	4663      	mov	r3, ip
 8013f2c:	c302      	stmia	r3!, {r1}
 8013f2e:	469c      	mov	ip, r3
 8013f30:	9b03      	ldr	r3, [sp, #12]
 8013f32:	42a3      	cmp	r3, r4
 8013f34:	d8e8      	bhi.n	8013f08 <__mdiff+0x88>
 8013f36:	0031      	movs	r1, r6
 8013f38:	9c03      	ldr	r4, [sp, #12]
 8013f3a:	3115      	adds	r1, #21
 8013f3c:	2304      	movs	r3, #4
 8013f3e:	428c      	cmp	r4, r1
 8013f40:	d304      	bcc.n	8013f4c <__mdiff+0xcc>
 8013f42:	1ba3      	subs	r3, r4, r6
 8013f44:	3b15      	subs	r3, #21
 8013f46:	089b      	lsrs	r3, r3, #2
 8013f48:	3301      	adds	r3, #1
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	9901      	ldr	r1, [sp, #4]
 8013f4e:	18cd      	adds	r5, r1, r3
 8013f50:	9905      	ldr	r1, [sp, #20]
 8013f52:	002e      	movs	r6, r5
 8013f54:	18cb      	adds	r3, r1, r3
 8013f56:	469c      	mov	ip, r3
 8013f58:	9902      	ldr	r1, [sp, #8]
 8013f5a:	428e      	cmp	r6, r1
 8013f5c:	d310      	bcc.n	8013f80 <__mdiff+0x100>
 8013f5e:	9e02      	ldr	r6, [sp, #8]
 8013f60:	1ee9      	subs	r1, r5, #3
 8013f62:	2400      	movs	r4, #0
 8013f64:	428e      	cmp	r6, r1
 8013f66:	d304      	bcc.n	8013f72 <__mdiff+0xf2>
 8013f68:	0031      	movs	r1, r6
 8013f6a:	3103      	adds	r1, #3
 8013f6c:	1b49      	subs	r1, r1, r5
 8013f6e:	0889      	lsrs	r1, r1, #2
 8013f70:	008c      	lsls	r4, r1, #2
 8013f72:	191b      	adds	r3, r3, r4
 8013f74:	3b04      	subs	r3, #4
 8013f76:	6819      	ldr	r1, [r3, #0]
 8013f78:	2900      	cmp	r1, #0
 8013f7a:	d00f      	beq.n	8013f9c <__mdiff+0x11c>
 8013f7c:	6110      	str	r0, [r2, #16]
 8013f7e:	e798      	b.n	8013eb2 <__mdiff+0x32>
 8013f80:	ce02      	ldmia	r6!, {r1}
 8013f82:	b28c      	uxth	r4, r1
 8013f84:	19e4      	adds	r4, r4, r7
 8013f86:	0c0f      	lsrs	r7, r1, #16
 8013f88:	1421      	asrs	r1, r4, #16
 8013f8a:	1879      	adds	r1, r7, r1
 8013f8c:	b2a4      	uxth	r4, r4
 8013f8e:	140f      	asrs	r7, r1, #16
 8013f90:	0409      	lsls	r1, r1, #16
 8013f92:	4321      	orrs	r1, r4
 8013f94:	4664      	mov	r4, ip
 8013f96:	c402      	stmia	r4!, {r1}
 8013f98:	46a4      	mov	ip, r4
 8013f9a:	e7dd      	b.n	8013f58 <__mdiff+0xd8>
 8013f9c:	3801      	subs	r0, #1
 8013f9e:	e7e9      	b.n	8013f74 <__mdiff+0xf4>
 8013fa0:	0801765c 	.word	0x0801765c
 8013fa4:	080176cd 	.word	0x080176cd
 8013fa8:	00000237 	.word	0x00000237
 8013fac:	00000245 	.word	0x00000245

08013fb0 <__ulp>:
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	4b0b      	ldr	r3, [pc, #44]	; (8013fe0 <__ulp+0x30>)
 8013fb4:	4019      	ands	r1, r3
 8013fb6:	4b0b      	ldr	r3, [pc, #44]	; (8013fe4 <__ulp+0x34>)
 8013fb8:	18c9      	adds	r1, r1, r3
 8013fba:	4281      	cmp	r1, r0
 8013fbc:	dc06      	bgt.n	8013fcc <__ulp+0x1c>
 8013fbe:	4249      	negs	r1, r1
 8013fc0:	150b      	asrs	r3, r1, #20
 8013fc2:	2b13      	cmp	r3, #19
 8013fc4:	dc03      	bgt.n	8013fce <__ulp+0x1e>
 8013fc6:	2180      	movs	r1, #128	; 0x80
 8013fc8:	0309      	lsls	r1, r1, #12
 8013fca:	4119      	asrs	r1, r3
 8013fcc:	4770      	bx	lr
 8013fce:	3b14      	subs	r3, #20
 8013fd0:	2001      	movs	r0, #1
 8013fd2:	2b1e      	cmp	r3, #30
 8013fd4:	dc02      	bgt.n	8013fdc <__ulp+0x2c>
 8013fd6:	2080      	movs	r0, #128	; 0x80
 8013fd8:	0600      	lsls	r0, r0, #24
 8013fda:	40d8      	lsrs	r0, r3
 8013fdc:	2100      	movs	r1, #0
 8013fde:	e7f5      	b.n	8013fcc <__ulp+0x1c>
 8013fe0:	7ff00000 	.word	0x7ff00000
 8013fe4:	fcc00000 	.word	0xfcc00000

08013fe8 <__b2d>:
 8013fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fea:	0006      	movs	r6, r0
 8013fec:	6903      	ldr	r3, [r0, #16]
 8013fee:	3614      	adds	r6, #20
 8013ff0:	009b      	lsls	r3, r3, #2
 8013ff2:	18f3      	adds	r3, r6, r3
 8013ff4:	1f1d      	subs	r5, r3, #4
 8013ff6:	682c      	ldr	r4, [r5, #0]
 8013ff8:	000f      	movs	r7, r1
 8013ffa:	0020      	movs	r0, r4
 8013ffc:	9301      	str	r3, [sp, #4]
 8013ffe:	f7ff fd49 	bl	8013a94 <__hi0bits>
 8014002:	2220      	movs	r2, #32
 8014004:	1a12      	subs	r2, r2, r0
 8014006:	603a      	str	r2, [r7, #0]
 8014008:	0003      	movs	r3, r0
 801400a:	4a1c      	ldr	r2, [pc, #112]	; (801407c <__b2d+0x94>)
 801400c:	280a      	cmp	r0, #10
 801400e:	dc15      	bgt.n	801403c <__b2d+0x54>
 8014010:	210b      	movs	r1, #11
 8014012:	0027      	movs	r7, r4
 8014014:	1a09      	subs	r1, r1, r0
 8014016:	40cf      	lsrs	r7, r1
 8014018:	433a      	orrs	r2, r7
 801401a:	468c      	mov	ip, r1
 801401c:	0011      	movs	r1, r2
 801401e:	2200      	movs	r2, #0
 8014020:	42ae      	cmp	r6, r5
 8014022:	d202      	bcs.n	801402a <__b2d+0x42>
 8014024:	9a01      	ldr	r2, [sp, #4]
 8014026:	3a08      	subs	r2, #8
 8014028:	6812      	ldr	r2, [r2, #0]
 801402a:	3315      	adds	r3, #21
 801402c:	409c      	lsls	r4, r3
 801402e:	4663      	mov	r3, ip
 8014030:	0027      	movs	r7, r4
 8014032:	40da      	lsrs	r2, r3
 8014034:	4317      	orrs	r7, r2
 8014036:	0038      	movs	r0, r7
 8014038:	b003      	add	sp, #12
 801403a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801403c:	2700      	movs	r7, #0
 801403e:	42ae      	cmp	r6, r5
 8014040:	d202      	bcs.n	8014048 <__b2d+0x60>
 8014042:	9d01      	ldr	r5, [sp, #4]
 8014044:	3d08      	subs	r5, #8
 8014046:	682f      	ldr	r7, [r5, #0]
 8014048:	210b      	movs	r1, #11
 801404a:	4249      	negs	r1, r1
 801404c:	468c      	mov	ip, r1
 801404e:	449c      	add	ip, r3
 8014050:	2b0b      	cmp	r3, #11
 8014052:	d010      	beq.n	8014076 <__b2d+0x8e>
 8014054:	4661      	mov	r1, ip
 8014056:	2320      	movs	r3, #32
 8014058:	408c      	lsls	r4, r1
 801405a:	1a5b      	subs	r3, r3, r1
 801405c:	0039      	movs	r1, r7
 801405e:	40d9      	lsrs	r1, r3
 8014060:	430c      	orrs	r4, r1
 8014062:	4322      	orrs	r2, r4
 8014064:	0011      	movs	r1, r2
 8014066:	2200      	movs	r2, #0
 8014068:	42b5      	cmp	r5, r6
 801406a:	d901      	bls.n	8014070 <__b2d+0x88>
 801406c:	3d04      	subs	r5, #4
 801406e:	682a      	ldr	r2, [r5, #0]
 8014070:	4664      	mov	r4, ip
 8014072:	40a7      	lsls	r7, r4
 8014074:	e7dd      	b.n	8014032 <__b2d+0x4a>
 8014076:	4322      	orrs	r2, r4
 8014078:	0011      	movs	r1, r2
 801407a:	e7dc      	b.n	8014036 <__b2d+0x4e>
 801407c:	3ff00000 	.word	0x3ff00000

08014080 <__d2b>:
 8014080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014082:	2101      	movs	r1, #1
 8014084:	0014      	movs	r4, r2
 8014086:	001d      	movs	r5, r3
 8014088:	9f08      	ldr	r7, [sp, #32]
 801408a:	f7ff fc0b 	bl	80138a4 <_Balloc>
 801408e:	1e06      	subs	r6, r0, #0
 8014090:	d105      	bne.n	801409e <__d2b+0x1e>
 8014092:	0032      	movs	r2, r6
 8014094:	4b24      	ldr	r3, [pc, #144]	; (8014128 <__d2b+0xa8>)
 8014096:	4825      	ldr	r0, [pc, #148]	; (801412c <__d2b+0xac>)
 8014098:	4925      	ldr	r1, [pc, #148]	; (8014130 <__d2b+0xb0>)
 801409a:	f7fe f98f 	bl	80123bc <__assert_func>
 801409e:	032b      	lsls	r3, r5, #12
 80140a0:	006d      	lsls	r5, r5, #1
 80140a2:	0b1b      	lsrs	r3, r3, #12
 80140a4:	0d6d      	lsrs	r5, r5, #21
 80140a6:	d125      	bne.n	80140f4 <__d2b+0x74>
 80140a8:	9301      	str	r3, [sp, #4]
 80140aa:	2c00      	cmp	r4, #0
 80140ac:	d028      	beq.n	8014100 <__d2b+0x80>
 80140ae:	4668      	mov	r0, sp
 80140b0:	9400      	str	r4, [sp, #0]
 80140b2:	f7ff fd09 	bl	8013ac8 <__lo0bits>
 80140b6:	9b01      	ldr	r3, [sp, #4]
 80140b8:	9900      	ldr	r1, [sp, #0]
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d01e      	beq.n	80140fc <__d2b+0x7c>
 80140be:	2220      	movs	r2, #32
 80140c0:	001c      	movs	r4, r3
 80140c2:	1a12      	subs	r2, r2, r0
 80140c4:	4094      	lsls	r4, r2
 80140c6:	0022      	movs	r2, r4
 80140c8:	40c3      	lsrs	r3, r0
 80140ca:	430a      	orrs	r2, r1
 80140cc:	6172      	str	r2, [r6, #20]
 80140ce:	9301      	str	r3, [sp, #4]
 80140d0:	9c01      	ldr	r4, [sp, #4]
 80140d2:	61b4      	str	r4, [r6, #24]
 80140d4:	1e63      	subs	r3, r4, #1
 80140d6:	419c      	sbcs	r4, r3
 80140d8:	3401      	adds	r4, #1
 80140da:	6134      	str	r4, [r6, #16]
 80140dc:	2d00      	cmp	r5, #0
 80140de:	d017      	beq.n	8014110 <__d2b+0x90>
 80140e0:	2435      	movs	r4, #53	; 0x35
 80140e2:	4b14      	ldr	r3, [pc, #80]	; (8014134 <__d2b+0xb4>)
 80140e4:	18ed      	adds	r5, r5, r3
 80140e6:	182d      	adds	r5, r5, r0
 80140e8:	603d      	str	r5, [r7, #0]
 80140ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ec:	1a24      	subs	r4, r4, r0
 80140ee:	601c      	str	r4, [r3, #0]
 80140f0:	0030      	movs	r0, r6
 80140f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80140f4:	2280      	movs	r2, #128	; 0x80
 80140f6:	0352      	lsls	r2, r2, #13
 80140f8:	4313      	orrs	r3, r2
 80140fa:	e7d5      	b.n	80140a8 <__d2b+0x28>
 80140fc:	6171      	str	r1, [r6, #20]
 80140fe:	e7e7      	b.n	80140d0 <__d2b+0x50>
 8014100:	a801      	add	r0, sp, #4
 8014102:	f7ff fce1 	bl	8013ac8 <__lo0bits>
 8014106:	9b01      	ldr	r3, [sp, #4]
 8014108:	2401      	movs	r4, #1
 801410a:	6173      	str	r3, [r6, #20]
 801410c:	3020      	adds	r0, #32
 801410e:	e7e4      	b.n	80140da <__d2b+0x5a>
 8014110:	4b09      	ldr	r3, [pc, #36]	; (8014138 <__d2b+0xb8>)
 8014112:	18c0      	adds	r0, r0, r3
 8014114:	4b09      	ldr	r3, [pc, #36]	; (801413c <__d2b+0xbc>)
 8014116:	6038      	str	r0, [r7, #0]
 8014118:	18e3      	adds	r3, r4, r3
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	18f3      	adds	r3, r6, r3
 801411e:	6958      	ldr	r0, [r3, #20]
 8014120:	f7ff fcb8 	bl	8013a94 <__hi0bits>
 8014124:	0164      	lsls	r4, r4, #5
 8014126:	e7e0      	b.n	80140ea <__d2b+0x6a>
 8014128:	0801765c 	.word	0x0801765c
 801412c:	080176cd 	.word	0x080176cd
 8014130:	0000030f 	.word	0x0000030f
 8014134:	fffffbcd 	.word	0xfffffbcd
 8014138:	fffffbce 	.word	0xfffffbce
 801413c:	3fffffff 	.word	0x3fffffff

08014140 <__ratio>:
 8014140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014142:	b087      	sub	sp, #28
 8014144:	000f      	movs	r7, r1
 8014146:	a904      	add	r1, sp, #16
 8014148:	0006      	movs	r6, r0
 801414a:	f7ff ff4d 	bl	8013fe8 <__b2d>
 801414e:	9000      	str	r0, [sp, #0]
 8014150:	9101      	str	r1, [sp, #4]
 8014152:	9c00      	ldr	r4, [sp, #0]
 8014154:	9d01      	ldr	r5, [sp, #4]
 8014156:	0038      	movs	r0, r7
 8014158:	a905      	add	r1, sp, #20
 801415a:	f7ff ff45 	bl	8013fe8 <__b2d>
 801415e:	9002      	str	r0, [sp, #8]
 8014160:	9103      	str	r1, [sp, #12]
 8014162:	9a02      	ldr	r2, [sp, #8]
 8014164:	9b03      	ldr	r3, [sp, #12]
 8014166:	6930      	ldr	r0, [r6, #16]
 8014168:	6939      	ldr	r1, [r7, #16]
 801416a:	9e04      	ldr	r6, [sp, #16]
 801416c:	1a40      	subs	r0, r0, r1
 801416e:	9905      	ldr	r1, [sp, #20]
 8014170:	0140      	lsls	r0, r0, #5
 8014172:	1a71      	subs	r1, r6, r1
 8014174:	1841      	adds	r1, r0, r1
 8014176:	0508      	lsls	r0, r1, #20
 8014178:	2900      	cmp	r1, #0
 801417a:	dd07      	ble.n	801418c <__ratio+0x4c>
 801417c:	9901      	ldr	r1, [sp, #4]
 801417e:	1845      	adds	r5, r0, r1
 8014180:	0020      	movs	r0, r4
 8014182:	0029      	movs	r1, r5
 8014184:	f7ed fcac 	bl	8001ae0 <__aeabi_ddiv>
 8014188:	b007      	add	sp, #28
 801418a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801418c:	9903      	ldr	r1, [sp, #12]
 801418e:	1a0b      	subs	r3, r1, r0
 8014190:	e7f6      	b.n	8014180 <__ratio+0x40>

08014192 <__copybits>:
 8014192:	b570      	push	{r4, r5, r6, lr}
 8014194:	0014      	movs	r4, r2
 8014196:	0005      	movs	r5, r0
 8014198:	3901      	subs	r1, #1
 801419a:	6913      	ldr	r3, [r2, #16]
 801419c:	1149      	asrs	r1, r1, #5
 801419e:	3101      	adds	r1, #1
 80141a0:	0089      	lsls	r1, r1, #2
 80141a2:	3414      	adds	r4, #20
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	1841      	adds	r1, r0, r1
 80141a8:	18e3      	adds	r3, r4, r3
 80141aa:	42a3      	cmp	r3, r4
 80141ac:	d80d      	bhi.n	80141ca <__copybits+0x38>
 80141ae:	0014      	movs	r4, r2
 80141b0:	3411      	adds	r4, #17
 80141b2:	2500      	movs	r5, #0
 80141b4:	429c      	cmp	r4, r3
 80141b6:	d803      	bhi.n	80141c0 <__copybits+0x2e>
 80141b8:	1a9b      	subs	r3, r3, r2
 80141ba:	3b11      	subs	r3, #17
 80141bc:	089b      	lsrs	r3, r3, #2
 80141be:	009d      	lsls	r5, r3, #2
 80141c0:	2300      	movs	r3, #0
 80141c2:	1940      	adds	r0, r0, r5
 80141c4:	4281      	cmp	r1, r0
 80141c6:	d803      	bhi.n	80141d0 <__copybits+0x3e>
 80141c8:	bd70      	pop	{r4, r5, r6, pc}
 80141ca:	cc40      	ldmia	r4!, {r6}
 80141cc:	c540      	stmia	r5!, {r6}
 80141ce:	e7ec      	b.n	80141aa <__copybits+0x18>
 80141d0:	c008      	stmia	r0!, {r3}
 80141d2:	e7f7      	b.n	80141c4 <__copybits+0x32>

080141d4 <__any_on>:
 80141d4:	0002      	movs	r2, r0
 80141d6:	6900      	ldr	r0, [r0, #16]
 80141d8:	b510      	push	{r4, lr}
 80141da:	3214      	adds	r2, #20
 80141dc:	114b      	asrs	r3, r1, #5
 80141de:	4298      	cmp	r0, r3
 80141e0:	db13      	blt.n	801420a <__any_on+0x36>
 80141e2:	dd0c      	ble.n	80141fe <__any_on+0x2a>
 80141e4:	241f      	movs	r4, #31
 80141e6:	0008      	movs	r0, r1
 80141e8:	4020      	ands	r0, r4
 80141ea:	4221      	tst	r1, r4
 80141ec:	d007      	beq.n	80141fe <__any_on+0x2a>
 80141ee:	0099      	lsls	r1, r3, #2
 80141f0:	588c      	ldr	r4, [r1, r2]
 80141f2:	0021      	movs	r1, r4
 80141f4:	40c1      	lsrs	r1, r0
 80141f6:	4081      	lsls	r1, r0
 80141f8:	2001      	movs	r0, #1
 80141fa:	428c      	cmp	r4, r1
 80141fc:	d104      	bne.n	8014208 <__any_on+0x34>
 80141fe:	009b      	lsls	r3, r3, #2
 8014200:	18d3      	adds	r3, r2, r3
 8014202:	4293      	cmp	r3, r2
 8014204:	d803      	bhi.n	801420e <__any_on+0x3a>
 8014206:	2000      	movs	r0, #0
 8014208:	bd10      	pop	{r4, pc}
 801420a:	0003      	movs	r3, r0
 801420c:	e7f7      	b.n	80141fe <__any_on+0x2a>
 801420e:	3b04      	subs	r3, #4
 8014210:	6819      	ldr	r1, [r3, #0]
 8014212:	2900      	cmp	r1, #0
 8014214:	d0f5      	beq.n	8014202 <__any_on+0x2e>
 8014216:	2001      	movs	r0, #1
 8014218:	e7f6      	b.n	8014208 <__any_on+0x34>

0801421a <__ascii_wctomb>:
 801421a:	0003      	movs	r3, r0
 801421c:	1e08      	subs	r0, r1, #0
 801421e:	d005      	beq.n	801422c <__ascii_wctomb+0x12>
 8014220:	2aff      	cmp	r2, #255	; 0xff
 8014222:	d904      	bls.n	801422e <__ascii_wctomb+0x14>
 8014224:	228a      	movs	r2, #138	; 0x8a
 8014226:	2001      	movs	r0, #1
 8014228:	601a      	str	r2, [r3, #0]
 801422a:	4240      	negs	r0, r0
 801422c:	4770      	bx	lr
 801422e:	2001      	movs	r0, #1
 8014230:	700a      	strb	r2, [r1, #0]
 8014232:	e7fb      	b.n	801422c <__ascii_wctomb+0x12>

08014234 <__ssputs_r>:
 8014234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014236:	b085      	sub	sp, #20
 8014238:	9301      	str	r3, [sp, #4]
 801423a:	9203      	str	r2, [sp, #12]
 801423c:	688e      	ldr	r6, [r1, #8]
 801423e:	9a01      	ldr	r2, [sp, #4]
 8014240:	0007      	movs	r7, r0
 8014242:	000c      	movs	r4, r1
 8014244:	680b      	ldr	r3, [r1, #0]
 8014246:	4296      	cmp	r6, r2
 8014248:	d831      	bhi.n	80142ae <__ssputs_r+0x7a>
 801424a:	898a      	ldrh	r2, [r1, #12]
 801424c:	2190      	movs	r1, #144	; 0x90
 801424e:	00c9      	lsls	r1, r1, #3
 8014250:	420a      	tst	r2, r1
 8014252:	d029      	beq.n	80142a8 <__ssputs_r+0x74>
 8014254:	2003      	movs	r0, #3
 8014256:	6921      	ldr	r1, [r4, #16]
 8014258:	1a5b      	subs	r3, r3, r1
 801425a:	9302      	str	r3, [sp, #8]
 801425c:	6963      	ldr	r3, [r4, #20]
 801425e:	4343      	muls	r3, r0
 8014260:	0fdd      	lsrs	r5, r3, #31
 8014262:	18ed      	adds	r5, r5, r3
 8014264:	9b01      	ldr	r3, [sp, #4]
 8014266:	9802      	ldr	r0, [sp, #8]
 8014268:	3301      	adds	r3, #1
 801426a:	181b      	adds	r3, r3, r0
 801426c:	106d      	asrs	r5, r5, #1
 801426e:	42ab      	cmp	r3, r5
 8014270:	d900      	bls.n	8014274 <__ssputs_r+0x40>
 8014272:	001d      	movs	r5, r3
 8014274:	0552      	lsls	r2, r2, #21
 8014276:	d529      	bpl.n	80142cc <__ssputs_r+0x98>
 8014278:	0029      	movs	r1, r5
 801427a:	0038      	movs	r0, r7
 801427c:	f7fb ffac 	bl	80101d8 <_malloc_r>
 8014280:	1e06      	subs	r6, r0, #0
 8014282:	d02d      	beq.n	80142e0 <__ssputs_r+0xac>
 8014284:	9a02      	ldr	r2, [sp, #8]
 8014286:	6921      	ldr	r1, [r4, #16]
 8014288:	f7fe f884 	bl	8012394 <memcpy>
 801428c:	89a2      	ldrh	r2, [r4, #12]
 801428e:	4b19      	ldr	r3, [pc, #100]	; (80142f4 <__ssputs_r+0xc0>)
 8014290:	401a      	ands	r2, r3
 8014292:	2380      	movs	r3, #128	; 0x80
 8014294:	4313      	orrs	r3, r2
 8014296:	81a3      	strh	r3, [r4, #12]
 8014298:	9b02      	ldr	r3, [sp, #8]
 801429a:	6126      	str	r6, [r4, #16]
 801429c:	18f6      	adds	r6, r6, r3
 801429e:	6026      	str	r6, [r4, #0]
 80142a0:	6165      	str	r5, [r4, #20]
 80142a2:	9e01      	ldr	r6, [sp, #4]
 80142a4:	1aed      	subs	r5, r5, r3
 80142a6:	60a5      	str	r5, [r4, #8]
 80142a8:	9b01      	ldr	r3, [sp, #4]
 80142aa:	429e      	cmp	r6, r3
 80142ac:	d900      	bls.n	80142b0 <__ssputs_r+0x7c>
 80142ae:	9e01      	ldr	r6, [sp, #4]
 80142b0:	0032      	movs	r2, r6
 80142b2:	9903      	ldr	r1, [sp, #12]
 80142b4:	6820      	ldr	r0, [r4, #0]
 80142b6:	f000 f9e5 	bl	8014684 <memmove>
 80142ba:	2000      	movs	r0, #0
 80142bc:	68a3      	ldr	r3, [r4, #8]
 80142be:	1b9b      	subs	r3, r3, r6
 80142c0:	60a3      	str	r3, [r4, #8]
 80142c2:	6823      	ldr	r3, [r4, #0]
 80142c4:	199b      	adds	r3, r3, r6
 80142c6:	6023      	str	r3, [r4, #0]
 80142c8:	b005      	add	sp, #20
 80142ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142cc:	002a      	movs	r2, r5
 80142ce:	0038      	movs	r0, r7
 80142d0:	f000 fa1f 	bl	8014712 <_realloc_r>
 80142d4:	1e06      	subs	r6, r0, #0
 80142d6:	d1df      	bne.n	8014298 <__ssputs_r+0x64>
 80142d8:	0038      	movs	r0, r7
 80142da:	6921      	ldr	r1, [r4, #16]
 80142dc:	f7fe ff2a 	bl	8013134 <_free_r>
 80142e0:	230c      	movs	r3, #12
 80142e2:	2001      	movs	r0, #1
 80142e4:	603b      	str	r3, [r7, #0]
 80142e6:	89a2      	ldrh	r2, [r4, #12]
 80142e8:	3334      	adds	r3, #52	; 0x34
 80142ea:	4313      	orrs	r3, r2
 80142ec:	81a3      	strh	r3, [r4, #12]
 80142ee:	4240      	negs	r0, r0
 80142f0:	e7ea      	b.n	80142c8 <__ssputs_r+0x94>
 80142f2:	46c0      	nop			; (mov r8, r8)
 80142f4:	fffffb7f 	.word	0xfffffb7f

080142f8 <_svfiprintf_r>:
 80142f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142fa:	b0a1      	sub	sp, #132	; 0x84
 80142fc:	9003      	str	r0, [sp, #12]
 80142fe:	001d      	movs	r5, r3
 8014300:	898b      	ldrh	r3, [r1, #12]
 8014302:	000f      	movs	r7, r1
 8014304:	0016      	movs	r6, r2
 8014306:	061b      	lsls	r3, r3, #24
 8014308:	d511      	bpl.n	801432e <_svfiprintf_r+0x36>
 801430a:	690b      	ldr	r3, [r1, #16]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d10e      	bne.n	801432e <_svfiprintf_r+0x36>
 8014310:	2140      	movs	r1, #64	; 0x40
 8014312:	f7fb ff61 	bl	80101d8 <_malloc_r>
 8014316:	6038      	str	r0, [r7, #0]
 8014318:	6138      	str	r0, [r7, #16]
 801431a:	2800      	cmp	r0, #0
 801431c:	d105      	bne.n	801432a <_svfiprintf_r+0x32>
 801431e:	230c      	movs	r3, #12
 8014320:	9a03      	ldr	r2, [sp, #12]
 8014322:	3801      	subs	r0, #1
 8014324:	6013      	str	r3, [r2, #0]
 8014326:	b021      	add	sp, #132	; 0x84
 8014328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801432a:	2340      	movs	r3, #64	; 0x40
 801432c:	617b      	str	r3, [r7, #20]
 801432e:	2300      	movs	r3, #0
 8014330:	ac08      	add	r4, sp, #32
 8014332:	6163      	str	r3, [r4, #20]
 8014334:	3320      	adds	r3, #32
 8014336:	7663      	strb	r3, [r4, #25]
 8014338:	3310      	adds	r3, #16
 801433a:	76a3      	strb	r3, [r4, #26]
 801433c:	9507      	str	r5, [sp, #28]
 801433e:	0035      	movs	r5, r6
 8014340:	782b      	ldrb	r3, [r5, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d001      	beq.n	801434a <_svfiprintf_r+0x52>
 8014346:	2b25      	cmp	r3, #37	; 0x25
 8014348:	d148      	bne.n	80143dc <_svfiprintf_r+0xe4>
 801434a:	1bab      	subs	r3, r5, r6
 801434c:	9305      	str	r3, [sp, #20]
 801434e:	42b5      	cmp	r5, r6
 8014350:	d00b      	beq.n	801436a <_svfiprintf_r+0x72>
 8014352:	0032      	movs	r2, r6
 8014354:	0039      	movs	r1, r7
 8014356:	9803      	ldr	r0, [sp, #12]
 8014358:	f7ff ff6c 	bl	8014234 <__ssputs_r>
 801435c:	3001      	adds	r0, #1
 801435e:	d100      	bne.n	8014362 <_svfiprintf_r+0x6a>
 8014360:	e0af      	b.n	80144c2 <_svfiprintf_r+0x1ca>
 8014362:	6963      	ldr	r3, [r4, #20]
 8014364:	9a05      	ldr	r2, [sp, #20]
 8014366:	189b      	adds	r3, r3, r2
 8014368:	6163      	str	r3, [r4, #20]
 801436a:	782b      	ldrb	r3, [r5, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d100      	bne.n	8014372 <_svfiprintf_r+0x7a>
 8014370:	e0a7      	b.n	80144c2 <_svfiprintf_r+0x1ca>
 8014372:	2201      	movs	r2, #1
 8014374:	2300      	movs	r3, #0
 8014376:	4252      	negs	r2, r2
 8014378:	6062      	str	r2, [r4, #4]
 801437a:	a904      	add	r1, sp, #16
 801437c:	3254      	adds	r2, #84	; 0x54
 801437e:	1852      	adds	r2, r2, r1
 8014380:	1c6e      	adds	r6, r5, #1
 8014382:	6023      	str	r3, [r4, #0]
 8014384:	60e3      	str	r3, [r4, #12]
 8014386:	60a3      	str	r3, [r4, #8]
 8014388:	7013      	strb	r3, [r2, #0]
 801438a:	65a3      	str	r3, [r4, #88]	; 0x58
 801438c:	4b55      	ldr	r3, [pc, #340]	; (80144e4 <_svfiprintf_r+0x1ec>)
 801438e:	2205      	movs	r2, #5
 8014390:	0018      	movs	r0, r3
 8014392:	7831      	ldrb	r1, [r6, #0]
 8014394:	9305      	str	r3, [sp, #20]
 8014396:	f7fd fff2 	bl	801237e <memchr>
 801439a:	1c75      	adds	r5, r6, #1
 801439c:	2800      	cmp	r0, #0
 801439e:	d11f      	bne.n	80143e0 <_svfiprintf_r+0xe8>
 80143a0:	6822      	ldr	r2, [r4, #0]
 80143a2:	06d3      	lsls	r3, r2, #27
 80143a4:	d504      	bpl.n	80143b0 <_svfiprintf_r+0xb8>
 80143a6:	2353      	movs	r3, #83	; 0x53
 80143a8:	a904      	add	r1, sp, #16
 80143aa:	185b      	adds	r3, r3, r1
 80143ac:	2120      	movs	r1, #32
 80143ae:	7019      	strb	r1, [r3, #0]
 80143b0:	0713      	lsls	r3, r2, #28
 80143b2:	d504      	bpl.n	80143be <_svfiprintf_r+0xc6>
 80143b4:	2353      	movs	r3, #83	; 0x53
 80143b6:	a904      	add	r1, sp, #16
 80143b8:	185b      	adds	r3, r3, r1
 80143ba:	212b      	movs	r1, #43	; 0x2b
 80143bc:	7019      	strb	r1, [r3, #0]
 80143be:	7833      	ldrb	r3, [r6, #0]
 80143c0:	2b2a      	cmp	r3, #42	; 0x2a
 80143c2:	d016      	beq.n	80143f2 <_svfiprintf_r+0xfa>
 80143c4:	0035      	movs	r5, r6
 80143c6:	2100      	movs	r1, #0
 80143c8:	200a      	movs	r0, #10
 80143ca:	68e3      	ldr	r3, [r4, #12]
 80143cc:	782a      	ldrb	r2, [r5, #0]
 80143ce:	1c6e      	adds	r6, r5, #1
 80143d0:	3a30      	subs	r2, #48	; 0x30
 80143d2:	2a09      	cmp	r2, #9
 80143d4:	d94e      	bls.n	8014474 <_svfiprintf_r+0x17c>
 80143d6:	2900      	cmp	r1, #0
 80143d8:	d111      	bne.n	80143fe <_svfiprintf_r+0x106>
 80143da:	e017      	b.n	801440c <_svfiprintf_r+0x114>
 80143dc:	3501      	adds	r5, #1
 80143de:	e7af      	b.n	8014340 <_svfiprintf_r+0x48>
 80143e0:	9b05      	ldr	r3, [sp, #20]
 80143e2:	6822      	ldr	r2, [r4, #0]
 80143e4:	1ac0      	subs	r0, r0, r3
 80143e6:	2301      	movs	r3, #1
 80143e8:	4083      	lsls	r3, r0
 80143ea:	4313      	orrs	r3, r2
 80143ec:	002e      	movs	r6, r5
 80143ee:	6023      	str	r3, [r4, #0]
 80143f0:	e7cc      	b.n	801438c <_svfiprintf_r+0x94>
 80143f2:	9b07      	ldr	r3, [sp, #28]
 80143f4:	1d19      	adds	r1, r3, #4
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	9107      	str	r1, [sp, #28]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	db01      	blt.n	8014402 <_svfiprintf_r+0x10a>
 80143fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014400:	e004      	b.n	801440c <_svfiprintf_r+0x114>
 8014402:	425b      	negs	r3, r3
 8014404:	60e3      	str	r3, [r4, #12]
 8014406:	2302      	movs	r3, #2
 8014408:	4313      	orrs	r3, r2
 801440a:	6023      	str	r3, [r4, #0]
 801440c:	782b      	ldrb	r3, [r5, #0]
 801440e:	2b2e      	cmp	r3, #46	; 0x2e
 8014410:	d10a      	bne.n	8014428 <_svfiprintf_r+0x130>
 8014412:	786b      	ldrb	r3, [r5, #1]
 8014414:	2b2a      	cmp	r3, #42	; 0x2a
 8014416:	d135      	bne.n	8014484 <_svfiprintf_r+0x18c>
 8014418:	9b07      	ldr	r3, [sp, #28]
 801441a:	3502      	adds	r5, #2
 801441c:	1d1a      	adds	r2, r3, #4
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	9207      	str	r2, [sp, #28]
 8014422:	2b00      	cmp	r3, #0
 8014424:	db2b      	blt.n	801447e <_svfiprintf_r+0x186>
 8014426:	9309      	str	r3, [sp, #36]	; 0x24
 8014428:	4e2f      	ldr	r6, [pc, #188]	; (80144e8 <_svfiprintf_r+0x1f0>)
 801442a:	2203      	movs	r2, #3
 801442c:	0030      	movs	r0, r6
 801442e:	7829      	ldrb	r1, [r5, #0]
 8014430:	f7fd ffa5 	bl	801237e <memchr>
 8014434:	2800      	cmp	r0, #0
 8014436:	d006      	beq.n	8014446 <_svfiprintf_r+0x14e>
 8014438:	2340      	movs	r3, #64	; 0x40
 801443a:	1b80      	subs	r0, r0, r6
 801443c:	4083      	lsls	r3, r0
 801443e:	6822      	ldr	r2, [r4, #0]
 8014440:	3501      	adds	r5, #1
 8014442:	4313      	orrs	r3, r2
 8014444:	6023      	str	r3, [r4, #0]
 8014446:	7829      	ldrb	r1, [r5, #0]
 8014448:	2206      	movs	r2, #6
 801444a:	4828      	ldr	r0, [pc, #160]	; (80144ec <_svfiprintf_r+0x1f4>)
 801444c:	1c6e      	adds	r6, r5, #1
 801444e:	7621      	strb	r1, [r4, #24]
 8014450:	f7fd ff95 	bl	801237e <memchr>
 8014454:	2800      	cmp	r0, #0
 8014456:	d03c      	beq.n	80144d2 <_svfiprintf_r+0x1da>
 8014458:	4b25      	ldr	r3, [pc, #148]	; (80144f0 <_svfiprintf_r+0x1f8>)
 801445a:	2b00      	cmp	r3, #0
 801445c:	d125      	bne.n	80144aa <_svfiprintf_r+0x1b2>
 801445e:	2207      	movs	r2, #7
 8014460:	9b07      	ldr	r3, [sp, #28]
 8014462:	3307      	adds	r3, #7
 8014464:	4393      	bics	r3, r2
 8014466:	3308      	adds	r3, #8
 8014468:	9307      	str	r3, [sp, #28]
 801446a:	6963      	ldr	r3, [r4, #20]
 801446c:	9a04      	ldr	r2, [sp, #16]
 801446e:	189b      	adds	r3, r3, r2
 8014470:	6163      	str	r3, [r4, #20]
 8014472:	e764      	b.n	801433e <_svfiprintf_r+0x46>
 8014474:	4343      	muls	r3, r0
 8014476:	0035      	movs	r5, r6
 8014478:	2101      	movs	r1, #1
 801447a:	189b      	adds	r3, r3, r2
 801447c:	e7a6      	b.n	80143cc <_svfiprintf_r+0xd4>
 801447e:	2301      	movs	r3, #1
 8014480:	425b      	negs	r3, r3
 8014482:	e7d0      	b.n	8014426 <_svfiprintf_r+0x12e>
 8014484:	2300      	movs	r3, #0
 8014486:	200a      	movs	r0, #10
 8014488:	001a      	movs	r2, r3
 801448a:	3501      	adds	r5, #1
 801448c:	6063      	str	r3, [r4, #4]
 801448e:	7829      	ldrb	r1, [r5, #0]
 8014490:	1c6e      	adds	r6, r5, #1
 8014492:	3930      	subs	r1, #48	; 0x30
 8014494:	2909      	cmp	r1, #9
 8014496:	d903      	bls.n	80144a0 <_svfiprintf_r+0x1a8>
 8014498:	2b00      	cmp	r3, #0
 801449a:	d0c5      	beq.n	8014428 <_svfiprintf_r+0x130>
 801449c:	9209      	str	r2, [sp, #36]	; 0x24
 801449e:	e7c3      	b.n	8014428 <_svfiprintf_r+0x130>
 80144a0:	4342      	muls	r2, r0
 80144a2:	0035      	movs	r5, r6
 80144a4:	2301      	movs	r3, #1
 80144a6:	1852      	adds	r2, r2, r1
 80144a8:	e7f1      	b.n	801448e <_svfiprintf_r+0x196>
 80144aa:	aa07      	add	r2, sp, #28
 80144ac:	9200      	str	r2, [sp, #0]
 80144ae:	0021      	movs	r1, r4
 80144b0:	003a      	movs	r2, r7
 80144b2:	4b10      	ldr	r3, [pc, #64]	; (80144f4 <_svfiprintf_r+0x1fc>)
 80144b4:	9803      	ldr	r0, [sp, #12]
 80144b6:	f7fc fe97 	bl	80111e8 <_printf_float>
 80144ba:	9004      	str	r0, [sp, #16]
 80144bc:	9b04      	ldr	r3, [sp, #16]
 80144be:	3301      	adds	r3, #1
 80144c0:	d1d3      	bne.n	801446a <_svfiprintf_r+0x172>
 80144c2:	89bb      	ldrh	r3, [r7, #12]
 80144c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80144c6:	065b      	lsls	r3, r3, #25
 80144c8:	d400      	bmi.n	80144cc <_svfiprintf_r+0x1d4>
 80144ca:	e72c      	b.n	8014326 <_svfiprintf_r+0x2e>
 80144cc:	2001      	movs	r0, #1
 80144ce:	4240      	negs	r0, r0
 80144d0:	e729      	b.n	8014326 <_svfiprintf_r+0x2e>
 80144d2:	aa07      	add	r2, sp, #28
 80144d4:	9200      	str	r2, [sp, #0]
 80144d6:	0021      	movs	r1, r4
 80144d8:	003a      	movs	r2, r7
 80144da:	4b06      	ldr	r3, [pc, #24]	; (80144f4 <_svfiprintf_r+0x1fc>)
 80144dc:	9803      	ldr	r0, [sp, #12]
 80144de:	f7fd f949 	bl	8011774 <_printf_i>
 80144e2:	e7ea      	b.n	80144ba <_svfiprintf_r+0x1c2>
 80144e4:	08017824 	.word	0x08017824
 80144e8:	0801782a 	.word	0x0801782a
 80144ec:	0801782e 	.word	0x0801782e
 80144f0:	080111e9 	.word	0x080111e9
 80144f4:	08014235 	.word	0x08014235

080144f8 <__sflush_r>:
 80144f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80144fa:	898b      	ldrh	r3, [r1, #12]
 80144fc:	0005      	movs	r5, r0
 80144fe:	000c      	movs	r4, r1
 8014500:	071a      	lsls	r2, r3, #28
 8014502:	d45c      	bmi.n	80145be <__sflush_r+0xc6>
 8014504:	684a      	ldr	r2, [r1, #4]
 8014506:	2a00      	cmp	r2, #0
 8014508:	dc04      	bgt.n	8014514 <__sflush_r+0x1c>
 801450a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801450c:	2a00      	cmp	r2, #0
 801450e:	dc01      	bgt.n	8014514 <__sflush_r+0x1c>
 8014510:	2000      	movs	r0, #0
 8014512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014514:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014516:	2f00      	cmp	r7, #0
 8014518:	d0fa      	beq.n	8014510 <__sflush_r+0x18>
 801451a:	2200      	movs	r2, #0
 801451c:	2080      	movs	r0, #128	; 0x80
 801451e:	682e      	ldr	r6, [r5, #0]
 8014520:	602a      	str	r2, [r5, #0]
 8014522:	001a      	movs	r2, r3
 8014524:	0140      	lsls	r0, r0, #5
 8014526:	6a21      	ldr	r1, [r4, #32]
 8014528:	4002      	ands	r2, r0
 801452a:	4203      	tst	r3, r0
 801452c:	d034      	beq.n	8014598 <__sflush_r+0xa0>
 801452e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014530:	89a3      	ldrh	r3, [r4, #12]
 8014532:	075b      	lsls	r3, r3, #29
 8014534:	d506      	bpl.n	8014544 <__sflush_r+0x4c>
 8014536:	6863      	ldr	r3, [r4, #4]
 8014538:	1ac0      	subs	r0, r0, r3
 801453a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801453c:	2b00      	cmp	r3, #0
 801453e:	d001      	beq.n	8014544 <__sflush_r+0x4c>
 8014540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014542:	1ac0      	subs	r0, r0, r3
 8014544:	0002      	movs	r2, r0
 8014546:	2300      	movs	r3, #0
 8014548:	0028      	movs	r0, r5
 801454a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801454c:	6a21      	ldr	r1, [r4, #32]
 801454e:	47b8      	blx	r7
 8014550:	89a2      	ldrh	r2, [r4, #12]
 8014552:	1c43      	adds	r3, r0, #1
 8014554:	d106      	bne.n	8014564 <__sflush_r+0x6c>
 8014556:	6829      	ldr	r1, [r5, #0]
 8014558:	291d      	cmp	r1, #29
 801455a:	d82c      	bhi.n	80145b6 <__sflush_r+0xbe>
 801455c:	4b2a      	ldr	r3, [pc, #168]	; (8014608 <__sflush_r+0x110>)
 801455e:	410b      	asrs	r3, r1
 8014560:	07db      	lsls	r3, r3, #31
 8014562:	d428      	bmi.n	80145b6 <__sflush_r+0xbe>
 8014564:	2300      	movs	r3, #0
 8014566:	6063      	str	r3, [r4, #4]
 8014568:	6923      	ldr	r3, [r4, #16]
 801456a:	6023      	str	r3, [r4, #0]
 801456c:	04d2      	lsls	r2, r2, #19
 801456e:	d505      	bpl.n	801457c <__sflush_r+0x84>
 8014570:	1c43      	adds	r3, r0, #1
 8014572:	d102      	bne.n	801457a <__sflush_r+0x82>
 8014574:	682b      	ldr	r3, [r5, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d100      	bne.n	801457c <__sflush_r+0x84>
 801457a:	6560      	str	r0, [r4, #84]	; 0x54
 801457c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801457e:	602e      	str	r6, [r5, #0]
 8014580:	2900      	cmp	r1, #0
 8014582:	d0c5      	beq.n	8014510 <__sflush_r+0x18>
 8014584:	0023      	movs	r3, r4
 8014586:	3344      	adds	r3, #68	; 0x44
 8014588:	4299      	cmp	r1, r3
 801458a:	d002      	beq.n	8014592 <__sflush_r+0x9a>
 801458c:	0028      	movs	r0, r5
 801458e:	f7fe fdd1 	bl	8013134 <_free_r>
 8014592:	2000      	movs	r0, #0
 8014594:	6360      	str	r0, [r4, #52]	; 0x34
 8014596:	e7bc      	b.n	8014512 <__sflush_r+0x1a>
 8014598:	2301      	movs	r3, #1
 801459a:	0028      	movs	r0, r5
 801459c:	47b8      	blx	r7
 801459e:	1c43      	adds	r3, r0, #1
 80145a0:	d1c6      	bne.n	8014530 <__sflush_r+0x38>
 80145a2:	682b      	ldr	r3, [r5, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d0c3      	beq.n	8014530 <__sflush_r+0x38>
 80145a8:	2b1d      	cmp	r3, #29
 80145aa:	d001      	beq.n	80145b0 <__sflush_r+0xb8>
 80145ac:	2b16      	cmp	r3, #22
 80145ae:	d101      	bne.n	80145b4 <__sflush_r+0xbc>
 80145b0:	602e      	str	r6, [r5, #0]
 80145b2:	e7ad      	b.n	8014510 <__sflush_r+0x18>
 80145b4:	89a2      	ldrh	r2, [r4, #12]
 80145b6:	2340      	movs	r3, #64	; 0x40
 80145b8:	4313      	orrs	r3, r2
 80145ba:	81a3      	strh	r3, [r4, #12]
 80145bc:	e7a9      	b.n	8014512 <__sflush_r+0x1a>
 80145be:	690e      	ldr	r6, [r1, #16]
 80145c0:	2e00      	cmp	r6, #0
 80145c2:	d0a5      	beq.n	8014510 <__sflush_r+0x18>
 80145c4:	680f      	ldr	r7, [r1, #0]
 80145c6:	600e      	str	r6, [r1, #0]
 80145c8:	1bba      	subs	r2, r7, r6
 80145ca:	9201      	str	r2, [sp, #4]
 80145cc:	2200      	movs	r2, #0
 80145ce:	079b      	lsls	r3, r3, #30
 80145d0:	d100      	bne.n	80145d4 <__sflush_r+0xdc>
 80145d2:	694a      	ldr	r2, [r1, #20]
 80145d4:	60a2      	str	r2, [r4, #8]
 80145d6:	9b01      	ldr	r3, [sp, #4]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	dd99      	ble.n	8014510 <__sflush_r+0x18>
 80145dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80145de:	0032      	movs	r2, r6
 80145e0:	001f      	movs	r7, r3
 80145e2:	0028      	movs	r0, r5
 80145e4:	9b01      	ldr	r3, [sp, #4]
 80145e6:	6a21      	ldr	r1, [r4, #32]
 80145e8:	47b8      	blx	r7
 80145ea:	2800      	cmp	r0, #0
 80145ec:	dc06      	bgt.n	80145fc <__sflush_r+0x104>
 80145ee:	2340      	movs	r3, #64	; 0x40
 80145f0:	2001      	movs	r0, #1
 80145f2:	89a2      	ldrh	r2, [r4, #12]
 80145f4:	4240      	negs	r0, r0
 80145f6:	4313      	orrs	r3, r2
 80145f8:	81a3      	strh	r3, [r4, #12]
 80145fa:	e78a      	b.n	8014512 <__sflush_r+0x1a>
 80145fc:	9b01      	ldr	r3, [sp, #4]
 80145fe:	1836      	adds	r6, r6, r0
 8014600:	1a1b      	subs	r3, r3, r0
 8014602:	9301      	str	r3, [sp, #4]
 8014604:	e7e7      	b.n	80145d6 <__sflush_r+0xde>
 8014606:	46c0      	nop			; (mov r8, r8)
 8014608:	dfbffffe 	.word	0xdfbffffe

0801460c <_fflush_r>:
 801460c:	690b      	ldr	r3, [r1, #16]
 801460e:	b570      	push	{r4, r5, r6, lr}
 8014610:	0005      	movs	r5, r0
 8014612:	000c      	movs	r4, r1
 8014614:	2b00      	cmp	r3, #0
 8014616:	d102      	bne.n	801461e <_fflush_r+0x12>
 8014618:	2500      	movs	r5, #0
 801461a:	0028      	movs	r0, r5
 801461c:	bd70      	pop	{r4, r5, r6, pc}
 801461e:	2800      	cmp	r0, #0
 8014620:	d004      	beq.n	801462c <_fflush_r+0x20>
 8014622:	6a03      	ldr	r3, [r0, #32]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d101      	bne.n	801462c <_fflush_r+0x20>
 8014628:	f7fd fc4c 	bl	8011ec4 <__sinit>
 801462c:	220c      	movs	r2, #12
 801462e:	5ea3      	ldrsh	r3, [r4, r2]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d0f1      	beq.n	8014618 <_fflush_r+0xc>
 8014634:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014636:	07d2      	lsls	r2, r2, #31
 8014638:	d404      	bmi.n	8014644 <_fflush_r+0x38>
 801463a:	059b      	lsls	r3, r3, #22
 801463c:	d402      	bmi.n	8014644 <_fflush_r+0x38>
 801463e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014640:	f7fd fe93 	bl	801236a <__retarget_lock_acquire_recursive>
 8014644:	0028      	movs	r0, r5
 8014646:	0021      	movs	r1, r4
 8014648:	f7ff ff56 	bl	80144f8 <__sflush_r>
 801464c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801464e:	0005      	movs	r5, r0
 8014650:	07db      	lsls	r3, r3, #31
 8014652:	d4e2      	bmi.n	801461a <_fflush_r+0xe>
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	059b      	lsls	r3, r3, #22
 8014658:	d4df      	bmi.n	801461a <_fflush_r+0xe>
 801465a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801465c:	f7fd fe86 	bl	801236c <__retarget_lock_release_recursive>
 8014660:	e7db      	b.n	801461a <_fflush_r+0xe>
	...

08014664 <fiprintf>:
 8014664:	b40e      	push	{r1, r2, r3}
 8014666:	b517      	push	{r0, r1, r2, r4, lr}
 8014668:	4c05      	ldr	r4, [pc, #20]	; (8014680 <fiprintf+0x1c>)
 801466a:	ab05      	add	r3, sp, #20
 801466c:	cb04      	ldmia	r3!, {r2}
 801466e:	0001      	movs	r1, r0
 8014670:	6820      	ldr	r0, [r4, #0]
 8014672:	9301      	str	r3, [sp, #4]
 8014674:	f000 f8a4 	bl	80147c0 <_vfiprintf_r>
 8014678:	bc1e      	pop	{r1, r2, r3, r4}
 801467a:	bc08      	pop	{r3}
 801467c:	b003      	add	sp, #12
 801467e:	4718      	bx	r3
 8014680:	200002b4 	.word	0x200002b4

08014684 <memmove>:
 8014684:	b510      	push	{r4, lr}
 8014686:	4288      	cmp	r0, r1
 8014688:	d902      	bls.n	8014690 <memmove+0xc>
 801468a:	188b      	adds	r3, r1, r2
 801468c:	4298      	cmp	r0, r3
 801468e:	d303      	bcc.n	8014698 <memmove+0x14>
 8014690:	2300      	movs	r3, #0
 8014692:	e007      	b.n	80146a4 <memmove+0x20>
 8014694:	5c8b      	ldrb	r3, [r1, r2]
 8014696:	5483      	strb	r3, [r0, r2]
 8014698:	3a01      	subs	r2, #1
 801469a:	d2fb      	bcs.n	8014694 <memmove+0x10>
 801469c:	bd10      	pop	{r4, pc}
 801469e:	5ccc      	ldrb	r4, [r1, r3]
 80146a0:	54c4      	strb	r4, [r0, r3]
 80146a2:	3301      	adds	r3, #1
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d1fa      	bne.n	801469e <memmove+0x1a>
 80146a8:	e7f8      	b.n	801469c <memmove+0x18>

080146aa <abort>:
 80146aa:	2006      	movs	r0, #6
 80146ac:	b510      	push	{r4, lr}
 80146ae:	f000 fa73 	bl	8014b98 <raise>
 80146b2:	2001      	movs	r0, #1
 80146b4:	f7f3 fa5e 	bl	8007b74 <_exit>

080146b8 <_calloc_r>:
 80146b8:	b570      	push	{r4, r5, r6, lr}
 80146ba:	0c0b      	lsrs	r3, r1, #16
 80146bc:	0c15      	lsrs	r5, r2, #16
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d11e      	bne.n	8014700 <_calloc_r+0x48>
 80146c2:	2d00      	cmp	r5, #0
 80146c4:	d10c      	bne.n	80146e0 <_calloc_r+0x28>
 80146c6:	b289      	uxth	r1, r1
 80146c8:	b294      	uxth	r4, r2
 80146ca:	434c      	muls	r4, r1
 80146cc:	0021      	movs	r1, r4
 80146ce:	f7fb fd83 	bl	80101d8 <_malloc_r>
 80146d2:	1e05      	subs	r5, r0, #0
 80146d4:	d01b      	beq.n	801470e <_calloc_r+0x56>
 80146d6:	0022      	movs	r2, r4
 80146d8:	2100      	movs	r1, #0
 80146da:	f7fd fc93 	bl	8012004 <memset>
 80146de:	e016      	b.n	801470e <_calloc_r+0x56>
 80146e0:	1c2b      	adds	r3, r5, #0
 80146e2:	1c0c      	adds	r4, r1, #0
 80146e4:	b289      	uxth	r1, r1
 80146e6:	b292      	uxth	r2, r2
 80146e8:	434a      	muls	r2, r1
 80146ea:	b2a1      	uxth	r1, r4
 80146ec:	b29c      	uxth	r4, r3
 80146ee:	434c      	muls	r4, r1
 80146f0:	0c13      	lsrs	r3, r2, #16
 80146f2:	18e4      	adds	r4, r4, r3
 80146f4:	0c23      	lsrs	r3, r4, #16
 80146f6:	d107      	bne.n	8014708 <_calloc_r+0x50>
 80146f8:	0424      	lsls	r4, r4, #16
 80146fa:	b292      	uxth	r2, r2
 80146fc:	4314      	orrs	r4, r2
 80146fe:	e7e5      	b.n	80146cc <_calloc_r+0x14>
 8014700:	2d00      	cmp	r5, #0
 8014702:	d101      	bne.n	8014708 <_calloc_r+0x50>
 8014704:	1c14      	adds	r4, r2, #0
 8014706:	e7ed      	b.n	80146e4 <_calloc_r+0x2c>
 8014708:	230c      	movs	r3, #12
 801470a:	2500      	movs	r5, #0
 801470c:	6003      	str	r3, [r0, #0]
 801470e:	0028      	movs	r0, r5
 8014710:	bd70      	pop	{r4, r5, r6, pc}

08014712 <_realloc_r>:
 8014712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014714:	0007      	movs	r7, r0
 8014716:	000e      	movs	r6, r1
 8014718:	0014      	movs	r4, r2
 801471a:	2900      	cmp	r1, #0
 801471c:	d105      	bne.n	801472a <_realloc_r+0x18>
 801471e:	0011      	movs	r1, r2
 8014720:	f7fb fd5a 	bl	80101d8 <_malloc_r>
 8014724:	0005      	movs	r5, r0
 8014726:	0028      	movs	r0, r5
 8014728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801472a:	2a00      	cmp	r2, #0
 801472c:	d103      	bne.n	8014736 <_realloc_r+0x24>
 801472e:	f7fe fd01 	bl	8013134 <_free_r>
 8014732:	0025      	movs	r5, r4
 8014734:	e7f7      	b.n	8014726 <_realloc_r+0x14>
 8014736:	f000 fa4f 	bl	8014bd8 <_malloc_usable_size_r>
 801473a:	9001      	str	r0, [sp, #4]
 801473c:	4284      	cmp	r4, r0
 801473e:	d803      	bhi.n	8014748 <_realloc_r+0x36>
 8014740:	0035      	movs	r5, r6
 8014742:	0843      	lsrs	r3, r0, #1
 8014744:	42a3      	cmp	r3, r4
 8014746:	d3ee      	bcc.n	8014726 <_realloc_r+0x14>
 8014748:	0021      	movs	r1, r4
 801474a:	0038      	movs	r0, r7
 801474c:	f7fb fd44 	bl	80101d8 <_malloc_r>
 8014750:	1e05      	subs	r5, r0, #0
 8014752:	d0e8      	beq.n	8014726 <_realloc_r+0x14>
 8014754:	9b01      	ldr	r3, [sp, #4]
 8014756:	0022      	movs	r2, r4
 8014758:	429c      	cmp	r4, r3
 801475a:	d900      	bls.n	801475e <_realloc_r+0x4c>
 801475c:	001a      	movs	r2, r3
 801475e:	0031      	movs	r1, r6
 8014760:	0028      	movs	r0, r5
 8014762:	f7fd fe17 	bl	8012394 <memcpy>
 8014766:	0031      	movs	r1, r6
 8014768:	0038      	movs	r0, r7
 801476a:	f7fe fce3 	bl	8013134 <_free_r>
 801476e:	e7da      	b.n	8014726 <_realloc_r+0x14>

08014770 <__sfputc_r>:
 8014770:	6893      	ldr	r3, [r2, #8]
 8014772:	b510      	push	{r4, lr}
 8014774:	3b01      	subs	r3, #1
 8014776:	6093      	str	r3, [r2, #8]
 8014778:	2b00      	cmp	r3, #0
 801477a:	da04      	bge.n	8014786 <__sfputc_r+0x16>
 801477c:	6994      	ldr	r4, [r2, #24]
 801477e:	42a3      	cmp	r3, r4
 8014780:	db07      	blt.n	8014792 <__sfputc_r+0x22>
 8014782:	290a      	cmp	r1, #10
 8014784:	d005      	beq.n	8014792 <__sfputc_r+0x22>
 8014786:	6813      	ldr	r3, [r2, #0]
 8014788:	1c58      	adds	r0, r3, #1
 801478a:	6010      	str	r0, [r2, #0]
 801478c:	7019      	strb	r1, [r3, #0]
 801478e:	0008      	movs	r0, r1
 8014790:	bd10      	pop	{r4, pc}
 8014792:	f000 f931 	bl	80149f8 <__swbuf_r>
 8014796:	0001      	movs	r1, r0
 8014798:	e7f9      	b.n	801478e <__sfputc_r+0x1e>

0801479a <__sfputs_r>:
 801479a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479c:	0006      	movs	r6, r0
 801479e:	000f      	movs	r7, r1
 80147a0:	0014      	movs	r4, r2
 80147a2:	18d5      	adds	r5, r2, r3
 80147a4:	42ac      	cmp	r4, r5
 80147a6:	d101      	bne.n	80147ac <__sfputs_r+0x12>
 80147a8:	2000      	movs	r0, #0
 80147aa:	e007      	b.n	80147bc <__sfputs_r+0x22>
 80147ac:	7821      	ldrb	r1, [r4, #0]
 80147ae:	003a      	movs	r2, r7
 80147b0:	0030      	movs	r0, r6
 80147b2:	f7ff ffdd 	bl	8014770 <__sfputc_r>
 80147b6:	3401      	adds	r4, #1
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	d1f3      	bne.n	80147a4 <__sfputs_r+0xa>
 80147bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147c0 <_vfiprintf_r>:
 80147c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147c2:	b0a1      	sub	sp, #132	; 0x84
 80147c4:	000f      	movs	r7, r1
 80147c6:	0015      	movs	r5, r2
 80147c8:	001e      	movs	r6, r3
 80147ca:	9003      	str	r0, [sp, #12]
 80147cc:	2800      	cmp	r0, #0
 80147ce:	d004      	beq.n	80147da <_vfiprintf_r+0x1a>
 80147d0:	6a03      	ldr	r3, [r0, #32]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d101      	bne.n	80147da <_vfiprintf_r+0x1a>
 80147d6:	f7fd fb75 	bl	8011ec4 <__sinit>
 80147da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147dc:	07db      	lsls	r3, r3, #31
 80147de:	d405      	bmi.n	80147ec <_vfiprintf_r+0x2c>
 80147e0:	89bb      	ldrh	r3, [r7, #12]
 80147e2:	059b      	lsls	r3, r3, #22
 80147e4:	d402      	bmi.n	80147ec <_vfiprintf_r+0x2c>
 80147e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80147e8:	f7fd fdbf 	bl	801236a <__retarget_lock_acquire_recursive>
 80147ec:	89bb      	ldrh	r3, [r7, #12]
 80147ee:	071b      	lsls	r3, r3, #28
 80147f0:	d502      	bpl.n	80147f8 <_vfiprintf_r+0x38>
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d113      	bne.n	8014820 <_vfiprintf_r+0x60>
 80147f8:	0039      	movs	r1, r7
 80147fa:	9803      	ldr	r0, [sp, #12]
 80147fc:	f000 f93e 	bl	8014a7c <__swsetup_r>
 8014800:	2800      	cmp	r0, #0
 8014802:	d00d      	beq.n	8014820 <_vfiprintf_r+0x60>
 8014804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014806:	07db      	lsls	r3, r3, #31
 8014808:	d503      	bpl.n	8014812 <_vfiprintf_r+0x52>
 801480a:	2001      	movs	r0, #1
 801480c:	4240      	negs	r0, r0
 801480e:	b021      	add	sp, #132	; 0x84
 8014810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014812:	89bb      	ldrh	r3, [r7, #12]
 8014814:	059b      	lsls	r3, r3, #22
 8014816:	d4f8      	bmi.n	801480a <_vfiprintf_r+0x4a>
 8014818:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801481a:	f7fd fda7 	bl	801236c <__retarget_lock_release_recursive>
 801481e:	e7f4      	b.n	801480a <_vfiprintf_r+0x4a>
 8014820:	2300      	movs	r3, #0
 8014822:	ac08      	add	r4, sp, #32
 8014824:	6163      	str	r3, [r4, #20]
 8014826:	3320      	adds	r3, #32
 8014828:	7663      	strb	r3, [r4, #25]
 801482a:	3310      	adds	r3, #16
 801482c:	76a3      	strb	r3, [r4, #26]
 801482e:	9607      	str	r6, [sp, #28]
 8014830:	002e      	movs	r6, r5
 8014832:	7833      	ldrb	r3, [r6, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d001      	beq.n	801483c <_vfiprintf_r+0x7c>
 8014838:	2b25      	cmp	r3, #37	; 0x25
 801483a:	d148      	bne.n	80148ce <_vfiprintf_r+0x10e>
 801483c:	1b73      	subs	r3, r6, r5
 801483e:	9305      	str	r3, [sp, #20]
 8014840:	42ae      	cmp	r6, r5
 8014842:	d00b      	beq.n	801485c <_vfiprintf_r+0x9c>
 8014844:	002a      	movs	r2, r5
 8014846:	0039      	movs	r1, r7
 8014848:	9803      	ldr	r0, [sp, #12]
 801484a:	f7ff ffa6 	bl	801479a <__sfputs_r>
 801484e:	3001      	adds	r0, #1
 8014850:	d100      	bne.n	8014854 <_vfiprintf_r+0x94>
 8014852:	e0af      	b.n	80149b4 <_vfiprintf_r+0x1f4>
 8014854:	6963      	ldr	r3, [r4, #20]
 8014856:	9a05      	ldr	r2, [sp, #20]
 8014858:	189b      	adds	r3, r3, r2
 801485a:	6163      	str	r3, [r4, #20]
 801485c:	7833      	ldrb	r3, [r6, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d100      	bne.n	8014864 <_vfiprintf_r+0xa4>
 8014862:	e0a7      	b.n	80149b4 <_vfiprintf_r+0x1f4>
 8014864:	2201      	movs	r2, #1
 8014866:	2300      	movs	r3, #0
 8014868:	4252      	negs	r2, r2
 801486a:	6062      	str	r2, [r4, #4]
 801486c:	a904      	add	r1, sp, #16
 801486e:	3254      	adds	r2, #84	; 0x54
 8014870:	1852      	adds	r2, r2, r1
 8014872:	1c75      	adds	r5, r6, #1
 8014874:	6023      	str	r3, [r4, #0]
 8014876:	60e3      	str	r3, [r4, #12]
 8014878:	60a3      	str	r3, [r4, #8]
 801487a:	7013      	strb	r3, [r2, #0]
 801487c:	65a3      	str	r3, [r4, #88]	; 0x58
 801487e:	4b59      	ldr	r3, [pc, #356]	; (80149e4 <_vfiprintf_r+0x224>)
 8014880:	2205      	movs	r2, #5
 8014882:	0018      	movs	r0, r3
 8014884:	7829      	ldrb	r1, [r5, #0]
 8014886:	9305      	str	r3, [sp, #20]
 8014888:	f7fd fd79 	bl	801237e <memchr>
 801488c:	1c6e      	adds	r6, r5, #1
 801488e:	2800      	cmp	r0, #0
 8014890:	d11f      	bne.n	80148d2 <_vfiprintf_r+0x112>
 8014892:	6822      	ldr	r2, [r4, #0]
 8014894:	06d3      	lsls	r3, r2, #27
 8014896:	d504      	bpl.n	80148a2 <_vfiprintf_r+0xe2>
 8014898:	2353      	movs	r3, #83	; 0x53
 801489a:	a904      	add	r1, sp, #16
 801489c:	185b      	adds	r3, r3, r1
 801489e:	2120      	movs	r1, #32
 80148a0:	7019      	strb	r1, [r3, #0]
 80148a2:	0713      	lsls	r3, r2, #28
 80148a4:	d504      	bpl.n	80148b0 <_vfiprintf_r+0xf0>
 80148a6:	2353      	movs	r3, #83	; 0x53
 80148a8:	a904      	add	r1, sp, #16
 80148aa:	185b      	adds	r3, r3, r1
 80148ac:	212b      	movs	r1, #43	; 0x2b
 80148ae:	7019      	strb	r1, [r3, #0]
 80148b0:	782b      	ldrb	r3, [r5, #0]
 80148b2:	2b2a      	cmp	r3, #42	; 0x2a
 80148b4:	d016      	beq.n	80148e4 <_vfiprintf_r+0x124>
 80148b6:	002e      	movs	r6, r5
 80148b8:	2100      	movs	r1, #0
 80148ba:	200a      	movs	r0, #10
 80148bc:	68e3      	ldr	r3, [r4, #12]
 80148be:	7832      	ldrb	r2, [r6, #0]
 80148c0:	1c75      	adds	r5, r6, #1
 80148c2:	3a30      	subs	r2, #48	; 0x30
 80148c4:	2a09      	cmp	r2, #9
 80148c6:	d94e      	bls.n	8014966 <_vfiprintf_r+0x1a6>
 80148c8:	2900      	cmp	r1, #0
 80148ca:	d111      	bne.n	80148f0 <_vfiprintf_r+0x130>
 80148cc:	e017      	b.n	80148fe <_vfiprintf_r+0x13e>
 80148ce:	3601      	adds	r6, #1
 80148d0:	e7af      	b.n	8014832 <_vfiprintf_r+0x72>
 80148d2:	9b05      	ldr	r3, [sp, #20]
 80148d4:	6822      	ldr	r2, [r4, #0]
 80148d6:	1ac0      	subs	r0, r0, r3
 80148d8:	2301      	movs	r3, #1
 80148da:	4083      	lsls	r3, r0
 80148dc:	4313      	orrs	r3, r2
 80148de:	0035      	movs	r5, r6
 80148e0:	6023      	str	r3, [r4, #0]
 80148e2:	e7cc      	b.n	801487e <_vfiprintf_r+0xbe>
 80148e4:	9b07      	ldr	r3, [sp, #28]
 80148e6:	1d19      	adds	r1, r3, #4
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	9107      	str	r1, [sp, #28]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	db01      	blt.n	80148f4 <_vfiprintf_r+0x134>
 80148f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80148f2:	e004      	b.n	80148fe <_vfiprintf_r+0x13e>
 80148f4:	425b      	negs	r3, r3
 80148f6:	60e3      	str	r3, [r4, #12]
 80148f8:	2302      	movs	r3, #2
 80148fa:	4313      	orrs	r3, r2
 80148fc:	6023      	str	r3, [r4, #0]
 80148fe:	7833      	ldrb	r3, [r6, #0]
 8014900:	2b2e      	cmp	r3, #46	; 0x2e
 8014902:	d10a      	bne.n	801491a <_vfiprintf_r+0x15a>
 8014904:	7873      	ldrb	r3, [r6, #1]
 8014906:	2b2a      	cmp	r3, #42	; 0x2a
 8014908:	d135      	bne.n	8014976 <_vfiprintf_r+0x1b6>
 801490a:	9b07      	ldr	r3, [sp, #28]
 801490c:	3602      	adds	r6, #2
 801490e:	1d1a      	adds	r2, r3, #4
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	9207      	str	r2, [sp, #28]
 8014914:	2b00      	cmp	r3, #0
 8014916:	db2b      	blt.n	8014970 <_vfiprintf_r+0x1b0>
 8014918:	9309      	str	r3, [sp, #36]	; 0x24
 801491a:	4d33      	ldr	r5, [pc, #204]	; (80149e8 <_vfiprintf_r+0x228>)
 801491c:	2203      	movs	r2, #3
 801491e:	0028      	movs	r0, r5
 8014920:	7831      	ldrb	r1, [r6, #0]
 8014922:	f7fd fd2c 	bl	801237e <memchr>
 8014926:	2800      	cmp	r0, #0
 8014928:	d006      	beq.n	8014938 <_vfiprintf_r+0x178>
 801492a:	2340      	movs	r3, #64	; 0x40
 801492c:	1b40      	subs	r0, r0, r5
 801492e:	4083      	lsls	r3, r0
 8014930:	6822      	ldr	r2, [r4, #0]
 8014932:	3601      	adds	r6, #1
 8014934:	4313      	orrs	r3, r2
 8014936:	6023      	str	r3, [r4, #0]
 8014938:	7831      	ldrb	r1, [r6, #0]
 801493a:	2206      	movs	r2, #6
 801493c:	482b      	ldr	r0, [pc, #172]	; (80149ec <_vfiprintf_r+0x22c>)
 801493e:	1c75      	adds	r5, r6, #1
 8014940:	7621      	strb	r1, [r4, #24]
 8014942:	f7fd fd1c 	bl	801237e <memchr>
 8014946:	2800      	cmp	r0, #0
 8014948:	d043      	beq.n	80149d2 <_vfiprintf_r+0x212>
 801494a:	4b29      	ldr	r3, [pc, #164]	; (80149f0 <_vfiprintf_r+0x230>)
 801494c:	2b00      	cmp	r3, #0
 801494e:	d125      	bne.n	801499c <_vfiprintf_r+0x1dc>
 8014950:	2207      	movs	r2, #7
 8014952:	9b07      	ldr	r3, [sp, #28]
 8014954:	3307      	adds	r3, #7
 8014956:	4393      	bics	r3, r2
 8014958:	3308      	adds	r3, #8
 801495a:	9307      	str	r3, [sp, #28]
 801495c:	6963      	ldr	r3, [r4, #20]
 801495e:	9a04      	ldr	r2, [sp, #16]
 8014960:	189b      	adds	r3, r3, r2
 8014962:	6163      	str	r3, [r4, #20]
 8014964:	e764      	b.n	8014830 <_vfiprintf_r+0x70>
 8014966:	4343      	muls	r3, r0
 8014968:	002e      	movs	r6, r5
 801496a:	2101      	movs	r1, #1
 801496c:	189b      	adds	r3, r3, r2
 801496e:	e7a6      	b.n	80148be <_vfiprintf_r+0xfe>
 8014970:	2301      	movs	r3, #1
 8014972:	425b      	negs	r3, r3
 8014974:	e7d0      	b.n	8014918 <_vfiprintf_r+0x158>
 8014976:	2300      	movs	r3, #0
 8014978:	200a      	movs	r0, #10
 801497a:	001a      	movs	r2, r3
 801497c:	3601      	adds	r6, #1
 801497e:	6063      	str	r3, [r4, #4]
 8014980:	7831      	ldrb	r1, [r6, #0]
 8014982:	1c75      	adds	r5, r6, #1
 8014984:	3930      	subs	r1, #48	; 0x30
 8014986:	2909      	cmp	r1, #9
 8014988:	d903      	bls.n	8014992 <_vfiprintf_r+0x1d2>
 801498a:	2b00      	cmp	r3, #0
 801498c:	d0c5      	beq.n	801491a <_vfiprintf_r+0x15a>
 801498e:	9209      	str	r2, [sp, #36]	; 0x24
 8014990:	e7c3      	b.n	801491a <_vfiprintf_r+0x15a>
 8014992:	4342      	muls	r2, r0
 8014994:	002e      	movs	r6, r5
 8014996:	2301      	movs	r3, #1
 8014998:	1852      	adds	r2, r2, r1
 801499a:	e7f1      	b.n	8014980 <_vfiprintf_r+0x1c0>
 801499c:	aa07      	add	r2, sp, #28
 801499e:	9200      	str	r2, [sp, #0]
 80149a0:	0021      	movs	r1, r4
 80149a2:	003a      	movs	r2, r7
 80149a4:	4b13      	ldr	r3, [pc, #76]	; (80149f4 <_vfiprintf_r+0x234>)
 80149a6:	9803      	ldr	r0, [sp, #12]
 80149a8:	f7fc fc1e 	bl	80111e8 <_printf_float>
 80149ac:	9004      	str	r0, [sp, #16]
 80149ae:	9b04      	ldr	r3, [sp, #16]
 80149b0:	3301      	adds	r3, #1
 80149b2:	d1d3      	bne.n	801495c <_vfiprintf_r+0x19c>
 80149b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149b6:	07db      	lsls	r3, r3, #31
 80149b8:	d405      	bmi.n	80149c6 <_vfiprintf_r+0x206>
 80149ba:	89bb      	ldrh	r3, [r7, #12]
 80149bc:	059b      	lsls	r3, r3, #22
 80149be:	d402      	bmi.n	80149c6 <_vfiprintf_r+0x206>
 80149c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80149c2:	f7fd fcd3 	bl	801236c <__retarget_lock_release_recursive>
 80149c6:	89bb      	ldrh	r3, [r7, #12]
 80149c8:	065b      	lsls	r3, r3, #25
 80149ca:	d500      	bpl.n	80149ce <_vfiprintf_r+0x20e>
 80149cc:	e71d      	b.n	801480a <_vfiprintf_r+0x4a>
 80149ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80149d0:	e71d      	b.n	801480e <_vfiprintf_r+0x4e>
 80149d2:	aa07      	add	r2, sp, #28
 80149d4:	9200      	str	r2, [sp, #0]
 80149d6:	0021      	movs	r1, r4
 80149d8:	003a      	movs	r2, r7
 80149da:	4b06      	ldr	r3, [pc, #24]	; (80149f4 <_vfiprintf_r+0x234>)
 80149dc:	9803      	ldr	r0, [sp, #12]
 80149de:	f7fc fec9 	bl	8011774 <_printf_i>
 80149e2:	e7e3      	b.n	80149ac <_vfiprintf_r+0x1ec>
 80149e4:	08017824 	.word	0x08017824
 80149e8:	0801782a 	.word	0x0801782a
 80149ec:	0801782e 	.word	0x0801782e
 80149f0:	080111e9 	.word	0x080111e9
 80149f4:	0801479b 	.word	0x0801479b

080149f8 <__swbuf_r>:
 80149f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149fa:	0006      	movs	r6, r0
 80149fc:	000d      	movs	r5, r1
 80149fe:	0014      	movs	r4, r2
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d004      	beq.n	8014a0e <__swbuf_r+0x16>
 8014a04:	6a03      	ldr	r3, [r0, #32]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d101      	bne.n	8014a0e <__swbuf_r+0x16>
 8014a0a:	f7fd fa5b 	bl	8011ec4 <__sinit>
 8014a0e:	69a3      	ldr	r3, [r4, #24]
 8014a10:	60a3      	str	r3, [r4, #8]
 8014a12:	89a3      	ldrh	r3, [r4, #12]
 8014a14:	071b      	lsls	r3, r3, #28
 8014a16:	d528      	bpl.n	8014a6a <__swbuf_r+0x72>
 8014a18:	6923      	ldr	r3, [r4, #16]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d025      	beq.n	8014a6a <__swbuf_r+0x72>
 8014a1e:	6923      	ldr	r3, [r4, #16]
 8014a20:	6820      	ldr	r0, [r4, #0]
 8014a22:	b2ef      	uxtb	r7, r5
 8014a24:	1ac0      	subs	r0, r0, r3
 8014a26:	6963      	ldr	r3, [r4, #20]
 8014a28:	b2ed      	uxtb	r5, r5
 8014a2a:	4283      	cmp	r3, r0
 8014a2c:	dc05      	bgt.n	8014a3a <__swbuf_r+0x42>
 8014a2e:	0021      	movs	r1, r4
 8014a30:	0030      	movs	r0, r6
 8014a32:	f7ff fdeb 	bl	801460c <_fflush_r>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d11d      	bne.n	8014a76 <__swbuf_r+0x7e>
 8014a3a:	68a3      	ldr	r3, [r4, #8]
 8014a3c:	3001      	adds	r0, #1
 8014a3e:	3b01      	subs	r3, #1
 8014a40:	60a3      	str	r3, [r4, #8]
 8014a42:	6823      	ldr	r3, [r4, #0]
 8014a44:	1c5a      	adds	r2, r3, #1
 8014a46:	6022      	str	r2, [r4, #0]
 8014a48:	701f      	strb	r7, [r3, #0]
 8014a4a:	6963      	ldr	r3, [r4, #20]
 8014a4c:	4283      	cmp	r3, r0
 8014a4e:	d004      	beq.n	8014a5a <__swbuf_r+0x62>
 8014a50:	89a3      	ldrh	r3, [r4, #12]
 8014a52:	07db      	lsls	r3, r3, #31
 8014a54:	d507      	bpl.n	8014a66 <__swbuf_r+0x6e>
 8014a56:	2d0a      	cmp	r5, #10
 8014a58:	d105      	bne.n	8014a66 <__swbuf_r+0x6e>
 8014a5a:	0021      	movs	r1, r4
 8014a5c:	0030      	movs	r0, r6
 8014a5e:	f7ff fdd5 	bl	801460c <_fflush_r>
 8014a62:	2800      	cmp	r0, #0
 8014a64:	d107      	bne.n	8014a76 <__swbuf_r+0x7e>
 8014a66:	0028      	movs	r0, r5
 8014a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a6a:	0021      	movs	r1, r4
 8014a6c:	0030      	movs	r0, r6
 8014a6e:	f000 f805 	bl	8014a7c <__swsetup_r>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	d0d3      	beq.n	8014a1e <__swbuf_r+0x26>
 8014a76:	2501      	movs	r5, #1
 8014a78:	426d      	negs	r5, r5
 8014a7a:	e7f4      	b.n	8014a66 <__swbuf_r+0x6e>

08014a7c <__swsetup_r>:
 8014a7c:	4b30      	ldr	r3, [pc, #192]	; (8014b40 <__swsetup_r+0xc4>)
 8014a7e:	b570      	push	{r4, r5, r6, lr}
 8014a80:	0005      	movs	r5, r0
 8014a82:	6818      	ldr	r0, [r3, #0]
 8014a84:	000c      	movs	r4, r1
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d004      	beq.n	8014a94 <__swsetup_r+0x18>
 8014a8a:	6a03      	ldr	r3, [r0, #32]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d101      	bne.n	8014a94 <__swsetup_r+0x18>
 8014a90:	f7fd fa18 	bl	8011ec4 <__sinit>
 8014a94:	230c      	movs	r3, #12
 8014a96:	5ee2      	ldrsh	r2, [r4, r3]
 8014a98:	b293      	uxth	r3, r2
 8014a9a:	0711      	lsls	r1, r2, #28
 8014a9c:	d423      	bmi.n	8014ae6 <__swsetup_r+0x6a>
 8014a9e:	06d9      	lsls	r1, r3, #27
 8014aa0:	d407      	bmi.n	8014ab2 <__swsetup_r+0x36>
 8014aa2:	2309      	movs	r3, #9
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	602b      	str	r3, [r5, #0]
 8014aa8:	3337      	adds	r3, #55	; 0x37
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	81a3      	strh	r3, [r4, #12]
 8014aae:	4240      	negs	r0, r0
 8014ab0:	bd70      	pop	{r4, r5, r6, pc}
 8014ab2:	075b      	lsls	r3, r3, #29
 8014ab4:	d513      	bpl.n	8014ade <__swsetup_r+0x62>
 8014ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ab8:	2900      	cmp	r1, #0
 8014aba:	d008      	beq.n	8014ace <__swsetup_r+0x52>
 8014abc:	0023      	movs	r3, r4
 8014abe:	3344      	adds	r3, #68	; 0x44
 8014ac0:	4299      	cmp	r1, r3
 8014ac2:	d002      	beq.n	8014aca <__swsetup_r+0x4e>
 8014ac4:	0028      	movs	r0, r5
 8014ac6:	f7fe fb35 	bl	8013134 <_free_r>
 8014aca:	2300      	movs	r3, #0
 8014acc:	6363      	str	r3, [r4, #52]	; 0x34
 8014ace:	2224      	movs	r2, #36	; 0x24
 8014ad0:	89a3      	ldrh	r3, [r4, #12]
 8014ad2:	4393      	bics	r3, r2
 8014ad4:	81a3      	strh	r3, [r4, #12]
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	6063      	str	r3, [r4, #4]
 8014ada:	6923      	ldr	r3, [r4, #16]
 8014adc:	6023      	str	r3, [r4, #0]
 8014ade:	2308      	movs	r3, #8
 8014ae0:	89a2      	ldrh	r2, [r4, #12]
 8014ae2:	4313      	orrs	r3, r2
 8014ae4:	81a3      	strh	r3, [r4, #12]
 8014ae6:	6923      	ldr	r3, [r4, #16]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d10b      	bne.n	8014b04 <__swsetup_r+0x88>
 8014aec:	21a0      	movs	r1, #160	; 0xa0
 8014aee:	2280      	movs	r2, #128	; 0x80
 8014af0:	89a3      	ldrh	r3, [r4, #12]
 8014af2:	0089      	lsls	r1, r1, #2
 8014af4:	0092      	lsls	r2, r2, #2
 8014af6:	400b      	ands	r3, r1
 8014af8:	4293      	cmp	r3, r2
 8014afa:	d003      	beq.n	8014b04 <__swsetup_r+0x88>
 8014afc:	0021      	movs	r1, r4
 8014afe:	0028      	movs	r0, r5
 8014b00:	f000 f89a 	bl	8014c38 <__smakebuf_r>
 8014b04:	220c      	movs	r2, #12
 8014b06:	5ea3      	ldrsh	r3, [r4, r2]
 8014b08:	2001      	movs	r0, #1
 8014b0a:	001a      	movs	r2, r3
 8014b0c:	b299      	uxth	r1, r3
 8014b0e:	4002      	ands	r2, r0
 8014b10:	4203      	tst	r3, r0
 8014b12:	d00f      	beq.n	8014b34 <__swsetup_r+0xb8>
 8014b14:	2200      	movs	r2, #0
 8014b16:	60a2      	str	r2, [r4, #8]
 8014b18:	6962      	ldr	r2, [r4, #20]
 8014b1a:	4252      	negs	r2, r2
 8014b1c:	61a2      	str	r2, [r4, #24]
 8014b1e:	2000      	movs	r0, #0
 8014b20:	6922      	ldr	r2, [r4, #16]
 8014b22:	4282      	cmp	r2, r0
 8014b24:	d1c4      	bne.n	8014ab0 <__swsetup_r+0x34>
 8014b26:	0609      	lsls	r1, r1, #24
 8014b28:	d5c2      	bpl.n	8014ab0 <__swsetup_r+0x34>
 8014b2a:	2240      	movs	r2, #64	; 0x40
 8014b2c:	4313      	orrs	r3, r2
 8014b2e:	81a3      	strh	r3, [r4, #12]
 8014b30:	3801      	subs	r0, #1
 8014b32:	e7bd      	b.n	8014ab0 <__swsetup_r+0x34>
 8014b34:	0788      	lsls	r0, r1, #30
 8014b36:	d400      	bmi.n	8014b3a <__swsetup_r+0xbe>
 8014b38:	6962      	ldr	r2, [r4, #20]
 8014b3a:	60a2      	str	r2, [r4, #8]
 8014b3c:	e7ef      	b.n	8014b1e <__swsetup_r+0xa2>
 8014b3e:	46c0      	nop			; (mov r8, r8)
 8014b40:	200002b4 	.word	0x200002b4

08014b44 <_raise_r>:
 8014b44:	b570      	push	{r4, r5, r6, lr}
 8014b46:	0004      	movs	r4, r0
 8014b48:	000d      	movs	r5, r1
 8014b4a:	291f      	cmp	r1, #31
 8014b4c:	d904      	bls.n	8014b58 <_raise_r+0x14>
 8014b4e:	2316      	movs	r3, #22
 8014b50:	6003      	str	r3, [r0, #0]
 8014b52:	2001      	movs	r0, #1
 8014b54:	4240      	negs	r0, r0
 8014b56:	bd70      	pop	{r4, r5, r6, pc}
 8014b58:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d004      	beq.n	8014b68 <_raise_r+0x24>
 8014b5e:	008a      	lsls	r2, r1, #2
 8014b60:	189b      	adds	r3, r3, r2
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	2a00      	cmp	r2, #0
 8014b66:	d108      	bne.n	8014b7a <_raise_r+0x36>
 8014b68:	0020      	movs	r0, r4
 8014b6a:	f000 f831 	bl	8014bd0 <_getpid_r>
 8014b6e:	002a      	movs	r2, r5
 8014b70:	0001      	movs	r1, r0
 8014b72:	0020      	movs	r0, r4
 8014b74:	f000 f81a 	bl	8014bac <_kill_r>
 8014b78:	e7ed      	b.n	8014b56 <_raise_r+0x12>
 8014b7a:	2000      	movs	r0, #0
 8014b7c:	2a01      	cmp	r2, #1
 8014b7e:	d0ea      	beq.n	8014b56 <_raise_r+0x12>
 8014b80:	1c51      	adds	r1, r2, #1
 8014b82:	d103      	bne.n	8014b8c <_raise_r+0x48>
 8014b84:	2316      	movs	r3, #22
 8014b86:	3001      	adds	r0, #1
 8014b88:	6023      	str	r3, [r4, #0]
 8014b8a:	e7e4      	b.n	8014b56 <_raise_r+0x12>
 8014b8c:	2400      	movs	r4, #0
 8014b8e:	0028      	movs	r0, r5
 8014b90:	601c      	str	r4, [r3, #0]
 8014b92:	4790      	blx	r2
 8014b94:	0020      	movs	r0, r4
 8014b96:	e7de      	b.n	8014b56 <_raise_r+0x12>

08014b98 <raise>:
 8014b98:	b510      	push	{r4, lr}
 8014b9a:	4b03      	ldr	r3, [pc, #12]	; (8014ba8 <raise+0x10>)
 8014b9c:	0001      	movs	r1, r0
 8014b9e:	6818      	ldr	r0, [r3, #0]
 8014ba0:	f7ff ffd0 	bl	8014b44 <_raise_r>
 8014ba4:	bd10      	pop	{r4, pc}
 8014ba6:	46c0      	nop			; (mov r8, r8)
 8014ba8:	200002b4 	.word	0x200002b4

08014bac <_kill_r>:
 8014bac:	2300      	movs	r3, #0
 8014bae:	b570      	push	{r4, r5, r6, lr}
 8014bb0:	4d06      	ldr	r5, [pc, #24]	; (8014bcc <_kill_r+0x20>)
 8014bb2:	0004      	movs	r4, r0
 8014bb4:	0008      	movs	r0, r1
 8014bb6:	0011      	movs	r1, r2
 8014bb8:	602b      	str	r3, [r5, #0]
 8014bba:	f7f2 ffcb 	bl	8007b54 <_kill>
 8014bbe:	1c43      	adds	r3, r0, #1
 8014bc0:	d103      	bne.n	8014bca <_kill_r+0x1e>
 8014bc2:	682b      	ldr	r3, [r5, #0]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d000      	beq.n	8014bca <_kill_r+0x1e>
 8014bc8:	6023      	str	r3, [r4, #0]
 8014bca:	bd70      	pop	{r4, r5, r6, pc}
 8014bcc:	20005624 	.word	0x20005624

08014bd0 <_getpid_r>:
 8014bd0:	b510      	push	{r4, lr}
 8014bd2:	f7f2 ffb9 	bl	8007b48 <_getpid>
 8014bd6:	bd10      	pop	{r4, pc}

08014bd8 <_malloc_usable_size_r>:
 8014bd8:	1f0b      	subs	r3, r1, #4
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	1f18      	subs	r0, r3, #4
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	da01      	bge.n	8014be6 <_malloc_usable_size_r+0xe>
 8014be2:	580b      	ldr	r3, [r1, r0]
 8014be4:	18c0      	adds	r0, r0, r3
 8014be6:	4770      	bx	lr

08014be8 <__swhatbuf_r>:
 8014be8:	b570      	push	{r4, r5, r6, lr}
 8014bea:	000e      	movs	r6, r1
 8014bec:	001d      	movs	r5, r3
 8014bee:	230e      	movs	r3, #14
 8014bf0:	5ec9      	ldrsh	r1, [r1, r3]
 8014bf2:	0014      	movs	r4, r2
 8014bf4:	b096      	sub	sp, #88	; 0x58
 8014bf6:	2900      	cmp	r1, #0
 8014bf8:	da0c      	bge.n	8014c14 <__swhatbuf_r+0x2c>
 8014bfa:	89b2      	ldrh	r2, [r6, #12]
 8014bfc:	2380      	movs	r3, #128	; 0x80
 8014bfe:	0011      	movs	r1, r2
 8014c00:	4019      	ands	r1, r3
 8014c02:	421a      	tst	r2, r3
 8014c04:	d013      	beq.n	8014c2e <__swhatbuf_r+0x46>
 8014c06:	2100      	movs	r1, #0
 8014c08:	3b40      	subs	r3, #64	; 0x40
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	6029      	str	r1, [r5, #0]
 8014c0e:	6023      	str	r3, [r4, #0]
 8014c10:	b016      	add	sp, #88	; 0x58
 8014c12:	bd70      	pop	{r4, r5, r6, pc}
 8014c14:	466a      	mov	r2, sp
 8014c16:	f000 f84d 	bl	8014cb4 <_fstat_r>
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	dbed      	blt.n	8014bfa <__swhatbuf_r+0x12>
 8014c1e:	23f0      	movs	r3, #240	; 0xf0
 8014c20:	9901      	ldr	r1, [sp, #4]
 8014c22:	021b      	lsls	r3, r3, #8
 8014c24:	4019      	ands	r1, r3
 8014c26:	4b03      	ldr	r3, [pc, #12]	; (8014c34 <__swhatbuf_r+0x4c>)
 8014c28:	18c9      	adds	r1, r1, r3
 8014c2a:	424b      	negs	r3, r1
 8014c2c:	4159      	adcs	r1, r3
 8014c2e:	2380      	movs	r3, #128	; 0x80
 8014c30:	00db      	lsls	r3, r3, #3
 8014c32:	e7ea      	b.n	8014c0a <__swhatbuf_r+0x22>
 8014c34:	ffffe000 	.word	0xffffe000

08014c38 <__smakebuf_r>:
 8014c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c3a:	2602      	movs	r6, #2
 8014c3c:	898b      	ldrh	r3, [r1, #12]
 8014c3e:	0005      	movs	r5, r0
 8014c40:	000c      	movs	r4, r1
 8014c42:	4233      	tst	r3, r6
 8014c44:	d006      	beq.n	8014c54 <__smakebuf_r+0x1c>
 8014c46:	0023      	movs	r3, r4
 8014c48:	3347      	adds	r3, #71	; 0x47
 8014c4a:	6023      	str	r3, [r4, #0]
 8014c4c:	6123      	str	r3, [r4, #16]
 8014c4e:	2301      	movs	r3, #1
 8014c50:	6163      	str	r3, [r4, #20]
 8014c52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014c54:	466a      	mov	r2, sp
 8014c56:	ab01      	add	r3, sp, #4
 8014c58:	f7ff ffc6 	bl	8014be8 <__swhatbuf_r>
 8014c5c:	9900      	ldr	r1, [sp, #0]
 8014c5e:	0007      	movs	r7, r0
 8014c60:	0028      	movs	r0, r5
 8014c62:	f7fb fab9 	bl	80101d8 <_malloc_r>
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d108      	bne.n	8014c7c <__smakebuf_r+0x44>
 8014c6a:	220c      	movs	r2, #12
 8014c6c:	5ea3      	ldrsh	r3, [r4, r2]
 8014c6e:	059a      	lsls	r2, r3, #22
 8014c70:	d4ef      	bmi.n	8014c52 <__smakebuf_r+0x1a>
 8014c72:	2203      	movs	r2, #3
 8014c74:	4393      	bics	r3, r2
 8014c76:	431e      	orrs	r6, r3
 8014c78:	81a6      	strh	r6, [r4, #12]
 8014c7a:	e7e4      	b.n	8014c46 <__smakebuf_r+0xe>
 8014c7c:	2380      	movs	r3, #128	; 0x80
 8014c7e:	89a2      	ldrh	r2, [r4, #12]
 8014c80:	6020      	str	r0, [r4, #0]
 8014c82:	4313      	orrs	r3, r2
 8014c84:	81a3      	strh	r3, [r4, #12]
 8014c86:	9b00      	ldr	r3, [sp, #0]
 8014c88:	6120      	str	r0, [r4, #16]
 8014c8a:	6163      	str	r3, [r4, #20]
 8014c8c:	9b01      	ldr	r3, [sp, #4]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d00c      	beq.n	8014cac <__smakebuf_r+0x74>
 8014c92:	0028      	movs	r0, r5
 8014c94:	230e      	movs	r3, #14
 8014c96:	5ee1      	ldrsh	r1, [r4, r3]
 8014c98:	f000 f81e 	bl	8014cd8 <_isatty_r>
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	d005      	beq.n	8014cac <__smakebuf_r+0x74>
 8014ca0:	2303      	movs	r3, #3
 8014ca2:	89a2      	ldrh	r2, [r4, #12]
 8014ca4:	439a      	bics	r2, r3
 8014ca6:	3b02      	subs	r3, #2
 8014ca8:	4313      	orrs	r3, r2
 8014caa:	81a3      	strh	r3, [r4, #12]
 8014cac:	89a3      	ldrh	r3, [r4, #12]
 8014cae:	433b      	orrs	r3, r7
 8014cb0:	81a3      	strh	r3, [r4, #12]
 8014cb2:	e7ce      	b.n	8014c52 <__smakebuf_r+0x1a>

08014cb4 <_fstat_r>:
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	b570      	push	{r4, r5, r6, lr}
 8014cb8:	4d06      	ldr	r5, [pc, #24]	; (8014cd4 <_fstat_r+0x20>)
 8014cba:	0004      	movs	r4, r0
 8014cbc:	0008      	movs	r0, r1
 8014cbe:	0011      	movs	r1, r2
 8014cc0:	602b      	str	r3, [r5, #0]
 8014cc2:	f7f2 ffa6 	bl	8007c12 <_fstat>
 8014cc6:	1c43      	adds	r3, r0, #1
 8014cc8:	d103      	bne.n	8014cd2 <_fstat_r+0x1e>
 8014cca:	682b      	ldr	r3, [r5, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d000      	beq.n	8014cd2 <_fstat_r+0x1e>
 8014cd0:	6023      	str	r3, [r4, #0]
 8014cd2:	bd70      	pop	{r4, r5, r6, pc}
 8014cd4:	20005624 	.word	0x20005624

08014cd8 <_isatty_r>:
 8014cd8:	2300      	movs	r3, #0
 8014cda:	b570      	push	{r4, r5, r6, lr}
 8014cdc:	4d06      	ldr	r5, [pc, #24]	; (8014cf8 <_isatty_r+0x20>)
 8014cde:	0004      	movs	r4, r0
 8014ce0:	0008      	movs	r0, r1
 8014ce2:	602b      	str	r3, [r5, #0]
 8014ce4:	f7f2 ffa3 	bl	8007c2e <_isatty>
 8014ce8:	1c43      	adds	r3, r0, #1
 8014cea:	d103      	bne.n	8014cf4 <_isatty_r+0x1c>
 8014cec:	682b      	ldr	r3, [r5, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d000      	beq.n	8014cf4 <_isatty_r+0x1c>
 8014cf2:	6023      	str	r3, [r4, #0]
 8014cf4:	bd70      	pop	{r4, r5, r6, pc}
 8014cf6:	46c0      	nop			; (mov r8, r8)
 8014cf8:	20005624 	.word	0x20005624

08014cfc <pow>:
 8014cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cfe:	0014      	movs	r4, r2
 8014d00:	001d      	movs	r5, r3
 8014d02:	9000      	str	r0, [sp, #0]
 8014d04:	9101      	str	r1, [sp, #4]
 8014d06:	f000 f86f 	bl	8014de8 <__ieee754_pow>
 8014d0a:	0022      	movs	r2, r4
 8014d0c:	0006      	movs	r6, r0
 8014d0e:	000f      	movs	r7, r1
 8014d10:	002b      	movs	r3, r5
 8014d12:	0020      	movs	r0, r4
 8014d14:	0029      	movs	r1, r5
 8014d16:	f7ee f921 	bl	8002f5c <__aeabi_dcmpun>
 8014d1a:	2800      	cmp	r0, #0
 8014d1c:	d13f      	bne.n	8014d9e <pow+0xa2>
 8014d1e:	9800      	ldr	r0, [sp, #0]
 8014d20:	9901      	ldr	r1, [sp, #4]
 8014d22:	2200      	movs	r2, #0
 8014d24:	2300      	movs	r3, #0
 8014d26:	f7eb fb91 	bl	800044c <__aeabi_dcmpeq>
 8014d2a:	2800      	cmp	r0, #0
 8014d2c:	d019      	beq.n	8014d62 <pow+0x66>
 8014d2e:	2200      	movs	r2, #0
 8014d30:	2300      	movs	r3, #0
 8014d32:	0020      	movs	r0, r4
 8014d34:	0029      	movs	r1, r5
 8014d36:	f7eb fb89 	bl	800044c <__aeabi_dcmpeq>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	d146      	bne.n	8014dcc <pow+0xd0>
 8014d3e:	0020      	movs	r0, r4
 8014d40:	0029      	movs	r1, r5
 8014d42:	f000 f849 	bl	8014dd8 <finite>
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d029      	beq.n	8014d9e <pow+0xa2>
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	0020      	movs	r0, r4
 8014d50:	0029      	movs	r1, r5
 8014d52:	f7eb fb81 	bl	8000458 <__aeabi_dcmplt>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d021      	beq.n	8014d9e <pow+0xa2>
 8014d5a:	f7fd fadb 	bl	8012314 <__errno>
 8014d5e:	2322      	movs	r3, #34	; 0x22
 8014d60:	e01c      	b.n	8014d9c <pow+0xa0>
 8014d62:	0030      	movs	r0, r6
 8014d64:	0039      	movs	r1, r7
 8014d66:	f000 f837 	bl	8014dd8 <finite>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d11b      	bne.n	8014da6 <pow+0xaa>
 8014d6e:	9800      	ldr	r0, [sp, #0]
 8014d70:	9901      	ldr	r1, [sp, #4]
 8014d72:	f000 f831 	bl	8014dd8 <finite>
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d015      	beq.n	8014da6 <pow+0xaa>
 8014d7a:	0020      	movs	r0, r4
 8014d7c:	0029      	movs	r1, r5
 8014d7e:	f000 f82b 	bl	8014dd8 <finite>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d00f      	beq.n	8014da6 <pow+0xaa>
 8014d86:	0032      	movs	r2, r6
 8014d88:	003b      	movs	r3, r7
 8014d8a:	0030      	movs	r0, r6
 8014d8c:	0039      	movs	r1, r7
 8014d8e:	f7ee f8e5 	bl	8002f5c <__aeabi_dcmpun>
 8014d92:	2800      	cmp	r0, #0
 8014d94:	d0e1      	beq.n	8014d5a <pow+0x5e>
 8014d96:	f7fd fabd 	bl	8012314 <__errno>
 8014d9a:	2321      	movs	r3, #33	; 0x21
 8014d9c:	6003      	str	r3, [r0, #0]
 8014d9e:	0030      	movs	r0, r6
 8014da0:	0039      	movs	r1, r7
 8014da2:	b003      	add	sp, #12
 8014da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014da6:	2200      	movs	r2, #0
 8014da8:	2300      	movs	r3, #0
 8014daa:	0030      	movs	r0, r6
 8014dac:	0039      	movs	r1, r7
 8014dae:	f7eb fb4d 	bl	800044c <__aeabi_dcmpeq>
 8014db2:	2800      	cmp	r0, #0
 8014db4:	d0f3      	beq.n	8014d9e <pow+0xa2>
 8014db6:	9800      	ldr	r0, [sp, #0]
 8014db8:	9901      	ldr	r1, [sp, #4]
 8014dba:	f000 f80d 	bl	8014dd8 <finite>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d0ed      	beq.n	8014d9e <pow+0xa2>
 8014dc2:	0020      	movs	r0, r4
 8014dc4:	0029      	movs	r1, r5
 8014dc6:	f000 f807 	bl	8014dd8 <finite>
 8014dca:	e7c4      	b.n	8014d56 <pow+0x5a>
 8014dcc:	2600      	movs	r6, #0
 8014dce:	4f01      	ldr	r7, [pc, #4]	; (8014dd4 <pow+0xd8>)
 8014dd0:	e7e5      	b.n	8014d9e <pow+0xa2>
 8014dd2:	46c0      	nop			; (mov r8, r8)
 8014dd4:	3ff00000 	.word	0x3ff00000

08014dd8 <finite>:
 8014dd8:	4b02      	ldr	r3, [pc, #8]	; (8014de4 <finite+0xc>)
 8014dda:	0048      	lsls	r0, r1, #1
 8014ddc:	0840      	lsrs	r0, r0, #1
 8014dde:	18c0      	adds	r0, r0, r3
 8014de0:	0fc0      	lsrs	r0, r0, #31
 8014de2:	4770      	bx	lr
 8014de4:	80100000 	.word	0x80100000

08014de8 <__ieee754_pow>:
 8014de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dea:	b095      	sub	sp, #84	; 0x54
 8014dec:	9202      	str	r2, [sp, #8]
 8014dee:	9303      	str	r3, [sp, #12]
 8014df0:	9b03      	ldr	r3, [sp, #12]
 8014df2:	9a03      	ldr	r2, [sp, #12]
 8014df4:	9304      	str	r3, [sp, #16]
 8014df6:	9b02      	ldr	r3, [sp, #8]
 8014df8:	0056      	lsls	r6, r2, #1
 8014dfa:	001a      	movs	r2, r3
 8014dfc:	0876      	lsrs	r6, r6, #1
 8014dfe:	0007      	movs	r7, r0
 8014e00:	000d      	movs	r5, r1
 8014e02:	4332      	orrs	r2, r6
 8014e04:	d119      	bne.n	8014e3a <__ieee754_pow+0x52>
 8014e06:	2180      	movs	r1, #128	; 0x80
 8014e08:	0309      	lsls	r1, r1, #12
 8014e0a:	4069      	eors	r1, r5
 8014e0c:	0002      	movs	r2, r0
 8014e0e:	000b      	movs	r3, r1
 8014e10:	1892      	adds	r2, r2, r2
 8014e12:	415b      	adcs	r3, r3
 8014e14:	4989      	ldr	r1, [pc, #548]	; (801503c <__ieee754_pow+0x254>)
 8014e16:	428b      	cmp	r3, r1
 8014e18:	d806      	bhi.n	8014e28 <__ieee754_pow+0x40>
 8014e1a:	d001      	beq.n	8014e20 <__ieee754_pow+0x38>
 8014e1c:	f000 fcb6 	bl	801578c <__ieee754_pow+0x9a4>
 8014e20:	2a00      	cmp	r2, #0
 8014e22:	d101      	bne.n	8014e28 <__ieee754_pow+0x40>
 8014e24:	f000 fcb2 	bl	801578c <__ieee754_pow+0x9a4>
 8014e28:	9a02      	ldr	r2, [sp, #8]
 8014e2a:	9b03      	ldr	r3, [sp, #12]
 8014e2c:	0038      	movs	r0, r7
 8014e2e:	0029      	movs	r1, r5
 8014e30:	f7ec faf6 	bl	8001420 <__aeabi_dadd>
 8014e34:	9000      	str	r0, [sp, #0]
 8014e36:	9101      	str	r1, [sp, #4]
 8014e38:	e0ad      	b.n	8014f96 <__ieee754_pow+0x1ae>
 8014e3a:	4a81      	ldr	r2, [pc, #516]	; (8015040 <__ieee754_pow+0x258>)
 8014e3c:	004c      	lsls	r4, r1, #1
 8014e3e:	9108      	str	r1, [sp, #32]
 8014e40:	9000      	str	r0, [sp, #0]
 8014e42:	0864      	lsrs	r4, r4, #1
 8014e44:	4294      	cmp	r4, r2
 8014e46:	dc08      	bgt.n	8014e5a <__ieee754_pow+0x72>
 8014e48:	d101      	bne.n	8014e4e <__ieee754_pow+0x66>
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	d1ec      	bne.n	8014e28 <__ieee754_pow+0x40>
 8014e4e:	4a7c      	ldr	r2, [pc, #496]	; (8015040 <__ieee754_pow+0x258>)
 8014e50:	4296      	cmp	r6, r2
 8014e52:	dc02      	bgt.n	8014e5a <__ieee754_pow+0x72>
 8014e54:	d10c      	bne.n	8014e70 <__ieee754_pow+0x88>
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d00a      	beq.n	8014e70 <__ieee754_pow+0x88>
 8014e5a:	4b7a      	ldr	r3, [pc, #488]	; (8015044 <__ieee754_pow+0x25c>)
 8014e5c:	18eb      	adds	r3, r5, r3
 8014e5e:	433b      	orrs	r3, r7
 8014e60:	d1e2      	bne.n	8014e28 <__ieee754_pow+0x40>
 8014e62:	2180      	movs	r1, #128	; 0x80
 8014e64:	9803      	ldr	r0, [sp, #12]
 8014e66:	0309      	lsls	r1, r1, #12
 8014e68:	4048      	eors	r0, r1
 8014e6a:	0003      	movs	r3, r0
 8014e6c:	9a02      	ldr	r2, [sp, #8]
 8014e6e:	e7cf      	b.n	8014e10 <__ieee754_pow+0x28>
 8014e70:	2200      	movs	r2, #0
 8014e72:	9206      	str	r2, [sp, #24]
 8014e74:	2d00      	cmp	r5, #0
 8014e76:	da69      	bge.n	8014f4c <__ieee754_pow+0x164>
 8014e78:	4a73      	ldr	r2, [pc, #460]	; (8015048 <__ieee754_pow+0x260>)
 8014e7a:	4296      	cmp	r6, r2
 8014e7c:	dc64      	bgt.n	8014f48 <__ieee754_pow+0x160>
 8014e7e:	4a73      	ldr	r2, [pc, #460]	; (801504c <__ieee754_pow+0x264>)
 8014e80:	4296      	cmp	r6, r2
 8014e82:	dd11      	ble.n	8014ea8 <__ieee754_pow+0xc0>
 8014e84:	4972      	ldr	r1, [pc, #456]	; (8015050 <__ieee754_pow+0x268>)
 8014e86:	1532      	asrs	r2, r6, #20
 8014e88:	1852      	adds	r2, r2, r1
 8014e8a:	2a14      	cmp	r2, #20
 8014e8c:	dd3c      	ble.n	8014f08 <__ieee754_pow+0x120>
 8014e8e:	2134      	movs	r1, #52	; 0x34
 8014e90:	1a89      	subs	r1, r1, r2
 8014e92:	9a02      	ldr	r2, [sp, #8]
 8014e94:	40ca      	lsrs	r2, r1
 8014e96:	0010      	movs	r0, r2
 8014e98:	4088      	lsls	r0, r1
 8014e9a:	4298      	cmp	r0, r3
 8014e9c:	d104      	bne.n	8014ea8 <__ieee754_pow+0xc0>
 8014e9e:	2101      	movs	r1, #1
 8014ea0:	400a      	ands	r2, r1
 8014ea2:	1849      	adds	r1, r1, r1
 8014ea4:	1a8a      	subs	r2, r1, r2
 8014ea6:	9206      	str	r2, [sp, #24]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d03c      	beq.n	8014f26 <__ieee754_pow+0x13e>
 8014eac:	0038      	movs	r0, r7
 8014eae:	0029      	movs	r1, r5
 8014eb0:	f000 fca4 	bl	80157fc <fabs>
 8014eb4:	9000      	str	r0, [sp, #0]
 8014eb6:	9101      	str	r1, [sp, #4]
 8014eb8:	2f00      	cmp	r7, #0
 8014eba:	d000      	beq.n	8014ebe <__ieee754_pow+0xd6>
 8014ebc:	e094      	b.n	8014fe8 <__ieee754_pow+0x200>
 8014ebe:	2c00      	cmp	r4, #0
 8014ec0:	d005      	beq.n	8014ece <__ieee754_pow+0xe6>
 8014ec2:	4a64      	ldr	r2, [pc, #400]	; (8015054 <__ieee754_pow+0x26c>)
 8014ec4:	00ab      	lsls	r3, r5, #2
 8014ec6:	089b      	lsrs	r3, r3, #2
 8014ec8:	4293      	cmp	r3, r2
 8014eca:	d000      	beq.n	8014ece <__ieee754_pow+0xe6>
 8014ecc:	e08c      	b.n	8014fe8 <__ieee754_pow+0x200>
 8014ece:	9b04      	ldr	r3, [sp, #16]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	da07      	bge.n	8014ee4 <__ieee754_pow+0xfc>
 8014ed4:	9a00      	ldr	r2, [sp, #0]
 8014ed6:	9b01      	ldr	r3, [sp, #4]
 8014ed8:	2000      	movs	r0, #0
 8014eda:	495e      	ldr	r1, [pc, #376]	; (8015054 <__ieee754_pow+0x26c>)
 8014edc:	f7ec fe00 	bl	8001ae0 <__aeabi_ddiv>
 8014ee0:	9000      	str	r0, [sp, #0]
 8014ee2:	9101      	str	r1, [sp, #4]
 8014ee4:	9b08      	ldr	r3, [sp, #32]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	da55      	bge.n	8014f96 <__ieee754_pow+0x1ae>
 8014eea:	4b56      	ldr	r3, [pc, #344]	; (8015044 <__ieee754_pow+0x25c>)
 8014eec:	18e4      	adds	r4, r4, r3
 8014eee:	9b06      	ldr	r3, [sp, #24]
 8014ef0:	431c      	orrs	r4, r3
 8014ef2:	d000      	beq.n	8014ef6 <__ieee754_pow+0x10e>
 8014ef4:	e06c      	b.n	8014fd0 <__ieee754_pow+0x1e8>
 8014ef6:	9a00      	ldr	r2, [sp, #0]
 8014ef8:	9b01      	ldr	r3, [sp, #4]
 8014efa:	0010      	movs	r0, r2
 8014efc:	0019      	movs	r1, r3
 8014efe:	f7ed fcab 	bl	8002858 <__aeabi_dsub>
 8014f02:	0002      	movs	r2, r0
 8014f04:	000b      	movs	r3, r1
 8014f06:	e01c      	b.n	8014f42 <__ieee754_pow+0x15a>
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d1cf      	bne.n	8014eac <__ieee754_pow+0xc4>
 8014f0c:	3314      	adds	r3, #20
 8014f0e:	1a9a      	subs	r2, r3, r2
 8014f10:	0033      	movs	r3, r6
 8014f12:	4113      	asrs	r3, r2
 8014f14:	0019      	movs	r1, r3
 8014f16:	4091      	lsls	r1, r2
 8014f18:	42b1      	cmp	r1, r6
 8014f1a:	d104      	bne.n	8014f26 <__ieee754_pow+0x13e>
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	4013      	ands	r3, r2
 8014f20:	1892      	adds	r2, r2, r2
 8014f22:	1ad3      	subs	r3, r2, r3
 8014f24:	9306      	str	r3, [sp, #24]
 8014f26:	4b4b      	ldr	r3, [pc, #300]	; (8015054 <__ieee754_pow+0x26c>)
 8014f28:	429e      	cmp	r6, r3
 8014f2a:	d138      	bne.n	8014f9e <__ieee754_pow+0x1b6>
 8014f2c:	0038      	movs	r0, r7
 8014f2e:	0029      	movs	r1, r5
 8014f30:	9b04      	ldr	r3, [sp, #16]
 8014f32:	9000      	str	r0, [sp, #0]
 8014f34:	9101      	str	r1, [sp, #4]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	da2d      	bge.n	8014f96 <__ieee754_pow+0x1ae>
 8014f3a:	003a      	movs	r2, r7
 8014f3c:	002b      	movs	r3, r5
 8014f3e:	2000      	movs	r0, #0
 8014f40:	4944      	ldr	r1, [pc, #272]	; (8015054 <__ieee754_pow+0x26c>)
 8014f42:	f7ec fdcd 	bl	8001ae0 <__aeabi_ddiv>
 8014f46:	e775      	b.n	8014e34 <__ieee754_pow+0x4c>
 8014f48:	2202      	movs	r2, #2
 8014f4a:	9206      	str	r2, [sp, #24]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d1ad      	bne.n	8014eac <__ieee754_pow+0xc4>
 8014f50:	4b3b      	ldr	r3, [pc, #236]	; (8015040 <__ieee754_pow+0x258>)
 8014f52:	429e      	cmp	r6, r3
 8014f54:	d1e7      	bne.n	8014f26 <__ieee754_pow+0x13e>
 8014f56:	4b3b      	ldr	r3, [pc, #236]	; (8015044 <__ieee754_pow+0x25c>)
 8014f58:	18e3      	adds	r3, r4, r3
 8014f5a:	433b      	orrs	r3, r7
 8014f5c:	d101      	bne.n	8014f62 <__ieee754_pow+0x17a>
 8014f5e:	f000 fc15 	bl	801578c <__ieee754_pow+0x9a4>
 8014f62:	4b3a      	ldr	r3, [pc, #232]	; (801504c <__ieee754_pow+0x264>)
 8014f64:	429c      	cmp	r4, r3
 8014f66:	dd09      	ble.n	8014f7c <__ieee754_pow+0x194>
 8014f68:	9b04      	ldr	r3, [sp, #16]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	da01      	bge.n	8014f72 <__ieee754_pow+0x18a>
 8014f6e:	f000 fc11 	bl	8015794 <__ieee754_pow+0x9ac>
 8014f72:	9b02      	ldr	r3, [sp, #8]
 8014f74:	9c03      	ldr	r4, [sp, #12]
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	9401      	str	r4, [sp, #4]
 8014f7a:	e00c      	b.n	8014f96 <__ieee754_pow+0x1ae>
 8014f7c:	9b04      	ldr	r3, [sp, #16]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	db01      	blt.n	8014f86 <__ieee754_pow+0x19e>
 8014f82:	f000 fc07 	bl	8015794 <__ieee754_pow+0x9ac>
 8014f86:	2280      	movs	r2, #128	; 0x80
 8014f88:	0612      	lsls	r2, r2, #24
 8014f8a:	4694      	mov	ip, r2
 8014f8c:	9b02      	ldr	r3, [sp, #8]
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	9b03      	ldr	r3, [sp, #12]
 8014f92:	4463      	add	r3, ip
 8014f94:	9301      	str	r3, [sp, #4]
 8014f96:	9800      	ldr	r0, [sp, #0]
 8014f98:	9901      	ldr	r1, [sp, #4]
 8014f9a:	b015      	add	sp, #84	; 0x54
 8014f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f9e:	2380      	movs	r3, #128	; 0x80
 8014fa0:	9a04      	ldr	r2, [sp, #16]
 8014fa2:	05db      	lsls	r3, r3, #23
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d106      	bne.n	8014fb6 <__ieee754_pow+0x1ce>
 8014fa8:	003a      	movs	r2, r7
 8014faa:	002b      	movs	r3, r5
 8014fac:	0038      	movs	r0, r7
 8014fae:	0029      	movs	r1, r5
 8014fb0:	f7ed f990 	bl	80022d4 <__aeabi_dmul>
 8014fb4:	e73e      	b.n	8014e34 <__ieee754_pow+0x4c>
 8014fb6:	4b28      	ldr	r3, [pc, #160]	; (8015058 <__ieee754_pow+0x270>)
 8014fb8:	9a04      	ldr	r2, [sp, #16]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d000      	beq.n	8014fc0 <__ieee754_pow+0x1d8>
 8014fbe:	e775      	b.n	8014eac <__ieee754_pow+0xc4>
 8014fc0:	2d00      	cmp	r5, #0
 8014fc2:	da00      	bge.n	8014fc6 <__ieee754_pow+0x1de>
 8014fc4:	e772      	b.n	8014eac <__ieee754_pow+0xc4>
 8014fc6:	0038      	movs	r0, r7
 8014fc8:	0029      	movs	r1, r5
 8014fca:	f000 fcb7 	bl	801593c <__ieee754_sqrt>
 8014fce:	e731      	b.n	8014e34 <__ieee754_pow+0x4c>
 8014fd0:	9b06      	ldr	r3, [sp, #24]
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d1df      	bne.n	8014f96 <__ieee754_pow+0x1ae>
 8014fd6:	9800      	ldr	r0, [sp, #0]
 8014fd8:	2180      	movs	r1, #128	; 0x80
 8014fda:	0002      	movs	r2, r0
 8014fdc:	9801      	ldr	r0, [sp, #4]
 8014fde:	0609      	lsls	r1, r1, #24
 8014fe0:	1843      	adds	r3, r0, r1
 8014fe2:	9200      	str	r2, [sp, #0]
 8014fe4:	9301      	str	r3, [sp, #4]
 8014fe6:	e7d6      	b.n	8014f96 <__ieee754_pow+0x1ae>
 8014fe8:	0feb      	lsrs	r3, r5, #31
 8014fea:	3b01      	subs	r3, #1
 8014fec:	930e      	str	r3, [sp, #56]	; 0x38
 8014fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ff0:	9b06      	ldr	r3, [sp, #24]
 8014ff2:	4313      	orrs	r3, r2
 8014ff4:	d104      	bne.n	8015000 <__ieee754_pow+0x218>
 8014ff6:	003a      	movs	r2, r7
 8014ff8:	002b      	movs	r3, r5
 8014ffa:	0038      	movs	r0, r7
 8014ffc:	0029      	movs	r1, r5
 8014ffe:	e77e      	b.n	8014efe <__ieee754_pow+0x116>
 8015000:	4b16      	ldr	r3, [pc, #88]	; (801505c <__ieee754_pow+0x274>)
 8015002:	429e      	cmp	r6, r3
 8015004:	dc00      	bgt.n	8015008 <__ieee754_pow+0x220>
 8015006:	e0f1      	b.n	80151ec <__ieee754_pow+0x404>
 8015008:	4b15      	ldr	r3, [pc, #84]	; (8015060 <__ieee754_pow+0x278>)
 801500a:	429e      	cmp	r6, r3
 801500c:	dd09      	ble.n	8015022 <__ieee754_pow+0x23a>
 801500e:	4b0f      	ldr	r3, [pc, #60]	; (801504c <__ieee754_pow+0x264>)
 8015010:	429c      	cmp	r4, r3
 8015012:	dc0c      	bgt.n	801502e <__ieee754_pow+0x246>
 8015014:	9b04      	ldr	r3, [sp, #16]
 8015016:	2b00      	cmp	r3, #0
 8015018:	da0c      	bge.n	8015034 <__ieee754_pow+0x24c>
 801501a:	2000      	movs	r0, #0
 801501c:	f000 fc86 	bl	801592c <__math_oflow>
 8015020:	e708      	b.n	8014e34 <__ieee754_pow+0x4c>
 8015022:	4b10      	ldr	r3, [pc, #64]	; (8015064 <__ieee754_pow+0x27c>)
 8015024:	429c      	cmp	r4, r3
 8015026:	ddf5      	ble.n	8015014 <__ieee754_pow+0x22c>
 8015028:	4b0a      	ldr	r3, [pc, #40]	; (8015054 <__ieee754_pow+0x26c>)
 801502a:	429c      	cmp	r4, r3
 801502c:	dd1c      	ble.n	8015068 <__ieee754_pow+0x280>
 801502e:	9b04      	ldr	r3, [sp, #16]
 8015030:	2b00      	cmp	r3, #0
 8015032:	dcf2      	bgt.n	801501a <__ieee754_pow+0x232>
 8015034:	2000      	movs	r0, #0
 8015036:	f000 fc72 	bl	801591e <__math_uflow>
 801503a:	e6fb      	b.n	8014e34 <__ieee754_pow+0x4c>
 801503c:	fff00000 	.word	0xfff00000
 8015040:	7ff00000 	.word	0x7ff00000
 8015044:	c0100000 	.word	0xc0100000
 8015048:	433fffff 	.word	0x433fffff
 801504c:	3fefffff 	.word	0x3fefffff
 8015050:	fffffc01 	.word	0xfffffc01
 8015054:	3ff00000 	.word	0x3ff00000
 8015058:	3fe00000 	.word	0x3fe00000
 801505c:	41e00000 	.word	0x41e00000
 8015060:	43f00000 	.word	0x43f00000
 8015064:	3feffffe 	.word	0x3feffffe
 8015068:	2200      	movs	r2, #0
 801506a:	9800      	ldr	r0, [sp, #0]
 801506c:	9901      	ldr	r1, [sp, #4]
 801506e:	4b53      	ldr	r3, [pc, #332]	; (80151bc <__ieee754_pow+0x3d4>)
 8015070:	f7ed fbf2 	bl	8002858 <__aeabi_dsub>
 8015074:	22c0      	movs	r2, #192	; 0xc0
 8015076:	4b52      	ldr	r3, [pc, #328]	; (80151c0 <__ieee754_pow+0x3d8>)
 8015078:	05d2      	lsls	r2, r2, #23
 801507a:	0004      	movs	r4, r0
 801507c:	000d      	movs	r5, r1
 801507e:	f7ed f929 	bl	80022d4 <__aeabi_dmul>
 8015082:	4a50      	ldr	r2, [pc, #320]	; (80151c4 <__ieee754_pow+0x3dc>)
 8015084:	0006      	movs	r6, r0
 8015086:	000f      	movs	r7, r1
 8015088:	0020      	movs	r0, r4
 801508a:	0029      	movs	r1, r5
 801508c:	4b4e      	ldr	r3, [pc, #312]	; (80151c8 <__ieee754_pow+0x3e0>)
 801508e:	f7ed f921 	bl	80022d4 <__aeabi_dmul>
 8015092:	2200      	movs	r2, #0
 8015094:	9000      	str	r0, [sp, #0]
 8015096:	9101      	str	r1, [sp, #4]
 8015098:	4b4c      	ldr	r3, [pc, #304]	; (80151cc <__ieee754_pow+0x3e4>)
 801509a:	0020      	movs	r0, r4
 801509c:	0029      	movs	r1, r5
 801509e:	f7ed f919 	bl	80022d4 <__aeabi_dmul>
 80150a2:	0002      	movs	r2, r0
 80150a4:	000b      	movs	r3, r1
 80150a6:	484a      	ldr	r0, [pc, #296]	; (80151d0 <__ieee754_pow+0x3e8>)
 80150a8:	494a      	ldr	r1, [pc, #296]	; (80151d4 <__ieee754_pow+0x3ec>)
 80150aa:	f7ed fbd5 	bl	8002858 <__aeabi_dsub>
 80150ae:	0022      	movs	r2, r4
 80150b0:	002b      	movs	r3, r5
 80150b2:	f7ed f90f 	bl	80022d4 <__aeabi_dmul>
 80150b6:	0002      	movs	r2, r0
 80150b8:	000b      	movs	r3, r1
 80150ba:	2000      	movs	r0, #0
 80150bc:	4946      	ldr	r1, [pc, #280]	; (80151d8 <__ieee754_pow+0x3f0>)
 80150be:	f7ed fbcb 	bl	8002858 <__aeabi_dsub>
 80150c2:	0022      	movs	r2, r4
 80150c4:	002b      	movs	r3, r5
 80150c6:	9004      	str	r0, [sp, #16]
 80150c8:	9105      	str	r1, [sp, #20]
 80150ca:	0020      	movs	r0, r4
 80150cc:	0029      	movs	r1, r5
 80150ce:	f7ed f901 	bl	80022d4 <__aeabi_dmul>
 80150d2:	0002      	movs	r2, r0
 80150d4:	000b      	movs	r3, r1
 80150d6:	9804      	ldr	r0, [sp, #16]
 80150d8:	9905      	ldr	r1, [sp, #20]
 80150da:	f7ed f8fb 	bl	80022d4 <__aeabi_dmul>
 80150de:	4a3f      	ldr	r2, [pc, #252]	; (80151dc <__ieee754_pow+0x3f4>)
 80150e0:	4b37      	ldr	r3, [pc, #220]	; (80151c0 <__ieee754_pow+0x3d8>)
 80150e2:	f7ed f8f7 	bl	80022d4 <__aeabi_dmul>
 80150e6:	0002      	movs	r2, r0
 80150e8:	000b      	movs	r3, r1
 80150ea:	9800      	ldr	r0, [sp, #0]
 80150ec:	9901      	ldr	r1, [sp, #4]
 80150ee:	f7ed fbb3 	bl	8002858 <__aeabi_dsub>
 80150f2:	0002      	movs	r2, r0
 80150f4:	000b      	movs	r3, r1
 80150f6:	0004      	movs	r4, r0
 80150f8:	000d      	movs	r5, r1
 80150fa:	0030      	movs	r0, r6
 80150fc:	0039      	movs	r1, r7
 80150fe:	f7ec f98f 	bl	8001420 <__aeabi_dadd>
 8015102:	2000      	movs	r0, #0
 8015104:	0032      	movs	r2, r6
 8015106:	003b      	movs	r3, r7
 8015108:	9004      	str	r0, [sp, #16]
 801510a:	9105      	str	r1, [sp, #20]
 801510c:	f7ed fba4 	bl	8002858 <__aeabi_dsub>
 8015110:	0002      	movs	r2, r0
 8015112:	000b      	movs	r3, r1
 8015114:	0020      	movs	r0, r4
 8015116:	0029      	movs	r1, r5
 8015118:	f7ed fb9e 	bl	8002858 <__aeabi_dsub>
 801511c:	9b06      	ldr	r3, [sp, #24]
 801511e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015120:	3b01      	subs	r3, #1
 8015122:	0006      	movs	r6, r0
 8015124:	000f      	movs	r7, r1
 8015126:	4313      	orrs	r3, r2
 8015128:	d000      	beq.n	801512c <__ieee754_pow+0x344>
 801512a:	e1dc      	b.n	80154e6 <__ieee754_pow+0x6fe>
 801512c:	2300      	movs	r3, #0
 801512e:	4c2c      	ldr	r4, [pc, #176]	; (80151e0 <__ieee754_pow+0x3f8>)
 8015130:	9300      	str	r3, [sp, #0]
 8015132:	9401      	str	r4, [sp, #4]
 8015134:	9c02      	ldr	r4, [sp, #8]
 8015136:	9d03      	ldr	r5, [sp, #12]
 8015138:	9802      	ldr	r0, [sp, #8]
 801513a:	9903      	ldr	r1, [sp, #12]
 801513c:	2400      	movs	r4, #0
 801513e:	002b      	movs	r3, r5
 8015140:	0022      	movs	r2, r4
 8015142:	f7ed fb89 	bl	8002858 <__aeabi_dsub>
 8015146:	9a04      	ldr	r2, [sp, #16]
 8015148:	9b05      	ldr	r3, [sp, #20]
 801514a:	f7ed f8c3 	bl	80022d4 <__aeabi_dmul>
 801514e:	9a02      	ldr	r2, [sp, #8]
 8015150:	9b03      	ldr	r3, [sp, #12]
 8015152:	9006      	str	r0, [sp, #24]
 8015154:	9107      	str	r1, [sp, #28]
 8015156:	0030      	movs	r0, r6
 8015158:	0039      	movs	r1, r7
 801515a:	f7ed f8bb 	bl	80022d4 <__aeabi_dmul>
 801515e:	0002      	movs	r2, r0
 8015160:	000b      	movs	r3, r1
 8015162:	9806      	ldr	r0, [sp, #24]
 8015164:	9907      	ldr	r1, [sp, #28]
 8015166:	f7ec f95b 	bl	8001420 <__aeabi_dadd>
 801516a:	0022      	movs	r2, r4
 801516c:	002b      	movs	r3, r5
 801516e:	0006      	movs	r6, r0
 8015170:	000f      	movs	r7, r1
 8015172:	9804      	ldr	r0, [sp, #16]
 8015174:	9905      	ldr	r1, [sp, #20]
 8015176:	f7ed f8ad 	bl	80022d4 <__aeabi_dmul>
 801517a:	0003      	movs	r3, r0
 801517c:	000c      	movs	r4, r1
 801517e:	9004      	str	r0, [sp, #16]
 8015180:	9105      	str	r1, [sp, #20]
 8015182:	9306      	str	r3, [sp, #24]
 8015184:	9407      	str	r4, [sp, #28]
 8015186:	0002      	movs	r2, r0
 8015188:	000b      	movs	r3, r1
 801518a:	0030      	movs	r0, r6
 801518c:	0039      	movs	r1, r7
 801518e:	f7ec f947 	bl	8001420 <__aeabi_dadd>
 8015192:	4b14      	ldr	r3, [pc, #80]	; (80151e4 <__ieee754_pow+0x3fc>)
 8015194:	0005      	movs	r5, r0
 8015196:	000c      	movs	r4, r1
 8015198:	9108      	str	r1, [sp, #32]
 801519a:	4299      	cmp	r1, r3
 801519c:	dc00      	bgt.n	80151a0 <__ieee754_pow+0x3b8>
 801519e:	e2d4      	b.n	801574a <__ieee754_pow+0x962>
 80151a0:	4b11      	ldr	r3, [pc, #68]	; (80151e8 <__ieee754_pow+0x400>)
 80151a2:	18cb      	adds	r3, r1, r3
 80151a4:	4303      	orrs	r3, r0
 80151a6:	d100      	bne.n	80151aa <__ieee754_pow+0x3c2>
 80151a8:	e1d6      	b.n	8015558 <__ieee754_pow+0x770>
 80151aa:	9800      	ldr	r0, [sp, #0]
 80151ac:	9901      	ldr	r1, [sp, #4]
 80151ae:	2300      	movs	r3, #0
 80151b0:	2200      	movs	r2, #0
 80151b2:	f7eb f951 	bl	8000458 <__aeabi_dcmplt>
 80151b6:	1e43      	subs	r3, r0, #1
 80151b8:	4198      	sbcs	r0, r3
 80151ba:	e72f      	b.n	801501c <__ieee754_pow+0x234>
 80151bc:	3ff00000 	.word	0x3ff00000
 80151c0:	3ff71547 	.word	0x3ff71547
 80151c4:	f85ddf44 	.word	0xf85ddf44
 80151c8:	3e54ae0b 	.word	0x3e54ae0b
 80151cc:	3fd00000 	.word	0x3fd00000
 80151d0:	55555555 	.word	0x55555555
 80151d4:	3fd55555 	.word	0x3fd55555
 80151d8:	3fe00000 	.word	0x3fe00000
 80151dc:	652b82fe 	.word	0x652b82fe
 80151e0:	bff00000 	.word	0xbff00000
 80151e4:	408fffff 	.word	0x408fffff
 80151e8:	bf700000 	.word	0xbf700000
 80151ec:	4bbf      	ldr	r3, [pc, #764]	; (80154ec <__ieee754_pow+0x704>)
 80151ee:	2200      	movs	r2, #0
 80151f0:	422b      	tst	r3, r5
 80151f2:	d10a      	bne.n	801520a <__ieee754_pow+0x422>
 80151f4:	9800      	ldr	r0, [sp, #0]
 80151f6:	9901      	ldr	r1, [sp, #4]
 80151f8:	2200      	movs	r2, #0
 80151fa:	4bbd      	ldr	r3, [pc, #756]	; (80154f0 <__ieee754_pow+0x708>)
 80151fc:	f7ed f86a 	bl	80022d4 <__aeabi_dmul>
 8015200:	2235      	movs	r2, #53	; 0x35
 8015202:	9000      	str	r0, [sp, #0]
 8015204:	9101      	str	r1, [sp, #4]
 8015206:	9c01      	ldr	r4, [sp, #4]
 8015208:	4252      	negs	r2, r2
 801520a:	49ba      	ldr	r1, [pc, #744]	; (80154f4 <__ieee754_pow+0x70c>)
 801520c:	1523      	asrs	r3, r4, #20
 801520e:	185b      	adds	r3, r3, r1
 8015210:	189b      	adds	r3, r3, r2
 8015212:	0324      	lsls	r4, r4, #12
 8015214:	4db8      	ldr	r5, [pc, #736]	; (80154f8 <__ieee754_pow+0x710>)
 8015216:	930d      	str	r3, [sp, #52]	; 0x34
 8015218:	4bb8      	ldr	r3, [pc, #736]	; (80154fc <__ieee754_pow+0x714>)
 801521a:	0b22      	lsrs	r2, r4, #12
 801521c:	4315      	orrs	r5, r2
 801521e:	2400      	movs	r4, #0
 8015220:	429a      	cmp	r2, r3
 8015222:	dd09      	ble.n	8015238 <__ieee754_pow+0x450>
 8015224:	4bb6      	ldr	r3, [pc, #728]	; (8015500 <__ieee754_pow+0x718>)
 8015226:	3401      	adds	r4, #1
 8015228:	429a      	cmp	r2, r3
 801522a:	dd05      	ble.n	8015238 <__ieee754_pow+0x450>
 801522c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801522e:	191b      	adds	r3, r3, r4
 8015230:	2400      	movs	r4, #0
 8015232:	930d      	str	r3, [sp, #52]	; 0x34
 8015234:	4bb3      	ldr	r3, [pc, #716]	; (8015504 <__ieee754_pow+0x71c>)
 8015236:	18ed      	adds	r5, r5, r3
 8015238:	4bb3      	ldr	r3, [pc, #716]	; (8015508 <__ieee754_pow+0x720>)
 801523a:	00e2      	lsls	r2, r4, #3
 801523c:	189b      	adds	r3, r3, r2
 801523e:	9800      	ldr	r0, [sp, #0]
 8015240:	9901      	ldr	r1, [sp, #4]
 8015242:	920f      	str	r2, [sp, #60]	; 0x3c
 8015244:	0029      	movs	r1, r5
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	0006      	movs	r6, r0
 801524c:	920a      	str	r2, [sp, #40]	; 0x28
 801524e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015250:	f7ed fb02 	bl	8002858 <__aeabi_dsub>
 8015254:	0032      	movs	r2, r6
 8015256:	002b      	movs	r3, r5
 8015258:	9010      	str	r0, [sp, #64]	; 0x40
 801525a:	9111      	str	r1, [sp, #68]	; 0x44
 801525c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801525e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015260:	f7ec f8de 	bl	8001420 <__aeabi_dadd>
 8015264:	0002      	movs	r2, r0
 8015266:	000b      	movs	r3, r1
 8015268:	2000      	movs	r0, #0
 801526a:	49a3      	ldr	r1, [pc, #652]	; (80154f8 <__ieee754_pow+0x710>)
 801526c:	f7ec fc38 	bl	8001ae0 <__aeabi_ddiv>
 8015270:	0002      	movs	r2, r0
 8015272:	000b      	movs	r3, r1
 8015274:	9012      	str	r0, [sp, #72]	; 0x48
 8015276:	9113      	str	r1, [sp, #76]	; 0x4c
 8015278:	9810      	ldr	r0, [sp, #64]	; 0x40
 801527a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801527c:	f7ed f82a 	bl	80022d4 <__aeabi_dmul>
 8015280:	9008      	str	r0, [sp, #32]
 8015282:	9109      	str	r1, [sp, #36]	; 0x24
 8015284:	9a08      	ldr	r2, [sp, #32]
 8015286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015288:	9204      	str	r2, [sp, #16]
 801528a:	9305      	str	r3, [sp, #20]
 801528c:	2300      	movs	r3, #0
 801528e:	2180      	movs	r1, #128	; 0x80
 8015290:	2080      	movs	r0, #128	; 0x80
 8015292:	9304      	str	r3, [sp, #16]
 8015294:	9a04      	ldr	r2, [sp, #16]
 8015296:	9b05      	ldr	r3, [sp, #20]
 8015298:	9200      	str	r2, [sp, #0]
 801529a:	9301      	str	r3, [sp, #4]
 801529c:	2200      	movs	r2, #0
 801529e:	002f      	movs	r7, r5
 80152a0:	0589      	lsls	r1, r1, #22
 80152a2:	106d      	asrs	r5, r5, #1
 80152a4:	4329      	orrs	r1, r5
 80152a6:	0300      	lsls	r0, r0, #12
 80152a8:	1809      	adds	r1, r1, r0
 80152aa:	04a0      	lsls	r0, r4, #18
 80152ac:	180b      	adds	r3, r1, r0
 80152ae:	9800      	ldr	r0, [sp, #0]
 80152b0:	9901      	ldr	r1, [sp, #4]
 80152b2:	0014      	movs	r4, r2
 80152b4:	001d      	movs	r5, r3
 80152b6:	f7ed f80d 	bl	80022d4 <__aeabi_dmul>
 80152ba:	0002      	movs	r2, r0
 80152bc:	000b      	movs	r3, r1
 80152be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80152c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80152c2:	f7ed fac9 	bl	8002858 <__aeabi_dsub>
 80152c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152ca:	9010      	str	r0, [sp, #64]	; 0x40
 80152cc:	9111      	str	r1, [sp, #68]	; 0x44
 80152ce:	0020      	movs	r0, r4
 80152d0:	0029      	movs	r1, r5
 80152d2:	f7ed fac1 	bl	8002858 <__aeabi_dsub>
 80152d6:	0002      	movs	r2, r0
 80152d8:	000b      	movs	r3, r1
 80152da:	0030      	movs	r0, r6
 80152dc:	0039      	movs	r1, r7
 80152de:	f7ed fabb 	bl	8002858 <__aeabi_dsub>
 80152e2:	9a00      	ldr	r2, [sp, #0]
 80152e4:	9b01      	ldr	r3, [sp, #4]
 80152e6:	f7ec fff5 	bl	80022d4 <__aeabi_dmul>
 80152ea:	0002      	movs	r2, r0
 80152ec:	000b      	movs	r3, r1
 80152ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80152f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80152f2:	f7ed fab1 	bl	8002858 <__aeabi_dsub>
 80152f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80152f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152fa:	f7ec ffeb 	bl	80022d4 <__aeabi_dmul>
 80152fe:	9a08      	ldr	r2, [sp, #32]
 8015300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015302:	900a      	str	r0, [sp, #40]	; 0x28
 8015304:	910b      	str	r1, [sp, #44]	; 0x2c
 8015306:	0010      	movs	r0, r2
 8015308:	0019      	movs	r1, r3
 801530a:	f7ec ffe3 	bl	80022d4 <__aeabi_dmul>
 801530e:	0006      	movs	r6, r0
 8015310:	000f      	movs	r7, r1
 8015312:	4a7e      	ldr	r2, [pc, #504]	; (801550c <__ieee754_pow+0x724>)
 8015314:	4b7e      	ldr	r3, [pc, #504]	; (8015510 <__ieee754_pow+0x728>)
 8015316:	f7ec ffdd 	bl	80022d4 <__aeabi_dmul>
 801531a:	4a7e      	ldr	r2, [pc, #504]	; (8015514 <__ieee754_pow+0x72c>)
 801531c:	4b7e      	ldr	r3, [pc, #504]	; (8015518 <__ieee754_pow+0x730>)
 801531e:	f7ec f87f 	bl	8001420 <__aeabi_dadd>
 8015322:	0032      	movs	r2, r6
 8015324:	003b      	movs	r3, r7
 8015326:	f7ec ffd5 	bl	80022d4 <__aeabi_dmul>
 801532a:	4a7c      	ldr	r2, [pc, #496]	; (801551c <__ieee754_pow+0x734>)
 801532c:	4b7c      	ldr	r3, [pc, #496]	; (8015520 <__ieee754_pow+0x738>)
 801532e:	f7ec f877 	bl	8001420 <__aeabi_dadd>
 8015332:	0032      	movs	r2, r6
 8015334:	003b      	movs	r3, r7
 8015336:	f7ec ffcd 	bl	80022d4 <__aeabi_dmul>
 801533a:	4a7a      	ldr	r2, [pc, #488]	; (8015524 <__ieee754_pow+0x73c>)
 801533c:	4b7a      	ldr	r3, [pc, #488]	; (8015528 <__ieee754_pow+0x740>)
 801533e:	f7ec f86f 	bl	8001420 <__aeabi_dadd>
 8015342:	0032      	movs	r2, r6
 8015344:	003b      	movs	r3, r7
 8015346:	f7ec ffc5 	bl	80022d4 <__aeabi_dmul>
 801534a:	4a78      	ldr	r2, [pc, #480]	; (801552c <__ieee754_pow+0x744>)
 801534c:	4b78      	ldr	r3, [pc, #480]	; (8015530 <__ieee754_pow+0x748>)
 801534e:	f7ec f867 	bl	8001420 <__aeabi_dadd>
 8015352:	0032      	movs	r2, r6
 8015354:	003b      	movs	r3, r7
 8015356:	f7ec ffbd 	bl	80022d4 <__aeabi_dmul>
 801535a:	4a76      	ldr	r2, [pc, #472]	; (8015534 <__ieee754_pow+0x74c>)
 801535c:	4b76      	ldr	r3, [pc, #472]	; (8015538 <__ieee754_pow+0x750>)
 801535e:	f7ec f85f 	bl	8001420 <__aeabi_dadd>
 8015362:	0032      	movs	r2, r6
 8015364:	0004      	movs	r4, r0
 8015366:	000d      	movs	r5, r1
 8015368:	003b      	movs	r3, r7
 801536a:	0030      	movs	r0, r6
 801536c:	0039      	movs	r1, r7
 801536e:	f7ec ffb1 	bl	80022d4 <__aeabi_dmul>
 8015372:	0002      	movs	r2, r0
 8015374:	000b      	movs	r3, r1
 8015376:	0020      	movs	r0, r4
 8015378:	0029      	movs	r1, r5
 801537a:	f7ec ffab 	bl	80022d4 <__aeabi_dmul>
 801537e:	9a00      	ldr	r2, [sp, #0]
 8015380:	9b01      	ldr	r3, [sp, #4]
 8015382:	0004      	movs	r4, r0
 8015384:	000d      	movs	r5, r1
 8015386:	9808      	ldr	r0, [sp, #32]
 8015388:	9909      	ldr	r1, [sp, #36]	; 0x24
 801538a:	f7ec f849 	bl	8001420 <__aeabi_dadd>
 801538e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015392:	f7ec ff9f 	bl	80022d4 <__aeabi_dmul>
 8015396:	0022      	movs	r2, r4
 8015398:	002b      	movs	r3, r5
 801539a:	f7ec f841 	bl	8001420 <__aeabi_dadd>
 801539e:	9a00      	ldr	r2, [sp, #0]
 80153a0:	9b01      	ldr	r3, [sp, #4]
 80153a2:	9010      	str	r0, [sp, #64]	; 0x40
 80153a4:	9111      	str	r1, [sp, #68]	; 0x44
 80153a6:	0010      	movs	r0, r2
 80153a8:	0019      	movs	r1, r3
 80153aa:	f7ec ff93 	bl	80022d4 <__aeabi_dmul>
 80153ae:	2200      	movs	r2, #0
 80153b0:	4b62      	ldr	r3, [pc, #392]	; (801553c <__ieee754_pow+0x754>)
 80153b2:	0004      	movs	r4, r0
 80153b4:	000d      	movs	r5, r1
 80153b6:	f7ec f833 	bl	8001420 <__aeabi_dadd>
 80153ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153be:	f7ec f82f 	bl	8001420 <__aeabi_dadd>
 80153c2:	2000      	movs	r0, #0
 80153c4:	000f      	movs	r7, r1
 80153c6:	0006      	movs	r6, r0
 80153c8:	0002      	movs	r2, r0
 80153ca:	000b      	movs	r3, r1
 80153cc:	9800      	ldr	r0, [sp, #0]
 80153ce:	9901      	ldr	r1, [sp, #4]
 80153d0:	f7ec ff80 	bl	80022d4 <__aeabi_dmul>
 80153d4:	2200      	movs	r2, #0
 80153d6:	9000      	str	r0, [sp, #0]
 80153d8:	9101      	str	r1, [sp, #4]
 80153da:	4b58      	ldr	r3, [pc, #352]	; (801553c <__ieee754_pow+0x754>)
 80153dc:	0030      	movs	r0, r6
 80153de:	0039      	movs	r1, r7
 80153e0:	f7ed fa3a 	bl	8002858 <__aeabi_dsub>
 80153e4:	0022      	movs	r2, r4
 80153e6:	002b      	movs	r3, r5
 80153e8:	f7ed fa36 	bl	8002858 <__aeabi_dsub>
 80153ec:	0002      	movs	r2, r0
 80153ee:	000b      	movs	r3, r1
 80153f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80153f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80153f4:	f7ed fa30 	bl	8002858 <__aeabi_dsub>
 80153f8:	9a08      	ldr	r2, [sp, #32]
 80153fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153fc:	f7ec ff6a 	bl	80022d4 <__aeabi_dmul>
 8015400:	0032      	movs	r2, r6
 8015402:	0004      	movs	r4, r0
 8015404:	000d      	movs	r5, r1
 8015406:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801540a:	003b      	movs	r3, r7
 801540c:	f7ec ff62 	bl	80022d4 <__aeabi_dmul>
 8015410:	0002      	movs	r2, r0
 8015412:	000b      	movs	r3, r1
 8015414:	0020      	movs	r0, r4
 8015416:	0029      	movs	r1, r5
 8015418:	f7ec f802 	bl	8001420 <__aeabi_dadd>
 801541c:	0004      	movs	r4, r0
 801541e:	000d      	movs	r5, r1
 8015420:	0002      	movs	r2, r0
 8015422:	000b      	movs	r3, r1
 8015424:	9800      	ldr	r0, [sp, #0]
 8015426:	9901      	ldr	r1, [sp, #4]
 8015428:	f7eb fffa 	bl	8001420 <__aeabi_dadd>
 801542c:	22e0      	movs	r2, #224	; 0xe0
 801542e:	2000      	movs	r0, #0
 8015430:	4b43      	ldr	r3, [pc, #268]	; (8015540 <__ieee754_pow+0x758>)
 8015432:	0612      	lsls	r2, r2, #24
 8015434:	0006      	movs	r6, r0
 8015436:	000f      	movs	r7, r1
 8015438:	f7ec ff4c 	bl	80022d4 <__aeabi_dmul>
 801543c:	9008      	str	r0, [sp, #32]
 801543e:	9109      	str	r1, [sp, #36]	; 0x24
 8015440:	9a00      	ldr	r2, [sp, #0]
 8015442:	9b01      	ldr	r3, [sp, #4]
 8015444:	0030      	movs	r0, r6
 8015446:	0039      	movs	r1, r7
 8015448:	f7ed fa06 	bl	8002858 <__aeabi_dsub>
 801544c:	0002      	movs	r2, r0
 801544e:	000b      	movs	r3, r1
 8015450:	0020      	movs	r0, r4
 8015452:	0029      	movs	r1, r5
 8015454:	f7ed fa00 	bl	8002858 <__aeabi_dsub>
 8015458:	4a3a      	ldr	r2, [pc, #232]	; (8015544 <__ieee754_pow+0x75c>)
 801545a:	4b39      	ldr	r3, [pc, #228]	; (8015540 <__ieee754_pow+0x758>)
 801545c:	f7ec ff3a 	bl	80022d4 <__aeabi_dmul>
 8015460:	4a39      	ldr	r2, [pc, #228]	; (8015548 <__ieee754_pow+0x760>)
 8015462:	0004      	movs	r4, r0
 8015464:	000d      	movs	r5, r1
 8015466:	0030      	movs	r0, r6
 8015468:	0039      	movs	r1, r7
 801546a:	4b38      	ldr	r3, [pc, #224]	; (801554c <__ieee754_pow+0x764>)
 801546c:	f7ec ff32 	bl	80022d4 <__aeabi_dmul>
 8015470:	0002      	movs	r2, r0
 8015472:	000b      	movs	r3, r1
 8015474:	0020      	movs	r0, r4
 8015476:	0029      	movs	r1, r5
 8015478:	f7eb ffd2 	bl	8001420 <__aeabi_dadd>
 801547c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801547e:	4b34      	ldr	r3, [pc, #208]	; (8015550 <__ieee754_pow+0x768>)
 8015480:	189b      	adds	r3, r3, r2
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	f7eb ffcb 	bl	8001420 <__aeabi_dadd>
 801548a:	9000      	str	r0, [sp, #0]
 801548c:	9101      	str	r1, [sp, #4]
 801548e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015490:	f7ed fdb8 	bl	8003004 <__aeabi_i2d>
 8015494:	0004      	movs	r4, r0
 8015496:	000d      	movs	r5, r1
 8015498:	9808      	ldr	r0, [sp, #32]
 801549a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801549c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801549e:	4b2d      	ldr	r3, [pc, #180]	; (8015554 <__ieee754_pow+0x76c>)
 80154a0:	189b      	adds	r3, r3, r2
 80154a2:	681e      	ldr	r6, [r3, #0]
 80154a4:	685f      	ldr	r7, [r3, #4]
 80154a6:	9a00      	ldr	r2, [sp, #0]
 80154a8:	9b01      	ldr	r3, [sp, #4]
 80154aa:	f7eb ffb9 	bl	8001420 <__aeabi_dadd>
 80154ae:	0032      	movs	r2, r6
 80154b0:	003b      	movs	r3, r7
 80154b2:	f7eb ffb5 	bl	8001420 <__aeabi_dadd>
 80154b6:	0022      	movs	r2, r4
 80154b8:	002b      	movs	r3, r5
 80154ba:	f7eb ffb1 	bl	8001420 <__aeabi_dadd>
 80154be:	2000      	movs	r0, #0
 80154c0:	0022      	movs	r2, r4
 80154c2:	002b      	movs	r3, r5
 80154c4:	9004      	str	r0, [sp, #16]
 80154c6:	9105      	str	r1, [sp, #20]
 80154c8:	f7ed f9c6 	bl	8002858 <__aeabi_dsub>
 80154cc:	0032      	movs	r2, r6
 80154ce:	003b      	movs	r3, r7
 80154d0:	f7ed f9c2 	bl	8002858 <__aeabi_dsub>
 80154d4:	9a08      	ldr	r2, [sp, #32]
 80154d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154d8:	f7ed f9be 	bl	8002858 <__aeabi_dsub>
 80154dc:	0002      	movs	r2, r0
 80154de:	000b      	movs	r3, r1
 80154e0:	9800      	ldr	r0, [sp, #0]
 80154e2:	9901      	ldr	r1, [sp, #4]
 80154e4:	e618      	b.n	8015118 <__ieee754_pow+0x330>
 80154e6:	2300      	movs	r3, #0
 80154e8:	4c03      	ldr	r4, [pc, #12]	; (80154f8 <__ieee754_pow+0x710>)
 80154ea:	e621      	b.n	8015130 <__ieee754_pow+0x348>
 80154ec:	7ff00000 	.word	0x7ff00000
 80154f0:	43400000 	.word	0x43400000
 80154f4:	fffffc01 	.word	0xfffffc01
 80154f8:	3ff00000 	.word	0x3ff00000
 80154fc:	0003988e 	.word	0x0003988e
 8015500:	000bb679 	.word	0x000bb679
 8015504:	fff00000 	.word	0xfff00000
 8015508:	08017838 	.word	0x08017838
 801550c:	4a454eef 	.word	0x4a454eef
 8015510:	3fca7e28 	.word	0x3fca7e28
 8015514:	93c9db65 	.word	0x93c9db65
 8015518:	3fcd864a 	.word	0x3fcd864a
 801551c:	a91d4101 	.word	0xa91d4101
 8015520:	3fd17460 	.word	0x3fd17460
 8015524:	518f264d 	.word	0x518f264d
 8015528:	3fd55555 	.word	0x3fd55555
 801552c:	db6fabff 	.word	0xdb6fabff
 8015530:	3fdb6db6 	.word	0x3fdb6db6
 8015534:	33333303 	.word	0x33333303
 8015538:	3fe33333 	.word	0x3fe33333
 801553c:	40080000 	.word	0x40080000
 8015540:	3feec709 	.word	0x3feec709
 8015544:	dc3a03fd 	.word	0xdc3a03fd
 8015548:	145b01f5 	.word	0x145b01f5
 801554c:	be3e2fe0 	.word	0xbe3e2fe0
 8015550:	08017858 	.word	0x08017858
 8015554:	08017848 	.word	0x08017848
 8015558:	4a90      	ldr	r2, [pc, #576]	; (801579c <__ieee754_pow+0x9b4>)
 801555a:	4b91      	ldr	r3, [pc, #580]	; (80157a0 <__ieee754_pow+0x9b8>)
 801555c:	0030      	movs	r0, r6
 801555e:	0039      	movs	r1, r7
 8015560:	f7eb ff5e 	bl	8001420 <__aeabi_dadd>
 8015564:	9a04      	ldr	r2, [sp, #16]
 8015566:	9b05      	ldr	r3, [sp, #20]
 8015568:	9002      	str	r0, [sp, #8]
 801556a:	9103      	str	r1, [sp, #12]
 801556c:	0028      	movs	r0, r5
 801556e:	0021      	movs	r1, r4
 8015570:	f7ed f972 	bl	8002858 <__aeabi_dsub>
 8015574:	0002      	movs	r2, r0
 8015576:	000b      	movs	r3, r1
 8015578:	9802      	ldr	r0, [sp, #8]
 801557a:	9903      	ldr	r1, [sp, #12]
 801557c:	f7ea ff80 	bl	8000480 <__aeabi_dcmpgt>
 8015580:	2800      	cmp	r0, #0
 8015582:	d000      	beq.n	8015586 <__ieee754_pow+0x79e>
 8015584:	e611      	b.n	80151aa <__ieee754_pow+0x3c2>
 8015586:	2100      	movs	r1, #0
 8015588:	4a86      	ldr	r2, [pc, #536]	; (80157a4 <__ieee754_pow+0x9bc>)
 801558a:	0063      	lsls	r3, r4, #1
 801558c:	085b      	lsrs	r3, r3, #1
 801558e:	9102      	str	r1, [sp, #8]
 8015590:	4293      	cmp	r3, r2
 8015592:	dd25      	ble.n	80155e0 <__ieee754_pow+0x7f8>
 8015594:	4a84      	ldr	r2, [pc, #528]	; (80157a8 <__ieee754_pow+0x9c0>)
 8015596:	151b      	asrs	r3, r3, #20
 8015598:	189b      	adds	r3, r3, r2
 801559a:	2280      	movs	r2, #128	; 0x80
 801559c:	0352      	lsls	r2, r2, #13
 801559e:	0011      	movs	r1, r2
 80155a0:	4119      	asrs	r1, r3
 80155a2:	190b      	adds	r3, r1, r4
 80155a4:	005c      	lsls	r4, r3, #1
 80155a6:	4981      	ldr	r1, [pc, #516]	; (80157ac <__ieee754_pow+0x9c4>)
 80155a8:	4d81      	ldr	r5, [pc, #516]	; (80157b0 <__ieee754_pow+0x9c8>)
 80155aa:	0d64      	lsrs	r4, r4, #21
 80155ac:	1864      	adds	r4, r4, r1
 80155ae:	4125      	asrs	r5, r4
 80155b0:	401d      	ands	r5, r3
 80155b2:	031b      	lsls	r3, r3, #12
 80155b4:	0b1b      	lsrs	r3, r3, #12
 80155b6:	4313      	orrs	r3, r2
 80155b8:	2214      	movs	r2, #20
 80155ba:	1b12      	subs	r2, r2, r4
 80155bc:	4113      	asrs	r3, r2
 80155be:	9302      	str	r3, [sp, #8]
 80155c0:	9b08      	ldr	r3, [sp, #32]
 80155c2:	2000      	movs	r0, #0
 80155c4:	0029      	movs	r1, r5
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	da02      	bge.n	80155d0 <__ieee754_pow+0x7e8>
 80155ca:	9b02      	ldr	r3, [sp, #8]
 80155cc:	425b      	negs	r3, r3
 80155ce:	9302      	str	r3, [sp, #8]
 80155d0:	0002      	movs	r2, r0
 80155d2:	000b      	movs	r3, r1
 80155d4:	9804      	ldr	r0, [sp, #16]
 80155d6:	9905      	ldr	r1, [sp, #20]
 80155d8:	f7ed f93e 	bl	8002858 <__aeabi_dsub>
 80155dc:	9006      	str	r0, [sp, #24]
 80155de:	9107      	str	r1, [sp, #28]
 80155e0:	9806      	ldr	r0, [sp, #24]
 80155e2:	9907      	ldr	r1, [sp, #28]
 80155e4:	0032      	movs	r2, r6
 80155e6:	003b      	movs	r3, r7
 80155e8:	f7eb ff1a 	bl	8001420 <__aeabi_dadd>
 80155ec:	2000      	movs	r0, #0
 80155ee:	2200      	movs	r2, #0
 80155f0:	4b70      	ldr	r3, [pc, #448]	; (80157b4 <__ieee754_pow+0x9cc>)
 80155f2:	9004      	str	r0, [sp, #16]
 80155f4:	9105      	str	r1, [sp, #20]
 80155f6:	f7ec fe6d 	bl	80022d4 <__aeabi_dmul>
 80155fa:	9a06      	ldr	r2, [sp, #24]
 80155fc:	9b07      	ldr	r3, [sp, #28]
 80155fe:	9008      	str	r0, [sp, #32]
 8015600:	9109      	str	r1, [sp, #36]	; 0x24
 8015602:	9804      	ldr	r0, [sp, #16]
 8015604:	9905      	ldr	r1, [sp, #20]
 8015606:	f7ed f927 	bl	8002858 <__aeabi_dsub>
 801560a:	0002      	movs	r2, r0
 801560c:	000b      	movs	r3, r1
 801560e:	0030      	movs	r0, r6
 8015610:	0039      	movs	r1, r7
 8015612:	f7ed f921 	bl	8002858 <__aeabi_dsub>
 8015616:	4a68      	ldr	r2, [pc, #416]	; (80157b8 <__ieee754_pow+0x9d0>)
 8015618:	4b68      	ldr	r3, [pc, #416]	; (80157bc <__ieee754_pow+0x9d4>)
 801561a:	f7ec fe5b 	bl	80022d4 <__aeabi_dmul>
 801561e:	4a68      	ldr	r2, [pc, #416]	; (80157c0 <__ieee754_pow+0x9d8>)
 8015620:	0004      	movs	r4, r0
 8015622:	000d      	movs	r5, r1
 8015624:	9804      	ldr	r0, [sp, #16]
 8015626:	9905      	ldr	r1, [sp, #20]
 8015628:	4b66      	ldr	r3, [pc, #408]	; (80157c4 <__ieee754_pow+0x9dc>)
 801562a:	f7ec fe53 	bl	80022d4 <__aeabi_dmul>
 801562e:	0002      	movs	r2, r0
 8015630:	000b      	movs	r3, r1
 8015632:	0020      	movs	r0, r4
 8015634:	0029      	movs	r1, r5
 8015636:	f7eb fef3 	bl	8001420 <__aeabi_dadd>
 801563a:	0004      	movs	r4, r0
 801563c:	000d      	movs	r5, r1
 801563e:	0002      	movs	r2, r0
 8015640:	000b      	movs	r3, r1
 8015642:	9808      	ldr	r0, [sp, #32]
 8015644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015646:	f7eb feeb 	bl	8001420 <__aeabi_dadd>
 801564a:	9a08      	ldr	r2, [sp, #32]
 801564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801564e:	0006      	movs	r6, r0
 8015650:	000f      	movs	r7, r1
 8015652:	f7ed f901 	bl	8002858 <__aeabi_dsub>
 8015656:	0002      	movs	r2, r0
 8015658:	000b      	movs	r3, r1
 801565a:	0020      	movs	r0, r4
 801565c:	0029      	movs	r1, r5
 801565e:	f7ed f8fb 	bl	8002858 <__aeabi_dsub>
 8015662:	0032      	movs	r2, r6
 8015664:	9004      	str	r0, [sp, #16]
 8015666:	9105      	str	r1, [sp, #20]
 8015668:	003b      	movs	r3, r7
 801566a:	0030      	movs	r0, r6
 801566c:	0039      	movs	r1, r7
 801566e:	f7ec fe31 	bl	80022d4 <__aeabi_dmul>
 8015672:	0004      	movs	r4, r0
 8015674:	000d      	movs	r5, r1
 8015676:	4a54      	ldr	r2, [pc, #336]	; (80157c8 <__ieee754_pow+0x9e0>)
 8015678:	4b54      	ldr	r3, [pc, #336]	; (80157cc <__ieee754_pow+0x9e4>)
 801567a:	f7ec fe2b 	bl	80022d4 <__aeabi_dmul>
 801567e:	4a54      	ldr	r2, [pc, #336]	; (80157d0 <__ieee754_pow+0x9e8>)
 8015680:	4b54      	ldr	r3, [pc, #336]	; (80157d4 <__ieee754_pow+0x9ec>)
 8015682:	f7ed f8e9 	bl	8002858 <__aeabi_dsub>
 8015686:	0022      	movs	r2, r4
 8015688:	002b      	movs	r3, r5
 801568a:	f7ec fe23 	bl	80022d4 <__aeabi_dmul>
 801568e:	4a52      	ldr	r2, [pc, #328]	; (80157d8 <__ieee754_pow+0x9f0>)
 8015690:	4b52      	ldr	r3, [pc, #328]	; (80157dc <__ieee754_pow+0x9f4>)
 8015692:	f7eb fec5 	bl	8001420 <__aeabi_dadd>
 8015696:	0022      	movs	r2, r4
 8015698:	002b      	movs	r3, r5
 801569a:	f7ec fe1b 	bl	80022d4 <__aeabi_dmul>
 801569e:	4a50      	ldr	r2, [pc, #320]	; (80157e0 <__ieee754_pow+0x9f8>)
 80156a0:	4b50      	ldr	r3, [pc, #320]	; (80157e4 <__ieee754_pow+0x9fc>)
 80156a2:	f7ed f8d9 	bl	8002858 <__aeabi_dsub>
 80156a6:	0022      	movs	r2, r4
 80156a8:	002b      	movs	r3, r5
 80156aa:	f7ec fe13 	bl	80022d4 <__aeabi_dmul>
 80156ae:	4a4e      	ldr	r2, [pc, #312]	; (80157e8 <__ieee754_pow+0xa00>)
 80156b0:	4b4e      	ldr	r3, [pc, #312]	; (80157ec <__ieee754_pow+0xa04>)
 80156b2:	f7eb feb5 	bl	8001420 <__aeabi_dadd>
 80156b6:	0022      	movs	r2, r4
 80156b8:	002b      	movs	r3, r5
 80156ba:	f7ec fe0b 	bl	80022d4 <__aeabi_dmul>
 80156be:	0002      	movs	r2, r0
 80156c0:	000b      	movs	r3, r1
 80156c2:	0030      	movs	r0, r6
 80156c4:	0039      	movs	r1, r7
 80156c6:	f7ed f8c7 	bl	8002858 <__aeabi_dsub>
 80156ca:	0004      	movs	r4, r0
 80156cc:	000d      	movs	r5, r1
 80156ce:	0002      	movs	r2, r0
 80156d0:	000b      	movs	r3, r1
 80156d2:	0030      	movs	r0, r6
 80156d4:	0039      	movs	r1, r7
 80156d6:	f7ec fdfd 	bl	80022d4 <__aeabi_dmul>
 80156da:	2380      	movs	r3, #128	; 0x80
 80156dc:	9006      	str	r0, [sp, #24]
 80156de:	9107      	str	r1, [sp, #28]
 80156e0:	2200      	movs	r2, #0
 80156e2:	0020      	movs	r0, r4
 80156e4:	0029      	movs	r1, r5
 80156e6:	05db      	lsls	r3, r3, #23
 80156e8:	f7ed f8b6 	bl	8002858 <__aeabi_dsub>
 80156ec:	0002      	movs	r2, r0
 80156ee:	000b      	movs	r3, r1
 80156f0:	9806      	ldr	r0, [sp, #24]
 80156f2:	9907      	ldr	r1, [sp, #28]
 80156f4:	f7ec f9f4 	bl	8001ae0 <__aeabi_ddiv>
 80156f8:	9a04      	ldr	r2, [sp, #16]
 80156fa:	9b05      	ldr	r3, [sp, #20]
 80156fc:	0004      	movs	r4, r0
 80156fe:	000d      	movs	r5, r1
 8015700:	0030      	movs	r0, r6
 8015702:	0039      	movs	r1, r7
 8015704:	f7ec fde6 	bl	80022d4 <__aeabi_dmul>
 8015708:	9a04      	ldr	r2, [sp, #16]
 801570a:	9b05      	ldr	r3, [sp, #20]
 801570c:	f7eb fe88 	bl	8001420 <__aeabi_dadd>
 8015710:	0002      	movs	r2, r0
 8015712:	000b      	movs	r3, r1
 8015714:	0020      	movs	r0, r4
 8015716:	0029      	movs	r1, r5
 8015718:	f7ed f89e 	bl	8002858 <__aeabi_dsub>
 801571c:	0032      	movs	r2, r6
 801571e:	003b      	movs	r3, r7
 8015720:	f7ed f89a 	bl	8002858 <__aeabi_dsub>
 8015724:	0002      	movs	r2, r0
 8015726:	000b      	movs	r3, r1
 8015728:	2000      	movs	r0, #0
 801572a:	4931      	ldr	r1, [pc, #196]	; (80157f0 <__ieee754_pow+0xa08>)
 801572c:	f7ed f894 	bl	8002858 <__aeabi_dsub>
 8015730:	9b02      	ldr	r3, [sp, #8]
 8015732:	051b      	lsls	r3, r3, #20
 8015734:	185b      	adds	r3, r3, r1
 8015736:	151a      	asrs	r2, r3, #20
 8015738:	2a00      	cmp	r2, #0
 801573a:	dc25      	bgt.n	8015788 <__ieee754_pow+0x9a0>
 801573c:	9a02      	ldr	r2, [sp, #8]
 801573e:	f000 f861 	bl	8015804 <scalbn>
 8015742:	9a00      	ldr	r2, [sp, #0]
 8015744:	9b01      	ldr	r3, [sp, #4]
 8015746:	f7ff fc33 	bl	8014fb0 <__ieee754_pow+0x1c8>
 801574a:	4a2a      	ldr	r2, [pc, #168]	; (80157f4 <__ieee754_pow+0xa0c>)
 801574c:	004b      	lsls	r3, r1, #1
 801574e:	085b      	lsrs	r3, r3, #1
 8015750:	4293      	cmp	r3, r2
 8015752:	dc00      	bgt.n	8015756 <__ieee754_pow+0x96e>
 8015754:	e717      	b.n	8015586 <__ieee754_pow+0x79e>
 8015756:	4b28      	ldr	r3, [pc, #160]	; (80157f8 <__ieee754_pow+0xa10>)
 8015758:	18cb      	adds	r3, r1, r3
 801575a:	4303      	orrs	r3, r0
 801575c:	d008      	beq.n	8015770 <__ieee754_pow+0x988>
 801575e:	9800      	ldr	r0, [sp, #0]
 8015760:	9901      	ldr	r1, [sp, #4]
 8015762:	2300      	movs	r3, #0
 8015764:	2200      	movs	r2, #0
 8015766:	f7ea fe77 	bl	8000458 <__aeabi_dcmplt>
 801576a:	1e43      	subs	r3, r0, #1
 801576c:	4198      	sbcs	r0, r3
 801576e:	e462      	b.n	8015036 <__ieee754_pow+0x24e>
 8015770:	9a04      	ldr	r2, [sp, #16]
 8015772:	9b05      	ldr	r3, [sp, #20]
 8015774:	f7ed f870 	bl	8002858 <__aeabi_dsub>
 8015778:	0032      	movs	r2, r6
 801577a:	003b      	movs	r3, r7
 801577c:	f7ea fe8a 	bl	8000494 <__aeabi_dcmpge>
 8015780:	2800      	cmp	r0, #0
 8015782:	d100      	bne.n	8015786 <__ieee754_pow+0x99e>
 8015784:	e6ff      	b.n	8015586 <__ieee754_pow+0x79e>
 8015786:	e7ea      	b.n	801575e <__ieee754_pow+0x976>
 8015788:	0019      	movs	r1, r3
 801578a:	e7da      	b.n	8015742 <__ieee754_pow+0x95a>
 801578c:	2300      	movs	r3, #0
 801578e:	4c18      	ldr	r4, [pc, #96]	; (80157f0 <__ieee754_pow+0xa08>)
 8015790:	f7ff fbf1 	bl	8014f76 <__ieee754_pow+0x18e>
 8015794:	2300      	movs	r3, #0
 8015796:	2400      	movs	r4, #0
 8015798:	f7ff fbed 	bl	8014f76 <__ieee754_pow+0x18e>
 801579c:	652b82fe 	.word	0x652b82fe
 80157a0:	3c971547 	.word	0x3c971547
 80157a4:	3fe00000 	.word	0x3fe00000
 80157a8:	fffffc02 	.word	0xfffffc02
 80157ac:	fffffc01 	.word	0xfffffc01
 80157b0:	fff00000 	.word	0xfff00000
 80157b4:	3fe62e43 	.word	0x3fe62e43
 80157b8:	fefa39ef 	.word	0xfefa39ef
 80157bc:	3fe62e42 	.word	0x3fe62e42
 80157c0:	0ca86c39 	.word	0x0ca86c39
 80157c4:	be205c61 	.word	0xbe205c61
 80157c8:	72bea4d0 	.word	0x72bea4d0
 80157cc:	3e663769 	.word	0x3e663769
 80157d0:	c5d26bf1 	.word	0xc5d26bf1
 80157d4:	3ebbbd41 	.word	0x3ebbbd41
 80157d8:	af25de2c 	.word	0xaf25de2c
 80157dc:	3f11566a 	.word	0x3f11566a
 80157e0:	16bebd93 	.word	0x16bebd93
 80157e4:	3f66c16c 	.word	0x3f66c16c
 80157e8:	5555553e 	.word	0x5555553e
 80157ec:	3fc55555 	.word	0x3fc55555
 80157f0:	3ff00000 	.word	0x3ff00000
 80157f4:	4090cbff 	.word	0x4090cbff
 80157f8:	3f6f3400 	.word	0x3f6f3400

080157fc <fabs>:
 80157fc:	0049      	lsls	r1, r1, #1
 80157fe:	084b      	lsrs	r3, r1, #1
 8015800:	0019      	movs	r1, r3
 8015802:	4770      	bx	lr

08015804 <scalbn>:
 8015804:	b570      	push	{r4, r5, r6, lr}
 8015806:	0014      	movs	r4, r2
 8015808:	004a      	lsls	r2, r1, #1
 801580a:	000b      	movs	r3, r1
 801580c:	0d52      	lsrs	r2, r2, #21
 801580e:	d10f      	bne.n	8015830 <scalbn+0x2c>
 8015810:	004b      	lsls	r3, r1, #1
 8015812:	085b      	lsrs	r3, r3, #1
 8015814:	4303      	orrs	r3, r0
 8015816:	d011      	beq.n	801583c <scalbn+0x38>
 8015818:	4b22      	ldr	r3, [pc, #136]	; (80158a4 <scalbn+0xa0>)
 801581a:	2200      	movs	r2, #0
 801581c:	f7ec fd5a 	bl	80022d4 <__aeabi_dmul>
 8015820:	4b21      	ldr	r3, [pc, #132]	; (80158a8 <scalbn+0xa4>)
 8015822:	429c      	cmp	r4, r3
 8015824:	da0b      	bge.n	801583e <scalbn+0x3a>
 8015826:	4a21      	ldr	r2, [pc, #132]	; (80158ac <scalbn+0xa8>)
 8015828:	4b21      	ldr	r3, [pc, #132]	; (80158b0 <scalbn+0xac>)
 801582a:	f7ec fd53 	bl	80022d4 <__aeabi_dmul>
 801582e:	e005      	b.n	801583c <scalbn+0x38>
 8015830:	4d20      	ldr	r5, [pc, #128]	; (80158b4 <scalbn+0xb0>)
 8015832:	42aa      	cmp	r2, r5
 8015834:	d107      	bne.n	8015846 <scalbn+0x42>
 8015836:	0002      	movs	r2, r0
 8015838:	f7eb fdf2 	bl	8001420 <__aeabi_dadd>
 801583c:	bd70      	pop	{r4, r5, r6, pc}
 801583e:	000b      	movs	r3, r1
 8015840:	004a      	lsls	r2, r1, #1
 8015842:	0d52      	lsrs	r2, r2, #21
 8015844:	3a36      	subs	r2, #54	; 0x36
 8015846:	4d1c      	ldr	r5, [pc, #112]	; (80158b8 <scalbn+0xb4>)
 8015848:	42ac      	cmp	r4, r5
 801584a:	dd0a      	ble.n	8015862 <scalbn+0x5e>
 801584c:	4c1b      	ldr	r4, [pc, #108]	; (80158bc <scalbn+0xb8>)
 801584e:	4d1c      	ldr	r5, [pc, #112]	; (80158c0 <scalbn+0xbc>)
 8015850:	2900      	cmp	r1, #0
 8015852:	da01      	bge.n	8015858 <scalbn+0x54>
 8015854:	4c19      	ldr	r4, [pc, #100]	; (80158bc <scalbn+0xb8>)
 8015856:	4d1b      	ldr	r5, [pc, #108]	; (80158c4 <scalbn+0xc0>)
 8015858:	4a18      	ldr	r2, [pc, #96]	; (80158bc <scalbn+0xb8>)
 801585a:	4b19      	ldr	r3, [pc, #100]	; (80158c0 <scalbn+0xbc>)
 801585c:	0020      	movs	r0, r4
 801585e:	0029      	movs	r1, r5
 8015860:	e7e3      	b.n	801582a <scalbn+0x26>
 8015862:	18a2      	adds	r2, r4, r2
 8015864:	4c18      	ldr	r4, [pc, #96]	; (80158c8 <scalbn+0xc4>)
 8015866:	42a2      	cmp	r2, r4
 8015868:	dcf0      	bgt.n	801584c <scalbn+0x48>
 801586a:	2a00      	cmp	r2, #0
 801586c:	dd05      	ble.n	801587a <scalbn+0x76>
 801586e:	4c17      	ldr	r4, [pc, #92]	; (80158cc <scalbn+0xc8>)
 8015870:	0512      	lsls	r2, r2, #20
 8015872:	4023      	ands	r3, r4
 8015874:	4313      	orrs	r3, r2
 8015876:	0019      	movs	r1, r3
 8015878:	e7e0      	b.n	801583c <scalbn+0x38>
 801587a:	0014      	movs	r4, r2
 801587c:	3435      	adds	r4, #53	; 0x35
 801587e:	da08      	bge.n	8015892 <scalbn+0x8e>
 8015880:	4c0a      	ldr	r4, [pc, #40]	; (80158ac <scalbn+0xa8>)
 8015882:	4d0b      	ldr	r5, [pc, #44]	; (80158b0 <scalbn+0xac>)
 8015884:	2900      	cmp	r1, #0
 8015886:	da01      	bge.n	801588c <scalbn+0x88>
 8015888:	4c08      	ldr	r4, [pc, #32]	; (80158ac <scalbn+0xa8>)
 801588a:	4d11      	ldr	r5, [pc, #68]	; (80158d0 <scalbn+0xcc>)
 801588c:	4a07      	ldr	r2, [pc, #28]	; (80158ac <scalbn+0xa8>)
 801588e:	4b08      	ldr	r3, [pc, #32]	; (80158b0 <scalbn+0xac>)
 8015890:	e7e4      	b.n	801585c <scalbn+0x58>
 8015892:	4c0e      	ldr	r4, [pc, #56]	; (80158cc <scalbn+0xc8>)
 8015894:	3236      	adds	r2, #54	; 0x36
 8015896:	4023      	ands	r3, r4
 8015898:	0512      	lsls	r2, r2, #20
 801589a:	431a      	orrs	r2, r3
 801589c:	0011      	movs	r1, r2
 801589e:	4b0d      	ldr	r3, [pc, #52]	; (80158d4 <scalbn+0xd0>)
 80158a0:	2200      	movs	r2, #0
 80158a2:	e7c2      	b.n	801582a <scalbn+0x26>
 80158a4:	43500000 	.word	0x43500000
 80158a8:	ffff3cb0 	.word	0xffff3cb0
 80158ac:	c2f8f359 	.word	0xc2f8f359
 80158b0:	01a56e1f 	.word	0x01a56e1f
 80158b4:	000007ff 	.word	0x000007ff
 80158b8:	0000c350 	.word	0x0000c350
 80158bc:	8800759c 	.word	0x8800759c
 80158c0:	7e37e43c 	.word	0x7e37e43c
 80158c4:	fe37e43c 	.word	0xfe37e43c
 80158c8:	000007fe 	.word	0x000007fe
 80158cc:	800fffff 	.word	0x800fffff
 80158d0:	81a56e1f 	.word	0x81a56e1f
 80158d4:	3c900000 	.word	0x3c900000

080158d8 <with_errno>:
 80158d8:	b570      	push	{r4, r5, r6, lr}
 80158da:	000d      	movs	r5, r1
 80158dc:	0016      	movs	r6, r2
 80158de:	0004      	movs	r4, r0
 80158e0:	f7fc fd18 	bl	8012314 <__errno>
 80158e4:	0029      	movs	r1, r5
 80158e6:	6006      	str	r6, [r0, #0]
 80158e8:	0020      	movs	r0, r4
 80158ea:	bd70      	pop	{r4, r5, r6, pc}

080158ec <xflow>:
 80158ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158ee:	0015      	movs	r5, r2
 80158f0:	001c      	movs	r4, r3
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d010      	beq.n	8015918 <xflow+0x2c>
 80158f6:	2380      	movs	r3, #128	; 0x80
 80158f8:	0010      	movs	r0, r2
 80158fa:	061b      	lsls	r3, r3, #24
 80158fc:	18e1      	adds	r1, r4, r3
 80158fe:	9000      	str	r0, [sp, #0]
 8015900:	9101      	str	r1, [sp, #4]
 8015902:	9a00      	ldr	r2, [sp, #0]
 8015904:	9b01      	ldr	r3, [sp, #4]
 8015906:	0028      	movs	r0, r5
 8015908:	0021      	movs	r1, r4
 801590a:	f7ec fce3 	bl	80022d4 <__aeabi_dmul>
 801590e:	2222      	movs	r2, #34	; 0x22
 8015910:	f7ff ffe2 	bl	80158d8 <with_errno>
 8015914:	b003      	add	sp, #12
 8015916:	bd30      	pop	{r4, r5, pc}
 8015918:	0010      	movs	r0, r2
 801591a:	0019      	movs	r1, r3
 801591c:	e7ef      	b.n	80158fe <xflow+0x12>

0801591e <__math_uflow>:
 801591e:	2380      	movs	r3, #128	; 0x80
 8015920:	b510      	push	{r4, lr}
 8015922:	2200      	movs	r2, #0
 8015924:	055b      	lsls	r3, r3, #21
 8015926:	f7ff ffe1 	bl	80158ec <xflow>
 801592a:	bd10      	pop	{r4, pc}

0801592c <__math_oflow>:
 801592c:	23e0      	movs	r3, #224	; 0xe0
 801592e:	b510      	push	{r4, lr}
 8015930:	2200      	movs	r2, #0
 8015932:	05db      	lsls	r3, r3, #23
 8015934:	f7ff ffda 	bl	80158ec <xflow>
 8015938:	bd10      	pop	{r4, pc}
	...

0801593c <__ieee754_sqrt>:
 801593c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801593e:	000a      	movs	r2, r1
 8015940:	000c      	movs	r4, r1
 8015942:	496f      	ldr	r1, [pc, #444]	; (8015b00 <__ieee754_sqrt+0x1c4>)
 8015944:	0005      	movs	r5, r0
 8015946:	0003      	movs	r3, r0
 8015948:	0008      	movs	r0, r1
 801594a:	b087      	sub	sp, #28
 801594c:	4020      	ands	r0, r4
 801594e:	4288      	cmp	r0, r1
 8015950:	d111      	bne.n	8015976 <__ieee754_sqrt+0x3a>
 8015952:	002a      	movs	r2, r5
 8015954:	0023      	movs	r3, r4
 8015956:	0028      	movs	r0, r5
 8015958:	0021      	movs	r1, r4
 801595a:	f7ec fcbb 	bl	80022d4 <__aeabi_dmul>
 801595e:	0002      	movs	r2, r0
 8015960:	000b      	movs	r3, r1
 8015962:	0028      	movs	r0, r5
 8015964:	0021      	movs	r1, r4
 8015966:	f7eb fd5b 	bl	8001420 <__aeabi_dadd>
 801596a:	0005      	movs	r5, r0
 801596c:	000c      	movs	r4, r1
 801596e:	0028      	movs	r0, r5
 8015970:	0021      	movs	r1, r4
 8015972:	b007      	add	sp, #28
 8015974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015976:	2c00      	cmp	r4, #0
 8015978:	dc12      	bgt.n	80159a0 <__ieee754_sqrt+0x64>
 801597a:	0061      	lsls	r1, r4, #1
 801597c:	0849      	lsrs	r1, r1, #1
 801597e:	4329      	orrs	r1, r5
 8015980:	d0f5      	beq.n	801596e <__ieee754_sqrt+0x32>
 8015982:	2100      	movs	r1, #0
 8015984:	428c      	cmp	r4, r1
 8015986:	d100      	bne.n	801598a <__ieee754_sqrt+0x4e>
 8015988:	e09f      	b.n	8015aca <__ieee754_sqrt+0x18e>
 801598a:	002a      	movs	r2, r5
 801598c:	0023      	movs	r3, r4
 801598e:	0028      	movs	r0, r5
 8015990:	0021      	movs	r1, r4
 8015992:	f7ec ff61 	bl	8002858 <__aeabi_dsub>
 8015996:	0002      	movs	r2, r0
 8015998:	000b      	movs	r3, r1
 801599a:	f7ec f8a1 	bl	8001ae0 <__aeabi_ddiv>
 801599e:	e7e4      	b.n	801596a <__ieee754_sqrt+0x2e>
 80159a0:	1521      	asrs	r1, r4, #20
 80159a2:	d100      	bne.n	80159a6 <__ieee754_sqrt+0x6a>
 80159a4:	e091      	b.n	8015aca <__ieee754_sqrt+0x18e>
 80159a6:	4857      	ldr	r0, [pc, #348]	; (8015b04 <__ieee754_sqrt+0x1c8>)
 80159a8:	0312      	lsls	r2, r2, #12
 80159aa:	180c      	adds	r4, r1, r0
 80159ac:	2080      	movs	r0, #128	; 0x80
 80159ae:	0b12      	lsrs	r2, r2, #12
 80159b0:	0340      	lsls	r0, r0, #13
 80159b2:	4310      	orrs	r0, r2
 80159b4:	07c9      	lsls	r1, r1, #31
 80159b6:	d403      	bmi.n	80159c0 <__ieee754_sqrt+0x84>
 80159b8:	0fda      	lsrs	r2, r3, #31
 80159ba:	0040      	lsls	r0, r0, #1
 80159bc:	1810      	adds	r0, r2, r0
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	2500      	movs	r5, #0
 80159c2:	1062      	asrs	r2, r4, #1
 80159c4:	0040      	lsls	r0, r0, #1
 80159c6:	2480      	movs	r4, #128	; 0x80
 80159c8:	9205      	str	r2, [sp, #20]
 80159ca:	0fda      	lsrs	r2, r3, #31
 80159cc:	1812      	adds	r2, r2, r0
 80159ce:	0029      	movs	r1, r5
 80159d0:	2016      	movs	r0, #22
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	03a4      	lsls	r4, r4, #14
 80159d6:	190e      	adds	r6, r1, r4
 80159d8:	4296      	cmp	r6, r2
 80159da:	dc02      	bgt.n	80159e2 <__ieee754_sqrt+0xa6>
 80159dc:	1931      	adds	r1, r6, r4
 80159de:	1b92      	subs	r2, r2, r6
 80159e0:	192d      	adds	r5, r5, r4
 80159e2:	0fde      	lsrs	r6, r3, #31
 80159e4:	0052      	lsls	r2, r2, #1
 80159e6:	3801      	subs	r0, #1
 80159e8:	18b2      	adds	r2, r6, r2
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	0864      	lsrs	r4, r4, #1
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d1f1      	bne.n	80159d6 <__ieee754_sqrt+0x9a>
 80159f2:	2620      	movs	r6, #32
 80159f4:	2780      	movs	r7, #128	; 0x80
 80159f6:	0004      	movs	r4, r0
 80159f8:	9604      	str	r6, [sp, #16]
 80159fa:	063f      	lsls	r7, r7, #24
 80159fc:	183e      	adds	r6, r7, r0
 80159fe:	46b4      	mov	ip, r6
 8015a00:	428a      	cmp	r2, r1
 8015a02:	dc02      	bgt.n	8015a0a <__ieee754_sqrt+0xce>
 8015a04:	d114      	bne.n	8015a30 <__ieee754_sqrt+0xf4>
 8015a06:	429e      	cmp	r6, r3
 8015a08:	d812      	bhi.n	8015a30 <__ieee754_sqrt+0xf4>
 8015a0a:	4660      	mov	r0, ip
 8015a0c:	4666      	mov	r6, ip
 8015a0e:	19c0      	adds	r0, r0, r7
 8015a10:	9100      	str	r1, [sp, #0]
 8015a12:	2e00      	cmp	r6, #0
 8015a14:	da03      	bge.n	8015a1e <__ieee754_sqrt+0xe2>
 8015a16:	43c6      	mvns	r6, r0
 8015a18:	0ff6      	lsrs	r6, r6, #31
 8015a1a:	198e      	adds	r6, r1, r6
 8015a1c:	9600      	str	r6, [sp, #0]
 8015a1e:	1a52      	subs	r2, r2, r1
 8015a20:	4563      	cmp	r3, ip
 8015a22:	4189      	sbcs	r1, r1
 8015a24:	4249      	negs	r1, r1
 8015a26:	1a52      	subs	r2, r2, r1
 8015a28:	4661      	mov	r1, ip
 8015a2a:	1a5b      	subs	r3, r3, r1
 8015a2c:	9900      	ldr	r1, [sp, #0]
 8015a2e:	19e4      	adds	r4, r4, r7
 8015a30:	0fde      	lsrs	r6, r3, #31
 8015a32:	0052      	lsls	r2, r2, #1
 8015a34:	18b2      	adds	r2, r6, r2
 8015a36:	9e04      	ldr	r6, [sp, #16]
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	3e01      	subs	r6, #1
 8015a3c:	087f      	lsrs	r7, r7, #1
 8015a3e:	9604      	str	r6, [sp, #16]
 8015a40:	2e00      	cmp	r6, #0
 8015a42:	d1db      	bne.n	80159fc <__ieee754_sqrt+0xc0>
 8015a44:	431a      	orrs	r2, r3
 8015a46:	d01f      	beq.n	8015a88 <__ieee754_sqrt+0x14c>
 8015a48:	4e2f      	ldr	r6, [pc, #188]	; (8015b08 <__ieee754_sqrt+0x1cc>)
 8015a4a:	4f30      	ldr	r7, [pc, #192]	; (8015b0c <__ieee754_sqrt+0x1d0>)
 8015a4c:	6830      	ldr	r0, [r6, #0]
 8015a4e:	6871      	ldr	r1, [r6, #4]
 8015a50:	683a      	ldr	r2, [r7, #0]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	9200      	str	r2, [sp, #0]
 8015a56:	9301      	str	r3, [sp, #4]
 8015a58:	6832      	ldr	r2, [r6, #0]
 8015a5a:	6873      	ldr	r3, [r6, #4]
 8015a5c:	9202      	str	r2, [sp, #8]
 8015a5e:	9303      	str	r3, [sp, #12]
 8015a60:	9a00      	ldr	r2, [sp, #0]
 8015a62:	9b01      	ldr	r3, [sp, #4]
 8015a64:	f7ec fef8 	bl	8002858 <__aeabi_dsub>
 8015a68:	0002      	movs	r2, r0
 8015a6a:	000b      	movs	r3, r1
 8015a6c:	9802      	ldr	r0, [sp, #8]
 8015a6e:	9903      	ldr	r1, [sp, #12]
 8015a70:	f7ea fcfc 	bl	800046c <__aeabi_dcmple>
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d007      	beq.n	8015a88 <__ieee754_sqrt+0x14c>
 8015a78:	6830      	ldr	r0, [r6, #0]
 8015a7a:	6871      	ldr	r1, [r6, #4]
 8015a7c:	683a      	ldr	r2, [r7, #0]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	1c67      	adds	r7, r4, #1
 8015a82:	d127      	bne.n	8015ad4 <__ieee754_sqrt+0x198>
 8015a84:	9c04      	ldr	r4, [sp, #16]
 8015a86:	3501      	adds	r5, #1
 8015a88:	4b21      	ldr	r3, [pc, #132]	; (8015b10 <__ieee754_sqrt+0x1d4>)
 8015a8a:	1069      	asrs	r1, r5, #1
 8015a8c:	18c9      	adds	r1, r1, r3
 8015a8e:	0864      	lsrs	r4, r4, #1
 8015a90:	07ed      	lsls	r5, r5, #31
 8015a92:	d502      	bpl.n	8015a9a <__ieee754_sqrt+0x15e>
 8015a94:	2380      	movs	r3, #128	; 0x80
 8015a96:	061b      	lsls	r3, r3, #24
 8015a98:	431c      	orrs	r4, r3
 8015a9a:	9b05      	ldr	r3, [sp, #20]
 8015a9c:	0025      	movs	r5, r4
 8015a9e:	0518      	lsls	r0, r3, #20
 8015aa0:	1843      	adds	r3, r0, r1
 8015aa2:	001c      	movs	r4, r3
 8015aa4:	e763      	b.n	801596e <__ieee754_sqrt+0x32>
 8015aa6:	0ada      	lsrs	r2, r3, #11
 8015aa8:	3815      	subs	r0, #21
 8015aaa:	055b      	lsls	r3, r3, #21
 8015aac:	2a00      	cmp	r2, #0
 8015aae:	d0fa      	beq.n	8015aa6 <__ieee754_sqrt+0x16a>
 8015ab0:	2480      	movs	r4, #128	; 0x80
 8015ab2:	0364      	lsls	r4, r4, #13
 8015ab4:	4222      	tst	r2, r4
 8015ab6:	d00a      	beq.n	8015ace <__ieee754_sqrt+0x192>
 8015ab8:	2420      	movs	r4, #32
 8015aba:	001e      	movs	r6, r3
 8015abc:	1a64      	subs	r4, r4, r1
 8015abe:	40e6      	lsrs	r6, r4
 8015ac0:	1e4d      	subs	r5, r1, #1
 8015ac2:	408b      	lsls	r3, r1
 8015ac4:	4332      	orrs	r2, r6
 8015ac6:	1b41      	subs	r1, r0, r5
 8015ac8:	e76d      	b.n	80159a6 <__ieee754_sqrt+0x6a>
 8015aca:	2000      	movs	r0, #0
 8015acc:	e7ee      	b.n	8015aac <__ieee754_sqrt+0x170>
 8015ace:	0052      	lsls	r2, r2, #1
 8015ad0:	3101      	adds	r1, #1
 8015ad2:	e7ef      	b.n	8015ab4 <__ieee754_sqrt+0x178>
 8015ad4:	f7eb fca4 	bl	8001420 <__aeabi_dadd>
 8015ad8:	6877      	ldr	r7, [r6, #4]
 8015ada:	6836      	ldr	r6, [r6, #0]
 8015adc:	0002      	movs	r2, r0
 8015ade:	000b      	movs	r3, r1
 8015ae0:	0030      	movs	r0, r6
 8015ae2:	0039      	movs	r1, r7
 8015ae4:	f7ea fcb8 	bl	8000458 <__aeabi_dcmplt>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d004      	beq.n	8015af6 <__ieee754_sqrt+0x1ba>
 8015aec:	3402      	adds	r4, #2
 8015aee:	4263      	negs	r3, r4
 8015af0:	4163      	adcs	r3, r4
 8015af2:	18ed      	adds	r5, r5, r3
 8015af4:	e7c8      	b.n	8015a88 <__ieee754_sqrt+0x14c>
 8015af6:	2301      	movs	r3, #1
 8015af8:	3401      	adds	r4, #1
 8015afa:	439c      	bics	r4, r3
 8015afc:	e7c4      	b.n	8015a88 <__ieee754_sqrt+0x14c>
 8015afe:	46c0      	nop			; (mov r8, r8)
 8015b00:	7ff00000 	.word	0x7ff00000
 8015b04:	fffffc01 	.word	0xfffffc01
 8015b08:	200002b8 	.word	0x200002b8
 8015b0c:	200002c0 	.word	0x200002c0
 8015b10:	3fe00000 	.word	0x3fe00000

08015b14 <_init>:
 8015b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b16:	46c0      	nop			; (mov r8, r8)
 8015b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b1a:	bc08      	pop	{r3}
 8015b1c:	469e      	mov	lr, r3
 8015b1e:	4770      	bx	lr

08015b20 <_fini>:
 8015b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b22:	46c0      	nop			; (mov r8, r8)
 8015b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b26:	bc08      	pop	{r3}
 8015b28:	469e      	mov	lr, r3
 8015b2a:	4770      	bx	lr
